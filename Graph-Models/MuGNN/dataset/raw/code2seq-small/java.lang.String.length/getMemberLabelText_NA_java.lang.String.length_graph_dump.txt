Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_23 $$ String shortClassName = getLabelText(project, manager, className, context)[ FD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_24 $$ buffer.append(shortClassName)[ CD ]
Line_26 $$ if (tokenizer.hasMoreElements()) -->Line_30 $$ buffer.append(",")[ CD ]
Line_19 $$ if (index2 < 0)-->Line_20 $$ index2 = param.length()[ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_4 $$ if (parenthIndex < 0)[ FD ]
Line_31 $$ if (spaceAfterComma) -->Line_32 $$ buffer.append(" ")[ CD ]
Line_21 $$ int index = Math.min(index1, index2)-->Line_22 $$ String className = param.substring(0, index).trim()[ FD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_3 $$ int parenthIndex = memberText.indexOf('(')[ FD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_19 $$ if (index2 < 0)[ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_11 $$ boolean spaceAfterComma = JavaDocCodeStyle.getInstance(project).spaceAfterComma()[ CD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_16 $$ if (index1 < 0)[ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_6 $$ if (!StringUtil.endsWithChar(memberText, ')'))[ CD ]
Line_12 $$ StringTokenizer tokenizer = new StringTokenizer(parms, ",")-->Line_14 $$ String param = tokenizer.nextToken().trim()[ FD ]
Line_9 $$ StringBuffer buffer = new StringBuffer()-->Line_25 $$ buffer.append(param.substring(className.length()))[ FD ]
Line_4 $$ if (parenthIndex < 0)-->Line_5 $$ return memberText[ CD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_15 $$ int index1 = param.indexOf('[')[ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_10 $$ boolean spaceBeforeComma = JavaDocCodeStyle.getInstance(project).spaceBeforeComma()[ FD ]
Line_14 $$ String param = tokenizer.nextToken().trim()-->Line_20 $$ index2 = param.length()[ FD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_8 $$ String parms = memberText.substring(parenthIndex + 1, memberText.length() - 1)[ FD ]
Line_12 $$ StringTokenizer tokenizer = new StringTokenizer(parms, ",")-->Line_26 $$ if (tokenizer.hasMoreElements()) [ FD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_3 $$ int parenthIndex = memberText.indexOf('(')[ CD ]
Line_9 $$ StringBuffer buffer = new StringBuffer()-->Line_30 $$ buffer.append(",")[ FD ]
Line_9 $$ StringBuffer buffer = new StringBuffer()-->Line_36 $$ return memberText.substring(0, parenthIndex + 1) + buffer.toString() + ")"[ FD ]
Line_12 $$ StringTokenizer tokenizer = new StringTokenizer(parms, ",")-->Line_13 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_15 $$ int index1 = param.indexOf('[')-->Line_21 $$ int index = Math.min(index1, index2)[ FD ]
Line_15 $$ int index1 = param.indexOf('[')-->Line_17 $$ index1 = param.length()[ FD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_13 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_26 $$ if (tokenizer.hasMoreElements()) -->Line_31 $$ if (spaceAfterComma) [ CD ]
Line_18 $$ int index2 = param.indexOf(' ')-->Line_19 $$ if (index2 < 0)[ FD ]
Line_23 $$ String shortClassName = getLabelText(project, manager, className, context)-->Line_24 $$ buffer.append(shortClassName)[ FD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_36 $$ return memberText.substring(0, parenthIndex + 1) + buffer.toString() + ")"[ CD ]
Line_14 $$ String param = tokenizer.nextToken().trim()-->Line_18 $$ int index2 = param.indexOf(' ')[ FD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_10 $$ boolean spaceBeforeComma = JavaDocCodeStyle.getInstance(project).spaceBeforeComma()[ CD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_25 $$ buffer.append(param.substring(className.length()))[ CD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_18 $$ int index2 = param.indexOf(' ')[ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_4 $$ if (parenthIndex < 0)[ CD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_22 $$ String className = param.substring(0, index).trim()[ CD ]
Line_3 $$ int parenthIndex = memberText.indexOf('(')-->Line_4 $$ if (parenthIndex < 0)[ FD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_9 $$ StringBuffer buffer = new StringBuffer()[ CD ]
Line_14 $$ String param = tokenizer.nextToken().trim()-->Line_15 $$ int index1 = param.indexOf('[')[ FD ]
Line_9 $$ StringBuffer buffer = new StringBuffer()-->Line_32 $$ buffer.append(" ")[ FD ]
Line_14 $$ String param = tokenizer.nextToken().trim()-->Line_22 $$ String className = param.substring(0, index).trim()[ FD ]
Line_26 $$ if (tokenizer.hasMoreElements()) -->Line_27 $$ if (spaceBeforeComma) [ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_36 $$ return memberText.substring(0, parenthIndex + 1) + buffer.toString() + ")"[ FD ]
Line_20 $$ index2 = param.length()-->Line_21 $$ int index = Math.min(index1, index2)[ FD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_8 $$ String parms = memberText.substring(parenthIndex + 1, memberText.length() - 1)[ CD ]
Line_6 $$ if (!StringUtil.endsWithChar(memberText, ')'))-->Line_7 $$ return memberText[ CD ]
Line_22 $$ String className = param.substring(0, index).trim()-->Line_23 $$ String shortClassName = getLabelText(project, manager, className, context)[ FD ]
Line_16 $$ if (index1 < 0)-->Line_17 $$ index1 = param.length()[ CD ]
Line_20 $$ index2 = param.length()-->Line_19 $$ if (index2 < 0)[ FD ]
Line_9 $$ StringBuffer buffer = new StringBuffer()-->Line_28 $$ buffer.append(" ")[ FD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_23 $$ String shortClassName = getLabelText(project, manager, className, context)[ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_6 $$ if (!StringUtil.endsWithChar(memberText, ')'))[ FD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_21 $$ int index = Math.min(index1, index2)[ CD ]
Line_9 $$ StringBuffer buffer = new StringBuffer()-->Line_24 $$ buffer.append(shortClassName)[ FD ]
Line_14 $$ String param = tokenizer.nextToken().trim()-->Line_25 $$ buffer.append(param.substring(className.length()))[ FD ]
Line_22 $$ String className = param.substring(0, index).trim()-->Line_25 $$ buffer.append(param.substring(className.length()))[ FD ]
Line_17 $$ index1 = param.length()-->Line_16 $$ if (index1 < 0)[ FD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_14 $$ String param = tokenizer.nextToken().trim()[ CD ]
Line_17 $$ index1 = param.length()-->Line_21 $$ int index = Math.min(index1, index2)[ FD ]
Line_13 $$ while (tokenizer.hasMoreTokens()) -->Line_26 $$ if (tokenizer.hasMoreElements()) [ CD ]
Line_18 $$ int index2 = param.indexOf(' ')-->Line_20 $$ index2 = param.length()[ FD ]
Line_27 $$ if (spaceBeforeComma) -->Line_28 $$ buffer.append(" ")[ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_12 $$ StringTokenizer tokenizer = new StringTokenizer(parms, ",")[ CD ]
Line_2 $$ private static String getMemberLabelText(Project project, PsiManager manager, String memberText, PsiElement context) -->Line_11 $$ boolean spaceAfterComma = JavaDocCodeStyle.getInstance(project).spaceAfterComma()[ FD ]
Line_14 $$ String param = tokenizer.nextToken().trim()-->Line_17 $$ index1 = param.length()[ FD ]
Line_15 $$ int index1 = param.indexOf('[')-->Line_16 $$ if (index1 < 0)[ FD ]
Line_18 $$ int index2 = param.indexOf(' ')-->Line_21 $$ int index = Math.min(index1, index2)[ FD ]
