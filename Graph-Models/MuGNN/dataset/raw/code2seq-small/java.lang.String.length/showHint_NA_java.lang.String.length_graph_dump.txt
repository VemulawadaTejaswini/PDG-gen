Line_3 $$ XmlToken token = null-->Line_5 $$ token = (XmlToken) myToken.retrieve()[ FD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_16 $$ if (!namespaces.isEmpty()) [ CD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_9 $$ if (!XmlSettings.getInstance().SHOW_XML_ADD_IMPORT_HINTS || myNamespacePrefix.isEmpty()) [ CD ]
Line_20 $$ if (element instanceof XmlTag && token != null) -->Line_27 $$ return true[ CD ]
Line_3 $$ XmlToken token = null-->Line_22 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_3 $$ XmlToken token = null-->Line_21 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) [ FD ]
Line_17 $$ final String message = ShowAutoImportPass.getMessage(namespaces.size() > 1, namespaces.iterator().next())-->Line_22 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_6 $$ if (token == null)-->Line_7 $$ return false[ CD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_13 $$ if (element == null)[ CD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_3 $$ XmlToken token = null[ CD ]
Line_20 $$ if (element instanceof XmlTag && token != null) -->Line_21 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) [ CD ]
Line_16 $$ if (!namespaces.isEmpty()) -->Line_17 $$ final String message = ShowAutoImportPass.getMessage(namespaces.size() > 1, namespaces.iterator().next())[ CD ]
Line_3 $$ XmlToken token = null-->Line_6 $$ if (token == null)[ FD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_22 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_17 $$ final String message = ShowAutoImportPass.getMessage(namespaces.size() > 1, namespaces.iterator().next())-->Line_26 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ FD ]
Line_19 $$ final ImportNSAction action = new ImportNSAction(namespaces, getFile(), element, editor, title)-->Line_26 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ FD ]
Line_13 $$ if (element == null)-->Line_14 $$ return false[ CD ]
Line_12 $$ final PsiElement element = myElement.retrieve()-->Line_15 $$ final List<String> namespaces = getNamespaces(element, getFile())[ FD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_15 $$ final List<String> namespaces = getNamespaces(element, getFile())[ CD ]
Line_16 $$ if (!namespaces.isEmpty()) -->Line_19 $$ final ImportNSAction action = new ImportNSAction(namespaces, getFile(), element, editor, title)[ CD ]
Line_5 $$ token = (XmlToken) myToken.retrieve()-->Line_21 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) [ FD ]
Line_19 $$ final ImportNSAction action = new ImportNSAction(namespaces, getFile(), element, editor, title)-->Line_22 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_16 $$ if (!namespaces.isEmpty()) -->Line_18 $$ final String title = getTitle()[ CD ]
Line_21 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) -->Line_22 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ CD ]
Line_9 $$ if (!XmlSettings.getInstance().SHOW_XML_ADD_IMPORT_HINTS || myNamespacePrefix.isEmpty()) -->Line_10 $$ return false[ CD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_21 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) [ FD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_30 $$ return false[ CD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_26 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ FD ]
Line_20 $$ if (element instanceof XmlTag && token != null) -->Line_26 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ CD ]
Line_15 $$ final List<String> namespaces = getNamespaces(element, getFile())-->Line_17 $$ final String message = ShowAutoImportPass.getMessage(namespaces.size() > 1, namespaces.iterator().next())[ FD ]
Line_5 $$ token = (XmlToken) myToken.retrieve()-->Line_22 $$ HintManager.getInstance().showQuestionHint(editor, message, token.getTextOffset(), token.getTextOffset() + myNamespacePrefix.length(), action)[ FD ]
Line_5 $$ token = (XmlToken) myToken.retrieve()-->Line_6 $$ if (token == null)[ FD ]
Line_4 $$ if (myToken != null) -->Line_6 $$ if (token == null)[ CD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_4 $$ if (myToken != null) [ CD ]
Line_12 $$ final PsiElement element = myElement.retrieve()-->Line_13 $$ if (element == null)[ FD ]
Line_21 $$ if (VisibleHighlightingPassFactory.calculateVisibleRange(editor).contains(token.getTextRange())) -->Line_23 $$ return true[ CD ]
Line_16 $$ if (!namespaces.isEmpty()) -->Line_20 $$ if (element instanceof XmlTag && token != null) [ CD ]
Line_2 $$ public boolean showHint(@NotNull final Editor editor) -->Line_12 $$ final PsiElement element = myElement.retrieve()[ CD ]
Line_12 $$ final PsiElement element = myElement.retrieve()-->Line_26 $$ HintManager.getInstance().showQuestionHint(editor, message, element.getTextOffset(), element.getTextRange().getEndOffset(), action)[ FD ]
Line_4 $$ if (myToken != null) -->Line_5 $$ token = (XmlToken) myToken.retrieve()[ CD ]
Line_15 $$ final List<String> namespaces = getNamespaces(element, getFile())-->Line_16 $$ if (!namespaces.isEmpty()) [ FD ]
