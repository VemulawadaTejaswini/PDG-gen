Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_3 $$ if (method.endsWith("...)")) [ CD ]
Line_10 $$ List<MethodLinkMetaData> candidates = new ArrayList<MethodLinkMetaData>()-->Line_16 $$ if (candidates.isEmpty()) [ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_6 $$ MethodLinkMetaData metaData = methods.get(method)[ CD ]
Line_21 $$ if (candidates.size() != 1) -->Line_22 $$ String message = String.format("Found multiple methods called '%s' in class '%s'. Candidates: %s", method, className, CollectionUtils.join(", ", candidates))[ CD ]
Line_10 $$ List<MethodLinkMetaData> candidates = new ArrayList<MethodLinkMetaData>()-->Line_22 $$ String message = String.format("Found multiple methods called '%s' in class '%s'. Candidates: %s", method, className, CollectionUtils.join(", ", candidates))[ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_17 $$ String message = String.format("No method '%s' found for class '%s'.", method, className)[ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_6 $$ MethodLinkMetaData metaData = methods.get(method)[ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_21 $$ if (candidates.size() != 1) [ CD ]
Line_21 $$ if (candidates.size() != 1) -->Line_23 $$ message += "\nThis problem may happen when some apilink from docbook template xmls is incorrect. Example:" + "\nIncorrect: <apilink class=\"org.gradle.api.Project\" method=\"tarTree\"/>" + "\nCorrect:   <apilink class=\"org.gradle.api.Project\" method=\"tarTree(Object)\"/>"[ CD ]
Line_4 $$ method = method.substring(0, method.length() - 4) + "[])"-->Line_6 $$ MethodLinkMetaData metaData = methods.get(method)[ FD ]
Line_17 $$ String message = String.format("No method '%s' found for class '%s'.", method, className)-->Line_23 $$ message += "\nThis problem may happen when some apilink from docbook template xmls is incorrect. Example:" + "\nIncorrect: <apilink class=\"org.gradle.api.Project\" method=\"tarTree\"/>" + "\nCorrect:   <apilink class=\"org.gradle.api.Project\" method=\"tarTree(Object)\"/>"[ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_7 $$ if (metaData != null) [ CD ]
Line_12 $$ if (methodLinkMetaData.name.equals(method)) -->Line_13 $$ candidates.add(methodLinkMetaData)[ CD ]
Line_16 $$ if (candidates.isEmpty()) -->Line_18 $$ message += "\nThis problem may happen when some apilink from docbook template xmls refers to unknown method." + "\nExample: <apilink class=\"org.gradle.api.Project\" method=\"someMethodThatDoesNotExist\"/>"[ CD ]
Line_16 $$ if (candidates.isEmpty()) -->Line_17 $$ String message = String.format("No method '%s' found for class '%s'.", method, className)[ CD ]
Line_17 $$ String message = String.format("No method '%s' found for class '%s'.", method, className)-->Line_18 $$ message += "\nThis problem may happen when some apilink from docbook template xmls refers to unknown method." + "\nExample: <apilink class=\"org.gradle.api.Project\" method=\"someMethodThatDoesNotExist\"/>"[ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_4 $$ method = method.substring(0, method.length() - 4) + "[])"[ FD ]
Line_11 $$ for (MethodLinkMetaData methodLinkMetaData : methods.values()) -->Line_13 $$ candidates.add(methodLinkMetaData)[ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_26 $$ return candidates.get(0)[ CD ]
Line_18 $$ message += "\nThis problem may happen when some apilink from docbook template xmls refers to unknown method." + "\nExample: <apilink class=\"org.gradle.api.Project\" method=\"someMethodThatDoesNotExist\"/>"-->Line_23 $$ message += "\nThis problem may happen when some apilink from docbook template xmls is incorrect. Example:" + "\nIncorrect: <apilink class=\"org.gradle.api.Project\" method=\"tarTree\"/>" + "\nCorrect:   <apilink class=\"org.gradle.api.Project\" method=\"tarTree(Object)\"/>"[ FD ]
Line_3 $$ if (method.endsWith("...)")) -->Line_4 $$ method = method.substring(0, method.length() - 4) + "[])"[ CD ]
Line_4 $$ method = method.substring(0, method.length() - 4) + "[])"-->Line_17 $$ String message = String.format("No method '%s' found for class '%s'.", method, className)[ FD ]
Line_10 $$ List<MethodLinkMetaData> candidates = new ArrayList<MethodLinkMetaData>()-->Line_21 $$ if (candidates.size() != 1) [ FD ]
Line_4 $$ method = method.substring(0, method.length() - 4) + "[])"-->Line_22 $$ String message = String.format("Found multiple methods called '%s' in class '%s'. Candidates: %s", method, className, CollectionUtils.join(", ", candidates))[ FD ]
Line_10 $$ List<MethodLinkMetaData> candidates = new ArrayList<MethodLinkMetaData>()-->Line_13 $$ candidates.add(methodLinkMetaData)[ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_16 $$ if (candidates.isEmpty()) [ CD ]
Line_7 $$ if (metaData != null) -->Line_8 $$ return metaData[ CD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_12 $$ if (methodLinkMetaData.name.equals(method)) [ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_3 $$ if (method.endsWith("...)")) [ FD ]
Line_4 $$ method = method.substring(0, method.length() - 4) + "[])"-->Line_12 $$ if (methodLinkMetaData.name.equals(method)) [ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_22 $$ String message = String.format("Found multiple methods called '%s' in class '%s'. Candidates: %s", method, className, CollectionUtils.join(", ", candidates))[ FD ]
Line_2 $$ private MethodLinkMetaData findMethod(String method) -->Line_10 $$ List<MethodLinkMetaData> candidates = new ArrayList<MethodLinkMetaData>()[ CD ]
Line_6 $$ MethodLinkMetaData metaData = methods.get(method)-->Line_7 $$ if (metaData != null) [ FD ]
Line_10 $$ List<MethodLinkMetaData> candidates = new ArrayList<MethodLinkMetaData>()-->Line_26 $$ return candidates.get(0)[ FD ]
