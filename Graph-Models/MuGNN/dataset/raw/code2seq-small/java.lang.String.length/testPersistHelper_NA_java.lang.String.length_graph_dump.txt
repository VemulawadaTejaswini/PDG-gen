Line_13 $$ FSDataOutputStream out = fs.create(file2)-->Line_14 $$ out.writeBytes("hello")[ FD ]
Line_11 $$ final Path file2 = new Path(dir, "f2")-->Line_13 $$ FSDataOutputStream out = fs.create(file2)[ FD ]
Line_2 $$ private void testPersistHelper(Configuration conf) throws IOException -->Line_3 $$ MiniDFSCluster cluster = null[ CD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_12 $$ fs.create(file1).close()[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_21 $$ fs = cluster.getFileSystem()[ FD ]
Line_11 $$ final Path file2 = new Path(dir, "f2")-->Line_24 $$ assertTrue(fs.exists(file2))[ FD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_16 $$ fs.setSafeMode(SafeModeAction.SAFEMODE_ENTER)[ FD ]
Line_13 $$ FSDataOutputStream out = fs.create(file2)-->Line_15 $$ ((DFSOutputStream) out.getWrappedStream()).hsync(EnumSet.of(SyncFlag.UPDATE_LENGTH))[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_6 $$ cluster.waitActive()[ FD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_18 $$ fs.setSafeMode(SafeModeAction.SAFEMODE_LEAVE)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_19 $$ cluster.restartNameNode()[ FD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_22 $$ assertTrue(fs.isDirectory(dir))[ FD ]
Line_21 $$ fs = cluster.getFileSystem()-->Line_22 $$ assertTrue(fs.isDirectory(dir))[ FD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_17 $$ fs.saveNamespace()[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_19 $$ cluster.restartNameNode()[ FD ]
Line_21 $$ fs = cluster.getFileSystem()-->Line_23 $$ assertTrue(fs.exists(file1))[ FD ]
Line_10 $$ final Path file1 = new Path(dir, "f1")-->Line_23 $$ assertTrue(fs.exists(file1))[ FD ]
Line_11 $$ final Path file2 = new Path(dir, "f2")-->Line_31 $$ Lease lease = fsn.leaseManager.getLeaseByPath(file2.toString())[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_6 $$ cluster.waitActive()[ FD ]
Line_34 $$ if (cluster != null) -->Line_35 $$ cluster.shutdown()[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_35 $$ cluster.shutdown()[ FD ]
Line_25 $$ INodeFile file2Node = fsn.dir.getINode4Write(file2.toString()).asFile()-->Line_26 $$ assertEquals("hello".length(), file2Node.computeFileSize())[ FD ]
Line_31 $$ Lease lease = fsn.leaseManager.getLeaseByPath(file2.toString())-->Line_32 $$ Assert.assertNotNull(lease)[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_34 $$ if (cluster != null) [ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_21 $$ fs = cluster.getFileSystem()[ FD ]
Line_21 $$ fs = cluster.getFileSystem()-->Line_24 $$ assertTrue(fs.exists(file2))[ FD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_24 $$ assertTrue(fs.exists(file2))[ FD ]
Line_25 $$ INodeFile file2Node = fsn.dir.getINode4Write(file2.toString()).asFile()-->Line_27 $$ assertTrue(file2Node.isUnderConstruction())[ FD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_23 $$ assertTrue(fs.exists(file1))[ FD ]
Line_10 $$ final Path file1 = new Path(dir, "f1")-->Line_12 $$ fs.create(file1).close()[ FD ]
Line_25 $$ INodeFile file2Node = fsn.dir.getINode4Write(file2.toString()).asFile()-->Line_28 $$ BlockInfo[] blks = file2Node.getBlocks()[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_20 $$ cluster.waitActive()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_7 $$ FSNamesystem fsn = cluster.getNamesystem()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_20 $$ cluster.waitActive()[ FD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_21 $$ fs = cluster.getFileSystem()[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_34 $$ if (cluster != null) [ FD ]
Line_9 $$ final Path dir = new Path("/abc/def")-->Line_22 $$ assertTrue(fs.isDirectory(dir))[ FD ]
Line_8 $$ DistributedFileSystem fs = cluster.getFileSystem()-->Line_13 $$ FSDataOutputStream out = fs.create(file2)[ FD ]
Line_11 $$ final Path file2 = new Path(dir, "f2")-->Line_25 $$ INodeFile file2Node = fsn.dir.getINode4Write(file2.toString()).asFile()[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_35 $$ cluster.shutdown()[ FD ]
Line_5 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_7 $$ FSNamesystem fsn = cluster.getNamesystem()[ FD ]
