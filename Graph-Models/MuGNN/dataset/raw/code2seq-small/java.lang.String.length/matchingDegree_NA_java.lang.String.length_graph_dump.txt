Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_27 $$ char c = name.charAt(i)[ CD ]
Line_35 $$ matchingCase += 50-->Line_41 $$ matchingCase += 1[ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_12 $$ int humpIndex = 1[ CD ]
Line_14 $$ for (TextRange range : fragments) -->Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) [ FD ]
Line_17 $$ while (nextHumpStart <= i) -->Line_21 $$ nextHumpStart = nextWord(name, nextHumpStart)[ CD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_27 $$ char c = name.charAt(i)[ FD ]
Line_14 $$ for (TextRange range : fragments) -->Line_22 $$ if (first != range) [ FD ]
Line_21 $$ nextHumpStart = nextWord(name, nextHumpStart)-->Line_17 $$ while (nextHumpStart <= i) [ FD ]
Line_47 $$ int startIndex = first.getStartOffset()-->Line_49 $$ boolean wordStart = startIndex == 0 || isWordStart(name, startIndex) && !isWordStart(name, startIndex - 1)[ FD ]
Line_42 $$ if (isHumpStart) -->Line_43 $$ matchingCase -= 1[ CD ]
Line_16 $$ boolean isHumpStart = false-->Line_19 $$ isHumpStart = true[ FD ]
Line_47 $$ int startIndex = first.getStartOffset()-->Line_48 $$ boolean afterSeparator = StringUtil.indexOfAny(name, myHardSeparators, 0, startIndex) >= 0[ FD ]
Line_21 $$ nextHumpStart = nextWord(name, nextHumpStart)-->Line_18 $$ if (nextHumpStart == i) [ FD ]
Line_16 $$ boolean isHumpStart = false-->Line_32 $$ if (c == myPattern[p]) [ FD ]
Line_19 $$ isHumpStart = true-->Line_36 $$ if (i == 0 && startMatch)[ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_50 $$ boolean finalMatch = fragments.get(fragments.size() - 1).getEndOffset() == name.length()[ FD ]
Line_33 $$ if (isUpperCase[p])-->Line_36 $$ if (i == 0 && startMatch)[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_47 $$ int startIndex = first.getStartOffset()[ CD ]
Line_7 $$ final TextRange first = fragments.getHead()-->Line_47 $$ int startIndex = first.getStartOffset()[ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_5 $$ if (fragments.isEmpty())[ FD ]
Line_7 $$ final TextRange first = fragments.getHead()-->Line_8 $$ boolean startMatch = first.getStartOffset() == 0[ FD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_18 $$ if (nextHumpStart == i) [ FD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_17 $$ while (nextHumpStart <= i) [ CD ]
Line_36 $$ if (i == 0 && startMatch)-->Line_40 $$ if (isHumpStart)[ CD ]
Line_16 $$ boolean isHumpStart = false-->Line_36 $$ if (i == 0 && startMatch)[ FD ]
Line_12 $$ int humpIndex = 1-->Line_23 $$ humpIndex++[ FD ]
Line_28 $$ p = StringUtil.indexOf(myPattern, c, p + 1, myPattern.length, false)-->Line_29 $$ if (p < 0) [ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_8 $$ boolean startMatch = first.getStartOffset() == 0[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_27 $$ char c = name.charAt(i)[ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_51 $$ return (wordStart ? 1000 : 0) + integral * 10 + matchingCase * (startMatch && valueStartCaseMatch ? 10 : 1) + (afterSeparator ? 0 : 2) + (startMatch ? 1 : 0) + (finalMatch ? 1 : 0)[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_10 $$ int p = -1[ CD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_26 $$ integral -= humpIndex[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_49 $$ boolean wordStart = startIndex == 0 || isWordStart(name, startIndex) && !isWordStart(name, startIndex - 1)[ FD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_16 $$ boolean isHumpStart = false[ CD ]
Line_22 $$ if (first != range) -->Line_23 $$ humpIndex++[ CD ]
Line_32 $$ if (c == myPattern[p]) -->Line_33 $$ if (isUpperCase[p])[ CD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_17 $$ while (nextHumpStart <= i) [ FD ]
Line_35 $$ matchingCase += 50-->Line_38 $$ matchingCase += 15[ FD ]
Line_9 $$ int matchingCase = 0-->Line_38 $$ matchingCase += 15[ FD ]
Line_9 $$ int matchingCase = 0-->Line_43 $$ matchingCase -= 1[ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_5 $$ if (fragments.isEmpty())[ CD ]
Line_13 $$ int nextHumpStart = 0-->Line_18 $$ if (nextHumpStart == i) [ FD ]
Line_10 $$ int p = -1-->Line_33 $$ if (isUpperCase[p])[ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_21 $$ nextHumpStart = nextWord(name, nextHumpStart)[ FD ]
Line_17 $$ while (nextHumpStart <= i) -->Line_18 $$ if (nextHumpStart == i) [ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_48 $$ boolean afterSeparator = StringUtil.indexOfAny(name, myHardSeparators, 0, startIndex) >= 0[ FD ]
Line_8 $$ boolean startMatch = first.getStartOffset() == 0-->Line_36 $$ if (i == 0 && startMatch)[ FD ]
Line_17 $$ while (nextHumpStart <= i) -->Line_22 $$ if (first != range) [ CD ]
Line_11 $$ int integral = 0-->Line_26 $$ integral -= humpIndex[ FD ]
Line_10 $$ int p = -1-->Line_28 $$ p = StringUtil.indexOf(myPattern, c, p + 1, myPattern.length, false)[ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_7 $$ final TextRange first = fragments.getHead()[ FD ]
Line_38 $$ matchingCase += 15-->Line_43 $$ matchingCase -= 1[ FD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_29 $$ if (p < 0) [ CD ]
Line_10 $$ int p = -1-->Line_29 $$ if (p < 0) [ FD ]
Line_18 $$ if (nextHumpStart == i) -->Line_19 $$ isHumpStart = true[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_11 $$ int integral = 0[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_50 $$ boolean finalMatch = fragments.get(fragments.size() - 1).getEndOffset() == name.length()[ CD ]
Line_19 $$ isHumpStart = true-->Line_32 $$ if (c == myPattern[p]) [ FD ]
Line_13 $$ int nextHumpStart = 0-->Line_21 $$ nextHumpStart = nextWord(name, nextHumpStart)[ FD ]
Line_12 $$ int humpIndex = 1-->Line_26 $$ integral -= humpIndex[ FD ]
Line_3 $$ if (fragments == null)-->Line_4 $$ return Integer.MIN_VALUE[ CD ]
Line_32 $$ if (c == myPattern[p]) -->Line_42 $$ if (isHumpStart) [ CD ]
Line_9 $$ int matchingCase = 0-->Line_35 $$ matchingCase += 50[ FD ]
Line_38 $$ matchingCase += 15-->Line_41 $$ matchingCase += 1[ FD ]
Line_5 $$ if (fragments.isEmpty())-->Line_6 $$ return 0[ CD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_32 $$ if (c == myPattern[p]) [ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_7 $$ final TextRange first = fragments.getHead()[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_49 $$ boolean wordStart = startIndex == 0 || isWordStart(name, startIndex) && !isWordStart(name, startIndex - 1)[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_3 $$ if (fragments == null)[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_3 $$ if (fragments == null)[ FD ]
Line_13 $$ int nextHumpStart = 0-->Line_17 $$ while (nextHumpStart <= i) [ FD ]
Line_33 $$ if (isUpperCase[p])-->Line_35 $$ matchingCase += 50[ CD ]
Line_28 $$ p = StringUtil.indexOf(myPattern, c, p + 1, myPattern.length, false)-->Line_33 $$ if (isUpperCase[p])[ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_9 $$ int matchingCase = 0[ CD ]
Line_9 $$ int matchingCase = 0-->Line_41 $$ matchingCase += 1[ FD ]
Line_40 $$ if (isHumpStart)-->Line_41 $$ matchingCase += 1[ CD ]
Line_41 $$ matchingCase += 1-->Line_43 $$ matchingCase -= 1[ FD ]
Line_15 $$ for (int i = range.getStartOffset(); i < range.getEndOffset(); i++) -->Line_28 $$ p = StringUtil.indexOf(myPattern, c, p + 1, myPattern.length, false)[ CD ]
Line_7 $$ final TextRange first = fragments.getHead()-->Line_22 $$ if (first != range) [ FD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_48 $$ boolean afterSeparator = StringUtil.indexOfAny(name, myHardSeparators, 0, startIndex) >= 0[ CD ]
Line_35 $$ matchingCase += 50-->Line_43 $$ matchingCase -= 1[ FD ]
Line_36 $$ if (i == 0 && startMatch)-->Line_38 $$ matchingCase += 15[ CD ]
Line_2 $$ public int matchingDegree(@NotNull String name, boolean valueStartCaseMatch, @Nullable FList<TextRange> fragments) -->Line_13 $$ int nextHumpStart = 0[ CD ]
