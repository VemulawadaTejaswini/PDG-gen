Line_12 $$ MockHttpServletResponse mockHttpServletResponse = testRange(rangeHeader)-->Line_16 $$ String responseBody = mockHttpServletResponse.getContentAsString()[ FD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_26 $$ Assert.assertEquals("Content-Range: bytes " + ranges[i] + "/80", lines[1])[ CD ]
Line_16 $$ String responseBody = mockHttpServletResponse.getContentAsString()-->Line_17 $$ Assert.assertTrue(responseBody.startsWith("\r\n--" + boundary + "\r\n"))[ FD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_32 $$ Assert.assertArrayEquals(bytes, lines[3].getBytes("UTF-8"))[ CD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_29 $$ int start = GetterUtil.getInteger(rangePair[0])[ CD ]
Line_6 $$ for (int i = 0; i < ranges.length; i++) -->Line_8 $$ if (i != (ranges.length - 1)) [ CD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_27 $$ Assert.assertTrue(Validator.isNull(lines[2]))[ CD ]
Line_5 $$ String rangeHeader = "bytes="-->Line_12 $$ MockHttpServletResponse mockHttpServletResponse = testRange(rangeHeader)[ FD ]
Line_7 $$ rangeHeader += ranges[i]-->Line_9 $$ rangeHeader += StringPool.COMMA[ FD ]
Line_16 $$ String responseBody = mockHttpServletResponse.getContentAsString()-->Line_18 $$ Assert.assertTrue(responseBody.endsWith("--" + boundary + "--\r\n"))[ FD ]
Line_15 $$ String boundary = contentType.substring(_BOUNDARY_PREFACE.length())-->Line_19 $$ String[] responseBodies = StringUtil.split(responseBody, boundary)[ FD ]
Line_5 $$ String rangeHeader = "bytes="-->Line_9 $$ rangeHeader += StringPool.COMMA[ FD ]
Line_31 $$ byte[] bytes = ArrayUtil.subset(_SAMPLE_DATA.getBytes(), start, end + 1)-->Line_32 $$ Assert.assertArrayEquals(bytes, lines[3].getBytes("UTF-8"))[ FD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_31 $$ byte[] bytes = ArrayUtil.subset(_SAMPLE_DATA.getBytes(), start, end + 1)[ CD ]
Line_6 $$ for (int i = 0; i < ranges.length; i++) -->Line_8 $$ if (i != (ranges.length - 1)) [ FD ]
Line_7 $$ rangeHeader += ranges[i]-->Line_12 $$ MockHttpServletResponse mockHttpServletResponse = testRange(rangeHeader)[ FD ]
Line_5 $$ String rangeHeader = "bytes="-->Line_7 $$ rangeHeader += ranges[i][ FD ]
Line_12 $$ MockHttpServletResponse mockHttpServletResponse = testRange(rangeHeader)-->Line_13 $$ String contentType = mockHttpServletResponse.getContentType()[ FD ]
Line_9 $$ rangeHeader += StringPool.COMMA-->Line_12 $$ MockHttpServletResponse mockHttpServletResponse = testRange(rangeHeader)[ FD ]
Line_16 $$ String responseBody = mockHttpServletResponse.getContentAsString()-->Line_19 $$ String[] responseBodies = StringUtil.split(responseBody, boundary)[ FD ]
Line_13 $$ String contentType = mockHttpServletResponse.getContentType()-->Line_15 $$ String boundary = contentType.substring(_BOUNDARY_PREFACE.length())[ FD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_24 $$ String[] lines = StringUtil.split(responseBodies[i + 1], StringPool.RETURN_NEW_LINE)[ CD ]
Line_6 $$ for (int i = 0; i < ranges.length; i++) -->Line_7 $$ rangeHeader += ranges[i][ CD ]
Line_8 $$ if (i != (ranges.length - 1)) -->Line_9 $$ rangeHeader += StringPool.COMMA[ CD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_28 $$ String[] rangePair = StringUtil.split(ranges[i], StringPool.DASH)[ CD ]
Line_29 $$ int start = GetterUtil.getInteger(rangePair[0])-->Line_31 $$ byte[] bytes = ArrayUtil.subset(_SAMPLE_DATA.getBytes(), start, end + 1)[ FD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_33 $$ Assert.assertEquals(StringPool.DOUBLE_DASH, lines[4])[ CD ]
Line_6 $$ for (int i = 0; i < ranges.length; i++) -->Line_23 $$ for (int i = 0; i < ranges.length; i++) [ FD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_25 $$ Assert.assertEquals("Content-Type: text/plain", lines[0])[ CD ]
Line_13 $$ String contentType = mockHttpServletResponse.getContentType()-->Line_14 $$ Assert.assertTrue(contentType.startsWith(_BOUNDARY_PREFACE))[ FD ]
Line_23 $$ for (int i = 0; i < ranges.length; i++) -->Line_30 $$ int end = GetterUtil.getInteger(rangePair[1])[ CD ]
