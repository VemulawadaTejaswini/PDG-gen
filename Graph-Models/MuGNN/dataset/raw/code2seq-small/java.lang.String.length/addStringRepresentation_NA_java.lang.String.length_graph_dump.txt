Line_4 $$ if (test.isTest()) -->Line_12 $$ if (test.isSuite()) [ CD ]
Line_2 $$ protected void addStringRepresentation(Object obj, Packet packet) -->Line_8 $$ addTestMethod(packet, methodName, className)[ FD ]
Line_2 $$ protected void addStringRepresentation(Object obj, Packet packet) -->Line_18 $$ addTestClass(packet, fullName)[ FD ]
Line_12 $$ if (test.isSuite()) -->Line_14 $$ if (fullName == null) [ CD ]
Line_14 $$ if (fullName == null) -->Line_16 $$ return[ CD ]
Line_6 $$ final String className = JUnit4ReflectionUtil.getClassName(test)-->Line_10 $$ addTestClass(packet, className)[ FD ]
Line_14 $$ if (fullName == null) -->Line_15 $$ addUnknownTest(packet, test)[ CD ]
Line_3 $$ Description test = (Description) obj-->Line_13 $$ String fullName = JUnit4ReflectionUtil.getClassName(test)[ FD ]
Line_7 $$ if (methodName != null && methodName.length() > 0) -->Line_8 $$ addTestMethod(packet, methodName, className)[ CD ]
Line_7 $$ if (methodName != null && methodName.length() > 0) -->Line_10 $$ addTestClass(packet, className)[ CD ]
Line_3 $$ Description test = (Description) obj-->Line_12 $$ if (test.isSuite()) [ FD ]
Line_2 $$ protected void addStringRepresentation(Object obj, Packet packet) -->Line_3 $$ Description test = (Description) obj[ CD ]
Line_2 $$ protected void addStringRepresentation(Object obj, Packet packet) -->Line_10 $$ addTestClass(packet, className)[ FD ]
Line_13 $$ String fullName = JUnit4ReflectionUtil.getClassName(test)-->Line_14 $$ if (fullName == null) [ FD ]
Line_3 $$ Description test = (Description) obj-->Line_15 $$ addUnknownTest(packet, test)[ FD ]
Line_12 $$ if (test.isSuite()) -->Line_20 $$ addUnknownTest(packet, test)[ CD ]
Line_3 $$ Description test = (Description) obj-->Line_5 $$ final String methodName = JUnit4ReflectionUtil.getMethodName(test)[ FD ]
Line_4 $$ if (test.isTest()) -->Line_6 $$ final String className = JUnit4ReflectionUtil.getClassName(test)[ CD ]
Line_13 $$ String fullName = JUnit4ReflectionUtil.getClassName(test)-->Line_18 $$ addTestClass(packet, fullName)[ FD ]
Line_5 $$ final String methodName = JUnit4ReflectionUtil.getMethodName(test)-->Line_7 $$ if (methodName != null && methodName.length() > 0) [ FD ]
Line_2 $$ protected void addStringRepresentation(Object obj, Packet packet) -->Line_15 $$ addUnknownTest(packet, test)[ FD ]
Line_12 $$ if (test.isSuite()) -->Line_13 $$ String fullName = JUnit4ReflectionUtil.getClassName(test)[ CD ]
Line_3 $$ Description test = (Description) obj-->Line_4 $$ if (test.isTest()) [ FD ]
Line_3 $$ Description test = (Description) obj-->Line_20 $$ addUnknownTest(packet, test)[ FD ]
Line_5 $$ final String methodName = JUnit4ReflectionUtil.getMethodName(test)-->Line_8 $$ addTestMethod(packet, methodName, className)[ FD ]
Line_4 $$ if (test.isTest()) -->Line_7 $$ if (methodName != null && methodName.length() > 0) [ CD ]
Line_4 $$ if (test.isTest()) -->Line_5 $$ final String methodName = JUnit4ReflectionUtil.getMethodName(test)[ CD ]
Line_3 $$ Description test = (Description) obj-->Line_6 $$ final String className = JUnit4ReflectionUtil.getClassName(test)[ FD ]
Line_2 $$ protected void addStringRepresentation(Object obj, Packet packet) -->Line_4 $$ if (test.isTest()) [ CD ]
Line_2 $$ protected void addStringRepresentation(Object obj, Packet packet) -->Line_20 $$ addUnknownTest(packet, test)[ FD ]
Line_6 $$ final String className = JUnit4ReflectionUtil.getClassName(test)-->Line_8 $$ addTestMethod(packet, methodName, className)[ FD ]
Line_12 $$ if (test.isSuite()) -->Line_18 $$ addTestClass(packet, fullName)[ CD ]
