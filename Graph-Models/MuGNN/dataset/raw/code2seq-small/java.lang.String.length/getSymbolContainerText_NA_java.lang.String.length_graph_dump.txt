Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)-->Line_6 $$ if (text == null)[ FD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_21 $$ int index[ CD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)[ FD ]
Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))-->Line_22 $$ while (parts.size() > 1) [ FD ]
Line_14 $$ final FontMetrics fm = myList.getFontMetrics(myList.getFont())-->Line_18 $$ if (fm.stringWidth(left + text + right) < maxWidth)[ FD ]
Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)-->Line_4 $$ if (myList.getWidth() == 0)[ FD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_18 $$ if (fm.stringWidth(left + text + right) < maxWidth)[ CD ]
Line_22 $$ while (parts.size() > 1) -->Line_24 $$ parts.remove(index)[ CD ]
Line_12 $$ if (in)-->Line_13 $$ text = text.substring(3)[ CD ]
Line_21 $$ int index-->Line_26 $$ parts.add(index, index == 0 ? "..." : ".")[ FD ]
Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))-->Line_27 $$ return left + StringUtil.join(parts, ".") + right[ FD ]
Line_23 $$ index = parts.size() / 2 - 1-->Line_26 $$ parts.add(index, index == 0 ? "..." : ".")[ FD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_15 $$ final int maxWidth = myList.getWidth() - fm.stringWidth(name) - 16 - myRightComponentWidth - 20[ CD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_11 $$ boolean in = text.startsWith("in ")[ CD ]
Line_23 $$ index = parts.size() / 2 - 1-->Line_24 $$ parts.remove(index)[ FD ]
Line_25 $$ if (fm.stringWidth(StringUtil.join(parts, ".") + "...") < maxWidth) -->Line_26 $$ parts.add(index, index == 0 ? "..." : ".")[ CD ]
Line_4 $$ if (myList.getWidth() == 0)-->Line_5 $$ return text[ CD ]
Line_8 $$ if (text.startsWith("(") && text.endsWith(")")) -->Line_9 $$ text = text.substring(1, text.length() - 1)[ CD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_15 $$ final int maxWidth = myList.getWidth() - fm.stringWidth(name) - 16 - myRightComponentWidth - 20[ FD ]
Line_21 $$ int index-->Line_24 $$ parts.remove(index)[ FD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_22 $$ while (parts.size() > 1) [ CD ]
Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)-->Line_9 $$ text = text.substring(1, text.length() - 1)[ FD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_8 $$ if (text.startsWith("(") && text.endsWith(")")) [ CD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_4 $$ if (myList.getWidth() == 0)[ CD ]
Line_14 $$ final FontMetrics fm = myList.getFontMetrics(myList.getFont())-->Line_15 $$ final int maxWidth = myList.getWidth() - fm.stringWidth(name) - 16 - myRightComponentWidth - 20[ FD ]
Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))-->Line_25 $$ if (fm.stringWidth(StringUtil.join(parts, ".") + "...") < maxWidth) [ FD ]
Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)-->Line_13 $$ text = text.substring(3)[ FD ]
Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)-->Line_8 $$ if (text.startsWith("(") && text.endsWith(")")) [ FD ]
Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)-->Line_11 $$ boolean in = text.startsWith("in ")[ FD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_6 $$ if (text == null)[ CD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_12 $$ if (in)[ CD ]
Line_9 $$ text = text.substring(1, text.length() - 1)-->Line_13 $$ text = text.substring(3)[ FD ]
Line_15 $$ final int maxWidth = myList.getWidth() - fm.stringWidth(name) - 16 - myRightComponentWidth - 20-->Line_18 $$ if (fm.stringWidth(left + text + right) < maxWidth)[ FD ]
Line_22 $$ while (parts.size() > 1) -->Line_25 $$ if (fm.stringWidth(StringUtil.join(parts, ".") + "...") < maxWidth) [ CD ]
Line_9 $$ text = text.substring(1, text.length() - 1)-->Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))[ FD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_14 $$ final FontMetrics fm = myList.getFontMetrics(myList.getFont())[ CD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_17 $$ String right = ")"[ CD ]
Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))-->Line_24 $$ parts.remove(index)[ FD ]
Line_25 $$ if (fm.stringWidth(StringUtil.join(parts, ".") + "...") < maxWidth) -->Line_27 $$ return left + StringUtil.join(parts, ".") + right[ CD ]
Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)-->Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))[ FD ]
Line_13 $$ text = text.substring(3)-->Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))[ FD ]
Line_14 $$ final FontMetrics fm = myList.getFontMetrics(myList.getFont())-->Line_25 $$ if (fm.stringWidth(StringUtil.join(parts, ".") + "...") < maxWidth) [ FD ]
Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))-->Line_23 $$ index = parts.size() / 2 - 1[ FD ]
Line_6 $$ if (text == null)-->Line_7 $$ return null[ CD ]
Line_22 $$ while (parts.size() > 1) -->Line_23 $$ index = parts.size() / 2 - 1[ CD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_3 $$ String text = SymbolPresentationUtil.getSymbolContainerText(element)[ CD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_16 $$ String left = in ? "(in " : "("[ CD ]
Line_15 $$ final int maxWidth = myList.getWidth() - fm.stringWidth(name) - 16 - myRightComponentWidth - 20-->Line_25 $$ if (fm.stringWidth(StringUtil.join(parts, ".") + "...") < maxWidth) [ FD ]
Line_18 $$ if (fm.stringWidth(left + text + right) < maxWidth)-->Line_19 $$ return left + text + right[ CD ]
Line_9 $$ text = text.substring(1, text.length() - 1)-->Line_11 $$ boolean in = text.startsWith("in ")[ FD ]
Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))-->Line_26 $$ parts.add(index, index == 0 ? "..." : ".")[ FD ]
Line_2 $$ private String getSymbolContainerText(String name, PsiElement element) -->Line_20 $$ final LinkedList<String> parts = new LinkedList<String>(StringUtil.split(text, "."))[ CD ]
Line_21 $$ int index-->Line_23 $$ index = parts.size() / 2 - 1[ FD ]
