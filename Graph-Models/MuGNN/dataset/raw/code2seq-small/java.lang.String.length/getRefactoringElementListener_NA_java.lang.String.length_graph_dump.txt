Line_2 $$ public RefactoringElementListener getRefactoringElementListener(final PsiElement element) -->Line_11 $$ final RefactoringElementListener listener = RefactoringListeners.getClassOrPackageListener(element, myClass)[ FD ]
Line_29 $$ if (methodIdx <= 0 || methodIdx >= oldQualifiedName.length())-->Line_30 $$ return[ CD ]
Line_23 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_28 $$ final int methodIdx = oldQualifiedName.indexOf("#") + 1[ CD ]
Line_13 $$ if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) -->Line_18 $$ final PsiMethod method = (PsiMethod) element[ CD ]
Line_13 $$ if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) -->Line_21 $$ if (!method.getContainingClass().equals(myClass.getPsiElement()))[ CD ]
Line_19 $$ if (!method.getName().equals(data.getMethodName()))-->Line_20 $$ return null[ CD ]
Line_2 $$ public RefactoringElementListener getRefactoringElementListener(final PsiElement element) -->Line_16 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ FD ]
Line_14 $$ if (!(element instanceof PsiMethod)) -->Line_15 $$ final RefactoringElementListener listener = RefactoringListeners.getClassOrPackageListener(element, myClass)[ CD ]
Line_23 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_29 $$ if (methodIdx <= 0 || methodIdx >= oldQualifiedName.length())[ FD ]
Line_8 $$ if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) -->Line_13 $$ if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) [ CD ]
Line_28 $$ final int methodIdx = oldQualifiedName.indexOf("#") + 1-->Line_31 $$ data.METHOD_NAME = oldQualifiedName.substring(methodIdx)[ FD ]
Line_6 $$ final RefactoringElementListener listener = RefactoringListeners.getListener((PsiPackage) element, myPackage)-->Line_16 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ FD ]
Line_2 $$ public RefactoringElementListener getRefactoringElementListener(final PsiElement element) -->Line_15 $$ final RefactoringElementListener listener = RefactoringListeners.getClassOrPackageListener(element, myClass)[ FD ]
Line_13 $$ if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) -->Line_19 $$ if (!method.getName().equals(data.getMethodName()))[ CD ]
Line_3 $$ if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) -->Line_7 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ CD ]
Line_2 $$ public RefactoringElementListener getRefactoringElementListener(final PsiElement element) -->Line_36 $$ return null[ CD ]
Line_23 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_25 $$ data.setTestMethod(PsiLocation.fromPsiElement((PsiMethod) newElement))[ CD ]
Line_2 $$ public RefactoringElementListener getRefactoringElementListener(final PsiElement element) -->Line_12 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ FD ]
Line_21 $$ if (!method.getContainingClass().equals(myClass.getPsiElement()))-->Line_22 $$ return null[ CD ]
Line_23 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_29 $$ if (methodIdx <= 0 || methodIdx >= oldQualifiedName.length())[ CD ]
Line_23 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_31 $$ data.METHOD_NAME = oldQualifiedName.substring(methodIdx)[ CD ]
Line_3 $$ if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) -->Line_6 $$ final RefactoringElementListener listener = RefactoringListeners.getListener((PsiPackage) element, myPackage)[ CD ]
Line_18 $$ final PsiMethod method = (PsiMethod) element-->Line_21 $$ if (!method.getContainingClass().equals(myClass.getPsiElement()))[ FD ]
Line_6 $$ final RefactoringElementListener listener = RefactoringListeners.getListener((PsiPackage) element, myPackage)-->Line_12 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ FD ]
Line_2 $$ public RefactoringElementListener getRefactoringElementListener(final PsiElement element) -->Line_34 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, new Listener())[ FD ]
Line_8 $$ if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) -->Line_12 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ CD ]
Line_14 $$ if (!(element instanceof PsiMethod)) -->Line_16 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ CD ]
Line_8 $$ if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) -->Line_9 $$ if (!(element instanceof PsiClass) && !(element instanceof PsiPackage))[ CD ]
Line_3 $$ if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) -->Line_4 $$ if (!(element instanceof PsiPackage))[ CD ]
Line_6 $$ final RefactoringElementListener listener = RefactoringListeners.getListener((PsiPackage) element, myPackage)-->Line_7 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ FD ]
Line_8 $$ if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) -->Line_11 $$ final RefactoringElementListener listener = RefactoringListeners.getClassOrPackageListener(element, myClass)[ CD ]
Line_9 $$ if (!(element instanceof PsiClass) && !(element instanceof PsiPackage))-->Line_10 $$ return null[ CD ]
Line_23 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_31 $$ data.METHOD_NAME = oldQualifiedName.substring(methodIdx)[ FD ]
Line_2 $$ public RefactoringElementListener getRefactoringElementListener(final PsiElement element) -->Line_7 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, listener)[ FD ]
Line_2 $$ public RefactoringElementListener getRefactoringElementListener(final PsiElement element) -->Line_3 $$ if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) [ CD ]
Line_23 $$ class Listener extends RefactoringElementAdapter implements UndoRefactoringElementListener -->Line_28 $$ final int methodIdx = oldQualifiedName.indexOf("#") + 1[ FD ]
Line_13 $$ if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) -->Line_34 $$ return RunConfigurationExtension.wrapRefactoringElementListener(element, this, new Listener())[ CD ]
Line_13 $$ if (data.TEST_OBJECT.equals(TestType.METHOD.getType())) -->Line_14 $$ if (!(element instanceof PsiMethod)) [ CD ]
Line_4 $$ if (!(element instanceof PsiPackage))-->Line_5 $$ return null[ CD ]
Line_3 $$ if (data.TEST_OBJECT.equals(TestType.PACKAGE.getType())) -->Line_8 $$ if (data.TEST_OBJECT.equals(TestType.CLASS.getType())) [ CD ]
Line_18 $$ final PsiMethod method = (PsiMethod) element-->Line_19 $$ if (!method.getName().equals(data.getMethodName()))[ FD ]
