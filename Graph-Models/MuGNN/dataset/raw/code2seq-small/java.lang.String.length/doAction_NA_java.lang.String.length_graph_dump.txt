Line_2 $$ protected void doAction() -->Line_9 $$ invokeRefactoring(new InvertBooleanProcessor(myElement, name))[ CD ]
Line_2 $$ protected void doAction() -->Line_3 $$ Project project = myElement.getProject()[ CD ]
Line_3 $$ Project project = myElement.getProject()-->Line_6 $$ CommonRefactoringUtil.showErrorMessage(InvertBooleanHandler.REFACTORING_NAME, RefactoringBundle.message("please.enter.a.valid.name.for.inverted.element", UsageViewUtil.getType(myElement)), InvertBooleanHandler.INVERT_BOOLEAN_HELP_ID, project)[ FD ]
Line_2 $$ protected void doAction() -->Line_4 $$ final String name = myNameField.getText().trim()[ CD ]
Line_2 $$ protected void doAction() -->Line_5 $$ if (name.length() == 0) [ CD ]
Line_4 $$ final String name = myNameField.getText().trim()-->Line_5 $$ if (name.length() == 0) [ FD ]
Line_5 $$ if (name.length() == 0) -->Line_6 $$ CommonRefactoringUtil.showErrorMessage(InvertBooleanHandler.REFACTORING_NAME, RefactoringBundle.message("please.enter.a.valid.name.for.inverted.element", UsageViewUtil.getType(myElement)), InvertBooleanHandler.INVERT_BOOLEAN_HELP_ID, project)[ CD ]
Line_5 $$ if (name.length() == 0) -->Line_7 $$ return[ CD ]
