Line_29 $$ if (javaLikeQuoteHandler != null && javaLikeQuoteHandler.getStringTokenTypes() != null && javaLikeQuoteHandler.getStringTokenTypes().contains(tokenType)) -->Line_32 $$ if (text.endsWith(expectedCommentEnd) && endOffset < containingFile.getTextLength() && containingFile.getText().charAt(endOffset) == '\n') [ CD ]
Line_23 $$ JavaLikeQuoteHandler javaLikeQuoteHandler = fileTypeHandler instanceof JavaLikeQuoteHandler ? (JavaLikeQuoteHandler) fileTypeHandler : null-->Line_29 $$ if (javaLikeQuoteHandler != null && javaLikeQuoteHandler.getStringTokenTypes() != null && javaLikeQuoteHandler.getStringTokenTypes().contains(tokenType)) [ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_15 $$ ParserDefinition parserDefinition = LanguageParserDefinitions.INSTANCE.forLanguage(language)[ CD ]
Line_8 $$ String commentText = comment.getText()-->Line_11 $$ if (!commentText.endsWith(expectedCommentEnd))[ FD ]
Line_31 $$ int endOffset = comment.getTextRange().getEndOffset()-->Line_32 $$ if (text.endsWith(expectedCommentEnd) && endOffset < containingFile.getTextLength() && containingFile.getText().charAt(endOffset) == '\n') [ FD ]
Line_3 $$ for (CommentCompleteHandler handler : Extensions.getExtensions(CommentCompleteHandler.EP_NAME)) -->Line_5 $$ return handler.isCommentComplete(comment, commenter, editor)[ FD ]
Line_36 $$ if (tokenType == commenter.getDocumentationCommentTokenType() || tokenType == commenter.getBlockCommentTokenType()) -->Line_37 $$ return false[ CD ]
Line_43 $$ if (tokenType == commenter.getLineCommentTokenType()) -->Line_45 $$ lexer.start(commentText, lexer.getTokenStart() + (prefix == null ? 0 : prefix.length()), commentText.length())[ CD ]
Line_11 $$ if (!commentText.endsWith(expectedCommentEnd))-->Line_12 $$ return false[ CD ]
Line_24 $$ while (true) -->Line_25 $$ IElementType tokenType = lexer.getTokenType()[ CD ]
Line_48 $$ if (isInvalidPsi(comment)) -->Line_49 $$ return false[ CD ]
Line_30 $$ String text = commentText.substring(lexer.getTokenStart(), lexer.getTokenEnd())-->Line_32 $$ if (text.endsWith(expectedCommentEnd) && endOffset < containingFile.getTextLength() && containingFile.getText().charAt(endOffset) == '\n') [ FD ]
Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())-->Line_39 $$ if (tokenType == commenter.getLineCommentTokenType() && lexer.getTokenText().contains(commentPrefix)) [ FD ]
Line_24 $$ while (true) -->Line_53 $$ lexer.advance()[ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_16 $$ if (parserDefinition == null) [ CD ]
Line_43 $$ if (tokenType == commenter.getLineCommentTokenType()) -->Line_44 $$ String prefix = commenter.getLineCommentPrefix()[ CD ]
Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())-->Line_25 $$ IElementType tokenType = lexer.getTokenType()[ FD ]
Line_20 $$ final String commentPrefix = docComment ? commenter.getDocumentationCommentPrefix() : commenter.getBlockCommentPrefix()-->Line_21 $$ lexer.start(commentText, commentPrefix == null ? 0 : commentPrefix.length(), commentText.length())[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_13 $$ final PsiFile containingFile = comment.getContainingFile()[ FD ]
Line_3 $$ for (CommentCompleteHandler handler : Extensions.getExtensions(CommentCompleteHandler.EP_NAME)) -->Line_4 $$ if (handler.isApplicable(comment, commenter)) [ FD ]
Line_42 $$ if (lexer.getTokenEnd() == commentText.length()) -->Line_43 $$ if (tokenType == commenter.getLineCommentTokenType()) [ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_20 $$ final String commentPrefix = docComment ? commenter.getDocumentationCommentPrefix() : commenter.getBlockCommentPrefix()[ FD ]
Line_29 $$ if (javaLikeQuoteHandler != null && javaLikeQuoteHandler.getStringTokenTypes() != null && javaLikeQuoteHandler.getStringTokenTypes().contains(tokenType)) -->Line_30 $$ String text = commentText.substring(lexer.getTokenStart(), lexer.getTokenEnd())[ CD ]
Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())-->Line_53 $$ lexer.advance()[ FD ]
Line_25 $$ IElementType tokenType = lexer.getTokenType()-->Line_26 $$ if (tokenType == null) [ FD ]
Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())-->Line_42 $$ if (lexer.getTokenEnd() == commentText.length()) [ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_43 $$ if (tokenType == commenter.getLineCommentTokenType()) [ FD ]
Line_26 $$ if (tokenType == null) -->Line_27 $$ return false[ CD ]
Line_25 $$ IElementType tokenType = lexer.getTokenType()-->Line_43 $$ if (tokenType == commenter.getLineCommentTokenType()) [ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_5 $$ return handler.isCommentComplete(comment, commenter, editor)[ FD ]
Line_10 $$ final String expectedCommentEnd = docComment ? commenter.getDocumentationCommentSuffix() : commenter.getBlockCommentSuffix()-->Line_11 $$ if (!commentText.endsWith(expectedCommentEnd))[ FD ]
Line_14 $$ final Language language = containingFile.getLanguage()-->Line_15 $$ ParserDefinition parserDefinition = LanguageParserDefinitions.INSTANCE.forLanguage(language)[ FD ]
Line_13 $$ final PsiFile containingFile = comment.getContainingFile()-->Line_14 $$ final Language language = containingFile.getLanguage()[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_21 $$ lexer.start(commentText, commentPrefix == null ? 0 : commentPrefix.length(), commentText.length())[ CD ]
Line_24 $$ while (true) -->Line_42 $$ if (lexer.getTokenEnd() == commentText.length()) [ CD ]
Line_15 $$ ParserDefinition parserDefinition = LanguageParserDefinitions.INSTANCE.forLanguage(language)-->Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_8 $$ String commentText = comment.getText()[ FD ]
Line_32 $$ if (text.endsWith(expectedCommentEnd) && endOffset < containingFile.getTextLength() && containingFile.getText().charAt(endOffset) == '\n') -->Line_33 $$ return true[ CD ]
Line_8 $$ String commentText = comment.getText()-->Line_45 $$ lexer.start(commentText, lexer.getTokenStart() + (prefix == null ? 0 : prefix.length()), commentText.length())[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_31 $$ int endOffset = comment.getTextRange().getEndOffset()[ FD ]
Line_29 $$ if (javaLikeQuoteHandler != null && javaLikeQuoteHandler.getStringTokenTypes() != null && javaLikeQuoteHandler.getStringTokenTypes().contains(tokenType)) -->Line_31 $$ int endOffset = comment.getTextRange().getEndOffset()[ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())[ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_24 $$ while (true) [ CD ]
Line_8 $$ String commentText = comment.getText()-->Line_30 $$ String text = commentText.substring(lexer.getTokenStart(), lexer.getTokenEnd())[ FD ]
Line_15 $$ ParserDefinition parserDefinition = LanguageParserDefinitions.INSTANCE.forLanguage(language)-->Line_16 $$ if (parserDefinition == null) [ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_4 $$ if (handler.isApplicable(comment, commenter)) [ FD ]
Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())-->Line_21 $$ lexer.start(commentText, commentPrefix == null ? 0 : commentPrefix.length(), commentText.length())[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_23 $$ JavaLikeQuoteHandler javaLikeQuoteHandler = fileTypeHandler instanceof JavaLikeQuoteHandler ? (JavaLikeQuoteHandler) fileTypeHandler : null[ CD ]
Line_24 $$ while (true) -->Line_26 $$ if (tokenType == null) [ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_22 $$ QuoteHandler fileTypeHandler = TypedHandler.getQuoteHandler(containingFile, editor)[ CD ]
Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())-->Line_46 $$ lexer.advance()[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_39 $$ if (tokenType == commenter.getLineCommentTokenType() && lexer.getTokenText().contains(commentPrefix)) [ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_10 $$ final String expectedCommentEnd = docComment ? commenter.getDocumentationCommentSuffix() : commenter.getBlockCommentSuffix()[ FD ]
Line_24 $$ while (true) -->Line_36 $$ if (tokenType == commenter.getDocumentationCommentTokenType() || tokenType == commenter.getBlockCommentTokenType()) [ CD ]
Line_25 $$ IElementType tokenType = lexer.getTokenType()-->Line_29 $$ if (javaLikeQuoteHandler != null && javaLikeQuoteHandler.getStringTokenTypes() != null && javaLikeQuoteHandler.getStringTokenTypes().contains(tokenType)) [ FD ]
Line_8 $$ String commentText = comment.getText()-->Line_42 $$ if (lexer.getTokenEnd() == commentText.length()) [ FD ]
Line_4 $$ if (handler.isApplicable(comment, commenter)) -->Line_5 $$ return handler.isCommentComplete(comment, commenter, editor)[ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_48 $$ if (isInvalidPsi(comment)) [ FD ]
Line_10 $$ final String expectedCommentEnd = docComment ? commenter.getDocumentationCommentSuffix() : commenter.getBlockCommentSuffix()-->Line_32 $$ if (text.endsWith(expectedCommentEnd) && endOffset < containingFile.getTextLength() && containingFile.getText().charAt(endOffset) == '\n') [ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_13 $$ final PsiFile containingFile = comment.getContainingFile()[ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_10 $$ final String expectedCommentEnd = docComment ? commenter.getDocumentationCommentSuffix() : commenter.getBlockCommentSuffix()[ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_22 $$ QuoteHandler fileTypeHandler = TypedHandler.getQuoteHandler(containingFile, editor)[ FD ]
Line_8 $$ String commentText = comment.getText()-->Line_21 $$ lexer.start(commentText, commentPrefix == null ? 0 : commentPrefix.length(), commentText.length())[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_14 $$ final Language language = containingFile.getLanguage()[ CD ]
Line_24 $$ while (true) -->Line_39 $$ if (tokenType == commenter.getLineCommentTokenType() && lexer.getTokenText().contains(commentPrefix)) [ CD ]
Line_20 $$ final String commentPrefix = docComment ? commenter.getDocumentationCommentPrefix() : commenter.getBlockCommentPrefix()-->Line_39 $$ if (tokenType == commenter.getLineCommentTokenType() && lexer.getTokenText().contains(commentPrefix)) [ FD ]
Line_13 $$ final PsiFile containingFile = comment.getContainingFile()-->Line_32 $$ if (text.endsWith(expectedCommentEnd) && endOffset < containingFile.getTextLength() && containingFile.getText().charAt(endOffset) == '\n') [ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_9 $$ final boolean docComment = isDocComment(comment, commenter)[ CD ]
Line_13 $$ final PsiFile containingFile = comment.getContainingFile()-->Line_22 $$ QuoteHandler fileTypeHandler = TypedHandler.getQuoteHandler(containingFile, editor)[ FD ]
Line_44 $$ String prefix = commenter.getLineCommentPrefix()-->Line_45 $$ lexer.start(commentText, lexer.getTokenStart() + (prefix == null ? 0 : prefix.length()), commentText.length())[ FD ]
Line_24 $$ while (true) -->Line_29 $$ if (javaLikeQuoteHandler != null && javaLikeQuoteHandler.getStringTokenTypes() != null && javaLikeQuoteHandler.getStringTokenTypes().contains(tokenType)) [ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_20 $$ final String commentPrefix = docComment ? commenter.getDocumentationCommentPrefix() : commenter.getBlockCommentPrefix()[ CD ]
Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())-->Line_30 $$ String text = commentText.substring(lexer.getTokenStart(), lexer.getTokenEnd())[ FD ]
Line_39 $$ if (tokenType == commenter.getLineCommentTokenType() && lexer.getTokenText().contains(commentPrefix)) -->Line_40 $$ return false[ CD ]
Line_43 $$ if (tokenType == commenter.getLineCommentTokenType()) -->Line_46 $$ lexer.advance()[ CD ]
Line_43 $$ if (tokenType == commenter.getLineCommentTokenType()) -->Line_48 $$ if (isInvalidPsi(comment)) [ CD ]
Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())-->Line_45 $$ lexer.start(commentText, lexer.getTokenStart() + (prefix == null ? 0 : prefix.length()), commentText.length())[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_36 $$ if (tokenType == commenter.getDocumentationCommentTokenType() || tokenType == commenter.getBlockCommentTokenType()) [ FD ]
Line_42 $$ if (lexer.getTokenEnd() == commentText.length()) -->Line_51 $$ return true[ CD ]
Line_13 $$ final PsiFile containingFile = comment.getContainingFile()-->Line_19 $$ Lexer lexer = parserDefinition.createLexer(containingFile.getProject())[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_9 $$ final boolean docComment = isDocComment(comment, commenter)[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_11 $$ if (!commentText.endsWith(expectedCommentEnd))[ CD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_44 $$ String prefix = commenter.getLineCommentPrefix()[ FD ]
Line_2 $$ public static boolean isCommentComplete(PsiComment comment, CodeDocumentationAwareCommenter commenter, Editor editor) -->Line_8 $$ String commentText = comment.getText()[ CD ]
Line_16 $$ if (parserDefinition == null) -->Line_17 $$ return true[ CD ]
