Line_5 $$ path = path.substring(1)-->Line_11 $$ path = StringUtils.stripFilenameExtension(path)[ FD ]
Line_2 $$ protected String transformPath(String lookupPath) -->Line_13 $$ if (!SLASH.equals(this.separator)) [ CD ]
Line_2 $$ protected String transformPath(String lookupPath) -->Line_3 $$ String path = lookupPath[ CD ]
Line_3 $$ String path = lookupPath-->Line_4 $$ if (this.stripLeadingSlash && path.startsWith(SLASH)) [ FD ]
Line_8 $$ path = path.substring(0, path.length() - 1)-->Line_14 $$ path = StringUtils.replace(path, SLASH, this.separator)[ FD ]
Line_5 $$ path = path.substring(1)-->Line_14 $$ path = StringUtils.replace(path, SLASH, this.separator)[ FD ]
Line_3 $$ String path = lookupPath-->Line_5 $$ path = path.substring(1)[ FD ]
Line_2 $$ protected String transformPath(String lookupPath) -->Line_4 $$ if (this.stripLeadingSlash && path.startsWith(SLASH)) [ CD ]
Line_10 $$ if (this.stripExtension) -->Line_11 $$ path = StringUtils.stripFilenameExtension(path)[ CD ]
Line_2 $$ protected String transformPath(String lookupPath) -->Line_10 $$ if (this.stripExtension) [ CD ]
Line_3 $$ String path = lookupPath-->Line_8 $$ path = path.substring(0, path.length() - 1)[ FD ]
Line_3 $$ String path = lookupPath-->Line_11 $$ path = StringUtils.stripFilenameExtension(path)[ FD ]
Line_11 $$ path = StringUtils.stripFilenameExtension(path)-->Line_14 $$ path = StringUtils.replace(path, SLASH, this.separator)[ FD ]
Line_8 $$ path = path.substring(0, path.length() - 1)-->Line_11 $$ path = StringUtils.stripFilenameExtension(path)[ FD ]
Line_5 $$ path = path.substring(1)-->Line_7 $$ if (this.stripTrailingSlash && path.endsWith(SLASH)) [ FD ]
Line_7 $$ if (this.stripTrailingSlash && path.endsWith(SLASH)) -->Line_8 $$ path = path.substring(0, path.length() - 1)[ CD ]
Line_2 $$ protected String transformPath(String lookupPath) -->Line_16 $$ return path[ CD ]
Line_5 $$ path = path.substring(1)-->Line_8 $$ path = path.substring(0, path.length() - 1)[ FD ]
Line_13 $$ if (!SLASH.equals(this.separator)) -->Line_14 $$ path = StringUtils.replace(path, SLASH, this.separator)[ CD ]
Line_3 $$ String path = lookupPath-->Line_7 $$ if (this.stripTrailingSlash && path.endsWith(SLASH)) [ FD ]
Line_4 $$ if (this.stripLeadingSlash && path.startsWith(SLASH)) -->Line_5 $$ path = path.substring(1)[ CD ]
Line_3 $$ String path = lookupPath-->Line_14 $$ path = StringUtils.replace(path, SLASH, this.separator)[ FD ]
Line_2 $$ protected String transformPath(String lookupPath) -->Line_7 $$ if (this.stripTrailingSlash && path.endsWith(SLASH)) [ CD ]
