Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_66 $$ GrClosableBlock closableBlock = (GrClosableBlock) blockPsi[ CD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_21 $$ if (childNode.getTextRange().getLength() > 0) [ FD ]
Line_34 $$ if (blockPsi instanceof GrListOrMap && ((GrListOrMap) blockPsi).isMap() && myContext.getGroovySettings().ALIGN_NAMED_ARGS_IN_MAP) -->Line_36 $$ AlignmentProvider.Aligner exprs = myAlignmentProvider.createAligner(true)[ CD ]
Line_55 $$ if (!isKeyword(node))-->Line_56 $$ aligner.append(node.getPsi())[ CD ]
Line_27 $$ if (NESTED.contains(elementType) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) -->Line_29 $$ AlignmentProvider.Aligner dotsAligner = myContext.getSettings().ALIGN_MULTILINE_CHAINED_METHODS ? myAlignmentProvider.createAligner(false) : null[ CD ]
Line_79 $$ PsiElement rbrace = closableBlock.getRBrace()-->Line_80 $$ if (rbrace != null) [ FD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_27 $$ if (NESTED.contains(elementType) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) [ FD ]
Line_140 $$ if (question != null && colon != null) -->Line_142 $$ questionColonAligner.append(question.getPsi())[ CD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_68 $$ PsiElement lbrace = closableBlock.getLBrace()[ CD ]
Line_134 $$ if (!(conditional instanceof GrElvisExpression)) -->Line_135 $$ exprAligner.append(conditional.getThenBranch())[ CD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_84 $$ return blocks[ CD ]
Line_120 $$ if (blockPsi instanceof GrAssignmentExpression) -->Line_129 $$ if (blockPsi instanceof GrConditionalExpression) [ CD ]
Line_124 $$ final GrExpression rValue = assignment.getRValue()-->Line_126 $$ myAlignmentProvider.addPair(lValue, rValue, false)[ FD ]
Line_120 $$ if (blockPsi instanceof GrAssignmentExpression) -->Line_121 $$ if (myContext.getSettings().ALIGN_MULTILINE_ASSIGNMENT) [ CD ]
Line_38 $$ for (GrNamedArgument arg : namedArgs) -->Line_39 $$ GrArgumentLabel label = arg.getLabel()[ FD ]
Line_115 $$ final GrExpression right = binary.getRightOperand()-->Line_117 $$ myAlignmentProvider.addPair(left, right, false)[ FD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_27 $$ if (NESTED.contains(elementType) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) [ CD ]
Line_49 $$ if (isListLikeClause(blockPsi)) -->Line_51 $$ List<ASTNode> astNodes = visibleChildren(myNode)[ CD ]
Line_141 $$ AlignmentProvider.Aligner questionColonAligner = myAlignmentProvider.createAligner(false)-->Line_142 $$ questionColonAligner.append(question.getPsi())[ FD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_103 $$ if (blockPsi instanceof GrTraditionalForClause) [ FD ]
Line_5 $$ if (blockPsi instanceof GrBinaryExpression && !(blockPsi.getParent() instanceof GrBinaryExpression)) -->Line_6 $$ return generateForBinaryExpr()[ CD ]
Line_16 $$ if (elementType == GroovyElementTypes.GSTRING || elementType == GroovyElementTypes.REGEX || elementType == GroovyTokenTypes.mREGEX_LITERAL || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_18 $$ final ArrayList<Block> subBlocks = new ArrayList<Block>()[ CD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_22 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), Wrap.createWrap(WrapType.NONE, false), context))[ FD ]
Line_18 $$ final ArrayList<Block> subBlocks = new ArrayList<Block>()-->Line_99 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), getChildWrap(childNode), myContext))[ FD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_49 $$ if (isListLikeClause(blockPsi)) [ FD ]
Line_123 $$ final GrExpression lValue = assignment.getLValue()-->Line_126 $$ myAlignmentProvider.addPair(lValue, rValue, false)[ FD ]
Line_131 $$ final GrConditionalExpression conditional = (GrConditionalExpression) blockPsi-->Line_135 $$ exprAligner.append(conditional.getThenBranch())[ FD ]
Line_121 $$ if (myContext.getSettings().ALIGN_MULTILINE_ASSIGNMENT) -->Line_123 $$ final GrExpression lValue = assignment.getLValue()[ CD ]
Line_111 $$ if (blockPsi instanceof GrBinaryExpression) -->Line_112 $$ if (myContext.getSettings().ALIGN_MULTILINE_BINARY_OPERATION) [ CD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_52 $$ if (mustAlign(blockPsi, astNodes)) [ FD ]
Line_8 $$ if ((elementType == GroovyTokenTypes.mSTRING_LITERAL || elementType == GroovyTokenTypes.mGSTRING_LITERAL) && myBlock.getTextRange().equals(myNode.getTextRange())) -->Line_10 $$ if (text.length() > 6) [ CD ]
Line_105 $$ final GrTraditionalForClause clause = (GrTraditionalForClause) blockPsi-->Line_108 $$ parenthesesAligner.append(clause.getCondition())[ FD ]
Line_64 $$ boolean classLevel = blockPsi instanceof GrTypeDefinitionBody-->Line_86 $$ if (blockPsi instanceof GrCodeBlock || blockPsi instanceof GroovyFile || classLevel) [ FD ]
Line_113 $$ final GrBinaryExpression binary = (GrBinaryExpression) blockPsi-->Line_115 $$ final GrExpression right = binary.getRightOperand()[ FD ]
Line_105 $$ final GrTraditionalForClause clause = (GrTraditionalForClause) blockPsi-->Line_107 $$ parenthesesAligner.append(clause.getInitialization())[ FD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_94 $$ if (childNode.getElementType() == GroovyTokenTypes.mRPAREN)[ FD ]
Line_106 $$ final AlignmentProvider.Aligner parenthesesAligner = myAlignmentProvider.createAligner(false)-->Line_108 $$ parenthesesAligner.append(clause.getCondition())[ FD ]
Line_18 $$ final ArrayList<Block> subBlocks = new ArrayList<Block>()-->Line_31 $$ addNestedChildren(myNode.getPsi(), subBlocks, dotsAligner, true, wrap)[ FD ]
Line_131 $$ final GrConditionalExpression conditional = (GrConditionalExpression) blockPsi-->Line_137 $$ exprAligner.append(conditional.getElseBranch())[ FD ]
Line_76 $$ ClosureBodyBlock bodyBlock = new ClosureBodyBlock(parameterListNode, indent, Wrap.createWrap(WrapType.NONE, false), myContext)-->Line_77 $$ blocks.add(bodyBlock)[ FD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_86 $$ if (blockPsi instanceof GrCodeBlock || blockPsi instanceof GroovyFile || classLevel) [ CD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_49 $$ if (isListLikeClause(blockPsi)) [ CD ]
Line_67 $$ ArrayList<Block> blocks = new ArrayList<Block>()-->Line_71 $$ blocks.add(new GroovyBlock(node, getIndent(node), Wrap.createWrap(WrapType.NONE, false), myContext))[ FD ]
Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) -->Line_134 $$ if (!(conditional instanceof GrElvisExpression)) [ CD ]
Line_96 $$ if (childNode.getElementType() == GroovyElementTypes.PARAMETERS_LIST) -->Line_97 $$ subBlocks.add(new ParameterListBlock(((GrMethod) blockPsi), Indent.getNoneIndent(), Wrap.createWrap(WrapType.NONE, false), myContext))[ CD ]
Line_42 $$ PsiElement colon = arg.getColon()-->Line_43 $$ if (colon == null)[ FD ]
Line_86 $$ if (blockPsi instanceof GrCodeBlock || blockPsi instanceof GroovyFile || classLevel) -->Line_87 $$ return generateSubBlockForCodeBlocks(classLevel, visibleChildren(myNode), myContext.getGroovySettings().INDENT_LABEL_BLOCKS)[ CD ]
Line_18 $$ final ArrayList<Block> subBlocks = new ArrayList<Block>()-->Line_149 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), getChildWrap(childNode), myContext))[ FD ]
Line_42 $$ PsiElement colon = arg.getColon()-->Line_44 $$ colon = arg.getExpression()[ FD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_151 $$ return subBlocks[ CD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_89 $$ if (blockPsi instanceof GrMethod) [ CD ]
Line_103 $$ if (blockPsi instanceof GrTraditionalForClause) -->Line_104 $$ if (myContext.getSettings().ALIGN_MULTILINE_FOR) [ CD ]
Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) -->Line_133 $$ exprAligner.append(conditional.getCondition())[ CD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_67 $$ ArrayList<Block> blocks = new ArrayList<Block>()[ CD ]
Line_42 $$ PsiElement colon = arg.getColon()-->Line_45 $$ if (colon != null)[ FD ]
Line_122 $$ final GrAssignmentExpression assignment = (GrAssignmentExpression) blockPsi-->Line_123 $$ final GrExpression lValue = assignment.getLValue()[ FD ]
Line_132 $$ final AlignmentProvider.Aligner exprAligner = myAlignmentProvider.createAligner(false)-->Line_135 $$ exprAligner.append(conditional.getThenBranch())[ FD ]
Line_9 $$ String text = myNode.getText()-->Line_11 $$ if (text.substring(0, 3).equals("'''") && text.substring(text.length() - 3).equals("'''") || text.substring(0, 3).equals("\"\"\"") & text.substring(text.length() - 3).equals("\"\"\"")) [ FD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_99 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), getChildWrap(childNode), myContext))[ FD ]
Line_131 $$ final GrConditionalExpression conditional = (GrConditionalExpression) blockPsi-->Line_139 $$ ASTNode colon = conditional.getNode().findChildByType(GroovyTokenTypes.mCOLON)[ FD ]
Line_44 $$ colon = arg.getExpression()-->Line_46 $$ exprs.append(colon)[ FD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_77 $$ blocks.add(bodyBlock)[ CD ]
Line_131 $$ final GrConditionalExpression conditional = (GrConditionalExpression) blockPsi-->Line_138 $$ ASTNode question = conditional.getNode().findChildByType(GroovyTokenTypes.mQUESTION)[ FD ]
Line_67 $$ ArrayList<Block> blocks = new ArrayList<Block>()-->Line_82 $$ blocks.add(new GroovyBlock(node, getIndent(node), Wrap.createWrap(WrapType.NONE, false), myContext))[ FD ]
Line_141 $$ AlignmentProvider.Aligner questionColonAligner = myAlignmentProvider.createAligner(false)-->Line_143 $$ questionColonAligner.append(colon.getPsi())[ FD ]
Line_103 $$ if (blockPsi instanceof GrTraditionalForClause) -->Line_111 $$ if (blockPsi instanceof GrBinaryExpression) [ CD ]
Line_39 $$ GrArgumentLabel label = arg.getLabel()-->Line_40 $$ if (label != null)[ FD ]
Line_54 $$ for (ASTNode node : astNodes) -->Line_55 $$ if (!isKeyword(node))[ FD ]
Line_44 $$ colon = arg.getExpression()-->Line_45 $$ if (colon != null)[ FD ]
Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) -->Line_132 $$ final AlignmentProvider.Aligner exprAligner = myAlignmentProvider.createAligner(false)[ CD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_98 $$ if (canBeCorrectBlock(childNode)) [ FD ]
Line_34 $$ if (blockPsi instanceof GrListOrMap && ((GrListOrMap) blockPsi).isMap() && myContext.getGroovySettings().ALIGN_NAMED_ARGS_IN_MAP) -->Line_37 $$ GrNamedArgument[] namedArgs = ((GrListOrMap) blockPsi).getNamedArguments()[ CD ]
Line_112 $$ if (myContext.getSettings().ALIGN_MULTILINE_BINARY_OPERATION) -->Line_113 $$ final GrBinaryExpression binary = (GrBinaryExpression) blockPsi[ CD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_60 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), getChildWrap(childNode), myContext))[ FD ]
Line_112 $$ if (myContext.getSettings().ALIGN_MULTILINE_BINARY_OPERATION) -->Line_116 $$ if (left != null && right != null) [ CD ]
Line_121 $$ if (myContext.getSettings().ALIGN_MULTILINE_ASSIGNMENT) -->Line_122 $$ final GrAssignmentExpression assignment = (GrAssignmentExpression) blockPsi[ CD ]
Line_44 $$ colon = arg.getExpression()-->Line_143 $$ questionColonAligner.append(colon.getPsi())[ FD ]
Line_27 $$ if (NESTED.contains(elementType) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) -->Line_32 $$ return subBlocks[ CD ]
Line_112 $$ if (myContext.getSettings().ALIGN_MULTILINE_BINARY_OPERATION) -->Line_114 $$ final GrExpression left = binary.getLeftOperand()[ CD ]
Line_9 $$ String text = myNode.getText()-->Line_10 $$ if (text.length() > 6) [ FD ]
Line_114 $$ final GrExpression left = binary.getLeftOperand()-->Line_117 $$ myAlignmentProvider.addPair(left, right, false)[ FD ]
Line_16 $$ if (elementType == GroovyElementTypes.GSTRING || elementType == GroovyElementTypes.REGEX || elementType == GroovyTokenTypes.mREGEX_LITERAL || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_25 $$ return subBlocks[ CD ]
Line_36 $$ AlignmentProvider.Aligner exprs = myAlignmentProvider.createAligner(true)-->Line_46 $$ exprs.append(colon)[ FD ]
Line_129 $$ if (blockPsi instanceof GrConditionalExpression) -->Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) [ CD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_75 $$ ASTNode parameterListNode = closableBlock.getParameterList().getNode()[ CD ]
Line_30 $$ final Wrap wrap = myWrappingProcessor.getChainedMethodCallWrap()-->Line_31 $$ addNestedChildren(myNode.getPsi(), subBlocks, dotsAligner, true, wrap)[ FD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_74 $$ Indent indent = Indent.getNormalIndent()[ CD ]
Line_42 $$ PsiElement colon = arg.getColon()-->Line_143 $$ questionColonAligner.append(colon.getPsi())[ FD ]
Line_138 $$ ASTNode question = conditional.getNode().findChildByType(GroovyTokenTypes.mQUESTION)-->Line_142 $$ questionColonAligner.append(question.getPsi())[ FD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_3 $$ PsiElement blockPsi = myNode.getPsi()[ CD ]
Line_54 $$ for (ASTNode node : astNodes) -->Line_82 $$ blocks.add(new GroovyBlock(node, getIndent(node), Wrap.createWrap(WrapType.NONE, false), myContext))[ FD ]
Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) -->Line_131 $$ final GrConditionalExpression conditional = (GrConditionalExpression) blockPsi[ CD ]
Line_111 $$ if (blockPsi instanceof GrBinaryExpression) -->Line_120 $$ if (blockPsi instanceof GrAssignmentExpression) [ CD ]
Line_18 $$ final ArrayList<Block> subBlocks = new ArrayList<Block>()-->Line_22 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), Wrap.createWrap(WrapType.NONE, false), context))[ FD ]
Line_116 $$ if (left != null && right != null) -->Line_117 $$ myAlignmentProvider.addPair(left, right, false)[ CD ]
Line_8 $$ if ((elementType == GroovyTokenTypes.mSTRING_LITERAL || elementType == GroovyTokenTypes.mGSTRING_LITERAL) && myBlock.getTextRange().equals(myNode.getTextRange())) -->Line_9 $$ String text = myNode.getText()[ CD ]
Line_27 $$ if (NESTED.contains(elementType) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) -->Line_31 $$ addNestedChildren(myNode.getPsi(), subBlocks, dotsAligner, true, wrap)[ CD ]
Line_131 $$ final GrConditionalExpression conditional = (GrConditionalExpression) blockPsi-->Line_133 $$ exprAligner.append(conditional.getCondition())[ FD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_129 $$ if (blockPsi instanceof GrConditionalExpression) [ FD ]
Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) -->Line_138 $$ ASTNode question = conditional.getNode().findChildByType(GroovyTokenTypes.mQUESTION)[ CD ]
Line_89 $$ if (blockPsi instanceof GrMethod) -->Line_103 $$ if (blockPsi instanceof GrTraditionalForClause) [ CD ]
Line_132 $$ final AlignmentProvider.Aligner exprAligner = myAlignmentProvider.createAligner(false)-->Line_133 $$ exprAligner.append(conditional.getCondition())[ FD ]
Line_66 $$ GrClosableBlock closableBlock = (GrClosableBlock) blockPsi-->Line_79 $$ PsiElement rbrace = closableBlock.getRBrace()[ FD ]
Line_54 $$ for (ASTNode node : astNodes) -->Line_56 $$ aligner.append(node.getPsi())[ FD ]
Line_106 $$ final AlignmentProvider.Aligner parenthesesAligner = myAlignmentProvider.createAligner(false)-->Line_107 $$ parenthesesAligner.append(clause.getInitialization())[ FD ]
Line_112 $$ if (myContext.getSettings().ALIGN_MULTILINE_BINARY_OPERATION) -->Line_115 $$ final GrExpression right = binary.getRightOperand()[ CD ]
Line_18 $$ final ArrayList<Block> subBlocks = new ArrayList<Block>()-->Line_60 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), getChildWrap(childNode), myContext))[ FD ]
Line_54 $$ for (ASTNode node : astNodes) -->Line_71 $$ blocks.add(new GroovyBlock(node, getIndent(node), Wrap.createWrap(WrapType.NONE, false), myContext))[ FD ]
Line_4 $$ IElementType elementType = myNode.getElementType()-->Line_27 $$ if (NESTED.contains(elementType) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) [ FD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_16 $$ if (elementType == GroovyElementTypes.GSTRING || elementType == GroovyElementTypes.REGEX || elementType == GroovyTokenTypes.mREGEX_LITERAL || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) [ CD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_8 $$ if ((elementType == GroovyTokenTypes.mSTRING_LITERAL || elementType == GroovyTokenTypes.mGSTRING_LITERAL) && myBlock.getTextRange().equals(myNode.getTextRange())) [ CD ]
Line_10 $$ if (text.length() > 6) -->Line_11 $$ if (text.substring(0, 3).equals("'''") && text.substring(text.length() - 3).equals("'''") || text.substring(0, 3).equals("\"\"\"") & text.substring(text.length() - 3).equals("\"\"\"")) [ CD ]
Line_121 $$ if (myContext.getSettings().ALIGN_MULTILINE_ASSIGNMENT) -->Line_124 $$ final GrExpression rValue = assignment.getRValue()[ CD ]
Line_40 $$ if (label != null)-->Line_41 $$ labels.append(label)[ CD ]
Line_34 $$ if (blockPsi instanceof GrListOrMap && ((GrListOrMap) blockPsi).isMap() && myContext.getGroovySettings().ALIGN_NAMED_ARGS_IN_MAP) -->Line_35 $$ AlignmentProvider.Aligner labels = myAlignmentProvider.createAligner(false)[ CD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_64 $$ boolean classLevel = blockPsi instanceof GrTypeDefinitionBody[ CD ]
Line_106 $$ final AlignmentProvider.Aligner parenthesesAligner = myAlignmentProvider.createAligner(false)-->Line_109 $$ parenthesesAligner.append(clause.getUpdate())[ FD ]
Line_89 $$ if (blockPsi instanceof GrMethod) -->Line_102 $$ return subBlocks[ CD ]
Line_96 $$ if (childNode.getElementType() == GroovyElementTypes.PARAMETERS_LIST) -->Line_98 $$ if (canBeCorrectBlock(childNode)) [ CD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_92 $$ if (childNode.getElementType() == GroovyTokenTypes.mLPAREN)[ FD ]
Line_53 $$ final AlignmentProvider.Aligner aligner = myAlignmentProvider.createAligner(false)-->Line_56 $$ aligner.append(node.getPsi())[ FD ]
Line_66 $$ GrClosableBlock closableBlock = (GrClosableBlock) blockPsi-->Line_68 $$ PsiElement lbrace = closableBlock.getLBrace()[ FD ]
Line_105 $$ final GrTraditionalForClause clause = (GrTraditionalForClause) blockPsi-->Line_109 $$ parenthesesAligner.append(clause.getUpdate())[ FD ]
Line_39 $$ GrArgumentLabel label = arg.getLabel()-->Line_41 $$ labels.append(label)[ FD ]
Line_51 $$ List<ASTNode> astNodes = visibleChildren(myNode)-->Line_52 $$ if (mustAlign(blockPsi, astNodes)) [ FD ]
Line_16 $$ if (elementType == GroovyElementTypes.GSTRING || elementType == GroovyElementTypes.REGEX || elementType == GroovyTokenTypes.mREGEX_LITERAL || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_17 $$ final FormattingContext context = myNode.getPsi() instanceof GrString && ((GrString) myNode.getPsi()).isPlainString() ? myContext.createContext(true) : myContext[ CD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_111 $$ if (blockPsi instanceof GrBinaryExpression) [ FD ]
Line_104 $$ if (myContext.getSettings().ALIGN_MULTILINE_FOR) -->Line_105 $$ final GrTraditionalForClause clause = (GrTraditionalForClause) blockPsi[ CD ]
Line_42 $$ PsiElement colon = arg.getColon()-->Line_46 $$ exprs.append(colon)[ FD ]
Line_27 $$ if (NESTED.contains(elementType) && blockPsi.getParent() != null && !NESTED.contains(blockPsi.getParent().getNode().getElementType())) -->Line_30 $$ final Wrap wrap = myWrappingProcessor.getChainedMethodCallWrap()[ CD ]
Line_45 $$ if (colon != null)-->Line_46 $$ exprs.append(colon)[ CD ]
Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) -->Line_137 $$ exprAligner.append(conditional.getElseBranch())[ CD ]
Line_140 $$ if (question != null && colon != null) -->Line_143 $$ questionColonAligner.append(colon.getPsi())[ CD ]
Line_98 $$ if (canBeCorrectBlock(childNode)) -->Line_99 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), getChildWrap(childNode), myContext))[ CD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_5 $$ if (blockPsi instanceof GrBinaryExpression && !(blockPsi.getParent() instanceof GrBinaryExpression)) [ CD ]
Line_11 $$ if (text.substring(0, 3).equals("'''") && text.substring(text.length() - 3).equals("'''") || text.substring(0, 3).equals("\"\"\"") & text.substring(text.length() - 3).equals("\"\"\"")) -->Line_12 $$ return generateForMultiLineString()[ CD ]
Line_52 $$ if (mustAlign(blockPsi, astNodes)) -->Line_53 $$ final AlignmentProvider.Aligner aligner = myAlignmentProvider.createAligner(false)[ CD ]
Line_66 $$ GrClosableBlock closableBlock = (GrClosableBlock) blockPsi-->Line_75 $$ ASTNode parameterListNode = closableBlock.getParameterList().getNode()[ FD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_120 $$ if (blockPsi instanceof GrAssignmentExpression) [ FD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_80 $$ if (rbrace != null) [ CD ]
Line_104 $$ if (myContext.getSettings().ALIGN_MULTILINE_FOR) -->Line_109 $$ parenthesesAligner.append(clause.getUpdate())[ CD ]
Line_104 $$ if (myContext.getSettings().ALIGN_MULTILINE_FOR) -->Line_108 $$ parenthesesAligner.append(clause.getCondition())[ CD ]
Line_38 $$ for (GrNamedArgument arg : namedArgs) -->Line_42 $$ PsiElement colon = arg.getColon()[ FD ]
Line_67 $$ ArrayList<Block> blocks = new ArrayList<Block>()-->Line_77 $$ blocks.add(bodyBlock)[ FD ]
Line_69 $$ if (lbrace != null) -->Line_71 $$ blocks.add(new GroovyBlock(node, getIndent(node), Wrap.createWrap(WrapType.NONE, false), myContext))[ CD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_76 $$ ClosureBodyBlock bodyBlock = new ClosureBodyBlock(parameterListNode, indent, Wrap.createWrap(WrapType.NONE, false), myContext)[ CD ]
Line_38 $$ for (GrNamedArgument arg : namedArgs) -->Line_44 $$ colon = arg.getExpression()[ FD ]
Line_122 $$ final GrAssignmentExpression assignment = (GrAssignmentExpression) blockPsi-->Line_124 $$ final GrExpression rValue = assignment.getRValue()[ FD ]
Line_49 $$ if (isListLikeClause(blockPsi)) -->Line_52 $$ if (mustAlign(blockPsi, astNodes)) [ CD ]
Line_35 $$ AlignmentProvider.Aligner labels = myAlignmentProvider.createAligner(false)-->Line_41 $$ labels.append(label)[ FD ]
Line_43 $$ if (colon == null)-->Line_44 $$ colon = arg.getExpression()[ CD ]
Line_16 $$ if (elementType == GroovyElementTypes.GSTRING || elementType == GroovyElementTypes.REGEX || elementType == GroovyTokenTypes.mREGEX_LITERAL || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_LITERAL) -->Line_19 $$ ASTNode[] children = getGroovyChildren(myNode)[ CD ]
Line_80 $$ if (rbrace != null) -->Line_82 $$ blocks.add(new GroovyBlock(node, getIndent(node), Wrap.createWrap(WrapType.NONE, false), myContext))[ CD ]
Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) -->Line_139 $$ ASTNode colon = conditional.getNode().findChildByType(GroovyTokenTypes.mCOLON)[ CD ]
Line_113 $$ final GrBinaryExpression binary = (GrBinaryExpression) blockPsi-->Line_114 $$ final GrExpression left = binary.getLeftOperand()[ FD ]
Line_121 $$ if (myContext.getSettings().ALIGN_MULTILINE_ASSIGNMENT) -->Line_125 $$ if (lValue != null && rValue != null) [ CD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_5 $$ if (blockPsi instanceof GrBinaryExpression && !(blockPsi.getParent() instanceof GrBinaryExpression)) [ FD ]
Line_29 $$ AlignmentProvider.Aligner dotsAligner = myContext.getSettings().ALIGN_MULTILINE_CHAINED_METHODS ? myAlignmentProvider.createAligner(false) : null-->Line_31 $$ addNestedChildren(myNode.getPsi(), subBlocks, dotsAligner, true, wrap)[ FD ]
Line_68 $$ PsiElement lbrace = closableBlock.getLBrace()-->Line_70 $$ ASTNode node = lbrace.getNode()[ FD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_96 $$ if (childNode.getElementType() == GroovyElementTypes.PARAMETERS_LIST) [ FD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_79 $$ PsiElement rbrace = closableBlock.getRBrace()[ CD ]
Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) -->Line_69 $$ if (lbrace != null) [ CD ]
Line_18 $$ final ArrayList<Block> subBlocks = new ArrayList<Block>()-->Line_97 $$ subBlocks.add(new ParameterListBlock(((GrMethod) blockPsi), Indent.getNoneIndent(), Wrap.createWrap(WrapType.NONE, false), myContext))[ FD ]
Line_64 $$ boolean classLevel = blockPsi instanceof GrTypeDefinitionBody-->Line_87 $$ return generateSubBlockForCodeBlocks(classLevel, visibleChildren(myNode), myContext.getGroovySettings().INDENT_LABEL_BLOCKS)[ FD ]
Line_3 $$ PsiElement blockPsi = myNode.getPsi()-->Line_89 $$ if (blockPsi instanceof GrMethod) [ FD ]
Line_104 $$ if (myContext.getSettings().ALIGN_MULTILINE_FOR) -->Line_107 $$ parenthesesAligner.append(clause.getInitialization())[ CD ]
Line_125 $$ if (lValue != null && rValue != null) -->Line_126 $$ myAlignmentProvider.addPair(lValue, rValue, false)[ CD ]
Line_132 $$ final AlignmentProvider.Aligner exprAligner = myAlignmentProvider.createAligner(false)-->Line_137 $$ exprAligner.append(conditional.getElseBranch())[ FD ]
Line_79 $$ PsiElement rbrace = closableBlock.getRBrace()-->Line_81 $$ ASTNode node = rbrace.getNode()[ FD ]
Line_20 $$ for (ASTNode childNode : children) -->Line_149 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), getChildWrap(childNode), myContext))[ FD ]
Line_21 $$ if (childNode.getTextRange().getLength() > 0) -->Line_22 $$ subBlocks.add(new GroovyBlock(childNode, getIndent(childNode), Wrap.createWrap(WrapType.NONE, false), context))[ CD ]
Line_80 $$ if (rbrace != null) -->Line_81 $$ ASTNode node = rbrace.getNode()[ CD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_4 $$ IElementType elementType = myNode.getElementType()[ CD ]
Line_140 $$ if (question != null && colon != null) -->Line_141 $$ AlignmentProvider.Aligner questionColonAligner = myAlignmentProvider.createAligner(false)[ CD ]
Line_49 $$ if (isListLikeClause(blockPsi)) -->Line_62 $$ return subBlocks[ CD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_34 $$ if (blockPsi instanceof GrListOrMap && ((GrListOrMap) blockPsi).isMap() && myContext.getGroovySettings().ALIGN_NAMED_ARGS_IN_MAP) [ CD ]
Line_2 $$ public List<Block> generateSubBlocks() -->Line_65 $$ if (blockPsi instanceof GrClosableBlock && ((GrClosableBlock) blockPsi).getArrow() != null && ((GrClosableBlock) blockPsi).getParameters().length > 0 && !getClosureBodyVisibleChildren(myNode).isEmpty()) [ CD ]
Line_104 $$ if (myContext.getSettings().ALIGN_MULTILINE_FOR) -->Line_106 $$ final AlignmentProvider.Aligner parenthesesAligner = myAlignmentProvider.createAligner(false)[ CD ]
Line_69 $$ if (lbrace != null) -->Line_70 $$ ASTNode node = lbrace.getNode()[ CD ]
Line_68 $$ PsiElement lbrace = closableBlock.getLBrace()-->Line_69 $$ if (lbrace != null) [ FD ]
Line_130 $$ if (myContext.getSettings().ALIGN_MULTILINE_TERNARY_OPERATION) -->Line_140 $$ if (question != null && colon != null) [ CD ]
