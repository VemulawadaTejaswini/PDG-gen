Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_5 $$ parametersList.addProperty("skipTests", "true")[ FD ]
Line_8 $$ if (entry.getKey().length() > 0) -->Line_9 $$ parametersList.addProperty(entry.getKey(), entry.getValue())[ CD ]
Line_7 $$ for (Map.Entry<String, String> entry : runnerSettings.getMavenProperties().entrySet()) -->Line_9 $$ parametersList.addProperty(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_7 $$ for (Map.Entry<String, String> entry : runnerSettings.getMavenProperties().entrySet()) [ FD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_13 $$ parametersList.add(goal)[ FD ]
Line_12 $$ for (String goal : parameters.getGoals()) -->Line_13 $$ parametersList.add(goal)[ FD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_15 $$ addOption(parametersList, "P", encodeProfiles(parameters.getProfilesMap()))[ FD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_4 $$ if (runnerSettings.isSkipTests()) [ CD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_9 $$ parametersList.addProperty(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_15 $$ addOption(parametersList, "P", encodeProfiles(parameters.getProfilesMap()))[ CD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_4 $$ if (runnerSettings.isSkipTests()) [ FD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_3 $$ encodeCoreAndRunnerSettings(coreSettings, mavenHome, parametersList)[ FD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_12 $$ for (String goal : parameters.getGoals()) [ FD ]
Line_2 $$ private static void addMavenParameters(ParametersList parametersList, String mavenHome, MavenGeneralSettings coreSettings, MavenRunnerSettings runnerSettings, MavenRunnerParameters parameters) -->Line_3 $$ encodeCoreAndRunnerSettings(coreSettings, mavenHome, parametersList)[ CD ]
Line_7 $$ for (Map.Entry<String, String> entry : runnerSettings.getMavenProperties().entrySet()) -->Line_8 $$ if (entry.getKey().length() > 0) [ FD ]
Line_4 $$ if (runnerSettings.isSkipTests()) -->Line_5 $$ parametersList.addProperty("skipTests", "true")[ CD ]
