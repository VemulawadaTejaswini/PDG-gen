Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_25 $$ while (nextLineStart < logDoc.getTextLength() && Character.isWhitespace(logDoc.getCharsSequence().charAt(nextLineStart))) [ FD ]
Line_6 $$ i = StringUtil.indexOf(logDoc.getText(), '\n', i + 1)-->Line_7 $$ if (i < 0) [ FD ]
Line_5 $$ while (true) -->Line_7 $$ if (i < 0) [ CD ]
Line_18 $$ if (separator.isValid()) -->Line_24 $$ nextLineStart = start + 1 + indent.length()[ CD ]
Line_17 $$ for (RangeMarker separator : lineSeparators) -->Line_23 $$ logDoc.replaceString(start, separator.getEndOffset(), "\n" + indent)[ FD ]
Line_24 $$ nextLineStart = start + 1 + indent.length()-->Line_25 $$ while (nextLineStart < logDoc.getTextLength() && Character.isWhitespace(logDoc.getCharsSequence().charAt(nextLineStart))) [ FD ]
Line_17 $$ for (RangeMarker separator : lineSeparators) -->Line_19 $$ int start = separator.getStartOffset()[ FD ]
Line_24 $$ nextLineStart = start + 1 + indent.length()-->Line_26 $$ logDoc.deleteString(nextLineStart, nextLineStart + 1)[ FD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_3 $$ if (!hasHtml) [ CD ]
Line_19 $$ int start = separator.getStartOffset()-->Line_20 $$ if (start == nextLineStart) [ FD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_6 $$ i = StringUtil.indexOf(logDoc.getText(), '\n', i + 1)[ FD ]
Line_18 $$ if (separator.isValid()) -->Line_19 $$ int start = separator.getStartOffset()[ CD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_16 $$ int nextLineStart = -1[ CD ]
Line_18 $$ if (separator.isValid()) -->Line_25 $$ while (nextLineStart < logDoc.getTextLength() && Character.isWhitespace(logDoc.getCharsSequence().charAt(nextLineStart))) [ CD ]
Line_3 $$ if (!hasHtml) -->Line_5 $$ while (true) [ CD ]
Line_3 $$ if (!hasHtml) -->Line_4 $$ int i = -1[ CD ]
Line_4 $$ int i = -1-->Line_10 $$ lineSeparators.add(logDoc.createRangeMarker(i, i + 1))[ FD ]
Line_17 $$ for (RangeMarker separator : lineSeparators) -->Line_18 $$ if (separator.isValid()) [ FD ]
Line_25 $$ while (nextLineStart < logDoc.getTextLength() && Character.isWhitespace(logDoc.getCharsSequence().charAt(nextLineStart))) -->Line_26 $$ logDoc.deleteString(nextLineStart, nextLineStart + 1)[ CD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_10 $$ lineSeparators.add(logDoc.createRangeMarker(i, i + 1))[ FD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_13 $$ if (!lineSeparators.isEmpty() && afterTitle != null && afterTitle.isValid()) [ FD ]
Line_16 $$ int nextLineStart = -1-->Line_24 $$ nextLineStart = start + 1 + indent.length()[ FD ]
Line_5 $$ while (true) -->Line_10 $$ lineSeparators.add(logDoc.createRangeMarker(i, i + 1))[ CD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_23 $$ logDoc.replaceString(start, separator.getEndOffset(), "\n" + indent)[ FD ]
Line_4 $$ int i = -1-->Line_6 $$ i = StringUtil.indexOf(logDoc.getText(), '\n', i + 1)[ FD ]
Line_16 $$ int nextLineStart = -1-->Line_26 $$ logDoc.deleteString(nextLineStart, nextLineStart + 1)[ FD ]
Line_18 $$ if (separator.isValid()) -->Line_20 $$ if (start == nextLineStart) [ CD ]
Line_5 $$ while (true) -->Line_6 $$ i = StringUtil.indexOf(logDoc.getText(), '\n', i + 1)[ CD ]
Line_4 $$ int i = -1-->Line_7 $$ if (i < 0) [ FD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_26 $$ logDoc.deleteString(nextLineStart, nextLineStart + 1)[ FD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_14 $$ lineSeparators.add(afterTitle)[ FD ]
Line_16 $$ int nextLineStart = -1-->Line_20 $$ if (start == nextLineStart) [ FD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_24 $$ nextLineStart = start + 1 + indent.length()[ FD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_3 $$ if (!hasHtml) [ FD ]
Line_19 $$ int start = separator.getStartOffset()-->Line_23 $$ logDoc.replaceString(start, separator.getEndOffset(), "\n" + indent)[ FD ]
Line_18 $$ if (separator.isValid()) -->Line_23 $$ logDoc.replaceString(start, separator.getEndOffset(), "\n" + indent)[ CD ]
Line_6 $$ i = StringUtil.indexOf(logDoc.getText(), '\n', i + 1)-->Line_10 $$ lineSeparators.add(logDoc.createRangeMarker(i, i + 1))[ FD ]
Line_13 $$ if (!lineSeparators.isEmpty() && afterTitle != null && afterTitle.isValid()) -->Line_14 $$ lineSeparators.add(afterTitle)[ CD ]
Line_2 $$ private static void indentNewLines(DocumentImpl logDoc, List<RangeMarker> lineSeparators, RangeMarker afterTitle, boolean hasHtml, String indent) -->Line_13 $$ if (!lineSeparators.isEmpty() && afterTitle != null && afterTitle.isValid()) [ CD ]
Line_16 $$ int nextLineStart = -1-->Line_25 $$ while (nextLineStart < logDoc.getTextLength() && Character.isWhitespace(logDoc.getCharsSequence().charAt(nextLineStart))) [ FD ]
