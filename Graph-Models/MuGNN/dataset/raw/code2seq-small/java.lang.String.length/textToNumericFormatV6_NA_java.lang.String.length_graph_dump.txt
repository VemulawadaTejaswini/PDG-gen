Line_20 $$ partsLo = parts.length - skipIndex - 1-->Line_24 $$ if (parts[parts.length - 1].length() == 0 && --partsLo != 0) [ FD ]
Line_10 $$ if (skipIndex >= 0) -->Line_11 $$ return null[ CD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_18 $$ if (skipIndex >= 0) [ CD ]
Line_20 $$ partsLo = parts.length - skipIndex - 1-->Line_29 $$ partsLo = 0[ FD ]
Line_40 $$ for (int i = 0; i < partsSkipped; i++) -->Line_41 $$ rawBytes.putShort((short) 0)[ CD ]
Line_7 $$ int skipIndex = -1-->Line_18 $$ if (skipIndex >= 0) [ FD ]
Line_18 $$ if (skipIndex >= 0) -->Line_24 $$ if (parts[parts.length - 1].length() == 0 && --partsLo != 0) [ CD ]
Line_13 $$ skipIndex = i-->Line_10 $$ if (skipIndex >= 0) [ FD ]
Line_21 $$ if (parts[0].length() == 0 && --partsHi != 0) -->Line_22 $$ return null[ CD ]
Line_18 $$ if (skipIndex >= 0) -->Line_21 $$ if (parts[0].length() == 0 && --partsHi != 0) [ CD ]
Line_13 $$ skipIndex = i-->Line_19 $$ partsHi = skipIndex[ FD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_16 $$ int partsHi[ CD ]
Line_19 $$ partsHi = skipIndex-->Line_37 $$ for (int i = 0; i < partsHi; i++) [ FD ]
Line_19 $$ partsHi = skipIndex-->Line_21 $$ if (parts[0].length() == 0 && --partsHi != 0) [ FD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_3 $$ String[] parts = ipString.split(":", IPV6_PART_COUNT + 2)[ CD ]
Line_16 $$ int partsHi-->Line_19 $$ partsHi = skipIndex[ FD ]
Line_19 $$ partsHi = skipIndex-->Line_28 $$ partsHi = parts.length[ FD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_17 $$ int partsLo[ CD ]
Line_16 $$ int partsHi-->Line_21 $$ if (parts[0].length() == 0 && --partsHi != 0) [ FD ]
Line_37 $$ for (int i = 0; i < partsHi; i++) -->Line_40 $$ for (int i = 0; i < partsSkipped; i++) [ FD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_7 $$ int skipIndex = -1[ CD ]
Line_24 $$ if (parts[parts.length - 1].length() == 0 && --partsLo != 0) -->Line_25 $$ return null[ CD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_4 $$ if (parts.length < 3 || parts.length > IPV6_PART_COUNT + 1) [ CD ]
Line_17 $$ int partsLo-->Line_24 $$ if (parts[parts.length - 1].length() == 0 && --partsLo != 0) [ FD ]
Line_28 $$ partsHi = parts.length-->Line_37 $$ for (int i = 0; i < partsHi; i++) [ FD ]
Line_8 $$ for (int i = 1; i < parts.length - 1; i++) -->Line_13 $$ skipIndex = i[ FD ]
Line_17 $$ int partsLo-->Line_20 $$ partsLo = parts.length - skipIndex - 1[ FD ]
Line_37 $$ for (int i = 0; i < partsHi; i++) -->Line_43 $$ for (int i = partsLo; i > 0; i--) [ FD ]
Line_13 $$ skipIndex = i-->Line_18 $$ if (skipIndex >= 0) [ FD ]
Line_16 $$ int partsHi-->Line_28 $$ partsHi = parts.length[ FD ]
Line_18 $$ if (skipIndex >= 0) -->Line_19 $$ partsHi = skipIndex[ CD ]
Line_35 $$ ByteBuffer rawBytes = ByteBuffer.allocate(2 * IPV6_PART_COUNT)-->Line_41 $$ rawBytes.putShort((short) 0)[ FD ]
Line_32 $$ if (!(skipIndex >= 0 ? partsSkipped >= 1 : partsSkipped == 0)) -->Line_33 $$ return null[ CD ]
Line_4 $$ if (parts.length < 3 || parts.length > IPV6_PART_COUNT + 1) -->Line_5 $$ return null[ CD ]
Line_35 $$ ByteBuffer rawBytes = ByteBuffer.allocate(2 * IPV6_PART_COUNT)-->Line_38 $$ rawBytes.putShort(parseHextet(parts[i]))[ FD ]
Line_31 $$ int partsSkipped = IPV6_PART_COUNT - (partsHi + partsLo)-->Line_40 $$ for (int i = 0; i < partsSkipped; i++) [ FD ]
Line_9 $$ if (parts[i].length() == 0) -->Line_10 $$ if (skipIndex >= 0) [ CD ]
Line_7 $$ int skipIndex = -1-->Line_13 $$ skipIndex = i[ FD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_8 $$ for (int i = 1; i < parts.length - 1; i++) [ CD ]
Line_40 $$ for (int i = 0; i < partsSkipped; i++) -->Line_43 $$ for (int i = partsLo; i > 0; i--) [ FD ]
Line_17 $$ int partsLo-->Line_29 $$ partsLo = 0[ FD ]
Line_8 $$ for (int i = 1; i < parts.length - 1; i++) -->Line_43 $$ for (int i = partsLo; i > 0; i--) [ FD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_3 $$ String[] parts = ipString.split(":", IPV6_PART_COUNT + 2)[ FD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_49 $$ return rawBytes.array()[ CD ]
Line_18 $$ if (skipIndex >= 0) -->Line_28 $$ partsHi = parts.length[ CD ]
Line_9 $$ if (parts[i].length() == 0) -->Line_13 $$ skipIndex = i[ CD ]
Line_18 $$ if (skipIndex >= 0) -->Line_20 $$ partsLo = parts.length - skipIndex - 1[ CD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_35 $$ ByteBuffer rawBytes = ByteBuffer.allocate(2 * IPV6_PART_COUNT)[ CD ]
Line_8 $$ for (int i = 1; i < parts.length - 1; i++) -->Line_37 $$ for (int i = 0; i < partsHi; i++) [ FD ]
Line_16 $$ int partsHi-->Line_37 $$ for (int i = 0; i < partsHi; i++) [ FD ]
Line_7 $$ int skipIndex = -1-->Line_10 $$ if (skipIndex >= 0) [ FD ]
Line_43 $$ for (int i = partsLo; i > 0; i--) -->Line_44 $$ rawBytes.putShort(parseHextet(parts[parts.length - i]))[ CD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_32 $$ if (!(skipIndex >= 0 ? partsSkipped >= 1 : partsSkipped == 0)) [ CD ]
Line_8 $$ for (int i = 1; i < parts.length - 1; i++) -->Line_40 $$ for (int i = 0; i < partsSkipped; i++) [ FD ]
Line_35 $$ ByteBuffer rawBytes = ByteBuffer.allocate(2 * IPV6_PART_COUNT)-->Line_49 $$ return rawBytes.array()[ FD ]
Line_35 $$ ByteBuffer rawBytes = ByteBuffer.allocate(2 * IPV6_PART_COUNT)-->Line_44 $$ rawBytes.putShort(parseHextet(parts[parts.length - i]))[ FD ]
Line_8 $$ for (int i = 1; i < parts.length - 1; i++) -->Line_9 $$ if (parts[i].length() == 0) [ CD ]
Line_18 $$ if (skipIndex >= 0) -->Line_29 $$ partsLo = 0[ CD ]
Line_7 $$ int skipIndex = -1-->Line_19 $$ partsHi = skipIndex[ FD ]
Line_37 $$ for (int i = 0; i < partsHi; i++) -->Line_38 $$ rawBytes.putShort(parseHextet(parts[i]))[ CD ]
Line_2 $$ private static byte[] textToNumericFormatV6(String ipString) -->Line_31 $$ int partsSkipped = IPV6_PART_COUNT - (partsHi + partsLo)[ CD ]
