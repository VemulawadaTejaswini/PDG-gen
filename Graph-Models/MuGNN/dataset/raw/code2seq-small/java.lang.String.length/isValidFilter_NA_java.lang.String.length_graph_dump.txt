Line_16 $$ char c = filter.charAt(i)-->Line_17 $$ if (c == CharPool.CLOSE_PARENTHESIS) [ FD ]
Line_38 $$ if (matcher.matches()) -->Line_39 $$ return false[ CD ]
Line_29 $$ Matcher matcher = _pattern1.matcher(filter)-->Line_41 $$ matcher = _pattern4.matcher(filter)[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_29 $$ Matcher matcher = _pattern1.matcher(filter)[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_3 $$ if (Validator.isNull(filter)) [ FD ]
Line_34 $$ if (matcher.matches()) -->Line_35 $$ return false[ CD ]
Line_6 $$ filter = filter.trim()-->Line_29 $$ Matcher matcher = _pattern1.matcher(filter)[ FD ]
Line_33 $$ matcher = _pattern2.matcher(filter)-->Line_42 $$ if (matcher.matches()) [ FD ]
Line_16 $$ char c = filter.charAt(i)-->Line_19 $$ if (c == CharPool.OPEN_PARENTHESIS) [ FD ]
Line_17 $$ if (c == CharPool.CLOSE_PARENTHESIS) -->Line_19 $$ if (c == CharPool.OPEN_PARENTHESIS) [ CD ]
Line_15 $$ for (int i = 0; i < filter.length(); i++) -->Line_16 $$ char c = filter.charAt(i)[ CD ]
Line_19 $$ if (c == CharPool.OPEN_PARENTHESIS) -->Line_20 $$ count++[ CD ]
Line_6 $$ filter = filter.trim()-->Line_11 $$ if (!filter.startsWith(StringPool.OPEN_PARENTHESIS) || !filter.endsWith(StringPool.CLOSE_PARENTHESIS)) [ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_34 $$ if (matcher.matches()) [ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_11 $$ if (!filter.startsWith(StringPool.OPEN_PARENTHESIS) || !filter.endsWith(StringPool.CLOSE_PARENTHESIS)) [ CD ]
Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)-->Line_15 $$ for (int i = 0; i < filter.length(); i++) [ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_6 $$ filter = filter.trim()[ FD ]
Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)-->Line_37 $$ matcher = _pattern3.matcher(filter)[ FD ]
Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)-->Line_16 $$ char c = filter.charAt(i)[ FD ]
Line_6 $$ filter = filter.trim()-->Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_37 $$ matcher = _pattern3.matcher(filter)[ FD ]
Line_14 $$ int count = 0-->Line_26 $$ if (count > 0) [ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_42 $$ if (matcher.matches()) [ CD ]
Line_41 $$ matcher = _pattern4.matcher(filter)-->Line_42 $$ if (matcher.matches()) [ FD ]
Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)-->Line_11 $$ if (!filter.startsWith(StringPool.OPEN_PARENTHESIS) || !filter.endsWith(StringPool.CLOSE_PARENTHESIS)) [ FD ]
Line_14 $$ int count = 0-->Line_20 $$ count++[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_33 $$ matcher = _pattern2.matcher(filter)[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_37 $$ matcher = _pattern3.matcher(filter)[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_7 $$ if (filter.equals(StringPool.STAR)) [ FD ]
Line_15 $$ for (int i = 0; i < filter.length(); i++) -->Line_16 $$ char c = filter.charAt(i)[ FD ]
Line_6 $$ filter = filter.trim()-->Line_7 $$ if (filter.equals(StringPool.STAR)) [ FD ]
Line_33 $$ matcher = _pattern2.matcher(filter)-->Line_38 $$ if (matcher.matches()) [ FD ]
Line_29 $$ Matcher matcher = _pattern1.matcher(filter)-->Line_38 $$ if (matcher.matches()) [ FD ]
Line_6 $$ filter = filter.trim()-->Line_37 $$ matcher = _pattern3.matcher(filter)[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_7 $$ if (filter.equals(StringPool.STAR)) [ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_41 $$ matcher = _pattern4.matcher(filter)[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_30 $$ if (matcher.matches()) [ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_26 $$ if (count > 0) [ CD ]
Line_29 $$ Matcher matcher = _pattern1.matcher(filter)-->Line_33 $$ matcher = _pattern2.matcher(filter)[ FD ]
Line_6 $$ filter = filter.trim()-->Line_15 $$ for (int i = 0; i < filter.length(); i++) [ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_6 $$ filter = filter.trim()[ CD ]
Line_33 $$ matcher = _pattern2.matcher(filter)-->Line_37 $$ matcher = _pattern3.matcher(filter)[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_16 $$ char c = filter.charAt(i)[ FD ]
Line_29 $$ Matcher matcher = _pattern1.matcher(filter)-->Line_30 $$ if (matcher.matches()) [ FD ]
Line_14 $$ int count = 0-->Line_22 $$ if (count < 0) [ FD ]
Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)-->Line_41 $$ matcher = _pattern4.matcher(filter)[ FD ]
Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)-->Line_33 $$ matcher = _pattern2.matcher(filter)[ FD ]
Line_30 $$ if (matcher.matches()) -->Line_31 $$ return false[ CD ]
Line_33 $$ matcher = _pattern2.matcher(filter)-->Line_41 $$ matcher = _pattern4.matcher(filter)[ FD ]
Line_15 $$ for (int i = 0; i < filter.length(); i++) -->Line_22 $$ if (count < 0) [ CD ]
Line_29 $$ Matcher matcher = _pattern1.matcher(filter)-->Line_34 $$ if (matcher.matches()) [ FD ]
Line_26 $$ if (count > 0) -->Line_27 $$ return false[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_45 $$ return true[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_41 $$ matcher = _pattern4.matcher(filter)[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_15 $$ for (int i = 0; i < filter.length(); i++) [ CD ]
Line_6 $$ filter = filter.trim()-->Line_41 $$ matcher = _pattern4.matcher(filter)[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_33 $$ matcher = _pattern2.matcher(filter)[ FD ]
Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)-->Line_29 $$ Matcher matcher = _pattern1.matcher(filter)[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_29 $$ Matcher matcher = _pattern1.matcher(filter)[ FD ]
Line_29 $$ Matcher matcher = _pattern1.matcher(filter)-->Line_42 $$ if (matcher.matches()) [ FD ]
Line_37 $$ matcher = _pattern3.matcher(filter)-->Line_42 $$ if (matcher.matches()) [ FD ]
Line_42 $$ if (matcher.matches()) -->Line_43 $$ return false[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_14 $$ int count = 0[ CD ]
Line_22 $$ if (count < 0) -->Line_23 $$ return false[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_11 $$ if (!filter.startsWith(StringPool.OPEN_PARENTHESIS) || !filter.endsWith(StringPool.CLOSE_PARENTHESIS)) [ FD ]
Line_3 $$ if (Validator.isNull(filter)) -->Line_4 $$ return true[ CD ]
Line_7 $$ if (filter.equals(StringPool.STAR)) -->Line_8 $$ return true[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_3 $$ if (Validator.isNull(filter)) [ CD ]
Line_15 $$ for (int i = 0; i < filter.length(); i++) -->Line_17 $$ if (c == CharPool.CLOSE_PARENTHESIS) [ CD ]
Line_14 $$ int count = 0-->Line_18 $$ count--[ FD ]
Line_17 $$ if (c == CharPool.CLOSE_PARENTHESIS) -->Line_18 $$ count--[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)[ CD ]
Line_33 $$ matcher = _pattern2.matcher(filter)-->Line_34 $$ if (matcher.matches()) [ FD ]
Line_6 $$ filter = filter.trim()-->Line_16 $$ char c = filter.charAt(i)[ FD ]
Line_29 $$ Matcher matcher = _pattern1.matcher(filter)-->Line_37 $$ matcher = _pattern3.matcher(filter)[ FD ]
Line_6 $$ filter = filter.trim()-->Line_33 $$ matcher = _pattern2.matcher(filter)[ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_15 $$ for (int i = 0; i < filter.length(); i++) [ FD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_38 $$ if (matcher.matches()) [ CD ]
Line_11 $$ if (!filter.startsWith(StringPool.OPEN_PARENTHESIS) || !filter.endsWith(StringPool.CLOSE_PARENTHESIS)) -->Line_12 $$ return false[ CD ]
Line_2 $$ public static boolean isValidFilter(String filter) -->Line_10 $$ filter = StringUtil.replace(filter, StringPool.SPACE, StringPool.BLANK)[ FD ]
Line_37 $$ matcher = _pattern3.matcher(filter)-->Line_41 $$ matcher = _pattern4.matcher(filter)[ FD ]
Line_37 $$ matcher = _pattern3.matcher(filter)-->Line_38 $$ if (matcher.matches()) [ FD ]
