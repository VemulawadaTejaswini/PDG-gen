Line_31 $$ for (String s : argNames.keySet()) -->Line_36 $$ if (valueToken != null && s.trim().length() > 0) [ FD ]
Line_32 $$ final XmlAttribute argAttribute = argNames.get(s).getNameAttribute()-->Line_35 $$ final PsiElement valueToken = XsltSupport.getAttValueToken(argAttribute)[ FD ]
Line_37 $$ if (template.getParameter(s) == null) -->Line_39 $$ final LocalQuickFix fix2 = new RemoveParamFix(argNames.get(s).getTag(), s).createQuickFix(onTheFly)[ CD ]
Line_4 $$ final Map<String, XsltWithParam> argNames = new HashMap<String, XsltWithParam>()-->Line_32 $$ final XmlAttribute argAttribute = argNames.get(s).getNameAttribute()[ FD ]
Line_18 $$ final XsltCallTemplate ct = ((XsltCallTemplate) call)-->Line_19 $$ final PsiElement nameToken = ct.getNameIdentifier()[ FD ]
Line_20 $$ final XsltTemplate template = ct.getTemplate()-->Line_21 $$ if (template != null) [ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_26 $$ final LocalQuickFix fix = new AddWithParamFix(parameter, call.getTag()).createQuickFix(onTheFly)[ FD ]
Line_5 $$ for (XsltWithParam arg : arguments) -->Line_10 $$ final PsiElement token = arg.getNameIdentifier()[ FD ]
Line_36 $$ if (valueToken != null && s.trim().length() > 0) -->Line_37 $$ if (template.getParameter(s) == null) [ CD ]
Line_39 $$ final LocalQuickFix fix2 = new RemoveParamFix(argNames.get(s).getTag(), s).createQuickFix(onTheFly)-->Line_40 $$ holder.registerProblem(valueToken, "Undeclared template parameter: " + s, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, AbstractFix.createFixes(fix1, fix2))[ FD ]
Line_8 $$ final String name = attr.getValue()-->Line_14 $$ argNames.put(name, arg)[ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_27 $$ holder.registerProblem(nameToken, "Missing template parameter: " + parameter.getName(), AbstractFix.createFixes(fix))[ FD ]
Line_4 $$ final Map<String, XsltWithParam> argNames = new HashMap<String, XsltWithParam>()-->Line_9 $$ if (argNames.containsKey(name)) [ FD ]
Line_31 $$ for (String s : argNames.keySet()) -->Line_32 $$ final XmlAttribute argAttribute = argNames.get(s).getNameAttribute()[ FD ]
Line_32 $$ final XmlAttribute argAttribute = argNames.get(s).getNameAttribute()-->Line_34 $$ final XmlAttributeValue valueElement = argAttribute.getValueElement()[ FD ]
Line_5 $$ for (XsltWithParam arg : arguments) -->Line_6 $$ final XmlAttribute attr = arg.getNameAttribute()[ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_17 $$ if (call instanceof XsltCallTemplate) [ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_40 $$ holder.registerProblem(valueToken, "Undeclared template parameter: " + s, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, AbstractFix.createFixes(fix1, fix2))[ FD ]
Line_20 $$ final XsltTemplate template = ct.getTemplate()-->Line_37 $$ if (template.getParameter(s) == null) [ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_43 $$ holder.registerProblem(valueElement, "Parameter name expected")[ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_38 $$ final LocalQuickFix fix1 = new AddParameterFix(s, template).createQuickFix(onTheFly)[ FD ]
Line_24 $$ for (XsltParameter parameter : parameters) -->Line_25 $$ if (!argNames.containsKey(parameter.getName()) && !parameter.hasDefault()) [ FD ]
Line_42 $$ if (valueElement != null) -->Line_43 $$ holder.registerProblem(valueElement, "Parameter name expected")[ CD ]
Line_4 $$ final Map<String, XsltWithParam> argNames = new HashMap<String, XsltWithParam>()-->Line_25 $$ if (!argNames.containsKey(parameter.getName()) && !parameter.hasDefault()) [ FD ]
Line_36 $$ if (valueToken != null && s.trim().length() > 0) -->Line_42 $$ if (valueElement != null) [ CD ]
Line_4 $$ final Map<String, XsltWithParam> argNames = new HashMap<String, XsltWithParam>()-->Line_39 $$ final LocalQuickFix fix2 = new RemoveParamFix(argNames.get(s).getTag(), s).createQuickFix(onTheFly)[ FD ]
Line_22 $$ if (nameToken != null) -->Line_23 $$ final XsltParameter[] parameters = template.getParameters()[ CD ]
Line_19 $$ final PsiElement nameToken = ct.getNameIdentifier()-->Line_27 $$ holder.registerProblem(nameToken, "Missing template parameter: " + parameter.getName(), AbstractFix.createFixes(fix))[ FD ]
Line_17 $$ if (call instanceof XsltCallTemplate) -->Line_21 $$ if (template != null) [ CD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_4 $$ final Map<String, XsltWithParam> argNames = new HashMap<String, XsltWithParam>()[ CD ]
Line_10 $$ final PsiElement token = arg.getNameIdentifier()-->Line_12 $$ holder.registerProblem(token, "Duplicate Argument '" + name + "'")[ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_3 $$ final XsltWithParam[] arguments = call.getArguments()[ FD ]
Line_5 $$ for (XsltWithParam arg : arguments) -->Line_14 $$ argNames.put(name, arg)[ FD ]
Line_34 $$ final XmlAttributeValue valueElement = argAttribute.getValueElement()-->Line_43 $$ holder.registerProblem(valueElement, "Parameter name expected")[ FD ]
Line_7 $$ if (attr != null) -->Line_9 $$ if (argNames.containsKey(name)) [ CD ]
Line_6 $$ final XmlAttribute attr = arg.getNameAttribute()-->Line_7 $$ if (attr != null) [ FD ]
Line_7 $$ if (attr != null) -->Line_8 $$ final String name = attr.getValue()[ CD ]
Line_37 $$ if (template.getParameter(s) == null) -->Line_40 $$ holder.registerProblem(valueToken, "Undeclared template parameter: " + s, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, AbstractFix.createFixes(fix1, fix2))[ CD ]
Line_38 $$ final LocalQuickFix fix1 = new AddParameterFix(s, template).createQuickFix(onTheFly)-->Line_40 $$ holder.registerProblem(valueToken, "Undeclared template parameter: " + s, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, AbstractFix.createFixes(fix1, fix2))[ FD ]
Line_8 $$ final String name = attr.getValue()-->Line_9 $$ if (argNames.containsKey(name)) [ FD ]
Line_17 $$ if (call instanceof XsltCallTemplate) -->Line_19 $$ final PsiElement nameToken = ct.getNameIdentifier()[ CD ]
Line_7 $$ if (attr != null) -->Line_14 $$ argNames.put(name, arg)[ CD ]
Line_24 $$ for (XsltParameter parameter : parameters) -->Line_27 $$ holder.registerProblem(nameToken, "Missing template parameter: " + parameter.getName(), AbstractFix.createFixes(fix))[ FD ]
Line_6 $$ final XmlAttribute attr = arg.getNameAttribute()-->Line_8 $$ final String name = attr.getValue()[ FD ]
Line_26 $$ final LocalQuickFix fix = new AddWithParamFix(parameter, call.getTag()).createQuickFix(onTheFly)-->Line_27 $$ holder.registerProblem(nameToken, "Missing template parameter: " + parameter.getName(), AbstractFix.createFixes(fix))[ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_12 $$ holder.registerProblem(token, "Duplicate Argument '" + name + "'")[ FD ]
Line_37 $$ if (template.getParameter(s) == null) -->Line_38 $$ final LocalQuickFix fix1 = new AddParameterFix(s, template).createQuickFix(onTheFly)[ CD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_17 $$ if (call instanceof XsltCallTemplate) [ CD ]
Line_17 $$ if (call instanceof XsltCallTemplate) -->Line_20 $$ final XsltTemplate template = ct.getTemplate()[ CD ]
Line_21 $$ if (template != null) -->Line_22 $$ if (nameToken != null) [ CD ]
Line_35 $$ final PsiElement valueToken = XsltSupport.getAttValueToken(argAttribute)-->Line_40 $$ holder.registerProblem(valueToken, "Undeclared template parameter: " + s, ProblemHighlightType.LIKE_UNKNOWN_SYMBOL, AbstractFix.createFixes(fix1, fix2))[ FD ]
Line_31 $$ for (String s : argNames.keySet()) -->Line_39 $$ final LocalQuickFix fix2 = new RemoveParamFix(argNames.get(s).getTag(), s).createQuickFix(onTheFly)[ FD ]
Line_18 $$ final XsltCallTemplate ct = ((XsltCallTemplate) call)-->Line_20 $$ final XsltTemplate template = ct.getTemplate()[ FD ]
Line_9 $$ if (argNames.containsKey(name)) -->Line_12 $$ holder.registerProblem(token, "Duplicate Argument '" + name + "'")[ CD ]
Line_25 $$ if (!argNames.containsKey(parameter.getName()) && !parameter.hasDefault()) -->Line_26 $$ final LocalQuickFix fix = new AddWithParamFix(parameter, call.getTag()).createQuickFix(onTheFly)[ CD ]
Line_20 $$ final XsltTemplate template = ct.getTemplate()-->Line_23 $$ final XsltParameter[] parameters = template.getParameters()[ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_39 $$ final LocalQuickFix fix2 = new RemoveParamFix(argNames.get(s).getTag(), s).createQuickFix(onTheFly)[ FD ]
Line_34 $$ final XmlAttributeValue valueElement = argAttribute.getValueElement()-->Line_42 $$ if (valueElement != null) [ FD ]
Line_4 $$ final Map<String, XsltWithParam> argNames = new HashMap<String, XsltWithParam>()-->Line_14 $$ argNames.put(name, arg)[ FD ]
Line_2 $$ private static void checkTemplateInvocation(XsltTemplateInvocation call, ProblemsHolder holder, boolean onTheFly) -->Line_3 $$ final XsltWithParam[] arguments = call.getArguments()[ CD ]
Line_25 $$ if (!argNames.containsKey(parameter.getName()) && !parameter.hasDefault()) -->Line_27 $$ holder.registerProblem(nameToken, "Missing template parameter: " + parameter.getName(), AbstractFix.createFixes(fix))[ CD ]
Line_31 $$ for (String s : argNames.keySet()) -->Line_37 $$ if (template.getParameter(s) == null) [ FD ]
Line_19 $$ final PsiElement nameToken = ct.getNameIdentifier()-->Line_22 $$ if (nameToken != null) [ FD ]
Line_9 $$ if (argNames.containsKey(name)) -->Line_10 $$ final PsiElement token = arg.getNameIdentifier()[ CD ]
Line_17 $$ if (call instanceof XsltCallTemplate) -->Line_18 $$ final XsltCallTemplate ct = ((XsltCallTemplate) call)[ CD ]
Line_4 $$ final Map<String, XsltWithParam> argNames = new HashMap<String, XsltWithParam>()-->Line_31 $$ for (String s : argNames.keySet()) [ FD ]
