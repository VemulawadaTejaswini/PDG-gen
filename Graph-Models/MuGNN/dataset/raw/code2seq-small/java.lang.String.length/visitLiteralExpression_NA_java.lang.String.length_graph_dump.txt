Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_8 $$ final String value = (String) expression.getValue()[ FD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_12 $$ if (!isArgumentOfIndexOf(expression)) [ CD ]
Line_8 $$ final String value = (String) expression.getValue()-->Line_9 $$ if (value == null || value.length() != 1) [ FD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_15 $$ registerError(expression, value)[ FD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_8 $$ final String value = (String) expression.getValue()[ CD ]
Line_4 $$ final PsiType type = expression.getType()-->Line_5 $$ if (!TypeUtils.isJavaLangString(type)) [ FD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_4 $$ final PsiType type = expression.getType()[ FD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_9 $$ if (value == null || value.length() != 1) [ CD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_4 $$ final PsiType type = expression.getType()[ CD ]
Line_5 $$ if (!TypeUtils.isJavaLangString(type)) -->Line_6 $$ return[ CD ]
Line_12 $$ if (!isArgumentOfIndexOf(expression)) -->Line_13 $$ return[ CD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_15 $$ registerError(expression, value)[ CD ]
Line_8 $$ final String value = (String) expression.getValue()-->Line_15 $$ registerError(expression, value)[ FD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_12 $$ if (!isArgumentOfIndexOf(expression)) [ FD ]
Line_9 $$ if (value == null || value.length() != 1) -->Line_10 $$ return[ CD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_3 $$ super.visitLiteralExpression(expression)[ FD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_3 $$ super.visitLiteralExpression(expression)[ CD ]
Line_2 $$ public void visitLiteralExpression(@NotNull PsiLiteralExpression expression) -->Line_5 $$ if (!TypeUtils.isJavaLangString(type)) [ CD ]
