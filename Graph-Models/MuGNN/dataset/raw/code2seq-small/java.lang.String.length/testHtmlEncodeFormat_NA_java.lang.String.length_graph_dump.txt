Line_3 $$ String content = "<b>This is a really cool highlighter.</b> Postings highlighter gives nice snippets back."-->Line_9 $$ int start = content.indexOf(match)[ FD ]
Line_22 $$ Snippet[] fragments = passageFormatter.format(passages, content)-->Line_23 $$ assertThat(fragments, notNullValue())[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_15 $$ Passage passage2 = new Passage()[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_6 $$ String match = "highlighter"[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_11 $$ passage1.startOffset = 0[ CD ]
Line_9 $$ int start = content.indexOf(match)-->Line_13 $$ passage1.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_20 $$ passage2.addMatch(start, end, matchBytesRef)[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_22 $$ Snippet[] fragments = passageFormatter.format(passages, content)[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_7 $$ BytesRef matchBytesRef = new BytesRef(match)[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_21 $$ passages[1] = passage2[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_8 $$ Passage passage1 = new Passage()[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_16 $$ start = content.lastIndexOf(match)[ CD ]
Line_3 $$ String content = "<b>This is a really cool highlighter.</b> Postings highlighter gives nice snippets back."-->Line_19 $$ passage2.endOffset = content.length()[ FD ]
Line_8 $$ Passage passage1 = new Passage()-->Line_14 $$ passages[0] = passage1[ FD ]
Line_9 $$ int start = content.indexOf(match)-->Line_20 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_24 $$ assertThat(fragments.length, equalTo(2))[ CD ]
Line_16 $$ start = content.lastIndexOf(match)-->Line_20 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_6 $$ String match = "highlighter"-->Line_16 $$ start = content.lastIndexOf(match)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_13 $$ passage1.addMatch(start, end, matchBytesRef)[ CD ]
Line_10 $$ int end = start + match.length()-->Line_13 $$ passage1.addMatch(start, end, matchBytesRef)[ FD ]
Line_3 $$ String content = "<b>This is a really cool highlighter.</b> Postings highlighter gives nice snippets back."-->Line_16 $$ start = content.lastIndexOf(match)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_17 $$ end = start + match.length()[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_3 $$ String content = "<b>This is a really cool highlighter.</b> Postings highlighter gives nice snippets back."[ CD ]
Line_9 $$ int start = content.indexOf(match)-->Line_17 $$ end = start + match.length()[ FD ]
Line_8 $$ Passage passage1 = new Passage()-->Line_13 $$ passage1.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_10 $$ int end = start + match.length()[ CD ]
Line_15 $$ Passage passage2 = new Passage()-->Line_20 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_4 $$ CustomPassageFormatter passageFormatter = new CustomPassageFormatter("<em>", "</em>", new SimpleHTMLEncoder())[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_5 $$ Passage[] passages = new Passage[2][ CD ]
Line_6 $$ String match = "highlighter"-->Line_17 $$ end = start + match.length()[ FD ]
Line_3 $$ String content = "<b>This is a really cool highlighter.</b> Postings highlighter gives nice snippets back."-->Line_22 $$ Snippet[] fragments = passageFormatter.format(passages, content)[ FD ]
Line_16 $$ start = content.lastIndexOf(match)-->Line_17 $$ end = start + match.length()[ FD ]
Line_10 $$ int end = start + match.length()-->Line_20 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_7 $$ BytesRef matchBytesRef = new BytesRef(match)-->Line_20 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_12 $$ passage1.endOffset = end + 6[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_26 $$ assertThat(fragments[1].getText(), equalTo("Postings <em>highlighter</em> gives nice snippets back."))[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_19 $$ passage2.endOffset = content.length()[ CD ]
Line_7 $$ BytesRef matchBytesRef = new BytesRef(match)-->Line_13 $$ passage1.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_9 $$ int start = content.indexOf(match)[ CD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_23 $$ assertThat(fragments, notNullValue())[ CD ]
Line_10 $$ int end = start + match.length()-->Line_12 $$ passage1.endOffset = end + 6[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_18 $$ passage2.startOffset = passage1.endOffset[ CD ]
Line_6 $$ String match = "highlighter"-->Line_10 $$ int end = start + match.length()[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_25 $$ assertThat(fragments[0].getText(), equalTo("&lt;b&gt;This is a really cool <em>highlighter</em>.&lt;&#x2F;b&gt;"))[ CD ]
Line_9 $$ int start = content.indexOf(match)-->Line_16 $$ start = content.lastIndexOf(match)[ FD ]
Line_15 $$ Passage passage2 = new Passage()-->Line_21 $$ passages[1] = passage2[ FD ]
Line_6 $$ String match = "highlighter"-->Line_9 $$ int start = content.indexOf(match)[ FD ]
Line_10 $$ int end = start + match.length()-->Line_17 $$ end = start + match.length()[ FD ]
Line_17 $$ end = start + match.length()-->Line_20 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testHtmlEncodeFormat() -->Line_14 $$ passages[0] = passage1[ CD ]
Line_5 $$ Passage[] passages = new Passage[2]-->Line_22 $$ Snippet[] fragments = passageFormatter.format(passages, content)[ FD ]
Line_4 $$ CustomPassageFormatter passageFormatter = new CustomPassageFormatter("<em>", "</em>", new SimpleHTMLEncoder())-->Line_22 $$ Snippet[] fragments = passageFormatter.format(passages, content)[ FD ]
