Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_3 $$ int idLen = 0[ CD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_5 $$ String formatstr = "%" + idLen + "s, "[ CD ]
Line_7 $$ for (int i = 0; i < ids.size(); i++) -->Line_11 $$ TimingInterval hist = summarise.get(i).timing.getHistory().combine(historySampleCount)[ CD ]
Line_7 $$ for (int i = 0; i < ids.size(); i++) -->Line_11 $$ TimingInterval hist = summarise.get(i).timing.getHistory().combine(historySampleCount)[ FD ]
Line_3 $$ int idLen = 0-->Line_4 $$ idLen = Math.max(id.length(), idLen)[ FD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_7 $$ for (int i = 0; i < ids.size(); i++) [ FD ]
Line_7 $$ for (int i = 0; i < ids.size(); i++) -->Line_8 $$ for (Map.Entry<String, TimingInterval> type : summarise.get(i).timing.getHistory().intervals().entrySet()) [ FD ]
Line_5 $$ String formatstr = "%" + idLen + "s, "-->Line_12 $$ printRow(String.format(formatstr, ids.get(i)), "total", hist, hist, summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ FD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_9 $$ printRow(String.format(formatstr, ids.get(i)), type.getKey(), type.getValue(), type.getValue(), summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ FD ]
Line_7 $$ for (int i = 0; i < ids.size(); i++) -->Line_12 $$ printRow(String.format(formatstr, ids.get(i)), "total", hist, hist, summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ FD ]
Line_7 $$ for (int i = 0; i < ids.size(); i++) -->Line_12 $$ printRow(String.format(formatstr, ids.get(i)), "total", hist, hist, summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ CD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_6 $$ printHeader(String.format(formatstr, "id"), out)[ FD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_12 $$ printRow(String.format(formatstr, ids.get(i)), "total", hist, hist, summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ FD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_7 $$ for (int i = 0; i < ids.size(); i++) [ CD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_11 $$ TimingInterval hist = summarise.get(i).timing.getHistory().combine(historySampleCount)[ FD ]
Line_7 $$ for (int i = 0; i < ids.size(); i++) -->Line_9 $$ printRow(String.format(formatstr, ids.get(i)), type.getKey(), type.getValue(), type.getValue(), summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ FD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_6 $$ printHeader(String.format(formatstr, "id"), out)[ CD ]
Line_5 $$ String formatstr = "%" + idLen + "s, "-->Line_6 $$ printHeader(String.format(formatstr, "id"), out)[ FD ]
Line_11 $$ TimingInterval hist = summarise.get(i).timing.getHistory().combine(historySampleCount)-->Line_12 $$ printRow(String.format(formatstr, ids.get(i)), "total", hist, hist, summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ FD ]
Line_8 $$ for (Map.Entry<String, TimingInterval> type : summarise.get(i).timing.getHistory().intervals().entrySet()) -->Line_9 $$ printRow(String.format(formatstr, ids.get(i)), type.getKey(), type.getValue(), type.getValue(), summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ FD ]
Line_2 $$ public static void summarise(List<String> ids, List<StressMetrics> summarise, PrintStream out, int historySampleCount) -->Line_8 $$ for (Map.Entry<String, TimingInterval> type : summarise.get(i).timing.getHistory().intervals().entrySet()) [ FD ]
Line_5 $$ String formatstr = "%" + idLen + "s, "-->Line_9 $$ printRow(String.format(formatstr, ids.get(i)), type.getKey(), type.getValue(), type.getValue(), summarise.get(i).totalGcStats, summarise.get(i).rowRateUncertainty, out)[ FD ]
