Line_103 $$ if (ch == ',' || ch == ')') -->Line_107 $$ curFrame.state = ch == ')' ? State.invoke : State.param_start[ CD ]
Line_58 $$ if (ch == ')') -->Line_60 $$ if (ch == ',') [ CD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_79 $$ curFrame.params.add(makeParam(curString.toString()))[ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_80 $$ curString.setLength(0)[ FD ]
Line_106 $$ curResult = null-->Line_125 $$ curResult = null[ FD ]
Line_16 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_20 $$ throwError(curPos, ch, "method call expected")[ CD ]
Line_62 $$ if (!Character.isWhitespace(ch)) -->Line_63 $$ throwError(curPos, ch, "')' or ',' expected in '" + curFrame.methodName + "' call")[ CD ]
Line_115 $$ if (ch == 0 && stack.isEmpty()) -->Line_117 $$ if (ch == ')') [ CD ]
Line_48 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_50 $$ stack.push(curFrame)[ CD ]
Line_5 $$ int curPos = 0-->Line_20 $$ throwError(curPos, ch, "method call expected")[ FD ]
Line_87 $$ if (ch != 0) -->Line_91 $$ throwError(curPos, ch, "unclosed escape sequence")[ CD ]
Line_115 $$ if (ch == 0 && stack.isEmpty()) -->Line_116 $$ return (T) curResult[ CD ]
Line_48 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_49 $$ curString.append(ch)[ CD ]
Line_5 $$ int curPos = 0-->Line_91 $$ throwError(curPos, ch, "unclosed escape sequence")[ FD ]
Line_72 $$ if (ch == '\"') -->Line_73 $$ curFrame.params.add(makeParam(curString.toString()))[ CD ]
Line_122 $$ curFrame = new Frame()-->Line_95 $$ curResult = executor.fun(curFrame)[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_62 $$ if (!Character.isWhitespace(ch)) [ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_60 $$ if (ch == ',') [ FD ]
Line_6 $$ Frame curFrame = new Frame()-->Line_104 $$ curFrame = stack.pop()[ FD ]
Line_7 $$ Object curResult = null-->Line_102 $$ curResult = null[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_42 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_5 $$ int curPos = 0-->Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_121 $$ if (ch == '.') [ FD ]
Line_51 $$ curFrame = new Frame()-->Line_50 $$ stack.push(curFrame)[ FD ]
Line_87 $$ if (ch != 0) -->Line_89 $$ curFrame.state = State.literal[ CD ]
Line_103 $$ if (ch == ',' || ch == ')') -->Line_105 $$ curFrame.params.add(curResult)[ CD ]
Line_7 $$ Object curResult = null-->Line_105 $$ curFrame.params.add(curResult)[ FD ]
Line_98 $$ if (ch == '.') -->Line_103 $$ if (ch == ',' || ch == ')') [ CD ]
Line_37 $$ if (!Character.isWhitespace(ch)) -->Line_38 $$ throwError(curPos, ch, "'(' expected after '" + curFrame.methodName + "'")[ CD ]
Line_69 $$ if (ch == '\\') -->Line_72 $$ if (ch == '\"') [ CD ]
Line_125 $$ curResult = null-->Line_105 $$ curFrame.params.add(curResult)[ FD ]
Line_67 $$ if (curString.charAt(0) == '\"') -->Line_78 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') [ CD ]
Line_26 $$ if (ch == '(' || Character.isWhitespace(ch)) -->Line_27 $$ curFrame.methodName = curString.toString()[ CD ]
Line_58 $$ if (ch == ')') -->Line_59 $$ curFrame.state = State.invoke[ CD ]
Line_51 $$ curFrame = new Frame()-->Line_99 $$ curFrame = new Frame()[ FD ]
Line_48 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_51 $$ curFrame = new Frame()[ CD ]
Line_7 $$ Object curResult = null-->Line_125 $$ curResult = null[ FD ]
Line_78 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') -->Line_79 $$ curFrame.params.add(makeParam(curString.toString()))[ CD ]
Line_4 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_115 $$ if (ch == 0 && stack.isEmpty()) [ FD ]
Line_7 $$ Object curResult = null-->Line_100 $$ curFrame.target = curResult[ FD ]
Line_4 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_96 $$ if (ch == 0 && stack.isEmpty()) [ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_68 $$ curString.append(ch)[ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_45 $$ curString.append(ch)[ FD ]
Line_43 $$ if (Character.isDigit(ch) || ch == '\"') -->Line_46 $$ if (ch == ')') [ CD ]
Line_72 $$ if (ch == '\"') -->Line_74 $$ curString.setLength(0)[ CD ]
Line_9 $$ while (true) -->Line_10 $$ if (curPos > text.length())[ CD ]
Line_96 $$ if (ch == 0 && stack.isEmpty()) -->Line_97 $$ return (T) curResult[ CD ]
Line_99 $$ curFrame = new Frame()-->Line_122 $$ curFrame = new Frame()[ FD ]
Line_95 $$ curResult = executor.fun(curFrame)-->Line_125 $$ curResult = null[ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_88 $$ curString.append(ch)[ FD ]
Line_104 $$ curFrame = stack.pop()-->Line_50 $$ stack.push(curFrame)[ FD ]
Line_4 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_104 $$ curFrame = stack.pop()[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_24 $$ if (Character.isJavaIdentifierPart(ch)) [ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_58 $$ if (ch == ')') [ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_111 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_83 $$ curString.append(ch)[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_126 $$ if (!Character.isWhitespace(ch)) [ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_17 $$ curString.append(ch)[ FD ]
Line_95 $$ curResult = executor.fun(curFrame)-->Line_105 $$ curFrame.params.add(curResult)[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_31 $$ throwError(curPos, ch, "'" + curString + ch + "' method name start is invalid, '(' expected")[ FD ]
Line_103 $$ if (ch == ',' || ch == ')') -->Line_104 $$ curFrame = stack.pop()[ CD ]
Line_106 $$ curResult = null-->Line_123 $$ curFrame.target = curResult[ FD ]
Line_121 $$ if (ch == '.') -->Line_122 $$ curFrame = new Frame()[ CD ]
Line_95 $$ curResult = executor.fun(curFrame)-->Line_100 $$ curFrame.target = curResult[ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_28 $$ curString.setLength(0)[ FD ]
Line_125 $$ curResult = null-->Line_123 $$ curFrame.target = curResult[ FD ]
Line_99 $$ curFrame = new Frame()-->Line_50 $$ stack.push(curFrame)[ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_74 $$ curString.setLength(0)[ FD ]
Line_46 $$ if (ch == ')') -->Line_47 $$ curFrame.state = State.invoke[ CD ]
Line_43 $$ if (Character.isDigit(ch) || ch == '\"') -->Line_44 $$ curFrame.state = State.literal[ CD ]
Line_7 $$ Object curResult = null-->Line_106 $$ curResult = null[ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_73 $$ curFrame.params.add(makeParam(curString.toString()))[ FD ]
Line_78 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') -->Line_80 $$ curString.setLength(0)[ CD ]
Line_69 $$ if (ch == '\\') -->Line_70 $$ curFrame.state = State.escape[ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_20 $$ throwError(curPos, ch, "method call expected")[ FD ]
Line_6 $$ Frame curFrame = new Frame()-->Line_99 $$ curFrame = new Frame()[ FD ]
Line_48 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_52 $$ curFrame.state = State.name[ CD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_67 $$ if (curString.charAt(0) == '\"') [ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_91 $$ throwError(curPos, ch, "unclosed escape sequence")[ FD ]
Line_108 $$ if (Character.isWhitespace(ch)) -->Line_109 $$ curFrame.state = State.invoke_end[ CD ]
Line_87 $$ if (ch != 0) -->Line_88 $$ curString.append(ch)[ CD ]
Line_26 $$ if (ch == '(' || Character.isWhitespace(ch)) -->Line_28 $$ curString.setLength(0)[ CD ]
Line_121 $$ if (ch == '.') -->Line_126 $$ if (!Character.isWhitespace(ch)) [ CD ]
Line_4 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_127 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_103 $$ if (ch == ',' || ch == ')') -->Line_108 $$ if (Character.isWhitespace(ch)) [ CD ]
Line_122 $$ curFrame = new Frame()-->Line_50 $$ stack.push(curFrame)[ FD ]
Line_99 $$ curFrame = new Frame()-->Line_95 $$ curResult = executor.fun(curFrame)[ FD ]
Line_121 $$ if (ch == '.') -->Line_125 $$ curResult = null[ CD ]
Line_16 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_18 $$ curFrame.state = State.name[ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_25 $$ curString.append(ch)[ FD ]
Line_4 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_50 $$ stack.push(curFrame)[ FD ]
Line_98 $$ if (ch == '.') -->Line_99 $$ curFrame = new Frame()[ CD ]
Line_99 $$ curFrame = new Frame()-->Line_104 $$ curFrame = stack.pop()[ FD ]
Line_60 $$ if (ch == ',') -->Line_62 $$ if (!Character.isWhitespace(ch)) [ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_88 $$ curString.append(ch)[ FD ]
Line_98 $$ if (ch == '.') -->Line_101 $$ curFrame.state = State.init[ CD ]
Line_26 $$ if (ch == '(' || Character.isWhitespace(ch)) -->Line_31 $$ throwError(curPos, ch, "'" + curString + ch + "' method name start is invalid, '(' expected")[ CD ]
Line_35 $$ if (ch == '(') -->Line_37 $$ if (!Character.isWhitespace(ch)) [ CD ]
Line_102 $$ curResult = null-->Line_123 $$ curFrame.target = curResult[ FD ]
Line_5 $$ int curPos = 0-->Line_111 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_106 $$ curResult = null-->Line_100 $$ curFrame.target = curResult[ FD ]
Line_24 $$ if (Character.isJavaIdentifierPart(ch)) -->Line_25 $$ curString.append(ch)[ CD ]
Line_42 $$ if (Character.isWhitespace(ch)) -->Line_43 $$ if (Character.isDigit(ch) || ch == '\"') [ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_54 $$ throwError(curPos, ch, "expression expected in '" + curFrame.methodName + "' call")[ FD ]
Line_9 $$ while (true) -->Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0[ CD ]
Line_5 $$ int curPos = 0-->Line_31 $$ throwError(curPos, ch, "'" + curString + ch + "' method name start is invalid, '(' expected")[ FD ]
Line_78 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') -->Line_83 $$ curString.append(ch)[ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_15 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_5 $$ int curPos = 0-->Line_127 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_17 $$ curString.append(ch)[ FD ]
Line_35 $$ if (ch == '(') -->Line_36 $$ curFrame.state = State.param_start[ CD ]
Line_108 $$ if (Character.isWhitespace(ch)) -->Line_111 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_45 $$ curString.append(ch)[ FD ]
Line_67 $$ if (curString.charAt(0) == '\"') -->Line_68 $$ curString.append(ch)[ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_63 $$ throwError(curPos, ch, "')' or ',' expected in '" + curFrame.methodName + "' call")[ FD ]
Line_48 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_54 $$ throwError(curPos, ch, "expression expected in '" + curFrame.methodName + "' call")[ CD ]
Line_51 $$ curFrame = new Frame()-->Line_122 $$ curFrame = new Frame()[ FD ]
Line_6 $$ Frame curFrame = new Frame()-->Line_122 $$ curFrame = new Frame()[ FD ]
Line_125 $$ curResult = null-->Line_100 $$ curFrame.target = curResult[ FD ]
Line_96 $$ if (ch == 0 && stack.isEmpty()) -->Line_98 $$ if (ch == '.') [ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_16 $$ if (Character.isJavaIdentifierStart(ch)) [ FD ]
Line_67 $$ if (curString.charAt(0) == '\"') -->Line_69 $$ if (ch == '\\') [ CD ]
Line_102 $$ curResult = null-->Line_106 $$ curResult = null[ FD ]
Line_4 $$ final Stack<Frame> stack = new Stack<Frame>()-->Line_111 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_117 $$ if (ch == ')') -->Line_118 $$ curFrame.state = State.invoke[ CD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_27 $$ curFrame.methodName = curString.toString()[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_127 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_68 $$ curString.append(ch)[ FD ]
Line_5 $$ int curPos = 0-->Line_38 $$ throwError(curPos, ch, "'(' expected after '" + curFrame.methodName + "'")[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_43 $$ if (Character.isDigit(ch) || ch == '\"') [ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_69 $$ if (ch == '\\') [ FD ]
Line_51 $$ curFrame = new Frame()-->Line_104 $$ curFrame = stack.pop()[ FD ]
Line_106 $$ curResult = null-->Line_105 $$ curFrame.params.add(curResult)[ FD ]
Line_60 $$ if (ch == ',') -->Line_61 $$ curFrame.state = State.param_start[ CD ]
Line_5 $$ int curPos = 0-->Line_54 $$ throwError(curPos, ch, "expression expected in '" + curFrame.methodName + "' call")[ FD ]
Line_95 $$ curResult = executor.fun(curFrame)-->Line_106 $$ curResult = null[ FD ]
Line_102 $$ curResult = null-->Line_100 $$ curFrame.target = curResult[ FD ]
Line_43 $$ if (Character.isDigit(ch) || ch == '\"') -->Line_45 $$ curString.append(ch)[ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_108 $$ if (Character.isWhitespace(ch)) [ FD ]
Line_119 $$ if (ch == ',') -->Line_121 $$ if (ch == '.') [ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_38 $$ throwError(curPos, ch, "'(' expected after '" + curFrame.methodName + "'")[ FD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_83 $$ curString.append(ch)[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_119 $$ if (ch == ',') [ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_26 $$ if (ch == '(' || Character.isWhitespace(ch)) [ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_72 $$ if (ch == '\"') [ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_37 $$ if (!Character.isWhitespace(ch)) [ FD ]
Line_15 $$ if (Character.isWhitespace(ch)) -->Line_16 $$ if (Character.isJavaIdentifierStart(ch)) [ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_98 $$ if (ch == '.') [ FD ]
Line_121 $$ if (ch == '.') -->Line_124 $$ curFrame.state = State.init[ CD ]
Line_16 $$ if (Character.isJavaIdentifierStart(ch)) -->Line_17 $$ curString.append(ch)[ CD ]
Line_104 $$ curFrame = stack.pop()-->Line_95 $$ curResult = executor.fun(curFrame)[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_35 $$ if (ch == '(') [ FD ]
Line_98 $$ if (ch == '.') -->Line_102 $$ curResult = null[ CD ]
Line_7 $$ Object curResult = null-->Line_123 $$ curFrame.target = curResult[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_78 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') [ FD ]
Line_103 $$ if (ch == ',' || ch == ')') -->Line_106 $$ curResult = null[ CD ]
Line_78 $$ if (Character.isWhitespace(ch) || ch == ',' || ch == ')') -->Line_81 $$ curFrame.state = ch == ')' ? State.invoke : ch == ',' ? State.param_start : State.param_end[ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_48 $$ if (Character.isJavaIdentifierStart(ch)) [ FD ]
Line_98 $$ if (ch == '.') -->Line_100 $$ curFrame.target = curResult[ CD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_49 $$ curString.append(ch)[ FD ]
Line_46 $$ if (ch == ')') -->Line_48 $$ if (Character.isJavaIdentifierStart(ch)) [ CD ]
Line_121 $$ if (ch == '.') -->Line_123 $$ curFrame.target = curResult[ CD ]
Line_26 $$ if (ch == '(' || Character.isWhitespace(ch)) -->Line_29 $$ curFrame.state = ch == '(' ? State.param_start : State.name_end[ CD ]
Line_95 $$ curResult = executor.fun(curFrame)-->Line_123 $$ curFrame.target = curResult[ FD ]
Line_95 $$ curResult = executor.fun(curFrame)-->Line_102 $$ curResult = null[ FD ]
Line_119 $$ if (ch == ',') -->Line_120 $$ curFrame.state = State.param_start[ CD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_49 $$ curString.append(ch)[ FD ]
Line_104 $$ curFrame = stack.pop()-->Line_122 $$ curFrame = new Frame()[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_46 $$ if (ch == ')') [ FD ]
Line_102 $$ curResult = null-->Line_105 $$ curFrame.params.add(curResult)[ FD ]
Line_24 $$ if (Character.isJavaIdentifierPart(ch)) -->Line_26 $$ if (ch == '(' || Character.isWhitespace(ch)) [ CD ]
Line_72 $$ if (ch == '\"') -->Line_75 $$ curFrame.state = State.param_end[ CD ]
Line_6 $$ Frame curFrame = new Frame()-->Line_50 $$ stack.push(curFrame)[ FD ]
Line_51 $$ curFrame = new Frame()-->Line_95 $$ curResult = executor.fun(curFrame)[ FD ]
Line_117 $$ if (ch == ')') -->Line_119 $$ if (ch == ',') [ CD ]
Line_102 $$ curResult = null-->Line_125 $$ curResult = null[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_117 $$ if (ch == ')') [ FD ]
Line_126 $$ if (!Character.isWhitespace(ch)) -->Line_127 $$ throwError(curPos, ch, (stack.isEmpty() ? "'.' or <eof>" : "'.' or ')'") + "expected after '" + curFrame.methodName + "' call")[ CD ]
Line_8 $$ final StringBuilder curString = new StringBuilder()-->Line_25 $$ curString.append(ch)[ FD ]
Line_6 $$ Frame curFrame = new Frame()-->Line_51 $$ curFrame = new Frame()[ FD ]
Line_6 $$ Frame curFrame = new Frame()-->Line_95 $$ curResult = executor.fun(curFrame)[ FD ]
Line_5 $$ int curPos = 0-->Line_10 $$ if (curPos > text.length())[ FD ]
Line_5 $$ int curPos = 0-->Line_63 $$ throwError(curPos, ch, "')' or ',' expected in '" + curFrame.methodName + "' call")[ FD ]
Line_7 $$ Object curResult = null-->Line_95 $$ curResult = executor.fun(curFrame)[ FD ]
Line_12 $$ final char ch = curPos++ < text.length() ? text.charAt(curPos - 1) : 0-->Line_87 $$ if (ch != 0) [ FD ]
