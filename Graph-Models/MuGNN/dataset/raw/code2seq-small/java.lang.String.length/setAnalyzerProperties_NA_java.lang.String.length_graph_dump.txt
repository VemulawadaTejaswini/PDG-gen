Line_3 $$ for (Map.Entry<String, Object> attribute : getAttributes().entrySet()) -->Line_4 $$ String key = attribute.getKey()[ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_20 $$ if (!instructionNames.contains(Analyzer.BUNDLE_SYMBOLICNAME)) [ CD ]
Line_23 $$ if (!instructionNames.contains(Analyzer.EXPORT_PACKAGE)) -->Line_24 $$ analyzer.setProperty(Analyzer.EXPORT_PACKAGE, "*;-noimport:=false;version=" + getVersion())[ CD ]
Line_27 $$ String list = createPropertyStringFromList(instructionValue(instructionName))-->Line_29 $$ analyzer.setProperty(instructionName, list)[ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_18 $$ analyzer.setProperty(Analyzer.BUNDLE_NAME, getName())[ FD ]
Line_3 $$ for (Map.Entry<String, Object> attribute : getAttributes().entrySet()) -->Line_6 $$ analyzer.setProperty(key, attribute.getValue().toString())[ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_29 $$ analyzer.setProperty(instructionName, list)[ FD ]
Line_9 $$ Map<String, List<String>> instructions = getInstructions()-->Line_10 $$ Set<String> instructionNames = instructions.keySet()[ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_12 $$ analyzer.setProperty(Analyzer.IMPORT_PACKAGE, "*, !org.apache.ant.*, !org.junit.*, !org.jmock.*, !org.easymock.*, !org.mockito.*")[ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_21 $$ analyzer.setProperty(Analyzer.BUNDLE_SYMBOLICNAME, getSymbolicName())[ FD ]
Line_10 $$ Set<String> instructionNames = instructions.keySet()-->Line_23 $$ if (!instructionNames.contains(Analyzer.EXPORT_PACKAGE)) [ FD ]
Line_4 $$ String key = attribute.getKey()-->Line_5 $$ if (!"Manifest-Version".equals(key)) [ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_32 $$ analyzer.setJar(getClassesDir())[ CD ]
Line_26 $$ for (String instructionName : instructionNames) -->Line_27 $$ String list = createPropertyStringFromList(instructionValue(instructionName))[ FD ]
Line_28 $$ if (list != null && list.length() > 0) -->Line_29 $$ analyzer.setProperty(instructionName, list)[ CD ]
Line_26 $$ for (String instructionName : instructionNames) -->Line_29 $$ analyzer.setProperty(instructionName, list)[ FD ]
Line_27 $$ String list = createPropertyStringFromList(instructionValue(instructionName))-->Line_28 $$ if (list != null && list.length() > 0) [ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_15 $$ analyzer.setProperty(Analyzer.BUNDLE_VERSION, getVersion())[ FD ]
Line_20 $$ if (!instructionNames.contains(Analyzer.BUNDLE_SYMBOLICNAME)) -->Line_21 $$ analyzer.setProperty(Analyzer.BUNDLE_SYMBOLICNAME, getSymbolicName())[ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_24 $$ analyzer.setProperty(Analyzer.EXPORT_PACKAGE, "*;-noimport:=false;version=" + getVersion())[ FD ]
Line_11 $$ if (!instructionNames.contains(Analyzer.IMPORT_PACKAGE)) -->Line_12 $$ analyzer.setProperty(Analyzer.IMPORT_PACKAGE, "*, !org.apache.ant.*, !org.junit.*, !org.jmock.*, !org.easymock.*, !org.mockito.*")[ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_33 $$ analyzer.setClasspath(getClasspath().getFiles().toArray(new File[getClasspath().getFiles().size()]))[ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_33 $$ analyzer.setClasspath(getClasspath().getFiles().toArray(new File[getClasspath().getFiles().size()]))[ FD ]
Line_10 $$ Set<String> instructionNames = instructions.keySet()-->Line_20 $$ if (!instructionNames.contains(Analyzer.BUNDLE_SYMBOLICNAME)) [ FD ]
Line_14 $$ if (!instructionNames.contains(Analyzer.BUNDLE_VERSION)) -->Line_15 $$ analyzer.setProperty(Analyzer.BUNDLE_VERSION, getVersion())[ CD ]
Line_10 $$ Set<String> instructionNames = instructions.keySet()-->Line_11 $$ if (!instructionNames.contains(Analyzer.IMPORT_PACKAGE)) [ FD ]
Line_4 $$ String key = attribute.getKey()-->Line_6 $$ analyzer.setProperty(key, attribute.getValue().toString())[ FD ]
Line_10 $$ Set<String> instructionNames = instructions.keySet()-->Line_14 $$ if (!instructionNames.contains(Analyzer.BUNDLE_VERSION)) [ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_32 $$ analyzer.setJar(getClassesDir())[ FD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_9 $$ Map<String, List<String>> instructions = getInstructions()[ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_14 $$ if (!instructionNames.contains(Analyzer.BUNDLE_VERSION)) [ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_6 $$ analyzer.setProperty(key, attribute.getValue().toString())[ FD ]
Line_10 $$ Set<String> instructionNames = instructions.keySet()-->Line_17 $$ if (!instructionNames.contains(Analyzer.BUNDLE_NAME)) [ FD ]
Line_17 $$ if (!instructionNames.contains(Analyzer.BUNDLE_NAME)) -->Line_18 $$ analyzer.setProperty(Analyzer.BUNDLE_NAME, getName())[ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_23 $$ if (!instructionNames.contains(Analyzer.EXPORT_PACKAGE)) [ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_10 $$ Set<String> instructionNames = instructions.keySet()[ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_11 $$ if (!instructionNames.contains(Analyzer.IMPORT_PACKAGE)) [ CD ]
Line_5 $$ if (!"Manifest-Version".equals(key)) -->Line_6 $$ analyzer.setProperty(key, attribute.getValue().toString())[ CD ]
Line_2 $$ private void setAnalyzerProperties(Analyzer analyzer) throws IOException -->Line_17 $$ if (!instructionNames.contains(Analyzer.BUNDLE_NAME)) [ CD ]
