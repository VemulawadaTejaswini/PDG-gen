Line_3 $$ List<String> allTagNames = new ArrayList()-->Line_38 $$ maxTagNameLengthTags.addAll(allTagNames)[ FD ]
Line_95 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) -->Line_96 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ CD ]
Line_35 $$ int maxTagNameLength = 0-->Line_51 $$ if (name.length() > maxTagNameLength) [ FD ]
Line_65 $$ comment = commentElement.getText()-->Line_99 $$ sb.append(comment)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_69 $$ String elementName = element.elementText("name")[ FD ]
Line_58 $$ StringBundler sb = new StringBundler()-->Line_94 $$ sb.append(comment)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_7 $$ List<Element> elements = parentElement.elements(tagName)[ FD ]
Line_4 $$ List<String> customTagNames = new ArrayList()-->Line_47 $$ maxTagNameLengthTags.addAll(customTagNames)[ FD ]
Line_20 $$ if (tagName.equals("param")) -->Line_21 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ CD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_52 $$ maxTagNameLength = name.length()-->Line_57 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)[ FD ]
Line_10 $$ String comment = null-->Line_94 $$ sb.append(comment)[ FD ]
Line_15 $$ comment = element.getText()-->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_24 $$ if (tagName.equals("throws")) [ FD ]
Line_67 $$ comment = element.getText()-->Line_77 $$ sb.append(comment)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_91 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) [ FD ]
Line_36 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_48 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ FD ]
Line_97 $$ elementName = element.elementText("name")-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_83 $$ if (!requiredTagNames.isEmpty()) [ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_5 $$ List<String> requiredTagNames = new ArrayList()[ CD ]
Line_58 $$ StringBundler sb = new StringBundler()-->Line_86 $$ sb.append(comment)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_48 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_9 $$ Element commentElement = element.element("comment")-->Line_13 $$ comment = commentElement.getText()[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_74 $$ if (_initializeMissingJavadocs && publicAccess) [ FD ]
Line_10 $$ String comment = null-->Line_77 $$ sb.append(comment)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_18 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_78 $$ if (_updateJavadocs && publicAccess) -->Line_79 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) [ CD ]
Line_6 $$ for (String tagName : tagNames) -->Line_19 $$ requiredTagNames.add(tagName)[ FD ]
Line_57 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_44 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ FD ]
Line_79 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_82 $$ sb.append(comment)[ CD ]
Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_65 $$ comment = commentElement.getText()-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_69 $$ String elementName = element.elementText("name")-->Line_97 $$ elementName = element.elementText("name")[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_22 $$ requiredTagNames.add(tagName)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_26 $$ requiredTagNames.add(tagName)[ FD ]
Line_10 $$ String comment = null-->Line_82 $$ sb.append(comment)[ FD ]
Line_10 $$ String comment = null-->Line_86 $$ sb.append(comment)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_60 $$ List<Element> elements = parentElement.elements(tagName)[ FD ]
Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_86 $$ sb.append(comment)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_86 $$ sb.append(comment)[ FD ]
Line_10 $$ String comment = null-->Line_65 $$ comment = commentElement.getText()[ FD ]
Line_67 $$ comment = element.getText()-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_4 $$ List<String> customTagNames = new ArrayList()-->Line_30 $$ customTagNames.add(tagName)[ FD ]
Line_3 $$ List<String> allTagNames = new ArrayList()-->Line_32 $$ allTagNames.add(tagName)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_67 $$ comment = element.getText()[ FD ]
Line_10 $$ String comment = null-->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_79 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) [ FD ]
Line_8 $$ for (Element element : elements) -->Line_9 $$ Element commentElement = element.element("comment")[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_30 $$ customTagNames.add(tagName)[ FD ]
Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_77 $$ sb.append(comment)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_70 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_50 $$ for (String name : maxTagNameLengthTags) -->Line_52 $$ maxTagNameLength = name.length()[ FD ]
Line_96 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_99 $$ sb.append(comment)[ CD ]
Line_78 $$ if (_updateJavadocs && publicAccess) -->Line_91 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) [ CD ]
Line_8 $$ for (Element element : elements) -->Line_67 $$ comment = element.getText()[ FD ]
Line_10 $$ String comment = null-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_108 $$ return sb.toString()[ CD ]
Line_15 $$ comment = element.getText()-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_10 $$ String comment = null-->Line_13 $$ comment = commentElement.getText()[ FD ]
Line_36 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_41 $$ maxTagNameLengthTags.addAll(allTagNames)[ FD ]
Line_96 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_97 $$ elementName = element.elementText("name")[ CD ]
Line_8 $$ for (Element element : elements) -->Line_96 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ FD ]
Line_10 $$ String comment = null-->Line_99 $$ sb.append(comment)[ FD ]
Line_51 $$ if (name.length() > maxTagNameLength) -->Line_52 $$ maxTagNameLength = name.length()[ CD ]
Line_3 $$ List<String> allTagNames = new ArrayList()-->Line_41 $$ maxTagNameLengthTags.addAll(allTagNames)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_58 $$ StringBundler sb = new StringBundler()[ CD ]
Line_8 $$ for (Element element : elements) -->Line_25 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ FD ]
Line_65 $$ comment = commentElement.getText()-->Line_94 $$ sb.append(comment)[ FD ]
Line_36 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_47 $$ maxTagNameLengthTags.addAll(customTagNames)[ FD ]
Line_58 $$ StringBundler sb = new StringBundler()-->Line_72 $$ sb.append(comment)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_36 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_43 $$ maxTagNameLengthTags.addAll(customTagNames)[ FD ]
Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_72 $$ sb.append(comment)[ FD ]
Line_67 $$ comment = element.getText()-->Line_99 $$ sb.append(comment)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_74 $$ if (_initializeMissingJavadocs && publicAccess) -->Line_77 $$ sb.append(comment)[ CD ]
Line_15 $$ comment = element.getText()-->Line_70 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_22 $$ requiredTagNames.add(tagName)[ FD ]
Line_15 $$ comment = element.getText()-->Line_86 $$ sb.append(comment)[ FD ]
Line_21 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_22 $$ requiredTagNames.add(tagName)[ CD ]
Line_15 $$ comment = element.getText()-->Line_65 $$ comment = commentElement.getText()[ FD ]
Line_15 $$ comment = element.getText()-->Line_77 $$ sb.append(comment)[ FD ]
Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_99 $$ sb.append(comment)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_4 $$ List<String> customTagNames = new ArrayList()[ CD ]
Line_15 $$ comment = element.getText()-->Line_99 $$ sb.append(comment)[ FD ]
Line_79 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_83 $$ if (!requiredTagNames.isEmpty()) [ CD ]
Line_39 $$ if (_updateJavadocs) -->Line_47 $$ maxTagNameLengthTags.addAll(customTagNames)[ CD ]
Line_35 $$ int maxTagNameLength = 0-->Line_57 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)[ FD ]
Line_70 $$ if (Validator.isNotNull(comment)) -->Line_72 $$ sb.append(comment)[ CD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_36 $$ List<String> maxTagNameLengthTags = new ArrayList()[ CD ]
Line_58 $$ StringBundler sb = new StringBundler()-->Line_77 $$ sb.append(comment)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_37 $$ if (_initializeMissingJavadocs) [ CD ]
Line_36 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_44 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ FD ]
Line_83 $$ if (!requiredTagNames.isEmpty()) -->Line_86 $$ sb.append(comment)[ CD ]
Line_67 $$ comment = element.getText()-->Line_86 $$ sb.append(comment)[ FD ]
Line_39 $$ if (_updateJavadocs) -->Line_40 $$ if (!requiredTagNames.isEmpty()) [ CD ]
Line_8 $$ for (Element element : elements) -->Line_62 $$ Element commentElement = element.element("comment")[ FD ]
Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_94 $$ sb.append(comment)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_65 $$ comment = commentElement.getText()[ FD ]
Line_67 $$ comment = element.getText()-->Line_82 $$ sb.append(comment)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_77 $$ sb.append(comment)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_15 $$ comment = element.getText()[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_19 $$ requiredTagNames.add(tagName)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_78 $$ if (_updateJavadocs && publicAccess) [ FD ]
Line_96 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ CD ]
Line_67 $$ comment = element.getText()-->Line_94 $$ sb.append(comment)[ FD ]
Line_25 $$ if (GetterUtil.getBoolean(element.elementText("required"))) -->Line_26 $$ requiredTagNames.add(tagName)[ CD ]
Line_58 $$ StringBundler sb = new StringBundler()-->Line_82 $$ sb.append(comment)[ FD ]
Line_10 $$ String comment = null-->Line_18 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_65 $$ comment = commentElement.getText()-->Line_82 $$ sb.append(comment)[ FD ]
Line_15 $$ comment = element.getText()-->Line_18 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_3 $$ List<String> allTagNames = new ArrayList()[ CD ]
Line_67 $$ comment = element.getText()-->Line_72 $$ sb.append(comment)[ FD ]
Line_39 $$ if (_updateJavadocs) -->Line_48 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ CD ]
Line_13 $$ comment = commentElement.getText()-->Line_94 $$ sb.append(comment)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_32 $$ allTagNames.add(tagName)[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_95 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) [ FD ]
Line_91 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_94 $$ sb.append(comment)[ CD ]
Line_15 $$ comment = element.getText()-->Line_72 $$ sb.append(comment)[ FD ]
Line_17 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) -->Line_30 $$ customTagNames.add(tagName)[ CD ]
Line_74 $$ if (_initializeMissingJavadocs && publicAccess) -->Line_78 $$ if (_updateJavadocs && publicAccess) [ CD ]
Line_65 $$ comment = commentElement.getText()-->Line_86 $$ sb.append(comment)[ FD ]
Line_40 $$ if (!requiredTagNames.isEmpty()) -->Line_43 $$ maxTagNameLengthTags.addAll(customTagNames)[ CD ]
Line_24 $$ if (tagName.equals("throws")) -->Line_25 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ CD ]
Line_67 $$ comment = element.getText()-->Line_70 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_10 $$ String comment = null-->Line_72 $$ sb.append(comment)[ FD ]
Line_64 $$ if (commentElement != null) -->Line_67 $$ comment = element.getText()[ CD ]
Line_57 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)-->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_82 $$ sb.append(comment)[ FD ]
Line_35 $$ int maxTagNameLength = 0-->Line_52 $$ maxTagNameLength = name.length()[ FD ]
Line_70 $$ if (Validator.isNotNull(comment)) -->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ CD ]
Line_50 $$ for (String name : maxTagNameLengthTags) -->Line_51 $$ if (name.length() > maxTagNameLength) [ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_40 $$ if (!requiredTagNames.isEmpty()) [ FD ]
Line_18 $$ if (Validator.isNotNull(comment)) -->Line_19 $$ requiredTagNames.add(tagName)[ CD ]
Line_6 $$ for (String tagName : tagNames) -->Line_20 $$ if (tagName.equals("param")) [ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_72 $$ sb.append(comment)[ FD ]
Line_65 $$ comment = commentElement.getText()-->Line_70 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_15 $$ comment = element.getText()-->Line_94 $$ sb.append(comment)[ FD ]
Line_69 $$ String elementName = element.elementText("name")-->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_69 $$ String elementName = element.elementText("name")-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_57 $$ String tagNameIndent = _getSpacesIndent(maxTagNameLength)[ CD ]
Line_8 $$ for (Element element : elements) -->Line_97 $$ elementName = element.elementText("name")[ FD ]
Line_9 $$ Element commentElement = element.element("comment")-->Line_65 $$ comment = commentElement.getText()[ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_17 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) [ FD ]
Line_70 $$ if (Validator.isNotNull(comment)) -->Line_74 $$ if (_initializeMissingJavadocs && publicAccess) [ CD ]
Line_20 $$ if (tagName.equals("param")) -->Line_24 $$ if (tagName.equals("throws")) [ CD ]
Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_99 $$ sb.append(comment)[ FD ]
Line_91 $$ if (!tagName.equals("param") && !tagName.equals("return") && !tagName.equals("throws")) -->Line_95 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) [ CD ]
Line_37 $$ if (_initializeMissingJavadocs) -->Line_38 $$ maxTagNameLengthTags.addAll(allTagNames)[ CD ]
Line_18 $$ if (Validator.isNotNull(comment)) -->Line_20 $$ if (tagName.equals("param")) [ CD ]
Line_17 $$ if (tagName.equals("param") || tagName.equals("return") || tagName.equals("throws")) -->Line_18 $$ if (Validator.isNotNull(comment)) [ CD ]
Line_15 $$ comment = element.getText()-->Line_82 $$ sb.append(comment)[ FD ]
Line_5 $$ List<String> requiredTagNames = new ArrayList()-->Line_26 $$ requiredTagNames.add(tagName)[ FD ]
Line_15 $$ comment = element.getText()-->Line_67 $$ comment = element.getText()[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_7 $$ List<Element> elements = parentElement.elements(tagName)[ FD ]
Line_40 $$ if (!requiredTagNames.isEmpty()) -->Line_44 $$ maxTagNameLengthTags.addAll(requiredTagNames)[ CD ]
Line_65 $$ comment = commentElement.getText()-->Line_67 $$ comment = element.getText()[ FD ]
Line_9 $$ Element commentElement = element.element("comment")-->Line_64 $$ if (commentElement != null) [ FD ]
Line_58 $$ StringBundler sb = new StringBundler()-->Line_99 $$ sb.append(comment)[ FD ]
Line_64 $$ if (commentElement != null) -->Line_65 $$ comment = commentElement.getText()[ CD ]
Line_37 $$ if (_initializeMissingJavadocs) -->Line_39 $$ if (_updateJavadocs) [ CD ]
Line_10 $$ String comment = null-->Line_15 $$ comment = element.getText()[ FD ]
Line_2 $$ private String _addDocletTags(Element parentElement, String[] tagNames, String indent, boolean publicAccess) -->Line_35 $$ int maxTagNameLength = 0[ CD ]
Line_13 $$ comment = commentElement.getText()-->Line_15 $$ comment = element.getText()[ FD ]
Line_10 $$ String comment = null-->Line_70 $$ if (Validator.isNotNull(comment)) [ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_99 $$ sb.append(comment)[ FD ]
Line_8 $$ for (Element element : elements) -->Line_21 $$ if (GetterUtil.getBoolean(element.elementText("required"))) [ FD ]
Line_6 $$ for (String tagName : tagNames) -->Line_60 $$ List<Element> elements = parentElement.elements(tagName)[ FD ]
Line_36 $$ List<String> maxTagNameLengthTags = new ArrayList()-->Line_38 $$ maxTagNameLengthTags.addAll(allTagNames)[ FD ]
Line_40 $$ if (!requiredTagNames.isEmpty()) -->Line_41 $$ maxTagNameLengthTags.addAll(allTagNames)[ CD ]
Line_4 $$ List<String> customTagNames = new ArrayList()-->Line_43 $$ maxTagNameLengthTags.addAll(customTagNames)[ FD ]
Line_65 $$ comment = commentElement.getText()-->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_67 $$ comment = element.getText()-->Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_13 $$ comment = commentElement.getText()-->Line_98 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)[ FD ]
Line_65 $$ comment = commentElement.getText()-->Line_72 $$ sb.append(comment)[ FD ]
Line_71 $$ comment = _assembleTagComment(tagName, elementName, comment, indent, tagNameIndent)-->Line_82 $$ sb.append(comment)[ FD ]
Line_58 $$ StringBundler sb = new StringBundler()-->Line_108 $$ return sb.toString()[ FD ]
Line_65 $$ comment = commentElement.getText()-->Line_77 $$ sb.append(comment)[ FD ]
Line_10 $$ String comment = null-->Line_67 $$ comment = element.getText()[ FD ]
