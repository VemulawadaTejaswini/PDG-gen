Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)[ CD ]
Line_89 $$ int lineStart = document.getLineStartOffset(block.startLine)-->Line_92 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")[ FD ]
Line_79 $$ String prefix-->Line_82 $$ if (prefix == null)[ FD ]
Line_89 $$ int lineStart = document.getLineStartOffset(block.startLine)-->Line_91 $$ lineStart += prefix.length()[ FD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_87 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_17 $$ int offset = document.getLineStartOffset(startLine)-->Line_20 $$ block.blockSuitableCommenter = getBlockSuitableCommenter(psiFile, offset, endOffset)[ FD ]
Line_74 $$ for (Caret caret : block.carets) -->Line_99 $$ LogicalPosition position = caret.getLogicalPosition()[ FD ]
Line_8 $$ int endLine = block.endLine-->Line_19 $$ int endOffset = CharArrayUtil.shiftBackward(chars, document.getLineEndOffset(endLine), " \t\n")[ FD ]
Line_40 $$ if (value != null) -->Line_41 $$ block.commentWithIndent = value[ CD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_93 $$ if (lineStart > document.getTextLength())[ FD ]
Line_78 $$ if (commenter != null) -->Line_95 $$ caret.moveToOffset(lineStart)[ CD ]
Line_38 $$ if (commenter instanceof IndentedCommenter) -->Line_40 $$ if (value != null) [ CD ]
Line_78 $$ if (commenter != null) -->Line_90 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")[ CD ]
Line_78 $$ if (commenter != null) -->Line_91 $$ lineStart += prefix.length()[ CD ]
Line_7 $$ int startLine = block.startLine-->Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)[ FD ]
Line_2 $$ public void postInvoke() -->Line_55 $$ Collections.reverse(myBlocks)[ CD ]
Line_79 $$ String prefix-->Line_87 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_32 $$ state = SelfManagingCommenter.EMPTY_STATE-->Line_31 $$ if (state == null)[ FD ]
Line_80 $$ if (commenter instanceof SelfManagingCommenter) -->Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))[ CD ]
Line_2 $$ public void postInvoke() -->Line_4 $$ myCodeStyleManager = CodeStyleManager.getInstance(myProject)[ CD ]
Line_6 $$ for (Block block : myBlocks) -->Line_36 $$ if (!isLineCommented(block, line, commenter) && (singleline || !isLineEmpty(document, line))) [ FD ]
Line_39 $$ final Boolean value = ((IndentedCommenter) commenter).forceIndentedLineComment()-->Line_40 $$ if (value != null) [ FD ]
Line_10 $$ PsiFile psiFile = block.psiFile-->Line_20 $$ block.blockSuitableCommenter = getBlockSuitableCommenter(psiFile, offset, endOffset)[ FD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_78 $$ if (commenter != null) [ FD ]
Line_89 $$ int lineStart = document.getLineStartOffset(block.startLine)-->Line_93 $$ if (lineStart > document.getTextLength())[ FD ]
Line_77 $$ final Commenter commenter = block.commenters[0]-->Line_80 $$ if (commenter instanceof SelfManagingCommenter) [ FD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_80 $$ if (commenter instanceof SelfManagingCommenter) [ FD ]
Line_83 $$ prefix = ""-->Line_91 $$ lineStart += prefix.length()[ FD ]
Line_90 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")-->Line_93 $$ if (lineStart > document.getTextLength())[ FD ]
Line_28 $$ if (commenter instanceof SelfManagingCommenter && block.commenterStateMap.get(commenter) == null) -->Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)[ CD ]
Line_32 $$ state = SelfManagingCommenter.EMPTY_STATE-->Line_33 $$ block.commenterStateMap.put(selfManagingCommenter, state)[ FD ]
Line_6 $$ for (Block block : myBlocks) -->Line_60 $$ doDefaultCommenting(block)[ FD ]
Line_59 $$ if (!block.commentWithIndent) -->Line_62 $$ doIndentCommenting(block)[ CD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_15 $$ CharSequence chars = document.getCharsSequence()[ FD ]
Line_2 $$ public void postInvoke() -->Line_48 $$ boolean moveCarets = true[ CD ]
Line_5 $$ boolean allLinesCommented = true-->Line_58 $$ if (!allLinesCommented) [ FD ]
Line_80 $$ if (commenter instanceof SelfManagingCommenter) -->Line_86 $$ if (prefix == null)[ CD ]
Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_36 $$ if (!isLineCommented(block, line, commenter) && (singleline || !isLineEmpty(document, line))) [ CD ]
Line_89 $$ int lineStart = document.getLineStartOffset(block.startLine)-->Line_90 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")[ FD ]
Line_79 $$ String prefix-->Line_91 $$ lineStart += prefix.length()[ FD ]
Line_83 $$ prefix = ""-->Line_86 $$ if (prefix == null)[ FD ]
Line_15 $$ CharSequence chars = document.getCharsSequence()-->Line_19 $$ int endOffset = CharArrayUtil.shiftBackward(chars, document.getLineEndOffset(endLine), " \t\n")[ FD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_19 $$ int endOffset = CharArrayUtil.shiftBackward(chars, document.getLineEndOffset(endLine), " \t\n")[ FD ]
Line_100 $$ if (position.line < document.getLineCount() - 1) -->Line_102 $$ caret.moveCaretRelatively(0, verticalShift, false, true)[ CD ]
Line_83 $$ prefix = ""-->Line_85 $$ prefix = commenter.getLineCommentPrefix()[ FD ]
Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)-->Line_32 $$ state = SelfManagingCommenter.EMPTY_STATE[ FD ]
Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_35 $$ block.commenters[line - startLine] = commenter[ CD ]
Line_87 $$ prefix = commenter.getBlockCommentPrefix()-->Line_91 $$ lineStart += prefix.length()[ FD ]
Line_36 $$ if (!isLineCommented(block, line, commenter) && (singleline || !isLineEmpty(document, line))) -->Line_37 $$ allLinesCommented = false[ CD ]
Line_17 $$ int offset = document.getLineStartOffset(startLine)-->Line_18 $$ offset = CharArrayUtil.shiftForward(chars, offset, " \t")[ FD ]
Line_92 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")-->Line_93 $$ if (lineStart > document.getTextLength())[ FD ]
Line_80 $$ if (commenter instanceof SelfManagingCommenter) -->Line_82 $$ if (prefix == null)[ CD ]
Line_5 $$ boolean allLinesCommented = true-->Line_37 $$ allLinesCommented = false[ FD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)[ FD ]
Line_50 $$ if (block.carets.size() > 1 && block.startLine != block.endLine) -->Line_51 $$ moveCarets = false[ CD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_17 $$ int offset = document.getLineStartOffset(startLine)[ FD ]
Line_85 $$ prefix = commenter.getLineCommentPrefix()-->Line_91 $$ lineStart += prefix.length()[ FD ]
Line_101 $$ int verticalShift = 1 + block.editor.getSoftWrapModel().getSoftWrapsForLine(position.line).size() - EditorUtil.getSoftWrapCountAfterLineStart(block.editor, position)-->Line_102 $$ caret.moveCaretRelatively(0, verticalShift, false, true)[ FD ]
Line_91 $$ lineStart += prefix.length()-->Line_93 $$ if (lineStart > document.getTextLength())[ FD ]
Line_94 $$ lineStart = document.getTextLength()-->Line_95 $$ caret.moveToOffset(lineStart)[ FD ]
Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))-->Line_87 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_35 $$ block.commenters[line - startLine] = commenter[ FD ]
Line_90 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")-->Line_95 $$ caret.moveToOffset(lineStart)[ FD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_90 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")[ FD ]
Line_83 $$ prefix = ""-->Line_87 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_2 $$ public void postInvoke() -->Line_5 $$ boolean allLinesCommented = true[ CD ]
Line_58 $$ if (!allLinesCommented) -->Line_59 $$ if (!block.commentWithIndent) [ CD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_106 $$ caret.setSelection(document.getLineStartOffset(document.getLineNumber(caret.getSelectionStart())), caret.getSelectionEnd())[ FD ]
Line_39 $$ final Boolean value = ((IndentedCommenter) commenter).forceIndentedLineComment()-->Line_41 $$ block.commentWithIndent = value[ FD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))[ FD ]
Line_77 $$ final Commenter commenter = block.commenters[0]-->Line_78 $$ if (commenter != null) [ FD ]
Line_86 $$ if (prefix == null)-->Line_87 $$ prefix = commenter.getBlockCommentPrefix()[ CD ]
Line_92 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")-->Line_94 $$ lineStart = document.getTextLength()[ FD ]
Line_90 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")-->Line_94 $$ lineStart = document.getTextLength()[ FD ]
Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))-->Line_86 $$ if (prefix == null)[ FD ]
Line_65 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_66 $$ uncommentLine(block, line)[ CD ]
Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))-->Line_85 $$ prefix = commenter.getLineCommentPrefix()[ FD ]
Line_78 $$ if (commenter != null) -->Line_89 $$ int lineStart = document.getLineStartOffset(block.startLine)[ CD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_100 $$ if (position.line < document.getLineCount() - 1) [ FD ]
Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_66 $$ uncommentLine(block, line)[ FD ]
Line_79 $$ String prefix-->Line_86 $$ if (prefix == null)[ FD ]
Line_58 $$ if (!allLinesCommented) -->Line_65 $$ for (int line = block.endLine; line >= block.startLine; line--) [ CD ]
Line_85 $$ prefix = commenter.getLineCommentPrefix()-->Line_87 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_74 $$ for (Caret caret : block.carets) -->Line_102 $$ caret.moveCaretRelatively(0, verticalShift, false, true)[ FD ]
Line_29 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_33 $$ block.commenterStateMap.put(selfManagingCommenter, state)[ FD ]
Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_65 $$ for (int line = block.endLine; line >= block.startLine; line--) [ FD ]
Line_92 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")-->Line_95 $$ caret.moveToOffset(lineStart)[ FD ]
Line_91 $$ lineStart += prefix.length()-->Line_92 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")[ FD ]
Line_78 $$ if (commenter != null) -->Line_92 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")[ CD ]
Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_28 $$ if (commenter instanceof SelfManagingCommenter && block.commenterStateMap.get(commenter) == null) [ CD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_94 $$ lineStart = document.getTextLength()[ FD ]
Line_24 $$ if (commenter == null || commenter.getLineCommentPrefix() == null && (commenter.getBlockCommentPrefix() == null || commenter.getBlockCommentSuffix() == null)) -->Line_25 $$ block.skip = true[ CD ]
Line_57 $$ if (!block.skip) -->Line_58 $$ if (!allLinesCommented) [ CD ]
Line_90 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")-->Line_92 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")[ FD ]
Line_28 $$ if (commenter instanceof SelfManagingCommenter && block.commenterStateMap.get(commenter) == null) -->Line_31 $$ if (state == null)[ CD ]
Line_89 $$ int lineStart = document.getLineStartOffset(block.startLine)-->Line_95 $$ caret.moveToOffset(lineStart)[ FD ]
Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)[ FD ]
Line_59 $$ if (!block.commentWithIndent) -->Line_60 $$ doDefaultCommenting(block)[ CD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_89 $$ int lineStart = document.getLineStartOffset(block.startLine)[ FD ]
Line_48 $$ boolean moveCarets = true-->Line_70 $$ if (!moveCarets || block.caretUpdate == null) [ FD ]
Line_48 $$ boolean moveCarets = true-->Line_51 $$ moveCarets = false[ FD ]
Line_78 $$ if (commenter != null) -->Line_93 $$ if (lineStart > document.getTextLength())[ CD ]
Line_89 $$ int lineStart = document.getLineStartOffset(block.startLine)-->Line_94 $$ lineStart = document.getTextLength()[ FD ]
Line_28 $$ if (commenter instanceof SelfManagingCommenter && block.commenterStateMap.get(commenter) == null) -->Line_29 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter[ CD ]
Line_10 $$ PsiFile psiFile = block.psiFile-->Line_21 $$ block.commentWithIndent = !CodeStyleSettingsManager.getSettings(myProject).getCommonSettings(psiFile.getLanguage()).LINE_COMMENT_AT_FIRST_COLUMN[ FD ]
Line_37 $$ allLinesCommented = false-->Line_58 $$ if (!allLinesCommented) [ FD ]
Line_78 $$ if (commenter != null) -->Line_80 $$ if (commenter instanceof SelfManagingCommenter) [ CD ]
Line_29 $$ final SelfManagingCommenter selfManagingCommenter = (SelfManagingCommenter) commenter-->Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)[ FD ]
Line_91 $$ lineStart += prefix.length()-->Line_94 $$ lineStart = document.getTextLength()[ FD ]
Line_77 $$ final Commenter commenter = block.commenters[0]-->Line_85 $$ prefix = commenter.getLineCommentPrefix()[ FD ]
Line_38 $$ if (commenter instanceof IndentedCommenter) -->Line_39 $$ final Boolean value = ((IndentedCommenter) commenter).forceIndentedLineComment()[ CD ]
Line_36 $$ if (!isLineCommented(block, line, commenter) && (singleline || !isLineEmpty(document, line))) -->Line_38 $$ if (commenter instanceof IndentedCommenter) [ CD ]
Line_8 $$ int endLine = block.endLine-->Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)[ FD ]
Line_6 $$ for (Block block : myBlocks) -->Line_62 $$ doIndentCommenting(block)[ FD ]
Line_18 $$ offset = CharArrayUtil.shiftForward(chars, offset, " \t")-->Line_20 $$ block.blockSuitableCommenter = getBlockSuitableCommenter(psiFile, offset, endOffset)[ FD ]
Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_36 $$ if (!isLineCommented(block, line, commenter) && (singleline || !isLineEmpty(document, line))) [ FD ]
Line_8 $$ int endLine = block.endLine-->Line_22 $$ for (int line = startLine; line <= endLine; line++) [ FD ]
Line_79 $$ String prefix-->Line_85 $$ prefix = commenter.getLineCommentPrefix()[ FD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_36 $$ if (!isLineCommented(block, line, commenter) && (singleline || !isLineEmpty(document, line))) [ FD ]
Line_82 $$ if (prefix == null)-->Line_83 $$ prefix = ""[ CD ]
Line_100 $$ if (position.line < document.getLineCount() - 1) -->Line_101 $$ int verticalShift = 1 + block.editor.getSoftWrapModel().getSoftWrapsForLine(position.line).size() - EditorUtil.getSoftWrapCountAfterLineStart(block.editor, position)[ CD ]
Line_15 $$ CharSequence chars = document.getCharsSequence()-->Line_18 $$ offset = CharArrayUtil.shiftForward(chars, offset, " \t")[ FD ]
Line_74 $$ for (Caret caret : block.carets) -->Line_95 $$ caret.moveToOffset(lineStart)[ FD ]
Line_74 $$ for (Caret caret : block.carets) -->Line_106 $$ caret.setSelection(document.getLineStartOffset(document.getLineNumber(caret.getSelectionStart())), caret.getSelectionEnd())[ FD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_38 $$ if (commenter instanceof IndentedCommenter) [ FD ]
Line_10 $$ PsiFile psiFile = block.psiFile-->Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)[ FD ]
Line_31 $$ if (state == null)-->Line_32 $$ state = SelfManagingCommenter.EMPTY_STATE[ CD ]
Line_2 $$ public void postInvoke() -->Line_3 $$ FeatureUsageTracker.getInstance().triggerFeatureUsed("codeassists.comment.line")[ CD ]
Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)-->Line_31 $$ if (state == null)[ FD ]
Line_78 $$ if (commenter != null) -->Line_79 $$ String prefix[ CD ]
Line_51 $$ moveCarets = false-->Line_70 $$ if (!moveCarets || block.caretUpdate == null) [ FD ]
Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))-->Line_82 $$ if (prefix == null)[ FD ]
Line_91 $$ lineStart += prefix.length()-->Line_95 $$ caret.moveToOffset(lineStart)[ FD ]
Line_28 $$ if (commenter instanceof SelfManagingCommenter && block.commenterStateMap.get(commenter) == null) -->Line_33 $$ block.commenterStateMap.put(selfManagingCommenter, state)[ CD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_36 $$ if (!isLineCommented(block, line, commenter) && (singleline || !isLineEmpty(document, line))) [ FD ]
Line_99 $$ LogicalPosition position = caret.getLogicalPosition()-->Line_101 $$ int verticalShift = 1 + block.editor.getSoftWrapModel().getSoftWrapsForLine(position.line).size() - EditorUtil.getSoftWrapCountAfterLineStart(block.editor, position)[ FD ]
Line_93 $$ if (lineStart > document.getTextLength())-->Line_94 $$ lineStart = document.getTextLength()[ CD ]
Line_22 $$ for (int line = startLine; line <= endLine; line++) -->Line_24 $$ if (commenter == null || commenter.getLineCommentPrefix() == null && (commenter.getBlockCommentPrefix() == null || commenter.getBlockCommentSuffix() == null)) [ CD ]
Line_7 $$ int startLine = block.startLine-->Line_17 $$ int offset = document.getLineStartOffset(startLine)[ FD ]
Line_9 $$ Document document = block.editor.getDocument()-->Line_92 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")[ FD ]
Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))-->Line_83 $$ prefix = ""[ FD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_85 $$ prefix = commenter.getLineCommentPrefix()[ FD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_28 $$ if (commenter instanceof SelfManagingCommenter && block.commenterStateMap.get(commenter) == null) [ FD ]
Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))-->Line_91 $$ lineStart += prefix.length()[ FD ]
Line_79 $$ String prefix-->Line_81 $$ prefix = ((SelfManagingCommenter) commenter).getCommentPrefix(block.startLine, document, block.commenterStateMap.get((SelfManagingCommenter) commenter))[ FD ]
Line_77 $$ final Commenter commenter = block.commenters[0]-->Line_87 $$ prefix = commenter.getBlockCommentPrefix()[ FD ]
Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)-->Line_24 $$ if (commenter == null || commenter.getLineCommentPrefix() == null && (commenter.getBlockCommentPrefix() == null || commenter.getBlockCommentSuffix() == null)) [ FD ]
Line_6 $$ for (Block block : myBlocks) -->Line_66 $$ uncommentLine(block, line)[ FD ]
Line_19 $$ int endOffset = CharArrayUtil.shiftBackward(chars, document.getLineEndOffset(endLine), " \t\n")-->Line_20 $$ block.blockSuitableCommenter = getBlockSuitableCommenter(psiFile, offset, endOffset)[ FD ]
Line_79 $$ String prefix-->Line_83 $$ prefix = ""[ FD ]
Line_30 $$ CommenterDataHolder state = selfManagingCommenter.createLineCommentingState(startLine, endLine, document, psiFile)-->Line_33 $$ block.commenterStateMap.put(selfManagingCommenter, state)[ FD ]
Line_90 $$ lineStart = CharArrayUtil.shiftForward(document.getCharsSequence(), lineStart, " \t")-->Line_91 $$ lineStart += prefix.length()[ FD ]
Line_65 $$ for (int line = block.endLine; line >= block.startLine; line--) -->Line_66 $$ uncommentLine(block, line)[ FD ]
Line_80 $$ if (commenter instanceof SelfManagingCommenter) -->Line_85 $$ prefix = commenter.getLineCommentPrefix()[ CD ]
Line_85 $$ prefix = commenter.getLineCommentPrefix()-->Line_86 $$ if (prefix == null)[ FD ]
Line_10 $$ PsiFile psiFile = block.psiFile-->Line_23 $$ Commenter commenter = block.blockSuitableCommenter != null ? block.blockSuitableCommenter : findCommenter(block.editor, psiFile, line)[ FD ]
