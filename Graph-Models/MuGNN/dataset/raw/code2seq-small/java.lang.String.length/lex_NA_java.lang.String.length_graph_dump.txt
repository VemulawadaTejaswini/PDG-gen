Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_73 $$ result.add(ZenCodingTokens.OPENING_SQ_BRACKET)[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_64 $$ builder.append(c)[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_21 $$ builder.append(c)[ FD ]
Line_22 $$ if (c == '\'') -->Line_24 $$ result.add(new StringLiteralToken(builder.toString()))[ CD ]
Line_16 $$ builder = new StringBuilder()-->Line_49 $$ if (builder.length() > 0) [ FD ]
Line_57 $$ builder = new StringBuilder()-->Line_12 $$ builder.append(c)[ FD ]
Line_59 $$ if (c == '"') -->Line_60 $$ inQuotes = true[ CD ]
Line_35 $$ builder = new StringBuilder()-->Line_49 $$ if (builder.length() > 0) [ FD ]
Line_57 $$ builder = new StringBuilder()-->Line_50 $$ final String tokenText = builder.toString()[ FD ]
Line_9 $$ for (int i = 0; i < text.length(); i++) -->Line_10 $$ final char c = text.charAt(i)[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_57 $$ builder = new StringBuilder()[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_86 $$ if (c == '|') [ FD ]
Line_31 $$ if (c == '}') -->Line_33 $$ if (bracesStack == 0) [ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_80 $$ if (c == '#') [ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_57 $$ builder = new StringBuilder()[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_35 $$ builder = new StringBuilder()[ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_67 $$ builder.append(c)[ FD ]
Line_66 $$ bracesStack = 1-->Line_29 $$ if (bracesStack > 0) [ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_46 $$ builder.append(c)[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_61 $$ builder.append(c)[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_72 $$ if (c == '[') [ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_88 $$ if (c != ZenCodingTemplate.MARKER) [ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_34 $$ result.add(new TextToken(builder.toString()))[ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_67 $$ builder.append(c)[ FD ]
Line_42 $$ if (DELIMS.indexOf(c) < 0) -->Line_59 $$ if (c == '"') [ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_75 $$ result.add(ZenCodingTokens.CLOSING_SQ_BRACKET)[ FD ]
Line_42 $$ if (DELIMS.indexOf(c) < 0) -->Line_49 $$ if (builder.length() > 0) [ CD ]
Line_25 $$ builder = new StringBuilder()-->Line_30 $$ builder.append(c)[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_43 $$ builder.append(c)[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_12 $$ builder.append(c)[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_30 $$ builder.append(c)[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_67 $$ builder.append(c)[ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_35 $$ builder = new StringBuilder()[ FD ]
Line_57 $$ builder = new StringBuilder()-->Line_43 $$ builder.append(c)[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_74 $$ if (c == ']') [ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_31 $$ if (c == '}') [ FD ]
Line_31 $$ if (c == '}') -->Line_37 $$ if (c == '[ CD ]
Line_78 $$ if (c == '.') -->Line_80 $$ if (c == '#') [ CD ]
Line_50 $$ final String tokenText = builder.toString()-->Line_51 $$ final int n = StringUtil.parseInt(tokenText, -1)[ FD ]
Line_66 $$ bracesStack = 1-->Line_32 $$ bracesStack--[ FD ]
Line_52 $$ if (!StringUtil.startsWithChar(tokenText, '0') && n >= 0) -->Line_53 $$ result.add(new NumberToken(n))[ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_77 $$ result.add(ZenCodingTokens.EQ)[ FD ]
Line_82 $$ if (c == ',') -->Line_84 $$ if (c == ' ') [ CD ]
Line_25 $$ builder = new StringBuilder()-->Line_43 $$ builder.append(c)[ FD ]
Line_50 $$ final String tokenText = builder.toString()-->Line_52 $$ if (!StringUtil.startsWithChar(tokenText, '0') && n >= 0) [ FD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_87 $$ result.add(ZenCodingTokens.PIPE)[ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_8 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder = new StringBuilder()[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_24 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_53 $$ result.add(new NumberToken(n))[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_82 $$ if (c == ',') [ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_49 $$ if (builder.length() > 0) [ FD ]
Line_5 $$ boolean inQuotes = false-->Line_14 $$ inQuotes = false[ FD ]
Line_49 $$ if (builder.length() > 0) -->Line_52 $$ if (!StringUtil.startsWithChar(tokenText, '0') && n >= 0) [ CD ]
Line_57 $$ builder = new StringBuilder()-->Line_49 $$ if (builder.length() > 0) [ FD ]
Line_82 $$ if (c == ',') -->Line_83 $$ result.add(ZenCodingTokens.COMMA)[ CD ]
Line_16 $$ builder = new StringBuilder()-->Line_12 $$ builder.append(c)[ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_64 $$ builder.append(c)[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_84 $$ if (c == ' ') [ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_30 $$ builder.append(c)[ FD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_79 $$ result.add(ZenCodingTokens.DOT)[ FD ]
Line_62 $$ if (c == '\'') -->Line_63 $$ inApostrophes = true[ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_70 $$ if (c == ')') [ FD ]
Line_76 $$ if (c == '=') -->Line_78 $$ if (c == '.') [ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_43 $$ builder.append(c)[ FD ]
Line_7 $$ int bracesStack = 0-->Line_66 $$ bracesStack = 1[ FD ]
Line_74 $$ if (c == ']') -->Line_75 $$ result.add(ZenCodingTokens.CLOSING_SQ_BRACKET)[ CD ]
Line_42 $$ if (DELIMS.indexOf(c) < 0) -->Line_45 $$ if (c == '+' && (i == text.length() - 2 || text.charAt(i + 1) == ')')) [ CD ]
Line_7 $$ int bracesStack = 0-->Line_32 $$ bracesStack--[ FD ]
Line_20 $$ if (inApostrophes) -->Line_21 $$ builder.append(c)[ CD ]
Line_33 $$ if (bracesStack == 0) -->Line_35 $$ builder = new StringBuilder()[ CD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_7 $$ int bracesStack = 0[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_46 $$ builder.append(c)[ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_93 $$ if (bracesStack != 0 || inQuotes || inApostrophes) [ CD ]
Line_7 $$ int bracesStack = 0-->Line_38 $$ bracesStack++[ FD ]
Line_65 $$ if (c == '-->Line_68 $$ if (c == '(') [ CD ]
Line_7 $$ int bracesStack = 0-->Line_33 $$ if (bracesStack == 0) [ FD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_69 $$ result.add(ZenCodingTokens.OPENING_R_BRACKET)[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_61 $$ builder.append(c)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_35 $$ builder = new StringBuilder()[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_49 $$ if (builder.length() > 0) [ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_24 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_57 $$ builder = new StringBuilder()-->Line_67 $$ builder.append(c)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_30 $$ builder.append(c)[ FD ]
Line_62 $$ if (c == '\'') -->Line_65 $$ if (c == '[ CD ]
Line_37 $$ if (c == '-->Line_38 $$ bracesStack++[ CD ]
Line_16 $$ builder = new StringBuilder()-->Line_57 $$ builder = new StringBuilder()[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_67 $$ builder.append(c)[ FD ]
Line_88 $$ if (c != ZenCodingTemplate.MARKER) -->Line_89 $$ result.add(new OperationToken(c))[ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_59 $$ if (c == '"') [ FD ]
Line_31 $$ if (c == '}') -->Line_32 $$ bracesStack--[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_50 $$ final String tokenText = builder.toString()[ FD ]
Line_22 $$ if (c == '\'') -->Line_23 $$ inApostrophes = false[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_25 $$ builder = new StringBuilder()[ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_6 $$ boolean inApostrophes = false[ CD ]
Line_59 $$ if (c == '"') -->Line_61 $$ builder.append(c)[ CD ]
Line_25 $$ builder = new StringBuilder()-->Line_24 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_9 $$ for (int i = 0; i < text.length(); i++) [ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_62 $$ if (c == '\'') [ FD ]
Line_65 $$ if (c == '-->Line_67 $$ builder.append(c)[ CD ]
Line_13 $$ if (c == '"') -->Line_16 $$ builder = new StringBuilder()[ CD ]
Line_33 $$ if (bracesStack == 0) -->Line_34 $$ result.add(new TextToken(builder.toString()))[ CD ]
Line_63 $$ inApostrophes = true-->Line_93 $$ if (bracesStack != 0 || inQuotes || inApostrophes) [ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_45 $$ if (c == '+' && (i == text.length() - 2 || text.charAt(i + 1) == ')')) [ FD ]
Line_13 $$ if (c == '"') -->Line_14 $$ inQuotes = false[ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_83 $$ result.add(ZenCodingTokens.COMMA)[ FD ]
Line_80 $$ if (c == '#') -->Line_82 $$ if (c == ',') [ CD ]
Line_49 $$ if (builder.length() > 0) -->Line_57 $$ builder = new StringBuilder()[ CD ]
Line_86 $$ if (c == '|') -->Line_88 $$ if (c != ZenCodingTemplate.MARKER) [ CD ]
Line_16 $$ builder = new StringBuilder()-->Line_61 $$ builder.append(c)[ FD ]
Line_29 $$ if (bracesStack > 0) -->Line_30 $$ builder.append(c)[ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_12 $$ builder.append(c)[ FD ]
Line_9 $$ for (int i = 0; i < text.length(); i++) -->Line_20 $$ if (inApostrophes) [ CD ]
Line_76 $$ if (c == '=') -->Line_77 $$ result.add(ZenCodingTokens.EQ)[ CD ]
Line_78 $$ if (c == '.') -->Line_79 $$ result.add(ZenCodingTokens.DOT)[ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_57 $$ builder = new StringBuilder()[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_34 $$ result.add(new TextToken(builder.toString()))[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_67 $$ builder.append(c)[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_12 $$ builder.append(c)[ FD ]
Line_66 $$ bracesStack = 1-->Line_33 $$ if (bracesStack == 0) [ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_13 $$ if (c == '"') [ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_42 $$ if (DELIMS.indexOf(c) < 0) [ FD ]
Line_9 $$ for (int i = 0; i < text.length(); i++) -->Line_42 $$ if (DELIMS.indexOf(c) < 0) [ CD ]
Line_5 $$ boolean inQuotes = false-->Line_60 $$ inQuotes = true[ FD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_71 $$ result.add(ZenCodingTokens.CLOSING_R_BRACKET)[ FD ]
Line_13 $$ if (c == '"') -->Line_15 $$ result.add(new StringLiteralToken(builder.toString()))[ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_81 $$ result.add(ZenCodingTokens.SHARP)[ FD ]
Line_72 $$ if (c == '[') -->Line_73 $$ result.add(ZenCodingTokens.OPENING_SQ_BRACKET)[ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_78 $$ if (c == '.') [ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_34 $$ result.add(new TextToken(builder.toString()))[ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_96 $$ return result[ CD ]
Line_35 $$ builder = new StringBuilder()-->Line_15 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_70 $$ if (c == ')') -->Line_72 $$ if (c == '[') [ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_24 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_11 $$ if (inQuotes) -->Line_12 $$ builder.append(c)[ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_34 $$ result.add(new TextToken(builder.toString()))[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_50 $$ final String tokenText = builder.toString()[ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_15 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_22 $$ if (c == '\'') -->Line_25 $$ builder = new StringBuilder()[ CD ]
Line_16 $$ builder = new StringBuilder()-->Line_46 $$ builder.append(c)[ FD ]
Line_45 $$ if (c == '+' && (i == text.length() - 2 || text.charAt(i + 1) == ')')) -->Line_46 $$ builder.append(c)[ CD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_10 $$ final char c = text.charAt(i)[ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_24 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_21 $$ builder.append(c)[ FD ]
Line_52 $$ if (!StringUtil.startsWithChar(tokenText, '0') && n >= 0) -->Line_55 $$ result.add(new IdentifierToken(tokenText))[ CD ]
Line_6 $$ boolean inApostrophes = false-->Line_63 $$ inApostrophes = true[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_61 $$ builder.append(c)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(c)[ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_5 $$ boolean inQuotes = false[ CD ]
Line_62 $$ if (c == '\'') -->Line_64 $$ builder.append(c)[ CD ]
Line_25 $$ builder = new StringBuilder()-->Line_21 $$ builder.append(c)[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_15 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_80 $$ if (c == '#') -->Line_81 $$ result.add(ZenCodingTokens.SHARP)[ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_89 $$ result.add(new OperationToken(c))[ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_43 $$ builder.append(c)[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_46 $$ builder.append(c)[ FD ]
Line_9 $$ for (int i = 0; i < text.length(); i++) -->Line_10 $$ final char c = text.charAt(i)[ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_55 $$ result.add(new IdentifierToken(tokenText))[ FD ]
Line_57 $$ builder = new StringBuilder()-->Line_61 $$ builder.append(c)[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_76 $$ if (c == '=') [ FD ]
Line_84 $$ if (c == ' ') -->Line_86 $$ if (c == '|') [ CD ]
Line_57 $$ builder = new StringBuilder()-->Line_30 $$ builder.append(c)[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_50 $$ final String tokenText = builder.toString()[ FD ]
Line_2 $$ public List<ZenCodingToken> lex(@NotNull String text) -->Line_9 $$ for (int i = 0; i < text.length(); i++) [ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_64 $$ builder.append(c)[ FD ]
Line_49 $$ if (builder.length() > 0) -->Line_50 $$ final String tokenText = builder.toString()[ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_21 $$ builder.append(c)[ FD ]
Line_59 $$ if (c == '"') -->Line_62 $$ if (c == '\'') [ CD ]
Line_66 $$ bracesStack = 1-->Line_38 $$ bracesStack++[ FD ]
Line_72 $$ if (c == '[') -->Line_74 $$ if (c == ']') [ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_37 $$ if (c == '[ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_15 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_43 $$ builder.append(c)[ FD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_85 $$ result.add(ZenCodingTokens.SPACE)[ FD ]
Line_74 $$ if (c == ']') -->Line_76 $$ if (c == '=') [ CD ]
Line_57 $$ builder = new StringBuilder()-->Line_24 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_65 $$ if (c == '[ FD ]
Line_9 $$ for (int i = 0; i < text.length(); i++) -->Line_29 $$ if (bracesStack > 0) [ CD ]
Line_49 $$ if (builder.length() > 0) -->Line_51 $$ final int n = StringUtil.parseInt(tokenText, -1)[ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_22 $$ if (c == '\'') [ FD ]
Line_6 $$ boolean inApostrophes = false-->Line_93 $$ if (bracesStack != 0 || inQuotes || inApostrophes) [ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_25 $$ builder = new StringBuilder()[ FD ]
Line_57 $$ builder = new StringBuilder()-->Line_34 $$ result.add(new TextToken(builder.toString()))[ FD ]
Line_57 $$ builder = new StringBuilder()-->Line_64 $$ builder.append(c)[ FD ]
Line_29 $$ if (bracesStack > 0) -->Line_31 $$ if (c == '}') [ CD ]
Line_10 $$ final char c = text.charAt(i)-->Line_68 $$ if (c == '(') [ FD ]
Line_23 $$ inApostrophes = false-->Line_93 $$ if (bracesStack != 0 || inQuotes || inApostrophes) [ FD ]
Line_84 $$ if (c == ' ') -->Line_85 $$ result.add(ZenCodingTokens.SPACE)[ CD ]
Line_23 $$ inApostrophes = false-->Line_63 $$ inApostrophes = true[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_30 $$ builder.append(c)[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_64 $$ builder.append(c)[ FD ]
Line_16 $$ builder = new StringBuilder()-->Line_50 $$ final String tokenText = builder.toString()[ FD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ builder.append(c)[ FD ]
Line_11 $$ if (inQuotes) -->Line_13 $$ if (c == '"') [ CD ]
Line_57 $$ builder = new StringBuilder()-->Line_15 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_68 $$ if (c == '(') -->Line_69 $$ result.add(ZenCodingTokens.OPENING_R_BRACKET)[ CD ]
Line_42 $$ if (DELIMS.indexOf(c) < 0) -->Line_43 $$ builder.append(c)[ CD ]
Line_86 $$ if (c == '|') -->Line_87 $$ result.add(ZenCodingTokens.PIPE)[ CD ]
Line_6 $$ boolean inApostrophes = false-->Line_23 $$ inApostrophes = false[ FD ]
Line_68 $$ if (c == '(') -->Line_70 $$ if (c == ')') [ CD ]
Line_4 $$ final List<ZenCodingToken> result = new ArrayList<ZenCodingToken>()-->Line_15 $$ result.add(new StringLiteralToken(builder.toString()))[ FD ]
Line_20 $$ if (inApostrophes) -->Line_22 $$ if (c == '\'') [ CD ]
Line_8 $$ StringBuilder builder = new StringBuilder()-->Line_64 $$ builder.append(c)[ FD ]
Line_7 $$ int bracesStack = 0-->Line_29 $$ if (bracesStack > 0) [ FD ]
Line_25 $$ builder = new StringBuilder()-->Line_46 $$ builder.append(c)[ FD ]
Line_93 $$ if (bracesStack != 0 || inQuotes || inApostrophes) -->Line_94 $$ return null[ CD ]
Line_14 $$ inQuotes = false-->Line_60 $$ inQuotes = true[ FD ]
Line_35 $$ builder = new StringBuilder()-->Line_34 $$ result.add(new TextToken(builder.toString()))[ FD ]
Line_70 $$ if (c == ')') -->Line_71 $$ result.add(ZenCodingTokens.CLOSING_R_BRACKET)[ CD ]
Line_57 $$ builder = new StringBuilder()-->Line_46 $$ builder.append(c)[ FD ]
Line_10 $$ final char c = text.charAt(i)-->Line_61 $$ builder.append(c)[ FD ]
Line_9 $$ for (int i = 0; i < text.length(); i++) -->Line_11 $$ if (inQuotes) [ CD ]
Line_65 $$ if (c == '-->Line_66 $$ bracesStack = 1[ CD ]
Line_57 $$ builder = new StringBuilder()-->Line_21 $$ builder.append(c)[ FD ]
