Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_26 $$ assertThat(bi.previous(), equalTo(BreakIterator.DONE))[ CD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_31 $$ assertThat(source.substring(0, bi.next(3)), equalTo("this" + separator + "is" + separator + "the" + separator))[ CD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_13 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("sentence"))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_26 $$ assertThat(bi.previous(), equalTo(BreakIterator.DONE))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_6 $$ bi.setText(source)[ CD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_18 $$ current = bi.current()[ CD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_19 $$ assertThat(source.substring(bi.previous(), current), equalTo("first" + separator))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_6 $$ bi.setText(source)[ FD ]
Line_18 $$ current = bi.current()-->Line_22 $$ current = bi.current()[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_30 $$ assertThat(bi.first(), equalTo(0))[ CD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_29 $$ assertThat(source.substring(0, bi.preceding(9)), equalTo("this" + separator + "is" + separator))[ FD ]
Line_16 $$ int current = bi.current()-->Line_24 $$ current = bi.current()[ FD ]
Line_16 $$ int current = bi.current()-->Line_21 $$ assertThat(source.substring(bi.previous(), current), equalTo("the" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_22 $$ current = bi.current()[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_15 $$ assertThat(bi.last(), equalTo(source.length()))[ CD ]
Line_18 $$ current = bi.current()-->Line_23 $$ assertThat(source.substring(bi.previous(), current), equalTo("is" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_8 $$ assertThat(bi.first(), equalTo(0))[ CD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_15 $$ assertThat(bi.last(), equalTo(source.length()))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_10 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("is" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_23 $$ assertThat(source.substring(bi.previous(), current), equalTo("is" + separator))[ FD ]
Line_18 $$ current = bi.current()-->Line_21 $$ assertThat(source.substring(bi.previous(), current), equalTo("the" + separator))[ FD ]
Line_20 $$ current = bi.current()-->Line_24 $$ current = bi.current()[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_29 $$ assertThat(source.substring(0, bi.preceding(9)), equalTo("this" + separator + "is" + separator))[ CD ]
Line_18 $$ current = bi.current()-->Line_19 $$ assertThat(source.substring(bi.previous(), current), equalTo("first" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_7 $$ assertThat(bi.current(), equalTo(0))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_24 $$ current = bi.current()[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"[ CD ]
Line_22 $$ current = bi.current()-->Line_23 $$ assertThat(source.substring(bi.previous(), current), equalTo("is" + separator))[ FD ]
Line_16 $$ int current = bi.current()-->Line_25 $$ assertThat(source.substring(bi.previous(), current), equalTo("this" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_9 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("this" + separator))[ CD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_22 $$ current = bi.current()[ CD ]
Line_16 $$ int current = bi.current()-->Line_19 $$ assertThat(source.substring(bi.previous(), current), equalTo("first" + separator))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_11 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("the" + separator))[ FD ]
Line_22 $$ current = bi.current()-->Line_25 $$ assertThat(source.substring(bi.previous(), current), equalTo("this" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_17 $$ assertThat(source.substring(bi.previous(), current), equalTo("sentence"))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_29 $$ assertThat(source.substring(0, bi.preceding(9)), equalTo("this" + separator + "is" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_27 $$ assertThat(bi.current(), equalTo(0))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_31 $$ assertThat(source.substring(0, bi.next(3)), equalTo("this" + separator + "is" + separator + "the" + separator))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_21 $$ assertThat(source.substring(bi.previous(), current), equalTo("the" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_20 $$ current = bi.current()[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_27 $$ assertThat(bi.current(), equalTo(0))[ CD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_13 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("sentence"))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_8 $$ assertThat(bi.first(), equalTo(0))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_25 $$ assertThat(source.substring(bi.previous(), current), equalTo("this" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_20 $$ current = bi.current()[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_15 $$ assertThat(bi.last(), equalTo(source.length()))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_31 $$ assertThat(source.substring(0, bi.next(3)), equalTo("this" + separator + "is" + separator + "the" + separator))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_9 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("this" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_19 $$ assertThat(source.substring(bi.previous(), current), equalTo("first" + separator))[ CD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_10 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("is" + separator))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_16 $$ int current = bi.current()[ FD ]
Line_18 $$ current = bi.current()-->Line_24 $$ current = bi.current()[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_28 $$ assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator))[ FD ]
Line_18 $$ current = bi.current()-->Line_20 $$ current = bi.current()[ FD ]
Line_16 $$ int current = bi.current()-->Line_18 $$ current = bi.current()[ FD ]
Line_20 $$ current = bi.current()-->Line_21 $$ assertThat(source.substring(bi.previous(), current), equalTo("the" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_10 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("is" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_14 $$ assertThat(bi.next(), equalTo(BreakIterator.DONE))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_28 $$ assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)[ CD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_11 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("the" + separator))[ CD ]
Line_16 $$ int current = bi.current()-->Line_17 $$ assertThat(source.substring(bi.previous(), current), equalTo("sentence"))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_17 $$ assertThat(source.substring(bi.previous(), current), equalTo("sentence"))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_16 $$ int current = bi.current()[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_30 $$ assertThat(bi.first(), equalTo(0))[ FD ]
Line_22 $$ current = bi.current()-->Line_24 $$ current = bi.current()[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_25 $$ assertThat(source.substring(bi.previous(), current), equalTo("this" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_18 $$ current = bi.current()[ FD ]
Line_16 $$ int current = bi.current()-->Line_20 $$ current = bi.current()[ FD ]
Line_16 $$ int current = bi.current()-->Line_22 $$ current = bi.current()[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_25 $$ assertThat(source.substring(bi.previous(), current), equalTo("this" + separator))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_11 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("the" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_23 $$ assertThat(source.substring(bi.previous(), current), equalTo("is" + separator))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_12 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("first" + separator))[ FD ]
Line_20 $$ current = bi.current()-->Line_23 $$ assertThat(source.substring(bi.previous(), current), equalTo("is" + separator))[ FD ]
Line_20 $$ current = bi.current()-->Line_22 $$ current = bi.current()[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_23 $$ assertThat(source.substring(bi.previous(), current), equalTo("is" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_9 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("this" + separator))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_17 $$ assertThat(source.substring(bi.previous(), current), equalTo("sentence"))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_12 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("first" + separator))[ CD ]
Line_24 $$ current = bi.current()-->Line_25 $$ assertThat(source.substring(bi.previous(), current), equalTo("this" + separator))[ FD ]
Line_18 $$ current = bi.current()-->Line_25 $$ assertThat(source.substring(bi.previous(), current), equalTo("this" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_14 $$ assertThat(bi.next(), equalTo(BreakIterator.DONE))[ FD ]
Line_16 $$ int current = bi.current()-->Line_23 $$ assertThat(source.substring(bi.previous(), current), equalTo("is" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_24 $$ current = bi.current()[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_6 $$ bi.setText(source)[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_3 $$ Character separator = randomSeparator()[ CD ]
Line_20 $$ current = bi.current()-->Line_25 $$ assertThat(source.substring(bi.previous(), current), equalTo("this" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_21 $$ assertThat(source.substring(bi.previous(), current), equalTo("the" + separator))[ FD ]
Line_5 $$ String source = "this" + separator + "is" + separator + "the" + separator + "first" + separator + "sentence"-->Line_12 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("first" + separator))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_28 $$ assertThat(source.substring(0, bi.following(9)), equalTo("this" + separator + "is" + separator + "the" + separator))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_13 $$ assertThat(source.substring(bi.current(), bi.next()), equalTo("sentence"))[ FD ]
Line_2 $$ public void testBreakOnCustomSeparator() throws Exception -->Line_21 $$ assertThat(source.substring(bi.previous(), current), equalTo("the" + separator))[ CD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_19 $$ assertThat(source.substring(bi.previous(), current), equalTo("first" + separator))[ FD ]
Line_4 $$ BreakIterator bi = new CustomSeparatorBreakIterator(separator)-->Line_7 $$ assertThat(bi.current(), equalTo(0))[ FD ]
