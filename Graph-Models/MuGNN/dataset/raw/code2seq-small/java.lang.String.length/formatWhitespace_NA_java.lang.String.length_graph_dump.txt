Line_72 $$ if (x == -1) -->Line_73 $$ x = Math.max(posComma, posSemicolon)[ CD ]
Line_40 $$ for (int x = 0; ; ) -->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_71 $$ x = Math.min(posComma, posSemicolon)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)-->Line_73 $$ x = Math.max(posComma, posSemicolon)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_72 $$ if (x == -1) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_86 $$ if (previousChar == CharPool.SPACE) -->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ CD ]
Line_65 $$ for (int x = -1; ; ) -->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ CD ]
Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) -->Line_57 $$ if (Character.isLetter(linePart2.charAt(0)) && !linePart2.startsWith("default") && !linePart2.startsWith("instanceof") && !linePart2.startsWith("throws")) [ CD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ CD ]
Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_73 $$ x = Math.max(posComma, posSemicolon)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_29 $$ c = linePart.charAt(x + 1)[ CD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_84 $$ if (x > 0) -->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ CD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_72 $$ if (x == -1) [ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_35 $$ if (!line.contains(StringPool.DOUBLE_SLASH)) [ CD ]
Line_73 $$ x = Math.max(posComma, posSemicolon)-->Line_84 $$ if (x > 0) [ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_22 $$ if (Character.isLetterOrDigit(c)) [ CD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_42 $$ if (x == -1) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_71 $$ x = Math.min(posComma, posSemicolon)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_73 $$ x = Math.max(posComma, posSemicolon)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_72 $$ if (x == -1) [ CD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else[ CD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_54 $$ int pos = linePart.indexOf(") ")-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_78 $$ if (linePart.length() > (x + 1)) [ CD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_84 $$ if (x > 0) [ FD ]
Line_22 $$ if (Character.isLetterOrDigit(c)) -->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ CD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_85 $$ char previousChar = linePart.charAt(x - 1)-->Line_86 $$ if (previousChar == CharPool.SPACE) [ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_56 $$ String linePart2 = linePart.substring(pos + 2)-->Line_57 $$ if (Character.isLetter(linePart2.charAt(0)) && !linePart2.startsWith("default") && !linePart2.startsWith("instanceof") && !linePart2.startsWith("throws")) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_35 $$ if (!line.contains(StringPool.DOUBLE_SLASH)) -->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ CD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_71 $$ x = Math.min(posComma, posSemicolon)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_71 $$ x = Math.min(posComma, posSemicolon)-->Line_73 $$ x = Math.max(posComma, posSemicolon)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ CD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_54 $$ int pos = linePart.indexOf(") ")-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)-->Line_71 $$ x = Math.min(posComma, posSemicolon)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")[ FD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)[ CD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_78 $$ if (linePart.length() > (x + 1)) -->Line_80 $$ if ((nextChar != CharPool.APOSTROPHE) && (nextChar != CharPool.CLOSE_PARENTHESIS) && (nextChar != CharPool.SPACE) && (nextChar != CharPool.STAR)) [ CD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_52 $$ return formatIncorrectSyntax(line, StringPool.SPACE + StringPool.TAB, StringPool.TAB, false)[ FD ]
Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_54 $$ int pos = linePart.indexOf(") ")-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)[ CD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_84 $$ if (x > 0) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_50 $$ if (line.contains(StringPool.DOUBLE_SLASH)) -->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ CD ]
Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)-->Line_71 $$ x = Math.min(posComma, posSemicolon)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)-->Line_92 $$ return formatIncorrectSyntax(line, StringPool.SPACE + StringPool.TAB, StringPool.TAB, false)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)[ CD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_68 $$ if ((posComma == -1) && (posSemicolon == -1)) [ CD ]
Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)-->Line_52 $$ return formatIncorrectSyntax(line, StringPool.SPACE + StringPool.TAB, StringPool.TAB, false)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_21 $$ char c = linePart.charAt(x - 1)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_42 $$ if (x == -1) [ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_84 $$ if (x > 0) -->Line_86 $$ if (previousChar == CharPool.SPACE) [ CD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")[ CD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_21 $$ char c = linePart.charAt(x - 1)-->Line_30 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ CD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ CD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_50 $$ if (line.contains(StringPool.DOUBLE_SLASH)) [ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_78 $$ if (linePart.length() > (x + 1)) -->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ CD ]
Line_13 $$ for (int x = 0; ; ) -->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_71 $$ x = Math.min(posComma, posSemicolon)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_15 $$ if (x == -1) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_54 $$ int pos = linePart.indexOf(") ")-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_73 $$ x = Math.max(posComma, posSemicolon)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)[ FD ]
Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_21 $$ char c = linePart.charAt(x - 1)[ CD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ CD ]
Line_61 $$ pos = linePart.indexOf(" (")-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)[ CD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ CD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_15 $$ if (x == -1) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_29 $$ c = linePart.charAt(x + 1)-->Line_30 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_30 $$ if (Character.isLetterOrDigit(c)) [ CD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_92 $$ return formatIncorrectSyntax(line, StringPool.SPACE + StringPool.TAB, StringPool.TAB, false)[ CD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_54 $$ int pos = linePart.indexOf(") ")-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_72 $$ if (x == -1) [ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)[ FD ]
Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_30 $$ if (Character.isLetterOrDigit(c)) -->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ CD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_13 $$ for (int x = 0; ; ) [ CD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_35 $$ if (!line.contains(StringPool.DOUBLE_SLASH)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_36 $$ while (linePart.contains(StringPool.TAB)) -->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ CD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)-->Line_92 $$ return formatIncorrectSyntax(line, StringPool.SPACE + StringPool.TAB, StringPool.TAB, false)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ CD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_57 $$ if (Character.isLetter(linePart2.charAt(0)) && !linePart2.startsWith("default") && !linePart2.startsWith("instanceof") && !linePart2.startsWith("throws")) -->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ CD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_42 $$ if (x == -1) [ FD ]
Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) -->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ CD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_84 $$ if (x > 0) [ CD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ FD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_73 $$ x = Math.max(posComma, posSemicolon)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_65 $$ for (int x = -1; ; ) [ CD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ CD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ CD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_72 $$ if (x == -1) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)[ FD ]
Line_73 $$ x = Math.max(posComma, posSemicolon)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_73 $$ x = Math.max(posComma, posSemicolon)[ FD ]
Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)-->Line_73 $$ x = Math.max(posComma, posSemicolon)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_29 $$ c = linePart.charAt(x + 1)-->Line_22 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_80 $$ if ((nextChar != CharPool.APOSTROPHE) && (nextChar != CharPool.CLOSE_PARENTHESIS) && (nextChar != CharPool.SPACE) && (nextChar != CharPool.STAR)) -->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ CD ]
Line_65 $$ for (int x = -1; ; ) -->Line_71 $$ x = Math.min(posComma, posSemicolon)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_3 $$ String originalLinePart = linePart-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)[ CD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_71 $$ x = Math.min(posComma, posSemicolon)-->Line_72 $$ if (x == -1) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_3 $$ String originalLinePart = linePart-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_42 $$ if (x == -1) [ CD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) -->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ CD ]
Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_26 $$ if (x == (linePart.length() - 1)) [ CD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_40 $$ for (int x = 0; ; ) [ CD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ FD ]
Line_71 $$ x = Math.min(posComma, posSemicolon)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_51 $$ line = StringUtil.replace(line, originalLinePart, linePart)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_55 $$ if ((pos != -1) && ((pos + 2) < linePart.length()) && !linePart.contains(StringPool.AT) && !ToolsUtil.isInsideQuotes(linePart, pos)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ CD ]
Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_3 $$ String originalLinePart = linePart[ CD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_71 $$ x = Math.min(posComma, posSemicolon)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_61 $$ pos = linePart.indexOf(" (")[ FD ]
Line_65 $$ for (int x = -1; ; ) -->Line_87 $$ linePart = linePart.substring(0, x - 1).concat(linePart.substring(x))[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_42 $$ if (x == -1) [ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_66 $$ int posComma = linePart.indexOf(CharPool.COMMA, x + 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_29 $$ c = linePart.charAt(x + 1)[ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ CD ]
Line_65 $$ for (int x = -1; ; ) -->Line_71 $$ x = Math.min(posComma, posSemicolon)[ CD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_84 $$ if (x > 0) [ FD ]
Line_37 $$ linePart = StringUtil.replaceLast(linePart, StringPool.TAB, StringPool.SPACE)-->Line_91 $$ line = StringUtil.replace(line, originalLinePart, linePart)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_61 $$ pos = linePart.indexOf(" (")[ CD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_11 $$ linePart = formatIncorrectSyntax(linePart, "]-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_54 $$ int pos = linePart.indexOf(") ")[ CD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_73 $$ x = Math.max(posComma, posSemicolon)-->Line_72 $$ if (x == -1) [ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_92 $$ return formatIncorrectSyntax(line, StringPool.SPACE + StringPool.TAB, StringPool.TAB, false)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_11 $$ linePart = formatIncorrectSyntax(linePart, "][ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_21 $$ char c = linePart.charAt(x - 1)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_13 $$ for (int x = 0; ; ) -->Line_72 $$ if (x == -1) [ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_63 $$ linePart = StringUtil.replaceFirst(linePart, " (", "(", pos)[ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_48 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.DOUBLE_SPACE, StringPool.SPACE, x)[ FD ]
Line_21 $$ char c = linePart.charAt(x - 1)-->Line_22 $$ if (Character.isLetterOrDigit(c)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_31 $$ linePart = StringUtil.replaceFirst(linePart, "=", "= ", x)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_18 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_40 $$ for (int x = 0; ; ) -->Line_84 $$ if (x > 0) [ FD ]
Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)-->Line_73 $$ x = Math.max(posComma, posSemicolon)[ FD ]
Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)-->Line_14 $$ x = linePart.indexOf(CharPool.EQUAL, x + 1)[ FD ]
Line_71 $$ x = Math.min(posComma, posSemicolon)-->Line_84 $$ if (x > 0) [ FD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_45 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)-->Line_67 $$ int posSemicolon = linePart.indexOf(CharPool.SEMICOLON, x + 1)[ FD ]
Line_9 $$ linePart = formatIncorrectSyntax(linePart, "List <", "List<", false)-->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_23 $$ linePart = StringUtil.replaceFirst(linePart, "=", " =", x)[ FD ]
Line_41 $$ x = linePart.indexOf(StringPool.DOUBLE_SPACE, x + 1)-->Line_84 $$ if (x > 0) [ FD ]
Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)-->Line_85 $$ char previousChar = linePart.charAt(x - 1)[ FD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_36 $$ while (linePart.contains(StringPool.TAB)) [ FD ]
Line_7 $$ linePart = formatIncorrectSyntax(linePart, "if(", "if (", true)-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_50 $$ if (line.contains(StringPool.DOUBLE_SLASH)) [ CD ]
Line_13 $$ for (int x = 0; ; ) -->Line_15 $$ if (x == -1) [ CD ]
Line_58 $$ linePart = StringUtil.replaceFirst(linePart, StringPool.SPACE, StringPool.BLANK, pos)-->Line_81 $$ linePart = StringUtil.insert(linePart, StringPool.SPACE, x + 1)[ FD ]
Line_10 $$ linePart = formatIncorrectSyntax(linePart, ")-->Line_75 $$ if (ToolsUtil.isInsideQuotes(linePart, x)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_56 $$ String linePart2 = linePart.substring(pos + 2)[ FD ]
Line_50 $$ if (line.contains(StringPool.DOUBLE_SLASH)) -->Line_52 $$ return formatIncorrectSyntax(line, StringPool.SPACE + StringPool.TAB, StringPool.TAB, false)[ CD ]
Line_61 $$ pos = linePart.indexOf(" (")-->Line_62 $$ if ((pos != -1) && !linePart.contains(StringPool.EQUAL) && !ToolsUtil.isInsideQuotes(linePart, pos) && (linePart.startsWith("private ") || linePart.startsWith("protected ") || linePart.startsWith("public "))) [ FD ]
Line_2 $$ protected String formatWhitespace(String line, String linePart) -->Line_12 $$ linePart = formatIncorrectSyntax(linePart, " [", "[", false)[ CD ]
Line_8 $$ linePart = formatIncorrectSyntax(linePart, "while(", "while (", true)-->Line_26 $$ if (x == (linePart.length() - 1)) [ FD ]
Line_4 $$ linePart = formatIncorrectSyntax(linePart, "catch(", "catch (", true)-->Line_79 $$ char nextChar = linePart.charAt(x + 1)[ FD ]
Line_6 $$ linePart = formatIncorrectSyntax(linePart, "for(", "for (", true)-->Line_78 $$ if (linePart.length() > (x + 1)) [ FD ]
Line_5 $$ linePart = formatIncorrectSyntax(linePart, "else-->Line_54 $$ int pos = linePart.indexOf(") ")[ FD ]
