Line_20 $$ String prevUriPart = null-->Line_25 $$ if (!prevUriPart.equals(StringPool.PERIOD)) [ FD ]
Line_35 $$ StringBundler sb = new StringBundler(parts.size() * 2 + 2)-->Line_41 $$ sb.append(StringPool.QUESTION)[ FD ]
Line_8 $$ String queryString = null-->Line_40 $$ if (Validator.isNotNull(queryString)) [ FD ]
Line_7 $$ String path = null-->Line_11 $$ path = uri.substring(0, pos)[ FD ]
Line_10 $$ if (pos != -1) -->Line_14 $$ path = uri[ CD ]
Line_35 $$ StringBundler sb = new StringBundler(parts.size() * 2 + 2)-->Line_44 $$ return sb.toString()[ FD ]
Line_6 $$ uri = removePathParameters(uri)-->Line_14 $$ path = uri[ FD ]
Line_11 $$ path = uri.substring(0, pos)-->Line_16 $$ String[] uriParts = StringUtil.split(path.substring(1), StringPool.SLASH)[ FD ]
Line_22 $$ prevUriPart = URLCodec.decodeURL(uriParts[i - 1])-->Line_25 $$ if (!prevUriPart.equals(StringPool.PERIOD)) [ FD ]
Line_19 $$ String curUriPart = URLCodec.decodeURL(uriParts[i])-->Line_29 $$ parts.add(URLCodec.encodeURL(curUriPart))[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_11 $$ path = uri.substring(0, pos)[ FD ]
Line_40 $$ if (Validator.isNotNull(queryString)) -->Line_41 $$ sb.append(StringPool.QUESTION)[ CD ]
Line_2 $$ public String normalizePath(String uri) -->Line_10 $$ if (pos != -1) [ CD ]
Line_11 $$ path = uri.substring(0, pos)-->Line_14 $$ path = uri[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_8 $$ String queryString = null[ CD ]
Line_18 $$ for (int i = 0; i < uriParts.length; i++) -->Line_24 $$ if (curUriPart.equals(StringPool.DOUBLE_PERIOD)) [ CD ]
Line_17 $$ List<String> parts = new ArrayList(uriParts.length)-->Line_29 $$ parts.add(URLCodec.encodeURL(curUriPart))[ FD ]
Line_17 $$ List<String> parts = new ArrayList(uriParts.length)-->Line_32 $$ if (parts.isEmpty()) [ FD ]
Line_9 $$ int pos = uri.indexOf('?')-->Line_11 $$ path = uri.substring(0, pos)[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_18 $$ for (int i = 0; i < uriParts.length; i++) [ CD ]
Line_21 $$ if (i > 0) -->Line_22 $$ prevUriPart = URLCodec.decodeURL(uriParts[i - 1])[ CD ]
Line_32 $$ if (parts.isEmpty()) -->Line_33 $$ return StringPool.SLASH[ CD ]
Line_6 $$ uri = removePathParameters(uri)-->Line_11 $$ path = uri.substring(0, pos)[ FD ]
Line_7 $$ String path = null-->Line_14 $$ path = uri[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_35 $$ StringBundler sb = new StringBundler(parts.size() * 2 + 2)[ CD ]
Line_12 $$ queryString = uri.substring(pos + 1)-->Line_40 $$ if (Validator.isNotNull(queryString)) [ FD ]
Line_28 $$ if ((curUriPart.length() > 0) && !curUriPart.equals(StringPool.PERIOD)) -->Line_29 $$ parts.add(URLCodec.encodeURL(curUriPart))[ CD ]
Line_25 $$ if (!prevUriPart.equals(StringPool.PERIOD)) -->Line_26 $$ parts.remove(parts.size() - 1)[ CD ]
Line_18 $$ for (int i = 0; i < uriParts.length; i++) -->Line_19 $$ String curUriPart = URLCodec.decodeURL(uriParts[i])[ CD ]
Line_24 $$ if (curUriPart.equals(StringPool.DOUBLE_PERIOD)) -->Line_25 $$ if (!prevUriPart.equals(StringPool.PERIOD)) [ CD ]
Line_24 $$ if (curUriPart.equals(StringPool.DOUBLE_PERIOD)) -->Line_28 $$ if ((curUriPart.length() > 0) && !curUriPart.equals(StringPool.PERIOD)) [ CD ]
Line_2 $$ public String normalizePath(String uri) -->Line_32 $$ if (parts.isEmpty()) [ CD ]
Line_2 $$ public String normalizePath(String uri) -->Line_6 $$ uri = removePathParameters(uri)[ CD ]
Line_10 $$ if (pos != -1) -->Line_12 $$ queryString = uri.substring(pos + 1)[ CD ]
Line_17 $$ List<String> parts = new ArrayList(uriParts.length)-->Line_35 $$ StringBundler sb = new StringBundler(parts.size() * 2 + 2)[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_16 $$ String[] uriParts = StringUtil.split(path.substring(1), StringPool.SLASH)[ CD ]
Line_40 $$ if (Validator.isNotNull(queryString)) -->Line_42 $$ sb.append(queryString)[ CD ]
Line_18 $$ for (int i = 0; i < uriParts.length; i++) -->Line_21 $$ if (i > 0) [ FD ]
Line_20 $$ String prevUriPart = null-->Line_22 $$ prevUriPart = URLCodec.decodeURL(uriParts[i - 1])[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_6 $$ uri = removePathParameters(uri)[ FD ]
Line_8 $$ String queryString = null-->Line_12 $$ queryString = uri.substring(pos + 1)[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_14 $$ path = uri[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_7 $$ String path = null[ CD ]
Line_35 $$ StringBundler sb = new StringBundler(parts.size() * 2 + 2)-->Line_38 $$ sb.append(part)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler(parts.size() * 2 + 2)-->Line_42 $$ sb.append(queryString)[ FD ]
Line_17 $$ List<String> parts = new ArrayList(uriParts.length)-->Line_26 $$ parts.remove(parts.size() - 1)[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_9 $$ int pos = uri.indexOf('?')[ CD ]
Line_10 $$ if (pos != -1) -->Line_11 $$ path = uri.substring(0, pos)[ CD ]
Line_19 $$ String curUriPart = URLCodec.decodeURL(uriParts[i])-->Line_28 $$ if ((curUriPart.length() > 0) && !curUriPart.equals(StringPool.PERIOD)) [ FD ]
Line_8 $$ String queryString = null-->Line_42 $$ sb.append(queryString)[ FD ]
Line_36 $$ for (String part : parts) -->Line_38 $$ sb.append(part)[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_40 $$ if (Validator.isNotNull(queryString)) [ CD ]
Line_18 $$ for (int i = 0; i < uriParts.length; i++) -->Line_21 $$ if (i > 0) [ CD ]
Line_2 $$ public String normalizePath(String uri) -->Line_12 $$ queryString = uri.substring(pos + 1)[ FD ]
Line_12 $$ queryString = uri.substring(pos + 1)-->Line_42 $$ sb.append(queryString)[ FD ]
Line_18 $$ for (int i = 0; i < uriParts.length; i++) -->Line_20 $$ String prevUriPart = null[ CD ]
Line_19 $$ String curUriPart = URLCodec.decodeURL(uriParts[i])-->Line_24 $$ if (curUriPart.equals(StringPool.DOUBLE_PERIOD)) [ FD ]
Line_6 $$ uri = removePathParameters(uri)-->Line_9 $$ int pos = uri.indexOf('?')[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_44 $$ return sb.toString()[ CD ]
Line_2 $$ public String normalizePath(String uri) -->Line_9 $$ int pos = uri.indexOf('?')[ FD ]
Line_3 $$ if (Validator.isNull(uri)) -->Line_4 $$ return uri[ CD ]
Line_7 $$ String path = null-->Line_16 $$ String[] uriParts = StringUtil.split(path.substring(1), StringPool.SLASH)[ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_3 $$ if (Validator.isNull(uri)) [ FD ]
Line_2 $$ public String normalizePath(String uri) -->Line_17 $$ List<String> parts = new ArrayList(uriParts.length)[ CD ]
Line_2 $$ public String normalizePath(String uri) -->Line_3 $$ if (Validator.isNull(uri)) [ CD ]
Line_35 $$ StringBundler sb = new StringBundler(parts.size() * 2 + 2)-->Line_37 $$ sb.append(StringPool.SLASH)[ FD ]
Line_6 $$ uri = removePathParameters(uri)-->Line_12 $$ queryString = uri.substring(pos + 1)[ FD ]
Line_9 $$ int pos = uri.indexOf('?')-->Line_10 $$ if (pos != -1) [ FD ]
Line_14 $$ path = uri-->Line_16 $$ String[] uriParts = StringUtil.split(path.substring(1), StringPool.SLASH)[ FD ]
