Line_7 $$ final String state = revision.getState()-->Line_23 $$ final ContentRevision afterRevision = (!added && DEAD_STATE.equals(state)) ? null : new CvsContentRevision(new File(wrapper.getFile()), localFile, new SimpleRevision(revision.getNumber()), myEnvironment, myProject)[ FD ]
Line_5 $$ for (RevisionWrapper wrapper : myRevisions) -->Line_23 $$ final ContentRevision afterRevision = (!added && DEAD_STATE.equals(state)) ? null : new CvsContentRevision(new File(wrapper.getFile()), localFile, new SimpleRevision(revision.getNumber()), myEnvironment, myProject)[ FD ]
Line_2 $$ public Collection<Change> getChanges() -->Line_27 $$ return myChanges[ CD ]
Line_5 $$ for (RevisionWrapper wrapper : myRevisions) -->Line_22 $$ final ContentRevision beforeRevision = added ? null : new CvsContentRevision(new File(wrapper.getFile()), localFile, new SimpleRevision(new CvsRevisionNumber(revision.getNumber()).getPrevNumber().asString()), myEnvironment, myProject)[ FD ]
Line_9 $$ final File localFile-->Line_14 $$ localFile = new File(myRootFile.getPresentableUrl(), path)[ FD ]
Line_11 $$ final String directorySuffix = myRootFile.isDirectory() ? "/" : ""-->Line_13 $$ path = path.substring(myRootPath.length() + directorySuffix.length())[ FD ]
Line_8 $$ String path = wrapper.getFile()-->Line_13 $$ path = path.substring(myRootPath.length() + directorySuffix.length())[ FD ]
Line_5 $$ for (RevisionWrapper wrapper : myRevisions) -->Line_8 $$ String path = wrapper.getFile()[ FD ]
Line_14 $$ localFile = new File(myRootFile.getPresentableUrl(), path)-->Line_19 $$ localFile = new File(wrapper.getFile())[ FD ]
Line_5 $$ for (RevisionWrapper wrapper : myRevisions) -->Line_16 $$ localFile = new File(wrapper.getFile())[ FD ]
Line_12 $$ if (StringUtil.startsWithConcatenation(path, myRootPath, directorySuffix)) -->Line_13 $$ path = path.substring(myRootPath.length() + directorySuffix.length())[ CD ]
Line_6 $$ final Revision revision = wrapper.getRevision()-->Line_22 $$ final ContentRevision beforeRevision = added ? null : new CvsContentRevision(new File(wrapper.getFile()), localFile, new SimpleRevision(new CvsRevisionNumber(revision.getNumber()).getPrevNumber().asString()), myEnvironment, myProject)[ FD ]
Line_12 $$ if (StringUtil.startsWithConcatenation(path, myRootPath, directorySuffix)) -->Line_16 $$ localFile = new File(wrapper.getFile())[ CD ]
Line_12 $$ if (StringUtil.startsWithConcatenation(path, myRootPath, directorySuffix)) -->Line_14 $$ localFile = new File(myRootFile.getPresentableUrl(), path)[ CD ]
Line_14 $$ localFile = new File(myRootFile.getPresentableUrl(), path)-->Line_16 $$ localFile = new File(wrapper.getFile())[ FD ]
Line_10 $$ if (myRootFile != null) -->Line_19 $$ localFile = new File(wrapper.getFile())[ CD ]
Line_6 $$ final Revision revision = wrapper.getRevision()-->Line_7 $$ final String state = revision.getState()[ FD ]
Line_10 $$ if (myRootFile != null) -->Line_11 $$ final String directorySuffix = myRootFile.isDirectory() ? "/" : ""[ CD ]
Line_21 $$ final boolean added = isAdded(revision)-->Line_23 $$ final ContentRevision afterRevision = (!added && DEAD_STATE.equals(state)) ? null : new CvsContentRevision(new File(wrapper.getFile()), localFile, new SimpleRevision(revision.getNumber()), myEnvironment, myProject)[ FD ]
Line_5 $$ for (RevisionWrapper wrapper : myRevisions) -->Line_19 $$ localFile = new File(wrapper.getFile())[ FD ]
Line_2 $$ public Collection<Change> getChanges() -->Line_3 $$ if (myChanges == null) [ CD ]
Line_6 $$ final Revision revision = wrapper.getRevision()-->Line_23 $$ final ContentRevision afterRevision = (!added && DEAD_STATE.equals(state)) ? null : new CvsContentRevision(new File(wrapper.getFile()), localFile, new SimpleRevision(revision.getNumber()), myEnvironment, myProject)[ FD ]
Line_11 $$ final String directorySuffix = myRootFile.isDirectory() ? "/" : ""-->Line_12 $$ if (StringUtil.startsWithConcatenation(path, myRootPath, directorySuffix)) [ FD ]
Line_10 $$ if (myRootFile != null) -->Line_12 $$ if (StringUtil.startsWithConcatenation(path, myRootPath, directorySuffix)) [ CD ]
Line_6 $$ final Revision revision = wrapper.getRevision()-->Line_21 $$ final boolean added = isAdded(revision)[ FD ]
Line_9 $$ final File localFile-->Line_19 $$ localFile = new File(wrapper.getFile())[ FD ]
Line_5 $$ for (RevisionWrapper wrapper : myRevisions) -->Line_6 $$ final Revision revision = wrapper.getRevision()[ FD ]
Line_8 $$ String path = wrapper.getFile()-->Line_12 $$ if (StringUtil.startsWithConcatenation(path, myRootPath, directorySuffix)) [ FD ]
Line_16 $$ localFile = new File(wrapper.getFile())-->Line_19 $$ localFile = new File(wrapper.getFile())[ FD ]
Line_9 $$ final File localFile-->Line_16 $$ localFile = new File(wrapper.getFile())[ FD ]
