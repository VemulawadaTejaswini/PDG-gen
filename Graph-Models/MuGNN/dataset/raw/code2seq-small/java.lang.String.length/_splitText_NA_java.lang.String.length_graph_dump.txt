Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_4 $$ if (displayOffset == 0)[ CD ]
Line_20 $$ PsiElement childElement = findElementAt(physicalOffset)-->Line_41 $$ myRight.rawAddChildren((TreeElement) childElement.getNextSibling())[ FD ]
Line_34 $$ LeafElement rightElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(rightText))-->Line_35 $$ CodeEditUtil.setNodeGenerated(rightElement, true)[ FD ]
Line_3 $$ final XmlTag xmlTag = (XmlTag) getParent()-->Line_10 $$ final PomModel model = PomManager.getModel(xmlTag.getProject())[ FD ]
Line_22 $$ FileElement holder = DummyHolderFactory.createHolder(getManager(), null).getTreeElement()-->Line_34 $$ LeafElement rightElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(rightText))[ FD ]
Line_20 $$ PsiElement childElement = findElementAt(physicalOffset)-->Line_23 $$ int splitOffset = physicalOffset - childElement.getStartOffsetInParent()[ FD ]
Line_20 $$ PsiElement childElement = findElementAt(physicalOffset)-->Line_40 $$ if (childElement.getNextSibling() != null) [ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_37 $$ CodeEditUtil.setNodeGenerated(leftElement, true)[ CD ]
Line_12 $$ class MyTransaction extends PomTransactionBase -->Line_18 $$ final String oldText = getValue()[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_25 $$ CodeEditUtil.setNodeGenerated(myRight, true)[ CD ]
Line_23 $$ int splitOffset = physicalOffset - childElement.getStartOffsetInParent()-->Line_32 $$ String leftText = childElement.getText().substring(0, splitOffset)[ FD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_54 $$ rightText.setValue(value.substring(displayOffset))[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_49 $$ CodeEditUtil.setNodeGenerated(rightText, true)[ CD ]
Line_3 $$ final XmlTag xmlTag = (XmlTag) getParent()-->Line_46 $$ final PsiFile containingFile = xmlTag.getContainingFile()[ FD ]
Line_33 $$ String rightText = childElement.getText().substring(splitOffset)-->Line_55 $$ CodeEditUtil.setNodeGenerated(rightText, true)[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_55 $$ CodeEditUtil.setNodeGenerated(rightText, true)[ CD ]
Line_4 $$ if (displayOffset == 0)-->Line_5 $$ return this[ CD ]
Line_12 $$ class MyTransaction extends PomTransactionBase -->Line_58 $$ clearCaches()[ CD ]
Line_12 $$ class MyTransaction extends PomTransactionBase -->Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) [ CD ]
Line_32 $$ String leftText = childElement.getText().substring(0, splitOffset)-->Line_36 $$ LeafElement leftElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(leftText))[ FD ]
Line_52 $$ final String value = getValue()-->Line_54 $$ rightText.setValue(value.substring(displayOffset))[ FD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_10 $$ final PomModel model = PomManager.getModel(xmlTag.getProject())[ CD ]
Line_12 $$ class MyTransaction extends PomTransactionBase -->Line_59 $$ myRight.clearCaches()[ CD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_4 $$ if (displayOffset == 0)[ FD ]
Line_28 $$ while (e != null) -->Line_30 $$ e = e.getNextSibling()[ CD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_67 $$ model.runTransaction(transaction)[ CD ]
Line_34 $$ LeafElement rightElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(rightText))-->Line_39 $$ myRight.rawAddChildren(rightElement)[ FD ]
Line_27 $$ PsiElement e = childElement-->Line_30 $$ e = e.getNextSibling()[ FD ]
Line_22 $$ FileElement holder = DummyHolderFactory.createHolder(getManager(), null).getTreeElement()-->Line_36 $$ LeafElement leftElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(leftText))[ FD ]
Line_33 $$ String rightText = childElement.getText().substring(splitOffset)-->Line_34 $$ LeafElement rightElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(rightText))[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_22 $$ FileElement holder = DummyHolderFactory.createHolder(getManager(), null).getTreeElement()[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_33 $$ String rightText = childElement.getText().substring(splitOffset)[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_38 $$ rawInsertAfterMe(myRight)[ CD ]
Line_33 $$ String rightText = childElement.getText().substring(splitOffset)-->Line_50 $$ holder.rawAddChildren(rightText)[ FD ]
Line_52 $$ final String value = getValue()-->Line_53 $$ setValue(value.substring(0, displayOffset))[ FD ]
Line_27 $$ PsiElement e = childElement-->Line_29 $$ CodeEditUtil.setNodeGenerated(e.getNode(), true)[ FD ]
Line_33 $$ String rightText = childElement.getText().substring(splitOffset)-->Line_54 $$ rightText.setValue(value.substring(displayOffset))[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_35 $$ CodeEditUtil.setNodeGenerated(rightElement, true)[ CD ]
Line_30 $$ e = e.getNextSibling()-->Line_28 $$ while (e != null) [ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_51 $$ ((ASTNode) xmlTag).addChild(rightText, getTreeNext())[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_44 $$ XmlTextImpl.this.rawAddChildren(leftElement)[ CD ]
Line_36 $$ LeafElement leftElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(leftText))-->Line_37 $$ CodeEditUtil.setNodeGenerated(leftElement, true)[ FD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_11 $$ final XmlAspect aspect = model.getModelAspect(XmlAspect.class)[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_40 $$ if (childElement.getNextSibling() != null) [ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_32 $$ String leftText = childElement.getText().substring(0, splitOffset)[ CD ]
Line_10 $$ final PomModel model = PomManager.getModel(xmlTag.getProject())-->Line_11 $$ final XmlAspect aspect = model.getModelAspect(XmlAspect.class)[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_50 $$ holder.rawAddChildren(rightText)[ CD ]
Line_23 $$ int splitOffset = physicalOffset - childElement.getStartOffsetInParent()-->Line_33 $$ String rightText = childElement.getText().substring(splitOffset)[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_52 $$ final String value = getValue()[ CD ]
Line_19 $$ final int physicalOffset = displayToPhysical(displayOffset)-->Line_20 $$ PsiElement childElement = findElementAt(physicalOffset)[ FD ]
Line_10 $$ final PomModel model = PomManager.getModel(xmlTag.getProject())-->Line_67 $$ model.runTransaction(transaction)[ FD ]
Line_22 $$ FileElement holder = DummyHolderFactory.createHolder(getManager(), null).getTreeElement()-->Line_50 $$ holder.rawAddChildren(rightText)[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_46 $$ final PsiFile containingFile = xmlTag.getContainingFile()[ CD ]
Line_27 $$ PsiElement e = childElement-->Line_28 $$ while (e != null) [ FD ]
Line_20 $$ PsiElement childElement = findElementAt(physicalOffset)-->Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) [ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_36 $$ LeafElement leftElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(leftText))[ CD ]
Line_46 $$ final PsiFile containingFile = xmlTag.getContainingFile()-->Line_47 $$ final FileElement holder = DummyHolderFactory.createHolder(containingFile.getManager(), null, ((PsiFileImpl) containingFile).getTreeElement().getCharTable()).getTreeElement()[ FD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_3 $$ final XmlTag xmlTag = (XmlTag) getParent()[ CD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_53 $$ setValue(value.substring(0, displayOffset))[ FD ]
Line_6 $$ final int length = getValue().length()-->Line_7 $$ if (displayOffset >= length) [ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_27 $$ PsiElement e = childElement[ CD ]
Line_12 $$ class MyTransaction extends PomTransactionBase -->Line_20 $$ PsiElement childElement = findElementAt(physicalOffset)[ CD ]
Line_12 $$ class MyTransaction extends PomTransactionBase -->Line_63 $$ return myRight[ CD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_7 $$ if (displayOffset >= length) [ CD ]
Line_30 $$ e = e.getNextSibling()-->Line_29 $$ CodeEditUtil.setNodeGenerated(e.getNode(), true)[ FD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_7 $$ if (displayOffset >= length) [ FD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_19 $$ final int physicalOffset = displayToPhysical(displayOffset)[ FD ]
Line_7 $$ if (displayOffset >= length) -->Line_8 $$ return null[ CD ]
Line_28 $$ while (e != null) -->Line_29 $$ CodeEditUtil.setNodeGenerated(e.getNode(), true)[ CD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_6 $$ final int length = getValue().length()[ CD ]
Line_33 $$ String rightText = childElement.getText().substring(splitOffset)-->Line_51 $$ ((ASTNode) xmlTag).addChild(rightText, getTreeNext())[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_26 $$ holder.rawAddChildren(myRight)[ CD ]
Line_12 $$ class MyTransaction extends PomTransactionBase -->Line_19 $$ final int physicalOffset = displayToPhysical(displayOffset)[ CD ]
Line_33 $$ String rightText = childElement.getText().substring(splitOffset)-->Line_49 $$ CodeEditUtil.setNodeGenerated(rightText, true)[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_28 $$ while (e != null) [ CD ]
Line_36 $$ LeafElement leftElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(leftText))-->Line_44 $$ XmlTextImpl.this.rawAddChildren(leftElement)[ FD ]
Line_20 $$ PsiElement childElement = findElementAt(physicalOffset)-->Line_32 $$ String leftText = childElement.getText().substring(0, splitOffset)[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_43 $$ ((TreeElement) childElement).rawRemove()[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_53 $$ setValue(value.substring(0, displayOffset))[ CD ]
Line_12 $$ class MyTransaction extends PomTransactionBase -->Line_60 $$ return createEvent(new XmlTextChangedImpl(XmlTextImpl.this, oldText), new XmlTagChildAddImpl(xmlTag, myRight))[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_47 $$ final FileElement holder = DummyHolderFactory.createHolder(containingFile.getManager(), null, ((PsiFileImpl) containingFile).getTreeElement().getCharTable()).getTreeElement()[ CD ]
Line_22 $$ FileElement holder = DummyHolderFactory.createHolder(getManager(), null).getTreeElement()-->Line_26 $$ holder.rawAddChildren(myRight)[ FD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_23 $$ int splitOffset = physicalOffset - childElement.getStartOffsetInParent()[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_39 $$ myRight.rawAddChildren(rightElement)[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_34 $$ LeafElement rightElement = ASTFactory.leaf(XmlTokenType.XML_DATA_CHARACTERS, holder.getCharTable().intern(rightText))[ CD ]
Line_40 $$ if (childElement.getNextSibling() != null) -->Line_41 $$ myRight.rawAddChildren((TreeElement) childElement.getNextSibling())[ CD ]
Line_20 $$ PsiElement childElement = findElementAt(physicalOffset)-->Line_33 $$ String rightText = childElement.getText().substring(splitOffset)[ FD ]
Line_2 $$ private XmlText _splitText(final int displayOffset) throws IncorrectOperationException -->Line_68 $$ return transaction.getResult()[ CD ]
Line_21 $$ if (childElement != null && childElement.getNode().getElementType() == XmlTokenType.XML_DATA_CHARACTERS) -->Line_54 $$ rightText.setValue(value.substring(displayOffset))[ CD ]
