Line_12 $$ int javaTermType = -1-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static [ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_55 $$ if (insideClass.contains(line) && !isEnumType(line, matcher.group(4))) [ FD ]
Line_44 $$ javaTermStartPosition = javaTermEndPosition-->Line_62 $$ if (javaTermStartPosition != -1) [ FD ]
Line_25 $$ int javaTermEndPosition = 0-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_68 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) -->Line_69 $$ staticBlocks.add(javaTerm)[ CD ]
Line_12 $$ int javaTermType = -1-->Line_45 $$ javaTermType = (Integer) tuple.getObject(1)[ FD ]
Line_46 $$ lastCommentOrAnnotationPos = -1-->Line_49 $$ lastCommentOrAnnotationPos = index[ FD ]
Line_25 $$ int javaTermEndPosition = 0-->Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos[ FD ]
Line_27 $$ javaTermEndPosition = index-->Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos[ FD ]
Line_42 $$ javaTermLineCount = lineCount-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_13 $$ int lastCommentOrAnnotationPos = -1[ CD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_25 $$ int javaTermEndPosition = 0[ CD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ CD ]
Line_52 $$ Matcher matcher = _classPattern.matcher(_content)-->Line_53 $$ if (matcher.find()) [ FD ]
Line_51 $$ if (!line.startsWith(_indent + StringPool.CLOSE_CURLY_BRACE) && !line.startsWith(_indent + StringPool.CLOSE_PARENTHESIS) && !line.startsWith(_indent + "extends") && !line.startsWith(_indent + "implements") && !BaseSourceProcessor.isExcludedFile(_javaTermAccessLevelModifierExclusionFiles, _absolutePath)) -->Line_52 $$ Matcher matcher = _classPattern.matcher(_content)[ CD ]
Line_60 $$ index = index + line.length() + 1-->Line_27 $$ javaTermEndPosition = index[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_60 $$ index = index + line.length() + 1[ FD ]
Line_6 $$ int index = 0-->Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)[ FD ]
Line_31 $$ if ((javaTermStartPosition != -1) && (javaTermEndPosition < _content.length())) -->Line_36 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) [ CD ]
Line_36 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) -->Line_39 $$ javaTerms.add(javaTerm)[ CD ]
Line_62 $$ if (javaTermStartPosition != -1) -->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ CD ]
Line_7 $$ int lineCount = _lineCount - 1-->Line_42 $$ javaTermLineCount = lineCount[ FD ]
Line_26 $$ if (lastCommentOrAnnotationPos == -1) -->Line_27 $$ javaTermEndPosition = index[ CD ]
Line_53 $$ if (matcher.find()) -->Line_55 $$ if (insideClass.contains(line) && !isEnumType(line, matcher.group(4))) [ CD ]
Line_62 $$ if (javaTermStartPosition != -1) -->Line_63 $$ int javaTermEndPosition = _content.lastIndexOf(CharPool.CLOSE_CURLY_BRACE) - _indent.length() + 1[ CD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_15 $$ lineCount++[ CD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_6 $$ int index = 0[ CD ]
Line_4 $$ List<JavaTerm> staticBlocks = new ArrayList()-->Line_69 $$ staticBlocks.add(javaTerm)[ FD ]
Line_49 $$ lastCommentOrAnnotationPos = index-->Line_26 $$ if (lastCommentOrAnnotationPos == -1) [ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_17 $$ index = index + line.length() + 1[ FD ]
Line_26 $$ if (lastCommentOrAnnotationPos == -1) -->Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos[ CD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_9 $$ String javaTermName = null[ CD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_3 $$ Set<JavaTerm> javaTerms = new TreeSet(new JavaTermComparator(false))[ CD ]
Line_48 $$ if (lastCommentOrAnnotationPos == -1) -->Line_49 $$ lastCommentOrAnnotationPos = index[ CD ]
Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)-->Line_22 $$ if (tuple == null) [ FD ]
Line_62 $$ if (javaTermStartPosition != -1) -->Line_68 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) [ CD ]
Line_43 $$ javaTermName = (String) tuple.getObject(0)-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_10 $$ int javaTermLineCount = -1-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_26 $$ if (lastCommentOrAnnotationPos == -1) [ CD ]
Line_47 $$ if (hasAnnotationCommentOrJavadoc(line)) -->Line_48 $$ if (lastCommentOrAnnotationPos == -1) [ CD ]
Line_22 $$ if (tuple == null) -->Line_23 $$ return null[ CD ]
Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_69 $$ staticBlocks.add(javaTerm)[ FD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_8 $$ String line = null[ CD ]
Line_4 $$ List<JavaTerm> staticBlocks = new ArrayList()-->Line_74 $$ return addStaticBlocks(javaTerms, staticBlocks)[ FD ]
Line_27 $$ javaTermEndPosition = index-->Line_44 $$ javaTermStartPosition = javaTermEndPosition[ FD ]
Line_11 $$ int javaTermStartPosition = -1-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_31 $$ if ((javaTermStartPosition != -1) && (javaTermEndPosition < _content.length())) -->Line_33 $$ if (javaTerm == null) [ CD ]
Line_8 $$ String line = null-->Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)[ FD ]
Line_60 $$ index = index + line.length() + 1-->Line_49 $$ lastCommentOrAnnotationPos = index[ FD ]
Line_53 $$ if (matcher.find()) -->Line_54 $$ String insideClass = _content.substring(matcher.end())[ CD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_7 $$ int lineCount = _lineCount - 1[ CD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static [ CD ]
Line_11 $$ int javaTermStartPosition = -1-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_52 $$ Matcher matcher = _classPattern.matcher(_content)-->Line_55 $$ if (insideClass.contains(line) && !isEnumType(line, matcher.group(4))) [ FD ]
Line_13 $$ int lastCommentOrAnnotationPos = -1-->Line_26 $$ if (lastCommentOrAnnotationPos == -1) [ FD ]
Line_8 $$ String line = null-->Line_55 $$ if (insideClass.contains(line) && !isEnumType(line, matcher.group(4))) [ FD ]
Line_9 $$ String javaTermName = null-->Line_43 $$ javaTermName = (String) tuple.getObject(0)[ FD ]
Line_8 $$ String line = null-->Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_55 $$ if (insideClass.contains(line) && !isEnumType(line, matcher.group(4))) -->Line_56 $$ _javaSourceProcessor.processErrorMessage(_fileName, "Missing access level modifier: " + _fileName + " " + lineCount)[ CD ]
Line_8 $$ String line = null-->Line_16 $$ if (JavaSourceProcessor.getLeadingTabCount(line) != _indent.length()) [ FD ]
Line_8 $$ String line = null-->Line_17 $$ index = index + line.length() + 1[ FD ]
Line_17 $$ index = index + line.length() + 1-->Line_49 $$ lastCommentOrAnnotationPos = index[ FD ]
Line_13 $$ int lastCommentOrAnnotationPos = -1-->Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos[ FD ]
Line_8 $$ String line = null-->Line_47 $$ if (hasAnnotationCommentOrJavadoc(line)) [ FD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_47 $$ if (hasAnnotationCommentOrJavadoc(line)) [ CD ]
Line_31 $$ if ((javaTermStartPosition != -1) && (javaTermEndPosition < _content.length())) -->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ CD ]
Line_51 $$ if (!line.startsWith(_indent + StringPool.CLOSE_CURLY_BRACE) && !line.startsWith(_indent + StringPool.CLOSE_PARENTHESIS) && !line.startsWith(_indent + "extends") && !line.startsWith(_indent + "implements") && !BaseSourceProcessor.isExcludedFile(_javaTermAccessLevelModifierExclusionFiles, _absolutePath)) -->Line_53 $$ if (matcher.find()) [ CD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_16 $$ if (JavaSourceProcessor.getLeadingTabCount(line) != _indent.length()) [ FD ]
Line_6 $$ int index = 0-->Line_49 $$ lastCommentOrAnnotationPos = index[ FD ]
Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_39 $$ javaTerms.add(javaTerm)[ FD ]
Line_8 $$ String line = null-->Line_51 $$ if (!line.startsWith(_indent + StringPool.CLOSE_CURLY_BRACE) && !line.startsWith(_indent + StringPool.CLOSE_PARENTHESIS) && !line.startsWith(_indent + "extends") && !line.startsWith(_indent + "implements") && !BaseSourceProcessor.isExcludedFile(_javaTermAccessLevelModifierExclusionFiles, _absolutePath)) [ FD ]
Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)-->Line_45 $$ javaTermType = (Integer) tuple.getObject(1)[ FD ]
Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos-->Line_44 $$ javaTermStartPosition = javaTermEndPosition[ FD ]
Line_17 $$ index = index + line.length() + 1-->Line_60 $$ index = index + line.length() + 1[ FD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_74 $$ return addStaticBlocks(javaTerms, staticBlocks)[ CD ]
Line_16 $$ if (JavaSourceProcessor.getLeadingTabCount(line) != _indent.length()) -->Line_17 $$ index = index + line.length() + 1[ CD ]
Line_7 $$ int lineCount = _lineCount - 1-->Line_15 $$ lineCount++[ FD ]
Line_12 $$ int javaTermType = -1-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_51 $$ if (!line.startsWith(_indent + StringPool.CLOSE_CURLY_BRACE) && !line.startsWith(_indent + StringPool.CLOSE_PARENTHESIS) && !line.startsWith(_indent + "extends") && !line.startsWith(_indent + "implements") && !BaseSourceProcessor.isExcludedFile(_javaTermAccessLevelModifierExclusionFiles, _absolutePath)) [ FD ]
Line_6 $$ int index = 0-->Line_27 $$ javaTermEndPosition = index[ FD ]
Line_10 $$ int javaTermLineCount = -1-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_36 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) -->Line_37 $$ staticBlocks.add(javaTerm)[ CD ]
Line_46 $$ lastCommentOrAnnotationPos = -1-->Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos[ FD ]
Line_49 $$ lastCommentOrAnnotationPos = index-->Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos[ FD ]
Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_65 $$ if (javaTerm == null) [ FD ]
Line_45 $$ javaTermType = (Integer) tuple.getObject(1)-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)[ CD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_46 $$ lastCommentOrAnnotationPos = -1[ CD ]
Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_33 $$ if (javaTerm == null) [ FD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_45 $$ javaTermType = (Integer) tuple.getObject(1)[ CD ]
Line_13 $$ int lastCommentOrAnnotationPos = -1-->Line_48 $$ if (lastCommentOrAnnotationPos == -1) [ FD ]
Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_69 $$ staticBlocks.add(javaTerm)[ FD ]
Line_6 $$ int index = 0-->Line_17 $$ index = index + line.length() + 1[ FD ]
Line_46 $$ lastCommentOrAnnotationPos = -1-->Line_48 $$ if (lastCommentOrAnnotationPos == -1) [ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)[ FD ]
Line_44 $$ javaTermStartPosition = javaTermEndPosition-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_62 $$ if (javaTermStartPosition != -1) -->Line_65 $$ if (javaTerm == null) [ CD ]
Line_6 $$ int index = 0-->Line_60 $$ index = index + line.length() + 1[ FD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_62 $$ if (javaTermStartPosition != -1) [ CD ]
Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)-->Line_43 $$ javaTermName = (String) tuple.getObject(0)[ FD ]
Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_65 $$ if (javaTerm == null) [ FD ]
Line_68 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) -->Line_71 $$ javaTerms.add(javaTerm)[ CD ]
Line_11 $$ int javaTermStartPosition = -1-->Line_44 $$ javaTermStartPosition = javaTermEndPosition[ FD ]
Line_25 $$ int javaTermEndPosition = 0-->Line_27 $$ javaTermEndPosition = index[ FD ]
Line_25 $$ int javaTermEndPosition = 0-->Line_44 $$ javaTermStartPosition = javaTermEndPosition[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_16 $$ if (JavaSourceProcessor.getLeadingTabCount(line) != _indent.length()) [ CD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_5 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new UnsyncStringReader(_content))[ CD ]
Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_37 $$ staticBlocks.add(javaTerm)[ FD ]
Line_9 $$ String javaTermName = null-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_17 $$ index = index + line.length() + 1-->Line_27 $$ javaTermEndPosition = index[ FD ]
Line_8 $$ String line = null-->Line_60 $$ index = index + line.length() + 1[ FD ]
Line_45 $$ javaTermType = (Integer) tuple.getObject(1)-->Line_68 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) [ FD ]
Line_27 $$ javaTermEndPosition = index-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_52 $$ Matcher matcher = _classPattern.matcher(_content)-->Line_54 $$ String insideClass = _content.substring(matcher.end())[ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_47 $$ if (hasAnnotationCommentOrJavadoc(line)) [ FD ]
Line_12 $$ int javaTermType = -1-->Line_36 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) [ FD ]
Line_33 $$ if (javaTerm == null) -->Line_34 $$ return null[ CD ]
Line_43 $$ javaTermName = (String) tuple.getObject(0)-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_13 $$ int lastCommentOrAnnotationPos = -1-->Line_49 $$ lastCommentOrAnnotationPos = index[ FD ]
Line_9 $$ String javaTermName = null-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_5 $$ UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new UnsyncStringReader(_content))-->Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) [ FD ]
Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_71 $$ javaTerms.add(javaTerm)[ FD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_10 $$ int javaTermLineCount = -1[ CD ]
Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)-->Line_71 $$ javaTerms.add(javaTerm)[ FD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_44 $$ javaTermStartPosition = javaTermEndPosition[ CD ]
Line_17 $$ index = index + line.length() + 1-->Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)[ FD ]
Line_10 $$ int javaTermLineCount = -1-->Line_42 $$ javaTermLineCount = lineCount[ FD ]
Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_45 $$ javaTermType = (Integer) tuple.getObject(1)-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_25 $$ int javaTermEndPosition = 0-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_3 $$ Set<JavaTerm> javaTerms = new TreeSet(new JavaTermComparator(false))-->Line_74 $$ return addStaticBlocks(javaTerms, staticBlocks)[ FD ]
Line_49 $$ lastCommentOrAnnotationPos = index-->Line_48 $$ if (lastCommentOrAnnotationPos == -1) [ FD ]
Line_54 $$ String insideClass = _content.substring(matcher.end())-->Line_55 $$ if (insideClass.contains(line) && !isEnumType(line, matcher.group(4))) [ FD ]
Line_14 $$ while ((line = unsyncBufferedReader.readLine()) != null) -->Line_60 $$ index = index + line.length() + 1[ CD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_4 $$ List<JavaTerm> staticBlocks = new ArrayList()[ CD ]
Line_46 $$ lastCommentOrAnnotationPos = -1-->Line_26 $$ if (lastCommentOrAnnotationPos == -1) [ FD ]
Line_13 $$ int lastCommentOrAnnotationPos = -1-->Line_46 $$ lastCommentOrAnnotationPos = -1[ FD ]
Line_27 $$ javaTermEndPosition = index-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_11 $$ int javaTermStartPosition = -1[ CD ]
Line_65 $$ if (javaTerm == null) -->Line_66 $$ return null[ CD ]
Line_3 $$ Set<JavaTerm> javaTerms = new TreeSet(new JavaTermComparator(false))-->Line_71 $$ javaTerms.add(javaTerm)[ FD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_42 $$ javaTermLineCount = lineCount[ CD ]
Line_8 $$ String line = null-->Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static [ FD ]
Line_63 $$ int javaTermEndPosition = _content.lastIndexOf(CharPool.CLOSE_CURLY_BRACE) - _indent.length() + 1-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_12 $$ int javaTermType = -1-->Line_68 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) [ FD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_22 $$ if (tuple == null) [ CD ]
Line_29 $$ javaTermEndPosition = lastCommentOrAnnotationPos-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_60 $$ index = index + line.length() + 1-->Line_21 $$ Tuple tuple = getJavaTermTuple(line, _content, index)[ FD ]
Line_45 $$ javaTermType = (Integer) tuple.getObject(1)-->Line_36 $$ if (javaTermType == JavaTerm.TYPE_STATIC_BLOCK) [ FD ]
Line_11 $$ int javaTermStartPosition = -1-->Line_62 $$ if (javaTermStartPosition != -1) [ FD ]
Line_47 $$ if (hasAnnotationCommentOrJavadoc(line)) -->Line_51 $$ if (!line.startsWith(_indent + StringPool.CLOSE_CURLY_BRACE) && !line.startsWith(_indent + StringPool.CLOSE_PARENTHESIS) && !line.startsWith(_indent + "extends") && !line.startsWith(_indent + "implements") && !BaseSourceProcessor.isExcludedFile(_javaTermAccessLevelModifierExclusionFiles, _absolutePath)) [ CD ]
Line_44 $$ javaTermStartPosition = javaTermEndPosition-->Line_64 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_42 $$ javaTermLineCount = lineCount-->Line_32 $$ JavaTerm javaTerm = getJavaTerm(javaTermName, javaTermType, javaTermLineCount, javaTermStartPosition, javaTermEndPosition)[ FD ]
Line_3 $$ Set<JavaTerm> javaTerms = new TreeSet(new JavaTermComparator(false))-->Line_39 $$ javaTerms.add(javaTerm)[ FD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_31 $$ if ((javaTermStartPosition != -1) && (javaTermEndPosition < _content.length())) [ CD ]
Line_20 $$ if (line.startsWith(_indent + "private ") || line.equals(_indent + "private") || line.startsWith(_indent + "protected ") || line.equals(_indent + "protected") || line.startsWith(_indent + "public ") || line.equals(_indent + "public") || line.equals(_indent + "static -->Line_43 $$ javaTermName = (String) tuple.getObject(0)[ CD ]
Line_4 $$ List<JavaTerm> staticBlocks = new ArrayList()-->Line_37 $$ staticBlocks.add(javaTerm)[ FD ]
Line_2 $$ protected Set<JavaTerm> getJavaTerms() throws Exception -->Line_12 $$ int javaTermType = -1[ CD ]
