Line_2 $$ public void testDeleteAny() throws Exception -->Line_11 $$ assertTrue("Has CR", whitespace.contains("\n"))[ CD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_9 $$ assertTrue("Result is unchanged", mismatch.equals(inString))[ CD ]
Line_14 $$ String cleaned = StringUtils.deleteAny(whitespace, "\n\t ")-->Line_16 $$ assertTrue("Has no tab", !cleaned.contains("\t"))[ FD ]
Line_14 $$ String cleaned = StringUtils.deleteAny(whitespace, "\n\t ")-->Line_15 $$ assertTrue("Has no CR", !cleaned.contains("\n"))[ FD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_4 $$ String res = StringUtils.deleteAny(inString, "I")[ CD ]
Line_14 $$ String cleaned = StringUtils.deleteAny(whitespace, "\n\t ")-->Line_17 $$ assertTrue("Has no sp", !cleaned.contains(" "))[ FD ]
Line_3 $$ String inString = "Able was I ere I saw Elba"-->Line_4 $$ String res = StringUtils.deleteAny(inString, "I")[ FD ]
Line_4 $$ String res = StringUtils.deleteAny(inString, "I")-->Line_6 $$ res = StringUtils.deleteAny(inString, "AeEba!")[ FD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_10 $$ String whitespace = "This is\n\n\n    \t   a messagy string with whitespace\n"[ CD ]
Line_4 $$ String res = StringUtils.deleteAny(inString, "I")-->Line_5 $$ assertTrue("Result has no Is [" + res + "]", res.equals("Able was  ere  saw Elba"))[ FD ]
Line_10 $$ String whitespace = "This is\n\n\n    \t   a messagy string with whitespace\n"-->Line_14 $$ String cleaned = StringUtils.deleteAny(whitespace, "\n\t ")[ FD ]
Line_10 $$ String whitespace = "This is\n\n\n    \t   a messagy string with whitespace\n"-->Line_13 $$ assertTrue("Has  sp", whitespace.contains(" "))[ FD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_18 $$ assertTrue("Still has chars", cleaned.length() > 10)[ CD ]
Line_14 $$ String cleaned = StringUtils.deleteAny(whitespace, "\n\t ")-->Line_18 $$ assertTrue("Still has chars", cleaned.length() > 10)[ FD ]
Line_3 $$ String inString = "Able was I ere I saw Elba"-->Line_6 $$ res = StringUtils.deleteAny(inString, "AeEba!")[ FD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_14 $$ String cleaned = StringUtils.deleteAny(whitespace, "\n\t ")[ CD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_8 $$ String mismatch = StringUtils.deleteAny(inString, "#@$#$^")[ CD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_6 $$ res = StringUtils.deleteAny(inString, "AeEba!")[ CD ]
Line_6 $$ res = StringUtils.deleteAny(inString, "AeEba!")-->Line_7 $$ assertTrue("Result has no Is [" + res + "]", res.equals("l ws I r I sw l"))[ FD ]
Line_8 $$ String mismatch = StringUtils.deleteAny(inString, "#@$#$^")-->Line_9 $$ assertTrue("Result is unchanged", mismatch.equals(inString))[ FD ]
Line_4 $$ String res = StringUtils.deleteAny(inString, "I")-->Line_7 $$ assertTrue("Result has no Is [" + res + "]", res.equals("l ws I r I sw l"))[ FD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_3 $$ String inString = "Able was I ere I saw Elba"[ CD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_5 $$ assertTrue("Result has no Is [" + res + "]", res.equals("Able was  ere  saw Elba"))[ CD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_17 $$ assertTrue("Has no sp", !cleaned.contains(" "))[ CD ]
Line_3 $$ String inString = "Able was I ere I saw Elba"-->Line_8 $$ String mismatch = StringUtils.deleteAny(inString, "#@$#$^")[ FD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_13 $$ assertTrue("Has  sp", whitespace.contains(" "))[ CD ]
Line_10 $$ String whitespace = "This is\n\n\n    \t   a messagy string with whitespace\n"-->Line_12 $$ assertTrue("Has tab", whitespace.contains("\t"))[ FD ]
Line_3 $$ String inString = "Able was I ere I saw Elba"-->Line_9 $$ assertTrue("Result is unchanged", mismatch.equals(inString))[ FD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_16 $$ assertTrue("Has no tab", !cleaned.contains("\t"))[ CD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_7 $$ assertTrue("Result has no Is [" + res + "]", res.equals("l ws I r I sw l"))[ CD ]
Line_10 $$ String whitespace = "This is\n\n\n    \t   a messagy string with whitespace\n"-->Line_11 $$ assertTrue("Has CR", whitespace.contains("\n"))[ FD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_12 $$ assertTrue("Has tab", whitespace.contains("\t"))[ CD ]
Line_2 $$ public void testDeleteAny() throws Exception -->Line_15 $$ assertTrue("Has no CR", !cleaned.contains("\n"))[ CD ]
