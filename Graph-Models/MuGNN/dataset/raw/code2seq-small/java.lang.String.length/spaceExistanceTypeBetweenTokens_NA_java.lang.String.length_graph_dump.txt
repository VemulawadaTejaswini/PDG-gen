Line_14 $$ String text = left.getText()-->Line_21 $$ if (text.length() > 0 && Character.isWhitespace(text.charAt(0))) [ FD ]
Line_19 $$ if (right.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) -->Line_20 $$ String text = right.getText()[ CD ]
Line_15 $$ if (text.length() > 0 && Character.isWhitespace(text.charAt(text.length() - 1))) -->Line_16 $$ return SpaceRequirements.MAY[ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_10 $$ if (left.getElementType() == JavaTokenType.END_OF_LINE_COMMENT) [ FD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_19 $$ if (right.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) [ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_19 $$ if (right.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) [ FD ]
Line_21 $$ if (text.length() > 0 && Character.isWhitespace(text.charAt(0))) -->Line_22 $$ return SpaceRequirements.MAY[ CD ]
Line_8 $$ Lexer lexer = createLexer(level)-->Line_9 $$ SpaceRequirements spaceRequirements = LanguageUtil.canStickTokensTogetherByLexer(left, right, lexer)[ FD ]
Line_13 $$ if (left.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) -->Line_15 $$ if (text.length() > 0 && Character.isWhitespace(text.charAt(text.length() - 1))) [ CD ]
Line_19 $$ if (right.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) -->Line_21 $$ if (text.length() > 0 && Character.isWhitespace(text.charAt(0))) [ CD ]
Line_13 $$ if (left.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) -->Line_14 $$ String text = left.getText()[ CD ]
Line_24 $$ if (right.getElementType() == JavaDocTokenType.DOC_INLINE_TAG_END) -->Line_25 $$ return SpaceRequirements.MAY[ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_7 $$ LanguageLevel level = containingFile instanceof PsiJavaFile ? ((PsiJavaFile) containingFile).getLanguageLevel() : LanguageLevel.HIGHEST[ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_24 $$ if (right.getElementType() == JavaDocTokenType.DOC_INLINE_TAG_END) [ FD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_9 $$ SpaceRequirements spaceRequirements = LanguageUtil.canStickTokensTogetherByLexer(left, right, lexer)[ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_13 $$ if (left.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) [ FD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_14 $$ String text = left.getText()[ FD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_3 $$ if (right.getElementType() == JavaDocTokenType.DOC_TAG_VALUE_SHARP_TOKEN || left.getElementType() == JavaDocTokenType.DOC_TAG_VALUE_SHARP_TOKEN) [ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_13 $$ if (left.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) [ CD ]
Line_10 $$ if (left.getElementType() == JavaTokenType.END_OF_LINE_COMMENT) -->Line_11 $$ return SpaceRequirements.MUST_LINE_BREAK[ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_9 $$ SpaceRequirements spaceRequirements = LanguageUtil.canStickTokensTogetherByLexer(left, right, lexer)[ FD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_20 $$ String text = right.getText()[ FD ]
Line_3 $$ if (right.getElementType() == JavaDocTokenType.DOC_TAG_VALUE_SHARP_TOKEN || left.getElementType() == JavaDocTokenType.DOC_TAG_VALUE_SHARP_TOKEN) -->Line_4 $$ return SpaceRequirements.MUST_NOT[ CD ]
Line_19 $$ if (right.getElementType() == JavaDocTokenType.DOC_COMMENT_DATA) -->Line_24 $$ if (right.getElementType() == JavaDocTokenType.DOC_INLINE_TAG_END) [ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_8 $$ Lexer lexer = createLexer(level)[ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_6 $$ PsiFile containingFile = left.getTreeParent().getPsi().getContainingFile()[ FD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_10 $$ if (left.getElementType() == JavaTokenType.END_OF_LINE_COMMENT) [ CD ]
Line_14 $$ String text = left.getText()-->Line_15 $$ if (text.length() > 0 && Character.isWhitespace(text.charAt(text.length() - 1))) [ FD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_27 $$ return spaceRequirements[ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_6 $$ PsiFile containingFile = left.getTreeParent().getPsi().getContainingFile()[ CD ]
Line_2 $$ public SpaceRequirements spaceExistanceTypeBetweenTokens(ASTNode left, ASTNode right) -->Line_3 $$ if (right.getElementType() == JavaDocTokenType.DOC_TAG_VALUE_SHARP_TOKEN || left.getElementType() == JavaDocTokenType.DOC_TAG_VALUE_SHARP_TOKEN) [ FD ]
Line_7 $$ LanguageLevel level = containingFile instanceof PsiJavaFile ? ((PsiJavaFile) containingFile).getLanguageLevel() : LanguageLevel.HIGHEST-->Line_8 $$ Lexer lexer = createLexer(level)[ FD ]
