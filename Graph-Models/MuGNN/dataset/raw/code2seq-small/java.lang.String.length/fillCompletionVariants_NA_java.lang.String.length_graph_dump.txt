Line_6 $$ TextFieldCompletionProvider field = file.getUserData(TextFieldCompletionProvider.COMPLETING_TEXT_FIELD_KEY)-->Line_20 $$ if (field.isCaseInsensitivity()) [ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_6 $$ TextFieldCompletionProvider field = file.getUserData(TextFieldCompletionProvider.COMPLETING_TEXT_FIELD_KEY)[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_16 $$ activeResult = result.withPrefixMatcher(prefix)[ FD ]
Line_21 $$ activeResult = activeResult.caseInsensitive()-->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_12 $$ int offset = Math.min(text.length(), parameters.getOffset())[ CD ]
Line_18 $$ activeResult = result-->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ FD ]
Line_16 $$ activeResult = result.withPrefixMatcher(prefix)-->Line_24 $$ activeResult.stopHere()[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_11 $$ String text = file.getText()[ CD ]
Line_11 $$ String text = file.getText()-->Line_13 $$ String prefix = field.getPrefix(text.substring(0, offset))[ FD ]
Line_18 $$ activeResult = result-->Line_24 $$ activeResult.stopHere()[ FD ]
Line_6 $$ TextFieldCompletionProvider field = file.getUserData(TextFieldCompletionProvider.COMPLETING_TEXT_FIELD_KEY)-->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ FD ]
Line_15 $$ if (!result.getPrefixMatcher().getPrefix().equals(prefix)) -->Line_18 $$ activeResult = result[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_9 $$ if (!(field instanceof DumbAware) && DumbService.isDumb(file.getProject()))[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_18 $$ activeResult = result[ FD ]
Line_21 $$ activeResult = activeResult.caseInsensitive()-->Line_24 $$ activeResult.stopHere()[ FD ]
Line_13 $$ String prefix = field.getPrefix(text.substring(0, offset))-->Line_16 $$ activeResult = result.withPrefixMatcher(prefix)[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_14 $$ CompletionResultSet activeResult[ CD ]
Line_12 $$ int offset = Math.min(text.length(), parameters.getOffset())-->Line_13 $$ String prefix = field.getPrefix(text.substring(0, offset))[ FD ]
Line_15 $$ if (!result.getPrefixMatcher().getPrefix().equals(prefix)) -->Line_16 $$ activeResult = result.withPrefixMatcher(prefix)[ CD ]
Line_13 $$ String prefix = field.getPrefix(text.substring(0, offset))-->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ FD ]
Line_3 $$ PsiFile file = parameters.getOriginalFile()-->Line_9 $$ if (!(field instanceof DumbAware) && DumbService.isDumb(file.getProject()))[ FD ]
Line_14 $$ CompletionResultSet activeResult-->Line_21 $$ activeResult = activeResult.caseInsensitive()[ FD ]
Line_9 $$ if (!(field instanceof DumbAware) && DumbService.isDumb(file.getProject()))-->Line_10 $$ return[ CD ]
Line_6 $$ TextFieldCompletionProvider field = file.getUserData(TextFieldCompletionProvider.COMPLETING_TEXT_FIELD_KEY)-->Line_7 $$ if (field == null)[ FD ]
Line_16 $$ activeResult = result.withPrefixMatcher(prefix)-->Line_18 $$ activeResult = result[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_20 $$ if (field.isCaseInsensitivity()) [ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ CD ]
Line_3 $$ PsiFile file = parameters.getOriginalFile()-->Line_6 $$ TextFieldCompletionProvider field = file.getUserData(TextFieldCompletionProvider.COMPLETING_TEXT_FIELD_KEY)[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_3 $$ PsiFile file = parameters.getOriginalFile()[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_3 $$ PsiFile file = parameters.getOriginalFile()[ FD ]
Line_18 $$ activeResult = result-->Line_21 $$ activeResult = activeResult.caseInsensitive()[ FD ]
Line_14 $$ CompletionResultSet activeResult-->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ FD ]
Line_16 $$ activeResult = result.withPrefixMatcher(prefix)-->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ FD ]
Line_7 $$ if (field == null)-->Line_8 $$ return[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_7 $$ if (field == null)[ CD ]
Line_12 $$ int offset = Math.min(text.length(), parameters.getOffset())-->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ FD ]
Line_20 $$ if (field.isCaseInsensitivity()) -->Line_21 $$ activeResult = activeResult.caseInsensitive()[ CD ]
Line_11 $$ String text = file.getText()-->Line_12 $$ int offset = Math.min(text.length(), parameters.getOffset())[ FD ]
Line_14 $$ CompletionResultSet activeResult-->Line_24 $$ activeResult.stopHere()[ FD ]
Line_3 $$ PsiFile file = parameters.getOriginalFile()-->Line_11 $$ String text = file.getText()[ FD ]
Line_14 $$ CompletionResultSet activeResult-->Line_16 $$ activeResult = result.withPrefixMatcher(prefix)[ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_15 $$ if (!result.getPrefixMatcher().getPrefix().equals(prefix)) [ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_24 $$ activeResult.stopHere()[ CD ]
Line_11 $$ String text = file.getText()-->Line_23 $$ field.addCompletionVariants(text, offset, prefix, activeResult)[ FD ]
Line_6 $$ TextFieldCompletionProvider field = file.getUserData(TextFieldCompletionProvider.COMPLETING_TEXT_FIELD_KEY)-->Line_13 $$ String prefix = field.getPrefix(text.substring(0, offset))[ FD ]
Line_13 $$ String prefix = field.getPrefix(text.substring(0, offset))-->Line_15 $$ if (!result.getPrefixMatcher().getPrefix().equals(prefix)) [ FD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_12 $$ int offset = Math.min(text.length(), parameters.getOffset())[ FD ]
Line_14 $$ CompletionResultSet activeResult-->Line_18 $$ activeResult = result[ FD ]
Line_16 $$ activeResult = result.withPrefixMatcher(prefix)-->Line_21 $$ activeResult = activeResult.caseInsensitive()[ FD ]
Line_4 $$ if (!(file instanceof PsiPlainTextFile))-->Line_5 $$ return[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_4 $$ if (!(file instanceof PsiPlainTextFile))[ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_15 $$ if (!result.getPrefixMatcher().getPrefix().equals(prefix)) [ CD ]
Line_2 $$ public void fillCompletionVariants(@NotNull CompletionParameters parameters, @NotNull CompletionResultSet result) -->Line_13 $$ String prefix = field.getPrefix(text.substring(0, offset))[ CD ]
