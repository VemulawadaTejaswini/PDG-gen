Line_9 $$ for (int i = 1; i < parts.length; i++) -->Line_10 $$ String parameter = parts[i][ CD ]
Line_11 $$ int eqIndex = parameter.indexOf('=')-->Line_13 $$ String attribute = parameter.substring(0, eqIndex)[ FD ]
Line_8 $$ parameters = new LinkedHashMap<String, String>(parts.length - 1)-->Line_15 $$ parameters.put(attribute, value)[ FD ]
Line_2 $$ private static WebSocketExtension parseExtension(String extension) -->Line_4 $$ String[] parts = StringUtils.tokenizeToStringArray(extension, ";")[ FD ]
Line_10 $$ String parameter = parts[i]-->Line_13 $$ String attribute = parameter.substring(0, eqIndex)[ FD ]
Line_13 $$ String attribute = parameter.substring(0, eqIndex)-->Line_15 $$ parameters.put(attribute, value)[ FD ]
Line_10 $$ String parameter = parts[i]-->Line_11 $$ int eqIndex = parameter.indexOf('=')[ FD ]
Line_6 $$ Map<String, String> parameters = null-->Line_8 $$ parameters = new LinkedHashMap<String, String>(parts.length - 1)[ FD ]
Line_2 $$ private static WebSocketExtension parseExtension(String extension) -->Line_5 $$ String name = parts[0].trim()[ CD ]
Line_14 $$ String value = parameter.substring(eqIndex + 1, parameter.length())-->Line_15 $$ parameters.put(attribute, value)[ FD ]
Line_2 $$ private static WebSocketExtension parseExtension(String extension) -->Line_7 $$ if (parts.length > 1) [ CD ]
Line_9 $$ for (int i = 1; i < parts.length; i++) -->Line_11 $$ int eqIndex = parameter.indexOf('=')[ CD ]
Line_12 $$ if (eqIndex != -1) -->Line_13 $$ String attribute = parameter.substring(0, eqIndex)[ CD ]
Line_7 $$ if (parts.length > 1) -->Line_8 $$ parameters = new LinkedHashMap<String, String>(parts.length - 1)[ CD ]
Line_12 $$ if (eqIndex != -1) -->Line_14 $$ String value = parameter.substring(eqIndex + 1, parameter.length())[ CD ]
Line_12 $$ if (eqIndex != -1) -->Line_15 $$ parameters.put(attribute, value)[ CD ]
Line_2 $$ private static WebSocketExtension parseExtension(String extension) -->Line_19 $$ return new WebSocketExtension(name, parameters)[ CD ]
Line_2 $$ private static WebSocketExtension parseExtension(String extension) -->Line_3 $$ Assert.doesNotContain(extension, ",", "Expected a single extension value: " + extension)[ FD ]
Line_7 $$ if (parts.length > 1) -->Line_9 $$ for (int i = 1; i < parts.length; i++) [ CD ]
Line_2 $$ private static WebSocketExtension parseExtension(String extension) -->Line_6 $$ Map<String, String> parameters = null[ CD ]
Line_6 $$ Map<String, String> parameters = null-->Line_15 $$ parameters.put(attribute, value)[ FD ]
Line_2 $$ private static WebSocketExtension parseExtension(String extension) -->Line_3 $$ Assert.doesNotContain(extension, ",", "Expected a single extension value: " + extension)[ CD ]
Line_9 $$ for (int i = 1; i < parts.length; i++) -->Line_12 $$ if (eqIndex != -1) [ CD ]
Line_10 $$ String parameter = parts[i]-->Line_14 $$ String value = parameter.substring(eqIndex + 1, parameter.length())[ FD ]
Line_11 $$ int eqIndex = parameter.indexOf('=')-->Line_12 $$ if (eqIndex != -1) [ FD ]
Line_2 $$ private static WebSocketExtension parseExtension(String extension) -->Line_4 $$ String[] parts = StringUtils.tokenizeToStringArray(extension, ";")[ CD ]
