Line_8 $$ List<Caret> carets = editor.getCaretModel().getAllCarets()-->Line_9 $$ Caret firstCaret = carets.get(0)[ FD ]
Line_30 $$ int caretSelectionStart = caret.getSelectionStart()-->Line_37 $$ startOffsetToUse = caretSelectionStart[ FD ]
Line_50 $$ MarkupIterator markupIterator = new MarkupIterator(text, new CompositeRangeIterator(schemeToUse, new HighlighterRangeIterator(highlighter, startOffsetToUse, endOffset), new MarkupModelRangeIterator(markupModel, schemeToUse, startOffsetToUse, endOffset)), schemeToUse)-->Line_52 $$ context.iterate(markupIterator, endOffset)[ FD ]
Line_8 $$ List<Caret> carets = editor.getCaretModel().getAllCarets()-->Line_12 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) [ FD ]
Line_10 $$ final int indentSymbolsToStrip-->Line_18 $$ indentSymbolsToStrip = 0[ FD ]
Line_26 $$ Context context = new Context(text, schemeToUse, indentSymbolsToStrip)-->Line_41 $$ context.addCharacter(endOffset + fillStringLength)[ FD ]
Line_37 $$ startOffsetToUse = caretSelectionStart-->Line_47 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_26 $$ Context context = new Context(text, schemeToUse, indentSymbolsToStrip)-->Line_52 $$ context.iterate(markupIterator, endOffset)[ FD ]
Line_27 $$ int endOffset = 0-->Line_47 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_29 $$ for (Caret caret : carets) -->Line_30 $$ int caretSelectionStart = caret.getSelectionStart()[ FD ]
Line_9 $$ Caret firstCaret = carets.get(0)-->Line_13 $$ Pair<Integer, Integer> p = calcIndentSymbolsToStrip(editor.getDocument(), firstCaret.getSelectionStart(), firstCaret.getSelectionEnd())[ FD ]
Line_26 $$ Context context = new Context(text, schemeToUse, indentSymbolsToStrip)-->Line_44 $$ context.reset(endOffset - caretSelectionStart + additionalShift)[ FD ]
Line_33 $$ int additionalShift = 0-->Line_42 $$ additionalShift = fillStringLength + 1[ FD ]
Line_12 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_18 $$ indentSymbolsToStrip = 0[ CD ]
Line_9 $$ Caret firstCaret = carets.get(0)-->Line_34 $$ if (caret == firstCaret) [ FD ]
Line_35 $$ startOffsetToUse = firstLineStartOffset-->Line_37 $$ startOffsetToUse = caretSelectionStart[ FD ]
Line_27 $$ int endOffset = 0-->Line_52 $$ context.iterate(markupIterator, endOffset)[ FD ]
Line_21 $$ CharSequence text = editor.getDocument().getCharsSequence()-->Line_24 $$ highlighter.setText(text)[ FD ]
Line_10 $$ final int indentSymbolsToStrip-->Line_15 $$ indentSymbolsToStrip = p.second[ FD ]
Line_12 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_17 $$ firstLineStartOffset = firstCaret.getSelectionStart()[ CD ]
Line_32 $$ int startOffsetToUse-->Line_37 $$ startOffsetToUse = caretSelectionStart[ FD ]
Line_14 $$ firstLineStartOffset = p.first-->Line_35 $$ startOffsetToUse = firstLineStartOffset[ FD ]
Line_15 $$ indentSymbolsToStrip = p.second-->Line_18 $$ indentSymbolsToStrip = 0[ FD ]
Line_32 $$ int startOffsetToUse-->Line_47 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_32 $$ int startOffsetToUse-->Line_35 $$ startOffsetToUse = firstLineStartOffset[ FD ]
Line_18 $$ indentSymbolsToStrip = 0-->Line_20 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_11 $$ final int firstLineStartOffset-->Line_35 $$ startOffsetToUse = firstLineStartOffset[ FD ]
Line_39 $$ String prevCaretSelectedText = prevCaret.getSelectedText()-->Line_40 $$ int fillStringLength = prevCaretSelectedText == null ? 0 : prevCaretSelectedText.length() - (prevCaret.getSelectionEnd() - prevCaret.getSelectionStart())[ FD ]
Line_15 $$ indentSymbolsToStrip = p.second-->Line_20 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_11 $$ final int firstLineStartOffset-->Line_14 $$ firstLineStartOffset = p.first[ FD ]
Line_28 $$ Caret prevCaret = null-->Line_40 $$ int fillStringLength = prevCaretSelectedText == null ? 0 : prevCaretSelectedText.length() - (prevCaret.getSelectionEnd() - prevCaret.getSelectionStart())[ FD ]
Line_29 $$ for (Caret caret : carets) -->Line_46 $$ prevCaret = caret[ FD ]
Line_28 $$ Caret prevCaret = null-->Line_39 $$ String prevCaretSelectedText = prevCaret.getSelectedText()[ FD ]
Line_9 $$ Caret firstCaret = carets.get(0)-->Line_17 $$ firstLineStartOffset = firstCaret.getSelectionStart()[ FD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_3 $$ if (!RichCopySettings.getInstance().isEnabled()) [ CD ]
Line_45 $$ endOffset = caretSelectionEnd-->Line_47 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_34 $$ if (caret == firstCaret) -->Line_35 $$ startOffsetToUse = firstLineStartOffset[ CD ]
Line_34 $$ if (caret == firstCaret) -->Line_39 $$ String prevCaretSelectedText = prevCaret.getSelectedText()[ CD ]
Line_29 $$ for (Caret caret : carets) -->Line_34 $$ if (caret == firstCaret) [ FD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_59 $$ createResult(syntaxInfo, editor)[ FD ]
Line_11 $$ final int firstLineStartOffset-->Line_17 $$ firstLineStartOffset = firstCaret.getSelectionStart()[ FD ]
Line_40 $$ int fillStringLength = prevCaretSelectedText == null ? 0 : prevCaretSelectedText.length() - (prevCaret.getSelectionEnd() - prevCaret.getSelectionStart())-->Line_42 $$ additionalShift = fillStringLength + 1[ FD ]
Line_45 $$ endOffset = caretSelectionEnd-->Line_52 $$ context.iterate(markupIterator, endOffset)[ FD ]
Line_12 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_13 $$ Pair<Integer, Integer> p = calcIndentSymbolsToStrip(editor.getDocument(), firstCaret.getSelectionStart(), firstCaret.getSelectionEnd())[ CD ]
Line_14 $$ firstLineStartOffset = p.first-->Line_17 $$ firstLineStartOffset = firstCaret.getSelectionStart()[ FD ]
Line_23 $$ EditorHighlighter highlighter = HighlighterFactory.createHighlighter(file.getViewProvider().getVirtualFile(), schemeToUse, file.getProject())-->Line_24 $$ highlighter.setText(text)[ FD ]
Line_34 $$ if (caret == firstCaret) -->Line_41 $$ context.addCharacter(endOffset + fillStringLength)[ CD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_13 $$ Pair<Integer, Integer> p = calcIndentSymbolsToStrip(editor.getDocument(), firstCaret.getSelectionStart(), firstCaret.getSelectionEnd())[ FD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_21 $$ CharSequence text = editor.getDocument().getCharsSequence()[ FD ]
Line_14 $$ firstLineStartOffset = p.first-->Line_20 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_12 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_15 $$ indentSymbolsToStrip = p.second[ CD ]
Line_35 $$ startOffsetToUse = firstLineStartOffset-->Line_47 $$ if (endOffset <= startOffsetToUse) [ FD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_23 $$ EditorHighlighter highlighter = HighlighterFactory.createHighlighter(file.getViewProvider().getVirtualFile(), schemeToUse, file.getProject())[ FD ]
Line_17 $$ firstLineStartOffset = firstCaret.getSelectionStart()-->Line_35 $$ startOffsetToUse = firstLineStartOffset[ FD ]
Line_28 $$ Caret prevCaret = null-->Line_46 $$ prevCaret = caret[ FD ]
Line_34 $$ if (caret == firstCaret) -->Line_37 $$ startOffsetToUse = caretSelectionStart[ CD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_64 $$ return Collections.emptyList()[ CD ]
Line_50 $$ MarkupIterator markupIterator = new MarkupIterator(text, new CompositeRangeIterator(schemeToUse, new HighlighterRangeIterator(highlighter, startOffsetToUse, endOffset), new MarkupModelRangeIterator(markupModel, schemeToUse, startOffsetToUse, endOffset)), schemeToUse)-->Line_54 $$ markupIterator.dispose()[ FD ]
Line_57 $$ SyntaxInfo syntaxInfo = context.finish()-->Line_59 $$ createResult(syntaxInfo, editor)[ FD ]
Line_26 $$ Context context = new Context(text, schemeToUse, indentSymbolsToStrip)-->Line_57 $$ SyntaxInfo syntaxInfo = context.finish()[ FD ]
Line_10 $$ final int indentSymbolsToStrip-->Line_20 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_7 $$ RichCopySettings settings = RichCopySettings.getInstance()-->Line_22 $$ EditorColorsScheme schemeToUse = settings.getColorsScheme(editor.getColorsScheme())[ FD ]
Line_57 $$ SyntaxInfo syntaxInfo = context.finish()-->Line_58 $$ logSyntaxInfo(syntaxInfo)[ FD ]
Line_34 $$ if (caret == firstCaret) -->Line_42 $$ additionalShift = fillStringLength + 1[ CD ]
Line_17 $$ firstLineStartOffset = firstCaret.getSelectionStart()-->Line_20 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_29 $$ for (Caret caret : carets) -->Line_31 $$ int caretSelectionEnd = caret.getSelectionEnd()[ FD ]
Line_27 $$ int endOffset = 0-->Line_45 $$ endOffset = caretSelectionEnd[ FD ]
Line_31 $$ int caretSelectionEnd = caret.getSelectionEnd()-->Line_45 $$ endOffset = caretSelectionEnd[ FD ]
Line_22 $$ EditorColorsScheme schemeToUse = settings.getColorsScheme(editor.getColorsScheme())-->Line_23 $$ EditorHighlighter highlighter = HighlighterFactory.createHighlighter(file.getViewProvider().getVirtualFile(), schemeToUse, file.getProject())[ FD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_20 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_22 $$ EditorColorsScheme schemeToUse = settings.getColorsScheme(editor.getColorsScheme())[ FD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_8 $$ List<Caret> carets = editor.getCaretModel().getAllCarets()[ FD ]
Line_11 $$ final int firstLineStartOffset-->Line_20 $$ logInitial(editor, startOffsets, endOffsets, indentSymbolsToStrip, firstLineStartOffset)[ FD ]
Line_2 $$ public List<RawTextWithMarkup> collectTransferableData(PsiFile file, Editor editor, int[] startOffsets, int[] endOffsets) -->Line_25 $$ MarkupModel markupModel = DocumentMarkupModel.forDocument(editor.getDocument(), file.getProject(), false)[ FD ]
Line_3 $$ if (!RichCopySettings.getInstance().isEnabled()) -->Line_4 $$ return Collections.emptyList()[ CD ]
Line_34 $$ if (caret == firstCaret) -->Line_40 $$ int fillStringLength = prevCaretSelectedText == null ? 0 : prevCaretSelectedText.length() - (prevCaret.getSelectionEnd() - prevCaret.getSelectionStart())[ CD ]
Line_12 $$ if (Registry.is("editor.richcopy.strip.indents") && carets.size() == 1) -->Line_14 $$ firstLineStartOffset = p.first[ CD ]
