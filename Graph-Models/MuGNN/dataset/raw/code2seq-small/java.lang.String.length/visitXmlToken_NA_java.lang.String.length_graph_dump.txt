Line_29 $$ if (tag != null && XmlExtension.getExtensionByElement(tag).shouldBeHighlightedAsTag(tag) && !skipValidation(tag)) -->Line_34 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(type).range(start, start + marker.length()).descriptionAndTooltip(description).create()[ CD ]
Line_25 $$ int i = s.indexOf(marker)-->Line_26 $$ if (i != -1) [ FD ]
Line_9 $$ if (((XmlToken) element).getTokenType() == XmlTokenType.XML_START_TAG_START) -->Line_10 $$ PsiElement parent = element.getParent()[ CD ]
Line_5 $$ if (tokenType == XmlTokenType.XML_NAME || tokenType == XmlTokenType.XML_TAG_NAME) -->Line_8 $$ if (element instanceof XmlToken) [ CD ]
Line_6 $$ PsiElement element = token.getPrevSibling()-->Line_8 $$ if (element instanceof XmlToken) [ FD ]
Line_5 $$ if (tokenType == XmlTokenType.XML_NAME || tokenType == XmlTokenType.XML_TAG_NAME) -->Line_6 $$ PsiElement element = token.getPrevSibling()[ CD ]
Line_5 $$ if (tokenType == XmlTokenType.XML_NAME || tokenType == XmlTokenType.XML_TAG_NAME) -->Line_21 $$ if (tokenType == XmlTokenType.XML_DATA_CHARACTERS && token.getParent() instanceof XmlText) [ CD ]
Line_7 $$ element = element.getPrevSibling()-->Line_10 $$ PsiElement parent = element.getParent()[ FD ]
Line_22 $$ if (token.textContains(']') && token.textContains('>')) -->Line_23 $$ String s = token.getText()[ CD ]
Line_11 $$ if (parent instanceof XmlTag && !(token.getNextSibling() instanceof OuterLanguageElement)) -->Line_12 $$ checkTag((XmlTag) parent)[ CD ]
Line_17 $$ if (parent instanceof XmlAttribute && !(token.getNextSibling() instanceof OuterLanguageElement)) -->Line_18 $$ checkAttribute((XmlAttribute) parent)[ CD ]
Line_22 $$ if (token.textContains(']') && token.textContains('>')) -->Line_26 $$ if (i != -1) [ CD ]
Line_29 $$ if (tag != null && XmlExtension.getExtensionByElement(tag).shouldBeHighlightedAsTag(tag) && !skipValidation(tag)) -->Line_32 $$ HighlightInfoType type = tag instanceof HtmlTag ? HighlightInfoType.WARNING : HighlightInfoType.ERROR[ CD ]
Line_33 $$ String description = XmlErrorMessages.message("cdata.end.should.not.appear.in.content.unless.to.mark.end.of.cdata.section")-->Line_34 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(type).range(start, start + marker.length()).descriptionAndTooltip(description).create()[ FD ]
Line_32 $$ HighlightInfoType type = tag instanceof HtmlTag ? HighlightInfoType.WARNING : HighlightInfoType.ERROR-->Line_34 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(type).range(start, start + marker.length()).descriptionAndTooltip(description).create()[ FD ]
Line_29 $$ if (tag != null && XmlExtension.getExtensionByElement(tag).shouldBeHighlightedAsTag(tag) && !skipValidation(tag)) -->Line_35 $$ addToResults(info)[ CD ]
Line_34 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(type).range(start, start + marker.length()).descriptionAndTooltip(description).create()-->Line_35 $$ addToResults(info)[ FD ]
Line_29 $$ if (tag != null && XmlExtension.getExtensionByElement(tag).shouldBeHighlightedAsTag(tag) && !skipValidation(tag)) -->Line_31 $$ int start = textRange.getStartOffset() + i[ CD ]
Line_21 $$ if (tokenType == XmlTokenType.XML_DATA_CHARACTERS && token.getParent() instanceof XmlText) -->Line_22 $$ if (token.textContains(']') && token.textContains('>')) [ CD ]
Line_6 $$ PsiElement element = token.getPrevSibling()-->Line_10 $$ PsiElement parent = element.getParent()[ FD ]
Line_9 $$ if (((XmlToken) element).getTokenType() == XmlTokenType.XML_START_TAG_START) -->Line_11 $$ if (parent instanceof XmlTag && !(token.getNextSibling() instanceof OuterLanguageElement)) [ CD ]
Line_29 $$ if (tag != null && XmlExtension.getExtensionByElement(tag).shouldBeHighlightedAsTag(tag) && !skipValidation(tag)) -->Line_30 $$ TextRange textRange = token.getTextRange()[ CD ]
Line_24 $$ String marker = "]]>"-->Line_25 $$ int i = s.indexOf(marker)[ FD ]
Line_7 $$ element = element.getPrevSibling()-->Line_8 $$ if (element instanceof XmlToken) [ FD ]
Line_22 $$ if (token.textContains(']') && token.textContains('>')) -->Line_25 $$ int i = s.indexOf(marker)[ CD ]
Line_26 $$ if (i != -1) -->Line_29 $$ if (tag != null && XmlExtension.getExtensionByElement(tag).shouldBeHighlightedAsTag(tag) && !skipValidation(tag)) [ CD ]
Line_5 $$ if (tokenType == XmlTokenType.XML_NAME || tokenType == XmlTokenType.XML_TAG_NAME) -->Line_7 $$ while (element instanceof PsiWhiteSpace) element = element.getPrevSibling()[ CD ]
Line_23 $$ String s = token.getText()-->Line_25 $$ int i = s.indexOf(marker)[ FD ]
Line_8 $$ if (element instanceof XmlToken) -->Line_16 $$ PsiElement parent = token.getParent()[ CD ]
Line_22 $$ if (token.textContains(']') && token.textContains('>')) -->Line_24 $$ String marker = "]]>"[ CD ]
Line_8 $$ if (element instanceof XmlToken) -->Line_17 $$ if (parent instanceof XmlAttribute && !(token.getNextSibling() instanceof OuterLanguageElement)) [ CD ]
Line_8 $$ if (element instanceof XmlToken) -->Line_9 $$ if (((XmlToken) element).getTokenType() == XmlTokenType.XML_START_TAG_START) [ CD ]
Line_29 $$ if (tag != null && XmlExtension.getExtensionByElement(tag).shouldBeHighlightedAsTag(tag) && !skipValidation(tag)) -->Line_33 $$ String description = XmlErrorMessages.message("cdata.end.should.not.appear.in.content.unless.to.mark.end.of.cdata.section")[ CD ]
Line_6 $$ PsiElement element = token.getPrevSibling()-->Line_7 $$ element = element.getPrevSibling()[ FD ]
Line_30 $$ TextRange textRange = token.getTextRange()-->Line_31 $$ int start = textRange.getStartOffset() + i[ FD ]
Line_31 $$ int start = textRange.getStartOffset() + i-->Line_34 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(type).range(start, start + marker.length()).descriptionAndTooltip(description).create()[ FD ]
Line_24 $$ String marker = "]]>"-->Line_34 $$ HighlightInfo info = HighlightInfo.newHighlightInfo(type).range(start, start + marker.length()).descriptionAndTooltip(description).create()[ FD ]
