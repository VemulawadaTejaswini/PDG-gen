Line_11 $$ List<VirtualFile> result = ContainerUtil.newSmartList()-->Line_26 $$ result.add(file)[ FD ]
Line_15 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")-->Line_17 $$ result.addAll(parentInfo.getSubPackageDirectories(packageName.substring(i + 1)))[ FD ]
Line_11 $$ List<VirtualFile> result = ContainerUtil.newSmartList()-->Line_17 $$ result.addAll(parentInfo.getSubPackageDirectories(packageName.substring(i + 1)))[ FD ]
Line_29 $$ if (!result.isEmpty()) -->Line_32 $$ myNonExistentPackages.add(packageName)[ CD ]
Line_5 $$ if (info == null) -->Line_11 $$ List<VirtualFile> result = ContainerUtil.newSmartList()[ CD ]
Line_12 $$ if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName, '.')) -->Line_14 $$ while (true) [ CD ]
Line_24 $$ for (VirtualFile file : myRootsByPackagePrefix.get(packageName)) -->Line_26 $$ result.add(file)[ FD ]
Line_4 $$ PackageInfo info = myDirectoriesByPackageNameCache.get(packageName)-->Line_5 $$ if (info == null) [ FD ]
Line_16 $$ if (parentInfo != null) -->Line_17 $$ result.addAll(parentInfo.getSubPackageDirectories(packageName.substring(i + 1)))[ CD ]
Line_14 $$ while (true) -->Line_19 $$ if (i < 0)[ CD ]
Line_13 $$ int i = packageName.lastIndexOf('.')-->Line_21 $$ i = packageName.lastIndexOf('.', i - 1)[ FD ]
Line_13 $$ int i = packageName.lastIndexOf('.')-->Line_19 $$ if (i < 0)[ FD ]
Line_25 $$ if (file.isDirectory()) -->Line_26 $$ result.add(file)[ CD ]
Line_12 $$ if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName, '.')) -->Line_13 $$ int i = packageName.lastIndexOf('.')[ CD ]
Line_11 $$ List<VirtualFile> result = ContainerUtil.newSmartList()-->Line_29 $$ if (!result.isEmpty()) [ FD ]
Line_14 $$ while (true) -->Line_16 $$ if (parentInfo != null) [ CD ]
Line_13 $$ int i = packageName.lastIndexOf('.')-->Line_15 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")[ FD ]
Line_21 $$ i = packageName.lastIndexOf('.', i - 1)-->Line_19 $$ if (i < 0)[ FD ]
Line_5 $$ if (info == null) -->Line_12 $$ if (StringUtil.isNotEmpty(packageName) && !StringUtil.startsWithChar(packageName, '.')) [ CD ]
Line_5 $$ if (info == null) -->Line_6 $$ if (myNonExistentPackages.contains(packageName))[ CD ]
Line_6 $$ if (myNonExistentPackages.contains(packageName))-->Line_7 $$ return null[ CD ]
Line_24 $$ for (VirtualFile file : myRootsByPackagePrefix.get(packageName)) -->Line_25 $$ if (file.isDirectory()) [ FD ]
Line_5 $$ if (info == null) -->Line_29 $$ if (!result.isEmpty()) [ CD ]
Line_14 $$ while (true) -->Line_15 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")[ CD ]
Line_29 $$ if (!result.isEmpty()) -->Line_30 $$ myDirectoriesByPackageNameCache.put(packageName, info = new PackageInfo(packageName, result))[ CD ]
Line_14 $$ while (true) -->Line_21 $$ i = packageName.lastIndexOf('.', i - 1)[ CD ]
Line_5 $$ if (info == null) -->Line_8 $$ if (packageName.length() > Registry.intValue("java.max.package.name.length") || StringUtil.containsAnyChar(packageName, ";[/")) [ CD ]
Line_21 $$ i = packageName.lastIndexOf('.', i - 1)-->Line_15 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")[ FD ]
Line_4 $$ PackageInfo info = myDirectoriesByPackageNameCache.get(packageName)-->Line_30 $$ myDirectoriesByPackageNameCache.put(packageName, info = new PackageInfo(packageName, result))[ FD ]
Line_15 $$ PackageInfo parentInfo = getPackageInfo(i > 0 ? packageName.substring(0, i) : "")-->Line_16 $$ if (parentInfo != null) [ FD ]
Line_8 $$ if (packageName.length() > Registry.intValue("java.max.package.name.length") || StringUtil.containsAnyChar(packageName, ";[/")) -->Line_9 $$ return null[ CD ]
