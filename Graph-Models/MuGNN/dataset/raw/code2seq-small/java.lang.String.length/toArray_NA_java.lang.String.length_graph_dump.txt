Line_26 $$ String token = st.nextToken()-->Line_48 $$ if (token.contains(PRE_TAG_START))[ FD ]
Line_20 $$ List<String> list = new ArrayList<String>()-->Line_39 $$ list.add(isSelfClosedPTag(token) ? SELF_CLOSED_P_TAG : "")[ FD ]
Line_14 $$ if (s == null)-->Line_15 $$ return null[ CD ]
Line_26 $$ String token = st.nextToken()-->Line_27 $$ curPos += token.length()[ FD ]
Line_51 $$ if (token.contains(PRE_TAG_END))-->Line_52 $$ preCount--[ CD ]
Line_20 $$ List<String> list = new ArrayList<String>()-->Line_46 $$ list.add(token)[ FD ]
Line_48 $$ if (token.contains(PRE_TAG_START))-->Line_49 $$ preCount++[ CD ]
Line_29 $$ if (!first) -->Line_30 $$ list.add("")[ CD ]
Line_28 $$ if (separators.contains(token)) -->Line_44 $$ if (preCount == 0)[ CD ]
Line_22 $$ boolean first = true-->Line_34 $$ first = false[ FD ]
Line_26 $$ String token = st.nextToken()-->Line_45 $$ token = token.trim()[ FD ]
Line_25 $$ while (st.hasMoreTokens()) -->Line_27 $$ curPos += token.length()[ CD ]
Line_28 $$ if (separators.contains(token)) -->Line_36 $$ first = true[ CD ]
Line_23 $$ int preCount = 0-->Line_44 $$ if (preCount == 0)[ FD ]
Line_22 $$ boolean first = true-->Line_29 $$ if (!first) [ FD ]
Line_45 $$ token = token.trim()-->Line_38 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_45 $$ token = token.trim()-->Line_39 $$ list.add(isSelfClosedPTag(token) ? SELF_CLOSED_P_TAG : "")[ FD ]
Line_23 $$ int preCount = 0-->Line_52 $$ preCount--[ FD ]
Line_28 $$ if (separators.contains(token)) -->Line_29 $$ if (!first) [ CD ]
Line_22 $$ boolean first = true-->Line_36 $$ first = true[ FD ]
Line_24 $$ int curPos = 0-->Line_27 $$ curPos += token.length()[ FD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s, separators, true)-->Line_26 $$ String token = st.nextToken()[ FD ]
Line_27 $$ curPos += token.length()-->Line_38 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_38 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) -->Line_39 $$ list.add(isSelfClosedPTag(token) ? SELF_CLOSED_P_TAG : "")[ CD ]
Line_29 $$ if (!first) -->Line_31 $$ if (markers != null)[ CD ]
Line_25 $$ while (st.hasMoreTokens()) -->Line_28 $$ if (separators.contains(token)) [ CD ]
Line_28 $$ if (separators.contains(token)) -->Line_34 $$ first = false[ CD ]
Line_34 $$ first = false-->Line_29 $$ if (!first) [ FD ]
Line_26 $$ String token = st.nextToken()-->Line_46 $$ list.add(token)[ FD ]
Line_37 $$ if (p2nl) -->Line_38 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ CD ]
Line_45 $$ token = token.trim()-->Line_46 $$ list.add(token)[ FD ]
Line_47 $$ if (markers != null) -->Line_48 $$ if (token.contains(PRE_TAG_START))[ CD ]
Line_34 $$ first = false-->Line_36 $$ first = true[ FD ]
Line_20 $$ List<String> list = new ArrayList<String>()-->Line_30 $$ list.add("")[ FD ]
Line_28 $$ if (separators.contains(token)) -->Line_47 $$ if (markers != null) [ CD ]
Line_28 $$ if (separators.contains(token)) -->Line_37 $$ if (p2nl) [ CD ]
Line_45 $$ token = token.trim()-->Line_27 $$ curPos += token.length()[ FD ]
Line_36 $$ first = true-->Line_29 $$ if (!first) [ FD ]
Line_17 $$ if (s.isEmpty())-->Line_18 $$ return null[ CD ]
Line_25 $$ while (st.hasMoreTokens()) -->Line_26 $$ String token = st.nextToken()[ CD ]
Line_21 $$ StringTokenizer st = new StringTokenizer(s, separators, true)-->Line_25 $$ while (st.hasMoreTokens()) [ FD ]
Line_26 $$ String token = st.nextToken()-->Line_51 $$ if (token.contains(PRE_TAG_END))[ FD ]
Line_47 $$ if (markers != null) -->Line_51 $$ if (token.contains(PRE_TAG_END))[ CD ]
Line_38 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) -->Line_40 $$ markers.add(Boolean.valueOf(preCount > 0))[ CD ]
Line_47 $$ if (markers != null) -->Line_50 $$ markers.add(Boolean.valueOf(preCount > 0))[ CD ]
Line_45 $$ token = token.trim()-->Line_51 $$ if (token.contains(PRE_TAG_END))[ FD ]
Line_24 $$ int curPos = 0-->Line_38 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_26 $$ String token = st.nextToken()-->Line_38 $$ if (isParaTag(token) && s.indexOf(P_END_TAG, curPos) < 0) [ FD ]
Line_45 $$ token = token.trim()-->Line_28 $$ if (separators.contains(token)) [ FD ]
Line_26 $$ String token = st.nextToken()-->Line_28 $$ if (separators.contains(token)) [ FD ]
Line_26 $$ String token = st.nextToken()-->Line_39 $$ list.add(isSelfClosedPTag(token) ? SELF_CLOSED_P_TAG : "")[ FD ]
Line_31 $$ if (markers != null)-->Line_32 $$ markers.add(Boolean.valueOf(preCount > 0))[ CD ]
Line_44 $$ if (preCount == 0)-->Line_45 $$ token = token.trim()[ CD ]
Line_23 $$ int preCount = 0-->Line_49 $$ preCount++[ FD ]
Line_45 $$ token = token.trim()-->Line_48 $$ if (token.contains(PRE_TAG_START))[ FD ]
Line_28 $$ if (separators.contains(token)) -->Line_46 $$ list.add(token)[ CD ]
