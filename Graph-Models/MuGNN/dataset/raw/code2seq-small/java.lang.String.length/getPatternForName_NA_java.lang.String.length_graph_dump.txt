Line_2 $$ private static Pattern getPatternForName(String name) -->Line_6 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_4 $$ Matcher matcher = boundaryPattern.matcher(name)-->Line_8 $$ String prefix = name.substring(pos, matcher.start())[ FD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_16 $$ builder.append(Pattern.quote(name.substring(pos, name.length())))[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_12 $$ builder.append(Pattern.quote(matcher.group()))[ FD ]
Line_3 $$ Pattern boundaryPattern = Pattern.compile("((^|\\p-->Line_4 $$ Matcher matcher = boundaryPattern.matcher(name)[ FD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_4 $$ Matcher matcher = boundaryPattern.matcher(name)[ CD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_7 $$ while (matcher.find()) [ CD ]
Line_4 $$ Matcher matcher = boundaryPattern.matcher(name)-->Line_12 $$ builder.append(Pattern.quote(matcher.group()))[ FD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_4 $$ Matcher matcher = boundaryPattern.matcher(name)[ FD ]
Line_7 $$ while (matcher.find()) -->Line_14 $$ pos = matcher.end()[ CD ]
Line_7 $$ while (matcher.find()) -->Line_8 $$ String prefix = name.substring(pos, matcher.start())[ CD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_5 $$ int pos = 0[ CD ]
Line_7 $$ while (matcher.find()) -->Line_13 $$ builder.append("[\\p[ CD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append(Pattern.quote(name.substring(pos, name.length())))[ FD ]
Line_14 $$ pos = matcher.end()-->Line_16 $$ builder.append(Pattern.quote(name.substring(pos, name.length())))[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append(Pattern.quote(prefix))[ FD ]
Line_4 $$ Matcher matcher = boundaryPattern.matcher(name)-->Line_7 $$ while (matcher.find()) [ FD ]
Line_5 $$ int pos = 0-->Line_16 $$ builder.append(Pattern.quote(name.substring(pos, name.length())))[ FD ]
Line_9 $$ if (prefix.length() > 0) -->Line_10 $$ builder.append(Pattern.quote(prefix))[ CD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_8 $$ String prefix = name.substring(pos, matcher.start())[ FD ]
Line_7 $$ while (matcher.find()) -->Line_9 $$ if (prefix.length() > 0) [ CD ]
Line_8 $$ String prefix = name.substring(pos, matcher.start())-->Line_10 $$ builder.append(Pattern.quote(prefix))[ FD ]
Line_8 $$ String prefix = name.substring(pos, matcher.start())-->Line_9 $$ if (prefix.length() > 0) [ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append("[\\p[ FD ]
Line_4 $$ Matcher matcher = boundaryPattern.matcher(name)-->Line_14 $$ pos = matcher.end()[ FD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_17 $$ return Pattern.compile(builder.toString())[ CD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_17 $$ return Pattern.compile(builder.toString())[ FD ]
Line_14 $$ pos = matcher.end()-->Line_8 $$ String prefix = name.substring(pos, matcher.start())[ FD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_16 $$ builder.append(Pattern.quote(name.substring(pos, name.length())))[ CD ]
Line_5 $$ int pos = 0-->Line_14 $$ pos = matcher.end()[ FD ]
Line_7 $$ while (matcher.find()) -->Line_12 $$ builder.append(Pattern.quote(matcher.group()))[ CD ]
Line_5 $$ int pos = 0-->Line_8 $$ String prefix = name.substring(pos, matcher.start())[ FD ]
Line_2 $$ private static Pattern getPatternForName(String name) -->Line_3 $$ Pattern boundaryPattern = Pattern.compile("((^|\\p[ CD ]
