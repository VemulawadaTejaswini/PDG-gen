Line_2 $$ public void extraLongName() throws Exception -->Line_12 $$ String target = FileSystemUtil.resolveSymLink(file)[ CD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")[ CD ]
Line_14 $$ if (SystemInfo.isWindows) -->Line_20 $$ File baseDir = new File(path)[ CD ]
Line_17 $$ for (int i = 0; i < length / 10; i++) -->Line_24 $$ dir = new File(baseDir, StringUtil.repeat("x", i))[ FD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_32 $$ assertEquals(file.getPath(), target)[ FD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_4 $$ File dir = FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(myTempDirectory, prefix, ".dir"), prefix, ".dir"), prefix, ".dir"), prefix, ".dir")[ CD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_3 $$ String prefix = StringUtil.repeatSymbol('a', 128) + "."[ CD ]
Line_4 $$ File dir = FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(myTempDirectory, prefix, ".dir"), prefix, ".dir"), prefix, ".dir"), prefix, ".dir")-->Line_26 $$ assertTrue(getAttributes(dir).isDirectory())[ FD ]
Line_14 $$ if (SystemInfo.isWindows) -->Line_16 $$ int length = 250 - path.length()[ CD ]
Line_15 $$ String path = myTempDirectory.getPath()-->Line_16 $$ int length = 250 - path.length()[ FD ]
Line_3 $$ String prefix = StringUtil.repeatSymbol('a', 128) + "."-->Line_4 $$ File dir = FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(myTempDirectory, prefix, ".dir"), prefix, ".dir"), prefix, ".dir"), prefix, ".dir")[ FD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_7 $$ FileUtil.writeToFile(file, myTestData)[ CD ]
Line_14 $$ if (SystemInfo.isWindows) -->Line_23 $$ for (int i = 1; i <= 100; i++) [ CD ]
Line_27 $$ file = new File(dir, "file.txt")-->Line_31 $$ target = FileSystemUtil.resolveSymLink(file)[ FD ]
Line_14 $$ if (SystemInfo.isWindows) -->Line_15 $$ String path = myTempDirectory.getPath()[ CD ]
Line_4 $$ File dir = FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(myTempDirectory, prefix, ".dir"), prefix, ".dir"), prefix, ".dir"), prefix, ".dir")-->Line_24 $$ dir = new File(baseDir, StringUtil.repeat("x", i))[ FD ]
Line_15 $$ String path = myTempDirectory.getPath()-->Line_18 $$ path += "\\x_x_x_x_x"[ FD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_30 $$ assertFileAttributes(file)[ FD ]
Line_4 $$ File dir = FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(myTempDirectory, prefix, ".dir"), prefix, ".dir"), prefix, ".dir"), prefix, ".dir")-->Line_25 $$ assertTrue(dir.mkdir())[ FD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_31 $$ target = FileSystemUtil.resolveSymLink(file)[ FD ]
Line_12 $$ String target = FileSystemUtil.resolveSymLink(file)-->Line_32 $$ assertEquals(file.getPath(), target)[ FD ]
Line_4 $$ File dir = FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(myTempDirectory, prefix, ".dir"), prefix, ".dir"), prefix, ".dir"), prefix, ".dir")-->Line_10 $$ assertDirectoriesEqual(dir)[ FD ]
Line_20 $$ File baseDir = new File(path)-->Line_21 $$ assertTrue(baseDir.mkdirs())[ FD ]
Line_24 $$ dir = new File(baseDir, StringUtil.repeat("x", i))-->Line_25 $$ assertTrue(dir.mkdir())[ FD ]
Line_12 $$ String target = FileSystemUtil.resolveSymLink(file)-->Line_31 $$ target = FileSystemUtil.resolveSymLink(file)[ FD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_25 $$ assertTrue(dir.mkdir())[ CD ]
Line_14 $$ if (SystemInfo.isWindows) -->Line_21 $$ assertTrue(baseDir.mkdirs())[ CD ]
Line_27 $$ file = new File(dir, "file.txt")-->Line_28 $$ FileUtil.writeToFile(file, "test".getBytes(CharsetToolkit.UTF8_CHARSET))[ FD ]
Line_31 $$ target = FileSystemUtil.resolveSymLink(file)-->Line_32 $$ assertEquals(file.getPath(), target)[ FD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_8 $$ assertFileAttributes(file)[ CD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_6 $$ assertTrue(file.exists())[ FD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_32 $$ assertEquals(file.getPath(), target)[ CD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_28 $$ FileUtil.writeToFile(file, "test".getBytes(CharsetToolkit.UTF8_CHARSET))[ CD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_8 $$ assertFileAttributes(file)[ FD ]
Line_12 $$ String target = FileSystemUtil.resolveSymLink(file)-->Line_13 $$ assertEquals(file.getPath(), target)[ FD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_6 $$ assertTrue(file.exists())[ CD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_26 $$ assertTrue(getAttributes(dir).isDirectory())[ CD ]
Line_27 $$ file = new File(dir, "file.txt")-->Line_30 $$ assertFileAttributes(file)[ FD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_31 $$ target = FileSystemUtil.resolveSymLink(file)[ CD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_24 $$ dir = new File(baseDir, StringUtil.repeat("x", i))[ FD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_24 $$ dir = new File(baseDir, StringUtil.repeat("x", i))[ CD ]
Line_14 $$ if (SystemInfo.isWindows) -->Line_22 $$ assertTrue(getAttributes(baseDir).isDirectory())[ CD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_12 $$ String target = FileSystemUtil.resolveSymLink(file)[ FD ]
Line_14 $$ if (SystemInfo.isWindows) -->Line_17 $$ for (int i = 0; i < length / 10; i++) [ CD ]
Line_17 $$ for (int i = 0; i < length / 10; i++) -->Line_18 $$ path += "\\x_x_x_x_x"[ CD ]
Line_20 $$ File baseDir = new File(path)-->Line_22 $$ assertTrue(getAttributes(baseDir).isDirectory())[ FD ]
Line_17 $$ for (int i = 0; i < length / 10; i++) -->Line_23 $$ for (int i = 1; i <= 100; i++) [ FD ]
Line_24 $$ dir = new File(baseDir, StringUtil.repeat("x", i))-->Line_26 $$ assertTrue(getAttributes(dir).isDirectory())[ FD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_29 $$ assertTrue(file.exists())[ FD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_30 $$ assertFileAttributes(file)[ CD ]
Line_27 $$ file = new File(dir, "file.txt")-->Line_32 $$ assertEquals(file.getPath(), target)[ FD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_27 $$ file = new File(dir, "file.txt")[ FD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_13 $$ assertEquals(file.getPath(), target)[ CD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_13 $$ assertEquals(file.getPath(), target)[ FD ]
Line_9 $$ if (SystemInfo.isWindows) -->Line_10 $$ assertDirectoriesEqual(dir)[ CD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_28 $$ FileUtil.writeToFile(file, "test".getBytes(CharsetToolkit.UTF8_CHARSET))[ FD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_14 $$ if (SystemInfo.isWindows) [ CD ]
Line_3 $$ String prefix = StringUtil.repeatSymbol('a', 128) + "."-->Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")[ FD ]
Line_2 $$ public void extraLongName() throws Exception -->Line_9 $$ if (SystemInfo.isWindows) [ CD ]
Line_4 $$ File dir = FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(FileUtil.createTempDirectory(myTempDirectory, prefix, ".dir"), prefix, ".dir"), prefix, ".dir"), prefix, ".dir")-->Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")[ FD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_27 $$ file = new File(dir, "file.txt")[ CD ]
Line_27 $$ file = new File(dir, "file.txt")-->Line_29 $$ assertTrue(file.exists())[ FD ]
Line_5 $$ File file = FileUtil.createTempFile(dir, prefix, ".txt")-->Line_7 $$ FileUtil.writeToFile(file, myTestData)[ FD ]
Line_23 $$ for (int i = 1; i <= 100; i++) -->Line_29 $$ assertTrue(file.exists())[ CD ]
