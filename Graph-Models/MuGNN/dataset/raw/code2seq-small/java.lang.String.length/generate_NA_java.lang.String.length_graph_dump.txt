Line_2 $$ public String generate(@NotNull String indent) -->Line_11 $$ if (!isNull(myDescription)) [ CD ]
Line_5 $$ prefix = indent + " * "-->Line_31 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_61 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ FD ]
Line_51 $$ int nlen = sb.length() - prefix.length() - 1-->Line_53 $$ sb.delete(nlen, sb.length())[ FD ]
Line_7 $$ prefix = indent-->Line_13 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_11 $$ if (!isNull(myDescription)) -->Line_14 $$ if (myFormatter.getSettings().JD_ADD_BLANK_AFTER_DESCRIPTION) [ CD ]
Line_5 $$ prefix = indent + " * "-->Line_39 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_65 $$ return sb.toString()[ FD ]
Line_7 $$ prefix = indent-->Line_51 $$ int nlen = sb.length() - prefix.length() - 1[ FD ]
Line_35 $$ if (!isNull(mySince)) -->Line_37 $$ sb.append(prefix)[ CD ]
Line_5 $$ prefix = indent + " * "-->Line_29 $$ sb.append(prefix)[ FD ]
Line_14 $$ if (myFormatter.getSettings().JD_ADD_BLANK_AFTER_DESCRIPTION) -->Line_15 $$ sb.append(prefix)[ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_42 $$ if (myDeprecated != null) [ CD ]
Line_31 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())-->Line_32 $$ sb.append(tagDescription)[ FD ]
Line_28 $$ for (String aSeeAlsoList : mySeeAlsoList) -->Line_31 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_35 $$ if (!isNull(mySince)) -->Line_40 $$ sb.append(tagDescription)[ CD ]
Line_7 $$ prefix = indent-->Line_23 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ FD ]
Line_7 $$ prefix = indent-->Line_61 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ FD ]
Line_3 $$ final String prefix-->Line_37 $$ sb.append(prefix)[ FD ]
Line_11 $$ if (!isNull(myDescription)) -->Line_13 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_52 $$ if (sb.substring(nlen, sb.length()).equals(prefix + "\n")) [ CD ]
Line_55 $$ if (myMultiLineComment && myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || !myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || sb.indexOf("\n") != sb.length() - 1) -->Line_59 $$ sb.append(indent)[ CD ]
Line_42 $$ if (myDeprecated != null) -->Line_44 $$ sb.append(prefix)[ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_51 $$ int nlen = sb.length() - prefix.length() - 1[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_58 $$ sb.insert(0, myFirstLine + '\n')[ FD ]
Line_51 $$ int nlen = sb.length() - prefix.length() - 1-->Line_52 $$ if (sb.substring(nlen, sb.length()).equals(prefix + "\n")) [ FD ]
Line_5 $$ prefix = indent + " * "-->Line_15 $$ sb.append(prefix)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_59 $$ sb.append(indent)[ FD ]
Line_27 $$ JDTag tag = JDTag.SEE-->Line_46 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_35 $$ if (!isNull(mySince)) -->Line_38 $$ sb.append(tag.getWithEndWhitespace())[ CD ]
Line_55 $$ if (myMultiLineComment && myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || !myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || sb.indexOf("\n") != sb.length() - 1) -->Line_62 $$ sb.deleteCharAt(sb.length() - 1)[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_32 $$ sb.append(tagDescription)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_59 $$ sb.append(indent)[ FD ]
Line_27 $$ JDTag tag = JDTag.SEE-->Line_39 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_7 $$ prefix = indent-->Line_19 $$ generateSpecial(prefix, sb)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append(prefix)[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_37 $$ sb.append(prefix)[ FD ]
Line_7 $$ prefix = indent-->Line_31 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_27 $$ JDTag tag = JDTag.SEE-->Line_45 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_3 $$ final String prefix-->Line_29 $$ sb.append(prefix)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_47 $$ sb.append(tagDescription)[ FD ]
Line_3 $$ final String prefix-->Line_51 $$ int nlen = sb.length() - prefix.length() - 1[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_40 $$ sb.append(tagDescription)[ FD ]
Line_11 $$ if (!isNull(myDescription)) -->Line_12 $$ sb.append(prefix)[ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_26 $$ if (!isNull(mySeeAlsoList)) [ CD ]
Line_21 $$ for (String aUnknownList : myUnknownList) -->Line_23 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_3 $$ final String prefix-->Line_7 $$ prefix = indent[ FD ]
Line_27 $$ JDTag tag = JDTag.SEE-->Line_30 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_46 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_3 $$ final String prefix-->Line_15 $$ sb.append(prefix)[ FD ]
Line_3 $$ final String prefix-->Line_31 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_7 $$ prefix = indent-->Line_44 $$ sb.append(prefix)[ FD ]
Line_14 $$ if (myFormatter.getSettings().JD_ADD_BLANK_AFTER_DESCRIPTION) -->Line_16 $$ sb.append('\n')[ CD ]
Line_27 $$ JDTag tag = JDTag.SEE-->Line_31 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_35 $$ if (!isNull(mySince)) -->Line_39 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_49 $$ if (sb.length() == start)[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_49 $$ if (sb.length() == start)[ FD ]
Line_10 $$ int start = sb.length()-->Line_49 $$ if (sb.length() == start)[ FD ]
Line_3 $$ final String prefix-->Line_19 $$ generateSpecial(prefix, sb)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_44 $$ sb.append(prefix)[ FD ]
Line_31 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())-->Line_40 $$ sb.append(tagDescription)[ FD ]
Line_26 $$ if (!isNull(mySeeAlsoList)) -->Line_27 $$ JDTag tag = JDTag.SEE[ CD ]
Line_7 $$ prefix = indent-->Line_15 $$ sb.append(prefix)[ FD ]
Line_42 $$ if (myDeprecated != null) -->Line_45 $$ sb.append(tag.getWithEndWhitespace())[ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_64 $$ sb.append(' ').append(myEndLine)[ CD ]
Line_7 $$ prefix = indent-->Line_39 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_3 $$ final String prefix-->Line_13 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ FD ]
Line_7 $$ prefix = indent-->Line_12 $$ sb.append(prefix)[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_19 $$ generateSpecial(prefix, sb)[ CD ]
Line_52 $$ if (sb.substring(nlen, sb.length()).equals(prefix + "\n")) -->Line_53 $$ sb.delete(nlen, sb.length())[ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_10 $$ int start = sb.length()[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_51 $$ int nlen = sb.length() - prefix.length() - 1[ FD ]
Line_3 $$ final String prefix-->Line_39 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append('\n')[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_52 $$ if (sb.substring(nlen, sb.length()).equals(prefix + "\n")) [ FD ]
Line_3 $$ final String prefix-->Line_46 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_3 $$ final String prefix-->Line_5 $$ prefix = indent + " * "[ FD ]
Line_42 $$ if (myDeprecated != null) -->Line_46 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ CD ]
Line_5 $$ prefix = indent + " * "-->Line_44 $$ sb.append(prefix)[ FD ]
Line_3 $$ final String prefix-->Line_44 $$ sb.append(prefix)[ FD ]
Line_3 $$ final String prefix-->Line_23 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_3 $$ final String prefix-->Line_22 $$ sb.append(prefix)[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_23 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_55 $$ if (myMultiLineComment && myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || !myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || sb.indexOf("\n") != sb.length() - 1) -->Line_58 $$ sb.insert(0, myFirstLine + '\n')[ CD ]
Line_55 $$ if (myMultiLineComment && myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || !myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || sb.indexOf("\n") != sb.length() - 1) -->Line_61 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ CD ]
Line_4 $$ if (myFormatter.getSettings().JD_LEADING_ASTERISKS_ARE_ENABLED) -->Line_7 $$ prefix = indent[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_53 $$ sb.delete(nlen, sb.length())[ FD ]
Line_7 $$ prefix = indent-->Line_22 $$ sb.append(prefix)[ FD ]
Line_4 $$ if (myFormatter.getSettings().JD_LEADING_ASTERISKS_ARE_ENABLED) -->Line_5 $$ prefix = indent + " * "[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_55 $$ if (myMultiLineComment && myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || !myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || sb.indexOf("\n") != sb.length() - 1) [ FD ]
Line_3 $$ final String prefix-->Line_12 $$ sb.append(prefix)[ FD ]
Line_49 $$ if (sb.length() == start)-->Line_50 $$ return null[ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_7 $$ prefix = indent[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_37 $$ sb.append(prefix)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_10 $$ int start = sb.length()[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_13 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_65 $$ return sb.toString()[ CD ]
Line_7 $$ prefix = indent-->Line_37 $$ sb.append(prefix)[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_35 $$ if (!isNull(mySince)) [ CD ]
Line_5 $$ prefix = indent + " * "-->Line_12 $$ sb.append(prefix)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_3 $$ final String prefix-->Line_61 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_9 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append(prefix)[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_61 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ generateSpecial(prefix, sb)[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_22 $$ sb.append(prefix)[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_7 $$ prefix = indent[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_19 $$ generateSpecial(prefix, sb)[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_4 $$ if (myFormatter.getSettings().JD_LEADING_ASTERISKS_ARE_ENABLED) [ CD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_5 $$ prefix = indent + " * "[ FD ]
Line_5 $$ prefix = indent + " * "-->Line_51 $$ int nlen = sb.length() - prefix.length() - 1[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_20 $$ if (!isNull(myUnknownList) && myFormatter.getSettings().JD_KEEP_INVALID_TAGS) [ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(prefix)[ FD ]
Line_7 $$ prefix = indent-->Line_46 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_3 $$ final String prefix[ CD ]
Line_31 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())-->Line_47 $$ sb.append(tagDescription)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_62 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_7 $$ prefix = indent-->Line_29 $$ sb.append(prefix)[ FD ]
Line_27 $$ JDTag tag = JDTag.SEE-->Line_38 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_45 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_2 $$ public String generate(@NotNull String indent) -->Line_55 $$ if (myMultiLineComment && myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || !myFormatter.getSettings().JD_DO_NOT_WRAP_ONE_LINE_COMMENTS || sb.indexOf("\n") != sb.length() - 1) [ CD ]
Line_42 $$ if (myDeprecated != null) -->Line_47 $$ sb.append(tagDescription)[ CD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_64 $$ sb.append(' ').append(myEndLine)[ FD ]
Line_9 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append(prefix)[ FD ]
