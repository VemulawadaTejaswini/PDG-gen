Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_5 $$ if (!lookup.isCalculating() && !items.isEmpty()) [ CD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_11 $$ minPrefixLength = Math.min(lookup.itemMatcher(item).getPrefix().length(), minPrefixLength)[ FD ]
Line_14 $$ int start = getPivotOffset() - minPrefixLength - myAdditionalPrefix.length() + myRemovedPrefix-->Line_20 $$ myLookupStartMarker = createLeftGreedyMarker(start)[ FD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_16 $$ if (myLookupStartMarker.isValid() && myLookupStartMarker.getStartOffset() == start && myLookupStartMarker.getEndOffset() == start) [ CD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_20 $$ myLookupStartMarker = createLeftGreedyMarker(start)[ CD ]
Line_8 $$ int minPrefixLength = items.isEmpty() ? 0 : Integer.MAX_VALUE-->Line_11 $$ minPrefixLength = Math.min(lookup.itemMatcher(item).getPrefix().length(), minPrefixLength)[ FD ]
Line_9 $$ for (final LookupElement item : items) -->Line_11 $$ minPrefixLength = Math.min(lookup.itemMatcher(item).getPrefix().length(), minPrefixLength)[ FD ]
Line_15 $$ start = Math.max(Math.min(start, myEditor.getDocument().getTextLength()), 0)-->Line_20 $$ myLookupStartMarker = createLeftGreedyMarker(start)[ FD ]
Line_10 $$ if (!(item instanceof EmptyLookupItem)) -->Line_11 $$ minPrefixLength = Math.min(lookup.itemMatcher(item).getPrefix().length(), minPrefixLength)[ CD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_14 $$ int start = getPivotOffset() - minPrefixLength - myAdditionalPrefix.length() + myRemovedPrefix[ CD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_3 $$ if (myStableStart)[ CD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_8 $$ int minPrefixLength = items.isEmpty() ? 0 : Integer.MAX_VALUE[ FD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_5 $$ if (!lookup.isCalculating() && !items.isEmpty()) [ FD ]
Line_3 $$ if (myStableStart)-->Line_4 $$ return[ CD ]
Line_14 $$ int start = getPivotOffset() - minPrefixLength - myAdditionalPrefix.length() + myRemovedPrefix-->Line_15 $$ start = Math.max(Math.min(start, myEditor.getDocument().getTextLength()), 0)[ FD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_8 $$ int minPrefixLength = items.isEmpty() ? 0 : Integer.MAX_VALUE[ CD ]
Line_16 $$ if (myLookupStartMarker.isValid() && myLookupStartMarker.getStartOffset() == start && myLookupStartMarker.getEndOffset() == start) -->Line_17 $$ return[ CD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_15 $$ start = Math.max(Math.min(start, myEditor.getDocument().getTextLength()), 0)[ CD ]
Line_2 $$ void checkMinPrefixLengthChanges(Collection<LookupElement> items, LookupImpl lookup) -->Line_19 $$ myLookupStartMarker.dispose()[ CD ]
