Line_14 $$ Matcher mat = pat.matcher(fileText)-->Line_24 $$ rest_index = mat.end()[ FD ]
Line_24 $$ rest_index = mat.end()-->Line_27 $$ text.append(fileText.substring(rest_index))[ FD ]
Line_21 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())-->Line_22 $$ text.append(prev_part)[ FD ]
Line_19 $$ while (mat.find(rest_index)) -->Line_20 $$ String mark = mat.group()[ CD ]
Line_18 $$ final StringBuffer text = new StringBuffer()-->Line_22 $$ text.append(prev_part)[ FD ]
Line_32 $$ for (Map.Entry<String, Integer> entry : offsets.entrySet()) -->Line_33 $$ result.put(entry.getKey(), myFile.findElementAt(entry.getValue()))[ FD ]
Line_18 $$ final StringBuffer text = new StringBuffer()-->Line_23 $$ offsets.put(mark, text.length())[ FD ]
Line_14 $$ Matcher mat = pat.matcher(fileText)-->Line_21 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())[ FD ]
Line_24 $$ rest_index = mat.end()-->Line_26 $$ if (rest_index < fileText.length())[ FD ]
Line_19 $$ while (mat.find(rest_index)) -->Line_21 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())[ CD ]
Line_26 $$ if (rest_index < fileText.length())-->Line_27 $$ text.append(fileText.substring(rest_index))[ CD ]
Line_18 $$ final StringBuffer text = new StringBuffer()-->Line_30 $$ myFile = myFixture.addFileToProject(fileName, text.toString())[ FD ]
Line_24 $$ rest_index = mat.end()-->Line_19 $$ while (mat.find(rest_index)) [ FD ]
Line_19 $$ while (mat.find(rest_index)) -->Line_24 $$ rest_index = mat.end()[ CD ]
Line_14 $$ Matcher mat = pat.matcher(fileText)-->Line_20 $$ String mark = mat.group()[ FD ]
Line_19 $$ while (mat.find(rest_index)) -->Line_22 $$ text.append(prev_part)[ CD ]
Line_24 $$ rest_index = mat.end()-->Line_21 $$ CharSequence prev_part = fileText.subSequence(rest_index, mat.start())[ FD ]
Line_18 $$ final StringBuffer text = new StringBuffer()-->Line_27 $$ text.append(fileText.substring(rest_index))[ FD ]
Line_17 $$ Map<String, Integer> offsets = new HashMap<String, Integer>()-->Line_32 $$ for (Map.Entry<String, Integer> entry : offsets.entrySet()) [ FD ]
Line_20 $$ String mark = mat.group()-->Line_23 $$ offsets.put(mark, text.length())[ FD ]
Line_14 $$ Matcher mat = pat.matcher(fileText)-->Line_19 $$ while (mat.find(rest_index)) [ FD ]
Line_19 $$ while (mat.find(rest_index)) -->Line_23 $$ offsets.put(mark, text.length())[ CD ]
Line_17 $$ Map<String, Integer> offsets = new HashMap<String, Integer>()-->Line_23 $$ offsets.put(mark, text.length())[ FD ]
