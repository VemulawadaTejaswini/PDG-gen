Line_9 $$ if (element != null) -->Line_10 $$ String className = element.getClassName()[ CD ]
Line_35 $$ if (t instanceof ClassNotFoundException) -->Line_43 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) [ CD ]
Line_51 $$ s = s.substring(0, pos)-->Line_53 $$ return PluginManager.getPluginByClassName(s)[ FD ]
Line_28 $$ className += token-->Line_32 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_28 $$ className += token-->Line_60 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_10 $$ String className = element.getClassName()-->Line_12 $$ PluginId id = PluginManagerCore.getPluginByClassName(className)[ FD ]
Line_8 $$ for (StackTraceElement element : t.getStackTrace()) -->Line_10 $$ String className = element.getClassName()[ FD ]
Line_43 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) -->Line_47 $$ if (pos >= 0) [ CD ]
Line_13 $$ if (LOG.isDebugEnabled()) -->Line_14 $$ LOG.debug(diagnosePluginDetection(className, id))[ CD ]
Line_50 $$ if (pos >= 0) -->Line_51 $$ s = s.substring(0, pos)[ CD ]
Line_51 $$ s = s.substring(0, pos)-->Line_52 $$ if (PluginManager.isPluginClass(s)) [ FD ]
Line_28 $$ className += token-->Line_59 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_43 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) -->Line_44 $$ String s = t.getMessage()[ CD ]
Line_31 $$ if (PluginManager.isPluginClass(className)) -->Line_32 $$ return PluginManager.getPluginByClassName(className)[ CD ]
Line_10 $$ String className = element.getClassName()-->Line_11 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) [ FD ]
Line_28 $$ className += token-->Line_31 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_48 $$ s = s.substring(0, pos)-->Line_51 $$ s = s.substring(0, pos)[ FD ]
Line_39 $$ if (PluginManager.isPluginClass(className)) -->Line_40 $$ return PluginManager.getPluginByClassName(className)[ CD ]
Line_50 $$ if (pos >= 0) -->Line_52 $$ if (PluginManager.isPluginClass(s)) [ CD ]
Line_52 $$ if (PluginManager.isPluginClass(s)) -->Line_53 $$ return PluginManager.getPluginByClassName(s)[ CD ]
Line_11 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) -->Line_12 $$ PluginId id = PluginManagerCore.getPluginByClassName(className)[ CD ]
Line_10 $$ String className = element.getClassName()-->Line_40 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_59 $$ if (PluginManager.isPluginClass(className)) -->Line_60 $$ return PluginManager.getPluginByClassName(className)[ CD ]
Line_10 $$ String className = element.getClassName()-->Line_14 $$ LOG.debug(diagnosePluginDetection(className, id))[ FD ]
Line_24 $$ StringTokenizer tok = new StringTokenizer(t.getMessage(), ".")-->Line_25 $$ while (tok.hasMoreTokens()) [ FD ]
Line_57 $$ if (t instanceof ExtensionException) -->Line_59 $$ if (PluginManager.isPluginClass(className)) [ CD ]
Line_8 $$ for (StackTraceElement element : t.getStackTrace()) -->Line_9 $$ if (element != null) [ FD ]
Line_44 $$ String s = t.getMessage()-->Line_51 $$ s = s.substring(0, pos)[ FD ]
Line_7 $$ Set<String> visitedClassNames = ContainerUtil.newHashSet()-->Line_11 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) [ FD ]
Line_44 $$ String s = t.getMessage()-->Line_52 $$ if (PluginManager.isPluginClass(s)) [ FD ]
Line_11 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) -->Line_13 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_48 $$ s = s.substring(0, pos)-->Line_49 $$ pos = s.lastIndexOf('.')[ FD ]
Line_47 $$ if (pos >= 0) -->Line_50 $$ if (pos >= 0) [ CD ]
Line_49 $$ pos = s.lastIndexOf('.')-->Line_50 $$ if (pos >= 0) [ FD ]
Line_11 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) -->Line_16 $$ return id[ CD ]
Line_44 $$ String s = t.getMessage()-->Line_49 $$ pos = s.lastIndexOf('.')[ FD ]
Line_26 $$ String token = tok.nextToken()-->Line_28 $$ className += token[ FD ]
Line_28 $$ className += token-->Line_40 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_47 $$ if (pos >= 0) -->Line_48 $$ s = s.substring(0, pos)[ CD ]
Line_10 $$ String className = element.getClassName()-->Line_28 $$ className += token[ FD ]
Line_10 $$ String className = element.getClassName()-->Line_39 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_10 $$ String className = element.getClassName()-->Line_60 $$ return PluginManager.getPluginByClassName(className)[ FD ]
Line_44 $$ String s = t.getMessage()-->Line_48 $$ s = s.substring(0, pos)[ FD ]
Line_26 $$ String token = tok.nextToken()-->Line_27 $$ if (token.length() > 0 && Character.isJavaIdentifierStart(token.charAt(0))) [ FD ]
Line_48 $$ s = s.substring(0, pos)-->Line_52 $$ if (PluginManager.isPluginClass(s)) [ FD ]
Line_28 $$ className += token-->Line_39 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_48 $$ s = s.substring(0, pos)-->Line_53 $$ return PluginManager.getPluginByClassName(s)[ FD ]
Line_44 $$ String s = t.getMessage()-->Line_53 $$ return PluginManager.getPluginByClassName(s)[ FD ]
Line_57 $$ if (t instanceof ExtensionException) -->Line_58 $$ String className = ((ExtensionException) t).getExtensionClass().getName()[ CD ]
Line_9 $$ if (element != null) -->Line_11 $$ if (visitedClassNames.add(className) && PluginManagerCore.isPluginClass(className)) [ CD ]
Line_24 $$ StringTokenizer tok = new StringTokenizer(t.getMessage(), ".")-->Line_26 $$ String token = tok.nextToken()[ FD ]
Line_25 $$ while (tok.hasMoreTokens()) -->Line_26 $$ String token = tok.nextToken()[ CD ]
Line_25 $$ while (tok.hasMoreTokens()) -->Line_27 $$ if (token.length() > 0 && Character.isJavaIdentifierStart(token.charAt(0))) [ CD ]
Line_10 $$ String className = element.getClassName()-->Line_59 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_27 $$ if (token.length() > 0 && Character.isJavaIdentifierStart(token.charAt(0))) -->Line_28 $$ className += token[ CD ]
Line_47 $$ if (pos >= 0) -->Line_49 $$ pos = s.lastIndexOf('.')[ CD ]
Line_10 $$ String className = element.getClassName()-->Line_31 $$ if (PluginManager.isPluginClass(className)) [ FD ]
Line_20 $$ if (t instanceof NoSuchMethodException) -->Line_35 $$ if (t instanceof ClassNotFoundException) [ CD ]
Line_12 $$ PluginId id = PluginManagerCore.getPluginByClassName(className)-->Line_14 $$ LOG.debug(diagnosePluginDetection(className, id))[ FD ]
Line_4 $$ if (t instanceof PluginException) -->Line_5 $$ return ((PluginException) t).getPluginId()[ CD ]
Line_43 $$ if (t instanceof AbstractMethodError && t.getMessage() != null) -->Line_57 $$ if (t instanceof ExtensionException) [ CD ]
Line_49 $$ pos = s.lastIndexOf('.')-->Line_51 $$ s = s.substring(0, pos)[ FD ]
Line_10 $$ String className = element.getClassName()-->Line_32 $$ return PluginManager.getPluginByClassName(className)[ FD ]
