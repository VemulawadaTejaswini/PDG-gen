Line_16 $$ if (trunc) -->Line_19 $$ buffer.append("...")[ CD ]
Line_8 $$ int index1 = text.indexOf('\n')-->Line_14 $$ int index = Math.min(index1, index2)[ FD ]
Line_7 $$ text = text.trim()-->Line_10 $$ index1 = text.length()[ FD ]
Line_11 $$ int index2 = text.indexOf('\r')-->Line_14 $$ int index = Math.min(index1, index2)[ FD ]
Line_7 $$ text = text.trim()-->Line_17 $$ text = text.substring(0, index)[ FD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_19 $$ buffer.append("...")[ FD ]
Line_8 $$ int index1 = text.indexOf('\n')-->Line_10 $$ index1 = text.length()[ FD ]
Line_16 $$ if (trunc) -->Line_18 $$ buffer.append(StringUtil.escapeXml(text))[ CD ]
Line_23 $$ PsiExpression constantInitializer = calcInitializerExpression(variable)-->Line_24 $$ if (constantInitializer != null) [ FD ]
Line_4 $$ if (initializer != null) -->Line_23 $$ PsiExpression constantInitializer = calcInitializerExpression(variable)[ CD ]
Line_6 $$ String text = initializer.getText()-->Line_8 $$ int index1 = text.indexOf('\n')[ FD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_3 $$ PsiExpression initializer = variable.getInitializer()[ FD ]
Line_7 $$ text = text.trim()-->Line_8 $$ int index1 = text.indexOf('\n')[ FD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_3 $$ PsiExpression initializer = variable.getInitializer()[ CD ]
Line_12 $$ if (index2 < 0)-->Line_13 $$ index2 = text.length()[ CD ]
Line_4 $$ if (initializer != null) -->Line_14 $$ int index = Math.min(index1, index2)[ CD ]
Line_4 $$ if (initializer != null) -->Line_6 $$ String text = initializer.getText()[ CD ]
Line_7 $$ text = text.trim()-->Line_18 $$ buffer.append(StringUtil.escapeXml(text))[ FD ]
Line_6 $$ String text = initializer.getText()-->Line_13 $$ index2 = text.length()[ FD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_26 $$ appendExpressionValue(buffer, constantInitializer, CodeInsightBundle.message("javadoc.resolved.value"))[ FD ]
Line_9 $$ if (index1 < 0)-->Line_10 $$ index1 = text.length()[ CD ]
Line_6 $$ String text = initializer.getText()-->Line_10 $$ index1 = text.length()[ FD ]
Line_7 $$ text = text.trim()-->Line_11 $$ int index2 = text.indexOf('\r')[ FD ]
Line_4 $$ if (initializer != null) -->Line_11 $$ int index2 = text.indexOf('\r')[ CD ]
Line_13 $$ index2 = text.length()-->Line_14 $$ int index = Math.min(index1, index2)[ FD ]
Line_4 $$ if (initializer != null) -->Line_16 $$ if (trunc) [ CD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_23 $$ PsiExpression constantInitializer = calcInitializerExpression(variable)[ FD ]
Line_4 $$ if (initializer != null) -->Line_5 $$ buffer.append(" = ")[ CD ]
Line_6 $$ String text = initializer.getText()-->Line_7 $$ text = text.trim()[ FD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_18 $$ buffer.append(StringUtil.escapeXml(text))[ FD ]
Line_4 $$ if (initializer != null) -->Line_8 $$ int index1 = text.indexOf('\n')[ CD ]
Line_4 $$ if (initializer != null) -->Line_15 $$ boolean trunc = index < text.length()[ CD ]
Line_7 $$ text = text.trim()-->Line_15 $$ boolean trunc = index < text.length()[ FD ]
Line_16 $$ if (trunc) -->Line_17 $$ text = text.substring(0, index)[ CD ]
Line_17 $$ text = text.substring(0, index)-->Line_18 $$ buffer.append(StringUtil.escapeXml(text))[ FD ]
Line_24 $$ if (constantInitializer != null) -->Line_26 $$ appendExpressionValue(buffer, constantInitializer, CodeInsightBundle.message("javadoc.resolved.value"))[ CD ]
Line_6 $$ String text = initializer.getText()-->Line_15 $$ boolean trunc = index < text.length()[ FD ]
Line_6 $$ String text = initializer.getText()-->Line_11 $$ int index2 = text.indexOf('\r')[ FD ]
Line_16 $$ if (trunc) -->Line_21 $$ initializer.accept(new MyVisitor(buffer))[ CD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_25 $$ buffer.append("\n")[ FD ]
Line_3 $$ PsiExpression initializer = variable.getInitializer()-->Line_6 $$ String text = initializer.getText()[ FD ]
Line_11 $$ int index2 = text.indexOf('\r')-->Line_12 $$ if (index2 < 0)[ FD ]
Line_10 $$ index1 = text.length()-->Line_14 $$ int index = Math.min(index1, index2)[ FD ]
Line_24 $$ if (constantInitializer != null) -->Line_25 $$ buffer.append("\n")[ CD ]
Line_4 $$ if (initializer != null) -->Line_12 $$ if (index2 < 0)[ CD ]
Line_4 $$ if (initializer != null) -->Line_7 $$ text = text.trim()[ CD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_5 $$ buffer.append(" = ")[ FD ]
Line_2 $$ private static void appendInitializer(StringBuilder buffer, PsiVariable variable) -->Line_4 $$ if (initializer != null) [ CD ]
Line_14 $$ int index = Math.min(index1, index2)-->Line_17 $$ text = text.substring(0, index)[ FD ]
Line_23 $$ PsiExpression constantInitializer = calcInitializerExpression(variable)-->Line_26 $$ appendExpressionValue(buffer, constantInitializer, CodeInsightBundle.message("javadoc.resolved.value"))[ FD ]
Line_3 $$ PsiExpression initializer = variable.getInitializer()-->Line_21 $$ initializer.accept(new MyVisitor(buffer))[ FD ]
Line_6 $$ String text = initializer.getText()-->Line_18 $$ buffer.append(StringUtil.escapeXml(text))[ FD ]
Line_3 $$ PsiExpression initializer = variable.getInitializer()-->Line_4 $$ if (initializer != null) [ FD ]
Line_7 $$ text = text.trim()-->Line_13 $$ index2 = text.length()[ FD ]
Line_11 $$ int index2 = text.indexOf('\r')-->Line_13 $$ index2 = text.length()[ FD ]
Line_4 $$ if (initializer != null) -->Line_24 $$ if (constantInitializer != null) [ CD ]
Line_4 $$ if (initializer != null) -->Line_9 $$ if (index1 < 0)[ CD ]
Line_6 $$ String text = initializer.getText()-->Line_17 $$ text = text.substring(0, index)[ FD ]
Line_8 $$ int index1 = text.indexOf('\n')-->Line_9 $$ if (index1 < 0)[ FD ]
