Line_13 $$ if (headerName.equals("connection")) -->Line_15 $$ headerValue = StringUtil.toLowerCase(headerValue)[ CD ]
Line_2 $$ protected boolean consumeHttpResponseHead(DataInput dataInput) throws IOException -->Line_9 $$ while (((line = dataInput.readLine()) != null) && (line.length() > 0)) [ FD ]
Line_2 $$ protected boolean consumeHttpResponseHead(DataInput dataInput) throws IOException -->Line_9 $$ while (((line = dataInput.readLine()) != null) && (line.length() > 0)) [ CD ]
Line_2 $$ protected boolean consumeHttpResponseHead(DataInput dataInput) throws IOException -->Line_8 $$ String line = null[ CD ]
Line_13 $$ if (headerName.equals("connection")) -->Line_16 $$ if (headerValue.equals("close")) [ CD ]
Line_9 $$ while (((line = dataInput.readLine()) != null) && (line.length() > 0)) -->Line_12 $$ headerName = StringUtil.toLowerCase(headerName)[ CD ]
Line_14 $$ String headerValue = headerKeyValuePair[1].trim()-->Line_15 $$ headerValue = StringUtil.toLowerCase(headerValue)[ FD ]
Line_13 $$ if (headerName.equals("connection")) -->Line_14 $$ String headerValue = headerKeyValuePair[1].trim()[ CD ]
Line_2 $$ protected boolean consumeHttpResponseHead(DataInput dataInput) throws IOException -->Line_4 $$ if (!statusLine.equals("HTTP/1.1 200 OK")) [ CD ]
Line_2 $$ protected boolean consumeHttpResponseHead(DataInput dataInput) throws IOException -->Line_7 $$ boolean forceCloseSocket = false[ CD ]
Line_7 $$ boolean forceCloseSocket = false-->Line_17 $$ forceCloseSocket = true[ FD ]
Line_3 $$ String statusLine = dataInput.readLine()-->Line_4 $$ if (!statusLine.equals("HTTP/1.1 200 OK")) [ FD ]
Line_9 $$ while (((line = dataInput.readLine()) != null) && (line.length() > 0)) -->Line_11 $$ String headerName = headerKeyValuePair[0].trim()[ CD ]
Line_8 $$ String line = null-->Line_10 $$ String[] headerKeyValuePair = StringUtil.split(line, CharPool.COLON)[ FD ]
Line_8 $$ String line = null-->Line_9 $$ while (((line = dataInput.readLine()) != null) && (line.length() > 0)) [ FD ]
Line_12 $$ headerName = StringUtil.toLowerCase(headerName)-->Line_13 $$ if (headerName.equals("connection")) [ FD ]
Line_14 $$ String headerValue = headerKeyValuePair[1].trim()-->Line_16 $$ if (headerValue.equals("close")) [ FD ]
Line_9 $$ while (((line = dataInput.readLine()) != null) && (line.length() > 0)) -->Line_10 $$ String[] headerKeyValuePair = StringUtil.split(line, CharPool.COLON)[ FD ]
Line_11 $$ String headerName = headerKeyValuePair[0].trim()-->Line_12 $$ headerName = StringUtil.toLowerCase(headerName)[ FD ]
Line_11 $$ String headerName = headerKeyValuePair[0].trim()-->Line_13 $$ if (headerName.equals("connection")) [ FD ]
Line_16 $$ if (headerValue.equals("close")) -->Line_17 $$ forceCloseSocket = true[ CD ]
Line_2 $$ protected boolean consumeHttpResponseHead(DataInput dataInput) throws IOException -->Line_3 $$ String statusLine = dataInput.readLine()[ FD ]
Line_15 $$ headerValue = StringUtil.toLowerCase(headerValue)-->Line_16 $$ if (headerValue.equals("close")) [ FD ]
Line_2 $$ protected boolean consumeHttpResponseHead(DataInput dataInput) throws IOException -->Line_21 $$ return forceCloseSocket[ CD ]
Line_9 $$ while (((line = dataInput.readLine()) != null) && (line.length() > 0)) -->Line_13 $$ if (headerName.equals("connection")) [ CD ]
Line_9 $$ while (((line = dataInput.readLine()) != null) && (line.length() > 0)) -->Line_10 $$ String[] headerKeyValuePair = StringUtil.split(line, CharPool.COLON)[ CD ]
Line_2 $$ protected boolean consumeHttpResponseHead(DataInput dataInput) throws IOException -->Line_3 $$ String statusLine = dataInput.readLine()[ CD ]
