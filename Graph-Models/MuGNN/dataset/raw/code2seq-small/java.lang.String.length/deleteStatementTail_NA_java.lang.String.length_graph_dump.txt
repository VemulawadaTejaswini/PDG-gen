Line_4 $$ while (next != null) -->Line_7 $$ if (type == GroovyTokenTypes.mSEMI || type == TokenType.WHITE_SPACE && !next.getText().contains("\n")) [ CD ]
Line_2 $$ public static void deleteStatementTail(PsiElement container, @NotNull PsiElement statement) -->Line_3 $$ PsiElement next = statement.getNextSibling()[ FD ]
Line_7 $$ if (type == GroovyTokenTypes.mSEMI || type == TokenType.WHITE_SPACE && !next.getText().contains("\n")) -->Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) [ CD ]
Line_15 $$ if (second < 0) -->Line_17 $$ return[ CD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_16 $$ container.deleteChildRange(next, next)[ FD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_8 $$ final PsiElement nnext = next.getNextSibling()[ FD ]
Line_4 $$ while (next != null) -->Line_5 $$ final ASTNode node = next.getNode()[ CD ]
Line_7 $$ if (type == GroovyTokenTypes.mSEMI || type == TokenType.WHITE_SPACE && !next.getText().contains("\n")) -->Line_10 $$ next = nnext[ CD ]
Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) -->Line_12 $$ final String text = next.getText()[ CD ]
Line_12 $$ final String text = next.getText()-->Line_19 $$ final String substring = text.substring(second)[ FD ]
Line_14 $$ final int second = text.indexOf("\n", first + 1)-->Line_19 $$ final String substring = text.substring(second)[ FD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_4 $$ while (next != null) [ FD ]
Line_10 $$ next = nnext-->Line_8 $$ final PsiElement nnext = next.getNextSibling()[ FD ]
Line_10 $$ next = nnext-->Line_5 $$ final ASTNode node = next.getNode()[ FD ]
Line_7 $$ if (type == GroovyTokenTypes.mSEMI || type == TokenType.WHITE_SPACE && !next.getText().contains("\n")) -->Line_9 $$ container.deleteChildRange(next, next)[ CD ]
Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) -->Line_19 $$ final String substring = text.substring(second)[ CD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_10 $$ next = nnext[ FD ]
Line_10 $$ next = nnext-->Line_9 $$ container.deleteChildRange(next, next)[ FD ]
Line_12 $$ final String text = next.getText()-->Line_13 $$ final int first = text.indexOf("\n")[ FD ]
Line_5 $$ final ASTNode node = next.getNode()-->Line_20 $$ container.getNode().replaceChild(node, Factory.createSingleLeafElement(type, substring, 0, substring.length(), null, container.getManager()))[ FD ]
Line_15 $$ if (second < 0) -->Line_16 $$ container.deleteChildRange(next, next)[ CD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_12 $$ final String text = next.getText()[ FD ]
Line_4 $$ while (next != null) -->Line_6 $$ final IElementType type = node.getElementType()[ CD ]
Line_6 $$ final IElementType type = node.getElementType()-->Line_20 $$ container.getNode().replaceChild(node, Factory.createSingleLeafElement(type, substring, 0, substring.length(), null, container.getManager()))[ FD ]
Line_7 $$ if (type == GroovyTokenTypes.mSEMI || type == TokenType.WHITE_SPACE && !next.getText().contains("\n")) -->Line_8 $$ final PsiElement nnext = next.getNextSibling()[ CD ]
Line_10 $$ next = nnext-->Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) [ FD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) [ FD ]
Line_10 $$ next = nnext-->Line_7 $$ if (type == GroovyTokenTypes.mSEMI || type == TokenType.WHITE_SPACE && !next.getText().contains("\n")) [ FD ]
Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) -->Line_21 $$ return[ CD ]
Line_2 $$ public static void deleteStatementTail(PsiElement container, @NotNull PsiElement statement) -->Line_20 $$ container.getNode().replaceChild(node, Factory.createSingleLeafElement(type, substring, 0, substring.length(), null, container.getManager()))[ FD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_9 $$ container.deleteChildRange(next, next)[ FD ]
Line_12 $$ final String text = next.getText()-->Line_14 $$ final int second = text.indexOf("\n", first + 1)[ FD ]
Line_8 $$ final PsiElement nnext = next.getNextSibling()-->Line_10 $$ next = nnext[ FD ]
Line_5 $$ final ASTNode node = next.getNode()-->Line_6 $$ final IElementType type = node.getElementType()[ FD ]
Line_2 $$ public static void deleteStatementTail(PsiElement container, @NotNull PsiElement statement) -->Line_4 $$ while (next != null) [ CD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_5 $$ final ASTNode node = next.getNode()[ FD ]
Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) -->Line_13 $$ final int first = text.indexOf("\n")[ CD ]
Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) -->Line_14 $$ final int second = text.indexOf("\n", first + 1)[ CD ]
Line_2 $$ public static void deleteStatementTail(PsiElement container, @NotNull PsiElement statement) -->Line_3 $$ PsiElement next = statement.getNextSibling()[ CD ]
Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) -->Line_20 $$ container.getNode().replaceChild(node, Factory.createSingleLeafElement(type, substring, 0, substring.length(), null, container.getManager()))[ CD ]
Line_3 $$ PsiElement next = statement.getNextSibling()-->Line_7 $$ if (type == GroovyTokenTypes.mSEMI || type == TokenType.WHITE_SPACE && !next.getText().contains("\n")) [ FD ]
Line_14 $$ final int second = text.indexOf("\n", first + 1)-->Line_15 $$ if (second < 0) [ FD ]
Line_10 $$ next = nnext-->Line_16 $$ container.deleteChildRange(next, next)[ FD ]
Line_2 $$ public static void deleteStatementTail(PsiElement container, @NotNull PsiElement statement) -->Line_16 $$ container.deleteChildRange(next, next)[ FD ]
Line_10 $$ next = nnext-->Line_4 $$ while (next != null) [ FD ]
Line_11 $$ if (type == GroovyTokenTypes.mNLS || type == TokenType.WHITE_SPACE && next.getText().contains("\n")) -->Line_15 $$ if (second < 0) [ CD ]
Line_19 $$ final String substring = text.substring(second)-->Line_20 $$ container.getNode().replaceChild(node, Factory.createSingleLeafElement(type, substring, 0, substring.length(), null, container.getManager()))[ FD ]
Line_2 $$ public static void deleteStatementTail(PsiElement container, @NotNull PsiElement statement) -->Line_9 $$ container.deleteChildRange(next, next)[ FD ]
Line_10 $$ next = nnext-->Line_12 $$ final String text = next.getText()[ FD ]
