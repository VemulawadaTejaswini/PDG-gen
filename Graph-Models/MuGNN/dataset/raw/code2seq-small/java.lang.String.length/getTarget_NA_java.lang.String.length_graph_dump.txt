Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_13 $$ source = GitBranchUtil.stripRefsPrefix(source)[ CD ]
Line_7 $$ String source = parts[0].trim()-->Line_9 $$ source = StringUtil.trimStart(source, "+")[ FD ]
Line_13 $$ source = GitBranchUtil.stripRefsPrefix(source)-->Line_15 $$ if (source.equals(HEAD) || source.equals(sourceBranch))[ FD ]
Line_18 $$ String sourceWoStar = source.substring(0, source.length() - 1)-->Line_19 $$ if (sourceBranch.startsWith(sourceWoStar)) [ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_8 $$ String target = parts[1].trim()[ CD ]
Line_13 $$ source = GitBranchUtil.stripRefsPrefix(source)-->Line_18 $$ String sourceWoStar = source.substring(0, source.length() - 1)[ FD ]
Line_20 $$ String starMeaning = sourceBranch.substring(sourceWoStar.length())-->Line_21 $$ return target.replace("*", starMeaning)[ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_10 $$ if (!isStarPositionValid(source, target)) [ CD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_15 $$ if (source.equals(HEAD) || source.equals(sourceBranch))[ FD ]
Line_7 $$ String source = parts[0].trim()-->Line_15 $$ if (source.equals(HEAD) || source.equals(sourceBranch))[ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_14 $$ sourceBranch = GitBranchUtil.stripRefsPrefix(sourceBranch)[ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_20 $$ String starMeaning = sourceBranch.substring(sourceWoStar.length())[ FD ]
Line_17 $$ if (source.endsWith("*")) -->Line_18 $$ String sourceWoStar = source.substring(0, source.length() - 1)[ CD ]
Line_4 $$ if (parts.length != 2) -->Line_5 $$ return null[ CD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_24 $$ return null[ CD ]
Line_7 $$ String source = parts[0].trim()-->Line_10 $$ if (!isStarPositionValid(source, target)) [ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_14 $$ sourceBranch = GitBranchUtil.stripRefsPrefix(sourceBranch)[ CD ]
Line_8 $$ String target = parts[1].trim()-->Line_15 $$ if (source.equals(HEAD) || source.equals(sourceBranch))[ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_3 $$ String[] parts = spec.split(":")[ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_4 $$ if (parts.length != 2) [ CD ]
Line_9 $$ source = StringUtil.trimStart(source, "+")-->Line_17 $$ if (source.endsWith("*")) [ FD ]
Line_9 $$ source = StringUtil.trimStart(source, "+")-->Line_15 $$ if (source.equals(HEAD) || source.equals(sourceBranch))[ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_3 $$ String[] parts = spec.split(":")[ CD ]
Line_19 $$ if (sourceBranch.startsWith(sourceWoStar)) -->Line_21 $$ return target.replace("*", starMeaning)[ CD ]
Line_9 $$ source = StringUtil.trimStart(source, "+")-->Line_13 $$ source = GitBranchUtil.stripRefsPrefix(source)[ FD ]
Line_15 $$ if (source.equals(HEAD) || source.equals(sourceBranch))-->Line_16 $$ return target[ CD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_7 $$ String source = parts[0].trim()[ CD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_9 $$ source = StringUtil.trimStart(source, "+")[ CD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_15 $$ if (source.equals(HEAD) || source.equals(sourceBranch))[ CD ]
Line_10 $$ if (!isStarPositionValid(source, target)) -->Line_11 $$ return null[ CD ]
Line_7 $$ String source = parts[0].trim()-->Line_18 $$ String sourceWoStar = source.substring(0, source.length() - 1)[ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_17 $$ if (source.endsWith("*")) [ CD ]
Line_8 $$ String target = parts[1].trim()-->Line_10 $$ if (!isStarPositionValid(source, target)) [ FD ]
Line_9 $$ source = StringUtil.trimStart(source, "+")-->Line_10 $$ if (!isStarPositionValid(source, target)) [ FD ]
Line_18 $$ String sourceWoStar = source.substring(0, source.length() - 1)-->Line_20 $$ String starMeaning = sourceBranch.substring(sourceWoStar.length())[ FD ]
Line_2 $$ private static String getTarget(@NotNull String spec, @NotNull String sourceBranch) -->Line_19 $$ if (sourceBranch.startsWith(sourceWoStar)) [ FD ]
Line_19 $$ if (sourceBranch.startsWith(sourceWoStar)) -->Line_20 $$ String starMeaning = sourceBranch.substring(sourceWoStar.length())[ CD ]
Line_9 $$ source = StringUtil.trimStart(source, "+")-->Line_18 $$ String sourceWoStar = source.substring(0, source.length() - 1)[ FD ]
Line_17 $$ if (source.endsWith("*")) -->Line_19 $$ if (sourceBranch.startsWith(sourceWoStar)) [ CD ]
Line_7 $$ String source = parts[0].trim()-->Line_13 $$ source = GitBranchUtil.stripRefsPrefix(source)[ FD ]
Line_13 $$ source = GitBranchUtil.stripRefsPrefix(source)-->Line_17 $$ if (source.endsWith("*")) [ FD ]
Line_8 $$ String target = parts[1].trim()-->Line_21 $$ return target.replace("*", starMeaning)[ FD ]
Line_7 $$ String source = parts[0].trim()-->Line_17 $$ if (source.endsWith("*")) [ FD ]
