Line_74 $$ final PsiElement anonymousClassStatement = ptr.getElement()-->Line_79 $$ anonymousClassStatement.accept(new JavaRecursiveElementWalkingVisitor() [ FD ]
Line_41 $$ if (body.getLastBodyElement() == null) -->Line_44 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myClass.getProject())[ CD ]
Line_88 $$ if (editor != null && newClass != null) -->Line_93 $$ CommandProcessor.getInstance().executeCommand(myClass.getProject(), new Runnable() [ CD ]
Line_15 $$ final String listenerClassName = myDescriptor.getListenerType().getName()-->Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
Line_52 $$ if (boundFields.length == 1) -->Line_55 $$ builder.append(";")[ CD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_78 $$ final Ref<PsiClass> newClassRef = new Ref<PsiClass>()[ CD ]
Line_2 $$ private void createListener() -->Line_3 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(mySelection.get(0))[ CD ]
Line_96 $$ if (!OverrideImplementExploreUtil.getMethodSignaturesToImplement(newClass).isEmpty()) -->Line_99 $$ OverrideImplementUtil.chooseAndOverrideMethods(newClass.getProject(), editor, newClass)[ CD ]
Line_34 $$ if (boundFields.length == 1) -->Line_38 $$ builder.append("(")[ CD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_93 $$ CommandProcessor.getInstance().executeCommand(myClass.getProject(), new Runnable() [ FD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_107 $$ if (fileEditors != null) [ CD ]
Line_28 $$ final PsiCodeBlock body = constructor.getBody()-->Line_41 $$ if (body.getLastBodyElement() == null) [ FD ]
Line_57 $$ PsiStatement stmt = factory.createStatementFromText(builder.toString(), constructor)-->Line_59 $$ stmt = (PsiStatement) JavaCodeStyleManager.getInstance(body.getProject()).shortenClassReferences(stmt)[ FD ]
Line_108 $$ for (FileEditor fileEditor : fileEditors) -->Line_109 $$ if (fileEditor instanceof TextEditor) [ FD ]
Line_58 $$ stmt = (PsiStatement) body.addAfter(stmt, body.getLastBodyElement())-->Line_68 $$ final SmartPsiElementPointer ptr = SmartPointerManager.getInstance(myClass.getProject()).createSmartPsiElementPointer(stmt)[ FD ]
Line_15 $$ final String listenerClassName = myDescriptor.getListenerType().getName()-->Line_17 $$ String adapterClassName = listenerClassName.substring(0, listenerClassName.length() - LISTENER_SUFFIX.length()) + ADAPTER_SUFFIX[ FD ]
Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))-->Line_23 $$ if (listenerClass == null) [ FD ]
Line_42 $$ variableName = "listener"-->Line_45 $$ variableName = codeStyleManager.suggestUniqueVariableName("listener", body.getLastBodyElement(), false)[ FD ]
Line_57 $$ PsiStatement stmt = factory.createStatementFromText(builder.toString(), constructor)-->Line_68 $$ final SmartPsiElementPointer ptr = SmartPointerManager.getInstance(myClass.getProject()).createSmartPsiElementPointer(stmt)[ FD ]
Line_75 $$ if (anonymousClassStatement == null) -->Line_76 $$ return[ CD ]
Line_79 $$ anonymousClassStatement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_83 $$ newClassRef.set(aClass)[ CD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_70 $$ final FileEditor[] fileEditors = virtualFile != null ? FileEditorManager.getInstance(myClass.getProject()).openFile(virtualFile, true, true) : null[ FD ]
Line_28 $$ final PsiCodeBlock body = constructor.getBody()-->Line_58 $$ stmt = (PsiStatement) body.addAfter(stmt, body.getLastBodyElement())[ FD ]
Line_23 $$ if (listenerClass == null) -->Line_24 $$ Messages.showErrorDialog(myClass.getProject(), UIDesignerBundle.message("create.listener.class.not.found"), CommonBundle.getErrorTitle())[ CD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_69 $$ final VirtualFile virtualFile = PsiUtilCore.getVirtualFile(myClass)[ FD ]
Line_2 $$ private void createListener() -->Line_4 $$ final PsiField[] boundFields = new PsiField[mySelection.size()][ CD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_12 $$ PsiMethod constructor = findConstructorToInsert(myClass)[ FD ]
Line_17 $$ String adapterClassName = listenerClassName.substring(0, listenerClassName.length() - LISTENER_SUFFIX.length()) + ADAPTER_SUFFIX-->Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
Line_61 $$ PsiElement anchor = stmt-->Line_64 $$ addStmt = body.addAfter(addStmt, anchor)[ FD ]
Line_74 $$ final PsiElement anonymousClassStatement = ptr.getElement()-->Line_75 $$ if (anonymousClassStatement == null) [ FD ]
Line_61 $$ PsiElement anchor = stmt-->Line_65 $$ anchor = addStmt[ FD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_75 $$ if (anonymousClassStatement == null) [ CD ]
Line_15 $$ final String listenerClassName = myDescriptor.getListenerType().getName()-->Line_16 $$ if (listenerClassName.endsWith(LISTENER_SUFFIX)) [ FD ]
Line_23 $$ if (listenerClass == null) -->Line_25 $$ return[ CD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_44 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myClass.getProject())[ FD ]
Line_60 $$ if (boundFields.length > 1) -->Line_61 $$ PsiElement anchor = stmt[ CD ]
Line_41 $$ if (body.getLastBodyElement() == null) -->Line_42 $$ variableName = "listener"[ CD ]
Line_5 $$ for (int i = 0; i < mySelection.size(); i++) -->Line_6 $$ boundFields[i] = BindingProperty.findBoundField(root, mySelection.get(i).getBinding())[ FD ]
Line_27 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(myClass.getProject()).getElementFactory()-->Line_63 $$ PsiElement addStmt = factory.createStatementFromText(field.getName() + "." + myDescriptor.getAddListenerMethod().getName() + "(" + variableName + ");", constructor)[ FD ]
Line_68 $$ final SmartPsiElementPointer ptr = SmartPointerManager.getInstance(myClass.getProject()).createSmartPsiElementPointer(stmt)-->Line_74 $$ final PsiElement anonymousClassStatement = ptr.getElement()[ FD ]
Line_9 $$ if (!FileModificationService.getInstance().preparePsiElementForWrite(myClass))-->Line_10 $$ return[ CD ]
Line_28 $$ final PsiCodeBlock body = constructor.getBody()-->Line_45 $$ variableName = codeStyleManager.suggestUniqueVariableName("listener", body.getLastBodyElement(), false)[ FD ]
Line_12 $$ PsiMethod constructor = findConstructorToInsert(myClass)-->Line_57 $$ PsiStatement stmt = factory.createStatementFromText(builder.toString(), constructor)[ FD ]
Line_64 $$ addStmt = body.addAfter(addStmt, anchor)-->Line_65 $$ anchor = addStmt[ FD ]
Line_88 $$ if (editor != null && newClass != null) -->Line_89 $$ PsiElement brace = newClass.getLBrace()[ CD ]
Line_34 $$ if (boundFields.length == 1) -->Line_47 $$ builder.append(variableName).append("=")[ CD ]
Line_79 $$ anonymousClassStatement.accept(new JavaRecursiveElementWalkingVisitor() -->Line_83 $$ newClassRef.set(aClass)[ FD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_24 $$ Messages.showErrorDialog(myClass.getProject(), UIDesignerBundle.message("create.listener.class.not.found"), CommonBundle.getErrorTitle())[ FD ]
Line_34 $$ if (boundFields.length == 1) -->Line_41 $$ if (body.getLastBodyElement() == null) [ CD ]
Line_27 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(myClass.getProject()).getElementFactory()-->Line_57 $$ PsiStatement stmt = factory.createStatementFromText(builder.toString(), constructor)[ FD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_68 $$ final SmartPsiElementPointer ptr = SmartPointerManager.getInstance(myClass.getProject()).createSmartPsiElementPointer(stmt)[ FD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_88 $$ if (editor != null && newClass != null) [ CD ]
Line_57 $$ PsiStatement stmt = factory.createStatementFromText(builder.toString(), constructor)-->Line_58 $$ stmt = (PsiStatement) body.addAfter(stmt, body.getLastBodyElement())[ FD ]
Line_52 $$ if (boundFields.length == 1) -->Line_53 $$ builder.append(");")[ CD ]
Line_45 $$ variableName = codeStyleManager.suggestUniqueVariableName("listener", body.getLastBodyElement(), false)-->Line_47 $$ builder.append(variableName).append("=")[ FD ]
Line_16 $$ if (listenerClassName.endsWith(LISTENER_SUFFIX)) -->Line_17 $$ String adapterClassName = listenerClassName.substring(0, listenerClassName.length() - LISTENER_SUFFIX.length()) + ADAPTER_SUFFIX[ CD ]
Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))-->Line_23 $$ if (listenerClass == null) [ FD ]
Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))-->Line_40 $$ builder.append(listenerClass.getQualifiedName()).append(" ")[ FD ]
Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))-->Line_50 $$ builder.append(listenerClass.getQualifiedName())[ FD ]
Line_88 $$ if (editor != null && newClass != null) -->Line_90 $$ if (brace != null) [ CD ]
Line_63 $$ PsiElement addStmt = factory.createStatementFromText(field.getName() + "." + myDescriptor.getAddListenerMethod().getName() + "(" + variableName + ");", constructor)-->Line_65 $$ anchor = addStmt[ FD ]
Line_44 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myClass.getProject())-->Line_45 $$ variableName = codeStyleManager.suggestUniqueVariableName("listener", body.getLastBodyElement(), false)[ FD ]
Line_28 $$ final PsiCodeBlock body = constructor.getBody()-->Line_59 $$ stmt = (PsiStatement) JavaCodeStyleManager.getInstance(body.getProject()).shortenClassReferences(stmt)[ FD ]
Line_2 $$ private void createListener() -->Line_5 $$ for (int i = 0; i < mySelection.size(); i++) [ CD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_87 $$ final Editor editor = getEditor()[ CD ]
Line_2 $$ private void createListener() -->Line_9 $$ if (!FileModificationService.getInstance().preparePsiElementForWrite(myClass))[ CD ]
Line_78 $$ final Ref<PsiClass> newClassRef = new Ref<PsiClass>()-->Line_83 $$ newClassRef.set(aClass)[ FD ]
Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))-->Line_20 $$ if (listenerClass == null) [ FD ]
Line_13 $$ final Module module = ModuleUtil.findModuleForPsiElement(myClass)-->Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
Line_3 $$ RadRootContainer root = (RadRootContainer) FormEditingUtil.getRoot(mySelection.get(0))-->Line_6 $$ boundFields[i] = BindingProperty.findBoundField(root, mySelection.get(i).getBinding())[ FD ]
Line_34 $$ if (boundFields.length == 1) -->Line_37 $$ builder.append(myDescriptor.getAddListenerMethod().getName())[ CD ]
Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))-->Line_50 $$ builder.append(listenerClass.getQualifiedName())[ FD ]
Line_90 $$ if (brace != null) -->Line_91 $$ editor.getCaretModel().moveToOffset(brace.getTextOffset())[ CD ]
Line_70 $$ final FileEditor[] fileEditors = virtualFile != null ? FileEditorManager.getInstance(myClass.getProject()).openFile(virtualFile, true, true) : null-->Line_107 $$ if (fileEditors != null) [ FD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_27 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(myClass.getProject()).getElementFactory()[ FD ]
Line_12 $$ PsiMethod constructor = findConstructorToInsert(myClass)-->Line_63 $$ PsiElement addStmt = factory.createStatementFromText(field.getName() + "." + myDescriptor.getAddListenerMethod().getName() + "(" + variableName + ");", constructor)[ FD ]
Line_20 $$ if (listenerClass == null) -->Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ CD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_74 $$ final PsiElement anonymousClassStatement = ptr.getElement()[ CD ]
Line_14 $$ PsiClass listenerClass = null-->Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
Line_96 $$ if (!OverrideImplementExploreUtil.getMethodSignaturesToImplement(newClass).isEmpty()) -->Line_97 $$ OverrideImplementUtil.chooseAndImplementMethods(newClass.getProject(), editor, newClass)[ CD ]
Line_12 $$ PsiMethod constructor = findConstructorToInsert(myClass)-->Line_28 $$ final PsiCodeBlock body = constructor.getBody()[ FD ]
Line_62 $$ for (PsiField field : boundFields) -->Line_63 $$ PsiElement addStmt = factory.createStatementFromText(field.getName() + "." + myDescriptor.getAddListenerMethod().getName() + "(" + variableName + ");", constructor)[ FD ]
Line_14 $$ PsiClass listenerClass = null-->Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
Line_41 $$ if (body.getLastBodyElement() == null) -->Line_45 $$ variableName = codeStyleManager.suggestUniqueVariableName("listener", body.getLastBodyElement(), false)[ CD ]
Line_59 $$ stmt = (PsiStatement) JavaCodeStyleManager.getInstance(body.getProject()).shortenClassReferences(stmt)-->Line_68 $$ final SmartPsiElementPointer ptr = SmartPointerManager.getInstance(myClass.getProject()).createSmartPsiElementPointer(stmt)[ FD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_86 $$ final PsiClass newClass = newClassRef.get()[ CD ]
Line_14 $$ PsiClass listenerClass = null-->Line_23 $$ if (listenerClass == null) [ FD ]
Line_14 $$ PsiClass listenerClass = null-->Line_20 $$ if (listenerClass == null) [ FD ]
Line_78 $$ final Ref<PsiClass> newClassRef = new Ref<PsiClass>()-->Line_86 $$ final PsiClass newClass = newClassRef.get()[ FD ]
Line_93 $$ CommandProcessor.getInstance().executeCommand(myClass.getProject(), new Runnable() -->Line_96 $$ if (!OverrideImplementExploreUtil.getMethodSignaturesToImplement(newClass).isEmpty()) [ CD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_13 $$ final Module module = ModuleUtil.findModuleForPsiElement(myClass)[ FD ]
Line_13 $$ final Module module = ModuleUtil.findModuleForPsiElement(myClass)-->Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
Line_28 $$ final PsiCodeBlock body = constructor.getBody()-->Line_64 $$ addStmt = body.addAfter(addStmt, anchor)[ FD ]
Line_109 $$ if (fileEditor instanceof TextEditor) -->Line_110 $$ return ((TextEditor) fileEditor).getEditor()[ CD ]
Line_5 $$ for (int i = 0; i < mySelection.size(); i++) -->Line_6 $$ boundFields[i] = BindingProperty.findBoundField(root, mySelection.get(i).getBinding())[ CD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
Line_42 $$ variableName = "listener"-->Line_47 $$ builder.append(variableName).append("=")[ FD ]
Line_69 $$ final VirtualFile virtualFile = PsiUtilCore.getVirtualFile(myClass)-->Line_70 $$ final FileEditor[] fileEditors = virtualFile != null ? FileEditorManager.getInstance(myClass.getProject()).openFile(virtualFile, true, true) : null[ FD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_114 $$ return null[ CD ]
Line_16 $$ if (listenerClassName.endsWith(LISTENER_SUFFIX)) -->Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ CD ]
Line_71 $$ IdeFocusManager.findInstance().doWhenFocusSettlesDown(new Runnable() -->Line_79 $$ anonymousClassStatement.accept(new JavaRecursiveElementWalkingVisitor() [ CD ]
Line_58 $$ stmt = (PsiStatement) body.addAfter(stmt, body.getLastBodyElement())-->Line_59 $$ stmt = (PsiStatement) JavaCodeStyleManager.getInstance(body.getProject()).shortenClassReferences(stmt)[ FD ]
Line_34 $$ if (boundFields.length == 1) -->Line_40 $$ builder.append(listenerClass.getQualifiedName()).append(" ")[ CD ]
Line_2 $$ private void createListener() -->Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()[ CD ]
Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))-->Line_40 $$ builder.append(listenerClass.getQualifiedName()).append(" ")[ FD ]
Line_63 $$ PsiElement addStmt = factory.createStatementFromText(field.getName() + "." + myDescriptor.getAddListenerMethod().getName() + "(" + variableName + ");", constructor)-->Line_64 $$ addStmt = body.addAfter(addStmt, anchor)[ FD ]
Line_14 $$ PsiClass listenerClass = null-->Line_50 $$ builder.append(listenerClass.getQualifiedName())[ FD ]
Line_34 $$ if (boundFields.length == 1) -->Line_36 $$ builder.append(".")[ CD ]
Line_8 $$ final PsiClass myClass = boundFields[0].getContainingClass()-->Line_9 $$ if (!FileModificationService.getInstance().preparePsiElementForWrite(myClass))[ FD ]
Line_34 $$ if (boundFields.length == 1) -->Line_35 $$ builder.append(boundFields[0].getName())[ CD ]
Line_14 $$ PsiClass listenerClass = null-->Line_40 $$ builder.append(listenerClass.getQualifiedName()).append(" ")[ FD ]
Line_18 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(adapterClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))-->Line_21 $$ listenerClass = JavaPsiFacade.getInstance(myClass.getProject()).findClass(listenerClassName, GlobalSearchScope.moduleWithDependenciesAndLibrariesScope(module))[ FD ]
