Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_6 $$ int expirationDateMonth = ParamUtil.getInteger(actionRequest, "expirationDateMonth")[ CD ]
Line_7 $$ int expirationDateDay = ParamUtil.getInteger(actionRequest, "expirationDateDay")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_14 $$ expirationDateHour += 12-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_28 $$ Map<Locale, String> localeChoiceDescriptionMap = LocalizationUtil.getLocalizationMap(actionRequest, CHOICE_DESCRIPTION_PREFIX + id)-->Line_31 $$ choice.setDescriptionMap(localeChoiceDescriptionMap)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_9 $$ int expirationDateHour = ParamUtil.getInteger(actionRequest, "expirationDateHour")[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_27 $$ String choiceName = ParamUtil.getString(actionRequest, CHOICE_NAME_PREFIX + id)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_18 $$ Enumeration<String> enu = actionRequest.getParameterNames()[ CD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_6 $$ int expirationDateMonth = ParamUtil.getInteger(actionRequest, "expirationDateMonth")[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_9 $$ int expirationDateHour = ParamUtil.getInteger(actionRequest, "expirationDateHour")[ CD ]
Line_13 $$ if (expirationDateAmPm == Calendar.PM) -->Line_14 $$ expirationDateHour += 12[ CD ]
Line_4 $$ Map<Locale, String> titleMap = LocalizationUtil.getLocalizationMap(actionRequest, "title")-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_38 $$ ServiceContext serviceContext = ServiceContextFactory.getInstance(PollsQuestion.class.getName(), actionRequest)-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_19 $$ while (enu.hasMoreElements()) [ CD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_7 $$ int expirationDateDay = ParamUtil.getInteger(actionRequest, "expirationDateDay")[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ long questionId = ParamUtil.getLong(actionRequest, "questionId")[ FD ]
Line_9 $$ int expirationDateHour = ParamUtil.getInteger(actionRequest, "expirationDateHour")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_8 $$ int expirationDateYear = ParamUtil.getInteger(actionRequest, "expirationDateYear")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_14 $$ expirationDateHour += 12-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_29 $$ PollsChoice choice = PollsChoiceUtil.create(0)-->Line_31 $$ choice.setDescriptionMap(localeChoiceDescriptionMap)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ int expirationDateMinute = ParamUtil.getInteger(actionRequest, "expirationDateMinute")[ FD ]
Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)-->Line_41 $$ addAndStoreSelection(actionRequest, question)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_7 $$ int expirationDateDay = ParamUtil.getInteger(actionRequest, "expirationDateDay")[ CD ]
Line_3 $$ long questionId = ParamUtil.getLong(actionRequest, "questionId")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_29 $$ PollsChoice choice = PollsChoiceUtil.create(0)-->Line_32 $$ choices.add(choice)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_17 $$ Set<String> readParameters = new HashSet()[ CD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ int expirationDateAmPm = ParamUtil.getInteger(actionRequest, "expirationDateAmPm")[ CD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_8 $$ int expirationDateYear = ParamUtil.getInteger(actionRequest, "expirationDateYear")[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_13 $$ if (expirationDateAmPm == Calendar.PM) [ CD ]
Line_17 $$ Set<String> readParameters = new HashSet()-->Line_24 $$ if (readParameters.contains(id)) [ FD ]
Line_7 $$ int expirationDateDay = ParamUtil.getInteger(actionRequest, "expirationDateDay")-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_11 $$ int expirationDateAmPm = ParamUtil.getInteger(actionRequest, "expirationDateAmPm")[ FD ]
Line_39 $$ if (questionId <= 0) -->Line_41 $$ addAndStoreSelection(actionRequest, question)[ CD ]
Line_6 $$ int expirationDateMonth = ParamUtil.getInteger(actionRequest, "expirationDateMonth")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_39 $$ if (questionId <= 0) -->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ CD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_3 $$ long questionId = ParamUtil.getLong(actionRequest, "questionId")[ CD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ Map<Locale, String> titleMap = LocalizationUtil.getLocalizationMap(actionRequest, "title")[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_4 $$ Map<Locale, String> titleMap = LocalizationUtil.getLocalizationMap(actionRequest, "title")[ CD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_10 $$ int expirationDateMinute = ParamUtil.getInteger(actionRequest, "expirationDateMinute")[ CD ]
Line_16 $$ List<PollsChoice> choices = new ArrayList()-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_17 $$ Set<String> readParameters = new HashSet()-->Line_33 $$ readParameters.add(id)[ FD ]
Line_5 $$ Map<Locale, String> descriptionMap = LocalizationUtil.getLocalizationMap(actionRequest, "description")-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_16 $$ List<PollsChoice> choices = new ArrayList()-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_3 $$ long questionId = ParamUtil.getLong(actionRequest, "questionId")-->Line_39 $$ if (questionId <= 0) [ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_39 $$ if (questionId <= 0) [ CD ]
Line_27 $$ String choiceName = ParamUtil.getString(actionRequest, CHOICE_NAME_PREFIX + id)-->Line_30 $$ choice.setName(choiceName)[ FD ]
Line_19 $$ while (enu.hasMoreElements()) -->Line_21 $$ if (param.startsWith(CHOICE_DESCRIPTION_PREFIX)) [ CD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_8 $$ int expirationDateYear = ParamUtil.getInteger(actionRequest, "expirationDateYear")[ CD ]
Line_4 $$ Map<Locale, String> titleMap = LocalizationUtil.getLocalizationMap(actionRequest, "title")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_28 $$ Map<Locale, String> localeChoiceDescriptionMap = LocalizationUtil.getLocalizationMap(actionRequest, CHOICE_DESCRIPTION_PREFIX + id)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_18 $$ Enumeration<String> enu = actionRequest.getParameterNames()[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ Map<Locale, String> descriptionMap = LocalizationUtil.getLocalizationMap(actionRequest, "description")[ FD ]
Line_9 $$ int expirationDateHour = ParamUtil.getInteger(actionRequest, "expirationDateHour")-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_12 $$ boolean neverExpire = ParamUtil.getBoolean(actionRequest, "neverExpire")-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_12 $$ boolean neverExpire = ParamUtil.getBoolean(actionRequest, "neverExpire")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_23 $$ String id = param.substring(CHOICE_DESCRIPTION_PREFIX.length(), param.indexOf(CharPool.UNDERLINE))-->Line_24 $$ if (readParameters.contains(id)) [ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ boolean neverExpire = ParamUtil.getBoolean(actionRequest, "neverExpire")[ FD ]
Line_6 $$ int expirationDateMonth = ParamUtil.getInteger(actionRequest, "expirationDateMonth")-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_8 $$ int expirationDateYear = ParamUtil.getInteger(actionRequest, "expirationDateYear")-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_29 $$ PollsChoice choice = PollsChoiceUtil.create(0)-->Line_30 $$ choice.setName(choiceName)[ FD ]
Line_20 $$ String param = enu.nextElement()-->Line_23 $$ String id = param.substring(CHOICE_DESCRIPTION_PREFIX.length(), param.indexOf(CharPool.UNDERLINE))[ FD ]
Line_18 $$ Enumeration<String> enu = actionRequest.getParameterNames()-->Line_19 $$ while (enu.hasMoreElements()) [ FD ]
Line_16 $$ List<PollsChoice> choices = new ArrayList()-->Line_32 $$ choices.add(choice)[ FD ]
Line_9 $$ int expirationDateHour = ParamUtil.getInteger(actionRequest, "expirationDateHour")-->Line_14 $$ expirationDateHour += 12[ FD ]
Line_11 $$ int expirationDateAmPm = ParamUtil.getInteger(actionRequest, "expirationDateAmPm")-->Line_13 $$ if (expirationDateAmPm == Calendar.PM) [ FD ]
Line_19 $$ while (enu.hasMoreElements()) -->Line_20 $$ String param = enu.nextElement()[ CD ]
Line_39 $$ if (questionId <= 0) -->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ CD ]
Line_38 $$ ServiceContext serviceContext = ServiceContextFactory.getInstance(PollsQuestion.class.getName(), actionRequest)-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_10 $$ int expirationDateMinute = ParamUtil.getInteger(actionRequest, "expirationDateMinute")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_5 $$ Map<Locale, String> descriptionMap = LocalizationUtil.getLocalizationMap(actionRequest, "description")[ CD ]
Line_23 $$ String id = param.substring(CHOICE_DESCRIPTION_PREFIX.length(), param.indexOf(CharPool.UNDERLINE))-->Line_33 $$ readParameters.add(id)[ FD ]
Line_18 $$ Enumeration<String> enu = actionRequest.getParameterNames()-->Line_20 $$ String param = enu.nextElement()[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_38 $$ ServiceContext serviceContext = ServiceContextFactory.getInstance(PollsQuestion.class.getName(), actionRequest)[ CD ]
Line_20 $$ String param = enu.nextElement()-->Line_21 $$ if (param.startsWith(CHOICE_DESCRIPTION_PREFIX)) [ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_41 $$ addAndStoreSelection(actionRequest, question)[ FD ]
Line_10 $$ int expirationDateMinute = ParamUtil.getInteger(actionRequest, "expirationDateMinute")-->Line_40 $$ PollsQuestion question = PollsQuestionServiceUtil.addQuestion(titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_12 $$ boolean neverExpire = ParamUtil.getBoolean(actionRequest, "neverExpire")[ CD ]
Line_5 $$ Map<Locale, String> descriptionMap = LocalizationUtil.getLocalizationMap(actionRequest, "description")-->Line_43 $$ PollsQuestionServiceUtil.updateQuestion(questionId, titleMap, descriptionMap, expirationDateMonth, expirationDateDay, expirationDateYear, expirationDateHour, expirationDateMinute, neverExpire, choices, serviceContext)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_38 $$ ServiceContext serviceContext = ServiceContextFactory.getInstance(PollsQuestion.class.getName(), actionRequest)[ FD ]
Line_2 $$ protected void updateQuestion(PortletConfig portletConfig, ActionRequest actionRequest, ActionResponse actionResponse) throws Exception -->Line_16 $$ List<PollsChoice> choices = new ArrayList()[ CD ]
