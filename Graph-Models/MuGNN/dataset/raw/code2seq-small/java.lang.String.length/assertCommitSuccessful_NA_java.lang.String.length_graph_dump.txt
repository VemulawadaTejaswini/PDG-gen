Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_12 $$ String message = "unsuccessful commit:"[ CD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_25 $$ String fileText = psiFile.getText()[ CD ]
Line_24 $$ message += "\npsiFile.length=" + psiLength-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_18 $$ message += "\nfile class=" + psiFile.getClass()[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_17 $$ message += "\nfile=" + psiFile.getName()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_5 $$ int psiLength = psiFile.getTextLength()-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_18 $$ message += "\nfile class=" + psiFile.getClass()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_24 $$ message += "\npsiFile.length=" + psiLength-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_7 $$ boolean committed = !manager.isUncommited(document)[ CD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_23 $$ message += "\ndoc.length=" + docLength-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_24 $$ message += "\npsiFile.length=" + psiLength-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ CD ]
Line_31 $$ message += "\nnode.length=" + node.getTextLength()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_30 $$ if (node != null) -->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ CD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_18 $$ message += "\nfile class=" + psiFile.getClass()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_29 $$ FileASTNode node = psiFile.getNode()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ CD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_30 $$ if (node != null) -->Line_32 $$ String nodeText = node.getText()[ CD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))[ CD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_23 $$ message += "\ndoc.length=" + docLength-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_11 $$ FileViewProvider viewProvider = psiFile.getViewProvider()-->Line_37 $$ VirtualFile virtualFile = viewProvider.getVirtualFile()[ FD ]
Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_41 $$ throw new LogEventException("Commit unsuccessful", message, new Attachment(virtualFile.getPath() + "_file.txt", fileText), createAstAttachment(psiFile, psiFile), new Attachment("docText.txt", document.getText()))[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_17 $$ message += "\nfile=" + psiFile.getName()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_16 $$ message += "\ncommitted=" + committed[ CD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_11 $$ FileViewProvider viewProvider = psiFile.getViewProvider()-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_26 $$ if (fileText != null) [ CD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_18 $$ message += "\nfile class=" + psiFile.getClass()[ FD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_7 $$ boolean committed = !manager.isUncommited(document)-->Line_16 $$ message += "\ncommitted=" + committed[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_11 $$ FileViewProvider viewProvider = psiFile.getViewProvider()[ CD ]
Line_29 $$ FileASTNode node = psiFile.getNode()-->Line_30 $$ if (node != null) [ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ CD ]
Line_4 $$ int docLength = document.getTextLength()-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_16 $$ message += "\ncommitted=" + committed[ FD ]
Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_11 $$ FileViewProvider viewProvider = psiFile.getViewProvider()[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_23 $$ message += "\ndoc.length=" + docLength-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_23 $$ message += "\ndoc.length=" + docLength[ CD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_6 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(psiFile.getProject())[ FD ]
Line_34 $$ message += "\nnode.text.length=" + nodeText.length()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_18 $$ message += "\nfile class=" + psiFile.getClass()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_17 $$ message += "\nfile=" + psiFile.getName()[ CD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_18 $$ message += "\nfile class=" + psiFile.getClass()[ FD ]
Line_38 $$ message += "\nvirtualFile=" + virtualFile-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_17 $$ message += "\nfile=" + psiFile.getName()[ FD ]
Line_23 $$ message += "\ndoc.length=" + docLength-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_18 $$ message += "\nfile class=" + psiFile.getClass()[ CD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_37 $$ VirtualFile virtualFile = viewProvider.getVirtualFile()-->Line_41 $$ throw new LogEventException("Commit unsuccessful", message, new Attachment(virtualFile.getPath() + "_file.txt", fileText), createAstAttachment(psiFile, psiFile), new Attachment("docText.txt", document.getText()))[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_29 $$ FileASTNode node = psiFile.getNode()-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_30 $$ if (node != null) -->Line_33 $$ if (nodeText != null) [ CD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_24 $$ message += "\npsiFile.length=" + psiLength[ CD ]
Line_3 $$ Document document = editor.getDocument()-->Line_7 $$ boolean committed = !manager.isUncommited(document)[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_17 $$ message += "\nfile=" + psiFile.getName()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)[ FD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_26 $$ if (fileText != null) -->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ CD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_37 $$ VirtualFile virtualFile = viewProvider.getVirtualFile()[ CD ]
Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_34 $$ message += "\nnode.text.length=" + nodeText.length()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_23 $$ message += "\ndoc.length=" + docLength-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_4 $$ int docLength = document.getTextLength()[ CD ]
Line_31 $$ message += "\nnode.length=" + node.getTextLength()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ CD ]
Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ FD ]
Line_25 $$ String fileText = psiFile.getText()-->Line_26 $$ if (fileText != null) [ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_18 $$ message += "\nfile class=" + psiFile.getClass()[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_37 $$ VirtualFile virtualFile = viewProvider.getVirtualFile()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_24 $$ message += "\npsiFile.length=" + psiLength-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_41 $$ throw new LogEventException("Commit unsuccessful", message, new Attachment(virtualFile.getPath() + "_file.txt", fileText), createAstAttachment(psiFile, psiFile), new Attachment("docText.txt", document.getText()))[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_29 $$ FileASTNode node = psiFile.getNode()[ CD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_5 $$ int psiLength = psiFile.getTextLength()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_34 $$ message += "\nnode.text.length=" + nodeText.length()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_3 $$ Document document = editor.getDocument()[ FD ]
Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_29 $$ FileASTNode node = psiFile.getNode()-->Line_32 $$ String nodeText = node.getText()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_5 $$ int psiLength = psiFile.getTextLength()[ CD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)[ CD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_8 $$ if (docLength == psiLength && committed) [ CD ]
Line_24 $$ message += "\npsiFile.length=" + psiLength-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ CD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_16 $$ message += "\ncommitted=" + committed[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_16 $$ message += "\ncommitted=" + committed[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_31 $$ message += "\nnode.length=" + node.getTextLength()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)[ CD ]
Line_8 $$ if (docLength == psiLength && committed) -->Line_9 $$ return[ CD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_30 $$ if (node != null) [ CD ]
Line_6 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(psiFile.getProject())-->Line_7 $$ boolean committed = !manager.isUncommited(document)[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_4 $$ int docLength = document.getTextLength()[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_3 $$ Document document = editor.getDocument()-->Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))[ FD ]
Line_33 $$ if (nodeText != null) -->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ CD ]
Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_38 $$ message += "\nvirtualFile=" + virtualFile-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_37 $$ VirtualFile virtualFile = viewProvider.getVirtualFile()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_23 $$ message += "\ndoc.length=" + docLength-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_6 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(psiFile.getProject())-->Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_32 $$ String nodeText = node.getText()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_6 $$ PsiDocumentManager manager = PsiDocumentManager.getInstance(psiFile.getProject())[ CD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_16 $$ message += "\ncommitted=" + committed[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_17 $$ message += "\nfile=" + psiFile.getName()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_3 $$ Document document = editor.getDocument()[ CD ]
Line_7 $$ boolean committed = !manager.isUncommited(document)-->Line_8 $$ if (docLength == psiLength && committed) [ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()[ FD ]
Line_32 $$ String nodeText = node.getText()-->Line_33 $$ if (nodeText != null) [ FD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ FD ]
Line_23 $$ message += "\ndoc.length=" + docLength-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_18 $$ message += "\nfile class=" + psiFile.getClass()-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_24 $$ message += "\npsiFile.length=" + psiLength-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_31 $$ message += "\nnode.length=" + node.getTextLength()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_40 $$ message += "\n" + DebugUtil.currentStackTrace()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_25 $$ String fileText = psiFile.getText()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_34 $$ message += "\nnode.text.length=" + nodeText.length()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_22 $$ message += "\nlanguage=" + psiFile.getLanguage()[ CD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_38 $$ message += "\nvirtualFile=" + virtualFile[ CD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_24 $$ message += "\npsiFile.length=" + psiLength[ FD ]
Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)-->Line_17 $$ message += "\nfile=" + psiFile.getName()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_20 $$ message += "\nfile.physical=" + psiFile.isPhysical()-->Line_31 $$ message += "\nnode.length=" + node.getTextLength()[ FD ]
Line_16 $$ message += "\ncommitted=" + committed-->Line_39 $$ message += "\nvirtualFile.class=" + virtualFile.getClass()[ FD ]
Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()-->Line_23 $$ message += "\ndoc.length=" + docLength[ FD ]
Line_17 $$ message += "\nfile=" + psiFile.getName()-->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ FD ]
Line_13 $$ message += "\nmatching=" + (psiFile == manager.getPsiFile(document))-->Line_14 $$ message += "\ninjectedEditor=" + (editor instanceof EditorWindow)[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_21 $$ message += "\nfile.eventSystemEnabled=" + viewProvider.isEventSystemEnabled()[ FD ]
Line_12 $$ String message = "unsuccessful commit:"-->Line_19 $$ message += "\nfile.valid=" + psiFile.isValid()[ FD ]
Line_25 $$ String fileText = psiFile.getText()-->Line_27 $$ message += "\npsiFile.text.length=" + fileText.length()[ FD ]
Line_2 $$ static void assertCommitSuccessful(Editor editor, PsiFile psiFile) -->Line_15 $$ message += "\ninjectedFile=" + InjectedLanguageManager.getInstance(psiFile.getProject()).isInjectedFragment(psiFile)[ FD ]
