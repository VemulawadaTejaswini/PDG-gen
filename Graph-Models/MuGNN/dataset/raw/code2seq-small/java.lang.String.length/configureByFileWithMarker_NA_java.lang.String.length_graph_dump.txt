Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_10 $$ return myFile.findElementAt(offset)[ CD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_3 $$ final VirtualFile vFile = VfsTestUtil.findFileByCaseSensitivePath(filePath)[ CD ]
Line_4 $$ String fileText = VfsUtil.loadText(vFile)-->Line_9 $$ myFile = createFile(vFile.getName(), fileText)[ FD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_6 $$ int offset = fileText.indexOf(marker)[ CD ]
Line_3 $$ final VirtualFile vFile = VfsTestUtil.findFileByCaseSensitivePath(filePath)-->Line_4 $$ String fileText = VfsUtil.loadText(vFile)[ FD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_5 $$ fileText = StringUtil.convertLineSeparators(fileText)[ CD ]
Line_5 $$ fileText = StringUtil.convertLineSeparators(fileText)-->Line_6 $$ int offset = fileText.indexOf(marker)[ FD ]
Line_3 $$ final VirtualFile vFile = VfsTestUtil.findFileByCaseSensitivePath(filePath)-->Line_9 $$ myFile = createFile(vFile.getName(), fileText)[ FD ]
Line_6 $$ int offset = fileText.indexOf(marker)-->Line_8 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + marker.length())[ FD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_7 $$ assertTrue(offset >= 0)[ CD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_9 $$ myFile = createFile(vFile.getName(), fileText)[ CD ]
Line_6 $$ int offset = fileText.indexOf(marker)-->Line_10 $$ return myFile.findElementAt(offset)[ FD ]
Line_8 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + marker.length())-->Line_9 $$ myFile = createFile(vFile.getName(), fileText)[ FD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_6 $$ int offset = fileText.indexOf(marker)[ FD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_8 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + marker.length())[ CD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_3 $$ final VirtualFile vFile = VfsTestUtil.findFileByCaseSensitivePath(filePath)[ FD ]
Line_5 $$ fileText = StringUtil.convertLineSeparators(fileText)-->Line_8 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + marker.length())[ FD ]
Line_4 $$ String fileText = VfsUtil.loadText(vFile)-->Line_8 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + marker.length())[ FD ]
Line_4 $$ String fileText = VfsUtil.loadText(vFile)-->Line_5 $$ fileText = StringUtil.convertLineSeparators(fileText)[ FD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_4 $$ String fileText = VfsUtil.loadText(vFile)[ CD ]
Line_4 $$ String fileText = VfsUtil.loadText(vFile)-->Line_6 $$ int offset = fileText.indexOf(marker)[ FD ]
Line_2 $$ protected PsiElement configureByFileWithMarker(String filePath, String marker) throws Exception -->Line_8 $$ fileText = fileText.substring(0, offset) + fileText.substring(offset + marker.length())[ FD ]
Line_5 $$ fileText = StringUtil.convertLineSeparators(fileText)-->Line_9 $$ myFile = createFile(vFile.getName(), fileText)[ FD ]
