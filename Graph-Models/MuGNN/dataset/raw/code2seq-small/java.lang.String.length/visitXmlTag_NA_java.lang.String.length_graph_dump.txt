Line_37 $$ final DomElement element = DomManager.getDomManager(tag.getProject()).getDomElement(tag)-->Line_41 $$ final RngGrammar rngGrammar = element.getParentOfType(RngGrammar.class, true)[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_34 $$ if (!(grandParent instanceof XmlTag)) [ CD ]
Line_34 $$ if (!(grandParent instanceof XmlTag)) -->Line_35 $$ return[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_19 $$ final XmlAttributeValue value = attr.getValueElement()[ CD ]
Line_10 $$ if (!tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) -->Line_11 $$ return[ CD ]
Line_7 $$ if (!tag.getLocalName().equals("define")) -->Line_8 $$ return[ CD ]
Line_19 $$ final XmlAttributeValue value = attr.getValueElement()-->Line_46 $$ if (processUsages(tag, value, new LocalSearchScope(file)))[ FD ]
Line_43 $$ if (processUsages(tag, value, new LocalSearchScope(rngGrammar.getXmlTag())))-->Line_44 $$ return[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_3 $$ final PsiFile file = tag.getContainingFile()[ FD ]
Line_49 $$ final PsiElementProcessor.CollectElements<XmlFile> collector = new PsiElementProcessor.CollectElements<XmlFile>()-->Line_50 $$ RelaxIncludeIndex.processBackwardDependencies((XmlFile) file, collector)[ FD ]
Line_17 $$ if (attr == null)-->Line_18 $$ return[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_30 $$ if (!"name".equals(((XmlAttribute) parent).getName())) [ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_22 $$ final String s = value.getValue()[ CD ]
Line_26 $$ final PsiElement parent = value.getParent()-->Line_33 $$ final PsiElement grandParent = parent.getParent()[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_37 $$ final DomElement element = DomManager.getDomManager(tag.getProject()).getDomElement(tag)[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_16 $$ final XmlAttribute attr = tag.getAttribute("name")[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_3 $$ final PsiFile file = tag.getContainingFile()[ CD ]
Line_30 $$ if (!"name".equals(((XmlAttribute) parent).getName())) -->Line_31 $$ return[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_51 $$ if (processUsages(tag, value, new LocalSearchScope(collector.toArray())))[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_37 $$ final DomElement element = DomManager.getDomManager(tag.getProject()).getDomElement(tag)[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_17 $$ if (attr == null)[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_16 $$ final XmlAttribute attr = tag.getAttribute("name")[ FD ]
Line_49 $$ final PsiElementProcessor.CollectElements<XmlFile> collector = new PsiElementProcessor.CollectElements<XmlFile>()-->Line_51 $$ if (processUsages(tag, value, new LocalSearchScope(collector.toArray())))[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_10 $$ if (!tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) [ FD ]
Line_27 $$ if (!(parent instanceof XmlAttribute)) -->Line_28 $$ return[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_10 $$ if (!tag.getNamespace().equals(ApplicationLoader.RNG_NAMESPACE)) [ CD ]
Line_19 $$ final XmlAttributeValue value = attr.getValueElement()-->Line_53 $$ myHolder.registerProblem(value, "Unreferenced define", ProblemHighlightType.LIKE_UNUSED_SYMBOL, new MyFix<XmlTag>(tag))[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_51 $$ if (processUsages(tag, value, new LocalSearchScope(collector.toArray())))[ FD ]
Line_51 $$ if (processUsages(tag, value, new LocalSearchScope(collector.toArray())))-->Line_52 $$ return[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_41 $$ final RngGrammar rngGrammar = element.getParentOfType(RngGrammar.class, true)[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_42 $$ if (rngGrammar != null) [ CD ]
Line_42 $$ if (rngGrammar != null) -->Line_43 $$ if (processUsages(tag, value, new LocalSearchScope(rngGrammar.getXmlTag())))[ CD ]
Line_23 $$ if (s == null || s.length() == 0) -->Line_24 $$ return[ CD ]
Line_42 $$ if (rngGrammar != null) -->Line_46 $$ if (processUsages(tag, value, new LocalSearchScope(file)))[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_46 $$ if (processUsages(tag, value, new LocalSearchScope(file)))[ FD ]
Line_19 $$ final XmlAttributeValue value = attr.getValueElement()-->Line_51 $$ if (processUsages(tag, value, new LocalSearchScope(collector.toArray())))[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_7 $$ if (!tag.getLocalName().equals("define")) [ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_20 $$ if (value == null)[ CD ]
Line_19 $$ final XmlAttributeValue value = attr.getValueElement()-->Line_22 $$ final String s = value.getValue()[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_33 $$ final PsiElement grandParent = parent.getParent()[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_43 $$ if (processUsages(tag, value, new LocalSearchScope(rngGrammar.getXmlTag())))[ FD ]
Line_38 $$ if (element == null) -->Line_39 $$ return[ CD ]
Line_19 $$ final XmlAttributeValue value = attr.getValueElement()-->Line_43 $$ if (processUsages(tag, value, new LocalSearchScope(rngGrammar.getXmlTag())))[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_53 $$ myHolder.registerProblem(value, "Unreferenced define", ProblemHighlightType.LIKE_UNUSED_SYMBOL, new MyFix<XmlTag>(tag))[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_4 $$ if (file.getFileType() != StdFileTypes.XML) [ CD ]
Line_19 $$ final XmlAttributeValue value = attr.getValueElement()-->Line_26 $$ final PsiElement parent = value.getParent()[ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_13 $$ if (tag.getAttribute("combine") != null) [ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_49 $$ final PsiElementProcessor.CollectElements<XmlFile> collector = new PsiElementProcessor.CollectElements<XmlFile>()[ CD ]
Line_37 $$ final DomElement element = DomManager.getDomManager(tag.getProject()).getDomElement(tag)-->Line_38 $$ if (element == null) [ FD ]
Line_22 $$ final String s = value.getValue()-->Line_23 $$ if (s == null || s.length() == 0) [ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_50 $$ RelaxIncludeIndex.processBackwardDependencies((XmlFile) file, collector)[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_26 $$ final PsiElement parent = value.getParent()[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_13 $$ if (tag.getAttribute("combine") != null) [ FD ]
Line_20 $$ if (value == null)-->Line_21 $$ return[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_23 $$ if (s == null || s.length() == 0) [ CD ]
Line_16 $$ final XmlAttribute attr = tag.getAttribute("name")-->Line_19 $$ final XmlAttributeValue value = attr.getValueElement()[ FD ]
Line_19 $$ final XmlAttributeValue value = attr.getValueElement()-->Line_20 $$ if (value == null)[ FD ]
Line_41 $$ final RngGrammar rngGrammar = element.getParentOfType(RngGrammar.class, true)-->Line_43 $$ if (processUsages(tag, value, new LocalSearchScope(rngGrammar.getXmlTag())))[ FD ]
Line_13 $$ if (tag.getAttribute("combine") != null) -->Line_14 $$ return[ CD ]
Line_16 $$ final XmlAttribute attr = tag.getAttribute("name")-->Line_17 $$ if (attr == null)[ FD ]
Line_41 $$ final RngGrammar rngGrammar = element.getParentOfType(RngGrammar.class, true)-->Line_42 $$ if (rngGrammar != null) [ FD ]
Line_3 $$ final PsiFile file = tag.getContainingFile()-->Line_4 $$ if (file.getFileType() != StdFileTypes.XML) [ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_38 $$ if (element == null) [ CD ]
Line_46 $$ if (processUsages(tag, value, new LocalSearchScope(file)))-->Line_47 $$ return[ CD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_7 $$ if (!tag.getLocalName().equals("define")) [ FD ]
Line_2 $$ public void visitXmlTag(XmlTag tag) -->Line_27 $$ if (!(parent instanceof XmlAttribute)) [ CD ]
Line_4 $$ if (file.getFileType() != StdFileTypes.XML) -->Line_5 $$ return[ CD ]
