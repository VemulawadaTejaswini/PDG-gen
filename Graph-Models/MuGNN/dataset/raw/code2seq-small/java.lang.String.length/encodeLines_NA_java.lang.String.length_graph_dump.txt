Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_4 $$ if (blockLen <= 0) [ CD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_3 $$ int blockLen = (lineLen * 3) / 4[ CD ]
Line_9 $$ StringBuilder buf = new StringBuilder(bufLen)-->Line_13 $$ buf.append(encode(in, iOff + ip, l, charMap))[ FD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_8 $$ int bufLen = ((iLen + 2) / 3) * 4 + lines * lineSeparator.length()[ FD ]
Line_9 $$ StringBuilder buf = new StringBuilder(bufLen)-->Line_14 $$ buf.append(lineSeparator)[ FD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_10 $$ int ip = 0[ CD ]
Line_3 $$ int blockLen = (lineLen * 3) / 4-->Line_4 $$ if (blockLen <= 0) [ FD ]
Line_10 $$ int ip = 0-->Line_11 $$ while (ip < iLen) [ FD ]
Line_15 $$ ip += l-->Line_11 $$ while (ip < iLen) [ FD ]
Line_11 $$ while (ip < iLen) -->Line_14 $$ buf.append(lineSeparator)[ CD ]
Line_12 $$ int l = Math.min(iLen - ip, blockLen)-->Line_15 $$ ip += l[ FD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_8 $$ int bufLen = ((iLen + 2) / 3) * 4 + lines * lineSeparator.length()[ CD ]
Line_11 $$ while (ip < iLen) -->Line_13 $$ buf.append(encode(in, iOff + ip, l, charMap))[ CD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_7 $$ int lines = (iLen + blockLen - 1) / blockLen[ CD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_9 $$ StringBuilder buf = new StringBuilder(bufLen)[ CD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_13 $$ buf.append(encode(in, iOff + ip, l, charMap))[ FD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_11 $$ while (ip < iLen) [ CD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_14 $$ buf.append(lineSeparator)[ FD ]
Line_11 $$ while (ip < iLen) -->Line_12 $$ int l = Math.min(iLen - ip, blockLen)[ CD ]
Line_11 $$ while (ip < iLen) -->Line_15 $$ ip += l[ CD ]
Line_10 $$ int ip = 0-->Line_15 $$ ip += l[ FD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_17 $$ return buf.toString()[ CD ]
Line_2 $$ public static String encodeLines(byte[] in, int iOff, int iLen, int lineLen, String lineSeparator, char[] charMap) -->Line_11 $$ while (ip < iLen) [ FD ]
Line_9 $$ StringBuilder buf = new StringBuilder(bufLen)-->Line_17 $$ return buf.toString()[ FD ]
Line_12 $$ int l = Math.min(iLen - ip, blockLen)-->Line_13 $$ buf.append(encode(in, iOff + ip, l, charMap))[ FD ]
Line_3 $$ int blockLen = (lineLen * 3) / 4-->Line_12 $$ int l = Math.min(iLen - ip, blockLen)[ FD ]
