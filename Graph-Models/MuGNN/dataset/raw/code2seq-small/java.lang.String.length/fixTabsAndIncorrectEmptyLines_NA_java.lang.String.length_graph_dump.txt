Line_35 $$ if (expectedTabCount == -1) -->Line_36 $$ if (line.endsWith(StringPool.OPEN_PARENTHESIS)) [ CD ]
Line_28 $$ int expectedTabCount = -1-->Line_37 $$ expectedTabCount = Math.max(JavaSourceProcessor.getLeadingTabCount(line), _indent.length()) + 1[ FD ]
Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)-->Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)[ FD ]
Line_36 $$ if (line.endsWith(StringPool.OPEN_PARENTHESIS)) -->Line_37 $$ expectedTabCount = Math.max(JavaSourceProcessor.getLeadingTabCount(line), _indent.length()) + 1[ CD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_27 $$ String newMethodNameAndParameters = methodNameAndParameters[ CD ]
Line_8 $$ Matcher matcher = methodNameAndParametersPattern.matcher(javaTermContent)-->Line_9 $$ if (!matcher.find()) [ FD ]
Line_30 $$ String line = lines[i]-->Line_36 $$ if (line.endsWith(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_16 $$ String trimmedJavaTermContent = StringUtil.trimTrailing(javaTermContent)-->Line_17 $$ if (!trimmedJavaTermContent.endsWith("\n\n" + _indent + StringPool.CLOSE_CURLY_BRACE)) [ FD ]
Line_32 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, _indent.length() + 1)-->Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)[ FD ]
Line_8 $$ Matcher matcher = methodNameAndParametersPattern.matcher(javaTermContent)-->Line_12 $$ String methodNameAndParameters = matcher.group()[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_7 $$ Pattern methodNameAndParametersPattern = Pattern.compile("\n" + _indent + "(private |protected |public ).*?(\\[ CD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_8 $$ Matcher matcher = methodNameAndParametersPattern.matcher(javaTermContent)[ CD ]
Line_15 $$ if (methodNameAndParameters.endsWith("-->Line_16 $$ String trimmedJavaTermContent = StringUtil.trimTrailing(javaTermContent)[ CD ]
Line_37 $$ expectedTabCount = Math.max(JavaSourceProcessor.getLeadingTabCount(line), _indent.length()) + 1-->Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)[ FD ]
Line_44 $$ if (previousLine.endsWith(StringPool.COMMA) || previousLine.endsWith(StringPool.OPEN_PARENTHESIS)) -->Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)[ CD ]
Line_31 $$ if (line.contains(_indent + "throws ")) -->Line_32 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, _indent.length() + 1)[ CD ]
Line_26 $$ boolean throwsException = methodNameAndParameters.contains(_indent + "throws ")-->Line_38 $$ if (throwsException && (expectedTabCount == (_indent.length() + 1))) [ FD ]
Line_23 $$ if (methodNameAndParameters.endsWith("-->Line_24 $$ _content = StringUtil.replace(_content, methodNameAndParameters, methodNameAndParameters + "\n")[ CD ]
Line_29 $$ for (int i = 0; i < lines.length; i++) -->Line_31 $$ if (line.contains(_indent + "throws ")) [ CD ]
Line_14 $$ if (lines.length == 1) -->Line_21 $$ return[ CD ]
Line_28 $$ int expectedTabCount = -1-->Line_39 $$ expectedTabCount += 1[ FD ]
Line_6 $$ String javaTermContent = "\n" + javaTerm.getContent()-->Line_8 $$ Matcher matcher = methodNameAndParametersPattern.matcher(javaTermContent)[ FD ]
Line_37 $$ expectedTabCount = Math.max(JavaSourceProcessor.getLeadingTabCount(line), _indent.length()) + 1-->Line_39 $$ expectedTabCount += 1[ FD ]
Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)-->Line_51 $$ _content = StringUtil.replace(_content, methodNameAndParameters, newMethodNameAndParameters)[ FD ]
Line_29 $$ for (int i = 0; i < lines.length; i++) -->Line_30 $$ String line = lines[i][ CD ]
Line_29 $$ for (int i = 0; i < lines.length; i++) -->Line_35 $$ if (expectedTabCount == -1) [ CD ]
Line_39 $$ expectedTabCount += 1-->Line_35 $$ if (expectedTabCount == -1) [ FD ]
Line_39 $$ expectedTabCount += 1-->Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_14 $$ if (lines.length == 1) [ CD ]
Line_12 $$ String methodNameAndParameters = matcher.group()-->Line_24 $$ _content = StringUtil.replace(_content, methodNameAndParameters, methodNameAndParameters + "\n")[ FD ]
Line_32 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, _indent.length() + 1)-->Line_51 $$ _content = StringUtil.replace(_content, methodNameAndParameters, newMethodNameAndParameters)[ FD ]
Line_30 $$ String line = lines[i]-->Line_32 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, _indent.length() + 1)[ FD ]
Line_27 $$ String newMethodNameAndParameters = methodNameAndParameters-->Line_51 $$ _content = StringUtil.replace(_content, methodNameAndParameters, newMethodNameAndParameters)[ FD ]
Line_28 $$ int expectedTabCount = -1-->Line_35 $$ if (expectedTabCount == -1) [ FD ]
Line_27 $$ String newMethodNameAndParameters = methodNameAndParameters-->Line_32 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, _indent.length() + 1)[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_6 $$ String javaTermContent = "\n" + javaTerm.getContent()[ FD ]
Line_14 $$ if (lines.length == 1) -->Line_15 $$ if (methodNameAndParameters.endsWith("[ CD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_9 $$ if (!matcher.find()) [ CD ]
Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)-->Line_51 $$ _content = StringUtil.replace(_content, methodNameAndParameters, newMethodNameAndParameters)[ FD ]
Line_27 $$ String newMethodNameAndParameters = methodNameAndParameters-->Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)[ FD ]
Line_38 $$ if (throwsException && (expectedTabCount == (_indent.length() + 1))) -->Line_39 $$ expectedTabCount += 1[ CD ]
Line_43 $$ String previousLine = lines[i - 1]-->Line_44 $$ if (previousLine.endsWith(StringPool.COMMA) || previousLine.endsWith(StringPool.OPEN_PARENTHESIS)) [ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_28 $$ int expectedTabCount = -1[ CD ]
Line_12 $$ String methodNameAndParameters = matcher.group()-->Line_18 $$ _content = StringUtil.replace(_content, methodNameAndParameters + "\n", methodNameAndParameters)[ FD ]
Line_12 $$ String methodNameAndParameters = matcher.group()-->Line_26 $$ boolean throwsException = methodNameAndParameters.contains(_indent + "throws ")[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_29 $$ for (int i = 0; i < lines.length; i++) [ CD ]
Line_43 $$ String previousLine = lines[i - 1]-->Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)[ FD ]
Line_32 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, _indent.length() + 1)-->Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)[ FD ]
Line_6 $$ String javaTermContent = "\n" + javaTerm.getContent()-->Line_16 $$ String trimmedJavaTermContent = StringUtil.trimTrailing(javaTermContent)[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_23 $$ if (methodNameAndParameters.endsWith("[ CD ]
Line_6 $$ String javaTermContent = "\n" + javaTerm.getContent()-->Line_15 $$ if (methodNameAndParameters.endsWith("[ FD ]
Line_27 $$ String newMethodNameAndParameters = methodNameAndParameters-->Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_12 $$ String methodNameAndParameters = matcher.group()[ CD ]
Line_6 $$ String javaTermContent = "\n" + javaTerm.getContent()-->Line_23 $$ if (methodNameAndParameters.endsWith("[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_26 $$ boolean throwsException = methodNameAndParameters.contains(_indent + "throws ")[ CD ]
Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)-->Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)[ FD ]
Line_37 $$ expectedTabCount = Math.max(JavaSourceProcessor.getLeadingTabCount(line), _indent.length()) + 1-->Line_35 $$ if (expectedTabCount == -1) [ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_3 $$ if (!javaTerm.isConstructor() && !javaTerm.isMethod()) [ CD ]
Line_35 $$ if (expectedTabCount == -1) -->Line_44 $$ if (previousLine.endsWith(StringPool.COMMA) || previousLine.endsWith(StringPool.OPEN_PARENTHESIS)) [ CD ]
Line_3 $$ if (!javaTerm.isConstructor() && !javaTerm.isMethod()) -->Line_4 $$ return[ CD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_51 $$ _content = StringUtil.replace(_content, methodNameAndParameters, newMethodNameAndParameters)[ CD ]
Line_36 $$ if (line.endsWith(StringPool.OPEN_PARENTHESIS)) -->Line_38 $$ if (throwsException && (expectedTabCount == (_indent.length() + 1))) [ CD ]
Line_30 $$ String line = lines[i]-->Line_31 $$ if (line.contains(_indent + "throws ")) [ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_13 $$ String[] lines = StringUtil.splitLines(methodNameAndParameters)[ CD ]
Line_9 $$ if (!matcher.find()) -->Line_10 $$ return[ CD ]
Line_12 $$ String methodNameAndParameters = matcher.group()-->Line_51 $$ _content = StringUtil.replace(_content, methodNameAndParameters, newMethodNameAndParameters)[ FD ]
Line_35 $$ if (expectedTabCount == -1) -->Line_43 $$ String previousLine = lines[i - 1][ CD ]
Line_12 $$ String methodNameAndParameters = matcher.group()-->Line_13 $$ String[] lines = StringUtil.splitLines(methodNameAndParameters)[ FD ]
Line_28 $$ int expectedTabCount = -1-->Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)[ FD ]
Line_30 $$ String line = lines[i]-->Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)[ FD ]
Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)-->Line_32 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, _indent.length() + 1)[ FD ]
Line_12 $$ String methodNameAndParameters = matcher.group()-->Line_15 $$ if (methodNameAndParameters.endsWith("[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_3 $$ if (!javaTerm.isConstructor() && !javaTerm.isMethod()) [ FD ]
Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)-->Line_32 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, _indent.length() + 1)[ FD ]
Line_44 $$ if (previousLine.endsWith(StringPool.COMMA) || previousLine.endsWith(StringPool.OPEN_PARENTHESIS)) -->Line_45 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, expectedTabCount)[ CD ]
Line_7 $$ Pattern methodNameAndParametersPattern = Pattern.compile("\n" + _indent + "(private |protected |public ).*?(\\-->Line_8 $$ Matcher matcher = methodNameAndParametersPattern.matcher(javaTermContent)[ FD ]
Line_2 $$ protected void fixTabsAndIncorrectEmptyLines(JavaTerm javaTerm) -->Line_6 $$ String javaTermContent = "\n" + javaTerm.getContent()[ CD ]
Line_30 $$ String line = lines[i]-->Line_37 $$ expectedTabCount = Math.max(JavaSourceProcessor.getLeadingTabCount(line), _indent.length()) + 1[ FD ]
Line_12 $$ String methodNameAndParameters = matcher.group()-->Line_23 $$ if (methodNameAndParameters.endsWith("[ FD ]
Line_15 $$ if (methodNameAndParameters.endsWith("-->Line_17 $$ if (!trimmedJavaTermContent.endsWith("\n\n" + _indent + StringPool.CLOSE_CURLY_BRACE)) [ CD ]
Line_30 $$ String line = lines[i]-->Line_47 $$ newMethodNameAndParameters = fixLeadingTabs(newMethodNameAndParameters, line, JavaSourceProcessor.getLeadingTabCount(previousLine) + 1)[ FD ]
Line_17 $$ if (!trimmedJavaTermContent.endsWith("\n\n" + _indent + StringPool.CLOSE_CURLY_BRACE)) -->Line_18 $$ _content = StringUtil.replace(_content, methodNameAndParameters + "\n", methodNameAndParameters)[ CD ]
