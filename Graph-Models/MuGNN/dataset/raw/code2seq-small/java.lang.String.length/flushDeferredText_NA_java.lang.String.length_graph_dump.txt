Line_100 $$ TokenInfo token = myTokens.get(i)-->Line_101 $$ final HyperlinkInfo info = token.getHyperlinkInfo()[ FD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_12 $$ final boolean shouldStickToEnd = clear || !myCancelStickToEnd && isStickingToEnd()[ CD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_23 $$ CommandProcessor.getInstance().executeCommand(myProject, new Runnable() [ FD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_33 $$ document.setInBulkUpdate(false)[ FD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_61 $$ final RangeMarker lastProcessedOutput = document.createRangeMarker(document.getTextLength(), document.getTextLength())[ FD ]
Line_92 $$ for (ChangeListener each : myListeners) -->Line_93 $$ each.contentAdded(contentTypes)[ FD ]
Line_99 $$ for (int i = myTokens.size() - 1; i >= 0 && deferredTokensSize > 0; i--, deferredTokensSize--) -->Line_101 $$ final HyperlinkInfo info = token.getHyperlinkInfo()[ CD ]
Line_99 $$ for (int i = myTokens.size() - 1; i >= 0 && deferredTokensSize > 0; i--, deferredTokensSize--) -->Line_102 $$ if (info != null) [ CD ]
Line_110 $$ if (isTheAmountOfTextTooBig(myLastAddedTextLength)) -->Line_123 $$ performWhenNoDeferredOutput(new Runnable() [ CD ]
Line_7 $$ EditorEx editor = myEditor-->Line_8 $$ if (editor == null) [ FD ]
Line_87 $$ if (!shouldStickToEnd) -->Line_88 $$ myEditor.getScrollingModel().flushViewportChanges()[ CD ]
Line_81 $$ if (strings.length > 0) -->Line_82 $$ document.insertString(document.getTextLength(), strings[strings.length - 1])[ CD ]
Line_110 $$ if (isTheAmountOfTextTooBig(myLastAddedTextLength)) -->Line_113 $$ final EditorNotificationPanel comp = new EditorNotificationPanel().text("Too much output to process").icon(AllIcons.General.ExclMark)[ CD ]
Line_15 $$ if (clear) -->Line_16 $$ final DocumentEx document = editor.getDocument()[ CD ]
Line_15 $$ if (clear) -->Line_40 $$ return[ CD ]
Line_76 $$ if (lastLine >= 0) -->Line_78 $$ document.deleteString(document.getLineStartOffset(lastLine), document.getTextLength())[ CD ]
Line_15 $$ if (clear) -->Line_22 $$ if (documentTextLength > 0) [ CD ]
Line_4 $$ if (myProject.isDisposed()) -->Line_5 $$ return[ CD ]
Line_23 $$ CommandProcessor.getInstance().executeCommand(myProject, new Runnable() -->Line_27 $$ document.setInBulkUpdate(true)[ CD ]
Line_73 $$ for (int i = 0; i < strings.length - 1; i++) -->Line_76 $$ if (lastLine >= 0) [ CD ]
Line_76 $$ if (lastLine >= 0) -->Line_77 $$ ConsoleUtil.updateTokensOnTextRemoval(myTokens, document.getTextLength(), document.getTextLength() + 1)[ CD ]
Line_75 $$ int lastLine = document.getLineCount() - 1-->Line_78 $$ document.deleteString(document.getLineStartOffset(lastLine), document.getTextLength())[ FD ]
Line_123 $$ performWhenNoDeferredOutput(new Runnable() -->Line_127 $$ if (!isTheAmountOfTextTooBig(myLastAddedTextLength)) [ CD ]
Line_66 $$ if (!shouldStickToEnd) -->Line_67 $$ myEditor.getScrollingModel().accumulateViewportChanges()[ CD ]
Line_22 $$ if (documentTextLength > 0) -->Line_23 $$ CommandProcessor.getInstance().executeCommand(myProject, new Runnable() [ CD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_75 $$ int lastLine = document.getLineCount() - 1[ FD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_82 $$ document.insertString(document.getTextLength(), strings[strings.length - 1])[ FD ]
Line_62 $$ CommandProcessor.getInstance().executeCommand(myProject, new Runnable() -->Line_91 $$ if (!contentTypes.isEmpty()) [ CD ]
Line_99 $$ for (int i = myTokens.size() - 1; i >= 0 && deferredTokensSize > 0; i--, deferredTokensSize--) -->Line_100 $$ TokenInfo token = myTokens.get(i)[ FD ]
Line_102 $$ if (info != null) -->Line_103 $$ myHyperlinks.createHyperlink(token.startOffset, token.endOffset, null, info)[ CD ]
Line_101 $$ final HyperlinkInfo info = token.getHyperlinkInfo()-->Line_102 $$ if (info != null) [ FD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_60 $$ final Document document = myEditor.getDocument()[ CD ]
Line_145 $$ if (shouldStickToEnd) -->Line_146 $$ scrollToEnd()[ CD ]
Line_101 $$ final HyperlinkInfo info = token.getHyperlinkInfo()-->Line_103 $$ myHyperlinks.createHyperlink(token.startOffset, token.endOffset, null, info)[ FD ]
Line_62 $$ CommandProcessor.getInstance().executeCommand(myProject, new Runnable() -->Line_66 $$ if (!shouldStickToEnd) [ CD ]
Line_21 $$ final int documentTextLength = document.getTextLength()-->Line_22 $$ if (documentTextLength > 0) [ FD ]
Line_46 $$ if (myOutputPaused)-->Line_47 $$ return[ CD ]
Line_73 $$ for (int i = 0; i < strings.length - 1; i++) -->Line_75 $$ int lastLine = document.getLineCount() - 1[ CD ]
Line_73 $$ for (int i = 0; i < strings.length - 1; i++) -->Line_100 $$ TokenInfo token = myTokens.get(i)[ FD ]
Line_73 $$ for (int i = 0; i < strings.length - 1; i++) -->Line_99 $$ for (int i = myTokens.size() - 1; i >= 0 && deferredTokensSize > 0; i--, deferredTokensSize--) [ FD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_74 $$ document.insertString(document.getTextLength(), strings[i])[ FD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_145 $$ if (shouldStickToEnd) [ CD ]
Line_15 $$ if (clear) -->Line_21 $$ final int documentTextLength = document.getTextLength()[ CD ]
Line_127 $$ if (!isTheAmountOfTextTooBig(myLastAddedTextLength)) -->Line_137 $$ performLaterWhenNoDeferredOutput(this)[ CD ]
Line_21 $$ final int documentTextLength = document.getTextLength()-->Line_31 $$ document.deleteString(0, documentTextLength)[ FD ]
Line_7 $$ EditorEx editor = myEditor-->Line_16 $$ final DocumentEx document = editor.getDocument()[ FD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_8 $$ if (editor == null) [ CD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_78 $$ document.deleteString(document.getLineStartOffset(lastLine), document.getTextLength())[ FD ]
Line_12 $$ final boolean shouldStickToEnd = clear || !myCancelStickToEnd && isStickingToEnd()-->Line_87 $$ if (!shouldStickToEnd) [ FD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_77 $$ ConsoleUtil.updateTokensOnTextRemoval(myTokens, document.getTextLength(), document.getTextLength() + 1)[ FD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_109 $$ if (!myTooMuchOfOutput) [ CD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_62 $$ CommandProcessor.getInstance().executeCommand(myProject, new Runnable() [ CD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_3 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_4 $$ if (myProject.isDisposed()) [ CD ]
Line_75 $$ int lastLine = document.getLineCount() - 1-->Line_76 $$ if (lastLine >= 0) [ FD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_62 $$ CommandProcessor.getInstance().executeCommand(myProject, new Runnable() [ FD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_21 $$ final int documentTextLength = document.getTextLength()[ FD ]
Line_109 $$ if (!myTooMuchOfOutput) -->Line_110 $$ if (isTheAmountOfTextTooBig(myLastAddedTextLength)) [ CD ]
Line_110 $$ if (isTheAmountOfTextTooBig(myLastAddedTextLength)) -->Line_142 $$ highlightHyperlinksAndFoldings(lastProcessedOutput)[ CD ]
Line_48 $$ if (myBuffer.isEmpty())-->Line_49 $$ return[ CD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_61 $$ final RangeMarker lastProcessedOutput = document.createRangeMarker(document.getTextLength(), document.getTextLength())[ CD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_15 $$ if (clear) [ CD ]
Line_73 $$ for (int i = 0; i < strings.length - 1; i++) -->Line_74 $$ document.insertString(document.getTextLength(), strings[i])[ CD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_31 $$ document.deleteString(0, documentTextLength)[ FD ]
Line_99 $$ for (int i = myTokens.size() - 1; i >= 0 && deferredTokensSize > 0; i--, deferredTokensSize--) -->Line_100 $$ TokenInfo token = myTokens.get(i)[ CD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_107 $$ myPsiDisposedCheck.performCheck()[ CD ]
Line_16 $$ final DocumentEx document = editor.getDocument()-->Line_27 $$ document.setInBulkUpdate(true)[ FD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_7 $$ EditorEx editor = myEditor[ CD ]
Line_2 $$ private void flushDeferredText(boolean clear) -->Line_108 $$ myLastAddedTextLength = addedText.length()[ CD ]
Line_12 $$ final boolean shouldStickToEnd = clear || !myCancelStickToEnd && isStickingToEnd()-->Line_66 $$ if (!shouldStickToEnd) [ FD ]
