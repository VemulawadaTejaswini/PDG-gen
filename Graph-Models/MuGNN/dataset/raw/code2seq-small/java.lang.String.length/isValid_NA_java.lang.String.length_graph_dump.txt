Line_2 $$ boolean isValid(String name) -->Line_13 $$ final Matcher matcher = m_regexPattern.matcher(name)[ CD ]
Line_2 $$ boolean isValid(String name) -->Line_3 $$ final int length = name.length()[ CD ]
Line_2 $$ boolean isValid(String name) -->Line_13 $$ final Matcher matcher = m_regexPattern.matcher(name)[ FD ]
Line_2 $$ boolean isValid(String name) -->Line_7 $$ if (m_maxLength > 0 && length > m_maxLength) [ CD ]
Line_3 $$ final int length = name.length()-->Line_4 $$ if (length < m_minLength) [ FD ]
Line_2 $$ boolean isValid(String name) -->Line_14 $$ return matcher.matches()[ CD ]
Line_4 $$ if (length < m_minLength) -->Line_5 $$ return false[ CD ]
Line_2 $$ boolean isValid(String name) -->Line_10 $$ if (HardcodedMethodConstants.SERIAL_VERSION_UID.equals(name)) [ FD ]
Line_7 $$ if (m_maxLength > 0 && length > m_maxLength) -->Line_8 $$ return false[ CD ]
Line_2 $$ boolean isValid(String name) -->Line_10 $$ if (HardcodedMethodConstants.SERIAL_VERSION_UID.equals(name)) [ CD ]
Line_2 $$ boolean isValid(String name) -->Line_3 $$ final int length = name.length()[ FD ]
Line_13 $$ final Matcher matcher = m_regexPattern.matcher(name)-->Line_14 $$ return matcher.matches()[ FD ]
Line_10 $$ if (HardcodedMethodConstants.SERIAL_VERSION_UID.equals(name)) -->Line_11 $$ return true[ CD ]
Line_2 $$ boolean isValid(String name) -->Line_4 $$ if (length < m_minLength) [ CD ]
