Line_2 $$ private void loadBackwards(SVNURL svnurl) throws SVNException, VcsException -->Line_19 $$ repositoryLogEntryHandler.setThrowCancelOnMeetPathCreation(true)[ CD ]
Line_2 $$ private void loadBackwards(SVNURL svnurl) throws SVNException, VcsException -->Line_6 $$ final SVNURL rootURL = info != null ? info.getRepositoryRootURL() : null[ CD ]
Line_2 $$ private void loadBackwards(SVNURL svnurl) throws SVNException, VcsException -->Line_7 $$ final String root = rootURL != null ? rootURL.toString() : ""[ CD ]
Line_2 $$ private void loadBackwards(SVNURL svnurl) throws SVNException, VcsException -->Line_8 $$ String relativeUrl = myUrl[ CD ]
Line_2 $$ private void loadBackwards(SVNURL svnurl) throws SVNException, VcsException -->Line_20 $$ SvnTarget target = SvnTarget.fromURL(rootURL, myFrom)[ CD ]
Line_2 $$ private void loadBackwards(SVNURL svnurl) throws SVNException, VcsException -->Line_9 $$ if (myUrl.startsWith(root)) [ CD ]
Line_2 $$ private void loadBackwards(SVNURL svnurl) throws SVNException, VcsException -->Line_12 $$ final RepositoryLogEntryHandler repositoryLogEntryHandler = new RepositoryLogEntryHandler(myVcs, myUrl, SVNRevision.UNDEFINED, relativeUrl, new ThrowableConsumer<VcsFileRevision, SVNException>() [ CD ]
Line_12 $$ final RepositoryLogEntryHandler repositoryLogEntryHandler = new RepositoryLogEntryHandler(myVcs, myUrl, SVNRevision.UNDEFINED, relativeUrl, new ThrowableConsumer<VcsFileRevision, SVNException>() -->Line_16 $$ myConsumer.consume(revision)[ CD ]
Line_12 $$ final RepositoryLogEntryHandler repositoryLogEntryHandler = new RepositoryLogEntryHandler(myVcs, myUrl, SVNRevision.UNDEFINED, relativeUrl, new ThrowableConsumer<VcsFileRevision, SVNException>() -->Line_16 $$ myConsumer.consume(revision)[ FD ]
Line_2 $$ private void loadBackwards(SVNURL svnurl) throws SVNException, VcsException -->Line_21 $$ myVcs.getFactory(target).createHistoryClient().doLog(target, myFrom, myTo == null ? SVNRevision.create(1) : myTo, false, true, myShowMergeSources && mySupport15, 1, null, repositoryLogEntryHandler)[ CD ]
Line_9 $$ if (myUrl.startsWith(root)) -->Line_10 $$ relativeUrl = myUrl.substring(root.length())[ CD ]
Line_6 $$ final SVNURL rootURL = info != null ? info.getRepositoryRootURL() : null-->Line_7 $$ final String root = rootURL != null ? rootURL.toString() : ""[ FD ]
Line_7 $$ final String root = rootURL != null ? rootURL.toString() : ""-->Line_10 $$ relativeUrl = myUrl.substring(root.length())[ FD ]
Line_8 $$ String relativeUrl = myUrl-->Line_10 $$ relativeUrl = myUrl.substring(root.length())[ FD ]
Line_12 $$ final RepositoryLogEntryHandler repositoryLogEntryHandler = new RepositoryLogEntryHandler(myVcs, myUrl, SVNRevision.UNDEFINED, relativeUrl, new ThrowableConsumer<VcsFileRevision, SVNException>() -->Line_19 $$ repositoryLogEntryHandler.setThrowCancelOnMeetPathCreation(true)[ FD ]
Line_12 $$ final RepositoryLogEntryHandler repositoryLogEntryHandler = new RepositoryLogEntryHandler(myVcs, myUrl, SVNRevision.UNDEFINED, relativeUrl, new ThrowableConsumer<VcsFileRevision, SVNException>() -->Line_21 $$ myVcs.getFactory(target).createHistoryClient().doLog(target, myFrom, myTo == null ? SVNRevision.create(1) : myTo, false, true, myShowMergeSources && mySupport15, 1, null, repositoryLogEntryHandler)[ FD ]
Line_7 $$ final String root = rootURL != null ? rootURL.toString() : ""-->Line_9 $$ if (myUrl.startsWith(root)) [ FD ]
Line_6 $$ final SVNURL rootURL = info != null ? info.getRepositoryRootURL() : null-->Line_20 $$ SvnTarget target = SvnTarget.fromURL(rootURL, myFrom)[ FD ]
