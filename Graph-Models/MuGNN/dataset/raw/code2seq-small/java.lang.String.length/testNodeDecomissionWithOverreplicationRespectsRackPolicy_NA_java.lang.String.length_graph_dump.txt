Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_15 $$ conf.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ CD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_5 $$ final Path filePath = new Path("/testFile")[ CD ]
Line_3 $$ Configuration conf = getConf()-->Line_6 $$ FileSystem localFileSys = FileSystem.getLocal(conf)[ FD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_10 $$ Path includeFile = new Path(dir, "include")[ CD ]
Line_4 $$ short REPLICATION_FACTOR = 5-->Line_21 $$ DFSTestUtil.createFile(fs, filePath, 1L, REPLICATION_FACTOR, 1L)[ FD ]
Line_20 $$ final FileSystem fs = cluster.getFileSystem()-->Line_25 $$ fs.setReplication(filePath, REPLICATION_FACTOR)[ FD ]
Line_6 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_30 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, name)[ FD ]
Line_27 $$ for (String top : locs[0].getTopologyPaths()) -->Line_28 $$ if (!top.startsWith("/rack2")) [ FD ]
Line_6 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_7 $$ Path workingDir = localFileSys.getWorkingDirectory()[ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_14 $$ conf.set(DFSConfigKeys.DFS_HOSTS, includeFile.toUri().getPath())[ FD ]
Line_4 $$ short REPLICATION_FACTOR = 5-->Line_36 $$ DFSTestUtil.waitForReplication(cluster, b, 2, REPLICATION_FACTOR, 0)[ FD ]
Line_20 $$ final FileSystem fs = cluster.getFileSystem()-->Line_26 $$ BlockLocation[] locs = fs.getFileBlockLocations(fs.getFileStatus(filePath), 0, Long.MAX_VALUE)[ FD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(racks.length).racks(racks).build()-->Line_18 $$ final FSNamesystem ns = cluster.getNameNode().getNamesystem()[ FD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_4 $$ short REPLICATION_FACTOR = 5[ CD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_13 $$ DFSTestUtil.writeFile(localFileSys, includeFile, "")[ CD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(racks.length).racks(racks).build()-->Line_38 $$ cluster.shutdown()[ FD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(racks.length).racks(racks).build()-->Line_20 $$ final FileSystem fs = cluster.getFileSystem()[ FD ]
Line_28 $$ if (!top.startsWith("/rack2")) -->Line_32 $$ DFSTestUtil.waitForDecommission(fs, name)[ CD ]
Line_5 $$ final Path filePath = new Path("/testFile")-->Line_21 $$ DFSTestUtil.createFile(fs, filePath, 1L, REPLICATION_FACTOR, 1L)[ FD ]
Line_5 $$ final Path filePath = new Path("/testFile")-->Line_26 $$ BlockLocation[] locs = fs.getFileBlockLocations(fs.getFileStatus(filePath), 0, Long.MAX_VALUE)[ FD ]
Line_29 $$ String name = top.substring("/rack1".length() + 1)-->Line_32 $$ DFSTestUtil.waitForDecommission(fs, name)[ FD ]
Line_4 $$ short REPLICATION_FACTOR = 5-->Line_23 $$ DFSTestUtil.waitForReplication(cluster, b, 2, REPLICATION_FACTOR, 0)[ FD ]
Line_28 $$ if (!top.startsWith("/rack2")) -->Line_31 $$ ns.getBlockManager().getDatanodeManager().refreshNodes(conf)[ CD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(racks.length).racks(racks).build()[ CD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_14 $$ conf.set(DFSConfigKeys.DFS_HOSTS, includeFile.toUri().getPath())[ CD ]
Line_6 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_13 $$ DFSTestUtil.writeFile(localFileSys, includeFile, "")[ FD ]
Line_4 $$ short REPLICATION_FACTOR = 5-->Line_24 $$ REPLICATION_FACTOR = 2[ FD ]
Line_16 $$ String[] racks = -->Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(racks.length).racks(racks).build()[ FD ]
Line_20 $$ final FileSystem fs = cluster.getFileSystem()-->Line_32 $$ DFSTestUtil.waitForDecommission(fs, name)[ FD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_11 $$ assertTrue(localFileSys.mkdirs(dir))[ CD ]
Line_9 $$ Path excludeFile = new Path(dir, "exclude")-->Line_12 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, "")[ FD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_8 $$ Path dir = new Path(workingDir, "build/test/data/temp/decommission")[ CD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_16 $$ String[] racks = [ CD ]
Line_28 $$ if (!top.startsWith("/rack2")) -->Line_29 $$ String name = top.substring("/rack1".length() + 1)[ CD ]
Line_29 $$ String name = top.substring("/rack1".length() + 1)-->Line_30 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, name)[ FD ]
Line_4 $$ short REPLICATION_FACTOR = 5-->Line_25 $$ fs.setReplication(filePath, REPLICATION_FACTOR)[ FD ]
Line_10 $$ Path includeFile = new Path(dir, "include")-->Line_14 $$ conf.set(DFSConfigKeys.DFS_HOSTS, includeFile.toUri().getPath())[ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_15 $$ conf.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ FD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_9 $$ Path excludeFile = new Path(dir, "exclude")[ CD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_6 $$ FileSystem localFileSys = FileSystem.getLocal(conf)[ CD ]
Line_22 $$ ExtendedBlock b = DFSTestUtil.getFirstBlock(fs, filePath)-->Line_23 $$ DFSTestUtil.waitForReplication(cluster, b, 2, REPLICATION_FACTOR, 0)[ FD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_18 $$ final FSNamesystem ns = cluster.getNameNode().getNamesystem()[ CD ]
Line_9 $$ Path excludeFile = new Path(dir, "exclude")-->Line_15 $$ conf.set(DFSConfigKeys.DFS_HOSTS_EXCLUDE, excludeFile.toUri().getPath())[ FD ]
Line_5 $$ final Path filePath = new Path("/testFile")-->Line_22 $$ ExtendedBlock b = DFSTestUtil.getFirstBlock(fs, filePath)[ FD ]
Line_24 $$ REPLICATION_FACTOR = 2-->Line_25 $$ fs.setReplication(filePath, REPLICATION_FACTOR)[ FD ]
Line_27 $$ for (String top : locs[0].getTopologyPaths()) -->Line_29 $$ String name = top.substring("/rack1".length() + 1)[ FD ]
Line_9 $$ Path excludeFile = new Path(dir, "exclude")-->Line_30 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, name)[ FD ]
Line_18 $$ final FSNamesystem ns = cluster.getNameNode().getNamesystem()-->Line_31 $$ ns.getBlockManager().getDatanodeManager().refreshNodes(conf)[ FD ]
Line_5 $$ final Path filePath = new Path("/testFile")-->Line_25 $$ fs.setReplication(filePath, REPLICATION_FACTOR)[ FD ]
Line_6 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_12 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, "")[ FD ]
Line_28 $$ if (!top.startsWith("/rack2")) -->Line_30 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, name)[ CD ]
Line_10 $$ Path includeFile = new Path(dir, "include")-->Line_13 $$ DFSTestUtil.writeFile(localFileSys, includeFile, "")[ FD ]
Line_8 $$ Path dir = new Path(workingDir, "build/test/data/temp/decommission")-->Line_11 $$ assertTrue(localFileSys.mkdirs(dir))[ FD ]
Line_20 $$ final FileSystem fs = cluster.getFileSystem()-->Line_22 $$ ExtendedBlock b = DFSTestUtil.getFirstBlock(fs, filePath)[ FD ]
Line_6 $$ FileSystem localFileSys = FileSystem.getLocal(conf)-->Line_11 $$ assertTrue(localFileSys.mkdirs(dir))[ FD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(racks.length).racks(racks).build()-->Line_23 $$ DFSTestUtil.waitForReplication(cluster, b, 2, REPLICATION_FACTOR, 0)[ FD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(racks.length).racks(racks).build()-->Line_36 $$ DFSTestUtil.waitForReplication(cluster, b, 2, REPLICATION_FACTOR, 0)[ FD ]
Line_24 $$ REPLICATION_FACTOR = 2-->Line_36 $$ DFSTestUtil.waitForReplication(cluster, b, 2, REPLICATION_FACTOR, 0)[ FD ]
Line_20 $$ final FileSystem fs = cluster.getFileSystem()-->Line_21 $$ DFSTestUtil.createFile(fs, filePath, 1L, REPLICATION_FACTOR, 1L)[ FD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_3 $$ Configuration conf = getConf()[ CD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_7 $$ Path workingDir = localFileSys.getWorkingDirectory()[ CD ]
Line_2 $$ public void testNodeDecomissionWithOverreplicationRespectsRackPolicy() throws Exception -->Line_12 $$ DFSTestUtil.writeFile(localFileSys, excludeFile, "")[ CD ]
Line_22 $$ ExtendedBlock b = DFSTestUtil.getFirstBlock(fs, filePath)-->Line_36 $$ DFSTestUtil.waitForReplication(cluster, b, 2, REPLICATION_FACTOR, 0)[ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_31 $$ ns.getBlockManager().getDatanodeManager().refreshNodes(conf)[ FD ]
