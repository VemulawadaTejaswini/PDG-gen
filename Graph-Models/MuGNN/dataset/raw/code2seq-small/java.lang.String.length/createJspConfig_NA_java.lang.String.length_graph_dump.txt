Line_12 $$ for (String pattern : group.getUrlPatterns()) -->Line_13 $$ jspPropertyGroup.addUrlPattern(pattern)[ FD ]
Line_6 $$ if (config != null) -->Line_9 $$ if (groups != null) [ CD ]
Line_2 $$ private static HashMap<String, JspPropertyGroup> createJspConfig(JBossWebMetaData metaData) -->Line_44 $$ Collections.sort(paths, new Comparator<String>() [ CD ]
Line_3 $$ final HashMap<String, JspPropertyGroup> result = new HashMap()-->Line_43 $$ final ArrayList<String> paths = new ArrayList(result.keySet())[ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_26 $$ jspPropertyGroup.addIncludeCoda(includeCoda)[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_20 $$ for (String includePrelude : group.getIncludePreludes()) [ FD ]
Line_2 $$ private static HashMap<String, JspPropertyGroup> createJspConfig(JBossWebMetaData metaData) -->Line_54 $$ return ret[ CD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_12 $$ for (String pattern : group.getUrlPatterns()) [ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_17 $$ jspPropertyGroup.setScriptingInvalid(group.getScriptingInvalid())[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_18 $$ jspPropertyGroup.setIsXml(group.getIsXml())[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_32 $$ jspPropertyGroup.setBuffer(group.getBuffer())[ FD ]
Line_2 $$ private static HashMap<String, JspPropertyGroup> createJspConfig(JBossWebMetaData metaData) -->Line_43 $$ final ArrayList<String> paths = new ArrayList(result.keySet())[ CD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_13 $$ jspPropertyGroup.addUrlPattern(pattern)[ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_18 $$ jspPropertyGroup.setIsXml(group.getIsXml())[ FD ]
Line_20 $$ for (String includePrelude : group.getIncludePreludes()) -->Line_21 $$ jspPropertyGroup.addIncludePrelude(includePrelude)[ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_33 $$ jspPropertyGroup.setErrorOnUndeclaredNamespace(group.getErrorOnUndeclaredNamespace())[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_31 $$ jspPropertyGroup.setDefaultContentType(group.getDefaultContentType())[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_19 $$ if (group.getIncludePreludes() != null) [ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_16 $$ jspPropertyGroup.setPageEncoding(group.getPageEncoding())[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_33 $$ jspPropertyGroup.setErrorOnUndeclaredNamespace(group.getErrorOnUndeclaredNamespace())[ FD ]
Line_25 $$ for (String includeCoda : group.getIncludeCodas()) -->Line_26 $$ jspPropertyGroup.addIncludeCoda(includeCoda)[ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_30 $$ jspPropertyGroup.setTrimDirectiveWhitespaces(group.getTrimDirectiveWhitespaces())[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_24 $$ if (group.getIncludeCodas() != null) [ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_21 $$ jspPropertyGroup.addIncludePrelude(includePrelude)[ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_17 $$ jspPropertyGroup.setScriptingInvalid(group.getScriptingInvalid())[ FD ]
Line_3 $$ final HashMap<String, JspPropertyGroup> result = new HashMap()-->Line_52 $$ ret.put(path, result.get(path))[ FD ]
Line_2 $$ private static HashMap<String, JspPropertyGroup> createJspConfig(JBossWebMetaData metaData) -->Line_3 $$ final HashMap<String, JspPropertyGroup> result = new HashMap()[ CD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_32 $$ jspPropertyGroup.setBuffer(group.getBuffer())[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_16 $$ jspPropertyGroup.setPageEncoding(group.getPageEncoding())[ FD ]
Line_43 $$ final ArrayList<String> paths = new ArrayList(result.keySet())-->Line_44 $$ Collections.sort(paths, new Comparator<String>() [ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_30 $$ jspPropertyGroup.setTrimDirectiveWhitespaces(group.getTrimDirectiveWhitespaces())[ FD ]
Line_44 $$ Collections.sort(paths, new Comparator<String>() -->Line_48 $$ return o1.length() - o2.length()[ CD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_15 $$ jspPropertyGroup.setElIgnored(group.getElIgnored())[ FD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_29 $$ jspPropertyGroup.setDeferredSyntaxAllowedAsLiteral(group.getDeferredSyntaxAllowedAsLiteral())[ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_29 $$ jspPropertyGroup.setDeferredSyntaxAllowedAsLiteral(group.getDeferredSyntaxAllowedAsLiteral())[ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_34 $$ for (String pattern : jspPropertyGroup.getUrlPatterns()) [ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_31 $$ jspPropertyGroup.setDefaultContentType(group.getDefaultContentType())[ FD ]
Line_11 $$ org.apache.jasper.deploy.JspPropertyGroup jspPropertyGroup = new org.apache.jasper.deploy.JspPropertyGroup()-->Line_15 $$ jspPropertyGroup.setElIgnored(group.getElIgnored())[ FD ]
Line_44 $$ Collections.sort(paths, new Comparator<String>() -->Line_48 $$ return o1.length() - o2.length()[ FD ]
Line_2 $$ private static HashMap<String, JspPropertyGroup> createJspConfig(JBossWebMetaData metaData) -->Line_6 $$ if (config != null) [ CD ]
Line_10 $$ for (JspPropertyGroupMetaData group : groups) -->Line_25 $$ for (String includeCoda : group.getIncludeCodas()) [ FD ]
