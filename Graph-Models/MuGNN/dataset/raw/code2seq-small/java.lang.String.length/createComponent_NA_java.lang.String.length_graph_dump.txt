Line_8 $$ if (lwComponent instanceof LwNestedForm) -->Line_22 $$ if (lwComponent.getErrorComponentProperties() == null) [ CD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_6 $$ final RadComponent component-->Line_51 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_48 $$ component = component1-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_140 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_144 $$ radRootContainer.setMainComponentBinding(lwRootContainer.getMainComponentBinding())[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_6 $$ final RadComponent component-->Line_26 $$ component = new RadHSpacer(module, id)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_27 $$ if (lwComponent instanceof LwVSpacer) -->Line_29 $$ if (lwComponent instanceof LwAtomicComponent) [ CD ]
Line_60 $$ LayoutManager layout = lwContainer.getLayout()-->Line_64 $$ layout = xyLayoutManager[ FD ]
Line_38 $$ component1 = new RadAtomicComponent(module, componentClass, id)-->Line_46 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_59 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_77 $$ String layoutManagerName = lwContainer.getLayoutManager()[ FD ]
Line_58 $$ if (lwComponent instanceof LwContainer) -->Line_60 $$ LayoutManager layout = lwContainer.getLayout()[ CD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_122 $$ Map.Entry entry = (Map.Entry) o-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_29 $$ if (lwComponent instanceof LwAtomicComponent) -->Line_30 $$ if (componentClass == null) [ CD ]
Line_85 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)-->Line_88 $$ container.setLayoutManager(layoutManager)[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_48 $$ component = component1-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_8 $$ if (lwComponent instanceof LwNestedForm) -->Line_10 $$ boolean recursiveNesting = false[ CD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_23 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)-->Line_107 $$ if (componentClass != null) [ FD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_76 $$ component = new RadContainer(module, componentClass, id)[ CD ]
Line_54 $$ if (lwComponent instanceof LwSplitPane) -->Line_56 $$ if (lwComponent instanceof LwToolBar) [ CD ]
Line_50 $$ if (lwComponent instanceof LwScrollPane) -->Line_52 $$ if (lwComponent instanceof LwTabbedPane) [ CD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_51 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_52 $$ if (lwComponent instanceof LwTabbedPane) -->Line_54 $$ if (lwComponent instanceof LwSplitPane) [ CD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_48 $$ component = component1-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_48 $$ component = component1[ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_58 $$ if (lwComponent instanceof LwContainer) -->Line_61 $$ if (layout instanceof XYLayoutManager) [ CD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_86 $$ RadContainer container = (RadContainer) component-->Line_87 $$ layoutManager.readLayout(lwContainer, container)[ FD ]
Line_6 $$ final RadComponent component-->Line_28 $$ component = new RadVSpacer(module, id)[ FD ]
Line_33 $$ RadComponent component1-->Line_36 $$ component1 = new RadTable(module, componentClass, id)[ FD ]
Line_48 $$ component = component1-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_6 $$ final RadComponent component-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_6 $$ final RadComponent component-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_6 $$ final RadComponent component-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_140 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_145 $$ radRootContainer.setButtonGroups(lwRootContainer.getButtonGroups())[ FD ]
Line_79 $$ if (layout instanceof XYLayoutManager) -->Line_82 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_INTELLIJ[ CD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_88 $$ container.setLayoutManager(layoutManager)[ CD ]
Line_22 $$ if (lwComponent.getErrorComponentProperties() == null) -->Line_23 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)[ CD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_48 $$ component = component1-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_67 $$ if (componentClass == null) -->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ CD ]
Line_50 $$ if (lwComponent instanceof LwScrollPane) -->Line_51 $$ component = new RadScrollPane(module, componentClass, id)[ CD ]
Line_6 $$ final RadComponent component-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_6 $$ final RadComponent component-->Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)[ FD ]
Line_72 $$ if (stringDescriptorLocale != null) -->Line_73 $$ ((RadRootContainer) component).setStringDescriptorLocale(stringDescriptorLocale)[ CD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_56 $$ if (lwComponent instanceof LwToolBar) -->Line_58 $$ if (lwComponent instanceof LwContainer) [ CD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_25 $$ if (lwComponent instanceof LwHSpacer) -->Line_27 $$ if (lwComponent instanceof LwVSpacer) [ CD ]
Line_36 $$ component1 = new RadTable(module, componentClass, id)-->Line_38 $$ component1 = new RadAtomicComponent(module, componentClass, id)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_86 $$ RadContainer container = (RadContainer) component-->Line_88 $$ container.setLayoutManager(layoutManager)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_109 $$ for (final LwIntrospectedProperty lwProperty : properties) -->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_140 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_143 $$ radRootContainer.setClassToBind(lwRootContainer.getClassToBind())[ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_80 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_XY-->Line_82 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_INTELLIJ[ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_6 $$ final RadComponent component-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_6 $$ final RadComponent component-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_79 $$ if (layout instanceof XYLayoutManager) -->Line_80 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_XY[ CD ]
Line_67 $$ if (componentClass == null) -->Line_90 $$ ((RadContainer) component).setLayout(layout)[ CD ]
Line_139 $$ if (component instanceof RadRootContainer) -->Line_144 $$ radRootContainer.setMainComponentBinding(lwRootContainer.getMainComponentBinding())[ CD ]
Line_123 $$ Object value = entry.getValue()-->Line_125 $$ value = ((StringDescriptor) value).getValue()[ FD ]
Line_6 $$ final RadComponent component-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_28 $$ component = new RadVSpacer(module, id)[ FD ]
Line_122 $$ Map.Entry entry = (Map.Entry) o-->Line_123 $$ Object value = entry.getValue()[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_48 $$ component = component1[ FD ]
Line_120 $$ HashMap clientProps = lwComponent.getDelegeeClientProperties()-->Line_121 $$ for (Object o : clientProps.entrySet()) [ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_59 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_133 $$ copyBorder(container, lwContainer)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_6 $$ final RadComponent component-->Line_48 $$ component = component1[ FD ]
Line_7 $$ Class componentClass = null-->Line_30 $$ if (componentClass == null) [ FD ]
Line_33 $$ RadComponent component1-->Line_38 $$ component1 = new RadAtomicComponent(module, componentClass, id)[ FD ]
Line_78 $$ if (layoutManagerName == null || layoutManagerName.length() == 0) -->Line_79 $$ if (layout instanceof XYLayoutManager) [ CD ]
Line_29 $$ if (lwComponent instanceof LwAtomicComponent) -->Line_50 $$ if (lwComponent instanceof LwScrollPane) [ CD ]
Line_23 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)-->Line_35 $$ if (JTable.class.isAssignableFrom(componentClass)) [ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_16 $$ if (recursiveNesting) -->Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)[ CD ]
Line_54 $$ if (lwComponent instanceof LwSplitPane) -->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ CD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_51 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_48 $$ component = component1-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_16 $$ if (recursiveNesting) -->Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))[ CD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_51 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_41 $$ String errorDescription = MessageFormat.format(UIDesignerBundle.message("error.class.cannot.be.instantiated"), lwComponent.getComponentClassName())-->Line_46 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_6 $$ final RadComponent component-->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_139 $$ if (component instanceof RadRootContainer) -->Line_140 $$ final RadRootContainer radRootContainer = (RadRootContainer) component[ CD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_44 $$ errorDescription += ": " + message-->Line_46 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_36 $$ component1 = new RadTable(module, componentClass, id)-->Line_48 $$ component = component1[ FD ]
Line_140 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_146 $$ radRootContainer.setInspectionSuppressions(lwRootContainer.getInspectionSuppressions())[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_64 $$ layout = xyLayoutManager-->Line_90 $$ ((RadContainer) component).setLayout(layout)[ FD ]
Line_6 $$ final RadComponent component-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_8 $$ if (lwComponent instanceof LwNestedForm) -->Line_9 $$ LwNestedForm nestedForm = (LwNestedForm) lwComponent[ CD ]
Line_48 $$ component = component1-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_129 $$ if (component instanceof RadContainer) -->Line_133 $$ copyBorder(container, lwContainer)[ CD ]
Line_59 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_87 $$ layoutManager.readLayout(lwContainer, container)[ FD ]
Line_48 $$ component = component1-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_72 $$ if (stringDescriptorLocale != null) [ CD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_85 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)-->Line_87 $$ layoutManager.readLayout(lwContainer, container)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_48 $$ component = component1-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_59 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_70 $$ if (lwContainer instanceof LwRootContainer) [ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_26 $$ component = new RadHSpacer(module, id)[ FD ]
Line_48 $$ component = component1-->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_6 $$ final RadComponent component-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_46 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)-->Line_48 $$ component = component1[ FD ]
Line_7 $$ Class componentClass = null-->Line_67 $$ if (componentClass == null) [ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_30 $$ if (componentClass == null) -->Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)[ CD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_48 $$ component = component1[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_26 $$ component = new RadHSpacer(module, id)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_6 $$ final RadComponent component-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_123 $$ Object value = entry.getValue()-->Line_124 $$ if (value instanceof StringDescriptor) [ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_108 $$ final Palette palette = Palette.getInstance(module.getProject())-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_71 $$ component = new RadRootContainer(module, id)[ CD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_42 $$ final String message = FormEditingUtil.getExceptionMessage(exc)-->Line_43 $$ if (message != null) [ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_48 $$ component = component1-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_28 $$ component = new RadVSpacer(module, id)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_8 $$ if (lwComponent instanceof LwNestedForm) -->Line_16 $$ if (recursiveNesting) [ CD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_86 $$ RadContainer container = (RadContainer) component-->Line_136 $$ container.addComponent(createComponent(module, (LwComponent) lwContainer.getComponent(i), loader, stringDescriptorLocale))[ FD ]
Line_23 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)-->Line_67 $$ if (componentClass == null) [ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_59 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_136 $$ container.addComponent(createComponent(module, (LwComponent) lwContainer.getComponent(i), loader, stringDescriptorLocale))[ FD ]
Line_30 $$ if (componentClass == null) -->Line_33 $$ RadComponent component1[ CD ]
Line_41 $$ String errorDescription = MessageFormat.format(UIDesignerBundle.message("error.class.cannot.be.instantiated"), lwComponent.getComponentClassName())-->Line_44 $$ errorDescription += ": " + message[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_58 $$ if (lwComponent instanceof LwContainer) -->Line_59 $$ final LwContainer lwContainer = (LwContainer) lwComponent[ CD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_48 $$ component = component1-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_52 $$ if (lwComponent instanceof LwTabbedPane) -->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ CD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_85 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)[ CD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_86 $$ RadContainer container = (RadContainer) component-->Line_133 $$ copyBorder(container, lwContainer)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_48 $$ component = component1-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_42 $$ final String message = FormEditingUtil.getExceptionMessage(exc)-->Line_44 $$ errorDescription += ": " + message[ FD ]
Line_9 $$ LwNestedForm nestedForm = (LwNestedForm) lwComponent-->Line_12 $$ Utils.validateNestedFormLoop(nestedForm.getFormFileName(), new PsiNestedFormLoader(module.getModule()))[ FD ]
Line_67 $$ if (componentClass == null) -->Line_70 $$ if (lwContainer instanceof LwRootContainer) [ CD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_6 $$ final RadComponent component-->Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_125 $$ value = ((StringDescriptor) value).getValue()-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_38 $$ component1 = new RadAtomicComponent(module, componentClass, id)-->Line_48 $$ component = component1[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_58 $$ if (lwComponent instanceof LwContainer) -->Line_67 $$ if (componentClass == null) [ CD ]
Line_80 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_XY-->Line_85 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)[ FD ]
Line_35 $$ if (JTable.class.isAssignableFrom(componentClass)) -->Line_36 $$ component1 = new RadTable(module, componentClass, id)[ CD ]
Line_6 $$ final RadComponent component-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_59 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_60 $$ LayoutManager layout = lwContainer.getLayout()[ FD ]
Line_139 $$ if (component instanceof RadRootContainer) -->Line_147 $$ radRootContainer.getDelegee().setBackground(new JBColor(Color.WHITE, UIUtil.getListBackground()))[ CD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_56 $$ if (lwComponent instanceof LwToolBar) -->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ CD ]
Line_48 $$ component = component1-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_109 $$ for (final LwIntrospectedProperty lwProperty : properties) -->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_43 $$ if (message != null) -->Line_44 $$ errorDescription += ": " + message[ CD ]
Line_61 $$ if (layout instanceof XYLayoutManager) -->Line_64 $$ layout = xyLayoutManager[ CD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_139 $$ if (component instanceof RadRootContainer) -->Line_143 $$ radRootContainer.setClassToBind(lwRootContainer.getClassToBind())[ CD ]
Line_35 $$ if (JTable.class.isAssignableFrom(componentClass)) -->Line_38 $$ component1 = new RadAtomicComponent(module, componentClass, id)[ CD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_77 $$ String layoutManagerName = lwContainer.getLayoutManager()-->Line_78 $$ if (layoutManagerName == null || layoutManagerName.length() == 0) [ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_51 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_86 $$ RadContainer container = (RadContainer) component[ CD ]
Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())-->Line_111 $$ if (property == null) [ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_60 $$ LayoutManager layout = lwContainer.getLayout()-->Line_79 $$ if (layout instanceof XYLayoutManager) [ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_119 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_77 $$ String layoutManagerName = lwContainer.getLayoutManager()-->Line_82 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_INTELLIJ[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
Line_140 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_147 $$ radRootContainer.getDelegee().setBackground(new JBColor(Color.WHITE, UIUtil.getListBackground()))[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_48 $$ component = component1-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_10 $$ boolean recursiveNesting = false-->Line_14 $$ recursiveNesting = true[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_77 $$ String layoutManagerName = lwContainer.getLayoutManager()[ CD ]
Line_6 $$ final RadComponent component-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_7 $$ Class componentClass = null-->Line_23 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_6 $$ final RadComponent component-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_48 $$ component = component1-->Line_51 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_33 $$ RadComponent component1-->Line_46 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_6 $$ final RadComponent component-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_48 $$ component = component1[ FD ]
Line_36 $$ component1 = new RadTable(module, componentClass, id)-->Line_46 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_33 $$ RadComponent component1-->Line_48 $$ component = component1[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_8 $$ if (lwComponent instanceof LwNestedForm) -->Line_25 $$ if (lwComponent instanceof LwHSpacer) [ CD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_77 $$ String layoutManagerName = lwContainer.getLayoutManager()-->Line_80 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_XY[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_9 $$ LwNestedForm nestedForm = (LwNestedForm) lwComponent-->Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)[ FD ]
Line_27 $$ if (lwComponent instanceof LwVSpacer) -->Line_28 $$ component = new RadVSpacer(module, id)[ CD ]
Line_123 $$ Object value = entry.getValue()-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_7 $$ Class componentClass = null-->Line_35 $$ if (JTable.class.isAssignableFrom(componentClass)) [ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_23 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)-->Line_30 $$ if (componentClass == null) [ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_139 $$ if (component instanceof RadRootContainer) -->Line_145 $$ radRootContainer.setButtonGroups(lwRootContainer.getButtonGroups())[ CD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_64 $$ layout = xyLayoutManager-->Line_79 $$ if (layout instanceof XYLayoutManager) [ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_60 $$ LayoutManager layout = lwContainer.getLayout()-->Line_61 $$ if (layout instanceof XYLayoutManager) [ FD ]
Line_60 $$ LayoutManager layout = lwContainer.getLayout()-->Line_90 $$ ((RadContainer) component).setLayout(layout)[ FD ]
Line_71 $$ component = new RadRootContainer(module, id)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_57 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_61 $$ if (layout instanceof XYLayoutManager) -->Line_65 $$ xyLayoutManager.setPreferredSize(lwComponent.getBounds().getSize())[ CD ]
Line_48 $$ component = component1-->Line_98 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_114 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_6 $$ final RadComponent component-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_30 $$ if (componentClass == null) -->Line_48 $$ component = component1[ CD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_25 $$ if (lwComponent instanceof LwHSpacer) -->Line_26 $$ component = new RadHSpacer(module, id)[ CD ]
Line_6 $$ final RadComponent component-->Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))[ FD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_26 $$ component = new RadHSpacer(module, id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_107 $$ if (componentClass != null) -->Line_108 $$ final Palette palette = Palette.getInstance(module.getProject())[ CD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_77 $$ String layoutManagerName = lwContainer.getLayoutManager()-->Line_85 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)[ FD ]
Line_82 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_INTELLIJ-->Line_85 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)[ FD ]
Line_53 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_55 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_139 $$ if (component instanceof RadRootContainer) [ FD ]
Line_76 $$ component = new RadContainer(module, componentClass, id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_78 $$ if (layoutManagerName == null || layoutManagerName.length() == 0) [ CD ]
Line_55 $$ component = new RadSplitPane(module, componentClass, id)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_51 $$ component = new RadScrollPane(module, componentClass, id)-->Line_76 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_99 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_124 $$ if (value instanceof StringDescriptor) -->Line_125 $$ value = ((StringDescriptor) value).getValue()[ CD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_149 $$ component.doneLoadingFromLw()[ FD ]
Line_6 $$ final RadComponent component-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_7 $$ Class componentClass = null-->Line_107 $$ if (componentClass != null) [ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_28 $$ component = new RadVSpacer(module, id)[ FD ]
Line_139 $$ if (component instanceof RadRootContainer) -->Line_146 $$ radRootContainer.setInspectionSuppressions(lwRootContainer.getInspectionSuppressions())[ CD ]
Line_48 $$ component = component1-->Line_71 $$ component = new RadRootContainer(module, id)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_53 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_70 $$ if (lwContainer instanceof LwRootContainer) -->Line_87 $$ layoutManager.readLayout(lwContainer, container)[ CD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_48 $$ component = component1[ FD ]
Line_57 $$ component = new RadToolBar(module, componentClass, id)-->Line_127 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_68 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_150 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_19 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_110 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_17 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_51 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_28 $$ component = new RadVSpacer(module, id)-->Line_104 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_31 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_129 $$ if (component instanceof RadContainer) [ FD ]
