Line_3 $$ String text = regex.getText()-->Line_26 $$ if (text.contains("\n") || text.contains("\r")) [ FD ]
Line_19 $$ if (!GrStringUtil.parseRegexCharacters(part, new StringBuilder(part.length()), null, regex.getText().startsWith("/"))) -->Line_20 $$ myHolder.createErrorAnnotation(regex, GroovyBundle.message("illegal.escape.character.in.string.literal"))[ CD ]
Line_26 $$ if (text.contains("\n") || text.contains("\r")) -->Line_27 $$ myHolder.createErrorAnnotation(regex, GroovyBundle.message("multiline.slashy.strings.are.not.allowed.in.groovy.0", config.getSDKVersion(regex)))[ CD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_20 $$ myHolder.createErrorAnnotation(regex, GroovyBundle.message("illegal.escape.character.in.string.literal"))[ FD ]
Line_3 $$ String text = regex.getText()-->Line_4 $$ String quote = GrStringUtil.getStartQuote(text)[ FD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_3 $$ String text = regex.getText()[ CD ]
Line_24 $$ if ("/".equals(quote)) -->Line_25 $$ if (!config.isVersionAtLeast(regex, GroovyConfigUtils.GROOVY1_8)) [ CD ]
Line_4 $$ String quote = GrStringUtil.getStartQuote(text)-->Line_24 $$ if ("/".equals(quote)) [ FD ]
Line_5 $$ final GroovyConfigUtils config = GroovyConfigUtils.getInstance()-->Line_25 $$ if (!config.isVersionAtLeast(regex, GroovyConfigUtils.GROOVY1_8)) [ FD ]
Line_18 $$ for (String part : parts) -->Line_19 $$ if (!GrStringUtil.parseRegexCharacters(part, new StringBuilder(part.length()), null, regex.getText().startsWith("/"))) [ FD ]
Line_7 $$ if (!config.isVersionAtLeast(regex, GroovyConfigUtils.GROOVY1_8)) -->Line_8 $$ myHolder.createErrorAnnotation(regex, GroovyBundle.message("dollar.slash.strings.are.not.allowed.in.0", config.getSDKVersion(regex)))[ CD ]
Line_19 $$ if (!GrStringUtil.parseRegexCharacters(part, new StringBuilder(part.length()), null, regex.getText().startsWith("/"))) -->Line_21 $$ return[ CD ]
Line_5 $$ final GroovyConfigUtils config = GroovyConfigUtils.getInstance()-->Line_8 $$ myHolder.createErrorAnnotation(regex, GroovyBundle.message("dollar.slash.strings.are.not.allowed.in.0", config.getSDKVersion(regex)))[ FD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_19 $$ if (!GrStringUtil.parseRegexCharacters(part, new StringBuilder(part.length()), null, regex.getText().startsWith("/"))) [ FD ]
Line_25 $$ if (!config.isVersionAtLeast(regex, GroovyConfigUtils.GROOVY1_8)) -->Line_26 $$ if (text.contains("\n") || text.contains("\r")) [ CD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_12 $$ if (regex instanceof GrRegex) [ FD ]
Line_5 $$ final GroovyConfigUtils config = GroovyConfigUtils.getInstance()-->Line_7 $$ if (!config.isVersionAtLeast(regex, GroovyConfigUtils.GROOVY1_8)) [ FD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_5 $$ final GroovyConfigUtils config = GroovyConfigUtils.getInstance()[ CD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_27 $$ myHolder.createErrorAnnotation(regex, GroovyBundle.message("multiline.slashy.strings.are.not.allowed.in.groovy.0", config.getSDKVersion(regex)))[ FD ]
Line_12 $$ if (regex instanceof GrRegex) -->Line_13 $$ parts = ((GrRegex) regex).getTextParts()[ CD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_3 $$ String text = regex.getText()[ FD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_12 $$ if (regex instanceof GrRegex) [ CD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_4 $$ String quote = GrStringUtil.getStartQuote(text)[ CD ]
Line_4 $$ String quote = GrStringUtil.getStartQuote(text)-->Line_6 $$ if ("$/".equals(quote)) [ FD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_8 $$ myHolder.createErrorAnnotation(regex, GroovyBundle.message("dollar.slash.strings.are.not.allowed.in.0", config.getSDKVersion(regex)))[ FD ]
Line_26 $$ if (text.contains("\n") || text.contains("\r")) -->Line_28 $$ return[ CD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_11 $$ String[] parts[ CD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_6 $$ if ("$/".equals(quote)) [ CD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_7 $$ if (!config.isVersionAtLeast(regex, GroovyConfigUtils.GROOVY1_8)) [ FD ]
Line_11 $$ String[] parts-->Line_13 $$ parts = ((GrRegex) regex).getTextParts()[ FD ]
Line_5 $$ final GroovyConfigUtils config = GroovyConfigUtils.getInstance()-->Line_27 $$ myHolder.createErrorAnnotation(regex, GroovyBundle.message("multiline.slashy.strings.are.not.allowed.in.groovy.0", config.getSDKVersion(regex)))[ FD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_25 $$ if (!config.isVersionAtLeast(regex, GroovyConfigUtils.GROOVY1_8)) [ FD ]
Line_2 $$ private void checkRegexLiteral(PsiElement regex) -->Line_24 $$ if ("/".equals(quote)) [ CD ]
Line_6 $$ if ("$/".equals(quote)) -->Line_7 $$ if (!config.isVersionAtLeast(regex, GroovyConfigUtils.GROOVY1_8)) [ CD ]
