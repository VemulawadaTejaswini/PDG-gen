Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_4 $$ if (nonWs < line.length()) [ CD ]
Line_5 $$ line = line.substring(nonWs)-->Line_7 $$ if (line.startsWith("at"))[ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_3 $$ final int nonWs = CharArrayUtil.shiftForward(line, 0, " \t")[ FD ]
Line_5 $$ line = line.substring(nonWs)-->Line_15 $$ if (line.startsWith("- parking to wait"))[ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_15 $$ if (line.startsWith("- parking to wait"))[ FD ]
Line_5 $$ line = line.substring(nonWs)-->Line_19 $$ if (line.startsWith("\""))[ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_9 $$ if (line.startsWith("Caused"))[ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_13 $$ if (line.startsWith("- waiting"))[ CD ]
Line_5 $$ line = line.substring(nonWs)-->Line_9 $$ if (line.startsWith("Caused"))[ FD ]
Line_19 $$ if (line.startsWith("\""))-->Line_20 $$ return true[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_3 $$ final int nonWs = CharArrayUtil.shiftForward(line, 0, " \t")[ CD ]
Line_11 $$ if (line.startsWith("- locked"))-->Line_12 $$ return true[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_7 $$ if (line.startsWith("at"))[ FD ]
Line_3 $$ final int nonWs = CharArrayUtil.shiftForward(line, 0, " \t")-->Line_5 $$ line = line.substring(nonWs)[ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_4 $$ if (nonWs < line.length()) [ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_11 $$ if (line.startsWith("- locked"))[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_9 $$ if (line.startsWith("Caused"))[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_7 $$ if (line.startsWith("at"))[ CD ]
Line_9 $$ if (line.startsWith("Caused"))-->Line_10 $$ return true[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_13 $$ if (line.startsWith("- waiting"))[ FD ]
Line_7 $$ if (line.startsWith("at"))-->Line_8 $$ return true[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_19 $$ if (line.startsWith("\""))[ CD ]
Line_17 $$ if (line.startsWith("java.lang.Thread.State"))-->Line_18 $$ return true[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_19 $$ if (line.startsWith("\""))[ FD ]
Line_4 $$ if (nonWs < line.length()) -->Line_5 $$ line = line.substring(nonWs)[ CD ]
Line_5 $$ line = line.substring(nonWs)-->Line_17 $$ if (line.startsWith("java.lang.Thread.State"))[ FD ]
Line_5 $$ line = line.substring(nonWs)-->Line_13 $$ if (line.startsWith("- waiting"))[ FD ]
Line_5 $$ line = line.substring(nonWs)-->Line_11 $$ if (line.startsWith("- locked"))[ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_15 $$ if (line.startsWith("- parking to wait"))[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_11 $$ if (line.startsWith("- locked"))[ FD ]
Line_3 $$ final int nonWs = CharArrayUtil.shiftForward(line, 0, " \t")-->Line_4 $$ if (nonWs < line.length()) [ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_5 $$ line = line.substring(nonWs)[ FD ]
Line_13 $$ if (line.startsWith("- waiting"))-->Line_14 $$ return true[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_17 $$ if (line.startsWith("java.lang.Thread.State"))[ FD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_21 $$ return false[ CD ]
Line_2 $$ private static boolean mustHaveNewLineBefore(String line) -->Line_17 $$ if (line.startsWith("java.lang.Thread.State"))[ CD ]
Line_15 $$ if (line.startsWith("- parking to wait"))-->Line_16 $$ return true[ CD ]
