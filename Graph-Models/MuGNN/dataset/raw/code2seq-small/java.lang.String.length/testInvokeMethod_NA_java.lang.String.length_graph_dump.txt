Line_2 $$ public void testInvokeMethod() throws Exception -->Line_6 $$ assertByteCodeExpression(constantString("foo").invoke("concat", type(String.class), ImmutableList.of(type(String.class)), constantString("bar")), "foo".concat("bar"), "\"foo\".concat(\"bar\")")[ CD ]
Line_2 $$ public void testInvokeMethod() throws Exception -->Line_4 $$ assertByteCodeExpression(constantString("foo").invoke("concat", String.class, constantString("bar")), "foo".concat("bar"), "\"foo\".concat(\"bar\")")[ CD ]
Line_2 $$ public void testInvokeMethod() throws Exception -->Line_3 $$ assertByteCodeExpression(constantString("foo").invoke("length", int.class), "foo".length(), "\"foo\".length()")[ CD ]
Line_2 $$ public void testInvokeMethod() throws Exception -->Line_5 $$ assertByteCodeExpression(constantString("foo").invoke("concat", String.class, ImmutableList.of(String.class), constantString("bar")), "foo".concat("bar"), "\"foo\".concat(\"bar\")")[ CD ]
