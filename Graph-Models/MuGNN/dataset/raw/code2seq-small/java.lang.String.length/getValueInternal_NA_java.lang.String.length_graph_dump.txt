Line_39 $$ if (left instanceof Number && right instanceof Number) -->Line_40 $$ Number leftNumber = (Number) left[ CD ]
Line_49 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_52 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) [ CD ]
Line_40 $$ Number leftNumber = (Number) left-->Line_51 $$ return new TypedValue(leftNumber.floatValue() - rightNumber.floatValue())[ FD ]
Line_9 $$ if (operand instanceof Number) -->Line_10 $$ if (operand instanceof BigDecimal) [ CD ]
Line_10 $$ if (operand instanceof BigDecimal) -->Line_11 $$ return new TypedValue(((BigDecimal) operand).negate())[ CD ]
Line_42 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_44 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ CD ]
Line_43 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)-->Line_45 $$ return new TypedValue(leftBigDecimal.subtract(rightBigDecimal))[ FD ]
Line_53 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)-->Line_55 $$ return new TypedValue(leftBigInteger.subtract(rightBigInteger))[ FD ]
Line_40 $$ Number leftNumber = (Number) left-->Line_61 $$ return new TypedValue(leftNumber.intValue() - rightNumber.intValue())[ FD ]
Line_40 $$ Number leftNumber = (Number) left-->Line_48 $$ return new TypedValue(leftNumber.doubleValue() - rightNumber.doubleValue())[ FD ]
Line_67 $$ if (left instanceof String && right instanceof Integer && ((String) left).length() == 1) -->Line_69 $$ Integer theInteger = (Integer) right[ CD ]
Line_37 $$ Object left = leftOp.getValueInternal(state).getValue()-->Line_73 $$ return state.operate(Operation.SUBTRACT, left, right)[ FD ]
Line_42 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_46 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) [ CD ]
Line_40 $$ Number leftNumber = (Number) left-->Line_53 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ FD ]
Line_15 $$ if (operand instanceof Float) -->Line_18 $$ if (operand instanceof BigInteger) [ CD ]
Line_56 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_58 $$ return new TypedValue(leftNumber.longValue() - rightNumber.longValue())[ CD ]
Line_20 $$ if (operand instanceof Long) -->Line_22 $$ return new TypedValue(0 - ((Number) operand).longValue())[ CD ]
Line_20 $$ if (operand instanceof Long) -->Line_21 $$ this.exitTypeDescriptor = "J"[ CD ]
Line_12 $$ if (operand instanceof Double) -->Line_15 $$ if (operand instanceof Float) [ CD ]
Line_5 $$ SpelNodeImpl rightOp = getRightOperand()-->Line_38 $$ Object right = rightOp.getValueInternal(state).getValue()[ FD ]
Line_52 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_55 $$ return new TypedValue(leftBigInteger.subtract(rightBigInteger))[ CD ]
Line_40 $$ Number leftNumber = (Number) left-->Line_58 $$ return new TypedValue(leftNumber.longValue() - rightNumber.longValue())[ FD ]
Line_26 $$ if (operand instanceof Short) -->Line_27 $$ return new TypedValue(0 - ((Number) operand).shortValue())[ CD ]
Line_46 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_48 $$ return new TypedValue(leftNumber.doubleValue() - rightNumber.doubleValue())[ CD ]
Line_23 $$ if (operand instanceof Integer) -->Line_24 $$ this.exitTypeDescriptor = "I"[ CD ]
Line_41 $$ Number rightNumber = (Number) right-->Line_59 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ FD ]
Line_39 $$ if (left instanceof Number && right instanceof Number) -->Line_41 $$ Number rightNumber = (Number) right[ CD ]
Line_23 $$ if (operand instanceof Integer) -->Line_25 $$ return new TypedValue(0 - ((Number) operand).intValue())[ CD ]
Line_42 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_45 $$ return new TypedValue(leftBigDecimal.subtract(rightBigDecimal))[ CD ]
Line_44 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)-->Line_45 $$ return new TypedValue(leftBigDecimal.subtract(rightBigDecimal))[ FD ]
Line_39 $$ if (left instanceof Number && right instanceof Number) -->Line_42 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) [ CD ]
Line_52 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_53 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ CD ]
Line_38 $$ Object right = rightOp.getValueInternal(state).getValue()-->Line_73 $$ return state.operate(Operation.SUBTRACT, left, right)[ FD ]
Line_56 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_57 $$ this.exitTypeDescriptor = "J"[ CD ]
Line_46 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_49 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) [ CD ]
Line_46 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_47 $$ this.exitTypeDescriptor = "D"[ CD ]
Line_6 $$ if (rightOp == null) -->Line_35 $$ return state.operate(Operation.SUBTRACT, operand, null)[ CD ]
Line_67 $$ if (left instanceof String && right instanceof Integer && ((String) left).length() == 1) -->Line_68 $$ String theString = (String) left[ CD ]
Line_12 $$ if (operand instanceof Double) -->Line_13 $$ this.exitTypeDescriptor = "D"[ CD ]
Line_12 $$ if (operand instanceof Double) -->Line_14 $$ return new TypedValue(0 - ((Number) operand).doubleValue())[ CD ]
Line_23 $$ if (operand instanceof Integer) -->Line_26 $$ if (operand instanceof Short) [ CD ]
Line_26 $$ if (operand instanceof Short) -->Line_28 $$ if (operand instanceof Byte) [ CD ]
Line_40 $$ Number leftNumber = (Number) left-->Line_43 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ FD ]
Line_56 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_59 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ CD ]
Line_40 $$ Number leftNumber = (Number) left-->Line_59 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ FD ]
Line_49 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_51 $$ return new TypedValue(leftNumber.floatValue() - rightNumber.floatValue())[ CD ]
Line_41 $$ Number rightNumber = (Number) right-->Line_51 $$ return new TypedValue(leftNumber.floatValue() - rightNumber.floatValue())[ FD ]
Line_52 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_54 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ CD ]
Line_41 $$ Number rightNumber = (Number) right-->Line_61 $$ return new TypedValue(leftNumber.intValue() - rightNumber.intValue())[ FD ]
Line_52 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_56 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) [ CD ]
Line_4 $$ SpelNodeImpl leftOp = getLeftOperand()-->Line_37 $$ Object left = leftOp.getValueInternal(state).getValue()[ FD ]
Line_6 $$ if (rightOp == null) -->Line_9 $$ if (operand instanceof Number) [ CD ]
Line_18 $$ if (operand instanceof BigInteger) -->Line_19 $$ return new TypedValue(((BigInteger) operand).negate())[ CD ]
Line_18 $$ if (operand instanceof BigInteger) -->Line_20 $$ if (operand instanceof Long) [ CD ]
Line_49 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_50 $$ this.exitTypeDescriptor = "F"[ CD ]
Line_59 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) -->Line_61 $$ return new TypedValue(leftNumber.intValue() - rightNumber.intValue())[ CD ]
Line_5 $$ SpelNodeImpl rightOp = getRightOperand()-->Line_6 $$ if (rightOp == null) [ FD ]
Line_41 $$ Number rightNumber = (Number) right-->Line_48 $$ return new TypedValue(leftNumber.doubleValue() - rightNumber.doubleValue())[ FD ]
Line_41 $$ Number rightNumber = (Number) right-->Line_44 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ FD ]
Line_41 $$ Number rightNumber = (Number) right-->Line_54 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ FD ]
Line_20 $$ if (operand instanceof Long) -->Line_23 $$ if (operand instanceof Integer) [ CD ]
Line_54 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)-->Line_55 $$ return new TypedValue(leftBigInteger.subtract(rightBigInteger))[ FD ]
Line_28 $$ if (operand instanceof Byte) -->Line_29 $$ return new TypedValue(0 - ((Number) operand).byteValue())[ CD ]
Line_41 $$ Number rightNumber = (Number) right-->Line_58 $$ return new TypedValue(leftNumber.longValue() - rightNumber.longValue())[ FD ]
Line_10 $$ if (operand instanceof BigDecimal) -->Line_12 $$ if (operand instanceof Double) [ CD ]
Line_59 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) -->Line_60 $$ this.exitTypeDescriptor = "I"[ CD ]
Line_15 $$ if (operand instanceof Float) -->Line_16 $$ this.exitTypeDescriptor = "F"[ CD ]
Line_15 $$ if (operand instanceof Float) -->Line_17 $$ return new TypedValue(0 - ((Number) operand).floatValue())[ CD ]
Line_42 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_43 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ CD ]
