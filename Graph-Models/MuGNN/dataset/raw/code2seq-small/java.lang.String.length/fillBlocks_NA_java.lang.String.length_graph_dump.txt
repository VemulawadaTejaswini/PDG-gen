Line_13 $$ for (int i = 0; acc > 0; ++i) -->Line_14 $$ String s = generateSentence(r, keylen)[ CD ]
Line_3 $$ Random r = new Random()-->Line_6 $$ r.setSeed(seed)[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_21 $$ keys = k.toArray(new String[0])[ CD ]
Line_15 $$ acc -= s.length()-->Line_13 $$ for (int i = 0; acc > 0; ++i) [ FD ]
Line_10 $$ int acc = (3 * conf.getInt("io.seqfile.compress.blocksize", 1000000)) >> 1-->Line_18 $$ acc -= s.length()[ FD ]
Line_13 $$ for (int i = 0; acc > 0; ++i) -->Line_18 $$ acc -= s.length()[ CD ]
Line_13 $$ for (int i = 0; acc > 0; ++i) -->Line_15 $$ acc -= s.length()[ CD ]
Line_12 $$ ArrayList<String> v = new ArrayList<String>()-->Line_19 $$ v.add(s)[ FD ]
Line_17 $$ s = generateSentence(r, vallen)-->Line_19 $$ v.add(s)[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_4 $$ long seed = conf.getLong("filebench.seed", -1)[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_8 $$ int keylen = conf.getInt("filebench.key.words", 5)[ CD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_13 $$ for (int i = 0; acc > 0; ++i) [ CD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_22 $$ values = v.toArray(new String[0])[ CD ]
Line_14 $$ String s = generateSentence(r, keylen)-->Line_19 $$ v.add(s)[ FD ]
Line_14 $$ String s = generateSentence(r, keylen)-->Line_17 $$ s = generateSentence(r, vallen)[ FD ]
Line_17 $$ s = generateSentence(r, vallen)-->Line_15 $$ acc -= s.length()[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_9 $$ int vallen = conf.getInt("filebench.val.words", 20)[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_3 $$ Random r = new Random()[ CD ]
Line_14 $$ String s = generateSentence(r, keylen)-->Line_16 $$ k.add(s)[ FD ]
Line_14 $$ String s = generateSentence(r, keylen)-->Line_15 $$ acc -= s.length()[ FD ]
Line_14 $$ String s = generateSentence(r, keylen)-->Line_18 $$ acc -= s.length()[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_9 $$ int vallen = conf.getInt("filebench.val.words", 20)[ CD ]
Line_12 $$ ArrayList<String> v = new ArrayList<String>()-->Line_22 $$ values = v.toArray(new String[0])[ FD ]
Line_4 $$ long seed = conf.getLong("filebench.seed", -1)-->Line_5 $$ if (seed > 0) [ FD ]
Line_17 $$ s = generateSentence(r, vallen)-->Line_16 $$ k.add(s)[ FD ]
Line_13 $$ for (int i = 0; acc > 0; ++i) -->Line_16 $$ k.add(s)[ CD ]
Line_13 $$ for (int i = 0; acc > 0; ++i) -->Line_19 $$ v.add(s)[ CD ]
Line_10 $$ int acc = (3 * conf.getInt("io.seqfile.compress.blocksize", 1000000)) >> 1-->Line_13 $$ for (int i = 0; acc > 0; ++i) [ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_8 $$ int keylen = conf.getInt("filebench.key.words", 5)[ FD ]
Line_10 $$ int acc = (3 * conf.getInt("io.seqfile.compress.blocksize", 1000000)) >> 1-->Line_15 $$ acc -= s.length()[ FD ]
Line_13 $$ for (int i = 0; acc > 0; ++i) -->Line_17 $$ s = generateSentence(r, vallen)[ CD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_5 $$ if (seed > 0) [ CD ]
Line_15 $$ acc -= s.length()-->Line_18 $$ acc -= s.length()[ FD ]
Line_18 $$ acc -= s.length()-->Line_13 $$ for (int i = 0; acc > 0; ++i) [ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_4 $$ long seed = conf.getLong("filebench.seed", -1)[ CD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_10 $$ int acc = (3 * conf.getInt("io.seqfile.compress.blocksize", 1000000)) >> 1[ CD ]
Line_3 $$ Random r = new Random()-->Line_17 $$ s = generateSentence(r, vallen)[ FD ]
Line_3 $$ Random r = new Random()-->Line_14 $$ String s = generateSentence(r, keylen)[ FD ]
Line_11 $$ ArrayList<String> k = new ArrayList<String>()-->Line_21 $$ keys = k.toArray(new String[0])[ FD ]
Line_11 $$ ArrayList<String> k = new ArrayList<String>()-->Line_16 $$ k.add(s)[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_10 $$ int acc = (3 * conf.getInt("io.seqfile.compress.blocksize", 1000000)) >> 1[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_12 $$ ArrayList<String> v = new ArrayList<String>()[ CD ]
Line_17 $$ s = generateSentence(r, vallen)-->Line_18 $$ acc -= s.length()[ FD ]
Line_4 $$ long seed = conf.getLong("filebench.seed", -1)-->Line_6 $$ r.setSeed(seed)[ FD ]
Line_8 $$ int keylen = conf.getInt("filebench.key.words", 5)-->Line_14 $$ String s = generateSentence(r, keylen)[ FD ]
Line_9 $$ int vallen = conf.getInt("filebench.val.words", 20)-->Line_17 $$ s = generateSentence(r, vallen)[ FD ]
Line_2 $$ private static void fillBlocks(JobConf conf) -->Line_11 $$ ArrayList<String> k = new ArrayList<String>()[ CD ]
Line_5 $$ if (seed > 0) -->Line_6 $$ r.setSeed(seed)[ CD ]
