Line_2 $$ private void addPatterns(final boolean addToIncludes, final String patternString) -->Line_4 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_2 $$ private void addPatterns(final boolean addToIncludes, final String patternString) -->Line_3 $$ final StringTokenizer tokenizer = new StringTokenizer(patternString, ", \t", false)[ CD ]
Line_5 $$ final String pattern = tokenizer.nextToken()-->Line_10 $$ addExcludePattern(pattern)[ FD ]
Line_3 $$ final StringTokenizer tokenizer = new StringTokenizer(patternString, ", \t", false)-->Line_5 $$ final String pattern = tokenizer.nextToken()[ FD ]
Line_5 $$ final String pattern = tokenizer.nextToken()-->Line_6 $$ if (pattern.length() > 0) [ FD ]
Line_5 $$ final String pattern = tokenizer.nextToken()-->Line_8 $$ addIncludePattern(pattern)[ FD ]
Line_6 $$ if (pattern.length() > 0) -->Line_7 $$ if (addToIncludes) [ CD ]
Line_7 $$ if (addToIncludes) -->Line_8 $$ addIncludePattern(pattern)[ CD ]
Line_3 $$ final StringTokenizer tokenizer = new StringTokenizer(patternString, ", \t", false)-->Line_4 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_4 $$ while (tokenizer.hasMoreTokens()) -->Line_6 $$ if (pattern.length() > 0) [ CD ]
Line_7 $$ if (addToIncludes) -->Line_10 $$ addExcludePattern(pattern)[ CD ]
Line_4 $$ while (tokenizer.hasMoreTokens()) -->Line_5 $$ final String pattern = tokenizer.nextToken()[ CD ]
