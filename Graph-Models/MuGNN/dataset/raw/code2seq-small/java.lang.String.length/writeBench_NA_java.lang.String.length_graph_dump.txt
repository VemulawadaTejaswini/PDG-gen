Line_5 $$ Text val = new Text()-->Line_17 $$ val.set(values[i])[ FD ]
Line_15 $$ i %= keys.length-->Line_14 $$ for (int i = 0; acc < filelen; ++i) [ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_8 $$ conf.set("mapred.work.output.dir", outd.toString())[ CD ]
Line_14 $$ for (int i = 0; acc < filelen; ++i) -->Line_19 $$ acc += keys[i].length()[ CD ]
Line_7 $$ final Path outd = FileOutputFormat.getOutputPath(conf)-->Line_8 $$ conf.set("mapred.work.output.dir", outd.toString())[ FD ]
Line_12 $$ long acc = 0L-->Line_20 $$ acc += values[i].length()[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_8 $$ conf.set("mapred.work.output.dir", outd.toString())[ FD ]
Line_13 $$ Date start = new Date()-->Line_23 $$ return end.getTime() - start.getTime()[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_3 $$ long filelen = conf.getLong("filebench.file.bytes", 5 * 1024 * 1024 * 1024)[ CD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_10 $$ RecordWriter<Text, Text> rw = outf.getRecordWriter(outd.getFileSystem(conf), conf, fn, Reporter.NULL)[ CD ]
Line_12 $$ long acc = 0L-->Line_19 $$ acc += keys[i].length()[ FD ]
Line_10 $$ RecordWriter<Text, Text> rw = outf.getRecordWriter(outd.getFileSystem(conf), conf, fn, Reporter.NULL)-->Line_18 $$ rw.write(key, val)[ FD ]
Line_6 $$ final String fn = conf.get("test.filebench.name", "")-->Line_10 $$ RecordWriter<Text, Text> rw = outf.getRecordWriter(outd.getFileSystem(conf), conf, fn, Reporter.NULL)[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_9 $$ OutputFormat outf = conf.getOutputFormat()[ FD ]
Line_14 $$ for (int i = 0; acc < filelen; ++i) -->Line_15 $$ i %= keys.length[ FD ]
Line_14 $$ for (int i = 0; acc < filelen; ++i) -->Line_20 $$ acc += values[i].length()[ CD ]
Line_19 $$ acc += keys[i].length()-->Line_20 $$ acc += values[i].length()[ FD ]
Line_14 $$ for (int i = 0; acc < filelen; ++i) -->Line_18 $$ rw.write(key, val)[ CD ]
Line_4 $$ Text key = new Text()-->Line_18 $$ rw.write(key, val)[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_6 $$ final String fn = conf.get("test.filebench.name", "")[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_5 $$ Text val = new Text()[ CD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_4 $$ Text key = new Text()[ CD ]
Line_4 $$ Text key = new Text()-->Line_16 $$ key.set(keys[i])[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_3 $$ long filelen = conf.getLong("filebench.file.bytes", 5 * 1024 * 1024 * 1024)[ FD ]
Line_14 $$ for (int i = 0; acc < filelen; ++i) -->Line_17 $$ val.set(values[i])[ CD ]
Line_3 $$ long filelen = conf.getLong("filebench.file.bytes", 5 * 1024 * 1024 * 1024)-->Line_14 $$ for (int i = 0; acc < filelen; ++i) [ FD ]
Line_14 $$ for (int i = 0; acc < filelen; ++i) -->Line_15 $$ i %= keys.length[ CD ]
Line_12 $$ long acc = 0L-->Line_14 $$ for (int i = 0; acc < filelen; ++i) [ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_7 $$ final Path outd = FileOutputFormat.getOutputPath(conf)[ CD ]
Line_9 $$ OutputFormat outf = conf.getOutputFormat()-->Line_10 $$ RecordWriter<Text, Text> rw = outf.getRecordWriter(outd.getFileSystem(conf), conf, fn, Reporter.NULL)[ FD ]
Line_19 $$ acc += keys[i].length()-->Line_14 $$ for (int i = 0; acc < filelen; ++i) [ FD ]
Line_20 $$ acc += values[i].length()-->Line_14 $$ for (int i = 0; acc < filelen; ++i) [ FD ]
Line_10 $$ RecordWriter<Text, Text> rw = outf.getRecordWriter(outd.getFileSystem(conf), conf, fn, Reporter.NULL)-->Line_25 $$ rw.close(Reporter.NULL)[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_7 $$ final Path outd = FileOutputFormat.getOutputPath(conf)[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_9 $$ OutputFormat outf = conf.getOutputFormat()[ CD ]
Line_14 $$ for (int i = 0; acc < filelen; ++i) -->Line_16 $$ key.set(keys[i])[ CD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_10 $$ RecordWriter<Text, Text> rw = outf.getRecordWriter(outd.getFileSystem(conf), conf, fn, Reporter.NULL)[ FD ]
Line_22 $$ Date end = new Date()-->Line_23 $$ return end.getTime() - start.getTime()[ FD ]
Line_5 $$ Text val = new Text()-->Line_18 $$ rw.write(key, val)[ FD ]
Line_7 $$ final Path outd = FileOutputFormat.getOutputPath(conf)-->Line_10 $$ RecordWriter<Text, Text> rw = outf.getRecordWriter(outd.getFileSystem(conf), conf, fn, Reporter.NULL)[ FD ]
Line_2 $$ static long writeBench(JobConf conf) throws IOException -->Line_6 $$ final String fn = conf.get("test.filebench.name", "")[ CD ]
