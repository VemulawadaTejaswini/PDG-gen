Line_5 $$ final XmlNSDescriptor nsDescriptor = rootTag.getNSDescriptor(namespace, true)-->Line_6 $$ if (nsDescriptor instanceof XmlNSDescriptorImpl) [ FD ]
Line_29 $$ visited = new HashSet<XmlTag>(1)-->Line_30 $$ visited.add(rootTag)[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_3 $$ XmlNSDescriptorImpl responsibleDescriptor = this[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_21 $$ final CachedValue<TypeDescriptor> descriptor = myTypesMap.get(pair)[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_22 $$ if (descriptor != null) [ CD ]
Line_28 $$ if (visited == null) -->Line_29 $$ visited = new HashSet<XmlTag>(1)[ CD ]
Line_22 $$ if (descriptor != null) -->Line_23 $$ TypeDescriptor value = descriptor.getValue()[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_30 $$ visited.add(rootTag)[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_32 $$ return doFindIn(tags, name, namespace, pair, rootTag, visited)[ CD ]
Line_16 $$ if (visited.contains(rootTag))-->Line_17 $$ return null[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_28 $$ if (visited == null) [ CD ]
Line_7 $$ responsibleDescriptor = (XmlNSDescriptorImpl) nsDescriptor-->Line_11 $$ return responsibleDescriptor.findTypeDescriptor(XmlUtil.findLocalNameByQualifiedName(name))[ FD ]
Line_4 $$ if (namespace != null && namespace.length() != 0 && !namespace.equals(getDefaultNamespace())) -->Line_6 $$ if (nsDescriptor instanceof XmlNSDescriptorImpl) [ CD ]
Line_15 $$ if (visited != null) -->Line_16 $$ if (visited.contains(rootTag))[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_13 $$ if (rootTag == null)[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_10 $$ if (responsibleDescriptor != this) [ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_16 $$ if (visited.contains(rootTag))[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_4 $$ if (namespace != null && namespace.length() != 0 && !namespace.equals(getDefaultNamespace())) [ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_15 $$ if (visited != null) [ FD ]
Line_4 $$ if (namespace != null && namespace.length() != 0 && !namespace.equals(getDefaultNamespace())) -->Line_5 $$ final XmlNSDescriptor nsDescriptor = rootTag.getNSDescriptor(namespace, true)[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_4 $$ if (namespace != null && namespace.length() != 0 && !namespace.equals(getDefaultNamespace())) [ CD ]
Line_20 $$ final Pair<QNameKey, XmlTag> pair = Pair.create(new QNameKey(name, namespace), rootTag)-->Line_21 $$ final CachedValue<TypeDescriptor> descriptor = myTypesMap.get(pair)[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_13 $$ if (rootTag == null)[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_15 $$ if (visited != null) [ CD ]
Line_7 $$ responsibleDescriptor = (XmlNSDescriptorImpl) nsDescriptor-->Line_10 $$ if (responsibleDescriptor != this) [ FD ]
Line_24 $$ if (value == null || (value instanceof ComplexTypeDescriptor && ((ComplexTypeDescriptor) value).getDeclaration().isValid()))-->Line_25 $$ return value[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_32 $$ return doFindIn(tags, name, namespace, pair, rootTag, visited)[ FD ]
Line_28 $$ if (visited == null) -->Line_30 $$ visited.add(rootTag)[ CD ]
Line_13 $$ if (rootTag == null)-->Line_14 $$ return null[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_28 $$ if (visited == null) [ FD ]
Line_3 $$ XmlNSDescriptorImpl responsibleDescriptor = this-->Line_7 $$ responsibleDescriptor = (XmlNSDescriptorImpl) nsDescriptor[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_29 $$ visited = new HashSet<XmlTag>(1)[ FD ]
Line_23 $$ TypeDescriptor value = descriptor.getValue()-->Line_24 $$ if (value == null || (value instanceof ComplexTypeDescriptor && ((ComplexTypeDescriptor) value).getDeclaration().isValid()))[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_5 $$ final XmlNSDescriptor nsDescriptor = rootTag.getNSDescriptor(namespace, true)[ FD ]
Line_3 $$ XmlNSDescriptorImpl responsibleDescriptor = this-->Line_11 $$ return responsibleDescriptor.findTypeDescriptor(XmlUtil.findLocalNameByQualifiedName(name))[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_11 $$ return responsibleDescriptor.findTypeDescriptor(XmlUtil.findLocalNameByQualifiedName(name))[ FD ]
Line_10 $$ if (responsibleDescriptor != this) -->Line_11 $$ return responsibleDescriptor.findTypeDescriptor(XmlUtil.findLocalNameByQualifiedName(name))[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_18 $$ visited.add(rootTag)[ FD ]
Line_22 $$ if (descriptor != null) -->Line_24 $$ if (value == null || (value instanceof ComplexTypeDescriptor && ((ComplexTypeDescriptor) value).getDeclaration().isValid()))[ CD ]
Line_27 $$ XmlTag[] tags = rootTag.getSubTags()-->Line_32 $$ return doFindIn(tags, name, namespace, pair, rootTag, visited)[ FD ]
Line_21 $$ final CachedValue<TypeDescriptor> descriptor = myTypesMap.get(pair)-->Line_23 $$ TypeDescriptor value = descriptor.getValue()[ FD ]
Line_6 $$ if (nsDescriptor instanceof XmlNSDescriptorImpl) -->Line_7 $$ responsibleDescriptor = (XmlNSDescriptorImpl) nsDescriptor[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_20 $$ final Pair<QNameKey, XmlTag> pair = Pair.create(new QNameKey(name, namespace), rootTag)[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_20 $$ final Pair<QNameKey, XmlTag> pair = Pair.create(new QNameKey(name, namespace), rootTag)[ FD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_27 $$ XmlTag[] tags = rootTag.getSubTags()[ CD ]
Line_2 $$ protected TypeDescriptor findTypeDescriptorImpl(XmlTag rootTag, final String name, String namespace, Set<XmlTag> visited) -->Line_27 $$ XmlTag[] tags = rootTag.getSubTags()[ FD ]
Line_29 $$ visited = new HashSet<XmlTag>(1)-->Line_32 $$ return doFindIn(tags, name, namespace, pair, rootTag, visited)[ FD ]
Line_20 $$ final Pair<QNameKey, XmlTag> pair = Pair.create(new QNameKey(name, namespace), rootTag)-->Line_32 $$ return doFindIn(tags, name, namespace, pair, rootTag, visited)[ FD ]
Line_3 $$ XmlNSDescriptorImpl responsibleDescriptor = this-->Line_10 $$ if (responsibleDescriptor != this) [ FD ]
Line_21 $$ final CachedValue<TypeDescriptor> descriptor = myTypesMap.get(pair)-->Line_22 $$ if (descriptor != null) [ FD ]
Line_15 $$ if (visited != null) -->Line_18 $$ visited.add(rootTag)[ CD ]
