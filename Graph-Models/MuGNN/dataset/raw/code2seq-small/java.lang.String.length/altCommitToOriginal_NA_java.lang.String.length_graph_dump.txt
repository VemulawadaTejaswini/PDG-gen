Line_3 $$ final PsiFile origPsiFile = PsiDocumentManager.getInstance(myProject).getPsiFile(myOrigDocument)-->Line_35 $$ PsiElement newInjected = InjectedLanguageManager.getInstance(myProject).findInjectedElementAt(origPsiFile, hostStartOffset)[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_34 $$ DocumentUtil.executeInBulk(myOrigDocument, true, task)[ CD ]
Line_13 $$ final int hostStartOffset = myAltFullRange.getStartOffset()-->Line_35 $$ PsiElement newInjected = InjectedLanguageManager.getInstance(myProject).findInjectedElementAt(origPsiFile, hostStartOffset)[ FD ]
Line_37 $$ if (documentWindow != null) -->Line_38 $$ myEditor.getCaretModel().moveToOffset(documentWindow.injectedToHost(e.getOffset()))[ CD ]
Line_13 $$ final int hostStartOffset = myAltFullRange.getStartOffset()-->Line_20 $$ int idx = CharArrayUtil.indexOf(myOrigDocument.getCharsSequence(), tempText, hostStartOffset, myAltFullRange.getEndOffset())[ FD ]
Line_5 $$ LinkedHashMap<String, String> replacementMap = new LinkedHashMap<String, String>()-->Line_19 $$ for (String tempText : replacementMap.keySet()) [ FD ]
Line_9 $$ String tempText = "REPLACE" + (count++) + Long.toHexString(StringHash.calc(replacement))-->Line_21 $$ myOrigDocument.replaceString(idx, idx + tempText.length(), replacementMap.get(tempText))[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_37 $$ if (documentWindow != null) [ CD ]
Line_13 $$ final int hostStartOffset = myAltFullRange.getStartOffset()-->Line_14 $$ myEditor.getCaretModel().moveToOffset(hostStartOffset)[ FD ]
Line_37 $$ if (documentWindow != null) -->Line_39 $$ myEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE)[ CD ]
Line_7 $$ for (RangeMarker o : ContainerUtil.reverse(((DocumentEx) myNewDocument).getGuardedBlocks())) -->Line_10 $$ newText = newText.substring(0, o.getStartOffset()) + tempText + newText.substring(o.getEndOffset())[ FD ]
Line_10 $$ newText = newText.substring(0, o.getStartOffset()) + tempText + newText.substring(o.getEndOffset())-->Line_18 $$ myOrigDocument.replaceString(hostStartOffset, myAltFullRange.getEndOffset(), newText)[ FD ]
Line_13 $$ final int hostStartOffset = myAltFullRange.getStartOffset()-->Line_29 $$ CodeStyleManager.getInstance(myProject).reformatRange(origPsiFile, hostStartOffset, myAltFullRange.getEndOffset(), true)[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_4 $$ String newText = myNewDocument.getText()[ CD ]
Line_4 $$ String newText = myNewDocument.getText()-->Line_18 $$ myOrigDocument.replaceString(hostStartOffset, myAltFullRange.getEndOffset(), newText)[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_23 $$ fixDocumentQuotes(myOrigDocument, hostStartOffset - 1)[ CD ]
Line_20 $$ int idx = CharArrayUtil.indexOf(myOrigDocument.getCharsSequence(), tempText, hostStartOffset, myAltFullRange.getEndOffset())-->Line_21 $$ myOrigDocument.replaceString(idx, idx + tempText.length(), replacementMap.get(tempText))[ FD ]
Line_26 $$ Runnable task = new Runnable() -->Line_34 $$ DocumentUtil.executeInBulk(myOrigDocument, true, task)[ FD ]
Line_4 $$ String newText = myNewDocument.getText()-->Line_16 $$ newText = preProcessor.preprocessOnPaste(myProject, origPsiFile, myEditor, newText, null)[ FD ]
Line_16 $$ newText = preProcessor.preprocessOnPaste(myProject, origPsiFile, myEditor, newText, null)-->Line_18 $$ myOrigDocument.replaceString(hostStartOffset, myAltFullRange.getEndOffset(), newText)[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_35 $$ PsiElement newInjected = InjectedLanguageManager.getInstance(myProject).findInjectedElementAt(origPsiFile, hostStartOffset)[ CD ]
Line_4 $$ String newText = myNewDocument.getText()-->Line_10 $$ newText = newText.substring(0, o.getStartOffset()) + tempText + newText.substring(o.getEndOffset())[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_24 $$ fixDocumentQuotes(myOrigDocument, myAltFullRange.getEndOffset())[ CD ]
Line_8 $$ String replacement = o.getUserData(REPLACEMENT_KEY)-->Line_11 $$ replacementMap.put(tempText, replacement)[ FD ]
Line_13 $$ final int hostStartOffset = myAltFullRange.getStartOffset()-->Line_18 $$ myOrigDocument.replaceString(hostStartOffset, myAltFullRange.getEndOffset(), newText)[ FD ]
Line_3 $$ final PsiFile origPsiFile = PsiDocumentManager.getInstance(myProject).getPsiFile(myOrigDocument)-->Line_29 $$ CodeStyleManager.getInstance(myProject).reformatRange(origPsiFile, hostStartOffset, myAltFullRange.getEndOffset(), true)[ FD ]
Line_15 $$ for (CopyPastePreProcessor preProcessor : Extensions.getExtensions(CopyPastePreProcessor.EP_NAME)) -->Line_16 $$ newText = preProcessor.preprocessOnPaste(myProject, origPsiFile, myEditor, newText, null)[ FD ]
Line_5 $$ LinkedHashMap<String, String> replacementMap = new LinkedHashMap<String, String>()-->Line_21 $$ myOrigDocument.replaceString(idx, idx + tempText.length(), replacementMap.get(tempText))[ FD ]
Line_7 $$ for (RangeMarker o : ContainerUtil.reverse(((DocumentEx) myNewDocument).getGuardedBlocks())) -->Line_8 $$ String replacement = o.getUserData(REPLACEMENT_KEY)[ FD ]
Line_9 $$ String tempText = "REPLACE" + (count++) + Long.toHexString(StringHash.calc(replacement))-->Line_11 $$ replacementMap.put(tempText, replacement)[ FD ]
Line_9 $$ String tempText = "REPLACE" + (count++) + Long.toHexString(StringHash.calc(replacement))-->Line_20 $$ int idx = CharArrayUtil.indexOf(myOrigDocument.getCharsSequence(), tempText, hostStartOffset, myAltFullRange.getEndOffset())[ FD ]
Line_10 $$ newText = newText.substring(0, o.getStartOffset()) + tempText + newText.substring(o.getEndOffset())-->Line_16 $$ newText = preProcessor.preprocessOnPaste(myProject, origPsiFile, myEditor, newText, null)[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_25 $$ PsiDocumentManager.getInstance(myProject).commitDocument(myOrigDocument)[ CD ]
Line_8 $$ String replacement = o.getUserData(REPLACEMENT_KEY)-->Line_9 $$ String tempText = "REPLACE" + (count++) + Long.toHexString(StringHash.calc(replacement))[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_18 $$ myOrigDocument.replaceString(hostStartOffset, myAltFullRange.getEndOffset(), newText)[ CD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_26 $$ Runnable task = new Runnable() [ CD ]
Line_6 $$ int count = 0-->Line_9 $$ String tempText = "REPLACE" + (count++) + Long.toHexString(StringHash.calc(replacement))[ FD ]
Line_5 $$ LinkedHashMap<String, String> replacementMap = new LinkedHashMap<String, String>()-->Line_11 $$ replacementMap.put(tempText, replacement)[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_6 $$ int count = 0[ CD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_14 $$ myEditor.getCaretModel().moveToOffset(hostStartOffset)[ CD ]
Line_3 $$ final PsiFile origPsiFile = PsiDocumentManager.getInstance(myProject).getPsiFile(myOrigDocument)-->Line_16 $$ newText = preProcessor.preprocessOnPaste(myProject, origPsiFile, myEditor, newText, null)[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_5 $$ LinkedHashMap<String, String> replacementMap = new LinkedHashMap<String, String>()[ CD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_38 $$ myEditor.getCaretModel().moveToOffset(documentWindow.injectedToHost(e.getOffset()))[ FD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_3 $$ final PsiFile origPsiFile = PsiDocumentManager.getInstance(myProject).getPsiFile(myOrigDocument)[ CD ]
Line_2 $$ private void altCommitToOriginal(@NotNull DocumentEvent e) -->Line_13 $$ final int hostStartOffset = myAltFullRange.getStartOffset()[ CD ]
