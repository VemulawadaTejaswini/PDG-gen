Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_23 $$ assertEquals(new Text("60"), closest)[ FD ]
Line_7 $$ MapFile.Writer writer = null-->Line_11 $$ assertEquals(3, writer.getIndexInterval())[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_37 $$ closest = (Text) reader.getClosest(key, value)-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_36 $$ key = new Text("99")-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_21 $$ Text value = new Text()-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_15 $$ Text t = new Text("00".substring(iStr.length()) + iStr)-->Line_16 $$ writer.append(t, t)[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_20 $$ Text key = new Text("55")-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_38 $$ assertNull(closest)[ FD ]
Line_5 $$ Path qualifiedDirName = fs.makeQualified(dirName)-->Line_10 $$ writer = new MapFile.Writer(conf, fs, qualifiedDirName.toString(), Text.class, Text.class)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_26 $$ final Text TWENTY = new Text("20")-->Line_28 $$ assertEquals(TWENTY, closest)[ FD ]
Line_7 $$ MapFile.Writer writer = null-->Line_18 $$ writer.close()[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_28 $$ assertEquals(TWENTY, closest)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_25 $$ assertEquals(new Text("50"), closest)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_20 $$ Text key = new Text("55")-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_40 $$ assertEquals(new Text("90"), closest)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_35 $$ assertNull(closest)[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_22 $$ Text closest = (Text) reader.getClosest(key, value)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_24 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_22 $$ Text closest = (Text) reader.getClosest(key, value)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)[ FD ]
Line_20 $$ Text key = new Text("55")-->Line_22 $$ Text closest = (Text) reader.getClosest(key, value)[ FD ]
Line_2 $$ public void testGetClosest() throws Exception -->Line_8 $$ MapFile.Reader reader = null[ CD ]
Line_10 $$ writer = new MapFile.Writer(conf, fs, qualifiedDirName.toString(), Text.class, Text.class)-->Line_18 $$ writer.close()[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_35 $$ assertNull(closest)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_33 $$ assertEquals(FIRST_KEY, Integer.parseInt(closest.toString()))[ FD ]
Line_2 $$ public void testGetClosest() throws Exception -->Line_5 $$ Path qualifiedDirName = fs.makeQualified(dirName)[ CD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_12 $$ final int FIRST_KEY = 10-->Line_33 $$ assertEquals(FIRST_KEY, Integer.parseInt(closest.toString()))[ FD ]
Line_32 $$ closest = (Text) reader.getClosest(key, value)-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_33 $$ assertEquals(FIRST_KEY, Integer.parseInt(closest.toString()))[ FD ]
Line_31 $$ key = new Text("00")-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_32 $$ closest = (Text) reader.getClosest(key, value)-->Line_33 $$ assertEquals(FIRST_KEY, Integer.parseInt(closest.toString()))[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_38 $$ assertNull(closest)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_30 $$ assertEquals(TWENTY, closest)[ FD ]
Line_10 $$ writer = new MapFile.Writer(conf, fs, qualifiedDirName.toString(), Text.class, Text.class)-->Line_42 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_2 $$ public void testGetClosest() throws Exception -->Line_7 $$ MapFile.Writer writer = null[ CD ]
Line_26 $$ final Text TWENTY = new Text("20")-->Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)[ FD ]
Line_10 $$ writer = new MapFile.Writer(conf, fs, qualifiedDirName.toString(), Text.class, Text.class)-->Line_11 $$ assertEquals(3, writer.getIndexInterval())[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_28 $$ assertEquals(TWENTY, closest)[ FD ]
Line_21 $$ Text value = new Text()-->Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)[ FD ]
Line_20 $$ Text key = new Text("55")-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_5 $$ Path qualifiedDirName = fs.makeQualified(dirName)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_33 $$ assertEquals(FIRST_KEY, Integer.parseInt(closest.toString()))[ FD ]
Line_39 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_40 $$ assertEquals(new Text("90"), closest)[ FD ]
Line_31 $$ key = new Text("00")-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_25 $$ assertEquals(new Text("50"), closest)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_2 $$ public void testGetClosest() throws Exception -->Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_8 $$ MapFile.Reader reader = null-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_32 $$ closest = (Text) reader.getClosest(key, value)-->Line_40 $$ assertEquals(new Text("90"), closest)[ FD ]
Line_32 $$ closest = (Text) reader.getClosest(key, value)-->Line_38 $$ assertNull(closest)[ FD ]
Line_21 $$ Text value = new Text()-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_7 $$ MapFile.Writer writer = null-->Line_10 $$ writer = new MapFile.Writer(conf, fs, qualifiedDirName.toString(), Text.class, Text.class)[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_42 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_13 $$ for (int i = FIRST_KEY; i < 100; i += 10) -->Line_15 $$ Text t = new Text("00".substring(iStr.length()) + iStr)[ CD ]
Line_20 $$ Text key = new Text("55")-->Line_31 $$ key = new Text("00")[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_30 $$ assertEquals(TWENTY, closest)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_38 $$ assertNull(closest)[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_24 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_10 $$ writer = new MapFile.Writer(conf, fs, qualifiedDirName.toString(), Text.class, Text.class)-->Line_16 $$ writer.append(t, t)[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_35 $$ assertNull(closest)[ FD ]
Line_14 $$ String iStr = Integer.toString(i)-->Line_15 $$ Text t = new Text("00".substring(iStr.length()) + iStr)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_28 $$ assertEquals(TWENTY, closest)[ FD ]
Line_13 $$ for (int i = FIRST_KEY; i < 100; i += 10) -->Line_14 $$ String iStr = Integer.toString(i)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_33 $$ assertEquals(FIRST_KEY, Integer.parseInt(closest.toString()))[ FD ]
Line_20 $$ Text key = new Text("55")-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_7 $$ MapFile.Writer writer = null-->Line_42 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_31 $$ key = new Text("00")-->Line_32 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_13 $$ for (int i = FIRST_KEY; i < 100; i += 10) -->Line_14 $$ String iStr = Integer.toString(i)[ CD ]
Line_32 $$ closest = (Text) reader.getClosest(key, value)-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_34 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_35 $$ assertNull(closest)[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_31 $$ key = new Text("00")-->Line_36 $$ key = new Text("99")[ FD ]
Line_3 $$ Path dirName = new Path(TEST_DIR, "testGetClosest.mapfile")-->Line_5 $$ Path qualifiedDirName = fs.makeQualified(dirName)[ FD ]
Line_37 $$ closest = (Text) reader.getClosest(key, value)-->Line_40 $$ assertEquals(new Text("90"), closest)[ FD ]
Line_37 $$ closest = (Text) reader.getClosest(key, value)-->Line_38 $$ assertNull(closest)[ FD ]
Line_32 $$ closest = (Text) reader.getClosest(key, value)-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_35 $$ assertNull(closest)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_30 $$ assertEquals(TWENTY, closest)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_40 $$ assertEquals(new Text("90"), closest)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_42 $$ IOUtils.cleanup(null, writer, reader)[ FD ]
Line_7 $$ MapFile.Writer writer = null-->Line_16 $$ writer.append(t, t)[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_24 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_40 $$ assertEquals(new Text("90"), closest)[ FD ]
Line_26 $$ final Text TWENTY = new Text("20")-->Line_30 $$ assertEquals(TWENTY, closest)[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_38 $$ assertNull(closest)[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_20 $$ Text key = new Text("55")-->Line_36 $$ key = new Text("99")[ FD ]
Line_24 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_13 $$ for (int i = FIRST_KEY; i < 100; i += 10) -->Line_16 $$ writer.append(t, t)[ CD ]
Line_21 $$ Text value = new Text()-->Line_22 $$ Text closest = (Text) reader.getClosest(key, value)[ FD ]
Line_8 $$ MapFile.Reader reader = null-->Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)[ FD ]
Line_34 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_40 $$ assertEquals(new Text("90"), closest)[ FD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_40 $$ assertEquals(new Text("90"), closest)[ FD ]
Line_26 $$ final Text TWENTY = new Text("20")-->Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)[ FD ]
Line_36 $$ key = new Text("99")-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_21 $$ Text value = new Text()-->Line_24 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_21 $$ Text value = new Text()-->Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)[ FD ]
Line_19 $$ reader = new MapFile.Reader(qualifiedDirName, conf)-->Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)[ FD ]
Line_29 $$ closest = (Text) reader.getClosest(TWENTY, value, true)-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_34 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_32 $$ closest = (Text) reader.getClosest(key, value)-->Line_35 $$ assertNull(closest)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_21 $$ Text value = new Text()-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_34 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_39 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_31 $$ key = new Text("00")-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_2 $$ public void testGetClosest() throws Exception -->Line_3 $$ Path dirName = new Path(TEST_DIR, "testGetClosest.mapfile")[ CD ]
Line_2 $$ public void testGetClosest() throws Exception -->Line_6 $$ MapFile.Writer.setIndexInterval(conf, 3)[ CD ]
Line_27 $$ closest = (Text) reader.getClosest(TWENTY, value)-->Line_37 $$ closest = (Text) reader.getClosest(key, value)[ FD ]
Line_20 $$ Text key = new Text("55")-->Line_24 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
Line_34 $$ closest = (Text) reader.getClosest(key, value, true)-->Line_38 $$ assertNull(closest)[ FD ]
Line_22 $$ Text closest = (Text) reader.getClosest(key, value)-->Line_30 $$ assertEquals(TWENTY, closest)[ FD ]
Line_21 $$ Text value = new Text()-->Line_34 $$ closest = (Text) reader.getClosest(key, value, true)[ FD ]
