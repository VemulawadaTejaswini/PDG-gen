Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_10 $$ sourceElement.set(element)[ CD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_5 $$ final LinkedHashSet<String> tests = new LinkedHashSet<String>()[ CD ]
Line_13 $$ Set<String> tasksToRun = ContainerUtil.newLinkedHashSet()-->Line_39 $$ configuration.getSettings().setTaskNames(ContainerUtil.newArrayList(tasksToRun))[ FD ]
Line_17 $$ final int i = StringUtil.indexOf(test, ",")-->Line_18 $$ String aClass = i < 0 ? test : test.substring(0, i)[ FD ]
Line_45 $$ name = StringUtil.join(tests, "|")-->Line_47 $$ configuration.setName(name)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_49 $$ return true[ CD ]
Line_43 $$ name = resolvedTests.get(0) + " and " + (resolvedTests.size() - 1) + " more"-->Line_47 $$ configuration.setName(name)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_7 $$ if (element == null) [ CD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_47 $$ configuration.setName(name)[ FD ]
Line_26 $$ if (!ExternalSystemApiUtil.isExternalSystemAwareModule(GradleConstants.SYSTEM_ID, moduleForFile))-->Line_27 $$ return false[ CD ]
Line_3 $$ final Location contextLocation = context.getLocation()-->Line_48 $$ JavaRunConfigurationExtensionManager.getInstance().extendCreatedConfiguration(configuration, contextLocation)[ FD ]
Line_25 $$ final Module moduleForFile = ProjectFileIndex.SERVICE.getInstance(project).getModuleForFile(psiFile.getVirtualFile())-->Line_31 $$ ContainerUtil.addAllNotNull(tasksToRun, getTasksToRun(moduleForFile))[ FD ]
Line_19 $$ final PsiClass psiClass = JavaPsiFacade.getInstance(project).findClass(aClass, GlobalSearchScope.projectScope(project))-->Line_20 $$ if (psiClass == null)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_13 $$ Set<String> tasksToRun = ContainerUtil.newLinkedHashSet()[ CD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_48 $$ JavaRunConfigurationExtensionManager.getInstance().extendCreatedConfiguration(configuration, contextLocation)[ CD ]
Line_7 $$ if (element == null) -->Line_8 $$ return false[ CD ]
Line_13 $$ Set<String> tasksToRun = ContainerUtil.newLinkedHashSet()-->Line_36 $$ if (tasksToRun.isEmpty() || projectPath == null)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_6 $$ final PsiElement element = myBaseConfigurationProducer.checkPatterns(context, tests)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_3 $$ final Location contextLocation = context.getLocation()[ CD ]
Line_19 $$ final PsiClass psiClass = JavaPsiFacade.getInstance(project).findClass(aClass, GlobalSearchScope.projectScope(project))-->Line_34 $$ resolvedTests.add(psiClass.getName() + "," + (method == null ? "" : method))[ FD ]
Line_42 $$ if (resolvedTests.size() > 1) -->Line_43 $$ name = resolvedTests.get(0) + " and " + (resolvedTests.size() - 1) + " more"[ CD ]
Line_22 $$ final PsiFile psiFile = psiClass.getContainingFile()-->Line_25 $$ final Module moduleForFile = ProjectFileIndex.SERVICE.getInstance(project).getModuleForFile(psiFile.getVirtualFile())[ FD ]
Line_28 $$ projectPath = ExternalSystemApiUtil.getExternalRootProjectPath(moduleForFile)-->Line_38 $$ configuration.getSettings().setExternalProjectPath(projectPath)[ FD ]
Line_18 $$ String aClass = i < 0 ? test : test.substring(0, i)-->Line_19 $$ final PsiClass psiClass = JavaPsiFacade.getInstance(project).findClass(aClass, GlobalSearchScope.projectScope(project))[ FD ]
Line_12 $$ Set<String> scriptParameters = ContainerUtil.newLinkedHashSet()-->Line_33 $$ scriptParameters.add(TestMethodGradleConfigurationProducer.createTestFilter(aClass, method))[ FD ]
Line_15 $$ final List<String> resolvedTests = ContainerUtil.newArrayList()-->Line_42 $$ if (resolvedTests.size() > 1) [ FD ]
Line_16 $$ for (String test : tests) -->Line_17 $$ final int i = StringUtil.indexOf(test, ",")[ FD ]
Line_6 $$ final PsiElement element = myBaseConfigurationProducer.checkPatterns(context, tests)-->Line_10 $$ sourceElement.set(element)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_42 $$ if (resolvedTests.size() > 1) [ CD ]
Line_11 $$ String projectPath = null-->Line_28 $$ projectPath = ExternalSystemApiUtil.getExternalRootProjectPath(moduleForFile)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_11 $$ String projectPath = null[ CD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_15 $$ final List<String> resolvedTests = ContainerUtil.newArrayList()[ CD ]
Line_25 $$ final Module moduleForFile = ProjectFileIndex.SERVICE.getInstance(project).getModuleForFile(psiFile.getVirtualFile())-->Line_26 $$ if (!ExternalSystemApiUtil.isExternalSystemAwareModule(GradleConstants.SYSTEM_ID, moduleForFile))[ FD ]
Line_22 $$ final PsiFile psiFile = psiClass.getContainingFile()-->Line_23 $$ if (psiFile == null)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_41 $$ final String name[ CD ]
Line_5 $$ final LinkedHashSet<String> tests = new LinkedHashSet<String>()-->Line_45 $$ name = StringUtil.join(tests, "|")[ FD ]
Line_14 $$ final Project project = context.getProject()-->Line_19 $$ final PsiClass psiClass = JavaPsiFacade.getInstance(project).findClass(aClass, GlobalSearchScope.projectScope(project))[ FD ]
Line_29 $$ if (projectPath == null)-->Line_30 $$ return false[ CD ]
Line_5 $$ final LinkedHashSet<String> tests = new LinkedHashSet<String>()-->Line_6 $$ final PsiElement element = myBaseConfigurationProducer.checkPatterns(context, tests)[ FD ]
Line_43 $$ name = resolvedTests.get(0) + " and " + (resolvedTests.size() - 1) + " more"-->Line_45 $$ name = StringUtil.join(tests, "|")[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_14 $$ final Project project = context.getProject()[ CD ]
Line_28 $$ projectPath = ExternalSystemApiUtil.getExternalRootProjectPath(moduleForFile)-->Line_29 $$ if (projectPath == null)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_40 $$ configuration.getSettings().setScriptParameters(StringUtil.join(scriptParameters, " "))[ CD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_40 $$ configuration.getSettings().setScriptParameters(StringUtil.join(scriptParameters, " "))[ FD ]
Line_16 $$ for (String test : tests) -->Line_18 $$ String aClass = i < 0 ? test : test.substring(0, i)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_3 $$ final Location contextLocation = context.getLocation()[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_36 $$ if (tasksToRun.isEmpty() || projectPath == null)[ CD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_10 $$ sourceElement.set(element)[ FD ]
Line_11 $$ String projectPath = null-->Line_38 $$ configuration.getSettings().setExternalProjectPath(projectPath)[ FD ]
Line_15 $$ final List<String> resolvedTests = ContainerUtil.newArrayList()-->Line_43 $$ name = resolvedTests.get(0) + " and " + (resolvedTests.size() - 1) + " more"[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_47 $$ configuration.setName(name)[ CD ]
Line_19 $$ final PsiClass psiClass = JavaPsiFacade.getInstance(project).findClass(aClass, GlobalSearchScope.projectScope(project))-->Line_22 $$ final PsiFile psiFile = psiClass.getContainingFile()[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_12 $$ Set<String> scriptParameters = ContainerUtil.newLinkedHashSet()[ CD ]
Line_16 $$ for (String test : tests) -->Line_32 $$ final String method = i != -1 && test.length() > i + 1 ? test.substring(i + 1) : null[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_48 $$ JavaRunConfigurationExtensionManager.getInstance().extendCreatedConfiguration(configuration, contextLocation)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_38 $$ configuration.getSettings().setExternalProjectPath(projectPath)[ FD ]
Line_25 $$ final Module moduleForFile = ProjectFileIndex.SERVICE.getInstance(project).getModuleForFile(psiFile.getVirtualFile())-->Line_28 $$ projectPath = ExternalSystemApiUtil.getExternalRootProjectPath(moduleForFile)[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_39 $$ configuration.getSettings().setTaskNames(ContainerUtil.newArrayList(tasksToRun))[ CD ]
Line_41 $$ final String name-->Line_43 $$ name = resolvedTests.get(0) + " and " + (resolvedTests.size() - 1) + " more"[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_39 $$ configuration.getSettings().setTaskNames(ContainerUtil.newArrayList(tasksToRun))[ FD ]
Line_12 $$ Set<String> scriptParameters = ContainerUtil.newLinkedHashSet()-->Line_40 $$ configuration.getSettings().setScriptParameters(StringUtil.join(scriptParameters, " "))[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_14 $$ final Project project = context.getProject()[ FD ]
Line_18 $$ String aClass = i < 0 ? test : test.substring(0, i)-->Line_33 $$ scriptParameters.add(TestMethodGradleConfigurationProducer.createTestFilter(aClass, method))[ FD ]
Line_42 $$ if (resolvedTests.size() > 1) -->Line_45 $$ name = StringUtil.join(tests, "|")[ CD ]
Line_14 $$ final Project project = context.getProject()-->Line_25 $$ final Module moduleForFile = ProjectFileIndex.SERVICE.getInstance(project).getModuleForFile(psiFile.getVirtualFile())[ FD ]
Line_13 $$ Set<String> tasksToRun = ContainerUtil.newLinkedHashSet()-->Line_31 $$ ContainerUtil.addAllNotNull(tasksToRun, getTasksToRun(moduleForFile))[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_6 $$ final PsiElement element = myBaseConfigurationProducer.checkPatterns(context, tests)[ CD ]
Line_6 $$ final PsiElement element = myBaseConfigurationProducer.checkPatterns(context, tests)-->Line_7 $$ if (element == null) [ FD ]
Line_32 $$ final String method = i != -1 && test.length() > i + 1 ? test.substring(i + 1) : null-->Line_33 $$ scriptParameters.add(TestMethodGradleConfigurationProducer.createTestFilter(aClass, method))[ FD ]
Line_2 $$ protected boolean doSetupConfigurationFromContext(ExternalSystemRunConfiguration configuration, ConfigurationContext context, Ref<PsiElement> sourceElement) -->Line_38 $$ configuration.getSettings().setExternalProjectPath(projectPath)[ CD ]
Line_36 $$ if (tasksToRun.isEmpty() || projectPath == null)-->Line_37 $$ return false[ CD ]
Line_41 $$ final String name-->Line_47 $$ configuration.setName(name)[ FD ]
Line_41 $$ final String name-->Line_45 $$ name = StringUtil.join(tests, "|")[ FD ]
Line_11 $$ String projectPath = null-->Line_29 $$ if (projectPath == null)[ FD ]
Line_15 $$ final List<String> resolvedTests = ContainerUtil.newArrayList()-->Line_34 $$ resolvedTests.add(psiClass.getName() + "," + (method == null ? "" : method))[ FD ]
