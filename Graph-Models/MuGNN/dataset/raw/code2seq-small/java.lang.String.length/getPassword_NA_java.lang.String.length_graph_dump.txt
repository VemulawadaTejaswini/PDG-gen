Line_7 $$ String fullKey = fullKeySB.toString()-->Line_8 $$ int fullKeyLength = fullKey.length()[ FD ]
Line_8 $$ int fullKeyLength = fullKey.length()-->Line_17 $$ secureLong = secureLong / fullKeyLength[ FD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_17 $$ secureLong = secureLong / fullKeyLength[ CD ]
Line_10 $$ long secureLong = 0-->Line_17 $$ secureLong = secureLong / fullKeyLength[ FD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_13 $$ if ((i % refreshPeriod) == 0) [ CD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_12 $$ for (int i = 0; i < length; i++) [ FD ]
Line_10 $$ long secureLong = 0-->Line_14 $$ secureLong = SecureRandomUtil.nextLong()[ FD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_10 $$ long secureLong = 0[ CD ]
Line_11 $$ StringBuilder sb = new StringBuilder(length)-->Line_20 $$ return sb.toString()[ FD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_12 $$ for (int i = 0; i < length; i++) [ CD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_3 $$ if (keys == null) [ FD ]
Line_16 $$ int pos = Math.abs((int) (secureLong % fullKeyLength))-->Line_18 $$ sb.append(fullKey.charAt(pos))[ FD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_7 $$ String fullKey = fullKeySB.toString()[ CD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_6 $$ StringBundler fullKeySB = new StringBundler(keys)[ CD ]
Line_11 $$ StringBuilder sb = new StringBuilder(length)-->Line_18 $$ sb.append(fullKey.charAt(pos))[ FD ]
Line_7 $$ String fullKey = fullKeySB.toString()-->Line_18 $$ sb.append(fullKey.charAt(pos))[ FD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_3 $$ if (keys == null) [ CD ]
Line_13 $$ if ((i % refreshPeriod) == 0) -->Line_14 $$ secureLong = SecureRandomUtil.nextLong()[ CD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_9 $$ int refreshPeriod = (int) (_MULTIPLIER / Math.log(fullKeyLength))[ CD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_20 $$ return sb.toString()[ CD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_11 $$ StringBuilder sb = new StringBuilder(length)[ CD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_16 $$ int pos = Math.abs((int) (secureLong % fullKeyLength))[ CD ]
Line_2 $$ public static String getPassword(int length, String... keys) -->Line_8 $$ int fullKeyLength = fullKey.length()[ CD ]
Line_6 $$ StringBundler fullKeySB = new StringBundler(keys)-->Line_7 $$ String fullKey = fullKeySB.toString()[ FD ]
Line_14 $$ secureLong = SecureRandomUtil.nextLong()-->Line_17 $$ secureLong = secureLong / fullKeyLength[ FD ]
Line_8 $$ int fullKeyLength = fullKey.length()-->Line_9 $$ int refreshPeriod = (int) (_MULTIPLIER / Math.log(fullKeyLength))[ FD ]
Line_12 $$ for (int i = 0; i < length; i++) -->Line_18 $$ sb.append(fullKey.charAt(pos))[ CD ]
