Line_8 $$ for (int i = 0; i < xPath.length(); i++) -->Line_11 $$ for (int j = 0; j < _XPATH_TOKENS.length; j++) [ CD ]
Line_8 $$ for (int i = 0; i < xPath.length(); i++) -->Line_10 $$ boolean hasToken = false[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder(xPath.length())-->Line_20 $$ sb.append(c)[ FD ]
Line_8 $$ for (int i = 0; i < xPath.length(); i++) -->Line_17 $$ if (hasToken) [ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder(xPath.length())-->Line_23 $$ return sb.toString()[ FD ]
Line_8 $$ for (int i = 0; i < xPath.length(); i++) -->Line_9 $$ char c = xPath.charAt(i)[ FD ]
Line_8 $$ for (int i = 0; i < xPath.length(); i++) -->Line_9 $$ char c = xPath.charAt(i)[ CD ]
Line_4 $$ if (Validator.isNull(xPath)) -->Line_5 $$ return xPath[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder(xPath.length())-->Line_18 $$ sb.append(StringPool.UNDERLINE)[ FD ]
Line_17 $$ if (hasToken) -->Line_18 $$ sb.append(StringPool.UNDERLINE)[ CD ]
Line_11 $$ for (int j = 0; j < _XPATH_TOKENS.length; j++) -->Line_12 $$ if (c == _XPATH_TOKENS[j]) [ CD ]
Line_10 $$ boolean hasToken = false-->Line_13 $$ hasToken = true[ FD ]
Line_12 $$ if (c == _XPATH_TOKENS[j]) -->Line_13 $$ hasToken = true[ CD ]
Line_17 $$ if (hasToken) -->Line_20 $$ sb.append(c)[ CD ]
Line_9 $$ char c = xPath.charAt(i)-->Line_20 $$ sb.append(c)[ FD ]
Line_9 $$ char c = xPath.charAt(i)-->Line_12 $$ if (c == _XPATH_TOKENS[j]) [ FD ]
