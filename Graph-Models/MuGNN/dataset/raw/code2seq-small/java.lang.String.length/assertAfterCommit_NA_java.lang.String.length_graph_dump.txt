Line_3 $$ if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) -->Line_4 $$ final String documentText = document.getText()[ CD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_9 $$ BlockSupport blockSupport = BlockSupport.getInstance(file.getProject())[ FD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_3 $$ if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) [ CD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_16 $$ file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY, null)[ FD ]
Line_3 $$ if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) -->Line_5 $$ String fileText = file.getText()[ CD ]
Line_10 $$ final DiffLog diffLog = blockSupport.reparseRange(file, new TextRange(0, documentText.length()), documentText, createProgressIndicator(), myTreeElementBeingReparsedSoItWontBeCollected.getText())-->Line_11 $$ doActualPsiChange(file, diffLog)[ FD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_12 $$ if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) [ FD ]
Line_3 $$ if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) -->Line_7 $$ file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY, Boolean.TRUE)[ CD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_3 $$ if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) [ FD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_6 $$ LOG.error("commitDocument left PSI inconsistent: " + DebugUtil.diagnosePsiDocumentInconsistency(file, document) + "; node len=" + myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() + "; doc.getText() == file.getText(): " + Comparing.equal(fileText, documentText), new Attachment("file psi text", fileText), new Attachment("old text", documentText))[ FD ]
Line_4 $$ final String documentText = document.getText()-->Line_10 $$ final DiffLog diffLog = blockSupport.reparseRange(file, new TextRange(0, documentText.length()), documentText, createProgressIndicator(), myTreeElementBeingReparsedSoItWontBeCollected.getText())[ FD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_7 $$ file.putUserData(BlockSupport.DO_NOT_REPARSE_INCREMENTALLY, Boolean.TRUE)[ FD ]
Line_4 $$ final String documentText = document.getText()-->Line_6 $$ LOG.error("commitDocument left PSI inconsistent: " + DebugUtil.diagnosePsiDocumentInconsistency(file, document) + "; node len=" + myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() + "; doc.getText() == file.getText(): " + Comparing.equal(fileText, documentText), new Attachment("file psi text", fileText), new Attachment("old text", documentText))[ FD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_11 $$ doActualPsiChange(file, diffLog)[ FD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_5 $$ String fileText = file.getText()[ FD ]
Line_9 $$ BlockSupport blockSupport = BlockSupport.getInstance(file.getProject())-->Line_10 $$ final DiffLog diffLog = blockSupport.reparseRange(file, new TextRange(0, documentText.length()), documentText, createProgressIndicator(), myTreeElementBeingReparsedSoItWontBeCollected.getText())[ FD ]
Line_12 $$ if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) -->Line_13 $$ LOG.error("PSI is broken beyond repair in: " + file)[ CD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_4 $$ final String documentText = document.getText()[ FD ]
Line_3 $$ if (myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() != document.getTextLength()) -->Line_6 $$ LOG.error("commitDocument left PSI inconsistent: " + DebugUtil.diagnosePsiDocumentInconsistency(file, document) + "; node len=" + myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() + "; doc.getText() == file.getText(): " + Comparing.equal(fileText, documentText), new Attachment("file psi text", fileText), new Attachment("old text", documentText))[ CD ]
Line_2 $$ private void assertAfterCommit(@NotNull Document document, @NotNull final PsiFile file, @NotNull FileElement myTreeElementBeingReparsedSoItWontBeCollected) -->Line_10 $$ final DiffLog diffLog = blockSupport.reparseRange(file, new TextRange(0, documentText.length()), documentText, createProgressIndicator(), myTreeElementBeingReparsedSoItWontBeCollected.getText())[ FD ]
Line_5 $$ String fileText = file.getText()-->Line_6 $$ LOG.error("commitDocument left PSI inconsistent: " + DebugUtil.diagnosePsiDocumentInconsistency(file, document) + "; node len=" + myTreeElementBeingReparsedSoItWontBeCollected.getTextLength() + "; doc.getText() == file.getText(): " + Comparing.equal(fileText, documentText), new Attachment("file psi text", fileText), new Attachment("old text", documentText))[ FD ]
