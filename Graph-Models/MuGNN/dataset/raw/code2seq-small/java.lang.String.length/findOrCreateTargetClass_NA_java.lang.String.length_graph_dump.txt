Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_24 $$ final PsiClass newClass = ApplicationManager.getApplication().runWriteAction(new Computable<PsiClass>() [ CD ]
Line_17 $$ if (directory == null) -->Line_18 $$ return null[ CD ]
Line_3 $$ final String className-->Line_11 $$ className = fqName[ FD ]
Line_7 $$ packageName = fqName.substring(0, dotIndex)-->Line_16 $$ final PsiDirectory directory = PackageUtil.findOrCreateDirectoryForPackage(myProject, packageName, mySourceClass.getContainingFile().getContainingDirectory(), true)[ FD ]
Line_8 $$ className = (dotIndex + 1 < fqName.length()) ? fqName.substring(dotIndex + 1) : ""-->Line_27 $$ return JavaDirectoryService.getInstance().createClass(directory, className)[ FD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_13 $$ PsiClass aClass = JavaPsiFacade.getInstance(manager.getProject()).findClass(fqName, GlobalSearchScope.projectScope(myProject))[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_34 $$ if (!eRef.isNull())[ CD ]
Line_23 $$ final Ref<IncorrectOperationException> eRef = new Ref<IncorrectOperationException>()-->Line_34 $$ if (!eRef.isNull())[ FD ]
Line_11 $$ className = fqName-->Line_27 $$ return JavaDirectoryService.getInstance().createClass(directory, className)[ FD ]
Line_16 $$ final PsiDirectory directory = PackageUtil.findOrCreateDirectoryForPackage(myProject, packageName, mySourceClass.getContainingFile().getContainingDirectory(), true)-->Line_17 $$ if (directory == null) [ FD ]
Line_6 $$ if (dotIndex >= 0) -->Line_7 $$ packageName = fqName.substring(0, dotIndex)[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_21 $$ if (answer != Messages.YES)[ CD ]
Line_4 $$ final String packageName-->Line_16 $$ final PsiDirectory directory = PackageUtil.findOrCreateDirectoryForPackage(myProject, packageName, mySourceClass.getContainingFile().getContainingDirectory(), true)[ FD ]
Line_23 $$ final Ref<IncorrectOperationException> eRef = new Ref<IncorrectOperationException>()-->Line_29 $$ eRef.set(e)[ FD ]
Line_6 $$ if (dotIndex >= 0) -->Line_8 $$ className = (dotIndex + 1 < fqName.length()) ? fqName.substring(dotIndex + 1) : ""[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_16 $$ final PsiDirectory directory = PackageUtil.findOrCreateDirectoryForPackage(myProject, packageName, mySourceClass.getContainingFile().getContainingDirectory(), true)[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_36 $$ return newClass[ CD ]
Line_3 $$ final String className-->Line_8 $$ className = (dotIndex + 1 < fqName.length()) ? fqName.substring(dotIndex + 1) : ""[ FD ]
Line_7 $$ packageName = fqName.substring(0, dotIndex)-->Line_10 $$ packageName = ""[ FD ]
Line_23 $$ final Ref<IncorrectOperationException> eRef = new Ref<IncorrectOperationException>()-->Line_35 $$ throw eRef.get()[ FD ]
Line_21 $$ if (answer != Messages.YES)-->Line_22 $$ return null[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_5 $$ int dotIndex = fqName.lastIndexOf('.')[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_20 $$ int answer = Messages.showYesNoDialog(myProject, RefactoringBundle.message("class.0.does.not.exist", fqName), MoveMembersImpl.REFACTORING_NAME, Messages.getQuestionIcon())[ FD ]
Line_6 $$ if (dotIndex >= 0) -->Line_10 $$ packageName = ""[ CD ]
Line_5 $$ int dotIndex = fqName.lastIndexOf('.')-->Line_6 $$ if (dotIndex >= 0) [ FD ]
Line_6 $$ if (dotIndex >= 0) -->Line_11 $$ className = fqName[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_8 $$ className = (dotIndex + 1 < fqName.length()) ? fqName.substring(dotIndex + 1) : ""[ FD ]
Line_3 $$ final String className-->Line_27 $$ return JavaDirectoryService.getInstance().createClass(directory, className)[ FD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_20 $$ int answer = Messages.showYesNoDialog(myProject, RefactoringBundle.message("class.0.does.not.exist", fqName), MoveMembersImpl.REFACTORING_NAME, Messages.getQuestionIcon())[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_4 $$ final String packageName[ CD ]
Line_14 $$ if (aClass != null)-->Line_15 $$ return aClass[ CD ]
Line_20 $$ int answer = Messages.showYesNoDialog(myProject, RefactoringBundle.message("class.0.does.not.exist", fqName), MoveMembersImpl.REFACTORING_NAME, Messages.getQuestionIcon())-->Line_21 $$ if (answer != Messages.YES)[ FD ]
Line_13 $$ PsiClass aClass = JavaPsiFacade.getInstance(manager.getProject()).findClass(fqName, GlobalSearchScope.projectScope(myProject))-->Line_14 $$ if (aClass != null)[ FD ]
Line_4 $$ final String packageName-->Line_10 $$ packageName = ""[ FD ]
Line_4 $$ final String packageName-->Line_7 $$ packageName = fqName.substring(0, dotIndex)[ FD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_17 $$ if (directory == null) [ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_5 $$ int dotIndex = fqName.lastIndexOf('.')[ FD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_14 $$ if (aClass != null)[ CD ]
Line_5 $$ int dotIndex = fqName.lastIndexOf('.')-->Line_7 $$ packageName = fqName.substring(0, dotIndex)[ FD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_7 $$ packageName = fqName.substring(0, dotIndex)[ FD ]
Line_10 $$ packageName = ""-->Line_16 $$ final PsiDirectory directory = PackageUtil.findOrCreateDirectoryForPackage(myProject, packageName, mySourceClass.getContainingFile().getContainingDirectory(), true)[ FD ]
Line_16 $$ final PsiDirectory directory = PackageUtil.findOrCreateDirectoryForPackage(myProject, packageName, mySourceClass.getContainingFile().getContainingDirectory(), true)-->Line_27 $$ return JavaDirectoryService.getInstance().createClass(directory, className)[ FD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_23 $$ final Ref<IncorrectOperationException> eRef = new Ref<IncorrectOperationException>()[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_3 $$ final String className[ CD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_11 $$ className = fqName[ FD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_6 $$ if (dotIndex >= 0) [ CD ]
Line_8 $$ className = (dotIndex + 1 < fqName.length()) ? fqName.substring(dotIndex + 1) : ""-->Line_11 $$ className = fqName[ FD ]
Line_2 $$ private PsiClass findOrCreateTargetClass(final PsiManager manager, final String fqName) throws IncorrectOperationException -->Line_13 $$ PsiClass aClass = JavaPsiFacade.getInstance(manager.getProject()).findClass(fqName, GlobalSearchScope.projectScope(myProject))[ FD ]
