Line_7 $$ int pos = Math.min(body.length(), 50)-->Line_8 $$ subject = body.substring(0, pos) + "..."[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_15 $$ double priority = 0.0[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_31 $$ MBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(classNameId, classPK)[ FD ]
Line_29 $$ if (parentMessageId == MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) -->Line_32 $$ if (discussion == null) [ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_19 $$ serviceContext.setAttribute("className", className)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_26 $$ serviceContext.setModifiedDate(now)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_5 $$ if (Validator.isNull(subject)) [ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_13 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = Collections.emptyList()[ CD ]
Line_31 $$ MBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(classNameId, classPK)-->Line_32 $$ if (discussion == null) [ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_18 $$ serviceContext.setAddGuestPermissions(true)[ FD ]
Line_30 $$ long classNameId = classNameLocalService.getClassNameId(className)-->Line_33 $$ mbDiscussionLocalService.addDiscussion(userId, groupId, classNameId, classPK, message.getThreadId(), serviceContext)[ FD ]
Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)-->Line_33 $$ mbDiscussionLocalService.addDiscussion(userId, groupId, classNameId, classPK, message.getThreadId(), serviceContext)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_20 $$ serviceContext.setAttribute("classPK", String.valueOf(classPK))[ CD ]
Line_5 $$ if (Validator.isNull(subject)) -->Line_6 $$ if (Validator.isNotNull(body)) [ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_3 $$ validateDiscussionMaxComments(className, classPK)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_20 $$ serviceContext.setAttribute("classPK", String.valueOf(classPK))[ FD ]
Line_6 $$ if (Validator.isNotNull(body)) -->Line_7 $$ int pos = Math.min(body.length(), 50)[ CD ]
Line_30 $$ long classNameId = classNameLocalService.getClassNameId(className)-->Line_31 $$ MBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(classNameId, classPK)[ FD ]
Line_25 $$ if (serviceContext.getModifiedDate() == null) -->Line_26 $$ serviceContext.setModifiedDate(now)[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_25 $$ if (serviceContext.getModifiedDate() == null) [ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_29 $$ if (parentMessageId == MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) [ FD ]
Line_29 $$ if (parentMessageId == MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) -->Line_30 $$ long classNameId = classNameLocalService.getClassNameId(className)[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_33 $$ mbDiscussionLocalService.addDiscussion(userId, groupId, classNameId, classPK, message.getThreadId(), serviceContext)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_8 $$ subject = body.substring(0, pos) + "..."[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_14 $$ boolean anonymous = false[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_25 $$ if (serviceContext.getModifiedDate() == null) [ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ CD ]
Line_6 $$ if (Validator.isNotNull(body)) -->Line_8 $$ subject = body.substring(0, pos) + "..."[ CD ]
Line_16 $$ boolean allowPingbacks = false-->Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_18 $$ serviceContext.setAddGuestPermissions(true)[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_21 $$ Date now = new Date()[ CD ]
Line_14 $$ boolean anonymous = false-->Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_17 $$ serviceContext.setAddGroupPermissions(true)[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_7 $$ int pos = Math.min(body.length(), 50)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_29 $$ if (parentMessageId == MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) [ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_17 $$ serviceContext.setAddGroupPermissions(true)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_22 $$ if (serviceContext.getCreateDate() == null) [ FD ]
Line_8 $$ subject = body.substring(0, pos) + "..."-->Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_4 $$ long categoryId = MBCategoryConstants.DISCUSSION_CATEGORY_ID-->Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_4 $$ long categoryId = MBCategoryConstants.DISCUSSION_CATEGORY_ID[ CD ]
Line_15 $$ double priority = 0.0-->Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_13 $$ List<ObjectValuePair<String, InputStream>> inputStreamOVPs = Collections.emptyList()-->Line_28 $$ MBMessage message = addMessage(userId, userName, groupId, categoryId, threadId, parentMessageId, subject, body, PropsValues.DISCUSSION_COMMENTS_FORMAT, inputStreamOVPs, anonymous, priority, allowPingbacks, serviceContext)[ FD ]
Line_22 $$ if (serviceContext.getCreateDate() == null) -->Line_23 $$ serviceContext.setCreateDate(now)[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_6 $$ if (Validator.isNotNull(body)) [ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_3 $$ validateDiscussionMaxComments(className, classPK)[ CD ]
Line_21 $$ Date now = new Date()-->Line_26 $$ serviceContext.setModifiedDate(now)[ FD ]
Line_21 $$ Date now = new Date()-->Line_23 $$ serviceContext.setCreateDate(now)[ FD ]
Line_29 $$ if (parentMessageId == MBMessageConstants.DEFAULT_PARENT_MESSAGE_ID) -->Line_31 $$ MBDiscussion discussion = mbDiscussionPersistence.fetchByC_C(classNameId, classPK)[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_5 $$ if (Validator.isNull(subject)) [ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_16 $$ boolean allowPingbacks = false[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_22 $$ if (serviceContext.getCreateDate() == null) [ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_23 $$ serviceContext.setCreateDate(now)[ FD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_36 $$ return message[ CD ]
Line_32 $$ if (discussion == null) -->Line_33 $$ mbDiscussionLocalService.addDiscussion(userId, groupId, classNameId, classPK, message.getThreadId(), serviceContext)[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_19 $$ serviceContext.setAttribute("className", className)[ CD ]
Line_2 $$ public MBMessage addDiscussionMessage(long userId, String userName, long groupId, String className, long classPK, long threadId, long parentMessageId, String subject, String body, ServiceContext serviceContext) throws PortalException -->Line_30 $$ long classNameId = classNameLocalService.getClassNameId(className)[ FD ]
