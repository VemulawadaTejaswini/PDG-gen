Line_16 $$ int lengthChange = replacement.length() - matchLength-->Line_17 $$ offset += lengthChange[ FD ]
Line_13 $$ int matchEnd = offset + matchResult.end()-->Line_14 $$ sb.replace(matchStart, matchEnd, replacement)[ FD ]
Line_6 $$ while (matcher.find()) -->Line_17 $$ offset += lengthChange[ CD ]
Line_6 $$ while (matcher.find()) -->Line_14 $$ sb.replace(matchStart, matchEnd, replacement)[ CD ]
Line_6 $$ while (matcher.find()) -->Line_8 $$ String replacement = callback.foundMatch(matchResult)[ CD ]
Line_2 $$ public String replaceMatches(CharSequence charSequence, Callback callback) -->Line_4 $$ StringBuilder sb = new StringBuilder(charSequence)[ CD ]
Line_7 $$ MatchResult matchResult = matcher.toMatchResult()-->Line_12 $$ int matchStart = offset + matchResult.start()[ FD ]
Line_4 $$ StringBuilder sb = new StringBuilder(charSequence)-->Line_19 $$ return sb.toString()[ FD ]
Line_6 $$ while (matcher.find()) -->Line_9 $$ if (replacement == null) [ CD ]
Line_2 $$ public String replaceMatches(CharSequence charSequence, Callback callback) -->Line_19 $$ return sb.toString()[ CD ]
Line_2 $$ public String replaceMatches(CharSequence charSequence, Callback callback) -->Line_3 $$ Matcher matcher = _pattern.matcher(charSequence)[ CD ]
Line_12 $$ int matchStart = offset + matchResult.start()-->Line_14 $$ sb.replace(matchStart, matchEnd, replacement)[ FD ]
Line_6 $$ while (matcher.find()) -->Line_12 $$ int matchStart = offset + matchResult.start()[ CD ]
Line_7 $$ MatchResult matchResult = matcher.toMatchResult()-->Line_15 $$ int matchLength = matchResult.end() - matchResult.start()[ FD ]
Line_6 $$ while (matcher.find()) -->Line_7 $$ MatchResult matchResult = matcher.toMatchResult()[ CD ]
Line_3 $$ Matcher matcher = _pattern.matcher(charSequence)-->Line_6 $$ while (matcher.find()) [ FD ]
Line_8 $$ String replacement = callback.foundMatch(matchResult)-->Line_14 $$ sb.replace(matchStart, matchEnd, replacement)[ FD ]
Line_7 $$ MatchResult matchResult = matcher.toMatchResult()-->Line_8 $$ String replacement = callback.foundMatch(matchResult)[ FD ]
Line_2 $$ public String replaceMatches(CharSequence charSequence, Callback callback) -->Line_5 $$ int offset = 0[ CD ]
Line_6 $$ while (matcher.find()) -->Line_13 $$ int matchEnd = offset + matchResult.end()[ CD ]
Line_6 $$ while (matcher.find()) -->Line_15 $$ int matchLength = matchResult.end() - matchResult.start()[ CD ]
Line_4 $$ StringBuilder sb = new StringBuilder(charSequence)-->Line_14 $$ sb.replace(matchStart, matchEnd, replacement)[ FD ]
Line_5 $$ int offset = 0-->Line_17 $$ offset += lengthChange[ FD ]
Line_8 $$ String replacement = callback.foundMatch(matchResult)-->Line_9 $$ if (replacement == null) [ FD ]
Line_7 $$ MatchResult matchResult = matcher.toMatchResult()-->Line_13 $$ int matchEnd = offset + matchResult.end()[ FD ]
Line_2 $$ public String replaceMatches(CharSequence charSequence, Callback callback) -->Line_8 $$ String replacement = callback.foundMatch(matchResult)[ FD ]
Line_8 $$ String replacement = callback.foundMatch(matchResult)-->Line_16 $$ int lengthChange = replacement.length() - matchLength[ FD ]
Line_2 $$ public String replaceMatches(CharSequence charSequence, Callback callback) -->Line_6 $$ while (matcher.find()) [ CD ]
Line_6 $$ while (matcher.find()) -->Line_16 $$ int lengthChange = replacement.length() - matchLength[ CD ]
Line_3 $$ Matcher matcher = _pattern.matcher(charSequence)-->Line_7 $$ MatchResult matchResult = matcher.toMatchResult()[ FD ]
Line_2 $$ public String replaceMatches(CharSequence charSequence, Callback callback) -->Line_3 $$ Matcher matcher = _pattern.matcher(charSequence)[ FD ]
