Line_49 $$ if (bundleName.length() == 0) -->Line_51 $$ return[ CD ]
Line_49 $$ if (bundleName.length() == 0) -->Line_50 $$ Messages.showErrorDialog(UIDesignerBundle.message("error.specify.bundle.name"), CommonBundle.getErrorTitle())[ CD ]
Line_14 $$ final String bundleNameText = myTfBundleName.getText().replace('/', '.')-->Line_15 $$ PropertiesFile file = PropertiesUtilBase.getPropertiesFile(bundleNameText, myEditor.getModule(), myLocale)[ FD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_15 $$ PropertiesFile file = PropertiesUtilBase.getPropertiesFile(bundleNameText, myEditor.getModule(), myLocale)[ CD ]
Line_27 $$ if (propertiesFile == null) -->Line_28 $$ return[ CD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_31 $$ if (bundleName == null) [ CD ]
Line_44 $$ myTfKey.addActionListener(new ActionListener() -->Line_55 $$ if (bundle == null) [ CD ]
Line_54 $$ final PropertiesFile bundle = manager.findPropertiesFile(myEditor.getModule(), bundleName.replace('/', '.'), myLocale)-->Line_55 $$ if (bundle == null) [ FD ]
Line_44 $$ myTfKey.addActionListener(new ActionListener() -->Line_71 $$ myTfRbValue.setText(descriptor.getResolvedValue())[ CD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_25 $$ fileChooser.showDialog()[ CD ]
Line_2 $$ private void setupResourceBundleCard() -->Line_44 $$ myTfKey.addActionListener(new ActionListener() [ CD ]
Line_18 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_26 $$ PropertiesFile propertiesFile = (PropertiesFile) fileChooser.getSelectedFile()[ FD ]
Line_2 $$ private void setupResourceBundleCard() -->Line_10 $$ myTfBundleName.addActionListener(new ActionListener() [ CD ]
Line_18 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_21 $$ final VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_16 $$ PsiFile initialPropertiesFile = file == null ? null : file.getContainingFile()[ CD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_34 $$ myTfBundleName.setText(bundleName)[ CD ]
Line_44 $$ myTfKey.addActionListener(new ActionListener() -->Line_67 $$ if (descriptor == null) [ CD ]
Line_44 $$ myTfKey.addActionListener(new ActionListener() -->Line_49 $$ if (bundleName.length() == 0) [ CD ]
Line_67 $$ if (descriptor == null) -->Line_68 $$ return[ CD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_30 $$ final String bundleName = FormReferenceProvider.getBundleName(propertiesFile)[ CD ]
Line_55 $$ if (bundle == null) -->Line_56 $$ Messages.showErrorDialog(UIDesignerBundle.message("error.bundle.does.not.exist", bundleName), CommonBundle.getErrorTitle())[ CD ]
Line_44 $$ myTfKey.addActionListener(new ActionListener() -->Line_62 $$ if (!dialog.showAndGet()) [ CD ]
Line_44 $$ myTfKey.addActionListener(new ActionListener() -->Line_53 $$ final PropertiesReferenceManager manager = PropertiesReferenceManager.getInstance(myEditor.getProject())[ CD ]
Line_31 $$ if (bundleName == null) -->Line_32 $$ return[ CD ]
Line_15 $$ PropertiesFile file = PropertiesUtilBase.getPropertiesFile(bundleNameText, myEditor.getModule(), myLocale)-->Line_21 $$ final VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_21 $$ final VirtualFile virtualFile = file.getVirtualFile()-->Line_22 $$ return virtualFile != null && moduleScope.contains(virtualFile)[ FD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_13 $$ Project project = myEditor.getProject()[ CD ]
Line_18 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_22 $$ return virtualFile != null && moduleScope.contains(virtualFile)[ CD ]
Line_15 $$ PropertiesFile file = PropertiesUtilBase.getPropertiesFile(bundleNameText, myEditor.getModule(), myLocale)-->Line_16 $$ PsiFile initialPropertiesFile = file == null ? null : file.getContainingFile()[ FD ]
Line_62 $$ if (!dialog.showAndGet()) -->Line_63 $$ return[ CD ]
Line_44 $$ myTfKey.addActionListener(new ActionListener() -->Line_70 $$ myTfKey.setText(descriptor.getKey())[ CD ]
Line_18 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_21 $$ final VirtualFile virtualFile = file.getVirtualFile()[ CD ]
Line_53 $$ final PropertiesReferenceManager manager = PropertiesReferenceManager.getInstance(myEditor.getProject())-->Line_54 $$ final PropertiesFile bundle = manager.findPropertiesFile(myEditor.getModule(), bundleName.replace('/', '.'), myLocale)[ FD ]
Line_13 $$ Project project = myEditor.getProject()-->Line_18 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() [ FD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_27 $$ if (propertiesFile == null) [ CD ]
Line_55 $$ if (bundle == null) -->Line_57 $$ return[ CD ]
Line_18 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() -->Line_25 $$ fileChooser.showDialog()[ FD ]
Line_17 $$ final GlobalSearchScope moduleScope = GlobalSearchScope.moduleWithDependenciesScope(myEditor.getModule())-->Line_22 $$ return virtualFile != null && moduleScope.contains(virtualFile)[ FD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_14 $$ final String bundleNameText = myTfBundleName.getText().replace('/', '.')[ CD ]
Line_44 $$ myTfKey.addActionListener(new ActionListener() -->Line_54 $$ final PropertiesFile bundle = manager.findPropertiesFile(myEditor.getModule(), bundleName.replace('/', '.'), myLocale)[ CD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_17 $$ final GlobalSearchScope moduleScope = GlobalSearchScope.moduleWithDependenciesScope(myEditor.getModule())[ CD ]
Line_16 $$ PsiFile initialPropertiesFile = file == null ? null : file.getContainingFile()-->Line_18 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() [ FD ]
Line_10 $$ myTfBundleName.addActionListener(new ActionListener() -->Line_18 $$ TreeFileChooser fileChooser = TreeClassChooserFactory.getInstance(project).createFileChooser(UIDesignerBundle.message("title.choose.properties.file"), initialPropertiesFile, StdFileTypes.PROPERTIES, new TreeFileChooser.PsiFileFilter() [ CD ]
