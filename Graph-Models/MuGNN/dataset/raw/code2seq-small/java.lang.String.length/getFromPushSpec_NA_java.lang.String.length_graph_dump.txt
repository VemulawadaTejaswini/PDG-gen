Line_14 $$ if (targetRef.startsWith(remotePrefix)) -->Line_15 $$ targetRef = targetRef.substring(remotePrefix.length())[ CD ]
Line_17 $$ boolean existingBranch = repository.getBranches().getRemoteBranches().contains(remoteBranch)-->Line_18 $$ return new GitPushTarget(remoteBranch, !existingBranch, false)[ FD ]
Line_10 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)-->Line_15 $$ targetRef = targetRef.substring(remotePrefix.length())[ FD ]
Line_13 $$ String remotePrefix = REFS_REMOTES_PREFIX + remote.getName() + "/"-->Line_14 $$ if (targetRef.startsWith(remotePrefix)) [ FD ]
Line_4 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))-->Line_16 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ FD ]
Line_11 $$ if (targetRef == null)-->Line_12 $$ return null[ CD ]
Line_15 $$ targetRef = targetRef.substring(remotePrefix.length())-->Line_16 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ FD ]
Line_13 $$ String remotePrefix = REFS_REMOTES_PREFIX + remote.getName() + "/"-->Line_15 $$ targetRef = targetRef.substring(remotePrefix.length())[ FD ]
Line_10 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)-->Line_14 $$ if (targetRef.startsWith(remotePrefix)) [ FD ]
Line_14 $$ if (targetRef.startsWith(remotePrefix)) -->Line_16 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ CD ]
Line_14 $$ if (targetRef.startsWith(remotePrefix)) -->Line_18 $$ return new GitPushTarget(remoteBranch, !existingBranch, false)[ CD ]
Line_10 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)-->Line_16 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ FD ]
Line_14 $$ if (targetRef.startsWith(remotePrefix)) -->Line_21 $$ return new GitPushTarget(remoteBranch, true, true)[ CD ]
Line_7 $$ List<String> specs = remote.getPushRefSpecs()-->Line_8 $$ if (specs.isEmpty())[ FD ]
Line_4 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))-->Line_7 $$ List<String> specs = remote.getPushRefSpecs()[ FD ]
Line_7 $$ List<String> specs = remote.getPushRefSpecs()-->Line_10 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)[ FD ]
Line_4 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))-->Line_5 $$ if (remote == null)[ FD ]
Line_4 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))-->Line_13 $$ String remotePrefix = REFS_REMOTES_PREFIX + remote.getName() + "/"[ FD ]
Line_14 $$ if (targetRef.startsWith(remotePrefix)) -->Line_17 $$ boolean existingBranch = repository.getBranches().getRemoteBranches().contains(remoteBranch)[ CD ]
Line_10 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)-->Line_11 $$ if (targetRef == null)[ FD ]
Line_8 $$ if (specs.isEmpty())-->Line_9 $$ return null[ CD ]
Line_16 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)-->Line_17 $$ boolean existingBranch = repository.getBranches().getRemoteBranches().contains(remoteBranch)[ FD ]
Line_5 $$ if (remote == null)-->Line_6 $$ return null[ CD ]
