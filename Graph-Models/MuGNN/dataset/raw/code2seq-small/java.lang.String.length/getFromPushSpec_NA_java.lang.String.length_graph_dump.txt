Line_9 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)-->Line_15 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ FD ]
Line_16 $$ boolean existingBranch = repository.getBranches().getRemoteBranches().contains(remoteBranch)-->Line_17 $$ return new GitPushTarget(remoteBranch, !existingBranch, false)[ FD ]
Line_9 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)-->Line_14 $$ targetRef = targetRef.substring(remotePrefix.length())[ FD ]
Line_13 $$ if (targetRef.startsWith(remotePrefix)) -->Line_16 $$ boolean existingBranch = repository.getBranches().getRemoteBranches().contains(remoteBranch)[ CD ]
Line_14 $$ targetRef = targetRef.substring(remotePrefix.length())-->Line_15 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ FD ]
Line_15 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)-->Line_16 $$ boolean existingBranch = repository.getBranches().getRemoteBranches().contains(remoteBranch)[ FD ]
Line_13 $$ if (targetRef.startsWith(remotePrefix)) -->Line_17 $$ return new GitPushTarget(remoteBranch, !existingBranch, false)[ CD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_3 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))[ CD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_16 $$ boolean existingBranch = repository.getBranches().getRemoteBranches().contains(remoteBranch)[ FD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_9 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)[ CD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_6 $$ List<String> specs = remote.getPushRefSpecs()[ CD ]
Line_3 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))-->Line_4 $$ if (remote == null)[ FD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_4 $$ if (remote == null)[ CD ]
Line_6 $$ List<String> specs = remote.getPushRefSpecs()-->Line_7 $$ if (specs.isEmpty())[ FD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_15 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ FD ]
Line_3 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))-->Line_12 $$ String remotePrefix = REFS_REMOTES_PREFIX + remote.getName() + "/"[ FD ]
Line_12 $$ String remotePrefix = REFS_REMOTES_PREFIX + remote.getName() + "/"-->Line_14 $$ targetRef = targetRef.substring(remotePrefix.length())[ FD ]
Line_7 $$ if (specs.isEmpty())-->Line_8 $$ return null[ CD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_13 $$ if (targetRef.startsWith(remotePrefix)) [ CD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_7 $$ if (specs.isEmpty())[ CD ]
Line_9 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)-->Line_13 $$ if (targetRef.startsWith(remotePrefix)) [ FD ]
Line_3 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))-->Line_6 $$ List<String> specs = remote.getPushRefSpecs()[ FD ]
Line_13 $$ if (targetRef.startsWith(remotePrefix)) -->Line_15 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ CD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_12 $$ String remotePrefix = REFS_REMOTES_PREFIX + remote.getName() + "/"[ CD ]
Line_4 $$ if (remote == null)-->Line_5 $$ return null[ CD ]
Line_13 $$ if (targetRef.startsWith(remotePrefix)) -->Line_14 $$ targetRef = targetRef.substring(remotePrefix.length())[ CD ]
Line_6 $$ List<String> specs = remote.getPushRefSpecs()-->Line_9 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)[ FD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_10 $$ if (targetRef == null)[ CD ]
Line_12 $$ String remotePrefix = REFS_REMOTES_PREFIX + remote.getName() + "/"-->Line_13 $$ if (targetRef.startsWith(remotePrefix)) [ FD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_3 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))[ FD ]
Line_10 $$ if (targetRef == null)-->Line_11 $$ return null[ CD ]
Line_2 $$ public static GitPushTarget getFromPushSpec(@NotNull GitRepository repository, @NotNull GitLocalBranch sourceBranch) -->Line_9 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)[ FD ]
Line_13 $$ if (targetRef.startsWith(remotePrefix)) -->Line_20 $$ return new GitPushTarget(remoteBranch, true, true)[ CD ]
Line_3 $$ final GitRemote remote = getRemoteToPush(repository, GitBranchUtil.getTrackInfoForBranch(repository, sourceBranch))-->Line_15 $$ GitRemoteBranch remoteBranch = GitUtil.findOrCreateRemoteBranch(repository, remote, targetRef)[ FD ]
Line_9 $$ String targetRef = GitPushSpecParser.getTargetRef(repository, sourceBranch.getName(), specs)-->Line_10 $$ if (targetRef == null)[ FD ]
