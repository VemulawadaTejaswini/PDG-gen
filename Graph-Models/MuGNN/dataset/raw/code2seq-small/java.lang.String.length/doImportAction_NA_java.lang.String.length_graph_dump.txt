Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_8 $$ return file.getFileType() == StdFileTypes.XML[ FD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_17 $$ if (file == null)[ FD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_17 $$ if (file == null)[ CD ]
Line_46 $$ if (n > 1) -->Line_47 $$ Messages.showInfoMessage(myProject, n + " entries have been successfully imported", "Import Successful")[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_11 $$ descriptor.setDescription("Please select the configuration file (usually named IntelliLang.xml) to import.")[ CD ]
Line_48 $$ if (n == 1) -->Line_49 $$ Messages.showInfoMessage(myProject, "One entry has been successfully imported", "Import Successful")[ CD ]
Line_21 $$ if (cfg == null) -->Line_22 $$ Messages.showWarningDialog(myProject, "The selected file does not contain any importable configuration.", "Nothing to Import")[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_13 $$ descriptor.putUserData(LangDataKeys.MODULE_CONTEXT, LangDataKeys.MODULE.getData(dataContext))[ CD ]
Line_37 $$ if (currentInjections == null) -->Line_38 $$ newInjections.addAll(importingInjections)[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_16 $$ final VirtualFile file = FileChooser.chooseFile(descriptor, myProject, null)[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_13 $$ descriptor.putUserData(LangDataKeys.MODULE_CONTEXT, LangDataKeys.MODULE.getData(dataContext))[ FD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_13 $$ descriptor.putUserData(LangDataKeys.MODULE_CONTEXT, LangDataKeys.MODULE.getData(dataContext))[ FD ]
Line_37 $$ if (currentInjections == null) -->Line_40 $$ Configuration.importInjections(currentInjections, importingInjections, originalInjections, newInjections)[ CD ]
Line_17 $$ if (file == null)-->Line_18 $$ return[ CD ]
Line_26 $$ final Map<String, Set<InjInfo>> currentMap = ContainerUtil.classify(info.injectionInfos.iterator(), new Convertor<InjInfo, String>() -->Line_28 $$ return o.injection.getSupportId()[ CD ]
Line_21 $$ if (cfg == null) -->Line_23 $$ return[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_20 $$ final Configuration cfg = Configuration.load(file.getInputStream())[ FD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_12 $$ descriptor.setTitle("Import Configuration")[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_12 $$ descriptor.setTitle("Import Configuration")[ FD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_5 $$ return super.isFileVisible(file, showHiddenFiles) && (file.isDirectory() || "xml".equals(file.getExtension()) || file.getFileType() == FileTypes.ARCHIVE)[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_11 $$ descriptor.setDescription("Please select the configuration file (usually named IntelliLang.xml) to import.")[ FD ]
Line_48 $$ if (n == 1) -->Line_51 $$ Messages.showInfoMessage(myProject, "No new entries have been imported", "Import")[ CD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) [ CD ]
Line_46 $$ if (n > 1) -->Line_48 $$ if (n == 1) [ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_8 $$ return file.getFileType() == StdFileTypes.XML[ CD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_5 $$ return super.isFileVisible(file, showHiddenFiles) && (file.isDirectory() || "xml".equals(file.getExtension()) || file.getFileType() == FileTypes.ARCHIVE)[ FD ]
Line_3 $$ final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, false, true, false, true, false) -->Line_16 $$ final VirtualFile file = FileChooser.chooseFile(descriptor, myProject, null)[ FD ]
Line_2 $$ private void doImportAction(final DataContext dataContext) -->Line_15 $$ splitterData.externalizeFromDimensionService("IntelliLang.ImportSettingsKey.SplitterProportions")[ CD ]
