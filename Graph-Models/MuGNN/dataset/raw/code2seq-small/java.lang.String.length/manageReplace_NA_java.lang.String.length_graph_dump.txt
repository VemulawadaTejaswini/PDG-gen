Line_5 $$ expressionFromText = (GrExpression) condExp.replace(expressionFromText)-->Line_6 $$ editor.getCaretModel().moveToOffset(expressionFromText.getTextOffset() + caretOffset)[ FD ]
Line_2 $$ private static void manageReplace(Editor editor, GrConditionalExpression condExp, String conditionExpText, String newExp) -->Line_5 $$ expressionFromText = (GrExpression) condExp.replace(expressionFromText)[ CD ]
Line_2 $$ private static void manageReplace(Editor editor, GrConditionalExpression condExp, String conditionExpText, String newExp) -->Line_4 $$ GrExpression expressionFromText = GroovyPsiElementFactory.getInstance(editor.getProject()).createExpressionFromText(newExp, condExp.getContext())[ CD ]
Line_4 $$ GrExpression expressionFromText = GroovyPsiElementFactory.getInstance(editor.getProject()).createExpressionFromText(newExp, condExp.getContext())-->Line_5 $$ expressionFromText = (GrExpression) condExp.replace(expressionFromText)[ FD ]
Line_2 $$ private static void manageReplace(Editor editor, GrConditionalExpression condExp, String conditionExpText, String newExp) -->Line_6 $$ editor.getCaretModel().moveToOffset(expressionFromText.getTextOffset() + caretOffset)[ CD ]
Line_2 $$ private static void manageReplace(Editor editor, GrConditionalExpression condExp, String conditionExpText, String newExp) -->Line_3 $$ int caretOffset = conditionExpText.length() + 2[ CD ]
Line_2 $$ private static void manageReplace(Editor editor, GrConditionalExpression condExp, String conditionExpText, String newExp) -->Line_3 $$ int caretOffset = conditionExpText.length() + 2[ FD ]
Line_4 $$ GrExpression expressionFromText = GroovyPsiElementFactory.getInstance(editor.getProject()).createExpressionFromText(newExp, condExp.getContext())-->Line_6 $$ editor.getCaretModel().moveToOffset(expressionFromText.getTextOffset() + caretOffset)[ FD ]
Line_2 $$ private static void manageReplace(Editor editor, GrConditionalExpression condExp, String conditionExpText, String newExp) -->Line_4 $$ GrExpression expressionFromText = GroovyPsiElementFactory.getInstance(editor.getProject()).createExpressionFromText(newExp, condExp.getContext())[ FD ]
Line_2 $$ private static void manageReplace(Editor editor, GrConditionalExpression condExp, String conditionExpText, String newExp) -->Line_5 $$ expressionFromText = (GrExpression) condExp.replace(expressionFromText)[ FD ]
Line_2 $$ private static void manageReplace(Editor editor, GrConditionalExpression condExp, String conditionExpText, String newExp) -->Line_6 $$ editor.getCaretModel().moveToOffset(expressionFromText.getTextOffset() + caretOffset)[ FD ]
