Line_21 $$ j = -1-->Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) [ FD ]
Line_37 $$ ranges = avtRanges.toArray(new TextRange[avtRanges.size()])-->Line_42 $$ ranges = new TextRange[] [ FD ]
Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())-->Line_17 $$ if (lexer == null) [ FD ]
Line_10 $$ final TextRange[] ranges-->Line_44 $$ attribute.putUserData(CACHED_FILES, Pair.create(attribute.getValue(), ranges))[ FD ]
Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) -->Line_29 $$ if (j != -1) [ CD ]
Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) -->Line_13 $$ int i[ CD ]
Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) -->Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) [ CD ]
Line_15 $$ Lexer lexer = null-->Line_23 $$ if (lexer.getTokenType() == XPathTokenTypes.RBRACE) [ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_3 $$ final TextRange[] cachedFiles = getCachedRanges(attribute)[ FD ]
Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())-->Line_23 $$ if (lexer.getTokenType() == XPathTokenTypes.RBRACE) [ FD ]
Line_7 $$ final String value = attribute.getDisplayValue()-->Line_8 $$ if (value == null)[ FD ]
Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) -->Line_21 $$ j = -1[ CD ]
Line_12 $$ final List<TextRange> avtRanges = new SmartList<TextRange>()-->Line_36 $$ if (avtRanges.size() > 0) [ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_10 $$ final TextRange[] ranges[ CD ]
Line_42 $$ ranges = new TextRange[] -->Line_44 $$ attribute.putUserData(CACHED_FILES, Pair.create(attribute.getValue(), ranges))[ FD ]
Line_8 $$ if (value == null)-->Line_9 $$ return EMPTY_ARRAY[ CD ]
Line_14 $$ int j = 0-->Line_29 $$ if (j != -1) [ FD ]
Line_37 $$ ranges = avtRanges.toArray(new TextRange[avtRanges.size()])-->Line_44 $$ attribute.putUserData(CACHED_FILES, Pair.create(attribute.getValue(), ranges))[ FD ]
Line_36 $$ if (avtRanges.size() > 0) -->Line_39 $$ ranges = EMPTY_ARRAY[ CD ]
Line_12 $$ final List<TextRange> avtRanges = new SmartList<TextRange>()-->Line_37 $$ ranges = avtRanges.toArray(new TextRange[avtRanges.size()])[ FD ]
Line_39 $$ ranges = EMPTY_ARRAY-->Line_44 $$ attribute.putUserData(CACHED_FILES, Pair.create(attribute.getValue(), ranges))[ FD ]
Line_3 $$ final TextRange[] cachedFiles = getCachedRanges(attribute)-->Line_4 $$ if (cachedFiles != null) [ FD ]
Line_14 $$ int j = 0-->Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) [ FD ]
Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) -->Line_36 $$ if (avtRanges.size() > 0) [ CD ]
Line_22 $$ while (lexer.getTokenType() != null) -->Line_27 $$ lexer.advance()[ CD ]
Line_15 $$ Lexer lexer = null-->Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())[ FD ]
Line_7 $$ final String value = attribute.getDisplayValue()-->Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) [ FD ]
Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())-->Line_22 $$ while (lexer.getTokenType() != null) [ FD ]
Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) -->Line_17 $$ if (lexer == null) [ CD ]
Line_29 $$ if (j != -1) -->Line_30 $$ avtRanges.add(AVTRange.create(attribute, i, j + 1, j > i + 1))[ CD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) [ FD ]
Line_15 $$ Lexer lexer = null-->Line_24 $$ j = lexer.getTokenStart()[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_7 $$ final String value = attribute.getDisplayValue()[ CD ]
Line_13 $$ int i-->Line_32 $$ avtRanges.add(AVTRange.create(attribute, i, value.length(), false))[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) [ CD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_45 $$ return ranges[ CD ]
Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) -->Line_12 $$ final List<TextRange> avtRanges = new SmartList<TextRange>()[ CD ]
Line_15 $$ Lexer lexer = null-->Line_22 $$ while (lexer.getTokenType() != null) [ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_7 $$ final String value = attribute.getDisplayValue()[ FD ]
Line_14 $$ int j = 0-->Line_21 $$ j = -1[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_44 $$ attribute.putUserData(CACHED_FILES, Pair.create(attribute.getValue(), ranges))[ FD ]
Line_15 $$ Lexer lexer = null-->Line_20 $$ lexer.start(value, i, value.length())[ FD ]
Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) -->Line_15 $$ Lexer lexer = null[ CD ]
Line_36 $$ if (avtRanges.size() > 0) -->Line_37 $$ ranges = avtRanges.toArray(new TextRange[avtRanges.size()])[ CD ]
Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())-->Line_24 $$ j = lexer.getTokenStart()[ FD ]
Line_7 $$ final String value = attribute.getDisplayValue()-->Line_32 $$ avtRanges.add(AVTRange.create(attribute, i, value.length(), false))[ FD ]
Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) -->Line_30 $$ avtRanges.add(AVTRange.create(attribute, i, j + 1, j > i + 1))[ FD ]
Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())-->Line_20 $$ lexer.start(value, i, value.length())[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_30 $$ avtRanges.add(AVTRange.create(attribute, i, j + 1, j > i + 1))[ FD ]
Line_29 $$ if (j != -1) -->Line_32 $$ avtRanges.add(AVTRange.create(attribute, i, value.length(), false))[ CD ]
Line_10 $$ final TextRange[] ranges-->Line_39 $$ ranges = EMPTY_ARRAY[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())[ FD ]
Line_37 $$ ranges = avtRanges.toArray(new TextRange[avtRanges.size()])-->Line_39 $$ ranges = EMPTY_ARRAY[ FD ]
Line_13 $$ int i-->Line_20 $$ lexer.start(value, i, value.length())[ FD ]
Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) -->Line_20 $$ lexer.start(value, i, value.length())[ CD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_44 $$ attribute.putUserData(CACHED_FILES, Pair.create(attribute.getValue(), ranges))[ CD ]
Line_21 $$ j = -1-->Line_29 $$ if (j != -1) [ FD ]
Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) -->Line_22 $$ while (lexer.getTokenType() != null) [ CD ]
Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) -->Line_32 $$ avtRanges.add(AVTRange.create(attribute, i, value.length(), false))[ FD ]
Line_10 $$ final TextRange[] ranges-->Line_37 $$ ranges = avtRanges.toArray(new TextRange[avtRanges.size()])[ FD ]
Line_22 $$ while (lexer.getTokenType() != null) -->Line_23 $$ if (lexer.getTokenType() == XPathTokenTypes.RBRACE) [ CD ]
Line_15 $$ Lexer lexer = null-->Line_17 $$ if (lexer == null) [ FD ]
Line_23 $$ if (lexer.getTokenType() == XPathTokenTypes.RBRACE) -->Line_24 $$ j = lexer.getTokenStart()[ CD ]
Line_21 $$ j = -1-->Line_24 $$ j = lexer.getTokenStart()[ FD ]
Line_13 $$ int i-->Line_30 $$ avtRanges.add(AVTRange.create(attribute, i, j + 1, j > i + 1))[ FD ]
Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) -->Line_14 $$ int j = 0[ CD ]
Line_24 $$ j = lexer.getTokenStart()-->Line_29 $$ if (j != -1) [ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_4 $$ if (cachedFiles != null) [ CD ]
Line_39 $$ ranges = EMPTY_ARRAY-->Line_42 $$ ranges = new TextRange[] [ FD ]
Line_11 $$ if (XsltSupport.mayBeAVT(attribute)) -->Line_42 $$ ranges = new TextRange[] [ CD ]
Line_12 $$ final List<TextRange> avtRanges = new SmartList<TextRange>()-->Line_30 $$ avtRanges.add(AVTRange.create(attribute, i, j + 1, j > i + 1))[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_3 $$ final TextRange[] cachedFiles = getCachedRanges(attribute)[ CD ]
Line_7 $$ final String value = attribute.getDisplayValue()-->Line_20 $$ lexer.start(value, i, value.length())[ FD ]
Line_15 $$ Lexer lexer = null-->Line_27 $$ lexer.advance()[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_8 $$ if (value == null)[ CD ]
Line_12 $$ final List<TextRange> avtRanges = new SmartList<TextRange>()-->Line_32 $$ avtRanges.add(AVTRange.create(attribute, i, value.length(), false))[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_32 $$ avtRanges.add(AVTRange.create(attribute, i, value.length(), false))[ FD ]
Line_4 $$ if (cachedFiles != null) -->Line_5 $$ return cachedFiles[ CD ]
Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())-->Line_27 $$ lexer.advance()[ FD ]
Line_2 $$ private synchronized TextRange[] getInjectionRanges(final XmlAttribute attribute, XsltChecker.LanguageLevel languageLevel) -->Line_42 $$ ranges = new TextRange[] [ FD ]
Line_13 $$ int i-->Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) [ FD ]
Line_10 $$ final TextRange[] ranges-->Line_42 $$ ranges = new TextRange[] [ FD ]
Line_17 $$ if (lexer == null) -->Line_18 $$ lexer = LanguageParserDefinitions.INSTANCE.forLanguage(languageLevel.getXPathVersion().getLanguage()).createLexer(attribute.getProject())[ CD ]
Line_16 $$ while ((i = XsltSupport.getAVTOffset(value, j)) != -1) -->Line_20 $$ lexer.start(value, i, value.length())[ FD ]
Line_14 $$ int j = 0-->Line_24 $$ j = lexer.getTokenStart()[ FD ]
