Line_16 $$ boolean childSeparator = false-->Line_19 $$ childSeparator = true[ FD ]
Line_35 $$ if (childPos != -1)-->Line_36 $$ return childPos[ CD ]
Line_27 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)-->Line_34 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)[ FD ]
Line_5 $$ int partStart-->Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_13 $$ if (partStart == -1)-->Line_14 $$ return -1[ CD ]
Line_6 $$ if (parent == null) -->Line_13 $$ if (partStart == -1)[ CD ]
Line_6 $$ if (parent == null) -->Line_8 $$ outNode[0] = this[ CD ]
Line_18 $$ if (partStart == outNode[0].part.length()) -->Line_19 $$ childSeparator = true[ CD ]
Line_28 $$ if (index == childName.length()) -->Line_29 $$ return partStart + index[ CD ]
Line_16 $$ boolean childSeparator = false-->Line_34 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)[ FD ]
Line_11 $$ CharSequence gParentName = gParent == null ? null : gParent.getNameSequence()-->Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_7 $$ partStart = 0-->Line_24 $$ partStart++[ FD ]
Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_21 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)[ FD ]
Line_27 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)-->Line_28 $$ if (index == childName.length()) [ FD ]
Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_13 $$ if (partStart == -1)[ FD ]
Line_34 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)-->Line_35 $$ if (childPos != -1)[ FD ]
Line_5 $$ int partStart-->Line_7 $$ partStart = 0[ FD ]
Line_18 $$ if (partStart == outNode[0].part.length()) -->Line_24 $$ partStart++[ CD ]
Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_27 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)[ FD ]
Line_7 $$ partStart = 0-->Line_13 $$ if (partStart == -1)[ FD ]
Line_7 $$ partStart = 0-->Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_6 $$ if (parent == null) -->Line_11 $$ CharSequence gParentName = gParent == null ? null : gParent.getNameSequence()[ CD ]
Line_5 $$ int partStart-->Line_24 $$ partStart++[ FD ]
Line_10 $$ VirtualFile gParent = parent.getParent()-->Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ FD ]
Line_7 $$ partStart = 0-->Line_21 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)[ FD ]
Line_21 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)-->Line_22 $$ if (sepIndex != 1)[ FD ]
Line_22 $$ if (sepIndex != 1)-->Line_23 $$ return -1[ CD ]
Line_7 $$ partStart = 0-->Line_27 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)[ FD ]
Line_6 $$ if (parent == null) -->Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)[ CD ]
Line_5 $$ int partStart-->Line_13 $$ if (partStart == -1)[ FD ]
Line_19 $$ childSeparator = true-->Line_34 $$ int childPos = child.position(null, null, childSeparator, childName.subSequence(index, childName.length()), outNode)[ FD ]
Line_5 $$ int partStart-->Line_27 $$ int index = indexOfFirstDifferentChar(childName, 0, outNode[0].part, partStart)[ FD ]
Line_7 $$ partStart = 0-->Line_18 $$ if (partStart == outNode[0].part.length()) [ FD ]
Line_5 $$ int partStart-->Line_18 $$ if (partStart == outNode[0].part.length()) [ FD ]
Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_18 $$ if (partStart == outNode[0].part.length()) [ FD ]
Line_6 $$ if (parent == null) -->Line_10 $$ VirtualFile gParent = parent.getParent()[ CD ]
Line_17 $$ if (separator) -->Line_18 $$ if (partStart == outNode[0].part.length()) [ CD ]
Line_5 $$ int partStart-->Line_21 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)[ FD ]
Line_18 $$ if (partStart == outNode[0].part.length()) -->Line_22 $$ if (sepIndex != 1)[ CD ]
Line_12 $$ partStart = position(gParent, gParentName, gParentName != null && !StringUtil.equals(gParentName, "/"), parentName, outNode)-->Line_24 $$ partStart++[ FD ]
Line_18 $$ if (partStart == outNode[0].part.length()) -->Line_21 $$ int sepIndex = indexOfFirstDifferentChar("/", 0, outNode[0].part, partStart)[ CD ]
Line_6 $$ if (parent == null) -->Line_7 $$ partStart = 0[ CD ]
Line_10 $$ VirtualFile gParent = parent.getParent()-->Line_11 $$ CharSequence gParentName = gParent == null ? null : gParent.getNameSequence()[ FD ]
