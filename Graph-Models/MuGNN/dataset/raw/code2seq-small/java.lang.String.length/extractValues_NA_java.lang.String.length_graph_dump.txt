Line_5 $$ for (int i = 0; i < types.size(); i++) -->Line_6 $$ Class<?> javaType = types.get(i).getJavaType()[ CD ]
Line_5 $$ for (int i = 0; i < types.size(); i++) -->Line_26 $$ if (uuidColumns.contains(i)) [ FD ]
Line_4 $$ int completedBytes = 0-->Line_11 $$ completedBytes += SIZE_OF_BYTE[ FD ]
Line_7 $$ if (javaType == boolean.class) -->Line_13 $$ if (javaType == long.class) [ CD ]
Line_4 $$ int completedBytes = 0-->Line_17 $$ completedBytes += SIZE_OF_LONG[ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_4 $$ int completedBytes = 0[ CD ]
Line_25 $$ if (javaType == Slice.class) -->Line_26 $$ if (uuidColumns.contains(i)) [ CD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_32 $$ nulls[i] = resultSet.wasNull()[ FD ]
Line_19 $$ if (javaType == double.class) -->Line_25 $$ if (javaType == Slice.class) [ CD ]
Line_5 $$ for (int i = 0; i < types.size(); i++) -->Line_7 $$ if (javaType == boolean.class) [ CD ]
Line_4 $$ int completedBytes = 0-->Line_23 $$ completedBytes += SIZE_OF_DOUBLE[ FD ]
Line_5 $$ for (int i = 0; i < types.size(); i++) -->Line_6 $$ Class<?> javaType = types.get(i).getJavaType()[ FD ]
Line_26 $$ if (uuidColumns.contains(i)) -->Line_28 $$ nulls[i] = resultSet.wasNull()[ CD ]
Line_13 $$ if (javaType == long.class) -->Line_19 $$ if (javaType == double.class) [ CD ]
Line_19 $$ if (javaType == double.class) -->Line_21 $$ nulls[i] = resultSet.wasNull()[ CD ]
Line_6 $$ Class<?> javaType = types.get(i).getJavaType()-->Line_25 $$ if (javaType == Slice.class) [ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_28 $$ nulls[i] = resultSet.wasNull()[ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_26 $$ if (uuidColumns.contains(i)) [ FD ]
Line_16 $$ if (!nulls[i]) -->Line_17 $$ completedBytes += SIZE_OF_LONG[ CD ]
Line_23 $$ completedBytes += SIZE_OF_DOUBLE-->Line_36 $$ completedBytes += strings[i].length()[ FD ]
Line_7 $$ if (javaType == boolean.class) -->Line_8 $$ booleans[i] = resultSet.getBoolean(i + 1)[ CD ]
Line_26 $$ if (uuidColumns.contains(i)) -->Line_31 $$ String value = resultSet.getString(i + 1)[ CD ]
Line_7 $$ if (javaType == boolean.class) -->Line_9 $$ nulls[i] = resultSet.wasNull()[ CD ]
Line_13 $$ if (javaType == long.class) -->Line_15 $$ nulls[i] = resultSet.wasNull()[ CD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_5 $$ for (int i = 0; i < types.size(); i++) [ CD ]
Line_25 $$ if (javaType == Slice.class) -->Line_35 $$ if (!nulls[i]) [ CD ]
Line_13 $$ if (javaType == long.class) -->Line_14 $$ longs[i] = resultSet.getLong(i + 1)[ CD ]
Line_35 $$ if (!nulls[i]) -->Line_36 $$ completedBytes += strings[i].length()[ CD ]
Line_4 $$ int completedBytes = 0-->Line_36 $$ completedBytes += strings[i].length()[ FD ]
Line_11 $$ completedBytes += SIZE_OF_BYTE-->Line_17 $$ completedBytes += SIZE_OF_LONG[ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_27 $$ byte[] bytes = resultSet.getBytes(i + 1)[ FD ]
Line_13 $$ if (javaType == long.class) -->Line_16 $$ if (!nulls[i]) [ CD ]
Line_19 $$ if (javaType == double.class) -->Line_20 $$ doubles[i] = resultSet.getDouble(i + 1)[ CD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_20 $$ doubles[i] = resultSet.getDouble(i + 1)[ FD ]
Line_6 $$ Class<?> javaType = types.get(i).getJavaType()-->Line_7 $$ if (javaType == boolean.class) [ FD ]
Line_26 $$ if (uuidColumns.contains(i)) -->Line_29 $$ strings[i] = nulls[i] ? null : uuidFromBytes(bytes).toString().toLowerCase(ENGLISH)[ CD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_31 $$ String value = resultSet.getString(i + 1)[ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_14 $$ longs[i] = resultSet.getLong(i + 1)[ FD ]
Line_22 $$ if (!nulls[i]) -->Line_23 $$ completedBytes += SIZE_OF_DOUBLE[ CD ]
Line_26 $$ if (uuidColumns.contains(i)) -->Line_32 $$ nulls[i] = resultSet.wasNull()[ CD ]
Line_6 $$ Class<?> javaType = types.get(i).getJavaType()-->Line_13 $$ if (javaType == long.class) [ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_9 $$ nulls[i] = resultSet.wasNull()[ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_15 $$ nulls[i] = resultSet.wasNull()[ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_21 $$ nulls[i] = resultSet.wasNull()[ FD ]
Line_6 $$ Class<?> javaType = types.get(i).getJavaType()-->Line_19 $$ if (javaType == double.class) [ FD ]
Line_26 $$ if (uuidColumns.contains(i)) -->Line_27 $$ byte[] bytes = resultSet.getBytes(i + 1)[ CD ]
Line_19 $$ if (javaType == double.class) -->Line_22 $$ if (!nulls[i]) [ CD ]
Line_11 $$ completedBytes += SIZE_OF_BYTE-->Line_36 $$ completedBytes += strings[i].length()[ FD ]
Line_11 $$ completedBytes += SIZE_OF_BYTE-->Line_23 $$ completedBytes += SIZE_OF_DOUBLE[ FD ]
Line_27 $$ byte[] bytes = resultSet.getBytes(i + 1)-->Line_29 $$ strings[i] = nulls[i] ? null : uuidFromBytes(bytes).toString().toLowerCase(ENGLISH)[ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_42 $$ return completedBytes[ CD ]
Line_17 $$ completedBytes += SIZE_OF_LONG-->Line_23 $$ completedBytes += SIZE_OF_DOUBLE[ FD ]
Line_17 $$ completedBytes += SIZE_OF_LONG-->Line_36 $$ completedBytes += strings[i].length()[ FD ]
Line_26 $$ if (uuidColumns.contains(i)) -->Line_33 $$ strings[i] = nulls[i] ? null : value[ CD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_8 $$ booleans[i] = resultSet.getBoolean(i + 1)[ FD ]
Line_2 $$ int extractValues(ResultSet resultSet, Set<Integer> uuidColumns) throws SQLException -->Line_3 $$ checkArgument(resultSet != null, "resultSet is null")[ CD ]
Line_7 $$ if (javaType == boolean.class) -->Line_10 $$ if (!nulls[i]) [ CD ]
Line_10 $$ if (!nulls[i]) -->Line_11 $$ completedBytes += SIZE_OF_BYTE[ CD ]
