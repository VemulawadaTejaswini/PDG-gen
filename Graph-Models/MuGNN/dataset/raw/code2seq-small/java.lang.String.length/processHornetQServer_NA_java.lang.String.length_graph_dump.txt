Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_150 $$ handleUnknownConfigurationAttribute(reader, element, operation)[ FD ]
Line_31 $$ String localName = null-->Line_34 $$ localName = reader.getLocalName()[ FD ]
Line_4 $$ String elementName = null-->Line_32 $$ do [ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_145 $$ handleElementText(reader, element, operation)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_28 $$ operation.get(OP_ADDR).set(address)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_68 $$ parseDiverts(reader, address, list)[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_71 $$ unhandledElement(reader, element)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_27 $$ operation.get(OP).set(ADD)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_104 $$ parseQueues(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_131 $$ throw unexpectedEndElement(reader)[ FD ]
Line_8 $$ elementName = ModelDescriptionConstants.SUBSYSTEM-->Line_17 $$ elementName = CommonAttributes.HORNETQ_SERVER[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_20 $$ if (hqServerName == null || hqServerName.length() == 0) [ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_24 $$ address.add(HORNETQ_SERVER, hqServerName)[ CD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_47 $$ parseDirectory(reader, CommonAttributes.BINDINGS_DIRECTORY, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_95 $$ handleElementText(reader, element, null, operation)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_120 $$ handleElementText(reader, element, "server", operation)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_28 $$ operation.get(OP_ADDR).set(address)[ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_145 $$ handleElementText(reader, element, operation)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_136 $$ throw unexpectedEndElement(reader)[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_125 $$ MessagingLogger.ROOT_LOGGER.deprecatedXMLElement(element.toString(), Element.STATISTICS_ENABLED.toString())[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_53 $$ processBroadcastGroups(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_50 $$ processBridges(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_99 $$ processSecuritySettings(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_109 $$ processConnectionFactories(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_25 $$ address.protect()[ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_65 $$ processDiscoveryGroups(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_85 $$ skipElementText(reader)[ FD ]
Line_3 $$ String hqServerName = null-->Line_24 $$ address.add(HORNETQ_SERVER, hqServerName)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_114 $$ processJmsDestinations(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_31 $$ String localName = null[ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_32 $$ do [ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_71 $$ unhandledElement(reader, element)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_95 $$ handleElementText(reader, element, null, operation)[ FD ]
Line_12 $$ final int count = reader.getAttributeCount()-->Line_13 $$ if (count > 0) [ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_74 $$ processGroupingHandler(reader, address, list)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_114 $$ processJmsDestinations(reader, address, list)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_150 $$ handleUnknownConfigurationAttribute(reader, element, operation)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_147 $$ handleComplexConfigurationAttribute(reader, element, operation)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_80 $$ parseDirectory(reader, CommonAttributes.LARGE_MESSAGES_DIRECTORY, address, list)[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_37 $$ throw ParseUtils.duplicateNamedElement(reader, element.getLocalName())[ FD ]
Line_142 $$ if (SIMPLE_ROOT_RESOURCE_ELEMENTS.contains(element)) -->Line_143 $$ AttributeDefinition attributeDefinition = element.getDefinition()[ CD ]
Line_32 $$ do -->Line_36 $$ if (!seen.add(element)) [ CD ]
Line_15 $$ hqServerName = reader.getAttributeValue(0).trim()-->Line_20 $$ if (hqServerName == null || hqServerName.length() == 0) [ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_120 $$ handleElementText(reader, element, "server", operation)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_56 $$ processClusterConnections(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_23 $$ final ModelNode address = subsystemAddress.clone()[ FD ]
Line_15 $$ hqServerName = reader.getAttributeValue(0).trim()-->Line_21 $$ hqServerName = DEFAULT[ FD ]
Line_32 $$ do -->Line_33 $$ reader.nextTag()[ CD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_109 $$ processConnectionFactories(reader, address, list)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_44 $$ processAddressSettings(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_35 $$ final Element element = Element.forName(reader.getLocalName())[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_145 $$ handleElementText(reader, element, operation)[ FD ]
Line_30 $$ EnumSet<Element> seen = EnumSet.noneOf(Element.class)-->Line_36 $$ if (!seen.add(element)) [ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_32 $$ do [ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_3 $$ String hqServerName = null[ CD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_143 $$ AttributeDefinition attributeDefinition = element.getDefinition()[ FD ]
Line_34 $$ localName = reader.getLocalName()-->Line_32 $$ do [ FD ]
Line_32 $$ do -->Line_34 $$ localName = reader.getLocalName()[ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_27 $$ operation.get(OP).set(ADD)[ CD ]
Line_32 $$ do -->Line_35 $$ final Element element = Element.forName(reader.getLocalName())[ CD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_95 $$ handleElementText(reader, element, null, operation)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_74 $$ processGroupingHandler(reader, address, list)[ FD ]
Line_3 $$ String hqServerName = null-->Line_15 $$ hqServerName = reader.getAttributeValue(0).trim()[ FD ]
Line_17 $$ elementName = CommonAttributes.HORNETQ_SERVER-->Line_32 $$ do [ FD ]
Line_20 $$ if (hqServerName == null || hqServerName.length() == 0) -->Line_21 $$ hqServerName = DEFAULT[ CD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_147 $$ handleComplexConfigurationAttribute(reader, element, operation)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_56 $$ processClusterConnections(reader, address, list)[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_84 $$ MessagingLogger.ROOT_LOGGER.deprecatedXMLElement(element.toString())[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_147 $$ handleComplexConfigurationAttribute(reader, element, operation)[ FD ]
Line_31 $$ String localName = null-->Line_32 $$ do [ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_23 $$ final ModelNode address = subsystemAddress.clone()[ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_12 $$ final int count = reader.getAttributeCount()[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_33 $$ reader.nextTag()[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_99 $$ processSecuritySettings(reader, address, list)[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_140 $$ MessagingLogger.ROOT_LOGGER.deprecatedXMLElement(element.toString())[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_29 $$ list.add(operation)[ CD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_36 $$ if (!seen.add(element)) [ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_80 $$ parseDirectory(reader, CommonAttributes.LARGE_MESSAGES_DIRECTORY, address, list)[ FD ]
Line_15 $$ hqServerName = reader.getAttributeValue(0).trim()-->Line_24 $$ address.add(HORNETQ_SERVER, hqServerName)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_26 $$ final ModelNode operation = new ModelNode()[ CD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_89 $$ parseDirectory(reader, CommonAttributes.PAGING_DIRECTORY, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_37 $$ throw ParseUtils.duplicateNamedElement(reader, element.getLocalName())[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_50 $$ processBridges(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_120 $$ handleElementText(reader, element, "server", operation)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_68 $$ parseDiverts(reader, address, list)[ FD ]
Line_4 $$ String elementName = null-->Line_17 $$ elementName = CommonAttributes.HORNETQ_SERVER[ FD ]
Line_4 $$ String elementName = null-->Line_8 $$ elementName = ModelDescriptionConstants.SUBSYSTEM[ FD ]
Line_21 $$ hqServerName = DEFAULT-->Line_24 $$ address.add(HORNETQ_SERVER, hqServerName)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_14 $$ requireSingleAttribute(reader, Attribute.NAME.getLocalName())[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_4 $$ String elementName = null[ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_41 $$ processAcceptors(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_59 $$ processConnectors(reader, address, list)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_28 $$ operation.get(OP_ADDR).set(address)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_62 $$ processConnectorServices(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_126 $$ handleElementText(reader, element, operation)[ FD ]
Line_3 $$ String hqServerName = null-->Line_21 $$ hqServerName = DEFAULT[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_92 $$ processRemotingInterceptors(reader, operation)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_62 $$ processConnectorServices(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_7 $$ requireNoAttributes(reader)[ FD ]
Line_13 $$ if (count > 0) -->Line_15 $$ hqServerName = reader.getAttributeValue(0).trim()[ CD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_59 $$ processConnectors(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_104 $$ parseQueues(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_77 $$ parseDirectory(reader, CommonAttributes.JOURNAL_DIRECTORY, address, list)[ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_126 $$ handleElementText(reader, element, operation)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_130 $$ if (namespace == Namespace.MESSAGING_1_0) [ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_41 $$ processAcceptors(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_92 $$ processRemotingInterceptors(reader, operation)[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_126 $$ handleElementText(reader, element, operation)[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_24 $$ address.add(HORNETQ_SERVER, hqServerName)[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_150 $$ handleUnknownConfigurationAttribute(reader, element, operation)[ FD ]
Line_13 $$ if (count > 0) -->Line_14 $$ requireSingleAttribute(reader, Attribute.NAME.getLocalName())[ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_89 $$ parseDirectory(reader, CommonAttributes.PAGING_DIRECTORY, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_15 $$ hqServerName = reader.getAttributeValue(0).trim()[ FD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_77 $$ parseDirectory(reader, CommonAttributes.JOURNAL_DIRECTORY, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_47 $$ parseDirectory(reader, CommonAttributes.BINDINGS_DIRECTORY, address, list)[ FD ]
Line_8 $$ elementName = ModelDescriptionConstants.SUBSYSTEM-->Line_32 $$ do [ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_30 $$ EnumSet<Element> seen = EnumSet.noneOf(Element.class)[ CD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_65 $$ processDiscoveryGroups(reader, address, list)[ FD ]
Line_142 $$ if (SIMPLE_ROOT_RESOURCE_ELEMENTS.contains(element)) -->Line_144 $$ if (attributeDefinition instanceof SimpleAttributeDefinition) [ CD ]
Line_23 $$ final ModelNode address = subsystemAddress.clone()-->Line_25 $$ address.protect()[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_53 $$ processBroadcastGroups(reader, address, list)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_34 $$ localName = reader.getLocalName()[ FD ]
Line_143 $$ AttributeDefinition attributeDefinition = element.getDefinition()-->Line_144 $$ if (attributeDefinition instanceof SimpleAttributeDefinition) [ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_29 $$ list.add(operation)[ FD ]
Line_144 $$ if (attributeDefinition instanceof SimpleAttributeDefinition) -->Line_145 $$ handleElementText(reader, element, operation)[ CD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_135 $$ if (namespace != Namespace.MESSAGING_1_0) [ FD ]
Line_3 $$ String hqServerName = null-->Line_20 $$ if (hqServerName == null || hqServerName.length() == 0) [ FD ]
Line_26 $$ final ModelNode operation = new ModelNode()-->Line_29 $$ list.add(operation)[ FD ]
Line_2 $$ protected void processHornetQServer(final XMLExtendedStreamReader reader, final ModelNode subsystemAddress, final List<ModelNode> list, Namespace namespace) throws XMLStreamException -->Line_44 $$ processAddressSettings(reader, address, list)[ FD ]
Line_35 $$ final Element element = Element.forName(reader.getLocalName())-->Line_142 $$ if (SIMPLE_ROOT_RESOURCE_ELEMENTS.contains(element)) [ FD ]
Line_144 $$ if (attributeDefinition instanceof SimpleAttributeDefinition) -->Line_147 $$ handleComplexConfigurationAttribute(reader, element, operation)[ CD ]
Line_142 $$ if (SIMPLE_ROOT_RESOURCE_ELEMENTS.contains(element)) -->Line_150 $$ handleUnknownConfigurationAttribute(reader, element, operation)[ CD ]
