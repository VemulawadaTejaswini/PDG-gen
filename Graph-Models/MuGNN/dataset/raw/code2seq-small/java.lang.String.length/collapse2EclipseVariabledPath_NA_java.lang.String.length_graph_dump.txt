Line_12 $$ final Project project = libraryOrderEntry.getOwnerModule().getProject()-->Line_16 $$ final String ideaCollapsed = PathMacroManager.getInstance(project).collapsePath(filePath)[ FD ]
Line_6 $$ if (jarFile.getFileSystem() instanceof JarFileSystem) -->Line_7 $$ jarFile = JarFileSystem.getInstance().getVirtualFileForJar(jarFile)[ CD ]
Line_2 $$ static String collapse2EclipseVariabledPath(final LibraryOrderEntry libraryOrderEntry, OrderRootType type) -->Line_12 $$ final Project project = libraryOrderEntry.getOwnerModule().getProject()[ FD ]
Line_28 $$ if (jarSeparatorIdx > -1) -->Line_29 $$ filePath = filePath.substring(0, jarSeparatorIdx)[ CD ]
Line_25 $$ for (String url : libraryOrderEntry.getRootUrls(type)) -->Line_26 $$ String filePath = VirtualFileManager.extractPath(url)[ FD ]
Line_14 $$ final String filePath = jarFile.getPath()-->Line_36 $$ final String substr = filePath.substring(path.length())[ FD ]
Line_4 $$ if (virtualFiles.length > 0) -->Line_6 $$ if (jarFile.getFileSystem() instanceof JarFileSystem) [ CD ]
Line_29 $$ filePath = filePath.substring(0, jarSeparatorIdx)-->Line_36 $$ final String substr = filePath.substring(path.length())[ FD ]
Line_2 $$ static String collapse2EclipseVariabledPath(final LibraryOrderEntry libraryOrderEntry, OrderRootType type) -->Line_4 $$ if (virtualFiles.length > 0) [ CD ]
Line_7 $$ jarFile = JarFileSystem.getInstance().getVirtualFileForJar(jarFile)-->Line_9 $$ if (jarFile == null) [ FD ]
Line_35 $$ if (filePath.startsWith(path + "/")) -->Line_36 $$ final String substr = filePath.substring(path.length())[ CD ]
Line_36 $$ final String substr = filePath.substring(path.length())-->Line_37 $$ return name + (substr.startsWith("/") || substr.length() == 0 ? substr : "/" + substr)[ FD ]
Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) -->Line_22 $$ return ideaCollapsed.substring(index).replace("$", "")[ CD ]
Line_16 $$ final String ideaCollapsed = PathMacroManager.getInstance(project).collapsePath(filePath)-->Line_22 $$ return ideaCollapsed.substring(index).replace("$", "")[ FD ]
Line_31 $$ final PathMacros pathMacros = PathMacros.getInstance()-->Line_32 $$ final Set<String> names = pathMacros.getUserMacroNames()[ FD ]
Line_4 $$ if (virtualFiles.length > 0) -->Line_12 $$ final Project project = libraryOrderEntry.getOwnerModule().getProject()[ CD ]
Line_14 $$ final String filePath = jarFile.getPath()-->Line_16 $$ final String ideaCollapsed = PathMacroManager.getInstance(project).collapsePath(filePath)[ FD ]
Line_14 $$ final String filePath = jarFile.getPath()-->Line_27 $$ final int jarSeparatorIdx = filePath.indexOf(JarFileSystem.JAR_SEPARATOR)[ FD ]
Line_35 $$ if (filePath.startsWith(path + "/")) -->Line_37 $$ return name + (substr.startsWith("/") || substr.length() == 0 ? substr : "/" + substr)[ CD ]
Line_4 $$ if (virtualFiles.length > 0) -->Line_9 $$ if (jarFile == null) [ CD ]
Line_7 $$ jarFile = JarFileSystem.getInstance().getVirtualFileForJar(jarFile)-->Line_14 $$ final String filePath = jarFile.getPath()[ FD ]
Line_5 $$ VirtualFile jarFile = virtualFiles[0]-->Line_9 $$ if (jarFile == null) [ FD ]
Line_29 $$ filePath = filePath.substring(0, jarSeparatorIdx)-->Line_35 $$ if (filePath.startsWith(path + "/")) [ FD ]
Line_19 $$ final int index = ideaCollapsed.indexOf('$')-->Line_22 $$ return ideaCollapsed.substring(index).replace("$", "")[ FD ]
Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) -->Line_19 $$ final int index = ideaCollapsed.indexOf('$')[ CD ]
Line_2 $$ static String collapse2EclipseVariabledPath(final LibraryOrderEntry libraryOrderEntry, OrderRootType type) -->Line_3 $$ final VirtualFile[] virtualFiles = libraryOrderEntry.getRootFiles(type)[ FD ]
Line_16 $$ final String ideaCollapsed = PathMacroManager.getInstance(project).collapsePath(filePath)-->Line_19 $$ final int index = ideaCollapsed.indexOf('$')[ FD ]
Line_5 $$ VirtualFile jarFile = virtualFiles[0]-->Line_14 $$ final String filePath = jarFile.getPath()[ FD ]
Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) -->Line_20 $$ if (index < 0)[ CD ]
Line_9 $$ if (jarFile == null) -->Line_10 $$ return null[ CD ]
Line_13 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) [ FD ]
Line_27 $$ final int jarSeparatorIdx = filePath.indexOf(JarFileSystem.JAR_SEPARATOR)-->Line_29 $$ filePath = filePath.substring(0, jarSeparatorIdx)[ FD ]
Line_14 $$ final String filePath = jarFile.getPath()-->Line_35 $$ if (filePath.startsWith(path + "/")) [ FD ]
Line_16 $$ final String ideaCollapsed = PathMacroManager.getInstance(project).collapsePath(filePath)-->Line_17 $$ if (ideaCollapsed.contains(".."))[ FD ]
Line_2 $$ static String collapse2EclipseVariabledPath(final LibraryOrderEntry libraryOrderEntry, OrderRootType type) -->Line_25 $$ for (String url : libraryOrderEntry.getRootUrls(type)) [ FD ]
Line_31 $$ final PathMacros pathMacros = PathMacros.getInstance()-->Line_34 $$ final String path = FileUtil.toSystemIndependentName(pathMacros.getValue(name))[ FD ]
Line_5 $$ VirtualFile jarFile = virtualFiles[0]-->Line_6 $$ if (jarFile.getFileSystem() instanceof JarFileSystem) [ FD ]
Line_20 $$ if (index < 0)-->Line_21 $$ return null[ CD ]
Line_7 $$ jarFile = JarFileSystem.getInstance().getVirtualFileForJar(jarFile)-->Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) [ FD ]
Line_4 $$ if (virtualFiles.length > 0) -->Line_13 $$ final VirtualFile baseDir = project.getBaseDir()[ CD ]
Line_12 $$ final Project project = libraryOrderEntry.getOwnerModule().getProject()-->Line_13 $$ final VirtualFile baseDir = project.getBaseDir()[ FD ]
Line_34 $$ final String path = FileUtil.toSystemIndependentName(pathMacros.getValue(name))-->Line_36 $$ final String substr = filePath.substring(path.length())[ FD ]
Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) -->Line_17 $$ if (ideaCollapsed.contains(".."))[ CD ]
Line_33 $$ for (String name : names) -->Line_34 $$ final String path = FileUtil.toSystemIndependentName(pathMacros.getValue(name))[ FD ]
Line_14 $$ final String filePath = jarFile.getPath()-->Line_29 $$ filePath = filePath.substring(0, jarSeparatorIdx)[ FD ]
Line_4 $$ if (virtualFiles.length > 0) -->Line_5 $$ VirtualFile jarFile = virtualFiles[0][ CD ]
Line_5 $$ VirtualFile jarFile = virtualFiles[0]-->Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) [ FD ]
Line_2 $$ static String collapse2EclipseVariabledPath(final LibraryOrderEntry libraryOrderEntry, OrderRootType type) -->Line_3 $$ final VirtualFile[] virtualFiles = libraryOrderEntry.getRootFiles(type)[ CD ]
Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) -->Line_16 $$ final String ideaCollapsed = PathMacroManager.getInstance(project).collapsePath(filePath)[ CD ]
Line_19 $$ final int index = ideaCollapsed.indexOf('$')-->Line_20 $$ if (index < 0)[ FD ]
Line_5 $$ VirtualFile jarFile = virtualFiles[0]-->Line_7 $$ jarFile = JarFileSystem.getInstance().getVirtualFileForJar(jarFile)[ FD ]
Line_27 $$ final int jarSeparatorIdx = filePath.indexOf(JarFileSystem.JAR_SEPARATOR)-->Line_28 $$ if (jarSeparatorIdx > -1) [ FD ]
Line_2 $$ static String collapse2EclipseVariabledPath(final LibraryOrderEntry libraryOrderEntry, OrderRootType type) -->Line_41 $$ return null[ CD ]
Line_17 $$ if (ideaCollapsed.contains(".."))-->Line_18 $$ return null[ CD ]
Line_4 $$ if (virtualFiles.length > 0) -->Line_14 $$ final String filePath = jarFile.getPath()[ CD ]
Line_4 $$ if (virtualFiles.length > 0) -->Line_15 $$ if (baseDir != null && !VfsUtilCore.isAncestor(baseDir, jarFile, false)) [ CD ]
