Line_2 $$ public String importType(String fqcn) -->Line_34 $$ if (additionalTypePart != null) [ CD ]
Line_14 $$ String pureFqcn = fqcn.replace('$', '.')-->Line_26 $$ simpleNames.put(simpleName, pureFqcn)[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_9 $$ if (fqcn.indexOf('[') >= 0) [ FD ]
Line_3 $$ String result = fqcn-->Line_32 $$ result = result.substring("java.lang.".length())[ FD ]
Line_30 $$ result = unqualify(result)-->Line_35 $$ result = result + additionalTypePart[ FD ]
Line_17 $$ if (simpleNames.containsKey(simpleName)) -->Line_19 $$ if (existingFqcn.equals(pureFqcn)) [ CD ]
Line_34 $$ if (additionalTypePart != null) -->Line_35 $$ result = result + additionalTypePart[ CD ]
Line_16 $$ String simpleName = unqualify(fqcn)-->Line_26 $$ simpleNames.put(simpleName, pureFqcn)[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_4 $$ String additionalTypePart = null[ CD ]
Line_14 $$ String pureFqcn = fqcn.replace('$', '.')-->Line_19 $$ if (existingFqcn.equals(pureFqcn)) [ FD ]
Line_32 $$ result = result.substring("java.lang.".length())-->Line_35 $$ result = result + additionalTypePart[ FD ]
Line_29 $$ if (inSamePackage(fqcn) || (imports.contains(pureFqcn) && canBeSimple)) -->Line_30 $$ result = unqualify(result)[ CD ]
Line_3 $$ String result = fqcn-->Line_12 $$ fqcn = result[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_16 $$ String simpleName = unqualify(fqcn)[ CD ]
Line_2 $$ public String importType(String fqcn) -->Line_11 $$ result = result.substring(0, fqcn.indexOf('['))[ FD ]
Line_17 $$ if (simpleNames.containsKey(simpleName)) -->Line_18 $$ String existingFqcn = simpleNames.get(simpleName)[ CD ]
Line_2 $$ public String importType(String fqcn) -->Line_16 $$ String simpleName = unqualify(fqcn)[ FD ]
Line_15 $$ boolean canBeSimple-->Line_20 $$ canBeSimple = true[ FD ]
Line_20 $$ canBeSimple = true-->Line_22 $$ canBeSimple = false[ FD ]
Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))-->Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_14 $$ String pureFqcn = fqcn.replace('$', '.')[ CD ]
Line_3 $$ String result = fqcn-->Line_11 $$ result = result.substring(0, fqcn.indexOf('['))[ FD ]
Line_11 $$ result = result.substring(0, fqcn.indexOf('['))-->Line_35 $$ result = result + additionalTypePart[ FD ]
Line_4 $$ String additionalTypePart = null-->Line_35 $$ result = result + additionalTypePart[ FD ]
Line_12 $$ fqcn = result-->Line_29 $$ if (inSamePackage(fqcn) || (imports.contains(pureFqcn) && canBeSimple)) [ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_12 $$ fqcn = result[ FD ]
Line_8 $$ fqcn = result-->Line_9 $$ if (fqcn.indexOf('[') >= 0) [ FD ]
Line_6 $$ additionalTypePart = result.substring(fqcn.indexOf('<'))-->Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))[ FD ]
Line_8 $$ fqcn = result-->Line_14 $$ String pureFqcn = fqcn.replace('$', '.')[ FD ]
Line_6 $$ additionalTypePart = result.substring(fqcn.indexOf('<'))-->Line_35 $$ result = result + additionalTypePart[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_38 $$ return result[ CD ]
Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))-->Line_11 $$ result = result.substring(0, fqcn.indexOf('['))[ FD ]
Line_16 $$ String simpleName = unqualify(fqcn)-->Line_18 $$ String existingFqcn = simpleNames.get(simpleName)[ FD ]
Line_31 $$ if (inJavaLang(fqcn)) -->Line_32 $$ result = result.substring("java.lang.".length())[ CD ]
Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))-->Line_8 $$ fqcn = result[ FD ]
Line_14 $$ String pureFqcn = fqcn.replace('$', '.')-->Line_29 $$ if (inSamePackage(fqcn) || (imports.contains(pureFqcn) && canBeSimple)) [ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_14 $$ String pureFqcn = fqcn.replace('$', '.')[ FD ]
Line_17 $$ if (simpleNames.containsKey(simpleName)) -->Line_25 $$ canBeSimple = true[ CD ]
Line_9 $$ if (fqcn.indexOf('[') >= 0) -->Line_11 $$ result = result.substring(0, fqcn.indexOf('['))[ CD ]
Line_4 $$ String additionalTypePart = null-->Line_34 $$ if (additionalTypePart != null) [ FD ]
Line_9 $$ if (fqcn.indexOf('[') >= 0) -->Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))[ CD ]
Line_2 $$ public String importType(String fqcn) -->Line_3 $$ String result = fqcn[ CD ]
Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))-->Line_35 $$ result = result + additionalTypePart[ FD ]
Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))-->Line_37 $$ result = result.replace('$', '.')[ FD ]
Line_17 $$ if (simpleNames.containsKey(simpleName)) -->Line_27 $$ imports.add(pureFqcn)[ CD ]
Line_5 $$ if (fqcn.indexOf('<') >= 0) -->Line_6 $$ additionalTypePart = result.substring(fqcn.indexOf('<'))[ CD ]
Line_4 $$ String additionalTypePart = null-->Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))[ FD ]
Line_8 $$ fqcn = result-->Line_31 $$ if (inJavaLang(fqcn)) [ FD ]
Line_3 $$ String result = fqcn-->Line_35 $$ result = result + additionalTypePart[ FD ]
Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))-->Line_32 $$ result = result.substring("java.lang.".length())[ FD ]
Line_11 $$ result = result.substring(0, fqcn.indexOf('['))-->Line_32 $$ result = result.substring("java.lang.".length())[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_15 $$ boolean canBeSimple[ CD ]
Line_8 $$ fqcn = result-->Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))[ FD ]
Line_5 $$ if (fqcn.indexOf('<') >= 0) -->Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))[ CD ]
Line_11 $$ result = result.substring(0, fqcn.indexOf('['))-->Line_12 $$ fqcn = result[ FD ]
Line_30 $$ result = unqualify(result)-->Line_37 $$ result = result.replace('$', '.')[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_37 $$ result = result.replace('$', '.')[ CD ]
Line_8 $$ fqcn = result-->Line_12 $$ fqcn = result[ FD ]
Line_15 $$ boolean canBeSimple-->Line_25 $$ canBeSimple = true[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_5 $$ if (fqcn.indexOf('<') >= 0) [ FD ]
Line_12 $$ fqcn = result-->Line_31 $$ if (inJavaLang(fqcn)) [ FD ]
Line_20 $$ canBeSimple = true-->Line_25 $$ canBeSimple = true[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_31 $$ if (inJavaLang(fqcn)) [ FD ]
Line_14 $$ String pureFqcn = fqcn.replace('$', '.')-->Line_27 $$ imports.add(pureFqcn)[ FD ]
Line_5 $$ if (fqcn.indexOf('<') >= 0) -->Line_9 $$ if (fqcn.indexOf('[') >= 0) [ CD ]
Line_11 $$ result = result.substring(0, fqcn.indexOf('['))-->Line_30 $$ result = unqualify(result)[ FD ]
Line_12 $$ fqcn = result-->Line_16 $$ String simpleName = unqualify(fqcn)[ FD ]
Line_19 $$ if (existingFqcn.equals(pureFqcn)) -->Line_22 $$ canBeSimple = false[ CD ]
Line_2 $$ public String importType(String fqcn) -->Line_5 $$ if (fqcn.indexOf('<') >= 0) [ CD ]
Line_3 $$ String result = fqcn-->Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))[ FD ]
Line_35 $$ result = result + additionalTypePart-->Line_37 $$ result = result.replace('$', '.')[ FD ]
Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))-->Line_12 $$ fqcn = result[ FD ]
Line_29 $$ if (inSamePackage(fqcn) || (imports.contains(pureFqcn) && canBeSimple)) -->Line_31 $$ if (inJavaLang(fqcn)) [ CD ]
Line_9 $$ if (fqcn.indexOf('[') >= 0) -->Line_12 $$ fqcn = result[ CD ]
Line_19 $$ if (existingFqcn.equals(pureFqcn)) -->Line_20 $$ canBeSimple = true[ CD ]
Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))-->Line_34 $$ if (additionalTypePart != null) [ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_10 $$ additionalTypePart = result.substring(fqcn.indexOf('['))[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_17 $$ if (simpleNames.containsKey(simpleName)) [ CD ]
Line_2 $$ public String importType(String fqcn) -->Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))[ FD ]
Line_3 $$ String result = fqcn-->Line_8 $$ fqcn = result[ FD ]
Line_3 $$ String result = fqcn-->Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))[ FD ]
Line_11 $$ result = result.substring(0, fqcn.indexOf('['))-->Line_37 $$ result = result.replace('$', '.')[ FD ]
Line_8 $$ fqcn = result-->Line_29 $$ if (inSamePackage(fqcn) || (imports.contains(pureFqcn) && canBeSimple)) [ FD ]
Line_3 $$ String result = fqcn-->Line_6 $$ additionalTypePart = result.substring(fqcn.indexOf('<'))[ FD ]
Line_16 $$ String simpleName = unqualify(fqcn)-->Line_17 $$ if (simpleNames.containsKey(simpleName)) [ FD ]
Line_3 $$ String result = fqcn-->Line_30 $$ result = unqualify(result)[ FD ]
Line_3 $$ String result = fqcn-->Line_37 $$ result = result.replace('$', '.')[ FD ]
Line_32 $$ result = result.substring("java.lang.".length())-->Line_37 $$ result = result.replace('$', '.')[ FD ]
Line_17 $$ if (simpleNames.containsKey(simpleName)) -->Line_26 $$ simpleNames.put(simpleName, pureFqcn)[ CD ]
Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))-->Line_30 $$ result = unqualify(result)[ FD ]
Line_8 $$ fqcn = result-->Line_16 $$ String simpleName = unqualify(fqcn)[ FD ]
Line_22 $$ canBeSimple = false-->Line_25 $$ canBeSimple = true[ FD ]
Line_15 $$ boolean canBeSimple-->Line_22 $$ canBeSimple = false[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_29 $$ if (inSamePackage(fqcn) || (imports.contains(pureFqcn) && canBeSimple)) [ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_6 $$ additionalTypePart = result.substring(fqcn.indexOf('<'))[ FD ]
Line_18 $$ String existingFqcn = simpleNames.get(simpleName)-->Line_19 $$ if (existingFqcn.equals(pureFqcn)) [ FD ]
Line_12 $$ fqcn = result-->Line_14 $$ String pureFqcn = fqcn.replace('$', '.')[ FD ]
Line_6 $$ additionalTypePart = result.substring(fqcn.indexOf('<'))-->Line_34 $$ if (additionalTypePart != null) [ FD ]
Line_7 $$ result = result.substring(0, fqcn.indexOf('<'))-->Line_35 $$ result = result + additionalTypePart[ FD ]
Line_4 $$ String additionalTypePart = null-->Line_6 $$ additionalTypePart = result.substring(fqcn.indexOf('<'))[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_8 $$ fqcn = result[ FD ]
Line_5 $$ if (fqcn.indexOf('<') >= 0) -->Line_8 $$ fqcn = result[ CD ]
Line_8 $$ fqcn = result-->Line_11 $$ result = result.substring(0, fqcn.indexOf('['))[ FD ]
Line_30 $$ result = unqualify(result)-->Line_32 $$ result = result.substring("java.lang.".length())[ FD ]
Line_2 $$ public String importType(String fqcn) -->Line_29 $$ if (inSamePackage(fqcn) || (imports.contains(pureFqcn) && canBeSimple)) [ CD ]
