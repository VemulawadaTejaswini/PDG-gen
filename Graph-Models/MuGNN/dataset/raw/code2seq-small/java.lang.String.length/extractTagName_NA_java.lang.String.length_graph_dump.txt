Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_3 $$ final String name = method.getName()[ CD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_7 $$ if (subTagAnnotation != null && !StringUtil.isEmpty(subTagAnnotation.value())) [ CD ]
Line_3 $$ final String name = method.getName()-->Line_10 $$ final String tagName = getNameStrategy(false).convertName(name.substring(prefix.length()))[ FD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_10 $$ final String tagName = getNameStrategy(false).convertName(name.substring(prefix.length()))[ CD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_11 $$ return StringUtil.isEmpty(tagName) ? null : DomImplUtil.createXmlName(tagName, method)[ FD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_4 $$ if (!name.startsWith(prefix))[ CD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_10 $$ final String tagName = getNameStrategy(false).convertName(name.substring(prefix.length()))[ FD ]
Line_6 $$ final SubTagList subTagAnnotation = method.getAnnotation(SubTagList.class)-->Line_7 $$ if (subTagAnnotation != null && !StringUtil.isEmpty(subTagAnnotation.value())) [ FD ]
Line_10 $$ final String tagName = getNameStrategy(false).convertName(name.substring(prefix.length()))-->Line_11 $$ return StringUtil.isEmpty(tagName) ? null : DomImplUtil.createXmlName(tagName, method)[ FD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_8 $$ return DomImplUtil.createXmlName(subTagAnnotation.value(), method)[ FD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_6 $$ final SubTagList subTagAnnotation = method.getAnnotation(SubTagList.class)[ FD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_4 $$ if (!name.startsWith(prefix))[ FD ]
Line_4 $$ if (!name.startsWith(prefix))-->Line_5 $$ return null[ CD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_11 $$ return StringUtil.isEmpty(tagName) ? null : DomImplUtil.createXmlName(tagName, method)[ CD ]
Line_6 $$ final SubTagList subTagAnnotation = method.getAnnotation(SubTagList.class)-->Line_8 $$ return DomImplUtil.createXmlName(subTagAnnotation.value(), method)[ FD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_6 $$ final SubTagList subTagAnnotation = method.getAnnotation(SubTagList.class)[ CD ]
Line_7 $$ if (subTagAnnotation != null && !StringUtil.isEmpty(subTagAnnotation.value())) -->Line_8 $$ return DomImplUtil.createXmlName(subTagAnnotation.value(), method)[ CD ]
Line_2 $$ private XmlName extractTagName(JavaMethod method, @NonNls String prefix) -->Line_3 $$ final String name = method.getName()[ FD ]
Line_3 $$ final String name = method.getName()-->Line_4 $$ if (!name.startsWith(prefix))[ FD ]
