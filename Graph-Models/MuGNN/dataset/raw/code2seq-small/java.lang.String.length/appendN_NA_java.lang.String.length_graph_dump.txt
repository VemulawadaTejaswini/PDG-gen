Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_7 $$ int strLen = val.length()[ CD ]
Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_7 $$ int strLen = val.length()[ FD ]
Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_9 $$ val.getChars(0, strLen, value, this.count)[ FD ]
Line_7 $$ int strLen = val.length()-->Line_9 $$ val.getChars(0, strLen, value, this.count)[ FD ]
Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_3 $$ int min = count + (n * val.length())[ FD ]
Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_8 $$ while (n-- > 0) [ CD ]
Line_4 $$ if (min > value.length) -->Line_5 $$ resizeForMinimum(min)[ CD ]
Line_3 $$ int min = count + (n * val.length())-->Line_5 $$ resizeForMinimum(min)[ FD ]
Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_8 $$ while (n-- > 0) [ FD ]
Line_7 $$ int strLen = val.length()-->Line_10 $$ this.count += strLen[ FD ]
Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_4 $$ if (min > value.length) [ CD ]
Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_3 $$ int min = count + (n * val.length())[ CD ]
Line_3 $$ int min = count + (n * val.length())-->Line_4 $$ if (min > value.length) [ FD ]
Line_2 $$ public FastStringBuffer appendN(String val, int n) -->Line_12 $$ return this[ CD ]
Line_8 $$ while (n-- > 0) -->Line_10 $$ this.count += strLen[ CD ]
Line_8 $$ while (n-- > 0) -->Line_9 $$ val.getChars(0, strLen, value, this.count)[ CD ]
