Line_21 $$ final String relativeToModulePathWithJarSuffix = EPathCommonUtil.getRelativeToModulePath(relativeToPlatform)-->Line_33 $$ if (relativeToModulePath.length() < relativeToModulePathWithJarSuffix.length()) [ FD ]
Line_40 $$ final String localFile = jarJavadocPath.substring(FILE_PROTOCOL.length())-->Line_41 $$ if (isJarFileExist(localFile)) [ FD ]
Line_26 $$ url = expandEclipseRelative2OtherModule(otherModule, relativeToModulePath)-->Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)[ FD ]
Line_12 $$ final String jarJavadocPath = javadocPath.substring(JAR_PREFIX.length())-->Line_13 $$ if (jarJavadocPath.startsWith(PLATFORM_PROTOCOL)) [ FD ]
Line_9 $$ if (Comparing.strEqual(protocol, HttpFileSystem.getInstance().getProtocol())) -->Line_10 $$ return javadocPath[ CD ]
Line_26 $$ url = expandEclipseRelative2OtherModule(otherModule, relativeToModulePath)-->Line_34 $$ url += relativeToModulePathWithJarSuffix.substring(relativeToModulePath.length())[ FD ]
Line_24 $$ String url = null-->Line_34 $$ url += relativeToModulePathWithJarSuffix.substring(relativeToModulePath.length())[ FD ]
Line_14 $$ final String relativeToPlatform = jarJavadocPath.substring(PLATFORM_PROTOCOL.length() + "resource".length())-->Line_20 $$ final String moduleName = EPathCommonUtil.getRelativeModuleName(relativeToPlatform)[ FD ]
Line_33 $$ if (relativeToModulePath.length() < relativeToModulePathWithJarSuffix.length()) -->Line_34 $$ url += relativeToModulePathWithJarSuffix.substring(relativeToModulePath.length())[ CD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_11 $$ if (javadocPath.startsWith(JAR_PREFIX)) [ FD ]
Line_17 $$ if (isJarFileExist(currentModulePath)) -->Line_18 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, currentModulePath)[ CD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_3 $$ if (javadocPath.startsWith(FILE_PROTOCOL)) [ CD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_15 $$ final VirtualFile currentRoot = getContentRoot(model)[ FD ]
Line_8 $$ final String protocol = VirtualFileManager.extractProtocol(javadocPath)-->Line_9 $$ if (Comparing.strEqual(protocol, HttpFileSystem.getInstance().getProtocol())) [ FD ]
Line_13 $$ if (jarJavadocPath.startsWith(PLATFORM_PROTOCOL)) -->Line_17 $$ if (isJarFileExist(currentModulePath)) [ CD ]
Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)-->Line_36 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, VfsUtil.urlToPath(url))[ FD ]
Line_3 $$ if (javadocPath.startsWith(FILE_PROTOCOL)) -->Line_9 $$ if (Comparing.strEqual(protocol, HttpFileSystem.getInstance().getProtocol())) [ CD ]
Line_27 $$ if (currentRoots != null) -->Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)[ CD ]
Line_17 $$ if (isJarFileExist(currentModulePath)) -->Line_22 $$ final String relativeToModulePath = stripPathInsideJar(relativeToModulePathWithJarSuffix)[ CD ]
Line_20 $$ final String moduleName = EPathCommonUtil.getRelativeModuleName(relativeToPlatform)-->Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)[ FD ]
Line_16 $$ final String currentModulePath = (currentRoot != null ? currentRoot.getParent().getPath() : model.getModule().getProject().getBaseDir().getPath()) + relativeToPlatform-->Line_17 $$ if (isJarFileExist(currentModulePath)) [ FD ]
Line_22 $$ final String relativeToModulePath = stripPathInsideJar(relativeToModulePathWithJarSuffix)-->Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)[ FD ]
Line_39 $$ if (jarJavadocPath.startsWith(FILE_PROTOCOL)) -->Line_40 $$ final String localFile = jarJavadocPath.substring(FILE_PROTOCOL.length())[ CD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_5 $$ return VfsUtil.pathToUrl(javadocPath.substring(FILE_PROTOCOL.length()))[ FD ]
Line_17 $$ if (isJarFileExist(currentModulePath)) -->Line_23 $$ final Module otherModule = ModuleManager.getInstance(model.getModule().getProject()).findModuleByName(moduleName)[ CD ]
Line_4 $$ if (new File(javadocPath.substring(FILE_PROTOCOL.length())).exists()) -->Line_5 $$ return VfsUtil.pathToUrl(javadocPath.substring(FILE_PROTOCOL.length()))[ CD ]
Line_16 $$ final String currentModulePath = (currentRoot != null ? currentRoot.getParent().getPath() : model.getModule().getProject().getBaseDir().getPath()) + relativeToPlatform-->Line_18 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, currentModulePath)[ FD ]
Line_24 $$ String url = null-->Line_30 $$ if (url != null) [ FD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_47 $$ return javadocPath[ CD ]
Line_22 $$ final String relativeToModulePath = stripPathInsideJar(relativeToModulePathWithJarSuffix)-->Line_26 $$ url = expandEclipseRelative2OtherModule(otherModule, relativeToModulePath)[ FD ]
Line_17 $$ if (isJarFileExist(currentModulePath)) -->Line_25 $$ if (otherModule != null && otherModule != model.getModule()) [ CD ]
Line_15 $$ final VirtualFile currentRoot = getContentRoot(model)-->Line_16 $$ final String currentModulePath = (currentRoot != null ? currentRoot.getParent().getPath() : model.getModule().getProject().getBaseDir().getPath()) + relativeToPlatform[ FD ]
Line_23 $$ final Module otherModule = ModuleManager.getInstance(model.getModule().getProject()).findModuleByName(moduleName)-->Line_26 $$ url = expandEclipseRelative2OtherModule(otherModule, relativeToModulePath)[ FD ]
Line_41 $$ if (isJarFileExist(localFile)) -->Line_42 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, localFile)[ CD ]
Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)-->Line_34 $$ url += relativeToModulePathWithJarSuffix.substring(relativeToModulePath.length())[ FD ]
Line_30 $$ if (url != null) -->Line_36 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, VfsUtil.urlToPath(url))[ CD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_4 $$ if (new File(javadocPath.substring(FILE_PROTOCOL.length())).exists()) [ FD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_12 $$ final String jarJavadocPath = javadocPath.substring(JAR_PREFIX.length())[ FD ]
Line_13 $$ if (jarJavadocPath.startsWith(PLATFORM_PROTOCOL)) -->Line_14 $$ final String relativeToPlatform = jarJavadocPath.substring(PLATFORM_PROTOCOL.length() + "resource".length())[ CD ]
Line_25 $$ if (otherModule != null && otherModule != model.getModule()) -->Line_26 $$ url = expandEclipseRelative2OtherModule(otherModule, relativeToModulePath)[ CD ]
Line_17 $$ if (isJarFileExist(currentModulePath)) -->Line_30 $$ if (url != null) [ CD ]
Line_11 $$ if (javadocPath.startsWith(JAR_PREFIX)) -->Line_13 $$ if (jarJavadocPath.startsWith(PLATFORM_PROTOCOL)) [ CD ]
Line_9 $$ if (Comparing.strEqual(protocol, HttpFileSystem.getInstance().getProtocol())) -->Line_11 $$ if (javadocPath.startsWith(JAR_PREFIX)) [ CD ]
Line_3 $$ if (javadocPath.startsWith(FILE_PROTOCOL)) -->Line_8 $$ final String protocol = VirtualFileManager.extractProtocol(javadocPath)[ CD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_25 $$ if (otherModule != null && otherModule != model.getModule()) [ FD ]
Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)-->Line_30 $$ if (url != null) [ FD ]
Line_13 $$ if (jarJavadocPath.startsWith(PLATFORM_PROTOCOL)) -->Line_39 $$ if (jarJavadocPath.startsWith(FILE_PROTOCOL)) [ CD ]
Line_17 $$ if (isJarFileExist(currentModulePath)) -->Line_24 $$ String url = null[ CD ]
Line_22 $$ final String relativeToModulePath = stripPathInsideJar(relativeToModulePathWithJarSuffix)-->Line_33 $$ if (relativeToModulePath.length() < relativeToModulePathWithJarSuffix.length()) [ FD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_27 $$ if (currentRoots != null) [ FD ]
Line_22 $$ final String relativeToModulePath = stripPathInsideJar(relativeToModulePathWithJarSuffix)-->Line_34 $$ url += relativeToModulePathWithJarSuffix.substring(relativeToModulePath.length())[ FD ]
Line_25 $$ if (otherModule != null && otherModule != model.getModule()) -->Line_27 $$ if (currentRoots != null) [ CD ]
Line_17 $$ if (isJarFileExist(currentModulePath)) -->Line_20 $$ final String moduleName = EPathCommonUtil.getRelativeModuleName(relativeToPlatform)[ CD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_23 $$ final Module otherModule = ModuleManager.getInstance(model.getModule().getProject()).findModuleByName(moduleName)[ FD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_8 $$ final String protocol = VirtualFileManager.extractProtocol(javadocPath)[ FD ]
Line_30 $$ if (url != null) -->Line_33 $$ if (relativeToModulePath.length() < relativeToModulePathWithJarSuffix.length()) [ CD ]
Line_11 $$ if (javadocPath.startsWith(JAR_PREFIX)) -->Line_12 $$ final String jarJavadocPath = javadocPath.substring(JAR_PREFIX.length())[ CD ]
Line_26 $$ url = expandEclipseRelative2OtherModule(otherModule, relativeToModulePath)-->Line_30 $$ if (url != null) [ FD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)[ FD ]
Line_17 $$ if (isJarFileExist(currentModulePath)) -->Line_21 $$ final String relativeToModulePathWithJarSuffix = EPathCommonUtil.getRelativeToModulePath(relativeToPlatform)[ CD ]
Line_24 $$ String url = null-->Line_28 $$ url = EPathCommonUtil.expandEclipseRelative2ContentRoots(currentRoots, moduleName, relativeToModulePath)[ FD ]
Line_12 $$ final String jarJavadocPath = javadocPath.substring(JAR_PREFIX.length())-->Line_39 $$ if (jarJavadocPath.startsWith(FILE_PROTOCOL)) [ FD ]
Line_21 $$ final String relativeToModulePathWithJarSuffix = EPathCommonUtil.getRelativeToModulePath(relativeToPlatform)-->Line_34 $$ url += relativeToModulePathWithJarSuffix.substring(relativeToModulePath.length())[ FD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_16 $$ final String currentModulePath = (currentRoot != null ? currentRoot.getParent().getPath() : model.getModule().getProject().getBaseDir().getPath()) + relativeToPlatform[ FD ]
Line_34 $$ url += relativeToModulePathWithJarSuffix.substring(relativeToModulePath.length())-->Line_36 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, VfsUtil.urlToPath(url))[ FD ]
Line_24 $$ String url = null-->Line_36 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, VfsUtil.urlToPath(url))[ FD ]
Line_13 $$ if (jarJavadocPath.startsWith(PLATFORM_PROTOCOL)) -->Line_16 $$ final String currentModulePath = (currentRoot != null ? currentRoot.getParent().getPath() : model.getModule().getProject().getBaseDir().getPath()) + relativeToPlatform[ CD ]
Line_39 $$ if (jarJavadocPath.startsWith(FILE_PROTOCOL)) -->Line_41 $$ if (isJarFileExist(localFile)) [ CD ]
Line_2 $$ private static String toIdeaJavadocUrl(ModuleRootModel model, String javadocPath, List<String> currentRoots) -->Line_3 $$ if (javadocPath.startsWith(FILE_PROTOCOL)) [ FD ]
Line_24 $$ String url = null-->Line_26 $$ url = expandEclipseRelative2OtherModule(otherModule, relativeToModulePath)[ FD ]
Line_26 $$ url = expandEclipseRelative2OtherModule(otherModule, relativeToModulePath)-->Line_36 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, VfsUtil.urlToPath(url))[ FD ]
Line_3 $$ if (javadocPath.startsWith(FILE_PROTOCOL)) -->Line_4 $$ if (new File(javadocPath.substring(FILE_PROTOCOL.length())).exists()) [ CD ]
Line_12 $$ final String jarJavadocPath = javadocPath.substring(JAR_PREFIX.length())-->Line_14 $$ final String relativeToPlatform = jarJavadocPath.substring(PLATFORM_PROTOCOL.length() + "resource".length())[ FD ]
Line_12 $$ final String jarJavadocPath = javadocPath.substring(JAR_PREFIX.length())-->Line_40 $$ final String localFile = jarJavadocPath.substring(FILE_PROTOCOL.length())[ FD ]
Line_40 $$ final String localFile = jarJavadocPath.substring(FILE_PROTOCOL.length())-->Line_42 $$ return VirtualFileManager.constructUrl(JarFileSystem.PROTOCOL, localFile)[ FD ]
Line_13 $$ if (jarJavadocPath.startsWith(PLATFORM_PROTOCOL)) -->Line_15 $$ final VirtualFile currentRoot = getContentRoot(model)[ CD ]
Line_21 $$ final String relativeToModulePathWithJarSuffix = EPathCommonUtil.getRelativeToModulePath(relativeToPlatform)-->Line_22 $$ final String relativeToModulePath = stripPathInsideJar(relativeToModulePathWithJarSuffix)[ FD ]
Line_20 $$ final String moduleName = EPathCommonUtil.getRelativeModuleName(relativeToPlatform)-->Line_23 $$ final Module otherModule = ModuleManager.getInstance(model.getModule().getProject()).findModuleByName(moduleName)[ FD ]
Line_14 $$ final String relativeToPlatform = jarJavadocPath.substring(PLATFORM_PROTOCOL.length() + "resource".length())-->Line_21 $$ final String relativeToModulePathWithJarSuffix = EPathCommonUtil.getRelativeToModulePath(relativeToPlatform)[ FD ]
