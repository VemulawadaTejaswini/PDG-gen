Line_2 $$ public static void compareLines(String text, String[] lines) throws IOException -->Line_8 $$ Assert.assertEquals(lastLine, new String(buffer))[ CD ]
Line_2 $$ public static void compareLines(String text, String[] lines) throws IOException -->Line_9 $$ Assert.assertEquals(-1, reader.read())[ CD ]
Line_2 $$ public static void compareLines(String text, String[] lines) throws IOException -->Line_4 $$ for (int i = 0; i < lines.length - 1; i++) Assert.assertEquals(lines[i], reader.readLine())[ CD ]
Line_2 $$ public static void compareLines(String text, String[] lines) throws IOException -->Line_3 $$ BufferedReader reader = new BufferedReader(new StringReader(text))[ CD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new StringReader(text))-->Line_7 $$ reader.read(buffer, 0, buffer.length)[ FD ]
Line_2 $$ public static void compareLines(String text, String[] lines) throws IOException -->Line_6 $$ char[] buffer = new char[lastLine.length()][ CD ]
Line_2 $$ public static void compareLines(String text, String[] lines) throws IOException -->Line_5 $$ String lastLine = lines[lines.length - 1][ CD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new StringReader(text))-->Line_9 $$ Assert.assertEquals(-1, reader.read())[ FD ]
Line_6 $$ char[] buffer = new char[lastLine.length()]-->Line_7 $$ reader.read(buffer, 0, buffer.length)[ FD ]
Line_5 $$ String lastLine = lines[lines.length - 1]-->Line_6 $$ char[] buffer = new char[lastLine.length()][ FD ]
Line_2 $$ public static void compareLines(String text, String[] lines) throws IOException -->Line_7 $$ reader.read(buffer, 0, buffer.length)[ CD ]
Line_3 $$ BufferedReader reader = new BufferedReader(new StringReader(text))-->Line_4 $$ Assert.assertEquals(lines[i], reader.readLine())[ FD ]
Line_5 $$ String lastLine = lines[lines.length - 1]-->Line_8 $$ Assert.assertEquals(lastLine, new String(buffer))[ FD ]
