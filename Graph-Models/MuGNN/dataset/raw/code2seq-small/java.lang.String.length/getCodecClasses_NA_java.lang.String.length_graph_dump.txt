Line_11 $$ StringTokenizer codecSplit = new StringTokenizer(codecsString, ",")-->Line_12 $$ while (codecSplit.hasMoreElements()) [ FD ]
Line_12 $$ while (codecSplit.hasMoreElements()) -->Line_14 $$ if (codecSubstring.length() != 0) [ CD ]
Line_16 $$ Class<?> cls = conf.getClassByName(codecSubstring)-->Line_17 $$ if (!CompressionCodec.class.isAssignableFrom(cls)) [ FD ]
Line_2 $$ public static List<Class<? extends CompressionCodec>> getCodecClasses(Configuration conf) -->Line_27 $$ return result[ CD ]
Line_10 $$ if (codecsString != null) -->Line_12 $$ while (codecSplit.hasMoreElements()) [ CD ]
Line_2 $$ public static List<Class<? extends CompressionCodec>> getCodecClasses(Configuration conf) -->Line_10 $$ if (codecsString != null) [ CD ]
Line_9 $$ String codecsString = conf.get("io.compression.codecs")-->Line_10 $$ if (codecsString != null) [ FD ]
Line_12 $$ while (codecSplit.hasMoreElements()) -->Line_13 $$ String codecSubstring = codecSplit.nextToken().trim()[ CD ]
Line_11 $$ StringTokenizer codecSplit = new StringTokenizer(codecsString, ",")-->Line_13 $$ String codecSubstring = codecSplit.nextToken().trim()[ FD ]
Line_5 $$ for (CompressionCodec codec : CODEC_PROVIDERS) -->Line_6 $$ result.add(codec.getClass())[ FD ]
Line_10 $$ if (codecsString != null) -->Line_11 $$ StringTokenizer codecSplit = new StringTokenizer(codecsString, ",")[ CD ]
Line_3 $$ List<Class<? extends CompressionCodec>> result = new ArrayList<Class<? extends CompressionCodec>>()-->Line_20 $$ result.add(cls.asSubclass(CompressionCodec.class))[ FD ]
Line_3 $$ List<Class<? extends CompressionCodec>> result = new ArrayList<Class<? extends CompressionCodec>>()-->Line_6 $$ result.add(codec.getClass())[ FD ]
Line_2 $$ public static List<Class<? extends CompressionCodec>> getCodecClasses(Configuration conf) -->Line_9 $$ String codecsString = conf.get("io.compression.codecs")[ CD ]
Line_2 $$ public static List<Class<? extends CompressionCodec>> getCodecClasses(Configuration conf) -->Line_3 $$ List<Class<? extends CompressionCodec>> result = new ArrayList<Class<? extends CompressionCodec>>()[ CD ]
Line_13 $$ String codecSubstring = codecSplit.nextToken().trim()-->Line_16 $$ Class<?> cls = conf.getClassByName(codecSubstring)[ FD ]
Line_2 $$ public static List<Class<? extends CompressionCodec>> getCodecClasses(Configuration conf) -->Line_16 $$ Class<?> cls = conf.getClassByName(codecSubstring)[ FD ]
Line_16 $$ Class<?> cls = conf.getClassByName(codecSubstring)-->Line_20 $$ result.add(cls.asSubclass(CompressionCodec.class))[ FD ]
Line_2 $$ public static List<Class<? extends CompressionCodec>> getCodecClasses(Configuration conf) -->Line_9 $$ String codecsString = conf.get("io.compression.codecs")[ FD ]
Line_13 $$ String codecSubstring = codecSplit.nextToken().trim()-->Line_14 $$ if (codecSubstring.length() != 0) [ FD ]
