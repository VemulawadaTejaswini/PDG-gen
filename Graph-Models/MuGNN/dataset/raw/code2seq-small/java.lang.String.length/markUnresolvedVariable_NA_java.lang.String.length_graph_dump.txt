Line_11 $$ for (IntentionAction fix : fixes) -->Line_12 $$ ann.registerFix(fix)[ FD ]
Line_2 $$ private static void markUnresolvedVariable(XPathVariableReference reference, AnnotationHolder holder) -->Line_5 $$ final TextRange range = reference.getTextRange().shiftRight(1).grown(-1)[ FD ]
Line_5 $$ final TextRange range = reference.getTextRange().shiftRight(1).grown(-1)-->Line_6 $$ final Annotation ann = holder.createErrorAnnotation(range, "Unresolved variable '" + referencedName + "'")[ FD ]
Line_2 $$ private static void markUnresolvedVariable(XPathVariableReference reference, AnnotationHolder holder) -->Line_8 $$ final VariableContext variableContext = ContextProvider.getContextProvider(reference).getVariableContext()[ FD ]
Line_3 $$ final String referencedName = reference.getReferencedName()-->Line_4 $$ if (referencedName.length() > 0) [ FD ]
Line_4 $$ if (referencedName.length() > 0) -->Line_7 $$ ann.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL)[ CD ]
Line_2 $$ private static void markUnresolvedVariable(XPathVariableReference reference, AnnotationHolder holder) -->Line_6 $$ final Annotation ann = holder.createErrorAnnotation(range, "Unresolved variable '" + referencedName + "'")[ FD ]
Line_8 $$ final VariableContext variableContext = ContextProvider.getContextProvider(reference).getVariableContext()-->Line_9 $$ if (variableContext != null) [ FD ]
Line_9 $$ if (variableContext != null) -->Line_10 $$ final IntentionAction[] fixes = variableContext.getUnresolvedVariableFixes(reference)[ CD ]
Line_8 $$ final VariableContext variableContext = ContextProvider.getContextProvider(reference).getVariableContext()-->Line_10 $$ final IntentionAction[] fixes = variableContext.getUnresolvedVariableFixes(reference)[ FD ]
Line_2 $$ private static void markUnresolvedVariable(XPathVariableReference reference, AnnotationHolder holder) -->Line_3 $$ final String referencedName = reference.getReferencedName()[ FD ]
Line_4 $$ if (referencedName.length() > 0) -->Line_9 $$ if (variableContext != null) [ CD ]
Line_2 $$ private static void markUnresolvedVariable(XPathVariableReference reference, AnnotationHolder holder) -->Line_10 $$ final IntentionAction[] fixes = variableContext.getUnresolvedVariableFixes(reference)[ FD ]
Line_2 $$ private static void markUnresolvedVariable(XPathVariableReference reference, AnnotationHolder holder) -->Line_4 $$ if (referencedName.length() > 0) [ CD ]
Line_4 $$ if (referencedName.length() > 0) -->Line_6 $$ final Annotation ann = holder.createErrorAnnotation(range, "Unresolved variable '" + referencedName + "'")[ CD ]
Line_6 $$ final Annotation ann = holder.createErrorAnnotation(range, "Unresolved variable '" + referencedName + "'")-->Line_7 $$ ann.setHighlightType(ProblemHighlightType.LIKE_UNKNOWN_SYMBOL)[ FD ]
Line_2 $$ private static void markUnresolvedVariable(XPathVariableReference reference, AnnotationHolder holder) -->Line_3 $$ final String referencedName = reference.getReferencedName()[ CD ]
Line_4 $$ if (referencedName.length() > 0) -->Line_8 $$ final VariableContext variableContext = ContextProvider.getContextProvider(reference).getVariableContext()[ CD ]
Line_6 $$ final Annotation ann = holder.createErrorAnnotation(range, "Unresolved variable '" + referencedName + "'")-->Line_12 $$ ann.registerFix(fix)[ FD ]
Line_4 $$ if (referencedName.length() > 0) -->Line_5 $$ final TextRange range = reference.getTextRange().shiftRight(1).grown(-1)[ CD ]
