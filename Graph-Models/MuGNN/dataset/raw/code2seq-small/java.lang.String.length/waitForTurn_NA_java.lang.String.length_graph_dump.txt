Line_2 $$ protected static void waitForTurn(File file, int hostNameCount) throws Exception -->Line_3 $$ while (true) [ CD ]
Line_3 $$ while (true) -->Line_4 $$ if (!file.exists()) [ CD ]
Line_2 $$ protected static void waitForTurn(File file, int hostNameCount) throws Exception -->Line_4 $$ if (!file.exists()) [ FD ]
Line_2 $$ protected static void waitForTurn(File file, int hostNameCount) throws Exception -->Line_8 $$ long age = System.currentTimeMillis() - file.lastModified()[ FD ]
Line_2 $$ protected static void waitForTurn(File file, int hostNameCount) throws Exception -->Line_9 $$ String content = JenkinsResultsParserUtil.read(file)[ FD ]
Line_3 $$ while (true) -->Line_8 $$ long age = System.currentTimeMillis() - file.lastModified()[ CD ]
Line_2 $$ protected static void waitForTurn(File file, int hostNameCount) throws Exception -->Line_5 $$ JenkinsResultsParserUtil.write(file, "")[ FD ]
Line_10 $$ if ((age < _MAX_AGE) && (content.length() > 0)) -->Line_11 $$ Thread.sleep(1000)[ CD ]
Line_3 $$ while (true) -->Line_14 $$ return[ CD ]
Line_4 $$ if (!file.exists()) -->Line_5 $$ JenkinsResultsParserUtil.write(file, "")[ CD ]
Line_4 $$ if (!file.exists()) -->Line_6 $$ return[ CD ]
Line_9 $$ String content = JenkinsResultsParserUtil.read(file)-->Line_10 $$ if ((age < _MAX_AGE) && (content.length() > 0)) [ FD ]
Line_3 $$ while (true) -->Line_9 $$ String content = JenkinsResultsParserUtil.read(file)[ CD ]
Line_3 $$ while (true) -->Line_10 $$ if ((age < _MAX_AGE) && (content.length() > 0)) [ CD ]
