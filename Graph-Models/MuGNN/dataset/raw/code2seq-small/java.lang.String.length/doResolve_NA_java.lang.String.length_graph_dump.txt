Line_9 $$ unprefixed = myText.substring("project.".length())-->Line_13 $$ while (unprefixed.startsWith("parent.")) [ FD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_21 $$ if (mavenProject == null)[ FD ]
Line_104 $$ if (!hasPrefix) -->Line_105 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())[ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_18 $$ if (parentId == null)[ CD ]
Line_23 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_13 $$ while (unprefixed.startsWith("parent.")) [ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_98 $$ property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, textWithEnv)[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_101 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, textWithEnv)[ CD ]
Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)-->Line_105 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())[ FD ]
Line_6 $$ unprefixed = myText.substring("pom.".length())-->Line_13 $$ while (unprefixed.startsWith("parent.")) [ FD ]
Line_4 $$ String unprefixed = myText-->Line_107 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_23 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_25 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == myMavenProject && unprefixed.equals("baseUri"))) [ FD ]
Line_50 $$ if (result != null)-->Line_51 $$ return result[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_88 $$ MavenPropertiesVirtualFileSystem mavenPropertiesVirtualFileSystem = MavenPropertiesVirtualFileSystem.getInstance()[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_92 $$ if (myText.startsWith("env.")) [ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_12 $$ MavenProject mavenProject = myMavenProject[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_99 $$ if (property != null)[ CD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_91 $$ return property.getPsiElement()[ FD ]
Line_6 $$ unprefixed = myText.substring("pom.".length())-->Line_23 $$ unprefixed = unprefixed.substring("parent.".length())[ FD ]
Line_67 $$ if (!notFound) -->Line_68 $$ return myElement[ CD ]
Line_7 $$ hasPrefix = true-->Line_10 $$ hasPrefix = true[ FD ]
Line_84 $$ if (element != null) -->Line_85 $$ return element[ CD ]
Line_6 $$ unprefixed = myText.substring("pom.".length())-->Line_25 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == myMavenProject && unprefixed.equals("baseUri"))) [ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_53 $$ MavenDomConfiguration pluginCfg = DomUtil.findDomElement(myElement, MavenDomConfiguration.class)[ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_14 $$ if (unprefixed.equals("parent.groupId") || unprefixed.equals("parent.artifactId") || unprefixed.equals("parent.version") || unprefixed.equals("parent.relativePath")) [ CD ]
Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)-->Line_32 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())[ FD ]
Line_3 $$ boolean hasPrefix = false-->Line_7 $$ hasPrefix = true[ FD ]
Line_5 $$ if (myText.startsWith("pom.")) -->Line_8 $$ if (myText.startsWith("project.")) [ CD ]
Line_8 $$ if (myText.startsWith("project.")) -->Line_10 $$ hasPrefix = true[ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)[ CD ]
Line_4 $$ String unprefixed = myText-->Line_23 $$ unprefixed = unprefixed.substring("parent.".length())[ FD ]
Line_25 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == myMavenProject && unprefixed.equals("baseUri"))) -->Line_26 $$ return getBaseDir(mavenProject)[ CD ]
Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)-->Line_26 $$ return getBaseDir(mavenProject)[ FD ]
Line_34 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())-->Line_35 $$ if (res != null) [ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_48 $$ if (profile != null) [ CD ]
Line_5 $$ if (myText.startsWith("pom.")) -->Line_6 $$ unprefixed = myText.substring("pom.".length())[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_5 $$ if (myText.startsWith("pom.")) [ CD ]
Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)-->Line_17 $$ MavenId parentId = mavenProject.getParentId()[ FD ]
Line_6 $$ unprefixed = myText.substring("pom.".length())-->Line_9 $$ unprefixed = myText.substring("project.".length())[ FD ]
Line_40 $$ MavenRunnerSettings runnerSettings = MavenRunner.getInstance(myProject).getSettings()-->Line_41 $$ if (runnerSettings.getMavenProperties().containsKey(myText) || runnerSettings.getVmOptions().contains("-D" + myText + '=')) [ FD ]
Line_47 $$ MavenDomProfile profile = DomUtil.findDomElement(myElement, MavenDomProfile.class)-->Line_48 $$ if (profile != null) [ FD ]
Line_53 $$ MavenDomConfiguration pluginCfg = DomUtil.findDomElement(myElement, MavenDomConfiguration.class)-->Line_55 $$ boolean notFound = MavenPluginDescriptor.processDescriptors(new Processor<MavenPluginDescriptor>() [ FD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_102 $$ if (property != null)[ FD ]
Line_9 $$ unprefixed = myText.substring("project.".length())-->Line_23 $$ unprefixed = unprefixed.substring("parent.".length())[ FD ]
Line_76 $$ if ("java.home".equals(myText)) -->Line_78 $$ if (element != null) [ CD ]
Line_73 $$ if (result != null)-->Line_74 $$ return result[ CD ]
Line_92 $$ if (myText.startsWith("env.")) -->Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))[ CD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_99 $$ if (property != null)[ FD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)[ FD ]
Line_33 $$ if (domProjectModel != null) -->Line_35 $$ if (res != null) [ CD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_77 $$ PsiElement element = resolveToCustomSystemProperty("java.home", MavenUtil.getModuleJreHome(myProjectsManager, mavenProject))[ FD ]
Line_98 $$ property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, textWithEnv)-->Line_99 $$ if (property != null)[ FD ]
Line_17 $$ MavenId parentId = mavenProject.getParentId()-->Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)[ FD ]
Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)-->Line_83 $$ PsiElement element = resolveToCustomSystemProperty("java.version", MavenUtil.getModuleJavaVersion(myProjectsManager, mavenProject))[ FD ]
Line_4 $$ String unprefixed = myText-->Line_13 $$ while (unprefixed.startsWith("parent.")) [ FD ]
Line_82 $$ if ("java.version".equals(myText)) -->Line_83 $$ PsiElement element = resolveToCustomSystemProperty("java.version", MavenUtil.getModuleJavaVersion(myProjectsManager, mavenProject))[ CD ]
Line_23 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_107 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_98 $$ property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, textWithEnv)-->Line_102 $$ if (property != null)[ FD ]
Line_55 $$ boolean notFound = MavenPluginDescriptor.processDescriptors(new Processor<MavenPluginDescriptor>() -->Line_67 $$ if (!notFound) [ FD ]
Line_10 $$ hasPrefix = true-->Line_104 $$ if (!hasPrefix) [ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_28 $$ if (myText.equals(TIMESTAMP_PROP)) [ CD ]
Line_21 $$ if (mavenProject == null)-->Line_22 $$ return null[ CD ]
Line_48 $$ if (profile != null) -->Line_50 $$ if (result != null)[ CD ]
Line_71 $$ if (myProjectDom != null) -->Line_72 $$ PsiElement result = MavenDomProjectProcessorUtils.searchProperty(myText, myProjectDom, myProject)[ CD ]
Line_55 $$ boolean notFound = MavenPluginDescriptor.processDescriptors(new Processor<MavenPluginDescriptor>() -->Line_57 $$ if (descriptor.properties != null) [ CD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_101 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, textWithEnv)[ FD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_90 $$ if (property != null)[ FD ]
Line_48 $$ if (profile != null) -->Line_49 $$ PsiElement result = MavenDomProjectProcessorUtils.findProperty(profile.getProperties(), myText)[ CD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_98 $$ property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, textWithEnv)[ FD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_113 $$ if (mavenProject.getProperties().containsKey(myText)) [ FD ]
Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)-->Line_21 $$ if (mavenProject == null)[ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_104 $$ if (!hasPrefix) [ CD ]
Line_4 $$ String unprefixed = myText-->Line_9 $$ unprefixed = myText.substring("project.".length())[ FD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))[ FD ]
Line_49 $$ PsiElement result = MavenDomProjectProcessorUtils.findProperty(profile.getProperties(), myText)-->Line_73 $$ if (result != null)[ FD ]
Line_55 $$ boolean notFound = MavenPluginDescriptor.processDescriptors(new Processor<MavenPluginDescriptor>() -->Line_64 $$ return true[ CD ]
Line_59 $$ if (property.insideConfigurationOnly && property.name.equals(myText)) -->Line_60 $$ return false[ CD ]
Line_102 $$ if (property != null)-->Line_103 $$ return property.getPsiElement()[ CD ]
Line_9 $$ unprefixed = myText.substring("project.".length())-->Line_34 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_4 $$ String unprefixed = myText-->Line_25 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == myMavenProject && unprefixed.equals("baseUri"))) [ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_113 $$ if (mavenProject.getProperties().containsKey(myText)) [ CD ]
Line_116 $$ if (myText.startsWith("settings.")) -->Line_117 $$ return resolveSettingsModelProperty()[ CD ]
Line_3 $$ boolean hasPrefix = false-->Line_10 $$ hasPrefix = true[ FD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_17 $$ MavenId parentId = mavenProject.getParentId()[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_82 $$ if ("java.version".equals(myText)) [ CD ]
Line_32 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())-->Line_34 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_25 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == myMavenProject && unprefixed.equals("baseUri"))) [ CD ]
Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))-->Line_99 $$ if (property != null)[ FD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_105 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())[ FD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_21 $$ if (mavenProject == null)[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_89 $$ IProperty property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, myText)[ CD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_17 $$ MavenId parentId = mavenProject.getParentId()[ FD ]
Line_54 $$ if (pluginCfg != null) -->Line_67 $$ if (!notFound) [ CD ]
Line_82 $$ if ("java.version".equals(myText)) -->Line_84 $$ if (element != null) [ CD ]
Line_18 $$ if (parentId == null)-->Line_19 $$ return null[ CD ]
Line_47 $$ MavenDomProfile profile = DomUtil.findDomElement(myElement, MavenDomProfile.class)-->Line_49 $$ PsiElement result = MavenDomProjectProcessorUtils.findProperty(profile.getProperties(), myText)[ FD ]
Line_106 $$ if (domProjectModel != null) -->Line_108 $$ if (res != null) [ CD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_83 $$ PsiElement element = resolveToCustomSystemProperty("java.version", MavenUtil.getModuleJavaVersion(myProjectsManager, mavenProject))[ FD ]
Line_92 $$ if (myText.startsWith("env.")) -->Line_94 $$ if (property != null)[ CD ]
Line_113 $$ if (mavenProject.getProperties().containsKey(myText)) -->Line_114 $$ return myElement[ CD ]
Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))-->Line_100 $$ return property.getPsiElement()[ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_47 $$ MavenDomProfile profile = DomUtil.findDomElement(myElement, MavenDomProfile.class)[ CD ]
Line_28 $$ if (myText.equals(TIMESTAMP_PROP)) -->Line_29 $$ return myElement[ CD ]
Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))-->Line_98 $$ property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, textWithEnv)[ FD ]
Line_99 $$ if (property != null)-->Line_100 $$ return property.getPsiElement()[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_54 $$ if (pluginCfg != null) [ CD ]
Line_35 $$ if (res != null) -->Line_36 $$ return res[ CD ]
Line_4 $$ String unprefixed = myText-->Line_34 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_100 $$ return property.getPsiElement()[ FD ]
Line_98 $$ property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, textWithEnv)-->Line_101 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, textWithEnv)[ FD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_103 $$ return property.getPsiElement()[ FD ]
Line_32 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())-->Line_106 $$ if (domProjectModel != null) [ FD ]
Line_6 $$ unprefixed = myText.substring("pom.".length())-->Line_107 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_26 $$ return getBaseDir(mavenProject)[ FD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_94 $$ if (property != null)[ FD ]
Line_6 $$ unprefixed = myText.substring("pom.".length())-->Line_34 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_90 $$ if (property != null)-->Line_91 $$ return property.getPsiElement()[ CD ]
Line_108 $$ if (res != null) -->Line_109 $$ return res[ CD ]
Line_6 $$ unprefixed = myText.substring("pom.".length())-->Line_14 $$ if (unprefixed.equals("parent.groupId") || unprefixed.equals("parent.artifactId") || unprefixed.equals("parent.version") || unprefixed.equals("parent.relativePath")) [ FD ]
Line_4 $$ String unprefixed = myText-->Line_6 $$ unprefixed = myText.substring("pom.".length())[ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_102 $$ if (property != null)[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_40 $$ MavenRunnerSettings runnerSettings = MavenRunner.getInstance(myProject).getSettings()[ CD ]
Line_49 $$ PsiElement result = MavenDomProjectProcessorUtils.findProperty(profile.getProperties(), myText)-->Line_50 $$ if (result != null)[ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_3 $$ boolean hasPrefix = false[ CD ]
Line_9 $$ unprefixed = myText.substring("project.".length())-->Line_25 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == myMavenProject && unprefixed.equals("baseUri"))) [ FD ]
Line_5 $$ if (myText.startsWith("pom.")) -->Line_7 $$ hasPrefix = true[ CD ]
Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))-->Line_95 $$ return property.getPsiElement()[ FD ]
Line_32 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())-->Line_107 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_76 $$ if ("java.home".equals(myText)) [ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_13 $$ while (unprefixed.startsWith("parent.")) [ CD ]
Line_101 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, textWithEnv)-->Line_103 $$ return property.getPsiElement()[ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_116 $$ if (myText.startsWith("settings.")) [ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_31 $$ if (hasPrefix) [ CD ]
Line_3 $$ boolean hasPrefix = false-->Line_104 $$ if (!hasPrefix) [ FD ]
Line_101 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, textWithEnv)-->Line_102 $$ if (property != null)[ FD ]
Line_94 $$ if (property != null)-->Line_95 $$ return property.getPsiElement()[ CD ]
Line_41 $$ if (runnerSettings.getMavenProperties().containsKey(myText) || runnerSettings.getVmOptions().contains("-D" + myText + '=')) -->Line_42 $$ return myElement[ CD ]
Line_98 $$ property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, textWithEnv)-->Line_100 $$ return property.getPsiElement()[ FD ]
Line_7 $$ hasPrefix = true-->Line_104 $$ if (!hasPrefix) [ FD ]
Line_53 $$ MavenDomConfiguration pluginCfg = DomUtil.findDomElement(myElement, MavenDomConfiguration.class)-->Line_54 $$ if (pluginCfg != null) [ FD ]
Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)-->Line_113 $$ if (mavenProject.getProperties().containsKey(myText)) [ FD ]
Line_71 $$ if (myProjectDom != null) -->Line_73 $$ if (result != null)[ CD ]
Line_12 $$ MavenProject mavenProject = myMavenProject-->Line_32 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())[ FD ]
Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))-->Line_101 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, textWithEnv)[ FD ]
Line_31 $$ if (hasPrefix) -->Line_33 $$ if (domProjectModel != null) [ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_90 $$ if (property != null)[ CD ]
Line_17 $$ MavenId parentId = mavenProject.getParentId()-->Line_18 $$ if (parentId == null)[ FD ]
Line_23 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_34 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_33 $$ if (domProjectModel != null) -->Line_34 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ CD ]
Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))-->Line_94 $$ if (property != null)[ FD ]
Line_78 $$ if (element != null) -->Line_79 $$ return element[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_71 $$ if (myProjectDom != null) [ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_23 $$ unprefixed = unprefixed.substring("parent.".length())[ CD ]
Line_32 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())-->Line_33 $$ if (domProjectModel != null) [ FD ]
Line_54 $$ if (pluginCfg != null) -->Line_55 $$ boolean notFound = MavenPluginDescriptor.processDescriptors(new Processor<MavenPluginDescriptor>() [ CD ]
Line_9 $$ unprefixed = myText.substring("project.".length())-->Line_14 $$ if (unprefixed.equals("parent.groupId") || unprefixed.equals("parent.artifactId") || unprefixed.equals("parent.version") || unprefixed.equals("parent.relativePath")) [ FD ]
Line_76 $$ if ("java.home".equals(myText)) -->Line_77 $$ PsiElement element = resolveToCustomSystemProperty("java.home", MavenUtil.getModuleJreHome(myProjectsManager, mavenProject))[ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_41 $$ if (runnerSettings.getMavenProperties().containsKey(myText) || runnerSettings.getVmOptions().contains("-D" + myText + '=')) [ CD ]
Line_58 $$ for (MavenPluginDescriptor.ModelProperty property : descriptor.properties) -->Line_95 $$ return property.getPsiElement()[ FD ]
Line_31 $$ if (hasPrefix) -->Line_32 $$ MavenDomProjectModel domProjectModel = MavenDomUtil.getMavenDomProjectModel(myProject, mavenProject.getFile())[ CD ]
Line_20 $$ mavenProject = myProjectsManager.findProject(parentId)-->Line_77 $$ PsiElement element = resolveToCustomSystemProperty("java.home", MavenUtil.getModuleJreHome(myProjectsManager, mavenProject))[ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_4 $$ String unprefixed = myText[ CD ]
Line_104 $$ if (!hasPrefix) -->Line_106 $$ if (domProjectModel != null) [ CD ]
Line_2 $$ protected PsiElement doResolve() -->Line_119 $$ return null[ CD ]
Line_106 $$ if (domProjectModel != null) -->Line_107 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ CD ]
Line_98 $$ property = mavenPropertiesVirtualFileSystem.findSystemProperty(myProject, textWithEnv)-->Line_103 $$ return property.getPsiElement()[ FD ]
Line_8 $$ if (myText.startsWith("project.")) -->Line_9 $$ unprefixed = myText.substring("project.".length())[ CD ]
Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))-->Line_103 $$ return property.getPsiElement()[ FD ]
Line_23 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_14 $$ if (unprefixed.equals("parent.groupId") || unprefixed.equals("parent.artifactId") || unprefixed.equals("parent.version") || unprefixed.equals("parent.relativePath")) [ FD ]
Line_9 $$ unprefixed = myText.substring("project.".length())-->Line_107 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())[ FD ]
Line_4 $$ String unprefixed = myText-->Line_14 $$ if (unprefixed.equals("parent.groupId") || unprefixed.equals("parent.artifactId") || unprefixed.equals("parent.version") || unprefixed.equals("parent.relativePath")) [ FD ]
Line_2 $$ protected PsiElement doResolve() -->Line_44 $$ if (MavenUtil.getPropertiesFromMavenOpts().containsKey(myText)) [ CD ]
Line_44 $$ if (MavenUtil.getPropertiesFromMavenOpts().containsKey(myText)) -->Line_45 $$ return myElement[ CD ]
Line_34 $$ PsiElement res = resolveModelProperty(domProjectModel, unprefixed, new HashSet<DomElement>())-->Line_108 $$ if (res != null) [ FD ]
Line_93 $$ property = mavenPropertiesVirtualFileSystem.findEnvProperty(myProject, myText.substring("env.".length()))-->Line_102 $$ if (property != null)[ FD ]
