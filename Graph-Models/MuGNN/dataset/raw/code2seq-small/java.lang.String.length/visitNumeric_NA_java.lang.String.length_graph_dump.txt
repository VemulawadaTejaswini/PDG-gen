Line_6 $$ if (ctx.DECIMAL() != null) -->Line_26 $$ if (ctx.OCTAL() != null) [ CD ]
Line_67 $$ if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) -->Line_68 $$ numericemd.from = definition.charType[ CD ]
Line_64 $$ if (sort == Sort.BYTE && value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) -->Line_66 $$ numericemd.preConst = (byte) value[ CD ]
Line_30 $$ svalue += ctx.INTEGER().getText()-->Line_38 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ FD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_30 $$ svalue += ctx.INTEGER().getText()[ FD ]
Line_33 $$ svalue += ctx.HEX().getText()-->Line_52 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ FD ]
Line_32 $$ if (ctx.HEX() != null) -->Line_33 $$ svalue += ctx.HEX().getText()[ CD ]
Line_30 $$ svalue += ctx.INTEGER().getText()-->Line_63 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_31 $$ radix = 10-->Line_63 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_26 $$ if (ctx.OCTAL() != null) -->Line_28 $$ radix = 8[ CD ]
Line_29 $$ if (ctx.INTEGER() != null) -->Line_32 $$ if (ctx.HEX() != null) [ CD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_63 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_64 $$ if (sort == Sort.BYTE && value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) -->Line_67 $$ if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) [ CD ]
Line_32 $$ if (ctx.HEX() != null) -->Line_34 $$ radix = 16[ CD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_55 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_28 $$ radix = 8-->Line_31 $$ radix = 10[ FD ]
Line_30 $$ svalue += ctx.INTEGER().getText()-->Line_52 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ FD ]
Line_25 $$ int radix-->Line_55 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_6 $$ if (ctx.DECIMAL() != null) -->Line_8 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ CD ]
Line_25 $$ int radix-->Line_31 $$ radix = 10[ FD ]
Line_33 $$ svalue += ctx.HEX().getText()-->Line_41 $$ numericemd.preConst = Double.parseDouble(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_8 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_28 $$ radix = 8-->Line_63 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_25 $$ int radix-->Line_34 $$ radix = 16[ FD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_18 $$ numericemd.preConst = Double.parseDouble(svalue)[ FD ]
Line_33 $$ svalue += ctx.HEX().getText()-->Line_63 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_6 $$ if (ctx.DECIMAL() != null) -->Line_38 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ CD ]
Line_29 $$ if (ctx.INTEGER() != null) -->Line_31 $$ radix = 10[ CD ]
Line_30 $$ svalue += ctx.INTEGER().getText()-->Line_48 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_34 $$ radix = 16-->Line_63 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_26 $$ if (ctx.OCTAL() != null) -->Line_27 $$ svalue += ctx.OCTAL().getText()[ CD ]
Line_67 $$ if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) -->Line_69 $$ numericemd.preConst = (char) value[ CD ]
Line_33 $$ svalue += ctx.HEX().getText()-->Line_38 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ FD ]
Line_33 $$ svalue += ctx.HEX().getText()-->Line_55 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_27 $$ svalue += ctx.OCTAL().getText()[ FD ]
Line_38 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) -->Line_45 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ CD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_11 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_25 $$ int radix-->Line_63 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_38 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ FD ]
Line_34 $$ radix = 16-->Line_55 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_70 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) -->Line_75 $$ numericemd.preConst = value[ CD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_52 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ FD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_55 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_30 $$ svalue += ctx.INTEGER().getText()-->Line_45 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_33 $$ svalue += ctx.HEX().getText()-->Line_45 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_28 $$ radix = 8-->Line_55 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_28 $$ radix = 8-->Line_34 $$ radix = 16[ FD ]
Line_33 $$ svalue += ctx.HEX().getText()-->Line_48 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_41 $$ numericemd.preConst = Double.parseDouble(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_33 $$ svalue += ctx.HEX().getText()[ FD ]
Line_64 $$ if (sort == Sort.BYTE && value >= Byte.MIN_VALUE && value <= Byte.MAX_VALUE) -->Line_65 $$ numericemd.from = definition.byteType[ CD ]
Line_6 $$ if (ctx.DECIMAL() != null) -->Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()[ CD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_41 $$ numericemd.preConst = Double.parseDouble(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_63 $$ final int value = Integer.parseInt(svalue, radix)[ FD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_48 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_33 $$ svalue += ctx.HEX().getText()[ FD ]
Line_45 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) -->Line_52 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ CD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_45 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_38 $$ if (svalue.endsWith("d") || svalue.endsWith("D")) [ FD ]
Line_31 $$ radix = 10-->Line_55 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_45 $$ if (svalue.endsWith("f") || svalue.endsWith("F")) [ FD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_48 $$ numericemd.preConst = Float.parseFloat(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_31 $$ radix = 10-->Line_34 $$ radix = 16[ FD ]
Line_67 $$ if (sort == Sort.CHAR && value >= Character.MIN_VALUE && value <= Character.MAX_VALUE) -->Line_70 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) [ CD ]
Line_70 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) -->Line_74 $$ numericemd.from = definition.intType[ CD ]
Line_7 $$ final String svalue = (negate ? "-" : "") + ctx.DECIMAL().getText()-->Line_30 $$ svalue += ctx.INTEGER().getText()[ FD ]
Line_30 $$ svalue += ctx.INTEGER().getText()-->Line_55 $$ numericemd.preConst = Long.parseLong(svalue.substring(0, svalue.length() - 1), radix)[ FD ]
Line_70 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) -->Line_71 $$ numericemd.from = definition.shortType[ CD ]
Line_63 $$ final int value = Integer.parseInt(svalue, radix)-->Line_75 $$ numericemd.preConst = value[ FD ]
Line_29 $$ if (ctx.INTEGER() != null) -->Line_30 $$ svalue += ctx.INTEGER().getText()[ CD ]
Line_25 $$ int radix-->Line_28 $$ radix = 8[ FD ]
Line_27 $$ svalue += ctx.OCTAL().getText()-->Line_52 $$ if (svalue.endsWith("l") || svalue.endsWith("L")) [ FD ]
Line_30 $$ svalue += ctx.INTEGER().getText()-->Line_33 $$ svalue += ctx.HEX().getText()[ FD ]
Line_6 $$ if (ctx.DECIMAL() != null) -->Line_25 $$ int radix[ CD ]
Line_30 $$ svalue += ctx.INTEGER().getText()-->Line_41 $$ numericemd.preConst = Double.parseDouble(svalue.substring(0, svalue.length() - 1))[ FD ]
Line_26 $$ if (ctx.OCTAL() != null) -->Line_29 $$ if (ctx.INTEGER() != null) [ CD ]
Line_70 $$ if (sort == Sort.SHORT && value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) -->Line_72 $$ numericemd.preConst = (short) value[ CD ]
