Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_60 $$ out.println()[ FD ]
Line_11 $$ PrintWriter out = null-->Line_337 $$ out.print((JB_OFF ? "" : "@NotNull "))[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_99 $$ out.print("public enum " + typeName + (text ? (JB_OFF ? "" : " implements com.intellij.util.xml.NamedEnum") : ""))[ FD ]
Line_34 $$ if (fd.simpleTypesString != null && fd.simpleTypesString.indexOf(":fully-qualified-classType;") != -1) -->Line_35 $$ externalClasses.add("com.intellij.psi.PsiClass")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_315 $$ out.println("();")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_348 $$ out.println("\t" + JDOC_CONT + "@return created child")[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_7 $$ final String typeQName = model.getNSDPrefix(td) + typeName[ FD ]
Line_105 $$ if (first) -->Line_106 $$ first = false[ CD ]
Line_11 $$ PrintWriter out = null-->Line_324 $$ out.println("\t" + JDOC_CONT + "Sets the value of the " + javaDocTagName + ".")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_162 $$ out.println(" [ FD ]
Line_16 $$ StringTokenizer st = new StringTokenizer(nsd.imports, ";")-->Line_18 $$ externalClasses.add(st.nextToken())[ FD ]
Line_130 $$ if (td.type == TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_133 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " interface.")[ CD ]
Line_11 $$ PrintWriter out = null-->Line_299 $$ out.println("\t" + JDOC_CLOSE)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_138 $$ out.println(JDOC_CLOSE)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_120 $$ out.println("\tprivate final " + stringClass + " value;")[ FD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_341 $$ out.print(paramName)[ CD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_27 $$ String pkg2 = model.getNSDPrefix(td)[ FD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_91 $$ if (NOT_COMPARE_MODE) [ CD ]
Line_288 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_296 $$ out.println("\t" + JDOC_CONT + "Returns " + text + ".")[ CD ]
Line_37 $$ if (fd.contentQualifiedName != null && fd.contentQualifiedName.indexOf('.') > 0) -->Line_39 $$ if (!pkgNameFD.equals(pkgName)) [ CD ]
Line_11 $$ PrintWriter out = null-->Line_334 $$ out.print(Util.capitalize(name))[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_346 $$ out.println("\t" + JDOC_OPEN)[ FD ]
Line_91 $$ if (NOT_COMPARE_MODE) -->Line_92 $$ out.println(JDOC_OPEN)[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_301 $$ out.println((JB_OFF ? "//" : "") + "\t@NotNull")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_331 $$ out.print("\t")[ FD ]
Line_146 $$ comma = true-->Line_156 $$ comma = true[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_306 $$ out.println((JB_OFF ? "//" : "") + "\t@Required")[ FD ]
Line_85 $$ for (Map.Entry<String, FieldDesc> e : td.fdMap.entrySet()) -->Line_103 $$ String val = e.getKey()[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_341 $$ out.print(paramName)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_109 $$ out.println(",")[ FD ]
Line_142 $$ boolean comma = false-->Line_156 $$ comma = true[ FD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_334 $$ out.print(Util.capitalize(name))[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_97 $$ out.println(JDOC_CLOSE)[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_4 $$ final Map<String, NamespaceDesc> nsdMap = model.nsdMap[ CD ]
Line_11 $$ PrintWriter out = null-->Line_112 $$ out.print("\t" + id.name + " (\"" + val + "\")")[ FD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_339 $$ out.print(type)[ CD ]
Line_13 $$ TreeSet<String> externalClasses = new TreeSet<String>()-->Line_18 $$ externalClasses.add(st.nextToken())[ FD ]
Line_128 $$ if (NOT_COMPARE_MODE) -->Line_135 $$ printDocumentation(out, td.documentation, JDOC_CONT)[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_154 $$ out.print(", ")[ FD ]
Line_317 $$ if (!genAddRemoveInsteadOfSet || field.clType > 0) -->Line_357 $$ out.println("();")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_133 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " interface.")[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_3 $$ final Map<String, TypeDesc> jtMap = model.jtMap[ CD ]
Line_11 $$ PrintWriter out = null-->Line_301 $$ out.println((JB_OFF ? "//" : "") + "\t@NotNull")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_359 $$ out.println("")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_122 $$ out.println("\tpublic " + stringClass + " getValue() [ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_304 $$ out.println(sbAnnotations)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_81 $$ out.println()[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_327 $$ out.println("\t" + JDOC_CLOSE)[ FD ]
Line_288 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_299 $$ out.println("\t" + JDOC_CLOSE)[ CD ]
Line_11 $$ PrintWriter out = null-->Line_351 $$ out.println(sbAnnotations)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_74 $$ out.println()[ FD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_340 $$ out.print(" ")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_367 $$ out.close()[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_348 $$ out.println("\t" + JDOC_CONT + "@return created child")[ FD ]
Line_302 $$ if (td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_303 $$ if (sbAnnotations.length() > 0)[ CD ]
Line_345 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_347 $$ out.println("\t" + JDOC_CONT + "Adds new child to the list of " + javaDocTagName + ".")[ CD ]
Line_288 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_289 $$ out.println("\t" + JDOC_OPEN)[ CD ]
Line_11 $$ PrintWriter out = null-->Line_51 $$ out = new PrintWriter(new FileWriter(outFile))[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_109 $$ out.println(",")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_342 $$ out.println(");")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_356 $$ out.print(Util.capitalize(field.elementName))[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_56 $$ out.println("")[ FD ]
Line_25 $$ for (TypeDesc tds : td.supers) -->Line_26 $$ String pkg1 = model.getNSDPrefix(tds)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_119 $$ out.println()[ FD ]
Line_11 $$ PrintWriter out = null-->Line_133 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " interface.")[ FD ]
Line_57 $$ if (NOT_COMPARE_MODE && pkgName != null && pkgName.length() > 0) -->Line_58 $$ out.println("package " + pkgName + ";")[ CD ]
Line_201 $$ if (field.simpleTypesString.indexOf(":java-identifierType;") != -1) -->Line_203 $$ if (field.simpleTypesString.indexOf(":QName;") != -1) [ CD ]
Line_192 $$ if (field.simpleTypesString != null) -->Line_224 $$ for (int idx = 0; idx != -1; ) [ CD ]
Line_3 $$ final Map<String, TypeDesc> jtMap = model.jtMap-->Line_246 $$ TypeDesc ftd = jtMap.get(field.contentQualifiedName)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_145 $$ out.print(" extends " + nsd.superClass.substring(nsd.superClass.lastIndexOf(".") + 1))[ FD ]
Line_11 $$ PrintWriter out = null-->Line_131 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " model group interface.")[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_10 $$ final File outFile = fileManager.getOutputFile(new File(outDir, toJavaFileName(typeQName)))[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_320 $$ out.println("\t" + JDOC_OPEN)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_119 $$ out.println()[ FD ]
Line_285 $$ if (converterString != null) -->Line_286 $$ sbAnnotations.append("\n").append(converterString)[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_360 $$ out.println("")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_335 $$ out.print("(")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_96 $$ printDocumentation(out, td.documentation, JDOC_CONT)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_53 $$ out.println("// Generated on " + new Date())[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_21 $$ if (!model.getNSDPrefix("", nsd.superClass, false).equals(model.getNSDPrefix(td))) [ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_10 $$ final File outFile = fileManager.getOutputFile(new File(outDir, toJavaFileName(typeQName)))[ FD ]
Line_288 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_297 $$ printDocumentation(out, field.documentation, "\t" + JDOC_CONT)[ CD ]
Line_37 $$ if (fd.contentQualifiedName != null && fd.contentQualifiedName.indexOf('.') > 0) -->Line_38 $$ String pkgNameFD = fd.contentQualifiedName.substring(0, fd.contentQualifiedName.lastIndexOf('.'))[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_114 $$ out.print("\t" + id.name)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_298 $$ out.println("\t" + JDOC_CONT + "@return " + text + ".")[ FD ]
Line_142 $$ boolean comma = false-->Line_146 $$ comma = true[ FD ]
Line_11 $$ PrintWriter out = null-->Line_120 $$ out.println("\tprivate final " + stringClass + " value;")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_125 $$ out.println("}")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_334 $$ out.print(Util.capitalize(name))[ FD ]
Line_91 $$ if (NOT_COMPARE_MODE) -->Line_94 $$ if (AUTHOR != null)[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_70 $$ out.println("import " + s + ";")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_92 $$ out.println(JDOC_OPEN)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_70 $$ out.println("import " + s + ";")[ FD ]
Line_197 $$ if (field.simpleTypesString.indexOf(":ejb-linkType;") != -1) -->Line_198 $$ if (field.simpleTypesString.indexOf(":ejb-ref-nameType;") != -1) [ CD ]
Line_8 $$ final String pkgName = typeQName.lastIndexOf('.') > -1 ? typeQName.substring(0, typeQName.lastIndexOf('.')) : ""-->Line_57 $$ if (NOT_COMPARE_MODE && pkgName != null && pkgName.length() > 0) [ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_322 $$ out.println("\t" + JDOC_CONT + "Sets the list of " + javaDocTagName + ".")[ FD ]
Line_224 $$ for (int idx = 0; idx != -1; ) -->Line_227 $$ if (idx == 0)[ CD ]
Line_4 $$ final Map<String, NamespaceDesc> nsdMap = model.nsdMap-->Line_5 $$ final NamespaceDesc nsd = nsdMap.get(nsdMap.containsKey(td.xsNamespace) ? td.xsNamespace : "")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_54 $$ out.println("// DTD/Schema  :    " + nsd.name)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_114 $$ out.print("\t" + id.name)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_360 $$ out.println("")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_140 $$ out.print("public interface " + typeName)[ FD ]
Line_321 $$ if (field.clType < 0) -->Line_324 $$ out.println("\t" + JDOC_CONT + "Sets the value of the " + javaDocTagName + ".")[ CD ]
Line_210 $$ if (field.simpleTypesString.indexOf(":byte;") != -1) -->Line_212 $$ if (field.simpleTypesString.indexOf(":short;") != -1) [ CD ]
Line_13 $$ TreeSet<String> externalClasses = new TreeSet<String>()-->Line_40 $$ externalClasses.add(fd.contentQualifiedName)[ FD ]
Line_85 $$ for (Map.Entry<String, FieldDesc> e : td.fdMap.entrySet()) -->Line_86 $$ if (!e.getKey().equals(e.getValue().name)) [ FD ]
Line_144 $$ if (nsd.superClass != null) -->Line_145 $$ out.print(" extends " + nsd.superClass.substring(nsd.superClass.lastIndexOf(".") + 1))[ CD ]
Line_8 $$ final String pkgName = typeQName.lastIndexOf('.') > -1 ? typeQName.substring(0, typeQName.lastIndexOf('.')) : ""-->Line_39 $$ if (!pkgNameFD.equals(pkgName)) [ FD ]
Line_73 $$ if (external)-->Line_74 $$ out.println()[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_129 $$ out.println(JDOC_OPEN)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_367 $$ out.close()[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_362 $$ out.println("}")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_95 $$ out.println(JDOC_CONT + AUTHOR)[ FD ]
Line_141 $$ if (nsd.superClass != null || (td.supers != null && td.supers.length > 1)) -->Line_142 $$ boolean comma = false[ CD ]
Line_11 $$ PrintWriter out = null-->Line_326 $$ out.println("\t" + JDOC_CONT + "@param " + paramName + " the new value to set")[ FD ]
Line_279 $$ if (field.clType == FieldDesc.BOOL) -->Line_281 $$ if (!name.equals(field.name)) [ CD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_99 $$ out.print("public enum " + typeName + (text ? (JB_OFF ? "" : " implements com.intellij.util.xml.NamedEnum") : ""))[ CD ]
Line_21 $$ if (!model.getNSDPrefix("", nsd.superClass, false).equals(model.getNSDPrefix(td))) -->Line_22 $$ externalClasses.add(model.getNSDPrefix("", nsd.superClass, false) + nsd.superClass.substring(nsd.superClass.lastIndexOf(".") + 1))[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_339 $$ out.print(type)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_118 $$ out.println(";")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_340 $$ out.print(" ")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_78 $$ out.println("import " + s + ";")[ FD ]
Line_15 $$ if (nsd.imports != null) -->Line_16 $$ StringTokenizer st = new StringTokenizer(nsd.imports, ";")[ CD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_319 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) [ CD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_26 $$ String pkg1 = model.getNSDPrefix(tds)[ FD ]
Line_167 $$ Arrays.sort(fields, new Comparator<FieldDesc>() -->Line_170 $$ return o1.realIndex - o2.realIndex[ CD ]
Line_11 $$ PrintWriter out = null-->Line_304 $$ out.println(sbAnnotations)[ FD ]
Line_305 $$ if (field.required) -->Line_306 $$ out.println((JB_OFF ? "//" : "") + "\t@Required")[ CD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_225 $$ simpleTypes.add(field.simpleTypesString.substring(idx))[ FD ]
Line_350 $$ if (sbAnnotations.length() > 0)-->Line_351 $$ out.println(sbAnnotations)[ CD ]
Line_62 $$ boolean javaLang = false-->Line_66 $$ javaLang = true[ FD ]
Line_11 $$ PrintWriter out = null-->Line_56 $$ out.println("")[ FD ]
Line_141 $$ if (nsd.superClass != null || (td.supers != null && td.supers.length > 1)) -->Line_143 $$ if (td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) [ CD ]
Line_150 $$ if (!comma)-->Line_151 $$ out.print(" extends ")[ CD ]
Line_13 $$ TreeSet<String> externalClasses = new TreeSet<String>()-->Line_47 $$ externalClasses.add("com.intellij.util.xml.*")[ FD ]
Line_203 $$ if (field.simpleTypesString.indexOf(":QName;") != -1) -->Line_205 $$ if (field.simpleTypesString.indexOf(":integer;") != -1) [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_54 $$ out.println("// DTD/Schema  :    " + nsd.name)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_107 $$ out.println("")[ FD ]
Line_61 $$ if (td.type != TypeDesc.TypeEnum.ENUM) -->Line_72 $$ if (javaLang) [ CD ]
Line_117 $$ if (text) -->Line_120 $$ out.println("\tprivate final " + stringClass + " value;")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_131 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " model group interface.")[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_5 $$ final NamespaceDesc nsd = nsdMap.get(nsdMap.containsKey(td.xsNamespace) ? td.xsNamespace : "")[ CD ]
Line_265 $$ if (isAttr && nameChanged) -->Line_266 $$ sbAnnotations.append((JB_OFF ? "//" : "") + "\t@Attribute (\"").append(tagName).append("\")")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_312 $$ out.print(" ")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_124 $$ out.println()[ FD ]
Line_277 $$ if (field.duplicateIndex >= 0) -->Line_278 $$ sbAnnotations.append((JB_OFF ? "//" : "") + "\t@SubTag (value = \"").append(tagName).append("\", index = ").append(field.duplicateIndex - 1).append(")")[ CD ]
Line_11 $$ PrintWriter out = null-->Line_137 $$ out.println(JDOC_CONT + AUTHOR)[ FD ]
Line_146 $$ comma = true-->Line_150 $$ if (!comma)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_151 $$ out.print(" extends ")[ FD ]
Line_14 $$ if (td.type != TypeDesc.TypeEnum.ENUM) -->Line_21 $$ if (!model.getNSDPrefix("", nsd.superClass, false).equals(model.getNSDPrefix(td))) [ CD ]
Line_198 $$ if (field.simpleTypesString.indexOf(":ejb-ref-nameType;") != -1) -->Line_200 $$ if (field.simpleTypesString.indexOf(":pathType;") != -1) [ CD ]
Line_11 $$ PrintWriter out = null-->Line_359 $$ out.println("")[ FD ]
Line_226 $$ idx = field.simpleTypesString.indexOf(';', idx) + 1-->Line_227 $$ if (idx == 0)[ FD ]
Line_319 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_328 $$ if (sbAnnotations.length() > 0)[ CD ]
Line_345 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_346 $$ out.println("\t" + JDOC_OPEN)[ CD ]
Line_117 $$ if (text) -->Line_118 $$ out.println(";")[ CD ]
Line_317 $$ if (!genAddRemoveInsteadOfSet || field.clType > 0) -->Line_345 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) [ CD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_11 $$ PrintWriter out = null[ CD ]
Line_11 $$ PrintWriter out = null-->Line_341 $$ out.print(paramName)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_296 $$ out.println("\t" + JDOC_CONT + "Returns " + text + ".")[ FD ]
Line_25 $$ for (TypeDesc tds : td.supers) -->Line_29 $$ externalClasses.add(model.getNSDPrefix(tds) + tds.name)[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_29 $$ externalClasses.add(model.getNSDPrefix(tds) + tds.name)[ FD ]
Line_7 $$ final String typeQName = model.getNSDPrefix(td) + typeName-->Line_10 $$ final File outFile = fileManager.getOutputFile(new File(outDir, toJavaFileName(typeQName)))[ FD ]
Line_27 $$ String pkg2 = model.getNSDPrefix(td)-->Line_28 $$ if (!pkg1.equals(pkg2)) [ FD ]
Line_319 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_327 $$ out.println("\t" + JDOC_CLOSE)[ CD ]
Line_317 $$ if (!genAddRemoveInsteadOfSet || field.clType > 0) -->Line_318 $$ if (field.clType == FieldDesc.SIMPLE) [ CD ]
Line_10 $$ final File outFile = fileManager.getOutputFile(new File(outDir, toJavaFileName(typeQName)))-->Line_370 $$ fileManager.releaseOutputFile(outFile)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_289 $$ out.println("\t" + JDOC_OPEN)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_145 $$ out.print(" extends " + nsd.superClass.substring(nsd.superClass.lastIndexOf(".") + 1))[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_22 $$ externalClasses.add(model.getNSDPrefix("", nsd.superClass, false) + nsd.superClass.substring(nsd.superClass.lastIndexOf(".") + 1))[ FD ]
Line_13 $$ TreeSet<String> externalClasses = new TreeSet<String>()-->Line_35 $$ externalClasses.add("com.intellij.psi.PsiClass")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_346 $$ out.println("\t" + JDOC_OPEN)[ FD ]
Line_64 $$ for (String s : externalClasses) -->Line_65 $$ if (s.startsWith("java.")) [ FD ]
Line_319 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_321 $$ if (field.clType < 0) [ CD ]
Line_16 $$ StringTokenizer st = new StringTokenizer(nsd.imports, ";")-->Line_17 $$ while (st.hasMoreTokens()) [ FD ]
Line_281 $$ if (!name.equals(field.name)) -->Line_282 $$ sbAnnotations.append((JB_OFF ? "//" : "") + "\t@SubTag (\"").append(tagName).append("\")")[ CD ]
Line_38 $$ String pkgNameFD = fd.contentQualifiedName.substring(0, fd.contentQualifiedName.lastIndexOf('.'))-->Line_39 $$ if (!pkgNameFD.equals(pkgName)) [ FD ]
Line_63 $$ boolean external = false-->Line_69 $$ external = true[ FD ]
Line_11 $$ PrintWriter out = null-->Line_162 $$ out.println(" [ FD ]
Line_142 $$ boolean comma = false-->Line_150 $$ if (!comma)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_309 $$ out.print("\t")[ FD ]
Line_288 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_298 $$ out.println("\t" + JDOC_CONT + "@return " + text + ".")[ CD ]
Line_317 $$ if (!genAddRemoveInsteadOfSet || field.clType > 0) -->Line_356 $$ out.print(Util.capitalize(field.elementName))[ CD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_100 $$ out.print(" [ CD ]
Line_205 $$ if (field.simpleTypesString.indexOf(":integer;") != -1) -->Line_208 $$ if (field.simpleTypesString.indexOf(":int;") != -1) [ CD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_336 $$ if (field.required) [ CD ]
Line_11 $$ PrintWriter out = null-->Line_314 $$ out.print(Util.capitalize(name))[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_121 $$ out.println("\tprivate " + typeName + "(" + stringClass + " value) [ FD ]
Line_28 $$ if (!pkg1.equals(pkg2)) -->Line_29 $$ externalClasses.add(model.getNSDPrefix(tds) + tds.name)[ CD ]
Line_86 $$ if (!e.getKey().equals(e.getValue().name)) -->Line_87 $$ text = true[ CD ]
Line_11 $$ PrintWriter out = null-->Line_121 $$ out.println("\tprivate " + typeName + "(" + stringClass + " value) [ FD ]
Line_319 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_320 $$ out.println("\t" + JDOC_OPEN)[ CD ]
Line_321 $$ if (field.clType < 0) -->Line_322 $$ out.println("\t" + JDOC_CONT + "Sets the list of " + javaDocTagName + ".")[ CD ]
Line_11 $$ PrintWriter out = null-->Line_362 $$ out.println("}")[ FD ]
Line_345 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_350 $$ if (sbAnnotations.length() > 0)[ CD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_8 $$ final String pkgName = typeQName.lastIndexOf('.') > -1 ? typeQName.substring(0, typeQName.lastIndexOf('.')) : ""[ CD ]
Line_85 $$ for (Map.Entry<String, FieldDesc> e : td.fdMap.entrySet()) -->Line_104 $$ FieldDesc id = e.getValue()[ FD ]
Line_11 $$ PrintWriter out = null-->Line_349 $$ out.println("\t" + JDOC_CLOSE)[ FD ]
Line_13 $$ TreeSet<String> externalClasses = new TreeSet<String>()-->Line_22 $$ externalClasses.add(model.getNSDPrefix("", nsd.superClass, false) + nsd.superClass.substring(nsd.superClass.lastIndexOf(".") + 1))[ FD ]
Line_64 $$ for (String s : externalClasses) -->Line_76 $$ if (!s.startsWith("java."))[ FD ]
Line_11 $$ PrintWriter out = null-->Line_306 $$ out.println((JB_OFF ? "//" : "") + "\t@Required")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_351 $$ out.println(sbAnnotations)[ FD ]
Line_13 $$ TreeSet<String> externalClasses = new TreeSet<String>()-->Line_44 $$ externalClasses.add("java.util.List")[ FD ]
Line_218 $$ if (field.simpleTypesString.indexOf(":double;") != -1) -->Line_220 $$ if (field.simpleTypesString.indexOf(":boolean;") != -1) [ CD ]
Line_11 $$ PrintWriter out = null-->Line_339 $$ out.print(type)[ FD ]
Line_345 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_348 $$ out.println("\t" + JDOC_CONT + "@return created child")[ CD ]
Line_11 $$ PrintWriter out = null-->Line_135 $$ printDocumentation(out, td.documentation, JDOC_CONT)[ FD ]
Line_317 $$ if (!genAddRemoveInsteadOfSet || field.clType > 0) -->Line_353 $$ out.print("\t")[ CD ]
Line_117 $$ if (text) -->Line_119 $$ out.println()[ CD ]
Line_101 $$ boolean first = true-->Line_106 $$ first = false[ FD ]
Line_72 $$ if (javaLang) -->Line_73 $$ if (external)[ CD ]
Line_105 $$ if (first) -->Line_109 $$ out.println(",")[ CD ]
Line_26 $$ String pkg1 = model.getNSDPrefix(tds)-->Line_28 $$ if (!pkg1.equals(pkg2)) [ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_289 $$ out.println("\t" + JDOC_OPEN)[ FD ]
Line_136 $$ if (AUTHOR != null)-->Line_137 $$ out.println(JDOC_CONT + AUTHOR)[ CD ]
Line_61 $$ if (td.type != TypeDesc.TypeEnum.ENUM) -->Line_62 $$ boolean javaLang = false[ CD ]
Line_11 $$ PrintWriter out = null-->Line_331 $$ out.print("\t")[ FD ]
Line_128 $$ if (NOT_COMPARE_MODE) -->Line_138 $$ out.println(JDOC_CLOSE)[ CD ]
Line_91 $$ if (NOT_COMPARE_MODE) -->Line_93 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " enumeration.")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_151 $$ out.print(" extends ")[ FD ]
Line_212 $$ if (field.simpleTypesString.indexOf(":short;") != -1) -->Line_214 $$ if (field.simpleTypesString.indexOf(":long;") != -1) [ CD ]
Line_163 $$ FieldDesc[] fields = td.fdMap.values().toArray(new FieldDesc[td.fdMap.size()])-->Line_167 $$ Arrays.sort(fields, new Comparator<FieldDesc>() [ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_112 $$ out.print("\t" + id.name + " (\"" + val + "\")")[ FD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_101 $$ boolean first = true[ CD ]
Line_11 $$ PrintWriter out = null-->Line_335 $$ out.print("(")[ FD ]
Line_13 $$ TreeSet<String> externalClasses = new TreeSet<String>()-->Line_46 $$ externalClasses.add("org.jetbrains.annotations.NotNull")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_298 $$ out.println("\t" + JDOC_CONT + "@return " + text + ".")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_100 $$ out.print(" [ FD ]
Line_149 $$ if (td.supers != null && td.supers.length > 0) -->Line_150 $$ if (!comma)[ CD ]
Line_328 $$ if (sbAnnotations.length() > 0)-->Line_329 $$ out.println(sbAnnotations)[ CD ]
Line_208 $$ if (field.simpleTypesString.indexOf(":int;") != -1) -->Line_210 $$ if (field.simpleTypesString.indexOf(":byte;") != -1) [ CD ]
Line_224 $$ for (int idx = 0; idx != -1; ) -->Line_226 $$ idx = field.simpleTypesString.indexOf(';', idx) + 1[ CD ]
Line_94 $$ if (AUTHOR != null)-->Line_95 $$ out.println(JDOC_CONT + AUTHOR)[ CD ]
Line_11 $$ PrintWriter out = null-->Line_327 $$ out.println("\t" + JDOC_CLOSE)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_100 $$ out.print(" [ FD ]
Line_52 $$ if (NOT_COMPARE_MODE) -->Line_53 $$ out.println("// Generated on " + new Date())[ CD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_331 $$ out.print("\t")[ CD ]
Line_144 $$ if (nsd.superClass != null) -->Line_146 $$ comma = true[ CD ]
Line_11 $$ PrintWriter out = null-->Line_96 $$ printDocumentation(out, td.documentation, JDOC_CONT)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_329 $$ out.println(sbAnnotations)[ FD ]
Line_193 $$ if (field.simpleTypesString.indexOf(":fully-qualified-classType;") != -1) -->Line_197 $$ if (field.simpleTypesString.indexOf(":ejb-linkType;") != -1) [ CD ]
Line_226 $$ idx = field.simpleTypesString.indexOf(';', idx) + 1-->Line_225 $$ simpleTypes.add(field.simpleTypesString.substring(idx))[ FD ]
Line_254 $$ if (newType != null && isList) -->Line_256 $$ if (newType != null) [ CD ]
Line_302 $$ if (td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_305 $$ if (field.required) [ CD ]
Line_11 $$ PrintWriter out = null-->Line_97 $$ out.println(JDOC_CLOSE)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_78 $$ out.println("import " + s + ";")[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_9 $$ final String stringClass = getStringClassName()[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_299 $$ out.println("\t" + JDOC_CLOSE)[ FD ]
Line_224 $$ for (int idx = 0; idx != -1; ) -->Line_225 $$ simpleTypes.add(field.simpleTypesString.substring(idx))[ CD ]
Line_11 $$ PrintWriter out = null-->Line_158 $$ out.print(aSuper.name)[ FD ]
Line_279 $$ if (field.clType == FieldDesc.BOOL) -->Line_280 $$ sbAnnotations.append((JB_OFF ? "//" : "") + "\t@SubTag (value = \"").append(tagName).append("\", indicator = true)")[ CD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_117 $$ if (text) [ CD ]
Line_277 $$ if (field.duplicateIndex >= 0) -->Line_279 $$ if (field.clType == FieldDesc.BOOL) [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_357 $$ out.println("();")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_357 $$ out.println("();")[ FD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_7 $$ final String typeQName = model.getNSDPrefix(td) + typeName[ CD ]
Line_13 $$ TreeSet<String> externalClasses = new TreeSet<String>()-->Line_29 $$ externalClasses.add(model.getNSDPrefix(tds) + tds.name)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_297 $$ printDocumentation(out, field.documentation, "\t" + JDOC_CONT)[ FD ]
Line_265 $$ if (isAttr && nameChanged) -->Line_267 $$ if (isList) [ CD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_335 $$ out.print("(")[ CD ]
Line_11 $$ PrintWriter out = null-->Line_173 $$ out.println("")[ FD ]
Line_84 $$ boolean text = false-->Line_87 $$ text = true[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_349 $$ out.println("\t" + JDOC_CLOSE)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_324 $$ out.println("\t" + JDOC_CONT + "Sets the value of the " + javaDocTagName + ".")[ FD ]
Line_288 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_291 $$ if (isList) [ CD ]
Line_192 $$ if (field.simpleTypesString != null) -->Line_193 $$ if (field.simpleTypesString.indexOf(":fully-qualified-classType;") != -1) [ CD ]
Line_128 $$ if (NOT_COMPARE_MODE) -->Line_129 $$ out.println(JDOC_OPEN)[ CD ]
Line_117 $$ if (text) -->Line_122 $$ out.println("\tpublic " + stringClass + " getValue() [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_95 $$ out.println(JDOC_CONT + AUTHOR)[ FD ]
Line_303 $$ if (sbAnnotations.length() > 0)-->Line_304 $$ out.println(sbAnnotations)[ CD ]
Line_43 $$ if (fd.clType < 0) -->Line_44 $$ externalClasses.add("java.util.List")[ CD ]
Line_11 $$ PrintWriter out = null-->Line_74 $$ out.println()[ FD ]
Line_11 $$ PrintWriter out = null-->Line_313 $$ out.print("get")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_118 $$ out.println(";")[ FD ]
Line_216 $$ if (field.simpleTypesString.indexOf(":float;") != -1) -->Line_218 $$ if (field.simpleTypesString.indexOf(":double;") != -1) [ CD ]
Line_14 $$ if (td.type != TypeDesc.TypeEnum.ENUM) -->Line_24 $$ if (td.supers != null) [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_158 $$ out.print(aSuper.name)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_58 $$ out.println("package " + pkgName + ";")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_312 $$ out.print(" ")[ FD ]
Line_117 $$ if (text) -->Line_121 $$ out.println("\tprivate " + typeName + "(" + stringClass + " value) [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_296 $$ out.println("\t" + JDOC_CONT + "Returns " + text + ".")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_154 $$ out.print(", ")[ FD ]
Line_272 $$ if (isBadTagName(tagName)) -->Line_273 $$ sbAnnotations.append((JB_OFF ? "//" : "") + "\t@SubTagList (\"").append(tagName).append("\")")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_347 $$ out.println("\t" + JDOC_CONT + "Adds new child to the list of " + javaDocTagName + ".")[ FD ]
Line_224 $$ for (int idx = 0; idx != -1; ) -->Line_225 $$ simpleTypes.add(field.simpleTypesString.substring(idx))[ FD ]
Line_214 $$ if (field.simpleTypesString.indexOf(":long;") != -1) -->Line_216 $$ if (field.simpleTypesString.indexOf(":float;") != -1) [ CD ]
Line_11 $$ PrintWriter out = null-->Line_342 $$ out.println(");")[ FD ]
Line_15 $$ if (nsd.imports != null) -->Line_17 $$ while (st.hasMoreTokens()) [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_337 $$ out.print((JB_OFF ? "" : "@NotNull "))[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_137 $$ out.println(JDOC_CONT + AUTHOR)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_92 $$ out.println(JDOC_OPEN)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_129 $$ out.println(JDOC_OPEN)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_140 $$ out.print("public interface " + typeName)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_314 $$ out.print(Util.capitalize(name))[ FD ]
Line_153 $$ if (comma) -->Line_156 $$ comma = true[ CD ]
Line_61 $$ if (td.type != TypeDesc.TypeEnum.ENUM) -->Line_63 $$ boolean external = false[ CD ]
Line_141 $$ if (nsd.superClass != null || (td.supers != null && td.supers.length > 1)) -->Line_149 $$ if (td.supers != null && td.supers.length > 0) [ CD ]
Line_226 $$ idx = field.simpleTypesString.indexOf(';', idx) + 1-->Line_224 $$ for (int idx = 0; idx != -1; ) [ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_353 $$ out.print("\t")[ FD ]
Line_143 $$ if (td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_144 $$ if (nsd.superClass != null) [ CD ]
Line_91 $$ if (NOT_COMPARE_MODE) -->Line_96 $$ printDocumentation(out, td.documentation, JDOC_CONT)[ CD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_126 $$ return[ CD ]
Line_128 $$ if (NOT_COMPARE_MODE) -->Line_136 $$ if (AUTHOR != null)[ CD ]
Line_224 $$ for (int idx = 0; idx != -1; ) -->Line_227 $$ if (idx == 0)[ FD ]
Line_111 $$ if (text) -->Line_114 $$ out.print("\t" + id.name)[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_309 $$ out.print("\t")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_58 $$ out.println("package " + pkgName + ";")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_340 $$ out.print(" ")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_320 $$ out.println("\t" + JDOC_OPEN)[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_122 $$ out.println("\tpublic " + stringClass + " getValue() [ FD ]
Line_267 $$ if (isList) -->Line_277 $$ if (field.duplicateIndex >= 0) [ CD ]
Line_11 $$ PrintWriter out = null-->Line_60 $$ out.println()[ FD ]
Line_128 $$ if (NOT_COMPARE_MODE) -->Line_130 $$ if (td.type == TypeDesc.TypeEnum.GROUP_INTERFACE) [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_125 $$ out.println("}")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_313 $$ out.print("get")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_353 $$ out.print("\t")[ FD ]
Line_61 $$ if (td.type != TypeDesc.TypeEnum.ENUM) -->Line_81 $$ out.println()[ CD ]
Line_52 $$ if (NOT_COMPARE_MODE) -->Line_54 $$ out.println("// DTD/Schema  :    " + nsd.name)[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_138 $$ out.println(JDOC_CLOSE)[ FD ]
Line_200 $$ if (field.simpleTypesString.indexOf(":pathType;") != -1) -->Line_201 $$ if (field.simpleTypesString.indexOf(":java-identifierType;") != -1) [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_297 $$ printDocumentation(out, field.documentation, "\t" + JDOC_CONT)[ FD ]
Line_11 $$ PrintWriter out = null-->Line_99 $$ out.print("public enum " + typeName + (text ? (JB_OFF ? "" : " implements com.intellij.util.xml.NamedEnum") : ""))[ FD ]
Line_263 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_265 $$ if (isAttr && nameChanged) [ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_124 $$ out.println()[ FD ]
Line_91 $$ if (NOT_COMPARE_MODE) -->Line_97 $$ out.println(JDOC_CLOSE)[ CD ]
Line_318 $$ if (field.clType == FieldDesc.SIMPLE) -->Line_342 $$ out.println(");")[ CD ]
Line_319 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_326 $$ out.println("\t" + JDOC_CONT + "@param " + paramName + " the new value to set")[ CD ]
Line_11 $$ PrintWriter out = null-->Line_107 $$ out.println("")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_326 $$ out.println("\t" + JDOC_CONT + "@param " + paramName + " the new value to set")[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_135 $$ printDocumentation(out, td.documentation, JDOC_CONT)[ FD ]
Line_65 $$ if (s.startsWith("java.")) -->Line_66 $$ javaLang = true[ CD ]
Line_11 $$ PrintWriter out = null-->Line_322 $$ out.println("\t" + JDOC_CONT + "Sets the list of " + javaDocTagName + ".")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_53 $$ out.println("// Generated on " + new Date())[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_93 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " enumeration.")[ FD ]
Line_11 $$ PrintWriter out = null-->Line_93 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " enumeration.")[ FD ]
Line_7 $$ final String typeQName = model.getNSDPrefix(td) + typeName-->Line_8 $$ final String pkgName = typeQName.lastIndexOf('.') > -1 ? typeQName.substring(0, typeQName.lastIndexOf('.')) : ""[ FD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_173 $$ out.println("")[ FD ]
Line_14 $$ if (td.type != TypeDesc.TypeEnum.ENUM) -->Line_15 $$ if (nsd.imports != null) [ CD ]
Line_11 $$ PrintWriter out = null-->Line_347 $$ out.println("\t" + JDOC_CONT + "Adds new child to the list of " + javaDocTagName + ".")[ FD ]
Line_130 $$ if (td.type == TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_131 $$ out.println(JDOC_CONT + td.xsNamespace + ":" + td.xsName + " model group interface.")[ CD ]
Line_224 $$ for (int idx = 0; idx != -1; ) -->Line_226 $$ idx = field.simpleTypesString.indexOf(';', idx) + 1[ FD ]
Line_164 $$ if (fields.length == 0) -->Line_165 $$ Util.logwarn("no fields in: " + td.xsName)[ CD ]
Line_336 $$ if (field.required) -->Line_337 $$ out.print((JB_OFF ? "" : "@NotNull "))[ CD ]
Line_39 $$ if (!pkgNameFD.equals(pkgName)) -->Line_40 $$ externalClasses.add(fd.contentQualifiedName)[ CD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_6 $$ final String typeName = td.name[ CD ]
Line_345 $$ if (NOT_COMPARE_MODE && td.type != TypeDesc.TypeEnum.GROUP_INTERFACE) -->Line_349 $$ out.println("\t" + JDOC_CLOSE)[ CD ]
Line_111 $$ if (text) -->Line_112 $$ out.print("\t" + id.name + " (\"" + val + "\")")[ CD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_125 $$ out.println("}")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_329 $$ out.println(sbAnnotations)[ FD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_84 $$ boolean text = false[ CD ]
Line_2 $$ public void generateClass(FileManager fileManager, TypeDesc td, ModelDesc model, File outDir, Set<String> simpleTypes) -->Line_370 $$ fileManager.releaseOutputFile(outFile)[ FD ]
Line_83 $$ if (td.type == TypeDesc.TypeEnum.ENUM) -->Line_124 $$ out.println()[ CD ]
Line_153 $$ if (comma) -->Line_154 $$ out.print(", ")[ CD ]
Line_105 $$ if (first) -->Line_107 $$ out.println("")[ CD ]
Line_51 $$ out = new PrintWriter(new FileWriter(outFile))-->Line_356 $$ out.print(Util.capitalize(field.elementName))[ FD ]
Line_11 $$ PrintWriter out = null-->Line_81 $$ out.println()[ FD ]
Line_11 $$ PrintWriter out = null-->Line_315 $$ out.println("();")[ FD ]
Line_17 $$ while (st.hasMoreTokens()) -->Line_18 $$ externalClasses.add(st.nextToken())[ CD ]
