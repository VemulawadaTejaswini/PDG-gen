Line_8 $$ final AntDomTarget antTarget = (AntDomTarget) domElement-->Line_18 $$ final XmlElement xmlElement = antTarget.getXmlElement()[ FD ]
Line_9 $$ final String description = antTarget.getDescription().getRawText()-->Line_43 $$ final AntDomElement.Role role = description.getUserData(AntDomElement.ROLE)[ FD ]
Line_4 $$ final PomTarget pomTarget = ((PomTargetPsiElement) element).getTarget()-->Line_5 $$ if (pomTarget instanceof DomTarget) [ FD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_14 $$ builder.append("Target")[ FD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_52 $$ return builder.toString()[ FD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_26 $$ return builder.append(" ").append(description).toString()[ FD ]
Line_19 $$ if (xmlElement != null) -->Line_21 $$ if (containingFile != null) [ CD ]
Line_34 $$ Type type = null-->Line_36 $$ type = description.getType()[ FD ]
Line_46 $$ if (role == AntDomElement.Role.TASK) -->Line_47 $$ builder.append("Task ")[ CD ]
Line_9 $$ final String description = antTarget.getDescription().getRawText()-->Line_41 $$ final String elemName = description.getName()[ FD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_47 $$ builder.append("Task ")[ FD ]
Line_42 $$ if (elemName != null) -->Line_43 $$ final AntDomElement.Role role = description.getUserData(AntDomElement.ROLE)[ CD ]
Line_2 $$ public String getQuickNavigateInfo(PsiElement element, PsiElement originalElement) -->Line_3 $$ if (element instanceof PomTargetPsiElement) [ CD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_23 $$ builder.append(" [").append(fileName).append("]")[ FD ]
Line_11 $$ final String targetName = antTarget.getName().getRawText()-->Line_15 $$ if (targetName != null) [ FD ]
Line_41 $$ final String elemName = description.getName()-->Line_42 $$ if (elemName != null) [ FD ]
Line_4 $$ final PomTarget pomTarget = ((PomTargetPsiElement) element).getTarget()-->Line_32 $$ if (pomTarget instanceof DomChildrenDescription) [ FD ]
Line_46 $$ if (role == AntDomElement.Role.TASK) -->Line_48 $$ if (role == AntDomElement.Role.DATA_TYPE) [ CD ]
Line_5 $$ if (pomTarget instanceof DomTarget) -->Line_6 $$ final DomElement domElement = ((DomTarget) pomTarget).getDomElement()[ CD ]
Line_6 $$ final DomElement domElement = ((DomTarget) pomTarget).getDomElement()-->Line_7 $$ if (domElement instanceof AntDomTarget) [ FD ]
Line_18 $$ final XmlElement xmlElement = antTarget.getXmlElement()-->Line_19 $$ if (xmlElement != null) [ FD ]
Line_19 $$ if (xmlElement != null) -->Line_20 $$ final PsiFile containingFile = xmlElement.getContainingFile()[ CD ]
Line_32 $$ if (pomTarget instanceof DomChildrenDescription) -->Line_40 $$ if (type instanceof Class && AntDomElement.class.isAssignableFrom(((Class) type))) [ CD ]
Line_20 $$ final PsiFile containingFile = xmlElement.getContainingFile()-->Line_21 $$ if (containingFile != null) [ FD ]
Line_20 $$ final PsiFile containingFile = xmlElement.getContainingFile()-->Line_22 $$ final String fileName = containingFile.getName()[ FD ]
Line_5 $$ if (pomTarget instanceof DomTarget) -->Line_32 $$ if (pomTarget instanceof DomChildrenDescription) [ CD ]
Line_15 $$ if (targetName != null) -->Line_16 $$ builder.append(" \"").append(targetName).append("\"")[ CD ]
Line_43 $$ final AntDomElement.Role role = description.getUserData(AntDomElement.ROLE)-->Line_46 $$ if (role == AntDomElement.Role.TASK) [ FD ]
Line_7 $$ if (domElement instanceof AntDomTarget) -->Line_8 $$ final AntDomTarget antTarget = (AntDomTarget) domElement[ CD ]
Line_7 $$ if (domElement instanceof AntDomTarget) -->Line_9 $$ final String description = antTarget.getDescription().getRawText()[ CD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_28 $$ StringBuilderSpinAllocator.dispose(builder)[ FD ]
Line_10 $$ if (description != null && description.length() > 0) -->Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()[ CD ]
Line_9 $$ final String description = antTarget.getDescription().getRawText()-->Line_36 $$ type = description.getType()[ FD ]
Line_9 $$ final String description = antTarget.getDescription().getRawText()-->Line_10 $$ if (description != null && description.length() > 0) [ FD ]
Line_8 $$ final AntDomTarget antTarget = (AntDomTarget) domElement-->Line_11 $$ final String targetName = antTarget.getName().getRawText()[ FD ]
Line_21 $$ if (containingFile != null) -->Line_23 $$ builder.append(" [").append(fileName).append("]")[ CD ]
Line_3 $$ if (element instanceof PomTargetPsiElement) -->Line_4 $$ final PomTarget pomTarget = ((PomTargetPsiElement) element).getTarget()[ CD ]
Line_10 $$ if (description != null && description.length() > 0) -->Line_11 $$ final String targetName = antTarget.getName().getRawText()[ CD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_16 $$ builder.append(" \"").append(targetName).append("\"")[ FD ]
Line_21 $$ if (containingFile != null) -->Line_22 $$ final String fileName = containingFile.getName()[ CD ]
Line_40 $$ if (type instanceof Class && AntDomElement.class.isAssignableFrom(((Class) type))) -->Line_41 $$ final String elemName = description.getName()[ CD ]
Line_42 $$ if (elemName != null) -->Line_44 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()[ CD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_54 $$ StringBuilderSpinAllocator.dispose(builder)[ FD ]
Line_2 $$ public String getQuickNavigateInfo(PsiElement element, PsiElement originalElement) -->Line_60 $$ return null[ CD ]
Line_43 $$ final AntDomElement.Role role = description.getUserData(AntDomElement.ROLE)-->Line_48 $$ if (role == AntDomElement.Role.DATA_TYPE) [ FD ]
Line_2 $$ public String getQuickNavigateInfo(PsiElement element, PsiElement originalElement) -->Line_3 $$ if (element instanceof PomTargetPsiElement) [ FD ]
Line_3 $$ if (element instanceof PomTargetPsiElement) -->Line_5 $$ if (pomTarget instanceof DomTarget) [ CD ]
Line_5 $$ if (pomTarget instanceof DomTarget) -->Line_7 $$ if (domElement instanceof AntDomTarget) [ CD ]
Line_8 $$ final AntDomTarget antTarget = (AntDomTarget) domElement-->Line_9 $$ final String description = antTarget.getDescription().getRawText()[ FD ]
Line_9 $$ final String description = antTarget.getDescription().getRawText()-->Line_26 $$ return builder.append(" ").append(description).toString()[ FD ]
Line_32 $$ if (pomTarget instanceof DomChildrenDescription) -->Line_34 $$ Type type = null[ CD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_49 $$ builder.append("Data structure ")[ FD ]
Line_22 $$ final String fileName = containingFile.getName()-->Line_23 $$ builder.append(" [").append(fileName).append("]")[ FD ]
Line_7 $$ if (domElement instanceof AntDomTarget) -->Line_10 $$ if (description != null && description.length() > 0) [ CD ]
Line_40 $$ if (type instanceof Class && AntDomElement.class.isAssignableFrom(((Class) type))) -->Line_42 $$ if (elemName != null) [ CD ]
Line_41 $$ final String elemName = description.getName()-->Line_51 $$ builder.append(elemName)[ FD ]
Line_18 $$ final XmlElement xmlElement = antTarget.getXmlElement()-->Line_20 $$ final PsiFile containingFile = xmlElement.getContainingFile()[ FD ]
Line_12 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_51 $$ builder.append(elemName)[ FD ]
Line_11 $$ final String targetName = antTarget.getName().getRawText()-->Line_16 $$ builder.append(" \"").append(targetName).append("\"")[ FD ]
Line_48 $$ if (role == AntDomElement.Role.DATA_TYPE) -->Line_49 $$ builder.append("Data structure ")[ CD ]
