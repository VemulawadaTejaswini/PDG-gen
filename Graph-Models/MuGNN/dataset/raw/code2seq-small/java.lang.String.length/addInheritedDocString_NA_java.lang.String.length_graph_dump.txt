Line_29 $$ if (inheritedDoc.length() > 1) -->Line_44 $$ notFound = false[ CD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_8 $$ final boolean isConstructor = PyNames.INIT.equals(methodName)[ CD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_9 $$ Iterable<PyClass> classes = pyClass.getAncestorClasses(null)[ FD ]
Line_27 $$ if (docstringElement != null) -->Line_29 $$ if (inheritedDoc.length() > 1) [ CD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_30 $$ myEpilog.addItem(BR).addItem(BR)[ CD ]
Line_15 $$ PyFunction inherited = null-->Line_22 $$ inherited = ancestor.findMethodByName(methodName, false, null)[ FD ]
Line_14 $$ PyStringLiteralExpression docstringElement = null-->Line_27 $$ if (docstringElement != null) [ FD ]
Line_4 $$ final String methodName = pyFunction.getName()-->Line_22 $$ inherited = ancestor.findMethodByName(methodName, false, null)[ FD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_40 $$ final ChainIterable<String> formatted = new ChainIterable<String>()[ CD ]
Line_4 $$ final String methodName = pyFunction.getName()-->Line_51 $$ addPredefinedMethodDoc(pyFunction, methodName)[ FD ]
Line_28 $$ final String inheritedDoc = docstringElement.getStringValue()-->Line_42 $$ addFormattedDocString(pyFunction, inheritedDoc, formatted, unformatted)[ FD ]
Line_41 $$ final ChainIterable<String> unformatted = new ChainIterable<String>()-->Line_42 $$ addFormattedDocString(pyFunction, inheritedDoc, formatted, unformatted)[ FD ]
Line_40 $$ final ChainIterable<String> formatted = new ChainIterable<String>()-->Line_42 $$ addFormattedDocString(pyFunction, inheritedDoc, formatted, unformatted)[ FD ]
Line_9 $$ Iterable<PyClass> classes = pyClass.getAncestorClasses(null)-->Line_11 $$ classes = new ChainIterable<PyClass>(pyClass).add(classes)[ FD ]
Line_18 $$ docstringElement = pyClass.getDocStringExpression()-->Line_19 $$ if (docstringElement != null) [ FD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_51 $$ addPredefinedMethodDoc(pyFunction, methodName)[ FD ]
Line_4 $$ final String methodName = pyFunction.getName()-->Line_37 $$ myEpilog.addItem(PyBundle.message("QDOC.copied.from.$0.$1", ancestorLink, methodName))[ FD ]
Line_18 $$ docstringElement = pyClass.getDocStringExpression()-->Line_25 $$ docstringElement = inherited.getDocStringExpression()[ FD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_32 $$ final String marker = (pyClass == ancestor) ? PythonDocumentationProvider.LINK_TYPE_CLASS : PythonDocumentationProvider.LINK_TYPE_PARENT[ CD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_10 $$ if (isConstructor) [ CD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_49 $$ if (notFound) [ CD ]
Line_14 $$ PyStringLiteralExpression docstringElement = null-->Line_28 $$ final String inheritedDoc = docstringElement.getStringValue()[ FD ]
Line_5 $$ if (pyClass == null || methodName == null) -->Line_6 $$ return[ CD ]
Line_13 $$ for (PyClass ancestor : classes) -->Line_31 $$ final String ancestorName = ancestor.getName()[ FD ]
Line_25 $$ docstringElement = inherited.getDocStringExpression()-->Line_28 $$ final String inheritedDoc = docstringElement.getStringValue()[ FD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_43 $$ myEpilog.addWith(TagCode, formatted).add(unformatted)[ CD ]
Line_40 $$ final ChainIterable<String> formatted = new ChainIterable<String>()-->Line_43 $$ myEpilog.addWith(TagCode, formatted).add(unformatted)[ FD ]
Line_49 $$ if (notFound) -->Line_50 $$ if (PyNames.UnderscoredAttributes.contains(methodName)) [ CD ]
Line_18 $$ docstringElement = pyClass.getDocStringExpression()-->Line_27 $$ if (docstringElement != null) [ FD ]
Line_18 $$ docstringElement = pyClass.getDocStringExpression()-->Line_28 $$ final String inheritedDoc = docstringElement.getStringValue()[ FD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_3 $$ boolean notFound = true[ CD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_4 $$ final String methodName = pyFunction.getName()[ FD ]
Line_15 $$ PyFunction inherited = null-->Line_24 $$ if (inherited != null) [ FD ]
Line_10 $$ if (isConstructor) -->Line_11 $$ classes = new ChainIterable<PyClass>(pyClass).add(classes)[ CD ]
Line_17 $$ if (isConstructor)-->Line_18 $$ docstringElement = pyClass.getDocStringExpression()[ CD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_18 $$ docstringElement = pyClass.getDocStringExpression()[ FD ]
Line_24 $$ if (inherited != null) -->Line_25 $$ docstringElement = inherited.getDocStringExpression()[ CD ]
Line_14 $$ PyStringLiteralExpression docstringElement = null-->Line_19 $$ if (docstringElement != null) [ FD ]
Line_14 $$ PyStringLiteralExpression docstringElement = null-->Line_25 $$ docstringElement = inherited.getDocStringExpression()[ FD ]
Line_25 $$ docstringElement = inherited.getDocStringExpression()-->Line_27 $$ if (docstringElement != null) [ FD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_39 $$ myEpilog.addItem(BR).addItem(BR)[ CD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_31 $$ final String ancestorName = ancestor.getName()[ CD ]
Line_41 $$ final ChainIterable<String> unformatted = new ChainIterable<String>()-->Line_43 $$ myEpilog.addWith(TagCode, formatted).add(unformatted)[ FD ]
Line_13 $$ for (PyClass ancestor : classes) -->Line_22 $$ inherited = ancestor.findMethodByName(methodName, false, null)[ FD ]
Line_50 $$ if (PyNames.UnderscoredAttributes.contains(methodName)) -->Line_51 $$ addPredefinedMethodDoc(pyFunction, methodName)[ CD ]
Line_3 $$ boolean notFound = true-->Line_44 $$ notFound = false[ FD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_9 $$ Iterable<PyClass> classes = pyClass.getAncestorClasses(null)[ CD ]
Line_19 $$ if (docstringElement != null) -->Line_20 $$ isFromClass = true[ CD ]
Line_15 $$ PyFunction inherited = null-->Line_25 $$ docstringElement = inherited.getDocStringExpression()[ FD ]
Line_4 $$ final String methodName = pyFunction.getName()-->Line_8 $$ final boolean isConstructor = PyNames.INIT.equals(methodName)[ FD ]
Line_22 $$ inherited = ancestor.findMethodByName(methodName, false, null)-->Line_25 $$ docstringElement = inherited.getDocStringExpression()[ FD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_4 $$ final String methodName = pyFunction.getName()[ CD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_41 $$ final ChainIterable<String> unformatted = new ChainIterable<String>()[ CD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_5 $$ if (pyClass == null || methodName == null) [ CD ]
Line_19 $$ if (docstringElement != null) -->Line_22 $$ inherited = ancestor.findMethodByName(methodName, false, null)[ CD ]
Line_28 $$ final String inheritedDoc = docstringElement.getStringValue()-->Line_29 $$ if (inheritedDoc.length() > 1) [ FD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_33 $$ final String ancestorLink = $().addWith(new LinkWrapper(marker + ancestorName), $(ancestorName)).toString()[ CD ]
Line_14 $$ PyStringLiteralExpression docstringElement = null-->Line_18 $$ docstringElement = pyClass.getDocStringExpression()[ FD ]
Line_4 $$ final String methodName = pyFunction.getName()-->Line_50 $$ if (PyNames.UnderscoredAttributes.contains(methodName)) [ FD ]
Line_16 $$ boolean isFromClass = false-->Line_20 $$ isFromClass = true[ FD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_34 $$ if (isFromClass) [ CD ]
Line_33 $$ final String ancestorLink = $().addWith(new LinkWrapper(marker + ancestorName), $(ancestorName)).toString()-->Line_37 $$ myEpilog.addItem(PyBundle.message("QDOC.copied.from.$0.$1", ancestorLink, methodName))[ FD ]
Line_34 $$ if (isFromClass) -->Line_37 $$ myEpilog.addItem(PyBundle.message("QDOC.copied.from.$0.$1", ancestorLink, methodName))[ CD ]
Line_27 $$ if (docstringElement != null) -->Line_28 $$ final String inheritedDoc = docstringElement.getStringValue()[ CD ]
Line_31 $$ final String ancestorName = ancestor.getName()-->Line_33 $$ final String ancestorLink = $().addWith(new LinkWrapper(marker + ancestorName), $(ancestorName)).toString()[ FD ]
Line_33 $$ final String ancestorLink = $().addWith(new LinkWrapper(marker + ancestorName), $(ancestorName)).toString()-->Line_35 $$ myEpilog.addItem(PyBundle.message("QDOC.copied.from.class.$0", ancestorLink))[ FD ]
Line_34 $$ if (isFromClass) -->Line_35 $$ myEpilog.addItem(PyBundle.message("QDOC.copied.from.class.$0", ancestorLink))[ CD ]
Line_2 $$ private void addInheritedDocString(@NotNull final PyFunction pyFunction, @Nullable final PyClass pyClass) -->Line_42 $$ addFormattedDocString(pyFunction, inheritedDoc, formatted, unformatted)[ FD ]
Line_22 $$ inherited = ancestor.findMethodByName(methodName, false, null)-->Line_24 $$ if (inherited != null) [ FD ]
Line_29 $$ if (inheritedDoc.length() > 1) -->Line_42 $$ addFormattedDocString(pyFunction, inheritedDoc, formatted, unformatted)[ CD ]
