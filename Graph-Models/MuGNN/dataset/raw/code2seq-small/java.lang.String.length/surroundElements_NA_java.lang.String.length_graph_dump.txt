Line_12 $$ String linePrefix = commenter.getLineCommentPrefix()-->Line_13 $$ if (linePrefix == null)[ FD ]
Line_21 $$ int delta = 0-->Line_32 $$ delta += endString.length()[ FD ]
Line_17 $$ final Document document = editor.getDocument()-->Line_35 $$ RangeMarker rangeMarkerToSelect = document.createRangeMarker(rangeToSelect.shiftRight(prefixLength))[ FD ]
Line_27 $$ rangeToSelect = TextRange.from(startOffset + descPos, DEFAULT_DESC_TEXT.length())-->Line_39 $$ rangeToSelect = TextRange.create(rangeMarkerToSelect.getStartOffset(), rangeMarkerToSelect.getEndOffset())[ FD ]
Line_32 $$ delta += endString.length()-->Line_34 $$ delta += startString.length()[ FD ]
Line_9 $$ Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(language)-->Line_12 $$ String linePrefix = commenter.getLineCommentPrefix()[ FD ]
Line_17 $$ final Document document = editor.getDocument()-->Line_18 $$ final int startLineNumber = document.getLineNumber(startOffset)[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_30 $$ String endString = "\n" + linePrefix + myProvider.getEndString()[ CD ]
Line_5 $$ PsiElement firstElement = elements[0]-->Line_7 $$ PsiFile psiFile = firstElement.getContainingFile()[ FD ]
Line_23 $$ String startText = myProvider.getStartString()-->Line_24 $$ int descPos = startText.indexOf("?")[ FD ]
Line_8 $$ Language language = psiFile.getLanguage()-->Line_37 $$ adjustLineIndent(project, psiFile, language, TextRange.from(endOffset + delta - endString.length(), endString.length()))[ FD ]
Line_30 $$ String endString = "\n" + linePrefix + myProvider.getEndString()-->Line_37 $$ adjustLineIndent(project, psiFile, language, TextRange.from(endOffset + delta - endString.length(), endString.length()))[ FD ]
Line_25 $$ if (descPos >= 0) -->Line_26 $$ startText = startText.replace("?", DEFAULT_DESC_TEXT)[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_36 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_10 $$ if (commenter == null)[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_35 $$ RangeMarker rangeMarkerToSelect = document.createRangeMarker(rangeToSelect.shiftRight(prefixLength))[ CD ]
Line_16 $$ int startOffset = firstElement.getTextRange().getStartOffset()-->Line_22 $$ TextRange rangeToSelect = TextRange.create(startOffset, startOffset)[ FD ]
Line_21 $$ int delta = 0-->Line_34 $$ delta += startString.length()[ FD ]
Line_6 $$ PsiElement lastElement = elements[elements.length - 1]-->Line_20 $$ int endOffset = lastElement.getTextRange().getEndOffset()[ FD ]
Line_7 $$ PsiFile psiFile = firstElement.getContainingFile()-->Line_8 $$ Language language = psiFile.getLanguage()[ FD ]
Line_8 $$ Language language = psiFile.getLanguage()-->Line_38 $$ adjustLineIndent(project, psiFile, language, TextRange.from(startOffset, startString.length()))[ FD ]
Line_9 $$ Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(language)-->Line_10 $$ if (commenter == null)[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_31 $$ document.insertString(endOffset, endString)[ CD ]
Line_35 $$ RangeMarker rangeMarkerToSelect = document.createRangeMarker(rangeToSelect.shiftRight(prefixLength))-->Line_39 $$ rangeToSelect = TextRange.create(rangeMarkerToSelect.getStartOffset(), rangeMarkerToSelect.getEndOffset())[ FD ]
Line_15 $$ int prefixLength = linePrefix.length()-->Line_35 $$ RangeMarker rangeMarkerToSelect = document.createRangeMarker(rangeToSelect.shiftRight(prefixLength))[ FD ]
Line_27 $$ rangeToSelect = TextRange.from(startOffset + descPos, DEFAULT_DESC_TEXT.length())-->Line_35 $$ RangeMarker rangeMarkerToSelect = document.createRangeMarker(rangeToSelect.shiftRight(prefixLength))[ FD ]
Line_22 $$ TextRange rangeToSelect = TextRange.create(startOffset, startOffset)-->Line_35 $$ RangeMarker rangeMarkerToSelect = document.createRangeMarker(rangeToSelect.shiftRight(prefixLength))[ FD ]
Line_29 $$ String startString = linePrefix + startText + "\n" + startIndent-->Line_33 $$ document.insertString(startOffset, startString)[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_39 $$ rangeToSelect = TextRange.create(rangeMarkerToSelect.getStartOffset(), rangeMarkerToSelect.getEndOffset())[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_16 $$ int startOffset = firstElement.getTextRange().getStartOffset()[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_3 $$ if (elements.length == 0)[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_38 $$ adjustLineIndent(project, psiFile, language, TextRange.from(startOffset, startString.length()))[ FD ]
Line_7 $$ PsiFile psiFile = firstElement.getContainingFile()-->Line_37 $$ adjustLineIndent(project, psiFile, language, TextRange.from(endOffset + delta - endString.length(), endString.length()))[ FD ]
Line_16 $$ int startOffset = firstElement.getTextRange().getStartOffset()-->Line_38 $$ adjustLineIndent(project, psiFile, language, TextRange.from(startOffset, startString.length()))[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_41 $$ return rangeToSelect[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_15 $$ int prefixLength = linePrefix.length()[ CD ]
Line_30 $$ String endString = "\n" + linePrefix + myProvider.getEndString()-->Line_31 $$ document.insertString(endOffset, endString)[ FD ]
Line_30 $$ String endString = "\n" + linePrefix + myProvider.getEndString()-->Line_32 $$ delta += endString.length()[ FD ]
Line_29 $$ String startString = linePrefix + startText + "\n" + startIndent-->Line_38 $$ adjustLineIndent(project, psiFile, language, TextRange.from(startOffset, startString.length()))[ FD ]
Line_16 $$ int startOffset = firstElement.getTextRange().getStartOffset()-->Line_18 $$ final int startLineNumber = document.getLineNumber(startOffset)[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_7 $$ PsiFile psiFile = firstElement.getContainingFile()[ CD ]
Line_20 $$ int endOffset = lastElement.getTextRange().getEndOffset()-->Line_31 $$ document.insertString(endOffset, endString)[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_34 $$ delta += startString.length()[ CD ]
Line_3 $$ if (elements.length == 0)-->Line_4 $$ return null[ CD ]
Line_23 $$ String startText = myProvider.getStartString()-->Line_26 $$ startText = startText.replace("?", DEFAULT_DESC_TEXT)[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_12 $$ String linePrefix = commenter.getLineCommentPrefix()[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_38 $$ adjustLineIndent(project, psiFile, language, TextRange.from(startOffset, startString.length()))[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_9 $$ Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(language)[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_17 $$ final Document document = editor.getDocument()[ FD ]
Line_24 $$ int descPos = startText.indexOf("?")-->Line_25 $$ if (descPos >= 0) [ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_23 $$ String startText = myProvider.getStartString()[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_13 $$ if (linePrefix == null)[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_19 $$ final String startIndent = document.getText(new TextRange(document.getLineStartOffset(startLineNumber), startOffset))[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_37 $$ adjustLineIndent(project, psiFile, language, TextRange.from(endOffset + delta - endString.length(), endString.length()))[ CD ]
Line_17 $$ final Document document = editor.getDocument()-->Line_36 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_12 $$ String linePrefix = commenter.getLineCommentPrefix()-->Line_15 $$ int prefixLength = linePrefix.length()[ FD ]
Line_7 $$ PsiFile psiFile = firstElement.getContainingFile()-->Line_38 $$ adjustLineIndent(project, psiFile, language, TextRange.from(startOffset, startString.length()))[ FD ]
Line_5 $$ PsiElement firstElement = elements[0]-->Line_16 $$ int startOffset = firstElement.getTextRange().getStartOffset()[ FD ]
Line_17 $$ final Document document = editor.getDocument()-->Line_31 $$ document.insertString(endOffset, endString)[ FD ]
Line_13 $$ if (linePrefix == null)-->Line_14 $$ return null[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_20 $$ int endOffset = lastElement.getTextRange().getEndOffset()[ CD ]
Line_17 $$ final Document document = editor.getDocument()-->Line_19 $$ final String startIndent = document.getText(new TextRange(document.getLineStartOffset(startLineNumber), startOffset))[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_22 $$ TextRange rangeToSelect = TextRange.create(startOffset, startOffset)[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_36 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_5 $$ PsiElement firstElement = elements[0][ CD ]
Line_25 $$ if (descPos >= 0) -->Line_27 $$ rangeToSelect = TextRange.from(startOffset + descPos, DEFAULT_DESC_TEXT.length())[ CD ]
Line_8 $$ Language language = psiFile.getLanguage()-->Line_9 $$ Commenter commenter = LanguageCommenters.INSTANCE.forLanguage(language)[ FD ]
Line_35 $$ RangeMarker rangeMarkerToSelect = document.createRangeMarker(rangeToSelect.shiftRight(prefixLength))-->Line_40 $$ rangeMarkerToSelect.dispose()[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_18 $$ final int startLineNumber = document.getLineNumber(startOffset)[ CD ]
Line_22 $$ TextRange rangeToSelect = TextRange.create(startOffset, startOffset)-->Line_39 $$ rangeToSelect = TextRange.create(rangeMarkerToSelect.getStartOffset(), rangeMarkerToSelect.getEndOffset())[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_32 $$ delta += endString.length()[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_21 $$ int delta = 0[ CD ]
Line_29 $$ String startString = linePrefix + startText + "\n" + startIndent-->Line_34 $$ delta += startString.length()[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_40 $$ rangeMarkerToSelect.dispose()[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_6 $$ PsiElement lastElement = elements[elements.length - 1][ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_24 $$ int descPos = startText.indexOf("?")[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_33 $$ document.insertString(startOffset, startString)[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_29 $$ String startString = linePrefix + startText + "\n" + startIndent[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_8 $$ Language language = psiFile.getLanguage()[ CD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_17 $$ final Document document = editor.getDocument()[ CD ]
Line_10 $$ if (commenter == null)-->Line_11 $$ return null[ CD ]
Line_18 $$ final int startLineNumber = document.getLineNumber(startOffset)-->Line_19 $$ final String startIndent = document.getText(new TextRange(document.getLineStartOffset(startLineNumber), startOffset))[ FD ]
Line_17 $$ final Document document = editor.getDocument()-->Line_33 $$ document.insertString(startOffset, startString)[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_37 $$ adjustLineIndent(project, psiFile, language, TextRange.from(endOffset + delta - endString.length(), endString.length()))[ FD ]
Line_2 $$ public TextRange surroundElements(@NotNull Project project, @NotNull Editor editor, @NotNull PsiElement[] elements) throws IncorrectOperationException -->Line_25 $$ if (descPos >= 0) [ CD ]
Line_16 $$ int startOffset = firstElement.getTextRange().getStartOffset()-->Line_33 $$ document.insertString(startOffset, startString)[ FD ]
Line_22 $$ TextRange rangeToSelect = TextRange.create(startOffset, startOffset)-->Line_27 $$ rangeToSelect = TextRange.from(startOffset + descPos, DEFAULT_DESC_TEXT.length())[ FD ]
