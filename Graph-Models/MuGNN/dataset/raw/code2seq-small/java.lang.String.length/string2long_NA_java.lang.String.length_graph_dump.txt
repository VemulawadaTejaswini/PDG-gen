Line_6 $$ if (Character.isDigit(lastchar))-->Line_7 $$ return Long.parseLong(s)[ CD ]
Line_6 $$ if (Character.isDigit(lastchar))-->Line_15 $$ long num = Long.parseLong(s.substring(0, lastpos))[ CD ]
Line_6 $$ if (Character.isDigit(lastchar))-->Line_9 $$ long prefix[ CD ]
Line_2 $$ public static long string2long(String s) -->Line_7 $$ return Long.parseLong(s)[ FD ]
Line_2 $$ public static long string2long(String s) -->Line_5 $$ final char lastchar = s.charAt(lastpos)[ FD ]
Line_5 $$ final char lastchar = s.charAt(lastpos)-->Line_11 $$ prefix = TraditionalBinaryPrefix.valueOf(lastchar).value[ FD ]
Line_5 $$ final char lastchar = s.charAt(lastpos)-->Line_6 $$ if (Character.isDigit(lastchar))[ FD ]
Line_3 $$ s = s.trim()-->Line_7 $$ return Long.parseLong(s)[ FD ]
Line_4 $$ final int lastpos = s.length() - 1-->Line_15 $$ long num = Long.parseLong(s.substring(0, lastpos))[ FD ]
Line_3 $$ s = s.trim()-->Line_4 $$ final int lastpos = s.length() - 1[ FD ]
Line_6 $$ if (Character.isDigit(lastchar))-->Line_19 $$ return num * prefix[ CD ]
Line_2 $$ public static long string2long(String s) -->Line_3 $$ s = s.trim()[ CD ]
Line_3 $$ s = s.trim()-->Line_15 $$ long num = Long.parseLong(s.substring(0, lastpos))[ FD ]
Line_6 $$ if (Character.isDigit(lastchar))-->Line_16 $$ if (num > (Long.MAX_VALUE / prefix) || num < (Long.MIN_VALUE / prefix)) [ CD ]
Line_2 $$ public static long string2long(String s) -->Line_4 $$ final int lastpos = s.length() - 1[ FD ]
Line_2 $$ public static long string2long(String s) -->Line_5 $$ final char lastchar = s.charAt(lastpos)[ CD ]
Line_2 $$ public static long string2long(String s) -->Line_3 $$ s = s.trim()[ FD ]
Line_2 $$ public static long string2long(String s) -->Line_15 $$ long num = Long.parseLong(s.substring(0, lastpos))[ FD ]
Line_2 $$ public static long string2long(String s) -->Line_4 $$ final int lastpos = s.length() - 1[ CD ]
Line_9 $$ long prefix-->Line_11 $$ prefix = TraditionalBinaryPrefix.valueOf(lastchar).value[ FD ]
Line_2 $$ public static long string2long(String s) -->Line_6 $$ if (Character.isDigit(lastchar))[ CD ]
Line_3 $$ s = s.trim()-->Line_5 $$ final char lastchar = s.charAt(lastpos)[ FD ]
Line_4 $$ final int lastpos = s.length() - 1-->Line_5 $$ final char lastchar = s.charAt(lastpos)[ FD ]
