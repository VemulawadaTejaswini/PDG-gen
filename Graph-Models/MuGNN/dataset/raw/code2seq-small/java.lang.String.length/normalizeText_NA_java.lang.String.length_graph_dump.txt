Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_14 $$ builder.append(trimSuffix(line)).append("\n")[ FD ]
Line_9 $$ if (!inAuxInfo && (line.startsWith("JNI global references") || line.trim().equals("Heap"))) -->Line_10 $$ builder.append("\n")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_21 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) [ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_4 $$ text = text.replaceAll("(\\S[ \\t\\x0B\\f\\r]+)(at\\s+)", "$1\n$2")[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_4 $$ text = text.replaceAll("(\\S[ \\t\\x0B\\f\\r]+)(at\\s+)", "$1\n$2")[ CD ]
Line_7 $$ boolean inAuxInfo = false-->Line_11 $$ inAuxInfo = true[ FD ]
Line_31 $$ if (lastLine.toString().matches("\\s*at") || ContainerUtil.or(IMPORTANT_THREAD_DUMP_WORDS, new Condition<String>() -->Line_37 $$ builder.append(" ")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_10 $$ builder.append("\n")[ FD ]
Line_8 $$ for (final String line : lines) -->Line_21 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) [ FD ]
Line_6 $$ boolean first = true-->Line_27 $$ first = false[ FD ]
Line_13 $$ if (inAuxInfo) -->Line_14 $$ builder.append(trimSuffix(line)).append("\n")[ CD ]
Line_8 $$ for (final String line : lines) -->Line_17 $$ if (line.startsWith("at breakpoint")) [ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_5 $$ String[] lines = text.split("\n")[ FD ]
Line_7 $$ boolean inAuxInfo = false-->Line_9 $$ if (!inAuxInfo && (line.startsWith("JNI global references") || line.trim().equals("Heap"))) [ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_29 $$ CharSequence lastLine = i == -1 ? builder : builder.subSequence(i + 1, builder.length())[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_28 $$ int i = builder.lastIndexOf("\n")[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_3 $$ StringBuilder builder = new StringBuilder(text.length())[ CD ]
Line_21 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) -->Line_24 $$ if (line.startsWith("\""))[ CD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_6 $$ boolean first = true[ CD ]
Line_17 $$ if (line.startsWith("at breakpoint")) -->Line_18 $$ builder.append(" ").append(trimSuffix(line))[ CD ]
Line_9 $$ if (!inAuxInfo && (line.startsWith("JNI global references") || line.trim().equals("Heap"))) -->Line_11 $$ inAuxInfo = true[ CD ]
Line_29 $$ CharSequence lastLine = i == -1 ? builder : builder.subSequence(i + 1, builder.length())-->Line_30 $$ if (!line.matches("\\s+.*") && lastLine.length() > 0) [ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_42 $$ return builder.toString()[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_40 $$ builder.append(trimSuffix(line))[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_42 $$ return builder.toString()[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_7 $$ boolean inAuxInfo = false[ CD ]
Line_21 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) -->Line_22 $$ if (!StringUtil.endsWith(builder, "\n"))[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_25 $$ builder.append("\n")[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_37 $$ builder.append(" ")[ FD ]
Line_8 $$ for (final String line : lines) -->Line_14 $$ builder.append(trimSuffix(line)).append("\n")[ FD ]
Line_31 $$ if (lastLine.toString().matches("\\s*at") || ContainerUtil.or(IMPORTANT_THREAD_DUMP_WORDS, new Condition<String>() -->Line_34 $$ return line.startsWith(word)[ FD ]
Line_31 $$ if (lastLine.toString().matches("\\s*at") || ContainerUtil.or(IMPORTANT_THREAD_DUMP_WORDS, new Condition<String>() -->Line_34 $$ return line.startsWith(word)[ CD ]
Line_22 $$ if (!StringUtil.endsWith(builder, "\n"))-->Line_23 $$ builder.append("\n")[ CD ]
Line_8 $$ for (final String line : lines) -->Line_30 $$ if (!line.matches("\\s+.*") && lastLine.length() > 0) [ FD ]
Line_8 $$ for (final String line : lines) -->Line_18 $$ builder.append(" ").append(trimSuffix(line))[ FD ]
Line_8 $$ for (final String line : lines) -->Line_40 $$ builder.append(trimSuffix(line))[ FD ]
Line_30 $$ if (!line.matches("\\s+.*") && lastLine.length() > 0) -->Line_31 $$ if (lastLine.toString().matches("\\s*at") || ContainerUtil.or(IMPORTANT_THREAD_DUMP_WORDS, new Condition<String>() [ CD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_3 $$ StringBuilder builder = new StringBuilder(text.length())[ FD ]
Line_8 $$ for (final String line : lines) -->Line_24 $$ if (line.startsWith("\""))[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_22 $$ if (!StringUtil.endsWith(builder, "\n"))[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_5 $$ String[] lines = text.split("\n")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_23 $$ builder.append("\n")[ FD ]
Line_8 $$ for (final String line : lines) -->Line_9 $$ if (!inAuxInfo && (line.startsWith("JNI global references") || line.trim().equals("Heap"))) [ FD ]
Line_24 $$ if (line.startsWith("\""))-->Line_25 $$ builder.append("\n")[ CD ]
Line_29 $$ CharSequence lastLine = i == -1 ? builder : builder.subSequence(i + 1, builder.length())-->Line_31 $$ if (lastLine.toString().matches("\\s*at") || ContainerUtil.or(IMPORTANT_THREAD_DUMP_WORDS, new Condition<String>() [ FD ]
Line_8 $$ for (final String line : lines) -->Line_34 $$ return line.startsWith(word)[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_18 $$ builder.append(" ").append(trimSuffix(line))[ FD ]
Line_6 $$ boolean first = true-->Line_21 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) [ FD ]
