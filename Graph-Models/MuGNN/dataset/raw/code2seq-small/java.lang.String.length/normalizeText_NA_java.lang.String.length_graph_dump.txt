Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_15 $$ builder.append(trimSuffix(line)).append("\n")[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_3 $$ StringBuilder builder = new StringBuilder(text.length())[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_47 $$ return builder.toString()[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_42 $$ builder.append(" ")[ FD ]
Line_8 $$ for (final String line : lines) -->Line_33 $$ if (!line.matches("\\s+.*") && lastLine.length() > 0) [ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_25 $$ builder.append("\n")[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_45 $$ builder.append(trimSuffix(line))[ FD ]
Line_6 $$ boolean first = true-->Line_30 $$ first = false[ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_23 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) [ FD ]
Line_34 $$ if (//separate 'at' from filename-->Line_39 $$ return line.startsWith(word)[ CD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_6 $$ boolean first = true[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_32 $$ CharSequence lastLine = i == -1 ? builder : builder.subSequence(i + 1, builder.length())[ FD ]
Line_23 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) -->Line_24 $$ if (!StringUtil.endsWith(builder, "\n"))[ CD ]
Line_8 $$ for (final String line : lines) -->Line_23 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) [ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_4 $$ text = text.replaceAll("(\\S[ \\t\\x0B\\f\\r]+)(at\\s+)", "$1\n$2")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_31 $$ int i = builder.lastIndexOf("\n")[ FD ]
Line_8 $$ for (final String line : lines) -->Line_45 $$ builder.append(trimSuffix(line))[ FD ]
Line_8 $$ for (final String line : lines) -->Line_15 $$ builder.append(trimSuffix(line)).append("\n")[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_7 $$ boolean inAuxInfo = false[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_24 $$ if (!StringUtil.endsWith(builder, "\n"))[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_47 $$ return builder.toString()[ CD ]
Line_8 $$ for (final String line : lines) -->Line_18 $$ if (line.startsWith("at breakpoint")) [ FD ]
Line_14 $$ if (inAuxInfo) -->Line_15 $$ builder.append(trimSuffix(line)).append("\n")[ CD ]
Line_32 $$ CharSequence lastLine = i == -1 ? builder : builder.subSequence(i + 1, builder.length())-->Line_33 $$ if (!line.matches("\\s+.*") && lastLine.length() > 0) [ FD ]
Line_6 $$ boolean first = true-->Line_23 $$ if (!first && (mustHaveNewLineBefore(line) || StringUtil.endsWith(builder, ")"))) [ FD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_11 $$ builder.append("\n")[ FD ]
Line_34 $$ if (//separate 'at' from filename-->Line_42 $$ builder.append(" ")[ CD ]
Line_33 $$ if (!line.matches("\\s+.*") && lastLine.length() > 0) -->Line_34 $$ if (//separate 'at' from filename[ CD ]
Line_7 $$ boolean inAuxInfo = false-->Line_12 $$ inAuxInfo = true[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_4 $$ text = text.replaceAll("(\\S[ \\t\\x0B\\f\\r]+)(at\\s+)", "$1\n$2")[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_5 $$ String[] lines = text.split("\n")[ FD ]
Line_32 $$ CharSequence lastLine = i == -1 ? builder : builder.subSequence(i + 1, builder.length())-->Line_34 $$ if (//separate 'at' from filename[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_5 $$ String[] lines = text.split("\n")[ CD ]
Line_3 $$ StringBuilder builder = new StringBuilder(text.length())-->Line_28 $$ builder.append("\n")[ FD ]
Line_34 $$ if (//separate 'at' from filename-->Line_39 $$ return line.startsWith(word)[ FD ]
Line_2 $$ public static String normalizeText(@NonNls String text) -->Line_3 $$ StringBuilder builder = new StringBuilder(text.length())[ FD ]
Line_8 $$ for (final String line : lines) -->Line_39 $$ return line.startsWith(word)[ FD ]
Line_24 $$ if (!StringUtil.endsWith(builder, "\n"))-->Line_25 $$ builder.append("\n")[ CD ]
