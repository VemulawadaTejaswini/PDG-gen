Line_52 $$ InputStream unbufMirrorIn = NetUtils.getInputStream(mirrorSock)-->Line_54 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(mirrorSock, unbufMirrorOut, unbufMirrorIn, keyFactory, blockToken, targets[0])[ FD ]
Line_27 $$ String firstBadLink = ""-->Line_93 $$ BlockOpResponseProto.newBuilder().setStatus(mirrorInStatus).setFirstBadLink(firstBadLink).build().writeDelimitedTo(replyOut)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_23 $$ DataOutputStream mirrorOut = null[ CD ]
Line_110 $$ if (isDatanode || stage == BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) -->Line_112 $$ LOG.info("Received " + block + " src: " + remoteAddress + " dest: " + localAddress + " of size " + block.getNumBytes())[ CD ]
Line_17 $$ if (block.getNumBytes() == 0) -->Line_18 $$ block.setNumBytes(dataXceiverServer.estimateBlockSize)[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_11 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_7 $$ final boolean isTransfer = stage == BlockConstructionStage.TRANSFER_RBW || stage == BlockConstructionStage.TRANSFER_FINALIZED-->Line_8 $$ if (isTransfer && targets.length > 0) [ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_7 $$ final boolean isTransfer = stage == BlockConstructionStage.TRANSFER_RBW || stage == BlockConstructionStage.TRANSFER_FINALIZED[ CD ]
Line_61 $$ if (isClient) -->Line_65 $$ if (LOG.isDebugEnabled() || mirrorInStatus != SUCCESS) [ CD ]
Line_70 $$ if (isClient) -->Line_71 $$ BlockOpResponseProto.newBuilder().setStatus(ERROR).setFirstBadLink(targets[0].getXferAddr()).build().writeDelimitedTo(replyOut)[ CD ]
Line_37 $$ if (targets.length > 0) -->Line_39 $$ mirrorNode = targets[0].getXferAddr(connectToDnViaHostname)[ CD ]
Line_81 $$ if (isClient) -->Line_85 $$ LOG.info(datanode + ":Exception transfering " + block + " to mirror " + mirrorNode + "- continuing without the mirror", e)[ CD ]
Line_25 $$ Socket mirrorSock = null-->Line_80 $$ mirrorSock = null[ FD ]
Line_24 $$ DataInputStream mirrorIn = null-->Line_58 $$ mirrorIn = new DataInputStream(unbufMirrorIn)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_16 $$ final ExtendedBlock originalBlock = new ExtendedBlock(block)[ CD ]
Line_89 $$ if (isClient && !isTransfer) -->Line_93 $$ BlockOpResponseProto.newBuilder().setStatus(mirrorInStatus).setFirstBadLink(firstBadLink).build().writeDelimitedTo(replyOut)[ CD ]
Line_26 $$ String mirrorNode = null-->Line_43 $$ mirrorTarget = NetUtils.createSocketAddr(mirrorNode)[ FD ]
Line_33 $$ storageUuid = blockReceiver.getStorageUuid()-->Line_35 $$ storageUuid = datanode.data.recoverClose(block, latestGenerationStamp, minBytesRcvd)[ FD ]
Line_37 $$ if (targets.length > 0) -->Line_38 $$ InetSocketAddress mirrorTarget = null[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_29 $$ final String storageUuid[ CD ]
Line_65 $$ if (LOG.isDebugEnabled() || mirrorInStatus != SUCCESS) -->Line_66 $$ LOG.info("Datanode " + targets.length + " got response for connect ack " + " from downstream datanode with firstbadlink as " + firstBadLink)[ CD ]
Line_96 $$ if (blockReceiver != null) -->Line_97 $$ String mirrorAddr = (mirrorSock == null) ? null : mirrorNode[ CD ]
Line_33 $$ storageUuid = blockReceiver.getStorageUuid()-->Line_111 $$ datanode.closeBlock(block, DataNode.EMPTY_DEL_HINT, storageUuid)[ FD ]
Line_24 $$ DataInputStream mirrorIn = null-->Line_119 $$ IOUtils.closeStream(mirrorIn)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_126 $$ datanode.metrics.incrWritesFromClient(peer.isLocal())[ CD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_50 $$ mirrorSock.setSendBufferSize(HdfsConstants.DEFAULT_DATA_SOCKET_SIZE)[ FD ]
Line_24 $$ DataInputStream mirrorIn = null-->Line_78 $$ mirrorIn = null[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_17 $$ if (block.getNumBytes() == 0) [ CD ]
Line_58 $$ mirrorIn = new DataInputStream(unbufMirrorIn)-->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_80 $$ mirrorSock = null-->Line_121 $$ IOUtils.closeSocket(mirrorSock)[ FD ]
Line_38 $$ InetSocketAddress mirrorTarget = null-->Line_48 $$ NetUtils.connect(mirrorSock, mirrorTarget, timeoutValue)[ FD ]
Line_96 $$ if (blockReceiver != null) -->Line_99 $$ if (isTransfer) [ CD ]
Line_37 $$ if (targets.length > 0) -->Line_43 $$ mirrorTarget = NetUtils.createSocketAddr(mirrorNode)[ CD ]
Line_5 $$ final boolean isDatanode = clientname.length() == 0-->Line_110 $$ if (isDatanode || stage == BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) [ FD ]
Line_23 $$ DataOutputStream mirrorOut = null-->Line_118 $$ IOUtils.closeStream(mirrorOut)[ FD ]
Line_52 $$ InputStream unbufMirrorIn = NetUtils.getInputStream(mirrorSock)-->Line_56 $$ unbufMirrorIn = saslStreams.in[ FD ]
Line_23 $$ DataOutputStream mirrorOut = null-->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_24 $$ DataInputStream mirrorIn = null[ CD ]
Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))-->Line_73 $$ replyOut.flush()[ FD ]
Line_57 $$ mirrorOut = new DataOutputStream(new BufferedOutputStream(unbufMirrorOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_75 $$ IOUtils.closeStream(mirrorOut)[ FD ]
Line_51 $$ OutputStream unbufMirrorOut = NetUtils.getOutputStream(mirrorSock, writeTimeout)-->Line_55 $$ unbufMirrorOut = saslStreams.out[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_25 $$ Socket mirrorSock = null[ CD ]
Line_81 $$ if (isClient) -->Line_82 $$ LOG.error(datanode + ":Exception transfering block " + block + " to mirror " + mirrorNode + ": " + e)[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_27 $$ String firstBadLink = ""[ CD ]
Line_24 $$ DataInputStream mirrorIn = null-->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_27 $$ String firstBadLink = ""-->Line_64 $$ firstBadLink = connectAck.getFirstBadLink()[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_54 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(mirrorSock, unbufMirrorOut, unbufMirrorIn, keyFactory, blockToken, targets[0])[ FD ]
Line_61 $$ if (isClient) -->Line_63 $$ mirrorInStatus = connectAck.getStatus()[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_6 $$ final boolean isClient = !isDatanode[ CD ]
Line_11 $$ if (LOG.isDebugEnabled()) -->Line_14 $$ LOG.debug("writeBlock receive buf size " + peer.getReceiveBufferSize() + " tcp no delay " + peer.getTcpNoDelay())[ CD ]
Line_57 $$ mirrorOut = new DataOutputStream(new BufferedOutputStream(unbufMirrorOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_76 $$ mirrorOut = null[ FD ]
Line_62 $$ BlockOpResponseProto connectAck = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(mirrorIn))-->Line_64 $$ firstBadLink = connectAck.getFirstBadLink()[ FD ]
Line_78 $$ mirrorIn = null-->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_51 $$ OutputStream unbufMirrorOut = NetUtils.getOutputStream(mirrorSock, writeTimeout)-->Line_54 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(mirrorSock, unbufMirrorOut, unbufMirrorIn, keyFactory, blockToken, targets[0])[ FD ]
Line_25 $$ Socket mirrorSock = null-->Line_52 $$ InputStream unbufMirrorIn = NetUtils.getInputStream(mirrorSock)[ FD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_80 $$ mirrorSock = null[ FD ]
Line_89 $$ if (isClient && !isTransfer) -->Line_94 $$ replyOut.flush()[ CD ]
Line_106 $$ if (isClient && stage == BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) -->Line_108 $$ block.setNumBytes(minBytesRcvd)[ CD ]
Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))-->Line_22 $$ checkAccess(replyOut, isClient, block, blockToken, Op.WRITE_BLOCK, BlockTokenSecretManager.AccessMode.WRITE)[ FD ]
Line_23 $$ DataOutputStream mirrorOut = null-->Line_75 $$ IOUtils.closeStream(mirrorOut)[ FD ]
Line_43 $$ mirrorTarget = NetUtils.createSocketAddr(mirrorNode)-->Line_48 $$ NetUtils.connect(mirrorSock, mirrorTarget, timeoutValue)[ FD ]
Line_46 $$ int timeoutValue = dnConf.socketTimeout + (HdfsServerConstants.READ_TIMEOUT_EXTENSION * targets.length)-->Line_48 $$ NetUtils.connect(mirrorSock, mirrorTarget, timeoutValue)[ FD ]
Line_40 $$ if (LOG.isDebugEnabled()) -->Line_41 $$ LOG.debug("Connecting to datanode " + mirrorNode)[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_53 $$ DataEncryptionKeyFactory keyFactory = datanode.getDataEncryptionKeyFactoryForBlock(block)[ FD ]
Line_64 $$ firstBadLink = connectAck.getFirstBadLink()-->Line_93 $$ BlockOpResponseProto.newBuilder().setStatus(mirrorInStatus).setFirstBadLink(firstBadLink).build().writeDelimitedTo(replyOut)[ FD ]
Line_24 $$ DataInputStream mirrorIn = null-->Line_62 $$ BlockOpResponseProto connectAck = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(mirrorIn))[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_59 $$ new Sender(mirrorOut).writeBlock(originalBlock, targetStorageTypes[0], blockToken, clientname, targets, targetStorageTypes, srcDataNode, stage, pipelineSize, minBytesRcvd, maxBytesRcvd, latestGenerationStamp, requestedChecksum, cachingStrategy)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_9 $$ throw new IOException(stage + " does not support multiple targets " + Arrays.asList(targets))[ FD ]
Line_62 $$ BlockOpResponseProto connectAck = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(mirrorIn))-->Line_63 $$ mirrorInStatus = connectAck.getStatus()[ FD ]
Line_28 $$ Status mirrorInStatus = SUCCESS-->Line_63 $$ mirrorInStatus = connectAck.getStatus()[ FD ]
Line_78 $$ mirrorIn = null-->Line_119 $$ IOUtils.closeStream(mirrorIn)[ FD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_79 $$ IOUtils.closeSocket(mirrorSock)[ FD ]
Line_25 $$ Socket mirrorSock = null-->Line_79 $$ IOUtils.closeSocket(mirrorSock)[ FD ]
Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))-->Line_93 $$ BlockOpResponseProto.newBuilder().setStatus(mirrorInStatus).setFirstBadLink(firstBadLink).build().writeDelimitedTo(replyOut)[ FD ]
Line_99 $$ if (isTransfer) -->Line_103 $$ writeResponse(SUCCESS, null, replyOut)[ CD ]
Line_11 $$ if (LOG.isDebugEnabled()) -->Line_13 $$ LOG.debug("isDatanode=" + isDatanode + ", isClient=" + isClient + ", isTransfer=" + isTransfer)[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_5 $$ final boolean isDatanode = clientname.length() == 0[ FD ]
Line_26 $$ String mirrorNode = null-->Line_39 $$ mirrorNode = targets[0].getXferAddr(connectToDnViaHostname)[ FD ]
Line_99 $$ if (isTransfer) -->Line_100 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_39 $$ mirrorNode = targets[0].getXferAddr(connectToDnViaHostname)-->Line_43 $$ mirrorTarget = NetUtils.createSocketAddr(mirrorNode)[ FD ]
Line_57 $$ mirrorOut = new DataOutputStream(new BufferedOutputStream(unbufMirrorOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_11 $$ if (LOG.isDebugEnabled()) -->Line_12 $$ LOG.debug("opWriteBlock: stage=" + stage + ", clientname=" + clientname + "\n  block  =" + block + ", newGs=" + latestGenerationStamp + ", bytesRcvd=[" + minBytesRcvd + ", " + maxBytesRcvd + "]" + "\n  targets=" + Arrays.asList(targets) + "; pipelineSize=" + pipelineSize + ", srcDataNode=" + srcDataNode)[ CD ]
Line_100 $$ if (LOG.isTraceEnabled()) -->Line_101 $$ LOG.trace("TRANSFER: send close-ack")[ CD ]
Line_106 $$ if (isClient && stage == BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) -->Line_107 $$ block.setGenerationStamp(latestGenerationStamp)[ CD ]
Line_96 $$ if (blockReceiver != null) -->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ CD ]
Line_25 $$ Socket mirrorSock = null-->Line_48 $$ NetUtils.connect(mirrorSock, mirrorTarget, timeoutValue)[ FD ]
Line_38 $$ InetSocketAddress mirrorTarget = null-->Line_43 $$ mirrorTarget = NetUtils.createSocketAddr(mirrorNode)[ FD ]
Line_25 $$ Socket mirrorSock = null-->Line_44 $$ mirrorSock = datanode.newSocket()[ FD ]
Line_25 $$ Socket mirrorSock = null-->Line_51 $$ OutputStream unbufMirrorOut = NetUtils.getOutputStream(mirrorSock, writeTimeout)[ FD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_51 $$ OutputStream unbufMirrorOut = NetUtils.getOutputStream(mirrorSock, writeTimeout)[ FD ]
Line_53 $$ DataEncryptionKeyFactory keyFactory = datanode.getDataEncryptionKeyFactoryForBlock(block)-->Line_54 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(mirrorSock, unbufMirrorOut, unbufMirrorIn, keyFactory, blockToken, targets[0])[ FD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_54 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(mirrorSock, unbufMirrorOut, unbufMirrorIn, keyFactory, blockToken, targets[0])[ FD ]
Line_6 $$ final boolean isClient = !isDatanode-->Line_22 $$ checkAccess(replyOut, isClient, block, blockToken, Op.WRITE_BLOCK, BlockTokenSecretManager.AccessMode.WRITE)[ FD ]
Line_89 $$ if (isClient && !isTransfer) -->Line_90 $$ if (LOG.isDebugEnabled() || mirrorInStatus != SUCCESS) [ CD ]
Line_23 $$ DataOutputStream mirrorOut = null-->Line_76 $$ mirrorOut = null[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_111 $$ datanode.closeBlock(block, DataNode.EMPTY_DEL_HINT, storageUuid)[ FD ]
Line_23 $$ DataOutputStream mirrorOut = null-->Line_60 $$ mirrorOut.flush()[ FD ]
Line_6 $$ final boolean isClient = !isDatanode-->Line_89 $$ if (isClient && !isTransfer) [ FD ]
Line_97 $$ String mirrorAddr = (mirrorSock == null) ? null : mirrorNode-->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_16 $$ final ExtendedBlock originalBlock = new ExtendedBlock(block)-->Line_59 $$ new Sender(mirrorOut).writeBlock(originalBlock, targetStorageTypes[0], blockToken, clientname, targets, targetStorageTypes, srcDataNode, stage, pipelineSize, minBytesRcvd, maxBytesRcvd, latestGenerationStamp, requestedChecksum, cachingStrategy)[ FD ]
Line_63 $$ mirrorInStatus = connectAck.getStatus()-->Line_93 $$ BlockOpResponseProto.newBuilder().setStatus(mirrorInStatus).setFirstBadLink(firstBadLink).build().writeDelimitedTo(replyOut)[ FD ]
Line_70 $$ if (isClient) -->Line_73 $$ replyOut.flush()[ CD ]
Line_29 $$ final String storageUuid-->Line_35 $$ storageUuid = datanode.data.recoverClose(block, latestGenerationStamp, minBytesRcvd)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_18 $$ block.setNumBytes(dataXceiverServer.estimateBlockSize)[ FD ]
Line_25 $$ Socket mirrorSock = null-->Line_49 $$ mirrorSock.setSoTimeout(timeoutValue)[ FD ]
Line_76 $$ mirrorOut = null-->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_35 $$ storageUuid = datanode.data.recoverClose(block, latestGenerationStamp, minBytesRcvd)-->Line_111 $$ datanode.closeBlock(block, DataNode.EMPTY_DEL_HINT, storageUuid)[ FD ]
Line_31 $$ if (isDatanode || stage != BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) -->Line_35 $$ storageUuid = datanode.data.recoverClose(block, latestGenerationStamp, minBytesRcvd)[ CD ]
Line_58 $$ mirrorIn = new DataInputStream(unbufMirrorIn)-->Line_119 $$ IOUtils.closeStream(mirrorIn)[ FD ]
Line_61 $$ if (isClient) -->Line_62 $$ BlockOpResponseProto connectAck = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(mirrorIn))[ CD ]
Line_29 $$ final String storageUuid-->Line_111 $$ datanode.closeBlock(block, DataNode.EMPTY_DEL_HINT, storageUuid)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_125 $$ datanode.metrics.addWriteBlockOp(elapsed())[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_107 $$ block.setGenerationStamp(latestGenerationStamp)[ FD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_49 $$ mirrorSock.setSoTimeout(timeoutValue)[ FD ]
Line_25 $$ Socket mirrorSock = null-->Line_54 $$ IOStreamPair saslStreams = datanode.saslClient.socketSend(mirrorSock, unbufMirrorOut, unbufMirrorIn, keyFactory, blockToken, targets[0])[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_12 $$ LOG.debug("opWriteBlock: stage=" + stage + ", clientname=" + clientname + "\n  block  =" + block + ", newGs=" + latestGenerationStamp + ", bytesRcvd=[" + minBytesRcvd + ", " + maxBytesRcvd + "]" + "\n  targets=" + Arrays.asList(targets) + "; pipelineSize=" + pipelineSize + ", srcDataNode=" + srcDataNode)[ FD ]
Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))-->Line_98 $$ blockReceiver.receiveBlock(mirrorOut, mirrorIn, replyOut, mirrorAddr, null, targets, false)[ FD ]
Line_47 $$ int writeTimeout = dnConf.socketWriteTimeout + (HdfsServerConstants.WRITE_TIMEOUT_EXTENSION * targets.length)-->Line_51 $$ OutputStream unbufMirrorOut = NetUtils.getOutputStream(mirrorSock, writeTimeout)[ FD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_48 $$ NetUtils.connect(mirrorSock, mirrorTarget, timeoutValue)[ FD ]
Line_5 $$ final boolean isDatanode = clientname.length() == 0-->Line_6 $$ final boolean isClient = !isDatanode[ FD ]
Line_25 $$ Socket mirrorSock = null-->Line_121 $$ IOUtils.closeSocket(mirrorSock)[ FD ]
Line_37 $$ if (targets.length > 0) -->Line_44 $$ mirrorSock = datanode.newSocket()[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_108 $$ block.setNumBytes(minBytesRcvd)[ FD ]
Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))-->Line_120 $$ IOUtils.closeStream(replyOut)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_112 $$ LOG.info("Received " + block + " src: " + remoteAddress + " dest: " + localAddress + " of size " + block.getNumBytes())[ FD ]
Line_5 $$ final boolean isDatanode = clientname.length() == 0-->Line_31 $$ if (isDatanode || stage != BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) [ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_17 $$ if (block.getNumBytes() == 0) [ FD ]
Line_61 $$ if (isClient) -->Line_64 $$ firstBadLink = connectAck.getFirstBadLink()[ CD ]
Line_28 $$ Status mirrorInStatus = SUCCESS-->Line_93 $$ BlockOpResponseProto.newBuilder().setStatus(mirrorInStatus).setFirstBadLink(firstBadLink).build().writeDelimitedTo(replyOut)[ FD ]
Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))-->Line_103 $$ writeResponse(SUCCESS, null, replyOut)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_20 $$ LOG.info("Receiving " + block + " src: " + remoteAddress + " dest: " + localAddress)[ CD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_121 $$ IOUtils.closeSocket(mirrorSock)[ FD ]
Line_90 $$ if (LOG.isDebugEnabled() || mirrorInStatus != SUCCESS) -->Line_91 $$ LOG.info("Datanode " + targets.length + " forwarding connect ack to upstream firstbadlink is " + firstBadLink)[ CD ]
Line_58 $$ mirrorIn = new DataInputStream(unbufMirrorIn)-->Line_62 $$ BlockOpResponseProto connectAck = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(mirrorIn))[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_22 $$ checkAccess(replyOut, isClient, block, blockToken, Op.WRITE_BLOCK, BlockTokenSecretManager.AccessMode.WRITE)[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_5 $$ final boolean isDatanode = clientname.length() == 0[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_26 $$ String mirrorNode = null[ CD ]
Line_110 $$ if (isDatanode || stage == BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) -->Line_111 $$ datanode.closeBlock(block, DataNode.EMPTY_DEL_HINT, storageUuid)[ CD ]
Line_58 $$ mirrorIn = new DataInputStream(unbufMirrorIn)-->Line_78 $$ mirrorIn = null[ FD ]
Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))-->Line_71 $$ BlockOpResponseProto.newBuilder().setStatus(ERROR).setFirstBadLink(targets[0].getXferAddr()).build().writeDelimitedTo(replyOut)[ FD ]
Line_21 $$ final DataOutputStream replyOut = new DataOutputStream(new BufferedOutputStream(getOutputStream(), HdfsConstants.SMALL_BUFFER_SIZE))-->Line_94 $$ replyOut.flush()[ FD ]
Line_57 $$ mirrorOut = new DataOutputStream(new BufferedOutputStream(unbufMirrorOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_118 $$ IOUtils.closeStream(mirrorOut)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_4 $$ updateCurrentThreadName("Receiving block " + block)[ CD ]
Line_31 $$ if (isDatanode || stage != BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) -->Line_33 $$ storageUuid = blockReceiver.getStorageUuid()[ CD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_35 $$ storageUuid = datanode.data.recoverClose(block, latestGenerationStamp, minBytesRcvd)[ FD ]
Line_46 $$ int timeoutValue = dnConf.socketTimeout + (HdfsServerConstants.READ_TIMEOUT_EXTENSION * targets.length)-->Line_49 $$ mirrorSock.setSoTimeout(timeoutValue)[ FD ]
Line_44 $$ mirrorSock = datanode.newSocket()-->Line_52 $$ InputStream unbufMirrorIn = NetUtils.getInputStream(mirrorSock)[ FD ]
Line_57 $$ mirrorOut = new DataOutputStream(new BufferedOutputStream(unbufMirrorOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_60 $$ mirrorOut.flush()[ FD ]
Line_23 $$ DataOutputStream mirrorOut = null-->Line_57 $$ mirrorOut = new DataOutputStream(new BufferedOutputStream(unbufMirrorOut, HdfsConstants.SMALL_BUFFER_SIZE))[ FD ]
Line_25 $$ Socket mirrorSock = null-->Line_50 $$ mirrorSock.setSendBufferSize(HdfsConstants.DEFAULT_DATA_SOCKET_SIZE)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_8 $$ if (isTransfer && targets.length > 0) [ CD ]
Line_76 $$ mirrorOut = null-->Line_118 $$ IOUtils.closeStream(mirrorOut)[ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_28 $$ Status mirrorInStatus = SUCCESS[ CD ]
Line_29 $$ final String storageUuid-->Line_33 $$ storageUuid = blockReceiver.getStorageUuid()[ FD ]
Line_37 $$ if (targets.length > 0) -->Line_40 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_58 $$ mirrorIn = new DataInputStream(unbufMirrorIn)-->Line_77 $$ IOUtils.closeStream(mirrorIn)[ FD ]
Line_7 $$ final boolean isTransfer = stage == BlockConstructionStage.TRANSFER_RBW || stage == BlockConstructionStage.TRANSFER_FINALIZED-->Line_89 $$ if (isClient && !isTransfer) [ FD ]
Line_6 $$ final boolean isClient = !isDatanode-->Line_106 $$ if (isClient && stage == BlockConstructionStage.PIPELINE_CLOSE_RECOVERY) [ FD ]
Line_2 $$ public void writeBlock(final ExtendedBlock block, final StorageType storageType, final Token<BlockTokenIdentifier> blockToken, final String clientname, final DatanodeInfo[] targets, final StorageType[] targetStorageTypes, final DatanodeInfo srcDataNode, final BlockConstructionStage stage, final int pipelineSize, final long minBytesRcvd, final long maxBytesRcvd, final long latestGenerationStamp, DataChecksum requestedChecksum, CachingStrategy cachingStrategy) throws IOException -->Line_22 $$ checkAccess(replyOut, isClient, block, blockToken, Op.WRITE_BLOCK, BlockTokenSecretManager.AccessMode.WRITE)[ FD ]
Line_24 $$ DataInputStream mirrorIn = null-->Line_77 $$ IOUtils.closeStream(mirrorIn)[ FD ]
