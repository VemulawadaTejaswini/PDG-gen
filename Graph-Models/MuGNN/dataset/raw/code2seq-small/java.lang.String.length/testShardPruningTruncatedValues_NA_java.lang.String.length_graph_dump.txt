Line_5 $$ ShardInfo shard = shardInfo(UUID.randomUUID(), "node", ImmutableList.of(stats))-->Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_21 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice("w"))).expected()[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_18 $$ shardAssertion(tableId).between(c1, VARCHAR, utf8Slice("w"), utf8Slice("y")).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_12 $$ shardManager.commitShards(transactionId, tableId, columns, shards, Optional.empty())[ CD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_3 $$ String prefix = repeat("x", MAX_BINARY_INDEX_SIZE)[ CD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_21 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice("w"))).expected()[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_20 $$ shardAssertion(tableId).between(c1, VARCHAR, utf8Slice("x"), utf8Slice("x")).expected()[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_10 $$ shardManager.createTable(tableId, columns)[ CD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_27 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, shorter)).expected(shards)[ FD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_20 $$ shardAssertion(tableId).between(c1, VARCHAR, utf8Slice("x"), utf8Slice("x")).expected()[ FD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_15 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix + "c")).expected(shards)[ FD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_16 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice(prefix + "c"))).expected(shards)[ FD ]
Line_7 $$ List<ColumnInfo> columns = ImmutableList.of(new ColumnInfo(1, VARCHAR))-->Line_10 $$ shardManager.createTable(tableId, columns)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_11 $$ long transactionId = shardManager.beginTransaction()[ CD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_15 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix + "c")).expected(shards)[ CD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_15 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix + "c")).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_5 $$ ShardInfo shard = shardInfo(UUID.randomUUID(), "node", ImmutableList.of(stats))[ CD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)[ CD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_14 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix)).expected(shards)[ CD ]
Line_9 $$ long tableId = createTable("test")-->Line_27 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, shorter)).expected(shards)[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_12 $$ shardManager.commitShards(transactionId, tableId, columns, shards, Optional.empty())[ FD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_19 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice("x"))).expected(shards)[ FD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_25 $$ shardAssertion(tableId).equal(c1, VARCHAR, shorter).expected()[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_19 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice("x"))).expected(shards)[ CD ]
Line_9 $$ long tableId = createTable("test")-->Line_15 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix + "c")).expected(shards)[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_17 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice(prefix + "zzz"))).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_18 $$ shardAssertion(tableId).between(c1, VARCHAR, utf8Slice("w"), utf8Slice("y")).expected(shards)[ CD ]
Line_9 $$ long tableId = createTable("test")-->Line_13 $$ shardAssertion(tableId).expected(shards)[ FD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_18 $$ shardAssertion(tableId).between(c1, VARCHAR, utf8Slice("w"), utf8Slice("y")).expected(shards)[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_14 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix)).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_16 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice(prefix + "c"))).expected(shards)[ CD ]
Line_24 $$ Slice shorter = utf8Slice(prefix.substring(0, prefix.length() - 1))-->Line_25 $$ shardAssertion(tableId).equal(c1, VARCHAR, shorter).expected()[ FD ]
Line_3 $$ String prefix = repeat("x", MAX_BINARY_INDEX_SIZE)-->Line_14 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix)).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_20 $$ shardAssertion(tableId).between(c1, VARCHAR, utf8Slice("x"), utf8Slice("x")).expected()[ CD ]
Line_9 $$ long tableId = createTable("test")-->Line_25 $$ shardAssertion(tableId).equal(c1, VARCHAR, shorter).expected()[ FD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_27 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, shorter)).expected(shards)[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_22 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice("x"))).expected()[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_22 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice("x"))).expected()[ CD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_17 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice(prefix + "zzz"))).expected(shards)[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_23 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice("y"))).expected()[ FD ]
Line_3 $$ String prefix = repeat("x", MAX_BINARY_INDEX_SIZE)-->Line_24 $$ Slice shorter = utf8Slice(prefix.substring(0, prefix.length() - 1))[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_25 $$ shardAssertion(tableId).equal(c1, VARCHAR, shorter).expected()[ CD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_23 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice("y"))).expected()[ FD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_14 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix)).expected(shards)[ FD ]
Line_9 $$ long tableId = createTable("test")-->Line_19 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice("x"))).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_13 $$ shardAssertion(tableId).expected(shards)[ CD ]
Line_9 $$ long tableId = createTable("test")-->Line_16 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice(prefix + "c"))).expected(shards)[ FD ]
Line_24 $$ Slice shorter = utf8Slice(prefix.substring(0, prefix.length() - 1))-->Line_26 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, shorter)).expected()[ FD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_26 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, shorter)).expected()[ FD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_22 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice("x"))).expected()[ FD ]
Line_7 $$ List<ColumnInfo> columns = ImmutableList.of(new ColumnInfo(1, VARCHAR))-->Line_12 $$ shardManager.commitShards(transactionId, tableId, columns, shards, Optional.empty())[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_27 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, shorter)).expected(shards)[ CD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)[ CD ]
Line_9 $$ long tableId = createTable("test")-->Line_26 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, shorter)).expected()[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_26 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, shorter)).expected()[ CD ]
Line_9 $$ long tableId = createTable("test")-->Line_10 $$ shardManager.createTable(tableId, columns)[ FD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_13 $$ shardAssertion(tableId).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_23 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice("y"))).expected()[ CD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_14 $$ shardAssertion(tableId).equal(c1, VARCHAR, utf8Slice(prefix)).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_24 $$ Slice shorter = utf8Slice(prefix.substring(0, prefix.length() - 1))[ CD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_7 $$ List<ColumnInfo> columns = ImmutableList.of(new ColumnInfo(1, VARCHAR))[ CD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_21 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice("w"))).expected()[ CD ]
Line_4 $$ ColumnStats stats = new ColumnStats(1, prefix + "a", prefix + "z")-->Line_5 $$ ShardInfo shard = shardInfo(UUID.randomUUID(), "node", ImmutableList.of(stats))[ FD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_17 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice(prefix + "zzz"))).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_9 $$ long tableId = createTable("test")[ CD ]
Line_24 $$ Slice shorter = utf8Slice(prefix.substring(0, prefix.length() - 1))-->Line_27 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, shorter)).expected(shards)[ FD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_16 $$ shardAssertion(tableId).range(c1, lessThan(VARCHAR, utf8Slice(prefix + "c"))).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_17 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice(prefix + "zzz"))).expected(shards)[ CD ]
Line_11 $$ long transactionId = shardManager.beginTransaction()-->Line_12 $$ shardManager.commitShards(transactionId, tableId, columns, shards, Optional.empty())[ FD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_19 $$ shardAssertion(tableId).range(c1, greaterThan(VARCHAR, utf8Slice("x"))).expected(shards)[ FD ]
Line_2 $$ public void testShardPruningTruncatedValues() throws Exception -->Line_4 $$ ColumnStats stats = new ColumnStats(1, prefix + "a", prefix + "z")[ CD ]
Line_6 $$ List<ShardInfo> shards = ImmutableList.of(shard)-->Line_12 $$ shardManager.commitShards(transactionId, tableId, columns, shards, Optional.empty())[ FD ]
Line_8 $$ RaptorColumnHandle c1 = new RaptorColumnHandle("raptor", "c1", 1, VARCHAR)-->Line_18 $$ shardAssertion(tableId).between(c1, VARCHAR, utf8Slice("w"), utf8Slice("y")).expected(shards)[ FD ]
