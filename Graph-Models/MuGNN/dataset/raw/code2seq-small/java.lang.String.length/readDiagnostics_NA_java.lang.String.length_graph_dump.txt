Line_9 $$ Decoder decoder = new InputStreamBackedDecoder(inputStream)-->Line_22 $$ File daemonLog = new File(decoder.readString())[ FD ]
Line_9 $$ Decoder decoder = new InputStreamBackedDecoder(inputStream)-->Line_14 $$ int port = decoder.readInt()[ FD ]
Line_15 $$ int addressCount = decoder.readSmallInt()-->Line_17 $$ for (int i = 0; i < addressCount; i++) [ FD ]
Line_7 $$ String encoded = message.substring(daemonGreeting().length()).trim()-->Line_8 $$ InputStream inputStream = new EncodedStream.EncodedInput(new ByteArrayInputStream(encoded.getBytes()))[ FD ]
Line_2 $$ public DaemonStartupInfo readDiagnostics(String message) -->Line_4 $$ throw new IllegalArgumentException(String.format("Unexpected daemon startup message: %s", message))[ FD ]
Line_9 $$ Decoder decoder = new InputStreamBackedDecoder(inputStream)-->Line_10 $$ String pidString = decoder.readNullableString()[ FD ]
Line_9 $$ Decoder decoder = new InputStreamBackedDecoder(inputStream)-->Line_15 $$ int addressCount = decoder.readSmallInt()[ FD ]
Line_17 $$ for (int i = 0; i < addressCount; i++) -->Line_18 $$ InetAddress address = InetAddress.getByAddress(decoder.readBinary())[ CD ]
Line_2 $$ public DaemonStartupInfo readDiagnostics(String message) -->Line_3 $$ if (!message.startsWith(daemonGreeting())) [ FD ]
Line_9 $$ Decoder decoder = new InputStreamBackedDecoder(inputStream)-->Line_13 $$ UUID canonicalAddress = new UUID(decoder.readLong(), decoder.readLong())[ FD ]
Line_2 $$ public DaemonStartupInfo readDiagnostics(String message) -->Line_7 $$ String encoded = message.substring(daemonGreeting().length()).trim()[ FD ]
Line_9 $$ Decoder decoder = new InputStreamBackedDecoder(inputStream)-->Line_11 $$ String uid = decoder.readString()[ FD ]
Line_10 $$ String pidString = decoder.readNullableString()-->Line_12 $$ Long pid = pidString == null ? null : Long.valueOf(pidString)[ FD ]
Line_9 $$ Decoder decoder = new InputStreamBackedDecoder(inputStream)-->Line_18 $$ InetAddress address = InetAddress.getByAddress(decoder.readBinary())[ FD ]
Line_18 $$ InetAddress address = InetAddress.getByAddress(decoder.readBinary())-->Line_19 $$ addresses.add(address)[ FD ]
Line_2 $$ public DaemonStartupInfo readDiagnostics(String message) -->Line_3 $$ if (!message.startsWith(daemonGreeting())) [ CD ]
Line_17 $$ for (int i = 0; i < addressCount; i++) -->Line_19 $$ addresses.add(address)[ CD ]
Line_16 $$ List<InetAddress> addresses = new ArrayList<InetAddress>(addressCount)-->Line_19 $$ addresses.add(address)[ FD ]
