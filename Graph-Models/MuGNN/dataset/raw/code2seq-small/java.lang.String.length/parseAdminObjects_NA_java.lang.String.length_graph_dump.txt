Line_13 $$ String value = rawAttributeText(reader, ENABLED.getXmlName())-->Line_43 $$ if (value != null) [ FD ]
Line_43 $$ if (value != null) -->Line_44 $$ CLASS_NAME.parseAndSetParameter(value, adminObjectNode, reader)[ CD ]
Line_6 $$ String poolName = null-->Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)[ FD ]
Line_21 $$ jndiName = rawAttributeText(reader, JNDINAME.getXmlName())-->Line_54 $$ if (jndiName.contains("/")) [ FD ]
Line_54 $$ if (jndiName.contains("/")) -->Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)[ CD ]
Line_6 $$ String poolName = null-->Line_68 $$ map.put(poolName, adminObjectNode)[ FD ]
Line_21 $$ jndiName = rawAttributeText(reader, JNDINAME.getXmlName())-->Line_22 $$ if (jndiName != null) [ FD ]
Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)-->Line_82 $$ if (!configMap.containsKey(poolName)) [ FD ]
Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)-->Line_83 $$ configMap.put(poolName, new HashMap<String, ModelNode>(0))[ FD ]
Line_13 $$ String value = rawAttributeText(reader, ENABLED.getXmlName())-->Line_15 $$ ENABLED.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_8 $$ for (int i = 0; i < attributeSize; i++) -->Line_9 $$ AdminObject.Attribute attribute = AdminObject.Attribute.forName(reader.getAttributeLocalName(i))[ CD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_9 $$ AdminObject.Attribute attribute = AdminObject.Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_23 $$ JNDINAME.parseAndSetParameter(jndiName, adminObjectNode, reader)[ FD ]
Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)-->Line_68 $$ map.put(poolName, adminObjectNode)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_71 $$ if (AdminObject.Tag.forName(reader.getLocalName()) == AdminObject.Tag.UNKNOWN) [ FD ]
Line_7 $$ String jndiName = null-->Line_23 $$ JNDINAME.parseAndSetParameter(jndiName, adminObjectNode, reader)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_72 $$ throw ParseUtils.unexpectedEndElement(reader)[ FD ]
Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)-->Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_64 $$ switch(reader.nextTag()) [ FD ]
Line_3 $$ final ModelNode adminObjectNode = new ModelNode()-->Line_44 $$ CLASS_NAME.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_34 $$ String value = rawAttributeText(reader, USE_JAVA_CONTEXT.getXmlName())[ FD ]
Line_6 $$ String poolName = null-->Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)[ FD ]
Line_21 $$ jndiName = rawAttributeText(reader, JNDINAME.getXmlName())-->Line_53 $$ if (jndiName != null && jndiName.trim().length() != 0) [ FD ]
Line_67 $$ if (Activation.Tag.forName(reader.getLocalName()) == Activation.Tag.ADMIN_OBJECT) -->Line_71 $$ if (AdminObject.Tag.forName(reader.getLocalName()) == AdminObject.Tag.UNKNOWN) [ CD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_95 $$ throw ParseUtils.unexpectedEndElement(reader)[ FD ]
Line_3 $$ final ModelNode adminObjectNode = new ModelNode()-->Line_4 $$ adminObjectNode.get(OP).set(ADD)[ FD ]
Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)-->Line_85 $$ parseConfigProperties(reader, configMap.get(poolName))[ FD ]
Line_6 $$ String poolName = null-->Line_82 $$ if (!configMap.containsKey(poolName)) [ FD ]
Line_54 $$ if (jndiName.contains("/")) -->Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)[ CD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_49 $$ throw ParseUtils.unexpectedAttribute(reader, i)[ FD ]
Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)-->Line_83 $$ configMap.put(poolName, new HashMap<String, ModelNode>(0))[ FD ]
Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)-->Line_52 $$ if (poolName == null || poolName.trim().equals("")) [ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_36 $$ USE_JAVA_CONTEXT.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_6 $$ String poolName = null-->Line_85 $$ parseConfigProperties(reader, configMap.get(poolName))[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_83 $$ configMap.put(poolName, new HashMap<String, ModelNode>(0))[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_3 $$ final ModelNode adminObjectNode = new ModelNode()[ CD ]
Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)-->Line_82 $$ if (!configMap.containsKey(poolName)) [ FD ]
Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)-->Line_68 $$ map.put(poolName, adminObjectNode)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_21 $$ jndiName = rawAttributeText(reader, JNDINAME.getXmlName())[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_15 $$ ENABLED.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_35 $$ if (value != null) -->Line_36 $$ USE_JAVA_CONTEXT.parseAndSetParameter(value, adminObjectNode, reader)[ CD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_8 $$ for (int i = 0; i < attributeSize; i++) [ CD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_63 $$ while (reader.hasNext()) [ FD ]
Line_21 $$ jndiName = rawAttributeText(reader, JNDINAME.getXmlName())-->Line_23 $$ JNDINAME.parseAndSetParameter(jndiName, adminObjectNode, reader)[ FD ]
Line_6 $$ String poolName = null-->Line_52 $$ if (poolName == null || poolName.trim().equals("")) [ FD ]
Line_8 $$ for (int i = 0; i < attributeSize; i++) -->Line_9 $$ AdminObject.Attribute attribute = AdminObject.Attribute.forName(reader.getAttributeLocalName(i))[ FD ]
Line_6 $$ String poolName = null-->Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_42 $$ String value = rawAttributeText(reader, CLASS_NAME.getXmlName())[ FD ]
Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)-->Line_85 $$ parseConfigProperties(reader, configMap.get(poolName))[ FD ]
Line_67 $$ if (Activation.Tag.forName(reader.getLocalName()) == Activation.Tag.ADMIN_OBJECT) -->Line_68 $$ map.put(poolName, adminObjectNode)[ CD ]
Line_13 $$ String value = rawAttributeText(reader, ENABLED.getXmlName())-->Line_35 $$ if (value != null) [ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_63 $$ while (reader.hasNext()) [ CD ]
Line_3 $$ final ModelNode adminObjectNode = new ModelNode()-->Line_36 $$ USE_JAVA_CONTEXT.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)-->Line_85 $$ parseConfigProperties(reader, configMap.get(poolName))[ FD ]
Line_13 $$ String value = rawAttributeText(reader, ENABLED.getXmlName())-->Line_14 $$ if (value != null) [ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_6 $$ String poolName = null[ CD ]
Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)-->Line_82 $$ if (!configMap.containsKey(poolName)) [ FD ]
Line_67 $$ if (Activation.Tag.forName(reader.getLocalName()) == Activation.Tag.ADMIN_OBJECT) -->Line_69 $$ return[ CD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_44 $$ CLASS_NAME.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_3 $$ final ModelNode adminObjectNode = new ModelNode()-->Line_15 $$ ENABLED.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_14 $$ if (value != null) -->Line_15 $$ ENABLED.parseAndSetParameter(value, adminObjectNode, reader)[ CD ]
Line_7 $$ String jndiName = null-->Line_21 $$ jndiName = rawAttributeText(reader, JNDINAME.getXmlName())[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_13 $$ String value = rawAttributeText(reader, ENABLED.getXmlName())[ FD ]
Line_13 $$ String value = rawAttributeText(reader, ENABLED.getXmlName())-->Line_36 $$ USE_JAVA_CONTEXT.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_79 $$ switch(AdminObject.Tag.forName(reader.getLocalName())) [ FD ]
Line_3 $$ final ModelNode adminObjectNode = new ModelNode()-->Line_68 $$ map.put(poolName, adminObjectNode)[ FD ]
Line_7 $$ String jndiName = null-->Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)[ FD ]
Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)-->Line_68 $$ map.put(poolName, adminObjectNode)[ FD ]
Line_6 $$ String poolName = null-->Line_83 $$ configMap.put(poolName, new HashMap<String, ModelNode>(0))[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_85 $$ parseConfigProperties(reader, configMap.get(poolName))[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_89 $$ throw ParseUtils.unexpectedElement(reader)[ FD ]
Line_13 $$ String value = rawAttributeText(reader, ENABLED.getXmlName())-->Line_44 $$ CLASS_NAME.parseAndSetParameter(value, adminObjectNode, reader)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_67 $$ if (Activation.Tag.forName(reader.getLocalName()) == Activation.Tag.ADMIN_OBJECT) [ FD ]
Line_21 $$ jndiName = rawAttributeText(reader, JNDINAME.getXmlName())-->Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_5 $$ int attributeSize = reader.getAttributeCount()[ FD ]
Line_29 $$ poolName = rawAttributeText(reader, POOL_NAME_NAME)-->Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_60 $$ throw ParseUtils.missingRequired(reader, EnumSet.of(AdminObject.Attribute.JNDI_NAME))[ FD ]
Line_82 $$ if (!configMap.containsKey(poolName)) -->Line_83 $$ configMap.put(poolName, new HashMap<String, ModelNode>(0))[ CD ]
Line_3 $$ final ModelNode adminObjectNode = new ModelNode()-->Line_23 $$ JNDINAME.parseAndSetParameter(jndiName, adminObjectNode, reader)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_52 $$ if (poolName == null || poolName.trim().equals("")) [ CD ]
Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)-->Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_7 $$ String jndiName = null[ CD ]
Line_53 $$ if (jndiName != null && jndiName.trim().length() != 0) -->Line_54 $$ if (jndiName.contains("/")) [ CD ]
Line_52 $$ if (poolName == null || poolName.trim().equals("")) -->Line_53 $$ if (jndiName != null && jndiName.trim().length() != 0) [ CD ]
Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)-->Line_83 $$ configMap.put(poolName, new HashMap<String, ModelNode>(0))[ FD ]
Line_21 $$ jndiName = rawAttributeText(reader, JNDINAME.getXmlName())-->Line_57 $$ poolName = jndiName.substring(jndiName.lastIndexOf(":") + 1)[ FD ]
Line_7 $$ String jndiName = null-->Line_53 $$ if (jndiName != null && jndiName.trim().length() != 0) [ FD ]
Line_7 $$ String jndiName = null-->Line_55 $$ poolName = jndiName.substring(jndiName.lastIndexOf("/") + 1)[ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_5 $$ int attributeSize = reader.getAttributeCount()[ CD ]
Line_7 $$ String jndiName = null-->Line_54 $$ if (jndiName.contains("/")) [ FD ]
Line_5 $$ int attributeSize = reader.getAttributeCount()-->Line_8 $$ for (int i = 0; i < attributeSize; i++) [ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_4 $$ adminObjectNode.get(OP).set(ADD)[ CD ]
Line_8 $$ for (int i = 0; i < attributeSize; i++) -->Line_49 $$ throw ParseUtils.unexpectedAttribute(reader, i)[ FD ]
Line_22 $$ if (jndiName != null) -->Line_23 $$ JNDINAME.parseAndSetParameter(jndiName, adminObjectNode, reader)[ CD ]
Line_7 $$ String jndiName = null-->Line_22 $$ if (jndiName != null) [ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_82 $$ if (!configMap.containsKey(poolName)) [ FD ]
Line_2 $$ protected void parseAdminObjects(final XMLExtendedStreamReader reader, final Map<String, ModelNode> map, final Map<String, HashMap<String, ModelNode>> configMap) throws XMLStreamException, ParserException, ValidateException -->Line_68 $$ map.put(poolName, adminObjectNode)[ FD ]
