Line_11 $$ for (final String contentRootUrl : contentRootUrls) -->Line_12 $$ if (contentRootUrl.length() < maxUrlLength) [ FD ]
Line_23 $$ candidateModule = ApplicationManager.getApplication().runReadAction(new Computable<Module>() -->Line_26 $$ if (contentRootFile != null) [ CD ]
Line_2 $$ public boolean belongs(final String url) -->Line_8 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()[ CD ]
Line_2 $$ public boolean belongs(final String url) -->Line_44 $$ if (isUrlUnderRoot(url, excludeRootUrl)) [ FD ]
Line_40 $$ if (candidateModule != null && myScopeModules.contains(candidateModule)) -->Line_48 $$ final String[] sourceRootUrls = moduleRootManager.getSourceRootUrls()[ CD ]
Line_20 $$ candidateModule = module-->Line_23 $$ candidateModule = ApplicationManager.getApplication().runReadAction(new Computable<Module>() [ FD ]
Line_23 $$ candidateModule = ApplicationManager.getApplication().runReadAction(new Computable<Module>() -->Line_25 $$ final VirtualFile contentRootFile = VirtualFileManager.getInstance().findFileByUrl(contentRootUrl)[ CD ]
Line_23 $$ candidateModule = ApplicationManager.getApplication().runReadAction(new Computable<Module>() -->Line_41 $$ final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(candidateModule)[ FD ]
Line_23 $$ candidateModule = ApplicationManager.getApplication().runReadAction(new Computable<Module>() -->Line_40 $$ if (candidateModule != null && myScopeModules.contains(candidateModule)) [ FD ]
Line_6 $$ Module candidateModule = null-->Line_19 $$ if (candidateModule == null) [ FD ]
Line_6 $$ Module candidateModule = null-->Line_40 $$ if (candidateModule != null && myScopeModules.contains(candidateModule)) [ FD ]
Line_18 $$ if (contentRootUrl.length() == maxUrlLength) -->Line_35 $$ maxUrlLength = contentRootUrl.length()[ CD ]
Line_23 $$ candidateModule = ApplicationManager.getApplication().runReadAction(new Computable<Module>() -->Line_29 $$ return null[ CD ]
Line_8 $$ final ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(myProject).getFileIndex()-->Line_27 $$ return projectFileIndex.getModuleForFile(contentRootFile)[ FD ]
Line_6 $$ Module candidateModule = null-->Line_41 $$ final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(candidateModule)[ FD ]
Line_2 $$ public boolean belongs(final String url) -->Line_50 $$ if (isUrlUnderRoot(url, sourceRootUrl)) [ FD ]
Line_20 $$ candidateModule = module-->Line_22 $$ if (!candidateModule.equals(module)) [ FD ]
Line_40 $$ if (candidateModule != null && myScopeModules.contains(candidateModule)) -->Line_42 $$ final String[] excludeRootUrls = moduleRootManager.getExcludeRootUrls()[ CD ]
Line_11 $$ for (final String contentRootUrl : contentRootUrls) -->Line_18 $$ if (contentRootUrl.length() == maxUrlLength) [ FD ]
Line_20 $$ candidateModule = module-->Line_41 $$ final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(candidateModule)[ FD ]
Line_6 $$ Module candidateModule = null-->Line_20 $$ candidateModule = module[ FD ]
Line_9 $$ for (final Module module : myModules) -->Line_22 $$ if (!candidateModule.equals(module)) [ FD ]
Line_20 $$ candidateModule = module-->Line_40 $$ if (candidateModule != null && myScopeModules.contains(candidateModule)) [ FD ]
Line_25 $$ final VirtualFile contentRootFile = VirtualFileManager.getInstance().findFileByUrl(contentRootUrl)-->Line_26 $$ if (contentRootFile != null) [ FD ]
Line_26 $$ if (contentRootFile != null) -->Line_27 $$ return projectFileIndex.getModuleForFile(contentRootFile)[ CD ]
Line_19 $$ if (candidateModule == null) -->Line_22 $$ if (!candidateModule.equals(module)) [ CD ]
Line_11 $$ for (final String contentRootUrl : contentRootUrls) -->Line_15 $$ if (!isUrlUnderRoot(url, contentRootUrl)) [ FD ]
Line_2 $$ public boolean belongs(final String url) -->Line_7 $$ int maxUrlLength = 0[ CD ]
Line_7 $$ int maxUrlLength = 0-->Line_12 $$ if (contentRootUrl.length() < maxUrlLength) [ FD ]
Line_25 $$ final VirtualFile contentRootFile = VirtualFileManager.getInstance().findFileByUrl(contentRootUrl)-->Line_27 $$ return projectFileIndex.getModuleForFile(contentRootFile)[ FD ]
Line_2 $$ public boolean belongs(final String url) -->Line_15 $$ if (!isUrlUnderRoot(url, contentRootUrl)) [ FD ]
Line_6 $$ Module candidateModule = null-->Line_22 $$ if (!candidateModule.equals(module)) [ FD ]
Line_2 $$ public boolean belongs(final String url) -->Line_40 $$ if (candidateModule != null && myScopeModules.contains(candidateModule)) [ CD ]
Line_44 $$ if (isUrlUnderRoot(url, excludeRootUrl)) -->Line_45 $$ return false[ CD ]
Line_9 $$ for (final Module module : myModules) -->Line_20 $$ candidateModule = module[ FD ]
Line_2 $$ public boolean belongs(final String url) -->Line_6 $$ Module candidateModule = null[ CD ]
Line_2 $$ public boolean belongs(final String url) -->Line_55 $$ return false[ CD ]
Line_22 $$ if (!candidateModule.equals(module)) -->Line_23 $$ candidateModule = ApplicationManager.getApplication().runReadAction(new Computable<Module>() [ CD ]
Line_40 $$ if (candidateModule != null && myScopeModules.contains(candidateModule)) -->Line_41 $$ final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(candidateModule)[ CD ]
Line_11 $$ for (final String contentRootUrl : contentRootUrls) -->Line_25 $$ final VirtualFile contentRootFile = VirtualFileManager.getInstance().findFileByUrl(contentRootUrl)[ FD ]
Line_7 $$ int maxUrlLength = 0-->Line_18 $$ if (contentRootUrl.length() == maxUrlLength) [ FD ]
Line_11 $$ for (final String contentRootUrl : contentRootUrls) -->Line_35 $$ maxUrlLength = contentRootUrl.length()[ FD ]
Line_9 $$ for (final Module module : myModules) -->Line_10 $$ final String[] contentRootUrls = getModuleContentUrls(module)[ FD ]
Line_50 $$ if (isUrlUnderRoot(url, sourceRootUrl)) -->Line_51 $$ return true[ CD ]
Line_3 $$ if (myScopeModules.isEmpty()) -->Line_4 $$ return false[ CD ]
Line_18 $$ if (contentRootUrl.length() == maxUrlLength) -->Line_19 $$ if (candidateModule == null) [ CD ]
Line_19 $$ if (candidateModule == null) -->Line_20 $$ candidateModule = module[ CD ]
Line_6 $$ Module candidateModule = null-->Line_23 $$ candidateModule = ApplicationManager.getApplication().runReadAction(new Computable<Module>() [ FD ]
Line_2 $$ public boolean belongs(final String url) -->Line_3 $$ if (myScopeModules.isEmpty()) [ CD ]
