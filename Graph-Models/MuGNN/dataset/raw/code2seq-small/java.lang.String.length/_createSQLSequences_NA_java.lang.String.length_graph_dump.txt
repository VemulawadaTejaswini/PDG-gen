Line_23 $$ for (int i = 0; i < _ejbList.size(); i++) -->Line_28 $$ if (!entity.isDefaultDataSource()) [ CD ]
Line_31 $$ List<EntityColumn> columnList = entity.getColumnList()-->Line_33 $$ EntityColumn column = columnList.get(j)[ FD ]
Line_23 $$ for (int i = 0; i < _ejbList.size(); i++) -->Line_24 $$ Entity entity = _ejbList.get(i)[ FD ]
Line_23 $$ for (int i = 0; i < _ejbList.size(); i++) -->Line_31 $$ List<EntityColumn> columnList = entity.getColumnList()[ CD ]
Line_32 $$ for (int j = 0; j < columnList.size(); j++) -->Line_33 $$ EntityColumn column = columnList.get(j)[ CD ]
Line_14 $$ String sequenceSQL = unsyncBufferedReader.readLine()-->Line_52 $$ sb.append(sequenceSQL)[ FD ]
Line_36 $$ String sequenceName = column.getIdParam()-->Line_37 $$ if (sequenceName.length() > 30) [ FD ]
Line_11 $$ Set<String> sequenceSQLs = new TreeSet()-->Line_55 $$ if (!sequenceSQLs.isEmpty()) [ FD ]
Line_8 $$ if (!sqlFile.exists()) -->Line_9 $$ _touch(sqlFile)[ CD ]
Line_33 $$ EntityColumn column = columnList.get(j)-->Line_36 $$ String sequenceName = column.getIdParam()[ FD ]
Line_23 $$ for (int i = 0; i < _ejbList.size(); i++) -->Line_32 $$ for (int j = 0; j < columnList.size(); j++) [ CD ]
Line_35 $$ StringBundler sb = new StringBundler()-->Line_42 $$ sb.append(";")[ FD ]
Line_35 $$ StringBundler sb = new StringBundler()-->Line_53 $$ sb.append("\n")[ FD ]
Line_3 $$ File sqlDir = new File(_sqlDirName)-->Line_5 $$ _mkdir(sqlDir)[ FD ]
Line_7 $$ File sqlFile = new File(_sqlDirName + "/" + _sqlSequencesFileName)-->Line_9 $$ _touch(sqlFile)[ FD ]
Line_34 $$ if ("sequence".equals(column.getIdType())) -->Line_37 $$ if (sequenceName.length() > 30) [ CD ]
Line_23 $$ for (int i = 0; i < _ejbList.size(); i++) -->Line_25 $$ if (!_isTargetEntity(entity)) [ CD ]
Line_13 $$ while (true) -->Line_15 $$ if (sequenceSQL == null) [ CD ]
Line_34 $$ if ("sequence".equals(column.getIdType())) -->Line_44 $$ if (!sequenceSQLs.contains(sequenceSQL)) [ CD ]
Line_37 $$ if (sequenceName.length() > 30) -->Line_38 $$ sequenceName = sequenceName.substring(0, 30)[ CD ]
Line_7 $$ File sqlFile = new File(_sqlDirName + "/" + _sqlSequencesFileName)-->Line_8 $$ if (!sqlFile.exists()) [ FD ]
Line_24 $$ Entity entity = _ejbList.get(i)-->Line_28 $$ if (!entity.isDefaultDataSource()) [ FD ]
Line_14 $$ String sequenceSQL = unsyncBufferedReader.readLine()-->Line_18 $$ if (Validator.isNotNull(sequenceSQL)) [ FD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_3 $$ File sqlDir = new File(_sqlDirName)[ CD ]
Line_34 $$ if ("sequence".equals(column.getIdType())) -->Line_35 $$ StringBundler sb = new StringBundler()[ CD ]
Line_14 $$ String sequenceSQL = unsyncBufferedReader.readLine()-->Line_15 $$ if (sequenceSQL == null) [ FD ]
Line_11 $$ Set<String> sequenceSQLs = new TreeSet()-->Line_45 $$ sequenceSQLs.add(sequenceSQL)[ FD ]
Line_43 $$ String sequenceSQL = sb.toString()-->Line_44 $$ if (!sequenceSQLs.contains(sequenceSQL)) [ FD ]
Line_35 $$ StringBundler sb = new StringBundler()-->Line_43 $$ String sequenceSQL = sb.toString()[ FD ]
Line_12 $$ try (UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(new FileReader(sqlFile))) -->Line_14 $$ String sequenceSQL = unsyncBufferedReader.readLine()[ FD ]
Line_43 $$ String sequenceSQL = sb.toString()-->Line_52 $$ sb.append(sequenceSQL)[ FD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_7 $$ File sqlFile = new File(_sqlDirName + "/" + _sqlSequencesFileName)[ CD ]
Line_50 $$ StringBundler sb = new StringBundler(sequenceSQLs.size() * 2)-->Line_56 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_34 $$ if ("sequence".equals(column.getIdType())) -->Line_42 $$ sb.append(";")[ CD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_58 $$ ToolsUtil.writeFileRaw(sqlFile, sb.toString(), _modifiedFileNames)[ CD ]
Line_13 $$ while (true) -->Line_18 $$ if (Validator.isNotNull(sequenceSQL)) [ CD ]
Line_50 $$ StringBundler sb = new StringBundler(sequenceSQLs.size() * 2)-->Line_52 $$ sb.append(sequenceSQL)[ FD ]
Line_33 $$ EntityColumn column = columnList.get(j)-->Line_34 $$ if ("sequence".equals(column.getIdType())) [ FD ]
Line_14 $$ String sequenceSQL = unsyncBufferedReader.readLine()-->Line_45 $$ sequenceSQLs.add(sequenceSQL)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler()-->Line_40 $$ sb.append("create sequence ")[ FD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_4 $$ if (!sqlDir.exists()) [ CD ]
Line_44 $$ if (!sequenceSQLs.contains(sequenceSQL)) -->Line_45 $$ sequenceSQLs.add(sequenceSQL)[ CD ]
Line_34 $$ if ("sequence".equals(column.getIdType())) -->Line_40 $$ sb.append("create sequence ")[ CD ]
Line_23 $$ for (int i = 0; i < _ejbList.size(); i++) -->Line_24 $$ Entity entity = _ejbList.get(i)[ CD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_23 $$ for (int i = 0; i < _ejbList.size(); i++) [ CD ]
Line_11 $$ Set<String> sequenceSQLs = new TreeSet()-->Line_19 $$ sequenceSQLs.add(sequenceSQL)[ FD ]
Line_55 $$ if (!sequenceSQLs.isEmpty()) -->Line_56 $$ sb.setIndex(sb.index() - 1)[ CD ]
Line_35 $$ StringBundler sb = new StringBundler()-->Line_52 $$ sb.append(sequenceSQL)[ FD ]
Line_13 $$ while (true) -->Line_14 $$ String sequenceSQL = unsyncBufferedReader.readLine()[ CD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_55 $$ if (!sequenceSQLs.isEmpty()) [ CD ]
Line_24 $$ Entity entity = _ejbList.get(i)-->Line_25 $$ if (!_isTargetEntity(entity)) [ FD ]
Line_18 $$ if (Validator.isNotNull(sequenceSQL)) -->Line_19 $$ sequenceSQLs.add(sequenceSQL)[ CD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_8 $$ if (!sqlFile.exists()) [ CD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_11 $$ Set<String> sequenceSQLs = new TreeSet()[ CD ]
Line_32 $$ for (int j = 0; j < columnList.size(); j++) -->Line_34 $$ if ("sequence".equals(column.getIdType())) [ CD ]
Line_34 $$ if ("sequence".equals(column.getIdType())) -->Line_41 $$ sb.append(sequenceName)[ CD ]
Line_35 $$ StringBundler sb = new StringBundler()-->Line_58 $$ ToolsUtil.writeFileRaw(sqlFile, sb.toString(), _modifiedFileNames)[ FD ]
Line_36 $$ String sequenceName = column.getIdParam()-->Line_41 $$ sb.append(sequenceName)[ FD ]
Line_24 $$ Entity entity = _ejbList.get(i)-->Line_31 $$ List<EntityColumn> columnList = entity.getColumnList()[ FD ]
Line_3 $$ File sqlDir = new File(_sqlDirName)-->Line_4 $$ if (!sqlDir.exists()) [ FD ]
Line_2 $$ private void _createSQLSequences() throws IOException -->Line_50 $$ StringBundler sb = new StringBundler(sequenceSQLs.size() * 2)[ CD ]
Line_4 $$ if (!sqlDir.exists()) -->Line_5 $$ _mkdir(sqlDir)[ CD ]
Line_50 $$ StringBundler sb = new StringBundler(sequenceSQLs.size() * 2)-->Line_53 $$ sb.append("\n")[ FD ]
Line_11 $$ Set<String> sequenceSQLs = new TreeSet()-->Line_50 $$ StringBundler sb = new StringBundler(sequenceSQLs.size() * 2)[ FD ]
Line_34 $$ if ("sequence".equals(column.getIdType())) -->Line_36 $$ String sequenceName = column.getIdParam()[ CD ]
Line_38 $$ sequenceName = sequenceName.substring(0, 30)-->Line_37 $$ if (sequenceName.length() > 30) [ FD ]
Line_14 $$ String sequenceSQL = unsyncBufferedReader.readLine()-->Line_19 $$ sequenceSQLs.add(sequenceSQL)[ FD ]
Line_14 $$ String sequenceSQL = unsyncBufferedReader.readLine()-->Line_44 $$ if (!sequenceSQLs.contains(sequenceSQL)) [ FD ]
Line_7 $$ File sqlFile = new File(_sqlDirName + "/" + _sqlSequencesFileName)-->Line_58 $$ ToolsUtil.writeFileRaw(sqlFile, sb.toString(), _modifiedFileNames)[ FD ]
Line_50 $$ StringBundler sb = new StringBundler(sequenceSQLs.size() * 2)-->Line_58 $$ ToolsUtil.writeFileRaw(sqlFile, sb.toString(), _modifiedFileNames)[ FD ]
Line_32 $$ for (int j = 0; j < columnList.size(); j++) -->Line_33 $$ EntityColumn column = columnList.get(j)[ FD ]
Line_36 $$ String sequenceName = column.getIdParam()-->Line_38 $$ sequenceName = sequenceName.substring(0, 30)[ FD ]
Line_11 $$ Set<String> sequenceSQLs = new TreeSet()-->Line_44 $$ if (!sequenceSQLs.contains(sequenceSQL)) [ FD ]
Line_35 $$ StringBundler sb = new StringBundler()-->Line_56 $$ sb.setIndex(sb.index() - 1)[ FD ]
Line_35 $$ StringBundler sb = new StringBundler()-->Line_41 $$ sb.append(sequenceName)[ FD ]
Line_43 $$ String sequenceSQL = sb.toString()-->Line_45 $$ sequenceSQLs.add(sequenceSQL)[ FD ]
Line_51 $$ for (String sequenceSQL : sequenceSQLs) -->Line_52 $$ sb.append(sequenceSQL)[ FD ]
Line_31 $$ List<EntityColumn> columnList = entity.getColumnList()-->Line_32 $$ for (int j = 0; j < columnList.size(); j++) [ FD ]
Line_34 $$ if ("sequence".equals(column.getIdType())) -->Line_43 $$ String sequenceSQL = sb.toString()[ CD ]
Line_38 $$ sequenceName = sequenceName.substring(0, 30)-->Line_41 $$ sb.append(sequenceName)[ FD ]
