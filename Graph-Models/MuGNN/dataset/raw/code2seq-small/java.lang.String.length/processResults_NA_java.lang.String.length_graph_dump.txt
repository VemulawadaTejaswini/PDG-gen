Line_32 $$ MavenClassSearchResult classResult = result.get(key)-->Line_43 $$ result.put(key, classResult)[ FD ]
Line_36 $$ if (pos == -1) -->Line_38 $$ classResult.className = classFQName[ CD ]
Line_36 $$ if (pos == -1) -->Line_40 $$ classResult.packageName = classFQName.substring(0, pos)[ CD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) [ FD ]
Line_28 $$ String classFQName = matcher.group(1)-->Line_31 $$ String key = makeKey(classFQName, each)[ FD ]
Line_34 $$ classResult = new MavenClassSearchResult()-->Line_33 $$ if (classResult == null) [ FD ]
Line_4 $$ pattern = "^/(.*)$"-->Line_13 $$ pattern = ".*?/" + pattern[ FD ]
Line_32 $$ MavenClassSearchResult classResult = result.get(key)-->Line_34 $$ classResult = new MavenClassSearchResult()[ FD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_13 $$ pattern = ".*?/" + pattern[ CD ]
Line_28 $$ String classFQName = matcher.group(1)-->Line_41 $$ classResult.className = classFQName.substring(pos + 1)[ FD ]
Line_34 $$ classResult = new MavenClassSearchResult()-->Line_43 $$ result.put(key, classResult)[ FD ]
Line_27 $$ while (matcher.find()) -->Line_33 $$ if (classResult == null) [ CD ]
Line_27 $$ while (matcher.find()) -->Line_32 $$ MavenClassSearchResult classResult = result.get(key)[ CD ]
Line_22 $$ Map<String, MavenClassSearchResult> result = new THashMap<String, MavenClassSearchResult>()-->Line_46 $$ if (result.size() > maxResult)[ FD ]
Line_31 $$ String key = makeKey(classFQName, each)-->Line_32 $$ MavenClassSearchResult classResult = result.get(key)[ FD ]
Line_12 $$ pattern = packagePattern + classNamePattern-->Line_14 $$ pattern = "^(" + pattern + ")$"[ FD ]
Line_28 $$ String classFQName = matcher.group(1)-->Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_50 $$ return result.values()[ CD ]
Line_22 $$ Map<String, MavenClassSearchResult> result = new THashMap<String, MavenClassSearchResult>()-->Line_50 $$ return result.values()[ FD ]
Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")-->Line_29 $$ classFQName = classFQName.replace("/", ".")[ FD ]
Line_4 $$ pattern = "^/(.*)$"-->Line_12 $$ pattern = packagePattern + classNamePattern[ FD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_10 $$ packagePattern = packagePattern.replaceAll("\\*", ".*?")[ CD ]
Line_16 $$ Pattern p-->Line_18 $$ p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)[ FD ]
Line_22 $$ Map<String, MavenClassSearchResult> result = new THashMap<String, MavenClassSearchResult>()-->Line_32 $$ MavenClassSearchResult classResult = result.get(key)[ FD ]
Line_18 $$ p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)-->Line_26 $$ Matcher matcher = p.matcher(each.getClassNames())[ FD ]
Line_27 $$ while (matcher.find()) -->Line_29 $$ classFQName = classFQName.replace("/", ".")[ CD ]
Line_6 $$ pattern = pattern.replace(".", "/")-->Line_8 $$ String packagePattern = lastDot == -1 ? "" : (pattern.substring(0, lastDot) + "/")[ FD ]
Line_6 $$ pattern = pattern.replace(".", "/")-->Line_9 $$ String classNamePattern = lastDot == -1 ? pattern : pattern.substring(lastDot + 1)[ FD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_12 $$ pattern = packagePattern + classNamePattern[ CD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_4 $$ pattern = "^/(.*)$"[ FD ]
Line_7 $$ int lastDot = pattern.lastIndexOf("/")-->Line_8 $$ String packagePattern = lastDot == -1 ? "" : (pattern.substring(0, lastDot) + "/")[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_16 $$ Pattern p[ CD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_4 $$ pattern = "^/(.*)$"[ CD ]
Line_33 $$ if (classResult == null) -->Line_36 $$ if (pos == -1) [ CD ]
Line_29 $$ classFQName = classFQName.replace("/", ".")-->Line_38 $$ classResult.className = classFQName[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_8 $$ String packagePattern = lastDot == -1 ? "" : (pattern.substring(0, lastDot) + "/")[ FD ]
Line_28 $$ String classFQName = matcher.group(1)-->Line_40 $$ classResult.packageName = classFQName.substring(0, pos)[ FD ]
Line_4 $$ pattern = "^/(.*)$"-->Line_7 $$ int lastDot = pattern.lastIndexOf("/")[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_46 $$ if (result.size() > maxResult)[ FD ]
Line_31 $$ String key = makeKey(classFQName, each)-->Line_43 $$ result.put(key, classResult)[ FD ]
Line_28 $$ String classFQName = matcher.group(1)-->Line_38 $$ classResult.className = classFQName[ FD ]
Line_14 $$ pattern = "^(" + pattern + ")$"-->Line_18 $$ p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_18 $$ p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)[ FD ]
Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")-->Line_40 $$ classResult.packageName = classFQName.substring(0, pos)[ FD ]
Line_36 $$ if (pos == -1) -->Line_37 $$ classResult.packageName = "default package"[ CD ]
Line_4 $$ pattern = "^/(.*)$"-->Line_6 $$ pattern = pattern.replace(".", "/")[ FD ]
Line_8 $$ String packagePattern = lastDot == -1 ? "" : (pattern.substring(0, lastDot) + "/")-->Line_10 $$ packagePattern = packagePattern.replaceAll("\\*", ".*?")[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_9 $$ String classNamePattern = lastDot == -1 ? pattern : pattern.substring(lastDot + 1)[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_13 $$ pattern = ".*?/" + pattern[ FD ]
Line_22 $$ Map<String, MavenClassSearchResult> result = new THashMap<String, MavenClassSearchResult>()-->Line_43 $$ result.put(key, classResult)[ FD ]
Line_13 $$ pattern = ".*?/" + pattern-->Line_18 $$ p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)[ FD ]
Line_8 $$ String packagePattern = lastDot == -1 ? "" : (pattern.substring(0, lastDot) + "/")-->Line_12 $$ pattern = packagePattern + classNamePattern[ FD ]
Line_23 $$ for (MavenArtifactInfo each : infos) -->Line_45 $$ classResult.versions.add(each)[ FD ]
Line_23 $$ for (MavenArtifactInfo each : infos) -->Line_31 $$ String key = makeKey(classFQName, each)[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_12 $$ pattern = packagePattern + classNamePattern[ FD ]
Line_6 $$ pattern = pattern.replace(".", "/")-->Line_13 $$ pattern = ".*?/" + pattern[ FD ]
Line_11 $$ classNamePattern = classNamePattern.replaceAll("\\*", "[^/]*?")-->Line_12 $$ pattern = packagePattern + classNamePattern[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_14 $$ pattern = "^(" + pattern + ")$"[ FD ]
Line_6 $$ pattern = pattern.replace(".", "/")-->Line_12 $$ pattern = packagePattern + classNamePattern[ FD ]
Line_4 $$ pattern = "^/(.*)$"-->Line_8 $$ String packagePattern = lastDot == -1 ? "" : (pattern.substring(0, lastDot) + "/")[ FD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_14 $$ pattern = "^(" + pattern + ")$"[ CD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) [ CD ]
Line_26 $$ Matcher matcher = p.matcher(each.getClassNames())-->Line_27 $$ while (matcher.find()) [ FD ]
Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")-->Line_41 $$ classResult.className = classFQName.substring(pos + 1)[ FD ]
Line_23 $$ for (MavenArtifactInfo each : infos) -->Line_24 $$ if (each.getClassNames() == null)[ FD ]
Line_28 $$ String classFQName = matcher.group(1)-->Line_35 $$ int pos = classFQName.lastIndexOf(".")[ FD ]
Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")-->Line_35 $$ int pos = classFQName.lastIndexOf(".")[ FD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_8 $$ String packagePattern = lastDot == -1 ? "" : (pattern.substring(0, lastDot) + "/")[ CD ]
Line_29 $$ classFQName = classFQName.replace("/", ".")-->Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")[ FD ]
Line_29 $$ classFQName = classFQName.replace("/", ".")-->Line_40 $$ classResult.packageName = classFQName.substring(0, pos)[ FD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_11 $$ classNamePattern = classNamePattern.replaceAll("\\*", "[^/]*?")[ CD ]
Line_23 $$ for (MavenArtifactInfo each : infos) -->Line_26 $$ Matcher matcher = p.matcher(each.getClassNames())[ FD ]
Line_33 $$ if (classResult == null) -->Line_35 $$ int pos = classFQName.lastIndexOf(".")[ CD ]
Line_9 $$ String classNamePattern = lastDot == -1 ? pattern : pattern.substring(lastDot + 1)-->Line_12 $$ pattern = packagePattern + classNamePattern[ FD ]
Line_32 $$ MavenClassSearchResult classResult = result.get(key)-->Line_33 $$ if (classResult == null) [ FD ]
Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")-->Line_38 $$ classResult.className = classFQName[ FD ]
Line_27 $$ while (matcher.find()) -->Line_45 $$ classResult.versions.add(each)[ CD ]
Line_6 $$ pattern = pattern.replace(".", "/")-->Line_7 $$ int lastDot = pattern.lastIndexOf("/")[ FD ]
Line_27 $$ while (matcher.find()) -->Line_28 $$ String classFQName = matcher.group(1)[ CD ]
Line_6 $$ pattern = pattern.replace(".", "/")-->Line_18 $$ p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)[ FD ]
Line_33 $$ if (classResult == null) -->Line_43 $$ result.put(key, classResult)[ CD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_22 $$ Map<String, MavenClassSearchResult> result = new THashMap<String, MavenClassSearchResult>()[ CD ]
Line_4 $$ pattern = "^/(.*)$"-->Line_14 $$ pattern = "^(" + pattern + ")$"[ FD ]
Line_9 $$ String classNamePattern = lastDot == -1 ? pattern : pattern.substring(lastDot + 1)-->Line_11 $$ classNamePattern = classNamePattern.replaceAll("\\*", "[^/]*?")[ FD ]
Line_4 $$ pattern = "^/(.*)$"-->Line_9 $$ String classNamePattern = lastDot == -1 ? pattern : pattern.substring(lastDot + 1)[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_7 $$ int lastDot = pattern.lastIndexOf("/")[ FD ]
Line_33 $$ if (classResult == null) -->Line_34 $$ classResult = new MavenClassSearchResult()[ CD ]
Line_29 $$ classFQName = classFQName.replace("/", ".")-->Line_41 $$ classResult.className = classFQName.substring(pos + 1)[ FD ]
Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")-->Line_31 $$ String key = makeKey(classFQName, each)[ FD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_6 $$ pattern = pattern.replace(".", "/")[ CD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_9 $$ String classNamePattern = lastDot == -1 ? pattern : pattern.substring(lastDot + 1)[ CD ]
Line_10 $$ packagePattern = packagePattern.replaceAll("\\*", ".*?")-->Line_12 $$ pattern = packagePattern + classNamePattern[ FD ]
Line_6 $$ pattern = pattern.replace(".", "/")-->Line_14 $$ pattern = "^(" + pattern + ")$"[ FD ]
Line_12 $$ pattern = packagePattern + classNamePattern-->Line_13 $$ pattern = ".*?/" + pattern[ FD ]
Line_27 $$ while (matcher.find()) -->Line_31 $$ String key = makeKey(classFQName, each)[ CD ]
Line_16 $$ Pattern p-->Line_26 $$ Matcher matcher = p.matcher(each.getClassNames())[ FD ]
Line_35 $$ int pos = classFQName.lastIndexOf(".")-->Line_36 $$ if (pos == -1) [ FD ]
Line_35 $$ int pos = classFQName.lastIndexOf(".")-->Line_40 $$ classResult.packageName = classFQName.substring(0, pos)[ FD ]
Line_27 $$ while (matcher.find()) -->Line_46 $$ if (result.size() > maxResult)[ CD ]
Line_28 $$ String classFQName = matcher.group(1)-->Line_29 $$ classFQName = classFQName.replace("/", ".")[ FD ]
Line_29 $$ classFQName = classFQName.replace("/", ".")-->Line_31 $$ String key = makeKey(classFQName, each)[ FD ]
Line_13 $$ pattern = ".*?/" + pattern-->Line_14 $$ pattern = "^(" + pattern + ")$"[ FD ]
Line_36 $$ if (pos == -1) -->Line_41 $$ classResult.className = classFQName.substring(pos + 1)[ CD ]
Line_4 $$ pattern = "^/(.*)$"-->Line_18 $$ p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)[ FD ]
Line_27 $$ while (matcher.find()) -->Line_30 $$ classFQName = StringUtil.trimStart(classFQName, ".")[ CD ]
Line_3 $$ if (pattern.length() == 0 || pattern.equals("*")) -->Line_7 $$ int lastDot = pattern.lastIndexOf("/")[ CD ]
Line_12 $$ pattern = packagePattern + classNamePattern-->Line_18 $$ p = Pattern.compile(pattern, Pattern.CASE_INSENSITIVE | Pattern.MULTILINE)[ FD ]
Line_29 $$ classFQName = classFQName.replace("/", ".")-->Line_35 $$ int pos = classFQName.lastIndexOf(".")[ FD ]
Line_26 $$ Matcher matcher = p.matcher(each.getClassNames())-->Line_28 $$ String classFQName = matcher.group(1)[ FD ]
Line_2 $$ protected Collection<MavenClassSearchResult> processResults(Set<MavenArtifactInfo> infos, String pattern, int maxResult) -->Line_6 $$ pattern = pattern.replace(".", "/")[ FD ]
