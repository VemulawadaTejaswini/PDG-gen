Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_17 $$ return new CommonProblemDescriptor[] [ FD ]
Line_6 $$ final String name = refEntity.getName()-->Line_16 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.long", name)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_20 $$ if (matcher.matches()) [ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_13 $$ return new CommonProblemDescriptor[] [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_15 $$ if (length > m_maxLength) [ CD ]
Line_20 $$ if (matcher.matches()) -->Line_21 $$ return null[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_24 $$ return new CommonProblemDescriptor[] [ FD ]
Line_7 $$ if ("default package".equals(name)) -->Line_8 $$ return null[ CD ]
Line_12 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)-->Line_24 $$ return new CommonProblemDescriptor[] [ FD ]
Line_15 $$ if (length > m_maxLength) -->Line_16 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.long", name)[ CD ]
Line_11 $$ if (length < m_minLength) -->Line_12 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)[ CD ]
Line_6 $$ final String name = refEntity.getName()-->Line_23 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.regex.mismatch", name, m_regex)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_3 $$ if (!(refEntity instanceof RefPackage)) [ CD ]
Line_6 $$ final String name = refEntity.getName()-->Line_7 $$ if ("default package".equals(name)) [ FD ]
Line_20 $$ if (matcher.matches()) -->Line_23 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.regex.mismatch", name, m_regex)[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_6 $$ final String name = refEntity.getName()[ CD ]
Line_6 $$ final String name = refEntity.getName()-->Line_12 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_7 $$ if ("default package".equals(name)) [ CD ]
Line_12 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)-->Line_17 $$ return new CommonProblemDescriptor[] [ FD ]
Line_15 $$ if (length > m_maxLength) -->Line_17 $$ return new CommonProblemDescriptor[] [ CD ]
Line_3 $$ if (!(refEntity instanceof RefPackage)) -->Line_4 $$ return null[ CD ]
Line_10 $$ final int length = name.length()-->Line_11 $$ if (length < m_minLength) [ FD ]
Line_6 $$ final String name = refEntity.getName()-->Line_10 $$ final int length = name.length()[ FD ]
Line_10 $$ final int length = name.length()-->Line_15 $$ if (length > m_maxLength) [ FD ]
Line_6 $$ final String name = refEntity.getName()-->Line_19 $$ final Matcher matcher = m_regexPattern.matcher(name)[ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_10 $$ final int length = name.length()[ CD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_19 $$ final Matcher matcher = m_regexPattern.matcher(name)[ CD ]
Line_12 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)-->Line_13 $$ return new CommonProblemDescriptor[] [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_11 $$ if (length < m_minLength) [ CD ]
Line_20 $$ if (matcher.matches()) -->Line_24 $$ return new CommonProblemDescriptor[] [ CD ]
Line_11 $$ if (length < m_minLength) -->Line_13 $$ return new CommonProblemDescriptor[] [ CD ]
Line_19 $$ final Matcher matcher = m_regexPattern.matcher(name)-->Line_20 $$ if (matcher.matches()) [ FD ]
Line_2 $$ public CommonProblemDescriptor[] checkElement(@NotNull RefEntity refEntity, @NotNull AnalysisScope analysisScope, @NotNull InspectionManager inspectionManager, @NotNull GlobalInspectionContext globalInspectionContext) -->Line_6 $$ final String name = refEntity.getName()[ FD ]
