Line_15 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)-->Line_20 $$ return new CommonProblemDescriptor[] [ FD ]
Line_15 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)-->Line_27 $$ return new CommonProblemDescriptor[] [ FD ]
Line_5 $$ if (!(refEntity instanceof RefPackage)) -->Line_6 $$ return null[ CD ]
Line_14 $$ if (length < m_minLength) -->Line_16 $$ return new CommonProblemDescriptor[] [ CD ]
Line_23 $$ if (matcher.matches()) -->Line_27 $$ return new CommonProblemDescriptor[] [ CD ]
Line_14 $$ if (length < m_minLength) -->Line_15 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)[ CD ]
Line_22 $$ final Matcher matcher = m_regexPattern.matcher(name)-->Line_23 $$ if (matcher.matches()) [ FD ]
Line_23 $$ if (matcher.matches()) -->Line_24 $$ return null[ CD ]
Line_13 $$ final int length = name.length()-->Line_18 $$ if (length > m_maxLength) [ FD ]
Line_10 $$ if ("default package".equals(name)) -->Line_11 $$ return null[ CD ]
Line_23 $$ if (matcher.matches()) -->Line_26 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.regex.mismatch", name, m_regex)[ CD ]
Line_18 $$ if (length > m_maxLength) -->Line_20 $$ return new CommonProblemDescriptor[] [ CD ]
Line_15 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.short", name)-->Line_16 $$ return new CommonProblemDescriptor[] [ FD ]
Line_18 $$ if (length > m_maxLength) -->Line_19 $$ final String errorString = InspectionGadgetsBundle.message("package.naming.convention.problem.descriptor.long", name)[ CD ]
Line_13 $$ final int length = name.length()-->Line_14 $$ if (length < m_minLength) [ FD ]
