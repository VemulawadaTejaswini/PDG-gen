Line_18 $$ int maxPosition = text.length()-->Line_38 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_11 $$ int start = 0-->Line_30 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, getEndOffset(currentPosition, string, maxPosition, closingQuote)), null, null)[ FD ]
Line_21 $$ final String trimmedString = string.trim()-->Line_40 $$ if (trimmedString.endsWith("\\"))[ FD ]
Line_12 $$ int end = host.getTextLength() - 1-->Line_47 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_46 $$ if (gotExample && start < end)[ CD ]
Line_23 $$ gotExample = false-->Line_37 $$ gotExample = true[ FD ]
Line_29 $$ endsWithSlash = false-->Line_34 $$ endsWithSlash = true[ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) [ FD ]
Line_46 $$ if (gotExample && start < end)-->Line_47 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ CD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_13 $$ final String text = host.getText()[ CD ]
Line_37 $$ gotExample = true-->Line_39 $$ if (trimmedString.startsWith("...") && gotExample) [ FD ]
Line_23 $$ gotExample = false-->Line_39 $$ if (trimmedString.startsWith("...") && gotExample) [ FD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_14 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)[ CD ]
Line_12 $$ int end = host.getTextLength() - 1-->Line_38 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_6 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(host)-->Line_7 $$ if (module == null || !PyDocumentationSettings.getInstance(module).isAnalyzeDoctest())[ FD ]
Line_16 $$ boolean gotExample = false-->Line_39 $$ if (trimmedString.startsWith("...") && gotExample) [ FD ]
Line_38 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)-->Line_42 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_19 $$ boolean endsWithSlash = false-->Line_28 $$ if (endsWithSlash && !trimmedString.endsWith("\\")) [ FD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_16 $$ boolean gotExample = false[ CD ]
Line_32 $$ if (trimmedString.startsWith(">>>")) -->Line_35 $$ if (!gotExample)[ CD ]
Line_37 $$ gotExample = true-->Line_46 $$ if (gotExample && start < end)[ FD ]
Line_19 $$ boolean endsWithSlash = false-->Line_29 $$ endsWithSlash = false[ FD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_19 $$ boolean endsWithSlash = false[ CD ]
Line_12 $$ int end = host.getTextLength() - 1-->Line_25 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_20 $$ for (String string : strings) -->Line_38 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_21 $$ final String trimmedString = string.trim()-->Line_33 $$ if (trimmedString.endsWith("\\"))[ FD ]
Line_40 $$ if (trimmedString.endsWith("\\"))-->Line_41 $$ endsWithSlash = true[ CD ]
Line_13 $$ final String text = host.getText()-->Line_14 $$ final Pair<String, String> quotes = PythonStringUtil.getQuotes(text)[ FD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_17 $$ int currentPosition = 0[ CD ]
Line_24 $$ if (!endsWithSlash)-->Line_25 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ CD ]
Line_22 $$ if (!trimmedString.startsWith(">>>") && !trimmedString.startsWith("...") && gotExample && start < end) -->Line_24 $$ if (!endsWithSlash)[ CD ]
Line_9 $$ final PyDocStringOwner docStringOwner = PsiTreeUtil.getParentOfType(host, PyDocStringOwner.class)-->Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) [ FD ]
Line_34 $$ endsWithSlash = true-->Line_41 $$ endsWithSlash = true[ FD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_15 $$ final List<String> strings = StringUtil.split(text, "\n", false)[ CD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_11 $$ int start = 0[ CD ]
Line_32 $$ if (trimmedString.startsWith(">>>")) -->Line_33 $$ if (trimmedString.endsWith("\\"))[ CD ]
Line_27 $$ final String closingQuote = quotes == null ? text.substring(0, 1) : quotes.second-->Line_30 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, getEndOffset(currentPosition, string, maxPosition, closingQuote)), null, null)[ FD ]
Line_16 $$ boolean gotExample = false-->Line_35 $$ if (!gotExample)[ FD ]
Line_18 $$ int maxPosition = text.length()-->Line_42 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_27 $$ final String closingQuote = quotes == null ? text.substring(0, 1) : quotes.second-->Line_38 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_29 $$ endsWithSlash = false-->Line_41 $$ endsWithSlash = true[ FD ]
Line_17 $$ int currentPosition = 0-->Line_38 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_28 $$ if (endsWithSlash && !trimmedString.endsWith("\\")) -->Line_30 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, getEndOffset(currentPosition, string, maxPosition, closingQuote)), null, null)[ CD ]
Line_7 $$ if (module == null || !PyDocumentationSettings.getInstance(module).isAnalyzeDoctest())-->Line_8 $$ return[ CD ]
Line_33 $$ if (trimmedString.endsWith("\\"))-->Line_34 $$ endsWithSlash = true[ CD ]
Line_39 $$ if (trimmedString.startsWith("...") && gotExample) -->Line_42 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ CD ]
Line_38 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)-->Line_47 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_6 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(host)[ FD ]
Line_32 $$ if (trimmedString.startsWith(">>>")) -->Line_39 $$ if (trimmedString.startsWith("...") && gotExample) [ CD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_12 $$ int end = host.getTextLength() - 1[ CD ]
Line_20 $$ for (String string : strings) -->Line_44 $$ currentPosition += string.length()[ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_9 $$ final PyDocStringOwner docStringOwner = PsiTreeUtil.getParentOfType(host, PyDocStringOwner.class)[ CD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_7 $$ if (module == null || !PyDocumentationSettings.getInstance(module).isAnalyzeDoctest())[ CD ]
Line_20 $$ for (String string : strings) -->Line_42 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_3 $$ if (!(host instanceof PyStringLiteralExpression)) -->Line_4 $$ return[ CD ]
Line_22 $$ if (!trimmedString.startsWith(">>>") && !trimmedString.startsWith("...") && gotExample && start < end) -->Line_23 $$ gotExample = false[ CD ]
Line_18 $$ int maxPosition = text.length()-->Line_30 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, getEndOffset(currentPosition, string, maxPosition, closingQuote)), null, null)[ FD ]
Line_32 $$ if (trimmedString.startsWith(">>>")) -->Line_38 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ CD ]
Line_19 $$ boolean endsWithSlash = false-->Line_34 $$ endsWithSlash = true[ FD ]
Line_36 $$ start = currentPosition-->Line_47 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_21 $$ final String trimmedString = string.trim()-->Line_28 $$ if (endsWithSlash && !trimmedString.endsWith("\\")) [ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_3 $$ if (!(host instanceof PyStringLiteralExpression)) [ CD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_9 $$ final PyDocStringOwner docStringOwner = PsiTreeUtil.getParentOfType(host, PyDocStringOwner.class)[ FD ]
Line_35 $$ if (!gotExample)-->Line_36 $$ start = currentPosition[ CD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_47 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_16 $$ boolean gotExample = false-->Line_46 $$ if (gotExample && start < end)[ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_12 $$ int end = host.getTextLength() - 1[ FD ]
Line_13 $$ final String text = host.getText()-->Line_15 $$ final List<String> strings = StringUtil.split(text, "\n", false)[ FD ]
Line_19 $$ boolean endsWithSlash = false-->Line_41 $$ endsWithSlash = true[ FD ]
Line_20 $$ for (String string : strings) -->Line_30 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, getEndOffset(currentPosition, string, maxPosition, closingQuote)), null, null)[ FD ]
Line_21 $$ final String trimmedString = string.trim()-->Line_32 $$ if (trimmedString.startsWith(">>>")) [ FD ]
Line_21 $$ final String trimmedString = string.trim()-->Line_39 $$ if (trimmedString.startsWith("...") && gotExample) [ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_13 $$ final String text = host.getText()[ FD ]
Line_17 $$ int currentPosition = 0-->Line_42 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_27 $$ final String closingQuote = quotes == null ? text.substring(0, 1) : quotes.second-->Line_42 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_11 $$ int start = 0-->Line_47 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_6 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(host)[ CD ]
Line_39 $$ if (trimmedString.startsWith("...") && gotExample) -->Line_40 $$ if (trimmedString.endsWith("\\"))[ CD ]
Line_11 $$ int start = 0-->Line_36 $$ start = currentPosition[ FD ]
Line_17 $$ int currentPosition = 0-->Line_30 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, getEndOffset(currentPosition, string, maxPosition, closingQuote)), null, null)[ FD ]
Line_17 $$ int currentPosition = 0-->Line_36 $$ start = currentPosition[ FD ]
Line_20 $$ for (String string : strings) -->Line_21 $$ final String trimmedString = string.trim()[ FD ]
Line_19 $$ boolean endsWithSlash = false-->Line_24 $$ if (!endsWithSlash)[ FD ]
Line_16 $$ boolean gotExample = false-->Line_23 $$ gotExample = false[ FD ]
Line_11 $$ int start = 0-->Line_25 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_12 $$ int end = host.getTextLength() - 1-->Line_42 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)[ FD ]
Line_32 $$ if (trimmedString.startsWith(">>>")) -->Line_37 $$ gotExample = true[ CD ]
Line_17 $$ int currentPosition = 0-->Line_44 $$ currentPosition += string.length()[ FD ]
Line_21 $$ final String trimmedString = string.trim()-->Line_22 $$ if (!trimmedString.startsWith(">>>") && !trimmedString.startsWith("...") && gotExample && start < end) [ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_25 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_30 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, getEndOffset(currentPosition, string, maxPosition, closingQuote)), null, null)[ FD ]
Line_42 $$ end = getEndOffset(currentPosition, string, maxPosition, closingQuote)-->Line_47 $$ injectionPlacesRegistrar.addPlace(PyDocstringLanguageDialect.getInstance(), TextRange.create(start, end), null, null)[ FD ]
Line_13 $$ final String text = host.getText()-->Line_18 $$ int maxPosition = text.length()[ FD ]
Line_2 $$ public void getLanguagesToInject(@NotNull final PsiLanguageInjectionHost host, @NotNull final InjectedLanguagePlaces injectionPlacesRegistrar) -->Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) [ CD ]
Line_10 $$ if (docStringOwner != null && host.equals(docStringOwner.getDocStringExpression())) -->Line_18 $$ int maxPosition = text.length()[ CD ]
Line_23 $$ gotExample = false-->Line_46 $$ if (gotExample && start < end)[ FD ]
Line_16 $$ boolean gotExample = false-->Line_37 $$ gotExample = true[ FD ]
Line_23 $$ gotExample = false-->Line_35 $$ if (!gotExample)[ FD ]
Line_13 $$ final String text = host.getText()-->Line_27 $$ final String closingQuote = quotes == null ? text.substring(0, 1) : quotes.second[ FD ]
Line_28 $$ if (endsWithSlash && !trimmedString.endsWith("\\")) -->Line_29 $$ endsWithSlash = false[ CD ]
