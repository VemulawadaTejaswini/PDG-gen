Line_16 $$ if (docOwner != null) -->Line_23 $$ return Result.STOP[ CD ]
Line_16 $$ if (docOwner != null) -->Line_20 $$ if (!StringUtil.isEmptyOrSpaces(docString.substring(3, docString.length() - 3))) [ CD ]
Line_2 $$ public Result charTyped(char c, Project project, @NotNull Editor editor, @NotNull PsiFile file) -->Line_13 $$ final Document document = editor.getDocument()[ FD ]
Line_20 $$ if (!StringUtil.isEmptyOrSpaces(docString.substring(3, docString.length() - 3))) -->Line_21 $$ editor.getCaretModel().moveCaretRelatively(100, 1, false, false, false)[ CD ]
Line_17 $$ final String quotes = document.getText(TextRange.from(expectedStringStart, 3))-->Line_18 $$ final String docString = PyDocstringGenerator.forDocStringOwner(docOwner).forceNewMode().withInferredParameters(true).withQuotes(quotes).buildDocString()[ FD ]
Line_12 $$ int expectedStringStart = offset - 4-->Line_17 $$ final String quotes = document.getText(TextRange.from(expectedStringStart, 3))[ FD ]
Line_2 $$ public Result charTyped(char c, Project project, @NotNull Editor editor, @NotNull PsiFile file) -->Line_6 $$ PsiElement element = file.findElementAt(offset)[ FD ]
Line_2 $$ public Result charTyped(char c, Project project, @NotNull Editor editor, @NotNull PsiFile file) -->Line_3 $$ CodeInsightSettings codeInsightSettings = CodeInsightSettings.getInstance()[ CD ]
Line_4 $$ if (c == ' ' && codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_5 $$ int offset = editor.getCaretModel().getOffset()[ CD ]
Line_4 $$ if (c == ' ' && codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_12 $$ int expectedStringStart = offset - 4[ CD ]
Line_2 $$ public Result charTyped(char c, Project project, @NotNull Editor editor, @NotNull PsiFile file) -->Line_8 $$ element = file.findElementAt(offset - 2)[ FD ]
Line_7 $$ if (element == null && offset > 1) -->Line_8 $$ element = file.findElementAt(offset - 2)[ CD ]
Line_8 $$ element = file.findElementAt(offset - 2)-->Line_14 $$ if (PythonEnterHandler.atDocCommentStart(element, expectedStringStart, document)) [ FD ]
Line_15 $$ final PyDocStringOwner docOwner = PsiTreeUtil.getParentOfType(element, PyDocStringOwner.class)-->Line_16 $$ if (docOwner != null) [ FD ]
Line_13 $$ final Document document = editor.getDocument()-->Line_17 $$ final String quotes = document.getText(TextRange.from(expectedStringStart, 3))[ FD ]
Line_16 $$ if (docOwner != null) -->Line_17 $$ final String quotes = document.getText(TextRange.from(expectedStringStart, 3))[ CD ]
Line_8 $$ element = file.findElementAt(offset - 2)-->Line_15 $$ final PyDocStringOwner docOwner = PsiTreeUtil.getParentOfType(element, PyDocStringOwner.class)[ FD ]
Line_18 $$ final String docString = PyDocstringGenerator.forDocStringOwner(docOwner).forceNewMode().withInferredParameters(true).withQuotes(quotes).buildDocString()-->Line_20 $$ if (!StringUtil.isEmptyOrSpaces(docString.substring(3, docString.length() - 3))) [ FD ]
Line_2 $$ public Result charTyped(char c, Project project, @NotNull Editor editor, @NotNull PsiFile file) -->Line_21 $$ editor.getCaretModel().moveCaretRelatively(100, 1, false, false, false)[ FD ]
Line_4 $$ if (c == ' ' && codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_14 $$ if (PythonEnterHandler.atDocCommentStart(element, expectedStringStart, document)) [ CD ]
Line_4 $$ if (c == ' ' && codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_10 $$ if (element == null)[ CD ]
Line_6 $$ PsiElement element = file.findElementAt(offset)-->Line_8 $$ element = file.findElementAt(offset - 2)[ FD ]
Line_4 $$ if (c == ' ' && codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_7 $$ if (element == null && offset > 1) [ CD ]
Line_18 $$ final String docString = PyDocstringGenerator.forDocStringOwner(docOwner).forceNewMode().withInferredParameters(true).withQuotes(quotes).buildDocString()-->Line_19 $$ document.insertString(offset, docString.substring(3))[ FD ]
Line_12 $$ int expectedStringStart = offset - 4-->Line_14 $$ if (PythonEnterHandler.atDocCommentStart(element, expectedStringStart, document)) [ FD ]
Line_4 $$ if (c == ' ' && codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_13 $$ final Document document = editor.getDocument()[ CD ]
Line_2 $$ public Result charTyped(char c, Project project, @NotNull Editor editor, @NotNull PsiFile file) -->Line_5 $$ int offset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ public Result charTyped(char c, Project project, @NotNull Editor editor, @NotNull PsiFile file) -->Line_4 $$ if (c == ' ' && codeInsightSettings.JAVADOC_STUB_ON_ENTER) [ CD ]
Line_5 $$ int offset = editor.getCaretModel().getOffset()-->Line_6 $$ PsiElement element = file.findElementAt(offset)[ FD ]
Line_14 $$ if (PythonEnterHandler.atDocCommentStart(element, expectedStringStart, document)) -->Line_15 $$ final PyDocStringOwner docOwner = PsiTreeUtil.getParentOfType(element, PyDocStringOwner.class)[ CD ]
Line_6 $$ PsiElement element = file.findElementAt(offset)-->Line_14 $$ if (PythonEnterHandler.atDocCommentStart(element, expectedStringStart, document)) [ FD ]
Line_6 $$ PsiElement element = file.findElementAt(offset)-->Line_10 $$ if (element == null)[ FD ]
Line_16 $$ if (docOwner != null) -->Line_18 $$ final String docString = PyDocstringGenerator.forDocStringOwner(docOwner).forceNewMode().withInferredParameters(true).withQuotes(quotes).buildDocString()[ CD ]
Line_13 $$ final Document document = editor.getDocument()-->Line_14 $$ if (PythonEnterHandler.atDocCommentStart(element, expectedStringStart, document)) [ FD ]
Line_14 $$ if (PythonEnterHandler.atDocCommentStart(element, expectedStringStart, document)) -->Line_16 $$ if (docOwner != null) [ CD ]
Line_6 $$ PsiElement element = file.findElementAt(offset)-->Line_15 $$ final PyDocStringOwner docOwner = PsiTreeUtil.getParentOfType(element, PyDocStringOwner.class)[ FD ]
Line_16 $$ if (docOwner != null) -->Line_19 $$ document.insertString(offset, docString.substring(3))[ CD ]
Line_2 $$ public Result charTyped(char c, Project project, @NotNull Editor editor, @NotNull PsiFile file) -->Line_27 $$ return Result.CONTINUE[ CD ]
Line_10 $$ if (element == null)-->Line_11 $$ return Result.CONTINUE[ CD ]
Line_4 $$ if (c == ' ' && codeInsightSettings.JAVADOC_STUB_ON_ENTER) -->Line_6 $$ PsiElement element = file.findElementAt(offset)[ CD ]
Line_5 $$ int offset = editor.getCaretModel().getOffset()-->Line_19 $$ document.insertString(offset, docString.substring(3))[ FD ]
Line_8 $$ element = file.findElementAt(offset - 2)-->Line_10 $$ if (element == null)[ FD ]
Line_15 $$ final PyDocStringOwner docOwner = PsiTreeUtil.getParentOfType(element, PyDocStringOwner.class)-->Line_18 $$ final String docString = PyDocstringGenerator.forDocStringOwner(docOwner).forceNewMode().withInferredParameters(true).withQuotes(quotes).buildDocString()[ FD ]
Line_13 $$ final Document document = editor.getDocument()-->Line_19 $$ document.insertString(offset, docString.substring(3))[ FD ]
