Line_2 $$ public void testSimpleFormat() -->Line_9 $$ int start = content.indexOf(match)[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_5 $$ Passage[] passages = new Passage[3][ CD ]
Line_27 $$ Snippet[] fragments = passageFormatter.format(passages, content)-->Line_28 $$ assertThat(fragments, notNullValue())[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_19 $$ passage2.startOffset = passage1.endOffset[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_26 $$ passages[2] = passage3[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_23 $$ Passage passage3 = new Passage()[ CD ]
Line_23 $$ Passage passage3 = new Passage()-->Line_26 $$ passages[2] = passage3[ FD ]
Line_7 $$ BytesRef matchBytesRef = new BytesRef(match)-->Line_14 $$ passage1.addMatch(start, end, matchBytesRef)[ FD ]
Line_17 $$ start = content.lastIndexOf(match)-->Line_21 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_6 $$ String match = "highlighter"-->Line_17 $$ start = content.lastIndexOf(match)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_8 $$ Passage passage1 = new Passage()[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_27 $$ Snippet[] fragments = passageFormatter.format(passages, content)[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_20 $$ passage2.endOffset = end + 26[ CD ]
Line_9 $$ int start = content.indexOf(match)-->Line_21 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_4 $$ CustomPassageFormatter passageFormatter = new CustomPassageFormatter("<em>", "</em>", new DefaultEncoder())-->Line_27 $$ Snippet[] fragments = passageFormatter.format(passages, content)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_32 $$ assertThat(fragments[1].getText(), equalTo("Postings <em>highlighter</em> gives nice snippets back."))[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_25 $$ passage3.endOffset = content.length()[ CD ]
Line_6 $$ String match = "highlighter"-->Line_9 $$ int start = content.indexOf(match)[ FD ]
Line_10 $$ int end = start + match.length()-->Line_14 $$ passage1.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_31 $$ assertThat(fragments[0].isHighlighted(), equalTo(true))[ CD ]
Line_3 $$ String content = "This is a really cool highlighter. Postings highlighter gives nice snippets back. No matches here."-->Line_17 $$ start = content.lastIndexOf(match)[ FD ]
Line_6 $$ String match = "highlighter"-->Line_18 $$ end = start + match.length()[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_10 $$ int end = start + match.length()[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_35 $$ assertThat(fragments[2].isHighlighted(), equalTo(false))[ CD ]
Line_7 $$ BytesRef matchBytesRef = new BytesRef(match)-->Line_21 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_7 $$ BytesRef matchBytesRef = new BytesRef(match)[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_18 $$ end = start + match.length()[ CD ]
Line_16 $$ Passage passage2 = new Passage()-->Line_22 $$ passages[1] = passage2[ FD ]
Line_9 $$ int start = content.indexOf(match)-->Line_17 $$ start = content.lastIndexOf(match)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_6 $$ String match = "highlighter"[ CD ]
Line_10 $$ int end = start + match.length()-->Line_21 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_17 $$ start = content.lastIndexOf(match)[ CD ]
Line_8 $$ Passage passage1 = new Passage()-->Line_14 $$ passage1.addMatch(start, end, matchBytesRef)[ FD ]
Line_9 $$ int start = content.indexOf(match)-->Line_18 $$ end = start + match.length()[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_34 $$ assertThat(fragments[2].getText(), equalTo("No matches here."))[ CD ]
Line_3 $$ String content = "This is a really cool highlighter. Postings highlighter gives nice snippets back. No matches here."-->Line_25 $$ passage3.endOffset = content.length()[ FD ]
Line_10 $$ int end = start + match.length()-->Line_20 $$ passage2.endOffset = end + 26[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_15 $$ passages[0] = passage1[ CD ]
Line_3 $$ String content = "This is a really cool highlighter. Postings highlighter gives nice snippets back. No matches here."-->Line_9 $$ int start = content.indexOf(match)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_22 $$ passages[1] = passage2[ CD ]
Line_9 $$ int start = content.indexOf(match)-->Line_14 $$ passage1.addMatch(start, end, matchBytesRef)[ FD ]
Line_5 $$ Passage[] passages = new Passage[3]-->Line_27 $$ Snippet[] fragments = passageFormatter.format(passages, content)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_11 $$ passage1.startOffset = 0[ CD ]
Line_17 $$ start = content.lastIndexOf(match)-->Line_18 $$ end = start + match.length()[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_21 $$ passage2.addMatch(start, end, matchBytesRef)[ CD ]
Line_10 $$ int end = start + match.length()-->Line_18 $$ end = start + match.length()[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_16 $$ Passage passage2 = new Passage()[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_30 $$ assertThat(fragments[0].getText(), equalTo("This is a really cool <em>highlighter</em>."))[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_29 $$ assertThat(fragments.length, equalTo(3))[ CD ]
Line_18 $$ end = start + match.length()-->Line_21 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_3 $$ String content = "This is a really cool highlighter. Postings highlighter gives nice snippets back. No matches here."[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_33 $$ assertThat(fragments[1].isHighlighted(), equalTo(true))[ CD ]
Line_16 $$ Passage passage2 = new Passage()-->Line_21 $$ passage2.addMatch(start, end, matchBytesRef)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_4 $$ CustomPassageFormatter passageFormatter = new CustomPassageFormatter("<em>", "</em>", new DefaultEncoder())[ CD ]
Line_2 $$ public void testSimpleFormat() -->Line_14 $$ passage1.addMatch(start, end, matchBytesRef)[ CD ]
Line_3 $$ String content = "This is a really cool highlighter. Postings highlighter gives nice snippets back. No matches here."-->Line_27 $$ Snippet[] fragments = passageFormatter.format(passages, content)[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_28 $$ assertThat(fragments, notNullValue())[ CD ]
Line_18 $$ end = start + match.length()-->Line_20 $$ passage2.endOffset = end + 26[ FD ]
Line_6 $$ String match = "highlighter"-->Line_10 $$ int end = start + match.length()[ FD ]
Line_2 $$ public void testSimpleFormat() -->Line_24 $$ passage3.startOffset = passage2.endOffset[ CD ]
Line_8 $$ Passage passage1 = new Passage()-->Line_15 $$ passages[0] = passage1[ FD ]
