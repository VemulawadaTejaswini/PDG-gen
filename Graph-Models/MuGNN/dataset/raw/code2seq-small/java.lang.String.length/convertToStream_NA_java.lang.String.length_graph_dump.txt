Line_5 $$ if (isCollection) -->Line_13 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ CD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_3 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(returnValue.getProject())[ FD ]
Line_5 $$ if (isCollection) -->Line_8 $$ ParenthesesUtils.removeParentheses(newExpression, false)[ CD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_3 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(returnValue.getProject())[ CD ]
Line_3 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(returnValue.getProject())-->Line_13 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_5 $$ if (isCollection) -->Line_7 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ CD ]
Line_10 $$ final String methodCall = "(" + returnValue.getText() + ")"-->Line_12 $$ String expressionAsText = "java.util.stream.StreamSupport.stream(" + (needParentheses ? methodCall : methodCall.substring(1, methodCall.length() - 1)) + ".spliterator(), false)"[ FD ]
Line_3 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(returnValue.getProject())-->Line_7 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_10 $$ final String methodCall = "(" + returnValue.getText() + ")"[ FD ]
Line_7 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)-->Line_8 $$ ParenthesesUtils.removeParentheses(newExpression, false)[ FD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_5 $$ if (isCollection) [ CD ]
Line_6 $$ String expressionAsText = "(" + returnValue.getText() + ").stream()"-->Line_7 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_10 $$ final String methodCall = "(" + returnValue.getText() + ")"-->Line_11 $$ final boolean needParentheses = ParenthesesUtils.areParenthesesNeeded((PsiParenthesizedExpression) elementFactory.createExpressionFromText(methodCall, null), false)[ FD ]
Line_3 $$ final PsiElementFactory elementFactory = JavaPsiFacade.getElementFactory(returnValue.getProject())-->Line_11 $$ final boolean needParentheses = ParenthesesUtils.areParenthesesNeeded((PsiParenthesizedExpression) elementFactory.createExpressionFromText(methodCall, null), false)[ FD ]
Line_5 $$ if (isCollection) -->Line_6 $$ String expressionAsText = "(" + returnValue.getText() + ").stream()"[ CD ]
Line_7 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)-->Line_15 $$ returnValue.replace(newExpression)[ FD ]
Line_4 $$ PsiExpression newExpression-->Line_8 $$ ParenthesesUtils.removeParentheses(newExpression, false)[ FD ]
Line_6 $$ String expressionAsText = "(" + returnValue.getText() + ").stream()"-->Line_13 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_7 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_5 $$ if (isCollection) -->Line_10 $$ final String methodCall = "(" + returnValue.getText() + ")"[ CD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_15 $$ returnValue.replace(newExpression)[ FD ]
Line_4 $$ PsiExpression newExpression-->Line_15 $$ returnValue.replace(newExpression)[ FD ]
Line_7 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)-->Line_13 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_13 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)-->Line_15 $$ returnValue.replace(newExpression)[ FD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_13 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_4 $$ PsiExpression newExpression-->Line_13 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_5 $$ if (isCollection) -->Line_11 $$ final boolean needParentheses = ParenthesesUtils.areParenthesesNeeded((PsiParenthesizedExpression) elementFactory.createExpressionFromText(methodCall, null), false)[ CD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_15 $$ returnValue.replace(newExpression)[ CD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_6 $$ String expressionAsText = "(" + returnValue.getText() + ").stream()"[ FD ]
Line_4 $$ PsiExpression newExpression-->Line_7 $$ newExpression = elementFactory.createExpressionFromText(expressionAsText, returnValue)[ FD ]
Line_2 $$ private static void convertToStream(@NotNull PsiExpression returnValue, boolean isCollection) -->Line_4 $$ PsiExpression newExpression[ CD ]
