Line_3 $$ PsiClass psiClass = PsiTreeUtil.getParentOfType(context, PsiClass.class, false)-->Line_7 $$ final String qName = psiClass.getQualifiedName()[ FD ]
Line_25 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), XmlTag.class)-->Line_29 $$ final XmlAttribute attribute = tag.getAttribute("name")[ FD ]
Line_6 $$ while (psiClass != null && TestNGUtil.hasTest(psiClass) && PsiClassUtil.isRunnableClass(psiClass, true)) -->Line_8 $$ if (qName != null) [ CD ]
Line_4 $$ if (psiClass != null) -->Line_5 $$ final Project project = psiClass.getProject()[ CD ]
Line_9 $$ final String packageQName = ((PsiJavaFile) psiClass.getContainingFile()).getPackageName()-->Line_12 $$ if (packageQName.length() > 0) [ FD ]
Line_8 $$ if (qName != null) -->Line_11 $$ final String[] names[ CD ]
Line_9 $$ final String packageQName = ((PsiJavaFile) psiClass.getContainingFile()).getPackageName()-->Line_24 $$ if (packageQName.endsWith(name)) [ FD ]
Line_9 $$ final String packageQName = ((PsiJavaFile) psiClass.getContainingFile()).getPackageName()-->Line_10 $$ final String packageName = StringUtil.getShortName(packageQName)[ FD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_23 $$ if (referenceAt != null) [ CD ]
Line_8 $$ if (qName != null) -->Line_10 $$ final String packageName = StringUtil.getShortName(packageQName)[ CD ]
Line_29 $$ final XmlAttribute attribute = tag.getAttribute("name")-->Line_32 $$ final String value = attribute.getValue()[ FD ]
Line_3 $$ PsiClass psiClass = PsiTreeUtil.getParentOfType(context, PsiClass.class, false)-->Line_48 $$ psiClass = PsiTreeUtil.getParentOfType(psiClass, PsiClass.class)[ FD ]
Line_18 $$ final List<PsiElement> tags = new ArrayList<PsiElement>()-->Line_45 $$ return GotoRelatedItem.createItems(tags, "TestNG")[ FD ]
Line_11 $$ final String[] names-->Line_16 $$ names = new String[] [ FD ]
Line_35 $$ if (!(value.equals(StringUtil.getQualifiedName(packageQName, "*")) || value.equals(packageQName)))-->Line_36 $$ return true[ CD ]
Line_2 $$ public List<? extends GotoRelatedItem> getItems(@NotNull PsiElement context) -->Line_3 $$ PsiClass psiClass = PsiTreeUtil.getParentOfType(context, PsiClass.class, false)[ CD ]
Line_10 $$ final String packageName = StringUtil.getShortName(packageQName)-->Line_13 $$ final String pName = packageName.length() > 0 ? packageName : packageQName[ FD ]
Line_19 $$ for (final String name : names) -->Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() [ FD ]
Line_26 $$ if (tag == null || !tag.getName().equals("package")) -->Line_27 $$ return true[ CD ]
Line_8 $$ if (qName != null) -->Line_12 $$ if (packageQName.length() > 0) [ CD ]
Line_11 $$ final String[] names-->Line_14 $$ names = new String[] [ FD ]
Line_24 $$ if (packageQName.endsWith(name)) -->Line_25 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), XmlTag.class)[ CD ]
Line_6 $$ while (psiClass != null && TestNGUtil.hasTest(psiClass) && PsiClassUtil.isRunnableClass(psiClass, true)) -->Line_7 $$ final String qName = psiClass.getQualifiedName()[ CD ]
Line_24 $$ if (packageQName.endsWith(name)) -->Line_29 $$ final XmlAttribute attribute = tag.getAttribute("name")[ CD ]
Line_3 $$ PsiClass psiClass = PsiTreeUtil.getParentOfType(context, PsiClass.class, false)-->Line_6 $$ while (psiClass != null && TestNGUtil.hasTest(psiClass) && PsiClassUtil.isRunnableClass(psiClass, true)) [ FD ]
Line_18 $$ final List<PsiElement> tags = new ArrayList<PsiElement>()-->Line_38 $$ tags.add(referenceAt.getElement())[ FD ]
Line_33 $$ if (value == null)-->Line_34 $$ return true[ CD ]
Line_25 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), XmlTag.class)-->Line_26 $$ if (tag == null || !tag.getName().equals("package")) [ FD ]
Line_24 $$ if (packageQName.endsWith(name)) -->Line_32 $$ final String value = attribute.getValue()[ CD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_22 $$ final PsiReference referenceAt = file.findReferenceAt(startOffset)[ FD ]
Line_22 $$ final PsiReference referenceAt = file.findReferenceAt(startOffset)-->Line_23 $$ if (referenceAt != null) [ FD ]
Line_22 $$ final PsiReference referenceAt = file.findReferenceAt(startOffset)-->Line_38 $$ tags.add(referenceAt.getElement())[ FD ]
Line_6 $$ while (psiClass != null && TestNGUtil.hasTest(psiClass) && PsiClassUtil.isRunnableClass(psiClass, true)) -->Line_48 $$ psiClass = PsiTreeUtil.getParentOfType(psiClass, PsiClass.class)[ CD ]
Line_24 $$ if (packageQName.endsWith(name)) -->Line_35 $$ if (!(value.equals(StringUtil.getQualifiedName(packageQName, "*")) || value.equals(packageQName)))[ CD ]
Line_4 $$ if (psiClass != null) -->Line_6 $$ while (psiClass != null && TestNGUtil.hasTest(psiClass) && PsiClassUtil.isRunnableClass(psiClass, true)) [ CD ]
Line_19 $$ for (final String name : names) -->Line_24 $$ if (packageQName.endsWith(name)) [ FD ]
Line_3 $$ PsiClass psiClass = PsiTreeUtil.getParentOfType(context, PsiClass.class, false)-->Line_5 $$ final Project project = psiClass.getProject()[ FD ]
Line_8 $$ if (qName != null) -->Line_9 $$ final String packageQName = ((PsiJavaFile) psiClass.getContainingFile()).getPackageName()[ CD ]
Line_12 $$ if (packageQName.length() > 0) -->Line_16 $$ names = new String[] [ CD ]
Line_23 $$ if (referenceAt != null) -->Line_24 $$ if (packageQName.endsWith(name)) [ CD ]
Line_32 $$ final String value = attribute.getValue()-->Line_33 $$ if (value == null)[ FD ]
Line_2 $$ public List<? extends GotoRelatedItem> getItems(@NotNull PsiElement context) -->Line_4 $$ if (psiClass != null) [ CD ]
Line_23 $$ if (referenceAt != null) -->Line_38 $$ tags.add(referenceAt.getElement())[ CD ]
Line_2 $$ public List<? extends GotoRelatedItem> getItems(@NotNull PsiElement context) -->Line_51 $$ return Collections.emptyList()[ CD ]
Line_7 $$ final String qName = psiClass.getQualifiedName()-->Line_8 $$ if (qName != null) [ FD ]
Line_32 $$ final String value = attribute.getValue()-->Line_35 $$ if (!(value.equals(StringUtil.getQualifiedName(packageQName, "*")) || value.equals(packageQName)))[ FD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_40 $$ return true[ CD ]
Line_12 $$ if (packageQName.length() > 0) -->Line_13 $$ final String pName = packageName.length() > 0 ? packageName : packageQName[ CD ]
Line_14 $$ names = new String[] -->Line_16 $$ names = new String[] [ FD ]
Line_24 $$ if (packageQName.endsWith(name)) -->Line_26 $$ if (tag == null || !tag.getName().equals("package")) [ CD ]
Line_12 $$ if (packageQName.length() > 0) -->Line_14 $$ names = new String[] [ CD ]
Line_24 $$ if (packageQName.endsWith(name)) -->Line_30 $$ if (attribute == null)[ CD ]
Line_9 $$ final String packageQName = ((PsiJavaFile) psiClass.getContainingFile()).getPackageName()-->Line_35 $$ if (!(value.equals(StringUtil.getQualifiedName(packageQName, "*")) || value.equals(packageQName)))[ FD ]
Line_3 $$ PsiClass psiClass = PsiTreeUtil.getParentOfType(context, PsiClass.class, false)-->Line_4 $$ if (psiClass != null) [ FD ]
Line_44 $$ if (!tags.isEmpty()) -->Line_45 $$ return GotoRelatedItem.createItems(tags, "TestNG")[ CD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_22 $$ final PsiReference referenceAt = file.findReferenceAt(startOffset)[ CD ]
Line_30 $$ if (attribute == null)-->Line_31 $$ return true[ CD ]
Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() -->Line_25 $$ final XmlTag tag = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), XmlTag.class)[ FD ]
Line_8 $$ if (qName != null) -->Line_44 $$ if (!tags.isEmpty()) [ CD ]
Line_18 $$ final List<PsiElement> tags = new ArrayList<PsiElement>()-->Line_44 $$ if (!tags.isEmpty()) [ FD ]
Line_24 $$ if (packageQName.endsWith(name)) -->Line_33 $$ if (value == null)[ CD ]
Line_8 $$ if (qName != null) -->Line_18 $$ final List<PsiElement> tags = new ArrayList<PsiElement>()[ CD ]
Line_29 $$ final XmlAttribute attribute = tag.getAttribute("name")-->Line_30 $$ if (attribute == null)[ FD ]
Line_3 $$ PsiClass psiClass = PsiTreeUtil.getParentOfType(context, PsiClass.class, false)-->Line_9 $$ final String packageQName = ((PsiJavaFile) psiClass.getContainingFile()).getPackageName()[ FD ]
Line_5 $$ final Project project = psiClass.getProject()-->Line_20 $$ PsiSearchHelper.SERVICE.getInstance(project).processUsagesInNonJavaFiles(name, new PsiNonJavaFileReferenceProcessor() [ FD ]
Line_2 $$ public List<? extends GotoRelatedItem> getItems(@NotNull PsiElement context) -->Line_3 $$ PsiClass psiClass = PsiTreeUtil.getParentOfType(context, PsiClass.class, false)[ FD ]
