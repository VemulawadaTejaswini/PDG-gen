Line_4 $$ final Matcher matcher = DELIMITERS.matcher(value)-->Line_9 $$ final String s = value.substring(start, matcher.start())[ FD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_8 $$ while (matcher.find()) [ CD ]
Line_11 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(matcher.start()))-->Line_12 $$ results.add(createFileReference(range, index++, s))[ FD ]
Line_5 $$ int start = 0-->Line_9 $$ final String s = value.substring(start, matcher.start())[ FD ]
Line_14 $$ start = matcher.end()-->Line_18 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(value.length()))[ FD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_3 $$ final String value = expression.getStringValue()[ CD ]
Line_9 $$ final String s = value.substring(start, matcher.start())-->Line_19 $$ results.add(createFileReference(range, index, s))[ FD ]
Line_5 $$ int start = 0-->Line_11 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(matcher.start()))[ FD ]
Line_17 $$ if (!s.isEmpty()) -->Line_19 $$ results.add(createFileReference(range, index, s))[ CD ]
Line_4 $$ final Matcher matcher = DELIMITERS.matcher(value)-->Line_14 $$ start = matcher.end()[ FD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_6 $$ int index = 0[ CD ]
Line_16 $$ final String s = value.substring(start)-->Line_17 $$ if (!s.isEmpty()) [ FD ]
Line_18 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(value.length()))-->Line_19 $$ results.add(createFileReference(range, index, s))[ FD ]
Line_6 $$ int index = 0-->Line_19 $$ results.add(createFileReference(range, index, s))[ FD ]
Line_8 $$ while (matcher.find()) -->Line_9 $$ final String s = value.substring(start, matcher.start())[ CD ]
Line_17 $$ if (!s.isEmpty()) -->Line_18 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(value.length()))[ CD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_18 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(value.length()))[ FD ]
Line_4 $$ final Matcher matcher = DELIMITERS.matcher(value)-->Line_11 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(matcher.start()))[ FD ]
Line_10 $$ if (!s.isEmpty()) -->Line_12 $$ results.add(createFileReference(range, index++, s))[ CD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_17 $$ if (!s.isEmpty()) [ CD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_11 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(matcher.start()))[ FD ]
Line_4 $$ final Matcher matcher = DELIMITERS.matcher(value)-->Line_8 $$ while (matcher.find()) [ FD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_4 $$ final Matcher matcher = DELIMITERS.matcher(value)[ CD ]
Line_9 $$ final String s = value.substring(start, matcher.start())-->Line_12 $$ results.add(createFileReference(range, index++, s))[ FD ]
Line_5 $$ int start = 0-->Line_14 $$ start = matcher.end()[ FD ]
Line_7 $$ final List<FileReference> results = new ArrayList<FileReference>()-->Line_12 $$ results.add(createFileReference(range, index++, s))[ FD ]
Line_6 $$ int index = 0-->Line_12 $$ results.add(createFileReference(range, index++, s))[ FD ]
Line_5 $$ int start = 0-->Line_18 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(value.length()))[ FD ]
Line_3 $$ final String value = expression.getStringValue()-->Line_18 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(value.length()))[ FD ]
Line_10 $$ if (!s.isEmpty()) -->Line_11 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(matcher.start()))[ CD ]
Line_9 $$ final String s = value.substring(start, matcher.start())-->Line_17 $$ if (!s.isEmpty()) [ FD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_5 $$ int start = 0[ CD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_16 $$ final String s = value.substring(start)[ CD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_21 $$ return results[ CD ]
Line_5 $$ int start = 0-->Line_16 $$ final String s = value.substring(start)[ FD ]
Line_8 $$ while (matcher.find()) -->Line_10 $$ if (!s.isEmpty()) [ CD ]
Line_3 $$ final String value = expression.getStringValue()-->Line_9 $$ final String s = value.substring(start, matcher.start())[ FD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_3 $$ final String value = expression.getStringValue()[ FD ]
Line_16 $$ final String s = value.substring(start)-->Line_19 $$ results.add(createFileReference(range, index, s))[ FD ]
Line_3 $$ final String value = expression.getStringValue()-->Line_4 $$ final Matcher matcher = DELIMITERS.matcher(value)[ FD ]
Line_7 $$ final List<FileReference> results = new ArrayList<FileReference>()-->Line_19 $$ results.add(createFileReference(range, index, s))[ FD ]
Line_14 $$ start = matcher.end()-->Line_11 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(matcher.start()))[ FD ]
Line_8 $$ while (matcher.find()) -->Line_14 $$ start = matcher.end()[ CD ]
Line_2 $$ private List<FileReference> getFileReferences(@NotNull PyStringLiteralExpression expression) -->Line_7 $$ final List<FileReference> results = new ArrayList<FileReference>()[ CD ]
Line_11 $$ final TextRange range = TextRange.create(expression.valueOffsetToTextOffset(start), expression.valueOffsetToTextOffset(matcher.start()))-->Line_19 $$ results.add(createFileReference(range, index, s))[ FD ]
Line_14 $$ start = matcher.end()-->Line_9 $$ final String s = value.substring(start, matcher.start())[ FD ]
Line_3 $$ final String value = expression.getStringValue()-->Line_16 $$ final String s = value.substring(start)[ FD ]
Line_14 $$ start = matcher.end()-->Line_16 $$ final String s = value.substring(start)[ FD ]
Line_9 $$ final String s = value.substring(start, matcher.start())-->Line_10 $$ if (!s.isEmpty()) [ FD ]
