Line_16 $$ final AtomicBoolean proceedFlag = new AtomicBoolean(true)-->Line_26 $$ if (!proceedFlag.get()) [ FD ]
Line_20 $$ final List<Pair<MavenArtifactInfo, MavenRepositoryInfo>> resultList = new ArrayList<Pair<MavenArtifactInfo, MavenRepositoryInfo>>()-->Line_43 $$ resultList.add(Pair.create(artifact, repository))[ FD ]
Line_6 $$ if (coord.indexOf(':') == -1 && Character.isUpperCase(coord.charAt(0))) -->Line_7 $$ template = new MavenArtifactInfo(null, null, null, "jar", null, coord, null)[ CD ]
Line_5 $$ final MavenArtifactInfo template-->Line_9 $$ template = new MavenArtifactInfo(getMavenId(coord), "jar", null)[ FD ]
Line_2 $$ public static void searchArtifacts(final Project project, String coord, final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor) -->Line_11 $$ ProgressManager.getInstance().run(new Task.Backgroundable(project, "Maven", false) [ CD ]
Line_25 $$ if (!artifacts.isEmpty()) -->Line_29 $$ List<MavenRepositoryInfo> repositories = MavenRepositoryServicesManager.getRepositories(serviceUrl)[ CD ]
Line_35 $$ if (artifact == null) -->Line_36 $$ tooManyResults = true[ CD ]
Line_11 $$ ProgressManager.getInstance().run(new Task.Backgroundable(project, "Maven", false) -->Line_16 $$ final AtomicBoolean proceedFlag = new AtomicBoolean(true)[ CD ]
Line_5 $$ final MavenArtifactInfo template-->Line_7 $$ template = new MavenArtifactInfo(null, null, null, "jar", null, coord, null)[ FD ]
Line_2 $$ public static void searchArtifacts(final Project project, String coord, final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor) -->Line_3 $$ if (coord == null || coord.length() == 0)[ FD ]
Line_31 $$ for (MavenRepositoryInfo repository : repositories) -->Line_43 $$ resultList.add(Pair.create(artifact, repository))[ FD ]
Line_2 $$ public static void searchArtifacts(final Project project, String coord, final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor) -->Line_56 $$ proceedFlag.set(resultProcessor.process(resultList, aBoolean))[ FD ]
Line_5 $$ final MavenArtifactInfo template-->Line_24 $$ artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl)[ FD ]
Line_35 $$ if (artifact == null) -->Line_43 $$ resultList.add(Pair.create(artifact, repository))[ CD ]
Line_2 $$ public static void searchArtifacts(final Project project, String coord, final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor) -->Line_6 $$ if (coord.indexOf(':') == -1 && Character.isUpperCase(coord.charAt(0))) [ FD ]
Line_17 $$ for (int i = 0, length = urls.length; i < length; i++) -->Line_18 $$ if (!proceedFlag.get())[ CD ]
Line_24 $$ artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl)-->Line_25 $$ if (!artifacts.isEmpty()) [ FD ]
Line_25 $$ if (!artifacts.isEmpty()) -->Line_30 $$ Map<String, MavenRepositoryInfo> map = new THashMap<String, MavenRepositoryInfo>()[ CD ]
Line_34 $$ for (MavenArtifactInfo artifact : artifacts) -->Line_35 $$ if (artifact == null) [ FD ]
Line_15 $$ boolean tooManyResults = false-->Line_36 $$ tooManyResults = true[ FD ]
Line_53 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_56 $$ proceedFlag.set(resultProcessor.process(resultList, aBoolean))[ CD ]
Line_30 $$ Map<String, MavenRepositoryInfo> map = new THashMap<String, MavenRepositoryInfo>()-->Line_32 $$ map.put(repository.getId(), repository)[ FD ]
Line_6 $$ if (coord.indexOf(':') == -1 && Character.isUpperCase(coord.charAt(0))) -->Line_9 $$ template = new MavenArtifactInfo(getMavenId(coord), "jar", null)[ CD ]
Line_25 $$ if (!artifacts.isEmpty()) -->Line_26 $$ if (!proceedFlag.get()) [ CD ]
Line_22 $$ String serviceUrl = urls[i]-->Line_24 $$ artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl)[ FD ]
Line_7 $$ template = new MavenArtifactInfo(null, null, null, "jar", null, coord, null)-->Line_9 $$ template = new MavenArtifactInfo(getMavenId(coord), "jar", null)[ FD ]
Line_23 $$ final List<MavenArtifactInfo> artifacts-->Line_24 $$ artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl)[ FD ]
Line_16 $$ final AtomicBoolean proceedFlag = new AtomicBoolean(true)-->Line_50 $$ if (!proceedFlag.get())[ FD ]
Line_16 $$ final AtomicBoolean proceedFlag = new AtomicBoolean(true)-->Line_18 $$ if (!proceedFlag.get())[ FD ]
Line_22 $$ String serviceUrl = urls[i]-->Line_29 $$ List<MavenRepositoryInfo> repositories = MavenRepositoryServicesManager.getRepositories(serviceUrl)[ FD ]
Line_11 $$ ProgressManager.getInstance().run(new Task.Backgroundable(project, "Maven", false) -->Line_17 $$ for (int i = 0, length = urls.length; i < length; i++) [ CD ]
Line_3 $$ if (coord == null || coord.length() == 0)-->Line_4 $$ return[ CD ]
Line_31 $$ for (MavenRepositoryInfo repository : repositories) -->Line_32 $$ map.put(repository.getId(), repository)[ FD ]
Line_34 $$ for (MavenArtifactInfo artifact : artifacts) -->Line_43 $$ resultList.add(Pair.create(artifact, repository))[ FD ]
Line_52 $$ final Boolean aBoolean = i == length - 1 ? tooManyResults : null-->Line_56 $$ proceedFlag.set(resultProcessor.process(resultList, aBoolean))[ FD ]
Line_2 $$ public static void searchArtifacts(final Project project, String coord, final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor) -->Line_5 $$ final MavenArtifactInfo template[ CD ]
Line_7 $$ template = new MavenArtifactInfo(null, null, null, "jar", null, coord, null)-->Line_24 $$ artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl)[ FD ]
Line_16 $$ final AtomicBoolean proceedFlag = new AtomicBoolean(true)-->Line_56 $$ proceedFlag.set(resultProcessor.process(resultList, aBoolean))[ FD ]
Line_30 $$ Map<String, MavenRepositoryInfo> map = new THashMap<String, MavenRepositoryInfo>()-->Line_38 $$ MavenRepositoryInfo repository = map.get(artifact.getRepositoryId())[ FD ]
Line_23 $$ final List<MavenArtifactInfo> artifacts-->Line_25 $$ if (!artifacts.isEmpty()) [ FD ]
Line_11 $$ ProgressManager.getInstance().run(new Task.Backgroundable(project, "Maven", false) -->Line_14 $$ String[] urls = MavenRepositoryServicesManager.getServiceUrls()[ CD ]
Line_2 $$ public static void searchArtifacts(final Project project, String coord, final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor) -->Line_3 $$ if (coord == null || coord.length() == 0)[ CD ]
Line_17 $$ for (int i = 0, length = urls.length; i < length; i++) -->Line_20 $$ final List<Pair<MavenArtifactInfo, MavenRepositoryInfo>> resultList = new ArrayList<Pair<MavenArtifactInfo, MavenRepositoryInfo>>()[ CD ]
Line_2 $$ public static void searchArtifacts(final Project project, String coord, final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor) -->Line_9 $$ template = new MavenArtifactInfo(getMavenId(coord), "jar", null)[ FD ]
Line_11 $$ ProgressManager.getInstance().run(new Task.Backgroundable(project, "Maven", false) -->Line_15 $$ boolean tooManyResults = false[ CD ]
Line_20 $$ final List<Pair<MavenArtifactInfo, MavenRepositoryInfo>> resultList = new ArrayList<Pair<MavenArtifactInfo, MavenRepositoryInfo>>()-->Line_56 $$ proceedFlag.set(resultProcessor.process(resultList, aBoolean))[ FD ]
Line_16 $$ final AtomicBoolean proceedFlag = new AtomicBoolean(true)-->Line_62 $$ return !proceedFlag.get()[ FD ]
Line_9 $$ template = new MavenArtifactInfo(getMavenId(coord), "jar", null)-->Line_24 $$ artifacts = MavenRepositoryServicesManager.findArtifacts(template, serviceUrl)[ FD ]
Line_34 $$ for (MavenArtifactInfo artifact : artifacts) -->Line_38 $$ MavenRepositoryInfo repository = map.get(artifact.getRepositoryId())[ FD ]
Line_35 $$ if (artifact == null) -->Line_38 $$ MavenRepositoryInfo repository = map.get(artifact.getRepositoryId())[ CD ]
Line_53 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_62 $$ return !proceedFlag.get()[ CD ]
Line_2 $$ public static void searchArtifacts(final Project project, String coord, final PairProcessor<Collection<Pair<MavenArtifactInfo, MavenRepositoryInfo>>, Boolean> resultProcessor) -->Line_6 $$ if (coord.indexOf(':') == -1 && Character.isUpperCase(coord.charAt(0))) [ CD ]
