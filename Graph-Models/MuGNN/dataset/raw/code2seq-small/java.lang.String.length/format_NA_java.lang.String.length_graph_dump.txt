Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_47 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ CD ]
Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)-->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ FD ]
Line_38 $$ i = j + 2-->Line_43 $$ i = j + 2[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)[ FD ]
Line_14 $$ int j-->Line_21 $$ if (j == -1) [ FD ]
Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)-->Line_34 $$ i = j + 1[ FD ]
Line_43 $$ i = j + 2-->Line_32 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_47 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_34 $$ i = j + 1-->Line_32 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_32 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_43 $$ i = j + 2-->Line_47 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_43 $$ i = j + 2-->Line_22 $$ if (i == 0) [ FD ]
Line_13 $$ int i = 0-->Line_38 $$ i = j + 2[ FD ]
Line_19 $$ for (int L = 0; L < argArray.length; L++) -->Line_21 $$ if (j == -1) [ CD ]
Line_38 $$ i = j + 2-->Line_22 $$ if (i == 0) [ FD ]
Line_13 $$ int i = 0-->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_25 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_43 $$ i = j + 2-->Line_36 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_16 $$ if (prefix != null) [ FD ]
Line_38 $$ i = j + 2-->Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)[ FD ]
Line_13 $$ int i = 0-->Line_36 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_34 $$ i = j + 1-->Line_22 $$ if (i == 0) [ FD ]
Line_38 $$ i = j + 2-->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_29 $$ if (isEscapedDelimiter(messagePattern, j)) [ FD ]
Line_19 $$ for (int L = 0; L < argArray.length; L++) -->Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)[ CD ]
Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) -->Line_38 $$ i = j + 2[ CD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_3 $$ if (messagePattern == null) [ CD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_6 $$ if (argArray == null) [ FD ]
Line_34 $$ i = j + 1-->Line_43 $$ i = j + 2[ FD ]
Line_14 $$ int j-->Line_38 $$ i = j + 2[ FD ]
Line_3 $$ if (messagePattern == null) -->Line_4 $$ return null[ CD ]
Line_14 $$ int j-->Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)[ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_26 $$ return sbuf.toString()[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)[ CD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) [ FD ]
Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) -->Line_34 $$ i = j + 1[ CD ]
Line_34 $$ i = j + 1-->Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)[ FD ]
Line_13 $$ int i = 0-->Line_47 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_25 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_13 $$ int i = 0-->Line_34 $$ i = j + 1[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_3 $$ if (messagePattern == null) [ FD ]
Line_22 $$ if (i == 0) -->Line_26 $$ return sbuf.toString()[ CD ]
Line_38 $$ i = j + 2-->Line_25 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ FD ]
Line_34 $$ i = j + 1-->Line_25 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_47 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_19 $$ for (int L = 0; L < argArray.length; L++) [ CD ]
Line_22 $$ if (i == 0) -->Line_25 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ CD ]
Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)-->Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) [ FD ]
Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)-->Line_29 $$ if (isEscapedDelimiter(messagePattern, j)) [ FD ]
Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)-->Line_43 $$ i = j + 2[ FD ]
Line_43 $$ i = j + 2-->Line_25 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) -->Line_33 $$ sbuf.append(DELIM_START)[ CD ]
Line_7 $$ if (prefix == null) -->Line_8 $$ return messagePattern[ CD ]
Line_13 $$ int i = 0-->Line_25 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_14 $$ int j[ CD ]
Line_14 $$ int j-->Line_43 $$ i = j + 2[ FD ]
Line_34 $$ i = j + 1-->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ FD ]
Line_22 $$ if (i == 0) -->Line_23 $$ return messagePattern[ CD ]
Line_34 $$ i = j + 1-->Line_38 $$ i = j + 2[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_6 $$ if (argArray == null) [ CD ]
Line_13 $$ int i = 0-->Line_22 $$ if (i == 0) [ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_17 $$ sbuf.append(prefix)[ FD ]
Line_7 $$ if (prefix == null) -->Line_10 $$ return prefix + messagePattern[ CD ]
Line_34 $$ i = j + 1-->Line_47 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_34 $$ i = j + 1-->Line_36 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_21 $$ if (j == -1) -->Line_29 $$ if (isEscapedDelimiter(messagePattern, j)) [ CD ]
Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) -->Line_32 $$ sbuf.append(messagePattern.substring(i, j - 1))[ CD ]
Line_29 $$ if (isEscapedDelimiter(messagePattern, j)) -->Line_42 $$ deeplyAppendParameter(sbuf, argArray[L], new HashMap())[ CD ]
Line_29 $$ if (isEscapedDelimiter(messagePattern, j)) -->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ CD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ FD ]
Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)-->Line_21 $$ if (j == -1) [ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_42 $$ deeplyAppendParameter(sbuf, argArray[L], new HashMap())[ FD ]
Line_38 $$ i = j + 2-->Line_32 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_16 $$ if (prefix != null) [ CD ]
Line_29 $$ if (isEscapedDelimiter(messagePattern, j)) -->Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) [ CD ]
Line_13 $$ int i = 0-->Line_32 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) -->Line_31 $$ L--[ CD ]
Line_14 $$ int j-->Line_34 $$ i = j + 1[ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_36 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)-->Line_38 $$ i = j + 2[ FD ]
Line_19 $$ for (int L = 0; L < argArray.length; L++) -->Line_31 $$ L--[ FD ]
Line_13 $$ int i = 0-->Line_43 $$ i = j + 2[ FD ]
Line_43 $$ i = j + 2-->Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)[ FD ]
Line_38 $$ i = j + 2-->Line_36 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_13 $$ int i = 0[ CD ]
Line_43 $$ i = j + 2-->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ FD ]
Line_13 $$ int i = 0-->Line_20 $$ j = messagePattern.indexOf(DELIM_STR, i)[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_17 $$ sbuf.append(prefix)[ FD ]
Line_21 $$ if (j == -1) -->Line_22 $$ if (i == 0) [ CD ]
Line_29 $$ if (isEscapedDelimiter(messagePattern, j)) -->Line_43 $$ i = j + 2[ CD ]
Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) -->Line_36 $$ sbuf.append(messagePattern.substring(i, j - 1))[ CD ]
Line_6 $$ if (argArray == null) -->Line_7 $$ if (prefix == null) [ CD ]
Line_38 $$ i = j + 2-->Line_47 $$ sbuf.append(messagePattern.substring(i, messagePattern.length()))[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_32 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_37 $$ deeplyAppendParameter(sbuf, argArray[L], new HashMap())[ FD ]
Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) -->Line_37 $$ deeplyAppendParameter(sbuf, argArray[L], new HashMap())[ CD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_7 $$ if (prefix == null) [ FD ]
Line_16 $$ if (prefix != null) -->Line_17 $$ sbuf.append(prefix)[ CD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_48 $$ return sbuf.toString()[ FD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_48 $$ return sbuf.toString()[ CD ]
Line_2 $$ public static String format(final String prefix, final String messagePattern, final Object... argArray) -->Line_36 $$ sbuf.append(messagePattern.substring(i, j - 1))[ FD ]
Line_14 $$ int j-->Line_41 $$ sbuf.append(messagePattern.substring(i, j))[ FD ]
Line_14 $$ int j-->Line_30 $$ if (!isDoubleEscaped(messagePattern, j)) [ FD ]
Line_15 $$ final StringBuilder sbuf = new StringBuilder(messagePattern.length() + 50)-->Line_33 $$ sbuf.append(DELIM_START)[ FD ]
Line_14 $$ int j-->Line_29 $$ if (isEscapedDelimiter(messagePattern, j)) [ FD ]
