Line_19 $$ DataOutputStream out = null-->Line_90 $$ out = null[ FD ]
Line_37 $$ pipelineStatus = resp.getStatus()-->Line_39 $$ if (PipelineAck.isRestartOOBStatus(pipelineStatus) && restartingNodeIndex == -1) [ FD ]
Line_8 $$ String firstBadLink = ""-->Line_65 $$ if (firstBadLink.length() != 0) [ FD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_3 $$ if (nodes.length == 0) [ CD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_35 $$ new Sender(out).writeBlock(blockCopy, nodeStorageTypes[0], accessToken, dfsClient.clientName, nodes, nodeStorageTypes, null, bcs, nodes.length, block.getNumBytes(), bytesSent, newGS, checksum, cachingStrategy.get())[ FD ]
Line_59 $$ if (ie instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) -->Line_62 $$ dfsClient.clearDataEncryptionKey()[ CD ]
Line_76 $$ if (checkRestart && shouldWaitForRestart(errorIndex)) -->Line_79 $$ errorIndex = -1[ CD ]
Line_8 $$ String firstBadLink = ""-->Line_38 $$ firstBadLink = resp.getFirstBadLink()[ FD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_9 $$ boolean checkRestart = false[ CD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_10 $$ if (DFSClient.LOG.isDebugEnabled()) [ CD ]
Line_9 $$ boolean checkRestart = false-->Line_40 $$ checkRestart = true[ FD ]
Line_52 $$ result = true-->Line_86 $$ if (!result) [ FD ]
Line_18 $$ boolean result = false-->Line_84 $$ result = false[ FD ]
Line_37 $$ pipelineStatus = resp.getStatus()-->Line_44 $$ if (pipelineStatus == Status.ERROR_ACCESS_TOKEN) [ FD ]
Line_16 $$ int refetchEncryptionKey = 1-->Line_61 $$ refetchEncryptionKey--[ FD ]
Line_17 $$ while (true) -->Line_19 $$ DataOutputStream out = null[ CD ]
Line_86 $$ if (!result) -->Line_89 $$ IOUtils.closeStream(out)[ CD ]
Line_26 $$ InputStream unbufIn = NetUtils.getInputStream(s)-->Line_27 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(s, unbufOut, unbufIn, dfsClient, accessToken, nodes[0])[ FD ]
Line_40 $$ checkRestart = true-->Line_76 $$ if (checkRestart && shouldWaitForRestart(errorIndex)) [ FD ]
Line_19 $$ DataOutputStream out = null-->Line_89 $$ IOUtils.closeStream(out)[ FD ]
Line_3 $$ if (nodes.length == 0) -->Line_5 $$ return false[ CD ]
Line_65 $$ if (firstBadLink.length() != 0) -->Line_66 $$ for (int i = 0; i < nodes.length; i++) [ CD ]
Line_38 $$ firstBadLink = resp.getFirstBadLink()-->Line_65 $$ if (firstBadLink.length() != 0) [ FD ]
Line_7 $$ Status pipelineStatus = SUCCESS-->Line_39 $$ if (PipelineAck.isRestartOOBStatus(pipelineStatus) && restartingNodeIndex == -1) [ FD ]
Line_28 $$ unbufOut = saslStreams.out-->Line_27 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(s, unbufOut, unbufIn, dfsClient, accessToken, nodes[0])[ FD ]
Line_90 $$ out = null-->Line_89 $$ IOUtils.closeStream(out)[ FD ]
Line_39 $$ if (PipelineAck.isRestartOOBStatus(pipelineStatus) && restartingNodeIndex == -1) -->Line_40 $$ checkRestart = true[ CD ]
Line_25 $$ OutputStream unbufOut = NetUtils.getOutputStream(s, writeTimeout)-->Line_28 $$ unbufOut = saslStreams.out[ FD ]
Line_18 $$ boolean result = false-->Line_52 $$ result = true[ FD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_16 $$ int refetchEncryptionKey = 1[ CD ]
Line_25 $$ OutputStream unbufOut = NetUtils.getOutputStream(s, writeTimeout)-->Line_27 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(s, unbufOut, unbufIn, dfsClient, accessToken, nodes[0])[ FD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_8 $$ String firstBadLink = ""[ CD ]
Line_7 $$ Status pipelineStatus = SUCCESS-->Line_37 $$ pipelineStatus = resp.getStatus()[ FD ]
Line_17 $$ while (true) -->Line_95 $$ return result[ CD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_17 $$ while (true) [ CD ]
Line_7 $$ Status pipelineStatus = SUCCESS-->Line_43 $$ if (pipelineStatus != SUCCESS) [ FD ]
Line_56 $$ if (restartingNodeIndex == -1) -->Line_57 $$ DFSClient.LOG.info("Exception in createBlockOutputStream", ie)[ CD ]
Line_29 $$ unbufIn = saslStreams.in-->Line_27 $$ IOStreamPair saslStreams = dfsClient.saslClient.socketSend(s, unbufOut, unbufIn, dfsClient, accessToken, nodes[0])[ FD ]
Line_7 $$ Status pipelineStatus = SUCCESS-->Line_44 $$ if (pipelineStatus == Status.ERROR_ACCESS_TOKEN) [ FD ]
Line_33 $$ ExtendedBlock blockCopy = new ExtendedBlock(block)-->Line_35 $$ new Sender(out).writeBlock(blockCopy, nodeStorageTypes[0], accessToken, dfsClient.clientName, nodes, nodeStorageTypes, null, bcs, nodes.length, block.getNumBytes(), bytesSent, newGS, checksum, cachingStrategy.get())[ FD ]
Line_38 $$ firstBadLink = resp.getFirstBadLink()-->Line_67 $$ if (firstBadLink.equals(nodes[i].getXferAddr())) [ FD ]
Line_33 $$ ExtendedBlock blockCopy = new ExtendedBlock(block)-->Line_34 $$ blockCopy.setNumBytes(blockSize)[ FD ]
Line_52 $$ result = true-->Line_84 $$ result = false[ FD ]
Line_9 $$ boolean checkRestart = false-->Line_76 $$ if (checkRestart && shouldWaitForRestart(errorIndex)) [ FD ]
Line_17 $$ while (true) -->Line_18 $$ boolean result = false[ CD ]
Line_43 $$ if (pipelineStatus != SUCCESS) -->Line_44 $$ if (pipelineStatus == Status.ERROR_ACCESS_TOKEN) [ CD ]
Line_76 $$ if (checkRestart && shouldWaitForRestart(errorIndex)) -->Line_80 $$ DFSClient.LOG.info("Waiting for the datanode to be restarted: " + nodes[restartingNodeIndex])[ CD ]
Line_37 $$ pipelineStatus = resp.getStatus()-->Line_43 $$ if (pipelineStatus != SUCCESS) [ FD ]
Line_18 $$ boolean result = false-->Line_86 $$ if (!result) [ FD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_15 $$ persistBlocks.set(true)[ CD ]
Line_11 $$ for (int i = 0; i < nodes.length; i++) -->Line_12 $$ DFSClient.LOG.debug("pipeline = " + nodes[i])[ CD ]
Line_32 $$ BlockConstructionStage bcs = recoveryFlag ? stage.getRecoveryStage() : stage-->Line_35 $$ new Sender(out).writeBlock(blockCopy, nodeStorageTypes[0], accessToken, dfsClient.clientName, nodes, nodeStorageTypes, null, bcs, nodes.length, block.getNumBytes(), bytesSent, newGS, checksum, cachingStrategy.get())[ FD ]
Line_30 $$ out = new DataOutputStream(new BufferedOutputStream(unbufOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_90 $$ out = null[ FD ]
Line_86 $$ if (!result) -->Line_91 $$ IOUtils.closeStream(blockReplyStream)[ CD ]
Line_66 $$ for (int i = 0; i < nodes.length; i++) -->Line_67 $$ if (firstBadLink.equals(nodes[i].getXferAddr())) [ CD ]
Line_26 $$ InputStream unbufIn = NetUtils.getInputStream(s)-->Line_29 $$ unbufIn = saslStreams.in[ FD ]
Line_36 $$ BlockOpResponseProto resp = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(blockReplyStream))-->Line_37 $$ pipelineStatus = resp.getStatus()[ FD ]
Line_8 $$ String firstBadLink = ""-->Line_67 $$ if (firstBadLink.equals(nodes[i].getXferAddr())) [ FD ]
Line_30 $$ out = new DataOutputStream(new BufferedOutputStream(unbufOut, HdfsConstants.SMALL_BUFFER_SIZE))-->Line_89 $$ IOUtils.closeStream(out)[ FD ]
Line_2 $$ private boolean createBlockOutputStream(DatanodeInfo[] nodes, StorageType[] nodeStorageTypes, long newGS, boolean recoveryFlag) -->Line_7 $$ Status pipelineStatus = SUCCESS[ CD ]
Line_10 $$ if (DFSClient.LOG.isDebugEnabled()) -->Line_11 $$ for (int i = 0; i < nodes.length; i++) [ CD ]
Line_59 $$ if (ie instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) -->Line_60 $$ DFSClient.LOG.info("Will fetch a new encryption key and retry, " + "encryption key was invalid when connecting to " + nodes[0] + " : " + ie)[ CD ]
Line_11 $$ for (int i = 0; i < nodes.length; i++) -->Line_66 $$ for (int i = 0; i < nodes.length; i++) [ FD ]
Line_84 $$ result = false-->Line_86 $$ if (!result) [ FD ]
Line_3 $$ if (nodes.length == 0) -->Line_4 $$ DFSClient.LOG.info("nodes are empty for write pipeline of block " + block)[ CD ]
Line_19 $$ DataOutputStream out = null-->Line_30 $$ out = new DataOutputStream(new BufferedOutputStream(unbufOut, HdfsConstants.SMALL_BUFFER_SIZE))[ FD ]
Line_36 $$ BlockOpResponseProto resp = BlockOpResponseProto.parseFrom(PBHelper.vintPrefixed(blockReplyStream))-->Line_38 $$ firstBadLink = resp.getFirstBadLink()[ FD ]
Line_86 $$ if (!result) -->Line_90 $$ out = null[ CD ]
Line_24 $$ long writeTimeout = dfsClient.getDatanodeWriteTimeout(nodes.length)-->Line_25 $$ OutputStream unbufOut = NetUtils.getOutputStream(s, writeTimeout)[ FD ]
Line_59 $$ if (ie instanceof InvalidEncryptionKeyException && refetchEncryptionKey > 0) -->Line_61 $$ refetchEncryptionKey--[ CD ]
Line_86 $$ if (!result) -->Line_87 $$ IOUtils.closeSocket(s)[ CD ]
