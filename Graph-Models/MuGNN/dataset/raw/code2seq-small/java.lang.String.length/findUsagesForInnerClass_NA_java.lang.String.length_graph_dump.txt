Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_3 $$ final PsiManager psiManager = innerClass.getManager()[ CD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_17 $$ usages.add(new ReplaceClassReference((PsiJavaCodeReferenceElement) referenceElement, newInnerClassName))[ FD ]
Line_4 $$ final Project project = psiManager.getProject()-->Line_5 $$ final GlobalSearchScope scope = GlobalSearchScope.allScope(project)[ FD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_9 $$ final String sourceClassQualifiedName = sourceClass.getQualifiedName()[ CD ]
Line_22 $$ if (hasExternalReference) -->Line_23 $$ innerClassesToMakePublic.add(innerClass)[ CD ]
Line_16 $$ if (!isInMovedElement(referenceElement)) -->Line_18 $$ hasExternalReference = true[ CD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_6 $$ final Iterable<PsiReference> calls = ReferencesSearch.search(innerClass, scope)[ FD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_7 $$ final String innerName = innerClass.getQualifiedName()[ FD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_23 $$ innerClassesToMakePublic.add(innerClass)[ FD ]
Line_14 $$ final PsiElement referenceElement = reference.getElement()-->Line_16 $$ if (!isInMovedElement(referenceElement)) [ FD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_11 $$ final String newInnerClassName = getQualifiedName() + innerName.substring(sourceClassQualifiedName.length())[ CD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_22 $$ if (hasExternalReference) [ CD ]
Line_12 $$ boolean hasExternalReference = false-->Line_18 $$ hasExternalReference = true[ FD ]
Line_15 $$ if (referenceElement instanceof PsiJavaCodeReferenceElement) -->Line_16 $$ if (!isInMovedElement(referenceElement)) [ CD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_7 $$ final String innerName = innerClass.getQualifiedName()[ CD ]
Line_13 $$ for (PsiReference reference : calls) -->Line_14 $$ final PsiElement referenceElement = reference.getElement()[ FD ]
Line_14 $$ final PsiElement referenceElement = reference.getElement()-->Line_15 $$ if (referenceElement instanceof PsiJavaCodeReferenceElement) [ FD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_5 $$ final GlobalSearchScope scope = GlobalSearchScope.allScope(project)[ CD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_4 $$ final Project project = psiManager.getProject()[ CD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_6 $$ final Iterable<PsiReference> calls = ReferencesSearch.search(innerClass, scope)[ CD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_3 $$ final PsiManager psiManager = innerClass.getManager()[ FD ]
Line_9 $$ final String sourceClassQualifiedName = sourceClass.getQualifiedName()-->Line_11 $$ final String newInnerClassName = getQualifiedName() + innerName.substring(sourceClassQualifiedName.length())[ FD ]
Line_16 $$ if (!isInMovedElement(referenceElement)) -->Line_17 $$ usages.add(new ReplaceClassReference((PsiJavaCodeReferenceElement) referenceElement, newInnerClassName))[ CD ]
Line_7 $$ final String innerName = innerClass.getQualifiedName()-->Line_11 $$ final String newInnerClassName = getQualifiedName() + innerName.substring(sourceClassQualifiedName.length())[ FD ]
Line_5 $$ final GlobalSearchScope scope = GlobalSearchScope.allScope(project)-->Line_6 $$ final Iterable<PsiReference> calls = ReferencesSearch.search(innerClass, scope)[ FD ]
Line_2 $$ private void findUsagesForInnerClass(PsiClass innerClass, List<FixableUsageInfo> usages) -->Line_12 $$ boolean hasExternalReference = false[ CD ]
Line_3 $$ final PsiManager psiManager = innerClass.getManager()-->Line_4 $$ final Project project = psiManager.getProject()[ FD ]
