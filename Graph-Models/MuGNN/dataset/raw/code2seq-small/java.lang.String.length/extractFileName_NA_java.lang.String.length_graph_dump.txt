Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_3 $$ String fileName = curLine.substring(4)[ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_25 $$ patch.setBeforeName(fileName)[ FD ]
Line_23 $$ fileName = fileName.substring(2)-->Line_30 $$ patch.setAfterName(fileName)[ FD ]
Line_8 $$ if (pos >= 0) -->Line_9 $$ String versionId = fileName.substring(pos).trim()[ CD ]
Line_11 $$ if (versionId.length() > 0 && !EMPTY_REVISION_INFO_PATTERN.matcher(versionId).matches()) -->Line_12 $$ if (before) [ CD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_27 $$ if (gitPatch && fileName.startsWith("b/")) [ FD ]
Line_10 $$ fileName = fileName.substring(0, pos)-->Line_25 $$ patch.setBeforeName(fileName)[ FD ]
Line_10 $$ fileName = fileName.substring(0, pos)-->Line_22 $$ if (gitPatch && fileName.startsWith("a/")) [ FD ]
Line_10 $$ fileName = fileName.substring(0, pos)-->Line_27 $$ if (gitPatch && fileName.startsWith("b/")) [ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_19 $$ if ("/dev/null".equals(fileName))[ FD ]
Line_6 $$ pos = fileName.indexOf(' ')-->Line_10 $$ fileName = fileName.substring(0, pos)[ FD ]
Line_9 $$ String versionId = fileName.substring(pos).trim()-->Line_13 $$ patch.setBeforeVersionId(versionId)[ FD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_4 $$ int pos = fileName.indexOf('\t')[ CD ]
Line_19 $$ if ("/dev/null".equals(fileName))-->Line_20 $$ return[ CD ]
Line_8 $$ if (pos >= 0) -->Line_11 $$ if (versionId.length() > 0 && !EMPTY_REVISION_INFO_PATTERN.matcher(versionId).matches()) [ CD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_6 $$ pos = fileName.indexOf(' ')[ FD ]
Line_8 $$ if (pos >= 0) -->Line_10 $$ fileName = fileName.substring(0, pos)[ CD ]
Line_12 $$ if (before) -->Line_15 $$ patch.setAfterVersionId(versionId)[ CD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_3 $$ String fileName = curLine.substring(4)[ CD ]
Line_28 $$ fileName = fileName.substring(2)-->Line_30 $$ patch.setAfterName(fileName)[ FD ]
Line_22 $$ if (gitPatch && fileName.startsWith("a/")) -->Line_23 $$ fileName = fileName.substring(2)[ CD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_27 $$ if (gitPatch && fileName.startsWith("b/")) [ FD ]
Line_4 $$ int pos = fileName.indexOf('\t')-->Line_5 $$ if (pos < 0) [ FD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_25 $$ patch.setBeforeName(fileName)[ FD ]
Line_4 $$ int pos = fileName.indexOf('\t')-->Line_8 $$ if (pos >= 0) [ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_22 $$ if (gitPatch && fileName.startsWith("a/")) [ FD ]
Line_4 $$ int pos = fileName.indexOf('\t')-->Line_10 $$ fileName = fileName.substring(0, pos)[ FD ]
Line_4 $$ int pos = fileName.indexOf('\t')-->Line_6 $$ pos = fileName.indexOf(' ')[ FD ]
Line_10 $$ fileName = fileName.substring(0, pos)-->Line_30 $$ patch.setAfterName(fileName)[ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_30 $$ patch.setAfterName(fileName)[ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_9 $$ String versionId = fileName.substring(pos).trim()[ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_4 $$ int pos = fileName.indexOf('\t')[ FD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_5 $$ if (pos < 0) [ CD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_19 $$ if ("/dev/null".equals(fileName))[ CD ]
Line_23 $$ fileName = fileName.substring(2)-->Line_28 $$ fileName = fileName.substring(2)[ FD ]
Line_21 $$ if (before) -->Line_30 $$ patch.setAfterName(fileName)[ CD ]
Line_23 $$ fileName = fileName.substring(2)-->Line_25 $$ patch.setBeforeName(fileName)[ FD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_21 $$ if (before) [ CD ]
Line_9 $$ String versionId = fileName.substring(pos).trim()-->Line_15 $$ patch.setAfterVersionId(versionId)[ FD ]
Line_27 $$ if (gitPatch && fileName.startsWith("b/")) -->Line_28 $$ fileName = fileName.substring(2)[ CD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_30 $$ patch.setAfterName(fileName)[ FD ]
Line_21 $$ if (before) -->Line_27 $$ if (gitPatch && fileName.startsWith("b/")) [ CD ]
Line_10 $$ fileName = fileName.substring(0, pos)-->Line_19 $$ if ("/dev/null".equals(fileName))[ FD ]
Line_6 $$ pos = fileName.indexOf(' ')-->Line_9 $$ String versionId = fileName.substring(pos).trim()[ FD ]
Line_10 $$ fileName = fileName.substring(0, pos)-->Line_28 $$ fileName = fileName.substring(2)[ FD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_8 $$ if (pos >= 0) [ CD ]
Line_9 $$ String versionId = fileName.substring(pos).trim()-->Line_11 $$ if (versionId.length() > 0 && !EMPTY_REVISION_INFO_PATTERN.matcher(versionId).matches()) [ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_10 $$ fileName = fileName.substring(0, pos)[ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_23 $$ fileName = fileName.substring(2)[ FD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_13 $$ patch.setBeforeVersionId(versionId)[ FD ]
Line_12 $$ if (before) -->Line_13 $$ patch.setBeforeVersionId(versionId)[ CD ]
Line_21 $$ if (before) -->Line_22 $$ if (gitPatch && fileName.startsWith("a/")) [ CD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_15 $$ patch.setAfterVersionId(versionId)[ FD ]
Line_21 $$ if (before) -->Line_25 $$ patch.setBeforeName(fileName)[ CD ]
Line_23 $$ fileName = fileName.substring(2)-->Line_27 $$ if (gitPatch && fileName.startsWith("b/")) [ FD ]
Line_4 $$ int pos = fileName.indexOf('\t')-->Line_9 $$ String versionId = fileName.substring(pos).trim()[ FD ]
Line_3 $$ String fileName = curLine.substring(4)-->Line_28 $$ fileName = fileName.substring(2)[ FD ]
Line_10 $$ fileName = fileName.substring(0, pos)-->Line_23 $$ fileName = fileName.substring(2)[ FD ]
Line_2 $$ private static void extractFileName(final String curLine, final FilePatch patch, final boolean before, final boolean gitPatch) -->Line_22 $$ if (gitPatch && fileName.startsWith("a/")) [ FD ]
Line_6 $$ pos = fileName.indexOf(' ')-->Line_8 $$ if (pos >= 0) [ FD ]
Line_5 $$ if (pos < 0) -->Line_6 $$ pos = fileName.indexOf(' ')[ CD ]
