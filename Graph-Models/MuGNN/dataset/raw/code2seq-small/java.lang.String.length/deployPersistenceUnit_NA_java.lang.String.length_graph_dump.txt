Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_17 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName)[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_58 $$ entityManagerFactoryBind(eeModuleDescription, serviceTarget, pu, puServiceName)[ FD ]
Line_21 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_27 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_60 $$ addServerExecutorDependency(builder, service.getExecutorInjector(), false)[ FD ]
Line_21 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_23 $$ if (jtaDataSource != null && jtaDataSource.length() > 0) [ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_57 $$ entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName, transactionManager, transactionSynchronizationRegistry)[ FD ]
Line_7 $$ ValidatorFactory validatorFactory = null-->Line_10 $$ validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_59 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_21 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())-->Line_24 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) [ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_18 $$ deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_53 $$ adaptor.addProviderDependencies(pu)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_16 $$ deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_21 $$ final String jtaDataSource = adjustJndi(pu.getJtaDataSourceName())[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_52 $$ CacheDeploymentListener.setInternalDeploymentServiceBuilder(builder)[ FD ]
Line_48 $$ if (allowCdiBeanManagerAccess && WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) -->Line_49 $$ builder.addDependency(beanManagerServiceName(deploymentUnit), new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class))[ CD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_57 $$ entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName, transactionManager, transactionSynchronizationRegistry)[ FD ]
Line_25 $$ useDefaultDataSource = true-->Line_33 $$ useDefaultDataSource = false[ FD ]
Line_22 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())-->Line_32 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_28 $$ useDefaultDataSource = false-->Line_33 $$ useDefaultDataSource = false[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_38 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_59 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_49 $$ builder.addDependency(beanManagerServiceName(deploymentUnit), new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class))[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_27 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_44 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)[ FD ]
Line_38 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_44 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_18 $$ deploymentUnit.addToAttachmentList(Attachments.WEB_DEPENDENCIES, puServiceName)[ FD ]
Line_35 $$ if (useDefaultDataSource) -->Line_37 $$ if (eeModuleDescription != null) [ CD ]
Line_38 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_45 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_27 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_32 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_58 $$ entityManagerFactoryBind(eeModuleDescription, serviceTarget, pu, puServiceName)[ FD ]
Line_36 $$ String defaultJtaDataSource = null-->Line_40 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_16 $$ deploymentUnit.putAttachment(JpaAttachments.PERSISTENCE_UNIT_SERVICE_KEY, puServiceName)[ FD ]
Line_41 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_44 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_3 $$ pu.setClassLoader(classLoader)[ CD ]
Line_20 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_28 $$ useDefaultDataSource = false[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_48 $$ if (allowCdiBeanManagerAccess && WeldDeploymentMarker.isPartOfWeldDeployment(deploymentUnit)) [ FD ]
Line_36 $$ String defaultJtaDataSource = null-->Line_45 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_4 $$ TransactionManager transactionManager = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_MANAGER)[ FD ]
Line_35 $$ if (useDefaultDataSource) -->Line_40 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ CD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_65 $$ throw JpaLogger.ROOT_LOGGER.failedToAddPersistenceUnit(e, pu.getPersistenceUnitName())[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_49 $$ builder.addDependency(beanManagerServiceName(deploymentUnit), new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class))[ FD ]
Line_36 $$ String defaultJtaDataSource = null-->Line_38 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_13 $$ deploymentUnit.addToAttachmentList(REMOVAL_KEY, new PersistenceAdaptorRemoval(pu, adaptor))[ FD ]
Line_41 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_45 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_61 $$ builder.install()[ FD ]
Line_24 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_27 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ CD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_62 $$ ROOT_LOGGER.tracef("added PersistenceUnitService for '%s'.  PU is ready for injector action.", puServiceName)[ FD ]
Line_24 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_28 $$ useDefaultDataSource = false[ CD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_49 $$ builder.addDependency(beanManagerServiceName(deploymentUnit), new CastingInjector<BeanManager>(service.getBeanManagerInjector(), BeanManager.class))[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_45 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ FD ]
Line_20 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_25 $$ useDefaultDataSource = true[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_5 $$ TransactionSynchronizationRegistry transactionSynchronizationRegistry = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_SYNCHRONIZATION_REGISTRY)[ FD ]
Line_4 $$ TransactionManager transactionManager = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_MANAGER)-->Line_57 $$ entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName, transactionManager, transactionSynchronizationRegistry)[ FD ]
Line_20 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)-->Line_33 $$ useDefaultDataSource = false[ FD ]
Line_8 $$ final HashMap<String, ValidatorFactory> properties = new HashMap()-->Line_14 $$ adaptor.addProviderProperties(properties, pu)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_36 $$ String defaultJtaDataSource = null-->Line_44 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_35 $$ if (useDefaultDataSource) -->Line_36 $$ String defaultJtaDataSource = null[ CD ]
Line_43 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) -->Line_45 $$ ROOT_LOGGER.tracef("%s is using the default data source '%s'", puServiceName, defaultJtaDataSource)[ CD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_9 $$ if (!ValidationMode.NONE.equals(pu.getValidationMode())) [ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_20 $$ boolean useDefaultDataSource = Configuration.allowDefaultDataSourceUse(pu)[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_27 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, jtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_63 $$ addManagementConsole(deploymentUnit, pu, adaptor)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_14 $$ adaptor.addProviderProperties(properties, pu)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)[ FD ]
Line_9 $$ if (!ValidationMode.NONE.equals(pu.getValidationMode())) -->Line_10 $$ validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY)[ CD ]
Line_36 $$ String defaultJtaDataSource = null-->Line_41 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ FD ]
Line_40 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) -->Line_41 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ CD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_22 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())[ FD ]
Line_35 $$ if (useDefaultDataSource) -->Line_43 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ CD ]
Line_8 $$ final HashMap<String, ValidatorFactory> properties = new HashMap()-->Line_59 $$ builder.setInitialMode(ServiceController.Mode.ACTIVE).addInjection(service.getPropertiesInjector(), properties)[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)[ FD ]
Line_31 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) -->Line_33 $$ useDefaultDataSource = false[ CD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_32 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_12 $$ final PersistenceUnitServiceImpl service = new PersistenceUnitServiceImpl(classLoader, pu, adaptor, provider, PersistenceUnitRegistryImpl.INSTANCE, deploymentUnit.getServiceName(), validatorFactory)-->Line_60 $$ addServerExecutorDependency(builder, service.getExecutorInjector(), false)[ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_4 $$ TransactionManager transactionManager = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_MANAGER)[ CD ]
Line_37 $$ if (eeModuleDescription != null) -->Line_38 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()[ CD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_37 $$ if (eeModuleDescription != null) [ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_5 $$ TransactionSynchronizationRegistry transactionSynchronizationRegistry = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_SYNCHRONIZATION_REGISTRY)[ CD ]
Line_22 $$ final String nonJtaDataSource = adjustJndi(pu.getNonJtaDataSourceName())-->Line_31 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) [ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_32 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ FD ]
Line_38 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_40 $$ if (defaultJtaDataSource == null || defaultJtaDataSource.isEmpty()) [ FD ]
Line_5 $$ TransactionSynchronizationRegistry transactionSynchronizationRegistry = deploymentUnit.getAttachment(JpaAttachments.TRANSACTION_SYNCHRONIZATION_REGISTRY)-->Line_57 $$ entityManagerBind(eeModuleDescription, serviceTarget, pu, puServiceName, transactionManager, transactionSynchronizationRegistry)[ FD ]
Line_15 $$ final ServiceName puServiceName = PersistenceUnitServiceImpl.getPUServiceName(pu)-->Line_17 $$ deploymentUnit.addToAttachmentList(Attachments.DEPLOYMENT_COMPLETE_SERVICES, puServiceName)[ FD ]
Line_38 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_41 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())[ FD ]
Line_19 $$ ServiceBuilder<PersistenceUnitService> builder = serviceTarget.addService(puServiceName, service)-->Line_44 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ FD ]
Line_38 $$ defaultJtaDataSource = eeModuleDescription.getDefaultResourceJndiNames().getDataSource()-->Line_43 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_24 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) -->Line_25 $$ useDefaultDataSource = true[ CD ]
Line_43 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) -->Line_44 $$ builder.addDependency(ContextNames.bindInfoFor(defaultJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getJtaDataSourceInjector()))[ CD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_3 $$ pu.setClassLoader(classLoader)[ FD ]
Line_36 $$ String defaultJtaDataSource = null-->Line_43 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_2 $$ private static void deployPersistenceUnit(final DeploymentPhaseContext phaseContext, final DeploymentUnit deploymentUnit, final EEModuleDescription eeModuleDescription, final Collection<ComponentDescription> components, final ServiceTarget serviceTarget, final ModuleClassLoader classLoader, final PersistenceUnitMetadata pu, final boolean startEarly, final PersistenceProvider provider, final PersistenceProviderAdaptor adaptor, final boolean allowCdiBeanManagerAccess) throws DeploymentUnitProcessingException -->Line_10 $$ validatorFactory = deploymentUnit.getAttachment(BeanValidationAttachments.VALIDATOR_FACTORY)[ FD ]
Line_41 $$ defaultJtaDataSource = adjustJndi(JPAService.getDefaultDataSourceName())-->Line_43 $$ if (defaultJtaDataSource != null && !defaultJtaDataSource.isEmpty()) [ FD ]
Line_23 $$ if (jtaDataSource != null && jtaDataSource.length() > 0) -->Line_24 $$ if (jtaDataSource.equals(EE_DEFAULT_DATASOURCE)) [ CD ]
Line_25 $$ useDefaultDataSource = true-->Line_28 $$ useDefaultDataSource = false[ FD ]
Line_31 $$ if (nonJtaDataSource != null && nonJtaDataSource.length() > 0) -->Line_32 $$ builder.addDependency(ContextNames.bindInfoForEnvEntry(eeModuleDescription.getApplicationName(), eeModuleDescription.getModuleName(), eeModuleDescription.getModuleName(), false, nonJtaDataSource).getBinderServiceName(), ManagedReferenceFactory.class, new ManagedReferenceFactoryInjector(service.getNonJtaDataSourceInjector()))[ CD ]
