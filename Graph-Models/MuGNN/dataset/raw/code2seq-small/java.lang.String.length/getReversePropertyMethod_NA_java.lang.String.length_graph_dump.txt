Line_21 $$ final String name = methodName.substring(prefix.length())-->Line_27 $$ final PsiMethod result = findPropertyMethod(aClass, "get", name, field)[ FD ]
Line_6 $$ final PsiClass aClass = propertyMethod.getContainingClass()-->Line_33 $$ return findPropertyMethod(aClass, "set", name, field)[ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_21 $$ final String name = methodName.substring(prefix.length())[ CD ]
Line_3 $$ if (propertyMethod == null) -->Line_4 $$ return null[ CD ]
Line_7 $$ if (aClass == null) -->Line_8 $$ return null[ CD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_10 $$ final String methodName = propertyMethod.getName()[ CD ]
Line_11 $$ final String prefix-->Line_21 $$ final String name = methodName.substring(prefix.length())[ FD ]
Line_28 $$ if (result != null) -->Line_29 $$ return result[ CD ]
Line_6 $$ final PsiClass aClass = propertyMethod.getContainingClass()-->Line_27 $$ final PsiMethod result = findPropertyMethod(aClass, "get", name, field)[ FD ]
Line_10 $$ final String methodName = propertyMethod.getName()-->Line_16 $$ if (methodName.startsWith("set")) [ FD ]
Line_17 $$ prefix = "set"-->Line_21 $$ final String name = methodName.substring(prefix.length())[ FD ]
Line_21 $$ final String name = methodName.substring(prefix.length())-->Line_31 $$ return findPropertyMethod(aClass, IS_PREFIX, name, field)[ FD ]
Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)-->Line_31 $$ return findPropertyMethod(aClass, IS_PREFIX, name, field)[ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_7 $$ if (aClass == null) [ CD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)[ CD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)[ FD ]
Line_10 $$ final String methodName = propertyMethod.getName()-->Line_14 $$ if (methodName.startsWith(IS_PREFIX)) [ FD ]
Line_15 $$ prefix = IS_PREFIX-->Line_26 $$ if (prefix.equals("set")) [ FD ]
Line_23 $$ if (field == null) -->Line_24 $$ return null[ CD ]
Line_6 $$ final PsiClass aClass = propertyMethod.getContainingClass()-->Line_31 $$ return findPropertyMethod(aClass, IS_PREFIX, name, field)[ FD ]
Line_26 $$ if (prefix.equals("set")) -->Line_28 $$ if (result != null) [ CD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_10 $$ final String methodName = propertyMethod.getName()[ FD ]
Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)-->Line_33 $$ return findPropertyMethod(aClass, "set", name, field)[ FD ]
Line_11 $$ final String prefix-->Line_17 $$ prefix = "set"[ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_23 $$ if (field == null) [ CD ]
Line_16 $$ if (methodName.startsWith("set")) -->Line_17 $$ prefix = "set"[ CD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_26 $$ if (prefix.equals("set")) [ CD ]
Line_26 $$ if (prefix.equals("set")) -->Line_31 $$ return findPropertyMethod(aClass, IS_PREFIX, name, field)[ CD ]
Line_26 $$ if (prefix.equals("set")) -->Line_27 $$ final PsiMethod result = findPropertyMethod(aClass, "get", name, field)[ CD ]
Line_16 $$ if (methodName.startsWith("set")) -->Line_19 $$ return null[ CD ]
Line_26 $$ if (prefix.equals("set")) -->Line_33 $$ return findPropertyMethod(aClass, "set", name, field)[ CD ]
Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)-->Line_27 $$ final PsiMethod result = findPropertyMethod(aClass, "get", name, field)[ FD ]
Line_21 $$ final String name = methodName.substring(prefix.length())-->Line_33 $$ return findPropertyMethod(aClass, "set", name, field)[ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_3 $$ if (propertyMethod == null) [ CD ]
Line_17 $$ prefix = "set"-->Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)[ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_11 $$ final String prefix[ CD ]
Line_14 $$ if (methodName.startsWith(IS_PREFIX)) -->Line_15 $$ prefix = IS_PREFIX[ CD ]
Line_27 $$ final PsiMethod result = findPropertyMethod(aClass, "get", name, field)-->Line_28 $$ if (result != null) [ FD ]
Line_12 $$ if (methodName.startsWith("get")) -->Line_13 $$ prefix = "get"[ CD ]
Line_13 $$ prefix = "get"-->Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)[ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_12 $$ if (methodName.startsWith("get")) [ CD ]
Line_13 $$ prefix = "get"-->Line_17 $$ prefix = "set"[ FD ]
Line_13 $$ prefix = "get"-->Line_26 $$ if (prefix.equals("set")) [ FD ]
Line_10 $$ final String methodName = propertyMethod.getName()-->Line_21 $$ final String name = methodName.substring(prefix.length())[ FD ]
Line_11 $$ final String prefix-->Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)[ FD ]
Line_11 $$ final String prefix-->Line_13 $$ prefix = "get"[ FD ]
Line_15 $$ prefix = IS_PREFIX-->Line_21 $$ final String name = methodName.substring(prefix.length())[ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_6 $$ final PsiClass aClass = propertyMethod.getContainingClass()[ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_3 $$ if (propertyMethod == null) [ FD ]
Line_12 $$ if (methodName.startsWith("get")) -->Line_14 $$ if (methodName.startsWith(IS_PREFIX)) [ CD ]
Line_15 $$ prefix = IS_PREFIX-->Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)[ FD ]
Line_13 $$ prefix = "get"-->Line_15 $$ prefix = IS_PREFIX[ FD ]
Line_15 $$ prefix = IS_PREFIX-->Line_17 $$ prefix = "set"[ FD ]
Line_17 $$ prefix = "set"-->Line_26 $$ if (prefix.equals("set")) [ FD ]
Line_2 $$ public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) -->Line_6 $$ final PsiClass aClass = propertyMethod.getContainingClass()[ CD ]
Line_13 $$ prefix = "get"-->Line_21 $$ final String name = methodName.substring(prefix.length())[ FD ]
Line_10 $$ final String methodName = propertyMethod.getName()-->Line_12 $$ if (methodName.startsWith("get")) [ FD ]
Line_11 $$ final String prefix-->Line_15 $$ prefix = IS_PREFIX[ FD ]
Line_22 $$ final PsiField field = prefix.equals("set") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod)-->Line_23 $$ if (field == null) [ FD ]
Line_14 $$ if (methodName.startsWith(IS_PREFIX)) -->Line_16 $$ if (methodName.startsWith("set")) [ CD ]
Line_6 $$ final PsiClass aClass = propertyMethod.getContainingClass()-->Line_7 $$ if (aClass == null) [ FD ]
Line_11 $$ final String prefix-->Line_26 $$ if (prefix.equals("set")) [ FD ]
