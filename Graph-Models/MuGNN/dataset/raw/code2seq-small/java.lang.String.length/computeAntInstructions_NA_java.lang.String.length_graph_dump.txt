Line_6 $$ if (pathInJar.length() == 0) -->Line_7 $$ return Collections.singletonList(creator.createExtractedDirectoryInstruction(jarPath))[ CD ]
Line_13 $$ final Unzip unzip = new Unzip(jarPath, tempDirPath)-->Line_17 $$ generationContext.runBeforeCurrentArtifact(unzip)[ FD ]
Line_14 $$ final PatternSet patterns = new PatternSet(null)-->Line_15 $$ patterns.add(new Include(pathInJar + "**"))[ FD ]
Line_9 $$ final String archiveName = PathUtil.getFileName(myFilePath)-->Line_10 $$ final String tempDirProperty = generationContext.createNewTempFileProperty("temp.unpacked.path." + archiveName, archiveName)[ FD ]
Line_5 $$ final String pathInJar = StringUtil.trimStart(myPathInJar, "/")-->Line_6 $$ if (pathInJar.length() == 0) [ FD ]
Line_13 $$ final Unzip unzip = new Unzip(jarPath, tempDirPath)-->Line_16 $$ unzip.add(patterns)[ FD ]
Line_10 $$ final String tempDirProperty = generationContext.createNewTempFileProperty("temp.unpacked.path." + archiveName, archiveName)-->Line_11 $$ final String tempDirPath = BuildProperties.propertyRef(tempDirProperty)[ FD ]
Line_14 $$ final PatternSet patterns = new PatternSet(null)-->Line_16 $$ unzip.add(patterns)[ FD ]
Line_4 $$ final String jarPath = generationContext.getSubstitutedPath(myFilePath)-->Line_7 $$ return Collections.singletonList(creator.createExtractedDirectoryInstruction(jarPath))[ FD ]
