Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_4 $$ final String pathInJar = StringUtil.trimStart(myPathInJar, "/")[ CD ]
Line_13 $$ final PatternSet patterns = new PatternSet(null)-->Line_14 $$ patterns.add(new Include(pathInJar + "**"))[ FD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_13 $$ final PatternSet patterns = new PatternSet(null)[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_17 $$ return Collections.singletonList(creator.createDirectoryContentCopyInstruction(tempDirPath + "/" + pathInJar))[ FD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_9 $$ final String tempDirProperty = generationContext.createNewTempFileProperty("temp.unpacked.path." + archiveName, archiveName)[ FD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_11 $$ generationContext.runBeforeCurrentArtifact(new Mkdir(tempDirPath))[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_10 $$ final String tempDirPath = BuildProperties.propertyRef(tempDirProperty)[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_17 $$ return Collections.singletonList(creator.createDirectoryContentCopyInstruction(tempDirPath + "/" + pathInJar))[ CD ]
Line_8 $$ final String archiveName = PathUtil.getFileName(myFilePath)-->Line_9 $$ final String tempDirProperty = generationContext.createNewTempFileProperty("temp.unpacked.path." + archiveName, archiveName)[ FD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_11 $$ generationContext.runBeforeCurrentArtifact(new Mkdir(tempDirPath))[ FD ]
Line_3 $$ final String jarPath = generationContext.getSubstitutedPath(myFilePath)-->Line_6 $$ return Collections.singletonList(creator.createExtractedDirectoryInstruction(jarPath))[ FD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_8 $$ final String archiveName = PathUtil.getFileName(myFilePath)[ CD ]
Line_12 $$ final Unzip unzip = new Unzip(jarPath, tempDirPath)-->Line_15 $$ unzip.add(patterns)[ FD ]
Line_4 $$ final String pathInJar = StringUtil.trimStart(myPathInJar, "/")-->Line_5 $$ if (pathInJar.length() == 0) [ FD ]
Line_5 $$ if (pathInJar.length() == 0) -->Line_6 $$ return Collections.singletonList(creator.createExtractedDirectoryInstruction(jarPath))[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_14 $$ patterns.add(new Include(pathInJar + "**"))[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_16 $$ generationContext.runBeforeCurrentArtifact(unzip)[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_12 $$ final Unzip unzip = new Unzip(jarPath, tempDirPath)[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_3 $$ final String jarPath = generationContext.getSubstitutedPath(myFilePath)[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_16 $$ generationContext.runBeforeCurrentArtifact(unzip)[ FD ]
Line_12 $$ final Unzip unzip = new Unzip(jarPath, tempDirPath)-->Line_16 $$ generationContext.runBeforeCurrentArtifact(unzip)[ FD ]
Line_13 $$ final PatternSet patterns = new PatternSet(null)-->Line_15 $$ unzip.add(patterns)[ FD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_3 $$ final String jarPath = generationContext.getSubstitutedPath(myFilePath)[ FD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_5 $$ if (pathInJar.length() == 0) [ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_6 $$ return Collections.singletonList(creator.createExtractedDirectoryInstruction(jarPath))[ FD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_15 $$ unzip.add(patterns)[ CD ]
Line_2 $$ public List<? extends Generator> computeAntInstructions(@NotNull PackagingElementResolvingContext resolvingContext, @NotNull AntCopyInstructionCreator creator, @NotNull ArtifactAntGenerationContext generationContext, @NotNull ArtifactType artifactType) -->Line_9 $$ final String tempDirProperty = generationContext.createNewTempFileProperty("temp.unpacked.path." + archiveName, archiveName)[ CD ]
Line_9 $$ final String tempDirProperty = generationContext.createNewTempFileProperty("temp.unpacked.path." + archiveName, archiveName)-->Line_10 $$ final String tempDirPath = BuildProperties.propertyRef(tempDirProperty)[ FD ]
