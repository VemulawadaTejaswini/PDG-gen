Line_4 $$ int[] offsets = new int[text.length() + 1]-->Line_5 $$ PsiLiteralExpressionImpl.parseStringCharacters(text, unescapedText, offsets)[ FD ]
Line_3 $$ StringBuilder unescapedText = new StringBuilder()-->Line_5 $$ PsiLiteralExpressionImpl.parseStringCharacters(text, unescapedText, offsets)[ FD ]
Line_2 $$ public static void processTextWithEscapeSequences(PsiLiteralExpression element, String text, TokenConsumer consumer) -->Line_6 $$ processTextWithOffsets(element, consumer, unescapedText, offsets, 1)[ CD ]
Line_2 $$ public static void processTextWithEscapeSequences(PsiLiteralExpression element, String text, TokenConsumer consumer) -->Line_3 $$ StringBuilder unescapedText = new StringBuilder()[ CD ]
Line_2 $$ public static void processTextWithEscapeSequences(PsiLiteralExpression element, String text, TokenConsumer consumer) -->Line_5 $$ PsiLiteralExpressionImpl.parseStringCharacters(text, unescapedText, offsets)[ FD ]
Line_2 $$ public static void processTextWithEscapeSequences(PsiLiteralExpression element, String text, TokenConsumer consumer) -->Line_6 $$ processTextWithOffsets(element, consumer, unescapedText, offsets, 1)[ FD ]
Line_2 $$ public static void processTextWithEscapeSequences(PsiLiteralExpression element, String text, TokenConsumer consumer) -->Line_4 $$ int[] offsets = new int[text.length() + 1][ FD ]
Line_3 $$ StringBuilder unescapedText = new StringBuilder()-->Line_6 $$ processTextWithOffsets(element, consumer, unescapedText, offsets, 1)[ FD ]
Line_2 $$ public static void processTextWithEscapeSequences(PsiLiteralExpression element, String text, TokenConsumer consumer) -->Line_5 $$ PsiLiteralExpressionImpl.parseStringCharacters(text, unescapedText, offsets)[ CD ]
Line_4 $$ int[] offsets = new int[text.length() + 1]-->Line_6 $$ processTextWithOffsets(element, consumer, unescapedText, offsets, 1)[ FD ]
Line_2 $$ public static void processTextWithEscapeSequences(PsiLiteralExpression element, String text, TokenConsumer consumer) -->Line_4 $$ int[] offsets = new int[text.length() + 1][ CD ]
