Line_9 $$ for (int i = 0; i < 797; i++) -->Line_16 $$ long key = hash.find(ref.get())[ CD ]
Line_12 $$ str = TestUtil.randomRealisticUnicodeString(getRandom(), 1000)-->Line_20 $$ assertEquals(str, hash.get(key, scratch).utf8ToString())[ FD ]
Line_9 $$ for (int i = 0; i < 797; i++) -->Line_11 $$ do [ CD ]
Line_8 $$ int uniqueCount = 0-->Line_25 $$ assertEquals(uniqueCount, key)[ FD ]
Line_17 $$ if (key >= 0) -->Line_24 $$ assertTrue(strings.add(str))[ CD ]
Line_17 $$ if (key >= 0) -->Line_18 $$ assertFalse(strings.add(str))[ CD ]
Line_17 $$ if (key >= 0) -->Line_21 $$ assertEquals(count, hash.size())[ CD ]
Line_6 $$ for (int j = 0; j < num; j++) -->Line_9 $$ for (int i = 0; i < 797; i++) [ CD ]
Line_17 $$ if (key >= 0) -->Line_26 $$ assertEquals(hash.size(), count + 1)[ CD ]
Line_11 $$ do -->Line_12 $$ str = TestUtil.randomRealisticUnicodeString(getRandom(), 1000)[ CD ]
Line_10 $$ String str-->Line_20 $$ assertEquals(str, hash.get(key, scratch).utf8ToString())[ FD ]
Line_17 $$ if (key >= 0) -->Line_20 $$ assertEquals(str, hash.get(key, scratch).utf8ToString())[ CD ]
Line_17 $$ if (key >= 0) -->Line_19 $$ assertTrue(key < count)[ CD ]
Line_12 $$ str = TestUtil.randomRealisticUnicodeString(getRandom(), 1000)-->Line_24 $$ assertTrue(strings.add(str))[ FD ]
Line_5 $$ int num = scaledRandomIntBetween(2, 20)-->Line_6 $$ for (int j = 0; j < num; j++) [ FD ]
Line_6 $$ for (int j = 0; j < num; j++) -->Line_30 $$ assertAllIn(strings, hash)[ CD ]
Line_6 $$ for (int j = 0; j < num; j++) -->Line_31 $$ newHash()[ CD ]
Line_4 $$ BytesRef scratch = new BytesRef()-->Line_20 $$ assertEquals(str, hash.get(key, scratch).utf8ToString())[ FD ]
Line_12 $$ str = TestUtil.randomRealisticUnicodeString(getRandom(), 1000)-->Line_18 $$ assertFalse(strings.add(str))[ FD ]
Line_7 $$ Set<String> strings = new HashSet()-->Line_24 $$ assertTrue(strings.add(str))[ FD ]
Line_10 $$ String str-->Line_18 $$ assertFalse(strings.add(str))[ FD ]
Line_17 $$ if (key >= 0) -->Line_25 $$ assertEquals(uniqueCount, key)[ CD ]
Line_12 $$ str = TestUtil.randomRealisticUnicodeString(getRandom(), 1000)-->Line_11 $$ do [ FD ]
Line_3 $$ BytesRefBuilder ref = new BytesRefBuilder()-->Line_23 $$ key = hash.add(ref.get())[ FD ]
Line_12 $$ str = TestUtil.randomRealisticUnicodeString(getRandom(), 1000)-->Line_14 $$ ref.copyChars(str)[ FD ]
Line_9 $$ for (int i = 0; i < 797; i++) -->Line_15 $$ long count = hash.size()[ CD ]
Line_9 $$ for (int i = 0; i < 797; i++) -->Line_17 $$ if (key >= 0) [ CD ]
Line_9 $$ for (int i = 0; i < 797; i++) -->Line_14 $$ ref.copyChars(str)[ CD ]
Line_8 $$ int uniqueCount = 0-->Line_27 $$ uniqueCount++[ FD ]
Line_6 $$ for (int j = 0; j < num; j++) -->Line_8 $$ int uniqueCount = 0[ CD ]
Line_9 $$ for (int i = 0; i < 797; i++) -->Line_10 $$ String str[ CD ]
Line_2 $$ public void testFind() throws Exception -->Line_3 $$ BytesRefBuilder ref = new BytesRefBuilder()[ CD ]
Line_10 $$ String str-->Line_12 $$ str = TestUtil.randomRealisticUnicodeString(getRandom(), 1000)[ FD ]
Line_10 $$ String str-->Line_24 $$ assertTrue(strings.add(str))[ FD ]
Line_7 $$ Set<String> strings = new HashSet()-->Line_30 $$ assertAllIn(strings, hash)[ FD ]
Line_7 $$ Set<String> strings = new HashSet()-->Line_18 $$ assertFalse(strings.add(str))[ FD ]
Line_2 $$ public void testFind() throws Exception -->Line_6 $$ for (int j = 0; j < num; j++) [ CD ]
Line_10 $$ String str-->Line_11 $$ do [ FD ]
Line_6 $$ for (int j = 0; j < num; j++) -->Line_7 $$ Set<String> strings = new HashSet()[ CD ]
Line_2 $$ public void testFind() throws Exception -->Line_5 $$ int num = scaledRandomIntBetween(2, 20)[ CD ]
Line_3 $$ BytesRefBuilder ref = new BytesRefBuilder()-->Line_14 $$ ref.copyChars(str)[ FD ]
Line_17 $$ if (key >= 0) -->Line_27 $$ uniqueCount++[ CD ]
Line_2 $$ public void testFind() throws Exception -->Line_33 $$ hash.close()[ CD ]
Line_2 $$ public void testFind() throws Exception -->Line_4 $$ BytesRef scratch = new BytesRef()[ CD ]
Line_10 $$ String str-->Line_14 $$ ref.copyChars(str)[ FD ]
Line_17 $$ if (key >= 0) -->Line_23 $$ key = hash.add(ref.get())[ CD ]
Line_3 $$ BytesRefBuilder ref = new BytesRefBuilder()-->Line_16 $$ long key = hash.find(ref.get())[ FD ]
