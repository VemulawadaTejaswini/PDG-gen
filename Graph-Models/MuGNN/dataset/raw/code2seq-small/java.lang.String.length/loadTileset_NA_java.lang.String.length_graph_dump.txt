Line_27 $$ offsetX = offset.getIntAttribute("x", 0)-->Line_109 $$ tile.setOffsetX(offsetX)[ FD ]
Line_14 $$ int imageWidth = 0, imageHeight = 0-->Line_34 $$ imageHeight = imageElement.getIntAttribute("height", 0)[ FD ]
Line_28 $$ offsetY = offset.getIntAttribute("y", 0)-->Line_44 $$ offsetY = offset.getIntAttribute("y", 0)[ FD ]
Line_101 $$ if (imageElement != null) -->Line_107 $$ tile = new StaticTiledMapTile(region)[ CD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_115 $$ String terrain = tileElement.getAttribute("terrain", null)[ FD ]
Line_19 $$ element = xml.parse(tsx)-->Line_22 $$ tileheight = element.getIntAttribute("tileheight", 0)[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_109 $$ tile.setOffsetX(offsetX)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_8 $$ int spacing = element.getIntAttribute("spacing", 0)[ FD ]
Line_42 $$ if (offset != null) -->Line_43 $$ offsetX = offset.getIntAttribute("x", 0)[ CD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_134 $$ if (tile != null) [ FD ]
Line_6 $$ int tilewidth = element.getIntAttribute("tilewidth", 0)-->Line_21 $$ tilewidth = element.getIntAttribute("tilewidth", 0)[ FD ]
Line_102 $$ String regionName = imageElement.getAttribute("source")-->Line_103 $$ regionName = regionName.substring(0, regionName.lastIndexOf('.'))[ FD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_163 $$ tileset.putTile(tile.getId(), tile)[ FD ]
Line_123 $$ Element properties = tileElement.getChildByName("properties")-->Line_166 $$ if (properties != null) [ FD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_167 $$ loadProperties(tileset.getProperties(), properties)[ FD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_148 $$ String terrain = tileElement.getAttribute("terrain", null)[ FD ]
Line_115 $$ String terrain = tileElement.getAttribute("terrain", null)-->Line_150 $$ tile.getProperties().put("terrain", terrain)[ FD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_133 $$ TiledMapTile tile = tileset.getTile(firstgid + localtid)[ FD ]
Line_58 $$ atlasFilePath = atlasFile.name()-->Line_63 $$ FileHandle atlasHandle = getRelativeFileHandle(tmxFile, atlasFilePath)[ FD ]
Line_6 $$ int tilewidth = element.getIntAttribute("tilewidth", 0)-->Line_77 $$ props.put("tilewidth", tilewidth)[ FD ]
Line_114 $$ if (tile != null) -->Line_123 $$ Element properties = tileElement.getChildByName("properties")[ CD ]
Line_123 $$ Element properties = tileElement.getChildByName("properties")-->Line_167 $$ loadProperties(tileset.getProperties(), properties)[ FD ]
Line_99 $$ if (tile == null) -->Line_101 $$ if (imageElement != null) [ CD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_97 $$ int tileid = firstgid + tileElement.getIntAttribute("id", 0)[ FD ]
Line_135 $$ Element animationElement = tileElement.getChildByName("animation")-->Line_136 $$ if (animationElement != null) [ FD ]
Line_134 $$ if (tile != null) -->Line_135 $$ Element animationElement = tileElement.getChildByName("animation")[ CD ]
Line_71 $$ MapProperties props = tileset.getProperties()-->Line_75 $$ props.put("imagewidth", imageWidth)[ FD ]
Line_115 $$ String terrain = tileElement.getAttribute("terrain", null)-->Line_116 $$ if (terrain != null) [ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_144 $$ animatedTile.setId(tile.getId())[ FD ]
Line_139 $$ for (Element frameElement : animationElement.getChildrenByName("frame")) -->Line_141 $$ intervals.add(frameElement.getIntAttribute("duration"))[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_7 $$ int tileheight = element.getIntAttribute("tileheight", 0)[ FD ]
Line_7 $$ int tileheight = element.getIntAttribute("tileheight", 0)-->Line_22 $$ tileheight = element.getIntAttribute("tileheight", 0)[ FD ]
Line_71 $$ MapProperties props = tileset.getProperties()-->Line_79 $$ props.put("margin", margin)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_30 $$ Element imageElement = element.getChildByName("image")[ FD ]
Line_47 $$ if (imageElement != null) -->Line_48 $$ imageSource = imageElement.getAttribute("source")[ CD ]
Line_101 $$ if (imageElement != null) -->Line_111 $$ tileset.putTile(tileid, tile)[ CD ]
Line_101 $$ if (imageElement != null) -->Line_102 $$ String regionName = imageElement.getAttribute("source")[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_60 $$ if (atlasFilePath == null) [ CD ]
Line_48 $$ imageSource = imageElement.getAttribute("source")-->Line_74 $$ props.put("imagesource", imageSource)[ FD ]
Line_10 $$ String source = element.getAttribute("source", null)-->Line_16 $$ if (source != null) [ FD ]
Line_58 $$ atlasFilePath = atlasFile.name()-->Line_60 $$ if (atlasFilePath == null) [ FD ]
Line_47 $$ if (imageElement != null) -->Line_49 $$ imageWidth = imageElement.getIntAttribute("width", 0)[ CD ]
Line_12 $$ int offsetY = 0-->Line_28 $$ offsetY = offset.getIntAttribute("y", 0)[ FD ]
Line_124 $$ if (properties != null) -->Line_125 $$ loadProperties(tile.getProperties(), properties)[ CD ]
Line_50 $$ imageHeight = imageElement.getIntAttribute("height", 0)-->Line_76 $$ props.put("imageheight", imageHeight)[ FD ]
Line_143 $$ AnimatedTiledMapTile animatedTile = new AnimatedTiledMapTile(intervals, staticTiles)-->Line_144 $$ animatedTile.setId(tile.getId())[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_88 $$ tile.setId(tileid)[ FD ]
Line_86 $$ if (tileid >= firstgid && tileid <= lastgid) -->Line_91 $$ tileset.putTile(tileid, tile)[ CD ]
Line_25 $$ Element offset = element.getChildByName("tileoffset")-->Line_43 $$ offsetX = offset.getIntAttribute("x", 0)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_6 $$ int tilewidth = element.getIntAttribute("tilewidth", 0)[ CD ]
Line_114 $$ if (tile != null) -->Line_115 $$ String terrain = tileElement.getAttribute("terrain", null)[ CD ]
Line_143 $$ AnimatedTiledMapTile animatedTile = new AnimatedTiledMapTile(intervals, staticTiles)-->Line_146 $$ tile = animatedTile[ FD ]
Line_47 $$ if (imageElement != null) -->Line_50 $$ imageHeight = imageElement.getIntAttribute("height", 0)[ CD ]
Line_44 $$ offsetY = offset.getIntAttribute("y", 0)-->Line_110 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_79 $$ props.put("margin", margin)[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_74 $$ props.put("imagesource", imageSource)[ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_17 $$ FileHandle tsx = getRelativeFileHandle(tmxFile, source)[ FD ]
Line_134 $$ if (tile != null) -->Line_152 $$ String probability = tileElement.getAttribute("probability", null)[ CD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_108 $$ tile.setId(tileid)[ FD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_135 $$ Element animationElement = tileElement.getChildByName("animation")[ FD ]
Line_115 $$ String terrain = tileElement.getAttribute("terrain", null)-->Line_149 $$ if (terrain != null) [ FD ]
Line_16 $$ if (source != null) -->Line_46 $$ Element imageElement = element.getChildByName("image")[ CD ]
Line_22 $$ tileheight = element.getIntAttribute("tileheight", 0)-->Line_78 $$ props.put("tileheight", tileheight)[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_150 $$ tile.getProperties().put("terrain", terrain)[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_121 $$ tile.getProperties().put("probability", probability)[ FD ]
Line_54 $$ String atlasFilePath = map.getProperties().get("atlas", String.class)-->Line_60 $$ if (atlasFilePath == null) [ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_158 $$ loadProperties(tile.getProperties(), properties)[ FD ]
Line_134 $$ if (tile != null) -->Line_156 $$ Element properties = tileElement.getChildByName("properties")[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_77 $$ props.put("tilewidth", tilewidth)[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_55 $$ if (atlasFilePath == null) [ CD ]
Line_28 $$ offsetY = offset.getIntAttribute("y", 0)-->Line_90 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_86 $$ if (tileid >= firstgid && tileid <= lastgid) -->Line_88 $$ tile.setId(tileid)[ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_23 $$ spacing = element.getIntAttribute("spacing", 0)[ FD ]
Line_136 $$ if (animationElement != null) -->Line_138 $$ IntArray intervals = new IntArray()[ CD ]
Line_19 $$ element = xml.parse(tsx)-->Line_21 $$ tilewidth = element.getIntAttribute("tilewidth", 0)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_64 $$ atlasHandle = resolve(atlasHandle.path())[ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_3 $$ if (element.getName().equals("tileset")) [ CD ]
Line_136 $$ if (animationElement != null) -->Line_145 $$ animatedTiles.add(animatedTile)[ CD ]
Line_27 $$ offsetX = offset.getIntAttribute("x", 0)-->Line_89 $$ tile.setOffsetX(offsetX)[ FD ]
Line_16 $$ if (source != null) -->Line_17 $$ FileHandle tsx = getRelativeFileHandle(tmxFile, source)[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_65 $$ TextureAtlas atlas = resolver.getAtlas(atlasHandle.path())[ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_63 $$ FileHandle atlasHandle = getRelativeFileHandle(tmxFile, atlasFilePath)[ FD ]
Line_83 $$ for (AtlasRegion region : atlas.findRegions(regionsName)) -->Line_105 $$ if (region == null)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_76 $$ props.put("imageheight", imageHeight)[ CD ]
Line_146 $$ tile = animatedTile-->Line_163 $$ tileset.putTile(tile.getId(), tile)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_130 $$ Array<AnimatedTiledMapTile> animatedTiles = new Array<AnimatedTiledMapTile>()[ CD ]
Line_137 $$ Array<StaticTiledMapTile> staticTiles = new Array<StaticTiledMapTile>()-->Line_140 $$ staticTiles.add((StaticTiledMapTile) tileset.getTile(firstgid + frameElement.getIntAttribute("tileid")))[ FD ]
Line_25 $$ Element offset = element.getChildByName("tileoffset")-->Line_28 $$ offsetY = offset.getIntAttribute("y", 0)[ FD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_152 $$ String probability = tileElement.getAttribute("probability", null)[ FD ]
Line_13 $$ String imageSource = ""-->Line_74 $$ props.put("imagesource", imageSource)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_15 $$ FileHandle image = null[ CD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_72 $$ tileset.setName(name)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_12 $$ int offsetY = 0[ CD ]
Line_85 $$ int tileid = region.index + 1-->Line_98 $$ TiledMapTile tile = tileset.getTile(tileid)[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_163 $$ tileset.putTile(tile.getId(), tile)[ FD ]
Line_19 $$ element = xml.parse(tsx)-->Line_20 $$ name = element.get("name", null)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) [ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_146 $$ tile = animatedTile[ FD ]
Line_11 $$ int offsetX = 0-->Line_109 $$ tile.setOffsetX(offsetX)[ FD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_100 $$ Element imageElement = tileElement.getChildByName("image")[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_20 $$ name = element.get("name", null)[ FD ]
Line_130 $$ Array<AnimatedTiledMapTile> animatedTiles = new Array<AnimatedTiledMapTile>()-->Line_145 $$ animatedTiles.add(animatedTile)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_3 $$ if (element.getName().equals("tileset")) [ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_89 $$ tile.setOffsetX(offsetX)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_81 $$ if (imageSource != null && imageSource.length() > 0) [ CD ]
Line_32 $$ imageSource = imageElement.getAttribute("source")-->Line_74 $$ props.put("imagesource", imageSource)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_8 $$ int spacing = element.getIntAttribute("spacing", 0)[ CD ]
Line_10 $$ String source = element.getAttribute("source", null)-->Line_17 $$ FileHandle tsx = getRelativeFileHandle(tmxFile, source)[ FD ]
Line_134 $$ if (tile != null) -->Line_157 $$ if (properties != null) [ CD ]
Line_25 $$ Element offset = element.getChildByName("tileoffset")-->Line_27 $$ offsetX = offset.getIntAttribute("x", 0)[ FD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_71 $$ MapProperties props = tileset.getProperties()[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_14 $$ int imageWidth = 0, imageHeight = 0[ CD ]
Line_31 $$ if (imageElement != null) -->Line_32 $$ imageSource = imageElement.getAttribute("source")[ CD ]
Line_16 $$ if (source != null) -->Line_41 $$ Element offset = element.getChildByName("tileoffset")[ CD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_33 $$ imageWidth = imageElement.getIntAttribute("width", 0)[ FD ]
Line_9 $$ int margin = element.getIntAttribute("margin", 0)-->Line_24 $$ margin = element.getIntAttribute("margin", 0)[ FD ]
Line_123 $$ Element properties = tileElement.getChildByName("properties")-->Line_157 $$ if (properties != null) [ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_51 $$ image = getRelativeFileHandle(tmxFile, imageSource)[ FD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_31 $$ if (imageElement != null) [ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_90 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_132 $$ int localtid = tileElement.getIntAttribute("id", 0)[ FD ]
Line_136 $$ if (animationElement != null) -->Line_137 $$ Array<StaticTiledMapTile> staticTiles = new Array<StaticTiledMapTile>()[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_10 $$ String source = element.getAttribute("source", null)[ CD ]
Line_86 $$ if (tileid >= firstgid && tileid <= lastgid) -->Line_89 $$ tile.setOffsetX(offsetX)[ CD ]
Line_143 $$ AnimatedTiledMapTile animatedTile = new AnimatedTiledMapTile(intervals, staticTiles)-->Line_145 $$ animatedTiles.add(animatedTile)[ FD ]
Line_25 $$ Element offset = element.getChildByName("tileoffset")-->Line_42 $$ if (offset != null) [ FD ]
Line_34 $$ imageHeight = imageElement.getIntAttribute("height", 0)-->Line_76 $$ props.put("imageheight", imageHeight)[ FD ]
Line_19 $$ element = xml.parse(tsx)-->Line_24 $$ margin = element.getIntAttribute("margin", 0)[ FD ]
Line_136 $$ if (animationElement != null) -->Line_144 $$ animatedTile.setId(tile.getId())[ CD ]
Line_13 $$ String imageSource = ""-->Line_35 $$ image = getRelativeFileHandle(tsx, imageSource)[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_99 $$ if (tile == null) [ FD ]
Line_34 $$ imageHeight = imageElement.getIntAttribute("height", 0)-->Line_50 $$ imageHeight = imageElement.getIntAttribute("height", 0)[ FD ]
Line_138 $$ IntArray intervals = new IntArray()-->Line_141 $$ intervals.add(frameElement.getIntAttribute("duration"))[ FD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_34 $$ imageHeight = imageElement.getIntAttribute("height", 0)[ FD ]
Line_71 $$ MapProperties props = tileset.getProperties()-->Line_80 $$ props.put("spacing", spacing)[ FD ]
Line_32 $$ imageSource = imageElement.getAttribute("source")-->Line_51 $$ image = getRelativeFileHandle(tmxFile, imageSource)[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_125 $$ loadProperties(tile.getProperties(), properties)[ FD ]
Line_48 $$ imageSource = imageElement.getAttribute("source")-->Line_81 $$ if (imageSource != null && imageSource.length() > 0) [ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_80 $$ props.put("spacing", spacing)[ CD ]
Line_15 $$ FileHandle image = null-->Line_51 $$ image = getRelativeFileHandle(tmxFile, imageSource)[ FD ]
Line_31 $$ if (imageElement != null) -->Line_33 $$ imageWidth = imageElement.getIntAttribute("width", 0)[ CD ]
Line_13 $$ String imageSource = ""-->Line_48 $$ imageSource = imageElement.getAttribute("source")[ FD ]
Line_115 $$ String terrain = tileElement.getAttribute("terrain", null)-->Line_117 $$ tile.getProperties().put("terrain", terrain)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_72 $$ tileset.setName(name)[ CD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_121 $$ tile.getProperties().put("probability", probability)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_165 $$ Element properties = element.getChildByName("properties")[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_125 $$ loadProperties(tile.getProperties(), properties)[ FD ]
Line_114 $$ if (tile != null) -->Line_124 $$ if (properties != null) [ CD ]
Line_136 $$ if (animationElement != null) -->Line_146 $$ tile = animatedTile[ CD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_48 $$ imageSource = imageElement.getAttribute("source")[ FD ]
Line_4 $$ String name = element.get("name", null)-->Line_72 $$ tileset.setName(name)[ FD ]
Line_19 $$ element = xml.parse(tsx)-->Line_165 $$ Element properties = element.getChildByName("properties")[ FD ]
Line_84 $$ if (region != null) -->Line_86 $$ if (tileid >= firstgid && tileid <= lastgid) [ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_56 $$ FileHandle atlasFile = tmxFile.sibling(tmxFile.nameWithoutExtension() + ".atlas")[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_134 $$ if (tile != null) [ FD ]
Line_31 $$ if (imageElement != null) -->Line_34 $$ imageHeight = imageElement.getIntAttribute("height", 0)[ CD ]
Line_8 $$ int spacing = element.getIntAttribute("spacing", 0)-->Line_80 $$ props.put("spacing", spacing)[ FD ]
Line_67 $$ for (Texture texture : atlas.getTextures()) -->Line_68 $$ trackedTextures.add(texture)[ FD ]
Line_65 $$ TextureAtlas atlas = resolver.getAtlas(atlasHandle.path())-->Line_83 $$ for (AtlasRegion region : atlas.findRegions(regionsName)) [ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_13 $$ String imageSource = ""[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_166 $$ if (properties != null) [ CD ]
Line_101 $$ if (imageElement != null) -->Line_108 $$ tile.setId(tileid)[ CD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_158 $$ loadProperties(tile.getProperties(), properties)[ FD ]
Line_85 $$ int tileid = region.index + 1-->Line_108 $$ tile.setId(tileid)[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_114 $$ if (tile != null) [ FD ]
Line_63 $$ FileHandle atlasHandle = getRelativeFileHandle(tmxFile, atlasFilePath)-->Line_65 $$ TextureAtlas atlas = resolver.getAtlas(atlasHandle.path())[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_146 $$ tile = animatedTile[ FD ]
Line_81 $$ if (imageSource != null && imageSource.length() > 0) -->Line_82 $$ int lastgid = firstgid + ((imageWidth / tilewidth) * (imageHeight / tileheight)) - 1[ CD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_102 $$ String regionName = imageElement.getAttribute("source")[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_129 $$ Array<Element> tileElements = element.getChildrenByName("tile")[ FD ]
Line_135 $$ Element animationElement = tileElement.getChildByName("animation")-->Line_139 $$ for (Element frameElement : animationElement.getChildrenByName("frame")) [ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_154 $$ tile.getProperties().put("probability", probability)[ FD ]
Line_47 $$ if (imageElement != null) -->Line_51 $$ image = getRelativeFileHandle(tmxFile, imageSource)[ CD ]
Line_84 $$ if (region != null) -->Line_85 $$ int tileid = region.index + 1[ CD ]
Line_101 $$ if (imageElement != null) -->Line_110 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ CD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_119 $$ String probability = tileElement.getAttribute("probability", null)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_169 $$ map.getTileSets().addTileSet(tileset)[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_7 $$ int tileheight = element.getIntAttribute("tileheight", 0)[ CD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_91 $$ tileset.putTile(tileid, tile)[ FD ]
Line_153 $$ if (probability != null) -->Line_154 $$ tile.getProperties().put("probability", probability)[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_63 $$ FileHandle atlasHandle = getRelativeFileHandle(tmxFile, atlasFilePath)[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_78 $$ props.put("tileheight", tileheight)[ CD ]
Line_101 $$ if (imageElement != null) -->Line_105 $$ if (region == null)[ CD ]
Line_55 $$ if (atlasFilePath == null) -->Line_57 $$ if (atlasFile.exists())[ CD ]
Line_119 $$ String probability = tileElement.getAttribute("probability", null)-->Line_121 $$ tile.getProperties().put("probability", probability)[ FD ]
Line_146 $$ tile = animatedTile-->Line_150 $$ tile.getProperties().put("terrain", terrain)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_4 $$ String name = element.get("name", null)[ FD ]
Line_19 $$ element = xml.parse(tsx)-->Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) [ FD ]
Line_123 $$ Element properties = tileElement.getChildByName("properties")-->Line_124 $$ if (properties != null) [ FD ]
Line_119 $$ String probability = tileElement.getAttribute("probability", null)-->Line_154 $$ tile.getProperties().put("probability", probability)[ FD ]
Line_71 $$ MapProperties props = tileset.getProperties()-->Line_77 $$ props.put("tilewidth", tilewidth)[ FD ]
Line_26 $$ if (offset != null) -->Line_27 $$ offsetX = offset.getIntAttribute("x", 0)[ CD ]
Line_19 $$ element = xml.parse(tsx)-->Line_25 $$ Element offset = element.getChildByName("tileoffset")[ FD ]
Line_102 $$ String regionName = imageElement.getAttribute("source")-->Line_104 $$ AtlasRegion region = atlas.findRegion(regionName)[ FD ]
Line_134 $$ if (tile != null) -->Line_149 $$ if (terrain != null) [ CD ]
Line_136 $$ if (animationElement != null) -->Line_143 $$ AnimatedTiledMapTile animatedTile = new AnimatedTiledMapTile(intervals, staticTiles)[ CD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_117 $$ tile.getProperties().put("terrain", terrain)[ FD ]
Line_114 $$ if (tile != null) -->Line_119 $$ String probability = tileElement.getAttribute("probability", null)[ CD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_47 $$ if (imageElement != null) [ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_16 $$ if (source != null) [ CD ]
Line_25 $$ Element offset = element.getChildByName("tileoffset")-->Line_26 $$ if (offset != null) [ FD ]
Line_103 $$ regionName = regionName.substring(0, regionName.lastIndexOf('.'))-->Line_104 $$ AtlasRegion region = atlas.findRegion(regionName)[ FD ]
Line_16 $$ if (source != null) -->Line_47 $$ if (imageElement != null) [ CD ]
Line_16 $$ if (source != null) -->Line_42 $$ if (offset != null) [ CD ]
Line_23 $$ spacing = element.getIntAttribute("spacing", 0)-->Line_80 $$ props.put("spacing", spacing)[ FD ]
Line_146 $$ tile = animatedTile-->Line_154 $$ tile.getProperties().put("probability", probability)[ FD ]
Line_17 $$ FileHandle tsx = getRelativeFileHandle(tmxFile, source)-->Line_35 $$ image = getRelativeFileHandle(tsx, imageSource)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_46 $$ Element imageElement = element.getChildByName("image")[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_111 $$ tileset.putTile(tileid, tile)[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_150 $$ tile.getProperties().put("terrain", terrain)[ FD ]
Line_134 $$ if (tile != null) -->Line_153 $$ if (probability != null) [ CD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_50 $$ imageHeight = imageElement.getIntAttribute("height", 0)[ FD ]
Line_11 $$ int offsetX = 0-->Line_43 $$ offsetX = offset.getIntAttribute("x", 0)[ FD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_49 $$ imageWidth = imageElement.getIntAttribute("width", 0)[ FD ]
Line_119 $$ String probability = tileElement.getAttribute("probability", null)-->Line_153 $$ if (probability != null) [ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_114 $$ if (tile != null) [ FD ]
Line_20 $$ name = element.get("name", null)-->Line_72 $$ tileset.setName(name)[ FD ]
Line_8 $$ int spacing = element.getIntAttribute("spacing", 0)-->Line_23 $$ spacing = element.getIntAttribute("spacing", 0)[ FD ]
Line_65 $$ TextureAtlas atlas = resolver.getAtlas(atlasHandle.path())-->Line_104 $$ AtlasRegion region = atlas.findRegion(regionName)[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_107 $$ tile = new StaticTiledMapTile(region)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_4 $$ String name = element.get("name", null)[ CD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_32 $$ imageSource = imageElement.getAttribute("source")[ FD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_123 $$ Element properties = tileElement.getChildByName("properties")[ FD ]
Line_13 $$ String imageSource = ""-->Line_32 $$ imageSource = imageElement.getAttribute("source")[ FD ]
Line_42 $$ if (offset != null) -->Line_44 $$ offsetY = offset.getIntAttribute("y", 0)[ CD ]
Line_86 $$ if (tileid >= firstgid && tileid <= lastgid) -->Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)[ CD ]
Line_119 $$ String probability = tileElement.getAttribute("probability", null)-->Line_120 $$ if (probability != null) [ FD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_140 $$ staticTiles.add((StaticTiledMapTile) tileset.getTile(firstgid + frameElement.getIntAttribute("tileid")))[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_11 $$ int offsetX = 0[ CD ]
Line_139 $$ for (Element frameElement : animationElement.getChildrenByName("frame")) -->Line_140 $$ staticTiles.add((StaticTiledMapTile) tileset.getTile(firstgid + frameElement.getIntAttribute("tileid")))[ FD ]
Line_24 $$ margin = element.getIntAttribute("margin", 0)-->Line_79 $$ props.put("margin", margin)[ FD ]
Line_44 $$ offsetY = offset.getIntAttribute("y", 0)-->Line_90 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_9 $$ int margin = element.getIntAttribute("margin", 0)[ FD ]
Line_96 $$ for (Element tileElement : element.getChildrenByName("tile")) -->Line_156 $$ Element properties = tileElement.getChildByName("properties")[ FD ]
Line_12 $$ int offsetY = 0-->Line_110 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_65 $$ TextureAtlas atlas = resolver.getAtlas(atlasHandle.path())-->Line_67 $$ for (Texture texture : atlas.getTextures()) [ FD ]
Line_27 $$ offsetX = offset.getIntAttribute("x", 0)-->Line_43 $$ offsetX = offset.getIntAttribute("x", 0)[ FD ]
Line_71 $$ MapProperties props = tileset.getProperties()-->Line_73 $$ props.put("firstgid", firstgid)[ FD ]
Line_43 $$ offsetX = offset.getIntAttribute("x", 0)-->Line_109 $$ tile.setOffsetX(offsetX)[ FD ]
Line_71 $$ MapProperties props = tileset.getProperties()-->Line_76 $$ props.put("imageheight", imageHeight)[ FD ]
Line_114 $$ if (tile != null) -->Line_120 $$ if (probability != null) [ CD ]
Line_14 $$ int imageWidth = 0, imageHeight = 0-->Line_33 $$ imageWidth = imageElement.getIntAttribute("width", 0)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_54 $$ String atlasFilePath = map.getProperties().get("atlas", String.class)[ FD ]
Line_101 $$ if (imageElement != null) -->Line_109 $$ tile.setOffsetX(offsetX)[ CD ]
Line_48 $$ imageSource = imageElement.getAttribute("source")-->Line_51 $$ image = getRelativeFileHandle(tmxFile, imageSource)[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_163 $$ tileset.putTile(tile.getId(), tile)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_54 $$ String atlasFilePath = map.getProperties().get("atlas", String.class)[ CD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_108 $$ tile.setId(tileid)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_9 $$ int margin = element.getIntAttribute("margin", 0)[ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_5 $$ int firstgid = element.getIntAttribute("firstgid", 1)[ FD ]
Line_11 $$ int offsetX = 0-->Line_27 $$ offsetX = offset.getIntAttribute("x", 0)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_66 $$ String regionsName = name[ CD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_91 $$ tileset.putTile(tileid, tile)[ FD ]
Line_149 $$ if (terrain != null) -->Line_150 $$ tile.getProperties().put("terrain", terrain)[ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_22 $$ tileheight = element.getIntAttribute("tileheight", 0)[ FD ]
Line_25 $$ Element offset = element.getChildByName("tileoffset")-->Line_44 $$ offsetY = offset.getIntAttribute("y", 0)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_73 $$ props.put("firstgid", firstgid)[ CD ]
Line_19 $$ element = xml.parse(tsx)-->Line_129 $$ Array<Element> tileElements = element.getChildrenByName("tile")[ FD ]
Line_13 $$ String imageSource = ""-->Line_81 $$ if (imageSource != null && imageSource.length() > 0) [ FD ]
Line_32 $$ imageSource = imageElement.getAttribute("source")-->Line_48 $$ imageSource = imageElement.getAttribute("source")[ FD ]
Line_32 $$ imageSource = imageElement.getAttribute("source")-->Line_81 $$ if (imageSource != null && imageSource.length() > 0) [ FD ]
Line_123 $$ Element properties = tileElement.getChildByName("properties")-->Line_158 $$ loadProperties(tile.getProperties(), properties)[ FD ]
Line_55 $$ if (atlasFilePath == null) -->Line_56 $$ FileHandle atlasFile = tmxFile.sibling(tmxFile.nameWithoutExtension() + ".atlas")[ CD ]
Line_19 $$ element = xml.parse(tsx)-->Line_41 $$ Element offset = element.getChildByName("tileoffset")[ FD ]
Line_166 $$ if (properties != null) -->Line_167 $$ loadProperties(tileset.getProperties(), properties)[ CD ]
Line_63 $$ FileHandle atlasHandle = getRelativeFileHandle(tmxFile, atlasFilePath)-->Line_64 $$ atlasHandle = resolve(atlasHandle.path())[ FD ]
Line_85 $$ int tileid = region.index + 1-->Line_91 $$ tileset.putTile(tileid, tile)[ FD ]
Line_30 $$ Element imageElement = element.getChildByName("image")-->Line_101 $$ if (imageElement != null) [ FD ]
Line_11 $$ int offsetX = 0-->Line_89 $$ tile.setOffsetX(offsetX)[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_109 $$ tile.setOffsetX(offsetX)[ FD ]
Line_56 $$ FileHandle atlasFile = tmxFile.sibling(tmxFile.nameWithoutExtension() + ".atlas")-->Line_57 $$ if (atlasFile.exists())[ FD ]
Line_49 $$ imageWidth = imageElement.getIntAttribute("width", 0)-->Line_75 $$ props.put("imagewidth", imageWidth)[ FD ]
Line_83 $$ for (AtlasRegion region : atlas.findRegions(regionsName)) -->Line_84 $$ if (region != null) [ FD ]
Line_57 $$ if (atlasFile.exists())-->Line_58 $$ atlasFilePath = atlasFile.name()[ CD ]
Line_64 $$ atlasHandle = resolve(atlasHandle.path())-->Line_65 $$ TextureAtlas atlas = resolver.getAtlas(atlasHandle.path())[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_41 $$ Element offset = element.getChildByName("tileoffset")[ FD ]
Line_33 $$ imageWidth = imageElement.getIntAttribute("width", 0)-->Line_75 $$ props.put("imagewidth", imageWidth)[ FD ]
Line_17 $$ FileHandle tsx = getRelativeFileHandle(tmxFile, source)-->Line_19 $$ element = xml.parse(tsx)[ FD ]
Line_12 $$ int offsetY = 0-->Line_44 $$ offsetY = offset.getIntAttribute("y", 0)[ FD ]
Line_99 $$ if (tile == null) -->Line_100 $$ Element imageElement = tileElement.getChildByName("image")[ CD ]
Line_86 $$ if (tileid >= firstgid && tileid <= lastgid) -->Line_90 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ CD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_110 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_85 $$ int tileid = region.index + 1-->Line_111 $$ tileset.putTile(tileid, tile)[ FD ]
Line_157 $$ if (properties != null) -->Line_158 $$ loadProperties(tile.getProperties(), properties)[ CD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_117 $$ tile.getProperties().put("terrain", terrain)[ FD ]
Line_19 $$ element = xml.parse(tsx)-->Line_23 $$ spacing = element.getIntAttribute("spacing", 0)[ FD ]
Line_14 $$ int imageWidth = 0, imageHeight = 0-->Line_76 $$ props.put("imageheight", imageHeight)[ FD ]
Line_15 $$ FileHandle image = null-->Line_35 $$ image = getRelativeFileHandle(tsx, imageSource)[ FD ]
Line_4 $$ String name = element.get("name", null)-->Line_20 $$ name = element.get("name", null)[ FD ]
Line_5 $$ int firstgid = element.getIntAttribute("firstgid", 1)-->Line_73 $$ props.put("firstgid", firstgid)[ FD ]
Line_85 $$ int tileid = region.index + 1-->Line_88 $$ tile.setId(tileid)[ FD ]
Line_54 $$ String atlasFilePath = map.getProperties().get("atlas", String.class)-->Line_55 $$ if (atlasFilePath == null) [ FD ]
Line_26 $$ if (offset != null) -->Line_28 $$ offsetY = offset.getIntAttribute("y", 0)[ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_19 $$ element = xml.parse(tsx)[ FD ]
Line_31 $$ if (imageElement != null) -->Line_35 $$ image = getRelativeFileHandle(tsx, imageSource)[ CD ]
Line_21 $$ tilewidth = element.getIntAttribute("tilewidth", 0)-->Line_77 $$ props.put("tilewidth", tilewidth)[ FD ]
Line_14 $$ int imageWidth = 0, imageHeight = 0-->Line_49 $$ imageWidth = imageElement.getIntAttribute("width", 0)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_169 $$ map.getTileSets().addTileSet(tileset)[ FD ]
Line_12 $$ int offsetY = 0-->Line_90 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_9 $$ int margin = element.getIntAttribute("margin", 0)-->Line_79 $$ props.put("margin", margin)[ FD ]
Line_87 $$ StaticTiledMapTile tile = new StaticTiledMapTile(region)-->Line_154 $$ tile.getProperties().put("probability", probability)[ FD ]
Line_71 $$ MapProperties props = tileset.getProperties()-->Line_74 $$ props.put("imagesource", imageSource)[ FD ]
Line_28 $$ offsetY = offset.getIntAttribute("y", 0)-->Line_110 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_120 $$ if (probability != null) -->Line_121 $$ tile.getProperties().put("probability", probability)[ CD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_111 $$ tileset.putTile(tileid, tile)[ FD ]
Line_43 $$ offsetX = offset.getIntAttribute("x", 0)-->Line_89 $$ tile.setOffsetX(offsetX)[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_110 $$ tile.setOffsetY(flipY ? -offsetY : offsetY)[ FD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_111 $$ tileset.putTile(tileid, tile)[ FD ]
Line_146 $$ tile = animatedTile-->Line_158 $$ loadProperties(tile.getProperties(), properties)[ FD ]
Line_54 $$ String atlasFilePath = map.getProperties().get("atlas", String.class)-->Line_63 $$ FileHandle atlasHandle = getRelativeFileHandle(tmxFile, atlasFilePath)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_10 $$ String source = element.getAttribute("source", null)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_65 $$ TextureAtlas atlas = resolver.getAtlas(atlasHandle.path())[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_5 $$ int firstgid = element.getIntAttribute("firstgid", 1)[ CD ]
Line_14 $$ int imageWidth = 0, imageHeight = 0-->Line_75 $$ props.put("imagewidth", imageWidth)[ FD ]
Line_13 $$ String imageSource = ""-->Line_51 $$ image = getRelativeFileHandle(tmxFile, imageSource)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_71 $$ MapProperties props = tileset.getProperties()[ CD ]
Line_56 $$ FileHandle atlasFile = tmxFile.sibling(tmxFile.nameWithoutExtension() + ".atlas")-->Line_58 $$ atlasFilePath = atlasFile.name()[ FD ]
Line_14 $$ int imageWidth = 0, imageHeight = 0-->Line_50 $$ imageHeight = imageElement.getIntAttribute("height", 0)[ FD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_98 $$ TiledMapTile tile = tileset.getTile(tileid)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_165 $$ Element properties = element.getChildByName("properties")[ CD ]
Line_32 $$ imageSource = imageElement.getAttribute("source")-->Line_35 $$ image = getRelativeFileHandle(tsx, imageSource)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_21 $$ tilewidth = element.getIntAttribute("tilewidth", 0)[ FD ]
Line_71 $$ MapProperties props = tileset.getProperties()-->Line_78 $$ props.put("tileheight", tileheight)[ FD ]
Line_66 $$ String regionsName = name-->Line_83 $$ for (AtlasRegion region : atlas.findRegions(regionsName)) [ FD ]
Line_114 $$ if (tile != null) -->Line_116 $$ if (terrain != null) [ CD ]
Line_101 $$ if (imageElement != null) -->Line_103 $$ regionName = regionName.substring(0, regionName.lastIndexOf('.'))[ CD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()[ CD ]
Line_7 $$ int tileheight = element.getIntAttribute("tileheight", 0)-->Line_78 $$ props.put("tileheight", tileheight)[ FD ]
Line_101 $$ if (imageElement != null) -->Line_104 $$ AtlasRegion region = atlas.findRegion(regionName)[ CD ]
Line_134 $$ if (tile != null) -->Line_136 $$ if (animationElement != null) [ CD ]
Line_123 $$ Element properties = tileElement.getChildByName("properties")-->Line_125 $$ loadProperties(tile.getProperties(), properties)[ FD ]
Line_19 $$ element = xml.parse(tsx)-->Line_46 $$ Element imageElement = element.getChildByName("image")[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_129 $$ Array<Element> tileElements = element.getChildrenByName("tile")[ CD ]
Line_134 $$ if (tile != null) -->Line_148 $$ String terrain = tileElement.getAttribute("terrain", null)[ CD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_24 $$ margin = element.getIntAttribute("margin", 0)[ FD ]
Line_116 $$ if (terrain != null) -->Line_117 $$ tile.getProperties().put("terrain", terrain)[ CD ]
Line_54 $$ String atlasFilePath = map.getProperties().get("atlas", String.class)-->Line_58 $$ atlasFilePath = atlasFile.name()[ FD ]
Line_33 $$ imageWidth = imageElement.getIntAttribute("width", 0)-->Line_49 $$ imageWidth = imageElement.getIntAttribute("width", 0)[ FD ]
Line_3 $$ if (element.getName().equals("tileset")) -->Line_75 $$ props.put("imagewidth", imageWidth)[ CD ]
Line_107 $$ tile = new StaticTiledMapTile(region)-->Line_144 $$ animatedTile.setId(tile.getId())[ FD ]
Line_70 $$ TiledMapTileSet tileset = new TiledMapTileSet()-->Line_169 $$ map.getTileSets().addTileSet(tileset)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_25 $$ Element offset = element.getChildByName("tileoffset")[ FD ]
Line_35 $$ image = getRelativeFileHandle(tsx, imageSource)-->Line_51 $$ image = getRelativeFileHandle(tmxFile, imageSource)[ FD ]
Line_2 $$ protected void loadTileset(TiledMap map, Element element, FileHandle tmxFile, AtlasResolver resolver) -->Line_6 $$ int tilewidth = element.getIntAttribute("tilewidth", 0)[ FD ]
Line_19 $$ element = xml.parse(tsx)-->Line_30 $$ Element imageElement = element.getChildByName("image")[ FD ]
