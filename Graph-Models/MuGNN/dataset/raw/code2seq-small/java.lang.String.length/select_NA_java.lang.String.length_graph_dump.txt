Line_13 $$ int index = -1-->Line_18 $$ index = cur[ FD ]
Line_15 $$ cur = text.indexOf('\n', index + 1)-->Line_18 $$ index = cur[ FD ]
Line_24 $$ if (index >= 0) -->Line_25 $$ endOffset = stringOffset + index + 1[ CD ]
Line_23 $$ index = text.indexOf('\n', cursorOffset - stringOffset)-->Line_24 $$ if (index >= 0) [ FD ]
Line_3 $$ List<TextRange> result = super.select(e, editorText, cursorOffset, editor)-->Line_29 $$ result.add(new TextRange(startOffset, endOffset))[ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_31 $$ final String content = GrStringUtil.removeQuotes(text)[ CD ]
Line_14 $$ while (true) -->Line_18 $$ index = cur[ CD ]
Line_11 $$ if (elementType == GroovyTokenTypes.mGSTRING_CONTENT || elementType == GroovyTokenTypes.mREGEX_CONTENT || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) -->Line_12 $$ int cur[ CD ]
Line_31 $$ final String content = GrStringUtil.removeQuotes(text)-->Line_32 $$ final int offset = stringOffset + text.indexOf(content)[ FD ]
Line_12 $$ int cur-->Line_18 $$ index = cur[ FD ]
Line_8 $$ final String text = e.getText()-->Line_32 $$ final int offset = stringOffset + text.indexOf(content)[ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_3 $$ List<TextRange> result = super.select(e, editorText, cursorOffset, editor)[ FD ]
Line_13 $$ int index = -1-->Line_24 $$ if (index >= 0) [ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_33 $$ result.add(new TextRange(offset, offset + content.length()))[ CD ]
Line_13 $$ int index = -1-->Line_23 $$ index = text.indexOf('\n', cursorOffset - stringOffset)[ FD ]
Line_11 $$ if (elementType == GroovyTokenTypes.mGSTRING_CONTENT || elementType == GroovyTokenTypes.mREGEX_CONTENT || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) -->Line_20 $$ if (index >= 0) [ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_10 $$ final IElementType elementType = e.getNode().getElementType()[ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_8 $$ final String text = e.getText()[ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_7 $$ int endOffset = -1[ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_4 $$ if (e instanceof GrListOrMap)[ CD ]
Line_14 $$ while (true) -->Line_15 $$ cur = text.indexOf('\n', index + 1)[ CD ]
Line_13 $$ int index = -1-->Line_20 $$ if (index >= 0) [ FD ]
Line_6 $$ int startOffset = -1-->Line_21 $$ startOffset = stringOffset + index + 1[ FD ]
Line_28 $$ if (startOffset >= 0 && endOffset >= 0) -->Line_29 $$ result.add(new TextRange(startOffset, endOffset))[ CD ]
Line_8 $$ final String text = e.getText()-->Line_31 $$ final String content = GrStringUtil.removeQuotes(text)[ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_3 $$ List<TextRange> result = super.select(e, editorText, cursorOffset, editor)[ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_34 $$ return result[ CD ]
Line_4 $$ if (e instanceof GrListOrMap)-->Line_5 $$ return result[ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_6 $$ int startOffset = -1[ CD ]
Line_11 $$ if (elementType == GroovyTokenTypes.mGSTRING_CONTENT || elementType == GroovyTokenTypes.mREGEX_CONTENT || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) -->Line_24 $$ if (index >= 0) [ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_28 $$ if (startOffset >= 0 && endOffset >= 0) [ CD ]
Line_3 $$ List<TextRange> result = super.select(e, editorText, cursorOffset, editor)-->Line_33 $$ result.add(new TextRange(offset, offset + content.length()))[ FD ]
Line_18 $$ index = cur-->Line_24 $$ if (index >= 0) [ FD ]
Line_20 $$ if (index >= 0) -->Line_21 $$ startOffset = stringOffset + index + 1[ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_10 $$ final IElementType elementType = e.getNode().getElementType()[ FD ]
Line_11 $$ if (elementType == GroovyTokenTypes.mGSTRING_CONTENT || elementType == GroovyTokenTypes.mREGEX_CONTENT || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) -->Line_23 $$ index = text.indexOf('\n', cursorOffset - stringOffset)[ CD ]
Line_14 $$ while (true) -->Line_16 $$ if (cur < 0 || cur + stringOffset > cursorOffset)[ CD ]
Line_18 $$ index = cur-->Line_23 $$ index = text.indexOf('\n', cursorOffset - stringOffset)[ FD ]
Line_7 $$ int endOffset = -1-->Line_25 $$ endOffset = stringOffset + index + 1[ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_11 $$ if (elementType == GroovyTokenTypes.mGSTRING_CONTENT || elementType == GroovyTokenTypes.mREGEX_CONTENT || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) [ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_8 $$ final String text = e.getText()[ CD ]
Line_3 $$ List<TextRange> result = super.select(e, editorText, cursorOffset, editor)-->Line_4 $$ if (e instanceof GrListOrMap)[ FD ]
Line_8 $$ final String text = e.getText()-->Line_23 $$ index = text.indexOf('\n', cursorOffset - stringOffset)[ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_32 $$ final int offset = stringOffset + text.indexOf(content)[ CD ]
Line_31 $$ final String content = GrStringUtil.removeQuotes(text)-->Line_33 $$ result.add(new TextRange(offset, offset + content.length()))[ FD ]
Line_11 $$ if (elementType == GroovyTokenTypes.mGSTRING_CONTENT || elementType == GroovyTokenTypes.mREGEX_CONTENT || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) -->Line_14 $$ while (true) [ CD ]
Line_11 $$ if (elementType == GroovyTokenTypes.mGSTRING_CONTENT || elementType == GroovyTokenTypes.mREGEX_CONTENT || elementType == GroovyTokenTypes.mDOLLAR_SLASH_REGEX_CONTENT) -->Line_13 $$ int index = -1[ CD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_9 $$ final int stringOffset = e.getTextOffset()[ FD ]
Line_8 $$ final String text = e.getText()-->Line_15 $$ cur = text.indexOf('\n', index + 1)[ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_9 $$ final int stringOffset = e.getTextOffset()[ CD ]
Line_12 $$ int cur-->Line_15 $$ cur = text.indexOf('\n', index + 1)[ FD ]
Line_2 $$ public List<TextRange> select(PsiElement e, CharSequence editorText, int cursorOffset, Editor editor) -->Line_4 $$ if (e instanceof GrListOrMap)[ FD ]
Line_18 $$ index = cur-->Line_20 $$ if (index >= 0) [ FD ]
