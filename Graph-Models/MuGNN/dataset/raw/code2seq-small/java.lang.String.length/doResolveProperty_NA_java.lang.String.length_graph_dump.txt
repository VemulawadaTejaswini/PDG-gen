Line_15 $$ if (parentId == null)-->Line_16 $$ return null[ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_14 $$ MavenId parentId = selectedProject.getParentId()[ CD ]
Line_17 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_21 $$ if (unprefixed.equals("artifactId")) [ FD ]
Line_59 $$ result = mavenProject.getProperties().getProperty(propName)-->Line_60 $$ if (result != null)[ FD ]
Line_4 $$ String unprefixed = propName-->Line_17 $$ unprefixed = unprefixed.substring("parent.".length())[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_31 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == selectedProject && unprefixed.equals("baseUri"))) [ CD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_56 $$ result = additionalProperties.getProperty(propName)[ FD ]
Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)-->Line_54 $$ if (result != null)[ FD ]
Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)-->Line_56 $$ result = additionalProperties.getProperty(propName)[ FD ]
Line_46 $$ String result-->Line_57 $$ if (result != null)[ FD ]
Line_14 $$ MavenId parentId = selectedProject.getParentId()-->Line_27 $$ selectedProject = projectsManager.findProject(parentId)[ FD ]
Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)-->Line_56 $$ result = additionalProperties.getProperty(propName)[ FD ]
Line_46 $$ String result-->Line_48 $$ if (result != null)[ FD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_54 $$ if (result != null)[ FD ]
Line_14 $$ MavenId parentId = selectedProject.getParentId()-->Line_25 $$ return parentId.getVersion()[ FD ]
Line_27 $$ selectedProject = projectsManager.findProject(parentId)-->Line_32 $$ return selectedProject.getDirectory()[ FD ]
Line_18 $$ if (unprefixed.equals("groupId")) -->Line_19 $$ return parentId.getGroupId()[ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_48 $$ if (result != null)[ CD ]
Line_8 $$ if (propName.startsWith("project.")) -->Line_10 $$ hasPrefix = true[ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_15 $$ if (parentId == null)[ CD ]
Line_24 $$ if (unprefixed.equals("version")) -->Line_25 $$ return parentId.getVersion()[ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_40 $$ if ("java.version".equals(propName)) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)[ CD ]
Line_7 $$ hasPrefix = true-->Line_10 $$ hasPrefix = true[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_57 $$ if (result != null)[ CD ]
Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)-->Line_59 $$ result = mavenProject.getProperties().getProperty(propName)[ FD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_4 $$ String unprefixed = propName-->Line_31 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == selectedProject && unprefixed.equals("baseUri"))) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)[ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_21 $$ if (unprefixed.equals("artifactId")) [ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)[ FD ]
Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)-->Line_51 $$ if (result != null)[ FD ]
Line_3 $$ boolean hasPrefix = false-->Line_7 $$ hasPrefix = true[ FD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_24 $$ if (unprefixed.equals("version")) [ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_34 $$ if ("java.home".equals(propName)) [ FD ]
Line_27 $$ selectedProject = projectsManager.findProject(parentId)-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)-->Line_57 $$ if (result != null)[ FD ]
Line_35 $$ String jreDir = MavenUtil.getModuleJreHome(projectsManager, mavenProject)-->Line_36 $$ if (jreDir != null) [ FD ]
Line_6 $$ unprefixed = propName.substring("pom.".length())-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_42 $$ if (javaVersion != null) -->Line_43 $$ return javaVersion[ CD ]
Line_9 $$ unprefixed = propName.substring("project.".length())-->Line_24 $$ if (unprefixed.equals("version")) [ FD ]
Line_4 $$ String unprefixed = propName-->Line_24 $$ if (unprefixed.equals("version")) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_51 $$ if (result != null)[ CD ]
Line_14 $$ MavenId parentId = selectedProject.getParentId()-->Line_19 $$ return parentId.getGroupId()[ FD ]
Line_51 $$ if (result != null)-->Line_52 $$ return result[ CD ]
Line_6 $$ unprefixed = propName.substring("pom.".length())-->Line_13 $$ while (unprefixed.startsWith("parent.")) [ FD ]
Line_62 $$ if ("settings.localRepository".equals(propName)) -->Line_63 $$ return mavenProject.getLocalRepository().getAbsolutePath()[ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_18 $$ if (unprefixed.equals("groupId")) [ CD ]
Line_5 $$ if (propName.startsWith("pom.")) -->Line_7 $$ hasPrefix = true[ CD ]
Line_28 $$ if (selectedProject == null)-->Line_29 $$ return null[ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_34 $$ if ("java.home".equals(propName)) [ CD ]
Line_6 $$ unprefixed = propName.substring("pom.".length())-->Line_9 $$ unprefixed = propName.substring("project.".length())[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_41 $$ String javaVersion = MavenUtil.getModuleJavaVersion(projectsManager, mavenProject)[ FD ]
Line_27 $$ selectedProject = projectsManager.findProject(parentId)-->Line_14 $$ MavenId parentId = selectedProject.getParentId()[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_60 $$ if (result != null)[ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_63 $$ return mavenProject.getLocalRepository().getAbsolutePath()[ FD ]
Line_27 $$ selectedProject = projectsManager.findProject(parentId)-->Line_28 $$ if (selectedProject == null)[ FD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_27 $$ selectedProject = projectsManager.findProject(parentId)[ CD ]
Line_34 $$ if ("java.home".equals(propName)) -->Line_36 $$ if (jreDir != null) [ CD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_28 $$ if (selectedProject == null)[ CD ]
Line_34 $$ if ("java.home".equals(propName)) -->Line_35 $$ String jreDir = MavenUtil.getModuleJreHome(projectsManager, mavenProject)[ CD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_59 $$ result = mavenProject.getProperties().getProperty(propName)[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_4 $$ String unprefixed = propName[ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_65 $$ return null[ CD ]
Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)-->Line_54 $$ if (result != null)[ FD ]
Line_46 $$ String result-->Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)[ FD ]
Line_6 $$ unprefixed = propName.substring("pom.".length())-->Line_18 $$ if (unprefixed.equals("groupId")) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_59 $$ result = mavenProject.getProperties().getProperty(propName)[ CD ]
Line_6 $$ unprefixed = propName.substring("pom.".length())-->Line_24 $$ if (unprefixed.equals("version")) [ FD ]
Line_8 $$ if (propName.startsWith("project.")) -->Line_9 $$ unprefixed = propName.substring("project.".length())[ CD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_60 $$ if (result != null)[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_5 $$ if (propName.startsWith("pom.")) [ CD ]
Line_6 $$ unprefixed = propName.substring("pom.".length())-->Line_31 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == selectedProject && unprefixed.equals("baseUri"))) [ FD ]
Line_3 $$ boolean hasPrefix = false-->Line_10 $$ hasPrefix = true[ FD ]
Line_17 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_31 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == selectedProject && unprefixed.equals("baseUri"))) [ FD ]
Line_48 $$ if (result != null)-->Line_49 $$ return result[ CD ]
Line_6 $$ unprefixed = propName.substring("pom.".length())-->Line_17 $$ unprefixed = unprefixed.substring("parent.".length())[ FD ]
Line_46 $$ String result-->Line_54 $$ if (result != null)[ FD ]
Line_46 $$ String result-->Line_60 $$ if (result != null)[ FD ]
Line_14 $$ MavenId parentId = selectedProject.getParentId()-->Line_15 $$ if (parentId == null)[ FD ]
Line_54 $$ if (result != null)-->Line_55 $$ return result[ CD ]
Line_5 $$ if (propName.startsWith("pom.")) -->Line_8 $$ if (propName.startsWith("project.")) [ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_46 $$ String result[ CD ]
Line_46 $$ String result-->Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_6 $$ unprefixed = propName.substring("pom.".length())[ FD ]
Line_4 $$ String unprefixed = propName-->Line_13 $$ while (unprefixed.startsWith("parent.")) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_56 $$ result = additionalProperties.getProperty(propName)[ FD ]
Line_12 $$ MavenProject selectedProject = mavenProject-->Line_27 $$ selectedProject = projectsManager.findProject(parentId)[ FD ]
Line_13 $$ while (unprefixed.startsWith("parent.")) -->Line_17 $$ unprefixed = unprefixed.substring("parent.".length())[ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_40 $$ if ("java.version".equals(propName)) [ CD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_27 $$ selectedProject = projectsManager.findProject(parentId)[ FD ]
Line_46 $$ String result-->Line_51 $$ if (result != null)[ FD ]
Line_4 $$ String unprefixed = propName-->Line_9 $$ unprefixed = propName.substring("project.".length())[ FD ]
Line_9 $$ unprefixed = propName.substring("project.".length())-->Line_21 $$ if (unprefixed.equals("artifactId")) [ FD ]
Line_46 $$ String result-->Line_56 $$ result = additionalProperties.getProperty(propName)[ FD ]
Line_4 $$ String unprefixed = propName-->Line_6 $$ unprefixed = propName.substring("pom.".length())[ FD ]
Line_6 $$ unprefixed = propName.substring("pom.".length())-->Line_21 $$ if (unprefixed.equals("artifactId")) [ FD ]
Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)-->Line_57 $$ if (result != null)[ FD ]
Line_40 $$ if ("java.version".equals(propName)) -->Line_41 $$ String javaVersion = MavenUtil.getModuleJavaVersion(projectsManager, mavenProject)[ CD ]
Line_46 $$ String result-->Line_59 $$ result = mavenProject.getProperties().getProperty(propName)[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_13 $$ while (unprefixed.startsWith("parent.")) [ CD ]
Line_5 $$ if (propName.startsWith("pom.")) -->Line_6 $$ unprefixed = propName.substring("pom.".length())[ CD ]
Line_40 $$ if ("java.version".equals(propName)) -->Line_42 $$ if (javaVersion != null) [ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_12 $$ MavenProject selectedProject = mavenProject[ CD ]
Line_17 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_18 $$ if (unprefixed.equals("groupId")) [ FD ]
Line_56 $$ result = additionalProperties.getProperty(propName)-->Line_60 $$ if (result != null)[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ CD ]
Line_12 $$ MavenProject selectedProject = mavenProject-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)-->Line_60 $$ if (result != null)[ FD ]
Line_60 $$ if (result != null)-->Line_61 $$ return result[ CD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_51 $$ if (result != null)[ FD ]
Line_9 $$ unprefixed = propName.substring("project.".length())-->Line_17 $$ unprefixed = unprefixed.substring("parent.".length())[ FD ]
Line_56 $$ result = additionalProperties.getProperty(propName)-->Line_57 $$ if (result != null)[ FD ]
Line_17 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_13 $$ while (unprefixed.startsWith("parent.")) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_62 $$ if ("settings.localRepository".equals(propName)) [ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_35 $$ String jreDir = MavenUtil.getModuleJreHome(projectsManager, mavenProject)[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_54 $$ if (result != null)[ CD ]
Line_9 $$ unprefixed = propName.substring("project.".length())-->Line_13 $$ while (unprefixed.startsWith("parent.")) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_8 $$ if (propName.startsWith("project.")) [ FD ]
Line_17 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_46 $$ String result-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_17 $$ unprefixed = unprefixed.substring("parent.".length())-->Line_24 $$ if (unprefixed.equals("version")) [ FD ]
Line_9 $$ unprefixed = propName.substring("project.".length())-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_12 $$ MavenProject selectedProject = mavenProject-->Line_28 $$ if (selectedProject == null)[ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_3 $$ boolean hasPrefix = false[ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_9 $$ unprefixed = propName.substring("project.".length())[ FD ]
Line_4 $$ String unprefixed = propName-->Line_18 $$ if (unprefixed.equals("groupId")) [ FD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_48 $$ if (result != null)[ FD ]
Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)-->Line_57 $$ if (result != null)[ FD ]
Line_41 $$ String javaVersion = MavenUtil.getModuleJavaVersion(projectsManager, mavenProject)-->Line_42 $$ if (javaVersion != null) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_62 $$ if ("settings.localRepository".equals(propName)) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_47 $$ result = MavenUtil.getPropertiesFromMavenOpts().get(propName)[ FD ]
Line_14 $$ MavenId parentId = selectedProject.getParentId()-->Line_22 $$ return parentId.getArtifactId()[ FD ]
Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_4 $$ String unprefixed = propName-->Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)[ FD ]
Line_12 $$ MavenProject selectedProject = mavenProject-->Line_32 $$ return selectedProject.getDirectory()[ FD ]
Line_36 $$ if (jreDir != null) -->Line_37 $$ return jreDir[ CD ]
Line_4 $$ String unprefixed = propName-->Line_21 $$ if (unprefixed.equals("artifactId")) [ FD ]
Line_31 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == selectedProject && unprefixed.equals("baseUri"))) -->Line_32 $$ return selectedProject.getDirectory()[ CD ]
Line_56 $$ result = additionalProperties.getProperty(propName)-->Line_59 $$ result = mavenProject.getProperties().getProperty(propName)[ FD ]
Line_12 $$ MavenProject selectedProject = mavenProject-->Line_14 $$ MavenId parentId = selectedProject.getParentId()[ FD ]
Line_9 $$ unprefixed = propName.substring("project.".length())-->Line_31 $$ if (unprefixed.equals("basedir") || (hasPrefix && mavenProject == selectedProject && unprefixed.equals("baseUri"))) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_56 $$ result = additionalProperties.getProperty(propName)[ CD ]
Line_57 $$ if (result != null)-->Line_58 $$ return result[ CD ]
Line_53 $$ result = selectedProject.getModelMap().get(unprefixed)-->Line_60 $$ if (result != null)[ FD ]
Line_50 $$ result = MavenServerUtil.collectSystemProperties().getProperty(propName)-->Line_59 $$ result = mavenProject.getProperties().getProperty(propName)[ FD ]
Line_21 $$ if (unprefixed.equals("artifactId")) -->Line_22 $$ return parentId.getArtifactId()[ CD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_5 $$ if (propName.startsWith("pom.")) [ FD ]
Line_2 $$ private static String doResolveProperty(String propName, MavenProjectsManager projectsManager, MavenProject mavenProject, Properties additionalProperties) -->Line_59 $$ result = mavenProject.getProperties().getProperty(propName)[ FD ]
Line_9 $$ unprefixed = propName.substring("project.".length())-->Line_18 $$ if (unprefixed.equals("groupId")) [ FD ]
