Line_17 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_38 $$ data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_36 $$ unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_37 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_5 $$ Serializer serializer = new Serializer()-->Line_24 $$ serializer = new Serializer()[ FD ]
Line_17 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_19 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_13 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_20 $$ for (int i = 5; i < data.length; i++) [ FD ]
Line_13 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_14 $$ byteBuffer.put((byte) asciiString.charAt(i))[ FD ]
Line_20 $$ for (int i = 5; i < data.length; i++) -->Line_34 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_12 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_16 $$ byteBuffer.flip()[ FD ]
Line_19 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()-->Line_38 $$ data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_12 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_14 $$ byteBuffer.put((byte) asciiString.charAt(i))[ FD ]
Line_12 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_31 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_36 $$ unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_38 $$ data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_4 $$ String asciiString = "abcdefghijklmn"-->Line_12 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())[ FD ]
Line_5 $$ Serializer serializer = new Serializer()-->Line_37 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_33 $$ for (int i = 0; i < nonAsciiString.length(); i++) -->Line_34 $$ charBuffer.put(nonAsciiString.charAt(i))[ CD ]
Line_12 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_21 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ FD ]
Line_20 $$ for (int i = 5; i < data.length; i++) -->Line_39 $$ for (int i = 5; i < data.length; i++) [ FD ]
Line_12 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_40 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ FD ]
Line_17 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_36 $$ unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ FD ]
Line_10 $$ int length = BigEndianCodec.getInt(serializer.buffer, 1)-->Line_29 $$ Assert.assertEquals(nonAsciiString.length(), length)[ FD ]
Line_32 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()-->Line_34 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_23 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_29 $$ Assert.assertEquals(nonAsciiString.length(), length)[ FD ]
Line_4 $$ String asciiString = "abcdefghijklmn"-->Line_11 $$ Assert.assertEquals(asciiString.length(), length)[ FD ]
Line_23 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_30 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)[ FD ]
Line_33 $$ for (int i = 0; i < nonAsciiString.length(); i++) -->Line_39 $$ for (int i = 5; i < data.length; i++) [ FD ]
Line_5 $$ Serializer serializer = new Serializer()-->Line_18 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_13 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_33 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ FD ]
Line_30 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)-->Line_40 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ FD ]
Line_5 $$ Serializer serializer = new Serializer()-->Line_7 $$ serializer.writeString(asciiString)[ FD ]
Line_17 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_18 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_12 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_30 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)[ FD ]
Line_13 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_14 $$ byteBuffer.put((byte) asciiString.charAt(i))[ CD ]
Line_30 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)-->Line_31 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_20 $$ for (int i = 5; i < data.length; i++) -->Line_33 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ FD ]
Line_4 $$ String asciiString = "abcdefghijklmn"-->Line_7 $$ serializer.writeString(asciiString)[ FD ]
Line_10 $$ int length = BigEndianCodec.getInt(serializer.buffer, 1)-->Line_11 $$ Assert.assertEquals(asciiString.length(), length)[ FD ]
Line_28 $$ length = BigEndianCodec.getInt(serializer.buffer, 1)-->Line_29 $$ Assert.assertEquals(nonAsciiString.length(), length)[ FD ]
Line_23 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_34 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_24 $$ serializer = new Serializer()-->Line_25 $$ serializer.writeString(nonAsciiString)[ FD ]
Line_10 $$ int length = BigEndianCodec.getInt(serializer.buffer, 1)-->Line_28 $$ length = BigEndianCodec.getInt(serializer.buffer, 1)[ FD ]
Line_13 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_39 $$ for (int i = 5; i < data.length; i++) [ FD ]
Line_4 $$ String asciiString = "abcdefghijklmn"-->Line_8 $$ Assert.assertEquals(serializer.index, 5 + asciiString.length())[ FD ]
Line_24 $$ serializer = new Serializer()-->Line_37 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_23 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_33 $$ for (int i = 0; i < nonAsciiString.length(); i++) [ FD ]
Line_30 $$ byteBuffer = ByteBuffer.allocate(nonAsciiString.length() * 2)-->Line_32 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()[ FD ]
Line_23 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_25 $$ serializer.writeString(nonAsciiString)[ FD ]
Line_17 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_37 $$ serializer.writeTo(unsyncByteArrayOutputStream)[ FD ]
Line_4 $$ String asciiString = "abcdefghijklmn"-->Line_13 $$ for (int i = 0; i < asciiString.length(); i++) [ FD ]
Line_39 $$ for (int i = 5; i < data.length; i++) -->Line_40 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ CD ]
Line_5 $$ Serializer serializer = new Serializer()-->Line_25 $$ serializer.writeString(nonAsciiString)[ FD ]
Line_33 $$ for (int i = 0; i < nonAsciiString.length(); i++) -->Line_34 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_23 $$ String nonAsciiString = "非ASCII Code中文测试"-->Line_26 $$ Assert.assertEquals(serializer.index, 5 + nonAsciiString.length() * 2)[ FD ]
Line_13 $$ for (int i = 0; i < asciiString.length(); i++) -->Line_34 $$ charBuffer.put(nonAsciiString.charAt(i))[ FD ]
Line_12 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(asciiString.length())-->Line_32 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()[ FD ]
Line_4 $$ String asciiString = "abcdefghijklmn"-->Line_14 $$ byteBuffer.put((byte) asciiString.charAt(i))[ FD ]
Line_20 $$ for (int i = 5; i < data.length; i++) -->Line_21 $$ Assert.assertEquals(byteBuffer.get(), data[i])[ CD ]
