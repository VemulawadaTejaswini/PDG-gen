Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)-->Line_57 $$ newEndOffset = newElement.getTextRange().getStartOffset() + qName.length()[ FD ]
Line_50 $$ newEndOffset = parameterList.getTextRange().getStartOffset()-->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ FD ]
Line_17 $$ String name = psiClass.getName()-->Line_18 $$ if (name == null) [ FD ]
Line_30 $$ PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement) parent-->Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) [ FD ]
Line_23 $$ int newEndOffset = startOffset + name.length()-->Line_46 $$ newEndOffset = newElement.getTextRange().getEndOffset()[ FD ]
Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) -->Line_32 $$ final boolean staticImport = ref instanceof PsiImportStaticReferenceElement[ CD ]
Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) -->Line_33 $$ PsiElement newElement[ CD ]
Line_24 $$ final RangeMarker toDelete = insertTemporary(newEndOffset, document, " ")-->Line_64 $$ if (toDelete.isValid()) [ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_53 $$ if (!staticImport && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference((PsiReference) newElement)) && !PsiUtil.isInnerClass(psiClass)) [ FD ]
Line_26 $$ PsiElement element = file.findElementAt(startOffset)-->Line_28 $$ PsiElement parent = element.getParent()[ FD ]
Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) -->Line_45 $$ if (newElement != null) [ CD ]
Line_4 $$ PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_42 $$ documentManager.commitDocument(document)[ FD ]
Line_33 $$ PsiElement newElement-->Line_57 $$ newEndOffset = newElement.getTextRange().getStartOffset() + qName.length()[ FD ]
Line_54 $$ final String qName = psiClass.getQualifiedName()-->Line_57 $$ newEndOffset = newElement.getTextRange().getStartOffset() + qName.length()[ FD ]
Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) -->Line_41 $$ documentManager.doPostponedOperationsAndUnblockDocument(document)[ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_26 $$ PsiElement element = file.findElementAt(startOffset)[ CD ]
Line_48 $$ PsiReferenceParameterList parameterList = ((PsiJavaCodeReferenceElement) newElement).getParameterList()-->Line_49 $$ if (parameterList != null) [ FD ]
Line_55 $$ if (qName != null) -->Line_57 $$ newEndOffset = newElement.getTextRange().getStartOffset() + qName.length()[ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_22 $$ document.replaceString(startOffset, endOffset, name)[ FD ]
Line_53 $$ if (!staticImport && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference((PsiReference) newElement)) && !PsiUtil.isInnerClass(psiClass)) -->Line_55 $$ if (qName != null) [ CD ]
Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)-->Line_46 $$ newEndOffset = newElement.getTextRange().getEndOffset()[ FD ]
Line_4 $$ PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_25 $$ documentManager.commitAllDocuments()[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)[ FD ]
Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)-->Line_40 $$ final RangeMarker rangeMarker = document.createRangeMarker(newElement.getTextRange())[ FD ]
Line_49 $$ if (parameterList != null) -->Line_50 $$ newEndOffset = parameterList.getTextRange().getStartOffset()[ CD ]
Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())-->Line_40 $$ final RangeMarker rangeMarker = document.createRangeMarker(newElement.getTextRange())[ FD ]
Line_33 $$ PsiElement newElement-->Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)[ FD ]
Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)-->Line_46 $$ newEndOffset = newElement.getTextRange().getEndOffset()[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_4 $$ PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ CD ]
Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)-->Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)[ FD ]
Line_29 $$ if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement) parent).isQualified() && !(parent.getParent() instanceof PsiPackageStatement)) -->Line_30 $$ PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement) parent[ CD ]
Line_48 $$ PsiReferenceParameterList parameterList = ((PsiJavaCodeReferenceElement) newElement).getParameterList()-->Line_50 $$ newEndOffset = parameterList.getTextRange().getStartOffset()[ FD ]
Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())-->Line_41 $$ documentManager.doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_22 $$ document.replaceString(startOffset, endOffset, name)[ CD ]
Line_23 $$ int newEndOffset = startOffset + name.length()-->Line_50 $$ newEndOffset = parameterList.getTextRange().getStartOffset()[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_9 $$ if (reference != null) [ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())[ FD ]
Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)-->Line_45 $$ if (newElement != null) [ FD ]
Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())-->Line_24 $$ final RangeMarker toDelete = insertTemporary(newEndOffset, document, " ")[ FD ]
Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)-->Line_57 $$ newEndOffset = newElement.getTextRange().getStartOffset() + qName.length()[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) [ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_5 $$ documentManager.commitAllDocuments()[ CD ]
Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) -->Line_44 $$ rangeMarker.dispose()[ CD ]
Line_9 $$ if (reference != null) -->Line_10 $$ final PsiElement resolved = reference.resolve()[ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_24 $$ final RangeMarker toDelete = insertTemporary(newEndOffset, document, " ")[ CD ]
Line_8 $$ final PsiReference reference = file.findReferenceAt(startOffset)-->Line_9 $$ if (reference != null) [ FD ]
Line_29 $$ if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement) parent).isQualified() && !(parent.getParent() instanceof PsiPackageStatement)) -->Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) [ CD ]
Line_4 $$ PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_41 $$ documentManager.doPostponedOperationsAndUnblockDocument(document)[ FD ]
Line_33 $$ PsiElement newElement-->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ FD ]
Line_64 $$ if (toDelete.isValid()) -->Line_65 $$ document.deleteString(toDelete.getStartOffset(), toDelete.getEndOffset())[ CD ]
Line_40 $$ final RangeMarker rangeMarker = document.createRangeMarker(newElement.getTextRange())-->Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)[ FD ]
Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)-->Line_45 $$ if (newElement != null) [ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())[ CD ]
Line_17 $$ String name = psiClass.getName()-->Line_22 $$ document.replaceString(startOffset, endOffset, name)[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_64 $$ if (toDelete.isValid()) [ CD ]
Line_27 $$ if (element instanceof PsiIdentifier) -->Line_29 $$ if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement) parent).isQualified() && !(parent.getParent() instanceof PsiPackageStatement)) [ CD ]
Line_8 $$ final PsiReference reference = file.findReferenceAt(startOffset)-->Line_10 $$ final PsiElement resolved = reference.resolve()[ FD ]
Line_55 $$ if (qName != null) -->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ CD ]
Line_23 $$ int newEndOffset = startOffset + name.length()-->Line_57 $$ newEndOffset = newElement.getTextRange().getStartOffset() + qName.length()[ FD ]
Line_45 $$ if (newElement != null) -->Line_53 $$ if (!staticImport && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference((PsiReference) newElement)) && !PsiUtil.isInnerClass(psiClass)) [ CD ]
Line_40 $$ final RangeMarker rangeMarker = document.createRangeMarker(newElement.getTextRange())-->Line_44 $$ rangeMarker.dispose()[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_6 $$ final PsiManager manager = file.getManager()[ FD ]
Line_10 $$ final PsiElement resolved = reference.resolve()-->Line_11 $$ if (resolved instanceof PsiClass) [ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_17 $$ String name = psiClass.getName()[ CD ]
Line_33 $$ PsiElement newElement-->Line_45 $$ if (newElement != null) [ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_23 $$ int newEndOffset = startOffset + name.length()[ CD ]
Line_45 $$ if (newElement != null) -->Line_47 $$ if (!(newElement instanceof PsiReferenceExpression)) [ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_3 $$ final Project project = file.getProject()[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_12 $$ if (((PsiClass) resolved).getQualifiedName() == null || manager.areElementsEquivalent(psiClass, resolved)) [ FD ]
Line_33 $$ PsiElement newElement-->Line_46 $$ newEndOffset = newElement.getTextRange().getEndOffset()[ FD ]
Line_3 $$ final Project project = file.getProject()-->Line_4 $$ PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)[ FD ]
Line_26 $$ PsiElement element = file.findElementAt(startOffset)-->Line_27 $$ if (element instanceof PsiIdentifier) [ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_27 $$ if (element instanceof PsiIdentifier) [ CD ]
Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) -->Line_42 $$ documentManager.commitDocument(document)[ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_25 $$ documentManager.commitAllDocuments()[ CD ]
Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)-->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_18 $$ if (name == null) [ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_17 $$ String name = psiClass.getName()[ FD ]
Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())-->Line_22 $$ document.replaceString(startOffset, endOffset, name)[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_54 $$ final String qName = psiClass.getQualifiedName()[ FD ]
Line_50 $$ newEndOffset = parameterList.getTextRange().getStartOffset()-->Line_57 $$ newEndOffset = newElement.getTextRange().getStartOffset() + qName.length()[ FD ]
Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())-->Line_42 $$ documentManager.commitDocument(document)[ FD ]
Line_24 $$ final RangeMarker toDelete = insertTemporary(newEndOffset, document, " ")-->Line_65 $$ document.deleteString(toDelete.getStartOffset(), toDelete.getEndOffset())[ FD ]
Line_46 $$ newEndOffset = newElement.getTextRange().getEndOffset()-->Line_50 $$ newEndOffset = parameterList.getTextRange().getStartOffset()[ FD ]
Line_27 $$ if (element instanceof PsiIdentifier) -->Line_28 $$ PsiElement parent = element.getParent()[ CD ]
Line_54 $$ final String qName = psiClass.getQualifiedName()-->Line_55 $$ if (qName != null) [ FD ]
Line_23 $$ int newEndOffset = startOffset + name.length()-->Line_24 $$ final RangeMarker toDelete = insertTemporary(newEndOffset, document, " ")[ FD ]
Line_4 $$ PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project)-->Line_5 $$ documentManager.commitAllDocuments()[ FD ]
Line_28 $$ PsiElement parent = element.getParent()-->Line_29 $$ if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement) parent).isQualified() && !(parent.getParent() instanceof PsiPackageStatement)) [ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_8 $$ final PsiReference reference = file.findReferenceAt(startOffset)[ CD ]
Line_46 $$ newEndOffset = newElement.getTextRange().getEndOffset()-->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ FD ]
Line_17 $$ String name = psiClass.getName()-->Line_23 $$ int newEndOffset = startOffset + name.length()[ FD ]
Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) -->Line_40 $$ final RangeMarker rangeMarker = document.createRangeMarker(newElement.getTextRange())[ CD ]
Line_47 $$ if (!(newElement instanceof PsiReferenceExpression)) -->Line_49 $$ if (parameterList != null) [ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_3 $$ final Project project = file.getProject()[ CD ]
Line_33 $$ PsiElement newElement-->Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)[ FD ]
Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())-->Line_65 $$ document.deleteString(toDelete.getStartOffset(), toDelete.getEndOffset())[ FD ]
Line_9 $$ if (reference != null) -->Line_11 $$ if (resolved instanceof PsiClass) [ CD ]
Line_18 $$ if (name == null) -->Line_19 $$ return endOffset[ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_26 $$ PsiElement element = file.findElementAt(startOffset)[ FD ]
Line_7 $$ final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile())-->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ FD ]
Line_33 $$ PsiElement newElement-->Line_40 $$ final RangeMarker rangeMarker = document.createRangeMarker(newElement.getTextRange())[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_8 $$ final PsiReference reference = file.findReferenceAt(startOffset)[ FD ]
Line_10 $$ final PsiElement resolved = reference.resolve()-->Line_12 $$ if (((PsiClass) resolved).getQualifiedName() == null || manager.areElementsEquivalent(psiClass, resolved)) [ FD ]
Line_12 $$ if (((PsiClass) resolved).getQualifiedName() == null || manager.areElementsEquivalent(psiClass, resolved)) -->Line_13 $$ return endOffset[ CD ]
Line_6 $$ final PsiManager manager = file.getManager()-->Line_12 $$ if (((PsiClass) resolved).getQualifiedName() == null || manager.areElementsEquivalent(psiClass, resolved)) [ FD ]
Line_45 $$ if (newElement != null) -->Line_46 $$ newEndOffset = newElement.getTextRange().getEndOffset()[ CD ]
Line_11 $$ if (resolved instanceof PsiClass) -->Line_12 $$ if (((PsiClass) resolved).getQualifiedName() == null || manager.areElementsEquivalent(psiClass, resolved)) [ CD ]
Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)-->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ FD ]
Line_30 $$ PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement) parent-->Line_35 $$ newElement = staticImport ? ((PsiImportStaticReferenceElement) ref).bindToTargetClass(psiClass) : ref.bindToElement(psiClass)[ FD ]
Line_32 $$ final boolean staticImport = ref instanceof PsiImportStaticReferenceElement-->Line_53 $$ if (!staticImport && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference((PsiReference) newElement)) && !PsiUtil.isInnerClass(psiClass)) [ FD ]
Line_23 $$ int newEndOffset = startOffset + name.length()-->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ FD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_67 $$ return newEndOffset[ CD ]
Line_2 $$ public static int insertClassReference(PsiClass psiClass, PsiFile file, int startOffset, int endOffset) -->Line_6 $$ final PsiManager manager = file.getManager()[ CD ]
Line_46 $$ newEndOffset = newElement.getTextRange().getEndOffset()-->Line_57 $$ newEndOffset = newElement.getTextRange().getStartOffset() + qName.length()[ FD ]
Line_47 $$ if (!(newElement instanceof PsiReferenceExpression)) -->Line_48 $$ PsiReferenceParameterList parameterList = ((PsiJavaCodeReferenceElement) newElement).getParameterList()[ CD ]
Line_54 $$ final String qName = psiClass.getQualifiedName()-->Line_56 $$ document.replaceString(newElement.getTextRange().getStartOffset(), newEndOffset, qName)[ FD ]
Line_53 $$ if (!staticImport && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference((PsiReference) newElement)) && !PsiUtil.isInnerClass(psiClass)) -->Line_54 $$ final String qName = psiClass.getQualifiedName()[ CD ]
Line_31 $$ if (psiClass.isValid() && !psiClass.getManager().areElementsEquivalent(psiClass, resolveReference(ref))) -->Line_43 $$ newElement = CodeInsightUtilCore.findElementInRange(file, rangeMarker.getStartOffset(), rangeMarker.getEndOffset(), PsiJavaCodeReferenceElement.class, JavaLanguage.INSTANCE)[ CD ]
