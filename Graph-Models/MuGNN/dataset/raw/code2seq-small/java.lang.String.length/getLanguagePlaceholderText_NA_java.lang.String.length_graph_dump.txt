Line_8 $$ if (stringLiteralExpression.isDocString()) -->Line_14 $$ return "\"\"\"...\"\"\""[ CD ]
Line_6 $$ if (node.getElementType() == PyElementTypes.STRING_LITERAL_EXPRESSION) -->Line_8 $$ if (stringLiteralExpression.isDocString()) [ CD ]
Line_8 $$ if (stringLiteralExpression.isDocString()) -->Line_16 $$ return getLanguagePlaceholderForString(stringLiteralExpression)[ CD ]
Line_3 $$ if (PyFileImpl.isImport(node, false)) -->Line_4 $$ return "import ..."[ CD ]
Line_9 $$ final String stringValue = stringLiteralExpression.getStringValue().trim()-->Line_10 $$ final String[] lines = LineTokenizer.tokenize(stringValue, true)[ FD ]
Line_2 $$ protected String getLanguagePlaceholderText(@NotNull ASTNode node, @NotNull TextRange range) -->Line_6 $$ if (node.getElementType() == PyElementTypes.STRING_LITERAL_EXPRESSION) [ CD ]
Line_8 $$ if (stringLiteralExpression.isDocString()) -->Line_9 $$ final String stringValue = stringLiteralExpression.getStringValue().trim()[ CD ]
Line_6 $$ if (node.getElementType() == PyElementTypes.STRING_LITERAL_EXPRESSION) -->Line_7 $$ PyStringLiteralExpression stringLiteralExpression = (PyStringLiteralExpression) node.getPsi()[ CD ]
Line_11 $$ if (lines.length > 2 && lines[1].trim().length() == 0) -->Line_12 $$ return "\"\"\"" + lines[0].trim() + "...\"\"\""[ CD ]
Line_7 $$ PyStringLiteralExpression stringLiteralExpression = (PyStringLiteralExpression) node.getPsi()-->Line_9 $$ final String stringValue = stringLiteralExpression.getStringValue().trim()[ FD ]
Line_8 $$ if (stringLiteralExpression.isDocString()) -->Line_10 $$ final String[] lines = LineTokenizer.tokenize(stringValue, true)[ CD ]
Line_2 $$ protected String getLanguagePlaceholderText(@NotNull ASTNode node, @NotNull TextRange range) -->Line_19 $$ return "..."[ CD ]
Line_2 $$ protected String getLanguagePlaceholderText(@NotNull ASTNode node, @NotNull TextRange range) -->Line_3 $$ if (PyFileImpl.isImport(node, false)) [ FD ]
Line_8 $$ if (stringLiteralExpression.isDocString()) -->Line_11 $$ if (lines.length > 2 && lines[1].trim().length() == 0) [ CD ]
Line_2 $$ protected String getLanguagePlaceholderText(@NotNull ASTNode node, @NotNull TextRange range) -->Line_7 $$ PyStringLiteralExpression stringLiteralExpression = (PyStringLiteralExpression) node.getPsi()[ FD ]
Line_7 $$ PyStringLiteralExpression stringLiteralExpression = (PyStringLiteralExpression) node.getPsi()-->Line_8 $$ if (stringLiteralExpression.isDocString()) [ FD ]
Line_7 $$ PyStringLiteralExpression stringLiteralExpression = (PyStringLiteralExpression) node.getPsi()-->Line_16 $$ return getLanguagePlaceholderForString(stringLiteralExpression)[ FD ]
Line_2 $$ protected String getLanguagePlaceholderText(@NotNull ASTNode node, @NotNull TextRange range) -->Line_6 $$ if (node.getElementType() == PyElementTypes.STRING_LITERAL_EXPRESSION) [ FD ]
Line_2 $$ protected String getLanguagePlaceholderText(@NotNull ASTNode node, @NotNull TextRange range) -->Line_3 $$ if (PyFileImpl.isImport(node, false)) [ CD ]
