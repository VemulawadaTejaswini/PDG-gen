Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_6 $$ String pushedName = null[ CD ]
Line_29 $$ if (statement.isPushed() && value.startsWith(pushedName)) -->Line_32 $$ parameterMap.put(flag.getName(), propertyValue)[ CD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_3 $$ if (name == null) [ FD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_11 $$ name = name.concat(StringPool.PERIOD)[ CD ]
Line_25 $$ if (value.startsWith(name)) -->Line_26 $$ Map<String, Object> parameterMap = statement.getParameterMap()[ CD ]
Line_3 $$ if (name == null) -->Line_4 $$ return[ CD ]
Line_27 $$ Object propertyValue = BeanUtil.getDeclaredProperty(object, value.substring(name.length()))-->Line_28 $$ parameterMap.put(flag.getName(), propertyValue)[ FD ]
Line_20 $$ for (Flag flag : flags) -->Line_32 $$ parameterMap.put(flag.getName(), propertyValue)[ FD ]
Line_12 $$ for (Statement statement : _statements) -->Line_13 $$ if (statement.isExecuted()) [ FD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_9 $$ pushedName = name.substring(0, index + 1)[ FD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_8 $$ if (index != -1) [ CD ]
Line_9 $$ pushedName = name.substring(0, index + 1)-->Line_29 $$ if (statement.isPushed() && value.startsWith(pushedName)) [ FD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_27 $$ Object propertyValue = BeanUtil.getDeclaredProperty(object, value.substring(name.length()))[ FD ]
Line_16 $$ List<Flag> flags = statement.getFlags()-->Line_17 $$ if (flags == null) [ FD ]
Line_26 $$ Map<String, Object> parameterMap = statement.getParameterMap()-->Line_28 $$ parameterMap.put(flag.getName(), propertyValue)[ FD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_7 $$ int index = name.indexOf(CharPool.PERIOD)[ FD ]
Line_21 $$ String value = flag.getValue()-->Line_27 $$ Object propertyValue = BeanUtil.getDeclaredProperty(object, value.substring(name.length()))[ FD ]
Line_12 $$ for (Statement statement : _statements) -->Line_16 $$ List<Flag> flags = statement.getFlags()[ FD ]
Line_12 $$ for (Statement statement : _statements) -->Line_29 $$ if (statement.isPushed() && value.startsWith(pushedName)) [ FD ]
Line_9 $$ pushedName = name.substring(0, index + 1)-->Line_31 $$ Object propertyValue = BeanUtil.getDeclaredProperty(statement._pushTarget, value.substring(pushedName.length()))[ FD ]
Line_26 $$ Map<String, Object> parameterMap = statement.getParameterMap()-->Line_32 $$ parameterMap.put(flag.getName(), propertyValue)[ FD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_7 $$ int index = name.indexOf(CharPool.PERIOD)[ CD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_11 $$ name = name.concat(StringPool.PERIOD)[ FD ]
Line_21 $$ String value = flag.getValue()-->Line_31 $$ Object propertyValue = BeanUtil.getDeclaredProperty(statement._pushTarget, value.substring(pushedName.length()))[ FD ]
Line_27 $$ Object propertyValue = BeanUtil.getDeclaredProperty(object, value.substring(name.length()))-->Line_32 $$ parameterMap.put(flag.getName(), propertyValue)[ FD ]
Line_25 $$ if (value.startsWith(name)) -->Line_28 $$ parameterMap.put(flag.getName(), propertyValue)[ CD ]
Line_11 $$ name = name.concat(StringPool.PERIOD)-->Line_27 $$ Object propertyValue = BeanUtil.getDeclaredProperty(object, value.substring(name.length()))[ FD ]
Line_29 $$ if (statement.isPushed() && value.startsWith(pushedName)) -->Line_31 $$ Object propertyValue = BeanUtil.getDeclaredProperty(statement._pushTarget, value.substring(pushedName.length()))[ CD ]
Line_12 $$ for (Statement statement : _statements) -->Line_26 $$ Map<String, Object> parameterMap = statement.getParameterMap()[ FD ]
Line_6 $$ String pushedName = null-->Line_31 $$ Object propertyValue = BeanUtil.getDeclaredProperty(statement._pushTarget, value.substring(pushedName.length()))[ FD ]
Line_29 $$ if (statement.isPushed() && value.startsWith(pushedName)) -->Line_30 $$ Map<String, Object> parameterMap = statement.getParameterMap()[ CD ]
Line_25 $$ if (value.startsWith(name)) -->Line_27 $$ Object propertyValue = BeanUtil.getDeclaredProperty(object, value.substring(name.length()))[ CD ]
Line_20 $$ for (Flag flag : flags) -->Line_21 $$ String value = flag.getValue()[ FD ]
Line_25 $$ if (value.startsWith(name)) -->Line_29 $$ if (statement.isPushed() && value.startsWith(pushedName)) [ CD ]
Line_21 $$ String value = flag.getValue()-->Line_29 $$ if (statement.isPushed() && value.startsWith(pushedName)) [ FD ]
Line_7 $$ int index = name.indexOf(CharPool.PERIOD)-->Line_8 $$ if (index != -1) [ FD ]
Line_11 $$ name = name.concat(StringPool.PERIOD)-->Line_25 $$ if (value.startsWith(name)) [ FD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_25 $$ if (value.startsWith(name)) [ FD ]
Line_6 $$ String pushedName = null-->Line_29 $$ if (statement.isPushed() && value.startsWith(pushedName)) [ FD ]
Line_8 $$ if (index != -1) -->Line_9 $$ pushedName = name.substring(0, index + 1)[ CD ]
Line_20 $$ for (Flag flag : flags) -->Line_28 $$ parameterMap.put(flag.getName(), propertyValue)[ FD ]
Line_21 $$ String value = flag.getValue()-->Line_22 $$ if (value == null) [ FD ]
Line_12 $$ for (Statement statement : _statements) -->Line_30 $$ Map<String, Object> parameterMap = statement.getParameterMap()[ FD ]
Line_2 $$ private void _populateFlagsObject(String name, Object object) -->Line_3 $$ if (name == null) [ CD ]
Line_21 $$ String value = flag.getValue()-->Line_25 $$ if (value.startsWith(name)) [ FD ]
Line_6 $$ String pushedName = null-->Line_9 $$ pushedName = name.substring(0, index + 1)[ FD ]
