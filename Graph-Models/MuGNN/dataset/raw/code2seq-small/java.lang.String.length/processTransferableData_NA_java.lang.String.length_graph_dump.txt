Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_26 $$ if (fromIndent < 0)[ CD ]
Line_42 $$ if (isNotApplicable(initialDocument, offset))-->Line_43 $$ return[ CD ]
Line_7 $$ if (values.get(0).getOffset() == caretOffset)-->Line_8 $$ return[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_22 $$ String pastedText = document.getText(TextRange.create(bounds))[ FD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_23 $$ int startLine = document.getLineNumber(bounds.getStartOffset())[ FD ]
Line_53 $$ if (!StringUtil.startsWithWhitespace(pastedText) && !StringUtil.endsWithLineBreak(pastedText) && !(StringUtil.splitByLines(pastedText).length > 1))-->Line_54 $$ return[ CD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_55 $$ if (pastedText.endsWith("\n"))[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_3 $$ if (!CodeInsightSettings.getInstance().INDENT_TO_CARET_ON_PASTE) [ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_32 $$ int lineNumber = initialDocument.getTextLength() > caretOffset ? initialDocument.getLineNumber(caretOffset) : initialDocument.getLineCount() - 1[ FD ]
Line_17 $$ CharFilter NOT_INDENT_FILTER = new CharFilter() -->Line_36 $$ toIndent = StringUtil.findFirst(toString, NOT_INDENT_FILTER)[ FD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_53 $$ if (!StringUtil.startsWithWhitespace(pastedText) && !StringUtil.endsWithLineBreak(pastedText) && !(StringUtil.splitByLines(pastedText).length > 1))[ CD ]
Line_17 $$ CharFilter NOT_INDENT_FILTER = new CharFilter() -->Line_19 $$ return useTabs ? ch != '\t' : ch != ' '[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_52 $$ indent *= CodeStyleSettingsManager.getSettings(project).getTabSize(psiFile.getFileType())[ FD ]
Line_34 $$ if (bounds.getStartOffset() == offset) -->Line_42 $$ if (isNotApplicable(initialDocument, offset))[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_10 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)[ FD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_58 $$ EditorActionUtil.indentLine(project, editor, i, indent)[ FD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_63 $$ return caretOffset < initialDocument.getTextLength() && !StringUtil.isEmptyOrSpaces(initialDocument.getText(TextRange.create(offset, caretOffset)))[ FD ]
Line_57 $$ for (int i = startLine; i <= endLine; i++) -->Line_58 $$ EditorActionUtil.indentLine(project, editor, i, indent)[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_60 $$ indented.set(Boolean.TRUE)[ FD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_25 $$ int fromIndent = StringUtil.findFirst(pastedText, NOT_INDENT_FILTER)[ CD ]
Line_17 $$ CharFilter NOT_INDENT_FILTER = new CharFilter() -->Line_25 $$ int fromIndent = StringUtil.findFirst(pastedText, NOT_INDENT_FILTER)[ FD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_34 $$ if (bounds.getStartOffset() == offset) [ FD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_63 $$ return caretOffset < initialDocument.getTextLength() && !StringUtil.isEmptyOrSpaces(initialDocument.getText(TextRange.create(offset, caretOffset)))[ FD ]
Line_10 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)-->Line_11 $$ if (psiFile == null || !acceptFileType(psiFile.getFileType())) [ FD ]
Line_3 $$ if (!CodeInsightSettings.getInstance().INDENT_TO_CARET_ON_PASTE) -->Line_4 $$ return[ CD ]
Line_57 $$ for (int i = startLine; i <= endLine; i++) -->Line_58 $$ EditorActionUtil.indentLine(project, editor, i, indent)[ FD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_16 $$ final boolean useTabs = CodeStyleSettingsManager.getSettings(project).useTabCharacter(psiFile.getFileType())[ CD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_63 $$ return caretOffset < initialDocument.getTextLength() && !StringUtil.isEmptyOrSpaces(initialDocument.getText(TextRange.create(offset, caretOffset)))[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_7 $$ if (values.get(0).getOffset() == caretOffset)[ FD ]
Line_34 $$ if (bounds.getStartOffset() == offset) -->Line_35 $$ String toString = initialDocument.getText(TextRange.create(offset, initialDocument.getLineEndOffset(lineNumber)))[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_16 $$ final boolean useTabs = CodeStyleSettingsManager.getSettings(project).useTabCharacter(psiFile.getFileType())[ FD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_22 $$ String pastedText = document.getText(TextRange.create(bounds))[ CD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_28 $$ String initialText = document.getText(TextRange.create(0, bounds.getStartOffset())) + document.getText(TextRange.create(bounds.getEndOffset(), document.getTextLength()))[ FD ]
Line_42 $$ if (isNotApplicable(initialDocument, offset))-->Line_46 $$ toIndent = Math.abs(bounds.getStartOffset() - offset)[ CD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_24 $$ int endLine = document.getLineNumber(bounds.getEndOffset())[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_30 $$ if (initialText.length() > 0) [ CD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_60 $$ indented.set(Boolean.TRUE)[ CD ]
Line_34 $$ if (bounds.getStartOffset() == offset) -->Line_36 $$ toIndent = StringUtil.findFirst(toString, NOT_INDENT_FILTER)[ CD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_50 $$ if (useTabs)[ CD ]
Line_34 $$ if (bounds.getStartOffset() == offset) -->Line_37 $$ if (toIndent < 0 && StringUtil.isEmptyOrSpaces(toString)) [ CD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_24 $$ int endLine = document.getLineNumber(bounds.getEndOffset())[ FD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_6 $$ assert values.size() == 1[ FD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_23 $$ int startLine = document.getLineNumber(bounds.getStartOffset())[ CD ]
Line_10 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)-->Line_16 $$ final boolean useTabs = CodeStyleSettingsManager.getSettings(project).useTabCharacter(psiFile.getFileType())[ FD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_57 $$ for (int i = startLine; i <= endLine; i++) [ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_23 $$ int startLine = document.getLineNumber(bounds.getStartOffset())[ FD ]
Line_30 $$ if (initialText.length() > 0) -->Line_33 $$ final int offset = getLineStartSafeOffset(initialDocument, lineNumber)[ CD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_22 $$ String pastedText = document.getText(TextRange.create(bounds))[ FD ]
Line_14 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_17 $$ CharFilter NOT_INDENT_FILTER = new CharFilter() [ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_9 $$ final Document document = editor.getDocument()[ FD ]
Line_37 $$ if (toIndent < 0 && StringUtil.isEmptyOrSpaces(toString)) -->Line_38 $$ toIndent = toString.length()[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_11 $$ if (psiFile == null || !acceptFileType(psiFile.getFileType())) [ CD ]
Line_50 $$ if (useTabs)-->Line_52 $$ indent *= CodeStyleSettingsManager.getSettings(project).getTabSize(psiFile.getFileType())[ CD ]
Line_30 $$ if (initialText.length() > 0) -->Line_34 $$ if (bounds.getStartOffset() == offset) [ CD ]
Line_10 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)-->Line_52 $$ indent *= CodeStyleSettingsManager.getSettings(project).getTabSize(psiFile.getFileType())[ FD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_24 $$ int endLine = document.getLineNumber(bounds.getEndOffset())[ FD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_46 $$ toIndent = Math.abs(bounds.getStartOffset() - offset)[ FD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_10 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_28 $$ String initialText = document.getText(TextRange.create(0, bounds.getStartOffset())) + document.getText(TextRange.create(bounds.getEndOffset(), document.getTextLength()))[ FD ]
Line_37 $$ if (toIndent < 0 && StringUtil.isEmptyOrSpaces(toString)) -->Line_39 $$ if ((toIndent < 0 || toString.startsWith("\n")) && initialText.length() >= caretOffset) [ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_9 $$ final Document document = editor.getDocument()[ CD ]
Line_2 $$ public void processTransferableData(final Project project, final Editor editor, final RangeMarker bounds, final int caretOffset, final Ref<Boolean> indented, final List<IndentTransferableData> values) -->Line_7 $$ if (values.get(0).getOffset() == caretOffset)[ CD ]
Line_11 $$ if (psiFile == null || !acceptFileType(psiFile.getFileType())) -->Line_12 $$ return[ CD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_10 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)[ FD ]
