Line_38 $$ if (initialText.length() > 0) -->Line_42 $$ if (bounds.getStartOffset() == offset) [ CD ]
Line_50 $$ if (isNotApplicable(initialDocument, offset))-->Line_51 $$ return[ CD ]
Line_45 $$ if (toIndent < 0 && StringUtil.isEmptyOrSpaces(toString)) -->Line_46 $$ toIndent = toString.length()[ CD ]
Line_11 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)-->Line_20 $$ final boolean useTabs = CodeStyleSettingsManager.getSettings(project).useTabCharacter(psiFile.getFileType())[ FD ]
Line_11 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)-->Line_62 $$ indent *= CodeStyleSettingsManager.getSettings(project).getTabSize(psiFile.getFileType())[ FD ]
Line_12 $$ if (psiFile == null || !acceptFileType(psiFile.getFileType())) -->Line_13 $$ return[ CD ]
Line_68 $$ for (int i = startLine; i <= endLine; i++) -->Line_69 $$ EditorActionUtil.indentLine(project, editor, i, indent)[ FD ]
Line_42 $$ if (bounds.getStartOffset() == offset) -->Line_50 $$ if (isNotApplicable(initialDocument, offset))[ CD ]
Line_45 $$ if (toIndent < 0 && StringUtil.isEmptyOrSpaces(toString)) -->Line_47 $$ if ((toIndent < 0 || toString.startsWith("\n")) && initialText.length() >= caretOffset) [ CD ]
Line_42 $$ if (bounds.getStartOffset() == offset) -->Line_44 $$ toIndent = StringUtil.findFirst(toString, NOT_INDENT_FILTER)[ CD ]
Line_21 $$ CharFilter NOT_INDENT_FILTER = new CharFilter() -->Line_25 $$ return useTabs ? ch != '\t' : ch != ' '[ CD ]
Line_50 $$ if (isNotApplicable(initialDocument, offset))-->Line_55 $$ toIndent = Math.abs(bounds.getStartOffset() - offset)[ CD ]
Line_10 $$ final Document document = editor.getDocument()-->Line_29 $$ int startLine = document.getLineNumber(bounds.getStartOffset())[ FD ]
Line_10 $$ final Document document = editor.getDocument()-->Line_11 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)[ FD ]
Line_4 $$ if (!CodeInsightSettings.getInstance().INDENT_TO_CARET_ON_PASTE) -->Line_5 $$ return[ CD ]
Line_68 $$ for (int i = startLine; i <= endLine; i++) -->Line_69 $$ EditorActionUtil.indentLine(project, editor, i, indent)[ CD ]
Line_11 $$ final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(document)-->Line_12 $$ if (psiFile == null || !acceptFileType(psiFile.getFileType())) [ FD ]
Line_10 $$ final Document document = editor.getDocument()-->Line_28 $$ String pastedText = document.getText(TextRange.create(bounds))[ FD ]
Line_10 $$ final Document document = editor.getDocument()-->Line_30 $$ int endLine = document.getLineNumber(bounds.getEndOffset())[ FD ]
Line_38 $$ if (initialText.length() > 0) -->Line_41 $$ final int offset = getLineStartSafeOffset(initialDocument, lineNumber)[ CD ]
Line_8 $$ if (values.get(0).getOffset() == caretOffset)-->Line_9 $$ return[ CD ]
Line_42 $$ if (bounds.getStartOffset() == offset) -->Line_45 $$ if (toIndent < 0 && StringUtil.isEmptyOrSpaces(toString)) [ CD ]
Line_42 $$ if (bounds.getStartOffset() == offset) -->Line_43 $$ String toString = initialDocument.getText(TextRange.create(offset, initialDocument.getLineEndOffset(lineNumber)))[ CD ]
Line_60 $$ if (// indent is counted in tab units-->Line_62 $$ indent *= CodeStyleSettingsManager.getSettings(project).getTabSize(psiFile.getFileType())[ CD ]
Line_21 $$ CharFilter NOT_INDENT_FILTER = new CharFilter() -->Line_44 $$ toIndent = StringUtil.findFirst(toString, NOT_INDENT_FILTER)[ FD ]
