Line_5 $$ Set<TestLocationDescriptor> descriptors = new HashSet<TestLocationDescriptor>()-->Line_34 $$ if (moreRelevantPath(current, descriptors, psiClass)) [ FD ]
Line_34 $$ if (moreRelevantPath(current, descriptors, psiClass)) -->Line_35 $$ descriptors.clear()[ CD ]
Line_4 $$ GotoFileModel gotoModel = new GotoFileModel(psiClass.getProject())-->Line_6 $$ Collection<String> fileNames = getAllFileNames(test, gotoModel)[ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_20 $$ int i = filePath.indexOf(test.toLowerCase())[ FD ]
Line_5 $$ Set<TestLocationDescriptor> descriptors = new HashSet<TestLocationDescriptor>()-->Line_30 $$ if (descriptors.isEmpty() || (descriptors.iterator().next().dir.equals(current.dir) && !descriptors.contains(current))) [ FD ]
Line_3 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(psiClass.getProject()).getFileIndex()-->Line_16 $$ if (file == null || fileIndex.isInSource(file) && !fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.RESOURCES)) [ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_25 $$ current.populate(test, file)[ FD ]
Line_19 $$ final String filePath = PathUtil.getFileName(file.getPath()).toLowerCase()-->Line_20 $$ int i = filePath.indexOf(test.toLowerCase())[ FD ]
Line_24 $$ TestLocationDescriptor current = new TestLocationDescriptor()-->Line_34 $$ if (moreRelevantPath(current, descriptors, psiClass)) [ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_4 $$ GotoFileModel gotoModel = new GotoFileModel(psiClass.getProject())[ FD ]
Line_5 $$ Set<TestLocationDescriptor> descriptors = new HashSet<TestLocationDescriptor>()-->Line_36 $$ descriptors.add(current)[ FD ]
Line_24 $$ TestLocationDescriptor current = new TestLocationDescriptor()-->Line_30 $$ if (descriptors.isEmpty() || (descriptors.iterator().next().dir.equals(current.dir) && !descriptors.contains(current))) [ FD ]
Line_24 $$ TestLocationDescriptor current = new TestLocationDescriptor()-->Line_36 $$ descriptors.add(current)[ FD ]
Line_5 $$ Set<TestLocationDescriptor> descriptors = new HashSet<TestLocationDescriptor>()-->Line_31 $$ descriptors.add(current)[ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_43 $$ return new TestDataDescriptor(descriptors, test)[ CD ]
Line_7 $$ for (String name : fileNames) -->Line_10 $$ final Object[] elements = gotoModel.getElementsByName(name, false, name)[ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_34 $$ if (moreRelevantPath(current, descriptors, psiClass)) [ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_5 $$ Set<TestLocationDescriptor> descriptors = new HashSet<TestLocationDescriptor>()[ CD ]
Line_9 $$ boolean currentNameProcessed = false-->Line_29 $$ currentNameProcessed = true[ FD ]
Line_19 $$ final String filePath = PathUtil.getFileName(file.getPath()).toLowerCase()-->Line_21 $$ if (i < 0 || (i + test.length() < filePath.length()) && Character.isDigit(filePath.charAt(i + test.length()))) [ FD ]
Line_15 $$ final VirtualFile file = ((PsiFile) element).getVirtualFile()-->Line_16 $$ if (file == null || fileIndex.isInSource(file) && !fileIndex.isUnderSourceRootOfType(file, JavaModuleSourceRootTypes.RESOURCES)) [ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_21 $$ if (i < 0 || (i + test.length() < filePath.length()) && Character.isDigit(filePath.charAt(i + test.length()))) [ FD ]
Line_15 $$ final VirtualFile file = ((PsiFile) element).getVirtualFile()-->Line_19 $$ final String filePath = PathUtil.getFileName(file.getPath()).toLowerCase()[ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_4 $$ GotoFileModel gotoModel = new GotoFileModel(psiClass.getProject())[ CD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_6 $$ Collection<String> fileNames = getAllFileNames(test, gotoModel)[ FD ]
Line_30 $$ if (descriptors.isEmpty() || (descriptors.iterator().next().dir.equals(current.dir) && !descriptors.contains(current))) -->Line_31 $$ descriptors.add(current)[ CD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_6 $$ Collection<String> fileNames = getAllFileNames(test, gotoModel)[ CD ]
Line_4 $$ GotoFileModel gotoModel = new GotoFileModel(psiClass.getProject())-->Line_10 $$ final Object[] elements = gotoModel.getElementsByName(name, false, name)[ FD ]
Line_24 $$ TestLocationDescriptor current = new TestLocationDescriptor()-->Line_26 $$ if (!current.isComplete()) [ FD ]
Line_24 $$ TestLocationDescriptor current = new TestLocationDescriptor()-->Line_25 $$ current.populate(test, file)[ FD ]
Line_5 $$ Set<TestLocationDescriptor> descriptors = new HashSet<TestLocationDescriptor>()-->Line_35 $$ descriptors.clear()[ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_3 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(psiClass.getProject()).getFileIndex()[ CD ]
Line_24 $$ TestLocationDescriptor current = new TestLocationDescriptor()-->Line_31 $$ descriptors.add(current)[ FD ]
Line_15 $$ final VirtualFile file = ((PsiFile) element).getVirtualFile()-->Line_25 $$ current.populate(test, file)[ FD ]
Line_2 $$ private static TestDataDescriptor buildDescriptor(@NotNull String test, @NotNull PsiClass psiClass) -->Line_3 $$ ProjectFileIndex fileIndex = ProjectRootManager.getInstance(psiClass.getProject()).getFileIndex()[ FD ]
Line_34 $$ if (moreRelevantPath(current, descriptors, psiClass)) -->Line_36 $$ descriptors.add(current)[ CD ]
