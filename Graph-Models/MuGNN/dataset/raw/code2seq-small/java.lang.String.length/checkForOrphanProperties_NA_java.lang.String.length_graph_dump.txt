Line_3 $$ Class clazz-->Line_5 $$ clazz = classLoaderAccess.classForName(className)[ FD ]
Line_16 $$ String name = method.getName()-->Line_20 $$ properties.add(Introspector.decapitalize(name.substring("is".length())))[ FD ]
Line_2 $$ private void checkForOrphanProperties(Element tree) -->Line_3 $$ Class clazz[ CD ]
Line_9 $$ Element element = tree != null ? tree.element("attributes") : null-->Line_23 $$ for (Element subelement : (List<Element>) element.elements()) [ FD ]
Line_11 $$ Set<String> properties = new HashSet<String>()-->Line_25 $$ if (!properties.contains(propertyName)) [ FD ]
Line_16 $$ String name = method.getName()-->Line_19 $$ if (name.startsWith("is")) [ FD ]
Line_24 $$ String propertyName = subelement.attributeValue("name")-->Line_25 $$ if (!properties.contains(propertyName)) [ FD ]
Line_2 $$ private void checkForOrphanProperties(Element tree) -->Line_9 $$ Element element = tree != null ? tree.element("attributes") : null[ CD ]
Line_11 $$ Set<String> properties = new HashSet<String>()-->Line_13 $$ properties.add(field.getName())[ FD ]
Line_15 $$ for (Method method : clazz.getMethods()) -->Line_16 $$ String name = method.getName()[ FD ]
Line_16 $$ String name = method.getName()-->Line_18 $$ properties.add(Introspector.decapitalize(name.substring("get".length())))[ FD ]
Line_2 $$ private void checkForOrphanProperties(Element tree) -->Line_9 $$ Element element = tree != null ? tree.element("attributes") : null[ FD ]
Line_23 $$ for (Element subelement : (List<Element>) element.elements()) -->Line_24 $$ String propertyName = subelement.attributeValue("name")[ FD ]
Line_24 $$ String propertyName = subelement.attributeValue("name")-->Line_26 $$ LOG.propertyNotFound(StringHelper.qualify(className, propertyName))[ FD ]
Line_17 $$ if (name.startsWith("get")) -->Line_19 $$ if (name.startsWith("is")) [ CD ]
Line_5 $$ clazz = classLoaderAccess.classForName(className)-->Line_15 $$ for (Method method : clazz.getMethods()) [ FD ]
Line_3 $$ Class clazz-->Line_12 $$ for (Field field : clazz.getFields()) [ FD ]
Line_10 $$ if (element != null) -->Line_11 $$ Set<String> properties = new HashSet<String>()[ CD ]
Line_3 $$ Class clazz-->Line_15 $$ for (Method method : clazz.getMethods()) [ FD ]
Line_11 $$ Set<String> properties = new HashSet<String>()-->Line_20 $$ properties.add(Introspector.decapitalize(name.substring("is".length())))[ FD ]
Line_11 $$ Set<String> properties = new HashSet<String>()-->Line_18 $$ properties.add(Introspector.decapitalize(name.substring("get".length())))[ FD ]
Line_17 $$ if (name.startsWith("get")) -->Line_18 $$ properties.add(Introspector.decapitalize(name.substring("get".length())))[ CD ]
Line_2 $$ private void checkForOrphanProperties(Element tree) -->Line_10 $$ if (element != null) [ CD ]
Line_19 $$ if (name.startsWith("is")) -->Line_20 $$ properties.add(Introspector.decapitalize(name.substring("is".length())))[ CD ]
Line_16 $$ String name = method.getName()-->Line_17 $$ if (name.startsWith("get")) [ FD ]
Line_5 $$ clazz = classLoaderAccess.classForName(className)-->Line_12 $$ for (Field field : clazz.getFields()) [ FD ]
Line_9 $$ Element element = tree != null ? tree.element("attributes") : null-->Line_10 $$ if (element != null) [ FD ]
Line_25 $$ if (!properties.contains(propertyName)) -->Line_26 $$ LOG.propertyNotFound(StringHelper.qualify(className, propertyName))[ CD ]
Line_12 $$ for (Field field : clazz.getFields()) -->Line_13 $$ properties.add(field.getName())[ FD ]
