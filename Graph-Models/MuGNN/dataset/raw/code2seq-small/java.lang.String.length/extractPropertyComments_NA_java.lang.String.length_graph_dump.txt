Line_4 $$ StringBundler sb = new StringBundler()-->Line_35 $$ sb.append(StringPool.NEW_LINE)[ FD ]
Line_7 $$ line = StringUtil.trimTrailing(line)-->Line_32 $$ line = StringUtil.replaceFirst(line, "#", StringPool.BLANK)[ FD ]
Line_6 $$ for (String line : lines) -->Line_11 $$ String trimmedLine = line.trim()[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_39 $$ sb = new StringBundler()[ FD ]
Line_32 $$ line = StringUtil.replaceFirst(line, "#", StringPool.BLANK)-->Line_33 $$ sb.append(line.trim())[ FD ]
Line_23 $$ if (previousLineIsPreformatted) -->Line_25 $$ sb = new StringBundler()[ CD ]
Line_7 $$ line = StringUtil.trimTrailing(line)-->Line_11 $$ String trimmedLine = line.trim()[ FD ]
Line_7 $$ line = StringUtil.trimTrailing(line)-->Line_8 $$ if (line.startsWith(DOUBLE_INDENT + "#")) [ FD ]
Line_6 $$ for (String line : lines) -->Line_32 $$ line = StringUtil.replaceFirst(line, "#", StringPool.BLANK)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_29 $$ if (sb.length() > 0) [ FD ]
Line_6 $$ for (String line : lines) -->Line_33 $$ sb.append(line.trim())[ FD ]
Line_17 $$ sb = new StringBundler()-->Line_33 $$ sb.append(line.trim())[ FD ]
Line_23 $$ if (previousLineIsPreformatted) -->Line_29 $$ if (sb.length() > 0) [ CD ]
Line_11 $$ String trimmedLine = line.trim()-->Line_26 $$ trimmedLine = StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK)[ FD ]
Line_17 $$ sb = new StringBundler()-->Line_39 $$ sb = new StringBundler()[ FD ]
Line_11 $$ String trimmedLine = line.trim()-->Line_12 $$ if (trimmedLine.startsWith("# " + INDENT)) [ FD ]
Line_13 $$ if (previousLineIsPreformatted) -->Line_16 $$ addPropertyComment(propertyComments, sb.toString())[ CD ]
Line_12 $$ if (trimmedLine.startsWith("# " + INDENT)) -->Line_21 $$ previousLineIsPreformatted = true[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_38 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_17 $$ sb = new StringBundler()-->Line_20 $$ sb.append(StringPool.NEW_LINE)[ FD ]
Line_17 $$ sb = new StringBundler()-->Line_24 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_21 $$ previousLineIsPreformatted = true-->Line_36 $$ previousLineIsPreformatted = false[ FD ]
Line_26 $$ trimmedLine = StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK)-->Line_37 $$ if (trimmedLine.startsWith("#") && (trimmedLine.length() < 2)) [ FD ]
Line_23 $$ if (previousLineIsPreformatted) -->Line_26 $$ trimmedLine = StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK)[ CD ]
Line_3 $$ List<PropertyComment> propertyComments = new ArrayList()-->Line_16 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_12 $$ if (trimmedLine.startsWith("# " + INDENT)) -->Line_13 $$ if (previousLineIsPreformatted) [ CD ]
Line_23 $$ if (previousLineIsPreformatted) -->Line_24 $$ addPropertyComment(propertyComments, sb.toString())[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_17 $$ sb = new StringBundler()[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_33 $$ sb.append(line.trim())[ FD ]
Line_17 $$ sb = new StringBundler()-->Line_27 $$ sb.append(trimmedLine.trim())[ FD ]
Line_11 $$ String trimmedLine = line.trim()-->Line_14 $$ sb.append(StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK))[ FD ]
Line_12 $$ if (trimmedLine.startsWith("# " + INDENT)) -->Line_20 $$ sb.append(StringPool.NEW_LINE)[ CD ]
Line_25 $$ sb = new StringBundler()-->Line_39 $$ sb = new StringBundler()[ FD ]
Line_5 $$ boolean previousLineIsPreformatted = false-->Line_36 $$ previousLineIsPreformatted = false[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_20 $$ sb.append(StringPool.NEW_LINE)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_16 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_11 $$ String trimmedLine = line.trim()-->Line_27 $$ sb.append(trimmedLine.trim())[ FD ]
Line_17 $$ sb = new StringBundler()-->Line_41 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_25 $$ sb = new StringBundler()-->Line_29 $$ if (sb.length() > 0) [ FD ]
Line_37 $$ if (trimmedLine.startsWith("#") && (trimmedLine.length() < 2)) -->Line_39 $$ sb = new StringBundler()[ CD ]
Line_17 $$ sb = new StringBundler()-->Line_25 $$ sb = new StringBundler()[ FD ]
Line_25 $$ sb = new StringBundler()-->Line_27 $$ sb.append(trimmedLine.trim())[ FD ]
Line_25 $$ sb = new StringBundler()-->Line_30 $$ sb.append(StringPool.SPACE)[ FD ]
Line_11 $$ String trimmedLine = line.trim()-->Line_22 $$ if (trimmedLine.startsWith("# ")) [ FD ]
Line_37 $$ if (trimmedLine.startsWith("#") && (trimmedLine.length() < 2)) -->Line_41 $$ addPropertyComment(propertyComments, sb.toString())[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_14 $$ sb.append(StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK))[ FD ]
Line_17 $$ sb = new StringBundler()-->Line_18 $$ sb.append(StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK))[ FD ]
Line_7 $$ line = StringUtil.trimTrailing(line)-->Line_33 $$ sb.append(line.trim())[ FD ]
Line_2 $$ protected List<PropertyComment> extractPropertyComments(String[] lines) -->Line_3 $$ List<PropertyComment> propertyComments = new ArrayList()[ CD ]
Line_25 $$ sb = new StringBundler()-->Line_35 $$ sb.append(StringPool.NEW_LINE)[ FD ]
Line_23 $$ if (previousLineIsPreformatted) -->Line_33 $$ sb.append(line.trim())[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_18 $$ sb.append(StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK))[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_24 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_11 $$ String trimmedLine = line.trim()-->Line_18 $$ sb.append(StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK))[ FD ]
Line_2 $$ protected List<PropertyComment> extractPropertyComments(String[] lines) -->Line_45 $$ return propertyComments[ CD ]
Line_23 $$ if (previousLineIsPreformatted) -->Line_32 $$ line = StringUtil.replaceFirst(line, "#", StringPool.BLANK)[ CD ]
Line_13 $$ if (previousLineIsPreformatted) -->Line_14 $$ sb.append(StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK))[ CD ]
Line_2 $$ protected List<PropertyComment> extractPropertyComments(String[] lines) -->Line_4 $$ StringBundler sb = new StringBundler()[ CD ]
Line_39 $$ sb = new StringBundler()-->Line_41 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_22 $$ if (trimmedLine.startsWith("# ")) -->Line_37 $$ if (trimmedLine.startsWith("#") && (trimmedLine.length() < 2)) [ CD ]
Line_23 $$ if (previousLineIsPreformatted) -->Line_27 $$ sb.append(trimmedLine.trim())[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_30 $$ sb.append(StringPool.SPACE)[ FD ]
Line_22 $$ if (trimmedLine.startsWith("# ")) -->Line_36 $$ previousLineIsPreformatted = false[ CD ]
Line_12 $$ if (trimmedLine.startsWith("# " + INDENT)) -->Line_22 $$ if (trimmedLine.startsWith("# ")) [ CD ]
Line_26 $$ trimmedLine = StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK)-->Line_27 $$ sb.append(trimmedLine.trim())[ FD ]
Line_22 $$ if (trimmedLine.startsWith("# ")) -->Line_35 $$ sb.append(StringPool.NEW_LINE)[ CD ]
Line_25 $$ sb = new StringBundler()-->Line_38 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_11 $$ String trimmedLine = line.trim()-->Line_37 $$ if (trimmedLine.startsWith("#") && (trimmedLine.length() < 2)) [ FD ]
Line_17 $$ sb = new StringBundler()-->Line_35 $$ sb.append(StringPool.NEW_LINE)[ FD ]
Line_3 $$ List<PropertyComment> propertyComments = new ArrayList()-->Line_24 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_27 $$ sb.append(trimmedLine.trim())[ FD ]
Line_13 $$ if (previousLineIsPreformatted) -->Line_18 $$ sb.append(StringUtil.replaceFirst(trimmedLine, "#", StringPool.BLANK))[ CD ]
Line_17 $$ sb = new StringBundler()-->Line_29 $$ if (sb.length() > 0) [ FD ]
Line_29 $$ if (sb.length() > 0) -->Line_30 $$ sb.append(StringPool.SPACE)[ CD ]
Line_6 $$ for (String line : lines) -->Line_7 $$ line = StringUtil.trimTrailing(line)[ FD ]
Line_25 $$ sb = new StringBundler()-->Line_41 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_5 $$ boolean previousLineIsPreformatted = false-->Line_21 $$ previousLineIsPreformatted = true[ FD ]
Line_17 $$ sb = new StringBundler()-->Line_30 $$ sb.append(StringPool.SPACE)[ FD ]
Line_2 $$ protected List<PropertyComment> extractPropertyComments(String[] lines) -->Line_5 $$ boolean previousLineIsPreformatted = false[ CD ]
Line_17 $$ sb = new StringBundler()-->Line_38 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_13 $$ if (previousLineIsPreformatted) -->Line_17 $$ sb = new StringBundler()[ CD ]
Line_25 $$ sb = new StringBundler()-->Line_33 $$ sb.append(line.trim())[ FD ]
Line_3 $$ List<PropertyComment> propertyComments = new ArrayList()-->Line_41 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_41 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_6 $$ for (String line : lines) -->Line_8 $$ if (line.startsWith(DOUBLE_INDENT + "#")) [ FD ]
Line_3 $$ List<PropertyComment> propertyComments = new ArrayList()-->Line_38 $$ addPropertyComment(propertyComments, sb.toString())[ FD ]
Line_22 $$ if (trimmedLine.startsWith("# ")) -->Line_23 $$ if (previousLineIsPreformatted) [ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_25 $$ sb = new StringBundler()[ FD ]
Line_37 $$ if (trimmedLine.startsWith("#") && (trimmedLine.length() < 2)) -->Line_38 $$ addPropertyComment(propertyComments, sb.toString())[ CD ]
