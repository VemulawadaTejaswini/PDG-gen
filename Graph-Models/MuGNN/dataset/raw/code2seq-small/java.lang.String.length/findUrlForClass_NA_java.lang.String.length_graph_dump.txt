Line_13 $$ String relPath-->Line_17 $$ relPath = packageName.replace('.', '/') + '/' + qName.substring(packageName.length() + 1) + HTML_EXTENSION[ FD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_19 $$ return findUrlForVirtualFile(file.getProject(), virtualFile, relPath)[ CD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_12 $$ String packageName = ((PsiJavaFile) file).getPackageName()[ CD ]
Line_13 $$ String relPath-->Line_15 $$ relPath = qName + HTML_EXTENSION[ FD ]
Line_3 $$ String qName = aClass.getQualifiedName()-->Line_15 $$ relPath = qName + HTML_EXTENSION[ FD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_4 $$ if (qName == null)[ CD ]
Line_3 $$ String qName = aClass.getQualifiedName()-->Line_4 $$ if (qName == null)[ FD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_3 $$ String qName = aClass.getQualifiedName()[ FD ]
Line_15 $$ relPath = qName + HTML_EXTENSION-->Line_19 $$ return findUrlForVirtualFile(file.getProject(), virtualFile, relPath)[ FD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_6 $$ PsiFile file = aClass.getContainingFile()[ FD ]
Line_10 $$ if (virtualFile == null)-->Line_11 $$ return null[ CD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_3 $$ String qName = aClass.getQualifiedName()[ CD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_13 $$ String relPath[ CD ]
Line_9 $$ VirtualFile virtualFile = file.getVirtualFile()-->Line_19 $$ return findUrlForVirtualFile(file.getProject(), virtualFile, relPath)[ FD ]
Line_12 $$ String packageName = ((PsiJavaFile) file).getPackageName()-->Line_17 $$ relPath = packageName.replace('.', '/') + '/' + qName.substring(packageName.length() + 1) + HTML_EXTENSION[ FD ]
Line_12 $$ String packageName = ((PsiJavaFile) file).getPackageName()-->Line_14 $$ if (packageName.isEmpty()) [ FD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_7 $$ if (!(file instanceof PsiJavaFile))[ CD ]
Line_15 $$ relPath = qName + HTML_EXTENSION-->Line_17 $$ relPath = packageName.replace('.', '/') + '/' + qName.substring(packageName.length() + 1) + HTML_EXTENSION[ FD ]
Line_3 $$ String qName = aClass.getQualifiedName()-->Line_17 $$ relPath = packageName.replace('.', '/') + '/' + qName.substring(packageName.length() + 1) + HTML_EXTENSION[ FD ]
Line_7 $$ if (!(file instanceof PsiJavaFile))-->Line_8 $$ return null[ CD ]
Line_14 $$ if (packageName.isEmpty()) -->Line_17 $$ relPath = packageName.replace('.', '/') + '/' + qName.substring(packageName.length() + 1) + HTML_EXTENSION[ CD ]
Line_6 $$ PsiFile file = aClass.getContainingFile()-->Line_9 $$ VirtualFile virtualFile = file.getVirtualFile()[ FD ]
Line_9 $$ VirtualFile virtualFile = file.getVirtualFile()-->Line_10 $$ if (virtualFile == null)[ FD ]
Line_6 $$ PsiFile file = aClass.getContainingFile()-->Line_19 $$ return findUrlForVirtualFile(file.getProject(), virtualFile, relPath)[ FD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_9 $$ VirtualFile virtualFile = file.getVirtualFile()[ CD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_14 $$ if (packageName.isEmpty()) [ CD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_10 $$ if (virtualFile == null)[ CD ]
Line_17 $$ relPath = packageName.replace('.', '/') + '/' + qName.substring(packageName.length() + 1) + HTML_EXTENSION-->Line_19 $$ return findUrlForVirtualFile(file.getProject(), virtualFile, relPath)[ FD ]
Line_13 $$ String relPath-->Line_19 $$ return findUrlForVirtualFile(file.getProject(), virtualFile, relPath)[ FD ]
Line_14 $$ if (packageName.isEmpty()) -->Line_15 $$ relPath = qName + HTML_EXTENSION[ CD ]
Line_4 $$ if (qName == null)-->Line_5 $$ return null[ CD ]
Line_2 $$ public static List<String> findUrlForClass(@NotNull PsiClass aClass) -->Line_6 $$ PsiFile file = aClass.getContainingFile()[ CD ]
