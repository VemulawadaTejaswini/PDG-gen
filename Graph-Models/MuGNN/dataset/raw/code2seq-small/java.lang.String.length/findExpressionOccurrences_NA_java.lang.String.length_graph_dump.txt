Line_23 $$ if (expression != null && IntroduceVariableBase.getErrorMessage(expression) == null) -->Line_24 $$ results.add(expression)[ CD ]
Line_3 $$ if (myMainOccurence instanceof PsiLiteralExpression && !myMainOccurence.isPhysical()) -->Line_5 $$ final FindModel findModel = (FindModel) findManager.getFindInFileModel().clone()[ CD ]
Line_20 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), PsiLiteralExpression.class)-->Line_21 $$ if (literalExpression != null && !literals.contains(literalExpression)) [ FD ]
Line_16 $$ final Set<PsiLiteralExpression> literals = new HashSet<PsiLiteralExpression>()-->Line_25 $$ literals.add(literalExpression)[ FD ]
Line_28 $$ result = findManager.findString(text, endOffset, findModel)-->Line_19 $$ final int endOffset = result.getEndOffset()[ FD ]
Line_2 $$ public PsiExpression[] findExpressionOccurrences() -->Line_3 $$ if (myMainOccurence instanceof PsiLiteralExpression && !myMainOccurence.isPhysical()) [ CD ]
Line_22 $$ final PsiExpression expression = IntroduceVariableBase.getSelectedExpression(file.getProject(), file, startOffset, offset + endOffset)-->Line_23 $$ if (expression != null && IntroduceVariableBase.getErrorMessage(expression) == null) [ FD ]
Line_3 $$ if (myMainOccurence instanceof PsiLiteralExpression && !myMainOccurence.isPhysical()) -->Line_4 $$ final FindManager findManager = FindManager.getInstance(getScope().getProject())[ CD ]
Line_9 $$ if (value.length() > 0) -->Line_15 $$ FindResult result = findManager.findString(text, 0, findModel)[ CD ]
Line_5 $$ final FindModel findModel = (FindModel) findManager.getFindInFileModel().clone()-->Line_28 $$ result = findManager.findString(text, endOffset, findModel)[ FD ]
Line_3 $$ if (myMainOccurence instanceof PsiLiteralExpression && !myMainOccurence.isPhysical()) -->Line_9 $$ if (value.length() > 0) [ CD ]
Line_21 $$ if (literalExpression != null && !literals.contains(literalExpression)) -->Line_23 $$ if (expression != null && IntroduceVariableBase.getErrorMessage(expression) == null) [ CD ]
Line_15 $$ FindResult result = findManager.findString(text, 0, findModel)-->Line_18 $$ final int startOffset = offset + result.getStartOffset()[ FD ]
Line_18 $$ final int startOffset = offset + result.getStartOffset()-->Line_22 $$ final PsiExpression expression = IntroduceVariableBase.getSelectedExpression(file.getProject(), file, startOffset, offset + endOffset)[ FD ]
Line_9 $$ if (value.length() > 0) -->Line_13 $$ final String text = getScope().getText()[ CD ]
Line_3 $$ if (myMainOccurence instanceof PsiLiteralExpression && !myMainOccurence.isPhysical()) -->Line_7 $$ findModel.setRegularExpressions(false)[ CD ]
Line_9 $$ if (value.length() > 0) -->Line_14 $$ final int offset = getScope().getTextRange().getStartOffset()[ CD ]
Line_9 $$ if (value.length() > 0) -->Line_11 $$ final List<PsiExpression> results = new ArrayList<PsiExpression>()[ CD ]
Line_22 $$ final PsiExpression expression = IntroduceVariableBase.getSelectedExpression(file.getProject(), file, startOffset, offset + endOffset)-->Line_24 $$ results.add(expression)[ FD ]
Line_9 $$ if (value.length() > 0) -->Line_30 $$ return results.toArray(new PsiExpression[results.size()])[ CD ]
Line_11 $$ final List<PsiExpression> results = new ArrayList<PsiExpression>()-->Line_30 $$ return results.toArray(new PsiExpression[results.size()])[ FD ]
Line_11 $$ final List<PsiExpression> results = new ArrayList<PsiExpression>()-->Line_24 $$ results.add(expression)[ FD ]
Line_4 $$ final FindManager findManager = FindManager.getInstance(getScope().getProject())-->Line_15 $$ FindResult result = findManager.findString(text, 0, findModel)[ FD ]
Line_17 $$ while (result.isStringFound()) -->Line_19 $$ final int endOffset = result.getEndOffset()[ CD ]
Line_5 $$ final FindModel findModel = (FindModel) findManager.getFindInFileModel().clone()-->Line_6 $$ findModel.setCaseSensitive(true)[ FD ]
Line_4 $$ final FindManager findManager = FindManager.getInstance(getScope().getProject())-->Line_28 $$ result = findManager.findString(text, endOffset, findModel)[ FD ]
Line_17 $$ while (result.isStringFound()) -->Line_20 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), PsiLiteralExpression.class)[ CD ]
Line_28 $$ result = findManager.findString(text, endOffset, findModel)-->Line_18 $$ final int startOffset = offset + result.getStartOffset()[ FD ]
Line_13 $$ final String text = getScope().getText()-->Line_15 $$ FindResult result = findManager.findString(text, 0, findModel)[ FD ]
Line_13 $$ final String text = getScope().getText()-->Line_28 $$ result = findManager.findString(text, endOffset, findModel)[ FD ]
Line_23 $$ if (expression != null && IntroduceVariableBase.getErrorMessage(expression) == null) -->Line_25 $$ literals.add(literalExpression)[ CD ]
Line_4 $$ final FindManager findManager = FindManager.getInstance(getScope().getProject())-->Line_5 $$ final FindModel findModel = (FindModel) findManager.getFindInFileModel().clone()[ FD ]
Line_8 $$ String value = StringUtil.stripQuotesAroundValue(myMainOccurence.getText())-->Line_10 $$ findModel.setStringToFind(value)[ FD ]
Line_17 $$ while (result.isStringFound()) -->Line_21 $$ if (literalExpression != null && !literals.contains(literalExpression)) [ CD ]
Line_3 $$ if (myMainOccurence instanceof PsiLiteralExpression && !myMainOccurence.isPhysical()) -->Line_8 $$ String value = StringUtil.stripQuotesAroundValue(myMainOccurence.getText())[ CD ]
Line_5 $$ final FindModel findModel = (FindModel) findManager.getFindInFileModel().clone()-->Line_7 $$ findModel.setRegularExpressions(false)[ FD ]
Line_21 $$ if (literalExpression != null && !literals.contains(literalExpression)) -->Line_22 $$ final PsiExpression expression = IntroduceVariableBase.getSelectedExpression(file.getProject(), file, startOffset, offset + endOffset)[ CD ]
Line_9 $$ if (value.length() > 0) -->Line_16 $$ final Set<PsiLiteralExpression> literals = new HashSet<PsiLiteralExpression>()[ CD ]
Line_9 $$ if (value.length() > 0) -->Line_12 $$ final PsiFile file = getScope().getContainingFile()[ CD ]
Line_20 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), PsiLiteralExpression.class)-->Line_25 $$ literals.add(literalExpression)[ FD ]
Line_12 $$ final PsiFile file = getScope().getContainingFile()-->Line_20 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), PsiLiteralExpression.class)[ FD ]
Line_19 $$ final int endOffset = result.getEndOffset()-->Line_28 $$ result = findManager.findString(text, endOffset, findModel)[ FD ]
Line_2 $$ public PsiExpression[] findExpressionOccurrences() -->Line_33 $$ return CodeInsightUtil.findExpressionOccurrences(myScope, myMainOccurence)[ CD ]
Line_28 $$ result = findManager.findString(text, endOffset, findModel)-->Line_17 $$ while (result.isStringFound()) [ FD ]
Line_18 $$ final int startOffset = offset + result.getStartOffset()-->Line_20 $$ final PsiLiteralExpression literalExpression = PsiTreeUtil.getParentOfType(file.findElementAt(startOffset), PsiLiteralExpression.class)[ FD ]
Line_3 $$ if (myMainOccurence instanceof PsiLiteralExpression && !myMainOccurence.isPhysical()) -->Line_6 $$ findModel.setCaseSensitive(true)[ CD ]
Line_8 $$ String value = StringUtil.stripQuotesAroundValue(myMainOccurence.getText())-->Line_9 $$ if (value.length() > 0) [ FD ]
Line_5 $$ final FindModel findModel = (FindModel) findManager.getFindInFileModel().clone()-->Line_10 $$ findModel.setStringToFind(value)[ FD ]
Line_5 $$ final FindModel findModel = (FindModel) findManager.getFindInFileModel().clone()-->Line_15 $$ FindResult result = findManager.findString(text, 0, findModel)[ FD ]
Line_15 $$ FindResult result = findManager.findString(text, 0, findModel)-->Line_17 $$ while (result.isStringFound()) [ FD ]
Line_12 $$ final PsiFile file = getScope().getContainingFile()-->Line_22 $$ final PsiExpression expression = IntroduceVariableBase.getSelectedExpression(file.getProject(), file, startOffset, offset + endOffset)[ FD ]
Line_15 $$ FindResult result = findManager.findString(text, 0, findModel)-->Line_19 $$ final int endOffset = result.getEndOffset()[ FD ]
Line_9 $$ if (value.length() > 0) -->Line_10 $$ findModel.setStringToFind(value)[ CD ]
Line_15 $$ FindResult result = findManager.findString(text, 0, findModel)-->Line_28 $$ result = findManager.findString(text, endOffset, findModel)[ FD ]
Line_17 $$ while (result.isStringFound()) -->Line_18 $$ final int startOffset = offset + result.getStartOffset()[ CD ]
Line_16 $$ final Set<PsiLiteralExpression> literals = new HashSet<PsiLiteralExpression>()-->Line_21 $$ if (literalExpression != null && !literals.contains(literalExpression)) [ FD ]
Line_17 $$ while (result.isStringFound()) -->Line_28 $$ result = findManager.findString(text, endOffset, findModel)[ CD ]
Line_9 $$ if (value.length() > 0) -->Line_17 $$ while (result.isStringFound()) [ CD ]
