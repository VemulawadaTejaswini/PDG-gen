Line_39 $$ ssp = ssp.substring(0, ssp.length() - (fragment.length() + 1))-->Line_41 $$ builder.schemeSpecificPart(ssp)[ FD ]
Line_38 $$ if (StringUtils.hasLength(fragment)) -->Line_39 $$ ssp = ssp.substring(0, ssp.length() - (fragment.length() + 1))[ CD ]
Line_18 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_21 $$ String scheme = matcher.group(2)[ FD ]
Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_43 $$ builder.userInfo(userInfo)[ FD ]
Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_49 $$ builder.query(query)[ FD ]
Line_24 $$ String port = matcher.group(8)-->Line_45 $$ if (StringUtils.hasLength(port)) [ FD ]
Line_18 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_22 $$ String userInfo = matcher.group(5)[ FD ]
Line_19 $$ if (matcher.matches()) -->Line_36 $$ if (opaque) [ CD ]
Line_19 $$ if (matcher.matches()) -->Line_54 $$ return builder[ CD ]
Line_19 $$ if (matcher.matches()) -->Line_25 $$ String path = matcher.group(9)[ CD ]
Line_21 $$ String scheme = matcher.group(2)-->Line_35 $$ builder.scheme(scheme)[ FD ]
Line_27 $$ String fragment = matcher.group(13)-->Line_52 $$ builder.fragment(fragment)[ FD ]
Line_26 $$ String query = matcher.group(11)-->Line_49 $$ builder.query(query)[ FD ]
Line_18 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_23 $$ String host = matcher.group(6)[ FD ]
Line_21 $$ String scheme = matcher.group(2)-->Line_29 $$ if (StringUtils.hasLength(scheme)) [ FD ]
Line_18 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_25 $$ String path = matcher.group(9)[ FD ]
Line_23 $$ String host = matcher.group(6)-->Line_44 $$ builder.host(host)[ FD ]
Line_19 $$ if (matcher.matches()) -->Line_26 $$ String query = matcher.group(11)[ CD ]
Line_18 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_19 $$ if (matcher.matches()) [ FD ]
Line_37 $$ String ssp = uri.substring(scheme.length()).substring(1)-->Line_39 $$ ssp = ssp.substring(0, ssp.length() - (fragment.length() + 1))[ FD ]
Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_52 $$ builder.fragment(fragment)[ FD ]
Line_30 $$ String rest = uri.substring(scheme.length())-->Line_31 $$ if (!rest.startsWith(":/")) [ FD ]
Line_28 $$ boolean opaque = false-->Line_32 $$ opaque = true[ FD ]
Line_45 $$ if (StringUtils.hasLength(port)) -->Line_46 $$ builder.port(port)[ CD ]
Line_31 $$ if (!rest.startsWith(":/")) -->Line_32 $$ opaque = true[ CD ]
Line_36 $$ if (opaque) -->Line_44 $$ builder.host(host)[ CD ]
Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_46 $$ builder.port(port)[ FD ]
Line_29 $$ if (StringUtils.hasLength(scheme)) -->Line_30 $$ String rest = uri.substring(scheme.length())[ CD ]
Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_44 $$ builder.host(host)[ FD ]
Line_36 $$ if (opaque) -->Line_43 $$ builder.userInfo(userInfo)[ CD ]
Line_18 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_26 $$ String query = matcher.group(11)[ FD ]
Line_29 $$ if (StringUtils.hasLength(scheme)) -->Line_31 $$ if (!rest.startsWith(":/")) [ CD ]
Line_19 $$ if (matcher.matches()) -->Line_29 $$ if (StringUtils.hasLength(scheme)) [ CD ]
Line_21 $$ String scheme = matcher.group(2)-->Line_30 $$ String rest = uri.substring(scheme.length())[ FD ]
Line_36 $$ if (opaque) -->Line_45 $$ if (StringUtils.hasLength(port)) [ CD ]
Line_36 $$ if (opaque) -->Line_49 $$ builder.query(query)[ CD ]
Line_36 $$ if (opaque) -->Line_41 $$ builder.schemeSpecificPart(ssp)[ CD ]
Line_19 $$ if (matcher.matches()) -->Line_23 $$ String host = matcher.group(6)[ CD ]
Line_36 $$ if (opaque) -->Line_38 $$ if (StringUtils.hasLength(fragment)) [ CD ]
Line_19 $$ if (matcher.matches()) -->Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()[ CD ]
Line_19 $$ if (matcher.matches()) -->Line_24 $$ String port = matcher.group(8)[ CD ]
Line_36 $$ if (opaque) -->Line_48 $$ builder.path(path)[ CD ]
Line_19 $$ if (matcher.matches()) -->Line_35 $$ builder.scheme(scheme)[ CD ]
Line_19 $$ if (matcher.matches()) -->Line_22 $$ String userInfo = matcher.group(5)[ CD ]
Line_36 $$ if (opaque) -->Line_37 $$ String ssp = uri.substring(scheme.length()).substring(1)[ CD ]
Line_27 $$ String fragment = matcher.group(13)-->Line_51 $$ if (StringUtils.hasText(fragment)) [ FD ]
Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_35 $$ builder.scheme(scheme)[ FD ]
Line_22 $$ String userInfo = matcher.group(5)-->Line_43 $$ builder.userInfo(userInfo)[ FD ]
Line_51 $$ if (StringUtils.hasText(fragment)) -->Line_52 $$ builder.fragment(fragment)[ CD ]
Line_19 $$ if (matcher.matches()) -->Line_27 $$ String fragment = matcher.group(13)[ CD ]
Line_21 $$ String scheme = matcher.group(2)-->Line_37 $$ String ssp = uri.substring(scheme.length()).substring(1)[ FD ]
Line_18 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_27 $$ String fragment = matcher.group(13)[ FD ]
Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_48 $$ builder.path(path)[ FD ]
Line_18 $$ Matcher matcher = URI_PATTERN.matcher(uri)-->Line_24 $$ String port = matcher.group(8)[ FD ]
Line_19 $$ if (matcher.matches()) -->Line_51 $$ if (StringUtils.hasText(fragment)) [ CD ]
Line_19 $$ if (matcher.matches()) -->Line_21 $$ String scheme = matcher.group(2)[ CD ]
Line_27 $$ String fragment = matcher.group(13)-->Line_39 $$ ssp = ssp.substring(0, ssp.length() - (fragment.length() + 1))[ FD ]
Line_27 $$ String fragment = matcher.group(13)-->Line_38 $$ if (StringUtils.hasLength(fragment)) [ FD ]
Line_20 $$ UriComponentsBuilder builder = new UriComponentsBuilder()-->Line_41 $$ builder.schemeSpecificPart(ssp)[ FD ]
Line_25 $$ String path = matcher.group(9)-->Line_48 $$ builder.path(path)[ FD ]
Line_24 $$ String port = matcher.group(8)-->Line_46 $$ builder.port(port)[ FD ]
Line_37 $$ String ssp = uri.substring(scheme.length()).substring(1)-->Line_41 $$ builder.schemeSpecificPart(ssp)[ FD ]
Line_19 $$ if (matcher.matches()) -->Line_28 $$ boolean opaque = false[ CD ]
