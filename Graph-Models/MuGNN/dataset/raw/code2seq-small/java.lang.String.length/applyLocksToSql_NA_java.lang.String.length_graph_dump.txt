Line_29 $$ correction += (lockHint.length() - alias.length())-->Line_14 $$ start = (sql.length() - alias.length()) + correction[ FD ]
Line_5 $$ int correction = 0-->Line_29 $$ correction += (lockHint.length() - alias.length())[ FD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_5 $$ int correction = 0[ CD ]
Line_17 $$ int position = sql.indexOf(" " + alias + " ")-->Line_21 $$ if (position > -1) [ FD ]
Line_9 $$ if (lockMode.greaterThan(LockMode.READ)) -->Line_11 $$ int start = -1[ CD ]
Line_10 $$ final String alias = (String) entry.getKey()-->Line_14 $$ start = (sql.length() - alias.length()) + correction[ FD ]
Line_13 $$ if (sql.endsWith(" " + alias)) -->Line_15 $$ end = start + alias.length()[ CD ]
Line_6 $$ while (itr.hasNext()) -->Line_7 $$ final Map.Entry entry = (Map.Entry) itr.next()[ CD ]
Line_11 $$ int start = -1-->Line_14 $$ start = (sql.length() - alias.length()) + correction[ FD ]
Line_11 $$ int start = -1-->Line_26 $$ if (start > -1) [ FD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_14 $$ start = (sql.length() - alias.length()) + correction[ FD ]
Line_17 $$ int position = sql.indexOf(" " + alias + " ")-->Line_18 $$ if (position <= -1) [ FD ]
Line_15 $$ end = start + alias.length()-->Line_28 $$ buffer.replace(start, end, lockHint)[ FD ]
Line_9 $$ if (lockMode.greaterThan(LockMode.READ)) -->Line_13 $$ if (sql.endsWith(" " + alias)) [ CD ]
Line_3 $$ final Iterator itr = aliasedLockOptions.getAliasLockIterator()-->Line_7 $$ final Map.Entry entry = (Map.Entry) itr.next()[ FD ]
Line_11 $$ int start = -1-->Line_22 $$ start = position + correction + 1[ FD ]
Line_12 $$ int end = -1-->Line_28 $$ buffer.replace(start, end, lockHint)[ FD ]
Line_26 $$ if (start > -1) -->Line_29 $$ correction += (lockHint.length() - alias.length())[ CD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_33 $$ return buffer.toString()[ CD ]
Line_13 $$ if (sql.endsWith(" " + alias)) -->Line_18 $$ if (position <= -1) [ CD ]
Line_27 $$ final String lockHint = appendLockHint(lockMode, alias)-->Line_29 $$ correction += (lockHint.length() - alias.length())[ FD ]
Line_9 $$ if (lockMode.greaterThan(LockMode.READ)) -->Line_12 $$ int end = -1[ CD ]
Line_26 $$ if (start > -1) -->Line_28 $$ buffer.replace(start, end, lockHint)[ CD ]
Line_18 $$ if (position <= -1) -->Line_19 $$ position = sql.indexOf(" " + alias + ",")[ CD ]
Line_7 $$ final Map.Entry entry = (Map.Entry) itr.next()-->Line_8 $$ final LockMode lockMode = (LockMode) entry.getValue()[ FD ]
Line_13 $$ if (sql.endsWith(" " + alias)) -->Line_14 $$ start = (sql.length() - alias.length()) + correction[ CD ]
Line_22 $$ start = position + correction + 1-->Line_23 $$ end = start + alias.length()[ FD ]
Line_22 $$ start = position + correction + 1-->Line_26 $$ if (start > -1) [ FD ]
Line_13 $$ if (sql.endsWith(" " + alias)) -->Line_21 $$ if (position > -1) [ CD ]
Line_21 $$ if (position > -1) -->Line_22 $$ start = position + correction + 1[ CD ]
Line_7 $$ final Map.Entry entry = (Map.Entry) itr.next()-->Line_10 $$ final String alias = (String) entry.getKey()[ FD ]
Line_10 $$ final String alias = (String) entry.getKey()-->Line_27 $$ final String lockHint = appendLockHint(lockMode, alias)[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder(sql)-->Line_33 $$ return buffer.toString()[ FD ]
Line_10 $$ final String alias = (String) entry.getKey()-->Line_15 $$ end = start + alias.length()[ FD ]
Line_5 $$ int correction = 0-->Line_14 $$ start = (sql.length() - alias.length()) + correction[ FD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_17 $$ int position = sql.indexOf(" " + alias + " ")[ FD ]
Line_6 $$ while (itr.hasNext()) -->Line_9 $$ if (lockMode.greaterThan(LockMode.READ)) [ CD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_19 $$ position = sql.indexOf(" " + alias + ",")[ FD ]
Line_15 $$ end = start + alias.length()-->Line_23 $$ end = start + alias.length()[ FD ]
Line_10 $$ final String alias = (String) entry.getKey()-->Line_29 $$ correction += (lockHint.length() - alias.length())[ FD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_6 $$ while (itr.hasNext()) [ CD ]
Line_6 $$ while (itr.hasNext()) -->Line_8 $$ final LockMode lockMode = (LockMode) entry.getValue()[ CD ]
Line_11 $$ int start = -1-->Line_15 $$ end = start + alias.length()[ FD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_3 $$ final Iterator itr = aliasedLockOptions.getAliasLockIterator()[ CD ]
Line_11 $$ int start = -1-->Line_28 $$ buffer.replace(start, end, lockHint)[ FD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_4 $$ final StringBuilder buffer = new StringBuilder(sql)[ CD ]
Line_19 $$ position = sql.indexOf(" " + alias + ",")-->Line_18 $$ if (position <= -1) [ FD ]
Line_12 $$ int end = -1-->Line_23 $$ end = start + alias.length()[ FD ]
Line_13 $$ if (sql.endsWith(" " + alias)) -->Line_17 $$ int position = sql.indexOf(" " + alias + " ")[ CD ]
Line_9 $$ if (lockMode.greaterThan(LockMode.READ)) -->Line_10 $$ final String alias = (String) entry.getKey()[ CD ]
Line_14 $$ start = (sql.length() - alias.length()) + correction-->Line_23 $$ end = start + alias.length()[ FD ]
Line_8 $$ final LockMode lockMode = (LockMode) entry.getValue()-->Line_27 $$ final String lockHint = appendLockHint(lockMode, alias)[ FD ]
Line_3 $$ final Iterator itr = aliasedLockOptions.getAliasLockIterator()-->Line_6 $$ while (itr.hasNext()) [ FD ]
Line_22 $$ start = position + correction + 1-->Line_28 $$ buffer.replace(start, end, lockHint)[ FD ]
Line_9 $$ if (lockMode.greaterThan(LockMode.READ)) -->Line_26 $$ if (start > -1) [ CD ]
Line_19 $$ position = sql.indexOf(" " + alias + ",")-->Line_21 $$ if (position > -1) [ FD ]
Line_11 $$ int start = -1-->Line_23 $$ end = start + alias.length()[ FD ]
Line_4 $$ final StringBuilder buffer = new StringBuilder(sql)-->Line_28 $$ buffer.replace(start, end, lockHint)[ FD ]
Line_10 $$ final String alias = (String) entry.getKey()-->Line_23 $$ end = start + alias.length()[ FD ]
Line_8 $$ final LockMode lockMode = (LockMode) entry.getValue()-->Line_9 $$ if (lockMode.greaterThan(LockMode.READ)) [ FD ]
Line_23 $$ end = start + alias.length()-->Line_28 $$ buffer.replace(start, end, lockHint)[ FD ]
Line_22 $$ start = position + correction + 1-->Line_15 $$ end = start + alias.length()[ FD ]
Line_14 $$ start = (sql.length() - alias.length()) + correction-->Line_15 $$ end = start + alias.length()[ FD ]
Line_26 $$ if (start > -1) -->Line_27 $$ final String lockHint = appendLockHint(lockMode, alias)[ CD ]
Line_14 $$ start = (sql.length() - alias.length()) + correction-->Line_26 $$ if (start > -1) [ FD ]
Line_17 $$ int position = sql.indexOf(" " + alias + " ")-->Line_19 $$ position = sql.indexOf(" " + alias + ",")[ FD ]
Line_14 $$ start = (sql.length() - alias.length()) + correction-->Line_22 $$ start = position + correction + 1[ FD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_13 $$ if (sql.endsWith(" " + alias)) [ FD ]
Line_12 $$ int end = -1-->Line_15 $$ end = start + alias.length()[ FD ]
Line_2 $$ public String applyLocksToSql(String sql, LockOptions aliasedLockOptions, Map<String, String[]> keyColumnNames) -->Line_3 $$ final Iterator itr = aliasedLockOptions.getAliasLockIterator()[ FD ]
Line_21 $$ if (position > -1) -->Line_23 $$ end = start + alias.length()[ CD ]
Line_14 $$ start = (sql.length() - alias.length()) + correction-->Line_28 $$ buffer.replace(start, end, lockHint)[ FD ]
Line_27 $$ final String lockHint = appendLockHint(lockMode, alias)-->Line_28 $$ buffer.replace(start, end, lockHint)[ FD ]
