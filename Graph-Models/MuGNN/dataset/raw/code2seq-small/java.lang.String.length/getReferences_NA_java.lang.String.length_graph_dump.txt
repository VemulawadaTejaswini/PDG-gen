Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_43 $$ return result == null ? PsiReference.EMPTY_ARRAY : result.toArray(new PsiReference[result.size()])[ CD ]
Line_11 $$ MavenProject mavenProject = null-->Line_36 $$ if (mavenProject != null) [ FD ]
Line_14 $$ Matcher matcher = MavenPropertyResolver.PATTERN.matcher(textRange.substring(text))-->Line_22 $$ from = matcher.start(1)[ FD ]
Line_37 $$ ref = new MavenPropertyPsiReference(mavenProject, element, propertyName, range, isSoft)-->Line_39 $$ ref = new MavenContextlessPropertyReference(propertiesTag, element, range, true)[ FD ]
Line_3 $$ TextRange textRange = ElementManipulators.getValueTextRange(element)-->Line_14 $$ Matcher matcher = MavenPropertyResolver.PATTERN.matcher(textRange.substring(text))[ FD ]
Line_19 $$ propertyName = matcher.group(2)-->Line_18 $$ if (propertyName == null) [ FD ]
Line_9 $$ if (!isElementCanContainReference(element))-->Line_10 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_25 $$ if (result == null) -->Line_28 $$ if (mavenProject == null) [ CD ]
Line_3 $$ TextRange textRange = ElementManipulators.getValueTextRange(element)-->Line_4 $$ if (textRange.isEmpty())[ FD ]
Line_11 $$ MavenProject mavenProject = null-->Line_28 $$ if (mavenProject == null) [ FD ]
Line_16 $$ String propertyName = matcher.group(1)-->Line_18 $$ if (propertyName == null) [ FD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_29 $$ propertiesTag = findPropertiesParentTag(element)[ FD ]
Line_13 $$ List<PsiReference> result = null-->Line_26 $$ result = new ArrayList<PsiReference>()[ FD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_14 $$ Matcher matcher = MavenPropertyResolver.PATTERN.matcher(textRange.substring(text))[ CD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_27 $$ mavenProject = findMavenProject(element)[ FD ]
Line_17 $$ int from-->Line_20 $$ from = matcher.start(2)[ FD ]
Line_15 $$ while (matcher.find()) -->Line_16 $$ String propertyName = matcher.group(1)[ CD ]
Line_6 $$ String text = element.getText()-->Line_7 $$ if (StringUtil.isEmptyOrSpaces(text))[ FD ]
Line_14 $$ Matcher matcher = MavenPropertyResolver.PATTERN.matcher(textRange.substring(text))-->Line_20 $$ from = matcher.start(2)[ FD ]
Line_29 $$ propertiesTag = findPropertiesParentTag(element)-->Line_30 $$ if (propertiesTag == null) [ FD ]
Line_14 $$ Matcher matcher = MavenPropertyResolver.PATTERN.matcher(textRange.substring(text))-->Line_16 $$ String propertyName = matcher.group(1)[ FD ]
Line_15 $$ while (matcher.find()) -->Line_25 $$ if (result == null) [ CD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_6 $$ String text = element.getText()[ CD ]
Line_11 $$ MavenProject mavenProject = null-->Line_27 $$ mavenProject = findMavenProject(element)[ FD ]
Line_13 $$ List<PsiReference> result = null-->Line_43 $$ return result == null ? PsiReference.EMPTY_ARRAY : result.toArray(new PsiReference[result.size()])[ FD ]
Line_35 $$ PsiReference ref-->Line_39 $$ ref = new MavenContextlessPropertyReference(propertiesTag, element, range, true)[ FD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_13 $$ List<PsiReference> result = null[ CD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_9 $$ if (!isElementCanContainReference(element))[ FD ]
Line_35 $$ PsiReference ref-->Line_41 $$ result.add(ref)[ FD ]
Line_12 $$ XmlTag propertiesTag = null-->Line_30 $$ if (propertiesTag == null) [ FD ]
Line_18 $$ if (propertyName == null) -->Line_19 $$ propertyName = matcher.group(2)[ CD ]
Line_28 $$ if (mavenProject == null) -->Line_29 $$ propertiesTag = findPropertiesParentTag(element)[ CD ]
Line_15 $$ while (matcher.find()) -->Line_35 $$ PsiReference ref[ CD ]
Line_3 $$ TextRange textRange = ElementManipulators.getValueTextRange(element)-->Line_24 $$ TextRange range = TextRange.from(textRange.getStartOffset() + from, propertyName.length())[ FD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_6 $$ String text = element.getText()[ FD ]
Line_17 $$ int from-->Line_22 $$ from = matcher.start(1)[ FD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_3 $$ TextRange textRange = ElementManipulators.getValueTextRange(element)[ FD ]
Line_28 $$ if (mavenProject == null) -->Line_30 $$ if (propertiesTag == null) [ CD ]
Line_4 $$ if (textRange.isEmpty())-->Line_5 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_18 $$ if (propertyName == null) -->Line_20 $$ from = matcher.start(2)[ CD ]
Line_30 $$ if (propertiesTag == null) -->Line_31 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_15 $$ while (matcher.find()) -->Line_24 $$ TextRange range = TextRange.from(textRange.getStartOffset() + from, propertyName.length())[ CD ]
Line_15 $$ while (matcher.find()) -->Line_17 $$ int from[ CD ]
Line_12 $$ XmlTag propertiesTag = null-->Line_29 $$ propertiesTag = findPropertiesParentTag(element)[ FD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_7 $$ if (StringUtil.isEmptyOrSpaces(text))[ CD ]
Line_27 $$ mavenProject = findMavenProject(element)-->Line_28 $$ if (mavenProject == null) [ FD ]
Line_15 $$ while (matcher.find()) -->Line_18 $$ if (propertyName == null) [ CD ]
Line_26 $$ result = new ArrayList<PsiReference>()-->Line_41 $$ result.add(ref)[ FD ]
Line_15 $$ while (matcher.find()) -->Line_41 $$ result.add(ref)[ CD ]
Line_25 $$ if (result == null) -->Line_27 $$ mavenProject = findMavenProject(element)[ CD ]
Line_19 $$ propertyName = matcher.group(2)-->Line_24 $$ TextRange range = TextRange.from(textRange.getStartOffset() + from, propertyName.length())[ FD ]
Line_26 $$ result = new ArrayList<PsiReference>()-->Line_25 $$ if (result == null) [ FD ]
Line_14 $$ Matcher matcher = MavenPropertyResolver.PATTERN.matcher(textRange.substring(text))-->Line_15 $$ while (matcher.find()) [ FD ]
Line_6 $$ String text = element.getText()-->Line_14 $$ Matcher matcher = MavenPropertyResolver.PATTERN.matcher(textRange.substring(text))[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(text))-->Line_8 $$ return PsiReference.EMPTY_ARRAY[ CD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_9 $$ if (!isElementCanContainReference(element))[ CD ]
Line_36 $$ if (mavenProject != null) -->Line_37 $$ ref = new MavenPropertyPsiReference(mavenProject, element, propertyName, range, isSoft)[ CD ]
Line_13 $$ List<PsiReference> result = null-->Line_25 $$ if (result == null) [ FD ]
Line_18 $$ if (propertyName == null) -->Line_22 $$ from = matcher.start(1)[ CD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_15 $$ while (matcher.find()) [ CD ]
Line_13 $$ List<PsiReference> result = null-->Line_41 $$ result.add(ref)[ FD ]
Line_16 $$ String propertyName = matcher.group(1)-->Line_24 $$ TextRange range = TextRange.from(textRange.getStartOffset() + from, propertyName.length())[ FD ]
Line_26 $$ result = new ArrayList<PsiReference>()-->Line_43 $$ return result == null ? PsiReference.EMPTY_ARRAY : result.toArray(new PsiReference[result.size()])[ FD ]
Line_27 $$ mavenProject = findMavenProject(element)-->Line_36 $$ if (mavenProject != null) [ FD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_4 $$ if (textRange.isEmpty())[ CD ]
Line_39 $$ ref = new MavenContextlessPropertyReference(propertiesTag, element, range, true)-->Line_41 $$ result.add(ref)[ FD ]
Line_20 $$ from = matcher.start(2)-->Line_22 $$ from = matcher.start(1)[ FD ]
Line_35 $$ PsiReference ref-->Line_37 $$ ref = new MavenPropertyPsiReference(mavenProject, element, propertyName, range, isSoft)[ FD ]
Line_25 $$ if (result == null) -->Line_26 $$ result = new ArrayList<PsiReference>()[ CD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_12 $$ XmlTag propertiesTag = null[ CD ]
Line_15 $$ while (matcher.find()) -->Line_36 $$ if (mavenProject != null) [ CD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_3 $$ TextRange textRange = ElementManipulators.getValueTextRange(element)[ CD ]
Line_16 $$ String propertyName = matcher.group(1)-->Line_19 $$ propertyName = matcher.group(2)[ FD ]
Line_2 $$ public static PsiReference[] getReferences(PsiElement element, boolean isSoft) -->Line_11 $$ MavenProject mavenProject = null[ CD ]
Line_36 $$ if (mavenProject != null) -->Line_39 $$ ref = new MavenContextlessPropertyReference(propertiesTag, element, range, true)[ CD ]
Line_37 $$ ref = new MavenPropertyPsiReference(mavenProject, element, propertyName, range, isSoft)-->Line_41 $$ result.add(ref)[ FD ]
Line_14 $$ Matcher matcher = MavenPropertyResolver.PATTERN.matcher(textRange.substring(text))-->Line_19 $$ propertyName = matcher.group(2)[ FD ]
