Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_5 $$ final Revision revision = new Revision(number)[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_11 $$ if (lines.length() > 0) [ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_15 $$ final String branches = stream.readUTF()[ FD ]
Line_19 $$ final String branch = stream.readUTF()-->Line_20 $$ return new RevisionWrapper(file, revision, branch.length() > 0 ? branch : null)[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_6 $$ final long time = stream.readLong()[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_7 $$ revision.setDate(new Date(time))[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_10 $$ final String lines = stream.readUTF()[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_4 $$ final String number = stream.readUTF()[ FD ]
Line_5 $$ final Revision revision = new Revision(number)-->Line_7 $$ revision.setDate(new Date(time))[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_3 $$ final String file = stream.readUTF()[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_8 $$ revision.setAuthor(stream.readUTF())[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_9 $$ revision.setState(stream.readUTF())[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_14 $$ revision.setMessage(stream.readUTF())[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_20 $$ return new RevisionWrapper(file, revision, branch.length() > 0 ? branch : null)[ CD ]
Line_5 $$ final Revision revision = new Revision(number)-->Line_9 $$ revision.setState(stream.readUTF())[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_3 $$ final String file = stream.readUTF()[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_8 $$ revision.setAuthor(stream.readUTF())[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_4 $$ final String number = stream.readUTF()[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_16 $$ if (branches.length() > 0) [ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_9 $$ revision.setState(stream.readUTF())[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_19 $$ final String branch = stream.readUTF()[ FD ]
Line_5 $$ final Revision revision = new Revision(number)-->Line_14 $$ revision.setMessage(stream.readUTF())[ FD ]
Line_15 $$ final String branches = stream.readUTF()-->Line_17 $$ revision.setBranches(branches)[ FD ]
Line_5 $$ final Revision revision = new Revision(number)-->Line_8 $$ revision.setAuthor(stream.readUTF())[ FD ]
Line_11 $$ if (lines.length() > 0) -->Line_12 $$ revision.setLines(lines)[ CD ]
Line_10 $$ final String lines = stream.readUTF()-->Line_12 $$ revision.setLines(lines)[ FD ]
Line_10 $$ final String lines = stream.readUTF()-->Line_11 $$ if (lines.length() > 0) [ FD ]
Line_15 $$ final String branches = stream.readUTF()-->Line_16 $$ if (branches.length() > 0) [ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_15 $$ final String branches = stream.readUTF()[ CD ]
Line_16 $$ if (branches.length() > 0) -->Line_17 $$ revision.setBranches(branches)[ CD ]
Line_5 $$ final Revision revision = new Revision(number)-->Line_17 $$ revision.setBranches(branches)[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_19 $$ final String branch = stream.readUTF()[ CD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_10 $$ final String lines = stream.readUTF()[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_6 $$ final long time = stream.readLong()[ FD ]
Line_2 $$ public static RevisionWrapper readFromStream(final DataInput stream) throws IOException -->Line_14 $$ revision.setMessage(stream.readUTF())[ FD ]
Line_5 $$ final Revision revision = new Revision(number)-->Line_12 $$ revision.setLines(lines)[ FD ]
