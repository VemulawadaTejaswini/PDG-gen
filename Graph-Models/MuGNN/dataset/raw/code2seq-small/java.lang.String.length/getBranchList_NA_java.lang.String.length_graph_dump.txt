Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_17 $$ result.add(symName.getName())[ FD ]
Line_9 $$ final CvsRevisionNumber revisionNumber = new CvsRevisionNumber(branchName.trim())-->Line_10 $$ final List<SymbolicName> symNames = getSymbolicNames(revisionNumber)[ FD ]
Line_4 $$ final Set<SymbolicName> processedSymbolicNames = new HashSet<SymbolicName>()-->Line_25 $$ if (StringUtil.startsWithConcatenation(symName.getRevision(), myCvsRevision.getNumber(), ".") && !processedSymbolicNames.contains(symName)) [ FD ]
Line_14 $$ if (includeRevisionNumbers) -->Line_17 $$ result.add(symName.getName())[ CD ]
Line_29 $$ int lastSubRevision = subRevisions[subRevisions.length - 1]-->Line_31 $$ number = number.addTailVersions(lastSubRevision)[ FD ]
Line_2 $$ private Collection<String> getBranchList(final boolean includeRevisionNumbers) -->Line_6 $$ if (branches != null && branches.length() != 0) [ CD ]
Line_14 $$ if (includeRevisionNumbers) -->Line_15 $$ result.add(symName.getName() + " (" + revisionNumber.asString() + ")")[ CD ]
Line_12 $$ for (final SymbolicName symName : symNames) -->Line_25 $$ if (StringUtil.startsWithConcatenation(symName.getRevision(), myCvsRevision.getNumber(), ".") && !processedSymbolicNames.contains(symName)) [ FD ]
Line_26 $$ CvsRevisionNumber number = new CvsRevisionNumber(symName.getRevision().trim())-->Line_34 $$ result.add(symName.getName() + " (" + number.asString() + ")")[ FD ]
Line_6 $$ if (branches != null && branches.length() != 0) -->Line_7 $$ final String[] branchNames = branches.split(";")[ CD ]
Line_26 $$ CvsRevisionNumber number = new CvsRevisionNumber(symName.getRevision().trim())-->Line_27 $$ final int[] subRevisions = number.getSubRevisions()[ FD ]
Line_2 $$ private Collection<String> getBranchList(final boolean includeRevisionNumbers) -->Line_3 $$ final ArrayList<String> result = new ArrayList<String>()[ CD ]
Line_12 $$ for (final SymbolicName symName : symNames) -->Line_13 $$ processedSymbolicNames.add(symName)[ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_15 $$ result.add(symName.getName() + " (" + revisionNumber.asString() + ")")[ FD ]
Line_12 $$ for (final SymbolicName symName : symNames) -->Line_17 $$ result.add(symName.getName())[ FD ]
Line_12 $$ for (final SymbolicName symName : symNames) -->Line_26 $$ CvsRevisionNumber number = new CvsRevisionNumber(symName.getRevision().trim())[ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_36 $$ result.add(symName.getName())[ FD ]
Line_3 $$ final ArrayList<String> result = new ArrayList<String>()-->Line_34 $$ result.add(symName.getName() + " (" + number.asString() + ")")[ FD ]
Line_2 $$ private Collection<String> getBranchList(final boolean includeRevisionNumbers) -->Line_40 $$ return result[ CD ]
Line_2 $$ private Collection<String> getBranchList(final boolean includeRevisionNumbers) -->Line_4 $$ final Set<SymbolicName> processedSymbolicNames = new HashSet<SymbolicName>()[ CD ]
Line_8 $$ for (String branchName : branchNames) -->Line_9 $$ final CvsRevisionNumber revisionNumber = new CvsRevisionNumber(branchName.trim())[ FD ]
Line_25 $$ if (StringUtil.startsWithConcatenation(symName.getRevision(), myCvsRevision.getNumber(), ".") && !processedSymbolicNames.contains(symName)) -->Line_27 $$ final int[] subRevisions = number.getSubRevisions()[ CD ]
Line_33 $$ if (includeRevisionNumbers) -->Line_34 $$ result.add(symName.getName() + " (" + number.asString() + ")")[ CD ]
Line_33 $$ if (includeRevisionNumbers) -->Line_36 $$ result.add(symName.getName())[ CD ]
Line_4 $$ final Set<SymbolicName> processedSymbolicNames = new HashSet<SymbolicName>()-->Line_13 $$ processedSymbolicNames.add(symName)[ FD ]
Line_25 $$ if (StringUtil.startsWithConcatenation(symName.getRevision(), myCvsRevision.getNumber(), ".") && !processedSymbolicNames.contains(symName)) -->Line_26 $$ CvsRevisionNumber number = new CvsRevisionNumber(symName.getRevision().trim())[ CD ]
Line_5 $$ final String branches = myCvsRevision.getBranches()-->Line_7 $$ final String[] branchNames = branches.split(";")[ FD ]
Line_25 $$ if (StringUtil.startsWithConcatenation(symName.getRevision(), myCvsRevision.getNumber(), ".") && !processedSymbolicNames.contains(symName)) -->Line_33 $$ if (includeRevisionNumbers) [ CD ]
Line_30 $$ number = number.removeTailVersions(2)-->Line_34 $$ result.add(symName.getName() + " (" + number.asString() + ")")[ FD ]
Line_5 $$ final String branches = myCvsRevision.getBranches()-->Line_6 $$ if (branches != null && branches.length() != 0) [ FD ]
Line_10 $$ final List<SymbolicName> symNames = getSymbolicNames(revisionNumber)-->Line_11 $$ if (!symNames.isEmpty()) [ FD ]
Line_25 $$ if (StringUtil.startsWithConcatenation(symName.getRevision(), myCvsRevision.getNumber(), ".") && !processedSymbolicNames.contains(symName)) -->Line_28 $$ if (subRevisions.length == 4) [ CD ]
Line_12 $$ for (final SymbolicName symName : symNames) -->Line_15 $$ result.add(symName.getName() + " (" + revisionNumber.asString() + ")")[ FD ]
Line_9 $$ final CvsRevisionNumber revisionNumber = new CvsRevisionNumber(branchName.trim())-->Line_15 $$ result.add(symName.getName() + " (" + revisionNumber.asString() + ")")[ FD ]
Line_30 $$ number = number.removeTailVersions(2)-->Line_31 $$ number = number.addTailVersions(lastSubRevision)[ FD ]
Line_28 $$ if (subRevisions.length == 4) -->Line_30 $$ number = number.removeTailVersions(2)[ CD ]
Line_26 $$ CvsRevisionNumber number = new CvsRevisionNumber(symName.getRevision().trim())-->Line_31 $$ number = number.addTailVersions(lastSubRevision)[ FD ]
Line_12 $$ for (final SymbolicName symName : symNames) -->Line_36 $$ result.add(symName.getName())[ FD ]
Line_28 $$ if (subRevisions.length == 4) -->Line_29 $$ int lastSubRevision = subRevisions[subRevisions.length - 1][ CD ]
Line_26 $$ CvsRevisionNumber number = new CvsRevisionNumber(symName.getRevision().trim())-->Line_30 $$ number = number.removeTailVersions(2)[ FD ]
Line_31 $$ number = number.addTailVersions(lastSubRevision)-->Line_34 $$ result.add(symName.getName() + " (" + number.asString() + ")")[ FD ]
Line_28 $$ if (subRevisions.length == 4) -->Line_31 $$ number = number.addTailVersions(lastSubRevision)[ CD ]
Line_2 $$ private Collection<String> getBranchList(final boolean includeRevisionNumbers) -->Line_23 $$ final List<SymbolicName> symNames = myLogInformation.getAllSymbolicNames()[ CD ]
Line_2 $$ private Collection<String> getBranchList(final boolean includeRevisionNumbers) -->Line_5 $$ final String branches = myCvsRevision.getBranches()[ CD ]
Line_12 $$ for (final SymbolicName symName : symNames) -->Line_34 $$ result.add(symName.getName() + " (" + number.asString() + ")")[ FD ]
