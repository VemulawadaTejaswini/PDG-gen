Line_8 $$ while (true) -->Line_10 $$ if (tagName == null || myIndex < 0)[ CD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_9 $$ String tagName = findTagName(text)[ FD ]
Line_8 $$ while (true) -->Line_12 $$ if (myTags.containsKey(tagName)) [ CD ]
Line_12 $$ if (myTags.containsKey(tagName)) -->Line_13 $$ if (myIsOpeningTag) [ CD ]
Line_13 $$ if (myIsOpeningTag) -->Line_18 $$ HighlightData highlightData = highlightsStack.pop()[ CD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_3 $$ mySkipped.clear()[ CD ]
Line_15 $$ HighlightData highlightData = new HighlightData(myStartOffset - mySkippedLen, myTags.get(tagName))-->Line_21 $$ highlights.add(highlightData)[ FD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_4 $$ if (myTags == null || myTags.isEmpty())[ CD ]
Line_15 $$ HighlightData highlightData = new HighlightData(myStartOffset - mySkippedLen, myTags.get(tagName))-->Line_19 $$ highlightData.setEndOffset(myEndOffset - mySkippedLen)[ FD ]
Line_9 $$ String tagName = findTagName(text)-->Line_12 $$ if (myTags.containsKey(tagName)) [ FD ]
Line_9 $$ String tagName = findTagName(text)-->Line_15 $$ HighlightData highlightData = new HighlightData(myStartOffset - mySkippedLen, myTags.get(tagName))[ FD ]
Line_13 $$ if (myIsOpeningTag) -->Line_21 $$ highlights.add(highlightData)[ CD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_6 $$ resetIndices()[ CD ]
Line_13 $$ if (myIsOpeningTag) -->Line_15 $$ HighlightData highlightData = new HighlightData(myStartOffset - mySkippedLen, myTags.get(tagName))[ CD ]
Line_4 $$ if (myTags == null || myTags.isEmpty())-->Line_5 $$ return text[ CD ]
Line_7 $$ Stack<HighlightData> highlightsStack = new Stack<HighlightData>()-->Line_18 $$ HighlightData highlightData = highlightsStack.pop()[ FD ]
Line_15 $$ HighlightData highlightData = new HighlightData(myStartOffset - mySkippedLen, myTags.get(tagName))-->Line_16 $$ highlightsStack.push(highlightData)[ FD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_25 $$ return cutDefinedTags(text)[ FD ]
Line_7 $$ Stack<HighlightData> highlightsStack = new Stack<HighlightData>()-->Line_16 $$ highlightsStack.push(highlightData)[ FD ]
Line_13 $$ if (myIsOpeningTag) -->Line_16 $$ highlightsStack.push(highlightData)[ CD ]
Line_8 $$ while (true) -->Line_9 $$ String tagName = findTagName(text)[ CD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_25 $$ return cutDefinedTags(text)[ CD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_4 $$ if (myTags == null || myTags.isEmpty())[ FD ]
Line_9 $$ String tagName = findTagName(text)-->Line_14 $$ mySkippedLen += tagName.length() + 2[ FD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_21 $$ highlights.add(highlightData)[ FD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_7 $$ Stack<HighlightData> highlightsStack = new Stack<HighlightData>()[ CD ]
Line_2 $$ public String extractHighlights(String text, List<HighlightData> highlights) -->Line_8 $$ while (true) [ CD ]
Line_9 $$ String tagName = findTagName(text)-->Line_20 $$ mySkippedLen += tagName.length() + 3[ FD ]
Line_13 $$ if (myIsOpeningTag) -->Line_19 $$ highlightData.setEndOffset(myEndOffset - mySkippedLen)[ CD ]
