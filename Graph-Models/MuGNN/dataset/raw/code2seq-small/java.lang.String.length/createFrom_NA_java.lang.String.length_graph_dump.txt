Line_36 $$ final PatternCompiler<PsiElement> compiler = injection.getCompiler()-->Line_48 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, parameterIndex)), true))[ FD ]
Line_56 $$ if (isInjectable(p.getType(), p.getProject())) -->Line_57 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, i)), true))[ CD ]
Line_38 $$ for (PsiMethod method : psiClass.getMethods()) -->Line_39 $$ final PsiModifierList modifiers = method.getModifierList()[ FD ]
Line_54 $$ for (int i = 0; i < parameters.length; i++) -->Line_57 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, i)), true))[ FD ]
Line_29 $$ final MethodParameterInjection result = new MethodParameterInjection()-->Line_32 $$ result.setClassName(className)[ FD ]
Line_7 $$ className = psiClass == null ? "" : StringUtil.notNullize(psiClass.getQualifiedName())-->Line_27 $$ className = StringUtil.notNullize(classes.length == 0 ? found : classes[0].getQualifiedName())[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_34 $$ if (classes.length > 0) [ CD ]
Line_13 $$ final Matcher matcher = pattern.matcher(place.getText())-->Line_15 $$ found = matcher.group(1)[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_3 $$ final PsiClass[] classes[ CD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_31 $$ result.setInjectionPlaces(InjectionPlace.EMPTY_ARRAY)[ CD ]
Line_56 $$ if (isInjectable(p.getType(), p.getProject())) -->Line_59 $$ methodInfo.getParamFlags()[i] = place != null && place.isEnabled() || includeAllPlaces[ CD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_58 $$ final InjectionPlace place = index > -1 ? injection.getInjectionPlaces()[index] : null[ FD ]
Line_13 $$ final Matcher matcher = pattern.matcher(place.getText())-->Line_14 $$ if (matcher.matches()) [ FD ]
Line_43 $$ final MethodInfo methodInfo = createMethodInfo(method)-->Line_64 $$ infos.add(methodInfo)[ FD ]
Line_34 $$ if (classes.length > 0) -->Line_35 $$ final THashSet<String> visitedSignatures = new THashSet<String>()[ CD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_32 $$ result.setClassName(className)[ CD ]
Line_58 $$ final InjectionPlace place = index > -1 ? injection.getInjectionPlaces()[index] : null-->Line_59 $$ methodInfo.getParamFlags()[i] = place != null && place.isEnabled() || includeAllPlaces[ FD ]
Line_23 $$ found = pkg.substring(1, pkg.length() - 1) + "." + matcher.group(1)-->Line_26 $$ classes = found != null && project.isInitialized() ? JavaPsiFacade.getInstance(project).findClasses(found, GlobalSearchScope.allScope(project)) : PsiClass.EMPTY_ARRAY[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_59 $$ methodInfo.getParamFlags()[i] = place != null && place.isEnabled() || includeAllPlaces[ FD ]
Line_4 $$ final String className-->Line_7 $$ className = psiClass == null ? "" : StringUtil.notNullize(psiClass.getQualifiedName())[ FD ]
Line_29 $$ final MethodParameterInjection result = new MethodParameterInjection()-->Line_31 $$ result.setInjectionPlaces(InjectionPlace.EMPTY_ARRAY)[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_30 $$ result.copyFrom(injection)[ CD ]
Line_12 $$ for (InjectionPlace place : injection.getInjectionPlaces()) -->Line_13 $$ final Matcher matcher = pattern.matcher(place.getText())[ FD ]
Line_38 $$ for (PsiMethod method : psiClass.getMethods()) -->Line_43 $$ final MethodInfo methodInfo = createMethodInfo(method)[ FD ]
Line_34 $$ if (classes.length > 0) -->Line_36 $$ final PatternCompiler<PsiElement> compiler = injection.getCompiler()[ CD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_36 $$ final PatternCompiler<PsiElement> compiler = injection.getCompiler()[ FD ]
Line_35 $$ final THashSet<String> visitedSignatures = new THashSet<String>()-->Line_44 $$ if (!visitedSignatures.add(methodInfo.getMethodSignature()))[ FD ]
Line_42 $$ boolean add = false-->Line_60 $$ add = true[ FD ]
Line_27 $$ className = StringUtil.notNullize(classes.length == 0 ? found : classes[0].getQualifiedName())-->Line_32 $$ result.setClassName(className)[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_26 $$ classes = found != null && project.isInitialized() ? JavaPsiFacade.getInstance(project).findClasses(found, GlobalSearchScope.allScope(project)) : PsiClass.EMPTY_ARRAY[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_79 $$ result.generatePlaces()[ CD ]
Line_43 $$ final MethodInfo methodInfo = createMethodInfo(method)-->Line_44 $$ if (!visitedSignatures.add(methodInfo.getMethodSignature()))[ FD ]
Line_3 $$ final PsiClass[] classes-->Line_26 $$ classes = found != null && project.isInitialized() ? JavaPsiFacade.getInstance(project).findClasses(found, GlobalSearchScope.allScope(project)) : PsiClass.EMPTY_ARRAY[ FD ]
Line_6 $$ final PsiClass psiClass = contextMethod.getContainingClass()-->Line_38 $$ for (PsiMethod method : psiClass.getMethods()) [ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_48 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, parameterIndex)), true))[ FD ]
Line_29 $$ final MethodParameterInjection result = new MethodParameterInjection()-->Line_30 $$ result.copyFrom(injection)[ FD ]
Line_18 $$ if (found == null) -->Line_21 $$ if (matcher.matches()) [ CD ]
Line_38 $$ for (PsiMethod method : psiClass.getMethods()) -->Line_46 $$ if (isInjectable(method.getReturnType(), method.getProject())) [ FD ]
Line_54 $$ for (int i = 0; i < parameters.length; i++) -->Line_56 $$ if (isInjectable(p.getType(), p.getProject())) [ CD ]
Line_5 $$ if (contextMethod != null) -->Line_18 $$ if (found == null) [ CD ]
Line_56 $$ if (isInjectable(p.getType(), p.getProject())) -->Line_58 $$ final InjectionPlace place = index > -1 ? injection.getInjectionPlaces()[index] : null[ CD ]
Line_22 $$ final String pkg = matcher.group(2)-->Line_23 $$ found = pkg.substring(1, pkg.length() - 1) + "." + matcher.group(1)[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_29 $$ final MethodParameterInjection result = new MethodParameterInjection()[ CD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_33 $$ final ArrayList<MethodInfo> infos = new ArrayList<MethodInfo>()[ CD ]
Line_5 $$ if (contextMethod != null) -->Line_26 $$ classes = found != null && project.isInitialized() ? JavaPsiFacade.getInstance(project).findClasses(found, GlobalSearchScope.allScope(project)) : PsiClass.EMPTY_ARRAY[ CD ]
Line_55 $$ final PsiParameter p = parameters[i]-->Line_56 $$ if (isInjectable(p.getType(), p.getProject())) [ FD ]
Line_5 $$ if (contextMethod != null) -->Line_10 $$ String found = null[ CD ]
Line_3 $$ final PsiClass[] classes-->Line_8 $$ classes = psiClass == null ? PsiClass.EMPTY_ARRAY : new PsiClass[] [ FD ]
Line_15 $$ found = matcher.group(1)-->Line_26 $$ classes = found != null && project.isInitialized() ? JavaPsiFacade.getInstance(project).findClasses(found, GlobalSearchScope.allScope(project)) : PsiClass.EMPTY_ARRAY[ FD ]
Line_8 $$ classes = psiClass == null ? PsiClass.EMPTY_ARRAY : new PsiClass[] -->Line_26 $$ classes = found != null && project.isInitialized() ? JavaPsiFacade.getInstance(project).findClasses(found, GlobalSearchScope.allScope(project)) : PsiClass.EMPTY_ARRAY[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_6 $$ final PsiClass psiClass = contextMethod.getContainingClass()[ FD ]
Line_4 $$ final String className-->Line_32 $$ result.setClassName(className)[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_5 $$ if (contextMethod != null) [ CD ]
Line_43 $$ final MethodInfo methodInfo = createMethodInfo(method)-->Line_59 $$ methodInfo.getParamFlags()[i] = place != null && place.isEnabled() || includeAllPlaces[ FD ]
Line_13 $$ final Matcher matcher = pattern.matcher(place.getText())-->Line_21 $$ if (matcher.matches()) [ FD ]
Line_39 $$ final PsiModifierList modifiers = method.getModifierList()-->Line_40 $$ if (modifiers.hasModifierProperty(PsiModifier.PRIVATE) || modifiers.hasModifierProperty(PsiModifier.PACKAGE_LOCAL))[ FD ]
Line_5 $$ if (contextMethod != null) -->Line_6 $$ final PsiClass psiClass = contextMethod.getContainingClass()[ CD ]
Line_51 $$ add = true-->Line_60 $$ add = true[ FD ]
Line_54 $$ for (int i = 0; i < parameters.length; i++) -->Line_55 $$ final PsiParameter p = parameters[i][ CD ]
Line_13 $$ final Matcher matcher = pattern.matcher(place.getText())-->Line_23 $$ found = pkg.substring(1, pkg.length() - 1) + "." + matcher.group(1)[ FD ]
Line_6 $$ final PsiClass psiClass = contextMethod.getContainingClass()-->Line_7 $$ className = psiClass == null ? "" : StringUtil.notNullize(psiClass.getQualifiedName())[ FD ]
Line_36 $$ final PatternCompiler<PsiElement> compiler = injection.getCompiler()-->Line_57 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, i)), true))[ FD ]
Line_11 $$ final Pattern pattern = Pattern.compile(".*definedInClass\\(\"([^\"]*)\"\\)+")-->Line_13 $$ final Matcher matcher = pattern.matcher(place.getText())[ FD ]
Line_38 $$ for (PsiMethod method : psiClass.getMethods()) -->Line_57 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, i)), true))[ FD ]
Line_15 $$ found = matcher.group(1)-->Line_18 $$ if (found == null) [ FD ]
Line_46 $$ if (isInjectable(method.getReturnType(), method.getProject())) -->Line_47 $$ final int parameterIndex = -1[ CD ]
Line_43 $$ final MethodInfo methodInfo = createMethodInfo(method)-->Line_50 $$ methodInfo.setReturnFlag(place != null && place.isEnabled() || includeAllPlaces)[ FD ]
Line_5 $$ if (contextMethod != null) -->Line_7 $$ className = psiClass == null ? "" : StringUtil.notNullize(psiClass.getQualifiedName())[ CD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_12 $$ for (InjectionPlace place : injection.getInjectionPlaces()) [ FD ]
Line_10 $$ String found = null-->Line_15 $$ found = matcher.group(1)[ FD ]
Line_38 $$ for (PsiMethod method : psiClass.getMethods()) -->Line_53 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ FD ]
Line_46 $$ if (isInjectable(method.getReturnType(), method.getProject())) -->Line_50 $$ methodInfo.setReturnFlag(place != null && place.isEnabled() || includeAllPlaces)[ CD ]
Line_46 $$ if (isInjectable(method.getReturnType(), method.getProject())) -->Line_51 $$ add = true[ CD ]
Line_38 $$ for (PsiMethod method : psiClass.getMethods()) -->Line_48 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, parameterIndex)), true))[ FD ]
Line_12 $$ for (InjectionPlace place : injection.getInjectionPlaces()) -->Line_59 $$ methodInfo.getParamFlags()[i] = place != null && place.isEnabled() || includeAllPlaces[ FD ]
Line_14 $$ if (matcher.matches()) -->Line_15 $$ found = matcher.group(1)[ CD ]
Line_13 $$ final Matcher matcher = pattern.matcher(place.getText())-->Line_22 $$ final String pkg = matcher.group(2)[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_49 $$ final InjectionPlace place = index > -1 ? injection.getInjectionPlaces()[index] : null[ FD ]
Line_56 $$ if (isInjectable(p.getType(), p.getProject())) -->Line_60 $$ add = true[ CD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_57 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, i)), true))[ FD ]
Line_5 $$ if (contextMethod != null) -->Line_8 $$ classes = psiClass == null ? PsiClass.EMPTY_ARRAY : new PsiClass[] [ CD ]
Line_47 $$ final int parameterIndex = -1-->Line_48 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, parameterIndex)), true))[ FD ]
Line_33 $$ final ArrayList<MethodInfo> infos = new ArrayList<MethodInfo>()-->Line_64 $$ infos.add(methodInfo)[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_80 $$ return result[ CD ]
Line_12 $$ for (InjectionPlace place : injection.getInjectionPlaces()) -->Line_50 $$ methodInfo.setReturnFlag(place != null && place.isEnabled() || includeAllPlaces)[ FD ]
Line_7 $$ className = psiClass == null ? "" : StringUtil.notNullize(psiClass.getQualifiedName())-->Line_32 $$ result.setClassName(className)[ FD ]
Line_46 $$ if (isInjectable(method.getReturnType(), method.getProject())) -->Line_48 $$ int index = ArrayUtilRt.find(injection.getInjectionPlaces(), new InjectionPlace(compiler.compileElementPattern(getPatternStringForJavaPlace(method, parameterIndex)), true))[ CD ]
Line_10 $$ String found = null-->Line_26 $$ classes = found != null && project.isInitialized() ? JavaPsiFacade.getInstance(project).findClasses(found, GlobalSearchScope.allScope(project)) : PsiClass.EMPTY_ARRAY[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_30 $$ result.copyFrom(injection)[ FD ]
Line_63 $$ if (add) -->Line_64 $$ infos.add(methodInfo)[ CD ]
Line_10 $$ String found = null-->Line_18 $$ if (found == null) [ FD ]
Line_5 $$ if (contextMethod != null) -->Line_11 $$ final Pattern pattern = Pattern.compile(".*definedInClass\\(\"([^\"]*)\"\\)+")[ CD ]
Line_21 $$ if (matcher.matches()) -->Line_22 $$ final String pkg = matcher.group(2)[ CD ]
Line_42 $$ boolean add = false-->Line_51 $$ add = true[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_4 $$ final String className[ CD ]
Line_15 $$ found = matcher.group(1)-->Line_23 $$ found = pkg.substring(1, pkg.length() - 1) + "." + matcher.group(1)[ FD ]
Line_4 $$ final String className-->Line_27 $$ className = StringUtil.notNullize(classes.length == 0 ? found : classes[0].getQualifiedName())[ FD ]
Line_2 $$ private static MethodParameterInjection createFrom(final Project project, final BaseInjection injection, final PsiMethod contextMethod, final boolean includeAllPlaces) -->Line_5 $$ if (contextMethod != null) [ FD ]
Line_10 $$ String found = null-->Line_23 $$ found = pkg.substring(1, pkg.length() - 1) + "." + matcher.group(1)[ FD ]
Line_29 $$ final MethodParameterInjection result = new MethodParameterInjection()-->Line_79 $$ result.generatePlaces()[ FD ]
Line_5 $$ if (contextMethod != null) -->Line_27 $$ className = StringUtil.notNullize(classes.length == 0 ? found : classes[0].getQualifiedName())[ CD ]
Line_21 $$ if (matcher.matches()) -->Line_23 $$ found = pkg.substring(1, pkg.length() - 1) + "." + matcher.group(1)[ CD ]
