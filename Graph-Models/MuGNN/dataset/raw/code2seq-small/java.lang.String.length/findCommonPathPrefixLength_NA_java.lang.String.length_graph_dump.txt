Line_4 $$ do -->Line_10 $$ end = new_end[ CD ]
Line_6 $$ int new_end = endOfToken(path1, beg)-->Line_10 $$ end = new_end[ FD ]
Line_4 $$ do -->Line_5 $$ int beg = end + 1[ CD ]
Line_5 $$ int beg = end + 1-->Line_7 $$ if (new_end != endOfToken(path2, beg) || !path1.substring(beg, new_end).equals(path2.substring(beg, new_end))) [ FD ]
Line_4 $$ do -->Line_6 $$ int new_end = endOfToken(path1, beg)[ CD ]
Line_2 $$ public static int findCommonPathPrefixLength(String path1, String path2) -->Line_12 $$ return end < 0 ? 0 : end[ CD ]
Line_2 $$ public static int findCommonPathPrefixLength(String path1, String path2) -->Line_4 $$ do [ FD ]
Line_3 $$ int end = -1-->Line_4 $$ do [ FD ]
Line_4 $$ do -->Line_7 $$ if (new_end != endOfToken(path2, beg) || !path1.substring(beg, new_end).equals(path2.substring(beg, new_end))) [ CD ]
Line_2 $$ public static int findCommonPathPrefixLength(String path1, String path2) -->Line_7 $$ if (new_end != endOfToken(path2, beg) || !path1.substring(beg, new_end).equals(path2.substring(beg, new_end))) [ FD ]
Line_6 $$ int new_end = endOfToken(path1, beg)-->Line_7 $$ if (new_end != endOfToken(path2, beg) || !path1.substring(beg, new_end).equals(path2.substring(beg, new_end))) [ FD ]
Line_3 $$ int end = -1-->Line_10 $$ end = new_end[ FD ]
Line_2 $$ public static int findCommonPathPrefixLength(String path1, String path2) -->Line_3 $$ int end = -1[ CD ]
Line_2 $$ public static int findCommonPathPrefixLength(String path1, String path2) -->Line_4 $$ do [ CD ]
Line_10 $$ end = new_end-->Line_4 $$ do [ FD ]
Line_5 $$ int beg = end + 1-->Line_6 $$ int new_end = endOfToken(path1, beg)[ FD ]
Line_2 $$ public static int findCommonPathPrefixLength(String path1, String path2) -->Line_6 $$ int new_end = endOfToken(path1, beg)[ FD ]
