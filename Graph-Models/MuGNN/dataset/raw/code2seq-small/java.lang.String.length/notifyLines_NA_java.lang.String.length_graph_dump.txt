Line_5 $$ if (lineBuilder.length() > 0) -->Line_7 $$ if (lines.hasNext()) [ CD ]
Line_14 $$ String line = null-->Line_21 $$ if (line != null && line.length() > 0) [ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_5 $$ if (lineBuilder.length() > 0) [ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_9 $$ notifyLine(line, outputType)[ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_16 $$ line = lines.next()[ FD ]
Line_5 $$ if (lineBuilder.length() > 0) -->Line_6 $$ lineBuilder.append(lines.next())[ CD ]
Line_14 $$ String line = null-->Line_16 $$ line = lines.next()[ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_22 $$ lineBuilder.append(line)[ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_10 $$ lineBuilder.setLength(0)[ FD ]
Line_8 $$ final String line = lineBuilder.toString()-->Line_22 $$ lineBuilder.append(line)[ FD ]
Line_18 $$ if (lines.hasNext()) -->Line_19 $$ notifyLine(line, outputType)[ CD ]
Line_13 $$ while (true) -->Line_18 $$ if (lines.hasNext()) [ CD ]
Line_16 $$ line = lines.next()-->Line_21 $$ if (line != null && line.length() > 0) [ FD ]
Line_16 $$ line = lines.next()-->Line_19 $$ notifyLine(line, outputType)[ FD ]
Line_13 $$ while (true) -->Line_14 $$ String line = null[ CD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_3 $$ if (!lines.hasNext())[ FD ]
Line_18 $$ if (lines.hasNext()) -->Line_21 $$ if (line != null && line.length() > 0) [ CD ]
Line_13 $$ while (true) -->Line_15 $$ if (lines.hasNext()) [ CD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_8 $$ final String line = lineBuilder.toString()[ FD ]
Line_7 $$ if (lines.hasNext()) -->Line_9 $$ notifyLine(line, outputType)[ CD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_15 $$ if (lines.hasNext()) [ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_5 $$ if (lineBuilder.length() > 0) [ CD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_3 $$ if (!lines.hasNext())[ CD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_19 $$ notifyLine(line, outputType)[ FD ]
Line_16 $$ line = lines.next()-->Line_22 $$ lineBuilder.append(line)[ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_6 $$ lineBuilder.append(lines.next())[ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_7 $$ if (lines.hasNext()) [ FD ]
Line_14 $$ String line = null-->Line_19 $$ notifyLine(line, outputType)[ FD ]
Line_3 $$ if (!lines.hasNext())-->Line_4 $$ return[ CD ]
Line_8 $$ final String line = lineBuilder.toString()-->Line_16 $$ line = lines.next()[ FD ]
Line_8 $$ final String line = lineBuilder.toString()-->Line_19 $$ notifyLine(line, outputType)[ FD ]
Line_14 $$ String line = null-->Line_22 $$ lineBuilder.append(line)[ FD ]
Line_21 $$ if (line != null && line.length() > 0) -->Line_22 $$ lineBuilder.append(line)[ CD ]
Line_15 $$ if (lines.hasNext()) -->Line_16 $$ line = lines.next()[ CD ]
Line_7 $$ if (lines.hasNext()) -->Line_8 $$ final String line = lineBuilder.toString()[ CD ]
Line_7 $$ if (lines.hasNext()) -->Line_10 $$ lineBuilder.setLength(0)[ CD ]
Line_8 $$ final String line = lineBuilder.toString()-->Line_9 $$ notifyLine(line, outputType)[ FD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_13 $$ while (true) [ CD ]
Line_2 $$ private void notifyLines(final Key outputType, final Iterator<String> lines, final StringBuilder lineBuilder) -->Line_18 $$ if (lines.hasNext()) [ FD ]
Line_8 $$ final String line = lineBuilder.toString()-->Line_21 $$ if (line != null && line.length() > 0) [ FD ]
