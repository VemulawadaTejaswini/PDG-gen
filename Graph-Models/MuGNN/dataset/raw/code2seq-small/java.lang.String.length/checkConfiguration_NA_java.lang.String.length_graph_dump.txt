Line_16 $$ for (final PsiMethod method : psiClass.findMethodsByName(methodName, true)) -->Line_17 $$ if (filter.value(method))[ FD ]
Line_16 $$ for (final PsiMethod method : psiClass.findMethodsByName(methodName, true)) -->Line_19 $$ if (JUnitUtil.isTestAnnotated(method))[ FD ]
Line_27 $$ final PsiClass testCaseClass = JUnitUtil.getTestCaseClass(configurationModule.getModule())-->Line_28 $$ if (!psiClass.isInheritor(testCaseClass, true)) [ FD ]
Line_17 $$ if (filter.value(method))-->Line_18 $$ found = true[ CD ]
Line_8 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))-->Line_16 $$ for (final PsiMethod method : psiClass.findMethodsByName(methodName, true)) [ FD ]
Line_13 $$ final JUnitUtil.TestMethodFilter filter = new JUnitUtil.TestMethodFilter(psiClass)-->Line_17 $$ if (filter.value(method))[ FD ]
Line_9 $$ final String methodName = data.getMethodName()-->Line_23 $$ throw new RuntimeConfigurationWarning(ExecutionBundle.message("test.method.doesnt.exist.error.message", methodName))[ FD ]
Line_14 $$ boolean found = false-->Line_18 $$ found = true[ FD ]
Line_15 $$ boolean testAnnotated = false-->Line_25 $$ if (!AnnotationUtil.isAnnotated(psiClass, JUnitUtil.RUN_WITH, true) && !testAnnotated) [ FD ]
Line_18 $$ found = true-->Line_22 $$ if (!found) [ FD ]
Line_19 $$ if (JUnitUtil.isTestAnnotated(method))-->Line_20 $$ testAnnotated = true[ CD ]
Line_8 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))-->Line_28 $$ if (!psiClass.isInheritor(testCaseClass, true)) [ FD ]
Line_14 $$ boolean found = false-->Line_22 $$ if (!found) [ FD ]
Line_7 $$ final String testClass = data.getMainClassName()-->Line_29 $$ throw new RuntimeConfigurationError(ExecutionBundle.message("class.isnt.inheritor.of.testcase.error.message", testClass))[ FD ]
Line_8 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))-->Line_25 $$ if (!AnnotationUtil.isAnnotated(psiClass, JUnitUtil.RUN_WITH, true) && !testAnnotated) [ FD ]
Line_5 $$ final JavaRunConfigurationModule configurationModule = getConfiguration().getConfigurationModule()-->Line_8 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))[ FD ]
Line_6 $$ final JUnitConfiguration.Data data = getConfiguration().getPersistentData()-->Line_7 $$ final String testClass = data.getMainClassName()[ FD ]
Line_20 $$ testAnnotated = true-->Line_25 $$ if (!AnnotationUtil.isAnnotated(psiClass, JUnitUtil.RUN_WITH, true) && !testAnnotated) [ FD ]
Line_6 $$ final JUnitConfiguration.Data data = getConfiguration().getPersistentData()-->Line_9 $$ final String methodName = data.getMethodName()[ FD ]
Line_5 $$ final JavaRunConfigurationModule configurationModule = getConfiguration().getConfigurationModule()-->Line_32 $$ throw new RuntimeConfigurationWarning(ExecutionBundle.message("junit.jar.not.found.in.module.class.path.error.message", configurationModule.getModuleName()))[ FD ]
Line_9 $$ final String methodName = data.getMethodName()-->Line_16 $$ for (final PsiMethod method : psiClass.findMethodsByName(methodName, true)) [ FD ]
Line_7 $$ final String testClass = data.getMainClassName()-->Line_8 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))[ FD ]
Line_5 $$ final JavaRunConfigurationModule configurationModule = getConfiguration().getConfigurationModule()-->Line_27 $$ final PsiClass testCaseClass = JUnitUtil.getTestCaseClass(configurationModule.getModule())[ FD ]
Line_9 $$ final String methodName = data.getMethodName()-->Line_10 $$ if (methodName == null || methodName.trim().length() == 0) [ FD ]
Line_15 $$ boolean testAnnotated = false-->Line_20 $$ testAnnotated = true[ FD ]
