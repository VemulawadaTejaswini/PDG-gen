Line_8 $$ final String methodName = data.getMethodName()-->Line_15 $$ for (final PsiMethod method : psiClass.findMethodsByName(methodName, true)) [ FD ]
Line_16 $$ if (filter.value(method))-->Line_17 $$ found = true[ CD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_24 $$ if (!AnnotationUtil.isAnnotated(psiClass, JUnitUtil.RUN_WITH, true) && !testAnnotated) [ CD ]
Line_7 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))-->Line_27 $$ if (!psiClass.isInheritor(testCaseClass, true)) [ FD ]
Line_8 $$ final String methodName = data.getMethodName()-->Line_9 $$ if (methodName == null || methodName.trim().length() == 0) [ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_14 $$ boolean testAnnotated = false[ CD ]
Line_7 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))-->Line_24 $$ if (!AnnotationUtil.isAnnotated(psiClass, JUnitUtil.RUN_WITH, true) && !testAnnotated) [ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_12 $$ final JUnitUtil.TestMethodFilter filter = new JUnitUtil.TestMethodFilter(psiClass)[ CD ]
Line_13 $$ boolean found = false-->Line_21 $$ if (!found) [ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_4 $$ final JavaRunConfigurationModule configurationModule = getConfiguration().getConfigurationModule()[ CD ]
Line_4 $$ final JavaRunConfigurationModule configurationModule = getConfiguration().getConfigurationModule()-->Line_7 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))[ FD ]
Line_6 $$ final String testClass = data.getMainClassName()-->Line_7 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))[ FD ]
Line_5 $$ final JUnitConfiguration.Data data = getConfiguration().getPersistentData()-->Line_8 $$ final String methodName = data.getMethodName()[ FD ]
Line_6 $$ final String testClass = data.getMainClassName()-->Line_28 $$ throw new RuntimeConfigurationError(ExecutionBundle.message("class.isnt.inheritor.of.testcase.error.message", testClass))[ FD ]
Line_15 $$ for (final PsiMethod method : psiClass.findMethodsByName(methodName, true)) -->Line_16 $$ if (filter.value(method))[ FD ]
Line_26 $$ final PsiClass testCaseClass = JUnitUtil.getTestCaseClass(configurationModule.getModule())-->Line_27 $$ if (!psiClass.isInheritor(testCaseClass, true)) [ FD ]
Line_5 $$ final JUnitConfiguration.Data data = getConfiguration().getPersistentData()-->Line_6 $$ final String testClass = data.getMainClassName()[ FD ]
Line_17 $$ found = true-->Line_21 $$ if (!found) [ FD ]
Line_4 $$ final JavaRunConfigurationModule configurationModule = getConfiguration().getConfigurationModule()-->Line_26 $$ final PsiClass testCaseClass = JUnitUtil.getTestCaseClass(configurationModule.getModule())[ FD ]
Line_19 $$ testAnnotated = true-->Line_24 $$ if (!AnnotationUtil.isAnnotated(psiClass, JUnitUtil.RUN_WITH, true) && !testAnnotated) [ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_13 $$ boolean found = false[ CD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_8 $$ final String methodName = data.getMethodName()[ CD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_3 $$ super.checkConfiguration()[ CD ]
Line_14 $$ boolean testAnnotated = false-->Line_19 $$ testAnnotated = true[ FD ]
Line_4 $$ final JavaRunConfigurationModule configurationModule = getConfiguration().getConfigurationModule()-->Line_31 $$ throw new RuntimeConfigurationWarning(ExecutionBundle.message("junit.jar.not.found.in.module.class.path.error.message", configurationModule.getModuleName()))[ FD ]
Line_12 $$ final JUnitUtil.TestMethodFilter filter = new JUnitUtil.TestMethodFilter(psiClass)-->Line_16 $$ if (filter.value(method))[ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_9 $$ if (methodName == null || methodName.trim().length() == 0) [ CD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_5 $$ final JUnitConfiguration.Data data = getConfiguration().getPersistentData()[ CD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_6 $$ final String testClass = data.getMainClassName()[ CD ]
Line_13 $$ boolean found = false-->Line_17 $$ found = true[ FD ]
Line_15 $$ for (final PsiMethod method : psiClass.findMethodsByName(methodName, true)) -->Line_18 $$ if (JUnitUtil.isTestAnnotated(method))[ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_7 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))[ CD ]
Line_7 $$ final PsiClass psiClass = configurationModule.checkModuleAndClassName(testClass, ExecutionBundle.message("no.test.class.specified.error.text"))-->Line_15 $$ for (final PsiMethod method : psiClass.findMethodsByName(methodName, true)) [ FD ]
Line_14 $$ boolean testAnnotated = false-->Line_24 $$ if (!AnnotationUtil.isAnnotated(psiClass, JUnitUtil.RUN_WITH, true) && !testAnnotated) [ FD ]
Line_2 $$ public void checkConfiguration() throws RuntimeConfigurationException -->Line_21 $$ if (!found) [ CD ]
Line_8 $$ final String methodName = data.getMethodName()-->Line_22 $$ throw new RuntimeConfigurationWarning(ExecutionBundle.message("test.method.doesnt.exist.error.message", methodName))[ FD ]
Line_18 $$ if (JUnitUtil.isTestAnnotated(method))-->Line_19 $$ testAnnotated = true[ CD ]
