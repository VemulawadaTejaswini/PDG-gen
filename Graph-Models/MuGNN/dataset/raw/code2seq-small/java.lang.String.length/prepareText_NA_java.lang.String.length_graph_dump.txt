Line_11 $$ text = text.substring(0, text.length() - 3)-->Line_16 $$ text = text.substring(0, text.length() - 1)[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_4 $$ if (text.startsWith("\"\"\"")) [ FD ]
Line_11 $$ text = text.substring(0, text.length() - 3)-->Line_25 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "'", "\"$", buffer)[ FD ]
Line_7 $$ text = StringUtil.trimStart(text, "\"")-->Line_21 $$ if (text.indexOf('\n') >= 0) [ FD ]
Line_5 $$ text = text.substring(3)-->Line_11 $$ text = text.substring(0, text.length() - 3)[ FD ]
Line_13 $$ text = StringUtil.trimEnd(text, "\"")-->Line_21 $$ if (text.indexOf('\n') >= 0) [ FD ]
Line_11 $$ text = text.substring(0, text.length() - 3)-->Line_18 $$ if (text.isEmpty())[ FD ]
Line_5 $$ text = text.substring(3)-->Line_13 $$ text = StringUtil.trimEnd(text, "\"")[ FD ]
Line_13 $$ text = StringUtil.trimEnd(text, "\"")-->Line_16 $$ text = text.substring(0, text.length() - 1)[ FD ]
Line_3 $$ if (isFirst) -->Line_4 $$ if (text.startsWith("\"\"\"")) [ CD ]
Line_13 $$ text = StringUtil.trimEnd(text, "\"")-->Line_18 $$ if (text.isEmpty())[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_21 $$ if (text.indexOf('\n') >= 0) [ FD ]
Line_15 $$ if (isBeforeInjection) -->Line_16 $$ text = text.substring(0, text.length() - 1)[ CD ]
Line_20 $$ final StringBuilder buffer = new StringBuilder()-->Line_25 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "'", "\"$", buffer)[ FD ]
Line_21 $$ if (text.indexOf('\n') >= 0) -->Line_25 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "'", "\"$", buffer)[ CD ]
Line_9 $$ if (isLast) -->Line_10 $$ if (text.endsWith("\"\"\"")) [ CD ]
Line_16 $$ text = text.substring(0, text.length() - 1)-->Line_21 $$ if (text.indexOf('\n') >= 0) [ FD ]
Line_7 $$ text = StringUtil.trimStart(text, "\"")-->Line_10 $$ if (text.endsWith("\"\"\"")) [ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_16 $$ text = text.substring(0, text.length() - 1)[ FD ]
Line_7 $$ text = StringUtil.trimStart(text, "\"")-->Line_11 $$ text = text.substring(0, text.length() - 3)[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_11 $$ text = text.substring(0, text.length() - 3)[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_22 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "", "\"$", buffer)[ FD ]
Line_7 $$ text = StringUtil.trimStart(text, "\"")-->Line_16 $$ text = text.substring(0, text.length() - 1)[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_3 $$ if (isFirst) [ CD ]
Line_7 $$ text = StringUtil.trimStart(text, "\"")-->Line_13 $$ text = StringUtil.trimEnd(text, "\"")[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_9 $$ if (isLast) [ CD ]
Line_5 $$ text = text.substring(3)-->Line_10 $$ if (text.endsWith("\"\"\"")) [ FD ]
Line_11 $$ text = text.substring(0, text.length() - 3)-->Line_13 $$ text = StringUtil.trimEnd(text, "\"")[ FD ]
Line_21 $$ if (text.indexOf('\n') >= 0) -->Line_22 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "", "\"$", buffer)[ CD ]
Line_5 $$ text = text.substring(3)-->Line_22 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "", "\"$", buffer)[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_25 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "'", "\"$", buffer)[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_20 $$ final StringBuilder buffer = new StringBuilder()[ CD ]
Line_20 $$ final StringBuilder buffer = new StringBuilder()-->Line_27 $$ return GrStringUtil.addQuotes(buffer.toString(), false)[ FD ]
Line_10 $$ if (text.endsWith("\"\"\"")) -->Line_13 $$ text = StringUtil.trimEnd(text, "\"")[ CD ]
Line_11 $$ text = text.substring(0, text.length() - 3)-->Line_21 $$ if (text.indexOf('\n') >= 0) [ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_5 $$ text = text.substring(3)[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_18 $$ if (text.isEmpty())[ FD ]
Line_7 $$ text = StringUtil.trimStart(text, "\"")-->Line_18 $$ if (text.isEmpty())[ FD ]
Line_10 $$ if (text.endsWith("\"\"\"")) -->Line_11 $$ text = text.substring(0, text.length() - 3)[ CD ]
Line_11 $$ text = text.substring(0, text.length() - 3)-->Line_22 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "", "\"$", buffer)[ FD ]
Line_4 $$ if (text.startsWith("\"\"\"")) -->Line_5 $$ text = text.substring(3)[ CD ]
Line_20 $$ final StringBuilder buffer = new StringBuilder()-->Line_22 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "", "\"$", buffer)[ FD ]
Line_21 $$ if (text.indexOf('\n') >= 0) -->Line_23 $$ GrStringUtil.fixAllTripleQuotes(buffer, 0)[ CD ]
Line_16 $$ text = text.substring(0, text.length() - 1)-->Line_18 $$ if (text.isEmpty())[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_13 $$ text = StringUtil.trimEnd(text, "\"")[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_18 $$ if (text.isEmpty())[ CD ]
Line_5 $$ text = text.substring(3)-->Line_16 $$ text = text.substring(0, text.length() - 1)[ FD ]
Line_16 $$ text = text.substring(0, text.length() - 1)-->Line_22 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "", "\"$", buffer)[ FD ]
Line_5 $$ text = text.substring(3)-->Line_18 $$ if (text.isEmpty())[ FD ]
Line_18 $$ if (text.isEmpty())-->Line_19 $$ return null[ CD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_10 $$ if (text.endsWith("\"\"\"")) [ FD ]
Line_13 $$ text = StringUtil.trimEnd(text, "\"")-->Line_25 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "'", "\"$", buffer)[ FD ]
Line_5 $$ text = text.substring(3)-->Line_25 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "'", "\"$", buffer)[ FD ]
Line_16 $$ text = text.substring(0, text.length() - 1)-->Line_25 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "'", "\"$", buffer)[ FD ]
Line_5 $$ text = text.substring(3)-->Line_7 $$ text = StringUtil.trimStart(text, "\"")[ FD ]
Line_13 $$ text = StringUtil.trimEnd(text, "\"")-->Line_22 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "", "\"$", buffer)[ FD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_15 $$ if (isBeforeInjection) [ CD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_27 $$ return GrStringUtil.addQuotes(buffer.toString(), false)[ CD ]
Line_7 $$ text = StringUtil.trimStart(text, "\"")-->Line_22 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "", "\"$", buffer)[ FD ]
Line_7 $$ text = StringUtil.trimStart(text, "\"")-->Line_25 $$ GrStringUtil.escapeAndUnescapeSymbols(text, "'", "\"$", buffer)[ FD ]
Line_5 $$ text = text.substring(3)-->Line_21 $$ if (text.indexOf('\n') >= 0) [ FD ]
Line_4 $$ if (text.startsWith("\"\"\"")) -->Line_7 $$ text = StringUtil.trimStart(text, "\"")[ CD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_21 $$ if (text.indexOf('\n') >= 0) [ CD ]
Line_2 $$ private static String prepareText(String text, boolean isFirst, boolean isLast, boolean isBeforeInjection) -->Line_7 $$ text = StringUtil.trimStart(text, "\"")[ FD ]
Line_20 $$ final StringBuilder buffer = new StringBuilder()-->Line_23 $$ GrStringUtil.fixAllTripleQuotes(buffer, 0)[ FD ]
