Line_15 $$ for (long l = 0; l < numLines; l++) -->Line_21 $$ output.println(pad(l, padding))[ FD ]
Line_2 $$ public void generateTextFile(FileSystem fs, Path inputFile, long numLines, Order sortOrder) throws IOException -->Line_3 $$ LOG.info("creating control file: " + numLines + " numLines, " + sortOrder + " sortOrder")[ CD ]
Line_6 $$ output = new PrintStream(fs.create(inputFile))-->Line_11 $$ output.println(pad((new Random()).nextLong(), padding))[ FD ]
Line_10 $$ for (long l = 0; l < numLines; l++) -->Line_20 $$ for (long l = numLines; l > 0; l--) [ FD ]
Line_10 $$ for (long l = 0; l < numLines; l++) -->Line_21 $$ output.println(pad(l, padding))[ FD ]
Line_2 $$ public void generateTextFile(FileSystem fs, Path inputFile, long numLines, Order sortOrder) throws IOException -->Line_10 $$ for (long l = 0; l < numLines; l++) [ FD ]
Line_4 $$ PrintStream output = null-->Line_16 $$ output.println(pad(l, padding))[ FD ]
Line_10 $$ for (long l = 0; l < numLines; l++) -->Line_16 $$ output.println(pad(l, padding))[ FD ]
Line_4 $$ PrintStream output = null-->Line_21 $$ output.println(pad(l, padding))[ FD ]
Line_15 $$ for (long l = 0; l < numLines; l++) -->Line_16 $$ output.println(pad(l, padding))[ FD ]
Line_6 $$ output = new PrintStream(fs.create(inputFile))-->Line_21 $$ output.println(pad(l, padding))[ FD ]
Line_7 $$ int padding = String.valueOf(numLines).length()-->Line_11 $$ output.println(pad((new Random()).nextLong(), padding))[ FD ]
Line_6 $$ output = new PrintStream(fs.create(inputFile))-->Line_26 $$ if (output != null)[ FD ]
Line_2 $$ public void generateTextFile(FileSystem fs, Path inputFile, long numLines, Order sortOrder) throws IOException -->Line_29 $$ LOG.info("created control file: " + inputFile)[ CD ]
Line_20 $$ for (long l = numLines; l > 0; l--) -->Line_21 $$ output.println(pad(l, padding))[ FD ]
Line_2 $$ public void generateTextFile(FileSystem fs, Path inputFile, long numLines, Order sortOrder) throws IOException -->Line_7 $$ int padding = String.valueOf(numLines).length()[ FD ]
Line_7 $$ int padding = String.valueOf(numLines).length()-->Line_16 $$ output.println(pad(l, padding))[ FD ]
Line_26 $$ if (output != null)-->Line_27 $$ output.close()[ CD ]
Line_4 $$ PrintStream output = null-->Line_6 $$ output = new PrintStream(fs.create(inputFile))[ FD ]
Line_15 $$ for (long l = 0; l < numLines; l++) -->Line_16 $$ output.println(pad(l, padding))[ CD ]
Line_2 $$ public void generateTextFile(FileSystem fs, Path inputFile, long numLines, Order sortOrder) throws IOException -->Line_15 $$ for (long l = 0; l < numLines; l++) [ FD ]
Line_10 $$ for (long l = 0; l < numLines; l++) -->Line_15 $$ for (long l = 0; l < numLines; l++) [ FD ]
Line_6 $$ output = new PrintStream(fs.create(inputFile))-->Line_27 $$ output.close()[ FD ]
Line_2 $$ public void generateTextFile(FileSystem fs, Path inputFile, long numLines, Order sortOrder) throws IOException -->Line_4 $$ PrintStream output = null[ CD ]
Line_4 $$ PrintStream output = null-->Line_11 $$ output.println(pad((new Random()).nextLong(), padding))[ FD ]
Line_4 $$ PrintStream output = null-->Line_26 $$ if (output != null)[ FD ]
Line_15 $$ for (long l = 0; l < numLines; l++) -->Line_20 $$ for (long l = numLines; l > 0; l--) [ FD ]
Line_20 $$ for (long l = numLines; l > 0; l--) -->Line_21 $$ output.println(pad(l, padding))[ CD ]
Line_2 $$ public void generateTextFile(FileSystem fs, Path inputFile, long numLines, Order sortOrder) throws IOException -->Line_6 $$ output = new PrintStream(fs.create(inputFile))[ FD ]
Line_7 $$ int padding = String.valueOf(numLines).length()-->Line_21 $$ output.println(pad(l, padding))[ FD ]
Line_4 $$ PrintStream output = null-->Line_27 $$ output.close()[ FD ]
Line_10 $$ for (long l = 0; l < numLines; l++) -->Line_11 $$ output.println(pad((new Random()).nextLong(), padding))[ CD ]
Line_6 $$ output = new PrintStream(fs.create(inputFile))-->Line_16 $$ output.println(pad(l, padding))[ FD ]
