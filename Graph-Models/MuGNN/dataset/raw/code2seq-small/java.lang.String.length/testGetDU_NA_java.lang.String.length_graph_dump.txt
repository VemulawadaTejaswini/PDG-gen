Line_12 $$ long duNotADirectoryExpected = 3 + System.getProperty("line.separator").length()-->Line_13 $$ assertEquals(duNotADirectoryExpected, duNotADirectoryActual)[ FD ]
Line_10 $$ File notADirectory = new File(partitioned, "part-r-00000")-->Line_11 $$ long duNotADirectoryActual = FileUtil.getDU(notADirectory)[ FD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_10 $$ File notADirectory = new File(partitioned, "part-r-00000")[ CD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_13 $$ assertEquals(duNotADirectoryExpected, duNotADirectoryActual)[ CD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_4 $$ long du = FileUtil.getDU(TEST_DIR)[ CD ]
Line_5 $$ final long expected = 2 * (3 + System.getProperty("line.separator").length())-->Line_22 $$ assertEquals(expected, du3)[ FD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_5 $$ final long expected = 2 * (3 + System.getProperty("line.separator").length())[ CD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_11 $$ long duNotADirectoryActual = FileUtil.getDU(notADirectory)[ CD ]
Line_11 $$ long duNotADirectoryActual = FileUtil.getDU(notADirectory)-->Line_13 $$ assertEquals(duNotADirectoryExpected, duNotADirectoryActual)[ FD ]
Line_4 $$ long du = FileUtil.getDU(TEST_DIR)-->Line_6 $$ Assert.assertEquals(expected, du)[ FD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_8 $$ long duDoesNotExist = FileUtil.getDU(doesNotExist)[ CD ]
Line_21 $$ final long du3 = FileUtil.getDU(partitioned)-->Line_22 $$ assertEquals(expected, du3)[ FD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_3 $$ setupDirs()[ CD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_6 $$ Assert.assertEquals(expected, du)[ CD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_12 $$ long duNotADirectoryExpected = 3 + System.getProperty("line.separator").length()[ CD ]
Line_29 $$ final long du4 = FileUtil.getDU(partitioned)-->Line_30 $$ assertEquals(0, du4)[ FD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_7 $$ final File doesNotExist = new File(tmp, "QuickBrownFoxJumpsOverTheLazyDog")[ CD ]
Line_8 $$ long duDoesNotExist = FileUtil.getDU(doesNotExist)-->Line_9 $$ assertEquals(0, duDoesNotExist)[ FD ]
Line_7 $$ final File doesNotExist = new File(tmp, "QuickBrownFoxJumpsOverTheLazyDog")-->Line_8 $$ long duDoesNotExist = FileUtil.getDU(doesNotExist)[ FD ]
Line_5 $$ final long expected = 2 * (3 + System.getProperty("line.separator").length())-->Line_6 $$ Assert.assertEquals(expected, du)[ FD ]
Line_10 $$ File notADirectory = new File(partitioned, "part-r-00000")-->Line_16 $$ FileUtil.chmod(notADirectory.getAbsolutePath(), "0000")[ FD ]
Line_2 $$ public void testGetDU() throws Exception -->Line_9 $$ assertEquals(0, duDoesNotExist)[ CD ]
Line_10 $$ File notADirectory = new File(partitioned, "part-r-00000")-->Line_20 $$ assertFalse(FileUtil.canRead(notADirectory))[ FD ]
