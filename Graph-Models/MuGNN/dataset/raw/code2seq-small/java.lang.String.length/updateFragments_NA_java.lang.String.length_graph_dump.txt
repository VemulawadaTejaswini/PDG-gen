Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_9 $$ CharSequence newReplacement = myPsiText.subSequence(documentToPsiOffset(newFragment.getStartOffset(), false), documentToPsiOffset(newFragment.getEndOffset(), true) + replace.length() - (end - start))[ CD ]
Line_4 $$ int docEnd = psiToDocumentOffset(end)-->Line_6 $$ TextRange endRange = findFragment(docEnd)[ FD ]
Line_11 $$ if (iterator.next().intersects(newFragment)) -->Line_12 $$ iterator.remove()[ CD ]
Line_10 $$ for (Iterator<TextRange> iterator = myAffectedFragments.keySet().iterator(); iterator.hasNext(); ) -->Line_12 $$ iterator.remove()[ FD ]
Line_3 $$ int docStart = psiToDocumentOffset(start)-->Line_5 $$ TextRange startRange = findFragment(docStart)[ FD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_4 $$ int docEnd = psiToDocumentOffset(end)[ CD ]
Line_9 $$ CharSequence newReplacement = myPsiText.subSequence(documentToPsiOffset(newFragment.getStartOffset(), false), documentToPsiOffset(newFragment.getEndOffset(), true) + replace.length() - (end - start))-->Line_15 $$ myAffectedFragments.put(newFragment, newReplacement)[ FD ]
Line_8 $$ TextRange newFragment = new TextRange(startRange != null ? startRange.getStartOffset() : docStart, endRange != null ? endRange.getEndOffset() : docEnd)-->Line_9 $$ CharSequence newReplacement = myPsiText.subSequence(documentToPsiOffset(newFragment.getStartOffset(), false), documentToPsiOffset(newFragment.getEndOffset(), true) + replace.length() - (end - start))[ FD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_9 $$ CharSequence newReplacement = myPsiText.subSequence(documentToPsiOffset(newFragment.getStartOffset(), false), documentToPsiOffset(newFragment.getEndOffset(), true) + replace.length() - (end - start))[ FD ]
Line_6 $$ TextRange endRange = findFragment(docEnd)-->Line_8 $$ TextRange newFragment = new TextRange(startRange != null ? startRange.getStartOffset() : docStart, endRange != null ? endRange.getEndOffset() : docEnd)[ FD ]
Line_8 $$ TextRange newFragment = new TextRange(startRange != null ? startRange.getStartOffset() : docStart, endRange != null ? endRange.getEndOffset() : docEnd)-->Line_15 $$ myAffectedFragments.put(newFragment, newReplacement)[ FD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_3 $$ int docStart = psiToDocumentOffset(start)[ CD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_10 $$ for (Iterator<TextRange> iterator = myAffectedFragments.keySet().iterator(); iterator.hasNext(); ) [ CD ]
Line_10 $$ for (Iterator<TextRange> iterator = myAffectedFragments.keySet().iterator(); iterator.hasNext(); ) -->Line_11 $$ if (iterator.next().intersects(newFragment)) [ CD ]
Line_5 $$ TextRange startRange = findFragment(docStart)-->Line_8 $$ TextRange newFragment = new TextRange(startRange != null ? startRange.getStartOffset() : docStart, endRange != null ? endRange.getEndOffset() : docEnd)[ FD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_7 $$ myPsiText = myPsiText.delete(start, end).insert(start, replace)[ FD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_8 $$ TextRange newFragment = new TextRange(startRange != null ? startRange.getStartOffset() : docStart, endRange != null ? endRange.getEndOffset() : docEnd)[ CD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_15 $$ myAffectedFragments.put(newFragment, newReplacement)[ CD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_6 $$ TextRange endRange = findFragment(docEnd)[ CD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_3 $$ int docStart = psiToDocumentOffset(start)[ FD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_5 $$ TextRange startRange = findFragment(docStart)[ CD ]
Line_10 $$ for (Iterator<TextRange> iterator = myAffectedFragments.keySet().iterator(); iterator.hasNext(); ) -->Line_11 $$ if (iterator.next().intersects(newFragment)) [ FD ]
Line_8 $$ TextRange newFragment = new TextRange(startRange != null ? startRange.getStartOffset() : docStart, endRange != null ? endRange.getEndOffset() : docEnd)-->Line_11 $$ if (iterator.next().intersects(newFragment)) [ FD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_7 $$ myPsiText = myPsiText.delete(start, end).insert(start, replace)[ CD ]
Line_2 $$ private void updateFragments(int start, int end, @NotNull String replace) -->Line_4 $$ int docEnd = psiToDocumentOffset(end)[ FD ]
