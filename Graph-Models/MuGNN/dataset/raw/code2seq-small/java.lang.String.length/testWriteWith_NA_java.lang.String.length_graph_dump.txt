Line_5 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_8 $$ String contentType = mockHttpServletResponse.getContentType()[ FD ]
Line_5 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_7 $$ ServletResponseUtil.write(_request, mockHttpServletResponse, "filename.txt", ranges, inputStream, content.length, "text/plain")[ FD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_23 $$ Assert.assertTrue(Validator.isNull(lines[2]))[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_18 $$ for (int i = 0; i < ranges.size(); i++) [ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_17 $$ Assert.assertEquals(StringPool.DOUBLE_DASH, responseBodies[ranges.size() + 1])[ CD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_22 $$ Assert.assertEquals("Content-Range: " + range.getContentRange(), lines[1])[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_6 $$ mockHttpServletResponse.setCharacterEncoding(StringPool.UTF8)[ CD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_26 $$ byte[] bytes = ArrayUtil.subset(content, start, end + 1)[ CD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_19 $$ Range range = ranges.get(i)[ FD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_4 $$ List<Range> ranges = ServletResponseUtil.getRanges(_request, _response, content.length)[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_11 $$ String responseBody = mockHttpServletResponse.getContentAsString()[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_26 $$ byte[] bytes = ArrayUtil.subset(content, start, end + 1)[ FD ]
Line_24 $$ int start = (int) range.getStart()-->Line_26 $$ byte[] bytes = ArrayUtil.subset(content, start, end + 1)[ FD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_25 $$ int end = (int) range.getEnd()[ CD ]
Line_11 $$ String responseBody = mockHttpServletResponse.getContentAsString()-->Line_13 $$ Assert.assertTrue(responseBody.endsWith("--" + boundary + "--\r\n"))[ FD ]
Line_4 $$ List<Range> ranges = ServletResponseUtil.getRanges(_request, _response, content.length)-->Line_7 $$ ServletResponseUtil.write(_request, mockHttpServletResponse, "filename.txt", ranges, inputStream, content.length, "text/plain")[ FD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_14 $$ String[] responseBodies = StringUtil.split(responseBody, boundary)[ CD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_20 $$ String[] lines = StringUtil.split(responseBodies[i + 1], StringPool.RETURN_NEW_LINE)[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_7 $$ ServletResponseUtil.write(_request, mockHttpServletResponse, "filename.txt", ranges, inputStream, content.length, "text/plain")[ CD ]
Line_8 $$ String contentType = mockHttpServletResponse.getContentType()-->Line_10 $$ String boundary = contentType.substring(_CONTENT_TYPE_BOUNDARY_PREFACE.length())[ FD ]
Line_4 $$ List<Range> ranges = ServletResponseUtil.getRanges(_request, _response, content.length)-->Line_15 $$ Assert.assertEquals(ranges.size() + 2, responseBodies.length)[ FD ]
Line_11 $$ String responseBody = mockHttpServletResponse.getContentAsString()-->Line_14 $$ String[] responseBodies = StringUtil.split(responseBody, boundary)[ FD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_15 $$ Assert.assertEquals(ranges.size() + 2, responseBodies.length)[ CD ]
Line_19 $$ Range range = ranges.get(i)-->Line_22 $$ Assert.assertEquals("Content-Range: " + range.getContentRange(), lines[1])[ FD ]
Line_4 $$ List<Range> ranges = ServletResponseUtil.getRanges(_request, _response, content.length)-->Line_18 $$ for (int i = 0; i < ranges.size(); i++) [ FD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_16 $$ Assert.assertEquals(StringPool.DOUBLE_DASH, responseBodies[0])[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_13 $$ Assert.assertTrue(responseBody.endsWith("--" + boundary + "--\r\n"))[ CD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_24 $$ int start = (int) range.getStart()[ CD ]
Line_4 $$ List<Range> ranges = ServletResponseUtil.getRanges(_request, _response, content.length)-->Line_19 $$ Range range = ranges.get(i)[ FD ]
Line_19 $$ Range range = ranges.get(i)-->Line_24 $$ int start = (int) range.getStart()[ FD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_28 $$ Assert.assertEquals(StringPool.DOUBLE_DASH, lines[4])[ CD ]
Line_5 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_11 $$ String responseBody = mockHttpServletResponse.getContentAsString()[ FD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_10 $$ String boundary = contentType.substring(_CONTENT_TYPE_BOUNDARY_PREFACE.length())[ CD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_27 $$ Assert.assertArrayEquals(bytes, lines[3].getBytes("UTF-8"))[ CD ]
Line_8 $$ String contentType = mockHttpServletResponse.getContentType()-->Line_9 $$ Assert.assertTrue(contentType.startsWith(_CONTENT_TYPE_BOUNDARY_PREFACE))[ FD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_19 $$ Range range = ranges.get(i)[ CD ]
Line_19 $$ Range range = ranges.get(i)-->Line_25 $$ int end = (int) range.getEnd()[ FD ]
Line_11 $$ String responseBody = mockHttpServletResponse.getContentAsString()-->Line_12 $$ Assert.assertTrue(responseBody.startsWith("\r\n--" + boundary + "\r\n"))[ FD ]
Line_26 $$ byte[] bytes = ArrayUtil.subset(content, start, end + 1)-->Line_27 $$ Assert.assertArrayEquals(bytes, lines[3].getBytes("UTF-8"))[ FD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_5 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()[ CD ]
Line_5 $$ MockHttpServletResponse mockHttpServletResponse = new MockHttpServletResponse()-->Line_6 $$ mockHttpServletResponse.setCharacterEncoding(StringPool.UTF8)[ FD ]
Line_10 $$ String boundary = contentType.substring(_CONTENT_TYPE_BOUNDARY_PREFACE.length())-->Line_14 $$ String[] responseBodies = StringUtil.split(responseBody, boundary)[ FD ]
Line_18 $$ for (int i = 0; i < ranges.size(); i++) -->Line_21 $$ Assert.assertEquals("Content-Type: text/plain", lines[0])[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_8 $$ String contentType = mockHttpServletResponse.getContentType()[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_9 $$ Assert.assertTrue(contentType.startsWith(_CONTENT_TYPE_BOUNDARY_PREFACE))[ CD ]
Line_4 $$ List<Range> ranges = ServletResponseUtil.getRanges(_request, _response, content.length)-->Line_17 $$ Assert.assertEquals(StringPool.DOUBLE_DASH, responseBodies[ranges.size() + 1])[ FD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_3 $$ setUpRange(_request, "bytes=0-9,980-989,980-999,990-999")[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_12 $$ Assert.assertTrue(responseBody.startsWith("\r\n--" + boundary + "\r\n"))[ CD ]
Line_2 $$ protected void testWriteWith(InputStream inputStream, byte[] content) throws IOException -->Line_7 $$ ServletResponseUtil.write(_request, mockHttpServletResponse, "filename.txt", ranges, inputStream, content.length, "text/plain")[ FD ]
