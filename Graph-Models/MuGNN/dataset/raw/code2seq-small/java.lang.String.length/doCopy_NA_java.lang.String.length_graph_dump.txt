Line_14 $$ if (sourceRootForFile == null) -->Line_24 $$ CopyFilesOrDirectoriesHandler.copyAsFiles(files.toArray(new PsiElement[files.size()]), defaultTargetDirectory, project)[ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()[ FD ]
Line_15 $$ final List<PsiElement> files = new ArrayList<PsiElement>()-->Line_24 $$ CopyFilesOrDirectoriesHandler.copyAsFiles(files.toArray(new PsiElement[files.size()]), defaultTargetDirectory, project)[ FD ]
Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)-->Line_60 $$ final PsiClass[] psiClasses = classes.values().iterator().next()[ FD ]
Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()-->Line_12 $$ Project project = defaultTargetDirectory.getProject()[ FD ]
Line_44 $$ if (dialog.showAndGet()) -->Line_47 $$ className = dialog.getClassName()[ CD ]
Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)-->Line_58 $$ PsiElement[] files = PsiUtilCore.toPsiFileArray(classes.keySet())[ FD ]
Line_56 $$ if (defaultTargetDirectory == null)-->Line_57 $$ return[ CD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_69 $$ openInEditor = dialog.openInEditor()[ FD ]
Line_32 $$ if (copyOneClass(classes)) -->Line_52 $$ if (ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_4 $$ final HashMap<PsiFile, String> relativePathsMap = new HashMap<PsiFile, String>()[ CD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_36 $$ final String qualifiedName = super.getQualifiedName()[ CD ]
Line_48 $$ if (className == null || className.length() == 0)-->Line_49 $$ return[ CD ]
Line_32 $$ if (copyOneClass(classes)) -->Line_44 $$ if (dialog.showAndGet()) [ CD ]
Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)-->Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) [ FD ]
Line_44 $$ if (dialog.showAndGet()) -->Line_46 $$ targetDirectory = dialog.getTargetDirectory()[ CD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_40 $$ return qualifiedName[ CD ]
Line_44 $$ if (dialog.showAndGet()) -->Line_45 $$ openInEditor = dialog.openInEditor()[ CD ]
Line_59 $$ if (classes.keySet().size() == 1) -->Line_60 $$ final PsiClass[] psiClasses = classes.values().iterator().next()[ CD ]
Line_13 $$ VirtualFile sourceRootForFile = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(defaultTargetDirectory.getVirtualFile())-->Line_14 $$ if (sourceRootForFile == null) [ FD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_37 $$ if (commonPath != null && !commonPath.isEmpty() && !qualifiedName.endsWith(commonPath)) [ CD ]
Line_18 $$ if (containingFile != null) -->Line_19 $$ files.add(containingFile)[ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_28 $$ Project project = defaultTargetDirectory.getProject()[ CD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_66 $$ if (dialog.showAndGet()) [ FD ]
Line_4 $$ final HashMap<PsiFile, String> relativePathsMap = new HashMap<PsiFile, String>()-->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ FD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_44 $$ if (dialog.showAndGet()) [ FD ]
Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()-->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ FD ]
Line_15 $$ final List<PsiElement> files = new ArrayList<PsiElement>()-->Line_21 $$ files.add(elements[i])[ FD ]
Line_17 $$ PsiFile containingFile = elements[i].getContainingFile()-->Line_18 $$ if (containingFile != null) [ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_24 $$ CopyFilesOrDirectoriesHandler.copyAsFiles(files.toArray(new PsiElement[files.size()]), defaultTargetDirectory, project)[ FD ]
Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)-->Line_32 $$ if (copyOneClass(classes)) [ FD ]
Line_44 $$ if (dialog.showAndGet()) -->Line_48 $$ if (className == null || className.length() == 0)[ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_73 $$ if (targetDirectory != null) [ CD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_67 $$ targetDirectory = dialog.getTargetDirectory()[ FD ]
Line_32 $$ if (copyOneClass(classes)) -->Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) [ CD ]
Line_59 $$ if (classes.keySet().size() == 1) -->Line_61 $$ if (psiClasses != null) [ CD ]
Line_8 $$ final PsiFile psiFile = classes.keySet().iterator().next()-->Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()[ FD ]
Line_30 $$ String className = null-->Line_48 $$ if (className == null || className.length() == 0)[ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_31 $$ boolean openInEditor = true[ CD ]
Line_4 $$ final HashMap<PsiFile, String> relativePathsMap = new HashMap<PsiFile, String>()-->Line_33 $$ final String commonPath = ArrayUtilRt.find(elements, classes.values().iterator().next()) == -1 ? normalizeRelativeMap(relativePathsMap) : null[ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)[ CD ]
Line_36 $$ final String qualifiedName = super.getQualifiedName()-->Line_37 $$ if (commonPath != null && !commonPath.isEmpty() && !qualifiedName.endsWith(commonPath)) [ FD ]
Line_30 $$ String className = null-->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ FD ]
Line_12 $$ Project project = defaultTargetDirectory.getProject()-->Line_13 $$ VirtualFile sourceRootForFile = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(defaultTargetDirectory.getVirtualFile())[ FD ]
Line_17 $$ PsiFile containingFile = elements[i].getContainingFile()-->Line_19 $$ files.add(containingFile)[ FD ]
Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()-->Line_56 $$ if (defaultTargetDirectory == null)[ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_56 $$ if (defaultTargetDirectory == null)[ FD ]
Line_20 $$ if (elements[i] instanceof PsiDirectory) -->Line_21 $$ files.add(elements[i])[ CD ]
Line_32 $$ if (copyOneClass(classes)) -->Line_33 $$ final String commonPath = ArrayUtilRt.find(elements, classes.values().iterator().next()) == -1 ? normalizeRelativeMap(relativePathsMap) : null[ CD ]
Line_32 $$ if (copyOneClass(classes)) -->Line_43 $$ dialog.setTitle(RefactoringBundle.message("copy.handler.copy.class"))[ CD ]
Line_4 $$ final HashMap<PsiFile, String> relativePathsMap = new HashMap<PsiFile, String>()-->Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)[ FD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_46 $$ targetDirectory = dialog.getTargetDirectory()[ FD ]
Line_37 $$ if (commonPath != null && !commonPath.isEmpty() && !qualifiedName.endsWith(commonPath)) -->Line_38 $$ return StringUtil.getQualifiedName(qualifiedName, commonPath.replaceAll("/", "."))[ CD ]
Line_33 $$ final String commonPath = ArrayUtilRt.find(elements, classes.values().iterator().next()) == -1 ? normalizeRelativeMap(relativePathsMap) : null-->Line_38 $$ return StringUtil.getQualifiedName(qualifiedName, commonPath.replaceAll("/", "."))[ FD ]
Line_66 $$ if (dialog.showAndGet()) -->Line_68 $$ className = dialog.getNewName()[ CD ]
Line_29 $$ Object targetDirectory = null-->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ FD ]
Line_31 $$ boolean openInEditor = true-->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ FD ]
Line_7 $$ if (defaultTargetDirectory == null) -->Line_13 $$ VirtualFile sourceRootForFile = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(defaultTargetDirectory.getVirtualFile())[ CD ]
Line_7 $$ if (defaultTargetDirectory == null) -->Line_12 $$ Project project = defaultTargetDirectory.getProject()[ CD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_47 $$ className = dialog.getClassName()[ FD ]
Line_7 $$ if (defaultTargetDirectory == null) -->Line_8 $$ final PsiFile psiFile = classes.keySet().iterator().next()[ CD ]
Line_52 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_56 $$ if (defaultTargetDirectory == null)[ CD ]
Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)-->Line_33 $$ final String commonPath = ArrayUtilRt.find(elements, classes.values().iterator().next()) == -1 ? normalizeRelativeMap(relativePathsMap) : null[ FD ]
Line_66 $$ if (dialog.showAndGet()) -->Line_69 $$ openInEditor = dialog.openInEditor()[ CD ]
Line_14 $$ if (sourceRootForFile == null) -->Line_15 $$ final List<PsiElement> files = new ArrayList<PsiElement>()[ CD ]
Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()-->Line_28 $$ Project project = defaultTargetDirectory.getProject()[ FD ]
Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()-->Line_55 $$ defaultTargetDirectory = CopyFilesOrDirectoriesHandler.resolveDirectory(defaultTargetDirectory)[ FD ]
Line_52 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_59 $$ if (classes.keySet().size() == 1) [ CD ]
Line_52 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_58 $$ PsiElement[] files = PsiUtilCore.toPsiFileArray(classes.keySet())[ CD ]
Line_36 $$ final String qualifiedName = super.getQualifiedName()-->Line_38 $$ return StringUtil.getQualifiedName(qualifiedName, commonPath.replaceAll("/", "."))[ FD ]
Line_16 $$ for (int i = 0, elementsLength = elements.length; i < elementsLength; i++) -->Line_18 $$ if (containingFile != null) [ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_28 $$ Project project = defaultTargetDirectory.getProject()[ FD ]
Line_29 $$ Object targetDirectory = null-->Line_73 $$ if (targetDirectory != null) [ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)[ FD ]
Line_33 $$ final String commonPath = ArrayUtilRt.find(elements, classes.values().iterator().next()) == -1 ? normalizeRelativeMap(relativePathsMap) : null-->Line_37 $$ if (commonPath != null && !commonPath.isEmpty() && !qualifiedName.endsWith(commonPath)) [ FD ]
Line_7 $$ if (defaultTargetDirectory == null) -->Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()[ CD ]
Line_16 $$ for (int i = 0, elementsLength = elements.length; i < elementsLength; i++) -->Line_17 $$ PsiFile containingFile = elements[i].getContainingFile()[ CD ]
Line_52 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_55 $$ defaultTargetDirectory = CopyFilesOrDirectoriesHandler.resolveDirectory(defaultTargetDirectory)[ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_30 $$ String className = null[ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_32 $$ if (copyOneClass(classes)) [ CD ]
Line_7 $$ if (defaultTargetDirectory == null) -->Line_14 $$ if (sourceRootForFile == null) [ CD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_43 $$ dialog.setTitle(RefactoringBundle.message("copy.handler.copy.class"))[ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_55 $$ defaultTargetDirectory = CopyFilesOrDirectoriesHandler.resolveDirectory(defaultTargetDirectory)[ FD ]
Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)-->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ FD ]
Line_18 $$ if (containingFile != null) -->Line_20 $$ if (elements[i] instanceof PsiDirectory) [ CD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_68 $$ className = dialog.getNewName()[ FD ]
Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)-->Line_59 $$ if (classes.keySet().size() == 1) [ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_13 $$ VirtualFile sourceRootForFile = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(defaultTargetDirectory.getVirtualFile())[ FD ]
Line_7 $$ if (defaultTargetDirectory == null) -->Line_10 $$ LOG.assertTrue(defaultTargetDirectory != null, psiFile)[ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ FD ]
Line_52 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_66 $$ if (dialog.showAndGet()) [ CD ]
Line_12 $$ Project project = defaultTargetDirectory.getProject()-->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ FD ]
Line_8 $$ final PsiFile psiFile = classes.keySet().iterator().next()-->Line_10 $$ LOG.assertTrue(defaultTargetDirectory != null, psiFile)[ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_7 $$ if (defaultTargetDirectory == null) [ FD ]
Line_14 $$ if (sourceRootForFile == null) -->Line_16 $$ for (int i = 0, elementsLength = elements.length; i < elementsLength; i++) [ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_3 $$ FeatureUsageTracker.getInstance().triggerFeatureUsed("refactoring.copyClass")[ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_33 $$ final String commonPath = ArrayUtilRt.find(elements, classes.values().iterator().next()) == -1 ? normalizeRelativeMap(relativePathsMap) : null[ FD ]
Line_5 $$ final Map<PsiFile, PsiClass[]> classes = convertToTopLevelClasses(elements, false, "", relativePathsMap)-->Line_8 $$ final PsiFile psiFile = classes.keySet().iterator().next()[ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_12 $$ Project project = defaultTargetDirectory.getProject()[ FD ]
Line_15 $$ final List<PsiElement> files = new ArrayList<PsiElement>()-->Line_19 $$ files.add(containingFile)[ FD ]
Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()-->Line_13 $$ VirtualFile sourceRootForFile = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(defaultTargetDirectory.getVirtualFile())[ FD ]
Line_34 $$ CopyClassDialog dialog = new CopyClassDialog(classes.values().iterator().next()[0], defaultTargetDirectory, project, false) -->Line_45 $$ openInEditor = dialog.openInEditor()[ FD ]
Line_73 $$ if (targetDirectory != null) -->Line_74 $$ copyClassesImpl(className, project, classes, relativePathsMap, targetDirectory, defaultTargetDirectory, RefactoringBundle.message("copy.handler.copy.class"), false, openInEditor)[ CD ]
Line_12 $$ Project project = defaultTargetDirectory.getProject()-->Line_24 $$ CopyFilesOrDirectoriesHandler.copyAsFiles(files.toArray(new PsiElement[files.size()]), defaultTargetDirectory, project)[ FD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_7 $$ if (defaultTargetDirectory == null) [ CD ]
Line_9 $$ defaultTargetDirectory = psiFile.getContainingDirectory()-->Line_24 $$ CopyFilesOrDirectoriesHandler.copyAsFiles(files.toArray(new PsiElement[files.size()]), defaultTargetDirectory, project)[ FD ]
Line_14 $$ if (sourceRootForFile == null) -->Line_25 $$ return[ CD ]
Line_2 $$ public void doCopy(PsiElement[] elements, PsiDirectory defaultTargetDirectory) -->Line_29 $$ Object targetDirectory = null[ CD ]
Line_66 $$ if (dialog.showAndGet()) -->Line_67 $$ targetDirectory = dialog.getTargetDirectory()[ CD ]
