Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_3 $$ List<SqlFunction> candidates = functions.get(name).stream().filter( function -> function.getSignature().getKind() == SCALAR || (function.getSignature().getKind() == APPROXIMATE_AGGREGATE) == approximate).collect(toImmutableList())[ CD ]
Line_6 $$ for (SqlFunction function : candidates) -->Line_24 $$ expectedParameters.add(format("%s(%s) %s", name, Joiner.on(", ").join(function.getSignature().getArgumentTypes()), Joiner.on(", ").join(function.getSignature().getTypeParameters())))[ FD ]
Line_34 $$ Type type = typeManager.getType(parseTypeSignature(typeName))-->Line_35 $$ requireNonNull(type, format("Type %s not registered", typeName))[ FD ]
Line_8 $$ if (signature != null) -->Line_10 $$ match = signature[ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_30 $$ message = format("Unexpected parameters (%s) for function %s. Expected: %s", parameters, name, expected)[ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_36 $$ checkArgument(parameterTypes.size() == 1, "Expected one argument to literal function, but got %s", parameterTypes)[ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_22 $$ List<String> expectedParameters = new ArrayList()[ CD ]
Line_5 $$ Signature match = null-->Line_13 $$ if (match != null) [ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_27 $$ String message = format("Function %s not registered", name)[ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_26 $$ String parameters = Joiner.on(", ").join(parameterTypes)[ CD ]
Line_27 $$ String message = format("Function %s not registered", name)-->Line_30 $$ message = format("Unexpected parameters (%s) for function %s. Expected: %s", parameters, name, expected)[ FD ]
Line_37 $$ Type parameterType = typeManager.getType(parameterTypes.get(0))-->Line_38 $$ requireNonNull(parameterType, format("Type %s not found", parameterTypes.get(0)))[ FD ]
Line_5 $$ Signature match = null-->Line_10 $$ match = signature[ FD ]
Line_43 $$ if (fieldReference != null) -->Line_44 $$ return bindSignature(fieldReference.getSignature(), resolvedTypes, true, typeManager)[ CD ]
Line_18 $$ if (signature != null) -->Line_19 $$ return signature[ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_28 $$ if (!expectedParameters.isEmpty()) [ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_37 $$ Type parameterType = typeManager.getType(parameterTypes.get(0))[ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_42 $$ SqlFunction fieldReference = getRowFieldReference(name.getSuffix(), parameterTypes.get(0))[ FD ]
Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) -->Line_37 $$ Type parameterType = typeManager.getType(parameterTypes.get(0))[ CD ]
Line_33 $$ String typeName = name.getSuffix().substring(MAGIC_LITERAL_FUNCTION_PREFIX.length())-->Line_35 $$ requireNonNull(type, format("Type %s not registered", typeName))[ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_4 $$ List<Type> resolvedTypes = resolveTypes(parameterTypes, typeManager)[ CD ]
Line_7 $$ Signature signature = bindSignature(function.getSignature(), resolvedTypes, false, typeManager)-->Line_8 $$ if (signature != null) [ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_9 $$ checkArgument(match == null, "Ambiguous call to %s with parameters %s", name, parameterTypes)[ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_27 $$ String message = format("Function %s not registered", name)[ FD ]
Line_42 $$ SqlFunction fieldReference = getRowFieldReference(name.getSuffix(), parameterTypes.get(0))-->Line_43 $$ if (fieldReference != null) [ FD ]
Line_8 $$ if (signature != null) -->Line_9 $$ checkArgument(match == null, "Ambiguous call to %s with parameters %s", name, parameterTypes)[ CD ]
Line_7 $$ Signature signature = bindSignature(function.getSignature(), resolvedTypes, false, typeManager)-->Line_18 $$ if (signature != null) [ FD ]
Line_7 $$ Signature signature = bindSignature(function.getSignature(), resolvedTypes, false, typeManager)-->Line_10 $$ match = signature[ FD ]
Line_42 $$ SqlFunction fieldReference = getRowFieldReference(name.getSuffix(), parameterTypes.get(0))-->Line_44 $$ return bindSignature(fieldReference.getSignature(), resolvedTypes, true, typeManager)[ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_41 $$ if (parameterTypes.size() == 1 && parameterTypes.get(0).getBase().equals(StandardTypes.ROW)) [ CD ]
Line_41 $$ if (parameterTypes.size() == 1 && parameterTypes.get(0).getBase().equals(StandardTypes.ROW)) -->Line_43 $$ if (fieldReference != null) [ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_5 $$ Signature match = null[ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_33 $$ String typeName = name.getSuffix().substring(MAGIC_LITERAL_FUNCTION_PREFIX.length())[ FD ]
Line_26 $$ String parameters = Joiner.on(", ").join(parameterTypes)-->Line_30 $$ message = format("Unexpected parameters (%s) for function %s. Expected: %s", parameters, name, expected)[ FD ]
Line_28 $$ if (!expectedParameters.isEmpty()) -->Line_29 $$ String expected = Joiner.on(", ").join(expectedParameters)[ CD ]
Line_29 $$ String expected = Joiner.on(", ").join(expectedParameters)-->Line_30 $$ message = format("Unexpected parameters (%s) for function %s. Expected: %s", parameters, name, expected)[ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) [ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_38 $$ requireNonNull(parameterType, format("Type %s not found", parameterTypes.get(0)))[ FD ]
Line_22 $$ List<String> expectedParameters = new ArrayList()-->Line_29 $$ String expected = Joiner.on(", ").join(expectedParameters)[ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_13 $$ if (match != null) [ CD ]
Line_41 $$ if (parameterTypes.size() == 1 && parameterTypes.get(0).getBase().equals(StandardTypes.ROW)) -->Line_42 $$ SqlFunction fieldReference = getRowFieldReference(name.getSuffix(), parameterTypes.get(0))[ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_3 $$ List<SqlFunction> candidates = functions.get(name).stream().filter( function -> function.getSignature().getKind() == SCALAR || (function.getSignature().getKind() == APPROXIMATE_AGGREGATE) == approximate).collect(toImmutableList())[ FD ]
Line_4 $$ List<Type> resolvedTypes = resolveTypes(parameterTypes, typeManager)-->Line_7 $$ Signature signature = bindSignature(function.getSignature(), resolvedTypes, false, typeManager)[ FD ]
Line_28 $$ if (!expectedParameters.isEmpty()) -->Line_30 $$ message = format("Unexpected parameters (%s) for function %s. Expected: %s", parameters, name, expected)[ CD ]
Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) -->Line_34 $$ Type type = typeManager.getType(parseTypeSignature(typeName))[ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_24 $$ expectedParameters.add(format("%s(%s) %s", name, Joiner.on(", ").join(function.getSignature().getArgumentTypes()), Joiner.on(", ").join(function.getSignature().getTypeParameters())))[ FD ]
Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) -->Line_36 $$ checkArgument(parameterTypes.size() == 1, "Expected one argument to literal function, but got %s", parameterTypes)[ CD ]
Line_22 $$ List<String> expectedParameters = new ArrayList()-->Line_28 $$ if (!expectedParameters.isEmpty()) [ FD ]
Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) -->Line_38 $$ requireNonNull(parameterType, format("Type %s not found", parameterTypes.get(0)))[ CD ]
Line_33 $$ String typeName = name.getSuffix().substring(MAGIC_LITERAL_FUNCTION_PREFIX.length())-->Line_34 $$ Type type = typeManager.getType(parseTypeSignature(typeName))[ FD ]
Line_10 $$ match = signature-->Line_13 $$ if (match != null) [ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_41 $$ if (parameterTypes.size() == 1 && parameterTypes.get(0).getBase().equals(StandardTypes.ROW)) [ FD ]
Line_4 $$ List<Type> resolvedTypes = resolveTypes(parameterTypes, typeManager)-->Line_44 $$ return bindSignature(fieldReference.getSignature(), resolvedTypes, true, typeManager)[ FD ]
Line_4 $$ List<Type> resolvedTypes = resolveTypes(parameterTypes, typeManager)-->Line_17 $$ Signature signature = bindSignature(function.getSignature(), resolvedTypes, true, typeManager)[ FD ]
Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) -->Line_35 $$ requireNonNull(type, format("Type %s not registered", typeName))[ CD ]
Line_13 $$ if (match != null) -->Line_14 $$ return match[ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_4 $$ List<Type> resolvedTypes = resolveTypes(parameterTypes, typeManager)[ FD ]
Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) -->Line_33 $$ String typeName = name.getSuffix().substring(MAGIC_LITERAL_FUNCTION_PREFIX.length())[ CD ]
Line_22 $$ List<String> expectedParameters = new ArrayList()-->Line_24 $$ expectedParameters.add(format("%s(%s) %s", name, Joiner.on(", ").join(function.getSignature().getArgumentTypes()), Joiner.on(", ").join(function.getSignature().getTypeParameters())))[ FD ]
Line_6 $$ for (SqlFunction function : candidates) -->Line_7 $$ Signature signature = bindSignature(function.getSignature(), resolvedTypes, false, typeManager)[ FD ]
Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) -->Line_39 $$ return getMagicLiteralFunctionSignature(type)[ CD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_32 $$ if (name.getSuffix().startsWith(MAGIC_LITERAL_FUNCTION_PREFIX)) [ FD ]
Line_2 $$ public Signature resolveFunction(QualifiedName name, List<TypeSignature> parameterTypes, boolean approximate) -->Line_26 $$ String parameters = Joiner.on(", ").join(parameterTypes)[ FD ]
Line_6 $$ for (SqlFunction function : candidates) -->Line_17 $$ Signature signature = bindSignature(function.getSignature(), resolvedTypes, true, typeManager)[ FD ]
Line_34 $$ Type type = typeManager.getType(parseTypeSignature(typeName))-->Line_39 $$ return getMagicLiteralFunctionSignature(type)[ FD ]
