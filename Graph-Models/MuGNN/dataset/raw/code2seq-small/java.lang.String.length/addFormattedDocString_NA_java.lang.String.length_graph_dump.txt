Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_11 $$ final String[] lines = removeCommonIndentation(docstring)[ CD ]
Line_19 $$ if (isFirstLine) -->Line_22 $$ result.add(BR)[ CD ]
Line_28 $$ if (leadingTabs > 0) -->Line_29 $$ line = StringUtil.repeatSymbol(' ', tabSize * leadingTabs) + line.substring(leadingTabs)[ CD ]
Line_25 $$ while (leadingTabs < line.length() && line.charAt(leadingTabs) == '\t') -->Line_26 $$ leadingTabs++[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_4 $$ final List<String> formatted = PyStructuredDocstringFormatter.formatDocstring(element, docstring)[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_6 $$ unformattedOutput.add(formatted)[ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_14 $$ final int tabSize = CodeStyleSettingsManager.getSettings(project).getTabSize(PythonFileType.INSTANCE)[ CD ]
Line_24 $$ int leadingTabs = 0-->Line_29 $$ line = StringUtil.repeatSymbol(' ', tabSize * leadingTabs) + line.substring(leadingTabs)[ FD ]
Line_10 $$ final List<String> result = new ArrayList<String>()-->Line_33 $$ formattedOutput.add(result)[ FD ]
Line_5 $$ if (formatted != null) -->Line_7 $$ return[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_4 $$ final List<String> formatted = PyStructuredDocstringFormatter.formatDocstring(element, docstring)[ FD ]
Line_10 $$ final List<String> result = new ArrayList<String>()-->Line_22 $$ result.add(BR)[ FD ]
Line_15 $$ for (String line : lines) -->Line_29 $$ line = StringUtil.repeatSymbol(' ', tabSize * leadingTabs) + line.substring(leadingTabs)[ FD ]
Line_19 $$ if (isFirstLine) -->Line_20 $$ isFirstLine = false[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_3 $$ final Project project = element.getProject()[ FD ]
Line_4 $$ final List<String> formatted = PyStructuredDocstringFormatter.formatDocstring(element, docstring)-->Line_5 $$ if (formatted != null) [ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_10 $$ final List<String> result = new ArrayList<String>()[ CD ]
Line_5 $$ if (formatted != null) -->Line_6 $$ unformattedOutput.add(formatted)[ CD ]
Line_10 $$ final List<String> result = new ArrayList<String>()-->Line_31 $$ result.add(combUp(line))[ FD ]
Line_29 $$ line = StringUtil.repeatSymbol(' ', tabSize * leadingTabs) + line.substring(leadingTabs)-->Line_31 $$ result.add(combUp(line))[ FD ]
Line_4 $$ final List<String> formatted = PyStructuredDocstringFormatter.formatDocstring(element, docstring)-->Line_6 $$ unformattedOutput.add(formatted)[ FD ]
Line_9 $$ boolean isFirstLine-->Line_20 $$ isFirstLine = false[ FD ]
Line_3 $$ final Project project = element.getProject()-->Line_14 $$ final int tabSize = CodeStyleSettingsManager.getSettings(project).getTabSize(PythonFileType.INSTANCE)[ FD ]
Line_24 $$ int leadingTabs = 0-->Line_26 $$ leadingTabs++[ FD ]
Line_24 $$ int leadingTabs = 0-->Line_28 $$ if (leadingTabs > 0) [ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_33 $$ formattedOutput.add(result)[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_5 $$ if (formatted != null) [ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_9 $$ boolean isFirstLine[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_3 $$ final Project project = element.getProject()[ CD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_33 $$ formattedOutput.add(result)[ FD ]
Line_15 $$ for (String line : lines) -->Line_25 $$ while (leadingTabs < line.length() && line.charAt(leadingTabs) == '\t') [ FD ]
Line_15 $$ for (String line : lines) -->Line_31 $$ result.add(combUp(line))[ FD ]
Line_2 $$ private static void addFormattedDocString(@NotNull PsiElement element, @NotNull String docstring, @NotNull ChainIterable<String> formattedOutput, @NotNull ChainIterable<String> unformattedOutput) -->Line_11 $$ final String[] lines = removeCommonIndentation(docstring)[ FD ]
Line_24 $$ int leadingTabs = 0-->Line_25 $$ while (leadingTabs < line.length() && line.charAt(leadingTabs) == '\t') [ FD ]
