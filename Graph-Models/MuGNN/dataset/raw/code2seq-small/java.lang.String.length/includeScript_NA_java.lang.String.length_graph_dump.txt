Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_11 $$ commandList.add(new ErrorCommand("Cannot find file to include: " + file.getAbsolutePath(), line))[ FD ]
Line_5 $$ final String eachLine = tokens.nextToken()-->Line_33 $$ final PlaybackCommand cmd = createCommand(eachLine, line++, scriptDir)[ FD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_17 $$ includeScript(include, file.getParentFile(), commandList, 0)[ FD ]
Line_10 $$ if (!file.exists()) -->Line_11 $$ commandList.add(new ErrorCommand("Cannot find file to include: " + file.getAbsolutePath(), line))[ CD ]
Line_8 $$ if (eachLine.startsWith(includeCmd)) -->Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)[ CD ]
Line_22 $$ if (eachLine.startsWith(importCallCmd)) -->Line_23 $$ String className = eachLine.substring(importCallCmd.length()).trim()[ CD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_29 $$ commandList.add(new ErrorCommand("Cannot find class: " + className, line))[ FD ]
Line_3 $$ final StringTokenizer tokens = new StringTokenizer(scriptText, "\n")-->Line_4 $$ while (tokens.hasMoreTokens()) [ FD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_27 $$ myCommands.add(new PrintCommand(eachLine, line++))[ FD ]
Line_33 $$ final PlaybackCommand cmd = createCommand(eachLine, line++, scriptDir)-->Line_34 $$ commandList.add(cmd)[ FD ]
Line_8 $$ if (eachLine.startsWith(includeCmd)) -->Line_22 $$ if (eachLine.startsWith(importCallCmd)) [ CD ]
Line_25 $$ Class<?> facadeClass = Class.forName(className)-->Line_26 $$ myFacadeClasses.add(facadeClass)[ FD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)[ FD ]
Line_15 $$ String include = FileUtil.loadFile(file)-->Line_17 $$ includeScript(include, file.getParentFile(), commandList, 0)[ FD ]
Line_5 $$ final String eachLine = tokens.nextToken()-->Line_23 $$ String className = eachLine.substring(importCallCmd.length()).trim()[ FD ]
Line_4 $$ while (tokens.hasMoreTokens()) -->Line_6 $$ String includeCmd = AbstractCommand.CMD_PREFIX + "include"[ CD ]
Line_4 $$ while (tokens.hasMoreTokens()) -->Line_7 $$ String importCallCmd = AbstractCommand.CMD_PREFIX + "importCall"[ CD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_34 $$ commandList.add(cmd)[ FD ]
Line_3 $$ final StringTokenizer tokens = new StringTokenizer(scriptText, "\n")-->Line_5 $$ final String eachLine = tokens.nextToken()[ FD ]
Line_8 $$ if (eachLine.startsWith(includeCmd)) -->Line_10 $$ if (!file.exists()) [ CD ]
Line_5 $$ final String eachLine = tokens.nextToken()-->Line_22 $$ if (eachLine.startsWith(importCallCmd)) [ FD ]
Line_4 $$ while (tokens.hasMoreTokens()) -->Line_8 $$ if (eachLine.startsWith(includeCmd)) [ CD ]
Line_22 $$ if (eachLine.startsWith(importCallCmd)) -->Line_33 $$ final PlaybackCommand cmd = createCommand(eachLine, line++, scriptDir)[ CD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_19 $$ commandList.add(new ErrorCommand("Error reading file: " + file.getAbsolutePath(), line))[ FD ]
Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)-->Line_11 $$ commandList.add(new ErrorCommand("Cannot find file to include: " + file.getAbsolutePath(), line))[ FD ]
Line_4 $$ while (tokens.hasMoreTokens()) -->Line_5 $$ final String eachLine = tokens.nextToken()[ CD ]
Line_7 $$ String importCallCmd = AbstractCommand.CMD_PREFIX + "importCall"-->Line_23 $$ String className = eachLine.substring(importCallCmd.length()).trim()[ FD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_4 $$ while (tokens.hasMoreTokens()) [ CD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_33 $$ final PlaybackCommand cmd = createCommand(eachLine, line++, scriptDir)[ FD ]
Line_5 $$ final String eachLine = tokens.nextToken()-->Line_8 $$ if (eachLine.startsWith(includeCmd)) [ FD ]
Line_5 $$ final String eachLine = tokens.nextToken()-->Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)[ FD ]
Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)-->Line_17 $$ includeScript(include, file.getParentFile(), commandList, 0)[ FD ]
Line_10 $$ if (!file.exists()) -->Line_12 $$ return[ CD ]
Line_2 $$ private void includeScript(String scriptText, File scriptDir, ArrayList<PlaybackCommand> commandList, int line) -->Line_3 $$ final StringTokenizer tokens = new StringTokenizer(scriptText, "\n")[ CD ]
Line_6 $$ String includeCmd = AbstractCommand.CMD_PREFIX + "include"-->Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)[ FD ]
Line_23 $$ String className = eachLine.substring(importCallCmd.length()).trim()-->Line_25 $$ Class<?> facadeClass = Class.forName(className)[ FD ]
Line_7 $$ String importCallCmd = AbstractCommand.CMD_PREFIX + "importCall"-->Line_22 $$ if (eachLine.startsWith(importCallCmd)) [ FD ]
Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)-->Line_19 $$ commandList.add(new ErrorCommand("Error reading file: " + file.getAbsolutePath(), line))[ FD ]
Line_22 $$ if (eachLine.startsWith(importCallCmd)) -->Line_34 $$ commandList.add(cmd)[ CD ]
Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)-->Line_10 $$ if (!file.exists()) [ FD ]
Line_9 $$ File file = new PathMacro().setScriptDir(scriptDir).resolveFile(eachLine.substring(includeCmd.length()).trim(), scriptDir)-->Line_15 $$ String include = FileUtil.loadFile(file)[ FD ]
Line_6 $$ String includeCmd = AbstractCommand.CMD_PREFIX + "include"-->Line_8 $$ if (eachLine.startsWith(includeCmd)) [ FD ]
