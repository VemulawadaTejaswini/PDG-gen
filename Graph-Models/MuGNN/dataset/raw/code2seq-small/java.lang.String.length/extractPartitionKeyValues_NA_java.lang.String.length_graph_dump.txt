Line_11 $$ inKey = false-->Line_21 $$ checkArgument(!inKey, "Invalid partition spec: %s", partitionName)[ FD ]
Line_7 $$ char current = partitionName.charAt(i)-->Line_14 $$ if (current == '/') [ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_4 $$ boolean inKey = true[ CD ]
Line_14 $$ if (current == '/') -->Line_15 $$ checkArgument(valueStart != -1, "Invalid partition spec: %s", partitionName)[ CD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_22 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, partitionName.length())))[ CD ]
Line_8 $$ if (inKey) -->Line_14 $$ if (current == '/') [ CD ]
Line_18 $$ valueStart = -1-->Line_22 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, partitionName.length())))[ FD ]
Line_3 $$ ImmutableList.Builder<String> values = ImmutableList.builder()-->Line_23 $$ return values.build()[ FD ]
Line_5 $$ int valueStart = -1-->Line_16 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, i)))[ FD ]
Line_10 $$ if (current == '=') -->Line_11 $$ inKey = false[ CD ]
Line_5 $$ int valueStart = -1-->Line_12 $$ valueStart = i + 1[ FD ]
Line_12 $$ valueStart = i + 1-->Line_22 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, partitionName.length())))[ FD ]
Line_4 $$ boolean inKey = true-->Line_11 $$ inKey = false[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_6 $$ for (int i = 0; i < partitionName.length(); i++) [ CD ]
Line_14 $$ if (current == '/') -->Line_16 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, i)))[ CD ]
Line_6 $$ for (int i = 0; i < partitionName.length(); i++) -->Line_7 $$ char current = partitionName.charAt(i)[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_22 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, partitionName.length())))[ FD ]
Line_10 $$ if (current == '=') -->Line_12 $$ valueStart = i + 1[ CD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_6 $$ for (int i = 0; i < partitionName.length(); i++) [ FD ]
Line_3 $$ ImmutableList.Builder<String> values = ImmutableList.builder()-->Line_16 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, i)))[ FD ]
Line_11 $$ inKey = false-->Line_17 $$ inKey = true[ FD ]
Line_17 $$ inKey = true-->Line_21 $$ checkArgument(!inKey, "Invalid partition spec: %s", partitionName)[ FD ]
Line_18 $$ valueStart = -1-->Line_16 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, i)))[ FD ]
Line_14 $$ if (current == '/') -->Line_18 $$ valueStart = -1[ CD ]
Line_12 $$ valueStart = i + 1-->Line_16 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, i)))[ FD ]
Line_5 $$ int valueStart = -1-->Line_22 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, partitionName.length())))[ FD ]
Line_4 $$ boolean inKey = true-->Line_17 $$ inKey = true[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_7 $$ char current = partitionName.charAt(i)[ FD ]
Line_4 $$ boolean inKey = true-->Line_21 $$ checkArgument(!inKey, "Invalid partition spec: %s", partitionName)[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_15 $$ checkArgument(valueStart != -1, "Invalid partition spec: %s", partitionName)[ FD ]
Line_12 $$ valueStart = i + 1-->Line_18 $$ valueStart = -1[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_3 $$ ImmutableList.Builder<String> values = ImmutableList.builder()[ CD ]
Line_6 $$ for (int i = 0; i < partitionName.length(); i++) -->Line_7 $$ char current = partitionName.charAt(i)[ CD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_9 $$ checkArgument(current != '/', "Invalid partition spec: %s", partitionName)[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_21 $$ checkArgument(!inKey, "Invalid partition spec: %s", partitionName)[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_16 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, i)))[ FD ]
Line_5 $$ int valueStart = -1-->Line_18 $$ valueStart = -1[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_5 $$ int valueStart = -1[ CD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_21 $$ checkArgument(!inKey, "Invalid partition spec: %s", partitionName)[ CD ]
Line_14 $$ if (current == '/') -->Line_17 $$ inKey = true[ CD ]
Line_6 $$ for (int i = 0; i < partitionName.length(); i++) -->Line_16 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, i)))[ FD ]
Line_2 $$ public static List<String> extractPartitionKeyValues(String partitionName) -->Line_23 $$ return values.build()[ CD ]
Line_6 $$ for (int i = 0; i < partitionName.length(); i++) -->Line_8 $$ if (inKey) [ CD ]
Line_3 $$ ImmutableList.Builder<String> values = ImmutableList.builder()-->Line_22 $$ values.add(FileUtils.unescapePathName(partitionName.substring(valueStart, partitionName.length())))[ FD ]
Line_8 $$ if (inKey) -->Line_9 $$ checkArgument(current != '/', "Invalid partition spec: %s", partitionName)[ CD ]
Line_6 $$ for (int i = 0; i < partitionName.length(); i++) -->Line_12 $$ valueStart = i + 1[ FD ]
Line_8 $$ if (inKey) -->Line_10 $$ if (current == '=') [ CD ]
Line_7 $$ char current = partitionName.charAt(i)-->Line_10 $$ if (current == '=') [ FD ]
