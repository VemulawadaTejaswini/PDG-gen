Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_10 $$ String qname = psiClass.getQualifiedName()[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.append(packageName.replace('.', '/'))[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_31 $$ sb.append(className)[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_3 $$ PsiFile containingFile = psiClass.getContainingFile()[ FD ]
Line_9 $$ String packageName = psiFile.getPackageName()-->Line_16 $$ className = qname.substring(packageName.length() + 1).replace('.', '$')[ FD ]
Line_15 $$ if (packageName.length() > 0) -->Line_18 $$ className = qname.replace('.', '$')[ CD ]
Line_9 $$ String packageName = psiFile.getPackageName()-->Line_27 $$ if (packageName.length() > 0) [ FD ]
Line_16 $$ className = qname.substring(packageName.length() + 1).replace('.', '$')-->Line_31 $$ sb.append(className)[ FD ]
Line_8 $$ PsiClassOwner psiFile = (PsiClassOwner) containingFile-->Line_9 $$ String packageName = psiFile.getPackageName()[ FD ]
Line_16 $$ className = qname.substring(packageName.length() + 1).replace('.', '$')-->Line_18 $$ className = qname.replace('.', '$')[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_20 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_9 $$ String packageName = psiFile.getPackageName()[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_5 $$ LOG.debug("containingFile was not resolved for " + psiClass.getQualifiedName())[ FD ]
Line_14 $$ String className-->Line_18 $$ className = qname.replace('.', '$')[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_14 $$ String className[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append('L')[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_24 $$ if (full) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_21 $$ for (int i = 0; i < dimensions; i++) [ CD ]
Line_27 $$ if (packageName.length() > 0) -->Line_29 $$ sb.append('/')[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_27 $$ if (packageName.length() > 0) [ CD ]
Line_27 $$ if (packageName.length() > 0) -->Line_28 $$ sb.append(packageName.replace('.', '/'))[ CD ]
Line_4 $$ if (!(containingFile instanceof PsiClassOwner)) -->Line_5 $$ LOG.debug("containingFile was not resolved for " + psiClass.getQualifiedName())[ CD ]
Line_18 $$ className = qname.replace('.', '$')-->Line_31 $$ sb.append(className)[ FD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append('[')[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_8 $$ PsiClassOwner psiFile = (PsiClassOwner) containingFile[ CD ]
Line_10 $$ String qname = psiClass.getQualifiedName()-->Line_18 $$ className = qname.replace('.', '$')[ FD ]
Line_21 $$ for (int i = 0; i < dimensions; i++) -->Line_22 $$ sb.append('[')[ CD ]
Line_24 $$ if (full) -->Line_25 $$ sb.append('L')[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_35 $$ return sb.toString()[ FD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append('/')[ FD ]
Line_10 $$ String qname = psiClass.getQualifiedName()-->Line_11 $$ if (qname == null) [ FD ]
Line_4 $$ if (!(containingFile instanceof PsiClassOwner)) -->Line_6 $$ return null[ CD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(className)[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_35 $$ return sb.toString()[ CD ]
Line_14 $$ String className-->Line_16 $$ className = qname.substring(packageName.length() + 1).replace('.', '$')[ FD ]
Line_9 $$ String packageName = psiFile.getPackageName()-->Line_28 $$ sb.append(packageName.replace('.', '/'))[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_11 $$ if (qname == null) [ CD ]
Line_11 $$ if (qname == null) -->Line_12 $$ return null[ CD ]
Line_9 $$ String packageName = psiFile.getPackageName()-->Line_15 $$ if (packageName.length() > 0) [ FD ]
Line_10 $$ String qname = psiClass.getQualifiedName()-->Line_16 $$ className = qname.substring(packageName.length() + 1).replace('.', '$')[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_10 $$ String qname = psiClass.getQualifiedName()[ FD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_15 $$ if (packageName.length() > 0) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_3 $$ PsiFile containingFile = psiClass.getContainingFile()[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_4 $$ if (!(containingFile instanceof PsiClassOwner)) [ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_21 $$ for (int i = 0; i < dimensions; i++) [ FD ]
Line_14 $$ String className-->Line_31 $$ sb.append(className)[ FD ]
Line_20 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(';')[ FD ]
Line_32 $$ if (full) -->Line_33 $$ sb.append(';')[ CD ]
Line_15 $$ if (packageName.length() > 0) -->Line_16 $$ className = qname.substring(packageName.length() + 1).replace('.', '$')[ CD ]
Line_2 $$ private static String descriptor(@NotNull PsiClass psiClass, int dimensions, boolean full) -->Line_32 $$ if (full) [ CD ]
