Line_2 $$ public void testAllowCRLF() -->Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)[ CD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_21 $$ log.warn(_message, exception)[ FD ]
Line_22 $$ List<LoggingEvent> loggingEvents = _captureAppender.getLoggingEvents()-->Line_47 $$ Assert.assertEquals(12, loggingEvents.size())[ FD ]
Line_4 $$ char[] expectedMessageWithCRLFChars = new char[_messageChars.length]-->Line_5 $$ System.arraycopy(_messageChars, 0, expectedMessageWithCRLFChars, 0, expectedMessageWithCRLFChars.length)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_11 $$ log.debug(_message, exception)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_12 $$ log.error(_message)[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_41 $$ _log.info(_message, exception)[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_15 $$ log.fatal(_message, exception)[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_17 $$ log.info(_message, exception)[ FD ]
Line_29 $$ char[] messageWithCRLFChars = new char[messageWithCRLFCharsLength]-->Line_30 $$ message.getChars(SanitizerLogWrapper.CRLF_WARNING.length(), message.length(), messageWithCRLFChars, 0)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_18 $$ log.trace(_message)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_20 $$ log.warn(_message)[ FD ]
Line_22 $$ List<LoggingEvent> loggingEvents = _captureAppender.getLoggingEvents()-->Line_23 $$ Assert.assertNotNull(loggingEvents)[ FD ]
Line_26 $$ String message = loggingEvent.getRenderedMessage()-->Line_30 $$ message.getChars(SanitizerLogWrapper.CRLF_WARNING.length(), message.length(), messageWithCRLFChars, 0)[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_35 $$ _log.debug(_message, exception)[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_43 $$ _log.trace(_message, exception)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_14 $$ log.fatal(_message)[ FD ]
Line_26 $$ String message = loggingEvent.getRenderedMessage()-->Line_28 $$ int messageWithCRLFCharsLength = message.length() - SanitizerLogWrapper.CRLF_WARNING.length()[ FD ]
Line_22 $$ List<LoggingEvent> loggingEvents = _captureAppender.getLoggingEvents()-->Line_33 $$ loggingEvents.clear()[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_16 $$ log.info(_message)[ FD ]
Line_26 $$ String message = loggingEvent.getRenderedMessage()-->Line_50 $$ char[] messageChars = message.toCharArray()[ FD ]
Line_26 $$ String message = loggingEvent.getRenderedMessage()-->Line_27 $$ Assert.assertTrue(message.startsWith(SanitizerLogWrapper.CRLF_WARNING))[ FD ]
Line_2 $$ public void testAllowCRLF() -->Line_6 $$ expectedMessageWithCRLFChars[CharPool.NEW_LINE] = CharPool.NEW_LINE[ CD ]
Line_25 $$ for (LoggingEvent loggingEvent : loggingEvents) -->Line_26 $$ String message = loggingEvent.getRenderedMessage()[ FD ]
Line_50 $$ char[] messageChars = message.toCharArray()-->Line_51 $$ Assert.assertArrayEquals(_messageChars, messageChars)[ FD ]
Line_2 $$ public void testAllowCRLF() -->Line_5 $$ System.arraycopy(_messageChars, 0, expectedMessageWithCRLFChars, 0, expectedMessageWithCRLFChars.length)[ CD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_37 $$ _log.error(_message, exception)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_17 $$ log.info(_message, exception)[ FD ]
Line_22 $$ List<LoggingEvent> loggingEvents = _captureAppender.getLoggingEvents()-->Line_46 $$ Assert.assertNotNull(loggingEvents)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_10 $$ log.debug(_message)[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_19 $$ log.trace(_message, exception)[ FD ]
Line_2 $$ public void testAllowCRLF() -->Line_3 $$ Exception exception = new NullPointerException()[ CD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_15 $$ log.fatal(_message, exception)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_19 $$ log.trace(_message, exception)[ FD ]
Line_25 $$ for (LoggingEvent loggingEvent : loggingEvents) -->Line_49 $$ String message = loggingEvent.getRenderedMessage()[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_39 $$ _log.fatal(_message, exception)[ FD ]
Line_29 $$ char[] messageWithCRLFChars = new char[messageWithCRLFCharsLength]-->Line_31 $$ Assert.assertArrayEquals(expectedMessageWithCRLFChars, messageWithCRLFChars)[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_11 $$ log.debug(_message, exception)[ FD ]
Line_22 $$ List<LoggingEvent> loggingEvents = _captureAppender.getLoggingEvents()-->Line_24 $$ Assert.assertEquals(12, loggingEvents.size())[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_13 $$ log.error(_message, exception)[ FD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_21 $$ log.warn(_message, exception)[ FD ]
Line_2 $$ public void testAllowCRLF() -->Line_7 $$ expectedMessageWithCRLFChars[CharPool.RETURN] = CharPool.RETURN[ CD ]
Line_8 $$ Log log = SanitizerLogWrapper.allowCRLF(_log)-->Line_13 $$ log.error(_message, exception)[ FD ]
Line_2 $$ public void testAllowCRLF() -->Line_4 $$ char[] expectedMessageWithCRLFChars = new char[_messageChars.length][ CD ]
Line_4 $$ char[] expectedMessageWithCRLFChars = new char[_messageChars.length]-->Line_31 $$ Assert.assertArrayEquals(expectedMessageWithCRLFChars, messageWithCRLFChars)[ FD ]
Line_3 $$ Exception exception = new NullPointerException()-->Line_45 $$ _log.warn(_message, exception)[ FD ]
