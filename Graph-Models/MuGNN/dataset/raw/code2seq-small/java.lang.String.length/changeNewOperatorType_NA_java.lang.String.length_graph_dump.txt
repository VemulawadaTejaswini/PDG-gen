Line_53 $$ final PsiElement childInside = anonymousClass.getLBrace().getNextSibling()-->Line_54 $$ if (childInside != null) [ FD ]
Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "-->Line_47 $$ final PsiElement paramList = PsiDiamondTypeUtil.replaceExplicitWithDiamond(newExpression.getClassOrAnonymousClassReference().getParameterList())[ FD ]
Line_35 $$ selection = null-->Line_66 $$ editor.getSelectionModel().setSelection(selection.getStartOffset(), selection.getEndOffset())[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_66 $$ editor.getSelectionModel().setSelection(selection.getStartOffset(), selection.getEndOffset())[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_40 $$ PsiExpressionList argumentList = originalExpression.getArgumentList()[ CD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_8 $$ final PsiExpression[] originalExpressionArrayDimensions = originalExpression.getArrayDimensions()[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_5 $$ int caretOffset[ CD ]
Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "-->Line_48 $$ newExpression = PsiTreeUtil.getParentOfType(paramList, PsiNewExpression.class)[ FD ]
Line_6 $$ TextRange selection-->Line_64 $$ if (selection != null) [ FD ]
Line_27 $$ if (caretOffset < 0) -->Line_28 $$ caretOffset -= arrayDimension.length() + 2[ CD ]
Line_28 $$ caretOffset -= arrayDimension.length() + 2-->Line_59 $$ caretOffset = -1[ FD ]
Line_38 $$ final PsiAnonymousClass anonymousClass = originalExpression.getAnonymousClass()-->Line_44 $$ if (anonymousClass == null) [ FD ]
Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)-->Line_47 $$ final PsiElement paramList = PsiDiamondTypeUtil.replaceExplicitWithDiamond(newExpression.getClassOrAnonymousClassReference().getParameterList())[ FD ]
Line_9 $$ caretOffset = 0-->Line_16 $$ caretOffset = -2[ FD ]
Line_22 $$ if (originalExpressionArrayDimensions.length > i) -->Line_23 $$ arrayDimension = originalExpressionArrayDimensions[i].getText()[ CD ]
Line_32 $$ if (caretOffset < 0) -->Line_35 $$ selection = null[ CD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_58 $$ selection = null[ CD ]
Line_51 $$ if (anonymousClass != null) -->Line_52 $$ PsiAnonymousClass newAnonymousClass = newExpression.getAnonymousClass()[ CD ]
Line_3 $$ PsiNewExpression newExpression-->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_13 $$ text += originalExpressionArrayDimensions[0].getText()-->Line_15 $$ text += "0"[ FD ]
Line_51 $$ if (anonymousClass != null) -->Line_54 $$ if (childInside != null) [ CD ]
Line_12 $$ if (originalExpressionArrayDimensions.length > 0) -->Line_15 $$ text += "0"[ CD ]
Line_16 $$ caretOffset = -2-->Line_28 $$ caretOffset -= arrayDimension.length() + 2[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_59 $$ caretOffset = -1[ CD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ CD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_61 $$ PsiElement element = originalExpression.replace(newExpression)[ FD ]
Line_33 $$ selection = new UnfairTextRange(caretOffset, caretOffset + 1)-->Line_58 $$ selection = null[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_38 $$ final PsiAnonymousClass anonymousClass = originalExpression.getAnonymousClass()[ FD ]
Line_24 $$ text += arrayDimension-->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_33 $$ selection = new UnfairTextRange(caretOffset, caretOffset + 1)-->Line_35 $$ selection = null[ FD ]
Line_18 $$ text += "]"-->Line_26 $$ text += "]"[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_64 $$ if (selection != null) [ CD ]
Line_48 $$ newExpression = PsiTreeUtil.getParentOfType(paramList, PsiNewExpression.class)-->Line_61 $$ PsiElement element = originalExpression.replace(newExpression)[ FD ]
Line_13 $$ text += originalExpressionArrayDimensions[0].getText()-->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_6 $$ TextRange selection-->Line_66 $$ editor.getSelectionModel().setSelection(selection.getStartOffset(), selection.getEndOffset())[ FD ]
Line_33 $$ selection = new UnfairTextRange(caretOffset, caretOffset + 1)-->Line_64 $$ if (selection != null) [ FD ]
Line_64 $$ if (selection != null) -->Line_66 $$ editor.getSelectionModel().setSelection(selection.getStartOffset(), selection.getEndOffset())[ CD ]
Line_5 $$ int caretOffset-->Line_32 $$ if (caretOffset < 0) [ FD ]
Line_20 $$ text += "["-->Line_24 $$ text += arrayDimension[ FD ]
Line_3 $$ PsiNewExpression newExpression-->Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_41 $$ if (argumentList == null)[ CD ]
Line_3 $$ PsiNewExpression newExpression-->Line_52 $$ PsiAnonymousClass newAnonymousClass = newExpression.getAnonymousClass()[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_62 $$ editor.getCaretModel().moveToOffset(element.getTextRange().getEndOffset() + caretOffset)[ CD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_44 $$ if (anonymousClass == null) [ CD ]
Line_47 $$ final PsiElement paramList = PsiDiamondTypeUtil.replaceExplicitWithDiamond(newExpression.getClassOrAnonymousClassReference().getParameterList())-->Line_48 $$ newExpression = PsiTreeUtil.getParentOfType(paramList, PsiNewExpression.class)[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_32 $$ if (caretOffset < 0) [ CD ]
Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "-->Line_61 $$ PsiElement element = originalExpression.replace(newExpression)[ FD ]
Line_33 $$ selection = new UnfairTextRange(caretOffset, caretOffset + 1)-->Line_66 $$ editor.getSelectionModel().setSelection(selection.getStartOffset(), selection.getEndOffset())[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_7 $$ if (toType instanceof PsiArrayType) [ CD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(originalExpression.getProject()).getElementFactory()[ CD ]
Line_51 $$ if (anonymousClass != null) -->Line_53 $$ final PsiElement childInside = anonymousClass.getLBrace().getNextSibling()[ CD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_63 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_18 $$ text += "]"-->Line_24 $$ text += arrayDimension[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_19 $$ for (int i = 1; i < toType.getArrayDimensions(); i++) [ CD ]
Line_38 $$ final PsiAnonymousClass anonymousClass = originalExpression.getAnonymousClass()-->Line_55 $$ newAnonymousClass.addRange(childInside, anonymousClass.getRBrace().getPrevSibling())[ FD ]
Line_61 $$ PsiElement element = originalExpression.replace(newExpression)-->Line_65 $$ selection = selection.shiftRight(element.getTextRange().getEndOffset())[ FD ]
Line_5 $$ int caretOffset-->Line_16 $$ caretOffset = -2[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_18 $$ text += "]"[ CD ]
Line_23 $$ arrayDimension = originalExpressionArrayDimensions[i].getText()-->Line_28 $$ caretOffset -= arrayDimension.length() + 2[ FD ]
Line_58 $$ selection = null-->Line_64 $$ if (selection != null) [ FD ]
Line_16 $$ caretOffset = -2-->Line_27 $$ if (caretOffset < 0) [ FD ]
Line_64 $$ if (selection != null) -->Line_65 $$ selection = selection.shiftRight(element.getTextRange().getEndOffset())[ CD ]
Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)-->Line_48 $$ newExpression = PsiTreeUtil.getParentOfType(paramList, PsiNewExpression.class)[ FD ]
Line_12 $$ if (originalExpressionArrayDimensions.length > 0) -->Line_16 $$ caretOffset = -2[ CD ]
Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)-->Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "[ FD ]
Line_48 $$ newExpression = PsiTreeUtil.getParentOfType(paramList, PsiNewExpression.class)-->Line_52 $$ PsiAnonymousClass newAnonymousClass = newExpression.getAnonymousClass()[ FD ]
Line_19 $$ for (int i = 1; i < toType.getArrayDimensions(); i++) -->Line_21 $$ String arrayDimension = ""[ CD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_12 $$ if (originalExpressionArrayDimensions.length > 0) [ CD ]
Line_38 $$ final PsiAnonymousClass anonymousClass = originalExpression.getAnonymousClass()-->Line_51 $$ if (anonymousClass != null) [ FD ]
Line_58 $$ selection = null-->Line_66 $$ editor.getSelectionModel().setSelection(selection.getStartOffset(), selection.getEndOffset())[ FD ]
Line_52 $$ PsiAnonymousClass newAnonymousClass = newExpression.getAnonymousClass()-->Line_55 $$ newAnonymousClass.addRange(childInside, anonymousClass.getRBrace().getPrevSibling())[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_40 $$ PsiExpressionList argumentList = originalExpression.getArgumentList()[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_19 $$ for (int i = 1; i < toType.getArrayDimensions(); i++) [ FD ]
Line_3 $$ PsiNewExpression newExpression-->Line_43 $$ newExpression.getArgumentList().replace(argumentList)[ FD ]
Line_54 $$ if (childInside != null) -->Line_55 $$ newAnonymousClass.addRange(childInside, anonymousClass.getRBrace().getPrevSibling())[ CD ]
Line_5 $$ int caretOffset-->Line_59 $$ caretOffset = -1[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_20 $$ text += "["-->Line_26 $$ text += "]"[ FD ]
Line_13 $$ text += originalExpressionArrayDimensions[0].getText()-->Line_26 $$ text += "]"[ FD ]
Line_41 $$ if (argumentList == null)-->Line_42 $$ return[ CD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_7 $$ if (toType instanceof PsiArrayType) [ FD ]
Line_6 $$ TextRange selection-->Line_33 $$ selection = new UnfairTextRange(caretOffset, caretOffset + 1)[ FD ]
Line_61 $$ PsiElement element = originalExpression.replace(newExpression)-->Line_62 $$ editor.getCaretModel().moveToOffset(element.getTextRange().getEndOffset() + caretOffset)[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_8 $$ final PsiExpression[] originalExpressionArrayDimensions = originalExpression.getArrayDimensions()[ CD ]
Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "-->Line_52 $$ PsiAnonymousClass newAnonymousClass = newExpression.getAnonymousClass()[ FD ]
Line_9 $$ caretOffset = 0-->Line_28 $$ caretOffset -= arrayDimension.length() + 2[ FD ]
Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)-->Line_43 $$ newExpression.getArgumentList().replace(argumentList)[ FD ]
Line_28 $$ caretOffset -= arrayDimension.length() + 2-->Line_27 $$ if (caretOffset < 0) [ FD ]
Line_19 $$ for (int i = 1; i < toType.getArrayDimensions(); i++) -->Line_20 $$ text += "["[ CD ]
Line_15 $$ text += "0"-->Line_20 $$ text += "["[ FD ]
Line_22 $$ if (originalExpressionArrayDimensions.length > i) -->Line_24 $$ text += arrayDimension[ CD ]
Line_40 $$ PsiExpressionList argumentList = originalExpression.getArgumentList()-->Line_43 $$ newExpression.getArgumentList().replace(argumentList)[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_9 $$ caretOffset = 0[ CD ]
Line_20 $$ text += "["-->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_9 $$ caretOffset = 0-->Line_27 $$ if (caretOffset < 0) [ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_6 $$ TextRange selection[ CD ]
Line_15 $$ text += "0"-->Line_26 $$ text += "]"[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_51 $$ if (anonymousClass != null) [ CD ]
Line_6 $$ TextRange selection-->Line_58 $$ selection = null[ FD ]
Line_19 $$ for (int i = 1; i < toType.getArrayDimensions(); i++) -->Line_22 $$ if (originalExpressionArrayDimensions.length > i) [ CD ]
Line_35 $$ selection = null-->Line_64 $$ if (selection != null) [ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_38 $$ final PsiAnonymousClass anonymousClass = originalExpression.getAnonymousClass()[ CD ]
Line_15 $$ text += "0"-->Line_24 $$ text += arrayDimension[ FD ]
Line_35 $$ selection = null-->Line_65 $$ selection = selection.shiftRight(element.getTextRange().getEndOffset())[ FD ]
Line_6 $$ TextRange selection-->Line_65 $$ selection = selection.shiftRight(element.getTextRange().getEndOffset())[ FD ]
Line_15 $$ text += "0"-->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_43 $$ newExpression.getArgumentList().replace(argumentList)[ CD ]
Line_19 $$ for (int i = 1; i < toType.getArrayDimensions(); i++) -->Line_22 $$ if (originalExpressionArrayDimensions.length > i) [ FD ]
Line_12 $$ if (originalExpressionArrayDimensions.length > 0) -->Line_13 $$ text += originalExpressionArrayDimensions[0].getText()[ CD ]
Line_23 $$ arrayDimension = originalExpressionArrayDimensions[i].getText()-->Line_24 $$ text += arrayDimension[ FD ]
Line_5 $$ int caretOffset-->Line_27 $$ if (caretOffset < 0) [ FD ]
Line_13 $$ text += originalExpressionArrayDimensions[0].getText()-->Line_18 $$ text += "]"[ FD ]
Line_24 $$ text += arrayDimension-->Line_26 $$ text += "]"[ FD ]
Line_33 $$ selection = new UnfairTextRange(caretOffset, caretOffset + 1)-->Line_65 $$ selection = selection.shiftRight(element.getTextRange().getEndOffset())[ FD ]
Line_9 $$ caretOffset = 0-->Line_32 $$ if (caretOffset < 0) [ FD ]
Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)-->Line_52 $$ PsiAnonymousClass newAnonymousClass = newExpression.getAnonymousClass()[ FD ]
Line_32 $$ if (caretOffset < 0) -->Line_33 $$ selection = new UnfairTextRange(caretOffset, caretOffset + 1)[ CD ]
Line_3 $$ PsiNewExpression newExpression-->Line_47 $$ final PsiElement paramList = PsiDiamondTypeUtil.replaceExplicitWithDiamond(newExpression.getClassOrAnonymousClassReference().getParameterList())[ FD ]
Line_13 $$ text += originalExpressionArrayDimensions[0].getText()-->Line_20 $$ text += "["[ FD ]
Line_7 $$ if (toType instanceof PsiArrayType) -->Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "[ CD ]
Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(originalExpression.getProject()).getElementFactory()-->Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "[ FD ]
Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)-->Line_61 $$ PsiElement element = originalExpression.replace(newExpression)[ FD ]
Line_5 $$ int caretOffset-->Line_9 $$ caretOffset = 0[ FD ]
Line_19 $$ for (int i = 1; i < toType.getArrayDimensions(); i++) -->Line_26 $$ text += "]"[ CD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_63 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_19 $$ for (int i = 1; i < toType.getArrayDimensions(); i++) -->Line_27 $$ if (caretOffset < 0) [ CD ]
Line_5 $$ int caretOffset-->Line_28 $$ caretOffset -= arrayDimension.length() + 2[ FD ]
Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "-->Line_43 $$ newExpression.getArgumentList().replace(argumentList)[ FD ]
Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(originalExpression.getProject()).getElementFactory()-->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_65 $$ selection = selection.shiftRight(element.getTextRange().getEndOffset())-->Line_66 $$ editor.getSelectionModel().setSelection(selection.getStartOffset(), selection.getEndOffset())[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_3 $$ PsiNewExpression newExpression[ CD ]
Line_21 $$ String arrayDimension = ""-->Line_24 $$ text += arrayDimension[ FD ]
Line_13 $$ text += originalExpressionArrayDimensions[0].getText()-->Line_24 $$ text += arrayDimension[ FD ]
Line_58 $$ selection = null-->Line_65 $$ selection = selection.shiftRight(element.getTextRange().getEndOffset())[ FD ]
Line_15 $$ text += "0"-->Line_18 $$ text += "]"[ FD ]
Line_38 $$ final PsiAnonymousClass anonymousClass = originalExpression.getAnonymousClass()-->Line_53 $$ final PsiElement childInside = anonymousClass.getLBrace().getNextSibling()[ FD ]
Line_26 $$ text += "]"-->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_3 $$ PsiNewExpression newExpression-->Line_61 $$ PsiElement element = originalExpression.replace(newExpression)[ FD ]
Line_9 $$ caretOffset = 0-->Line_59 $$ caretOffset = -1[ FD ]
Line_16 $$ caretOffset = -2-->Line_32 $$ if (caretOffset < 0) [ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_61 $$ PsiElement element = originalExpression.replace(newExpression)[ CD ]
Line_16 $$ caretOffset = -2-->Line_59 $$ caretOffset = -1[ FD ]
Line_18 $$ text += "]"-->Line_31 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText(text, originalExpression)[ FD ]
Line_3 $$ PsiNewExpression newExpression-->Line_48 $$ newExpression = PsiTreeUtil.getParentOfType(paramList, PsiNewExpression.class)[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_39 $$ newExpression = (PsiNewExpression) factory.createExpressionFromText("new " + toType.getCanonicalText() + "()" + (anonymousClass != null ? "[ FD ]
Line_35 $$ selection = null-->Line_58 $$ selection = null[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_4 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(originalExpression.getProject()).getElementFactory()[ FD ]
Line_6 $$ TextRange selection-->Line_35 $$ selection = null[ FD ]
Line_2 $$ private static void changeNewOperatorType(PsiNewExpression originalExpression, PsiType toType, final Editor editor) throws IncorrectOperationException -->Line_62 $$ editor.getCaretModel().moveToOffset(element.getTextRange().getEndOffset() + caretOffset)[ FD ]
Line_18 $$ text += "]"-->Line_20 $$ text += "["[ FD ]
Line_28 $$ caretOffset -= arrayDimension.length() + 2-->Line_32 $$ if (caretOffset < 0) [ FD ]
Line_53 $$ final PsiElement childInside = anonymousClass.getLBrace().getNextSibling()-->Line_55 $$ newAnonymousClass.addRange(childInside, anonymousClass.getRBrace().getPrevSibling())[ FD ]
Line_40 $$ PsiExpressionList argumentList = originalExpression.getArgumentList()-->Line_41 $$ if (argumentList == null)[ FD ]
Line_21 $$ String arrayDimension = ""-->Line_28 $$ caretOffset -= arrayDimension.length() + 2[ FD ]
Line_21 $$ String arrayDimension = ""-->Line_23 $$ arrayDimension = originalExpressionArrayDimensions[i].getText()[ FD ]
