Line_9 $$ PsiElement element = file.findElementAt(caretOffset)-->Line_20 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))[ FD ]
Line_28 $$ int nextLineFeed = text.indexOf('\n', caretOffset + 1)-->Line_29 $$ if (nextLineFeed == -1)[ FD ]
Line_22 $$ Document document = editor.getDocument()-->Line_23 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_27 $$ String text = document.getText()-->Line_28 $$ int nextLineFeed = text.indexOf('\n', caretOffset + 1)[ FD ]
Line_9 $$ PsiElement element = file.findElementAt(caretOffset)-->Line_13 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_24 $$ int toRemove = element.getTextRange().getStartOffset()[ CD ]
Line_9 $$ PsiElement element = file.findElementAt(caretOffset)-->Line_15 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ FD ]
Line_11 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_24 $$ int toRemove = element.getTextRange().getStartOffset()[ FD ]
Line_11 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_20 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))[ FD ]
Line_13 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))-->Line_14 $$ return false[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_16 $$ if (element == null || element.getNode().getElementType() != GroovyTokenTypes.mNLS || StringUtil.countChars(element.getText(), '\n') > 1) [ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_28 $$ int nextLineFeed = text.indexOf('\n', caretOffset + 1)[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_26 $$ originalHandler.execute(editor, dataContext)[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_15 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_7 $$ if (!codeStyleSettings.USE_FLYING_GEESE_BRACES)[ CD ]
Line_10 $$ if (element != null && element.getNode().getElementType() == TokenType.WHITE_SPACE) -->Line_11 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ CD ]
Line_16 $$ if (element == null || element.getNode().getElementType() != GroovyTokenTypes.mNLS || StringUtil.countChars(element.getText(), '\n') > 1) -->Line_17 $$ return false[ CD ]
Line_27 $$ String text = document.getText()-->Line_30 $$ nextLineFeed = text.length()[ FD ]
Line_22 $$ Document document = editor.getDocument()-->Line_25 $$ document.deleteString(caretOffset + 1, toRemove)[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_4 $$ if (project == null)[ CD ]
Line_28 $$ int nextLineFeed = text.indexOf('\n', caretOffset + 1)-->Line_31 $$ CodeStyleManager.getInstance(project).reformatText(file, caretOffset, nextLineFeed)[ FD ]
Line_11 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_16 $$ if (element == null || element.getNode().getElementType() != GroovyTokenTypes.mNLS || StringUtil.countChars(element.getText(), '\n') > 1) [ FD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_31 $$ CodeStyleManager.getInstance(project).reformatText(file, caretOffset, nextLineFeed)[ FD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_6 $$ GroovyCodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project).getCustomSettings(GroovyCodeStyleSettings.class)[ FD ]
Line_30 $$ nextLineFeed = text.length()-->Line_31 $$ CodeStyleManager.getInstance(project).reformatText(file, caretOffset, nextLineFeed)[ FD ]
Line_9 $$ PsiElement element = file.findElementAt(caretOffset)-->Line_11 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_10 $$ if (element != null && element.getNode().getElementType() == TokenType.WHITE_SPACE) [ CD ]
Line_20 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))-->Line_21 $$ return false[ CD ]
Line_9 $$ PsiElement element = file.findElementAt(caretOffset)-->Line_24 $$ int toRemove = element.getTextRange().getStartOffset()[ FD ]
Line_15 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_24 $$ int toRemove = element.getTextRange().getStartOffset()[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_23 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_26 $$ originalHandler.execute(editor, dataContext)[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_31 $$ CodeStyleManager.getInstance(project).reformatText(file, caretOffset, nextLineFeed)[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)[ CD ]
Line_19 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_20 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))[ FD ]
Line_9 $$ PsiElement element = file.findElementAt(caretOffset)-->Line_16 $$ if (element == null || element.getNode().getElementType() != GroovyTokenTypes.mNLS || StringUtil.countChars(element.getText(), '\n') > 1) [ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_9 $$ PsiElement element = file.findElementAt(caretOffset)[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_6 $$ GroovyCodeStyleSettings codeStyleSettings = CodeStyleSettingsManager.getSettings(project).getCustomSettings(GroovyCodeStyleSettings.class)[ CD ]
Line_7 $$ if (!codeStyleSettings.USE_FLYING_GEESE_BRACES)-->Line_8 $$ return false[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_20 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_22 $$ Document document = editor.getDocument()[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_19 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ CD ]
Line_22 $$ Document document = editor.getDocument()-->Line_27 $$ String text = document.getText()[ FD ]
Line_28 $$ int nextLineFeed = text.indexOf('\n', caretOffset + 1)-->Line_30 $$ nextLineFeed = text.length()[ FD ]
Line_29 $$ if (nextLineFeed == -1)-->Line_30 $$ nextLineFeed = text.length()[ CD ]
Line_15 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_16 $$ if (element == null || element.getNode().getElementType() != GroovyTokenTypes.mNLS || StringUtil.countChars(element.getText(), '\n') > 1) [ FD ]
Line_19 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_24 $$ int toRemove = element.getTextRange().getStartOffset()[ FD ]
Line_11 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_15 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ FD ]
Line_15 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_19 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ FD ]
Line_4 $$ if (project == null)-->Line_5 $$ return false[ CD ]
Line_9 $$ PsiElement element = file.findElementAt(caretOffset)-->Line_10 $$ if (element != null && element.getNode().getElementType() == TokenType.WHITE_SPACE) [ FD ]
Line_11 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_13 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))[ FD ]
Line_11 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_19 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_25 $$ document.deleteString(caretOffset + 1, toRemove)[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_22 $$ Document document = editor.getDocument()[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_27 $$ String text = document.getText()[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_29 $$ if (nextLineFeed == -1)[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_13 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_4 $$ if (project == null)[ FD ]
Line_9 $$ PsiElement element = file.findElementAt(caretOffset)-->Line_19 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_9 $$ PsiElement element = file.findElementAt(caretOffset)[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_23 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_15 $$ element = GeeseUtil.getNextNonWhitespaceToken(element)-->Line_20 $$ if (element == null || !GeeseUtil.isClosureRBrace(element))[ FD ]
Line_24 $$ int toRemove = element.getTextRange().getStartOffset()-->Line_25 $$ document.deleteString(caretOffset + 1, toRemove)[ FD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_32 $$ return true[ CD ]
Line_2 $$ private static boolean handleFlyingGeese(Editor editor, int caretOffset, DataContext dataContext, EditorActionHandler originalHandler, PsiFile file) -->Line_31 $$ CodeStyleManager.getInstance(project).reformatText(file, caretOffset, nextLineFeed)[ FD ]
