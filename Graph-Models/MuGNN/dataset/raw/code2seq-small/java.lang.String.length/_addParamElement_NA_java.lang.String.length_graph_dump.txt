Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_12 $$ Element paramElement = methodElement.addElement("param")[ FD ]
Line_15 $$ if (value != null) -->Line_16 $$ value = value.substring(name.length())[ CD ]
Line_12 $$ Element paramElement = methodElement.addElement("param")-->Line_13 $$ Dom4jDocUtil.add(paramElement, "name", name)[ FD ]
Line_8 $$ value = curValue-->Line_20 $$ value = _trimMultilineText(value)[ FD ]
Line_4 $$ String value = null-->Line_20 $$ value = _trimMultilineText(value)[ FD ]
Line_12 $$ Element paramElement = methodElement.addElement("param")-->Line_14 $$ Dom4jDocUtil.add(paramElement, "type", _getTypeValue(javaParameter))[ FD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_14 $$ Dom4jDocUtil.add(paramElement, "type", _getTypeValue(javaParameter))[ CD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_21 $$ Element commentElement = paramElement.addElement("comment")[ CD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_3 $$ String name = javaParameter.getName()[ CD ]
Line_19 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)-->Line_22 $$ commentElement.addCDATA(value)[ FD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_19 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)[ CD ]
Line_6 $$ String curValue = paramDocletTag.getValue()-->Line_7 $$ if (curValue.equals(name) || curValue.startsWith(name + " ")) [ FD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_15 $$ if (value != null) [ CD ]
Line_8 $$ value = curValue-->Line_19 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)[ FD ]
Line_5 $$ for (DocletTag paramDocletTag : paramDocletTags) -->Line_6 $$ String curValue = paramDocletTag.getValue()[ FD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_3 $$ String name = javaParameter.getName()[ FD ]
Line_3 $$ String name = javaParameter.getName()-->Line_13 $$ Dom4jDocUtil.add(paramElement, "name", name)[ FD ]
Line_4 $$ String value = null-->Line_16 $$ value = value.substring(name.length())[ FD ]
Line_19 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)-->Line_20 $$ value = _trimMultilineText(value)[ FD ]
Line_21 $$ Element commentElement = paramElement.addElement("comment")-->Line_22 $$ commentElement.addCDATA(value)[ FD ]
Line_6 $$ String curValue = paramDocletTag.getValue()-->Line_8 $$ value = curValue[ FD ]
Line_16 $$ value = value.substring(name.length())-->Line_20 $$ value = _trimMultilineText(value)[ FD ]
Line_7 $$ if (curValue.equals(name) || curValue.startsWith(name + " ")) -->Line_8 $$ value = curValue[ CD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_4 $$ String value = null[ CD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_14 $$ Dom4jDocUtil.add(paramElement, "type", _getTypeValue(javaParameter))[ FD ]
Line_8 $$ value = curValue-->Line_15 $$ if (value != null) [ FD ]
Line_16 $$ value = value.substring(name.length())-->Line_22 $$ commentElement.addCDATA(value)[ FD ]
Line_15 $$ if (value != null) -->Line_17 $$ Dom4jDocUtil.add(paramElement, "required", true)[ CD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_12 $$ Element paramElement = methodElement.addElement("param")[ CD ]
Line_3 $$ String name = javaParameter.getName()-->Line_16 $$ value = value.substring(name.length())[ FD ]
Line_8 $$ value = curValue-->Line_22 $$ commentElement.addCDATA(value)[ FD ]
Line_3 $$ String name = javaParameter.getName()-->Line_7 $$ if (curValue.equals(name) || curValue.startsWith(name + " ")) [ FD ]
Line_16 $$ value = value.substring(name.length())-->Line_19 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)[ FD ]
Line_20 $$ value = _trimMultilineText(value)-->Line_22 $$ commentElement.addCDATA(value)[ FD ]
Line_4 $$ String value = null-->Line_19 $$ value = ToolsUtil.stripFullyQualifiedClassNames(value, _imports)[ FD ]
Line_4 $$ String value = null-->Line_15 $$ if (value != null) [ FD ]
Line_12 $$ Element paramElement = methodElement.addElement("param")-->Line_21 $$ Element commentElement = paramElement.addElement("comment")[ FD ]
Line_12 $$ Element paramElement = methodElement.addElement("param")-->Line_17 $$ Dom4jDocUtil.add(paramElement, "required", true)[ FD ]
Line_4 $$ String value = null-->Line_22 $$ commentElement.addCDATA(value)[ FD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_20 $$ value = _trimMultilineText(value)[ CD ]
Line_8 $$ value = curValue-->Line_16 $$ value = value.substring(name.length())[ FD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_22 $$ commentElement.addCDATA(value)[ CD ]
Line_2 $$ private void _addParamElement(Element methodElement, JavaParameter javaParameter, DocletTag[] paramDocletTags) throws Exception -->Line_13 $$ Dom4jDocUtil.add(paramElement, "name", name)[ CD ]
Line_4 $$ String value = null-->Line_8 $$ value = curValue[ FD ]
