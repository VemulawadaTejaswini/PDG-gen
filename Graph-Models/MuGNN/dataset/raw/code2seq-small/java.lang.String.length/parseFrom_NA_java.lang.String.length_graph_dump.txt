Line_9 $$ String pidStr = matcher.group(4)-->Line_10 $$ Long pid = pidStr.equals("null") ? null : Long.parseLong(pidStr)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_13 $$ return new DefaultDaemonContext(uid, new File(javaHome), new File(daemonRegistryDir), pid, idleTimeout, jvmOpts)[ CD ]
Line_4 $$ Matcher matcher = pattern.matcher(source)-->Line_8 $$ String daemonRegistryDir = matcher.group(3)[ FD ]
Line_2 $$ private static DaemonContext parseFrom(String source) -->Line_4 $$ Matcher matcher = pattern.matcher(source)[ FD ]
Line_4 $$ Matcher matcher = pattern.matcher(source)-->Line_9 $$ String pidStr = matcher.group(4)[ FD ]
Line_4 $$ Matcher matcher = pattern.matcher(source)-->Line_7 $$ String javaHome = matcher.group(2)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_8 $$ String daemonRegistryDir = matcher.group(3)[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_15 $$ return null[ CD ]
Line_4 $$ Matcher matcher = pattern.matcher(source)-->Line_5 $$ if (matcher.matches()) [ FD ]
Line_4 $$ Matcher matcher = pattern.matcher(source)-->Line_6 $$ String uid = matcher.group(1) == null ? null : matcher.group(1).substring("uid=".length())[ FD ]
Line_2 $$ private static DaemonContext parseFrom(String source) -->Line_4 $$ Matcher matcher = pattern.matcher(source)[ CD ]
Line_2 $$ private static DaemonContext parseFrom(String source) -->Line_5 $$ if (matcher.matches()) [ CD ]
Line_4 $$ Matcher matcher = pattern.matcher(source)-->Line_12 $$ List<String> jvmOpts = Lists.newArrayList(Splitter.on(',').split(matcher.group(6)))[ FD ]
Line_3 $$ Pattern pattern = Pattern.compile("^.*DefaultDaemonContext\\[(uid=[^\\n,]+)?,?javaHome=([^\\n]+),daemonRegistryDir=([^\\n]+),pid=([^\\n]+),idleTimeout=(.+?),daemonOpts=([^\\n]+)].*", Pattern.MULTILINE + Pattern.DOTALL)-->Line_4 $$ Matcher matcher = pattern.matcher(source)[ FD ]
Line_5 $$ if (matcher.matches()) -->Line_10 $$ Long pid = pidStr.equals("null") ? null : Long.parseLong(pidStr)[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_6 $$ String uid = matcher.group(1) == null ? null : matcher.group(1).substring("uid=".length())[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_9 $$ String pidStr = matcher.group(4)[ CD ]
Line_2 $$ private static DaemonContext parseFrom(String source) -->Line_3 $$ Pattern pattern = Pattern.compile("^.*DefaultDaemonContext\\[(uid=[^\\n,]+)?,?javaHome=([^\\n]+),daemonRegistryDir=([^\\n]+),pid=([^\\n]+),idleTimeout=(.+?),daemonOpts=([^\\n]+)].*", Pattern.MULTILINE + Pattern.DOTALL)[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_11 $$ Integer idleTimeout = Integer.decode(matcher.group(5))[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_12 $$ List<String> jvmOpts = Lists.newArrayList(Splitter.on(',').split(matcher.group(6)))[ CD ]
Line_5 $$ if (matcher.matches()) -->Line_7 $$ String javaHome = matcher.group(2)[ CD ]
Line_4 $$ Matcher matcher = pattern.matcher(source)-->Line_11 $$ Integer idleTimeout = Integer.decode(matcher.group(5))[ FD ]
