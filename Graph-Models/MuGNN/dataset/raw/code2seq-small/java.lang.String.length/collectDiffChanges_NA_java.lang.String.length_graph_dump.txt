Line_13 $$ String output = GitChangeUtils.getDiffOutput(myProject, myVcsRoot, "HEAD", dirtyPaths)-->Line_14 $$ GitChangeUtils.parseChanges(myProject, myVcsRoot, null, GitChangeUtils.resolveReference(myProject, myVcsRoot, "HEAD"), output, myChanges, myUnmergedNames)[ FD ]
Line_28 $$ StringTokenizer tokenizer = new StringTokenizer(output, "\n\r")-->Line_29 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_19 $$ GitSimpleHandler handler = new GitSimpleHandler(myProject, myVcsRoot, GitCommand.LS_FILES)-->Line_22 $$ handler.setStdoutSuppressed(true)[ FD ]
Line_19 $$ GitSimpleHandler handler = new GitSimpleHandler(myProject, myVcsRoot, GitCommand.LS_FILES)-->Line_26 $$ String output = handler.run()[ FD ]
Line_29 $$ while (tokenizer.hasMoreTokens()) -->Line_31 $$ Change ch = new Change(null, GitContentRevision.createRevision(myVcsRoot, s, null, myProject, false, false, true), FileStatus.ADDED)[ CD ]
Line_30 $$ final String s = tokenizer.nextToken()-->Line_31 $$ Change ch = new Change(null, GitContentRevision.createRevision(myVcsRoot, s, null, myProject, false, false, true), FileStatus.ADDED)[ FD ]
Line_29 $$ while (tokenizer.hasMoreTokens()) -->Line_32 $$ myChanges.add(ch)[ CD ]
Line_8 $$ Collection<FilePath> dirtyPaths = dirtyPaths(true)-->Line_13 $$ String output = GitChangeUtils.getDiffOutput(myProject, myVcsRoot, "HEAD", dirtyPaths)[ FD ]
Line_8 $$ Collection<FilePath> dirtyPaths = dirtyPaths(true)-->Line_9 $$ if (dirtyPaths.isEmpty()) [ FD ]
Line_9 $$ if (dirtyPaths.isEmpty()) -->Line_10 $$ return[ CD ]
Line_29 $$ while (tokenizer.hasMoreTokens()) -->Line_30 $$ final String s = tokenizer.nextToken()[ CD ]
Line_27 $$ if (output.length() > 0) -->Line_28 $$ StringTokenizer tokenizer = new StringTokenizer(output, "\n\r")[ CD ]
Line_13 $$ String output = GitChangeUtils.getDiffOutput(myProject, myVcsRoot, "HEAD", dirtyPaths)-->Line_27 $$ if (output.length() > 0) [ FD ]
Line_19 $$ GitSimpleHandler handler = new GitSimpleHandler(myProject, myVcsRoot, GitCommand.LS_FILES)-->Line_20 $$ handler.addParameters("--cached")[ FD ]
Line_31 $$ Change ch = new Change(null, GitContentRevision.createRevision(myVcsRoot, s, null, myProject, false, false, true), FileStatus.ADDED)-->Line_32 $$ myChanges.add(ch)[ FD ]
Line_19 $$ GitSimpleHandler handler = new GitSimpleHandler(myProject, myVcsRoot, GitCommand.LS_FILES)-->Line_21 $$ handler.setSilent(true)[ FD ]
Line_27 $$ if (output.length() > 0) -->Line_29 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_28 $$ StringTokenizer tokenizer = new StringTokenizer(output, "\n\r")-->Line_30 $$ final String s = tokenizer.nextToken()[ FD ]
