Line_2 $$ protected List<TemplateNode> getTemplateNodes(ThemeDisplay themeDisplay, Element element) throws Exception -->Line_5 $$ List<Element> dynamicElementElements = element.elements("dynamic-element")[ CD ]
Line_7 $$ Element dynamicContentElement = dynamicElementElement.element("dynamic-content")-->Line_10 $$ data = dynamicContentElement.getText()[ FD ]
Line_12 $$ String name = dynamicElementElement.attributeValue("name", StringPool.BLANK)-->Line_32 $$ TemplateNode prototypeTemplateNode = prototypeTemplateNodes.get(name)[ FD ]
Line_33 $$ if (prototypeTemplateNode == null) -->Line_36 $$ templateNodes.add(templateNode)[ CD ]
Line_7 $$ Element dynamicContentElement = dynamicElementElement.element("dynamic-content")-->Line_9 $$ if (dynamicContentElement != null) [ FD ]
Line_8 $$ String data = StringPool.BLANK-->Line_23 $$ TemplateNode templateNode = new TemplateNode(themeDisplay, name, StringUtil.stripCDATA(data), type, attributes)[ FD ]
Line_19 $$ for (Attribute attribute : dynamicContentElement.attributes()) -->Line_20 $$ attributes.put(attribute.getName(), attribute.getValue())[ FD ]
Line_4 $$ Map<String, TemplateNode> prototypeTemplateNodes = new HashMap()-->Line_35 $$ prototypeTemplateNodes.put(name, prototypeTemplateNode)[ FD ]
Line_7 $$ Element dynamicContentElement = dynamicElementElement.element("dynamic-content")-->Line_26 $$ if ((dynamicContentElement != null) && (dynamicContentElement.element("option") != null)) [ FD ]
Line_2 $$ protected List<TemplateNode> getTemplateNodes(ThemeDisplay themeDisplay, Element element) throws Exception -->Line_25 $$ templateNode.appendChildren(getTemplateNodes(themeDisplay, dynamicElementElement))[ FD ]
Line_7 $$ Element dynamicContentElement = dynamicElementElement.element("dynamic-content")-->Line_18 $$ if (dynamicContentElement != null) [ FD ]
Line_24 $$ if (dynamicElementElement.element("dynamic-element") != null) -->Line_25 $$ templateNode.appendChildren(getTemplateNodes(themeDisplay, dynamicElementElement))[ CD ]
Line_32 $$ TemplateNode prototypeTemplateNode = prototypeTemplateNodes.get(name)-->Line_33 $$ if (prototypeTemplateNode == null) [ FD ]
Line_34 $$ prototypeTemplateNode = templateNode-->Line_38 $$ prototypeTemplateNode.appendSibling(templateNode)[ FD ]
Line_23 $$ TemplateNode templateNode = new TemplateNode(themeDisplay, name, StringUtil.stripCDATA(data), type, attributes)-->Line_34 $$ prototypeTemplateNode = templateNode[ FD ]
Line_6 $$ for (Element dynamicElementElement : dynamicElementElements) -->Line_7 $$ Element dynamicContentElement = dynamicElementElement.element("dynamic-content")[ FD ]
Line_12 $$ String name = dynamicElementElement.attributeValue("name", StringPool.BLANK)-->Line_13 $$ if (name.length() == 0) [ FD ]
Line_4 $$ Map<String, TemplateNode> prototypeTemplateNodes = new HashMap()-->Line_32 $$ TemplateNode prototypeTemplateNode = prototypeTemplateNodes.get(name)[ FD ]
Line_33 $$ if (prototypeTemplateNode == null) -->Line_34 $$ prototypeTemplateNode = templateNode[ CD ]
Line_7 $$ Element dynamicContentElement = dynamicElementElement.element("dynamic-content")-->Line_27 $$ List<Element> optionElements = dynamicContentElement.elements("option")[ FD ]
Line_10 $$ data = dynamicContentElement.getText()-->Line_23 $$ TemplateNode templateNode = new TemplateNode(themeDisplay, name, StringUtil.stripCDATA(data), type, attributes)[ FD ]
Line_6 $$ for (Element dynamicElementElement : dynamicElementElements) -->Line_16 $$ String type = dynamicElementElement.attributeValue("type", StringPool.BLANK)[ FD ]
Line_6 $$ for (Element dynamicElementElement : dynamicElementElements) -->Line_12 $$ String name = dynamicElementElement.attributeValue("name", StringPool.BLANK)[ FD ]
Line_26 $$ if ((dynamicContentElement != null) && (dynamicContentElement.element("option") != null)) -->Line_27 $$ List<Element> optionElements = dynamicContentElement.elements("option")[ CD ]
Line_24 $$ if (dynamicElementElement.element("dynamic-element") != null) -->Line_26 $$ if ((dynamicContentElement != null) && (dynamicContentElement.element("option") != null)) [ CD ]
Line_34 $$ prototypeTemplateNode = templateNode-->Line_35 $$ prototypeTemplateNodes.put(name, prototypeTemplateNode)[ FD ]
Line_6 $$ for (Element dynamicElementElement : dynamicElementElements) -->Line_24 $$ if (dynamicElementElement.element("dynamic-element") != null) [ FD ]
Line_2 $$ protected List<TemplateNode> getTemplateNodes(ThemeDisplay themeDisplay, Element element) throws Exception -->Line_40 $$ return templateNodes[ CD ]
Line_32 $$ TemplateNode prototypeTemplateNode = prototypeTemplateNodes.get(name)-->Line_38 $$ prototypeTemplateNode.appendSibling(templateNode)[ FD ]
Line_23 $$ TemplateNode templateNode = new TemplateNode(themeDisplay, name, StringUtil.stripCDATA(data), type, attributes)-->Line_25 $$ templateNode.appendChildren(getTemplateNodes(themeDisplay, dynamicElementElement))[ FD ]
Line_28 $$ for (Element optionElement : optionElements) -->Line_29 $$ templateNode.appendOption(StringUtil.stripCDATA(optionElement.getText()))[ FD ]
Line_23 $$ TemplateNode templateNode = new TemplateNode(themeDisplay, name, StringUtil.stripCDATA(data), type, attributes)-->Line_36 $$ templateNodes.add(templateNode)[ FD ]
Line_7 $$ Element dynamicContentElement = dynamicElementElement.element("dynamic-content")-->Line_19 $$ for (Attribute attribute : dynamicContentElement.attributes()) [ FD ]
Line_2 $$ protected List<TemplateNode> getTemplateNodes(ThemeDisplay themeDisplay, Element element) throws Exception -->Line_5 $$ List<Element> dynamicElementElements = element.elements("dynamic-element")[ FD ]
Line_32 $$ TemplateNode prototypeTemplateNode = prototypeTemplateNodes.get(name)-->Line_34 $$ prototypeTemplateNode = templateNode[ FD ]
Line_33 $$ if (prototypeTemplateNode == null) -->Line_35 $$ prototypeTemplateNodes.put(name, prototypeTemplateNode)[ CD ]
Line_32 $$ TemplateNode prototypeTemplateNode = prototypeTemplateNodes.get(name)-->Line_35 $$ prototypeTemplateNodes.put(name, prototypeTemplateNode)[ FD ]
Line_2 $$ protected List<TemplateNode> getTemplateNodes(ThemeDisplay themeDisplay, Element element) throws Exception -->Line_3 $$ List<TemplateNode> templateNodes = new ArrayList()[ CD ]
Line_3 $$ List<TemplateNode> templateNodes = new ArrayList()-->Line_36 $$ templateNodes.add(templateNode)[ FD ]
Line_17 $$ Map<String, String> attributes = new HashMap()-->Line_20 $$ attributes.put(attribute.getName(), attribute.getValue())[ FD ]
Line_6 $$ for (Element dynamicElementElement : dynamicElementElements) -->Line_25 $$ templateNode.appendChildren(getTemplateNodes(themeDisplay, dynamicElementElement))[ FD ]
Line_12 $$ String name = dynamicElementElement.attributeValue("name", StringPool.BLANK)-->Line_35 $$ prototypeTemplateNodes.put(name, prototypeTemplateNode)[ FD ]
Line_23 $$ TemplateNode templateNode = new TemplateNode(themeDisplay, name, StringUtil.stripCDATA(data), type, attributes)-->Line_29 $$ templateNode.appendOption(StringUtil.stripCDATA(optionElement.getText()))[ FD ]
Line_2 $$ protected List<TemplateNode> getTemplateNodes(ThemeDisplay themeDisplay, Element element) throws Exception -->Line_4 $$ Map<String, TemplateNode> prototypeTemplateNodes = new HashMap()[ CD ]
Line_23 $$ TemplateNode templateNode = new TemplateNode(themeDisplay, name, StringUtil.stripCDATA(data), type, attributes)-->Line_38 $$ prototypeTemplateNode.appendSibling(templateNode)[ FD ]
Line_8 $$ String data = StringPool.BLANK-->Line_10 $$ data = dynamicContentElement.getText()[ FD ]
Line_9 $$ if (dynamicContentElement != null) -->Line_10 $$ data = dynamicContentElement.getText()[ CD ]
