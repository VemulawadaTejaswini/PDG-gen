Line_6 $$ List<String> fqns = null-->Line_18 $$ fqns.add(qName)[ FD ]
Line_7 $$ for (String fqn : annotations) -->Line_9 $$ if (!isPattern && isAnnotated(owner, fqn, false)) [ FD ]
Line_8 $$ boolean isPattern = fqn.endsWith("*")-->Line_9 $$ if (!isPattern && isAnnotated(owner, fqn, false)) [ FD ]
Line_3 $$ final PsiModifierList modList-->Line_4 $$ if (owner == null || (modList = owner.getModifierList()) == null)[ FD ]
Line_6 $$ List<String> fqns = null-->Line_13 $$ fqns = new ArrayList<String>()[ FD ]
Line_9 $$ if (!isPattern && isAnnotated(owner, fqn, false)) -->Line_10 $$ return true[ CD ]
Line_7 $$ for (String fqn : annotations) -->Line_26 $$ if (annoFQN.startsWith(fqn)) [ FD ]
Line_6 $$ List<String> fqns = null-->Line_12 $$ if (fqns == null) [ FD ]
Line_25 $$ for (String annoFQN : fqns) -->Line_26 $$ if (annoFQN.startsWith(fqn)) [ FD ]
Line_7 $$ for (String fqn : annotations) -->Line_8 $$ boolean isPattern = fqn.endsWith("*")[ FD ]
Line_12 $$ if (fqns == null) -->Line_14 $$ final PsiAnnotation[] ownAnnotations = modList.getAnnotations()[ CD ]
Line_12 $$ if (fqns == null) -->Line_13 $$ fqns = new ArrayList<String>()[ CD ]
Line_12 $$ if (fqns == null) -->Line_21 $$ if (fqns.isEmpty())[ CD ]
Line_3 $$ final PsiModifierList modList-->Line_14 $$ final PsiAnnotation[] ownAnnotations = modList.getAnnotations()[ FD ]
Line_7 $$ for (String fqn : annotations) -->Line_24 $$ fqn = fqn.substring(0, fqn.length() - 2)[ FD ]
Line_9 $$ if (!isPattern && isAnnotated(owner, fqn, false)) -->Line_11 $$ if (isPattern) [ CD ]
Line_16 $$ final String qName = anno.getQualifiedName()-->Line_18 $$ fqns.add(qName)[ FD ]
Line_6 $$ List<String> fqns = null-->Line_21 $$ if (fqns.isEmpty())[ FD ]
Line_4 $$ if (owner == null || (modList = owner.getModifierList()) == null)-->Line_5 $$ return false[ CD ]
Line_11 $$ if (isPattern) -->Line_24 $$ fqn = fqn.substring(0, fqn.length() - 2)[ CD ]
Line_2 $$ public static boolean checkAnnotatedUsingPatterns(@Nullable PsiModifierListOwner owner, @NotNull Collection<String> annotations) -->Line_4 $$ if (owner == null || (modList = owner.getModifierList()) == null)[ FD ]
Line_16 $$ final String qName = anno.getQualifiedName()-->Line_17 $$ if (qName != null) [ FD ]
Line_13 $$ fqns = new ArrayList<String>()-->Line_18 $$ fqns.add(qName)[ FD ]
Line_2 $$ public static boolean checkAnnotatedUsingPatterns(@Nullable PsiModifierListOwner owner, @NotNull Collection<String> annotations) -->Line_9 $$ if (!isPattern && isAnnotated(owner, fqn, false)) [ FD ]
Line_2 $$ public static boolean checkAnnotatedUsingPatterns(@Nullable PsiModifierListOwner owner, @NotNull Collection<String> annotations) -->Line_32 $$ return false[ CD ]
Line_2 $$ public static boolean checkAnnotatedUsingPatterns(@Nullable PsiModifierListOwner owner, @NotNull Collection<String> annotations) -->Line_6 $$ List<String> fqns = null[ CD ]
Line_21 $$ if (fqns.isEmpty())-->Line_22 $$ return false[ CD ]
Line_26 $$ if (annoFQN.startsWith(fqn)) -->Line_27 $$ return true[ CD ]
Line_11 $$ if (isPattern) -->Line_12 $$ if (fqns == null) [ CD ]
Line_24 $$ fqn = fqn.substring(0, fqn.length() - 2)-->Line_26 $$ if (annoFQN.startsWith(fqn)) [ FD ]
Line_4 $$ if (owner == null || (modList = owner.getModifierList()) == null)-->Line_14 $$ final PsiAnnotation[] ownAnnotations = modList.getAnnotations()[ FD ]
Line_13 $$ fqns = new ArrayList<String>()-->Line_21 $$ if (fqns.isEmpty())[ FD ]
Line_2 $$ public static boolean checkAnnotatedUsingPatterns(@Nullable PsiModifierListOwner owner, @NotNull Collection<String> annotations) -->Line_4 $$ if (owner == null || (modList = owner.getModifierList()) == null)[ CD ]
Line_15 $$ for (PsiAnnotation anno : ownAnnotations) -->Line_16 $$ final String qName = anno.getQualifiedName()[ FD ]
Line_2 $$ public static boolean checkAnnotatedUsingPatterns(@Nullable PsiModifierListOwner owner, @NotNull Collection<String> annotations) -->Line_3 $$ final PsiModifierList modList[ CD ]
Line_17 $$ if (qName != null) -->Line_18 $$ fqns.add(qName)[ CD ]
