Line_18 $$ final String typeName = link.substring(LINK_TYPE_TYPENAME.length())-->Line_19 $$ final PyType type = PyTypeParser.getTypeByName(context, typeName)[ FD ]
Line_11 $$ for (PyClass parent : cls.getAncestorClasses(null)) -->Line_13 $$ if (parentName != null && parentName.equals(desiredName))[ FD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_5 $$ if (link.equals(LINK_TYPE_PARAM)) [ FD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_7 $$ if (link.startsWith(LINK_TYPE_PARENT)) [ FD ]
Line_11 $$ for (PyClass parent : cls.getAncestorClasses(null)) -->Line_12 $$ final String parentName = parent.getName()[ FD ]
Line_17 $$ if (link.startsWith(LINK_TYPE_TYPENAME)) -->Line_19 $$ final PyType type = PyTypeParser.getTypeByName(context, typeName)[ CD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_3 $$ if (link.equals(LINK_TYPE_CLASS)) [ FD ]
Line_19 $$ final PyType type = PyTypeParser.getTypeByName(context, typeName)-->Line_20 $$ if (type instanceof PyClassType) [ FD ]
Line_10 $$ final String desiredName = link.substring(LINK_TYPE_PARENT.length())-->Line_13 $$ if (parentName != null && parentName.equals(desiredName))[ FD ]
Line_9 $$ if (cls != null) -->Line_10 $$ final String desiredName = link.substring(LINK_TYPE_PARENT.length())[ CD ]
Line_7 $$ if (link.startsWith(LINK_TYPE_PARENT)) -->Line_8 $$ final PyClass cls = inferContainingClassOf(context)[ CD ]
Line_7 $$ if (link.startsWith(LINK_TYPE_PARENT)) -->Line_17 $$ if (link.startsWith(LINK_TYPE_TYPENAME)) [ CD ]
Line_8 $$ final PyClass cls = inferContainingClassOf(context)-->Line_9 $$ if (cls != null) [ FD ]
Line_17 $$ if (link.startsWith(LINK_TYPE_TYPENAME)) -->Line_18 $$ final String typeName = link.substring(LINK_TYPE_TYPENAME.length())[ CD ]
Line_3 $$ if (link.equals(LINK_TYPE_CLASS)) -->Line_5 $$ if (link.equals(LINK_TYPE_PARAM)) [ CD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_17 $$ if (link.startsWith(LINK_TYPE_TYPENAME)) [ FD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_4 $$ return inferContainingClassOf(context)[ FD ]
Line_7 $$ if (link.startsWith(LINK_TYPE_PARENT)) -->Line_9 $$ if (cls != null) [ CD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_3 $$ if (link.equals(LINK_TYPE_CLASS)) [ CD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_18 $$ final String typeName = link.substring(LINK_TYPE_TYPENAME.length())[ FD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_6 $$ return inferClassOfParameter(context)[ FD ]
Line_13 $$ if (parentName != null && parentName.equals(desiredName))-->Line_14 $$ return parent[ CD ]
Line_17 $$ if (link.startsWith(LINK_TYPE_TYPENAME)) -->Line_20 $$ if (type instanceof PyClassType) [ CD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_10 $$ final String desiredName = link.substring(LINK_TYPE_PARENT.length())[ FD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_24 $$ return null[ CD ]
Line_12 $$ final String parentName = parent.getName()-->Line_13 $$ if (parentName != null && parentName.equals(desiredName))[ FD ]
Line_5 $$ if (link.equals(LINK_TYPE_PARAM)) -->Line_6 $$ return inferClassOfParameter(context)[ CD ]
Line_5 $$ if (link.equals(LINK_TYPE_PARAM)) -->Line_7 $$ if (link.startsWith(LINK_TYPE_PARENT)) [ CD ]
Line_3 $$ if (link.equals(LINK_TYPE_CLASS)) -->Line_4 $$ return inferContainingClassOf(context)[ CD ]
Line_20 $$ if (type instanceof PyClassType) -->Line_21 $$ return ((PyClassType) type).getPyClass()[ CD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_19 $$ final PyType type = PyTypeParser.getTypeByName(context, typeName)[ FD ]
Line_8 $$ final PyClass cls = inferContainingClassOf(context)-->Line_11 $$ for (PyClass parent : cls.getAncestorClasses(null)) [ FD ]
Line_2 $$ public PsiElement getDocumentationElementForLink(PsiManager psiManager, @NotNull String link, @NotNull PsiElement context) -->Line_8 $$ final PyClass cls = inferContainingClassOf(context)[ FD ]
