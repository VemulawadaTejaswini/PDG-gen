Line_3 $$ int lineNumber = 0-->Line_19 $$ lineNumber += StringUtil.getLineBreakCount(rangeText.subSequence(0, Math.min(offset, rangeLength)))[ FD ]
Line_18 $$ CharSequence rangeText = hostText.subSequence(currentRange.getStartOffset(), currentRange.getEndOffset())-->Line_19 $$ lineNumber += StringUtil.getLineBreakCount(rangeText.subSequence(0, Math.min(offset, rangeLength)))[ FD ]
Line_3 $$ int lineNumber = 0-->Line_9 $$ lineNumber += StringUtil.getLineBreakCount(prefix.substring(0, Math.min(offset, prefix.length())))[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_13 $$ offset -= prefix.length()[ FD ]
Line_19 $$ lineNumber += StringUtil.getLineBreakCount(rangeText.subSequence(0, Math.min(offset, rangeLength)))-->Line_24 $$ lineNumber += StringUtil.getLineBreakCount(suffix.substring(0, Math.min(offset, suffix.length())))[ FD ]
Line_13 $$ offset -= prefix.length()-->Line_25 $$ if (offset < suffix.length()) [ FD ]
Line_9 $$ lineNumber += StringUtil.getLineBreakCount(prefix.substring(0, Math.min(offset, prefix.length())))-->Line_24 $$ lineNumber += StringUtil.getLineBreakCount(suffix.substring(0, Math.min(offset, suffix.length())))[ FD ]
Line_10 $$ if (offset < prefix.length()) -->Line_11 $$ return lineNumber[ CD ]
Line_4 $$ String hostText = myDelegate.getText()-->Line_18 $$ CharSequence rangeText = hostText.subSequence(currentRange.getStartOffset(), currentRange.getEndOffset())[ FD ]
Line_25 $$ if (offset < suffix.length()) -->Line_26 $$ return lineNumber[ CD ]
Line_23 $$ offset -= rangeLength-->Line_28 $$ offset -= suffix.length()[ FD ]
Line_8 $$ String suffix = shred.getSuffix()-->Line_24 $$ lineNumber += StringUtil.getLineBreakCount(suffix.substring(0, Math.min(offset, suffix.length())))[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_9 $$ lineNumber += StringUtil.getLineBreakCount(prefix.substring(0, Math.min(offset, prefix.length())))[ FD ]
Line_6 $$ for (PsiLanguageInjectionHost.Shred shred : myShreds) -->Line_14 $$ Segment currentRange = shred.getHostRangeMarker()[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_19 $$ lineNumber += StringUtil.getLineBreakCount(rangeText.subSequence(0, Math.min(offset, rangeLength)))[ FD ]
Line_23 $$ offset -= rangeLength-->Line_25 $$ if (offset < suffix.length()) [ FD ]
Line_7 $$ String prefix = shred.getPrefix()-->Line_9 $$ lineNumber += StringUtil.getLineBreakCount(prefix.substring(0, Math.min(offset, prefix.length())))[ FD ]
Line_13 $$ offset -= prefix.length()-->Line_28 $$ offset -= suffix.length()[ FD ]
Line_8 $$ String suffix = shred.getSuffix()-->Line_25 $$ if (offset < suffix.length()) [ FD ]
Line_19 $$ lineNumber += StringUtil.getLineBreakCount(rangeText.subSequence(0, Math.min(offset, rangeLength)))-->Line_31 $$ lineNumber = getLineCount() - 1[ FD ]
Line_13 $$ offset -= prefix.length()-->Line_20 $$ if (offset < rangeLength) [ FD ]
Line_14 $$ Segment currentRange = shred.getHostRangeMarker()-->Line_18 $$ CharSequence rangeText = hostText.subSequence(currentRange.getStartOffset(), currentRange.getEndOffset())[ FD ]
Line_9 $$ lineNumber += StringUtil.getLineBreakCount(prefix.substring(0, Math.min(offset, prefix.length())))-->Line_19 $$ lineNumber += StringUtil.getLineBreakCount(rangeText.subSequence(0, Math.min(offset, rangeLength)))[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_10 $$ if (offset < prefix.length()) [ FD ]
Line_20 $$ if (offset < rangeLength) -->Line_21 $$ return lineNumber[ CD ]
Line_14 $$ Segment currentRange = shred.getHostRangeMarker()-->Line_17 $$ int rangeLength = currentRange.getEndOffset() - currentRange.getStartOffset()[ FD ]
Line_6 $$ for (PsiLanguageInjectionHost.Shred shred : myShreds) -->Line_8 $$ String suffix = shred.getSuffix()[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_3 $$ int lineNumber = 0[ CD ]
Line_17 $$ int rangeLength = currentRange.getEndOffset() - currentRange.getStartOffset()-->Line_23 $$ offset -= rangeLength[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_23 $$ offset -= rangeLength[ FD ]
Line_3 $$ int lineNumber = 0-->Line_24 $$ lineNumber += StringUtil.getLineBreakCount(suffix.substring(0, Math.min(offset, suffix.length())))[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_32 $$ return lineNumber < 0 ? 0 : lineNumber[ CD ]
Line_3 $$ int lineNumber = 0-->Line_31 $$ lineNumber = getLineCount() - 1[ FD ]
Line_9 $$ lineNumber += StringUtil.getLineBreakCount(prefix.substring(0, Math.min(offset, prefix.length())))-->Line_31 $$ lineNumber = getLineCount() - 1[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_31 $$ lineNumber = getLineCount() - 1[ CD ]
Line_14 $$ Segment currentRange = shred.getHostRangeMarker()-->Line_15 $$ if (currentRange == null)[ FD ]
Line_17 $$ int rangeLength = currentRange.getEndOffset() - currentRange.getStartOffset()-->Line_20 $$ if (offset < rangeLength) [ FD ]
Line_7 $$ String prefix = shred.getPrefix()-->Line_10 $$ if (offset < prefix.length()) [ FD ]
Line_13 $$ offset -= prefix.length()-->Line_24 $$ lineNumber += StringUtil.getLineBreakCount(suffix.substring(0, Math.min(offset, suffix.length())))[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_28 $$ offset -= suffix.length()[ FD ]
Line_24 $$ lineNumber += StringUtil.getLineBreakCount(suffix.substring(0, Math.min(offset, suffix.length())))-->Line_31 $$ lineNumber = getLineCount() - 1[ FD ]
Line_17 $$ int rangeLength = currentRange.getEndOffset() - currentRange.getStartOffset()-->Line_19 $$ lineNumber += StringUtil.getLineBreakCount(rangeText.subSequence(0, Math.min(offset, rangeLength)))[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_4 $$ String hostText = myDelegate.getText()[ CD ]
Line_6 $$ for (PsiLanguageInjectionHost.Shred shred : myShreds) -->Line_7 $$ String prefix = shred.getPrefix()[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_20 $$ if (offset < rangeLength) [ FD ]
Line_8 $$ String suffix = shred.getSuffix()-->Line_28 $$ offset -= suffix.length()[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_25 $$ if (offset < suffix.length()) [ FD ]
Line_13 $$ offset -= prefix.length()-->Line_23 $$ offset -= rangeLength[ FD ]
Line_13 $$ offset -= prefix.length()-->Line_19 $$ lineNumber += StringUtil.getLineBreakCount(rangeText.subSequence(0, Math.min(offset, rangeLength)))[ FD ]
Line_2 $$ public int getLineNumber(int offset) -->Line_24 $$ lineNumber += StringUtil.getLineBreakCount(suffix.substring(0, Math.min(offset, suffix.length())))[ FD ]
Line_23 $$ offset -= rangeLength-->Line_24 $$ lineNumber += StringUtil.getLineBreakCount(suffix.substring(0, Math.min(offset, suffix.length())))[ FD ]
Line_7 $$ String prefix = shred.getPrefix()-->Line_13 $$ offset -= prefix.length()[ FD ]
