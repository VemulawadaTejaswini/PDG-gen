Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_15 $$ buffer.append('[').append(module.getName()).append("] ")[ FD ]
Line_5 $$ VirtualFile vFile = file.getVirtualFile()-->Line_6 $$ if (vFile != null && (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile))) [ FD ]
Line_6 $$ if (vFile != null && (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile))) -->Line_13 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(file)[ CD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_21 $$ buffer.append(packageName)[ FD ]
Line_3 $$ PsiFile file = aClass.getContainingFile()-->Line_13 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(file)[ FD ]
Line_6 $$ if (vFile != null && (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile))) -->Line_8 $$ OrderEntry orderEntry = ContainerUtil.find(orderEntries, Conditions.instanceOf(LibraryOrSdkOrderEntry.class))[ CD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_4 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(aClass.getProject()).getFileIndex()[ FD ]
Line_20 $$ if (packageName.length() > 0) -->Line_21 $$ buffer.append(packageName)[ CD ]
Line_3 $$ PsiFile file = aClass.getContainingFile()-->Line_5 $$ VirtualFile vFile = file.getVirtualFile()[ FD ]
Line_8 $$ OrderEntry orderEntry = ContainerUtil.find(orderEntries, Conditions.instanceOf(LibraryOrSdkOrderEntry.class))-->Line_9 $$ if (orderEntry != null) [ FD ]
Line_7 $$ final List<OrderEntry> orderEntries = fileIndex.getOrderEntriesForFile(vFile)-->Line_8 $$ OrderEntry orderEntry = ContainerUtil.find(orderEntries, Conditions.instanceOf(LibraryOrSdkOrderEntry.class))[ FD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_6 $$ if (vFile != null && (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile))) [ CD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_4 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(aClass.getProject()).getFileIndex()[ CD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_22 $$ newLine(buffer)[ FD ]
Line_3 $$ PsiFile file = aClass.getContainingFile()-->Line_18 $$ if (file instanceof PsiJavaFile) [ FD ]
Line_18 $$ if (file instanceof PsiJavaFile) -->Line_19 $$ String packageName = ((PsiJavaFile) file).getPackageName()[ CD ]
Line_5 $$ VirtualFile vFile = file.getVirtualFile()-->Line_7 $$ final List<OrderEntry> orderEntries = fileIndex.getOrderEntriesForFile(vFile)[ FD ]
Line_13 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(file)-->Line_15 $$ buffer.append('[').append(module.getName()).append("] ")[ FD ]
Line_20 $$ if (packageName.length() > 0) -->Line_22 $$ newLine(buffer)[ CD ]
Line_4 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(aClass.getProject()).getFileIndex()-->Line_6 $$ if (vFile != null && (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile))) [ FD ]
Line_6 $$ if (vFile != null && (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile))) -->Line_7 $$ final List<OrderEntry> orderEntries = fileIndex.getOrderEntriesForFile(vFile)[ CD ]
Line_4 $$ final ProjectFileIndex fileIndex = ProjectRootManager.getInstance(aClass.getProject()).getFileIndex()-->Line_7 $$ final List<OrderEntry> orderEntries = fileIndex.getOrderEntriesForFile(vFile)[ FD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_3 $$ PsiFile file = aClass.getContainingFile()[ FD ]
Line_14 $$ if (module != null) -->Line_15 $$ buffer.append('[').append(module.getName()).append("] ")[ CD ]
Line_13 $$ final Module module = ModuleUtilCore.findModuleForPsiElement(file)-->Line_14 $$ if (module != null) [ FD ]
Line_8 $$ OrderEntry orderEntry = ContainerUtil.find(orderEntries, Conditions.instanceOf(LibraryOrSdkOrderEntry.class))-->Line_10 $$ buffer.append("[").append(StringUtil.escapeXml(orderEntry.getPresentableName())).append("] ")[ FD ]
Line_19 $$ String packageName = ((PsiJavaFile) file).getPackageName()-->Line_20 $$ if (packageName.length() > 0) [ FD ]
Line_19 $$ String packageName = ((PsiJavaFile) file).getPackageName()-->Line_21 $$ buffer.append(packageName)[ FD ]
Line_6 $$ if (vFile != null && (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile))) -->Line_14 $$ if (module != null) [ CD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_18 $$ if (file instanceof PsiJavaFile) [ CD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_10 $$ buffer.append("[").append(StringUtil.escapeXml(orderEntry.getPresentableName())).append("] ")[ FD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_5 $$ VirtualFile vFile = file.getVirtualFile()[ CD ]
Line_18 $$ if (file instanceof PsiJavaFile) -->Line_20 $$ if (packageName.length() > 0) [ CD ]
Line_6 $$ if (vFile != null && (fileIndex.isInLibrarySource(vFile) || fileIndex.isInLibraryClasses(vFile))) -->Line_9 $$ if (orderEntry != null) [ CD ]
Line_2 $$ private static void generatePackageInfo(StringBuilder buffer, @NotNull PsiClass aClass) -->Line_3 $$ PsiFile file = aClass.getContainingFile()[ CD ]
Line_9 $$ if (orderEntry != null) -->Line_10 $$ buffer.append("[").append(StringUtil.escapeXml(orderEntry.getPresentableName())).append("] ")[ CD ]
