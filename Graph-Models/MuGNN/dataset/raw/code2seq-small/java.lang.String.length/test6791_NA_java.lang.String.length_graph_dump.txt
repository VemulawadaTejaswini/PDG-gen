Line_7 $$ try (CompressedSequentialWriter writer = new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(32), sstableMetadataCollector)) -->Line_12 $$ writer.write("x".getBytes())[ FD ]
Line_8 $$ for (int i = 0; i < 20; i++) writer.write("x".getBytes())-->Line_12 $$ for (int i = 0; i < 20; i++) writer.write("x".getBytes())[ FD ]
Line_16 $$ String res = reader.readLine()-->Line_18 $$ assertEquals(40, res.length())[ FD ]
Line_15 $$ try (RandomAccessReader reader = new CompressedRandomAccessReader.Builder(channel, new CompressionMetadata(filename + ".metadata", f.length(), ChecksumType.CRC32)).build()) -->Line_16 $$ String res = reader.readLine()[ FD ]
Line_3 $$ File f = File.createTempFile("compressed6791_", "3")-->Line_15 $$ try (RandomAccessReader reader = new CompressedRandomAccessReader.Builder(channel, new CompressionMetadata(filename + ".metadata", f.length(), ChecksumType.CRC32)).build()) [ FD ]
Line_9 $$ FileMark mark = writer.mark()-->Line_11 $$ writer.resetAndTruncate(mark)[ FD ]
Line_7 $$ try (CompressedSequentialWriter writer = new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(32), sstableMetadataCollector)) -->Line_8 $$ writer.write("x".getBytes())[ FD ]
Line_24 $$ if (metadata.exists())-->Line_25 $$ metadata.delete()[ CD ]
Line_7 $$ try (CompressedSequentialWriter writer = new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(32), sstableMetadataCollector)) -->Line_13 $$ writer.finish()[ FD ]
Line_23 $$ File metadata = new File(filename + ".metadata")-->Line_24 $$ if (metadata.exists())[ FD ]
Line_16 $$ String res = reader.readLine()-->Line_17 $$ assertEquals(res, "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")[ FD ]
Line_7 $$ try (CompressedSequentialWriter writer = new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(32), sstableMetadataCollector)) -->Line_9 $$ FileMark mark = writer.mark()[ FD ]
Line_2 $$ public void test6791() throws IOException, ConfigurationException -->Line_4 $$ String filename = f.getAbsolutePath()[ CD ]
Line_3 $$ File f = File.createTempFile("compressed6791_", "3")-->Line_4 $$ String filename = f.getAbsolutePath()[ FD ]
Line_10 $$ for (int i = 0; i < 40; ++i) writer.write("y".getBytes())-->Line_12 $$ for (int i = 0; i < 20; i++) writer.write("x".getBytes())[ FD ]
Line_3 $$ File f = File.createTempFile("compressed6791_", "3")-->Line_21 $$ if (f.exists())[ FD ]
Line_23 $$ File metadata = new File(filename + ".metadata")-->Line_25 $$ metadata.delete()[ FD ]
Line_7 $$ try (CompressedSequentialWriter writer = new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(32), sstableMetadataCollector)) -->Line_10 $$ writer.write("y".getBytes())[ FD ]
Line_8 $$ for (int i = 0; i < 20; i++) writer.write("x".getBytes())-->Line_10 $$ for (int i = 0; i < 40; ++i) writer.write("y".getBytes())[ FD ]
Line_3 $$ File f = File.createTempFile("compressed6791_", "3")-->Line_22 $$ assertTrue(f.delete())[ FD ]
Line_21 $$ if (f.exists())-->Line_22 $$ assertTrue(f.delete())[ CD ]
Line_7 $$ try (CompressedSequentialWriter writer = new CompressedSequentialWriter(f, filename + ".metadata", CompressionParams.snappy(32), sstableMetadataCollector)) -->Line_11 $$ writer.resetAndTruncate(mark)[ FD ]
Line_2 $$ public void test6791() throws IOException, ConfigurationException -->Line_3 $$ File f = File.createTempFile("compressed6791_", "3")[ CD ]
