Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_16 $$ return directoryRoot[ CD ]
Line_3 $$ final PsiPackage currentPackage = JavaDirectoryService.getInstance().getPackage(directoryRoot)-->Line_4 $$ final String packagePrefix = currentPackage == null ? null : currentPackage.getQualifiedName() + "."[ FD ]
Line_8 $$ String packagePart = tokenizer.nextToken()-->Line_12 $$ subdirectory = directoryRoot.createSubdirectory(packagePart)[ FD ]
Line_7 $$ while (tokenizer.hasMoreTokens()) -->Line_10 $$ if (subdirectory == null) [ CD ]
Line_7 $$ while (tokenizer.hasMoreTokens()) -->Line_8 $$ String packagePart = tokenizer.nextToken()[ CD ]
Line_8 $$ String packagePart = tokenizer.nextToken()-->Line_11 $$ directoryRoot.checkCreateSubdirectory(packagePart)[ FD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_9 $$ PsiDirectory subdirectory = directoryRoot.findSubdirectory(packagePart)[ FD ]
Line_7 $$ while (tokenizer.hasMoreTokens()) -->Line_9 $$ PsiDirectory subdirectory = directoryRoot.findSubdirectory(packagePart)[ CD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_5 $$ final String packageName = extractPackage(packagePrefix != null && className.startsWith(packagePrefix) ? className.substring(packagePrefix.length()) : className)[ FD ]
Line_8 $$ String packagePart = tokenizer.nextToken()-->Line_9 $$ PsiDirectory subdirectory = directoryRoot.findSubdirectory(packagePart)[ FD ]
Line_9 $$ PsiDirectory subdirectory = directoryRoot.findSubdirectory(packagePart)-->Line_10 $$ if (subdirectory == null) [ FD ]
Line_4 $$ final String packagePrefix = currentPackage == null ? null : currentPackage.getQualifiedName() + "."-->Line_5 $$ final String packageName = extractPackage(packagePrefix != null && className.startsWith(packagePrefix) ? className.substring(packagePrefix.length()) : className)[ FD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_5 $$ final String packageName = extractPackage(packagePrefix != null && className.startsWith(packagePrefix) ? className.substring(packagePrefix.length()) : className)[ CD ]
Line_12 $$ subdirectory = directoryRoot.createSubdirectory(packagePart)-->Line_10 $$ if (subdirectory == null) [ FD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_6 $$ final StringTokenizer tokenizer = new StringTokenizer(packageName, ".")[ CD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_12 $$ subdirectory = directoryRoot.createSubdirectory(packagePart)[ FD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_11 $$ directoryRoot.checkCreateSubdirectory(packagePart)[ FD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_7 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_4 $$ final String packagePrefix = currentPackage == null ? null : currentPackage.getQualifiedName() + "."[ CD ]
Line_10 $$ if (subdirectory == null) -->Line_12 $$ subdirectory = directoryRoot.createSubdirectory(packagePart)[ CD ]
Line_6 $$ final StringTokenizer tokenizer = new StringTokenizer(packageName, ".")-->Line_7 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_6 $$ final StringTokenizer tokenizer = new StringTokenizer(packageName, ".")-->Line_8 $$ String packagePart = tokenizer.nextToken()[ FD ]
Line_9 $$ PsiDirectory subdirectory = directoryRoot.findSubdirectory(packagePart)-->Line_12 $$ subdirectory = directoryRoot.createSubdirectory(packagePart)[ FD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_3 $$ final PsiPackage currentPackage = JavaDirectoryService.getInstance().getPackage(directoryRoot)[ FD ]
Line_10 $$ if (subdirectory == null) -->Line_11 $$ directoryRoot.checkCreateSubdirectory(packagePart)[ CD ]
Line_2 $$ private static PsiDirectory createParentDirectories(@NotNull PsiDirectory directoryRoot, @NotNull String className) throws IncorrectOperationException -->Line_3 $$ final PsiPackage currentPackage = JavaDirectoryService.getInstance().getPackage(directoryRoot)[ CD ]
