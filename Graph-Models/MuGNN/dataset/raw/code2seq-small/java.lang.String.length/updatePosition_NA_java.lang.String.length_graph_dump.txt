Line_13 $$ if (acceptableRegExp(prefix)) -->Line_58 $$ if (index < 0 && !nothingIfFailed) [ CD ]
Line_31 $$ if (searchBack) -->Line_38 $$ index = lastStart[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_63 $$ if (nothingIfFailed && index < 0)[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_3 $$ final String prefix = data.label.getText()[ CD ]
Line_32 $$ int lastStart = -1-->Line_39 $$ matchLength = lastEnd - lastStart[ FD ]
Line_69 $$ if (index < 0) -->Line_70 $$ data.label.setForeground(JBColor.RED)[ CD ]
Line_44 $$ index = -1-->Line_56 $$ index = index < 0 ? -1 : index[ FD ]
Line_48 $$ index = -1-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_53 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_30 $$ Matcher matcher = pattern.matcher(text)-->Line_40 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) [ FD ]
Line_6 $$ if (matchLength == 0) -->Line_11 $$ final int length = document.getTextLength()[ CD ]
Line_41 $$ index = matcher.start()-->Line_56 $$ index = index < 0 ? -1 : index[ FD ]
Line_35 $$ lastStart = matcher.start()-->Line_39 $$ matchLength = lastEnd - lastStart[ FD ]
Line_38 $$ index = lastStart-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_29 $$ Pattern pattern = Pattern.compile(buf.toString(), caseSensitive ? 0 : Pattern.CASE_INSENSITIVE)-->Line_30 $$ Matcher matcher = pattern.matcher(text)[ FD ]
Line_38 $$ index = lastStart-->Line_41 $$ index = matcher.start()[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_65 $$ if (data.segmentHighlighter != null) [ CD ]
Line_55 $$ index = searcher.scan(text, data.searchStart, length)-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_58 $$ if (index < 0 && !nothingIfFailed) [ FD ]
Line_7 $$ index = data.searchStart-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_48 $$ index = -1-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_5 $$ int index-->Line_44 $$ index = -1[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_80 $$ editor.getScrollingModel().scrollToCaret(ScrollType.CENTER)[ FD ]
Line_53 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_34 $$ while (matcher.find() && matcher.start() < data.searchStart) -->Line_36 $$ lastEnd = matcher.end()[ CD ]
Line_51 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_4 $$ int matchLength = prefix.length()[ FD ]
Line_6 $$ if (matchLength == 0) -->Line_10 $$ final CharSequence text = document.getCharsSequence()[ CD ]
Line_51 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)-->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_17 $$ for (int i = 0; i < len; ++i) -->Line_26 $$ buf.append(ch)[ CD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_17 $$ for (int i = 0; i < len; ++i) [ CD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_18 $$ final char ch = prefix.charAt(i)[ FD ]
Line_35 $$ lastStart = matcher.start()-->Line_38 $$ index = lastStart[ FD ]
Line_6 $$ if (matchLength == 0) -->Line_9 $$ final Document document = editor.getDocument()[ CD ]
Line_48 $$ index = -1-->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_5 $$ int index-->Line_48 $$ index = -1[ FD ]
Line_58 $$ if (index < 0 && !nothingIfFailed) -->Line_59 $$ index = searcher.scan(text)[ CD ]
Line_40 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) -->Line_41 $$ index = matcher.start()[ CD ]
Line_55 $$ index = searcher.scan(text, data.searchStart, length)-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_11 $$ final int length = document.getTextLength()-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_12 $$ final boolean caseSensitive = detectSmartCaseSensitive(prefix)[ FD ]
Line_5 $$ int index-->Line_41 $$ index = matcher.start()[ FD ]
Line_41 $$ index = matcher.start()-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_41 $$ index = matcher.start()-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_55 $$ index = searcher.scan(text, data.searchStart, length)-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_34 $$ while (matcher.find() && matcher.start() < data.searchStart) -->Line_35 $$ lastStart = matcher.start()[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_40 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) [ FD ]
Line_44 $$ index = -1-->Line_48 $$ index = -1[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_6 $$ if (matchLength == 0) [ CD ]
Line_6 $$ if (matchLength == 0) -->Line_12 $$ final boolean caseSensitive = detectSmartCaseSensitive(prefix)[ CD ]
Line_53 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_16 $$ final int len = prefix.length()[ FD ]
Line_6 $$ if (matchLength == 0) -->Line_7 $$ index = data.searchStart[ CD ]
Line_44 $$ index = -1-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_5 $$ int index[ CD ]
Line_38 $$ index = lastStart-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_51 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)[ FD ]
Line_69 $$ if (index < 0) -->Line_82 $$ IdeDocumentHistory.getInstance(data.project).includeCurrentCommandAsNavigation()[ CD ]
Line_5 $$ int index-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_69 $$ if (index < 0) -->Line_73 $$ if (matchLength > 0) [ CD ]
Line_56 $$ index = index < 0 ? -1 : index-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_55 $$ index = searcher.scan(text, data.searchStart, length)-->Line_69 $$ if (index < 0) [ FD ]
Line_41 $$ index = matcher.start()-->Line_69 $$ if (index < 0) [ FD ]
Line_38 $$ index = lastStart-->Line_56 $$ index = index < 0 ? -1 : index[ FD ]
Line_38 $$ index = lastStart-->Line_69 $$ if (index < 0) [ FD ]
Line_7 $$ index = data.searchStart-->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_38 $$ index = lastStart-->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_48 $$ index = -1-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_4 $$ int matchLength = prefix.length()-->Line_73 $$ if (matchLength > 0) [ FD ]
Line_73 $$ if (matchLength > 0) -->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_79 $$ editor.getSelectionModel().removeSelection()[ FD ]
Line_17 $$ for (int i = 0; i < len; ++i) -->Line_18 $$ final char ch = prefix.charAt(i)[ CD ]
Line_7 $$ index = data.searchStart-->Line_69 $$ if (index < 0) [ FD ]
Line_56 $$ index = index < 0 ? -1 : index-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_41 $$ index = matcher.start()-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_59 $$ index = searcher.scan(text)-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_5 $$ int index-->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_39 $$ matchLength = lastEnd - lastStart-->Line_42 $$ matchLength = matcher.end() - matcher.start()[ FD ]
Line_53 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_44 $$ index = -1-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_51 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)[ CD ]
Line_59 $$ index = searcher.scan(text)-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_5 $$ int index-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_69 $$ if (index < 0) -->Line_72 $$ data.label.setForeground(JBColor.foreground())[ CD ]
Line_5 $$ int index-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_48 $$ index = -1-->Line_56 $$ index = index < 0 ? -1 : index[ FD ]
Line_52 $$ if (searchBack) -->Line_56 $$ index = index < 0 ? -1 : index[ CD ]
Line_31 $$ if (searchBack) -->Line_40 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) [ CD ]
Line_38 $$ index = lastStart-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_7 $$ index = data.searchStart-->Line_38 $$ index = lastStart[ FD ]
Line_42 $$ matchLength = matcher.end() - matcher.start()-->Line_73 $$ if (matchLength > 0) [ FD ]
Line_18 $$ final char ch = prefix.charAt(i)-->Line_26 $$ buf.append(ch)[ FD ]
Line_10 $$ final CharSequence text = document.getCharsSequence()-->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_48 $$ index = -1-->Line_69 $$ if (index < 0) [ FD ]
Line_5 $$ int index-->Line_7 $$ index = data.searchStart[ FD ]
Line_53 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_69 $$ if (index < 0) [ FD ]
Line_6 $$ if (matchLength == 0) -->Line_13 $$ if (acceptableRegExp(prefix)) [ CD ]
Line_7 $$ index = data.searchStart-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_55 $$ index = searcher.scan(text, data.searchStart, length)-->Line_56 $$ index = index < 0 ? -1 : index[ FD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_16 $$ final int len = prefix.length()[ CD ]
Line_7 $$ index = data.searchStart-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_38 $$ index = lastStart-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_56 $$ index = index < 0 ? -1 : index-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_44 $$ index = -1-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_13 $$ if (acceptableRegExp(prefix)) -->Line_52 $$ if (searchBack) [ CD ]
Line_30 $$ Matcher matcher = pattern.matcher(text)-->Line_34 $$ while (matcher.find() && matcher.start() < data.searchStart) [ FD ]
Line_65 $$ if (data.segmentHighlighter != null) -->Line_66 $$ data.segmentHighlighter.dispose()[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_4 $$ int matchLength = prefix.length()[ CD ]
Line_7 $$ index = data.searchStart-->Line_44 $$ index = -1[ FD ]
Line_74 $$ TextAttributes attributes = editor.getColorsScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_30 $$ Matcher matcher = pattern.matcher(text)-->Line_41 $$ index = matcher.start()[ FD ]
Line_31 $$ if (searchBack) -->Line_32 $$ int lastStart = -1[ CD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_74 $$ TextAttributes attributes = editor.getColorsScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)[ FD ]
Line_69 $$ if (index < 0) -->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ CD ]
Line_48 $$ index = -1-->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_69 $$ if (index < 0) [ CD ]
Line_52 $$ if (searchBack) -->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ CD ]
Line_69 $$ if (index < 0) -->Line_80 $$ editor.getScrollingModel().scrollToCaret(ScrollType.CENTER)[ CD ]
Line_38 $$ index = lastStart-->Line_44 $$ index = -1[ FD ]
Line_7 $$ index = data.searchStart-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_38 $$ index = lastStart-->Line_48 $$ index = -1[ FD ]
Line_33 $$ int lastEnd = -1-->Line_36 $$ lastEnd = matcher.end()[ FD ]
Line_41 $$ index = matcher.start()-->Line_44 $$ index = -1[ FD ]
Line_4 $$ int matchLength = prefix.length()-->Line_6 $$ if (matchLength == 0) [ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_9 $$ final Document document = editor.getDocument()[ FD ]
Line_30 $$ Matcher matcher = pattern.matcher(text)-->Line_35 $$ lastStart = matcher.start()[ FD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_10 $$ final CharSequence text = document.getCharsSequence()[ FD ]
Line_10 $$ final CharSequence text = document.getCharsSequence()-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_44 $$ index = -1-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_69 $$ if (index < 0) -->Line_81 $$ data.ignoreCaretMove = false[ CD ]
Line_18 $$ final char ch = prefix.charAt(i)-->Line_22 $$ if ("[ FD ]
Line_10 $$ final CharSequence text = document.getCharsSequence()-->Line_59 $$ index = searcher.scan(text)[ FD ]
Line_40 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) -->Line_44 $$ index = -1[ CD ]
Line_30 $$ Matcher matcher = pattern.matcher(text)-->Line_42 $$ matchLength = matcher.end() - matcher.start()[ FD ]
Line_32 $$ int lastStart = -1-->Line_35 $$ lastStart = matcher.start()[ FD ]
Line_40 $$ if (matcher.find(data.searchStart) || !nothingIfFailed && matcher.find(0)) -->Line_42 $$ matchLength = matcher.end() - matcher.start()[ CD ]
Line_5 $$ int index-->Line_38 $$ index = lastStart[ FD ]
Line_7 $$ index = data.searchStart-->Line_56 $$ index = index < 0 ? -1 : index[ FD ]
Line_69 $$ if (index < 0) -->Line_79 $$ editor.getSelectionModel().removeSelection()[ CD ]
Line_52 $$ if (searchBack) -->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ CD ]
Line_41 $$ index = matcher.start()-->Line_48 $$ index = -1[ FD ]
Line_44 $$ index = -1-->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_59 $$ index = searcher.scan(text)-->Line_69 $$ if (index < 0) [ FD ]
Line_30 $$ Matcher matcher = pattern.matcher(text)-->Line_36 $$ lastEnd = matcher.end()[ FD ]
Line_10 $$ final CharSequence text = document.getCharsSequence()-->Line_30 $$ Matcher matcher = pattern.matcher(text)[ FD ]
Line_4 $$ int matchLength = prefix.length()-->Line_42 $$ matchLength = matcher.end() - matcher.start()[ FD ]
Line_5 $$ int index-->Line_56 $$ index = index < 0 ? -1 : index[ FD ]
Line_7 $$ index = data.searchStart-->Line_41 $$ index = matcher.start()[ FD ]
Line_56 $$ index = index < 0 ? -1 : index-->Line_69 $$ if (index < 0) [ FD ]
Line_32 $$ int lastStart = -1-->Line_38 $$ index = lastStart[ FD ]
Line_3 $$ final String prefix = data.label.getText()-->Line_13 $$ if (acceptableRegExp(prefix)) [ FD ]
Line_4 $$ int matchLength = prefix.length()-->Line_39 $$ matchLength = lastEnd - lastStart[ FD ]
Line_44 $$ index = -1-->Line_69 $$ if (index < 0) [ FD ]
Line_17 $$ for (int i = 0; i < len; ++i) -->Line_18 $$ final char ch = prefix.charAt(i)[ FD ]
Line_5 $$ int index-->Line_69 $$ if (index < 0) [ FD ]
Line_7 $$ index = data.searchStart-->Line_48 $$ index = -1[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_75 $$ data.segmentHighlighter = editor.getMarkupModel().addRangeHighlighter(index, index + matchLength, HighlighterLayer.LAST + 1, attributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_33 $$ int lastEnd = -1-->Line_39 $$ matchLength = lastEnd - lastStart[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_69 $$ if (index < 0) -->Line_77 $$ data.ignoreCaretMove = true[ CD ]
Line_31 $$ if (searchBack) -->Line_34 $$ while (matcher.find() && matcher.start() < data.searchStart) [ CD ]
Line_39 $$ matchLength = lastEnd - lastStart-->Line_73 $$ if (matchLength > 0) [ FD ]
Line_41 $$ index = matcher.start()-->Line_78 $$ editor.getCaretModel().moveToOffset(index)[ FD ]
Line_73 $$ if (matchLength > 0) -->Line_74 $$ TextAttributes attributes = editor.getColorsScheme().getAttributes(EditorColors.SEARCH_RESULT_ATTRIBUTES)[ CD ]
Line_63 $$ if (nothingIfFailed && index < 0)-->Line_64 $$ return[ CD ]
Line_9 $$ final Document document = editor.getDocument()-->Line_11 $$ final int length = document.getTextLength()[ FD ]
Line_16 $$ final int len = prefix.length()-->Line_17 $$ for (int i = 0; i < len; ++i) [ FD ]
Line_41 $$ index = matcher.start()-->Line_53 $$ index = searcher.scan(text, 0, data.searchStart)[ FD ]
Line_51 $$ StringSearcher searcher = new StringSearcher(prefix, caseSensitive, !searchBack)-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_2 $$ private static void updatePosition(Editor editor, PerHintSearchData data, boolean nothingIfFailed, boolean searchBack) -->Line_63 $$ if (nothingIfFailed && index < 0)[ FD ]
Line_53 $$ index = searcher.scan(text, 0, data.searchStart)-->Line_56 $$ index = index < 0 ? -1 : index[ FD ]
Line_5 $$ int index-->Line_55 $$ index = searcher.scan(text, data.searchStart, length)[ FD ]
Line_31 $$ if (searchBack) -->Line_39 $$ matchLength = lastEnd - lastStart[ CD ]
Line_65 $$ if (data.segmentHighlighter != null) -->Line_67 $$ data.segmentHighlighter = null[ CD ]
Line_31 $$ if (searchBack) -->Line_33 $$ int lastEnd = -1[ CD ]
Line_36 $$ lastEnd = matcher.end()-->Line_39 $$ matchLength = lastEnd - lastStart[ FD ]
