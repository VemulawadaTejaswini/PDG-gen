Line_45 $$ if (isPatch) -->Line_52 $$ rect = stripWhitespace(image)[ CD ]
Line_12 $$ image = newImage-->Line_21 $$ pads = getPads(image, name, splits)[ FD ]
Line_59 $$ Matcher matcher = indexPattern.matcher(name)-->Line_62 $$ index = Integer.parseInt(matcher.group(2))[ FD ]
Line_33 $$ height = Math.round(height * scale)-->Line_41 $$ g.drawImage(image, 0, 0, width, height, null)[ FD ]
Line_24 $$ height -= 2-->Line_36 $$ newImage.getGraphics().drawImage(image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING), 0, 0, null)[ FD ]
Line_8 $$ int width = image.getWidth(), height = image.getHeight()-->Line_36 $$ newImage.getGraphics().drawImage(image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING), 0, 0, null)[ FD ]
Line_12 $$ image = newImage-->Line_52 $$ rect = stripWhitespace(image)[ FD ]
Line_24 $$ height -= 2-->Line_26 $$ newImage.getGraphics().drawImage(image, 0, 0, width, height, 1, 1, width + 1, height + 1, null)[ FD ]
Line_27 $$ image = newImage-->Line_36 $$ newImage.getGraphics().drawImage(image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING), 0, 0, null)[ FD ]
Line_12 $$ image = newImage-->Line_43 $$ image = newImage[ FD ]
Line_35 $$ if (scale < 1) -->Line_40 $$ g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC)[ CD ]
Line_59 $$ Matcher matcher = indexPattern.matcher(name)-->Line_61 $$ name = matcher.group(1)[ FD ]
Line_12 $$ image = newImage-->Line_36 $$ newImage.getGraphics().drawImage(image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING), 0, 0, null)[ FD ]
Line_52 $$ rect = stripWhitespace(image)-->Line_53 $$ if (rect == null)[ FD ]
Line_24 $$ height -= 2-->Line_41 $$ g.drawImage(image, 0, 0, width, height, null)[ FD ]
Line_58 $$ if (settings.useIndexes) -->Line_60 $$ if (matcher.matches()) [ CD ]
Line_17 $$ if (isPatch) -->Line_20 $$ splits = getSplits(image, name)[ CD ]
Line_15 $$ int[] splits = null, pads = null-->Line_20 $$ splits = getSplits(image, name)[ FD ]
Line_35 $$ if (scale < 1) -->Line_39 $$ g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY)[ CD ]
Line_43 $$ image = newImage-->Line_52 $$ rect = stripWhitespace(image)[ FD ]
Line_62 $$ index = Integer.parseInt(matcher.group(2))-->Line_66 $$ rect.index = index[ FD ]
Line_10 $$ BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR)-->Line_27 $$ image = newImage[ FD ]
Line_45 $$ if (isPatch) -->Line_53 $$ if (rect == null)[ CD ]
Line_20 $$ splits = getSplits(image, name)-->Line_48 $$ rect.splits = splits[ FD ]
Line_38 $$ Graphics2D g = (Graphics2D) newImage.getGraphics()-->Line_40 $$ g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BICUBIC)[ FD ]
Line_9 $$ if (image.getType() != BufferedImage.TYPE_4BYTE_ABGR) -->Line_10 $$ BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR)[ CD ]
Line_15 $$ int[] splits = null, pads = null-->Line_49 $$ rect.pads = pads[ FD ]
Line_15 $$ int[] splits = null, pads = null-->Line_48 $$ rect.splits = splits[ FD ]
Line_10 $$ BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR)-->Line_36 $$ newImage.getGraphics().drawImage(image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING), 0, 0, null)[ FD ]
Line_10 $$ BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR)-->Line_26 $$ newImage.getGraphics().drawImage(image, 0, 0, width, height, 1, 1, width + 1, height + 1, null)[ FD ]
Line_9 $$ if (image.getType() != BufferedImage.TYPE_4BYTE_ABGR) -->Line_12 $$ image = newImage[ CD ]
Line_32 $$ width = Math.round(width * scale)-->Line_36 $$ newImage.getGraphics().drawImage(image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING), 0, 0, null)[ FD ]
Line_16 $$ Rect rect = null-->Line_52 $$ rect = stripWhitespace(image)[ FD ]
Line_24 $$ height -= 2-->Line_33 $$ height = Math.round(height * scale)[ FD ]
Line_38 $$ Graphics2D g = (Graphics2D) newImage.getGraphics()-->Line_41 $$ g.drawImage(image, 0, 0, width, height, null)[ FD ]
Line_8 $$ int width = image.getWidth(), height = image.getHeight()-->Line_24 $$ height -= 2[ FD ]
Line_10 $$ BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR)-->Line_11 $$ newImage.getGraphics().drawImage(image, 0, 0, null)[ FD ]
Line_12 $$ image = newImage-->Line_20 $$ splits = getSplits(image, name)[ FD ]
Line_17 $$ if (isPatch) -->Line_26 $$ newImage.getGraphics().drawImage(image, 0, 0, width, height, 1, 1, width + 1, height + 1, null)[ CD ]
Line_38 $$ Graphics2D g = (Graphics2D) newImage.getGraphics()-->Line_39 $$ g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY)[ FD ]
Line_45 $$ if (isPatch) -->Line_48 $$ rect.splits = splits[ CD ]
Line_60 $$ if (matcher.matches()) -->Line_62 $$ index = Integer.parseInt(matcher.group(2))[ CD ]
Line_10 $$ BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR)-->Line_38 $$ Graphics2D g = (Graphics2D) newImage.getGraphics()[ FD ]
Line_10 $$ BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR)-->Line_43 $$ image = newImage[ FD ]
Line_20 $$ splits = getSplits(image, name)-->Line_21 $$ pads = getPads(image, name, splits)[ FD ]
Line_8 $$ int width = image.getWidth(), height = image.getHeight()-->Line_26 $$ newImage.getGraphics().drawImage(image, 0, 0, width, height, 1, 1, width + 1, height + 1, null)[ FD ]
Line_15 $$ int[] splits = null, pads = null-->Line_21 $$ pads = getPads(image, name, splits)[ FD ]
Line_35 $$ if (scale < 1) -->Line_38 $$ Graphics2D g = (Graphics2D) newImage.getGraphics()[ CD ]
Line_16 $$ Rect rect = null-->Line_53 $$ if (rect == null)[ FD ]
Line_8 $$ int width = image.getWidth(), height = image.getHeight()-->Line_32 $$ width = Math.round(width * scale)[ FD ]
Line_32 $$ width = Math.round(width * scale)-->Line_41 $$ g.drawImage(image, 0, 0, width, height, null)[ FD ]
Line_35 $$ if (scale < 1) -->Line_41 $$ g.drawImage(image, 0, 0, width, height, null)[ CD ]
Line_27 $$ image = newImage-->Line_41 $$ g.drawImage(image, 0, 0, width, height, null)[ FD ]
Line_33 $$ height = Math.round(height * scale)-->Line_36 $$ newImage.getGraphics().drawImage(image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING), 0, 0, null)[ FD ]
Line_53 $$ if (rect == null)-->Line_54 $$ return null[ CD ]
Line_17 $$ if (isPatch) -->Line_27 $$ image = newImage[ CD ]
Line_59 $$ Matcher matcher = indexPattern.matcher(name)-->Line_60 $$ if (matcher.matches()) [ FD ]
Line_12 $$ image = newImage-->Line_27 $$ image = newImage[ FD ]
Line_58 $$ if (settings.useIndexes) -->Line_59 $$ Matcher matcher = indexPattern.matcher(name)[ CD ]
Line_8 $$ int width = image.getWidth(), height = image.getHeight()-->Line_33 $$ height = Math.round(height * scale)[ FD ]
Line_10 $$ BufferedImage newImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR)-->Line_12 $$ image = newImage[ FD ]
Line_45 $$ if (isPatch) -->Line_49 $$ rect.pads = pads[ CD ]
Line_60 $$ if (matcher.matches()) -->Line_61 $$ name = matcher.group(1)[ CD ]
Line_35 $$ if (scale < 1) -->Line_36 $$ newImage.getGraphics().drawImage(image.getScaledInstance(width, height, Image.SCALE_AREA_AVERAGING), 0, 0, null)[ CD ]
Line_27 $$ image = newImage-->Line_43 $$ image = newImage[ FD ]
Line_12 $$ image = newImage-->Line_41 $$ g.drawImage(image, 0, 0, width, height, null)[ FD ]
Line_8 $$ int width = image.getWidth(), height = image.getHeight()-->Line_41 $$ g.drawImage(image, 0, 0, width, height, null)[ FD ]
Line_12 $$ image = newImage-->Line_26 $$ newImage.getGraphics().drawImage(image, 0, 0, width, height, 1, 1, width + 1, height + 1, null)[ FD ]
Line_17 $$ if (isPatch) -->Line_21 $$ pads = getPads(image, name, splits)[ CD ]
Line_17 $$ if (isPatch) -->Line_24 $$ height -= 2[ CD ]
Line_9 $$ if (image.getType() != BufferedImage.TYPE_4BYTE_ABGR) -->Line_11 $$ newImage.getGraphics().drawImage(image, 0, 0, null)[ CD ]
Line_27 $$ image = newImage-->Line_52 $$ rect = stripWhitespace(image)[ FD ]
Line_21 $$ pads = getPads(image, name, splits)-->Line_49 $$ rect.pads = pads[ FD ]
Line_61 $$ name = matcher.group(1)-->Line_65 $$ rect.name = name[ FD ]
Line_45 $$ if (isPatch) -->Line_50 $$ rect.canRotate = false[ CD ]
