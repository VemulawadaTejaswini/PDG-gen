Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_5 $$ final int offset = editor.logicalPositionToOffset(position)[ CD ]
Line_7 $$ final CharSequence elements = editor.getDocument().getCharsSequence()-->Line_11 $$ if (start >= 0 && elements.charAt(start) == '$') [ FD ]
Line_4 $$ String text = ""-->Line_29 $$ UIUtil.showTooltip(editor, start, end + 1, text)[ FD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_28 $$ if (text.length() > 0) [ CD ]
Line_11 $$ if (start >= 0 && elements.charAt(start) == '$') -->Line_14 $$ if (end < length && elements.charAt(end) == '$') [ CD ]
Line_11 $$ if (start >= 0 && elements.charAt(start) == '$') -->Line_13 $$ while (end < length && Character.isJavaIdentifierPart(elements.charAt(end)) && elements.charAt(end) != '$') end++[ CD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_11 $$ if (start >= 0 && elements.charAt(start) == '$') [ CD ]
Line_28 $$ if (text.length() > 0) -->Line_29 $$ UIUtil.showTooltip(editor, start, end + 1, text)[ CD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_10 $$ while (start >= 0 && Character.isJavaIdentifierPart(elements.charAt(start)) && elements.charAt(start) != '$') start--[ CD ]
Line_12 $$ end = offset-->Line_13 $$ end++[ FD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_8 $$ int start = offset - 1[ CD ]
Line_7 $$ final CharSequence elements = editor.getDocument().getCharsSequence()-->Line_15 $$ String varname = elements.subSequence(start + 1, end).toString()[ FD ]
Line_12 $$ end = offset-->Line_14 $$ if (end < length && elements.charAt(end) == '$') [ FD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_9 $$ int end = -1[ CD ]
Line_7 $$ final CharSequence elements = editor.getDocument().getCharsSequence()-->Line_14 $$ if (end < length && elements.charAt(end) == '$') [ FD ]
Line_8 $$ int start = offset - 1-->Line_11 $$ if (start >= 0 && elements.charAt(start) == '$') [ FD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_4 $$ String text = ""[ CD ]
Line_23 $$ if (foundVar != null) -->Line_24 $$ text = UIUtil.getShortParamString(editor.getUserData(CURRENT_CONFIGURATION_KEY), varname)[ CD ]
Line_11 $$ if (start >= 0 && elements.charAt(start) == '$') -->Line_12 $$ end = offset[ CD ]
Line_12 $$ end = offset-->Line_13 $$ while (end < length && Character.isJavaIdentifierPart(elements.charAt(end)) && elements.charAt(end) != '$') end++[ FD ]
Line_8 $$ int start = offset - 1-->Line_29 $$ UIUtil.showTooltip(editor, start, end + 1, text)[ FD ]
Line_8 $$ int start = offset - 1-->Line_10 $$ start--[ FD ]
Line_15 $$ String varname = elements.subSequence(start + 1, end).toString()-->Line_18 $$ if (var.getName().equals(varname)) [ FD ]
Line_24 $$ text = UIUtil.getShortParamString(editor.getUserData(CURRENT_CONFIGURATION_KEY), varname)-->Line_28 $$ if (text.length() > 0) [ FD ]
Line_14 $$ if (end < length && elements.charAt(end) == '$') -->Line_15 $$ String varname = elements.subSequence(start + 1, end).toString()[ CD ]
Line_8 $$ int start = offset - 1-->Line_10 $$ while (start >= 0 && Character.isJavaIdentifierPart(elements.charAt(start)) && elements.charAt(start) != '$') start--[ FD ]
Line_12 $$ end = offset-->Line_15 $$ String varname = elements.subSequence(start + 1, end).toString()[ FD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_6 $$ final int length = editor.getDocument().getTextLength()[ CD ]
Line_24 $$ text = UIUtil.getShortParamString(editor.getUserData(CURRENT_CONFIGURATION_KEY), varname)-->Line_29 $$ UIUtil.showTooltip(editor, start, end + 1, text)[ FD ]
Line_5 $$ final int offset = editor.logicalPositionToOffset(position)-->Line_12 $$ end = offset[ FD ]
Line_17 $$ for (final Variable var : variables) -->Line_18 $$ if (var.getName().equals(varname)) [ FD ]
Line_7 $$ final CharSequence elements = editor.getDocument().getCharsSequence()-->Line_10 $$ while (start >= 0 && Character.isJavaIdentifierPart(elements.charAt(start)) && elements.charAt(start) != '$') start--[ FD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_3 $$ checkModelValidity()[ CD ]
Line_9 $$ int end = -1-->Line_15 $$ String varname = elements.subSequence(start + 1, end).toString()[ FD ]
Line_7 $$ final CharSequence elements = editor.getDocument().getCharsSequence()-->Line_13 $$ while (end < length && Character.isJavaIdentifierPart(elements.charAt(end)) && elements.charAt(end) != '$') end++[ FD ]
Line_9 $$ int end = -1-->Line_13 $$ while (end < length && Character.isJavaIdentifierPart(elements.charAt(end)) && elements.charAt(end) != '$') end++[ FD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_7 $$ final CharSequence elements = editor.getDocument().getCharsSequence()[ CD ]
Line_9 $$ int end = -1-->Line_14 $$ if (end < length && elements.charAt(end) == '$') [ FD ]
Line_14 $$ if (end < length && elements.charAt(end) == '$') -->Line_23 $$ if (foundVar != null) [ CD ]
Line_28 $$ if (text.length() > 0) -->Line_31 $$ TooltipController.getInstance().cancelTooltips()[ CD ]
Line_17 $$ for (final Variable var : variables) -->Line_19 $$ foundVar = var[ FD ]
Line_4 $$ String text = ""-->Line_28 $$ if (text.length() > 0) [ FD ]
Line_4 $$ String text = ""-->Line_24 $$ text = UIUtil.getShortParamString(editor.getUserData(CURRENT_CONFIGURATION_KEY), varname)[ FD ]
Line_15 $$ String varname = elements.subSequence(start + 1, end).toString()-->Line_24 $$ text = UIUtil.getShortParamString(editor.getUserData(CURRENT_CONFIGURATION_KEY), varname)[ FD ]
Line_9 $$ int end = -1-->Line_12 $$ end = offset[ FD ]
Line_14 $$ if (end < length && elements.charAt(end) == '$') -->Line_16 $$ Variable foundVar = null[ CD ]
Line_16 $$ Variable foundVar = null-->Line_23 $$ if (foundVar != null) [ FD ]
Line_19 $$ foundVar = var-->Line_23 $$ if (foundVar != null) [ FD ]
Line_18 $$ if (var.getName().equals(varname)) -->Line_19 $$ foundVar = var[ CD ]
Line_9 $$ int end = -1-->Line_13 $$ end++[ FD ]
Line_16 $$ Variable foundVar = null-->Line_19 $$ foundVar = var[ FD ]
Line_2 $$ private void handleInputFocusMovement(LogicalPosition position) -->Line_5 $$ final int offset = editor.logicalPositionToOffset(position)[ FD ]
