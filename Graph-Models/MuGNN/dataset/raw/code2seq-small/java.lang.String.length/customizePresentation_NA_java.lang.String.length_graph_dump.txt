Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_10 $$ final String label = descriptor.getLabel()[ CD ]
Line_20 $$ if (shouldHighlightAsRecursive && descriptor.isRecursiveCall()) -->Line_21 $$ component.append(" [" + descriptor.getOccurrenceIndex() + "]", SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ CD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_13 $$ final SimpleTextAttributes attributes = getAttributes(descriptor)[ FD ]
Line_10 $$ final String label = descriptor.getLabel()-->Line_19 $$ component.append(label.substring(closingBrace + 1, label.length()), attributes)[ FD ]
Line_4 $$ final boolean shouldHighlightAsRecursive = isOccurrenceOfSelectedFrame(selectedDescriptor, descriptor)-->Line_20 $$ if (shouldHighlightAsRecursive && descriptor.isRecursiveCall()) [ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_18 $$ component.append(" (" + label.substring(openingBrace + 1, closingBrace) + ")", SimpleTextAttributes.GRAY_ITALIC_ATTRIBUTES)[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_11 $$ final int openingBrace = label.indexOf("[ CD ]
Line_14 $$ if (openingBrace < 0 || closingBrace < 0) -->Line_19 $$ component.append(label.substring(closingBrace + 1, label.length()), attributes)[ CD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_14 $$ if (openingBrace < 0 || closingBrace < 0) [ CD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_13 $$ final SimpleTextAttributes attributes = getAttributes(descriptor)[ CD ]
Line_10 $$ final String label = descriptor.getLabel()-->Line_15 $$ component.append(label, attributes)[ FD ]
Line_6 $$ if (markup != null) -->Line_7 $$ component.append("[" + markup.getText() + "] ", new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, markup.getColor()))[ CD ]
Line_13 $$ final SimpleTextAttributes attributes = getAttributes(descriptor)-->Line_15 $$ component.append(label, attributes)[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_9 $$ boolean needSeparator = false[ CD ]
Line_10 $$ final String label = descriptor.getLabel()-->Line_18 $$ component.append(" (" + label.substring(openingBrace + 1, closingBrace) + ")", SimpleTextAttributes.GRAY_ITALIC_ATTRIBUTES)[ FD ]
Line_13 $$ final SimpleTextAttributes attributes = getAttributes(descriptor)-->Line_19 $$ component.append(label.substring(closingBrace + 1, label.length()), attributes)[ FD ]
Line_14 $$ if (openingBrace < 0 || closingBrace < 0) -->Line_18 $$ component.append(" (" + label.substring(openingBrace + 1, closingBrace) + ")", SimpleTextAttributes.GRAY_ITALIC_ATTRIBUTES)[ CD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_12 $$ final int closingBrace = (openingBrace < 0) ? -1 : label.indexOf("}")[ CD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_5 $$ final ValueMarkup markup = descriptor.getValueMarkup()[ CD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_7 $$ component.append("[" + markup.getText() + "] ", new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, markup.getColor()))[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_4 $$ final boolean shouldHighlightAsRecursive = isOccurrenceOfSelectedFrame(selectedDescriptor, descriptor)[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_15 $$ component.append(label, attributes)[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_21 $$ component.append(" [" + descriptor.getOccurrenceIndex() + "]", SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES)[ FD ]
Line_14 $$ if (openingBrace < 0 || closingBrace < 0) -->Line_17 $$ component.append(label.substring(0, openingBrace - 1), attributes)[ CD ]
Line_10 $$ final String label = descriptor.getLabel()-->Line_11 $$ final int openingBrace = label.indexOf("[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_10 $$ final String label = descriptor.getLabel()[ FD ]
Line_13 $$ final SimpleTextAttributes attributes = getAttributes(descriptor)-->Line_17 $$ component.append(label.substring(0, openingBrace - 1), attributes)[ FD ]
Line_12 $$ final int closingBrace = (openingBrace < 0) ? -1 : label.indexOf("}")-->Line_18 $$ component.append(" (" + label.substring(openingBrace + 1, closingBrace) + ")", SimpleTextAttributes.GRAY_ITALIC_ATTRIBUTES)[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_19 $$ component.append(label.substring(closingBrace + 1, label.length()), attributes)[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_17 $$ component.append(label.substring(0, openingBrace - 1), attributes)[ FD ]
Line_10 $$ final String label = descriptor.getLabel()-->Line_17 $$ component.append(label.substring(0, openingBrace - 1), attributes)[ FD ]
Line_10 $$ final String label = descriptor.getLabel()-->Line_12 $$ final int closingBrace = (openingBrace < 0) ? -1 : label.indexOf("}")[ FD ]
Line_14 $$ if (openingBrace < 0 || closingBrace < 0) -->Line_20 $$ if (shouldHighlightAsRecursive && descriptor.isRecursiveCall()) [ CD ]
Line_5 $$ final ValueMarkup markup = descriptor.getValueMarkup()-->Line_6 $$ if (markup != null) [ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_6 $$ if (markup != null) [ CD ]
Line_14 $$ if (openingBrace < 0 || closingBrace < 0) -->Line_15 $$ component.append(label, attributes)[ CD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_3 $$ component.setIcon(descriptor.getIcon())[ CD ]
Line_5 $$ final ValueMarkup markup = descriptor.getValueMarkup()-->Line_7 $$ component.append("[" + markup.getText() + "] ", new SimpleTextAttributes(SimpleTextAttributes.STYLE_BOLD, markup.getColor()))[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_20 $$ if (shouldHighlightAsRecursive && descriptor.isRecursiveCall()) [ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_5 $$ final ValueMarkup markup = descriptor.getValueMarkup()[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_3 $$ component.setIcon(descriptor.getIcon())[ FD ]
Line_2 $$ public void customizePresentation(StackFrameDescriptorImpl descriptor, @NotNull ColoredTextContainer component, StackFrameDescriptorImpl selectedDescriptor) -->Line_4 $$ final boolean shouldHighlightAsRecursive = isOccurrenceOfSelectedFrame(selectedDescriptor, descriptor)[ CD ]
