Line_27 $$ String value = (String) statementBody.get(key)-->Line_35 $$ flag.setValue(value)[ FD ]
Line_33 $$ Flag flag = new Flag()-->Line_36 $$ flags.add(flag)[ FD ]
Line_28 $$ List<Flag> flags = statement.getFlags()-->Line_30 $$ flags = new ArrayList()[ FD ]
Line_25 $$ for (String key : statementBody.keySet()) -->Line_26 $$ if (key.startsWith(StringPool.AT)) [ FD ]
Line_27 $$ String value = (String) statementBody.get(key)-->Line_48 $$ parameterMap.put(CamelCaseUtil.normalizeCamelCase(key), value)[ FD ]
Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) -->Line_48 $$ parameterMap.put(CamelCaseUtil.normalizeCamelCase(key), value)[ CD ]
Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) -->Line_47 $$ Object value = statementBody.get(key)[ CD ]
Line_25 $$ for (String key : statementBody.keySet()) -->Line_47 $$ Object value = statementBody.get(key)[ FD ]
Line_11 $$ if (y != -1) -->Line_14 $$ for (int i = 0; i < whiteList.length; i++) [ CD ]
Line_23 $$ HashMap<String, Object> parameterMap = new HashMap(statementBody.size())-->Line_48 $$ parameterMap.put(CamelCaseUtil.normalizeCamelCase(key), value)[ FD ]
Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) -->Line_44 $$ Statement variableStatement = _parseStatement(statement, key, map)[ CD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_51 $$ return statement[ CD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_4 $$ _statements.add(statement)[ CD ]
Line_10 $$ int y = name.indexOf(StringPool.OPEN_BRACKET)-->Line_18 $$ name = name.substring(0, y)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_6 $$ if (x == -1) [ CD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_7 $$ statement.setMethod(assignment.trim())[ FD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_4 $$ _statements.add(statement)[ FD ]
Line_25 $$ for (String key : statementBody.keySet()) -->Line_48 $$ parameterMap.put(CamelCaseUtil.normalizeCamelCase(key), value)[ FD ]
Line_28 $$ List<Flag> flags = statement.getFlags()-->Line_36 $$ flags.add(flag)[ FD ]
Line_28 $$ List<Flag> flags = statement.getFlags()-->Line_31 $$ statement.setFlags(flags)[ FD ]
Line_13 $$ String[] whiteList = StringUtil.split(whitelistString)-->Line_17 $$ statement.setWhitelist(whiteList)[ FD ]
Line_6 $$ if (x == -1) -->Line_21 $$ statement.setMethod(assignment.substring(x + 1).trim())[ CD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_21 $$ statement.setMethod(assignment.substring(x + 1).trim())[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_9 $$ String name = assignment.substring(0, x).trim()[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_21 $$ statement.setMethod(assignment.substring(x + 1).trim())[ FD ]
Line_44 $$ Statement variableStatement = _parseStatement(statement, key, map)-->Line_45 $$ variableStatements.add(variableStatement)[ FD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_20 $$ statement.setName(name)[ FD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_17 $$ statement.setWhitelist(whiteList)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_7 $$ statement.setMethod(assignment.trim())[ FD ]
Line_9 $$ String name = assignment.substring(0, x).trim()-->Line_18 $$ name = name.substring(0, y)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_5 $$ int x = assignment.indexOf(StringPool.EQUAL)[ CD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_23 $$ HashMap<String, Object> parameterMap = new HashMap(statementBody.size())[ CD ]
Line_25 $$ for (String key : statementBody.keySet()) -->Line_44 $$ Statement variableStatement = _parseStatement(statement, key, map)[ FD ]
Line_39 $$ List<Statement> variableStatements = statement.getVariableStatements()-->Line_41 $$ variableStatements = new ArrayList()[ FD ]
Line_39 $$ List<Statement> variableStatements = statement.getVariableStatements()-->Line_42 $$ statement.setVariableStatements(variableStatements)[ FD ]
Line_12 $$ String whitelistString = name.substring(y + 1, name.length() - 1)-->Line_13 $$ String[] whiteList = StringUtil.split(whitelistString)[ FD ]
Line_30 $$ flags = new ArrayList()-->Line_36 $$ flags.add(flag)[ FD ]
Line_9 $$ String name = assignment.substring(0, x).trim()-->Line_10 $$ int y = name.indexOf(StringPool.OPEN_BRACKET)[ FD ]
Line_33 $$ Flag flag = new Flag()-->Line_35 $$ flag.setValue(value)[ FD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_39 $$ List<Statement> variableStatements = statement.getVariableStatements()[ FD ]
Line_5 $$ int x = assignment.indexOf(StringPool.EQUAL)-->Line_6 $$ if (x == -1) [ FD ]
Line_9 $$ String name = assignment.substring(0, x).trim()-->Line_20 $$ statement.setName(name)[ FD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_24 $$ statement.setParameterMap(parameterMap)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_38 $$ Map<String, Object> map = (Map<String, Object>) statementBody.get(key)[ FD ]
Line_25 $$ for (String key : statementBody.keySet()) -->Line_34 $$ flag.setName(key.substring(1))[ FD ]
Line_41 $$ variableStatements = new ArrayList()-->Line_42 $$ statement.setVariableStatements(variableStatements)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_25 $$ for (String key : statementBody.keySet()) [ FD ]
Line_26 $$ if (key.startsWith(StringPool.AT)) -->Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) [ CD ]
Line_23 $$ HashMap<String, Object> parameterMap = new HashMap(statementBody.size())-->Line_24 $$ statement.setParameterMap(parameterMap)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_5 $$ int x = assignment.indexOf(StringPool.EQUAL)[ FD ]
Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) -->Line_38 $$ Map<String, Object> map = (Map<String, Object>) statementBody.get(key)[ CD ]
Line_28 $$ List<Flag> flags = statement.getFlags()-->Line_29 $$ if (flags == null) [ FD ]
Line_6 $$ if (x == -1) -->Line_10 $$ int y = name.indexOf(StringPool.OPEN_BRACKET)[ CD ]
Line_39 $$ List<Statement> variableStatements = statement.getVariableStatements()-->Line_45 $$ variableStatements.add(variableStatement)[ FD ]
Line_38 $$ Map<String, Object> map = (Map<String, Object>) statementBody.get(key)-->Line_44 $$ Statement variableStatement = _parseStatement(statement, key, map)[ FD ]
Line_26 $$ if (key.startsWith(StringPool.AT)) -->Line_28 $$ List<Flag> flags = statement.getFlags()[ CD ]
Line_14 $$ for (int i = 0; i < whiteList.length; i++) -->Line_15 $$ whiteList[i] = whiteList[i].trim()[ CD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_27 $$ String value = (String) statementBody.get(key)[ FD ]
Line_29 $$ if (flags == null) -->Line_31 $$ statement.setFlags(flags)[ CD ]
Line_26 $$ if (key.startsWith(StringPool.AT)) -->Line_35 $$ flag.setValue(value)[ CD ]
Line_26 $$ if (key.startsWith(StringPool.AT)) -->Line_34 $$ flag.setName(key.substring(1))[ CD ]
Line_11 $$ if (y != -1) -->Line_18 $$ name = name.substring(0, y)[ CD ]
Line_6 $$ if (x == -1) -->Line_7 $$ statement.setMethod(assignment.trim())[ CD ]
Line_11 $$ if (y != -1) -->Line_12 $$ String whitelistString = name.substring(y + 1, name.length() - 1)[ CD ]
Line_33 $$ Flag flag = new Flag()-->Line_34 $$ flag.setName(key.substring(1))[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_24 $$ statement.setParameterMap(parameterMap)[ CD ]
Line_6 $$ if (x == -1) -->Line_20 $$ statement.setName(name)[ CD ]
Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) -->Line_40 $$ if (variableStatements == null) [ CD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_44 $$ Statement variableStatement = _parseStatement(statement, key, map)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_47 $$ Object value = statementBody.get(key)[ FD ]
Line_26 $$ if (key.startsWith(StringPool.AT)) -->Line_33 $$ Flag flag = new Flag()[ CD ]
Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) -->Line_45 $$ variableStatements.add(variableStatement)[ CD ]
Line_26 $$ if (key.startsWith(StringPool.AT)) -->Line_36 $$ flags.add(flag)[ CD ]
Line_40 $$ if (variableStatements == null) -->Line_41 $$ variableStatements = new ArrayList()[ CD ]
Line_10 $$ int y = name.indexOf(StringPool.OPEN_BRACKET)-->Line_11 $$ if (y != -1) [ FD ]
Line_25 $$ for (String key : statementBody.keySet()) -->Line_27 $$ String value = (String) statementBody.get(key)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_23 $$ HashMap<String, Object> parameterMap = new HashMap(statementBody.size())[ FD ]
Line_29 $$ if (flags == null) -->Line_30 $$ flags = new ArrayList()[ CD ]
Line_9 $$ String name = assignment.substring(0, x).trim()-->Line_12 $$ String whitelistString = name.substring(y + 1, name.length() - 1)[ FD ]
Line_5 $$ int x = assignment.indexOf(StringPool.EQUAL)-->Line_9 $$ String name = assignment.substring(0, x).trim()[ FD ]
Line_11 $$ if (y != -1) -->Line_17 $$ statement.setWhitelist(whiteList)[ CD ]
Line_39 $$ List<Statement> variableStatements = statement.getVariableStatements()-->Line_40 $$ if (variableStatements == null) [ FD ]
Line_6 $$ if (x == -1) -->Line_9 $$ String name = assignment.substring(0, x).trim()[ CD ]
Line_26 $$ if (key.startsWith(StringPool.AT)) -->Line_27 $$ String value = (String) statementBody.get(key)[ CD ]
Line_25 $$ for (String key : statementBody.keySet()) -->Line_38 $$ Map<String, Object> map = (Map<String, Object>) statementBody.get(key)[ FD ]
Line_40 $$ if (variableStatements == null) -->Line_42 $$ statement.setVariableStatements(variableStatements)[ CD ]
Line_18 $$ name = name.substring(0, y)-->Line_20 $$ statement.setName(name)[ FD ]
Line_26 $$ if (key.startsWith(StringPool.AT)) -->Line_29 $$ if (flags == null) [ CD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_42 $$ statement.setVariableStatements(variableStatements)[ FD ]
Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) -->Line_39 $$ List<Statement> variableStatements = statement.getVariableStatements()[ CD ]
Line_6 $$ if (x == -1) -->Line_11 $$ if (y != -1) [ CD ]
Line_25 $$ for (String key : statementBody.keySet()) -->Line_37 $$ if (key.startsWith(StringPool.DOLLAR) || key.contains(".$")) [ FD ]
Line_11 $$ if (y != -1) -->Line_13 $$ String[] whiteList = StringUtil.split(whitelistString)[ CD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_28 $$ List<Flag> flags = statement.getFlags()[ FD ]
Line_3 $$ Statement statement = new Statement(parentStatement)-->Line_31 $$ statement.setFlags(flags)[ FD ]
Line_2 $$ private Statement _parseStatement(Statement parentStatement, String assignment, Map<String, Object> statementBody) -->Line_3 $$ Statement statement = new Statement(parentStatement)[ CD ]
Line_30 $$ flags = new ArrayList()-->Line_31 $$ statement.setFlags(flags)[ FD ]
Line_41 $$ variableStatements = new ArrayList()-->Line_45 $$ variableStatements.add(variableStatement)[ FD ]
