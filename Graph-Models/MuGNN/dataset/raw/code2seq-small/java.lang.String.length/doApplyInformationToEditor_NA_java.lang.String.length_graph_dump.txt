Line_8 $$ final String text = myDocument.getText()-->Line_11 $$ while ((ind = text.indexOf(CARET, ind + 1)) >= 0) [ FD ]
Line_11 $$ while ((ind = text.indexOf(CARET, ind + 1)) >= 0) -->Line_12 $$ final RangeHighlighter highlighter = model.addRangeHighlighter(ind, ind + CARET.length(), HighlighterLayer.ADDITIONAL_SYNTAX, CARET_ATTRIBUTES, HighlighterTargetArea.EXACT_RANGE)[ CD ]
Line_2 $$ public void doApplyInformationToEditor() -->Line_8 $$ final String text = myDocument.getText()[ CD ]
Line_2 $$ public void doApplyInformationToEditor() -->Line_4 $$ if (myDocument == null) [ CD ]
Line_11 $$ while ((ind = text.indexOf(CARET, ind + 1)) >= 0) -->Line_12 $$ final RangeHighlighter highlighter = model.addRangeHighlighter(ind, ind + CARET.length(), HighlighterLayer.ADDITIONAL_SYNTAX, CARET_ATTRIBUTES, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_2 $$ public void doApplyInformationToEditor() -->Line_7 $$ final MarkupModel model = DocumentMarkupModel.forDocument(myDocument, myProject, true)[ CD ]
Line_10 $$ int ind = -1-->Line_12 $$ final RangeHighlighter highlighter = model.addRangeHighlighter(ind, ind + CARET.length(), HighlighterLayer.ADDITIONAL_SYNTAX, CARET_ATTRIBUTES, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_12 $$ final RangeHighlighter highlighter = model.addRangeHighlighter(ind, ind + CARET.length(), HighlighterLayer.ADDITIONAL_SYNTAX, CARET_ATTRIBUTES, HighlighterTargetArea.EXACT_RANGE)-->Line_14 $$ highlighter.putUserData(KEY, VALUE)[ FD ]
Line_11 $$ while ((ind = text.indexOf(CARET, ind + 1)) >= 0) -->Line_14 $$ highlighter.putUserData(KEY, VALUE)[ CD ]
Line_10 $$ int ind = -1-->Line_11 $$ while ((ind = text.indexOf(CARET, ind + 1)) >= 0) [ FD ]
Line_9 $$ if (text != null) -->Line_11 $$ while ((ind = text.indexOf(CARET, ind + 1)) >= 0) [ CD ]
Line_11 $$ while ((ind = text.indexOf(CARET, ind + 1)) >= 0) -->Line_13 $$ highlighter.setGutterIconRenderer(ICON_RENDERER)[ CD ]
Line_8 $$ final String text = myDocument.getText()-->Line_9 $$ if (text != null) [ FD ]
Line_9 $$ if (text != null) -->Line_10 $$ int ind = -1[ CD ]
Line_2 $$ public void doApplyInformationToEditor() -->Line_3 $$ removeHighlighters()[ CD ]
Line_4 $$ if (myDocument == null) -->Line_5 $$ return[ CD ]
Line_2 $$ public void doApplyInformationToEditor() -->Line_9 $$ if (text != null) [ CD ]
Line_12 $$ final RangeHighlighter highlighter = model.addRangeHighlighter(ind, ind + CARET.length(), HighlighterLayer.ADDITIONAL_SYNTAX, CARET_ATTRIBUTES, HighlighterTargetArea.EXACT_RANGE)-->Line_13 $$ highlighter.setGutterIconRenderer(ICON_RENDERER)[ FD ]
Line_7 $$ final MarkupModel model = DocumentMarkupModel.forDocument(myDocument, myProject, true)-->Line_12 $$ final RangeHighlighter highlighter = model.addRangeHighlighter(ind, ind + CARET.length(), HighlighterLayer.ADDITIONAL_SYNTAX, CARET_ATTRIBUTES, HighlighterTargetArea.EXACT_RANGE)[ FD ]
