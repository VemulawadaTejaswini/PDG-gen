Line_3 $$ int offset = 0-->Line_6 $$ if (!string.regionMatches(offset, prefix, 0, prefixLen)) [ FD ]
Line_6 $$ if (!string.regionMatches(offset, prefix, 0, prefixLen)) -->Line_7 $$ return false[ CD ]
Line_5 $$ int prefixLen = prefix.length()-->Line_6 $$ if (!string.regionMatches(offset, prefix, 0, prefixLen)) [ FD ]
Line_2 $$ public static boolean startsWithConcatenation(@NotNull String string, @NotNull String... prefixes) -->Line_11 $$ return true[ CD ]
Line_3 $$ int offset = 0-->Line_9 $$ offset += prefixLen[ FD ]
Line_2 $$ public static boolean startsWithConcatenation(@NotNull String string, @NotNull String... prefixes) -->Line_3 $$ int offset = 0[ CD ]
Line_2 $$ public static boolean startsWithConcatenation(@NotNull String string, @NotNull String... prefixes) -->Line_6 $$ if (!string.regionMatches(offset, prefix, 0, prefixLen)) [ FD ]
Line_5 $$ int prefixLen = prefix.length()-->Line_9 $$ offset += prefixLen[ FD ]
Line_4 $$ for (String prefix : prefixes) -->Line_6 $$ if (!string.regionMatches(offset, prefix, 0, prefixLen)) [ FD ]
Line_4 $$ for (String prefix : prefixes) -->Line_5 $$ int prefixLen = prefix.length()[ FD ]
