Line_9 $$ Stack<Bracket> stack = new Stack<Bracket>()-->Line_11 $$ if (isSuffixHere(expressionString, pos, suffix) && stack.isEmpty()) [ FD ]
Line_14 $$ char ch = expressionString.charAt(pos)-->Line_28 $$ if (!p.compatibleWithCloseBracket(ch)) [ FD ]
Line_43 $$ if (!stack.isEmpty()) -->Line_44 $$ Bracket p = stack.pop()[ CD ]
Line_9 $$ Stack<Bracket> stack = new Stack<Bracket>()-->Line_19 $$ stack.push(new Bracket(ch, pos))[ FD ]
Line_3 $$ int pos = afterPrefixIndex-->Line_38 $$ pos = endLiteral[ FD ]
Line_10 $$ while (pos < maxlen) -->Line_41 $$ pos++[ CD ]
Line_3 $$ int pos = afterPrefixIndex-->Line_41 $$ pos++[ FD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_47 $$ if (!isSuffixHere(expressionString, pos, suffix)) [ CD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_47 $$ if (!isSuffixHere(expressionString, pos, suffix)) [ FD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_5 $$ int nextSuffix = expressionString.indexOf(suffix, afterPrefixIndex)[ CD ]
Line_10 $$ while (pos < maxlen) -->Line_14 $$ char ch = expressionString.charAt(pos)[ CD ]
Line_4 $$ int maxlen = expressionString.length()-->Line_10 $$ while (pos < maxlen) [ FD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_10 $$ while (pos < maxlen) [ CD ]
Line_14 $$ char ch = expressionString.charAt(pos)-->Line_25 $$ throw new ParseException(expressionString, pos, "Found closing '" + ch + "' at position " + pos + " without an opening '" + Bracket.theOpenBracketFor(ch) + "'")[ FD ]
Line_9 $$ Stack<Bracket> stack = new Stack<Bracket>()-->Line_27 $$ Bracket p = stack.pop()[ FD ]
Line_3 $$ int pos = afterPrefixIndex-->Line_47 $$ if (!isSuffixHere(expressionString, pos, suffix)) [ FD ]
Line_3 $$ int pos = afterPrefixIndex-->Line_11 $$ if (isSuffixHere(expressionString, pos, suffix) && stack.isEmpty()) [ FD ]
Line_27 $$ Bracket p = stack.pop()-->Line_28 $$ if (!p.compatibleWithCloseBracket(ch)) [ FD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_34 $$ int endLiteral = expressionString.indexOf(ch, pos + 1)[ FD ]
Line_38 $$ pos = endLiteral-->Line_47 $$ if (!isSuffixHere(expressionString, pos, suffix)) [ FD ]
Line_10 $$ while (pos < maxlen) -->Line_11 $$ if (isSuffixHere(expressionString, pos, suffix) && stack.isEmpty()) [ CD ]
Line_9 $$ Stack<Bracket> stack = new Stack<Bracket>()-->Line_24 $$ if (stack.isEmpty()) [ FD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_50 $$ return pos[ CD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_5 $$ int nextSuffix = expressionString.indexOf(suffix, afterPrefixIndex)[ FD ]
Line_3 $$ int pos = afterPrefixIndex-->Line_14 $$ char ch = expressionString.charAt(pos)[ FD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_11 $$ if (isSuffixHere(expressionString, pos, suffix) && stack.isEmpty()) [ FD ]
Line_38 $$ pos = endLiteral-->Line_41 $$ pos++[ FD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_6 $$ if (nextSuffix == -1) [ CD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_43 $$ if (!stack.isEmpty()) [ CD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_4 $$ int maxlen = expressionString.length()[ FD ]
Line_9 $$ Stack<Bracket> stack = new Stack<Bracket>()-->Line_44 $$ Bracket p = stack.pop()[ FD ]
Line_38 $$ pos = endLiteral-->Line_10 $$ while (pos < maxlen) [ FD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_3 $$ int pos = afterPrefixIndex[ CD ]
Line_14 $$ char ch = expressionString.charAt(pos)-->Line_34 $$ int endLiteral = expressionString.indexOf(ch, pos + 1)[ FD ]
Line_47 $$ if (!isSuffixHere(expressionString, pos, suffix)) -->Line_48 $$ return -1[ CD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_4 $$ int maxlen = expressionString.length()[ CD ]
Line_6 $$ if (nextSuffix == -1) -->Line_7 $$ return -1[ CD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_9 $$ Stack<Bracket> stack = new Stack<Bracket>()[ CD ]
Line_2 $$ private int skipToCorrectEndSuffix(String prefix, String suffix, String expressionString, int afterPrefixIndex) throws ParseException -->Line_14 $$ char ch = expressionString.charAt(pos)[ FD ]
Line_34 $$ int endLiteral = expressionString.indexOf(ch, pos + 1)-->Line_38 $$ pos = endLiteral[ FD ]
Line_34 $$ int endLiteral = expressionString.indexOf(ch, pos + 1)-->Line_35 $$ if (endLiteral == -1) [ FD ]
Line_38 $$ pos = endLiteral-->Line_14 $$ char ch = expressionString.charAt(pos)[ FD ]
Line_38 $$ pos = endLiteral-->Line_11 $$ if (isSuffixHere(expressionString, pos, suffix) && stack.isEmpty()) [ FD ]
Line_5 $$ int nextSuffix = expressionString.indexOf(suffix, afterPrefixIndex)-->Line_6 $$ if (nextSuffix == -1) [ FD ]
Line_9 $$ Stack<Bracket> stack = new Stack<Bracket>()-->Line_43 $$ if (!stack.isEmpty()) [ FD ]
Line_3 $$ int pos = afterPrefixIndex-->Line_10 $$ while (pos < maxlen) [ FD ]
