Line_20 $$ if (dbConf.getInputQuery() == null) -->Line_36 $$ if (conditions != null && conditions.length() > 0) [ CD ]
Line_23 $$ for (int i = 0; i < fieldNames.length; i++) -->Line_25 $$ if (i != fieldNames.length - 1) [ CD ]
Line_8 $$ StringBuilder query = new StringBuilder()-->Line_29 $$ query.append(" FROM ").append(tableName)[ FD ]
Line_45 $$ if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) == -1) -->Line_46 $$ LOG.error("Could not find the clause substitution token " + DataDrivenDBInputFormat.SUBSTITUTE_TOKEN + " in the query: [" + inputQuery + "]. Parallel splits may not work correctly.")[ CD ]
Line_8 $$ StringBuilder query = new StringBuilder()-->Line_26 $$ query.append(", ")[ FD ]
Line_9 $$ DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit = (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit()-->Line_17 $$ conditionClauses.append("( ").append(dataSplit.getLowerClause())[ FD ]
Line_20 $$ if (dbConf.getInputQuery() == null) -->Line_29 $$ query.append(" FROM ").append(tableName)[ CD ]
Line_20 $$ if (dbConf.getInputQuery() == null) -->Line_30 $$ if (!dbProductName.startsWith("ORACLE")) [ CD ]
Line_23 $$ for (int i = 0; i < fieldNames.length; i++) -->Line_25 $$ if (i != fieldNames.length - 1) [ FD ]
Line_20 $$ if (dbConf.getInputQuery() == null) -->Line_48 $$ query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN, conditionClauses.toString()))[ CD ]
Line_20 $$ if (dbConf.getInputQuery() == null) -->Line_23 $$ for (int i = 0; i < fieldNames.length; i++) [ CD ]
Line_10 $$ DBConfiguration dbConf = getDBConf()-->Line_20 $$ if (dbConf.getInputQuery() == null) [ FD ]
Line_25 $$ if (i != fieldNames.length - 1) -->Line_26 $$ query.append(", ")[ CD ]
Line_20 $$ if (dbConf.getInputQuery() == null) -->Line_45 $$ if (inputQuery.indexOf(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN) == -1) [ CD ]
Line_8 $$ StringBuilder query = new StringBuilder()-->Line_51 $$ return query.toString()[ FD ]
Line_20 $$ if (dbConf.getInputQuery() == null) -->Line_35 $$ query.append(" WHERE ")[ CD ]
Line_12 $$ String tableName = getTableName()-->Line_29 $$ query.append(" FROM ").append(tableName)[ FD ]
Line_13 $$ String conditions = getConditions()-->Line_36 $$ if (conditions != null && conditions.length() > 0) [ FD ]
Line_8 $$ StringBuilder query = new StringBuilder()-->Line_35 $$ query.append(" WHERE ")[ FD ]
Line_9 $$ DataDrivenDBInputFormat.DataDrivenDBInputSplit dataSplit = (DataDrivenDBInputFormat.DataDrivenDBInputSplit) getSplit()-->Line_18 $$ conditionClauses.append(" ) AND ( ").append(dataSplit.getUpperClause())[ FD ]
Line_8 $$ StringBuilder query = new StringBuilder()-->Line_50 $$ LOG.debug("Using query: " + query.toString())[ FD ]
Line_8 $$ StringBuilder query = new StringBuilder()-->Line_48 $$ query.append(inputQuery.replace(DataDrivenDBInputFormat.SUBSTITUTE_TOKEN, conditionClauses.toString()))[ FD ]
Line_23 $$ for (int i = 0; i < fieldNames.length; i++) -->Line_24 $$ query.append(fieldNames[i])[ CD ]
Line_8 $$ StringBuilder query = new StringBuilder()-->Line_24 $$ query.append(fieldNames[i])[ FD ]
