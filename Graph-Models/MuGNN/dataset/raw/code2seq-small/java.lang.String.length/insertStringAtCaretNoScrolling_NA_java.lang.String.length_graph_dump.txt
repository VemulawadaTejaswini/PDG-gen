Line_13 $$ int oldOffset = editor.getCaretModel().getOffset()-->Line_24 $$ document.insertString(oldOffset, s)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_18 $$ Document document = editor.getDocument()[ CD ]
Line_19 $$ if (editor.isInsertMode() || !toProcessOverwriteMode) -->Line_29 $$ if (lineNumber >= document.getLineCount()) [ CD ]
Line_21 $$ oldOffset = selectionModel.getSelectionStart()-->Line_39 $$ if (editor.getCaretModel().getOffset() != oldOffset) [ FD ]
Line_36 $$ if (toMoveCaret) -->Line_39 $$ if (editor.getCaretModel().getOffset() != oldOffset) [ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_14 $$ String filler = calcStringToFillVirtualSpace(editor)[ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_19 $$ if (editor.isInsertMode() || !toProcessOverwriteMode) [ FD ]
Line_36 $$ if (toMoveCaret) -->Line_38 $$ selectionModel.removeSelection()[ CD ]
Line_5 $$ VisualPosition startPosition = selectionModel.getSelectionStartPosition()-->Line_7 $$ editor.getCaretModel().moveToVisualPosition(startPosition)[ FD ]
Line_4 $$ if (selectionModel.hasSelection()) -->Line_5 $$ VisualPosition startPosition = selectionModel.getSelectionStartPosition()[ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_30 $$ return insertStringAtCaretNoScrolling(editor, s, false, toMoveCaret, s.length())[ FD ]
Line_13 $$ int oldOffset = editor.getCaretModel().getOffset()-->Line_39 $$ if (editor.getCaretModel().getOffset() != oldOffset) [ FD ]
Line_13 $$ int oldOffset = editor.getCaretModel().getOffset()-->Line_40 $$ editor.getCaretModel().moveToOffset(oldOffset)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_42 $$ return offset[ CD ]
Line_14 $$ String filler = calcStringToFillVirtualSpace(editor)-->Line_15 $$ if (filler.length() > 0) [ FD ]
Line_4 $$ if (selectionModel.hasSelection()) -->Line_6 $$ if (editor.isColumnMode() && editor.getCaretModel().supportsMultipleCarets() && startPosition != null) [ CD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_5 $$ VisualPosition startPosition = selectionModel.getSelectionStartPosition()[ FD ]
Line_20 $$ if (selectionModel.hasSelection()) -->Line_22 $$ document.replaceString(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd(), s)[ CD ]
Line_28 $$ int lineNumber = editor.getCaretModel().getLogicalPosition().line-->Line_29 $$ if (lineNumber >= document.getLineCount()) [ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_33 $$ document.replaceString(oldOffset, Math.min(endOffset, oldOffset + s.length()), s)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_36 $$ if (toMoveCaret) [ CD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_38 $$ selectionModel.removeSelection()[ FD ]
Line_18 $$ Document document = editor.getDocument()-->Line_33 $$ document.replaceString(oldOffset, Math.min(endOffset, oldOffset + s.length()), s)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_28 $$ int lineNumber = editor.getCaretModel().getLogicalPosition().line[ FD ]
Line_19 $$ if (editor.isInsertMode() || !toProcessOverwriteMode) -->Line_20 $$ if (selectionModel.hasSelection()) [ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_6 $$ if (editor.isColumnMode() && editor.getCaretModel().supportsMultipleCarets() && startPosition != null) [ FD ]
Line_29 $$ if (lineNumber >= document.getLineCount()) -->Line_30 $$ return insertStringAtCaretNoScrolling(editor, s, false, toMoveCaret, s.length())[ CD ]
Line_32 $$ int endOffset = document.getLineEndOffset(lineNumber)-->Line_33 $$ document.replaceString(oldOffset, Math.min(endOffset, oldOffset + s.length()), s)[ FD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_20 $$ if (selectionModel.hasSelection()) [ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_4 $$ if (selectionModel.hasSelection()) [ CD ]
Line_14 $$ String filler = calcStringToFillVirtualSpace(editor)-->Line_35 $$ int offset = oldOffset + filler.length() + caretShift[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_22 $$ document.replaceString(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd(), s)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_13 $$ int oldOffset = editor.getCaretModel().getOffset()[ FD ]
Line_20 $$ if (selectionModel.hasSelection()) -->Line_24 $$ document.insertString(oldOffset, s)[ CD ]
Line_21 $$ oldOffset = selectionModel.getSelectionStart()-->Line_33 $$ document.replaceString(oldOffset, Math.min(endOffset, oldOffset + s.length()), s)[ FD ]
Line_18 $$ Document document = editor.getDocument()-->Line_29 $$ if (lineNumber >= document.getLineCount()) [ FD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_22 $$ document.replaceString(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd(), s)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_12 $$ editor.getSoftWrapModel().beforeDocumentChangeAtCaret()[ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_9 $$ editor.getCaretModel().moveToOffset(selectionModel.getSelectionStart(), true)[ FD ]
Line_18 $$ Document document = editor.getDocument()-->Line_22 $$ document.replaceString(selectionModel.getSelectionStart(), selectionModel.getSelectionEnd(), s)[ FD ]
Line_21 $$ oldOffset = selectionModel.getSelectionStart()-->Line_24 $$ document.insertString(oldOffset, s)[ FD ]
Line_20 $$ if (selectionModel.hasSelection()) -->Line_21 $$ oldOffset = selectionModel.getSelectionStart()[ CD ]
Line_19 $$ if (editor.isInsertMode() || !toProcessOverwriteMode) -->Line_28 $$ int lineNumber = editor.getCaretModel().getLogicalPosition().line[ CD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_4 $$ if (selectionModel.hasSelection()) [ FD ]
Line_18 $$ Document document = editor.getDocument()-->Line_24 $$ document.insertString(oldOffset, s)[ FD ]
Line_28 $$ int lineNumber = editor.getCaretModel().getLogicalPosition().line-->Line_32 $$ int endOffset = document.getLineEndOffset(lineNumber)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_40 $$ editor.getCaretModel().moveToOffset(oldOffset)[ FD ]
Line_35 $$ int offset = oldOffset + filler.length() + caretShift-->Line_37 $$ editor.getCaretModel().moveToOffset(offset, true)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_13 $$ int oldOffset = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_14 $$ String filler = calcStringToFillVirtualSpace(editor)[ FD ]
Line_19 $$ if (editor.isInsertMode() || !toProcessOverwriteMode) -->Line_27 $$ deleteSelectedText(editor)[ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_24 $$ document.insertString(oldOffset, s)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_27 $$ deleteSelectedText(editor)[ FD ]
Line_36 $$ if (toMoveCaret) -->Line_37 $$ editor.getCaretModel().moveToOffset(offset, true)[ CD ]
Line_19 $$ if (editor.isInsertMode() || !toProcessOverwriteMode) -->Line_33 $$ document.replaceString(oldOffset, Math.min(endOffset, oldOffset + s.length()), s)[ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_35 $$ int offset = oldOffset + filler.length() + caretShift[ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_19 $$ if (editor.isInsertMode() || !toProcessOverwriteMode) [ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_12 $$ editor.getSoftWrapModel().beforeDocumentChangeAtCaret()[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_18 $$ Document document = editor.getDocument()[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_7 $$ editor.getCaretModel().moveToVisualPosition(startPosition)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_37 $$ editor.getCaretModel().moveToOffset(offset, true)[ FD ]
Line_21 $$ oldOffset = selectionModel.getSelectionStart()-->Line_40 $$ editor.getCaretModel().moveToOffset(oldOffset)[ FD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_39 $$ if (editor.getCaretModel().getOffset() != oldOffset) [ FD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_21 $$ oldOffset = selectionModel.getSelectionStart()[ FD ]
Line_18 $$ Document document = editor.getDocument()-->Line_32 $$ int endOffset = document.getLineEndOffset(lineNumber)[ FD ]
Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()-->Line_9 $$ editor.getCaretModel().moveToOffset(selectionModel.getSelectionStart(), true)[ FD ]
Line_13 $$ int oldOffset = editor.getCaretModel().getOffset()-->Line_33 $$ document.replaceString(oldOffset, Math.min(endOffset, oldOffset + s.length()), s)[ FD ]
Line_39 $$ if (editor.getCaretModel().getOffset() != oldOffset) -->Line_40 $$ editor.getCaretModel().moveToOffset(oldOffset)[ CD ]
Line_6 $$ if (editor.isColumnMode() && editor.getCaretModel().supportsMultipleCarets() && startPosition != null) -->Line_7 $$ editor.getCaretModel().moveToVisualPosition(startPosition)[ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_15 $$ if (filler.length() > 0) [ CD ]
Line_2 $$ private static int insertStringAtCaretNoScrolling(Editor editor, @NotNull String s, boolean toProcessOverwriteMode, boolean toMoveCaret, int caretShift) -->Line_3 $$ final SelectionModel selectionModel = editor.getSelectionModel()[ CD ]
Line_19 $$ if (editor.isInsertMode() || !toProcessOverwriteMode) -->Line_32 $$ int endOffset = document.getLineEndOffset(lineNumber)[ CD ]
Line_6 $$ if (editor.isColumnMode() && editor.getCaretModel().supportsMultipleCarets() && startPosition != null) -->Line_9 $$ editor.getCaretModel().moveToOffset(selectionModel.getSelectionStart(), true)[ CD ]
Line_13 $$ int oldOffset = editor.getCaretModel().getOffset()-->Line_21 $$ oldOffset = selectionModel.getSelectionStart()[ FD ]
