Line_4 $$ if (element != null) -->Line_9 $$ int length = element.getTextRange().getLength()[ CD ]
Line_4 $$ if (element != null) -->Line_17 $$ return Pair.create(range, element)[ CD ]
Line_11 $$ if (element instanceof XmlAttributeValue) -->Line_12 $$ final String value = ((XmlAttributeValue) element).getValue()[ CD ]
Line_3 $$ final PsiElement element = getPsiElement()-->Line_9 $$ int length = element.getTextRange().getLength()[ FD ]
Line_19 $$ final XmlTag tag = getParentXmlTag()-->Line_21 $$ return DomUtil.getProblemRange(tag)[ FD ]
Line_2 $$ protected Pair<TextRange, PsiElement> computeProblemRange() -->Line_20 $$ if (tag != null) [ CD ]
Line_3 $$ final PsiElement element = getPsiElement()-->Line_17 $$ return Pair.create(range, element)[ FD ]
Line_3 $$ final PsiElement element = getPsiElement()-->Line_11 $$ if (element instanceof XmlAttributeValue) [ FD ]
Line_3 $$ final PsiElement element = getPsiElement()-->Line_14 $$ range = TextRange.from(element.getText().indexOf(value), value.length())[ FD ]
Line_10 $$ TextRange range = TextRange.from(0, length)-->Line_14 $$ range = TextRange.from(element.getText().indexOf(value), value.length())[ FD ]
Line_4 $$ if (element != null) -->Line_6 $$ if (element instanceof XmlTag) [ CD ]
Line_2 $$ protected Pair<TextRange, PsiElement> computeProblemRange() -->Line_4 $$ if (element != null) [ CD ]
Line_14 $$ range = TextRange.from(element.getText().indexOf(value), value.length())-->Line_17 $$ return Pair.create(range, element)[ FD ]
Line_12 $$ final String value = ((XmlAttributeValue) element).getValue()-->Line_13 $$ if (StringUtil.isNotEmpty(value)) [ FD ]
Line_3 $$ final PsiElement element = getPsiElement()-->Line_4 $$ if (element != null) [ FD ]
Line_3 $$ final PsiElement element = getPsiElement()-->Line_6 $$ if (element instanceof XmlTag) [ FD ]
Line_2 $$ protected Pair<TextRange, PsiElement> computeProblemRange() -->Line_3 $$ final PsiElement element = getPsiElement()[ CD ]
Line_12 $$ final String value = ((XmlAttributeValue) element).getValue()-->Line_14 $$ range = TextRange.from(element.getText().indexOf(value), value.length())[ FD ]
Line_13 $$ if (StringUtil.isNotEmpty(value)) -->Line_14 $$ range = TextRange.from(element.getText().indexOf(value), value.length())[ CD ]
Line_19 $$ final XmlTag tag = getParentXmlTag()-->Line_20 $$ if (tag != null) [ FD ]
Line_20 $$ if (tag != null) -->Line_21 $$ return DomUtil.getProblemRange(tag)[ CD ]
Line_4 $$ if (element != null) -->Line_10 $$ TextRange range = TextRange.from(0, length)[ CD ]
Line_6 $$ if (element instanceof XmlTag) -->Line_7 $$ return DomUtil.getProblemRange((XmlTag) element)[ CD ]
Line_11 $$ if (element instanceof XmlAttributeValue) -->Line_13 $$ if (StringUtil.isNotEmpty(value)) [ CD ]
Line_10 $$ TextRange range = TextRange.from(0, length)-->Line_17 $$ return Pair.create(range, element)[ FD ]
Line_4 $$ if (element != null) -->Line_11 $$ if (element instanceof XmlAttributeValue) [ CD ]
Line_2 $$ protected Pair<TextRange, PsiElement> computeProblemRange() -->Line_23 $$ return NO_PROBLEM[ CD ]
Line_2 $$ protected Pair<TextRange, PsiElement> computeProblemRange() -->Line_19 $$ final XmlTag tag = getParentXmlTag()[ CD ]
Line_3 $$ final PsiElement element = getPsiElement()-->Line_5 $$ assert element.isValid() : element[ FD ]
Line_9 $$ int length = element.getTextRange().getLength()-->Line_10 $$ TextRange range = TextRange.from(0, length)[ FD ]
