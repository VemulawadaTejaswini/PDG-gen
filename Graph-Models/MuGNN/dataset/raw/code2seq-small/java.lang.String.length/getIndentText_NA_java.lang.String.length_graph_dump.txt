Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_16 $$ final PsiElement ws = file.findElementAt(lineStartOffset)[ FD ]
Line_3 $$ PsiElement nonWS = PyUtil.findNextAtOffset(file, caretOffset, PsiWhiteSpace.class)-->Line_5 $$ final IElementType nonWSType = nonWS.getNode().getElementType()[ FD ]
Line_3 $$ PsiElement nonWS = PyUtil.findNextAtOffset(file, caretOffset, PsiWhiteSpace.class)-->Line_14 $$ indentText = document.getText(TextRange.create(lineStartOffset, nonWS.getTextOffset()))[ FD ]
Line_11 $$ int lineStartOffset = getLineStartSafeOffset(document, lineNumber)-->Line_15 $$ if (caretOffset == lineStartOffset) [ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_12 $$ String indentText = document.getText(TextRange.create(lineStartOffset, caretOffset))[ FD ]
Line_15 $$ if (caretOffset == lineStartOffset) -->Line_17 $$ if (ws != null) [ CD ]
Line_3 $$ PsiElement nonWS = PyUtil.findNextAtOffset(file, caretOffset, PsiWhiteSpace.class)-->Line_13 $$ if (nonWS != null && document.getLineNumber(nonWS.getTextOffset()) == lineNumber) [ FD ]
Line_19 $$ final List<String> strings = StringUtil.split(wsText, "\n")-->Line_20 $$ if (strings.size() >= 1) [ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_3 $$ PsiElement nonWS = PyUtil.findNextAtOffset(file, caretOffset, PsiWhiteSpace.class)[ FD ]
Line_12 $$ String indentText = document.getText(TextRange.create(lineStartOffset, caretOffset))-->Line_21 $$ indentText = strings.get(0)[ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_27 $$ return indentText[ CD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_3 $$ PsiElement nonWS = PyUtil.findNextAtOffset(file, caretOffset, PsiWhiteSpace.class)[ CD ]
Line_6 $$ if (nonWSType == PyTokenTypes.ELSE_KEYWORD || nonWSType == PyTokenTypes.ELIF_KEYWORD || nonWSType == PyTokenTypes.EXCEPT_KEYWORD || nonWSType == PyTokenTypes.FINALLY_KEYWORD) -->Line_7 $$ lineNumber -= 1[ CD ]
Line_7 $$ lineNumber -= 1-->Line_8 $$ nonWS = PyUtil.findNextAtOffset(file, getLineStartSafeOffset(document, lineNumber), PsiWhiteSpace.class)[ FD ]
Line_14 $$ indentText = document.getText(TextRange.create(lineStartOffset, nonWS.getTextOffset()))-->Line_24 $$ if (indentText.length() == firstLineIndent)[ FD ]
Line_19 $$ final List<String> strings = StringUtil.split(wsText, "\n")-->Line_21 $$ indentText = strings.get(0)[ FD ]
Line_17 $$ if (ws != null) -->Line_20 $$ if (strings.size() >= 1) [ CD ]
Line_14 $$ indentText = document.getText(TextRange.create(lineStartOffset, nonWS.getTextOffset()))-->Line_21 $$ indentText = strings.get(0)[ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_11 $$ int lineStartOffset = getLineStartSafeOffset(document, lineNumber)[ CD ]
Line_12 $$ String indentText = document.getText(TextRange.create(lineStartOffset, caretOffset))-->Line_14 $$ indentText = document.getText(TextRange.create(lineStartOffset, nonWS.getTextOffset()))[ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_14 $$ indentText = document.getText(TextRange.create(lineStartOffset, nonWS.getTextOffset()))[ FD ]
Line_17 $$ if (ws != null) -->Line_18 $$ final String wsText = ws.getText()[ CD ]
Line_15 $$ if (caretOffset == lineStartOffset) -->Line_24 $$ if (indentText.length() == firstLineIndent)[ CD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_7 $$ lineNumber -= 1[ FD ]
Line_8 $$ nonWS = PyUtil.findNextAtOffset(file, getLineStartSafeOffset(document, lineNumber), PsiWhiteSpace.class)-->Line_13 $$ if (nonWS != null && document.getLineNumber(nonWS.getTextOffset()) == lineNumber) [ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_12 $$ String indentText = document.getText(TextRange.create(lineStartOffset, caretOffset))[ CD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_24 $$ if (indentText.length() == firstLineIndent)[ FD ]
Line_8 $$ nonWS = PyUtil.findNextAtOffset(file, getLineStartSafeOffset(document, lineNumber), PsiWhiteSpace.class)-->Line_14 $$ indentText = document.getText(TextRange.create(lineStartOffset, nonWS.getTextOffset()))[ FD ]
Line_12 $$ String indentText = document.getText(TextRange.create(lineStartOffset, caretOffset))-->Line_24 $$ if (indentText.length() == firstLineIndent)[ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_15 $$ if (caretOffset == lineStartOffset) [ FD ]
Line_7 $$ lineNumber -= 1-->Line_11 $$ int lineStartOffset = getLineStartSafeOffset(document, lineNumber)[ FD ]
Line_13 $$ if (nonWS != null && document.getLineNumber(nonWS.getTextOffset()) == lineNumber) -->Line_15 $$ if (caretOffset == lineStartOffset) [ CD ]
Line_17 $$ if (ws != null) -->Line_19 $$ final List<String> strings = StringUtil.split(wsText, "\n")[ CD ]
Line_6 $$ if (nonWSType == PyTokenTypes.ELSE_KEYWORD || nonWSType == PyTokenTypes.ELIF_KEYWORD || nonWSType == PyTokenTypes.EXCEPT_KEYWORD || nonWSType == PyTokenTypes.FINALLY_KEYWORD) -->Line_8 $$ nonWS = PyUtil.findNextAtOffset(file, getLineStartSafeOffset(document, lineNumber), PsiWhiteSpace.class)[ CD ]
Line_13 $$ if (nonWS != null && document.getLineNumber(nonWS.getTextOffset()) == lineNumber) -->Line_14 $$ indentText = document.getText(TextRange.create(lineStartOffset, nonWS.getTextOffset()))[ CD ]
Line_11 $$ int lineStartOffset = getLineStartSafeOffset(document, lineNumber)-->Line_14 $$ indentText = document.getText(TextRange.create(lineStartOffset, nonWS.getTextOffset()))[ FD ]
Line_3 $$ PsiElement nonWS = PyUtil.findNextAtOffset(file, caretOffset, PsiWhiteSpace.class)-->Line_4 $$ if (nonWS != null) [ FD ]
Line_4 $$ if (nonWS != null) -->Line_5 $$ final IElementType nonWSType = nonWS.getNode().getElementType()[ CD ]
Line_3 $$ PsiElement nonWS = PyUtil.findNextAtOffset(file, caretOffset, PsiWhiteSpace.class)-->Line_8 $$ nonWS = PyUtil.findNextAtOffset(file, getLineStartSafeOffset(document, lineNumber), PsiWhiteSpace.class)[ FD ]
Line_16 $$ final PsiElement ws = file.findElementAt(lineStartOffset)-->Line_18 $$ final String wsText = ws.getText()[ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_13 $$ if (nonWS != null && document.getLineNumber(nonWS.getTextOffset()) == lineNumber) [ CD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_8 $$ nonWS = PyUtil.findNextAtOffset(file, getLineStartSafeOffset(document, lineNumber), PsiWhiteSpace.class)[ FD ]
Line_11 $$ int lineStartOffset = getLineStartSafeOffset(document, lineNumber)-->Line_12 $$ String indentText = document.getText(TextRange.create(lineStartOffset, caretOffset))[ FD ]
Line_24 $$ if (indentText.length() == firstLineIndent)-->Line_25 $$ return ""[ CD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_11 $$ int lineStartOffset = getLineStartSafeOffset(document, lineNumber)[ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_4 $$ if (nonWS != null) [ CD ]
Line_21 $$ indentText = strings.get(0)-->Line_24 $$ if (indentText.length() == firstLineIndent)[ FD ]
Line_20 $$ if (strings.size() >= 1) -->Line_21 $$ indentText = strings.get(0)[ CD ]
Line_16 $$ final PsiElement ws = file.findElementAt(lineStartOffset)-->Line_17 $$ if (ws != null) [ FD ]
Line_11 $$ int lineStartOffset = getLineStartSafeOffset(document, lineNumber)-->Line_16 $$ final PsiElement ws = file.findElementAt(lineStartOffset)[ FD ]
Line_2 $$ private static String getIndentText(@NotNull final PsiFile file, @NotNull final Document document, int caretOffset, int lineNumber, int firstLineIndent) -->Line_13 $$ if (nonWS != null && document.getLineNumber(nonWS.getTextOffset()) == lineNumber) [ FD ]
Line_4 $$ if (nonWS != null) -->Line_6 $$ if (nonWSType == PyTokenTypes.ELSE_KEYWORD || nonWSType == PyTokenTypes.ELIF_KEYWORD || nonWSType == PyTokenTypes.EXCEPT_KEYWORD || nonWSType == PyTokenTypes.FINALLY_KEYWORD) [ CD ]
Line_18 $$ final String wsText = ws.getText()-->Line_19 $$ final List<String> strings = StringUtil.split(wsText, "\n")[ FD ]
Line_15 $$ if (caretOffset == lineStartOffset) -->Line_16 $$ final PsiElement ws = file.findElementAt(lineStartOffset)[ CD ]
