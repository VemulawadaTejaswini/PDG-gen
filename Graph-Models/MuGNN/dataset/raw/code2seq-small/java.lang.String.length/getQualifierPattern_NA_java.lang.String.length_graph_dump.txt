Line_7 $$ int idx = pattern.lastIndexOf(separator)-->Line_11 $$ lastSeparatorOccurrence = Math.max(lastSeparatorOccurrence, idx)[ FD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_4 $$ final String[] separators = base.getModel().getSeparators()[ FD ]
Line_9 $$ idx = pattern.lastIndexOf(separator, idx - 1)-->Line_11 $$ lastSeparatorOccurrence = Math.max(lastSeparatorOccurrence, idx)[ FD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_13 $$ return pattern.substring(0, lastSeparatorOccurrence)[ FD ]
Line_5 $$ int lastSeparatorOccurrence = 0-->Line_11 $$ lastSeparatorOccurrence = Math.max(lastSeparatorOccurrence, idx)[ FD ]
Line_11 $$ lastSeparatorOccurrence = Math.max(lastSeparatorOccurrence, idx)-->Line_13 $$ return pattern.substring(0, lastSeparatorOccurrence)[ FD ]
Line_6 $$ for (String separator : separators) -->Line_7 $$ int idx = pattern.lastIndexOf(separator)[ FD ]
Line_5 $$ int lastSeparatorOccurrence = 0-->Line_13 $$ return pattern.substring(0, lastSeparatorOccurrence)[ FD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_7 $$ int idx = pattern.lastIndexOf(separator)[ FD ]
Line_6 $$ for (String separator : separators) -->Line_9 $$ idx = pattern.lastIndexOf(separator, idx - 1)[ FD ]
Line_8 $$ if (idx == pattern.length() - 1) -->Line_9 $$ idx = pattern.lastIndexOf(separator, idx - 1)[ CD ]
Line_7 $$ int idx = pattern.lastIndexOf(separator)-->Line_8 $$ if (idx == pattern.length() - 1) [ FD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_8 $$ if (idx == pattern.length() - 1) [ FD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_3 $$ pattern = base.transformPattern(pattern)[ CD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_3 $$ pattern = base.transformPattern(pattern)[ FD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_5 $$ int lastSeparatorOccurrence = 0[ CD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_4 $$ final String[] separators = base.getModel().getSeparators()[ CD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_13 $$ return pattern.substring(0, lastSeparatorOccurrence)[ CD ]
Line_2 $$ private static String getQualifierPattern(@NotNull ChooseByNameBase base, @NotNull String pattern) -->Line_9 $$ idx = pattern.lastIndexOf(separator, idx - 1)[ FD ]
Line_7 $$ int idx = pattern.lastIndexOf(separator)-->Line_9 $$ idx = pattern.lastIndexOf(separator, idx - 1)[ FD ]
