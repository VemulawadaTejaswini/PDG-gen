Line_8 $$ int newSize = elements.size()-->Line_13 $$ if (newSize >= targetQueueSize) [ FD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_9 $$ if (newSize == 1) [ CD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_7 $$ elements.add(element)[ CD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_7 $$ elements.add(element)[ FD ]
Line_9 $$ if (newSize == 1) -->Line_10 $$ completeAsync(executor, notEmptySignal)[ CD ]
Line_8 $$ int newSize = elements.size()-->Line_9 $$ if (newSize == 1) [ FD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_4 $$ if (finishing) [ CD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_3 $$ requireNonNull(element)[ FD ]
Line_4 $$ if (finishing) -->Line_5 $$ return CompletableFuture.completedFuture(null)[ CD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_3 $$ requireNonNull(element)[ CD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_13 $$ if (newSize >= targetQueueSize) [ CD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_16 $$ return CompletableFuture.completedFuture(null)[ CD ]
Line_13 $$ if (newSize >= targetQueueSize) -->Line_14 $$ return notFullSignal[ CD ]
Line_2 $$ public synchronized CompletableFuture<?> offer(T element) -->Line_8 $$ int newSize = elements.size()[ CD ]
