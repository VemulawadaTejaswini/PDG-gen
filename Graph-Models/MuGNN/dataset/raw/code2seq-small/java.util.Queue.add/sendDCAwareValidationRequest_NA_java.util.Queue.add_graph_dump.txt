Line_5 $$ Map<String, Queue<InetAddress>> requestsByDatacenter = new HashMap()-->Line_15 $$ for (Map.Entry<String, Queue<InetAddress>> entry : requestsByDatacenter.entrySet()) [ FD ]
Line_24 $$ final InetAddress nextAddress = requests.poll()-->Line_29 $$ logger.info("Validating [ FD ]
Line_18 $$ ValidationTask firstTask = new ValidationTask(desc, address, gcBefore)-->Line_21 $$ tasks.add(firstTask)[ FD ]
Line_25 $$ final ValidationTask nextTask = new ValidationTask(desc, nextAddress, gcBefore)-->Line_30 $$ session.waitForValidation(Pair.create(desc, nextAddress), nextTask)[ FD ]
Line_17 $$ InetAddress address = requests.poll()-->Line_20 $$ session.waitForValidation(Pair.create(desc, address), firstTask)[ FD ]
Line_4 $$ List<ListenableFuture<TreeResponse>> tasks = new ArrayList(endpoints.size())-->Line_21 $$ tasks.add(firstTask)[ FD ]
Line_17 $$ InetAddress address = requests.poll()-->Line_19 $$ logger.info("Validating [ FD ]
Line_4 $$ List<ListenableFuture<TreeResponse>> tasks = new ArrayList(endpoints.size())-->Line_26 $$ tasks.add(nextTask)[ FD ]
Line_25 $$ final ValidationTask nextTask = new ValidationTask(desc, nextAddress, gcBefore)-->Line_31 $$ taskExecutor.execute(nextTask)[ FD ]
Line_25 $$ final ValidationTask nextTask = new ValidationTask(desc, nextAddress, gcBefore)-->Line_26 $$ tasks.add(nextTask)[ FD ]
Line_16 $$ Queue<InetAddress> requests = entry.getValue()-->Line_17 $$ InetAddress address = requests.poll()[ FD ]
Line_27 $$ Futures.addCallback(currentTask, new FutureCallback<TreeResponse>() -->Line_30 $$ session.waitForValidation(Pair.create(desc, nextAddress), nextTask)[ CD ]
Line_7 $$ String dc = DatabaseDescriptor.getEndpointSnitch().getDatacenter(endpoint)-->Line_11 $$ requestsByDatacenter.put(dc, queue)[ FD ]
Line_27 $$ Futures.addCallback(currentTask, new FutureCallback<TreeResponse>() -->Line_29 $$ logger.info("Validating [ CD ]
Line_8 $$ Queue<InetAddress> queue = requestsByDatacenter.get(dc)-->Line_11 $$ requestsByDatacenter.put(dc, queue)[ FD ]
Line_15 $$ for (Map.Entry<String, Queue<InetAddress>> entry : requestsByDatacenter.entrySet()) -->Line_16 $$ Queue<InetAddress> requests = entry.getValue()[ FD ]
Line_18 $$ ValidationTask firstTask = new ValidationTask(desc, address, gcBefore)-->Line_20 $$ session.waitForValidation(Pair.create(desc, address), firstTask)[ FD ]
Line_2 $$ private ListenableFuture<List<TreeResponse>> sendDCAwareValidationRequest(Collection<InetAddress> endpoints) -->Line_3 $$ int gcBefore = Keyspace.open(desc.keyspace).getColumnFamilyStore(desc.columnFamily).gcBefore(FBUtilities.nowInSeconds())[ CD ]
Line_2 $$ private ListenableFuture<List<TreeResponse>> sendDCAwareValidationRequest(Collection<InetAddress> endpoints) -->Line_40 $$ return Futures.allAsList(tasks)[ CD ]
Line_23 $$ while (requests.size() > 0) -->Line_25 $$ final ValidationTask nextTask = new ValidationTask(desc, nextAddress, gcBefore)[ CD ]
Line_5 $$ Map<String, Queue<InetAddress>> requestsByDatacenter = new HashMap()-->Line_8 $$ Queue<InetAddress> queue = requestsByDatacenter.get(dc)[ FD ]
Line_2 $$ private ListenableFuture<List<TreeResponse>> sendDCAwareValidationRequest(Collection<InetAddress> endpoints) -->Line_4 $$ List<ListenableFuture<TreeResponse>> tasks = new ArrayList(endpoints.size())[ CD ]
Line_10 $$ queue = new LinkedList()-->Line_13 $$ queue.add(endpoint)[ FD ]
Line_8 $$ Queue<InetAddress> queue = requestsByDatacenter.get(dc)-->Line_13 $$ queue.add(endpoint)[ FD ]
Line_6 $$ for (InetAddress endpoint : endpoints) -->Line_13 $$ queue.add(endpoint)[ FD ]
Line_9 $$ if (queue == null) -->Line_10 $$ queue = new LinkedList()[ CD ]
Line_27 $$ Futures.addCallback(currentTask, new FutureCallback<TreeResponse>() -->Line_31 $$ taskExecutor.execute(nextTask)[ CD ]
Line_8 $$ Queue<InetAddress> queue = requestsByDatacenter.get(dc)-->Line_9 $$ if (queue == null) [ FD ]
Line_7 $$ String dc = DatabaseDescriptor.getEndpointSnitch().getDatacenter(endpoint)-->Line_8 $$ Queue<InetAddress> queue = requestsByDatacenter.get(dc)[ FD ]
Line_6 $$ for (InetAddress endpoint : endpoints) -->Line_7 $$ String dc = DatabaseDescriptor.getEndpointSnitch().getDatacenter(endpoint)[ FD ]
Line_24 $$ final InetAddress nextAddress = requests.poll()-->Line_30 $$ session.waitForValidation(Pair.create(desc, nextAddress), nextTask)[ FD ]
Line_23 $$ while (requests.size() > 0) -->Line_24 $$ final InetAddress nextAddress = requests.poll()[ CD ]
Line_8 $$ Queue<InetAddress> queue = requestsByDatacenter.get(dc)-->Line_10 $$ queue = new LinkedList()[ FD ]
Line_2 $$ private ListenableFuture<List<TreeResponse>> sendDCAwareValidationRequest(Collection<InetAddress> endpoints) -->Line_4 $$ List<ListenableFuture<TreeResponse>> tasks = new ArrayList(endpoints.size())[ FD ]
Line_5 $$ Map<String, Queue<InetAddress>> requestsByDatacenter = new HashMap()-->Line_11 $$ requestsByDatacenter.put(dc, queue)[ FD ]
Line_16 $$ Queue<InetAddress> requests = entry.getValue()-->Line_24 $$ final InetAddress nextAddress = requests.poll()[ FD ]
Line_23 $$ while (requests.size() > 0) -->Line_26 $$ tasks.add(nextTask)[ CD ]
Line_10 $$ queue = new LinkedList()-->Line_11 $$ requestsByDatacenter.put(dc, queue)[ FD ]
Line_18 $$ ValidationTask firstTask = new ValidationTask(desc, address, gcBefore)-->Line_38 $$ taskExecutor.execute(firstTask)[ FD ]
Line_4 $$ List<ListenableFuture<TreeResponse>> tasks = new ArrayList(endpoints.size())-->Line_40 $$ return Futures.allAsList(tasks)[ FD ]
Line_9 $$ if (queue == null) -->Line_11 $$ requestsByDatacenter.put(dc, queue)[ CD ]
Line_16 $$ Queue<InetAddress> requests = entry.getValue()-->Line_23 $$ while (requests.size() > 0) [ FD ]
Line_22 $$ ValidationTask currentTask = firstTask-->Line_27 $$ Futures.addCallback(currentTask, new FutureCallback<TreeResponse>() [ FD ]
Line_23 $$ while (requests.size() > 0) -->Line_27 $$ Futures.addCallback(currentTask, new FutureCallback<TreeResponse>() [ CD ]
Line_2 $$ private ListenableFuture<List<TreeResponse>> sendDCAwareValidationRequest(Collection<InetAddress> endpoints) -->Line_5 $$ Map<String, Queue<InetAddress>> requestsByDatacenter = new HashMap()[ CD ]
