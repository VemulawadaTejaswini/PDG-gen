Line_2 $$ public void testPrepareStatementIntercept() -->Line_41 $$ t.commit()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_8 $$ expectedSQLs.add("select")[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_32 $$ u.setPassword("Kinga")[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_35 $$ s.merge(u)[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_33 $$ s = openSession(interceptor)[ CD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_43 $$ assertTrue(expectedSQLs.isEmpty())[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_25 $$ s.close()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_31 $$ s.close()[ CD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_15 $$ String expectedSql = expectedSQLs.poll().toLowerCase(Locale.ROOT)[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_36 $$ t.commit()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_21 $$ Transaction t = s.beginTransaction()[ CD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_38 $$ s = openSession(interceptor)[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()[ CD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_15 $$ String expectedSql = expectedSQLs.poll().toLowerCase(Locale.ROOT)[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_10 $$ expectedSQLs.add("select")[ CD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_20 $$ Session s = openSession(interceptor)[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_34 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_39 $$ t = s.beginTransaction()[ CD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_6 $$ expectedSQLs.add("select")[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_38 $$ s = openSession(interceptor)[ CD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_14 $$ assertNotNull(sql)[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_4 $$ expectedSQLs.add("insert")[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_26 $$ s = openSession(interceptor)[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_24 $$ t.commit()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_43 $$ assertTrue(expectedSQLs.isEmpty())[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_11 $$ expectedSQLs.add("delete")[ CD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_7 $$ expectedSQLs.add("select")[ FD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_17 $$ return sql[ CD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_33 $$ s = openSession(interceptor)[ FD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_14 $$ assertNotNull(sql)[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() [ CD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_10 $$ expectedSQLs.add("select")[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_7 $$ expectedSQLs.add("select")[ CD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_26 $$ s = openSession(interceptor)[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_30 $$ t.commit()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_20 $$ Session s = openSession(interceptor)[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_42 $$ s.close()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_28 $$ s.get(User.class, "Lukasz")[ CD ]
Line_15 $$ String expectedSql = expectedSQLs.poll().toLowerCase(Locale.ROOT)-->Line_16 $$ assertTrue("sql:\n " + sql.toLowerCase(Locale.ROOT) + "\n doesn't start with \n" + expectedSql + "\n", sql.toLowerCase(Locale.ROOT).startsWith(expectedSql))[ FD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_11 $$ expectedSQLs.add("delete")[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_29 $$ s.createQuery("from User u").list()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_40 $$ s.delete(u)[ CD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_16 $$ assertTrue("sql:\n " + sql.toLowerCase(Locale.ROOT) + "\n doesn't start with \n" + expectedSql + "\n", sql.toLowerCase(Locale.ROOT).startsWith(expectedSql))[ CD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_5 $$ expectedSQLs.add("select")[ FD ]
Line_12 $$ final Interceptor interceptor = new EmptyInterceptor() -->Line_16 $$ assertTrue("sql:\n " + sql.toLowerCase(Locale.ROOT) + "\n doesn't start with \n" + expectedSql + "\n", sql.toLowerCase(Locale.ROOT).startsWith(expectedSql))[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_27 $$ t = s.beginTransaction()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_5 $$ expectedSQLs.add("select")[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_23 $$ s.persist(u)[ CD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_9 $$ expectedSQLs.add("update")[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_37 $$ s.close()[ CD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_9 $$ expectedSQLs.add("update")[ CD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_4 $$ expectedSQLs.add("insert")[ FD ]
Line_3 $$ final Queue<String> expectedSQLs = new LinkedList<String>()-->Line_8 $$ expectedSQLs.add("select")[ FD ]
Line_2 $$ public void testPrepareStatementIntercept() -->Line_6 $$ expectedSQLs.add("select")[ CD ]
