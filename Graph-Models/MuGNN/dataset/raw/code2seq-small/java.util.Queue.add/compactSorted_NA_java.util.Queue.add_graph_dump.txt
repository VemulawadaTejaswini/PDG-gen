Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_9 $$ Queue<SortedRowSource> rowSources = new PriorityQueue()[ CD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_3 $$ checkArgument(sortColumnIds.size() == sortOrders.size(), "sortColumnIds and sortOrders must be of the same size")[ FD ]
Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)-->Line_23 $$ outputPageSink.appendRow(rowSource.next())[ FD ]
Line_9 $$ Queue<SortedRowSource> rowSources = new PriorityQueue()-->Line_15 $$ rowSources.add(rowSource)[ FD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_6 $$ List<Type> columnTypes = columns.stream().map(ColumnInfo::<>getType).collect(toList())[ FD ]
Line_12 $$ for (UUID uuid : uuids) -->Line_13 $$ ConnectorPageSource pageSource = storageManager.getPageSource(uuid, columnIds, columnTypes, TupleDomain.all(), readerAttributes)[ FD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_31 $$ inputShardsPerCompaction.add(uuids.size())[ FD ]
Line_14 $$ SortedRowSource rowSource = new SortedRowSource(pageSource, columnTypes, sortIndexes, sortOrders)-->Line_23 $$ outputPageSink.appendRow(rowSource.next())[ FD ]
Line_5 $$ List<Long> columnIds = columns.stream().map(ColumnInfo::<>getColumnId).collect(toList())-->Line_7 $$ checkArgument(columnIds.containsAll(sortColumnIds), "sortColumnIds must be a subset of columnIds")[ FD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_8 $$ List<Integer> sortIndexes = sortColumnIds.stream().map(columnIds::<>indexOf).collect(toList())[ CD ]
Line_18 $$ SortedRowSource rowSource = rowSources.poll()-->Line_20 $$ rowSource.close()[ FD ]
Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)-->Line_25 $$ outputPageSink.flush()[ FD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_4 $$ long start = System.nanoTime()[ CD ]
Line_18 $$ SortedRowSource rowSource = rowSources.poll()-->Line_23 $$ outputPageSink.appendRow(rowSource.next())[ FD ]
Line_24 $$ if (outputPageSink.isFull()) -->Line_25 $$ outputPageSink.flush()[ CD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_5 $$ List<Long> columnIds = columns.stream().map(ColumnInfo::<>getColumnId).collect(toList())[ CD ]
Line_18 $$ SortedRowSource rowSource = rowSources.poll()-->Line_27 $$ rowSources.add(rowSource)[ FD ]
Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)-->Line_24 $$ if (outputPageSink.isFull()) [ FD ]
Line_6 $$ List<Type> columnTypes = columns.stream().map(ColumnInfo::<>getType).collect(toList())-->Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)[ FD ]
Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)-->Line_29 $$ outputPageSink.flush()[ FD ]
Line_17 $$ while (!rowSources.isEmpty()) -->Line_19 $$ if (!rowSource.hasNext()) [ CD ]
Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)-->Line_36 $$ outputPageSink.rollback()[ FD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)[ FD ]
Line_14 $$ SortedRowSource rowSource = new SortedRowSource(pageSource, columnTypes, sortIndexes, sortOrders)-->Line_27 $$ rowSources.add(rowSource)[ FD ]
Line_14 $$ SortedRowSource rowSource = new SortedRowSource(pageSource, columnTypes, sortIndexes, sortOrders)-->Line_15 $$ rowSources.add(rowSource)[ FD ]
Line_5 $$ List<Long> columnIds = columns.stream().map(ColumnInfo::<>getColumnId).collect(toList())-->Line_13 $$ ConnectorPageSource pageSource = storageManager.getPageSource(uuid, columnIds, columnTypes, TupleDomain.all(), readerAttributes)[ FD ]
Line_17 $$ while (!rowSources.isEmpty()) -->Line_18 $$ SortedRowSource rowSource = rowSources.poll()[ CD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_5 $$ List<Long> columnIds = columns.stream().map(ColumnInfo::<>getColumnId).collect(toList())[ FD ]
Line_9 $$ Queue<SortedRowSource> rowSources = new PriorityQueue()-->Line_18 $$ SortedRowSource rowSource = rowSources.poll()[ FD ]
Line_17 $$ while (!rowSources.isEmpty()) -->Line_27 $$ rowSources.add(rowSource)[ CD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_7 $$ checkArgument(columnIds.containsAll(sortColumnIds), "sortColumnIds must be a subset of columnIds")[ CD ]
Line_9 $$ Queue<SortedRowSource> rowSources = new PriorityQueue()-->Line_39 $$ rowSources.stream().forEach(SortedRowSource::<>closeQuietly)[ FD ]
Line_14 $$ SortedRowSource rowSource = new SortedRowSource(pageSource, columnTypes, sortIndexes, sortOrders)-->Line_20 $$ rowSource.close()[ FD ]
Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)-->Line_30 $$ List<ShardInfo> shardInfos = outputPageSink.commit()[ FD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_6 $$ List<Type> columnTypes = columns.stream().map(ColumnInfo::<>getType).collect(toList())[ CD ]
Line_19 $$ if (!rowSource.hasNext()) -->Line_20 $$ rowSource.close()[ CD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)[ CD ]
Line_6 $$ List<Type> columnTypes = columns.stream().map(ColumnInfo::<>getType).collect(toList())-->Line_13 $$ ConnectorPageSource pageSource = storageManager.getPageSource(uuid, columnIds, columnTypes, TupleDomain.all(), readerAttributes)[ FD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_3 $$ checkArgument(sortColumnIds.size() == sortOrders.size(), "sortColumnIds and sortOrders must be of the same size")[ CD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_7 $$ checkArgument(columnIds.containsAll(sortColumnIds), "sortColumnIds must be a subset of columnIds")[ FD ]
Line_14 $$ SortedRowSource rowSource = new SortedRowSource(pageSource, columnTypes, sortIndexes, sortOrders)-->Line_19 $$ if (!rowSource.hasNext()) [ FD ]
Line_30 $$ List<ShardInfo> shardInfos = outputPageSink.commit()-->Line_32 $$ outputShardsPerCompaction.add(shardInfos.size())[ FD ]
Line_17 $$ while (!rowSources.isEmpty()) -->Line_24 $$ if (outputPageSink.isFull()) [ CD ]
Line_9 $$ Queue<SortedRowSource> rowSources = new PriorityQueue()-->Line_17 $$ while (!rowSources.isEmpty()) [ FD ]
Line_4 $$ long start = System.nanoTime()-->Line_33 $$ sortedCompactionLatencyMillis.add(Duration.nanosSince(start).toMillis())[ FD ]
Line_17 $$ while (!rowSources.isEmpty()) -->Line_23 $$ outputPageSink.appendRow(rowSource.next())[ CD ]
Line_5 $$ List<Long> columnIds = columns.stream().map(ColumnInfo::<>getColumnId).collect(toList())-->Line_10 $$ StoragePageSink outputPageSink = storageManager.createStoragePageSink(transactionId, columnIds, columnTypes)[ FD ]
Line_18 $$ SortedRowSource rowSource = rowSources.poll()-->Line_19 $$ if (!rowSource.hasNext()) [ FD ]
Line_9 $$ Queue<SortedRowSource> rowSources = new PriorityQueue()-->Line_27 $$ rowSources.add(rowSource)[ FD ]
Line_2 $$ public List<ShardInfo> compactSorted(long transactionId, Set<UUID> uuids, List<ColumnInfo> columns, List<Long> sortColumnIds, List<SortOrder> sortOrders) throws IOException -->Line_8 $$ List<Integer> sortIndexes = sortColumnIds.stream().map(columnIds::<>indexOf).collect(toList())[ FD ]
