Line_5 $$ Map<RawUDT, Integer> vertices = new HashMap()-->Line_12 $$ for (Map.Entry<RawUDT, Integer> entry : vertices.entrySet()) if (entry.getValue() == 0)[ FD ]
Line_5 $$ Map<RawUDT, Integer> vertices = new HashMap()-->Line_6 $$ vertices.put(udt, 0)[ FD ]
Line_17 $$ for (RawUDT dependentType : adjacencyList.get(vertex)) if (vertices.replace(dependentType, vertices.get(dependentType) - 1) == 1)-->Line_18 $$ resolvableTypes.add(dependentType)[ FD ]
Line_2 $$ public Types build() -->Line_7 $$ Multimap<RawUDT, RawUDT> adjacencyList = HashMultimap.create()[ CD ]
Line_2 $$ public Types build() -->Line_22 $$ if (types.types.size() != definitions.size())[ CD ]
Line_2 $$ public Types build() -->Line_3 $$ if (definitions.isEmpty())[ CD ]
Line_11 $$ Queue<RawUDT> resolvableTypes = new LinkedList()-->Line_16 $$ RawUDT vertex = resolvableTypes.remove()[ FD ]
Line_15 $$ while (!resolvableTypes.isEmpty()) -->Line_20 $$ types.types.put(udt.name, udt)[ CD ]
Line_5 $$ Map<RawUDT, Integer> vertices = new HashMap()-->Line_10 $$ vertices.put(vertex, vertices.get(vertex) + 1)[ FD ]
Line_5 $$ Map<RawUDT, Integer> vertices = new HashMap()-->Line_17 $$ if (vertices.replace(dependentType, vertices.get(dependentType) - 1) == 1)[ FD ]
Line_11 $$ Queue<RawUDT> resolvableTypes = new LinkedList()-->Line_18 $$ resolvableTypes.add(dependentType)[ FD ]
Line_14 $$ Types types = new Types(new HashMap())-->Line_24 $$ return Types.builder().add(types).build()[ FD ]
Line_15 $$ while (!resolvableTypes.isEmpty()) -->Line_19 $$ UserType udt = vertex.prepare(keyspace, types)[ CD ]
Line_2 $$ public Types build() -->Line_14 $$ Types types = new Types(new HashMap())[ CD ]
Line_12 $$ if (entry.getValue() == 0)-->Line_13 $$ resolvableTypes.add(entry.getKey())[ CD ]
Line_8 $$ for (RawUDT udt2 : definitions) if (udt1 != udt2 && udt1.referencesUserType(udt2))-->Line_9 $$ adjacencyList.put(udt2, udt1)[ FD ]
Line_8 $$ if (udt1 != udt2 && udt1.referencesUserType(udt2))-->Line_9 $$ adjacencyList.put(udt2, udt1)[ CD ]
Line_2 $$ public Types build() -->Line_24 $$ return Types.builder().add(types).build()[ CD ]
Line_8 $$ for (RawUDT udt1 : definitions) for (RawUDT udt2 : definitions) if (udt1 != udt2 && udt1.referencesUserType(udt2))-->Line_9 $$ adjacencyList.put(udt2, udt1)[ FD ]
Line_12 $$ for (Map.Entry<RawUDT, Integer> entry : vertices.entrySet()) if (entry.getValue() == 0)-->Line_13 $$ resolvableTypes.add(entry.getKey())[ FD ]
Line_2 $$ public Types build() -->Line_10 $$ adjacencyList.values().forEach( vertex -> vertices.put(vertex, vertices.get(vertex) + 1))[ CD ]
Line_2 $$ public Types build() -->Line_11 $$ Queue<RawUDT> resolvableTypes = new LinkedList()[ CD ]
Line_16 $$ RawUDT vertex = resolvableTypes.remove()-->Line_19 $$ UserType udt = vertex.prepare(keyspace, types)[ FD ]
Line_6 $$ for (RawUDT udt : definitions) vertices.put(udt, 0)-->Line_20 $$ types.types.put(udt.name, udt)[ FD ]
Line_16 $$ RawUDT vertex = resolvableTypes.remove()-->Line_17 $$ for (RawUDT dependentType : adjacencyList.get(vertex)) if (vertices.replace(dependentType, vertices.get(dependentType) - 1) == 1)[ FD ]
Line_17 $$ if (vertices.replace(dependentType, vertices.get(dependentType) - 1) == 1)-->Line_18 $$ resolvableTypes.add(dependentType)[ CD ]
Line_2 $$ public Types build() -->Line_15 $$ while (!resolvableTypes.isEmpty()) [ CD ]
Line_3 $$ if (definitions.isEmpty())-->Line_4 $$ return Types.none()[ CD ]
Line_7 $$ Multimap<RawUDT, RawUDT> adjacencyList = HashMultimap.create()-->Line_9 $$ adjacencyList.put(udt2, udt1)[ FD ]
Line_7 $$ Multimap<RawUDT, RawUDT> adjacencyList = HashMultimap.create()-->Line_17 $$ for (RawUDT dependentType : adjacencyList.get(vertex)) if (vertices.replace(dependentType, vertices.get(dependentType) - 1) == 1)[ FD ]
Line_11 $$ Queue<RawUDT> resolvableTypes = new LinkedList()-->Line_13 $$ resolvableTypes.add(entry.getKey())[ FD ]
Line_14 $$ Types types = new Types(new HashMap())-->Line_19 $$ UserType udt = vertex.prepare(keyspace, types)[ FD ]
Line_11 $$ Queue<RawUDT> resolvableTypes = new LinkedList()-->Line_15 $$ while (!resolvableTypes.isEmpty()) [ FD ]
Line_2 $$ public Types build() -->Line_5 $$ Map<RawUDT, Integer> vertices = new HashMap()[ CD ]
Line_15 $$ while (!resolvableTypes.isEmpty()) -->Line_16 $$ RawUDT vertex = resolvableTypes.remove()[ CD ]
Line_7 $$ Multimap<RawUDT, RawUDT> adjacencyList = HashMultimap.create()-->Line_10 $$ adjacencyList.values().forEach( vertex -> vertices.put(vertex, vertices.get(vertex) + 1))[ FD ]
Line_19 $$ UserType udt = vertex.prepare(keyspace, types)-->Line_20 $$ types.types.put(udt.name, udt)[ FD ]
