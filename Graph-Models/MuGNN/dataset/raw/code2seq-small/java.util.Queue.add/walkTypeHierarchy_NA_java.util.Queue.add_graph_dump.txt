Line_7 $$ while ((type = queue.poll()) != null) -->Line_11 $$ visitor.visitType(type)[ CD ]
Line_7 $$ while ((type = queue.poll()) != null) -->Line_12 $$ Class<? super T> superclass = type.getSuperclass()[ FD ]
Line_13 $$ if (superclass != null) -->Line_14 $$ queue.add(superclass)[ CD ]
Line_2 $$ public static <T> void walkTypeHierarchy(Class<T> clazz, TypeVisitor<? extends T> visitor) -->Line_7 $$ while ((type = queue.poll()) != null) [ CD ]
Line_2 $$ public static <T> void walkTypeHierarchy(Class<T> clazz, TypeVisitor<? extends T> visitor) -->Line_5 $$ queue.add(clazz)[ FD ]
Line_2 $$ public static <T> void walkTypeHierarchy(Class<T> clazz, TypeVisitor<? extends T> visitor) -->Line_3 $$ Set<Class<?>> seenInterfaces = Sets.newHashSet()[ CD ]
Line_16 $$ for (Class<?> iface : type.getInterfaces()) -->Line_17 $$ if (seenInterfaces.add(iface)) [ FD ]
Line_7 $$ while ((type = queue.poll()) != null) -->Line_12 $$ Class<? super T> superclass = type.getSuperclass()[ CD ]
Line_2 $$ public static <T> void walkTypeHierarchy(Class<T> clazz, TypeVisitor<? extends T> visitor) -->Line_6 $$ Class<? super T> type[ CD ]
Line_7 $$ while ((type = queue.poll()) != null) -->Line_16 $$ for (Class<?> iface : type.getInterfaces()) [ FD ]
Line_12 $$ Class<? super T> superclass = type.getSuperclass()-->Line_14 $$ queue.add(superclass)[ FD ]
Line_4 $$ Queue<Class<? super T>> queue = new ArrayDeque<Class<? super T>>()-->Line_5 $$ queue.add(clazz)[ FD ]
Line_7 $$ while ((type = queue.poll()) != null) -->Line_13 $$ if (superclass != null) [ CD ]
Line_2 $$ public static <T> void walkTypeHierarchy(Class<T> clazz, TypeVisitor<? extends T> visitor) -->Line_4 $$ Queue<Class<? super T>> queue = new ArrayDeque<Class<? super T>>()[ CD ]
Line_4 $$ Queue<Class<? super T>> queue = new ArrayDeque<Class<? super T>>()-->Line_18 $$ queue.add(Cast.<Class<? super T>>uncheckedCast(iface))[ FD ]
Line_16 $$ for (Class<?> iface : type.getInterfaces()) -->Line_18 $$ queue.add(Cast.<Class<? super T>>uncheckedCast(iface))[ FD ]
Line_6 $$ Class<? super T> type-->Line_12 $$ Class<? super T> superclass = type.getSuperclass()[ FD ]
Line_4 $$ Queue<Class<? super T>> queue = new ArrayDeque<Class<? super T>>()-->Line_14 $$ queue.add(superclass)[ FD ]
Line_7 $$ while ((type = queue.poll()) != null) -->Line_11 $$ visitor.visitType(type)[ FD ]
Line_6 $$ Class<? super T> type-->Line_11 $$ visitor.visitType(type)[ FD ]
Line_3 $$ Set<Class<?>> seenInterfaces = Sets.newHashSet()-->Line_17 $$ if (seenInterfaces.add(iface)) [ FD ]
Line_12 $$ Class<? super T> superclass = type.getSuperclass()-->Line_13 $$ if (superclass != null) [ FD ]
Line_7 $$ while ((type = queue.poll()) != null) -->Line_8 $$ if (type.equals(Object.class) || type.equals(GroovyObject.class)) [ FD ]
Line_7 $$ while ((type = queue.poll()) != null) -->Line_8 $$ if (type.equals(Object.class) || type.equals(GroovyObject.class)) [ CD ]
Line_6 $$ Class<? super T> type-->Line_8 $$ if (type.equals(Object.class) || type.equals(GroovyObject.class)) [ FD ]
Line_2 $$ public static <T> void walkTypeHierarchy(Class<T> clazz, TypeVisitor<? extends T> visitor) -->Line_5 $$ queue.add(clazz)[ CD ]
Line_4 $$ Queue<Class<? super T>> queue = new ArrayDeque<Class<? super T>>()-->Line_7 $$ while ((type = queue.poll()) != null) [ FD ]
Line_6 $$ Class<? super T> type-->Line_16 $$ for (Class<?> iface : type.getInterfaces()) [ FD ]
Line_2 $$ public static <T> void walkTypeHierarchy(Class<T> clazz, TypeVisitor<? extends T> visitor) -->Line_11 $$ visitor.visitType(type)[ FD ]
Line_6 $$ Class<? super T> type-->Line_7 $$ while ((type = queue.poll()) != null) [ FD ]
Line_17 $$ if (seenInterfaces.add(iface)) -->Line_18 $$ queue.add(Cast.<Class<? super T>>uncheckedCast(iface))[ CD ]
