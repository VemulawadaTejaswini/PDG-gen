Line_7 $$ while (xPathIdStack.size() > 1) -->Line_10 $$ String commandTag = getLogElementText(xPath + "/div/span[@class='tag'][1]")[ CD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_25 $$ sb.append("</b> ")[ CD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_29 $$ parentCommand = StringUtil.replace(parentCommand, "\"", "")[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_48 $$ sb.append(throwable.getMessage())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_41 $$ sb.append("<br />")[ FD ]
Line_3 $$ Stack<String> xPathIdStack = (Stack<String>) _xPathIdStack.clone()-->Line_8 $$ String xPath = generateXPath(xPathIdStack)[ FD ]
Line_6 $$ Queue<String> xPathQueue = new LinkedList()-->Line_27 $$ String parentXPath = xPathQueue.peek()[ FD ]
Line_3 $$ Stack<String> xPathIdStack = (Stack<String>) _xPathIdStack.clone()-->Line_43 $$ String testCaseCommand = getLogElementText(generateXPath(xPathIdStack) + "/div/h3")[ FD ]
Line_29 $$ parentCommand = StringUtil.replace(parentCommand, "\"", "")-->Line_31 $$ int pos = parentCommand.indexOf("#")[ FD ]
Line_30 $$ String parentCommandType = getLogElementText(parentXPath + "/div/span[@class='attribute'][1]")-->Line_35 $$ sb.append(parentCommandType)[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_49 $$ StackTraceElement[] stackTraceElements = throwable.getStackTrace()[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_57 $$ sb.append("</textarea>")[ CD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_58 $$ sb.append("</p>")[ CD ]
Line_6 $$ Queue<String> xPathQueue = new LinkedList()-->Line_16 $$ while (xPathQueue.peek() != null) [ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_46 $$ sb.append("</b><br />")[ CD ]
Line_6 $$ Queue<String> xPathQueue = new LinkedList()-->Line_26 $$ if (xPathQueue.peek() != null) [ FD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_30 $$ String parentCommandType = getLogElementText(parentXPath + "/div/span[@class='attribute'][1]")[ CD ]
Line_38 $$ String lineNumber = getLogElementText(xPath + "/div/div[@class='line-number']")-->Line_40 $$ sb.append(lineNumber)[ FD ]
Line_3 $$ Stack<String> xPathIdStack = (Stack<String>) _xPathIdStack.clone()-->Line_7 $$ while (xPathIdStack.size() > 1) [ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_39 $$ sb.append("at line ")[ FD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_20 $$ String commandType = getLogElementText(xPath + "/div/span[@class='attribute'][1]")[ CD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_21 $$ sb.append("Failed Line: ")[ CD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_28 $$ String parentCommand = getLogElementText(parentXPath + "/div/span[@class='quote'][1]")[ CD ]
Line_28 $$ String parentCommand = getLogElementText(parentXPath + "/div/span[@class='quote'][1]")-->Line_33 $$ sb.append(parentCommand.substring(0, pos))[ FD ]
Line_7 $$ while (xPathIdStack.size() > 1) -->Line_14 $$ xPathQueue.add(xPath)[ CD ]
Line_7 $$ while (xPathIdStack.size() > 1) -->Line_11 $$ if (!commandTag.equals("echo") && !commandTag.equals("execute") && !commandTag.equals("fail")) [ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_23 $$ sb.append(": <b>")[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_49 $$ StackTraceElement[] stackTraceElements = throwable.getStackTrace()[ CD ]
Line_6 $$ Queue<String> xPathQueue = new LinkedList()-->Line_14 $$ xPathQueue.add(xPath)[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_43 $$ String testCaseCommand = getLogElementText(generateXPath(xPathIdStack) + "/div/h3")[ CD ]
Line_10 $$ String commandTag = getLogElementText(xPath + "/div/span[@class='tag'][1]")-->Line_11 $$ if (!commandTag.equals("echo") && !commandTag.equals("execute") && !commandTag.equals("fail")) [ FD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_41 $$ sb.append("<br />")[ CD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_34 $$ sb.append(".")[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_40 $$ sb.append(lineNumber)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_24 $$ sb.append(command)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_53 $$ sb.append("&#10;&#9;")[ FD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_33 $$ sb.append(parentCommand.substring(0, pos))[ CD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_44 $$ sb.append("in test case command <b>")[ CD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_38 $$ String lineNumber = getLogElementText(xPath + "/div/div[@class='line-number']")[ CD ]
Line_52 $$ if (className.startsWith("com.liferay")) -->Line_53 $$ sb.append("&#10;&#9;")[ CD ]
Line_50 $$ for (StackTraceElement stackTraceElement : stackTraceElements) -->Line_54 $$ sb.append(stackTraceElement.toString())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_33 $$ sb.append(parentCommand.substring(0, pos))[ FD ]
Line_28 $$ String parentCommand = getLogElementText(parentXPath + "/div/span[@class='quote'][1]")-->Line_31 $$ int pos = parentCommand.indexOf("#")[ FD ]
Line_19 $$ command = StringUtil.replace(command, "\"", "")-->Line_24 $$ sb.append(command)[ FD ]
Line_7 $$ while (xPathIdStack.size() > 1) -->Line_8 $$ String xPath = generateXPath(xPathIdStack)[ CD ]
Line_8 $$ String xPath = generateXPath(xPathIdStack)-->Line_14 $$ xPathQueue.add(xPath)[ FD ]
Line_43 $$ String testCaseCommand = getLogElementText(generateXPath(xPathIdStack) + "/div/h3")-->Line_45 $$ sb.append(testCaseCommand.trim())[ FD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_19 $$ command = StringUtil.replace(command, "\"", "")[ CD ]
Line_3 $$ Stack<String> xPathIdStack = (Stack<String>) _xPathIdStack.clone()-->Line_9 $$ xPathIdStack.pop()[ FD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_17 $$ String xPath = xPathQueue.poll()[ CD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_32 $$ sb.append("(from ")[ CD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_35 $$ sb.append(parentCommandType)[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_36 $$ sb.append(") ")[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_48 $$ sb.append(throwable.getMessage())[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_47 $$ sb.append("<textarea cols=\"85\" rows=\"7\" wrap=\"off\">")[ CD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_18 $$ String command = getLogElementText(xPath + "/div/span[@class='quote'][1]")[ CD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_59 $$ return sb.toString()[ CD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_7 $$ while (xPathIdStack.size() > 1) [ CD ]
Line_28 $$ String parentCommand = getLogElementText(parentXPath + "/div/span[@class='quote'][1]")-->Line_29 $$ parentCommand = StringUtil.replace(parentCommand, "\"", "")[ FD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_24 $$ sb.append(command)[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_45 $$ sb.append(testCaseCommand.trim())[ FD ]
Line_18 $$ String command = getLogElementText(xPath + "/div/span[@class='quote'][1]")-->Line_19 $$ command = StringUtil.replace(command, "\"", "")[ FD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_31 $$ int pos = parentCommand.indexOf("#")[ CD ]
Line_6 $$ Queue<String> xPathQueue = new LinkedList()-->Line_17 $$ String xPath = xPathQueue.poll()[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_44 $$ sb.append("in test case command <b>")[ FD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_26 $$ if (xPathQueue.peek() != null) [ CD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_40 $$ sb.append(lineNumber)[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_54 $$ sb.append(stackTraceElement.toString())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_58 $$ sb.append("</p>")[ FD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_39 $$ sb.append("at line ")[ CD ]
Line_51 $$ String className = stackTraceElement.getClassName()-->Line_52 $$ if (className.startsWith("com.liferay")) [ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_46 $$ sb.append("</b><br />")[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_35 $$ sb.append(parentCommandType)[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_4 $$ StringBundler sb = new StringBundler()[ CD ]
Line_52 $$ if (className.startsWith("com.liferay")) -->Line_54 $$ sb.append(stackTraceElement.toString())[ CD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_5 $$ sb.append("<p>")[ CD ]
Line_20 $$ String commandType = getLogElementText(xPath + "/div/span[@class='attribute'][1]")-->Line_22 $$ sb.append(commandType)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_32 $$ sb.append("(from ")[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_22 $$ sb.append(commandType)[ FD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_27 $$ String parentXPath = xPathQueue.peek()[ CD ]
Line_31 $$ int pos = parentCommand.indexOf("#")-->Line_33 $$ sb.append(parentCommand.substring(0, pos))[ FD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_23 $$ sb.append(": <b>")[ CD ]
Line_18 $$ String command = getLogElementText(xPath + "/div/span[@class='quote'][1]")-->Line_24 $$ sb.append(command)[ FD ]
Line_7 $$ while (xPathIdStack.size() > 1) -->Line_9 $$ xPathIdStack.pop()[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_25 $$ sb.append("</b> ")[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_34 $$ sb.append(".")[ FD ]
Line_26 $$ if (xPathQueue.peek() != null) -->Line_36 $$ sb.append(") ")[ CD ]
Line_16 $$ while (xPathQueue.peek() != null) -->Line_22 $$ sb.append(commandType)[ CD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_21 $$ sb.append("Failed Line: ")[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_3 $$ Stack<String> xPathIdStack = (Stack<String>) _xPathIdStack.clone()[ CD ]
Line_50 $$ for (StackTraceElement stackTraceElement : stackTraceElements) -->Line_51 $$ String className = stackTraceElement.getClassName()[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_57 $$ sb.append("</textarea>")[ FD ]
Line_29 $$ parentCommand = StringUtil.replace(parentCommand, "\"", "")-->Line_33 $$ sb.append(parentCommand.substring(0, pos))[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_59 $$ return sb.toString()[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_47 $$ sb.append("<textarea cols=\"85\" rows=\"7\" wrap=\"off\">")[ FD ]
Line_4 $$ StringBundler sb = new StringBundler()-->Line_5 $$ sb.append("<p>")[ FD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_45 $$ sb.append(testCaseCommand.trim())[ CD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_16 $$ while (xPathQueue.peek() != null) [ CD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_6 $$ Queue<String> xPathQueue = new LinkedList()[ CD ]
Line_2 $$ protected String generateStackTrace(Throwable throwable) -->Line_48 $$ sb.append(throwable.getMessage())[ CD ]
