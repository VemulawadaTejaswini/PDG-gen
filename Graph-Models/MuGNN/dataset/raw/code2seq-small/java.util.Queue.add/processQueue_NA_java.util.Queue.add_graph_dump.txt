Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_45 $$ if (isSmallEnough) [ CD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_70 $$ return result[ CD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_67 $$ if (exception != null) [ CD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_10 $$ ProgressManager.getInstance().executeProcessUnderProgress(new Runnable() [ FD ]
Line_15 $$ T element = failedToProcess.poll()-->Line_18 $$ if (element == tombStone) [ FD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_14 $$ progress.checkCanceled()[ FD ]
Line_13 $$ while (true) -->Line_16 $$ if (element == null)[ CD ]
Line_20 $$ result = true-->Line_62 $$ result &= task.join()[ FD ]
Line_20 $$ result = true-->Line_25 $$ result = false[ FD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_44 $$ boolean isSmallEnough = things.contains(tombStone)[ FD ]
Line_13 $$ while (true) -->Line_15 $$ T element = failedToProcess.poll()[ CD ]
Line_15 $$ T element = failedToProcess.poll()-->Line_17 $$ element = things.take()[ FD ]
Line_17 $$ element = things.take()-->Line_18 $$ if (element == tombStone) [ FD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_18 $$ if (element == tombStone) [ FD ]
Line_13 $$ while (true) -->Line_14 $$ progress.checkCanceled()[ CD ]
Line_16 $$ if (element == null)-->Line_17 $$ element = things.take()[ CD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_44 $$ boolean isSmallEnough = things.contains(tombStone)[ CD ]
Line_55 $$ for (int i = 0; i < JobSchedulerImpl.CORES_COUNT; i++) -->Line_56 $$ tasks.add(pool.submit(new MyTask(i)))[ CD ]
Line_3 $$ class MyTask implements Callable<Boolean> -->Line_38 $$ return result[ CD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_19 $$ things.offer(element)[ FD ]
Line_17 $$ element = things.take()-->Line_24 $$ if (!thingProcessor.process(element)) [ FD ]
Line_15 $$ T element = failedToProcess.poll()-->Line_16 $$ if (element == null)[ FD ]
Line_17 $$ element = things.take()-->Line_29 $$ failedToProcess.add(element)[ FD ]
Line_13 $$ while (true) -->Line_18 $$ if (element == tombStone) [ CD ]
Line_25 $$ result = false-->Line_62 $$ result &= task.join()[ FD ]
Line_18 $$ if (element == tombStone) -->Line_20 $$ result = true[ CD ]
Line_15 $$ T element = failedToProcess.poll()-->Line_24 $$ if (!thingProcessor.process(element)) [ FD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_17 $$ element = things.take()[ FD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_29 $$ failedToProcess.add(element)[ FD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_15 $$ T element = failedToProcess.poll()[ FD ]
Line_17 $$ element = things.take()-->Line_16 $$ if (element == null)[ FD ]
Line_3 $$ class MyTask implements Callable<Boolean> -->Line_41 $$ return super.toString() + " seq=" + mySeq[ CD ]
Line_15 $$ T element = failedToProcess.poll()-->Line_19 $$ things.offer(element)[ FD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_55 $$ for (int i = 0; i < JobSchedulerImpl.CORES_COUNT; i++) [ CD ]
Line_18 $$ if (element == tombStone) -->Line_19 $$ things.offer(element)[ CD ]
Line_15 $$ T element = failedToProcess.poll()-->Line_29 $$ failedToProcess.add(element)[ FD ]
Line_24 $$ if (!thingProcessor.process(element)) -->Line_25 $$ result = false[ CD ]
Line_3 $$ class MyTask implements Callable<Boolean> -->Line_10 $$ ProgressManager.getInstance().executeProcessUnderProgress(new Runnable() [ CD ]
Line_17 $$ element = things.take()-->Line_19 $$ things.offer(element)[ FD ]
Line_2 $$ public <T> boolean processQueue(@NotNull final BlockingQueue<T> things, @NotNull final Queue<T> failedToProcess, @NotNull final ProgressIndicator progress, @NotNull final T tombStone, @NotNull final Processor<? super T> thingProcessor) -->Line_24 $$ if (!thingProcessor.process(element)) [ FD ]
