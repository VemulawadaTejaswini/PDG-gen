Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_24 $$ if (Long.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_21 $$ if (Date.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_25 $$ return (X) Long.valueOf(offsetDateTime.toInstant().toEpochMilli())[ FD ]
Line_24 $$ if (Long.class.isAssignableFrom(type)) -->Line_25 $$ return (X) Long.valueOf(offsetDateTime.toInstant().toEpochMilli())[ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_21 $$ if (Date.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_9 $$ if (Calendar.class.isAssignableFrom(type)) [ CD ]
Line_12 $$ if (Timestamp.class.isAssignableFrom(type)) -->Line_13 $$ return (X) Timestamp.from(offsetDateTime.toInstant())[ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_10 $$ return (X) GregorianCalendar.from(offsetDateTime.toZonedDateTime())[ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_18 $$ if (java.sql.Time.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_12 $$ if (Timestamp.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_9 $$ if (Calendar.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_19 $$ return (X) java.sql.Time.from(offsetDateTime.toInstant())[ FD ]
Line_21 $$ if (Date.class.isAssignableFrom(type)) -->Line_22 $$ return (X) Date.from(offsetDateTime.toInstant())[ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_22 $$ return (X) Date.from(offsetDateTime.toInstant())[ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_6 $$ if (OffsetDateTime.class.isAssignableFrom(type)) [ CD ]
Line_3 $$ if (offsetDateTime == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_3 $$ if (offsetDateTime == null) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_24 $$ if (Long.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_3 $$ if (offsetDateTime == null) [ FD ]
Line_18 $$ if (java.sql.Time.class.isAssignableFrom(type)) -->Line_19 $$ return (X) java.sql.Time.from(offsetDateTime.toInstant())[ CD ]
Line_6 $$ if (OffsetDateTime.class.isAssignableFrom(type)) -->Line_7 $$ return (X) offsetDateTime[ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_15 $$ if (java.sql.Date.class.isAssignableFrom(type)) [ CD ]
Line_9 $$ if (Calendar.class.isAssignableFrom(type)) -->Line_10 $$ return (X) GregorianCalendar.from(offsetDateTime.toZonedDateTime())[ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_12 $$ if (Timestamp.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_27 $$ throw unknownUnwrap(type)[ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_16 $$ return (X) java.sql.Date.from(offsetDateTime.toInstant())[ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_13 $$ return (X) Timestamp.from(offsetDateTime.toInstant())[ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_15 $$ if (java.sql.Date.class.isAssignableFrom(type)) [ FD ]
Line_15 $$ if (java.sql.Date.class.isAssignableFrom(type)) -->Line_16 $$ return (X) java.sql.Date.from(offsetDateTime.toInstant())[ CD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_6 $$ if (OffsetDateTime.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(OffsetDateTime offsetDateTime, Class<X> type, WrapperOptions options) -->Line_18 $$ if (java.sql.Time.class.isAssignableFrom(type)) [ CD ]
