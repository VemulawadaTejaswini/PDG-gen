Line_6 $$ if (diff == 0) -->Line_7 $$ return true[ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_5 $$ int length = text.length()[ FD ]
Line_13 $$ IElementType type = builder.rawLookup(i)-->Line_15 $$ if (isWhitespaceOrComment(builder, type)) [ FD ]
Line_14 $$ int tokenStart = builder.rawTokenTypeStart(i)-->Line_18 $$ CharSequence fragment = builder.getOriginalText().subSequence(tokenStart, offset)[ FD ]
Line_18 $$ CharSequence fragment = builder.getOriginalText().subSequence(tokenStart, offset)-->Line_19 $$ if (prefixMatches(fragment.toString(), text)) [ FD ]
Line_19 $$ if (prefixMatches(fragment.toString(), text)) -->Line_20 $$ diff = offset - tokenStart[ CD ]
Line_4 $$ int diff = offset - builderOffset-->Line_20 $$ diff = offset - tokenStart[ FD ]
Line_11 $$ if (diff < 0) -->Line_26 $$ return diff >= 0 && diff < length[ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_15 $$ if (isWhitespaceOrComment(builder, type)) [ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_28 $$ return false[ CD ]
Line_14 $$ int tokenStart = builder.rawTokenTypeStart(i)-->Line_20 $$ diff = offset - tokenStart[ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_4 $$ int diff = offset - builderOffset[ CD ]
Line_15 $$ if (isWhitespaceOrComment(builder, type)) -->Line_17 $$ if (type != null && tokenStart < offset) [ CD ]
Line_17 $$ if (type != null && tokenStart < offset) -->Line_19 $$ if (prefixMatches(fragment.toString(), text)) [ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_18 $$ CharSequence fragment = builder.getOriginalText().subSequence(tokenStart, offset)[ FD ]
Line_12 $$ for (int i = -1; ; i--) -->Line_13 $$ IElementType type = builder.rawLookup(i)[ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_3 $$ int builderOffset = builder.getCurrentOffset()[ CD ]
Line_6 $$ if (diff == 0) -->Line_8 $$ if (diff > 0 && diff <= length) [ CD ]
Line_4 $$ int diff = offset - builderOffset-->Line_6 $$ if (diff == 0) [ FD ]
Line_14 $$ int tokenStart = builder.rawTokenTypeStart(i)-->Line_16 $$ diff = offset - tokenStart[ FD ]
Line_12 $$ for (int i = -1; ; i--) -->Line_13 $$ IElementType type = builder.rawLookup(i)[ CD ]
Line_8 $$ if (diff > 0 && diff <= length) -->Line_11 $$ if (diff < 0) [ CD ]
Line_16 $$ diff = offset - tokenStart-->Line_20 $$ diff = offset - tokenStart[ FD ]
Line_11 $$ if (diff < 0) -->Line_12 $$ for (int i = -1; ; i--) [ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_19 $$ if (prefixMatches(fragment.toString(), text)) [ FD ]
Line_8 $$ if (diff > 0 && diff <= length) -->Line_9 $$ CharSequence fragment = builder.getOriginalText().subSequence(builderOffset, offset)[ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_10 $$ return prefixMatches(fragment.toString(), text)[ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_13 $$ IElementType type = builder.rawLookup(i)[ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_9 $$ CharSequence fragment = builder.getOriginalText().subSequence(builderOffset, offset)[ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_5 $$ int length = text.length()[ CD ]
Line_9 $$ CharSequence fragment = builder.getOriginalText().subSequence(builderOffset, offset)-->Line_19 $$ if (prefixMatches(fragment.toString(), text)) [ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_14 $$ int tokenStart = builder.rawTokenTypeStart(i)[ FD ]
Line_9 $$ CharSequence fragment = builder.getOriginalText().subSequence(builderOffset, offset)-->Line_10 $$ return prefixMatches(fragment.toString(), text)[ FD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_3 $$ int builderOffset = builder.getCurrentOffset()[ FD ]
Line_8 $$ if (diff > 0 && diff <= length) -->Line_10 $$ return prefixMatches(fragment.toString(), text)[ CD ]
Line_4 $$ int diff = offset - builderOffset-->Line_16 $$ diff = offset - tokenStart[ FD ]
Line_4 $$ int diff = offset - builderOffset-->Line_11 $$ if (diff < 0) [ FD ]
Line_12 $$ for (int i = -1; ; i--) -->Line_14 $$ int tokenStart = builder.rawTokenTypeStart(i)[ FD ]
Line_15 $$ if (isWhitespaceOrComment(builder, type)) -->Line_16 $$ diff = offset - tokenStart[ CD ]
Line_3 $$ int builderOffset = builder.getCurrentOffset()-->Line_9 $$ CharSequence fragment = builder.getOriginalText().subSequence(builderOffset, offset)[ FD ]
Line_17 $$ if (type != null && tokenStart < offset) -->Line_18 $$ CharSequence fragment = builder.getOriginalText().subSequence(tokenStart, offset)[ CD ]
Line_2 $$ public boolean prefixMatches(@NotNull PsiBuilder builder, @NotNull String text) -->Line_6 $$ if (diff == 0) [ CD ]
Line_12 $$ for (int i = -1; ; i--) -->Line_15 $$ if (isWhitespaceOrComment(builder, type)) [ CD ]
Line_12 $$ for (int i = -1; ; i--) -->Line_14 $$ int tokenStart = builder.rawTokenTypeStart(i)[ CD ]
