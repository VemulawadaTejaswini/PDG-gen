Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_19 $$ ImmutableText newText = myText.insert(offset, ImmutableText.valueOf(s))[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_15 $$ if (marker != null) [ CD ]
Line_19 $$ ImmutableText newText = myText.insert(offset, ImmutableText.valueOf(s))-->Line_20 $$ updateText(newText, offset, null, newText.subtext(offset, offset + s.length()), false, LocalTimeCounter.currentTime(), offset, 0)[ FD ]
Line_15 $$ if (marker != null) -->Line_16 $$ throwGuardedFragment(marker, offset, null, s.toString())[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_14 $$ RangeMarker marker = getRangeGuard(offset, offset)[ FD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_6 $$ throw new IndexOutOfBoundsException("Wrong offset: " + offset + "; documentLength: " + getTextLength() + "; " + s.subSequence(Math.max(0, s.length() - 20), s.length()))[ FD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_5 $$ if (offset > getTextLength()) [ FD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_12 $$ if (s.length() == 0)[ FD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_18 $$ myText = myText.ensureChunked()[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_3 $$ if (offset < 0)[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_9 $$ assertValidSeparators(s)[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_19 $$ ImmutableText newText = myText.insert(offset, ImmutableText.valueOf(s))[ FD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_5 $$ if (offset > getTextLength()) [ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_10 $$ if (!isWritable())[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_3 $$ if (offset < 0)[ FD ]
Line_14 $$ RangeMarker marker = getRangeGuard(offset, offset)-->Line_16 $$ throwGuardedFragment(marker, offset, null, s.toString())[ FD ]
Line_14 $$ RangeMarker marker = getRangeGuard(offset, offset)-->Line_15 $$ if (marker != null) [ FD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_20 $$ updateText(newText, offset, null, newText.subtext(offset, offset + s.length()), false, LocalTimeCounter.currentTime(), offset, 0)[ FD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_20 $$ updateText(newText, offset, null, newText.subtext(offset, offset + s.length()), false, LocalTimeCounter.currentTime(), offset, 0)[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_21 $$ trimToSize()[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_12 $$ if (s.length() == 0)[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_8 $$ assertWriteAccess()[ CD ]
Line_12 $$ if (s.length() == 0)-->Line_13 $$ return[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_14 $$ RangeMarker marker = getRangeGuard(offset, offset)[ CD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_16 $$ throwGuardedFragment(marker, offset, null, s.toString())[ FD ]
Line_2 $$ public void insertString(int offset, @NotNull CharSequence s) -->Line_9 $$ assertValidSeparators(s)[ FD ]
