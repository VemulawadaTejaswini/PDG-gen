Line_4 $$ List<PsiType> res = new ArrayList<PsiType>()-->Line_14 $$ String[] paramNames = GroovyNamesUtil.getMethodArgumentsNames(myProject, res.toArray(PsiType.createArray(res.size())))[ FD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(myProject)[ CD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_16 $$ return createMethodFromText(text.toString(), context)[ FD ]
Line_4 $$ List<PsiType> res = new ArrayList<PsiType>()-->Line_12 $$ res.add(psiType)[ FD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_14 $$ String[] paramNames = GroovyNamesUtil.getMethodArgumentsNames(myProject, res.toArray(PsiType.createArray(res.size())))[ CD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_15 $$ final CharSequence text = generateMethodText(modifier, name, type, paramTypes, paramNames, null, false)[ CD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_3 $$ PsiType psiType[ CD ]
Line_3 $$ PsiType psiType-->Line_12 $$ res.add(psiType)[ FD ]
Line_15 $$ final CharSequence text = generateMethodText(modifier, name, type, paramTypes, paramNames, null, false)-->Line_16 $$ return createMethodFromText(text.toString(), context)[ FD ]
Line_6 $$ for (String paramType : paramTypes) -->Line_8 $$ psiType = factory.createTypeElement(paramType).getType()[ FD ]
Line_10 $$ psiType = TypesUtil.getJavaLangObject(context)-->Line_12 $$ res.add(psiType)[ FD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_4 $$ List<PsiType> res = new ArrayList<PsiType>()[ CD ]
Line_8 $$ psiType = factory.createTypeElement(paramType).getType()-->Line_10 $$ psiType = TypesUtil.getJavaLangObject(context)[ FD ]
Line_3 $$ PsiType psiType-->Line_10 $$ psiType = TypesUtil.getJavaLangObject(context)[ FD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_10 $$ psiType = TypesUtil.getJavaLangObject(context)[ FD ]
Line_8 $$ psiType = factory.createTypeElement(paramType).getType()-->Line_12 $$ res.add(psiType)[ FD ]
Line_14 $$ String[] paramNames = GroovyNamesUtil.getMethodArgumentsNames(myProject, res.toArray(PsiType.createArray(res.size())))-->Line_15 $$ final CharSequence text = generateMethodText(modifier, name, type, paramTypes, paramNames, null, false)[ FD ]
Line_5 $$ final GroovyPsiElementFactory factory = GroovyPsiElementFactory.getInstance(myProject)-->Line_8 $$ psiType = factory.createTypeElement(paramType).getType()[ FD ]
Line_3 $$ PsiType psiType-->Line_8 $$ psiType = factory.createTypeElement(paramType).getType()[ FD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_16 $$ return createMethodFromText(text.toString(), context)[ CD ]
Line_2 $$ public GrMethod createMethodFromText(String modifier, String name, @Nullable String type, String[] paramTypes, PsiElement context) -->Line_15 $$ final CharSequence text = generateMethodText(modifier, name, type, paramTypes, paramNames, null, false)[ FD ]
