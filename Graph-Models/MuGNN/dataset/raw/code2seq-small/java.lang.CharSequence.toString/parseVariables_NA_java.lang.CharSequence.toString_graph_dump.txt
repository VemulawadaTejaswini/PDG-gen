Line_2 $$ public static LinkedHashMap<String, Variable> parseVariables(CharSequence text) -->Line_5 $$ lexer.start(text)[ CD ]
Line_6 $$ while (true) -->Line_7 $$ IElementType tokenType = lexer.getTokenType()[ CD ]
Line_6 $$ while (true) -->Line_8 $$ if (tokenType == null)[ CD ]
Line_4 $$ TemplateTextLexer lexer = new TemplateTextLexer()-->Line_19 $$ lexer.advance()[ FD ]
Line_13 $$ if (tokenType == TemplateTokenType.VARIABLE) -->Line_14 $$ String name = token.substring(1, token.length() - 1)[ CD ]
Line_2 $$ public static LinkedHashMap<String, Variable> parseVariables(CharSequence text) -->Line_5 $$ lexer.start(text)[ FD ]
Line_6 $$ while (true) -->Line_11 $$ int end = lexer.getTokenEnd()[ CD ]
Line_3 $$ LinkedHashMap<String, Variable> variables = new LinkedHashMap<String, Variable>()-->Line_16 $$ variables.put(name, new Variable(name, "", "", true))[ FD ]
Line_2 $$ public static LinkedHashMap<String, Variable> parseVariables(CharSequence text) -->Line_3 $$ LinkedHashMap<String, Variable> variables = new LinkedHashMap<String, Variable>()[ CD ]
Line_6 $$ while (true) -->Line_13 $$ if (tokenType == TemplateTokenType.VARIABLE) [ CD ]
Line_4 $$ TemplateTextLexer lexer = new TemplateTextLexer()-->Line_10 $$ int start = lexer.getTokenStart()[ FD ]
Line_7 $$ IElementType tokenType = lexer.getTokenType()-->Line_13 $$ if (tokenType == TemplateTokenType.VARIABLE) [ FD ]
Line_14 $$ String name = token.substring(1, token.length() - 1)-->Line_16 $$ variables.put(name, new Variable(name, "", "", true))[ FD ]
Line_12 $$ String token = text.subSequence(start, end).toString()-->Line_14 $$ String name = token.substring(1, token.length() - 1)[ FD ]
Line_10 $$ int start = lexer.getTokenStart()-->Line_12 $$ String token = text.subSequence(start, end).toString()[ FD ]
Line_11 $$ int end = lexer.getTokenEnd()-->Line_12 $$ String token = text.subSequence(start, end).toString()[ FD ]
Line_6 $$ while (true) -->Line_10 $$ int start = lexer.getTokenStart()[ CD ]
Line_6 $$ while (true) -->Line_19 $$ lexer.advance()[ CD ]
Line_2 $$ public static LinkedHashMap<String, Variable> parseVariables(CharSequence text) -->Line_4 $$ TemplateTextLexer lexer = new TemplateTextLexer()[ CD ]
Line_3 $$ LinkedHashMap<String, Variable> variables = new LinkedHashMap<String, Variable>()-->Line_15 $$ if (!variables.containsKey(name)) [ FD ]
Line_15 $$ if (!variables.containsKey(name)) -->Line_16 $$ variables.put(name, new Variable(name, "", "", true))[ CD ]
Line_13 $$ if (tokenType == TemplateTokenType.VARIABLE) -->Line_15 $$ if (!variables.containsKey(name)) [ CD ]
Line_2 $$ public static LinkedHashMap<String, Variable> parseVariables(CharSequence text) -->Line_12 $$ String token = text.subSequence(start, end).toString()[ FD ]
Line_2 $$ public static LinkedHashMap<String, Variable> parseVariables(CharSequence text) -->Line_21 $$ return variables[ CD ]
Line_6 $$ while (true) -->Line_12 $$ String token = text.subSequence(start, end).toString()[ CD ]
Line_4 $$ TemplateTextLexer lexer = new TemplateTextLexer()-->Line_7 $$ IElementType tokenType = lexer.getTokenType()[ FD ]
Line_2 $$ public static LinkedHashMap<String, Variable> parseVariables(CharSequence text) -->Line_6 $$ while (true) [ CD ]
Line_14 $$ String name = token.substring(1, token.length() - 1)-->Line_15 $$ if (!variables.containsKey(name)) [ FD ]
Line_4 $$ TemplateTextLexer lexer = new TemplateTextLexer()-->Line_5 $$ lexer.start(text)[ FD ]
Line_4 $$ TemplateTextLexer lexer = new TemplateTextLexer()-->Line_11 $$ int end = lexer.getTokenEnd()[ FD ]
Line_7 $$ IElementType tokenType = lexer.getTokenType()-->Line_8 $$ if (tokenType == null)[ FD ]
