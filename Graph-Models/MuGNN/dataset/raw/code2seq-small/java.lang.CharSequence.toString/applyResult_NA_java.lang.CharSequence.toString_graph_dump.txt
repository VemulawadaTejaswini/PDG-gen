Line_10 $$ applyContent = StringUtil.convertLineSeparators(leftContent.toString())-->Line_14 $$ applyContent = StringUtil.convertLineSeparators(rightContent.toString())[ FD ]
Line_2 $$ public void applyResult(@NotNull MergeResult result) -->Line_20 $$ throw new IllegalArgumentException(result.toString())[ FD ]
Line_2 $$ public void applyResult(@NotNull MergeResult result) -->Line_30 $$ myApplyCallback.consume(result)[ FD ]
Line_10 $$ applyContent = StringUtil.convertLineSeparators(leftContent.toString())-->Line_25 $$ myOutput.getDocument().setText(applyContent)[ FD ]
Line_3 $$ final CharSequence applyContent-->Line_17 $$ applyContent = null[ FD ]
Line_6 $$ applyContent = myOriginalContent-->Line_10 $$ applyContent = StringUtil.convertLineSeparators(leftContent.toString())[ FD ]
Line_3 $$ final CharSequence applyContent-->Line_22 $$ if (applyContent != null) [ FD ]
Line_14 $$ applyContent = StringUtil.convertLineSeparators(rightContent.toString())-->Line_22 $$ if (applyContent != null) [ FD ]
Line_6 $$ applyContent = myOriginalContent-->Line_22 $$ if (applyContent != null) [ FD ]
Line_3 $$ final CharSequence applyContent-->Line_6 $$ applyContent = myOriginalContent[ FD ]
Line_3 $$ final CharSequence applyContent-->Line_10 $$ applyContent = StringUtil.convertLineSeparators(leftContent.toString())[ FD ]
Line_23 $$ DiffUtil.executeWriteCommand(myOutput.getDocument(), myProject, null, new Runnable() -->Line_25 $$ myOutput.getDocument().setText(applyContent)[ CD ]
Line_29 $$ if (myApplyCallback != null)-->Line_30 $$ myApplyCallback.consume(result)[ CD ]
Line_17 $$ applyContent = null-->Line_22 $$ if (applyContent != null) [ FD ]
Line_2 $$ public void applyResult(@NotNull MergeResult result) -->Line_3 $$ final CharSequence applyContent[ CD ]
Line_17 $$ applyContent = null-->Line_25 $$ myOutput.getDocument().setText(applyContent)[ FD ]
Line_10 $$ applyContent = StringUtil.convertLineSeparators(leftContent.toString())-->Line_17 $$ applyContent = null[ FD ]
Line_6 $$ applyContent = myOriginalContent-->Line_14 $$ applyContent = StringUtil.convertLineSeparators(rightContent.toString())[ FD ]
Line_10 $$ applyContent = StringUtil.convertLineSeparators(leftContent.toString())-->Line_22 $$ if (applyContent != null) [ FD ]
Line_22 $$ if (applyContent != null) -->Line_23 $$ DiffUtil.executeWriteCommand(myOutput.getDocument(), myProject, null, new Runnable() [ CD ]
Line_9 $$ CharSequence leftContent = ThreeSide.LEFT.select(getContents()).getDocument().getImmutableCharSequence()-->Line_10 $$ applyContent = StringUtil.convertLineSeparators(leftContent.toString())[ FD ]
Line_14 $$ applyContent = StringUtil.convertLineSeparators(rightContent.toString())-->Line_25 $$ myOutput.getDocument().setText(applyContent)[ FD ]
Line_6 $$ applyContent = myOriginalContent-->Line_17 $$ applyContent = null[ FD ]
Line_3 $$ final CharSequence applyContent-->Line_14 $$ applyContent = StringUtil.convertLineSeparators(rightContent.toString())[ FD ]
Line_3 $$ final CharSequence applyContent-->Line_25 $$ myOutput.getDocument().setText(applyContent)[ FD ]
Line_2 $$ public void applyResult(@NotNull MergeResult result) -->Line_29 $$ if (myApplyCallback != null)[ CD ]
Line_6 $$ applyContent = myOriginalContent-->Line_25 $$ myOutput.getDocument().setText(applyContent)[ FD ]
Line_2 $$ public void applyResult(@NotNull MergeResult result) -->Line_22 $$ if (applyContent != null) [ CD ]
Line_14 $$ applyContent = StringUtil.convertLineSeparators(rightContent.toString())-->Line_17 $$ applyContent = null[ FD ]
Line_13 $$ CharSequence rightContent = ThreeSide.RIGHT.select(getContents()).getDocument().getImmutableCharSequence()-->Line_14 $$ applyContent = StringUtil.convertLineSeparators(rightContent.toString())[ FD ]
