Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_13 $$ FileType fileType = viewProvider.getVirtualFile().getFileType()[ CD ]
Line_26 $$ final FileElement oldFileElement = (FileElement) fileImpl.getNode()-->Line_30 $$ DiffLog diffLog = mergeTrees(fileImpl, oldFileElement, newFileElement, indicator, lastCommittedText)[ FD ]
Line_5 $$ final FileElement holderElement = new DummyHolder(fileImpl.getManager(), null).getTreeElement()-->Line_8 $$ diffLog.appendReplaceFileElement(parent, (FileElement) holderElement.getFirstChildNode())[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_18 $$ if (copy.isEventSystemEnabled()) [ CD ]
Line_23 $$ PsiFileImpl newFile = getFileCopy(fileImpl, copy)-->Line_24 $$ newFile.setOriginalFile(fileImpl)[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_5 $$ final FileElement holderElement = new DummyHolder(fileImpl.getManager(), null).getTreeElement()[ CD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_6 $$ holderElement.rawAddChildren(fileImpl.createContentLeafElement(holderElement.getCharTable().intern(newFileText, 0, newFileText.length())))[ CD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_25 $$ final FileElement newFileElement = (FileElement) newFile.getNode()[ CD ]
Line_25 $$ final FileElement newFileElement = (FileElement) newFile.getNode()-->Line_30 $$ DiffLog diffLog = mergeTrees(fileImpl, oldFileElement, newFileElement, indicator, lastCommittedText)[ FD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_24 $$ newFile.setOriginalFile(fileImpl)[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_31 $$ ((PsiManagerEx) fileImpl.getManager()).getFileManager().setViewProvider(lightFile, null)[ CD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_30 $$ DiffLog diffLog = mergeTrees(fileImpl, oldFileElement, newFileElement, indicator, lastCommittedText)[ FD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_3 $$ if (fileImpl instanceof PsiCodeFragment) [ FD ]
Line_26 $$ final FileElement oldFileElement = (FileElement) fileImpl.getNode()-->Line_27 $$ if (!lastCommittedText.toString().equals(oldFileElement.getText())) [ FD ]
Line_11 $$ FileViewProvider viewProvider = fileImpl.getViewProvider()-->Line_15 $$ final LightVirtualFile lightFile = new LightVirtualFile(fileName, fileType, newFileText, viewProvider.getVirtualFile().getCharset(), fileImpl.getViewProvider().getModificationStamp())[ FD ]
Line_15 $$ final LightVirtualFile lightFile = new LightVirtualFile(fileName, fileType, newFileText, viewProvider.getVirtualFile().getCharset(), fileImpl.getViewProvider().getModificationStamp())-->Line_31 $$ ((PsiManagerEx) fileImpl.getManager()).getFileManager().setViewProvider(lightFile, null)[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_14 $$ String fileName = fileImpl.getName()[ CD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_15 $$ final LightVirtualFile lightFile = new LightVirtualFile(fileName, fileType, newFileText, viewProvider.getVirtualFile().getCharset(), fileImpl.getViewProvider().getModificationStamp())[ FD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_31 $$ ((PsiManagerEx) fileImpl.getManager()).getFileManager().setViewProvider(lightFile, null)[ FD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_11 $$ FileViewProvider viewProvider = fileImpl.getViewProvider()[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_30 $$ DiffLog diffLog = mergeTrees(fileImpl, oldFileElement, newFileElement, indicator, lastCommittedText)[ CD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_15 $$ final LightVirtualFile lightFile = new LightVirtualFile(fileName, fileType, newFileText, viewProvider.getVirtualFile().getCharset(), fileImpl.getViewProvider().getModificationStamp())[ CD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_26 $$ final FileElement oldFileElement = (FileElement) fileImpl.getNode()[ FD ]
Line_11 $$ FileViewProvider viewProvider = fileImpl.getViewProvider()-->Line_17 $$ FileViewProvider copy = viewProvider.createCopy(lightFile)[ FD ]
Line_11 $$ FileViewProvider viewProvider = fileImpl.getViewProvider()-->Line_28 $$ throw new IncorrectOperationException(viewProvider.toString())[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_8 $$ diffLog.appendReplaceFileElement(parent, (FileElement) holderElement.getFirstChildNode())[ CD ]
Line_23 $$ PsiFileImpl newFile = getFileCopy(fileImpl, copy)-->Line_25 $$ final FileElement newFileElement = (FileElement) newFile.getNode()[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_24 $$ newFile.setOriginalFile(fileImpl)[ CD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_23 $$ PsiFileImpl newFile = getFileCopy(fileImpl, copy)[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_4 $$ FileElement parent = fileImpl.getTreeElement()[ CD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_32 $$ return diffLog[ CD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_5 $$ final FileElement holderElement = new DummyHolder(fileImpl.getManager(), null).getTreeElement()[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_9 $$ return diffLog[ CD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_4 $$ FileElement parent = fileImpl.getTreeElement()[ FD ]
Line_11 $$ FileViewProvider viewProvider = fileImpl.getViewProvider()-->Line_13 $$ FileType fileType = viewProvider.getVirtualFile().getFileType()[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_16 $$ lightFile.setOriginalFile(viewProvider.getVirtualFile())[ CD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_26 $$ final FileElement oldFileElement = (FileElement) fileImpl.getNode()[ CD ]
Line_17 $$ FileViewProvider copy = viewProvider.createCopy(lightFile)-->Line_21 $$ copy.getLanguages()[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_7 $$ DiffLog diffLog = new DiffLog()[ CD ]
Line_5 $$ final FileElement holderElement = new DummyHolder(fileImpl.getManager(), null).getTreeElement()-->Line_6 $$ holderElement.rawAddChildren(fileImpl.createContentLeafElement(holderElement.getCharTable().intern(newFileText, 0, newFileText.length())))[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_17 $$ FileViewProvider copy = viewProvider.createCopy(lightFile)[ CD ]
Line_15 $$ final LightVirtualFile lightFile = new LightVirtualFile(fileName, fileType, newFileText, viewProvider.getVirtualFile().getCharset(), fileImpl.getViewProvider().getModificationStamp())-->Line_16 $$ lightFile.setOriginalFile(viewProvider.getVirtualFile())[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_23 $$ PsiFileImpl newFile = getFileCopy(fileImpl, copy)[ CD ]
Line_17 $$ FileViewProvider copy = viewProvider.createCopy(lightFile)-->Line_18 $$ if (copy.isEventSystemEnabled()) [ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_22 $$ SingleRootFileViewProvider.doNotCheckFileSizeLimit(lightFile)[ CD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_27 $$ if (!lastCommittedText.toString().equals(oldFileElement.getText())) [ CD ]
Line_7 $$ DiffLog diffLog = new DiffLog()-->Line_8 $$ diffLog.appendReplaceFileElement(parent, (FileElement) holderElement.getFirstChildNode())[ FD ]
Line_11 $$ FileViewProvider viewProvider = fileImpl.getViewProvider()-->Line_12 $$ viewProvider.getLanguages()[ FD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_27 $$ if (!lastCommittedText.toString().equals(oldFileElement.getText())) [ FD ]
Line_4 $$ FileElement parent = fileImpl.getTreeElement()-->Line_8 $$ diffLog.appendReplaceFileElement(parent, (FileElement) holderElement.getFirstChildNode())[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_12 $$ viewProvider.getLanguages()[ CD ]
Line_15 $$ final LightVirtualFile lightFile = new LightVirtualFile(fileName, fileType, newFileText, viewProvider.getVirtualFile().getCharset(), fileImpl.getViewProvider().getModificationStamp())-->Line_17 $$ FileViewProvider copy = viewProvider.createCopy(lightFile)[ FD ]
Line_11 $$ FileViewProvider viewProvider = fileImpl.getViewProvider()-->Line_16 $$ lightFile.setOriginalFile(viewProvider.getVirtualFile())[ FD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_3 $$ if (fileImpl instanceof PsiCodeFragment) [ CD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_21 $$ copy.getLanguages()[ CD ]
Line_15 $$ final LightVirtualFile lightFile = new LightVirtualFile(fileName, fileType, newFileText, viewProvider.getVirtualFile().getCharset(), fileImpl.getViewProvider().getModificationStamp())-->Line_22 $$ SingleRootFileViewProvider.doNotCheckFileSizeLimit(lightFile)[ FD ]
Line_17 $$ FileViewProvider copy = viewProvider.createCopy(lightFile)-->Line_23 $$ PsiFileImpl newFile = getFileCopy(fileImpl, copy)[ FD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_14 $$ String fileName = fileImpl.getName()[ FD ]
Line_2 $$ private static DiffLog makeFullParse(@NotNull PsiFileImpl fileImpl, @NotNull CharSequence newFileText, @NotNull ProgressIndicator indicator, @NotNull CharSequence lastCommittedText) -->Line_6 $$ holderElement.rawAddChildren(fileImpl.createContentLeafElement(holderElement.getCharTable().intern(newFileText, 0, newFileText.length())))[ FD ]
Line_3 $$ if (fileImpl instanceof PsiCodeFragment) -->Line_11 $$ FileViewProvider viewProvider = fileImpl.getViewProvider()[ CD ]
