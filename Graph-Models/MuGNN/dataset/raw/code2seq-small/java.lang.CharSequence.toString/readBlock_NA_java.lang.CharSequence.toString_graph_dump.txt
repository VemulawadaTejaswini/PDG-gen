Line_12 $$ final Element indentElement = rootElement.getChild("Indent")-->Line_14 $$ result.setIndent(readIndent(indentElement))[ FD ]
Line_20 $$ final Element wrapElement = rootElement.getChild("Wrap")-->Line_21 $$ if (wrapElement != null) [ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_13 $$ if (indentElement != null) [ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_24 $$ final List children = rootElement.getChildren()[ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_3 $$ final int startOffset = Integer.parseInt(rootElement.getAttributeValue("start"))[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_8 $$ final CharSequence text = myModel.getText(textRange)[ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_12 $$ final Element indentElement = rootElement.getChild("Indent")[ CD ]
Line_26 $$ Element element = (Element) aChildren-->Line_30 $$ result.addBlock(readBlock(element))[ FD ]
Line_9 $$ if (text != null) -->Line_10 $$ result.setText(text.toString())[ CD ]
Line_20 $$ final Element wrapElement = rootElement.getChild("Wrap")-->Line_22 $$ result.setWrap(readWrap(wrapElement))[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_4 $$ final int endOffset = Integer.parseInt(rootElement.getAttributeValue("end"))[ FD ]
Line_26 $$ Element element = (Element) aChildren-->Line_27 $$ if (element.getName().equals("Space")) [ FD ]
Line_6 $$ final TestBlock result = new TestBlock(textRange)-->Line_7 $$ result.setIsIncomplete(Boolean.valueOf(rootElement.getAttributeValue("incomplete")).booleanValue())[ FD ]
Line_21 $$ if (wrapElement != null) -->Line_22 $$ result.setWrap(readWrap(wrapElement))[ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_4 $$ final int endOffset = Integer.parseInt(rootElement.getAttributeValue("end"))[ CD ]
Line_6 $$ final TestBlock result = new TestBlock(textRange)-->Line_10 $$ result.setText(text.toString())[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_17 $$ if (alignmentElement != null) [ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_16 $$ final Element alignmentElement = rootElement.getChild("Alignment")[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_20 $$ final Element wrapElement = rootElement.getChild("Wrap")[ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_12 $$ final Element indentElement = rootElement.getChild("Indent")[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_7 $$ result.setIsIncomplete(Boolean.valueOf(rootElement.getAttributeValue("incomplete")).booleanValue())[ FD ]
Line_8 $$ final CharSequence text = myModel.getText(textRange)-->Line_10 $$ result.setText(text.toString())[ FD ]
Line_6 $$ final TestBlock result = new TestBlock(textRange)-->Line_14 $$ result.setIndent(readIndent(indentElement))[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_24 $$ final List children = rootElement.getChildren()[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_3 $$ final int startOffset = Integer.parseInt(rootElement.getAttributeValue("start"))[ CD ]
Line_17 $$ if (alignmentElement != null) -->Line_18 $$ result.setAlignment(readAlignment(alignmentElement))[ CD ]
Line_29 $$ if (element.getName().equals("Block")) -->Line_30 $$ result.addBlock(readBlock(element))[ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_7 $$ result.setIsIncomplete(Boolean.valueOf(rootElement.getAttributeValue("incomplete")).booleanValue())[ CD ]
Line_8 $$ final CharSequence text = myModel.getText(textRange)-->Line_9 $$ if (text != null) [ FD ]
Line_16 $$ final Element alignmentElement = rootElement.getChild("Alignment")-->Line_17 $$ if (alignmentElement != null) [ FD ]
Line_6 $$ final TestBlock result = new TestBlock(textRange)-->Line_30 $$ result.addBlock(readBlock(element))[ FD ]
Line_27 $$ if (element.getName().equals("Space")) -->Line_29 $$ if (element.getName().equals("Block")) [ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_9 $$ if (text != null) [ CD ]
Line_6 $$ final TestBlock result = new TestBlock(textRange)-->Line_28 $$ result.addSpace(readSpace(element))[ FD ]
Line_12 $$ final Element indentElement = rootElement.getChild("Indent")-->Line_13 $$ if (indentElement != null) [ FD ]
Line_6 $$ final TestBlock result = new TestBlock(textRange)-->Line_18 $$ result.setAlignment(readAlignment(alignmentElement))[ FD ]
Line_13 $$ if (indentElement != null) -->Line_14 $$ result.setIndent(readIndent(indentElement))[ CD ]
Line_5 $$ final TextRange textRange = new TextRange(startOffset, endOffset)-->Line_8 $$ final CharSequence text = myModel.getText(textRange)[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_16 $$ final Element alignmentElement = rootElement.getChild("Alignment")[ CD ]
Line_16 $$ final Element alignmentElement = rootElement.getChild("Alignment")-->Line_18 $$ result.setAlignment(readAlignment(alignmentElement))[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_20 $$ final Element wrapElement = rootElement.getChild("Wrap")[ FD ]
Line_27 $$ if (element.getName().equals("Space")) -->Line_28 $$ result.addSpace(readSpace(element))[ CD ]
Line_6 $$ final TestBlock result = new TestBlock(textRange)-->Line_22 $$ result.setWrap(readWrap(wrapElement))[ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_21 $$ if (wrapElement != null) [ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_33 $$ return result[ CD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_6 $$ final TestBlock result = new TestBlock(textRange)[ CD ]
Line_26 $$ Element element = (Element) aChildren-->Line_29 $$ if (element.getName().equals("Block")) [ FD ]
Line_2 $$ private TestBlock readBlock(final Element rootElement) -->Line_5 $$ final TextRange textRange = new TextRange(startOffset, endOffset)[ CD ]
Line_26 $$ Element element = (Element) aChildren-->Line_28 $$ result.addSpace(readSpace(element))[ FD ]
