Line_41 $$ PsiElement outer = PsiTreeUtil.getParentOfType(token, parentClass)-->Line_43 $$ int outer_offset = outer.getTextOffset()[ FD ]
Line_4 $$ int offset = editor.getCaretModel().getOffset()-->Line_48 $$ EditorActionUtil.indentLine(project, editor, document.getLineNumber(offset), editor.getSettings().isUseTabCharacter(project) ? indent * editor.getSettings().getTabSize(project) : indent)[ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_9 $$ int line_start_offset = document.getLineStartOffset(document.getLineNumber(offset))[ FD ]
Line_4 $$ int offset = editor.getCaretModel().getOffset()-->Line_9 $$ int line_start_offset = document.getLineStartOffset(document.getLineNumber(offset))[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_11 $$ Class<? extends PsiElement> parentClass = null[ CD ]
Line_9 $$ int line_start_offset = document.getLineStartOffset(document.getLineNumber(offset))-->Line_10 $$ int nonspace_offset = findBeginning(line_start_offset, text)[ FD ]
Line_11 $$ Class<? extends PsiElement> parentClass = null-->Line_27 $$ parentClass = PyTryExceptStatement.class[ FD ]
Line_27 $$ parentClass = PyTryExceptStatement.class-->Line_41 $$ PsiElement outer = PsiTreeUtil.getParentOfType(token, parentClass)[ FD ]
Line_5 $$ CharSequence text = document.getCharsSequence()-->Line_6 $$ if (offset >= text.length()) [ FD ]
Line_4 $$ int offset = editor.getCaretModel().getOffset()-->Line_7 $$ offset = text.length() - 1[ FD ]
Line_5 $$ CharSequence text = document.getCharsSequence()-->Line_7 $$ offset = text.length() - 1[ FD ]
Line_10 $$ int nonspace_offset = findBeginning(line_start_offset, text)-->Line_17 $$ String piece = text.subSequence(nonspace_offset, last_offset + 1).toString()[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_6 $$ if (offset >= text.length()) [ CD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_5 $$ CharSequence text = document.getCharsSequence()[ FD ]
Line_32 $$ if (piece.startsWith(PyNames.FINALLY) && (finally_len == piece.length() || piece.charAt(finally_len) < 'a' || piece.charAt(finally_len) > 'z')) -->Line_33 $$ parentClass = PyTryExceptStatement.class[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_16 $$ if (local_length > 0) [ CD ]
Line_43 $$ int outer_offset = outer.getTextOffset()-->Line_44 $$ int outer_indent = outer_offset - document.getLineStartOffset(document.getLineNumber(outer_offset))[ FD ]
Line_13 $$ if (last_offset > offset)-->Line_14 $$ last_offset = offset[ CD ]
Line_27 $$ parentClass = PyTryExceptStatement.class-->Line_37 $$ if (parentClass == null)[ FD ]
Line_12 $$ int last_offset = nonspace_offset + PyNames.FINALLY.length()-->Line_14 $$ last_offset = offset[ FD ]
Line_21 $$ parentClass = PyStatementWithElse.class-->Line_41 $$ PsiElement outer = PsiTreeUtil.getParentOfType(token, parentClass)[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_39 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ CD ]
Line_42 $$ if (outer != null) -->Line_48 $$ EditorActionUtil.indentLine(project, editor, document.getLineNumber(offset), editor.getSettings().isUseTabCharacter(project) ? indent * editor.getSettings().getTabSize(project) : indent)[ CD ]
Line_6 $$ if (offset >= text.length()) -->Line_7 $$ offset = text.length() - 1[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_42 $$ if (outer != null) [ CD ]
Line_16 $$ if (local_length > 0) -->Line_18 $$ final int else_len = PyNames.ELSE.length()[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_5 $$ CharSequence text = document.getCharsSequence()[ CD ]
Line_4 $$ int offset = editor.getCaretModel().getOffset()-->Line_13 $$ if (last_offset > offset)[ FD ]
Line_16 $$ if (local_length > 0) -->Line_30 $$ final int finally_len = PyNames.FINALLY.length()[ CD ]
Line_11 $$ Class<? extends PsiElement> parentClass = null-->Line_41 $$ PsiElement outer = PsiTreeUtil.getParentOfType(token, parentClass)[ FD ]
Line_40 $$ PsiElement token = file.findElementAt(offset - 2)-->Line_41 $$ PsiElement outer = PsiTreeUtil.getParentOfType(token, parentClass)[ FD ]
Line_7 $$ offset = text.length() - 1-->Line_48 $$ EditorActionUtil.indentLine(project, editor, document.getLineNumber(offset), editor.getSettings().isUseTabCharacter(project) ? indent * editor.getSettings().getTabSize(project) : indent)[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_40 $$ PsiElement token = file.findElementAt(offset - 2)[ FD ]
Line_30 $$ final int finally_len = PyNames.FINALLY.length()-->Line_32 $$ if (piece.startsWith(PyNames.FINALLY) && (finally_len == piece.length() || piece.charAt(finally_len) < 'a' || piece.charAt(finally_len) > 'z')) [ FD ]
Line_4 $$ int offset = editor.getCaretModel().getOffset()-->Line_14 $$ last_offset = offset[ FD ]
Line_15 $$ int local_length = last_offset - nonspace_offset + 1-->Line_31 $$ if (local_length >= finally_len) [ FD ]
Line_19 $$ if (local_length >= else_len) -->Line_20 $$ if ((piece.startsWith(PyNames.ELSE) || piece.startsWith(PyNames.ELIF)) && (else_len == piece.length() || piece.charAt(else_len) < 'a' || piece.charAt(else_len) > 'z')) [ CD ]
Line_42 $$ if (outer != null) -->Line_47 $$ int indent = outer_indent - current_indent[ CD ]
Line_15 $$ int local_length = last_offset - nonspace_offset + 1-->Line_25 $$ if (local_length >= except_len) [ FD ]
Line_18 $$ final int else_len = PyNames.ELSE.length()-->Line_19 $$ if (local_length >= else_len) [ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_41 $$ PsiElement outer = PsiTreeUtil.getParentOfType(token, parentClass)[ CD ]
Line_16 $$ if (local_length > 0) -->Line_24 $$ final int except_len = PyNames.EXCEPT.length()[ CD ]
Line_16 $$ if (local_length > 0) -->Line_31 $$ if (local_length >= finally_len) [ CD ]
Line_21 $$ parentClass = PyStatementWithElse.class-->Line_37 $$ if (parentClass == null)[ FD ]
Line_16 $$ if (local_length > 0) -->Line_17 $$ String piece = text.subSequence(nonspace_offset, last_offset + 1).toString()[ CD ]
Line_26 $$ if (piece.startsWith(PyNames.EXCEPT) && (except_len == piece.length() || piece.charAt(except_len) < 'a' || piece.charAt(except_len) > 'z')) -->Line_27 $$ parentClass = PyTryExceptStatement.class[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_12 $$ int last_offset = nonspace_offset + PyNames.FINALLY.length()[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_39 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_42 $$ if (outer != null) -->Line_46 $$ int current_indent = nonspace_offset - line_start_offset[ CD ]
Line_7 $$ offset = text.length() - 1-->Line_13 $$ if (last_offset > offset)[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_37 $$ if (parentClass == null)[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_3 $$ final Document document = editor.getDocument()[ FD ]
Line_16 $$ if (local_length > 0) -->Line_25 $$ if (local_length >= except_len) [ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_9 $$ int line_start_offset = document.getLineStartOffset(document.getLineNumber(offset))[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_48 $$ EditorActionUtil.indentLine(project, editor, document.getLineNumber(offset), editor.getSettings().isUseTabCharacter(project) ? indent * editor.getSettings().getTabSize(project) : indent)[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_15 $$ int local_length = last_offset - nonspace_offset + 1[ CD ]
Line_17 $$ String piece = text.subSequence(nonspace_offset, last_offset + 1).toString()-->Line_20 $$ if ((piece.startsWith(PyNames.ELSE) || piece.startsWith(PyNames.ELIF)) && (else_len == piece.length() || piece.charAt(else_len) < 'a' || piece.charAt(else_len) > 'z')) [ FD ]
Line_5 $$ CharSequence text = document.getCharsSequence()-->Line_10 $$ int nonspace_offset = findBeginning(line_start_offset, text)[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_51 $$ return false[ CD ]
Line_42 $$ if (outer != null) -->Line_49 $$ return true[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_13 $$ if (last_offset > offset)[ CD ]
Line_41 $$ PsiElement outer = PsiTreeUtil.getParentOfType(token, parentClass)-->Line_42 $$ if (outer != null) [ FD ]
Line_30 $$ final int finally_len = PyNames.FINALLY.length()-->Line_31 $$ if (local_length >= finally_len) [ FD ]
Line_4 $$ int offset = editor.getCaretModel().getOffset()-->Line_6 $$ if (offset >= text.length()) [ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_39 $$ PsiDocumentManager.getInstance(project).commitDocument(document)[ FD ]
Line_42 $$ if (outer != null) -->Line_44 $$ int outer_indent = outer_offset - document.getLineStartOffset(document.getLineNumber(outer_offset))[ CD ]
Line_17 $$ String piece = text.subSequence(nonspace_offset, last_offset + 1).toString()-->Line_32 $$ if (piece.startsWith(PyNames.FINALLY) && (finally_len == piece.length() || piece.charAt(finally_len) < 'a' || piece.charAt(finally_len) > 'z')) [ FD ]
Line_15 $$ int local_length = last_offset - nonspace_offset + 1-->Line_19 $$ if (local_length >= else_len) [ FD ]
Line_7 $$ offset = text.length() - 1-->Line_9 $$ int line_start_offset = document.getLineStartOffset(document.getLineNumber(offset))[ FD ]
Line_11 $$ Class<? extends PsiElement> parentClass = null-->Line_21 $$ parentClass = PyStatementWithElse.class[ FD ]
Line_5 $$ CharSequence text = document.getCharsSequence()-->Line_17 $$ String piece = text.subSequence(nonspace_offset, last_offset + 1).toString()[ FD ]
Line_24 $$ final int except_len = PyNames.EXCEPT.length()-->Line_26 $$ if (piece.startsWith(PyNames.EXCEPT) && (except_len == piece.length() || piece.charAt(except_len) < 'a' || piece.charAt(except_len) > 'z')) [ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_48 $$ EditorActionUtil.indentLine(project, editor, document.getLineNumber(offset), editor.getSettings().isUseTabCharacter(project) ? indent * editor.getSettings().getTabSize(project) : indent)[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_4 $$ int offset = editor.getCaretModel().getOffset()[ FD ]
Line_21 $$ parentClass = PyStatementWithElse.class-->Line_27 $$ parentClass = PyTryExceptStatement.class[ FD ]
Line_7 $$ offset = text.length() - 1-->Line_14 $$ last_offset = offset[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_40 $$ PsiElement token = file.findElementAt(offset - 2)[ CD ]
Line_31 $$ if (local_length >= finally_len) -->Line_32 $$ if (piece.startsWith(PyNames.FINALLY) && (finally_len == piece.length() || piece.charAt(finally_len) < 'a' || piece.charAt(finally_len) > 'z')) [ CD ]
Line_24 $$ final int except_len = PyNames.EXCEPT.length()-->Line_25 $$ if (local_length >= except_len) [ FD ]
Line_11 $$ Class<? extends PsiElement> parentClass = null-->Line_33 $$ parentClass = PyTryExceptStatement.class[ FD ]
Line_12 $$ int last_offset = nonspace_offset + PyNames.FINALLY.length()-->Line_13 $$ if (last_offset > offset)[ FD ]
Line_33 $$ parentClass = PyTryExceptStatement.class-->Line_37 $$ if (parentClass == null)[ FD ]
Line_20 $$ if ((piece.startsWith(PyNames.ELSE) || piece.startsWith(PyNames.ELIF)) && (else_len == piece.length() || piece.charAt(else_len) < 'a' || piece.charAt(else_len) > 'z')) -->Line_21 $$ parentClass = PyStatementWithElse.class[ CD ]
Line_18 $$ final int else_len = PyNames.ELSE.length()-->Line_20 $$ if ((piece.startsWith(PyNames.ELSE) || piece.startsWith(PyNames.ELIF)) && (else_len == piece.length() || piece.charAt(else_len) < 'a' || piece.charAt(else_len) > 'z')) [ FD ]
Line_3 $$ final Document document = editor.getDocument()-->Line_44 $$ int outer_indent = outer_offset - document.getLineStartOffset(document.getLineNumber(outer_offset))[ FD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_4 $$ int offset = editor.getCaretModel().getOffset()[ CD ]
Line_33 $$ parentClass = PyTryExceptStatement.class-->Line_41 $$ PsiElement outer = PsiTreeUtil.getParentOfType(token, parentClass)[ FD ]
Line_37 $$ if (parentClass == null)-->Line_38 $$ return false[ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_3 $$ final Document document = editor.getDocument()[ CD ]
Line_15 $$ int local_length = last_offset - nonspace_offset + 1-->Line_16 $$ if (local_length > 0) [ FD ]
Line_16 $$ if (local_length > 0) -->Line_19 $$ if (local_length >= else_len) [ CD ]
Line_21 $$ parentClass = PyStatementWithElse.class-->Line_33 $$ parentClass = PyTryExceptStatement.class[ FD ]
Line_25 $$ if (local_length >= except_len) -->Line_26 $$ if (piece.startsWith(PyNames.EXCEPT) && (except_len == piece.length() || piece.charAt(except_len) < 'a' || piece.charAt(except_len) > 'z')) [ CD ]
Line_2 $$ public static boolean unindentAsNeeded(Project project, Editor editor, PsiFile file) -->Line_10 $$ int nonspace_offset = findBeginning(line_start_offset, text)[ CD ]
Line_17 $$ String piece = text.subSequence(nonspace_offset, last_offset + 1).toString()-->Line_26 $$ if (piece.startsWith(PyNames.EXCEPT) && (except_len == piece.length() || piece.charAt(except_len) < 'a' || piece.charAt(except_len) > 'z')) [ FD ]
Line_42 $$ if (outer != null) -->Line_43 $$ int outer_offset = outer.getTextOffset()[ CD ]
Line_27 $$ parentClass = PyTryExceptStatement.class-->Line_33 $$ parentClass = PyTryExceptStatement.class[ FD ]
Line_11 $$ Class<? extends PsiElement> parentClass = null-->Line_37 $$ if (parentClass == null)[ FD ]
