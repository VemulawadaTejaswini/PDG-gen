Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_11 $$ PsiFile file = PsiDocumentManager.getInstance(myProject).getPsiFile(document)[ CD ]
Line_6 $$ if (textEndOffset < 0 || textOffset > document.getTextLength()) -->Line_7 $$ return false[ CD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_17 $$ stringToReplace.set(FindManager.getInstance(myProject).getStringToReplace(foundString.toString(), findModel, textOffset, document.getText()))[ FD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_6 $$ if (textEndOffset < 0 || textOffset > document.getTextLength()) [ FD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_12 $$ FindResult findResult = findManager.findString(document.getCharsSequence(), textOffset, findModel, file != null ? file.getVirtualFile() : null)[ CD ]
Line_10 $$ final CharSequence foundString = document.getCharsSequence().subSequence(textOffset, textEndOffset)-->Line_17 $$ stringToReplace.set(FindManager.getInstance(myProject).getStringToReplace(foundString.toString(), findModel, textOffset, document.getText()))[ FD ]
Line_13 $$ if (!findResult.isStringFound() || !(findResult.getStartOffset() >= textOffset && findResult.getEndOffset() <= textEndOffset)) -->Line_15 $$ return false[ CD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_11 $$ PsiFile file = PsiDocumentManager.getInstance(myProject).getPsiFile(document)[ FD ]
Line_12 $$ FindResult findResult = findManager.findString(document.getCharsSequence(), textOffset, findModel, file != null ? file.getVirtualFile() : null)-->Line_13 $$ if (!findResult.isStringFound() || !(findResult.getStartOffset() >= textOffset && findResult.getEndOffset() <= textEndOffset)) [ FD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_18 $$ return true[ CD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_17 $$ stringToReplace.set(FindManager.getInstance(myProject).getStringToReplace(foundString.toString(), findModel, textOffset, document.getText()))[ CD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_3 $$ if (textOffset < 0 || textOffset >= document.getTextLength()) [ FD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_3 $$ if (textOffset < 0 || textOffset >= document.getTextLength()) [ CD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_6 $$ if (textEndOffset < 0 || textOffset > document.getTextLength()) [ CD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_10 $$ final CharSequence foundString = document.getCharsSequence().subSequence(textOffset, textEndOffset)[ CD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_10 $$ final CharSequence foundString = document.getCharsSequence().subSequence(textOffset, textEndOffset)[ FD ]
Line_9 $$ FindManager findManager = FindManager.getInstance(myProject)-->Line_12 $$ FindResult findResult = findManager.findString(document.getCharsSequence(), textOffset, findModel, file != null ? file.getVirtualFile() : null)[ FD ]
Line_11 $$ PsiFile file = PsiDocumentManager.getInstance(myProject).getPsiFile(document)-->Line_12 $$ FindResult findResult = findManager.findString(document.getCharsSequence(), textOffset, findModel, file != null ? file.getVirtualFile() : null)[ FD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_9 $$ FindManager findManager = FindManager.getInstance(myProject)[ CD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_12 $$ FindResult findResult = findManager.findString(document.getCharsSequence(), textOffset, findModel, file != null ? file.getVirtualFile() : null)[ FD ]
Line_2 $$ private boolean getStringToReplace(int textOffset, int textEndOffset, Document document, FindModel findModel, Ref<String> stringToReplace) throws FindManager.MalformedReplacementStringException -->Line_13 $$ if (!findResult.isStringFound() || !(findResult.getStartOffset() >= textOffset && findResult.getEndOffset() <= textEndOffset)) [ CD ]
Line_3 $$ if (textOffset < 0 || textOffset >= document.getTextLength()) -->Line_4 $$ return false[ CD ]
