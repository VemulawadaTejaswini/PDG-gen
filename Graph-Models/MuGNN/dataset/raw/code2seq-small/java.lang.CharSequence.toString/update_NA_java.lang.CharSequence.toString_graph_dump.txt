Line_4 $$ RangeMarker myRangeMarker = getValue().getRangeMarker()-->Line_6 $$ myRangeMarker.dispose()[ FD ]
Line_39 $$ EditorHighlighter highlighter = myBuilder.getHighlighter(todoItem.getFile(), document)-->Line_40 $$ HighlighterIterator iterator = highlighter.createIterator(lineStartOffset)[ FD ]
Line_5 $$ if (!todoItem.getFile().isValid() || !myRangeMarker.isValid() || myRangeMarker.getStartOffset() == myRangeMarker.getEndOffset()) -->Line_6 $$ myRangeMarker.dispose()[ CD ]
Line_31 $$ int lineEndOffset = document.getLineEndOffset(lineNumber)-->Line_43 $$ int end = Math.min(iterator.getEnd(), lineEndOffset)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_39 $$ EditorHighlighter highlighter = myBuilder.getHighlighter(todoItem.getFile(), document)[ CD ]
Line_13 $$ int startOffset = myRangeMarker.getStartOffset()-->Line_19 $$ int lineNumber = document.getLineNumber(startOffset)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_59 $$ myHighlightedRegions.add(region)[ CD ]
Line_12 $$ CharSequence chars = document.getCharsSequence()-->Line_35 $$ String highlightedText = chars.subSequence(lineStartOffset, Math.min(lineEndOffset, chars.length())).toString()[ FD ]
Line_31 $$ int lineEndOffset = document.getLineEndOffset(lineNumber)-->Line_35 $$ String highlightedText = chars.subSequence(lineStartOffset, Math.min(lineEndOffset, chars.length())).toString()[ FD ]
Line_3 $$ TodoItem todoItem = getValue().getTodoItem()-->Line_57 $$ TextAttributes attributes = todoItem.getPattern().getAttributes().getTextAttributes()[ FD ]
Line_53 $$ HighlightedRegion region = new HighlightedRegion(lineColumnPrefix.length() + start - lineStartOffset, lineColumnPrefix.length() + end - lineStartOffset, attributes)-->Line_54 $$ myHighlightedRegions.add(region)[ FD ]
Line_49 $$ if ((fontType & Font.BOLD) != 0) -->Line_50 $$ attributes = attributes.clone()[ CD ]
Line_40 $$ HighlighterIterator iterator = highlighter.createIterator(lineStartOffset)-->Line_55 $$ iterator.advance()[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_57 $$ TextAttributes attributes = todoItem.getPattern().getAttributes().getTextAttributes()[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_34 $$ String lineColumnPrefix = "(" + (lineNumber + 1) + ", " + (columnNumber + 1) + ") "[ CD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_42 $$ int start = Math.max(iterator.getStart(), lineStartOffset)[ CD ]
Line_40 $$ HighlighterIterator iterator = highlighter.createIterator(lineStartOffset)-->Line_47 $$ TextAttributes attributes = iterator.getTextAttributes()[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_38 $$ myHighlightedRegions.clear()[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_28 $$ while (lineStartOffset < document.getTextLength() && (chars.charAt(lineStartOffset) == '\t' || chars.charAt(lineStartOffset) == ' ')) [ CD ]
Line_47 $$ TextAttributes attributes = iterator.getTextAttributes()-->Line_48 $$ int fontType = attributes.getFontType()[ FD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_39 $$ EditorHighlighter highlighter = myBuilder.getHighlighter(todoItem.getFile(), document)[ FD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_25 $$ LOG.assertTrue(lineStartOffset <= document.getTextLength())[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_19 $$ int lineNumber = document.getLineNumber(startOffset)[ CD ]
Line_3 $$ TodoItem todoItem = getValue().getTodoItem()-->Line_37 $$ Icon newIcon = todoItem.getPattern().getAttributes().getIcon()[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_26 $$ int columnNumber = startOffset - lineStartOffset[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_32 $$ LOG.assertTrue(lineEndOffset >= 0)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_36 $$ String newName = lineColumnPrefix + highlightedText[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_22 $$ int lineStartOffset = document.getLineStartOffset(lineNumber)[ CD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_28 $$ while (lineStartOffset < document.getTextLength() && (chars.charAt(lineStartOffset) == '\t' || chars.charAt(lineStartOffset) == ' ')) [ FD ]
Line_4 $$ RangeMarker myRangeMarker = getValue().getRangeMarker()-->Line_13 $$ int startOffset = myRangeMarker.getStartOffset()[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_10 $$ myHighlightedRegions.clear()[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_14 $$ int endOffset = myRangeMarker.getEndOffset()[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_31 $$ int lineEndOffset = document.getLineEndOffset(lineNumber)[ CD ]
Line_34 $$ String lineColumnPrefix = "(" + (lineNumber + 1) + ", " + (columnNumber + 1) + ") "-->Line_58 $$ HighlightedRegion region = new HighlightedRegion(lineColumnPrefix.length() + startOffset - lineStartOffset, lineColumnPrefix.length() + endOffset - lineStartOffset, attributes)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_24 $$ LOG.assertTrue(lineStartOffset <= startOffset)[ CD ]
Line_40 $$ HighlighterIterator iterator = highlighter.createIterator(lineStartOffset)-->Line_42 $$ int start = Math.max(iterator.getStart(), lineStartOffset)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_37 $$ Icon newIcon = todoItem.getPattern().getAttributes().getIcon()[ CD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_31 $$ int lineEndOffset = document.getLineEndOffset(lineNumber)[ FD ]
Line_49 $$ if ((fontType & Font.BOLD) != 0) -->Line_51 $$ attributes.setFontType(fontType & ~Font.BOLD)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_60 $$ presentation.setPresentableText(newName)[ CD ]
Line_22 $$ int lineStartOffset = document.getLineStartOffset(lineNumber)-->Line_40 $$ HighlighterIterator iterator = highlighter.createIterator(lineStartOffset)[ FD ]
Line_53 $$ HighlightedRegion region = new HighlightedRegion(lineColumnPrefix.length() + start - lineStartOffset, lineColumnPrefix.length() + end - lineStartOffset, attributes)-->Line_59 $$ myHighlightedRegions.add(region)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_18 $$ LOG.assertTrue(endOffset < document.getTextLength() + 1)[ CD ]
Line_47 $$ TextAttributes attributes = iterator.getTextAttributes()-->Line_51 $$ attributes.setFontType(fontType & ~Font.BOLD)[ FD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_21 $$ LOG.assertTrue(lineNumber < document.getLineCount())[ FD ]
Line_36 $$ String newName = lineColumnPrefix + highlightedText-->Line_60 $$ presentation.setPresentableText(newName)[ FD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_22 $$ int lineStartOffset = document.getLineStartOffset(lineNumber)[ FD ]
Line_40 $$ HighlighterIterator iterator = highlighter.createIterator(lineStartOffset)-->Line_41 $$ while (!iterator.atEnd()) [ FD ]
Line_19 $$ int lineNumber = document.getLineNumber(startOffset)-->Line_31 $$ int lineEndOffset = document.getLineEndOffset(lineNumber)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_5 $$ if (!todoItem.getFile().isValid() || !myRangeMarker.isValid() || myRangeMarker.getStartOffset() == myRangeMarker.getEndOffset()) [ CD ]
Line_4 $$ RangeMarker myRangeMarker = getValue().getRangeMarker()-->Line_5 $$ if (!todoItem.getFile().isValid() || !myRangeMarker.isValid() || myRangeMarker.getStartOffset() == myRangeMarker.getEndOffset()) [ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_15 $$ LOG.assertTrue(startOffset > -1)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_27 $$ LOG.assertTrue(columnNumber > -1)[ CD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_43 $$ int end = Math.min(iterator.getEnd(), lineEndOffset)[ CD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_47 $$ TextAttributes attributes = iterator.getTextAttributes()[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_23 $$ LOG.assertTrue(lineStartOffset > -1)[ CD ]
Line_37 $$ Icon newIcon = todoItem.getPattern().getAttributes().getIcon()-->Line_61 $$ presentation.setIcon(newIcon)[ FD ]
Line_40 $$ HighlighterIterator iterator = highlighter.createIterator(lineStartOffset)-->Line_43 $$ int end = Math.min(iterator.getEnd(), lineEndOffset)[ FD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_49 $$ if ((fontType & Font.BOLD) != 0) [ CD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_44 $$ if (lineEndOffset < start || lineEndOffset < end) [ CD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_53 $$ HighlightedRegion region = new HighlightedRegion(lineColumnPrefix.length() + start - lineStartOffset, lineColumnPrefix.length() + end - lineStartOffset, attributes)[ CD ]
Line_5 $$ if (!todoItem.getFile().isValid() || !myRangeMarker.isValid() || myRangeMarker.getStartOffset() == myRangeMarker.getEndOffset()) -->Line_7 $$ setValue(null)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_58 $$ HighlightedRegion region = new HighlightedRegion(lineColumnPrefix.length() + startOffset - lineStartOffset, lineColumnPrefix.length() + endOffset - lineStartOffset, attributes)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_12 $$ CharSequence chars = document.getCharsSequence()[ CD ]
Line_5 $$ if (!todoItem.getFile().isValid() || !myRangeMarker.isValid() || myRangeMarker.getStartOffset() == myRangeMarker.getEndOffset()) -->Line_8 $$ return[ CD ]
Line_47 $$ TextAttributes attributes = iterator.getTextAttributes()-->Line_50 $$ attributes = attributes.clone()[ FD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_54 $$ myHighlightedRegions.add(region)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_61 $$ presentation.setIcon(newIcon)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_3 $$ TodoItem todoItem = getValue().getTodoItem()[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_40 $$ HighlighterIterator iterator = highlighter.createIterator(lineStartOffset)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_25 $$ LOG.assertTrue(lineStartOffset <= document.getTextLength())[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_61 $$ presentation.setIcon(newIcon)[ CD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_33 $$ LOG.assertTrue(lineEndOffset <= document.getTextLength())[ FD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_48 $$ int fontType = attributes.getFontType()[ CD ]
Line_50 $$ attributes = attributes.clone()-->Line_51 $$ attributes.setFontType(fontType & ~Font.BOLD)[ FD ]
Line_41 $$ while (!iterator.atEnd()) -->Line_55 $$ iterator.advance()[ CD ]
Line_19 $$ int lineNumber = document.getLineNumber(startOffset)-->Line_22 $$ int lineStartOffset = document.getLineStartOffset(lineNumber)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_11 $$ Document document = getValue().getDocument()[ CD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_12 $$ CharSequence chars = document.getCharsSequence()[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_41 $$ while (!iterator.atEnd()) [ CD ]
Line_22 $$ int lineStartOffset = document.getLineStartOffset(lineNumber)-->Line_42 $$ int start = Math.max(iterator.getStart(), lineStartOffset)[ FD ]
Line_58 $$ HighlightedRegion region = new HighlightedRegion(lineColumnPrefix.length() + startOffset - lineStartOffset, lineColumnPrefix.length() + endOffset - lineStartOffset, attributes)-->Line_59 $$ myHighlightedRegions.add(region)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_4 $$ RangeMarker myRangeMarker = getValue().getRangeMarker()[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_17 $$ LOG.assertTrue(endOffset > -1)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_35 $$ String highlightedText = chars.subSequence(lineStartOffset, Math.min(lineEndOffset, chars.length())).toString()[ CD ]
Line_28 $$ while (lineStartOffset < document.getTextLength() && (chars.charAt(lineStartOffset) == '\t' || chars.charAt(lineStartOffset) == ' ')) -->Line_29 $$ lineStartOffset++[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_16 $$ LOG.assertTrue(startOffset <= document.getTextLength())[ CD ]
Line_3 $$ TodoItem todoItem = getValue().getTodoItem()-->Line_39 $$ EditorHighlighter highlighter = myBuilder.getHighlighter(todoItem.getFile(), document)[ FD ]
Line_22 $$ int lineStartOffset = document.getLineStartOffset(lineNumber)-->Line_35 $$ String highlightedText = chars.subSequence(lineStartOffset, Math.min(lineEndOffset, chars.length())).toString()[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_13 $$ int startOffset = myRangeMarker.getStartOffset()[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_20 $$ LOG.assertTrue(lineNumber > -1)[ CD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_60 $$ presentation.setPresentableText(newName)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_33 $$ LOG.assertTrue(lineEndOffset <= document.getTextLength())[ CD ]
Line_50 $$ attributes = attributes.clone()-->Line_48 $$ int fontType = attributes.getFontType()[ FD ]
Line_4 $$ RangeMarker myRangeMarker = getValue().getRangeMarker()-->Line_14 $$ int endOffset = myRangeMarker.getEndOffset()[ FD ]
Line_12 $$ CharSequence chars = document.getCharsSequence()-->Line_28 $$ while (lineStartOffset < document.getTextLength() && (chars.charAt(lineStartOffset) == '\t' || chars.charAt(lineStartOffset) == ' ')) [ FD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_18 $$ LOG.assertTrue(endOffset < document.getTextLength() + 1)[ FD ]
Line_2 $$ public void update(PresentationData presentation) -->Line_21 $$ LOG.assertTrue(lineNumber < document.getLineCount())[ CD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_16 $$ LOG.assertTrue(startOffset <= document.getTextLength())[ FD ]
Line_3 $$ TodoItem todoItem = getValue().getTodoItem()-->Line_5 $$ if (!todoItem.getFile().isValid() || !myRangeMarker.isValid() || myRangeMarker.getStartOffset() == myRangeMarker.getEndOffset()) [ FD ]
Line_34 $$ String lineColumnPrefix = "(" + (lineNumber + 1) + ", " + (columnNumber + 1) + ") "-->Line_53 $$ HighlightedRegion region = new HighlightedRegion(lineColumnPrefix.length() + start - lineStartOffset, lineColumnPrefix.length() + end - lineStartOffset, attributes)[ FD ]
Line_11 $$ Document document = getValue().getDocument()-->Line_19 $$ int lineNumber = document.getLineNumber(startOffset)[ FD ]
Line_22 $$ int lineStartOffset = document.getLineStartOffset(lineNumber)-->Line_28 $$ while (lineStartOffset < document.getTextLength() && (chars.charAt(lineStartOffset) == '\t' || chars.charAt(lineStartOffset) == ' ')) [ FD ]
Line_22 $$ int lineStartOffset = document.getLineStartOffset(lineNumber)-->Line_29 $$ lineStartOffset++[ FD ]
