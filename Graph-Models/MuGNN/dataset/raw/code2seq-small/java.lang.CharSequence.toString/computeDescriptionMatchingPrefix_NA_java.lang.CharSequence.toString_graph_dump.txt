Line_2 $$ private static String computeDescriptionMatchingPrefix(Document document, int offset) -->Line_13 $$ return chars.subSequence(start, offset).toString()[ FD ]
Line_2 $$ private static String computeDescriptionMatchingPrefix(Document document, int offset) -->Line_3 $$ CharSequence chars = document.getCharsSequence()[ CD ]
Line_2 $$ private static String computeDescriptionMatchingPrefix(Document document, int offset) -->Line_13 $$ return chars.subSequence(start, offset).toString()[ CD ]
Line_5 $$ while (true) -->Line_8 $$ char c = chars.charAt(start - 1)[ CD ]
Line_4 $$ int start = offset-->Line_13 $$ return chars.subSequence(start, offset).toString()[ FD ]
Line_2 $$ private static String computeDescriptionMatchingPrefix(Document document, int offset) -->Line_5 $$ while (true) [ CD ]
Line_2 $$ private static String computeDescriptionMatchingPrefix(Document document, int offset) -->Line_3 $$ CharSequence chars = document.getCharsSequence()[ FD ]
Line_4 $$ int start = offset-->Line_6 $$ if (start == 0)[ FD ]
Line_5 $$ while (true) -->Line_9 $$ if (!(Character.isJavaIdentifierPart(c)))[ CD ]
Line_5 $$ while (true) -->Line_6 $$ if (start == 0)[ CD ]
Line_8 $$ char c = chars.charAt(start - 1)-->Line_9 $$ if (!(Character.isJavaIdentifierPart(c)))[ FD ]
Line_5 $$ while (true) -->Line_11 $$ start--[ CD ]
Line_3 $$ CharSequence chars = document.getCharsSequence()-->Line_13 $$ return chars.subSequence(start, offset).toString()[ FD ]
Line_3 $$ CharSequence chars = document.getCharsSequence()-->Line_8 $$ char c = chars.charAt(start - 1)[ FD ]
Line_4 $$ int start = offset-->Line_11 $$ start--[ FD ]
Line_2 $$ private static String computeDescriptionMatchingPrefix(Document document, int offset) -->Line_4 $$ int start = offset[ CD ]
