Line_8 $$ final TypeElement typeElement = (TypeElement) element-->Line_14 $$ final String className = typeElement.getQualifiedName().toString()[ FD ]
Line_12 $$ final Set<String> staticImports = importsCollector.getStaticImports()-->Line_13 $$ if (!imports.isEmpty() || !staticImports.isEmpty()) [ FD ]
Line_13 $$ if (!imports.isEmpty() || !staticImports.isEmpty()) -->Line_14 $$ final String className = typeElement.getQualifiedName().toString()[ CD ]
Line_14 $$ final String className = typeElement.getQualifiedName().toString()-->Line_15 $$ myOutputConsumer.registerImports(className, imports, staticImports)[ FD ]
Line_9 $$ final ImportsCollector importsCollector = new ImportsCollector()-->Line_10 $$ importsCollector.scan(myTrees.getPath(typeElement).getParentPath().getLeaf(), myTrees)[ FD ]
Line_11 $$ final Set<String> imports = importsCollector.getImports()-->Line_15 $$ myOutputConsumer.registerImports(className, imports, staticImports)[ FD ]
Line_9 $$ final ImportsCollector importsCollector = new ImportsCollector()-->Line_12 $$ final Set<String> staticImports = importsCollector.getStaticImports()[ FD ]
Line_12 $$ final Set<String> staticImports = importsCollector.getStaticImports()-->Line_15 $$ myOutputConsumer.registerImports(className, imports, staticImports)[ FD ]
Line_9 $$ final ImportsCollector importsCollector = new ImportsCollector()-->Line_11 $$ final Set<String> imports = importsCollector.getImports()[ FD ]
Line_8 $$ final TypeElement typeElement = (TypeElement) element-->Line_10 $$ importsCollector.scan(myTrees.getPath(typeElement).getParentPath().getLeaf(), myTrees)[ FD ]
Line_13 $$ if (!imports.isEmpty() || !staticImports.isEmpty()) -->Line_15 $$ myOutputConsumer.registerImports(className, imports, staticImports)[ CD ]
Line_2 $$ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) -->Line_3 $$ final Set<? extends Element> elements = roundEnv.getRootElements()[ FD ]
Line_2 $$ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) -->Line_3 $$ final Set<? extends Element> elements = roundEnv.getRootElements()[ CD ]
Line_11 $$ final Set<String> imports = importsCollector.getImports()-->Line_13 $$ if (!imports.isEmpty() || !staticImports.isEmpty()) [ FD ]
Line_2 $$ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) -->Line_19 $$ return mySuppressOtherProcessors[ CD ]
