Line_8 $$ int pos = 0-->Line_11 $$ pos = matcher.end()[ FD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_3 $$ if (string == null) [ FD ]
Line_9 $$ while (matcher.find()) -->Line_11 $$ pos = matcher.end()[ CD ]
Line_11 $$ pos = matcher.end()-->Line_13 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, string.length()).toString()))[ FD ]
Line_8 $$ int pos = 0-->Line_10 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, matcher.start()).toString()))[ FD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_10 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, matcher.start()).toString()))[ FD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_6 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_3 $$ if (string == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_9 $$ while (matcher.find()) [ CD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_14 $$ return builder.toString()[ CD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_7 $$ Matcher matcher = WORD_SEPARATOR.matcher(string)[ CD ]
Line_9 $$ while (matcher.find()) -->Line_10 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, matcher.start()).toString()))[ CD ]
Line_11 $$ pos = matcher.end()-->Line_10 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, matcher.start()).toString()))[ FD ]
Line_7 $$ Matcher matcher = WORD_SEPARATOR.matcher(string)-->Line_11 $$ pos = matcher.end()[ FD ]
Line_7 $$ Matcher matcher = WORD_SEPARATOR.matcher(string)-->Line_9 $$ while (matcher.find()) [ FD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_7 $$ Matcher matcher = WORD_SEPARATOR.matcher(string)[ FD ]
Line_8 $$ int pos = 0-->Line_13 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, string.length()).toString()))[ FD ]
Line_7 $$ Matcher matcher = WORD_SEPARATOR.matcher(string)-->Line_10 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, matcher.start()).toString()))[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ return builder.toString()[ FD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_3 $$ if (string == null) [ CD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_13 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, string.length()).toString()))[ FD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_8 $$ int pos = 0[ CD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_13 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, string.length()).toString()))[ CD ]
Line_2 $$ public static String toCamelCase(CharSequence string) -->Line_13 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, string.length()).toString()))[ FD ]
Line_6 $$ StringBuilder builder = new StringBuilder()-->Line_10 $$ builder.append(StringUtils.capitalize(string.subSequence(pos, matcher.start()).toString()))[ FD ]
