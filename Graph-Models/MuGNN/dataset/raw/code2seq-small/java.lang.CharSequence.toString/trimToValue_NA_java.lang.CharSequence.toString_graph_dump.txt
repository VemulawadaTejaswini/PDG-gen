Line_26 $$ while (true) -->Line_27 $$ if (blackList.indexOf(output.charAt(endPos)) != -1) [ CD ]
Line_14 $$ int startPos = 0-->Line_21 $$ startPos++[ FD ]
Line_6 $$ int pos = output.lastIndexOf("  ")-->Line_9 $$ if (pos == -1) [ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_3 $$ if (output == null) [ FD ]
Line_15 $$ int endPos = output.length() - 1-->Line_27 $$ if (blackList.indexOf(output.charAt(endPos)) != -1) [ FD ]
Line_8 $$ pos = Math.max(pos, pos2)-->Line_9 $$ if (pos == -1) [ FD ]
Line_3 $$ if (output == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_13 $$ String blackList = "\r\n \""[ CD ]
Line_14 $$ int startPos = 0-->Line_20 $$ if (blackList.indexOf(output.charAt(startPos)) != -1) [ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_6 $$ int pos = output.lastIndexOf("  ")[ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_7 $$ int pos2 = output.lastIndexOf("\t")[ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_26 $$ while (true) [ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_20 $$ if (blackList.indexOf(output.charAt(startPos)) != -1) [ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_9 $$ if (pos == -1) [ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_33 $$ return output.subSequence(startPos, endPos + 1).toString()[ FD ]
Line_15 $$ int endPos = output.length() - 1-->Line_28 $$ endPos--[ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_12 $$ output.delete(0, pos + 1)[ CD ]
Line_16 $$ while (true) -->Line_20 $$ if (blackList.indexOf(output.charAt(startPos)) != -1) [ CD ]
Line_20 $$ if (blackList.indexOf(output.charAt(startPos)) != -1) -->Line_21 $$ startPos++[ CD ]
Line_17 $$ if (startPos >= endPos) -->Line_18 $$ return null[ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_6 $$ int pos = output.lastIndexOf("  ")[ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_14 $$ int startPos = 0[ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_8 $$ pos = Math.max(pos, pos2)[ CD ]
Line_13 $$ String blackList = "\r\n \""-->Line_20 $$ if (blackList.indexOf(output.charAt(startPos)) != -1) [ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_7 $$ int pos2 = output.lastIndexOf("\t")[ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_27 $$ if (blackList.indexOf(output.charAt(endPos)) != -1) [ FD ]
Line_15 $$ int endPos = output.length() - 1-->Line_17 $$ if (startPos >= endPos) [ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_15 $$ int endPos = output.length() - 1[ CD ]
Line_6 $$ int pos = output.lastIndexOf("  ")-->Line_8 $$ pos = Math.max(pos, pos2)[ FD ]
Line_16 $$ while (true) -->Line_17 $$ if (startPos >= endPos) [ CD ]
Line_13 $$ String blackList = "\r\n \""-->Line_27 $$ if (blackList.indexOf(output.charAt(endPos)) != -1) [ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_33 $$ return output.subSequence(startPos, endPos + 1).toString()[ CD ]
Line_27 $$ if (blackList.indexOf(output.charAt(endPos)) != -1) -->Line_28 $$ endPos--[ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_3 $$ if (output == null) [ CD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_12 $$ output.delete(0, pos + 1)[ FD ]
Line_7 $$ int pos2 = output.lastIndexOf("\t")-->Line_8 $$ pos = Math.max(pos, pos2)[ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_15 $$ int endPos = output.length() - 1[ FD ]
Line_14 $$ int startPos = 0-->Line_17 $$ if (startPos >= endPos) [ FD ]
Line_14 $$ int startPos = 0-->Line_33 $$ return output.subSequence(startPos, endPos + 1).toString()[ FD ]
Line_2 $$ private static String trimToValue(@Nullable StringBuilder output) -->Line_16 $$ while (true) [ CD ]
Line_9 $$ if (pos == -1) -->Line_10 $$ return null[ CD ]
