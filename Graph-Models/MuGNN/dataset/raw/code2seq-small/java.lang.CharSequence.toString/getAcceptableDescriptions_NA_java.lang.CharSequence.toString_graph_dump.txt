Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_15 $$ if (stemmedOption != null && !stemmedOption.startsWith(prefix) && !stemmedOption.startsWith(stemmedPrefix)) [ FD ]
Line_9 $$ Set<OptionDescription> result = null-->Line_19 $$ if (result == null) [ FD ]
Line_5 $$ final String stemmedPrefix = PorterStemmerUtil.stem(prefix)-->Line_15 $$ if (stemmedOption != null && !stemmedOption.startsWith(prefix) && !stemmedOption.startsWith(stemmedPrefix)) [ FD ]
Line_10 $$ for (Map.Entry<CharSequence, long[]> entry : myStorage.entrySet()) -->Line_12 $$ final CharSequence option = entry.getKey()[ FD ]
Line_19 $$ if (result == null) -->Line_20 $$ result = new THashSet<OptionDescription>()[ CD ]
Line_9 $$ Set<OptionDescription> result = null-->Line_24 $$ result.add(desc)[ FD ]
Line_5 $$ final String stemmedPrefix = PorterStemmerUtil.stem(prefix)-->Line_6 $$ if (StringUtil.isEmptyOrSpaces(stemmedPrefix))[ FD ]
Line_12 $$ final CharSequence option = entry.getKey()-->Line_14 $$ final String stemmedOption = PorterStemmerUtil.stem(option.toString())[ FD ]
Line_14 $$ final String stemmedOption = PorterStemmerUtil.stem(option.toString())-->Line_15 $$ if (stemmedOption != null && !stemmedOption.startsWith(prefix) && !stemmedOption.startsWith(stemmedPrefix)) [ FD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_5 $$ final String stemmedPrefix = PorterStemmerUtil.stem(prefix)[ CD ]
Line_3 $$ if (prefix == null)-->Line_4 $$ return null[ CD ]
Line_13 $$ if (!StringUtil.startsWith(option, prefix) && !StringUtil.startsWith(option, stemmedPrefix)) -->Line_14 $$ final String stemmedOption = PorterStemmerUtil.stem(option.toString())[ CD ]
Line_22 $$ for (long description : descriptions) -->Line_23 $$ OptionDescription desc = unpack(description)[ FD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_9 $$ Set<OptionDescription> result = null[ CD ]
Line_20 $$ result = new THashSet<OptionDescription>()-->Line_24 $$ result.add(desc)[ FD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_6 $$ if (StringUtil.isEmptyOrSpaces(stemmedPrefix))[ CD ]
Line_10 $$ for (Map.Entry<CharSequence, long[]> entry : myStorage.entrySet()) -->Line_11 $$ final long[] descriptions = entry.getValue()[ FD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_5 $$ final String stemmedPrefix = PorterStemmerUtil.stem(prefix)[ FD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_13 $$ if (!StringUtil.startsWith(option, prefix) && !StringUtil.startsWith(option, stemmedPrefix)) [ FD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_27 $$ return result[ CD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_3 $$ if (prefix == null)[ CD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_3 $$ if (prefix == null)[ FD ]
Line_2 $$ public synchronized Set<OptionDescription> getAcceptableDescriptions(final String prefix) -->Line_8 $$ loadHugeFilesIfNecessary()[ CD ]
Line_12 $$ final CharSequence option = entry.getKey()-->Line_13 $$ if (!StringUtil.startsWith(option, prefix) && !StringUtil.startsWith(option, stemmedPrefix)) [ FD ]
Line_23 $$ OptionDescription desc = unpack(description)-->Line_24 $$ result.add(desc)[ FD ]
Line_9 $$ Set<OptionDescription> result = null-->Line_20 $$ result = new THashSet<OptionDescription>()[ FD ]
Line_6 $$ if (StringUtil.isEmptyOrSpaces(stemmedPrefix))-->Line_7 $$ return null[ CD ]
Line_5 $$ final String stemmedPrefix = PorterStemmerUtil.stem(prefix)-->Line_13 $$ if (!StringUtil.startsWith(option, prefix) && !StringUtil.startsWith(option, stemmedPrefix)) [ FD ]
Line_13 $$ if (!StringUtil.startsWith(option, prefix) && !StringUtil.startsWith(option, stemmedPrefix)) -->Line_15 $$ if (stemmedOption != null && !stemmedOption.startsWith(prefix) && !stemmedOption.startsWith(stemmedPrefix)) [ CD ]
