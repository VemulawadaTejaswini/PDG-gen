Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_6 $$ VcsTestUtil.editFileInCommand(myProject, subTree.myS1File, "new content")[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_9 $$ sleep(100)[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_5 $$ sleep(100)[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_27 $$ clManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_12 $$ clManager.ensureUpToDate(false)[ CD ]
Line_13 $$ final VcsException updateException = ((ChangeListManagerImpl) clManager).getUpdateException()-->Line_15 $$ updateException.printStackTrace()[ FD ]
Line_21 $$ final Collection<Change> changes = clManager.getDefaultChangeList().getChanges()-->Line_23 $$ worker.doRollback(changes, false, null, null)[ FD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_17 $$ if (!RepeatSvnActionThroughBusy.ourBusyExceptionProcessor.process(updateException)) [ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_24 $$ final CharSequence text = LoadTextUtil.loadText(subTree.myS1File)[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_22 $$ final RollbackWorker worker = new RollbackWorker(myProject)[ CD ]
Line_13 $$ final VcsException updateException = ((ChangeListManagerImpl) clManager).getUpdateException()-->Line_18 $$ Assert.assertNull(updateException == null ? null : updateException.getMessage(), updateException)[ FD ]
Line_24 $$ final CharSequence text = LoadTextUtil.loadText(subTree.myS1File)-->Line_25 $$ Assert.assertEquals(SubTree.ourS1Contents, text.toString())[ FD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_25 $$ Assert.assertEquals(SubTree.ourS1Contents, text.toString())[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_26 $$ VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty()[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_20 $$ DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[] [ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_10 $$ LocalFileSystem.getInstance().refreshAndFindFileByIoFile(new File(subTree.myS1File.getPath()))[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_14 $$ if (updateException != null) [ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_13 $$ final VcsException updateException = ((ChangeListManagerImpl) clManager).getUpdateException()[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_28 $$ DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[] [ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_8 $$ Assert.assertEquals("new content", text1.toString())[ CD ]
Line_13 $$ final VcsException updateException = ((ChangeListManagerImpl) clManager).getUpdateException()-->Line_17 $$ if (!RepeatSvnActionThroughBusy.ourBusyExceptionProcessor.process(updateException)) [ FD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_3 $$ final SubTree subTree = new SubTree(myWorkingCopyDir)[ CD ]
Line_13 $$ final VcsException updateException = ((ChangeListManagerImpl) clManager).getUpdateException()-->Line_14 $$ if (updateException != null) [ FD ]
Line_22 $$ final RollbackWorker worker = new RollbackWorker(myProject)-->Line_23 $$ worker.doRollback(changes, false, null, null)[ FD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_21 $$ final Collection<Change> changes = clManager.getDefaultChangeList().getChanges()[ CD ]
Line_7 $$ final CharSequence text1 = LoadTextUtil.loadText(subTree.myS1File)-->Line_8 $$ Assert.assertEquals("new content", text1.toString())[ FD ]
Line_14 $$ if (updateException != null) -->Line_15 $$ updateException.printStackTrace()[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_7 $$ final CharSequence text1 = LoadTextUtil.loadText(subTree.myS1File)[ CD ]
Line_17 $$ if (!RepeatSvnActionThroughBusy.ourBusyExceptionProcessor.process(updateException)) -->Line_18 $$ Assert.assertNull(updateException == null ? null : updateException.getMessage(), updateException)[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_23 $$ worker.doRollback(changes, false, null, null)[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_11 $$ VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty()[ CD ]
Line_2 $$ public void testModificationAndAfterRevert() throws Exception -->Line_4 $$ checkin()[ CD ]
