Line_19 $$ if (interestedSymbolsNumber < 0) -->Line_20 $$ interestedSymbolsNumber = initial.length()[ CD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_15 $$ myMerger.mergeInPlace(data, initial.length(), Arrays.asList(changes))[ FD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_16 $$ assertEquals(expected, new String(data, 0, outputUsefulLength))[ FD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_14 $$ System.arraycopy(initial.toCharArray(), 0, data, 0, initial.length())[ FD ]
Line_4 $$ int diff = 0-->Line_6 $$ diff += change.getDiff()[ FD ]
Line_3 $$ if (myConfig.inplace()) -->Line_13 $$ char[] data = new char[dataLength][ CD ]
Line_3 $$ if (myConfig.inplace()) -->Line_9 $$ int dataLength = myConfig.dataArrayLength()[ CD ]
Line_9 $$ int dataLength = myConfig.dataArrayLength()-->Line_10 $$ if (dataLength < 0) [ FD ]
Line_13 $$ char[] data = new char[dataLength]-->Line_15 $$ myMerger.mergeInPlace(data, initial.length(), Arrays.asList(changes))[ FD ]
Line_9 $$ int dataLength = myConfig.dataArrayLength()-->Line_11 $$ dataLength = Math.max(outputUsefulLength, initial.length())[ FD ]
Line_18 $$ int interestedSymbolsNumber = myConfig.initialTextLength()-->Line_19 $$ if (interestedSymbolsNumber < 0) [ FD ]
Line_3 $$ if (myConfig.inplace()) -->Line_18 $$ int interestedSymbolsNumber = myConfig.initialTextLength()[ CD ]
Line_3 $$ if (myConfig.inplace()) -->Line_16 $$ assertEquals(expected, new String(data, 0, outputUsefulLength))[ CD ]
Line_3 $$ if (myConfig.inplace()) -->Line_8 $$ int outputUsefulLength = initial.length() + diff[ CD ]
Line_5 $$ for (TextChangeImpl change : changes) -->Line_6 $$ diff += change.getDiff()[ FD ]
Line_22 $$ CharSequence actual = myMerger.mergeToCharSequence(initial.toCharArray(), interestedSymbolsNumber, Arrays.asList(changes))-->Line_23 $$ assertEquals(expected, actual.toString())[ FD ]
Line_18 $$ int interestedSymbolsNumber = myConfig.initialTextLength()-->Line_20 $$ interestedSymbolsNumber = initial.length()[ FD ]
Line_3 $$ if (myConfig.inplace()) -->Line_15 $$ myMerger.mergeInPlace(data, initial.length(), Arrays.asList(changes))[ CD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_22 $$ CharSequence actual = myMerger.mergeToCharSequence(initial.toCharArray(), interestedSymbolsNumber, Arrays.asList(changes))[ FD ]
Line_3 $$ if (myConfig.inplace()) -->Line_23 $$ assertEquals(expected, actual.toString())[ CD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_8 $$ int outputUsefulLength = initial.length() + diff[ FD ]
Line_8 $$ int outputUsefulLength = initial.length() + diff-->Line_11 $$ dataLength = Math.max(outputUsefulLength, initial.length())[ FD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_20 $$ interestedSymbolsNumber = initial.length()[ FD ]
Line_20 $$ interestedSymbolsNumber = initial.length()-->Line_22 $$ CharSequence actual = myMerger.mergeToCharSequence(initial.toCharArray(), interestedSymbolsNumber, Arrays.asList(changes))[ FD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_23 $$ assertEquals(expected, actual.toString())[ FD ]
Line_3 $$ if (myConfig.inplace()) -->Line_22 $$ CharSequence actual = myMerger.mergeToCharSequence(initial.toCharArray(), interestedSymbolsNumber, Arrays.asList(changes))[ CD ]
Line_3 $$ if (myConfig.inplace()) -->Line_14 $$ System.arraycopy(initial.toCharArray(), 0, data, 0, initial.length())[ CD ]
Line_10 $$ if (dataLength < 0) -->Line_11 $$ dataLength = Math.max(outputUsefulLength, initial.length())[ CD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_11 $$ dataLength = Math.max(outputUsefulLength, initial.length())[ FD ]
Line_2 $$ private void doTest(String initial, String expected, TextChangeImpl... changes) -->Line_3 $$ if (myConfig.inplace()) [ CD ]
Line_3 $$ if (myConfig.inplace()) -->Line_19 $$ if (interestedSymbolsNumber < 0) [ CD ]
Line_18 $$ int interestedSymbolsNumber = myConfig.initialTextLength()-->Line_22 $$ CharSequence actual = myMerger.mergeToCharSequence(initial.toCharArray(), interestedSymbolsNumber, Arrays.asList(changes))[ FD ]
Line_3 $$ if (myConfig.inplace()) -->Line_10 $$ if (dataLength < 0) [ CD ]
Line_13 $$ char[] data = new char[dataLength]-->Line_14 $$ System.arraycopy(initial.toCharArray(), 0, data, 0, initial.length())[ FD ]
Line_3 $$ if (myConfig.inplace()) -->Line_4 $$ int diff = 0[ CD ]
