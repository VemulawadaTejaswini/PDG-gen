Line_8 $$ for (int i = start; i < end; i++) -->Line_11 $$ if (c == ' ') [ CD ]
Line_4 $$ if (drawWhitespace) -->Line_6 $$ g.setColor(myScheme.getColor(EditorColors.WHITESPACES_COLOR))[ CD ]
Line_11 $$ if (c == ' ') -->Line_13 $$ if (c == IDEOGRAPHIC_SPACE) [ CD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_9 $$ final char c = data.charAt(i)[ FD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_8 $$ for (int i = start; i < end; i++) [ FD ]
Line_5 $$ Color oldColor = g.getColor()-->Line_19 $$ g.setColor(oldColor)[ FD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_5 $$ Color oldColor = g.getColor()[ FD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_3 $$ g.drawString(data.subSequence(start, end).toString(), x, y)[ FD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_10 $$ final int charWidth = isOracleRetina ? GraphicsUtil.charWidth(c, g.getFont()) : metrics.charWidth(c)[ CD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_7 $$ final FontMetrics metrics = g.getFontMetrics()[ FD ]
Line_11 $$ if (c == ' ') -->Line_12 $$ g.fillRect(x + (charWidth >> 1), y, 1, 1)[ CD ]
Line_4 $$ if (drawWhitespace) -->Line_8 $$ for (int i = start; i < end; i++) [ CD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_9 $$ final char c = data.charAt(i)[ CD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_19 $$ g.setColor(oldColor)[ FD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_9 $$ final char c = data.charAt(i)[ FD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_12 $$ g.fillRect(x + (charWidth >> 1), y, 1, 1)[ FD ]
Line_14 $$ final int charHeight = getCharHeight()-->Line_15 $$ g.drawRect(x + 2, y - charHeight, charWidth - 4, charHeight)[ FD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_6 $$ g.setColor(myScheme.getColor(EditorColors.WHITESPACES_COLOR))[ FD ]
Line_9 $$ final char c = data.charAt(i)-->Line_10 $$ final int charWidth = isOracleRetina ? GraphicsUtil.charWidth(c, g.getFont()) : metrics.charWidth(c)[ FD ]
Line_13 $$ if (c == IDEOGRAPHIC_SPACE) -->Line_15 $$ g.drawRect(x + 2, y - charHeight, charWidth - 4, charHeight)[ CD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_4 $$ if (drawWhitespace) [ CD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_10 $$ final int charWidth = isOracleRetina ? GraphicsUtil.charWidth(c, g.getFont()) : metrics.charWidth(c)[ FD ]
Line_9 $$ final char c = data.charAt(i)-->Line_11 $$ if (c == ' ') [ FD ]
Line_4 $$ if (drawWhitespace) -->Line_5 $$ Color oldColor = g.getColor()[ CD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_17 $$ x += charWidth[ FD ]
Line_4 $$ if (drawWhitespace) -->Line_19 $$ g.setColor(oldColor)[ CD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_3 $$ g.drawString(data.subSequence(start, end).toString(), x, y)[ CD ]
Line_8 $$ for (int i = start; i < end; i++) -->Line_17 $$ x += charWidth[ CD ]
Line_2 $$ private void drawChars(@NotNull Graphics g, CharSequence data, int start, int end, int x, int y, boolean drawWhitespace) -->Line_15 $$ g.drawRect(x + 2, y - charHeight, charWidth - 4, charHeight)[ FD ]
Line_4 $$ if (drawWhitespace) -->Line_7 $$ final FontMetrics metrics = g.getFontMetrics()[ CD ]
Line_9 $$ final char c = data.charAt(i)-->Line_13 $$ if (c == IDEOGRAPHIC_SPACE) [ FD ]
Line_7 $$ final FontMetrics metrics = g.getFontMetrics()-->Line_10 $$ final int charWidth = isOracleRetina ? GraphicsUtil.charWidth(c, g.getFont()) : metrics.charWidth(c)[ FD ]
Line_10 $$ final int charWidth = isOracleRetina ? GraphicsUtil.charWidth(c, g.getFont()) : metrics.charWidth(c)-->Line_17 $$ x += charWidth[ FD ]
Line_13 $$ if (c == IDEOGRAPHIC_SPACE) -->Line_14 $$ final int charHeight = getCharHeight()[ CD ]
