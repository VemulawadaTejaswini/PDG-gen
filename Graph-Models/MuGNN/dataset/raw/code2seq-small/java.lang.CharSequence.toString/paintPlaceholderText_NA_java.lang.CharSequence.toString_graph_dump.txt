Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_10 $$ g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN))[ CD ]
Line_3 $$ CharSequence hintText = myEditor.getPlaceholder()-->Line_5 $$ if (myDocument.getTextLength() > 0 || hintText == null || hintText.length() == 0 || KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() == editorComponent && !myEditor.getShowPlaceholderWhenFocused()) [ FD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_11 $$ g.drawString(hintText.toString(), 0, myView.getAscent())[ FD ]
Line_4 $$ EditorComponentImpl editorComponent = myEditor.getContentComponent()-->Line_8 $$ hintText = SwingUtilities.layoutCompoundLabel(g.getFontMetrics(), hintText.toString(), null, 0, 0, 0, 0, editorComponent.getBounds(), new Rectangle(), new Rectangle(), 0)[ FD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_9 $$ g.setColor(myEditor.getFoldingModel().getPlaceholderAttributes().getForegroundColor())[ FD ]
Line_3 $$ CharSequence hintText = myEditor.getPlaceholder()-->Line_11 $$ g.drawString(hintText.toString(), 0, myView.getAscent())[ FD ]
Line_5 $$ if (myDocument.getTextLength() > 0 || hintText == null || hintText.length() == 0 || KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() == editorComponent && !myEditor.getShowPlaceholderWhenFocused()) -->Line_6 $$ return false[ CD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_5 $$ if (myDocument.getTextLength() > 0 || hintText == null || hintText.length() == 0 || KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() == editorComponent && !myEditor.getShowPlaceholderWhenFocused()) [ CD ]
Line_3 $$ CharSequence hintText = myEditor.getPlaceholder()-->Line_8 $$ hintText = SwingUtilities.layoutCompoundLabel(g.getFontMetrics(), hintText.toString(), null, 0, 0, 0, 0, editorComponent.getBounds(), new Rectangle(), new Rectangle(), 0)[ FD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_8 $$ hintText = SwingUtilities.layoutCompoundLabel(g.getFontMetrics(), hintText.toString(), null, 0, 0, 0, 0, editorComponent.getBounds(), new Rectangle(), new Rectangle(), 0)[ FD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_8 $$ hintText = SwingUtilities.layoutCompoundLabel(g.getFontMetrics(), hintText.toString(), null, 0, 0, 0, 0, editorComponent.getBounds(), new Rectangle(), new Rectangle(), 0)[ CD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_9 $$ g.setColor(myEditor.getFoldingModel().getPlaceholderAttributes().getForegroundColor())[ CD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_10 $$ g.setFont(myEditor.getColorsScheme().getFont(EditorFontType.PLAIN))[ FD ]
Line_8 $$ hintText = SwingUtilities.layoutCompoundLabel(g.getFontMetrics(), hintText.toString(), null, 0, 0, 0, 0, editorComponent.getBounds(), new Rectangle(), new Rectangle(), 0)-->Line_11 $$ g.drawString(hintText.toString(), 0, myView.getAscent())[ FD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_3 $$ CharSequence hintText = myEditor.getPlaceholder()[ CD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_12 $$ return true[ CD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_4 $$ EditorComponentImpl editorComponent = myEditor.getContentComponent()[ CD ]
Line_2 $$ private boolean paintPlaceholderText(Graphics2D g) -->Line_11 $$ g.drawString(hintText.toString(), 0, myView.getAscent())[ CD ]
