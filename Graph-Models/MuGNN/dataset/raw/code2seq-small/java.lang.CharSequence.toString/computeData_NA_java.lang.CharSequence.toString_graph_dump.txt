Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() -->Line_15 $$ return true[ CD ]
Line_2 $$ private static CompletionData computeData(final Editor editor, final CharSequence charsSequence) -->Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() [ FD ]
Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() -->Line_7 $$ if (start > offset) [ FD ]
Line_2 $$ private static CompletionData computeData(final Editor editor, final CharSequence charsSequence) -->Line_3 $$ final int offset = editor.getCaretModel().getOffset()[ FD ]
Line_10 $$ if (end >= offset) -->Line_12 $$ data.startOffset = start[ CD ]
Line_10 $$ if (end >= offset) -->Line_11 $$ data.myPrefix = charsSequence.subSequence(start, offset).toString()[ CD ]
Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() -->Line_7 $$ if (start > offset) [ CD ]
Line_2 $$ private static CompletionData computeData(final Editor editor, final CharSequence charsSequence) -->Line_3 $$ final int offset = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ private static CompletionData computeData(final Editor editor, final CharSequence charsSequence) -->Line_22 $$ return data[ CD ]
Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() -->Line_11 $$ data.myPrefix = charsSequence.subSequence(start, offset).toString()[ FD ]
Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() -->Line_12 $$ data.startOffset = start[ FD ]
Line_2 $$ private static CompletionData computeData(final Editor editor, final CharSequence charsSequence) -->Line_11 $$ data.myPrefix = charsSequence.subSequence(start, offset).toString()[ FD ]
Line_3 $$ final int offset = editor.getCaretModel().getOffset()-->Line_10 $$ if (end >= offset) [ FD ]
Line_2 $$ private static CompletionData computeData(final Editor editor, final CharSequence charsSequence) -->Line_18 $$ if (data.myPrefix == null) [ CD ]
Line_2 $$ private static CompletionData computeData(final Editor editor, final CharSequence charsSequence) -->Line_4 $$ final CompletionData data = new CompletionData()[ CD ]
Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() -->Line_10 $$ if (end >= offset) [ CD ]
Line_3 $$ final int offset = editor.getCaretModel().getOffset()-->Line_7 $$ if (start > offset) [ FD ]
Line_18 $$ if (data.myPrefix == null) -->Line_19 $$ data.myPrefix = ""[ CD ]
Line_3 $$ final int offset = editor.getCaretModel().getOffset()-->Line_11 $$ data.myPrefix = charsSequence.subSequence(start, offset).toString()[ FD ]
Line_7 $$ if (start > offset) -->Line_8 $$ return false[ CD ]
Line_10 $$ if (end >= offset) -->Line_13 $$ return false[ CD ]
Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() -->Line_10 $$ if (end >= offset) [ FD ]
Line_2 $$ private static CompletionData computeData(final Editor editor, final CharSequence charsSequence) -->Line_5 $$ processWords(editor, Math.max(offset - 1, 0), new TokenProcessor() [ CD ]
