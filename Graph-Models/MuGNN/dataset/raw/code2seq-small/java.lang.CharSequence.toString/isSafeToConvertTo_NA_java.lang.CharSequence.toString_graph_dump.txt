Line_2 $$ static Magic8 isSafeToConvertTo(@NotNull VirtualFile virtualFile, @NotNull String text, @NotNull byte[] bytesOnDisk, @NotNull Charset charset) -->Line_4 $$ String lineSeparator = FileDocumentManager.getInstance().getLineSeparator(virtualFile, null)[ FD ]
Line_2 $$ static Magic8 isSafeToConvertTo(@NotNull VirtualFile virtualFile, @NotNull String text, @NotNull byte[] bytesOnDisk, @NotNull Charset charset) -->Line_5 $$ String textToSave = lineSeparator.equals("\n") ? text : StringUtil.convertLineSeparators(text, lineSeparator)[ FD ]
Line_2 $$ static Magic8 isSafeToConvertTo(@NotNull VirtualFile virtualFile, @NotNull String text, @NotNull byte[] bytesOnDisk, @NotNull Charset charset) -->Line_6 $$ Pair<Charset, byte[]> chosen = LoadTextUtil.chooseMostlyHarmlessCharset(virtualFile.getCharset(), charset, textToSave)[ FD ]
Line_8 $$ CharSequence textLoadedBack = LoadTextUtil.getTextByBinaryPresentation(saved, charset)-->Line_9 $$ return !text.equals(textLoadedBack.toString()) ? Magic8.NO_WAY : Arrays.equals(saved, bytesOnDisk) ? Magic8.ABSOLUTELY : Magic8.WELL_IF_YOU_INSIST[ FD ]
Line_7 $$ byte[] saved = chosen.second-->Line_9 $$ return !text.equals(textLoadedBack.toString()) ? Magic8.NO_WAY : Arrays.equals(saved, bytesOnDisk) ? Magic8.ABSOLUTELY : Magic8.WELL_IF_YOU_INSIST[ FD ]
Line_2 $$ static Magic8 isSafeToConvertTo(@NotNull VirtualFile virtualFile, @NotNull String text, @NotNull byte[] bytesOnDisk, @NotNull Charset charset) -->Line_9 $$ return !text.equals(textLoadedBack.toString()) ? Magic8.NO_WAY : Arrays.equals(saved, bytesOnDisk) ? Magic8.ABSOLUTELY : Magic8.WELL_IF_YOU_INSIST[ FD ]
Line_4 $$ String lineSeparator = FileDocumentManager.getInstance().getLineSeparator(virtualFile, null)-->Line_5 $$ String textToSave = lineSeparator.equals("\n") ? text : StringUtil.convertLineSeparators(text, lineSeparator)[ FD ]
Line_7 $$ byte[] saved = chosen.second-->Line_8 $$ CharSequence textLoadedBack = LoadTextUtil.getTextByBinaryPresentation(saved, charset)[ FD ]
Line_2 $$ static Magic8 isSafeToConvertTo(@NotNull VirtualFile virtualFile, @NotNull String text, @NotNull byte[] bytesOnDisk, @NotNull Charset charset) -->Line_8 $$ CharSequence textLoadedBack = LoadTextUtil.getTextByBinaryPresentation(saved, charset)[ FD ]
Line_5 $$ String textToSave = lineSeparator.equals("\n") ? text : StringUtil.convertLineSeparators(text, lineSeparator)-->Line_6 $$ Pair<Charset, byte[]> chosen = LoadTextUtil.chooseMostlyHarmlessCharset(virtualFile.getCharset(), charset, textToSave)[ FD ]
