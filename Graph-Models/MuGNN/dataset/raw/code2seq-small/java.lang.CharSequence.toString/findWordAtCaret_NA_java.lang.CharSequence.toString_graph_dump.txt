Line_12 $$ start = i + 1-->Line_24 $$ start = editor.getSelectionModel().getSelectionStart()[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_44 $$ findManager.setFindNextModel(model)[ CD ]
Line_31 $$ String s = text.subSequence(start, end).toString()-->Line_37 $$ model.setStringToFind(s)[ FD ]
Line_36 $$ FindModel model = new FindModel()-->Line_45 $$ doSearch(project, editor, caretOffset, true, model, true)[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_5 $$ CharSequence text = document.getCharsSequence()[ CD ]
Line_36 $$ FindModel model = new FindModel()-->Line_38 $$ model.setCaseSensitive(true)[ FD ]
Line_9 $$ for (int i = caretOffset - 1; i >= 0; i--) -->Line_16 $$ for (int i = caretOffset; i < document.getTextLength(); i++) [ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_40 $$ EditorSearchSession searchSession = EditorSearchSession.get(editor)[ FD ]
Line_9 $$ for (int i = caretOffset - 1; i >= 0; i--) -->Line_10 $$ char c = text.charAt(i)[ CD ]
Line_7 $$ int end = document.getTextLength()-->Line_27 $$ if (start >= end) [ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_33 $$ findManager.getFindInFileModel().setStringToFind(s)[ CD ]
Line_16 $$ for (int i = caretOffset; i < document.getTextLength(); i++) -->Line_17 $$ char c = text.charAt(i)[ FD ]
Line_27 $$ if (start >= end) -->Line_28 $$ return[ CD ]
Line_5 $$ CharSequence text = document.getCharsSequence()-->Line_10 $$ char c = text.charAt(i)[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_34 $$ findManager.setFindWasPerformed()[ CD ]
Line_6 $$ int start = 0-->Line_31 $$ String s = text.subSequence(start, end).toString()[ FD ]
Line_16 $$ for (int i = caretOffset; i < document.getTextLength(); i++) -->Line_18 $$ if (!Character.isJavaIdentifierPart(c)) [ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_30 $$ FindManager findManager = FindManager.getInstance(project)[ CD ]
Line_6 $$ int start = 0-->Line_24 $$ start = editor.getSelectionModel().getSelectionStart()[ FD ]
Line_9 $$ for (int i = caretOffset - 1; i >= 0; i--) -->Line_10 $$ char c = text.charAt(i)[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_6 $$ int start = 0[ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_32 $$ FindSettings.getInstance().addStringToFind(s)[ CD ]
Line_36 $$ FindModel model = new FindModel()-->Line_39 $$ model.setWholeWordsOnly(!editor.getSelectionModel().hasSelection())[ FD ]
Line_7 $$ int end = document.getTextLength()-->Line_19 $$ end = i[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_8 $$ if (!editor.getSelectionModel().hasSelection()) [ FD ]
Line_16 $$ for (int i = caretOffset; i < document.getTextLength(); i++) -->Line_19 $$ end = i[ FD ]
Line_30 $$ FindManager findManager = FindManager.getInstance(project)-->Line_44 $$ findManager.setFindNextModel(model)[ FD ]
Line_36 $$ FindModel model = new FindModel()-->Line_42 $$ searchSession.setTextInField(model.getStringToFind())[ FD ]
Line_3 $$ int caretOffset = editor.getCaretModel().getOffset()-->Line_45 $$ doSearch(project, editor, caretOffset, true, model, true)[ FD ]
Line_9 $$ for (int i = caretOffset - 1; i >= 0; i--) -->Line_11 $$ if (!Character.isJavaIdentifierPart(c)) [ CD ]
Line_8 $$ if (!editor.getSelectionModel().hasSelection()) -->Line_16 $$ for (int i = caretOffset; i < document.getTextLength(); i++) [ CD ]
Line_41 $$ if (searchSession != null) -->Line_42 $$ searchSession.setTextInField(model.getStringToFind())[ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_27 $$ if (start >= end) [ CD ]
Line_18 $$ if (!Character.isJavaIdentifierPart(c)) -->Line_19 $$ end = i[ CD ]
Line_9 $$ for (int i = caretOffset - 1; i >= 0; i--) -->Line_19 $$ end = i[ FD ]
Line_24 $$ start = editor.getSelectionModel().getSelectionStart()-->Line_31 $$ String s = text.subSequence(start, end).toString()[ FD ]
Line_7 $$ int end = document.getTextLength()-->Line_25 $$ end = editor.getSelectionModel().getSelectionEnd()[ FD ]
Line_9 $$ for (int i = caretOffset - 1; i >= 0; i--) -->Line_12 $$ start = i + 1[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_45 $$ doSearch(project, editor, caretOffset, true, model, true)[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_8 $$ if (!editor.getSelectionModel().hasSelection()) [ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_37 $$ model.setStringToFind(s)[ CD ]
Line_4 $$ Document document = editor.getDocument()-->Line_7 $$ int end = document.getTextLength()[ FD ]
Line_40 $$ EditorSearchSession searchSession = EditorSearchSession.get(editor)-->Line_41 $$ if (searchSession != null) [ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_3 $$ int caretOffset = editor.getCaretModel().getOffset()[ CD ]
Line_5 $$ CharSequence text = document.getCharsSequence()-->Line_17 $$ char c = text.charAt(i)[ FD ]
Line_40 $$ EditorSearchSession searchSession = EditorSearchSession.get(editor)-->Line_42 $$ searchSession.setTextInField(model.getStringToFind())[ FD ]
Line_36 $$ FindModel model = new FindModel()-->Line_44 $$ findManager.setFindNextModel(model)[ FD ]
Line_5 $$ CharSequence text = document.getCharsSequence()-->Line_31 $$ String s = text.subSequence(start, end).toString()[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_25 $$ end = editor.getSelectionModel().getSelectionEnd()[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_41 $$ if (searchSession != null) [ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_3 $$ int caretOffset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_39 $$ model.setWholeWordsOnly(!editor.getSelectionModel().hasSelection())[ CD ]
Line_16 $$ for (int i = caretOffset; i < document.getTextLength(); i++) -->Line_17 $$ char c = text.charAt(i)[ CD ]
Line_4 $$ Document document = editor.getDocument()-->Line_5 $$ CharSequence text = document.getCharsSequence()[ FD ]
Line_8 $$ if (!editor.getSelectionModel().hasSelection()) -->Line_25 $$ end = editor.getSelectionModel().getSelectionEnd()[ CD ]
Line_30 $$ FindManager findManager = FindManager.getInstance(project)-->Line_33 $$ findManager.getFindInFileModel().setStringToFind(s)[ FD ]
Line_19 $$ end = i-->Line_27 $$ if (start >= end) [ FD ]
Line_17 $$ char c = text.charAt(i)-->Line_18 $$ if (!Character.isJavaIdentifierPart(c)) [ FD ]
Line_31 $$ String s = text.subSequence(start, end).toString()-->Line_32 $$ FindSettings.getInstance().addStringToFind(s)[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_4 $$ Document document = editor.getDocument()[ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_7 $$ int end = document.getTextLength()[ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_35 $$ findManager.clearFindingNextUsageInFile()[ CD ]
Line_10 $$ char c = text.charAt(i)-->Line_18 $$ if (!Character.isJavaIdentifierPart(c)) [ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_24 $$ start = editor.getSelectionModel().getSelectionStart()[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_45 $$ doSearch(project, editor, caretOffset, true, model, true)[ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_31 $$ String s = text.subSequence(start, end).toString()[ CD ]
Line_4 $$ Document document = editor.getDocument()-->Line_16 $$ for (int i = caretOffset; i < document.getTextLength(); i++) [ FD ]
Line_6 $$ int start = 0-->Line_12 $$ start = i + 1[ FD ]
Line_24 $$ start = editor.getSelectionModel().getSelectionStart()-->Line_27 $$ if (start >= end) [ FD ]
Line_31 $$ String s = text.subSequence(start, end).toString()-->Line_33 $$ findManager.getFindInFileModel().setStringToFind(s)[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_36 $$ FindModel model = new FindModel()[ CD ]
Line_30 $$ FindManager findManager = FindManager.getInstance(project)-->Line_34 $$ findManager.setFindWasPerformed()[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_40 $$ EditorSearchSession searchSession = EditorSearchSession.get(editor)[ CD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_30 $$ FindManager findManager = FindManager.getInstance(project)[ FD ]
Line_19 $$ end = i-->Line_31 $$ String s = text.subSequence(start, end).toString()[ FD ]
Line_7 $$ int end = document.getTextLength()-->Line_31 $$ String s = text.subSequence(start, end).toString()[ FD ]
Line_8 $$ if (!editor.getSelectionModel().hasSelection()) -->Line_9 $$ for (int i = caretOffset - 1; i >= 0; i--) [ CD ]
Line_30 $$ FindManager findManager = FindManager.getInstance(project)-->Line_35 $$ findManager.clearFindingNextUsageInFile()[ FD ]
Line_8 $$ if (!editor.getSelectionModel().hasSelection()) -->Line_24 $$ start = editor.getSelectionModel().getSelectionStart()[ CD ]
Line_12 $$ start = i + 1-->Line_27 $$ if (start >= end) [ FD ]
Line_36 $$ FindModel model = new FindModel()-->Line_37 $$ model.setStringToFind(s)[ FD ]
Line_19 $$ end = i-->Line_25 $$ end = editor.getSelectionModel().getSelectionEnd()[ FD ]
Line_11 $$ if (!Character.isJavaIdentifierPart(c)) -->Line_12 $$ start = i + 1[ CD ]
Line_6 $$ int start = 0-->Line_27 $$ if (start >= end) [ FD ]
Line_25 $$ end = editor.getSelectionModel().getSelectionEnd()-->Line_31 $$ String s = text.subSequence(start, end).toString()[ FD ]
Line_10 $$ char c = text.charAt(i)-->Line_11 $$ if (!Character.isJavaIdentifierPart(c)) [ FD ]
Line_12 $$ start = i + 1-->Line_31 $$ String s = text.subSequence(start, end).toString()[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_38 $$ model.setCaseSensitive(true)[ CD ]
Line_9 $$ for (int i = caretOffset - 1; i >= 0; i--) -->Line_17 $$ char c = text.charAt(i)[ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_39 $$ model.setWholeWordsOnly(!editor.getSelectionModel().hasSelection())[ FD ]
Line_25 $$ end = editor.getSelectionModel().getSelectionEnd()-->Line_27 $$ if (start >= end) [ FD ]
Line_2 $$ public static void findWordAtCaret(Project project, Editor editor) -->Line_4 $$ Document document = editor.getDocument()[ FD ]
