Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_13 $$ if (TypeUtils.containsAnnotation(superClass, Constants.ENTITY, Constants.MAPPED_SUPERCLASS)) [ FD ]
Line_4 $$ TypeElement superClass = element-->Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)[ FD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_26 $$ return defaultAccessType[ CD ]
Line_16 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)-->Line_10 $$ if (accessTypeInfo != null && accessTypeInfo.getDefaultAccessType() != null) [ FD ]
Line_7 $$ if (superClass != null) -->Line_8 $$ String fqcn = superClass.getQualifiedName().toString()[ CD ]
Line_9 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_10 $$ if (accessTypeInfo != null && accessTypeInfo.getDefaultAccessType() != null) [ FD ]
Line_15 $$ if (defaultAccessType != null) -->Line_18 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(superClass, defaultAccessType, context)[ CD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_21 $$ defaultAccessType = getDefaultAccessForHierarchy(superClass, context)[ FD ]
Line_8 $$ String fqcn = superClass.getQualifiedName().toString()-->Line_17 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_9 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_11 $$ return accessTypeInfo.getDefaultAccessType()[ FD ]
Line_4 $$ TypeElement superClass = element-->Line_21 $$ defaultAccessType = getDefaultAccessForHierarchy(superClass, context)[ FD ]
Line_4 $$ TypeElement superClass = element-->Line_14 $$ defaultAccessType = getAccessTypeInCaseElementIsRoot(superClass, context)[ FD ]
Line_9 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_17 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_9 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)[ FD ]
Line_15 $$ if (defaultAccessType != null) -->Line_17 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ CD ]
Line_4 $$ TypeElement superClass = element-->Line_18 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(superClass, defaultAccessType, context)[ FD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_18 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(superClass, defaultAccessType, context)[ FD ]
Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_7 $$ if (superClass != null) [ FD ]
Line_13 $$ if (TypeUtils.containsAnnotation(superClass, Constants.ENTITY, Constants.MAPPED_SUPERCLASS)) -->Line_14 $$ defaultAccessType = getAccessTypeInCaseElementIsRoot(superClass, context)[ CD ]
Line_15 $$ if (defaultAccessType != null) -->Line_21 $$ defaultAccessType = getDefaultAccessForHierarchy(superClass, context)[ CD ]
Line_7 $$ if (superClass != null) -->Line_13 $$ if (TypeUtils.containsAnnotation(superClass, Constants.ENTITY, Constants.MAPPED_SUPERCLASS)) [ CD ]
Line_7 $$ if (superClass != null) -->Line_10 $$ if (accessTypeInfo != null && accessTypeInfo.getDefaultAccessType() != null) [ CD ]
Line_14 $$ defaultAccessType = getAccessTypeInCaseElementIsRoot(superClass, context)-->Line_21 $$ defaultAccessType = getDefaultAccessForHierarchy(superClass, context)[ FD ]
Line_5 $$ do -->Line_7 $$ if (superClass != null) [ CD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_5 $$ do [ CD ]
Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_14 $$ defaultAccessType = getAccessTypeInCaseElementIsRoot(superClass, context)[ FD ]
Line_4 $$ TypeElement superClass = element-->Line_7 $$ if (superClass != null) [ FD ]
Line_3 $$ AccessType defaultAccessType = null-->Line_21 $$ defaultAccessType = getDefaultAccessForHierarchy(superClass, context)[ FD ]
Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_18 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(superClass, defaultAccessType, context)[ FD ]
Line_14 $$ defaultAccessType = getAccessTypeInCaseElementIsRoot(superClass, context)-->Line_15 $$ if (defaultAccessType != null) [ FD ]
Line_21 $$ defaultAccessType = getDefaultAccessForHierarchy(superClass, context)-->Line_18 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(superClass, defaultAccessType, context)[ FD ]
Line_14 $$ defaultAccessType = getAccessTypeInCaseElementIsRoot(superClass, context)-->Line_18 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(superClass, defaultAccessType, context)[ FD ]
Line_15 $$ if (defaultAccessType != null) -->Line_16 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ CD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_3 $$ AccessType defaultAccessType = null[ CD ]
Line_3 $$ AccessType defaultAccessType = null-->Line_18 $$ setDefaultAccessTypeForMappedSuperclassesInHierarchy(superClass, defaultAccessType, context)[ FD ]
Line_5 $$ do -->Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)[ CD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_17 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_10 $$ if (accessTypeInfo != null && accessTypeInfo.getDefaultAccessType() != null) -->Line_11 $$ return accessTypeInfo.getDefaultAccessType()[ CD ]
Line_8 $$ String fqcn = superClass.getQualifiedName().toString()-->Line_9 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)[ FD ]
Line_4 $$ TypeElement superClass = element-->Line_13 $$ if (TypeUtils.containsAnnotation(superClass, Constants.ENTITY, Constants.MAPPED_SUPERCLASS)) [ FD ]
Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_8 $$ String fqcn = superClass.getQualifiedName().toString()[ FD ]
Line_13 $$ if (TypeUtils.containsAnnotation(superClass, Constants.ENTITY, Constants.MAPPED_SUPERCLASS)) -->Line_15 $$ if (defaultAccessType != null) [ CD ]
Line_9 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)-->Line_16 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)[ FD ]
Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_21 $$ defaultAccessType = getDefaultAccessForHierarchy(superClass, context)[ FD ]
Line_4 $$ TypeElement superClass = element-->Line_8 $$ String fqcn = superClass.getQualifiedName().toString()[ FD ]
Line_16 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)-->Line_11 $$ return accessTypeInfo.getDefaultAccessType()[ FD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_4 $$ TypeElement superClass = element[ CD ]
Line_16 $$ accessTypeInfo = new AccessTypeInformation(fqcn, null, defaultAccessType)-->Line_17 $$ context.addAccessTypeInformation(fqcn, accessTypeInfo)[ FD ]
Line_2 $$ private static AccessType getDefaultAccessForHierarchy(TypeElement element, Context context) -->Line_14 $$ defaultAccessType = getAccessTypeInCaseElementIsRoot(superClass, context)[ FD ]
Line_4 $$ TypeElement superClass = element-->Line_5 $$ do [ FD ]
Line_3 $$ AccessType defaultAccessType = null-->Line_15 $$ if (defaultAccessType != null) [ FD ]
Line_7 $$ if (superClass != null) -->Line_9 $$ AccessTypeInformation accessTypeInfo = context.getAccessTypeInfo(fqcn)[ CD ]
Line_6 $$ superClass = TypeUtils.getSuperclassTypeElement(superClass)-->Line_5 $$ do [ FD ]
Line_21 $$ defaultAccessType = getDefaultAccessForHierarchy(superClass, context)-->Line_15 $$ if (defaultAccessType != null) [ FD ]
Line_3 $$ AccessType defaultAccessType = null-->Line_14 $$ defaultAccessType = getAccessTypeInCaseElementIsRoot(superClass, context)[ FD ]
