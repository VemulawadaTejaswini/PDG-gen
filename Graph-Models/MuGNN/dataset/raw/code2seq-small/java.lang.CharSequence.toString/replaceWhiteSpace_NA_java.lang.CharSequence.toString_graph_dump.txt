Line_10 $$ final TextRange currentBlockRange = block.getTextRange().shiftRight(shift)-->Line_15 $$ final TextRange newBlockRange = model.shiftIndentInsideRange(block.getNode(), currentBlockRange, shiftInside)[ FD ]
Line_8 $$ shift += newWhiteSpaceRange.getLength() - textRange.getLength()-->Line_16 $$ shift += newBlockRange.getLength() - block.getLength()[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_13 $$ final int shiftInside = calcShift(oldBlockIndent, whiteSpaceIndent, options)[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_9 $$ if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) [ CD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_8 $$ shift += newWhiteSpaceRange.getLength() - textRange.getLength()[ CD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_6 $$ final String newWhiteSpace = _newWhiteSpace.toString()[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_5 $$ final TextRange wsRange = textRange.shiftRight(shift)[ FD ]
Line_14 $$ if (shiftInside != 0 || !oldBlockIndent.equals(whiteSpaceIndent)) -->Line_15 $$ final TextRange newBlockRange = model.shiftIndentInsideRange(block.getNode(), currentBlockRange, shiftInside)[ CD ]
Line_9 $$ if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) -->Line_10 $$ final TextRange currentBlockRange = block.getTextRange().shiftRight(shift)[ CD ]
Line_11 $$ IndentInside oldBlockIndent = whiteSpace.getInitialLastLineIndent()-->Line_14 $$ if (shiftInside != 0 || !oldBlockIndent.equals(whiteSpaceIndent)) [ FD ]
Line_11 $$ IndentInside oldBlockIndent = whiteSpace.getInitialLastLineIndent()-->Line_13 $$ final int shiftInside = calcShift(oldBlockIndent, whiteSpaceIndent, options)[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_19 $$ return shift[ CD ]
Line_7 $$ TextRange newWhiteSpaceRange = model instanceof FormattingModelEx ? ((FormattingModelEx) model).replaceWhiteSpace(wsRange, block.getNode(), newWhiteSpace) : model.replaceWhiteSpace(wsRange, newWhiteSpace)-->Line_8 $$ shift += newWhiteSpaceRange.getLength() - textRange.getLength()[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_3 $$ final WhiteSpace whiteSpace = block.getWhiteSpace()[ CD ]
Line_12 $$ IndentInside whiteSpaceIndent = IndentInside.createIndentOn(IndentInside.getLastLine(newWhiteSpace))-->Line_14 $$ if (shiftInside != 0 || !oldBlockIndent.equals(whiteSpaceIndent)) [ FD ]
Line_12 $$ IndentInside whiteSpaceIndent = IndentInside.createIndentOn(IndentInside.getLastLine(newWhiteSpace))-->Line_13 $$ final int shiftInside = calcShift(oldBlockIndent, whiteSpaceIndent, options)[ FD ]
Line_15 $$ final TextRange newBlockRange = model.shiftIndentInsideRange(block.getNode(), currentBlockRange, shiftInside)-->Line_16 $$ shift += newBlockRange.getLength() - block.getLength()[ FD ]
Line_9 $$ if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) -->Line_14 $$ if (shiftInside != 0 || !oldBlockIndent.equals(whiteSpaceIndent)) [ CD ]
Line_8 $$ shift += newWhiteSpaceRange.getLength() - textRange.getLength()-->Line_10 $$ final TextRange currentBlockRange = block.getTextRange().shiftRight(shift)[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_3 $$ final WhiteSpace whiteSpace = block.getWhiteSpace()[ FD ]
Line_6 $$ final String newWhiteSpace = _newWhiteSpace.toString()-->Line_7 $$ TextRange newWhiteSpaceRange = model instanceof FormattingModelEx ? ((FormattingModelEx) model).replaceWhiteSpace(wsRange, block.getNode(), newWhiteSpace) : model.replaceWhiteSpace(wsRange, newWhiteSpace)[ FD ]
Line_14 $$ if (shiftInside != 0 || !oldBlockIndent.equals(whiteSpaceIndent)) -->Line_16 $$ shift += newBlockRange.getLength() - block.getLength()[ CD ]
Line_4 $$ final TextRange textRange = whiteSpace.getTextRange()-->Line_5 $$ final TextRange wsRange = textRange.shiftRight(shift)[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_9 $$ if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) [ FD ]
Line_3 $$ final WhiteSpace whiteSpace = block.getWhiteSpace()-->Line_4 $$ final TextRange textRange = whiteSpace.getTextRange()[ FD ]
Line_9 $$ if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) -->Line_12 $$ IndentInside whiteSpaceIndent = IndentInside.createIndentOn(IndentInside.getLastLine(newWhiteSpace))[ CD ]
Line_4 $$ final TextRange textRange = whiteSpace.getTextRange()-->Line_8 $$ shift += newWhiteSpaceRange.getLength() - textRange.getLength()[ FD ]
Line_13 $$ final int shiftInside = calcShift(oldBlockIndent, whiteSpaceIndent, options)-->Line_15 $$ final TextRange newBlockRange = model.shiftIndentInsideRange(block.getNode(), currentBlockRange, shiftInside)[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_10 $$ final TextRange currentBlockRange = block.getTextRange().shiftRight(shift)[ FD ]
Line_9 $$ if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) -->Line_13 $$ final int shiftInside = calcShift(oldBlockIndent, whiteSpaceIndent, options)[ CD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_4 $$ final TextRange textRange = whiteSpace.getTextRange()[ CD ]
Line_3 $$ final WhiteSpace whiteSpace = block.getWhiteSpace()-->Line_11 $$ IndentInside oldBlockIndent = whiteSpace.getInitialLastLineIndent()[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_15 $$ final TextRange newBlockRange = model.shiftIndentInsideRange(block.getNode(), currentBlockRange, shiftInside)[ FD ]
Line_6 $$ final String newWhiteSpace = _newWhiteSpace.toString()-->Line_12 $$ IndentInside whiteSpaceIndent = IndentInside.createIndentOn(IndentInside.getLastLine(newWhiteSpace))[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_5 $$ final TextRange wsRange = textRange.shiftRight(shift)[ CD ]
Line_9 $$ if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) -->Line_11 $$ IndentInside oldBlockIndent = whiteSpace.getInitialLastLineIndent()[ CD ]
Line_3 $$ final WhiteSpace whiteSpace = block.getWhiteSpace()-->Line_9 $$ if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) [ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_6 $$ final String newWhiteSpace = _newWhiteSpace.toString()[ CD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_8 $$ shift += newWhiteSpaceRange.getLength() - textRange.getLength()[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_16 $$ shift += newBlockRange.getLength() - block.getLength()[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_7 $$ TextRange newWhiteSpaceRange = model instanceof FormattingModelEx ? ((FormattingModelEx) model).replaceWhiteSpace(wsRange, block.getNode(), newWhiteSpace) : model.replaceWhiteSpace(wsRange, newWhiteSpace)[ FD ]
Line_5 $$ final TextRange wsRange = textRange.shiftRight(shift)-->Line_7 $$ TextRange newWhiteSpaceRange = model instanceof FormattingModelEx ? ((FormattingModelEx) model).replaceWhiteSpace(wsRange, block.getNode(), newWhiteSpace) : model.replaceWhiteSpace(wsRange, newWhiteSpace)[ FD ]
Line_2 $$ private static int replaceWhiteSpace(final FormattingModel model, @NotNull final LeafBlockWrapper block, int shift, final CharSequence _newWhiteSpace, final CommonCodeStyleSettings.IndentOptions options) -->Line_7 $$ TextRange newWhiteSpaceRange = model instanceof FormattingModelEx ? ((FormattingModelEx) model).replaceWhiteSpace(wsRange, block.getNode(), newWhiteSpace) : model.replaceWhiteSpace(wsRange, newWhiteSpace)[ CD ]
