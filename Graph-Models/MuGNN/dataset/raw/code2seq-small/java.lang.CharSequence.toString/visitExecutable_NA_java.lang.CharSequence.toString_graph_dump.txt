Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_10 $$ TypeMirror returnType = t.getReturnType()[ FD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_7 $$ if (!StringUtil.isProperty(string, TypeUtils.toTypeString(t.getReturnType()))) [ FD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_10 $$ TypeMirror returnType = t.getReturnType()[ CD ]
Line_6 $$ String string = element.getSimpleName().toString()-->Line_7 $$ if (!StringUtil.isProperty(string, TypeUtils.toTypeString(t.getReturnType()))) [ FD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_11 $$ return returnType.accept(this, element)[ CD ]
Line_10 $$ TypeMirror returnType = t.getReturnType()-->Line_11 $$ return returnType.accept(this, element)[ FD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_6 $$ String string = element.getSimpleName().toString()[ CD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_3 $$ if (!element.getKind().equals(ElementKind.METHOD)) [ FD ]
Line_3 $$ if (!element.getKind().equals(ElementKind.METHOD)) -->Line_4 $$ return Boolean.FALSE[ CD ]
Line_7 $$ if (!StringUtil.isProperty(string, TypeUtils.toTypeString(t.getReturnType()))) -->Line_8 $$ return Boolean.FALSE[ CD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_11 $$ return returnType.accept(this, element)[ FD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_3 $$ if (!element.getKind().equals(ElementKind.METHOD)) [ CD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_7 $$ if (!StringUtil.isProperty(string, TypeUtils.toTypeString(t.getReturnType()))) [ CD ]
Line_2 $$ public Boolean visitExecutable(ExecutableType t, Element element) -->Line_6 $$ String string = element.getSimpleName().toString()[ FD ]
