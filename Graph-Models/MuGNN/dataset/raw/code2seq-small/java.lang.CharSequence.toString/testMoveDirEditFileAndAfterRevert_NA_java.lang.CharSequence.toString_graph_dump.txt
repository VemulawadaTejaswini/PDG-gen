Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_9 $$ final CharSequence text1 = LoadTextUtil.loadText(subTree.myS1File)[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_14 $$ DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[] [ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_8 $$ VcsTestUtil.editFileInCommand(myProject, subTree.myS1File, "new")[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_25 $$ DuringChangeListManagerUpdateTestScheme.checkFilesAreInList(new VirtualFile[] [ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_10 $$ Assert.assertEquals("new", text1.toString())[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_5 $$ moveFileInCommand(subTree.mySourceDir, subTree.myTargetDir)[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_16 $$ final RollbackWorker worker = new RollbackWorker(myProject)[ CD ]
Line_16 $$ final RollbackWorker worker = new RollbackWorker(myProject)-->Line_17 $$ worker.doRollback(changes, false, null, null)[ FD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_12 $$ VcsDirtyScopeManager.getInstance(myProject).markEverythingDirty()[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_24 $$ clManager.ensureUpToDate(false)[ CD ]
Line_9 $$ final CharSequence text1 = LoadTextUtil.loadText(subTree.myS1File)-->Line_10 $$ Assert.assertEquals("new", text1.toString())[ FD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_23 $$ Assert.assertEquals(SubTree.ourS1Contents, text.toString())[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_15 $$ final Collection<Change> changes = clManager.getDefaultChangeList().getChanges()[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_6 $$ Assert.assertTrue(subTree.mySourceDir.getPath().endsWith("/target/source"))[ CD ]
Line_15 $$ final Collection<Change> changes = clManager.getDefaultChangeList().getChanges()-->Line_17 $$ worker.doRollback(changes, false, null, null)[ FD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_20 $$ subTree.myS1File = assertVF(subTree.mySourceDir, "s1.txt")[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_21 $$ subTree.myS2File = assertVF(subTree.mySourceDir, "s2.txt")[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_18 $$ subTree.mySourceDir = assertVF(subTree.myRootDir, "source")[ CD ]
Line_22 $$ final CharSequence text = LoadTextUtil.loadText(subTree.myS1File)-->Line_23 $$ Assert.assertEquals(SubTree.ourS1Contents, text.toString())[ FD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_4 $$ checkin()[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_22 $$ final CharSequence text = LoadTextUtil.loadText(subTree.myS1File)[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_7 $$ assertVF(subTree.myTargetDir, "source")[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_13 $$ clManager.ensureUpToDate(false)[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_3 $$ final SubTree subTree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_17 $$ worker.doRollback(changes, false, null, null)[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_11 $$ sleep(300)[ CD ]
Line_2 $$ public void testMoveDirEditFileAndAfterRevert() throws Throwable -->Line_19 $$ Assert.assertTrue(subTree.mySourceDir.getPath().endsWith("/root/source"))[ CD ]
