Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_3 $$ CharSequence chars = document.getCharsSequence()[ CD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_5 $$ Indent minIndent = null[ CD ]
Line_8 $$ int textStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")-->Line_10 $$ textStart = document.getTextLength()[ FD ]
Line_17 $$ Indent indent = codeStyleManager.getIndent(space, fileType)-->Line_18 $$ minIndent = minIndent != null ? indent.min(minIndent) : indent[ FD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_23 $$ return minIndent[ CD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_3 $$ CharSequence chars = document.getCharsSequence()[ FD ]
Line_7 $$ int lineStart = document.getLineStartOffset(line)-->Line_16 $$ String space = chars.subSequence(lineStart, textStart).toString()[ FD ]
Line_10 $$ textStart = document.getTextLength()-->Line_12 $$ char c = chars.charAt(textStart)[ FD ]
Line_10 $$ textStart = document.getTextLength()-->Line_16 $$ String space = chars.subSequence(lineStart, textStart).toString()[ FD ]
Line_6 $$ for (int line = line1; line <= line2; line++) -->Line_18 $$ minIndent = minIndent != null ? indent.min(minIndent) : indent[ CD ]
Line_10 $$ textStart = document.getTextLength()-->Line_9 $$ if (textStart >= document.getTextLength()) [ FD ]
Line_6 $$ for (int line = line1; line <= line2; line++) -->Line_16 $$ String space = chars.subSequence(lineStart, textStart).toString()[ CD ]
Line_9 $$ if (textStart >= document.getTextLength()) -->Line_12 $$ char c = chars.charAt(textStart)[ CD ]
Line_4 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)-->Line_17 $$ Indent indent = codeStyleManager.getIndent(space, fileType)[ FD ]
Line_5 $$ Indent minIndent = null-->Line_18 $$ minIndent = minIndent != null ? indent.min(minIndent) : indent[ FD ]
Line_6 $$ for (int line = line1; line <= line2; line++) -->Line_8 $$ int textStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")[ CD ]
Line_6 $$ for (int line = line1; line <= line2; line++) -->Line_7 $$ int lineStart = document.getLineStartOffset(line)[ CD ]
Line_20 $$ if (minIndent == null && line1 == line2 && line1 < document.getLineCount() - 1) -->Line_21 $$ return getMinLineIndent(project, document, line1 + 1, line1 + 1, fileType)[ CD ]
Line_8 $$ int textStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")-->Line_9 $$ if (textStart >= document.getTextLength()) [ FD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_4 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ CD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_7 $$ int lineStart = document.getLineStartOffset(line)[ FD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_9 $$ if (textStart >= document.getTextLength()) [ FD ]
Line_8 $$ int textStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")-->Line_12 $$ char c = chars.charAt(textStart)[ FD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_6 $$ for (int line = line1; line <= line2; line++) [ FD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_4 $$ CodeStyleManager codeStyleManager = CodeStyleManager.getInstance(project)[ FD ]
Line_7 $$ int lineStart = document.getLineStartOffset(line)-->Line_8 $$ int textStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")[ FD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_6 $$ for (int line = line1; line <= line2; line++) [ CD ]
Line_6 $$ for (int line = line1; line <= line2; line++) -->Line_17 $$ Indent indent = codeStyleManager.getIndent(space, fileType)[ CD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_20 $$ if (minIndent == null && line1 == line2 && line1 < document.getLineCount() - 1) [ CD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_21 $$ return getMinLineIndent(project, document, line1 + 1, line1 + 1, fileType)[ FD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_17 $$ Indent indent = codeStyleManager.getIndent(space, fileType)[ FD ]
Line_6 $$ for (int line = line1; line <= line2; line++) -->Line_9 $$ if (textStart >= document.getTextLength()) [ CD ]
Line_3 $$ CharSequence chars = document.getCharsSequence()-->Line_8 $$ int textStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")[ FD ]
Line_9 $$ if (textStart >= document.getTextLength()) -->Line_13 $$ if (c == '\n' || c == '\r')[ CD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_10 $$ textStart = document.getTextLength()[ FD ]
Line_9 $$ if (textStart >= document.getTextLength()) -->Line_10 $$ textStart = document.getTextLength()[ CD ]
Line_16 $$ String space = chars.subSequence(lineStart, textStart).toString()-->Line_17 $$ Indent indent = codeStyleManager.getIndent(space, fileType)[ FD ]
Line_6 $$ for (int line = line1; line <= line2; line++) -->Line_7 $$ int lineStart = document.getLineStartOffset(line)[ FD ]
Line_2 $$ public static Indent getMinLineIndent(Project project, Document document, int line1, int line2, FileType fileType) -->Line_20 $$ if (minIndent == null && line1 == line2 && line1 < document.getLineCount() - 1) [ FD ]
Line_3 $$ CharSequence chars = document.getCharsSequence()-->Line_12 $$ char c = chars.charAt(textStart)[ FD ]
Line_3 $$ CharSequence chars = document.getCharsSequence()-->Line_16 $$ String space = chars.subSequence(lineStart, textStart).toString()[ FD ]
Line_8 $$ int textStart = CharArrayUtil.shiftForward(chars, lineStart, " \t")-->Line_16 $$ String space = chars.subSequence(lineStart, textStart).toString()[ FD ]
