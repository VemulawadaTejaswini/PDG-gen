Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_4 $$ if (dstOffset == srcEnd)[ CD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_3 $$ assertBounds(srcStart, srcEnd)[ CD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_9 $$ insertString(dstOffset, replacement)[ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_15 $$ deleteString(srcStart + shift, srcEnd + shift)[ CD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_14 $$ fireMoveText(srcStart + shift, srcEnd + shift, dstOffset)[ CD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_4 $$ if (dstOffset == srcEnd)[ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_14 $$ fireMoveText(srcStart + shift, srcEnd + shift, dstOffset)[ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_9 $$ insertString(dstOffset, replacement)[ CD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_10 $$ int shift = 0[ CD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_12 $$ shift = srcEnd - srcStart[ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_11 $$ if (dstOffset < srcStart) [ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_7 $$ assert !srcRange.containsOffset(dstOffset) : "Can't perform text move from range [" + srcStart + "; " + srcEnd + ") to offset " + dstOffset[ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_8 $$ String replacement = getCharsSequence().subSequence(srcStart, srcEnd).toString()[ CD ]
Line_11 $$ if (dstOffset < srcStart) -->Line_12 $$ shift = srcEnd - srcStart[ CD ]
Line_6 $$ ProperTextRange srcRange = new ProperTextRange(srcStart, srcEnd)-->Line_7 $$ assert !srcRange.containsOffset(dstOffset) : "Can't perform text move from range [" + srcStart + "; " + srcEnd + ") to offset " + dstOffset[ FD ]
Line_8 $$ String replacement = getCharsSequence().subSequence(srcStart, srcEnd).toString()-->Line_9 $$ insertString(dstOffset, replacement)[ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_3 $$ assertBounds(srcStart, srcEnd)[ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_11 $$ if (dstOffset < srcStart) [ CD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_8 $$ String replacement = getCharsSequence().subSequence(srcStart, srcEnd).toString()[ FD ]
Line_10 $$ int shift = 0-->Line_12 $$ shift = srcEnd - srcStart[ FD ]
Line_2 $$ public void moveText(int srcStart, int srcEnd, int dstOffset) -->Line_6 $$ ProperTextRange srcRange = new ProperTextRange(srcStart, srcEnd)[ CD ]
Line_4 $$ if (dstOffset == srcEnd)-->Line_5 $$ return[ CD ]
