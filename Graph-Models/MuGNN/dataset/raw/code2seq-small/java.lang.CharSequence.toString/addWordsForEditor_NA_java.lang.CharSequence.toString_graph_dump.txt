Line_9 $$ caretOffsets = getCaretOffsets(caretModel)-->Line_12 $$ caretOffsets = new int[1][ FD ]
Line_14 $$ TokenProcessor processor = new TokenProcessor() -->Line_34 $$ processWords(editor, 0, processor)[ FD ]
Line_6 $$ if (takeCaretsIntoAccount) -->Line_7 $$ CaretModel caretModel = editor.getCaretModel()[ CD ]
Line_14 $$ TokenProcessor processor = new TokenProcessor() -->Line_31 $$ return true[ CD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_3 $$ final CharSequence chars = editor.getDocument().getImmutableCharSequence()[ CD ]
Line_3 $$ final CharSequence chars = editor.getDocument().getImmutableCharSequence()-->Line_21 $$ final String word = chars.subSequence(start, end).toString()[ FD ]
Line_22 $$ if (matcher.isStartMatch(word)) -->Line_23 $$ CompletionVariant v = new CompletionVariant(editor, word, start)[ CD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_14 $$ TokenProcessor processor = new TokenProcessor() [ CD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_27 $$ words.add(v)[ FD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_5 $$ final int[] caretOffsets[ CD ]
Line_6 $$ if (takeCaretsIntoAccount) -->Line_8 $$ primaryCaretOffset = caretModel.getOffset()[ CD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_20 $$ if (end - start > matcher.getPrefix().length()) [ FD ]
Line_23 $$ CompletionVariant v = new CompletionVariant(editor, word, start)-->Line_27 $$ words.add(v)[ FD ]
Line_14 $$ TokenProcessor processor = new TokenProcessor() -->Line_24 $$ if (end > primaryCaretOffset) [ FD ]
Line_17 $$ if (start <= caretOffset && end >= caretOffset)-->Line_18 $$ return true[ CD ]
Line_24 $$ if (end > primaryCaretOffset) -->Line_25 $$ afterWords.add(v)[ CD ]
Line_24 $$ if (end > primaryCaretOffset) -->Line_27 $$ words.add(v)[ CD ]
Line_20 $$ if (end - start > matcher.getPrefix().length()) -->Line_22 $$ if (matcher.isStartMatch(word)) [ CD ]
Line_4 $$ final int primaryCaretOffset-->Line_8 $$ primaryCaretOffset = caretModel.getOffset()[ FD ]
Line_6 $$ if (takeCaretsIntoAccount) -->Line_9 $$ caretOffsets = getCaretOffsets(caretModel)[ CD ]
Line_8 $$ primaryCaretOffset = caretModel.getOffset()-->Line_24 $$ if (end > primaryCaretOffset) [ FD ]
Line_20 $$ if (end - start > matcher.getPrefix().length()) -->Line_21 $$ final String word = chars.subSequence(start, end).toString()[ CD ]
Line_5 $$ final int[] caretOffsets-->Line_12 $$ caretOffsets = new int[1][ FD ]
Line_7 $$ CaretModel caretModel = editor.getCaretModel()-->Line_9 $$ caretOffsets = getCaretOffsets(caretModel)[ FD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_34 $$ processWords(editor, 0, processor)[ FD ]
Line_22 $$ if (matcher.isStartMatch(word)) -->Line_24 $$ if (end > primaryCaretOffset) [ CD ]
Line_23 $$ CompletionVariant v = new CompletionVariant(editor, word, start)-->Line_25 $$ afterWords.add(v)[ FD ]
Line_7 $$ CaretModel caretModel = editor.getCaretModel()-->Line_8 $$ primaryCaretOffset = caretModel.getOffset()[ FD ]
Line_6 $$ if (takeCaretsIntoAccount) -->Line_11 $$ primaryCaretOffset = 0[ CD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_22 $$ if (matcher.isStartMatch(word)) [ FD ]
Line_14 $$ TokenProcessor processor = new TokenProcessor() -->Line_21 $$ final String word = chars.subSequence(start, end).toString()[ FD ]
Line_5 $$ final int[] caretOffsets-->Line_9 $$ caretOffsets = getCaretOffsets(caretModel)[ FD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_7 $$ CaretModel caretModel = editor.getCaretModel()[ FD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_6 $$ if (takeCaretsIntoAccount) [ CD ]
Line_21 $$ final String word = chars.subSequence(start, end).toString()-->Line_22 $$ if (matcher.isStartMatch(word)) [ FD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_4 $$ final int primaryCaretOffset[ CD ]
Line_11 $$ primaryCaretOffset = 0-->Line_24 $$ if (end > primaryCaretOffset) [ FD ]
Line_4 $$ final int primaryCaretOffset-->Line_11 $$ primaryCaretOffset = 0[ FD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_3 $$ final CharSequence chars = editor.getDocument().getImmutableCharSequence()[ FD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_25 $$ afterWords.add(v)[ FD ]
Line_4 $$ final int primaryCaretOffset-->Line_24 $$ if (end > primaryCaretOffset) [ FD ]
Line_8 $$ primaryCaretOffset = caretModel.getOffset()-->Line_11 $$ primaryCaretOffset = 0[ FD ]
Line_2 $$ private static void addWordsForEditor(final EditorEx editor, final CamelHumpMatcher matcher, final List<CompletionVariant> words, final List<CompletionVariant> afterWords, boolean takeCaretsIntoAccount) -->Line_34 $$ processWords(editor, 0, processor)[ CD ]
Line_14 $$ TokenProcessor processor = new TokenProcessor() -->Line_20 $$ if (end - start > matcher.getPrefix().length()) [ CD ]
Line_6 $$ if (takeCaretsIntoAccount) -->Line_12 $$ caretOffsets = new int[1][ CD ]
