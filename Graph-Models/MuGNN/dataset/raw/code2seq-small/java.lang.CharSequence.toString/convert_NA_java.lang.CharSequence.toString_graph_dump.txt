Line_2 $$ public void convert(CharSequence notation, NotationConvertResult<? super T> result) throws TypeConversionException -->Line_3 $$ final String enumString = notation.toString()[ FD ]
Line_5 $$ T match = CollectionUtils.findFirst(enumConstants, new Spec<T>() -->Line_7 $$ return enumValue.name().equalsIgnoreCase(enumString)[ CD ]
Line_2 $$ public void convert(CharSequence notation, NotationConvertResult<? super T> result) throws TypeConversionException -->Line_13 $$ result.converted(match)[ FD ]
Line_3 $$ final String enumString = notation.toString()-->Line_11 $$ throw new TypeConversionException(String.format("Cannot convert string value '%s' to an enum value of type '%s' (valid case insensitive values: %s)", enumString, type.getName(), CollectionUtils.toStringList(Arrays.asList(type.getEnumConstants()))))[ FD ]
Line_5 $$ T match = CollectionUtils.findFirst(enumConstants, new Spec<T>() -->Line_13 $$ result.converted(match)[ FD ]
Line_2 $$ public void convert(CharSequence notation, NotationConvertResult<? super T> result) throws TypeConversionException -->Line_3 $$ final String enumString = notation.toString()[ CD ]
Line_3 $$ final String enumString = notation.toString()-->Line_7 $$ return enumValue.name().equalsIgnoreCase(enumString)[ FD ]
Line_2 $$ public void convert(CharSequence notation, NotationConvertResult<? super T> result) throws TypeConversionException -->Line_13 $$ result.converted(match)[ CD ]
Line_2 $$ public void convert(CharSequence notation, NotationConvertResult<? super T> result) throws TypeConversionException -->Line_4 $$ List<? extends T> enumConstants = Arrays.asList(type.getEnumConstants())[ CD ]
Line_4 $$ List<? extends T> enumConstants = Arrays.asList(type.getEnumConstants())-->Line_5 $$ T match = CollectionUtils.findFirst(enumConstants, new Spec<T>() [ FD ]
Line_2 $$ public void convert(CharSequence notation, NotationConvertResult<? super T> result) throws TypeConversionException -->Line_5 $$ T match = CollectionUtils.findFirst(enumConstants, new Spec<T>() [ CD ]
Line_5 $$ T match = CollectionUtils.findFirst(enumConstants, new Spec<T>() -->Line_7 $$ return enumValue.name().equalsIgnoreCase(enumString)[ FD ]
Line_2 $$ public void convert(CharSequence notation, NotationConvertResult<? super T> result) throws TypeConversionException -->Line_10 $$ if (match == null) [ CD ]
Line_5 $$ T match = CollectionUtils.findFirst(enumConstants, new Spec<T>() -->Line_10 $$ if (match == null) [ FD ]
