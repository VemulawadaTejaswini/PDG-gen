Line_9 $$ IElementType tt = child.getTokenType()-->Line_19 $$ if (tt == XmlTokenType.XML_CHAR_ENTITY_REF) [ FD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_5 $$ final int count = structure.getChildren(node, childrenRef)[ CD ]
Line_19 $$ if (tt == XmlTokenType.XML_CHAR_ENTITY_REF) -->Line_20 $$ builder.textElement(new String(new char[] [ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_3 $$ node = structure.prepareForGetChildren(node)[ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_25 $$ structure.disposeChildren(children, count)[ CD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_12 $$ final CharSequence physical = getTokenText(child)[ CD ]
Line_15 $$ if (tt == XmlTokenType.XML_CDATA_START || tt == XmlTokenType.XML_CDATA_END) -->Line_16 $$ builder.textElement("", physical, start, end)[ CD ]
Line_15 $$ if (tt == XmlTokenType.XML_CDATA_START || tt == XmlTokenType.XML_CDATA_END) -->Line_17 $$ if (tt == XmlElementType.XML_CDATA) [ CD ]
Line_10 $$ final int start = child.getStartOffset()-->Line_20 $$ builder.textElement(new String(new char[] [ FD ]
Line_17 $$ if (tt == XmlElementType.XML_CDATA) -->Line_18 $$ processTextNode(structure, child, builder)[ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_22 $$ builder.textElement(physical, physical, start, end)[ FD ]
Line_11 $$ final int end = child.getEndOffset()-->Line_16 $$ builder.textElement("", physical, start, end)[ FD ]
Line_10 $$ final int start = child.getStartOffset()-->Line_16 $$ builder.textElement("", physical, start, end)[ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_8 $$ LighterASTNode child = children[i][ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_20 $$ builder.textElement(new String(new char[] [ FD ]
Line_9 $$ IElementType tt = child.getTokenType()-->Line_13 $$ if (XmlTokenType.COMMENTS.contains(tt))[ FD ]
Line_8 $$ LighterASTNode child = children[i]-->Line_11 $$ final int end = child.getEndOffset()[ FD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_5 $$ final int count = structure.getChildren(node, childrenRef)[ FD ]
Line_8 $$ LighterASTNode child = children[i]-->Line_12 $$ final CharSequence physical = getTokenText(child)[ FD ]
Line_17 $$ if (tt == XmlElementType.XML_CDATA) -->Line_19 $$ if (tt == XmlTokenType.XML_CHAR_ENTITY_REF) [ CD ]
Line_6 $$ LighterASTNode[] children = childrenRef.get()-->Line_25 $$ structure.disposeChildren(children, count)[ FD ]
Line_5 $$ final int count = structure.getChildren(node, childrenRef)-->Line_25 $$ structure.disposeChildren(children, count)[ FD ]
Line_11 $$ final int end = child.getEndOffset()-->Line_22 $$ builder.textElement(physical, physical, start, end)[ FD ]
Line_8 $$ LighterASTNode child = children[i]-->Line_18 $$ processTextNode(structure, child, builder)[ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_11 $$ final int end = child.getEndOffset()[ CD ]
Line_8 $$ LighterASTNode child = children[i]-->Line_9 $$ IElementType tt = child.getTokenType()[ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_9 $$ IElementType tt = child.getTokenType()[ CD ]
Line_8 $$ LighterASTNode child = children[i]-->Line_10 $$ final int start = child.getStartOffset()[ FD ]
Line_12 $$ final CharSequence physical = getTokenText(child)-->Line_16 $$ builder.textElement("", physical, start, end)[ FD ]
Line_10 $$ final int start = child.getStartOffset()-->Line_22 $$ builder.textElement(physical, physical, start, end)[ FD ]
Line_4 $$ final Ref<LighterASTNode[]> childrenRef = Ref.create(null)-->Line_5 $$ final int count = structure.getChildren(node, childrenRef)[ FD ]
Line_12 $$ final CharSequence physical = getTokenText(child)-->Line_22 $$ builder.textElement(physical, physical, start, end)[ FD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_16 $$ builder.textElement("", physical, start, end)[ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_13 $$ if (XmlTokenType.COMMENTS.contains(tt))[ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_6 $$ LighterASTNode[] children = childrenRef.get()[ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_7 $$ for (int i = 0; i < count; i++) [ CD ]
Line_9 $$ IElementType tt = child.getTokenType()-->Line_17 $$ if (tt == XmlElementType.XML_CDATA) [ FD ]
Line_5 $$ final int count = structure.getChildren(node, childrenRef)-->Line_7 $$ for (int i = 0; i < count; i++) [ FD ]
Line_11 $$ final int end = child.getEndOffset()-->Line_20 $$ builder.textElement(new String(new char[] [ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_10 $$ final int start = child.getStartOffset()[ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_25 $$ structure.disposeChildren(children, count)[ FD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_3 $$ node = structure.prepareForGetChildren(node)[ FD ]
Line_4 $$ final Ref<LighterASTNode[]> childrenRef = Ref.create(null)-->Line_6 $$ LighterASTNode[] children = childrenRef.get()[ FD ]
Line_7 $$ for (int i = 0; i < count; i++) -->Line_15 $$ if (tt == XmlTokenType.XML_CDATA_START || tt == XmlTokenType.XML_CDATA_END) [ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_4 $$ final Ref<LighterASTNode[]> childrenRef = Ref.create(null)[ CD ]
Line_2 $$ private void processTextNode(FlyweightCapableTreeStructure<LighterASTNode> structure, LighterASTNode node, XmlBuilder builder) -->Line_18 $$ processTextNode(structure, child, builder)[ FD ]
Line_19 $$ if (tt == XmlTokenType.XML_CHAR_ENTITY_REF) -->Line_22 $$ builder.textElement(physical, physical, start, end)[ CD ]
Line_3 $$ node = structure.prepareForGetChildren(node)-->Line_5 $$ final int count = structure.getChildren(node, childrenRef)[ FD ]
Line_12 $$ final CharSequence physical = getTokenText(child)-->Line_20 $$ builder.textElement(new String(new char[] [ FD ]
