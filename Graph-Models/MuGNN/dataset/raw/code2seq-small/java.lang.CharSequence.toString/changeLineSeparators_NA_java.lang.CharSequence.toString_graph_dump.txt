Line_8 $$ String newText = StringUtil.convertLineSeparators(currentText.toString(), newSeparator)-->Line_10 $$ write(project, file, requestor, newText, -1)[ FD ]
Line_3 $$ CharSequence currentText = getTextByBinaryPresentation(file.contentsToByteArray(), file, true, false)-->Line_8 $$ String newText = StringUtil.convertLineSeparators(currentText.toString(), newSeparator)[ FD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_5 $$ if (newSeparator.equals(currentSeparator)) [ FD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_8 $$ String newText = StringUtil.convertLineSeparators(currentText.toString(), newSeparator)[ FD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_3 $$ CharSequence currentText = getTextByBinaryPresentation(file.contentsToByteArray(), file, true, false)[ FD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_9 $$ file.setDetectedLineSeparator(newSeparator)[ CD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_4 $$ String currentSeparator = detectLineSeparator(file, false)[ CD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_8 $$ String newText = StringUtil.convertLineSeparators(currentText.toString(), newSeparator)[ CD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_9 $$ file.setDetectedLineSeparator(newSeparator)[ FD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_10 $$ write(project, file, requestor, newText, -1)[ FD ]
Line_4 $$ String currentSeparator = detectLineSeparator(file, false)-->Line_5 $$ if (newSeparator.equals(currentSeparator)) [ FD ]
Line_5 $$ if (newSeparator.equals(currentSeparator)) -->Line_6 $$ return[ CD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_10 $$ write(project, file, requestor, newText, -1)[ CD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_3 $$ CharSequence currentText = getTextByBinaryPresentation(file.contentsToByteArray(), file, true, false)[ CD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_5 $$ if (newSeparator.equals(currentSeparator)) [ CD ]
Line_2 $$ public static void changeLineSeparators(@Nullable Project project, @NotNull VirtualFile file, @NotNull String newSeparator, @NotNull Object requestor) throws IOException -->Line_4 $$ String currentSeparator = detectLineSeparator(file, false)[ FD ]
