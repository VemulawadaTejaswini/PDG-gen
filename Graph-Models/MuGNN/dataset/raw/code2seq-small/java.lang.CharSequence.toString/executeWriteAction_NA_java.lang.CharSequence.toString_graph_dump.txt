Line_13 $$ strToInsert += beforeCaret.toString()-->Line_15 $$ strToInsert += "\n"[ FD ]
Line_4 $$ final Document document = editor.getDocument()-->Line_6 $$ final CharSequence chars = document.getCharsSequence()[ FD ]
Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) -->Line_12 $$ if (beforeCaret != null) [ CD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_9 $$ final CharSequence beforeCaret = chars.subSequence(lineStart, offset)[ CD ]
Line_4 $$ final Document document = editor.getDocument()-->Line_25 $$ editor.getCaretModel().moveToOffset(Math.min(document.getTextLength(), rangeMarker.getStartOffset()))[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_4 $$ final Document document = editor.getDocument()[ CD ]
Line_4 $$ final Document document = editor.getDocument()-->Line_5 $$ final RangeMarker rangeMarker = document.createRangeMarker(editor.getCaretModel().getOffset(), editor.getCaretModel().getOffset())[ FD ]
Line_9 $$ final CharSequence beforeCaret = chars.subSequence(lineStart, offset)-->Line_12 $$ if (beforeCaret != null) [ FD ]
Line_12 $$ if (beforeCaret != null) -->Line_13 $$ strToInsert += beforeCaret.toString()[ CD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_5 $$ final RangeMarker rangeMarker = document.createRangeMarker(editor.getCaretModel().getOffset(), editor.getCaretModel().getOffset())[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_21 $$ getEnterHandler().execute(editor, caret, dataContext)[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_3 $$ CopyPasteManager.getInstance().stopKillRings()[ CD ]
Line_9 $$ final CharSequence beforeCaret = chars.subSequence(lineStart, offset)-->Line_13 $$ strToInsert += beforeCaret.toString()[ FD ]
Line_8 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(offset))-->Line_16 $$ document.insertString(lineStart, strToInsert)[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_25 $$ editor.getCaretModel().moveToOffset(Math.min(document.getTextLength(), rangeMarker.getStartOffset()))[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_7 $$ int offset = editor.getCaretModel().getOffset()[ FD ]
Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) -->Line_11 $$ String strToInsert = ""[ CD ]
Line_13 $$ strToInsert += beforeCaret.toString()-->Line_16 $$ document.insertString(lineStart, strToInsert)[ FD ]
Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) -->Line_16 $$ document.insertString(lineStart, strToInsert)[ CD ]
Line_7 $$ int offset = editor.getCaretModel().getOffset()-->Line_9 $$ final CharSequence beforeCaret = chars.subSequence(lineStart, offset)[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_7 $$ int offset = editor.getCaretModel().getOffset()[ CD ]
Line_5 $$ final RangeMarker rangeMarker = document.createRangeMarker(editor.getCaretModel().getOffset(), editor.getCaretModel().getOffset())-->Line_25 $$ editor.getCaretModel().moveToOffset(Math.min(document.getTextLength(), rangeMarker.getStartOffset()))[ FD ]
Line_11 $$ String strToInsert = ""-->Line_15 $$ strToInsert += "\n"[ FD ]
Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) -->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ CD ]
Line_11 $$ String strToInsert = ""-->Line_16 $$ document.insertString(lineStart, strToInsert)[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_26 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ FD ]
Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) -->Line_26 $$ editor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE)[ CD ]
Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) -->Line_19 $$ DataManager.getInstance().saveInDataContext(dataContext, SPLIT_LINE_KEY, true)[ CD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_8 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(offset))[ CD ]
Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) -->Line_15 $$ strToInsert += "\n"[ CD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_23 $$ DataManager.getInstance().saveInDataContext(dataContext, SPLIT_LINE_KEY, null)[ FD ]
Line_4 $$ final Document document = editor.getDocument()-->Line_16 $$ document.insertString(lineStart, strToInsert)[ FD ]
Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) -->Line_25 $$ editor.getCaretModel().moveToOffset(Math.min(document.getTextLength(), rangeMarker.getStartOffset()))[ CD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_5 $$ final RangeMarker rangeMarker = document.createRangeMarker(editor.getCaretModel().getOffset(), editor.getCaretModel().getOffset())[ CD ]
Line_7 $$ int offset = editor.getCaretModel().getOffset()-->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_7 $$ int offset = editor.getCaretModel().getOffset()-->Line_8 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(offset))[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_4 $$ final Document document = editor.getDocument()[ FD ]
Line_8 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(offset))-->Line_9 $$ final CharSequence beforeCaret = chars.subSequence(lineStart, offset)[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_6 $$ final CharSequence chars = document.getCharsSequence()[ CD ]
Line_6 $$ final CharSequence chars = document.getCharsSequence()-->Line_9 $$ final CharSequence beforeCaret = chars.subSequence(lineStart, offset)[ FD ]
Line_15 $$ strToInsert += "\n"-->Line_16 $$ document.insertString(lineStart, strToInsert)[ FD ]
Line_11 $$ String strToInsert = ""-->Line_13 $$ strToInsert += beforeCaret.toString()[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_9 $$ final CharSequence beforeCaret = chars.subSequence(lineStart, offset)-->Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) [ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_19 $$ DataManager.getInstance().saveInDataContext(dataContext, SPLIT_LINE_KEY, true)[ FD ]
Line_2 $$ public void executeWriteAction(Editor editor, Caret caret, DataContext dataContext) -->Line_10 $$ if (CharArrayUtil.containsOnlyWhiteSpaces(beforeCaret)) [ CD ]
Line_4 $$ final Document document = editor.getDocument()-->Line_8 $$ int lineStart = document.getLineStartOffset(document.getLineNumber(offset))[ FD ]
