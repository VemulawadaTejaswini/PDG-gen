Line_4 $$ if (setupPy != null) -->Line_6 $$ PyFile setupPyFile = (PyFile) PsiFileFactory.getInstance(project).createFileFromText(SETUP_PY, PythonFileType.INSTANCE, content.toString())[ CD ]
Line_2 $$ public void configureProject(Project project, @NotNull VirtualFile baseDir, Ref<Module> moduleRef) -->Line_6 $$ PyFile setupPyFile = (PyFile) PsiFileFactory.getInstance(project).createFileFromText(SETUP_PY, PythonFileType.INSTANCE, content.toString())[ FD ]
Line_10 $$ if (dir != null) -->Line_12 $$ addSourceRoot(project, baseDir, rootPackageVFile, true)[ CD ]
Line_6 $$ PyFile setupPyFile = (PyFile) PsiFileFactory.getInstance(project).createFileFromText(SETUP_PY, PythonFileType.INSTANCE, content.toString())-->Line_8 $$ setupPyFile.accept(visitor)[ FD ]
Line_7 $$ final SetupCallVisitor visitor = new SetupCallVisitor()-->Line_8 $$ setupPyFile.accept(visitor)[ FD ]
Line_2 $$ public void configureProject(Project project, @NotNull VirtualFile baseDir, Ref<Module> moduleRef) -->Line_3 $$ VirtualFile setupPy = baseDir.findChild(SETUP_PY)[ FD ]
Line_10 $$ if (dir != null) -->Line_11 $$ final VirtualFile rootPackageVFile = baseDir.findFileByRelativePath(dir)[ CD ]
Line_2 $$ public void configureProject(Project project, @NotNull VirtualFile baseDir, Ref<Module> moduleRef) -->Line_4 $$ if (setupPy != null) [ CD ]
Line_7 $$ final SetupCallVisitor visitor = new SetupCallVisitor()-->Line_9 $$ String dir = visitor.getRootPackageDir()[ FD ]
Line_4 $$ if (setupPy != null) -->Line_9 $$ String dir = visitor.getRootPackageDir()[ CD ]
Line_3 $$ VirtualFile setupPy = baseDir.findChild(SETUP_PY)-->Line_4 $$ if (setupPy != null) [ FD ]
Line_2 $$ public void configureProject(Project project, @NotNull VirtualFile baseDir, Ref<Module> moduleRef) -->Line_3 $$ VirtualFile setupPy = baseDir.findChild(SETUP_PY)[ CD ]
Line_4 $$ if (setupPy != null) -->Line_7 $$ final SetupCallVisitor visitor = new SetupCallVisitor()[ CD ]
Line_4 $$ if (setupPy != null) -->Line_8 $$ setupPyFile.accept(visitor)[ CD ]
Line_9 $$ String dir = visitor.getRootPackageDir()-->Line_11 $$ final VirtualFile rootPackageVFile = baseDir.findFileByRelativePath(dir)[ FD ]
Line_2 $$ public void configureProject(Project project, @NotNull VirtualFile baseDir, Ref<Module> moduleRef) -->Line_12 $$ addSourceRoot(project, baseDir, rootPackageVFile, true)[ FD ]
Line_2 $$ public void configureProject(Project project, @NotNull VirtualFile baseDir, Ref<Module> moduleRef) -->Line_11 $$ final VirtualFile rootPackageVFile = baseDir.findFileByRelativePath(dir)[ FD ]
Line_3 $$ VirtualFile setupPy = baseDir.findChild(SETUP_PY)-->Line_5 $$ final CharSequence content = LoadTextUtil.loadText(setupPy)[ FD ]
Line_9 $$ String dir = visitor.getRootPackageDir()-->Line_10 $$ if (dir != null) [ FD ]
Line_11 $$ final VirtualFile rootPackageVFile = baseDir.findFileByRelativePath(dir)-->Line_12 $$ addSourceRoot(project, baseDir, rootPackageVFile, true)[ FD ]
Line_4 $$ if (setupPy != null) -->Line_10 $$ if (dir != null) [ CD ]
Line_5 $$ final CharSequence content = LoadTextUtil.loadText(setupPy)-->Line_6 $$ PyFile setupPyFile = (PyFile) PsiFileFactory.getInstance(project).createFileFromText(SETUP_PY, PythonFileType.INSTANCE, content.toString())[ FD ]
Line_4 $$ if (setupPy != null) -->Line_5 $$ final CharSequence content = LoadTextUtil.loadText(setupPy)[ CD ]
