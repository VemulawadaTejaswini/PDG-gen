Line_19 $$ if (compressed) -->Line_20 $$ logger.trace("Upgrading incoming connection to be compressed")[ CD ]
Line_22 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))-->Line_26 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))[ FD ]
Line_26 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))-->Line_34 $$ receiveMessage(in, version)[ FD ]
Line_22 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))-->Line_33 $$ MessagingService.validateMagic(in.readInt())[ FD ]
Line_32 $$ while (true) -->Line_33 $$ MessagingService.validateMagic(in.readInt())[ CD ]
Line_21 $$ if (version < MessagingService.VERSION_21) -->Line_22 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))[ CD ]
Line_11 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_15 $$ from = CompactEndpointSerializationHelper.deserialize(in)[ FD ]
Line_21 $$ if (version < MessagingService.VERSION_21) -->Line_25 $$ Checksum checksum = XXHashFactory.fastestInstance().newStreamingHash32(OutboundTcpConnection.LZ4_HASH_SEED).asChecksum()[ CD ]
Line_11 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_26 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))[ FD ]
Line_19 $$ if (compressed) -->Line_30 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)[ CD ]
Line_22 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))-->Line_30 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)[ FD ]
Line_26 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))-->Line_33 $$ MessagingService.validateMagic(in.readInt())[ FD ]
Line_19 $$ if (compressed) -->Line_21 $$ if (version < MessagingService.VERSION_21) [ CD ]
Line_11 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_30 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)[ FD ]
Line_19 $$ if (compressed) -->Line_29 $$ ReadableByteChannel channel = socket.getChannel()[ CD ]
Line_30 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)-->Line_33 $$ MessagingService.validateMagic(in.readInt())[ FD ]
Line_11 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_33 $$ MessagingService.validateMagic(in.readInt())[ FD ]
Line_32 $$ while (true) -->Line_34 $$ receiveMessage(in, version)[ CD ]
Line_12 $$ int maxVersion = in.readInt()-->Line_18 $$ logger.trace("Set version for [ FD ]
Line_21 $$ if (version < MessagingService.VERSION_21) -->Line_24 $$ LZ4FastDecompressor decompressor = LZ4Factory.fastestInstance().fastDecompressor()[ CD ]
Line_11 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_34 $$ receiveMessage(in, version)[ FD ]
Line_22 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))-->Line_34 $$ receiveMessage(in, version)[ FD ]
Line_11 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_12 $$ int maxVersion = in.readInt()[ FD ]
Line_30 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)-->Line_34 $$ receiveMessage(in, version)[ FD ]
Line_11 $$ DataInputPlus in = new DataInputStreamPlus(socket.getInputStream())-->Line_22 $$ in = new DataInputStreamPlus(new SnappyInputStream(socket.getInputStream()))[ FD ]
Line_26 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))-->Line_30 $$ in = new NIODataInputStream(channel != null ? channel : Channels.newChannel(socket.getInputStream()), BUFFER_SIZE)[ FD ]
Line_21 $$ if (version < MessagingService.VERSION_21) -->Line_26 $$ in = new DataInputStreamPlus(new LZ4BlockInputStream(socket.getInputStream(), decompressor, checksum))[ CD ]
