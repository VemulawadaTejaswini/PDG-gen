Line_51 $$ final ServerSocket serverSocket = new ServerSocket(port, 1, InetAddress.getByName("127.0.0.1"))-->Line_53 $$ final Socket socket = serverSocket.accept()[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_13 $$ final String uriResolverClass = System.getProperty("xslt.uri-resolver")[ CD ]
Line_66 $$ if (encoding != null) -->Line_69 $$ if (out != null) [ CD ]
Line_66 $$ if (encoding != null) -->Line_75 $$ if (out != null) [ CD ]
Line_53 $$ final Socket socket = serverSocket.accept()-->Line_54 $$ final BufferedOutputStream socketStream = new BufferedOutputStream(socket.getOutputStream(), 16)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_4 $$ TransformerFactory transformerFactory[ CD ]
Line_37 $$ final String out = System.getProperty("xslt.output")-->Line_89 $$ out.close()[ FD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_27 $$ final Enumeration props = System.getProperties().keys()[ CD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_78 $$ result = new StreamResult(System.out)[ FD ]
Line_45 $$ final StreamResult result-->Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_37 $$ final String out = System.getProperty("xslt.output")-->Line_75 $$ if (out != null) [ FD ]
Line_29 $$ String s = (String) props.nextElement()-->Line_32 $$ final String value = System.getProperty(s)[ FD ]
Line_102 $$ if (isSmartErrorHandling) -->Line_103 $$ listener.error(e)[ CD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_3 $$ final XSLTMain main = loadMain()[ CD ]
Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_86 $$ final Writer out = result.getWriter()[ FD ]
Line_90 $$ if (result.getOutputStream() != null) -->Line_91 $$ result.getOutputStream().flush()[ CD ]
Line_27 $$ final Enumeration props = System.getProperties().keys()-->Line_28 $$ while (props.hasMoreElements()) [ FD ]
Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_92 $$ result.getOutputStream().close()[ FD ]
Line_9 $$ transformerFactory = createTransformerFactoryStatic()-->Line_25 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))[ FD ]
Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_25 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_14 $$ if (uriResolverClass != null) [ CD ]
Line_86 $$ final Writer out = result.getWriter()-->Line_89 $$ out.close()[ FD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))[ FD ]
Line_78 $$ result = new StreamResult(System.out)-->Line_92 $$ result.getOutputStream().close()[ FD ]
Line_45 $$ final StreamResult result-->Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_92 $$ result.getOutputStream().close()[ FD ]
Line_37 $$ final String out = System.getProperty("xslt.output")-->Line_55 $$ if (out != null) [ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_23 $$ final File xslt = new File(System.getProperty("xslt.file"))[ CD ]
Line_37 $$ final String out = System.getProperty("xslt.output")-->Line_87 $$ if (out != null) [ FD ]
Line_47 $$ final int port = _port.intValue()-->Line_48 $$ if (port != -1) [ FD ]
Line_11 $$ transformerFactory = createTransformerFactoryStatic()-->Line_21 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_9 $$ transformerFactory = createTransformerFactoryStatic()-->Line_15 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_27 $$ final Enumeration props = System.getProperties().keys()-->Line_29 $$ String s = (String) props.nextElement()[ FD ]
Line_78 $$ result = new StreamResult(System.out)-->Line_86 $$ final Writer out = result.getWriter()[ FD ]
Line_38 $$ OutputStream fileStream-->Line_41 $$ fileStream = new BufferedOutputStream(new FileOutputStream(output))[ FD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_9 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_87 $$ if (out != null) -->Line_88 $$ out.flush()[ CD ]
Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_45 $$ final StreamResult result-->Line_92 $$ result.getOutputStream().close()[ FD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_91 $$ result.getOutputStream().flush()[ FD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_90 $$ if (result.getOutputStream() != null) [ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_18 $$ final MyErrorListener listener = new MyErrorListener(trouble)[ CD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_90 $$ if (result.getOutputStream() != null) [ FD ]
Line_75 $$ if (out != null) -->Line_78 $$ result = new StreamResult(System.out)[ CD ]
Line_20 $$ if (isSmartErrorHandling) -->Line_21 $$ transformerFactory.setErrorListener(listener)[ CD ]
Line_9 $$ transformerFactory = createTransformerFactoryStatic()-->Line_11 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_46 $$ final Integer _port = Integer.getInteger("xslt.listen-port", -1)-->Line_47 $$ final int port = _port.intValue()[ FD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_86 $$ final Writer out = result.getWriter()[ FD ]
Line_25 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))-->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_90 $$ if (result.getOutputStream() != null) [ FD ]
Line_48 $$ if (port != -1) -->Line_65 $$ final String encoding = System.getProperty("file.encoding")[ CD ]
Line_25 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))-->Line_33 $$ transformer.setParameter(name, value)[ FD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_25 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))[ FD ]
Line_65 $$ final String encoding = System.getProperty("file.encoding")-->Line_66 $$ if (encoding != null) [ FD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_48 $$ if (port != -1) [ CD ]
Line_30 $$ if (s.startsWith("xslt.param.")) -->Line_31 $$ final String name = s.substring("xslt.param.".length())[ CD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ FD ]
Line_45 $$ final StreamResult result-->Line_86 $$ final Writer out = result.getWriter()[ FD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_45 $$ final StreamResult result[ CD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_39 $$ if (out != null) [ CD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_46 $$ final Integer _port = Integer.getInteger("xslt.listen-port", -1)[ CD ]
Line_78 $$ result = new StreamResult(System.out)-->Line_90 $$ if (result.getOutputStream() != null) [ FD ]
Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_78 $$ result = new StreamResult(System.out)[ FD ]
Line_3 $$ final XSLTMain main = loadMain()-->Line_6 $$ transformerFactory = main.createTransformerFactory()[ FD ]
Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_78 $$ result = new StreamResult(System.out)[ FD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_91 $$ result.getOutputStream().flush()[ FD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_37 $$ final String out = System.getProperty("xslt.output")[ CD ]
Line_45 $$ final StreamResult result-->Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_69 $$ if (out != null) -->Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ CD ]
Line_87 $$ if (out != null) -->Line_90 $$ if (result.getOutputStream() != null) [ CD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_36 $$ final File input = new File(System.getProperty("xslt.input"))[ CD ]
Line_30 $$ if (s.startsWith("xslt.param.")) -->Line_33 $$ transformer.setParameter(name, value)[ CD ]
Line_32 $$ final String value = System.getProperty(s)-->Line_33 $$ transformer.setParameter(name, value)[ FD ]
Line_39 $$ if (out != null) -->Line_40 $$ final File output = new File(out)[ CD ]
Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_91 $$ result.getOutputStream().flush()[ FD ]
Line_48 $$ if (port != -1) -->Line_66 $$ if (encoding != null) [ CD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_78 $$ result = new StreamResult(System.out)[ FD ]
Line_14 $$ if (uriResolverClass != null) -->Line_15 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ CD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_21 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_92 $$ result.getOutputStream().close()[ FD ]
Line_9 $$ transformerFactory = createTransformerFactoryStatic()-->Line_21 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_6 $$ transformerFactory = main.createTransformerFactory()[ FD ]
Line_29 $$ String s = (String) props.nextElement()-->Line_31 $$ final String name = s.substring("xslt.param.".length())[ FD ]
Line_13 $$ final String uriResolverClass = System.getProperty("xslt.uri-resolver")-->Line_14 $$ if (uriResolverClass != null) [ FD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_86 $$ final Writer out = result.getWriter()[ FD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_47 $$ final int port = _port.intValue()[ CD ]
Line_45 $$ final StreamResult result-->Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_20 $$ if (isSmartErrorHandling) [ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_17 $$ final boolean[] trouble = new boolean[] [ CD ]
Line_18 $$ final MyErrorListener listener = new MyErrorListener(trouble)-->Line_21 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_75 $$ if (out != null) -->Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ CD ]
Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_86 $$ final Writer out = result.getWriter()[ FD ]
Line_29 $$ String s = (String) props.nextElement()-->Line_30 $$ if (s.startsWith("xslt.param.")) [ FD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_21 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_37 $$ final String out = System.getProperty("xslt.output")-->Line_69 $$ if (out != null) [ FD ]
Line_37 $$ final String out = System.getProperty("xslt.output")-->Line_88 $$ out.flush()[ FD ]
Line_45 $$ final StreamResult result-->Line_91 $$ result.getOutputStream().flush()[ FD ]
Line_51 $$ final ServerSocket serverSocket = new ServerSocket(port, 1, InetAddress.getByName("127.0.0.1"))-->Line_52 $$ serverSocket.setSoTimeout(Integer.getInteger("xslt.listen-timeout", 5000).intValue())[ FD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_28 $$ while (props.hasMoreElements()) [ CD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_9 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_45 $$ final StreamResult result-->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_19 $$ final boolean isSmartErrorHandling = System.getProperty("xslt.smart-error-handling", "false").equals("true")[ CD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ CD ]
Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_92 $$ result.getOutputStream().close()[ FD ]
Line_86 $$ final Writer out = result.getWriter()-->Line_88 $$ out.flush()[ FD ]
Line_45 $$ final StreamResult result-->Line_90 $$ if (result.getOutputStream() != null) [ FD ]
Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_91 $$ result.getOutputStream().flush()[ FD ]
Line_31 $$ final String name = s.substring("xslt.param.".length())-->Line_33 $$ transformer.setParameter(name, value)[ FD ]
Line_55 $$ if (out != null) -->Line_56 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ CD ]
Line_30 $$ if (s.startsWith("xslt.param.")) -->Line_32 $$ final String value = System.getProperty(s)[ CD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_15 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_39 $$ if (out != null) -->Line_43 $$ fileStream = null[ CD ]
Line_11 $$ transformerFactory = createTransformerFactoryStatic()-->Line_25 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))[ FD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_82 $$ Runtime.getRuntime().addShutdownHook(new Thread("XSLT runner") [ CD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_11 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_78 $$ result = new StreamResult(System.out)-->Line_91 $$ result.getOutputStream().flush()[ FD ]
Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_78 $$ result = new StreamResult(System.out)[ FD ]
Line_38 $$ OutputStream fileStream-->Line_43 $$ fileStream = null[ FD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_11 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_45 $$ final StreamResult result-->Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ FD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ FD ]
Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ FD ]
Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_92 $$ result.getOutputStream().close()[ FD ]
Line_41 $$ fileStream = new BufferedOutputStream(new FileOutputStream(output))-->Line_43 $$ fileStream = null[ FD ]
Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_76 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_28 $$ while (props.hasMoreElements()) -->Line_30 $$ if (s.startsWith("xslt.param.")) [ CD ]
Line_45 $$ final StreamResult result-->Line_78 $$ result = new StreamResult(System.out)[ FD ]
Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_90 $$ if (result.getOutputStream() != null) [ FD ]
Line_39 $$ if (out != null) -->Line_41 $$ fileStream = new BufferedOutputStream(new FileOutputStream(output))[ CD ]
Line_69 $$ if (out != null) -->Line_70 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] [ CD ]
Line_72 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_86 $$ final Writer out = result.getWriter()[ FD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_90 $$ if (result.getOutputStream() != null) [ FD ]
Line_3 $$ final XSLTMain main = loadMain()-->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_18 $$ final MyErrorListener listener = new MyErrorListener(trouble)-->Line_103 $$ listener.error(e)[ FD ]
Line_90 $$ if (result.getOutputStream() != null) -->Line_92 $$ result.getOutputStream().close()[ CD ]
Line_86 $$ final Writer out = result.getWriter()-->Line_87 $$ if (out != null) [ FD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_15 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_11 $$ transformerFactory = createTransformerFactoryStatic()-->Line_15 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_28 $$ while (props.hasMoreElements()) -->Line_29 $$ String s = (String) props.nextElement()[ CD ]
Line_87 $$ if (out != null) -->Line_89 $$ out.close()[ CD ]
Line_78 $$ result = new StreamResult(System.out)-->Line_99 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_13 $$ final String uriResolverClass = System.getProperty("xslt.uri-resolver")-->Line_15 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_37 $$ final String out = System.getProperty("xslt.output")-->Line_39 $$ if (out != null) [ FD ]
Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_91 $$ result.getOutputStream().flush()[ FD ]
Line_55 $$ if (out != null) -->Line_58 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))[ CD ]
Line_26 $$ if (transformer != null && !trouble[0]) -->Line_38 $$ OutputStream fileStream[ CD ]
