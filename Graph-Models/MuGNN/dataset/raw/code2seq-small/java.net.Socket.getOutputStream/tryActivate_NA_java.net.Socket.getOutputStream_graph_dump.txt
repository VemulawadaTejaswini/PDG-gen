Line_2 $$ private static ActivateStatus tryActivate(int portNumber, @NotNull Collection<String> paths, @NotNull String[] args) -->Line_3 $$ log("trying: port=%s", portNumber)[ CD ]
Line_12 $$ String path = in.readUTF()-->Line_16 $$ if (paths.contains(path)) [ FD ]
Line_2 $$ private static ActivateStatus tryActivate(int portNumber, @NotNull Collection<String> paths, @NotNull String[] args) -->Line_47 $$ return ActivateStatus.NO_INSTANCE[ CD ]
Line_26 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())-->Line_28 $$ out.flush()[ FD ]
Line_31 $$ if (response.equals(OK_RESPONSE)) -->Line_32 $$ return ActivateStatus.ACTIVATED[ CD ]
Line_9 $$ DataInputStream in = new DataInputStream(socket.getInputStream())-->Line_29 $$ String response = in.readUTF()[ FD ]
Line_8 $$ boolean result = false-->Line_17 $$ result = true[ FD ]
Line_5 $$ Socket socket = new Socket(NetUtils.getLoopbackAddress(), portNumber)-->Line_40 $$ socket.close()[ FD ]
Line_14 $$ if (PATHS_EOT_RESPONSE.equals(path)) -->Line_16 $$ if (paths.contains(path)) [ CD ]
Line_26 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())-->Line_27 $$ out.writeUTF(ACTIVATE_COMMAND + new File(".").getAbsolutePath() + "\0" + StringUtil.join(args, "\0"))[ FD ]
Line_5 $$ Socket socket = new Socket(NetUtils.getLoopbackAddress(), portNumber)-->Line_26 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())[ FD ]
Line_9 $$ DataInputStream in = new DataInputStream(socket.getInputStream())-->Line_12 $$ String path = in.readUTF()[ FD ]
Line_29 $$ String response = in.readUTF()-->Line_31 $$ if (response.equals(OK_RESPONSE)) [ FD ]
Line_16 $$ if (paths.contains(path)) -->Line_17 $$ result = true[ CD ]
Line_12 $$ String path = in.readUTF()-->Line_14 $$ if (PATHS_EOT_RESPONSE.equals(path)) [ FD ]
Line_12 $$ String path = in.readUTF()-->Line_13 $$ log("read: path=%s", path)[ FD ]
Line_2 $$ private static ActivateStatus tryActivate(int portNumber, @NotNull Collection<String> paths, @NotNull String[] args) -->Line_16 $$ if (paths.contains(path)) [ FD ]
Line_5 $$ Socket socket = new Socket(NetUtils.getLoopbackAddress(), portNumber)-->Line_9 $$ DataInputStream in = new DataInputStream(socket.getInputStream())[ FD ]
Line_29 $$ String response = in.readUTF()-->Line_30 $$ log("read: response=%s", response)[ FD ]
Line_24 $$ if (result) -->Line_37 $$ return ActivateStatus.CANNOT_ACTIVATE[ CD ]
Line_2 $$ private static ActivateStatus tryActivate(int portNumber, @NotNull Collection<String> paths, @NotNull String[] args) -->Line_3 $$ log("trying: port=%s", portNumber)[ FD ]
Line_5 $$ Socket socket = new Socket(NetUtils.getLoopbackAddress(), portNumber)-->Line_7 $$ socket.setSoTimeout(1000)[ FD ]
Line_2 $$ private static ActivateStatus tryActivate(int portNumber, @NotNull Collection<String> paths, @NotNull String[] args) -->Line_27 $$ out.writeUTF(ACTIVATE_COMMAND + new File(".").getAbsolutePath() + "\0" + StringUtil.join(args, "\0"))[ FD ]
