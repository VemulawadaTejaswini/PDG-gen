Line_7 $$ FutureTask<Map<String, Object>> futureTask = new FutureTask(evalCallable)-->Line_14 $$ futureTask.cancel(true)[ FD ]
Line_2 $$ protected Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, File scriptFile, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_7 $$ FutureTask<Map<String, Object>> futureTask = new FutureTask(evalCallable)[ CD ]
Line_8 $$ Thread oneTimeExecutorThread = _threadFactory.newThread(futureTask)-->Line_15 $$ oneTimeExecutorThread.interrupt()[ FD ]
Line_2 $$ protected Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, File scriptFile, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_9 $$ oneTimeExecutorThread.start()[ CD ]
Line_7 $$ FutureTask<Map<String, Object>> futureTask = new FutureTask(evalCallable)-->Line_12 $$ return futureTask.get()[ FD ]
Line_2 $$ protected Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, File scriptFile, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_8 $$ Thread oneTimeExecutorThread = _threadFactory.newThread(futureTask)[ CD ]
Line_8 $$ Thread oneTimeExecutorThread = _threadFactory.newThread(futureTask)-->Line_11 $$ oneTimeExecutorThread.join()[ FD ]
Line_2 $$ protected Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, File scriptFile, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_6 $$ EvalCallable evalCallable = new EvalCallable(allowedClasses, inputObjects, outputNames, scriptFile, script, classLoaders)[ CD ]
Line_7 $$ FutureTask<Map<String, Object>> futureTask = new FutureTask(evalCallable)-->Line_8 $$ Thread oneTimeExecutorThread = _threadFactory.newThread(futureTask)[ FD ]
Line_2 $$ protected Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, File scriptFile, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_3 $$ if (!_executeInSeparateThread) [ CD ]
Line_3 $$ if (!_executeInSeparateThread) -->Line_4 $$ return doEval(allowedClasses, inputObjects, outputNames, scriptFile, script, classLoaders)[ CD ]
Line_2 $$ protected Map<String, Object> eval(Set<String> allowedClasses, Map<String, Object> inputObjects, Set<String> outputNames, File scriptFile, String script, ClassLoader... classLoaders) throws ScriptingException -->Line_4 $$ return doEval(allowedClasses, inputObjects, outputNames, scriptFile, script, classLoaders)[ FD ]
Line_8 $$ Thread oneTimeExecutorThread = _threadFactory.newThread(futureTask)-->Line_9 $$ oneTimeExecutorThread.start()[ FD ]
