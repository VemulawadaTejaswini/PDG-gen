Line_7 $$ Class<?> cl = Class.forName("java.lang.ProcessEnvironment")-->Line_22 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) [ FD ]
Line_22 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_26 $$ Map<String, String> map = (Map<String, String>) obj[ CD ]
Line_15 $$ Map<String, String> cienv = (Map<String, String>) ciField.get(null)-->Line_16 $$ cienv.clear()[ FD ]
Line_8 $$ Field field = cl.getDeclaredField("theEnvironment")-->Line_24 $$ field.setAccessible(true)[ FD ]
Line_8 $$ Field field = cl.getDeclaredField("theEnvironment")-->Line_9 $$ field.setAccessible(true)[ FD ]
Line_26 $$ Map<String, String> map = (Map<String, String>) obj-->Line_28 $$ map.putAll(newenv)[ FD ]
Line_10 $$ Map<String, String> env = (Map<String, String>) field.get(null)-->Line_11 $$ env.clear()[ FD ]
Line_22 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_24 $$ field.setAccessible(true)[ CD ]
Line_26 $$ Map<String, String> map = (Map<String, String>) obj-->Line_27 $$ map.clear()[ FD ]
Line_10 $$ Map<String, String> env = (Map<String, String>) field.get(null)-->Line_12 $$ env.putAll(newenv)[ FD ]
Line_7 $$ Class<?> cl = Class.forName("java.lang.ProcessEnvironment")-->Line_13 $$ Field ciField = cl.getDeclaredField("theCaseInsensitiveEnvironment")[ FD ]
Line_10 $$ Map<String, String> env = (Map<String, String>) field.get(null)-->Line_25 $$ Object obj = field.get(env)[ FD ]
Line_13 $$ Field ciField = cl.getDeclaredField("theCaseInsensitiveEnvironment")-->Line_14 $$ ciField.setAccessible(true)[ FD ]
Line_13 $$ Field ciField = cl.getDeclaredField("theCaseInsensitiveEnvironment")-->Line_15 $$ Map<String, String> cienv = (Map<String, String>) ciField.get(null)[ FD ]
Line_7 $$ Class<?> cl = Class.forName("java.lang.ProcessEnvironment")-->Line_8 $$ Field field = cl.getDeclaredField("theEnvironment")[ FD ]
Line_22 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_25 $$ Object obj = field.get(env)[ CD ]
Line_22 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_28 $$ map.putAll(newenv)[ CD ]
Line_22 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_27 $$ map.clear()[ CD ]
Line_22 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_23 $$ Field field = cl.getDeclaredField("m")[ CD ]
Line_8 $$ Field field = cl.getDeclaredField("theEnvironment")-->Line_10 $$ Map<String, String> env = (Map<String, String>) field.get(null)[ FD ]
Line_15 $$ Map<String, String> cienv = (Map<String, String>) ciField.get(null)-->Line_17 $$ cienv.putAll(newenv)[ FD ]
Line_7 $$ Class<?> cl = Class.forName("java.lang.ProcessEnvironment")-->Line_23 $$ Field field = cl.getDeclaredField("m")[ FD ]
Line_8 $$ Field field = cl.getDeclaredField("theEnvironment")-->Line_25 $$ Object obj = field.get(env)[ FD ]
