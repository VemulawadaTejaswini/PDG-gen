Line_30 $$ if (newSize < 0) -->Line_31 $$ LOG.info("Currently allocated:" + mySize)[ CD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_8 $$ long ownerLength = owner.length()[ CD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_15 $$ while (true) [ CD ]
Line_35 $$ Class<?> aClass = Class.forName("java.nio.Bits")-->Line_36 $$ Field reservedMemory = aClass.getDeclaredField("reservedMemory")[ FD ]
Line_13 $$ ByteBufferWrapper wrapper = ByteBufferWrapper.readWriteDirect(owner.myFile, off, min)-->Line_17 $$ wrapper.getBuffer()[ FD ]
Line_36 $$ Field reservedMemory = aClass.getDeclaredField("reservedMemory")-->Line_37 $$ reservedMemory.setAccessible(true)[ FD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_4 $$ PagedFileStorage owner = getRegisteredPagedFileStorageByIndex(storageIndex)[ CD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_9 $$ if (off > ownerLength) [ CD ]
Line_38 $$ Field maxMemory = aClass.getDeclaredField("maxMemory")-->Line_41 $$ LOG.info("Max memory:" + maxMemory.get(null) + ", reserved memory:" + reservedMemory.get(null))[ FD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_6 $$ checkThreadAccess(owner.myStorageLockContext)[ CD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_7 $$ long off = (long) (key & MAX_PAGES_COUNT) * owner.myPageSize[ CD ]
Line_36 $$ Field reservedMemory = aClass.getDeclaredField("reservedMemory")-->Line_41 $$ LOG.info("Max memory:" + maxMemory.get(null) + ", reserved memory:" + reservedMemory.get(null))[ FD ]
Line_7 $$ long off = (long) (key & MAX_PAGES_COUNT) * owner.myPageSize-->Line_13 $$ ByteBufferWrapper wrapper = ByteBufferWrapper.readWriteDirect(owner.myFile, off, min)[ FD ]
Line_25 $$ oome = e-->Line_33 $$ LOG.info(oome)[ FD ]
Line_3 $$ final int storageIndex = key & FILE_INDEX_MASK-->Line_4 $$ PagedFileStorage owner = getRegisteredPagedFileStorageByIndex(storageIndex)[ FD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_3 $$ final int storageIndex = key & FILE_INDEX_MASK[ CD ]
Line_7 $$ long off = (long) (key & MAX_PAGES_COUNT) * owner.myPageSize-->Line_9 $$ if (off > ownerLength) [ FD ]
Line_29 $$ long newSize = mySize - owner.myPageSize-->Line_47 $$ ensureSize(newSize)[ FD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_13 $$ ByteBufferWrapper wrapper = ByteBufferWrapper.readWriteDirect(owner.myFile, off, min)[ CD ]
Line_38 $$ Field maxMemory = aClass.getDeclaredField("maxMemory")-->Line_39 $$ maxMemory.setAccessible(true)[ FD ]
Line_30 $$ if (newSize < 0) -->Line_33 $$ LOG.info(oome)[ CD ]
Line_12 $$ int min = (int) Math.min(ownerLength - off, owner.myPageSize)-->Line_13 $$ ByteBufferWrapper wrapper = ByteBufferWrapper.readWriteDirect(owner.myFile, off, min)[ FD ]
Line_14 $$ Throwable oome = null-->Line_18 $$ if (oome != null) [ FD ]
Line_14 $$ Throwable oome = null-->Line_25 $$ oome = e[ FD ]
Line_35 $$ Class<?> aClass = Class.forName("java.nio.Bits")-->Line_38 $$ Field maxMemory = aClass.getDeclaredField("maxMemory")[ FD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_14 $$ Throwable oome = null[ CD ]
Line_2 $$ private ByteBufferWrapper createValue(Integer key) -->Line_12 $$ int min = (int) Math.min(ownerLength - off, owner.myPageSize)[ CD ]
Line_29 $$ long newSize = mySize - owner.myPageSize-->Line_30 $$ if (newSize < 0) [ FD ]
Line_30 $$ if (newSize < 0) -->Line_32 $$ LOG.info("Mapping failed due to OOME. Current buffers: " + mySegments)[ CD ]
Line_14 $$ Throwable oome = null-->Line_33 $$ LOG.info(oome)[ FD ]
Line_18 $$ if (oome != null) -->Line_19 $$ LOG.info("Successfully recovered OOME in memory mapping: -Xmx=" + Runtime.getRuntime().maxMemory() / MB + "MB " + "new size limit: " + mySizeLimit / MB + "MB " + "trying to allocate " + wrapper.myLength + " block")[ CD ]
Line_8 $$ long ownerLength = owner.length()-->Line_9 $$ if (off > ownerLength) [ FD ]
Line_25 $$ oome = e-->Line_18 $$ if (oome != null) [ FD ]
Line_4 $$ PagedFileStorage owner = getRegisteredPagedFileStorageByIndex(storageIndex)-->Line_8 $$ long ownerLength = owner.length()[ FD ]
