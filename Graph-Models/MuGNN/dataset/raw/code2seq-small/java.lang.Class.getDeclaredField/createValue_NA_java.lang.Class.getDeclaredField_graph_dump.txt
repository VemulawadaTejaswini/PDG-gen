Line_40 $$ Field maxMemory = aClass.getDeclaredField("maxMemory")-->Line_43 $$ LOG.info("Max memory:" + maxMemory.get(null) + ", reserved memory:" + reservedMemory.get(null))[ FD ]
Line_37 $$ Class<?> aClass = Class.forName("java.nio.Bits")-->Line_40 $$ Field maxMemory = aClass.getDeclaredField("maxMemory")[ FD ]
Line_40 $$ Field maxMemory = aClass.getDeclaredField("maxMemory")-->Line_41 $$ maxMemory.setAccessible(true)[ FD ]
Line_38 $$ Field reservedMemory = aClass.getDeclaredField("reservedMemory")-->Line_43 $$ LOG.info("Max memory:" + maxMemory.get(null) + ", reserved memory:" + reservedMemory.get(null))[ FD ]
Line_8 $$ long off = (long) (key & MAX_PAGES_COUNT) * owner.myPageSize-->Line_14 $$ ByteBufferWrapper wrapper = ByteBufferWrapper.readWriteDirect(owner.myFile, off, min)[ FD ]
Line_15 $$ Throwable oome = null-->Line_27 $$ oome = e[ FD ]
Line_32 $$ if (newSize < 0) -->Line_34 $$ LOG.info("Mapping failed due to OOME. Current buffers: " + mySegments)[ CD ]
Line_4 $$ final int storageIndex = key & FILE_INDEX_MASK-->Line_5 $$ PagedFileStorage owner = getRegisteredPagedFileStorageByIndex(storageIndex)[ FD ]
Line_8 $$ long off = (long) (key & MAX_PAGES_COUNT) * owner.myPageSize-->Line_10 $$ if (off > ownerLength) [ FD ]
Line_9 $$ long ownerLength = owner.length()-->Line_10 $$ if (off > ownerLength) [ FD ]
Line_32 $$ if (newSize < 0) -->Line_35 $$ LOG.info(oome)[ CD ]
Line_20 $$ if (oome != null) -->Line_21 $$ LOG.info("Successfully recovered OOME in memory mapping: -Xmx=" + Runtime.getRuntime().maxMemory() / MB + "MB " + "new size limit: " + mySizeLimit / MB + "MB " + "trying to allocate " + wrapper.myLength + " block")[ CD ]
Line_15 $$ Throwable oome = null-->Line_20 $$ if (oome != null) [ FD ]
Line_37 $$ Class<?> aClass = Class.forName("java.nio.Bits")-->Line_38 $$ Field reservedMemory = aClass.getDeclaredField("reservedMemory")[ FD ]
Line_38 $$ Field reservedMemory = aClass.getDeclaredField("reservedMemory")-->Line_39 $$ reservedMemory.setAccessible(true)[ FD ]
Line_27 $$ oome = e-->Line_35 $$ LOG.info(oome)[ FD ]
Line_13 $$ int min = (int) Math.min(ownerLength - off, owner.myPageSize)-->Line_14 $$ ByteBufferWrapper wrapper = ByteBufferWrapper.readWriteDirect(owner.myFile, off, min)[ FD ]
Line_5 $$ PagedFileStorage owner = getRegisteredPagedFileStorageByIndex(storageIndex)-->Line_9 $$ long ownerLength = owner.length()[ FD ]
Line_15 $$ Throwable oome = null-->Line_35 $$ LOG.info(oome)[ FD ]
Line_31 $$ long newSize = mySize - owner.myPageSize-->Line_50 $$ ensureSize(newSize)[ FD ]
Line_27 $$ oome = e-->Line_20 $$ if (oome != null) [ FD ]
Line_32 $$ if (newSize < 0) -->Line_33 $$ LOG.info("Currently allocated:" + mySize)[ CD ]
Line_31 $$ long newSize = mySize - owner.myPageSize-->Line_32 $$ if (newSize < 0) [ FD ]
