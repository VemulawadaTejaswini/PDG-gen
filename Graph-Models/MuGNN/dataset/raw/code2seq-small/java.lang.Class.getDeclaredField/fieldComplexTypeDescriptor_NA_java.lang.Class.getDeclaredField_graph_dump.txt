Line_2 $$ public void fieldComplexTypeDescriptor() throws Exception -->Line_4 $$ assertTrue(typeDescriptor.isArray())[ CD ]
Line_2 $$ public void fieldComplexTypeDescriptor() throws Exception -->Line_6 $$ assertEquals(String.class, typeDescriptor.getElementTypeDescriptor().getElementTypeDescriptor().getType())[ CD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField("arrayOfListOfString"))-->Line_7 $$ assertEquals("java.util.List<java.lang.String>[]", typeDescriptor.toString())[ FD ]
Line_2 $$ public void fieldComplexTypeDescriptor() throws Exception -->Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField("arrayOfListOfString"))[ CD ]
Line_2 $$ public void fieldComplexTypeDescriptor() throws Exception -->Line_5 $$ assertEquals(List.class, typeDescriptor.getElementTypeDescriptor().getType())[ CD ]
Line_2 $$ public void fieldComplexTypeDescriptor() throws Exception -->Line_7 $$ assertEquals("java.util.List<java.lang.String>[]", typeDescriptor.toString())[ CD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField("arrayOfListOfString"))-->Line_6 $$ assertEquals(String.class, typeDescriptor.getElementTypeDescriptor().getElementTypeDescriptor().getType())[ FD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField("arrayOfListOfString"))-->Line_4 $$ assertTrue(typeDescriptor.isArray())[ FD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(TypeDescriptorTests.class.getDeclaredField("arrayOfListOfString"))-->Line_5 $$ assertEquals(List.class, typeDescriptor.getElementTypeDescriptor().getType())[ FD ]
