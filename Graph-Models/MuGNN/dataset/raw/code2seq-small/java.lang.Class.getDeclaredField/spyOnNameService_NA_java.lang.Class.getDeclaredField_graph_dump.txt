Line_10 $$ ns = Mockito.mock(NameService.class, new GenericTestUtils.DelegateAnswer(log, ns))-->Line_11 $$ nsList.set(0, ns)[ FD ]
Line_7 $$ List<NameService> nsList = (List<NameService>) f.get(null)-->Line_11 $$ nsList.set(0, ns)[ FD ]
Line_7 $$ List<NameService> nsList = (List<NameService>) f.get(null)-->Line_8 $$ NameService ns = nsList.get(0)[ FD ]
Line_8 $$ NameService ns = nsList.get(0)-->Line_10 $$ ns = Mockito.mock(NameService.class, new GenericTestUtils.DelegateAnswer(log, ns))[ FD ]
Line_4 $$ Field f = InetAddress.class.getDeclaredField("nameServices")-->Line_7 $$ List<NameService> nsList = (List<NameService>) f.get(null)[ FD ]
Line_4 $$ Field f = InetAddress.class.getDeclaredField("nameServices")-->Line_6 $$ Assume.assumeNotNull(f)[ FD ]
Line_4 $$ Field f = InetAddress.class.getDeclaredField("nameServices")-->Line_5 $$ f.setAccessible(true)[ FD ]
Line_8 $$ NameService ns = nsList.get(0)-->Line_11 $$ nsList.set(0, ns)[ FD ]
