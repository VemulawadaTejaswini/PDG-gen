Line_7 $$ ResolvableType forFieldWithImplementation = ResolvableType.forField(Fields.class.getDeclaredField("stringList"), TypedFields.class)-->Line_11 $$ assertThat(forClass, not(equalTo(forFieldWithImplementation)))[ FD ]
Line_7 $$ ResolvableType forFieldWithImplementation = ResolvableType.forField(Fields.class.getDeclaredField("stringList"), TypedFields.class)-->Line_14 $$ assertThat(forFieldDirect, not(equalTo(forFieldWithImplementation)))[ FD ]
Line_4 $$ ResolvableType forClass = ResolvableType.forClass(List.class)-->Line_8 $$ assertThat(forClass, equalTo(forClass))[ FD ]
Line_6 $$ ResolvableType forFieldViaType = ResolvableType.forType(Fields.class.getDeclaredField("stringList").getGenericType(), (VariableResolver) null)-->Line_13 $$ assertThat(forFieldDirect, not(equalTo(forFieldViaType)))[ FD ]
Line_4 $$ ResolvableType forClass = ResolvableType.forClass(List.class)-->Line_11 $$ assertThat(forClass, not(equalTo(forFieldWithImplementation)))[ FD ]
Line_5 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))-->Line_14 $$ assertThat(forFieldDirect, not(equalTo(forFieldWithImplementation)))[ FD ]
Line_4 $$ ResolvableType forClass = ResolvableType.forClass(List.class)-->Line_10 $$ assertThat(forClass, not(equalTo(forFieldDirect)))[ FD ]
Line_5 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))-->Line_13 $$ assertThat(forFieldDirect, not(equalTo(forFieldViaType)))[ FD ]
Line_5 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))-->Line_10 $$ assertThat(forClass, not(equalTo(forFieldDirect)))[ FD ]
Line_5 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))-->Line_12 $$ assertThat(forFieldDirect, equalTo(forFieldDirect))[ FD ]
Line_4 $$ ResolvableType forClass = ResolvableType.forClass(List.class)-->Line_9 $$ assertThat(forClass.hashCode(), equalTo(forClass.hashCode()))[ FD ]
