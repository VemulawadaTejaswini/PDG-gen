Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_10 $$ cavs2.addGenericArgumentValue(MARK)[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_15 $$ assertTrue(lbf.isAutowireCandidate(JUERGEN, null))[ FD ]
Line_13 $$ DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("qualified"), false)-->Line_20 $$ assertFalse(lbf.isAutowireCandidate(MARK, qualifiedDescriptor))[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_8 $$ lbf.registerBeanDefinition(JUERGEN, person1)[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_19 $$ assertTrue(lbf.isAutowireCandidate(MARK, nonqualifiedDescriptor))[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_16 $$ assertTrue(lbf.isAutowireCandidate(JUERGEN, nonqualifiedDescriptor))[ CD ]
Line_4 $$ ConstructorArgumentValues cavs1 = new ConstructorArgumentValues()-->Line_5 $$ cavs1.addGenericArgumentValue(JUERGEN)[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_13 $$ DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("qualified"), false)[ CD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_14 $$ DependencyDescriptor nonqualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("nonqualified"), false)[ CD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_6 $$ RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null)[ CD ]
Line_14 $$ DependencyDescriptor nonqualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("nonqualified"), false)-->Line_16 $$ assertTrue(lbf.isAutowireCandidate(JUERGEN, nonqualifiedDescriptor))[ FD ]
Line_13 $$ DependencyDescriptor qualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("qualified"), false)-->Line_17 $$ assertTrue(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor))[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_18 $$ assertTrue(lbf.isAutowireCandidate(MARK, null))[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_12 $$ lbf.registerBeanDefinition(MARK, person2)[ CD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_18 $$ assertTrue(lbf.isAutowireCandidate(MARK, null))[ CD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_15 $$ assertTrue(lbf.isAutowireCandidate(JUERGEN, null))[ CD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_5 $$ cavs1.addGenericArgumentValue(JUERGEN)[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_8 $$ lbf.registerBeanDefinition(JUERGEN, person1)[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_17 $$ assertTrue(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor))[ CD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_19 $$ assertTrue(lbf.isAutowireCandidate(MARK, nonqualifiedDescriptor))[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_20 $$ assertFalse(lbf.isAutowireCandidate(MARK, qualifiedDescriptor))[ FD ]
Line_11 $$ RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null)-->Line_12 $$ lbf.registerBeanDefinition(MARK, person2)[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_7 $$ person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class))[ CD ]
Line_9 $$ ConstructorArgumentValues cavs2 = new ConstructorArgumentValues()-->Line_10 $$ cavs2.addGenericArgumentValue(MARK)[ FD ]
Line_6 $$ RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null)-->Line_7 $$ person1.addQualifier(new AutowireCandidateQualifier(TestQualifier.class))[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_4 $$ ConstructorArgumentValues cavs1 = new ConstructorArgumentValues()[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_12 $$ lbf.registerBeanDefinition(MARK, person2)[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_20 $$ assertFalse(lbf.isAutowireCandidate(MARK, qualifiedDescriptor))[ CD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_9 $$ ConstructorArgumentValues cavs2 = new ConstructorArgumentValues()[ CD ]
Line_14 $$ DependencyDescriptor nonqualifiedDescriptor = new DependencyDescriptor(QualifiedTestBean.class.getDeclaredField("nonqualified"), false)-->Line_19 $$ assertTrue(lbf.isAutowireCandidate(MARK, nonqualifiedDescriptor))[ FD ]
Line_2 $$ public void testAutowireCandidateWithFieldDescriptor() throws Exception -->Line_11 $$ RootBeanDefinition person2 = new RootBeanDefinition(Person.class, cavs2, null)[ CD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_17 $$ assertTrue(lbf.isAutowireCandidate(JUERGEN, qualifiedDescriptor))[ FD ]
Line_3 $$ DefaultListableBeanFactory lbf = new DefaultListableBeanFactory()-->Line_16 $$ assertTrue(lbf.isAutowireCandidate(JUERGEN, nonqualifiedDescriptor))[ FD ]
Line_6 $$ RootBeanDefinition person1 = new RootBeanDefinition(Person.class, cavs1, null)-->Line_8 $$ lbf.registerBeanDefinition(JUERGEN, person1)[ FD ]
