Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_10 $$ final AtomicInteger runningPercolateThreads = new AtomicInteger(numPercolateThreads)[ CD ]
Line_70 $$ int atLeastExpected-->Line_88 $$ atLeastExpected = type3.get()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_14 $$ final AtomicInteger idGen = new AtomicInteger()[ CD ]
Line_71 $$ PercolateResponse response-->Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_7 $$ final int numPercolatorOperationsPerThread = scaledRandomIntBetween(100, 1000)-->Line_68 $$ for (int counter = 0; counter < numPercolatorOperationsPerThread; counter++) [ FD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_91 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_74 $$ atLeastExpected = type1.get()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_77 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_76 $$ assertNoFailures(response)[ FD ]
Line_88 $$ atLeastExpected = type3.get()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_25 $$ while (runningPercolateThreads.get() > 0) -->Line_27 $$ int x = rand.nextInt(3)[ CD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_76 $$ assertNoFailures(response)[ FD ]
Line_29 $$ IndexResponse response-->Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_81 $$ atLeastExpected = type2.get()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_70 $$ int atLeastExpected-->Line_81 $$ atLeastExpected = type2.get()[ FD ]
Line_11 $$ final AtomicInteger type1 = new AtomicInteger()-->Line_33 $$ type1.incrementAndGet()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_117 $$ assertThat(exceptionsHolder.isEmpty(), equalTo(true))[ CD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_18 $$ Runnable r = new Runnable() [ CD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_47 $$ assertThat(response.getVersion(), equalTo(1l))[ FD ]
Line_59 $$ for (int i = 0; i < numPercolateThreads; i++) -->Line_104 $$ percolateThreads[i] = new Thread(r)[ CD ]
Line_29 $$ IndexResponse response-->Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()[ FD ]
Line_12 $$ final AtomicInteger type2 = new AtomicInteger()-->Line_81 $$ atLeastExpected = type2.get()[ FD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_71 $$ PercolateResponse response-->Line_84 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_90 $$ assertNoFailures(response)[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_29 $$ IndexResponse response-->Line_47 $$ assertThat(response.getVersion(), equalTo(1l))[ FD ]
Line_17 $$ final Random rand = new Random(getRandom().nextLong())-->Line_27 $$ int x = rand.nextInt(3)[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_77 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_74 $$ atLeastExpected = type1.get()-->Line_81 $$ atLeastExpected = type2.get()[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_77 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_68 $$ for (int counter = 0; counter < numPercolatorOperationsPerThread; counter++) -->Line_69 $$ int x = rand.nextInt(3)[ CD ]
Line_68 $$ for (int counter = 0; counter < numPercolatorOperationsPerThread; counter++) -->Line_70 $$ int atLeastExpected[ CD ]
Line_22 $$ XContentBuilder onlyField2 = XContentFactory.jsonBuilder().startObject().field("query", termQuery("field2", "value")).endObject()-->Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_83 $$ assertNoFailures(response)[ FD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_90 $$ assertNoFailures(response)[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_28 $$ String id = Integer.toString(idGen.incrementAndGet())-->Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_90 $$ assertNoFailures(response)[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_15 $$ Thread[] indexThreads = new Thread[numIndexThreads][ CD ]
Line_6 $$ final int numPercolateThreads = scaledRandomIntBetween(2, 6)-->Line_59 $$ for (int i = 0; i < numPercolateThreads; i++) [ FD ]
Line_29 $$ IndexResponse response-->Line_90 $$ assertNoFailures(response)[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_91 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_74 $$ atLeastExpected = type1.get()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_74 $$ atLeastExpected = type1.get()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_83 $$ assertNoFailures(response)[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_84 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_5 $$ final int numIndexThreads = scaledRandomIntBetween(1, 3)[ CD ]
Line_25 $$ while (runningPercolateThreads.get() > 0) -->Line_26 $$ Thread.sleep(100)[ CD ]
Line_71 $$ PercolateResponse response-->Line_90 $$ assertNoFailures(response)[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_10 $$ final AtomicInteger runningPercolateThreads = new AtomicInteger(numPercolateThreads)-->Line_25 $$ while (runningPercolateThreads.get() > 0) [ FD ]
Line_59 $$ for (int i = 0; i < numPercolateThreads; i++) -->Line_60 $$ final Random rand = new Random(getRandom().nextLong())[ CD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_28 $$ String id = Integer.toString(idGen.incrementAndGet())-->Line_46 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_71 $$ PercolateResponse response-->Line_77 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_9 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_24 $$ start.await()[ FD ]
Line_17 $$ final Random rand = new Random(getRandom().nextLong())-->Line_69 $$ int x = rand.nextInt(3)[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_7 $$ final int numPercolatorOperationsPerThread = scaledRandomIntBetween(100, 1000)[ CD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_16 $$ for (int i = 0; i < numIndexThreads; i++) [ CD ]
Line_29 $$ IndexResponse response-->Line_76 $$ assertNoFailures(response)[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_6 $$ final int numPercolateThreads = scaledRandomIntBetween(2, 6)[ CD ]
Line_29 $$ IndexResponse response-->Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_71 $$ PercolateResponse response-->Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_76 $$ assertNoFailures(response)[ FD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_84 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_12 $$ final AtomicInteger type2 = new AtomicInteger()-->Line_37 $$ type2.incrementAndGet()[ FD ]
Line_29 $$ IndexResponse response-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_9 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_67 $$ start.await()[ FD ]
Line_81 $$ atLeastExpected = type2.get()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_71 $$ PercolateResponse response-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_81 $$ atLeastExpected = type2.get()-->Line_88 $$ atLeastExpected = type3.get()[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_55 $$ indexThreads[i] = new Thread(r)[ CD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_46 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_71 $$ PercolateResponse response-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_29 $$ IndexResponse response-->Line_83 $$ assertNoFailures(response)[ FD ]
Line_29 $$ IndexResponse response-->Line_46 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_13 $$ final AtomicInteger type3 = new AtomicInteger()-->Line_88 $$ atLeastExpected = type3.get()[ FD ]
Line_23 $$ XContentBuilder field1And2 = XContentFactory.jsonBuilder().startObject().field("query", boolQuery().must(termQuery("field1", "value")).must(termQuery("field2", "value"))).endObject()-->Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_71 $$ PercolateResponse response-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_59 $$ for (int i = 0; i < numPercolateThreads; i++) [ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_47 $$ assertThat(response.getVersion(), equalTo(1l))[ FD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_91 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_71 $$ PercolateResponse response-->Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_17 $$ final Random rand = new Random(getRandom().nextLong())[ CD ]
Line_25 $$ while (runningPercolateThreads.get() > 0) -->Line_46 $$ assertThat(response.getId(), equalTo(id))[ CD ]
Line_29 $$ IndexResponse response-->Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_76 $$ assertNoFailures(response)[ FD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_90 $$ assertNoFailures(response)[ FD ]
Line_28 $$ String id = Integer.toString(idGen.incrementAndGet())-->Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_91 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_83 $$ assertNoFailures(response)[ FD ]
Line_10 $$ final AtomicInteger runningPercolateThreads = new AtomicInteger(numPercolateThreads)-->Line_100 $$ runningPercolateThreads.decrementAndGet()[ FD ]
Line_8 $$ final Set<Throwable> exceptionsHolder = ConcurrentCollections.newConcurrentSet()-->Line_117 $$ assertThat(exceptionsHolder.isEmpty(), equalTo(true))[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_3 $$ assertAcked(prepareCreate("index").addMapping("type", "field1", "type=string", "field2", "type=string"))[ CD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_83 $$ assertNoFailures(response)[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_74 $$ atLeastExpected = type1.get()-->Line_88 $$ atLeastExpected = type3.get()[ FD ]
Line_8 $$ final Set<Throwable> exceptionsHolder = ConcurrentCollections.newConcurrentSet()-->Line_50 $$ exceptionsHolder.add(t)[ FD ]
Line_28 $$ String id = Integer.toString(idGen.incrementAndGet())-->Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_83 $$ assertNoFailures(response)[ FD ]
Line_71 $$ PercolateResponse response-->Line_91 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_29 $$ IndexResponse response-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_91 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_68 $$ for (int counter = 0; counter < numPercolatorOperationsPerThread; counter++) -->Line_71 $$ PercolateResponse response[ CD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_12 $$ final AtomicInteger type2 = new AtomicInteger()[ CD ]
Line_64 $$ XContentBuilder onlyField1Doc = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", "value").endObject().endObject()-->Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_66 $$ XContentBuilder field1AndField2Doc = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", "value").field("field2", "value").endObject().endObject()-->Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_84 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_76 $$ assertNoFailures(response)[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_13 $$ final AtomicInteger type3 = new AtomicInteger()[ CD ]
Line_29 $$ IndexResponse response-->Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()[ FD ]
Line_9 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_107 $$ start.countDown()[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_13 $$ final AtomicInteger type3 = new AtomicInteger()-->Line_41 $$ type3.incrementAndGet()[ FD ]
Line_71 $$ PercolateResponse response-->Line_83 $$ assertNoFailures(response)[ FD ]
Line_70 $$ int atLeastExpected-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_29 $$ IndexResponse response-->Line_84 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_21 $$ XContentBuilder onlyField1 = XContentFactory.jsonBuilder().startObject().field("query", termQuery("field1", "value")).endObject()-->Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_77 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_9 $$ final CountDownLatch start = new CountDownLatch(1)[ CD ]
Line_70 $$ int atLeastExpected-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_29 $$ IndexResponse response-->Line_91 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_59 $$ for (int i = 0; i < numPercolateThreads; i++) -->Line_105 $$ percolateThreads[i].start()[ CD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_77 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_29 $$ IndexResponse response-->Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_71 $$ PercolateResponse response-->Line_76 $$ assertNoFailures(response)[ FD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_46 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_47 $$ assertThat(response.getVersion(), equalTo(1l))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_107 $$ start.countDown()[ CD ]
Line_8 $$ final Set<Throwable> exceptionsHolder = ConcurrentCollections.newConcurrentSet()-->Line_97 $$ exceptionsHolder.add(t)[ FD ]
Line_65 $$ XContentBuilder onlyField2Doc = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2", "value").endObject().endObject()-->Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_25 $$ while (runningPercolateThreads.get() > 0) -->Line_28 $$ String id = Integer.toString(idGen.incrementAndGet())[ CD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_90 $$ assertNoFailures(response)[ FD ]
Line_29 $$ IndexResponse response-->Line_77 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_8 $$ final Set<Throwable> exceptionsHolder = ConcurrentCollections.newConcurrentSet()[ CD ]
Line_29 $$ IndexResponse response-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_60 $$ final Random rand = new Random(getRandom().nextLong())-->Line_69 $$ int x = rand.nextInt(3)[ FD ]
Line_70 $$ int atLeastExpected-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_88 $$ atLeastExpected = type3.get()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_5 $$ final int numIndexThreads = scaledRandomIntBetween(1, 3)-->Line_16 $$ for (int i = 0; i < numIndexThreads; i++) [ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_76 $$ assertNoFailures(response)[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_84 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_36 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_91 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_25 $$ while (runningPercolateThreads.get() > 0) -->Line_29 $$ IndexResponse response[ CD ]
Line_25 $$ while (runningPercolateThreads.get() > 0) -->Line_47 $$ assertThat(response.getVersion(), equalTo(1l))[ CD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_85 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_90 $$ assertNoFailures(response)[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_56 $$ indexThreads[i].start()[ CD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_11 $$ final AtomicInteger type1 = new AtomicInteger()[ CD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_59 $$ for (int i = 0; i < numPercolateThreads; i++) [ CD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_84 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_40 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_84 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_59 $$ for (int i = 0; i < numPercolateThreads; i++) -->Line_61 $$ Runnable r = new Runnable() [ CD ]
Line_82 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_83 $$ assertNoFailures(response)[ FD ]
Line_70 $$ int atLeastExpected-->Line_74 $$ atLeastExpected = type1.get()[ FD ]
Line_32 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_46 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_14 $$ final AtomicInteger idGen = new AtomicInteger()-->Line_28 $$ String id = Integer.toString(idGen.incrementAndGet())[ FD ]
Line_81 $$ atLeastExpected = type2.get()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_88 $$ atLeastExpected = type3.get()-->Line_92 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_11 $$ final AtomicInteger type1 = new AtomicInteger()-->Line_74 $$ atLeastExpected = type1.get()[ FD ]
Line_89 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_77 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_75 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_78 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
