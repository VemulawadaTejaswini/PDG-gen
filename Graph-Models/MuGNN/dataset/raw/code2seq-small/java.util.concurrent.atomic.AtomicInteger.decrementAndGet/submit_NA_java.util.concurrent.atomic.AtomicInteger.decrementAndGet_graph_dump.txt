Line_3 $$ int currentTasksCount = myUpdatesCount.incrementAndGet()-->Line_18 $$ if (currentTasksCount > myLimit) [ FD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_9 $$ Boolean result = update.compute()[ FD ]
Line_18 $$ if (currentTasksCount > myLimit) -->Line_19 $$ Runnable runnable = myPendingWriteRequestsQueue.poll()[ CD ]
Line_10 $$ if (result == Boolean.TRUE) -->Line_11 $$ myTimestampUpdates.add(successRunnable)[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_11 $$ myTimestampUpdates.add(successRunnable)[ FD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_18 $$ if (currentTasksCount > myLimit) [ CD ]
Line_18 $$ if (currentTasksCount > myLimit) -->Line_21 $$ while (runnable != null) [ CD ]
Line_21 $$ while (runnable != null) -->Line_25 $$ runnable = myPendingWriteRequestsQueue.poll()[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_28 $$ int size = myTimestampUpdates.size()[ CD ]
Line_29 $$ if (size > myTimeStampUpdateSizeLimit) -->Line_30 $$ applyTimeStamps(size)[ CD ]
Line_21 $$ while (runnable != null) -->Line_23 $$ if (++processed == myStealLimit)[ CD ]
Line_21 $$ while (runnable != null) -->Line_22 $$ runnable.run()[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_4 $$ myPendingWriteRequestsQueue.add(new Runnable() [ CD ]
Line_9 $$ Boolean result = update.compute()-->Line_10 $$ if (result == Boolean.TRUE) [ FD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_3 $$ int currentTasksCount = myUpdatesCount.incrementAndGet()[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_29 $$ if (size > myTimeStampUpdateSizeLimit) [ CD ]
