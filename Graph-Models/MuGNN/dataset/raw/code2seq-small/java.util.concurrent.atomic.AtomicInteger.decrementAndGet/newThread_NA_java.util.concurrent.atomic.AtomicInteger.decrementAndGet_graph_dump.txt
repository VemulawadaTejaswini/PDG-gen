Line_2 $$ public Thread newThread(@NotNull Runnable r) -->Line_23 $$ thread.setPriority(Thread.NORM_PRIORITY - 1)[ CD ]
Line_4 $$ final Thread thread = new Thread(r, "ApplicationImpl pooled thread " + ourSeq.incrementAndGet()) -->Line_7 $$ super.interrupt()[ CD ]
Line_2 $$ public Thread newThread(@NotNull Runnable r) -->Line_3 $$ final int count = ourAliveThreads.incrementAndGet()[ CD ]
Line_19 $$ if (count > ourReasonableThreadPoolSize && ourLogDumps.getValue()) -->Line_21 $$ LOG.info("Not enough pooled threads" + (file != null ? "; dumped threads into file '" + file.getPath() + "'" : ""))[ CD ]
Line_4 $$ final Thread thread = new Thread(r, "ApplicationImpl pooled thread " + ourSeq.incrementAndGet()) -->Line_23 $$ thread.setPriority(Thread.NORM_PRIORITY - 1)[ FD ]
Line_19 $$ if (count > ourReasonableThreadPoolSize && ourLogDumps.getValue()) -->Line_20 $$ File file = PerformanceWatcher.getInstance().dumpThreads("newPooledThread/", true)[ CD ]
Line_4 $$ final Thread thread = new Thread(r, "ApplicationImpl pooled thread " + ourSeq.incrementAndGet()) -->Line_6 $$ LOG.debug("Interrupted worker, will remove from pool")[ CD ]
Line_2 $$ public Thread newThread(@NotNull Runnable r) -->Line_19 $$ if (count > ourReasonableThreadPoolSize && ourLogDumps.getValue()) [ CD ]
Line_2 $$ public Thread newThread(@NotNull Runnable r) -->Line_24 $$ return thread[ CD ]
Line_2 $$ public Thread newThread(@NotNull Runnable r) -->Line_4 $$ final Thread thread = new Thread(r, "ApplicationImpl pooled thread " + ourSeq.incrementAndGet()) [ CD ]
