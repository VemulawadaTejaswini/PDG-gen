Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxTasks)-->Line_25 $$ executor.waitAllTasksExecuted(5, TimeUnit.MINUTES)[ FD ]
Line_7 $$ AtomicInteger running = new AtomicInteger()-->Line_19 $$ running.decrementAndGet()[ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_30 $$ assertEquals(0, executor.shutdownNow().size())[ CD ]
Line_9 $$ AtomicInteger executed = new AtomicInteger()-->Line_35 $$ assertEquals(N, executed.get())[ FD ]
Line_8 $$ AtomicInteger max = new AtomicInteger()-->Line_34 $$ assertEquals(maxTasks, max.get())[ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_32 $$ backendExecutor.shutdownNow()[ CD ]
Line_11 $$ for (int i = 0; i < N; i++) -->Line_12 $$ executor.execute(() -> [ CD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_34 $$ assertEquals(maxTasks, max.get())[ FD ]
Line_8 $$ AtomicInteger max = new AtomicInteger()-->Line_16 $$ max.accumulateAndGet(r, Math::<>max)[ FD ]
Line_10 $$ int N = 10000-->Line_11 $$ for (int i = 0; i < N; i++) [ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_23 $$ UIUtil.invokeAndWaitIfNeeded((Runnable) () -> [ CD ]
Line_5 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory("maxTasks = " + maxTasks))-->Line_33 $$ assertTrue(backendExecutor.awaitTermination(100, TimeUnit.SECONDS))[ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxTasks)[ CD ]
Line_9 $$ AtomicInteger executed = new AtomicInteger()-->Line_17 $$ executed.incrementAndGet()[ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_5 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory("maxTasks = " + maxTasks))[ CD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_33 $$ assertTrue(backendExecutor.awaitTermination(100, TimeUnit.SECONDS))[ CD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_31 $$ assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS))[ CD ]
Line_13 $$ int r = running.incrementAndGet()-->Line_16 $$ max.accumulateAndGet(r, Math::<>max)[ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_10 $$ int N = 10000[ CD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_7 $$ AtomicInteger running = new AtomicInteger()[ CD ]
Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxTasks)-->Line_31 $$ assertTrue(executor.awaitTermination(10, TimeUnit.SECONDS))[ FD ]
Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxTasks)-->Line_12 $$ executor.execute(() -> [ FD ]
Line_10 $$ int N = 10000-->Line_35 $$ assertEquals(N, executed.get())[ FD ]
Line_2 $$ public void testReallyBound() throws InterruptedException, ExecutionException -->Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) [ CD ]
Line_7 $$ AtomicInteger running = new AtomicInteger()-->Line_13 $$ int r = running.incrementAndGet()[ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_11 $$ for (int i = 0; i < N; i++) [ CD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_4 $$ System.out.println("maxTasks = " + maxTasks)[ CD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_35 $$ assertEquals(N, executed.get())[ CD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_8 $$ AtomicInteger max = new AtomicInteger()[ CD ]
Line_5 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory("maxTasks = " + maxTasks))-->Line_32 $$ backendExecutor.shutdownNow()[ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_9 $$ AtomicInteger executed = new AtomicInteger()[ CD ]
Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxTasks)-->Line_30 $$ assertEquals(0, executor.shutdownNow().size())[ FD ]
Line_3 $$ for (int maxTasks = 1; maxTasks < 5; maxTasks++) -->Line_34 $$ assertEquals(maxTasks, max.get())[ CD ]
