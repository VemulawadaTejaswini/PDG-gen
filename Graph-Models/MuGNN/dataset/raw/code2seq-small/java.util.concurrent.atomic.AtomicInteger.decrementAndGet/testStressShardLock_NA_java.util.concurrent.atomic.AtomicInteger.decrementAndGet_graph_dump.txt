Line_55 $$ for (int i = 0; i < counts.length; i++) -->Line_57 $$ assertEquals(flipFlop[i].get(), 0)[ CD ]
Line_51 $$ for (int i = 0; i < threads.length; i++) -->Line_55 $$ for (int i = 0; i < counts.length; i++) [ FD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_20 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_18 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_51 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_21 $$ threads[i] = new Thread() -->Line_30 $$ for (int i = 0; i < iters; i++) [ CD ]
Line_12 $$ for (int i = 0; i < counts.length; i++) -->Line_20 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_20 $$ for (int i = 0; i < threads.length; i++) -->Line_30 $$ for (int i = 0; i < iters; i++) [ FD ]
Line_12 $$ for (int i = 0; i < counts.length; i++) -->Line_30 $$ for (int i = 0; i < iters; i++) [ FD ]
Line_12 $$ for (int i = 0; i < counts.length; i++) -->Line_55 $$ for (int i = 0; i < counts.length; i++) [ FD ]
Line_7 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_33 $$ try (ShardLock autoCloses = env.shardLock(new ShardId("foo", shard), scaledRandomIntBetween(0, 10))) [ FD ]
Line_18 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_26 $$ latch.await()[ FD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_55 $$ for (int i = 0; i < counts.length; i++) [ CD ]
Line_55 $$ for (int i = 0; i < counts.length; i++) -->Line_56 $$ assertTrue(counts[i].value > 0)[ CD ]
Line_20 $$ for (int i = 0; i < threads.length; i++) -->Line_21 $$ threads[i] = new Thread() [ CD ]
Line_51 $$ for (int i = 0; i < threads.length; i++) -->Line_52 $$ threads[i].join()[ CD ]
Line_7 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_54 $$ assertTrue("LockedShards: " + env.lockedShards(), env.lockedShards().isEmpty())[ FD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_8 $$ final int shards = randomIntBetween(2, 10)[ CD ]
Line_12 $$ for (int i = 0; i < counts.length; i++) -->Line_14 $$ countsAtomic[i] = new AtomicInteger()[ CD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_54 $$ assertTrue("LockedShards: " + env.lockedShards(), env.lockedShards().isEmpty())[ CD ]
Line_20 $$ for (int i = 0; i < threads.length; i++) -->Line_51 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_11 $$ final AtomicInteger[] flipFlop = new AtomicInteger[shards][ CD ]
Line_20 $$ for (int i = 0; i < threads.length; i++) -->Line_55 $$ for (int i = 0; i < counts.length; i++) [ FD ]
Line_30 $$ for (int i = 0; i < iters; i++) -->Line_31 $$ int shard = randomIntBetween(0, counts.length - 1)[ CD ]
Line_55 $$ for (int i = 0; i < counts.length; i++) -->Line_58 $$ assertEquals(counts[i].value, countsAtomic[i].get())[ CD ]
Line_12 $$ for (int i = 0; i < counts.length; i++) -->Line_15 $$ flipFlop[i] = new AtomicInteger()[ CD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_19 $$ final int iters = scaledRandomIntBetween(10000, 100000)[ CD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_60 $$ env.close()[ CD ]
Line_19 $$ final int iters = scaledRandomIntBetween(10000, 100000)-->Line_30 $$ for (int i = 0; i < iters; i++) [ FD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_10 $$ final AtomicInteger[] countsAtomic = new AtomicInteger[shards][ CD ]
Line_20 $$ for (int i = 0; i < threads.length; i++) -->Line_47 $$ threads[i].start()[ CD ]
Line_12 $$ for (int i = 0; i < counts.length; i++) -->Line_51 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_7 $$ final NodeEnvironment env = newNodeEnvironment()[ CD ]
Line_30 $$ for (int i = 0; i < iters; i++) -->Line_51 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_12 $$ for (int i = 0; i < counts.length; i++) [ CD ]
Line_12 $$ for (int i = 0; i < counts.length; i++) -->Line_13 $$ counts[i] = new Int()[ CD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_17 $$ Thread[] threads = new Thread[randomIntBetween(2, 5)][ CD ]
Line_7 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_60 $$ env.close()[ FD ]
Line_2 $$ public void testStressShardLock() throws IOException, InterruptedException -->Line_9 $$ final Int[] counts = new Int[shards][ CD ]
Line_30 $$ for (int i = 0; i < iters; i++) -->Line_55 $$ for (int i = 0; i < counts.length; i++) [ FD ]
