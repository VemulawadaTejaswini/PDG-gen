Line_3 $$ ValidationTask task = validating.remove(Pair.create(desc, endpoint))-->Line_4 $$ if (task == null) [ FD ]
Line_12 $$ if (validationRemaining.decrementAndGet() == 0) -->Line_13 $$ FailureDetector.instance.unregisterFailureDetectionEventListener(this)[ CD ]
Line_8 $$ String message = String.format("Received merkle tree for %s from %s", desc.columnFamily, endpoint)-->Line_9 $$ logger.info("[repair #[ FD ]
Line_8 $$ String message = String.format("Received merkle tree for %s from %s", desc.columnFamily, endpoint)-->Line_10 $$ Tracing.traceRepair(message)[ FD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_3 $$ ValidationTask task = validating.remove(Pair.create(desc, endpoint))[ CD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_4 $$ if (task == null) [ CD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_8 $$ String message = String.format("Received merkle tree for %s from %s", desc.columnFamily, endpoint)[ CD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_8 $$ String message = String.format("Received merkle tree for %s from %s", desc.columnFamily, endpoint)[ FD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_9 $$ logger.info("[repair #[ CD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_3 $$ ValidationTask task = validating.remove(Pair.create(desc, endpoint))[ FD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_10 $$ Tracing.traceRepair(message)[ CD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_11 $$ task.treesReceived(trees)[ CD ]
Line_3 $$ ValidationTask task = validating.remove(Pair.create(desc, endpoint))-->Line_11 $$ task.treesReceived(trees)[ FD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_12 $$ if (validationRemaining.decrementAndGet() == 0) [ CD ]
Line_2 $$ public void validationComplete(RepairJobDesc desc, InetAddress endpoint, MerkleTrees trees) -->Line_11 $$ task.treesReceived(trees)[ FD ]
Line_4 $$ if (task == null) -->Line_6 $$ return[ CD ]
