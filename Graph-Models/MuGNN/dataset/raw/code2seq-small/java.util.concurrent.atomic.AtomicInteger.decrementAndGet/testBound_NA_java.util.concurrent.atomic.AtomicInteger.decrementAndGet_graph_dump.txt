Line_14 $$ if (count < 1 || count > maxThreads) -->Line_15 $$ failed.set(true)[ CD ]
Line_6 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)-->Line_19 $$ completeLatch.countDown()[ FD ]
Line_7 $$ AtomicBoolean failed = new AtomicBoolean()-->Line_26 $$ assertFalse(failed.get())[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_6 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)[ CD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_26 $$ assertFalse(failed.get())[ CD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_7 $$ AtomicBoolean failed = new AtomicBoolean()[ CD ]
Line_4 $$ AtomicInteger activeThreadCount = new AtomicInteger()-->Line_13 $$ int count = activeThreadCount.incrementAndGet()[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_5 $$ CountDownLatch startLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_25 $$ awaitUninterruptibly(completeLatch, 1, TimeUnit.MINUTES)[ CD ]
Line_6 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)-->Line_25 $$ awaitUninterruptibly(completeLatch, 1, TimeUnit.MINUTES)[ FD ]
Line_8 $$ for (int i = 0; i < totalTasks; i++) -->Line_9 $$ boundedExecutor.submit(() -> [ CD ]
Line_7 $$ AtomicBoolean failed = new AtomicBoolean()-->Line_15 $$ failed.set(true)[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_8 $$ for (int i = 0; i < totalTasks; i++) [ CD ]
Line_3 $$ PrioritizedFifoExecutor<Runnable> boundedExecutor = new PrioritizedFifoExecutor(executor, maxThreads, DUMMY_COMPARATOR)-->Line_9 $$ boundedExecutor.submit(() -> [ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_4 $$ AtomicInteger activeThreadCount = new AtomicInteger()[ CD ]
Line_4 $$ AtomicInteger activeThreadCount = new AtomicInteger()-->Line_17 $$ activeThreadCount.decrementAndGet()[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_3 $$ PrioritizedFifoExecutor<Runnable> boundedExecutor = new PrioritizedFifoExecutor(executor, maxThreads, DUMMY_COMPARATOR)[ CD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_8 $$ for (int i = 0; i < totalTasks; i++) [ FD ]
