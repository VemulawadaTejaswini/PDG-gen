Line_11 $$ final CopyOnWriteArrayList<VerificationFailure> errors = new CopyOnWriteArrayList()-->Line_19 $$ errors.add(new VerificationFailure(node.id(), t))[ FD ]
Line_3 $$ final DiscoveryNodes discoNodes = clusterService.state().nodes()-->Line_4 $$ final DiscoveryNode localNode = discoNodes.localNode()[ FD ]
Line_11 $$ final CopyOnWriteArrayList<VerificationFailure> errors = new CopyOnWriteArrayList()-->Line_38 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_8 $$ DiscoveryNode node = cursor.value-->Line_36 $$ errors.add(new VerificationFailure(node.id(), exp))[ FD ]
Line_29 $$ if (counter.decrementAndGet() == 0) -->Line_30 $$ finishVerification(listener, nodes, errors)[ CD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_11 $$ final CopyOnWriteArrayList<VerificationFailure> errors = new CopyOnWriteArrayList()[ CD ]
Line_25 $$ transportService.sendRequest(node, ACTION_NAME, new VerifyNodeRepositoryRequest(repository, verificationToken), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) -->Line_37 $$ if (counter.decrementAndGet() == 0) [ CD ]
Line_8 $$ DiscoveryNode node = cursor.value-->Line_9 $$ nodes.add(node)[ FD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_18 $$ logger.warn("[[ FD ]
Line_12 $$ final AtomicInteger counter = new AtomicInteger(nodes.size())-->Line_37 $$ if (counter.decrementAndGet() == 0) [ FD ]
Line_3 $$ final DiscoveryNodes discoNodes = clusterService.state().nodes()-->Line_5 $$ final ObjectContainer<DiscoveryNode> masterAndDataNodes = discoNodes.masterAndDataNodes().values()[ FD ]
Line_6 $$ final List<DiscoveryNode> nodes = new ArrayList()-->Line_22 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_8 $$ DiscoveryNode node = cursor.value-->Line_25 $$ transportService.sendRequest(node, ACTION_NAME, new VerifyNodeRepositoryRequest(repository, verificationToken), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) [ FD ]
Line_37 $$ if (counter.decrementAndGet() == 0) -->Line_38 $$ finishVerification(listener, nodes, errors)[ CD ]
Line_12 $$ final AtomicInteger counter = new AtomicInteger(nodes.size())-->Line_21 $$ if (counter.decrementAndGet() == 0) [ FD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_16 $$ doVerify(repository, verificationToken)[ FD ]
Line_21 $$ if (counter.decrementAndGet() == 0) -->Line_22 $$ finishVerification(listener, nodes, errors)[ CD ]
Line_12 $$ final AtomicInteger counter = new AtomicInteger(nodes.size())-->Line_29 $$ if (counter.decrementAndGet() == 0) [ FD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_30 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_5 $$ final ObjectContainer<DiscoveryNode> masterAndDataNodes = discoNodes.masterAndDataNodes().values()[ CD ]
Line_6 $$ final List<DiscoveryNode> nodes = new ArrayList()-->Line_9 $$ nodes.add(node)[ FD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_4 $$ final DiscoveryNode localNode = discoNodes.localNode()[ CD ]
Line_11 $$ final CopyOnWriteArrayList<VerificationFailure> errors = new CopyOnWriteArrayList()-->Line_30 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_11 $$ final CopyOnWriteArrayList<VerificationFailure> errors = new CopyOnWriteArrayList()-->Line_36 $$ errors.add(new VerificationFailure(node.id(), exp))[ FD ]
Line_6 $$ final List<DiscoveryNode> nodes = new ArrayList()-->Line_38 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_8 $$ DiscoveryNode node = cursor.value-->Line_19 $$ errors.add(new VerificationFailure(node.id(), t))[ FD ]
Line_8 $$ DiscoveryNode node = cursor.value-->Line_14 $$ if (node.equals(localNode)) [ FD ]
Line_25 $$ transportService.sendRequest(node, ACTION_NAME, new VerifyNodeRepositoryRequest(repository, verificationToken), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) -->Line_29 $$ if (counter.decrementAndGet() == 0) [ CD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_38 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_14 $$ if (node.equals(localNode)) -->Line_21 $$ if (counter.decrementAndGet() == 0) [ CD ]
Line_6 $$ final List<DiscoveryNode> nodes = new ArrayList()-->Line_30 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_6 $$ final List<DiscoveryNode> nodes = new ArrayList()-->Line_12 $$ final AtomicInteger counter = new AtomicInteger(nodes.size())[ FD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_6 $$ final List<DiscoveryNode> nodes = new ArrayList()[ CD ]
Line_11 $$ final CopyOnWriteArrayList<VerificationFailure> errors = new CopyOnWriteArrayList()-->Line_22 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_25 $$ transportService.sendRequest(node, ACTION_NAME, new VerifyNodeRepositoryRequest(repository, verificationToken), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) -->Line_36 $$ errors.add(new VerificationFailure(node.id(), exp))[ CD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_22 $$ finishVerification(listener, nodes, errors)[ FD ]
Line_4 $$ final DiscoveryNode localNode = discoNodes.localNode()-->Line_14 $$ if (node.equals(localNode)) [ FD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_3 $$ final DiscoveryNodes discoNodes = clusterService.state().nodes()[ CD ]
Line_14 $$ if (node.equals(localNode)) -->Line_25 $$ transportService.sendRequest(node, ACTION_NAME, new VerifyNodeRepositoryRequest(repository, verificationToken), new EmptyTransportResponseHandler(ThreadPool.Names.SAME) [ CD ]
Line_2 $$ public void verify(String repository, String verificationToken, final ActionListener<VerifyResponse> listener) -->Line_12 $$ final AtomicInteger counter = new AtomicInteger(nodes.size())[ CD ]
