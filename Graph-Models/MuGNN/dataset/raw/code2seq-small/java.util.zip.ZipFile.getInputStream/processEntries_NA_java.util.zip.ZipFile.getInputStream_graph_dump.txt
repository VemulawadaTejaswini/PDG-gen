Line_15 $$ while (entries.hasMoreElements()) -->Line_16 $$ ZipEntry entry = entries.nextElement()[ CD ]
Line_15 $$ while (entries.hasMoreElements()) -->Line_18 $$ if (name.startsWith(prefix)) [ CD ]
Line_12 $$ ZipFile zipFile = new ZipFile(myRoot)-->Line_26 $$ zipFile.close()[ FD ]
Line_2 $$ public void processEntries(EntryProcessor processor) throws IOException -->Line_5 $$ String prefix = StringUtil.trimStart(myPathInJar, "/")[ CD ]
Line_20 $$ if (myPathInJarFilter.value(relativePath)) -->Line_21 $$ processor.process(entry.isDirectory() ? null : zipFile.getInputStream(entry), relativePath, entry)[ CD ]
Line_19 $$ String relativePath = name.substring(prefix.length())-->Line_21 $$ processor.process(entry.isDirectory() ? null : zipFile.getInputStream(entry), relativePath, entry)[ FD ]
Line_5 $$ String prefix = StringUtil.trimStart(myPathInJar, "/")-->Line_9 $$ prefix = ""[ FD ]
Line_5 $$ String prefix = StringUtil.trimStart(myPathInJar, "/")-->Line_7 $$ prefix += "/"[ FD ]
Line_6 $$ if (!StringUtil.endsWithChar(prefix, '/'))-->Line_7 $$ prefix += "/"[ CD ]
Line_18 $$ if (name.startsWith(prefix)) -->Line_20 $$ if (myPathInJarFilter.value(relativePath)) [ CD ]
Line_3 $$ if (!myRoot.isFile())-->Line_4 $$ return[ CD ]
Line_5 $$ String prefix = StringUtil.trimStart(myPathInJar, "/")-->Line_19 $$ String relativePath = name.substring(prefix.length())[ FD ]
Line_7 $$ prefix += "/"-->Line_19 $$ String relativePath = name.substring(prefix.length())[ FD ]
Line_7 $$ prefix += "/"-->Line_8 $$ if (prefix.equals("/")) [ FD ]
Line_12 $$ ZipFile zipFile = new ZipFile(myRoot)-->Line_14 $$ final Enumeration<? extends ZipEntry> entries = zipFile.entries()[ FD ]
Line_2 $$ public void processEntries(EntryProcessor processor) throws IOException -->Line_3 $$ if (!myRoot.isFile())[ CD ]
Line_2 $$ public void processEntries(EntryProcessor processor) throws IOException -->Line_8 $$ if (prefix.equals("/")) [ CD ]
Line_16 $$ ZipEntry entry = entries.nextElement()-->Line_17 $$ final String name = entry.getName()[ FD ]
Line_5 $$ String prefix = StringUtil.trimStart(myPathInJar, "/")-->Line_18 $$ if (name.startsWith(prefix)) [ FD ]
Line_12 $$ ZipFile zipFile = new ZipFile(myRoot)-->Line_21 $$ processor.process(entry.isDirectory() ? null : zipFile.getInputStream(entry), relativePath, entry)[ FD ]
Line_7 $$ prefix += "/"-->Line_18 $$ if (name.startsWith(prefix)) [ FD ]
Line_14 $$ final Enumeration<? extends ZipEntry> entries = zipFile.entries()-->Line_15 $$ while (entries.hasMoreElements()) [ FD ]
Line_14 $$ final Enumeration<? extends ZipEntry> entries = zipFile.entries()-->Line_16 $$ ZipEntry entry = entries.nextElement()[ FD ]
Line_15 $$ while (entries.hasMoreElements()) -->Line_17 $$ final String name = entry.getName()[ CD ]
Line_5 $$ String prefix = StringUtil.trimStart(myPathInJar, "/")-->Line_6 $$ if (!StringUtil.endsWithChar(prefix, '/'))[ FD ]
Line_8 $$ if (prefix.equals("/")) -->Line_9 $$ prefix = ""[ CD ]
Line_9 $$ prefix = ""-->Line_19 $$ String relativePath = name.substring(prefix.length())[ FD ]
Line_17 $$ final String name = entry.getName()-->Line_18 $$ if (name.startsWith(prefix)) [ FD ]
Line_5 $$ String prefix = StringUtil.trimStart(myPathInJar, "/")-->Line_8 $$ if (prefix.equals("/")) [ FD ]
Line_2 $$ public void processEntries(EntryProcessor processor) throws IOException -->Line_21 $$ processor.process(entry.isDirectory() ? null : zipFile.getInputStream(entry), relativePath, entry)[ FD ]
Line_2 $$ public void processEntries(EntryProcessor processor) throws IOException -->Line_6 $$ if (!StringUtil.endsWithChar(prefix, '/'))[ CD ]
Line_16 $$ ZipEntry entry = entries.nextElement()-->Line_21 $$ processor.process(entry.isDirectory() ? null : zipFile.getInputStream(entry), relativePath, entry)[ FD ]
Line_7 $$ prefix += "/"-->Line_9 $$ prefix = ""[ FD ]
Line_17 $$ final String name = entry.getName()-->Line_19 $$ String relativePath = name.substring(prefix.length())[ FD ]
Line_18 $$ if (name.startsWith(prefix)) -->Line_19 $$ String relativePath = name.substring(prefix.length())[ CD ]
Line_19 $$ String relativePath = name.substring(prefix.length())-->Line_20 $$ if (myPathInJarFilter.value(relativePath)) [ FD ]
Line_9 $$ prefix = ""-->Line_18 $$ if (name.startsWith(prefix)) [ FD ]
