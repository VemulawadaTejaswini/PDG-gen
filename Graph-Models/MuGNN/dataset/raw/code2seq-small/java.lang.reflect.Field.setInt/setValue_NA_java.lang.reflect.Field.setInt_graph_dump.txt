Line_3 $$ if (PROGRAMMATIC_IMPORT_KEY.equalsIgnoreCase(fieldName)) -->Line_4 $$ setProgrammatically(object, key, value)[ CD ]
Line_9 $$ Class<?> fieldType = targetField.getType()-->Line_10 $$ if (fieldType.isPrimitive()) [ FD ]
Line_3 $$ if (PROGRAMMATIC_IMPORT_KEY.equalsIgnoreCase(fieldName)) -->Line_5 $$ return[ CD ]
Line_2 $$ private static void setValue(Object object, String key, String fieldName, String value) throws SchemeImportException -->Line_8 $$ Field targetField = object.getClass().getField(fieldName)[ FD ]
Line_2 $$ private static void setValue(Object object, String key, String fieldName, String value) throws SchemeImportException -->Line_4 $$ setProgrammatically(object, key, value)[ FD ]
Line_2 $$ private static void setValue(Object object, String key, String fieldName, String value) throws SchemeImportException -->Line_3 $$ if (PROGRAMMATIC_IMPORT_KEY.equalsIgnoreCase(fieldName)) [ FD ]
Line_11 $$ if (Boolean.TYPE.equals(fieldType)) -->Line_13 $$ if (Integer.TYPE.equals(fieldType)) [ CD ]
Line_10 $$ if (fieldType.isPrimitive()) -->Line_11 $$ if (Boolean.TYPE.equals(fieldType)) [ CD ]
Line_8 $$ Field targetField = object.getClass().getField(fieldName)-->Line_9 $$ Class<?> fieldType = targetField.getType()[ FD ]
Line_13 $$ if (Integer.TYPE.equals(fieldType)) -->Line_14 $$ targetField.setInt(object, valueToInt(value))[ CD ]
Line_8 $$ Field targetField = object.getClass().getField(fieldName)-->Line_14 $$ targetField.setInt(object, valueToInt(value))[ FD ]
Line_2 $$ private static void setValue(Object object, String key, String fieldName, String value) throws SchemeImportException -->Line_3 $$ if (PROGRAMMATIC_IMPORT_KEY.equalsIgnoreCase(fieldName)) [ CD ]
Line_10 $$ if (fieldType.isPrimitive()) -->Line_16 $$ if (fieldType.equals(String.class)) [ CD ]
Line_8 $$ Field targetField = object.getClass().getField(fieldName)-->Line_12 $$ targetField.setBoolean(object, valueToBoolean(key, value))[ FD ]
Line_16 $$ if (fieldType.equals(String.class)) -->Line_17 $$ targetField.set(object, value)[ CD ]
Line_9 $$ Class<?> fieldType = targetField.getType()-->Line_13 $$ if (Integer.TYPE.equals(fieldType)) [ FD ]
Line_2 $$ private static void setValue(Object object, String key, String fieldName, String value) throws SchemeImportException -->Line_17 $$ targetField.set(object, value)[ FD ]
Line_2 $$ private static void setValue(Object object, String key, String fieldName, String value) throws SchemeImportException -->Line_22 $$ LOG.error("Field '" + fieldName + "' does not exist in " + object.getClass().getName(), e)[ FD ]
Line_9 $$ Class<?> fieldType = targetField.getType()-->Line_16 $$ if (fieldType.equals(String.class)) [ FD ]
Line_2 $$ private static void setValue(Object object, String key, String fieldName, String value) throws SchemeImportException -->Line_14 $$ targetField.setInt(object, valueToInt(value))[ FD ]
Line_2 $$ private static void setValue(Object object, String key, String fieldName, String value) throws SchemeImportException -->Line_12 $$ targetField.setBoolean(object, valueToBoolean(key, value))[ FD ]
Line_11 $$ if (Boolean.TYPE.equals(fieldType)) -->Line_12 $$ targetField.setBoolean(object, valueToBoolean(key, value))[ CD ]
Line_9 $$ Class<?> fieldType = targetField.getType()-->Line_11 $$ if (Boolean.TYPE.equals(fieldType)) [ FD ]
Line_8 $$ Field targetField = object.getClass().getField(fieldName)-->Line_17 $$ targetField.set(object, value)[ FD ]
