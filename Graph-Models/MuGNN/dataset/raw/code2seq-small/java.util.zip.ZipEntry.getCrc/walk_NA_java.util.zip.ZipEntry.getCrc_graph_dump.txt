Line_16 $$ final BufferedInputStream bis = new BufferedInputStream(zipStream) -->Line_22 $$ bis.mark(Integer.MAX_VALUE)[ FD ]
Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()-->Line_13 $$ builder.setSize(entry.getSize())[ FD ]
Line_26 $$ ImmutableList<String> nextParentPaths = ImmutableList.<String>builder().addAll(parentPaths).add(entry.getName()).build()-->Line_27 $$ ImmutableSet<ArchiveEntry> subEntries = walk(bis, allEntries, nextParentPaths)[ FD ]
Line_7 $$ while (entry != null) -->Line_34 $$ zipStream.closeEntry()[ CD ]
Line_7 $$ while (entry != null) -->Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()[ CD ]
Line_4 $$ ZipInputStream zipStream = new ZipInputStream(archiveInputStream)-->Line_6 $$ ZipEntry entry = zipStream.getNextEntry()[ FD ]
Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()-->Line_12 $$ builder.setDirectory(entry.isDirectory())[ FD ]
Line_2 $$ private ImmutableSet<ArchiveEntry> walk(InputStream archiveInputStream, ImmutableSet.Builder<ArchiveEntry> allEntries, ImmutableList<String> parentPaths) -->Line_27 $$ ImmutableSet<ArchiveEntry> subEntries = walk(bis, allEntries, nextParentPaths)[ FD ]
Line_31 $$ ArchiveEntry archiveEntry = builder.build()-->Line_32 $$ entries.add(archiveEntry)[ FD ]
Line_27 $$ ImmutableSet<ArchiveEntry> subEntries = walk(bis, allEntries, nextParentPaths)-->Line_28 $$ builder.setSubEntries(subEntries)[ FD ]
Line_2 $$ private ImmutableSet<ArchiveEntry> walk(InputStream archiveInputStream, ImmutableSet.Builder<ArchiveEntry> allEntries, ImmutableList<String> parentPaths) -->Line_42 $$ return entries.build()[ CD ]
Line_7 $$ while (entry != null) -->Line_11 $$ builder.setCrc(entry.getCrc())[ CD ]
Line_7 $$ while (entry != null) -->Line_13 $$ builder.setSize(entry.getSize())[ CD ]
Line_6 $$ ZipEntry entry = zipStream.getNextEntry()-->Line_12 $$ builder.setDirectory(entry.isDirectory())[ FD ]
Line_4 $$ ZipInputStream zipStream = new ZipInputStream(archiveInputStream)-->Line_35 $$ entry = zipStream.getNextEntry()[ FD ]
Line_6 $$ ZipEntry entry = zipStream.getNextEntry()-->Line_7 $$ while (entry != null) [ FD ]
Line_14 $$ if (!builder.isDirectory() && (zipStream.available() == 1)) -->Line_22 $$ bis.mark(Integer.MAX_VALUE)[ CD ]
Line_14 $$ if (!builder.isDirectory() && (zipStream.available() == 1)) -->Line_24 $$ bis.reset()[ CD ]
Line_14 $$ if (!builder.isDirectory() && (zipStream.available() == 1)) -->Line_16 $$ final BufferedInputStream bis = new BufferedInputStream(zipStream) [ CD ]
Line_6 $$ ZipEntry entry = zipStream.getNextEntry()-->Line_13 $$ builder.setSize(entry.getSize())[ FD ]
Line_16 $$ final BufferedInputStream bis = new BufferedInputStream(zipStream) -->Line_27 $$ ImmutableSet<ArchiveEntry> subEntries = walk(bis, allEntries, nextParentPaths)[ FD ]
Line_2 $$ private ImmutableSet<ArchiveEntry> walk(InputStream archiveInputStream, ImmutableSet.Builder<ArchiveEntry> allEntries, ImmutableList<String> parentPaths) -->Line_26 $$ ImmutableList<String> nextParentPaths = ImmutableList.<String>builder().addAll(parentPaths).add(entry.getName()).build()[ FD ]
Line_6 $$ ZipEntry entry = zipStream.getNextEntry()-->Line_11 $$ builder.setCrc(entry.getCrc())[ FD ]
Line_25 $$ if (zipEntry) -->Line_28 $$ builder.setSubEntries(subEntries)[ CD ]
Line_7 $$ while (entry != null) -->Line_31 $$ ArchiveEntry archiveEntry = builder.build()[ CD ]
Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()-->Line_28 $$ builder.setSubEntries(subEntries)[ FD ]
Line_2 $$ private ImmutableSet<ArchiveEntry> walk(InputStream archiveInputStream, ImmutableSet.Builder<ArchiveEntry> allEntries, ImmutableList<String> parentPaths) -->Line_3 $$ ImmutableSet.Builder<ArchiveEntry> entries = ImmutableSet.builder()[ CD ]
Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()-->Line_10 $$ builder.setPath(entry.getName())[ FD ]
Line_2 $$ private ImmutableSet<ArchiveEntry> walk(InputStream archiveInputStream, ImmutableSet.Builder<ArchiveEntry> allEntries, ImmutableList<String> parentPaths) -->Line_9 $$ builder.setParentPaths(parentPaths)[ FD ]
Line_7 $$ while (entry != null) -->Line_32 $$ entries.add(archiveEntry)[ CD ]
Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()-->Line_31 $$ ArchiveEntry archiveEntry = builder.build()[ FD ]
Line_31 $$ ArchiveEntry archiveEntry = builder.build()-->Line_33 $$ allEntries.add(archiveEntry)[ FD ]
Line_14 $$ if (!builder.isDirectory() && (zipStream.available() == 1)) -->Line_25 $$ if (zipEntry) [ CD ]
Line_7 $$ while (entry != null) -->Line_35 $$ entry = zipStream.getNextEntry()[ CD ]
Line_2 $$ private ImmutableSet<ArchiveEntry> walk(InputStream archiveInputStream, ImmutableSet.Builder<ArchiveEntry> allEntries, ImmutableList<String> parentPaths) -->Line_4 $$ ZipInputStream zipStream = new ZipInputStream(archiveInputStream)[ CD ]
Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()-->Line_11 $$ builder.setCrc(entry.getCrc())[ FD ]
Line_6 $$ ZipEntry entry = zipStream.getNextEntry()-->Line_10 $$ builder.setPath(entry.getName())[ FD ]
Line_4 $$ ZipInputStream zipStream = new ZipInputStream(archiveInputStream)-->Line_14 $$ if (!builder.isDirectory() && (zipStream.available() == 1)) [ FD ]
Line_4 $$ ZipInputStream zipStream = new ZipInputStream(archiveInputStream)-->Line_34 $$ zipStream.closeEntry()[ FD ]
Line_7 $$ while (entry != null) -->Line_33 $$ allEntries.add(archiveEntry)[ CD ]
Line_2 $$ private ImmutableSet<ArchiveEntry> walk(InputStream archiveInputStream, ImmutableSet.Builder<ArchiveEntry> allEntries, ImmutableList<String> parentPaths) -->Line_33 $$ allEntries.add(archiveEntry)[ FD ]
Line_16 $$ final BufferedInputStream bis = new BufferedInputStream(zipStream) -->Line_24 $$ bis.reset()[ FD ]
Line_14 $$ if (!builder.isDirectory() && (zipStream.available() == 1)) -->Line_15 $$ boolean zipEntry[ CD ]
Line_7 $$ while (entry != null) -->Line_14 $$ if (!builder.isDirectory() && (zipStream.available() == 1)) [ CD ]
Line_6 $$ ZipEntry entry = zipStream.getNextEntry()-->Line_26 $$ ImmutableList<String> nextParentPaths = ImmutableList.<String>builder().addAll(parentPaths).add(entry.getName()).build()[ FD ]
Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()-->Line_14 $$ if (!builder.isDirectory() && (zipStream.available() == 1)) [ FD ]
Line_8 $$ ArchiveEntry.Builder builder = new ArchiveEntry.Builder()-->Line_9 $$ builder.setParentPaths(parentPaths)[ FD ]
Line_4 $$ ZipInputStream zipStream = new ZipInputStream(archiveInputStream)-->Line_40 $$ IOUtils.closeQuietly(zipStream)[ FD ]
Line_7 $$ while (entry != null) -->Line_9 $$ builder.setParentPaths(parentPaths)[ CD ]
Line_3 $$ ImmutableSet.Builder<ArchiveEntry> entries = ImmutableSet.builder()-->Line_42 $$ return entries.build()[ FD ]
Line_7 $$ while (entry != null) -->Line_12 $$ builder.setDirectory(entry.isDirectory())[ CD ]
Line_25 $$ if (zipEntry) -->Line_26 $$ ImmutableList<String> nextParentPaths = ImmutableList.<String>builder().addAll(parentPaths).add(entry.getName()).build()[ CD ]
Line_7 $$ while (entry != null) -->Line_10 $$ builder.setPath(entry.getName())[ CD ]
Line_3 $$ ImmutableSet.Builder<ArchiveEntry> entries = ImmutableSet.builder()-->Line_32 $$ entries.add(archiveEntry)[ FD ]
Line_25 $$ if (zipEntry) -->Line_27 $$ ImmutableSet<ArchiveEntry> subEntries = walk(bis, allEntries, nextParentPaths)[ CD ]
