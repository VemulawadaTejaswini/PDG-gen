Line_36 $$ if (property.isImportant()) -->Line_37 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)[ CD ]
Line_31 $$ if (column == 0) -->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ CD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_11 $$ renderer.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ FD ]
Line_4 $$ column = table.convertColumnIndexToModel(column)-->Line_10 $$ renderer.getTableCellRendererComponent(table, value, selected, cellHasFocus, row, column)[ FD ]
Line_31 $$ if (column == 0) -->Line_36 $$ if (property.isImportant()) [ CD ]
Line_5 $$ Property property = (Property) value-->Line_53 $$ boolean hasChildren = !getChildren(property).isEmpty()[ FD ]
Line_45 $$ ErrorInfo errorInfo = getErrorInfoForRow(row)-->Line_46 $$ if (errorInfo != null) [ FD ]
Line_66 $$ PropertyRenderer valueRenderer = property.getRenderer()-->Line_67 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)[ FD ]
Line_32 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_43 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ FD ]
Line_4 $$ column = table.convertColumnIndexToModel(column)-->Line_31 $$ if (column == 0) [ FD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_15 $$ renderer.append(property.getName())[ FD ]
Line_31 $$ if (column == 0) -->Line_52 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)[ CD ]
Line_8 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)-->Line_67 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)[ FD ]
Line_57 $$ if (hasChildren) -->Line_60 $$ indent += icon.getIconWidth() + indents.second[ CD ]
Line_39 $$ if (property.isExpert()) -->Line_40 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)[ CD ]
Line_5 $$ Property property = (Property) value-->Line_66 $$ PropertyRenderer valueRenderer = property.getRenderer()[ FD ]
Line_52 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)-->Line_60 $$ indent += icon.getIconWidth() + indents.second[ FD ]
Line_5 $$ Property property = (Property) value-->Line_67 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)[ FD ]
Line_31 $$ if (column == 0) -->Line_46 $$ if (errorInfo != null) [ CD ]
Line_32 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_34 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)[ FD ]
Line_8 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)-->Line_11 $$ renderer.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ FD ]
Line_42 $$ if (property.isDeprecated()) -->Line_43 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ CD ]
Line_31 $$ if (column == 0) -->Line_39 $$ if (property.isExpert()) [ CD ]
Line_32 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_40 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)[ FD ]
Line_37 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)-->Line_43 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ FD ]
Line_67 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)-->Line_70 $$ if (component instanceof JCheckBox) [ FD ]
Line_31 $$ if (column == 0) -->Line_45 $$ ErrorInfo errorInfo = getErrorInfoForRow(row)[ CD ]
Line_31 $$ if (column == 0) -->Line_63 $$ return renderer[ CD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_13 $$ renderer.setIpad(new Insets(0, 5, 0, 0))[ FD ]
Line_12 $$ if (property instanceof GroupProperty) -->Line_17 $$ return renderer[ CD ]
Line_7 $$ Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_8 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)[ FD ]
Line_40 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)-->Line_43 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ FD ]
Line_40 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)-->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_5 $$ Property property = (Property) value-->Line_39 $$ if (property.isExpert()) [ FD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_76 $$ renderer.append(MessageFormat.format("Error getting value: [ FD ]
Line_19 $$ boolean isDefault = true-->Line_23 $$ isDefault = false[ FD ]
Line_67 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)-->Line_71 $$ component.putClientProperty("JComponent.sizeVariant", UIUtil.isUnderAquaLookAndFeel() ? "small" : null)[ FD ]
Line_8 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)-->Line_52 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)[ FD ]
Line_31 $$ if (column == 0) -->Line_54 $$ renderer.setIcon(hasChildren ? icon : null)[ CD ]
Line_5 $$ Property property = (Property) value-->Line_12 $$ if (property instanceof GroupProperty) [ FD ]
Line_23 $$ isDefault = false-->Line_33 $$ if (!selected && !isDefault) [ FD ]
Line_45 $$ ErrorInfo errorInfo = getErrorInfoForRow(row)-->Line_47 $$ SimpleTextAttributes template = SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())))[ FD ]
Line_34 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_49 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_43 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)-->Line_49 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_58 $$ renderer.setIconTextGap(indents.second)[ FD ]
Line_5 $$ Property property = (Property) value-->Line_42 $$ if (property.isDeprecated()) [ FD ]
Line_56 $$ int indent = indents.first-->Line_60 $$ indent += icon.getIconWidth() + indents.second[ FD ]
Line_34 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_40 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)[ FD ]
Line_31 $$ if (column == 0) -->Line_32 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES[ CD ]
Line_22 $$ if (!property.showAsDefault(container)) -->Line_23 $$ isDefault = false[ CD ]
Line_34 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_31 $$ if (column == 0) -->Line_53 $$ boolean hasChildren = !getChildren(property).isEmpty()[ CD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_46 $$ if (errorInfo != null) -->Line_47 $$ SimpleTextAttributes template = SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())))[ CD ]
Line_8 $$ boolean tableHasFocus = focusOwner != null && SwingUtilities.isDescendingFrom(focusOwner, table)-->Line_68 $$ component.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ FD ]
Line_4 $$ column = table.convertColumnIndexToModel(column)-->Line_14 $$ if (column == 0) [ FD ]
Line_19 $$ boolean isDefault = true-->Line_33 $$ if (!selected && !isDefault) [ FD ]
Line_12 $$ if (property instanceof GroupProperty) -->Line_14 $$ if (column == 0) [ CD ]
Line_67 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)-->Line_69 $$ component.setFont(table.getFont())[ FD ]
Line_21 $$ for (PropertiesContainer container : myContainers) -->Line_22 $$ if (!property.showAsDefault(container)) [ FD ]
Line_47 $$ SimpleTextAttributes template = SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())))-->Line_49 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_37 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)-->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_46 $$ if (errorInfo != null) -->Line_48 $$ int style = ((template.getStyle() & SimpleTextAttributes.STYLE_WAVED) != 0 ? SimpleTextAttributes.STYLE_WAVED : 0) | ((template.getStyle() & SimpleTextAttributes.STYLE_UNDERLINE) != 0 ? SimpleTextAttributes.STYLE_UNDERLINE : 0)[ CD ]
Line_43 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)-->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_31 $$ if (column == 0) -->Line_33 $$ if (!selected && !isDefault) [ CD ]
Line_5 $$ Property property = (Property) value-->Line_52 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)[ FD ]
Line_32 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_31 $$ if (column == 0) -->Line_57 $$ if (hasChildren) [ CD ]
Line_5 $$ Property property = (Property) value-->Line_36 $$ if (property.isImportant()) [ FD ]
Line_31 $$ if (column == 0) -->Line_42 $$ if (property.isDeprecated()) [ CD ]
Line_40 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)-->Line_49 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_52 $$ Icon icon = UIUtil.getTreeNodeIcon(isExpanded(property), selected, tableHasFocus)-->Line_55 $$ Couple<Integer> indents = getBeforeIconAndAfterIndents(property, icon)[ FD ]
Line_57 $$ if (hasChildren) -->Line_58 $$ renderer.setIconTextGap(indents.second)[ CD ]
Line_5 $$ Property property = (Property) value-->Line_55 $$ Couple<Integer> indents = getBeforeIconAndAfterIndents(property, icon)[ FD ]
Line_31 $$ if (column == 0) -->Line_56 $$ int indent = indents.first[ CD ]
Line_67 $$ JComponent component = valueRenderer.getComponent(getCurrentComponent(), getPropertyContext(), getValue(property), selected, tableHasFocus)-->Line_68 $$ component.setBackground(selected ? UIUtil.getTreeSelectionBackground(tableHasFocus) : background)[ FD ]
Line_32 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_37 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)[ FD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_62 $$ renderer.setIpad(new Insets(0, indent, 0, 0))[ FD ]
Line_5 $$ Property property = (Property) value-->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_31 $$ if (column == 0) -->Line_62 $$ renderer.setIpad(new Insets(0, indent, 0, 0))[ CD ]
Line_32 $$ SimpleTextAttributes attr = SimpleTextAttributes.REGULAR_ATTRIBUTES-->Line_49 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_5 $$ Property property = (Property) value-->Line_15 $$ renderer.append(property.getName())[ FD ]
Line_49 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())-->Line_51 $$ SearchUtil.appendFragments(mySpeedSearch.getEnteredPrefix(), property.getName(), attr.getStyle(), attr.getFgColor(), attr.getBgColor(), renderer)[ FD ]
Line_12 $$ if (property instanceof GroupProperty) -->Line_13 $$ renderer.setIpad(new Insets(0, 5, 0, 0))[ CD ]
Line_47 $$ SimpleTextAttributes template = SimpleTextAttributes.fromTextAttributes(EditorColorsManager.getInstance().getGlobalScheme().getAttributes(getErrorAttributes(errorInfo.getLevel().getSeverity())))-->Line_48 $$ int style = ((template.getStyle() & SimpleTextAttributes.STYLE_WAVED) != 0 ? SimpleTextAttributes.STYLE_WAVED : 0) | ((template.getStyle() & SimpleTextAttributes.STYLE_UNDERLINE) != 0 ? SimpleTextAttributes.STYLE_UNDERLINE : 0)[ FD ]
Line_37 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)-->Line_49 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ FD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_30 $$ renderer.clear()[ FD ]
Line_33 $$ if (!selected && !isDefault) -->Line_34 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)[ CD ]
Line_34 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_37 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)[ FD ]
Line_5 $$ Property property = (Property) value-->Line_22 $$ if (!property.showAsDefault(container)) [ FD ]
Line_70 $$ if (component instanceof JCheckBox) -->Line_71 $$ component.putClientProperty("JComponent.sizeVariant", UIUtil.isUnderAquaLookAndFeel() ? "small" : null)[ CD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_54 $$ renderer.setIcon(hasChildren ? icon : null)[ FD ]
Line_46 $$ if (errorInfo != null) -->Line_49 $$ attr = attr.derive(attr.getStyle() | style, template.getFgColor(), null, template.getWaveColor())[ CD ]
Line_9 $$ ColoredTableCellRenderer renderer = property instanceof GroupProperty ? myGroupRenderer : myCellRenderer-->Line_10 $$ renderer.getTableCellRendererComponent(table, value, selected, cellHasFocus, row, column)[ FD ]
Line_14 $$ if (column == 0) -->Line_15 $$ renderer.append(property.getName())[ CD ]
Line_37 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_BOLD, null, null, null)-->Line_40 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_ITALIC, null, null, null)[ FD ]
Line_34 $$ attr = attr.derive(-1, FileStatus.MODIFIED.getColor(), null, null)-->Line_43 $$ attr = attr.derive(attr.getStyle() | SimpleTextAttributes.STYLE_STRIKEOUT, null, null, null)[ FD ]
Line_31 $$ if (column == 0) -->Line_55 $$ Couple<Integer> indents = getBeforeIconAndAfterIndents(property, icon)[ CD ]
