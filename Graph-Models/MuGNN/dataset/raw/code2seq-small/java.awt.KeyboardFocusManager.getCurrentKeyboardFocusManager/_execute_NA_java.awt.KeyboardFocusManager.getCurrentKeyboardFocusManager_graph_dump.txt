Line_4 $$ String syntaxText = "Syntax error, expected: " + PREFIX + " " + ON + "|" + OFF + " actionName"-->Line_6 $$ context.error(syntaxText, getLine())[ FD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_32 $$ fm.doWhenFocusSettlesDown(new Runnable() [ CD ]
Line_20 $$ if (action == null) -->Line_22 $$ return ActionCallback.REJECTED[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_29 $$ final ActionCallback result = new ActionCallback()[ CD ]
Line_13 $$ on = false-->Line_38 $$ if (state.booleanValue() != on) [ FD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_4 $$ String syntaxText = "Syntax error, expected: " + PREFIX + " " + ON + "|" + OFF + " actionName"[ CD ]
Line_12 $$ if (OFF.equalsIgnoreCase(args[0])) -->Line_15 $$ context.error(syntaxText, getLine())[ CD ]
Line_19 $$ final AnAction action = ActionManager.getInstance().getAction(actionId)-->Line_36 $$ ActionUtil.performDumbAwareUpdate(action, event, false)[ FD ]
Line_32 $$ fm.doWhenFocusSettlesDown(new Runnable() -->Line_36 $$ ActionUtil.performDumbAwareUpdate(action, event, false)[ CD ]
Line_24 $$ if (!(action instanceof ToggleAction)) -->Line_26 $$ return ActionCallback.REJECTED[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_45 $$ return result[ CD ]
Line_19 $$ final AnAction action = ActionManager.getInstance().getAction(actionId)-->Line_20 $$ if (action == null) [ FD ]
Line_9 $$ final boolean on-->Line_11 $$ on = true[ FD ]
Line_9 $$ final boolean on-->Line_38 $$ if (state.booleanValue() != on) [ FD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_21 $$ context.error("Unknown action id=" + actionId, getLine())[ FD ]
Line_19 $$ final AnAction action = ActionManager.getInstance().getAction(actionId)-->Line_34 $$ final Presentation presentation = (Presentation) action.getTemplatePresentation().clone()[ FD ]
Line_32 $$ fm.doWhenFocusSettlesDown(new Runnable() -->Line_34 $$ final Presentation presentation = (Presentation) action.getTemplatePresentation().clone()[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_31 $$ IdeFocusManager fm = IdeFocusManager.getGlobalInstance()[ CD ]
Line_28 $$ final InputEvent inputEvent = ActionCommand.getInputEvent(actionId)-->Line_39 $$ ActionManager.getInstance().tryToExecute(action, inputEvent, null, ActionPlaces.UNKNOWN, true).doWhenProcessed(result.createSetDoneRunnable())[ FD ]
Line_38 $$ if (state.booleanValue() != on) -->Line_41 $$ result.setDone()[ CD ]
Line_4 $$ String syntaxText = "Syntax error, expected: " + PREFIX + " " + ON + "|" + OFF + " actionName"-->Line_15 $$ context.error(syntaxText, getLine())[ FD ]
Line_10 $$ if (ON.equalsIgnoreCase(args[0])) -->Line_11 $$ on = true[ CD ]
Line_31 $$ IdeFocusManager fm = IdeFocusManager.getGlobalInstance()-->Line_32 $$ fm.doWhenFocusSettlesDown(new Runnable() [ FD ]
Line_12 $$ if (OFF.equalsIgnoreCase(args[0])) -->Line_13 $$ on = false[ CD ]
Line_5 $$ if (args.length != 2) -->Line_6 $$ context.error(syntaxText, getLine())[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_24 $$ if (!(action instanceof ToggleAction)) [ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_30 $$ context.getRobot().delay(Registry.intValue("actionSystem.playback.delay"))[ FD ]
Line_32 $$ fm.doWhenFocusSettlesDown(new Runnable() -->Line_37 $$ Boolean state = (Boolean) event.getPresentation().getClientProperty(ToggleAction.SELECTED_PROPERTY)[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_5 $$ if (args.length != 2) [ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_20 $$ if (action == null) [ CD ]
Line_38 $$ if (state.booleanValue() != on) -->Line_39 $$ ActionManager.getInstance().tryToExecute(action, inputEvent, null, ActionPlaces.UNKNOWN, true).doWhenProcessed(result.createSetDoneRunnable())[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_15 $$ context.error(syntaxText, getLine())[ FD ]
Line_29 $$ final ActionCallback result = new ActionCallback()-->Line_41 $$ result.setDone()[ FD ]
Line_11 $$ on = true-->Line_13 $$ on = false[ FD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_30 $$ context.getRobot().delay(Registry.intValue("actionSystem.playback.delay"))[ CD ]
Line_11 $$ on = true-->Line_38 $$ if (state.booleanValue() != on) [ FD ]
Line_19 $$ final AnAction action = ActionManager.getInstance().getAction(actionId)-->Line_39 $$ ActionManager.getInstance().tryToExecute(action, inputEvent, null, ActionPlaces.UNKNOWN, true).doWhenProcessed(result.createSetDoneRunnable())[ FD ]
Line_12 $$ if (OFF.equalsIgnoreCase(args[0])) -->Line_16 $$ return ActionCallback.REJECTED[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_3 $$ String[] args = getText().substring(PREFIX.length()).trim().split(" ")[ CD ]
Line_9 $$ final boolean on-->Line_13 $$ on = false[ FD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_9 $$ final boolean on[ CD ]
Line_20 $$ if (action == null) -->Line_21 $$ context.error("Unknown action id=" + actionId, getLine())[ CD ]
Line_37 $$ Boolean state = (Boolean) event.getPresentation().getClientProperty(ToggleAction.SELECTED_PROPERTY)-->Line_38 $$ if (state.booleanValue() != on) [ FD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_18 $$ String actionId = args[1][ CD ]
Line_32 $$ fm.doWhenFocusSettlesDown(new Runnable() -->Line_38 $$ if (state.booleanValue() != on) [ CD ]
Line_18 $$ String actionId = args[1]-->Line_28 $$ final InputEvent inputEvent = ActionCommand.getInputEvent(actionId)[ FD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_6 $$ context.error(syntaxText, getLine())[ FD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_10 $$ if (ON.equalsIgnoreCase(args[0])) [ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_28 $$ final InputEvent inputEvent = ActionCommand.getInputEvent(actionId)[ CD ]
Line_35 $$ AnActionEvent event = new AnActionEvent(inputEvent, DataManager.getInstance().getDataContext(KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()), ActionPlaces.UNKNOWN, presentation, ActionManager.getInstance(), 0)-->Line_37 $$ Boolean state = (Boolean) event.getPresentation().getClientProperty(ToggleAction.SELECTED_PROPERTY)[ FD ]
Line_32 $$ fm.doWhenFocusSettlesDown(new Runnable() -->Line_35 $$ AnActionEvent event = new AnActionEvent(inputEvent, DataManager.getInstance().getDataContext(KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()), ActionPlaces.UNKNOWN, presentation, ActionManager.getInstance(), 0)[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_25 $$ context.error("Action is not a toggle action id=" + actionId, getLine())[ FD ]
Line_18 $$ String actionId = args[1]-->Line_19 $$ final AnAction action = ActionManager.getInstance().getAction(actionId)[ FD ]
Line_10 $$ if (ON.equalsIgnoreCase(args[0])) -->Line_12 $$ if (OFF.equalsIgnoreCase(args[0])) [ CD ]
Line_35 $$ AnActionEvent event = new AnActionEvent(inputEvent, DataManager.getInstance().getDataContext(KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()), ActionPlaces.UNKNOWN, presentation, ActionManager.getInstance(), 0)-->Line_36 $$ ActionUtil.performDumbAwareUpdate(action, event, false)[ FD ]
Line_24 $$ if (!(action instanceof ToggleAction)) -->Line_25 $$ context.error("Action is not a toggle action id=" + actionId, getLine())[ CD ]
Line_29 $$ final ActionCallback result = new ActionCallback()-->Line_39 $$ ActionManager.getInstance().tryToExecute(action, inputEvent, null, ActionPlaces.UNKNOWN, true).doWhenProcessed(result.createSetDoneRunnable())[ FD ]
Line_5 $$ if (args.length != 2) -->Line_7 $$ return ActionCallback.REJECTED[ CD ]
Line_2 $$ protected ActionCallback _execute(PlaybackContext context) -->Line_19 $$ final AnAction action = ActionManager.getInstance().getAction(actionId)[ CD ]
