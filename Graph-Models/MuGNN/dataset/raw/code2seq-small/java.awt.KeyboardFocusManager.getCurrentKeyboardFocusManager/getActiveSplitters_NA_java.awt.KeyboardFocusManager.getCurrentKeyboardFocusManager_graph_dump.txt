Line_6 $$ Runnable run = new Runnable() -->Line_24 $$ if (container instanceof DockableEditorTabbedContainer) [ CD ]
Line_21 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()-->Line_22 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_8 $$ if (myProject.isDisposed()) -->Line_10 $$ return[ CD ]
Line_6 $$ Runnable run = new Runnable() -->Line_16 $$ if (focusOwner == null && !async) [ CD ]
Line_22 $$ container = myDockManager.getContainerFor(focusOwner)-->Line_24 $$ if (container instanceof DockableEditorTabbedContainer) [ FD ]
Line_20 $$ if (container == null && !async) -->Line_21 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()[ CD ]
Line_12 $$ Component focusOwner = fm.getFocusOwner()-->Line_17 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())[ FD ]
Line_14 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_21 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()[ FD ]
Line_12 $$ Component focusOwner = fm.getFocusOwner()-->Line_22 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_20 $$ if (container == null && !async) -->Line_22 $$ container = myDockManager.getContainerFor(focusOwner)[ CD ]
Line_14 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_22 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_2 $$ private AsyncResult<EditorsSplitters> getActiveSplitters(boolean syncUsage) -->Line_31 $$ if (async) [ CD ]
Line_6 $$ Runnable run = new Runnable() -->Line_20 $$ if (container == null && !async) [ CD ]
Line_31 $$ if (async) -->Line_34 $$ UIUtil.invokeLaterIfNeeded(run)[ CD ]
Line_12 $$ Component focusOwner = fm.getFocusOwner()-->Line_19 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_24 $$ if (container instanceof DockableEditorTabbedContainer) -->Line_27 $$ result.setDone(getMainSplitters())[ CD ]
Line_31 $$ if (async) -->Line_32 $$ fm.doWhenFocusSettlesDown(run)[ CD ]
Line_2 $$ private AsyncResult<EditorsSplitters> getActiveSplitters(boolean syncUsage) -->Line_4 $$ final AsyncResult<EditorsSplitters> result = new AsyncResult<EditorsSplitters>()[ CD ]
Line_2 $$ private AsyncResult<EditorsSplitters> getActiveSplitters(boolean syncUsage) -->Line_6 $$ Runnable run = new Runnable() [ CD ]
Line_12 $$ Component focusOwner = fm.getFocusOwner()-->Line_21 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()[ FD ]
Line_6 $$ Runnable run = new Runnable() -->Line_32 $$ fm.doWhenFocusSettlesDown(run)[ FD ]
Line_19 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)-->Line_22 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_2 $$ private AsyncResult<EditorsSplitters> getActiveSplitters(boolean syncUsage) -->Line_3 $$ final boolean async = Registry.is("ide.windowSystem.asyncSplitters") && !syncUsage[ CD ]
Line_8 $$ if (myProject.isDisposed()) -->Line_9 $$ result.setRejected()[ CD ]
Line_17 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())-->Line_19 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_6 $$ Runnable run = new Runnable() -->Line_34 $$ UIUtil.invokeLaterIfNeeded(run)[ FD ]
Line_2 $$ private AsyncResult<EditorsSplitters> getActiveSplitters(boolean syncUsage) -->Line_36 $$ return result[ CD ]
Line_2 $$ private AsyncResult<EditorsSplitters> getActiveSplitters(boolean syncUsage) -->Line_3 $$ final boolean async = Registry.is("ide.windowSystem.asyncSplitters") && !syncUsage[ FD ]
Line_6 $$ Runnable run = new Runnable() -->Line_12 $$ Component focusOwner = fm.getFocusOwner()[ CD ]
Line_14 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_19 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_5 $$ final IdeFocusManager fm = IdeFocusManager.getInstance(myProject)-->Line_12 $$ Component focusOwner = fm.getFocusOwner()[ FD ]
Line_6 $$ Runnable run = new Runnable() -->Line_8 $$ if (myProject.isDisposed()) [ CD ]
Line_12 $$ Component focusOwner = fm.getFocusOwner()-->Line_14 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()[ FD ]
Line_14 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_17 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())[ FD ]
Line_16 $$ if (focusOwner == null && !async) -->Line_17 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())[ CD ]
Line_5 $$ final IdeFocusManager fm = IdeFocusManager.getInstance(myProject)-->Line_32 $$ fm.doWhenFocusSettlesDown(run)[ FD ]
Line_6 $$ Runnable run = new Runnable() -->Line_13 $$ if (focusOwner == null && !async) [ CD ]
Line_17 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())-->Line_22 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_24 $$ if (container instanceof DockableEditorTabbedContainer) -->Line_25 $$ result.setDone(((DockableEditorTabbedContainer) container).getSplitters())[ CD ]
Line_19 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)-->Line_24 $$ if (container instanceof DockableEditorTabbedContainer) [ FD ]
Line_4 $$ final AsyncResult<EditorsSplitters> result = new AsyncResult<EditorsSplitters>()-->Line_25 $$ result.setDone(((DockableEditorTabbedContainer) container).getSplitters())[ FD ]
Line_4 $$ final AsyncResult<EditorsSplitters> result = new AsyncResult<EditorsSplitters>()-->Line_27 $$ result.setDone(getMainSplitters())[ FD ]
Line_6 $$ Runnable run = new Runnable() -->Line_19 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)[ CD ]
Line_4 $$ final AsyncResult<EditorsSplitters> result = new AsyncResult<EditorsSplitters>()-->Line_9 $$ result.setRejected()[ FD ]
Line_2 $$ private AsyncResult<EditorsSplitters> getActiveSplitters(boolean syncUsage) -->Line_5 $$ final IdeFocusManager fm = IdeFocusManager.getInstance(myProject)[ CD ]
Line_5 $$ final IdeFocusManager fm = IdeFocusManager.getInstance(myProject)-->Line_17 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())[ FD ]
Line_13 $$ if (focusOwner == null && !async) -->Line_14 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()[ CD ]
Line_17 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())-->Line_21 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()[ FD ]
