Line_7 $$ Runnable run = new Runnable() -->Line_22 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)[ CD ]
Line_27 $$ if (container instanceof DockableEditorTabbedContainer) -->Line_28 $$ result.setDone(((DockableEditorTabbedContainer) container).getSplitters())[ CD ]
Line_27 $$ if (container instanceof DockableEditorTabbedContainer) -->Line_30 $$ result.setDone(getMainSplitters())[ CD ]
Line_22 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)-->Line_27 $$ if (container instanceof DockableEditorTabbedContainer) [ FD ]
Line_7 $$ Runnable run = new Runnable() -->Line_27 $$ if (container instanceof DockableEditorTabbedContainer) [ CD ]
Line_15 $$ Component focusOwner = fm.getFocusOwner()-->Line_24 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()[ FD ]
Line_11 $$ if (myProject.isDisposed()) -->Line_13 $$ return[ CD ]
Line_34 $$ if (async) -->Line_35 $$ fm.doWhenFocusSettlesDown(run)[ CD ]
Line_7 $$ Runnable run = new Runnable() -->Line_16 $$ if (focusOwner == null && !async) [ CD ]
Line_15 $$ Component focusOwner = fm.getFocusOwner()-->Line_25 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_7 $$ Runnable run = new Runnable() -->Line_35 $$ fm.doWhenFocusSettlesDown(run)[ FD ]
Line_25 $$ container = myDockManager.getContainerFor(focusOwner)-->Line_27 $$ if (container instanceof DockableEditorTabbedContainer) [ FD ]
Line_15 $$ Component focusOwner = fm.getFocusOwner()-->Line_22 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_17 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_25 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_6 $$ final IdeFocusManager fm = IdeFocusManager.getInstance(myProject)-->Line_15 $$ Component focusOwner = fm.getFocusOwner()[ FD ]
Line_11 $$ if (myProject.isDisposed()) -->Line_12 $$ result.setRejected()[ CD ]
Line_15 $$ Component focusOwner = fm.getFocusOwner()-->Line_17 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()[ FD ]
Line_15 $$ Component focusOwner = fm.getFocusOwner()-->Line_20 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())[ FD ]
Line_17 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_20 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())[ FD ]
Line_23 $$ if (container == null && !async) -->Line_25 $$ container = myDockManager.getContainerFor(focusOwner)[ CD ]
Line_17 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_22 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_7 $$ Runnable run = new Runnable() -->Line_15 $$ Component focusOwner = fm.getFocusOwner()[ CD ]
Line_20 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())-->Line_22 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_7 $$ Runnable run = new Runnable() -->Line_23 $$ if (container == null && !async) [ CD ]
Line_23 $$ if (container == null && !async) -->Line_24 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()[ CD ]
Line_34 $$ if (async) -->Line_37 $$ UIUtil.invokeLaterIfNeeded(run)[ CD ]
Line_19 $$ if (focusOwner == null && !async) -->Line_20 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())[ CD ]
Line_7 $$ Runnable run = new Runnable() -->Line_11 $$ if (myProject.isDisposed()) [ CD ]
Line_16 $$ if (focusOwner == null && !async) -->Line_17 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()[ CD ]
Line_22 $$ DockContainer container = myDockManager.getContainerFor(focusOwner)-->Line_25 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_20 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())-->Line_25 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_7 $$ Runnable run = new Runnable() -->Line_37 $$ UIUtil.invokeLaterIfNeeded(run)[ FD ]
Line_24 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()-->Line_25 $$ container = myDockManager.getContainerFor(focusOwner)[ FD ]
Line_7 $$ Runnable run = new Runnable() -->Line_19 $$ if (focusOwner == null && !async) [ CD ]
Line_6 $$ final IdeFocusManager fm = IdeFocusManager.getInstance(myProject)-->Line_20 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())[ FD ]
Line_6 $$ final IdeFocusManager fm = IdeFocusManager.getInstance(myProject)-->Line_35 $$ fm.doWhenFocusSettlesDown(run)[ FD ]
Line_5 $$ final AsyncResult<EditorsSplitters> result = new AsyncResult<EditorsSplitters>()-->Line_12 $$ result.setRejected()[ FD ]
Line_5 $$ final AsyncResult<EditorsSplitters> result = new AsyncResult<EditorsSplitters>()-->Line_28 $$ result.setDone(((DockableEditorTabbedContainer) container).getSplitters())[ FD ]
Line_20 $$ focusOwner = fm.getLastFocusedFor(fm.getLastFocusedFrame())-->Line_24 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()[ FD ]
Line_5 $$ final AsyncResult<EditorsSplitters> result = new AsyncResult<EditorsSplitters>()-->Line_30 $$ result.setDone(getMainSplitters())[ FD ]
Line_17 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_24 $$ focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow()[ FD ]
