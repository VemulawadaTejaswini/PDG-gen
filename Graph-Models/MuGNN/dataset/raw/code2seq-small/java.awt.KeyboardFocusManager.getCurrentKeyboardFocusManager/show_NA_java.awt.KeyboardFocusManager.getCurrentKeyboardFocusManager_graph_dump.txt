Line_105 $$ if (myResizable) -->Line_109 $$ int i = Registry.intValue("ide.popup.resizable.border.sensitivity", 4)[ CD ]
Line_45 $$ if (storedLocation != null) -->Line_46 $$ xy = storedLocation[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_81 $$ if (popupOwner instanceof RootPaneContainer && !(popupOwner instanceof IdeFrame && !Registry.is("popup.fix.ide.frame.owner"))) [ CD ]
Line_28 $$ Dimension sizeToSet = null-->Line_38 $$ myContent.setSize(sizeToSet)[ FD ]
Line_178 $$ getFocusManager().requestFocus(new FocusCommand() -->Line_186 $$ final Runnable afterShowRunnable = new Runnable() [ CD ]
Line_81 $$ if (popupOwner instanceof RootPaneContainer && !(popupOwner instanceof IdeFrame && !Registry.is("popup.fix.ide.frame.owner"))) -->Line_83 $$ popupOwner = root.getRootPane()[ CD ]
Line_186 $$ final Runnable afterShowRunnable = new Runnable() -->Line_206 $$ afterShowRunnable.run()[ FD ]
Line_28 $$ Dimension sizeToSet = null-->Line_35 $$ if (sizeToSet != null) [ FD ]
Line_110 $$ WindowResizeListener resizeListener = new WindowResizeListener(myContent, myMovable ? new Insets(i, i, i, i) : new Insets(0, 0, i, i), isToDrawMacCorner() ? AllIcons.General.MacCorner : null) -->Line_119 $$ glass.addMousePreprocessor(resizeListener, this)[ FD ]
Line_52 $$ if (insets != null) -->Line_54 $$ xy.y -= insets.top[ CD ]
Line_28 $$ Dimension sizeToSet = null-->Line_33 $$ sizeToSet = myForcedSize[ FD ]
Line_43 $$ if (myUseDimServiceForXYLocation && myDimensionServiceKey != null) -->Line_44 $$ final Point storedLocation = DimensionService.getInstance().getLocation(myDimensionServiceKey, myProject)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_149 $$ myPopup.setRequestFocus(myRequestFocus)[ CD ]
Line_192 $$ if (myNativePopup) -->Line_217 $$ afterShowRunnable.run()[ CD ]
Line_30 $$ sizeToSet = DimensionService.getInstance().getSize(myDimensionServiceKey, myProject)-->Line_35 $$ if (sizeToSet != null) [ FD ]
Line_227 $$ SwingUtilities.invokeLater(new Runnable() -->Line_242 $$ afterShow.run()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_12 $$ installWindowHook(this)[ CD ]
Line_90 $$ if (LOG.isDebugEnabled()) -->Line_91 $$ LOG.debug("  actual preferred size: " + myContent.getPreferredSize())[ CD ]
Line_186 $$ final Runnable afterShowRunnable = new Runnable() -->Line_188 $$ afterShow.run()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_105 $$ if (myResizable) [ CD ]
Line_124 $$ final WindowMoveListener moveListener = new WindowMoveListener(myCaption) -->Line_126 $$ if (e.isConsumed())[ CD ]
Line_192 $$ if (myNativePopup) -->Line_193 $$ final FocusRequestor furtherRequestor = getFocusManager().getFurtherRequestor()[ CD ]
Line_165 $$ final Runnable afterShow = new Runnable() -->Line_174 $$ afterShow()[ CD ]
Line_29 $$ if (myDimensionServiceKey != null) -->Line_30 $$ sizeToSet = DimensionService.getInstance().getSize(myDimensionServiceKey, myProject)[ CD ]
Line_96 $$ if (popup != null) -->Line_102 $$ LOG.debug("cannot fix size for non-heavy-weight popup")[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_42 $$ boolean adjustXY = true[ CD ]
Line_35 $$ if (sizeToSet != null) -->Line_36 $$ sizeToSet.width = Math.max(sizeToSet.width, myContent.getMinimumSize().width)[ CD ]
Line_52 $$ if (insets != null) -->Line_53 $$ xy.x -= insets.left[ CD ]
Line_107 $$ final IdeGlassPaneImpl glass = new IdeGlassPaneImpl(root)-->Line_114 $$ glass.setCursor(cursor, this)[ FD ]
Line_15 $$ final Component prevOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()-->Line_237 $$ IdeFocusManager.getInstance(myProject).requestFocus(prevOwner, false)[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_43 $$ if (myUseDimServiceForXYLocation && myDimensionServiceKey != null) [ CD ]
Line_165 $$ final Runnable afterShow = new Runnable() -->Line_167 $$ if (myPreferredFocusedComponent != null && myInStack && myFocusable) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_50 $$ if (adjustXY) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_90 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_138 $$ Disposer.register(this, new Disposable() -->Line_140 $$ ListenerUtil.removeMouseListener(saved, moveListener)[ CD ]
Line_167 $$ if (myPreferredFocusedComponent != null && myInStack && myFocusable) -->Line_169 $$ if (myPreferredFocusedComponent instanceof JTextComponent) [ CD ]
Line_41 $$ Point xy = new Point(aScreenX, aScreenY)-->Line_46 $$ xy = storedLocation[ FD ]
Line_124 $$ final WindowMoveListener moveListener = new WindowMoveListener(myCaption) -->Line_126 $$ if (e.isConsumed())[ FD ]
Line_124 $$ final WindowMoveListener moveListener = new WindowMoveListener(myCaption) -->Line_128 $$ if (UIUtil.isCloseClick(e) && myCaption.isWithinPanel(e)) [ FD ]
Line_107 $$ final IdeGlassPaneImpl glass = new IdeGlassPaneImpl(root)-->Line_119 $$ glass.addMousePreprocessor(resizeListener, this)[ FD ]
Line_196 $$ if (isDisposed()) -->Line_198 $$ return[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_57 $$ if (considerForcedXY && myForcedLocation != null) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_246 $$ debugState("popup shown", State.SHOWING)[ CD ]
Line_110 $$ WindowResizeListener resizeListener = new WindowResizeListener(myContent, myMovable ? new Insets(i, i, i, i) : new Insets(0, 0, i, i), isToDrawMacCorner() ? AllIcons.General.MacCorner : null) -->Line_114 $$ glass.setCursor(cursor, this)[ FD ]
Line_45 $$ if (storedLocation != null) -->Line_47 $$ adjustXY = false[ CD ]
Line_65 $$ Rectangle original = new Rectangle(targetBounds)-->Line_70 $$ myMouseOutCanceller.myEverEntered = targetBounds.equals(original)[ FD ]
Line_105 $$ if (myResizable) -->Line_120 $$ glass.addMouseMotionPreprocessor(resizeListener, this)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_80 $$ Component popupOwner = myOwner[ CD ]
Line_93 $$ if ((targetBounds.width != myContent.getWidth()) || (targetBounds.height != myContent.getHeight())) -->Line_95 $$ Window popup = myPopup.getWindow()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_72 $$ myOwner = getFrameOrDialog(owner)[ CD ]
Line_80 $$ Component popupOwner = myOwner-->Line_89 $$ myPopup = factory.getPopup(popupOwner, myContent, targetBounds.x, targetBounds.y, this)[ FD ]
Line_60 $$ if (myLocateByContent) -->Line_61 $$ final Dimension captionSize = myHeaderPanel.getPreferredSize()[ CD ]
Line_96 $$ if (popup != null) -->Line_98 $$ if (myContent.getParent().getComponentCount() != 1) [ CD ]
Line_33 $$ sizeToSet = myForcedSize-->Line_39 $$ myContent.setPreferredSize(sizeToSet)[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_154 $$ window.addWindowListener(myWindowListener)[ CD ]
Line_180 $$ if (isDisposed()) -->Line_182 $$ return ActionCallback.DONE[ CD ]
Line_44 $$ final Point storedLocation = DimensionService.getInstance().getLocation(myDimensionServiceKey, myProject)-->Line_46 $$ xy = storedLocation[ FD ]
Line_35 $$ if (sizeToSet != null) -->Line_38 $$ myContent.setSize(sizeToSet)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_89 $$ myPopup = factory.getPopup(popupOwner, myContent, targetBounds.x, targetBounds.y, this)[ CD ]
Line_93 $$ if ((targetBounds.width != myContent.getWidth()) || (targetBounds.height != myContent.getHeight())) -->Line_96 $$ if (popup != null) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_14 $$ addActivity()[ CD ]
Line_123 $$ if (myCaption != null && myMovable) -->Line_138 $$ Disposer.register(this, new Disposable() [ CD ]
Line_124 $$ final WindowMoveListener moveListener = new WindowMoveListener(myCaption) -->Line_128 $$ if (UIUtil.isCloseClick(e) && myCaption.isWithinPanel(e)) [ CD ]
Line_160 $$ if (!myMayBeParent && !(myWindow instanceof Frame)) -->Line_161 $$ WindowManager.getInstance().doNotSuggestAsParent(myWindow)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_79 $$ myNativePopup = factory.isNativePopup()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_150 $$ myPopup.show()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_3 $$ if (ApplicationManagerEx.getApplicationEx() != null && ApplicationManager.getApplication().isHeadlessEnvironment())[ CD ]
Line_236 $$ if (isFocused()) -->Line_237 $$ IdeFocusManager.getInstance(myProject).requestFocus(prevOwner, false)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_41 $$ Point xy = new Point(aScreenX, aScreenY)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_32 $$ if (myForcedSize != null) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_64 $$ Rectangle targetBounds = new Rectangle(xy, myContent.getPreferredSize())[ CD ]
Line_86 $$ if (LOG.isDebugEnabled()) -->Line_87 $$ LOG.debug("expected preferred size: " + myContent.getPreferredSize())[ CD ]
Line_30 $$ sizeToSet = DimensionService.getInstance().getSize(myDimensionServiceKey, myProject)-->Line_39 $$ myContent.setPreferredSize(sizeToSet)[ FD ]
Line_93 $$ if ((targetBounds.width != myContent.getWidth()) || (targetBounds.height != myContent.getHeight())) -->Line_94 $$ LOG.debug("the expected size is not equal to the actual size")[ CD ]
Line_126 $$ if (e.isConsumed())-->Line_127 $$ return[ CD ]
Line_185 $$ final ActionCallback result = new ActionCallback()-->Line_200 $$ furtherRequestor.requestFocus(new FocusCommand() [ FD ]
Line_185 $$ final ActionCallback result = new ActionCallback()-->Line_197 $$ result.setRejected()[ FD ]
Line_128 $$ if (UIUtil.isCloseClick(e) && myCaption.isWithinPanel(e)) -->Line_129 $$ cancel()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_65 $$ Rectangle original = new Rectangle(targetBounds)[ CD ]
Line_227 $$ SwingUtilities.invokeLater(new Runnable() -->Line_229 $$ if (isDisposed()) [ CD ]
Line_3 $$ if (ApplicationManagerEx.getApplicationEx() != null && ApplicationManager.getApplication().isHeadlessEnvironment())-->Line_4 $$ return[ CD ]
Line_177 $$ if (myRequestFocus) -->Line_227 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_229 $$ if (isDisposed()) -->Line_231 $$ return[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_86 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_17 $$ if (!shouldShow) -->Line_21 $$ return[ CD ]
Line_35 $$ if (sizeToSet != null) -->Line_39 $$ myContent.setPreferredSize(sizeToSet)[ CD ]
Line_50 $$ if (adjustXY) -->Line_51 $$ final Insets insets = myContent.getInsets()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_155 $$ if (myFocusable) [ CD ]
Line_28 $$ Dimension sizeToSet = null-->Line_30 $$ sizeToSet = DimensionService.getInstance().getSize(myDimensionServiceKey, myProject)[ FD ]
Line_83 $$ popupOwner = root.getRootPane()-->Line_89 $$ myPopup = factory.getPopup(popupOwner, myContent, targetBounds.x, targetBounds.y, this)[ FD ]
Line_82 $$ RootPaneContainer root = (RootPaneContainer) popupOwner-->Line_83 $$ popupOwner = root.getRootPane()[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_35 $$ if (sizeToSet != null) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_15 $$ final Component prevOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner()[ CD ]
Line_178 $$ getFocusManager().requestFocus(new FocusCommand() -->Line_184 $$ _requestFocus()[ CD ]
Line_194 $$ SwingUtilities.invokeLater(new Runnable() -->Line_200 $$ furtherRequestor.requestFocus(new FocusCommand() [ CD ]
Line_178 $$ getFocusManager().requestFocus(new FocusCommand() -->Line_219 $$ return result[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_123 $$ if (myCaption != null && myMovable) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_69 $$ if (myMouseOutCanceller != null) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_93 $$ if ((targetBounds.width != myContent.getWidth()) || (targetBounds.height != myContent.getHeight())) [ CD ]
Line_105 $$ if (myResizable) -->Line_107 $$ final IdeGlassPaneImpl glass = new IdeGlassPaneImpl(root)[ CD ]
Line_107 $$ final IdeGlassPaneImpl glass = new IdeGlassPaneImpl(root)-->Line_120 $$ glass.addMouseMotionPreprocessor(resizeListener, this)[ FD ]
Line_159 $$ if (myWindow != null) -->Line_160 $$ if (!myMayBeParent && !(myWindow instanceof Frame)) [ CD ]
Line_105 $$ if (myResizable) -->Line_119 $$ glass.addMousePreprocessor(resizeListener, this)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_24 $$ if (myInStack) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_73 $$ if (myOwner == null) [ CD ]
Line_180 $$ if (isDisposed()) -->Line_181 $$ removeActivity()[ CD ]
Line_24 $$ if (myInStack) -->Line_26 $$ myFocusTrackback.setMustBeShown(true)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_29 $$ if (myDimensionServiceKey != null) [ CD ]
Line_113 $$ if (myCursor != cursor || myCursor != Cursor.getDefaultCursor()) -->Line_114 $$ glass.setCursor(cursor, this)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_164 $$ setMinimumSize(myMinSize)[ CD ]
Line_33 $$ sizeToSet = myForcedSize-->Line_38 $$ myContent.setSize(sizeToSet)[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_72 $$ myOwner = getFrameOrDialog(owner)[ FD ]
Line_95 $$ Window popup = myPopup.getWindow()-->Line_96 $$ if (popup != null) [ FD ]
Line_123 $$ if (myCaption != null && myMovable) -->Line_135 $$ myCaption.addMouseListener(moveListener)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_177 $$ if (myRequestFocus) [ CD ]
Line_185 $$ final ActionCallback result = new ActionCallback()-->Line_189 $$ result.setDone()[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_17 $$ if (!shouldShow) [ CD ]
Line_69 $$ if (myMouseOutCanceller != null) -->Line_70 $$ myMouseOutCanceller.myEverEntered = targetBounds.equals(original)[ CD ]
Line_82 $$ RootPaneContainer root = (RootPaneContainer) popupOwner-->Line_108 $$ root.setGlassPane(glass)[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_159 $$ if (myWindow != null) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_16 $$ final boolean shouldShow = beforeShow()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_5 $$ if (isDisposed()) [ CD ]
Line_44 $$ final Point storedLocation = DimensionService.getInstance().getLocation(myDimensionServiceKey, myProject)-->Line_45 $$ if (storedLocation != null) [ FD ]
Line_200 $$ furtherRequestor.requestFocus(new FocusCommand() -->Line_211 $$ removeActivity()[ CD ]
Line_178 $$ getFocusManager().requestFocus(new FocusCommand() -->Line_185 $$ final ActionCallback result = new ActionCallback()[ CD ]
Line_196 $$ if (isDisposed()) -->Line_197 $$ result.setRejected()[ CD ]
Line_167 $$ if (myPreferredFocusedComponent != null && myInStack && myFocusable) -->Line_168 $$ myFocusTrackback.registerFocusComponent(myPreferredFocusedComponent)[ CD ]
Line_178 $$ getFocusManager().requestFocus(new FocusCommand() -->Line_192 $$ if (myNativePopup) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_57 $$ if (considerForcedXY && myForcedLocation != null) [ FD ]
Line_165 $$ final Runnable afterShow = new Runnable() -->Line_173 $$ removeActivity()[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_78 $$ PopupComponent.Factory factory = getFactory(myForcedHeavyweight || myResizable, forcedDialog)[ CD ]
Line_64 $$ Rectangle targetBounds = new Rectangle(xy, myContent.getPreferredSize())-->Line_67 $$ ScreenUtil.moveToFit(targetBounds, ScreenUtil.getScreenRectangle(aScreenX, aScreenY), null)[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_66 $$ if (myLocateWithinScreen) [ CD ]
Line_81 $$ if (popupOwner instanceof RootPaneContainer && !(popupOwner instanceof IdeFrame && !Registry.is("popup.fix.ide.frame.owner"))) -->Line_84 $$ LOG.debug("popup owner fixed for JDK cache")[ CD ]
Line_123 $$ if (myCaption != null && myMovable) -->Line_136 $$ myCaption.addMouseMotionListener(moveListener)[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_67 $$ ScreenUtil.moveToFit(targetBounds, ScreenUtil.getScreenRectangle(aScreenX, aScreenY), null)[ FD ]
Line_105 $$ if (myResizable) -->Line_106 $$ final JRootPane root = myContent.getRootPane()[ CD ]
Line_177 $$ if (myRequestFocus) -->Line_178 $$ getFocusManager().requestFocus(new FocusCommand() [ CD ]
Line_124 $$ final WindowMoveListener moveListener = new WindowMoveListener(myCaption) -->Line_131 $$ super.mousePressed(e)[ FD ]
Line_57 $$ if (considerForcedXY && myForcedLocation != null) -->Line_58 $$ xy = myForcedLocation[ CD ]
Line_17 $$ if (!shouldShow) -->Line_18 $$ removeActivity()[ CD ]
Line_186 $$ final Runnable afterShowRunnable = new Runnable() -->Line_217 $$ afterShowRunnable.run()[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_10 $$ debugState("show popup", State.INIT)[ CD ]
Line_66 $$ if (myLocateWithinScreen) -->Line_67 $$ ScreenUtil.moveToFit(targetBounds, ScreenUtil.getScreenRectangle(aScreenX, aScreenY), null)[ CD ]
Line_51 $$ final Insets insets = myContent.getInsets()-->Line_52 $$ if (insets != null) [ FD ]
Line_233 $$ if (X_WINDOW_FOCUS_BUG && !myRequestFocus && prevOwner != null && Registry.is("actionSystem.xWindow.remove.focus.from.nonFocusable.popups")) -->Line_234 $$ new Alarm().addRequest(new Runnable() [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_23 $$ prepareToShow()[ CD ]
Line_105 $$ if (myResizable) -->Line_110 $$ WindowResizeListener resizeListener = new WindowResizeListener(myContent, myMovable ? new Insets(i, i, i, i) : new Insets(0, 0, i, i), isToDrawMacCorner() ? AllIcons.General.MacCorner : null) [ CD ]
Line_155 $$ if (myFocusable) -->Line_156 $$ window.setFocusableWindowState(true)[ CD ]
Line_178 $$ getFocusManager().requestFocus(new FocusCommand() -->Line_180 $$ if (isDisposed()) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_13 $$ installProjectDisposer()[ CD ]
Line_33 $$ sizeToSet = myForcedSize-->Line_35 $$ if (sizeToSet != null) [ FD ]
Line_186 $$ final Runnable afterShowRunnable = new Runnable() -->Line_189 $$ result.setDone()[ CD ]
Line_41 $$ Point xy = new Point(aScreenX, aScreenY)-->Line_58 $$ xy = myForcedLocation[ FD ]
Line_46 $$ xy = storedLocation-->Line_58 $$ xy = myForcedLocation[ FD ]
Line_202 $$ if (isDisposed()) -->Line_203 $$ return ActionCallback.REJECTED[ CD ]
Line_96 $$ if (popup != null) -->Line_97 $$ popup.setSize(targetBounds.width, targetBounds.height)[ CD ]
Line_200 $$ furtherRequestor.requestFocus(new FocusCommand() -->Line_202 $$ if (isDisposed()) [ CD ]
Line_32 $$ if (myForcedSize != null) -->Line_33 $$ sizeToSet = myForcedSize[ CD ]
Line_50 $$ if (adjustXY) -->Line_52 $$ if (insets != null) [ CD ]
Line_194 $$ SwingUtilities.invokeLater(new Runnable() -->Line_196 $$ if (isDisposed()) [ CD ]
Line_110 $$ WindowResizeListener resizeListener = new WindowResizeListener(myContent, myMovable ? new Insets(i, i, i, i) : new Insets(0, 0, i, i), isToDrawMacCorner() ? AllIcons.General.MacCorner : null) -->Line_113 $$ if (myCursor != cursor || myCursor != Cursor.getDefaultCursor()) [ CD ]
Line_78 $$ PopupComponent.Factory factory = getFactory(myForcedHeavyweight || myResizable, forcedDialog)-->Line_79 $$ myNativePopup = factory.isNativePopup()[ FD ]
Line_64 $$ Rectangle targetBounds = new Rectangle(xy, myContent.getPreferredSize())-->Line_70 $$ myMouseOutCanceller.myEverEntered = targetBounds.equals(original)[ FD ]
Line_155 $$ if (myFocusable) -->Line_157 $$ window.setFocusable(true)[ CD ]
Line_60 $$ if (myLocateByContent) -->Line_62 $$ xy.y -= captionSize.height[ CD ]
Line_234 $$ new Alarm().addRequest(new Runnable() -->Line_236 $$ if (isFocused()) [ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_151 $$ final Window window = getContentWindow(myContent)[ CD ]
Line_30 $$ sizeToSet = DimensionService.getInstance().getSize(myDimensionServiceKey, myProject)-->Line_38 $$ myContent.setSize(sizeToSet)[ FD ]
Line_105 $$ if (myResizable) -->Line_108 $$ root.setGlassPane(glass)[ CD ]
Line_77 $$ boolean forcedDialog = myMayBeParent || SystemInfo.isMac && !(myOwner instanceof IdeFrame) && myOwner != null && myOwner.isShowing()-->Line_78 $$ PopupComponent.Factory factory = getFactory(myForcedHeavyweight || myResizable, forcedDialog)[ FD ]
Line_95 $$ Window popup = myPopup.getWindow()-->Line_97 $$ popup.setSize(targetBounds.width, targetBounds.height)[ FD ]
Line_227 $$ SwingUtilities.invokeLater(new Runnable() -->Line_233 $$ if (X_WINDOW_FOCUS_BUG && !myRequestFocus && prevOwner != null && Registry.is("actionSystem.xWindow.remove.focus.from.nonFocusable.popups")) [ CD ]
Line_107 $$ final IdeGlassPaneImpl glass = new IdeGlassPaneImpl(root)-->Line_108 $$ root.setGlassPane(glass)[ FD ]
Line_200 $$ furtherRequestor.requestFocus(new FocusCommand() -->Line_207 $$ return ActionCallback.DONE[ CD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_60 $$ if (myLocateByContent) [ CD ]
Line_138 $$ Disposer.register(this, new Disposable() -->Line_141 $$ ListenerUtil.removeMouseMotionListener(saved, moveListener)[ CD ]
Line_30 $$ sizeToSet = DimensionService.getInstance().getSize(myDimensionServiceKey, myProject)-->Line_33 $$ sizeToSet = myForcedSize[ FD ]
Line_78 $$ PopupComponent.Factory factory = getFactory(myForcedHeavyweight || myResizable, forcedDialog)-->Line_89 $$ myPopup = factory.getPopup(popupOwner, myContent, targetBounds.x, targetBounds.y, this)[ FD ]
Line_200 $$ furtherRequestor.requestFocus(new FocusCommand() -->Line_205 $$ _requestFocus()[ CD ]
Line_80 $$ Component popupOwner = myOwner-->Line_83 $$ popupOwner = root.getRootPane()[ FD ]
Line_28 $$ Dimension sizeToSet = null-->Line_39 $$ myContent.setPreferredSize(sizeToSet)[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_77 $$ boolean forcedDialog = myMayBeParent || SystemInfo.isMac && !(myOwner instanceof IdeFrame) && myOwner != null && myOwner.isShowing()[ CD ]
Line_16 $$ final boolean shouldShow = beforeShow()-->Line_17 $$ if (!shouldShow) [ FD ]
Line_110 $$ WindowResizeListener resizeListener = new WindowResizeListener(myContent, myMovable ? new Insets(i, i, i, i) : new Insets(0, 0, i, i), isToDrawMacCorner() ? AllIcons.General.MacCorner : null) -->Line_120 $$ glass.addMouseMotionPreprocessor(resizeListener, this)[ FD ]
Line_192 $$ if (myNativePopup) -->Line_194 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_98 $$ if (myContent.getParent().getComponentCount() != 1) -->Line_99 $$ LOG.debug("unexpected count of components in heavy-weight popup")[ CD ]
Line_42 $$ boolean adjustXY = true-->Line_47 $$ adjustXY = false[ FD ]
Line_2 $$ public void show(Component owner, int aScreenX, int aScreenY, final boolean considerForcedXY) -->Line_28 $$ Dimension sizeToSet = null[ CD ]
Line_17 $$ if (!shouldShow) -->Line_19 $$ debugState("rejected to show popup", State.SHOWING)[ CD ]
Line_43 $$ if (myUseDimServiceForXYLocation && myDimensionServiceKey != null) -->Line_45 $$ if (storedLocation != null) [ CD ]
Line_128 $$ if (UIUtil.isCloseClick(e) && myCaption.isWithinPanel(e)) -->Line_131 $$ super.mousePressed(e)[ CD ]
Line_81 $$ if (popupOwner instanceof RootPaneContainer && !(popupOwner instanceof IdeFrame && !Registry.is("popup.fix.ide.frame.owner"))) -->Line_82 $$ RootPaneContainer root = (RootPaneContainer) popupOwner[ CD ]
Line_178 $$ getFocusManager().requestFocus(new FocusCommand() -->Line_223 $$ afterShow.run()[ CD ]
Line_229 $$ if (isDisposed()) -->Line_230 $$ removeActivity()[ CD ]
Line_169 $$ if (myPreferredFocusedComponent instanceof JTextComponent) -->Line_170 $$ IJSwingUtilities.moveMousePointerOn(myPreferredFocusedComponent)[ CD ]
Line_35 $$ if (sizeToSet != null) -->Line_37 $$ sizeToSet.height = Math.max(sizeToSet.height, myContent.getMinimumSize().height)[ CD ]
Line_200 $$ furtherRequestor.requestFocus(new FocusCommand() -->Line_206 $$ afterShowRunnable.run()[ CD ]
