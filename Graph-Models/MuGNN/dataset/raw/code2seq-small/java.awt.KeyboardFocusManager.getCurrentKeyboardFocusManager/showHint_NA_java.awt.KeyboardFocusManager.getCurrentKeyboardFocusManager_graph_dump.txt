Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_7 $$ panel.add(this)[ CD ]
Line_23 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_25 $$ final Component owner = focusManager.getFocusOwner()[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_3 $$ myModel.updateModel(dataContext)[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_17 $$ myHint.setForceShowAsPopup(true)[ CD ]
Line_26 $$ final Component cmp = relativePoint.getComponent()-->Line_27 $$ if (cmp instanceof JComponent && cmp.isShowing()) [ FD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_3 $$ myModel.updateModel(dataContext)[ FD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_19 $$ final KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager()[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_21 $$ if (editor == null) [ FD ]
Line_4 $$ if (myModel.isEmpty())-->Line_5 $$ return[ CD ]
Line_10 $$ myHint = new LightweightHint(panel) -->Line_12 $$ super.hide()[ CD ]
Line_36 $$ Point p = rp.getPointOn(myHintContainer).getPoint()-->Line_38 $$ HintManagerImpl.getInstanceImpl().showEditorHint(myHint, editor, p, HintManager.HIDE_BY_ESCAPE, 0, true, hintInfo)[ FD ]
Line_21 $$ if (editor == null) -->Line_34 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() [ CD ]
Line_6 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_9 $$ panel.setBackground(UIUtil.isUnderGTKLookAndFeel() ? Color.WHITE : UIUtil.getListBackground())[ FD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_38 $$ HintManagerImpl.getInstanceImpl().showEditorHint(myHint, editor, p, HintManager.HIDE_BY_ESCAPE, 0, true, hintInfo)[ FD ]
Line_34 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_37 $$ final HintHint hintInfo = new HintHint(editor, p)[ CD ]
Line_23 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_28 $$ myHint.show((JComponent) cmp, relativePoint.getPoint().x, relativePoint.getPoint().y, owner instanceof JComponent ? (JComponent) owner : null, new HintHint(relativePoint.getComponent(), relativePoint.getPoint()))[ FD ]
Line_6 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_7 $$ panel.add(this)[ FD ]
Line_21 $$ if (editor == null) -->Line_23 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() [ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_4 $$ if (myModel.isEmpty())[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_6 $$ final JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_18 $$ myHint.setFocusRequestor(this)[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_42 $$ rebuildAndSelectTail(true)[ CD ]
Line_27 $$ if (cmp instanceof JComponent && cmp.isShowing()) -->Line_28 $$ myHint.show((JComponent) cmp, relativePoint.getPoint().x, relativePoint.getPoint().y, owner instanceof JComponent ? (JComponent) owner : null, new HintHint(relativePoint.getComponent(), relativePoint.getPoint()))[ CD ]
Line_37 $$ final HintHint hintInfo = new HintHint(editor, p)-->Line_38 $$ HintManagerImpl.getInstanceImpl().showEditorHint(myHint, editor, p, HintManager.HIDE_BY_ESCAPE, 0, true, hintInfo)[ FD ]
Line_34 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_36 $$ Point p = rp.getPointOn(myHintContainer).getPoint()[ FD ]
Line_23 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_26 $$ final Component cmp = relativePoint.getComponent()[ FD ]
Line_6 $$ final JPanel panel = new JPanel(new BorderLayout())-->Line_8 $$ panel.setOpaque(true)[ FD ]
Line_23 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_27 $$ if (cmp instanceof JComponent && cmp.isShowing()) [ CD ]
Line_21 $$ if (editor == null) -->Line_33 $$ myHintContainer = editor.getContentComponent()[ CD ]
Line_34 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_38 $$ HintManagerImpl.getInstanceImpl().showEditorHint(myHint, editor, p, HintManager.HIDE_BY_ESCAPE, 0, true, hintInfo)[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_21 $$ if (editor == null) [ CD ]
Line_10 $$ myHint = new LightweightHint(panel) -->Line_13 $$ cancelPopup()[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_20 $$ myUpdateQueue.rebuildUi()[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_33 $$ myHintContainer = editor.getContentComponent()[ FD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_9 $$ panel.setBackground(UIUtil.isUnderGTKLookAndFeel() ? Color.WHITE : UIUtil.getListBackground())[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_8 $$ panel.setOpaque(true)[ CD ]
Line_34 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_36 $$ Point p = rp.getPointOn(myHintContainer).getPoint()[ CD ]
Line_21 $$ if (editor == null) -->Line_22 $$ myContextComponent = PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext)[ CD ]
Line_10 $$ myHint = new LightweightHint(panel) -->Line_14 $$ Disposer.dispose(NavBarPanel.this)[ CD ]
Line_23 $$ getHintContainerShowPoint().doWhenDone(new Consumer<RelativePoint>() -->Line_26 $$ final Component cmp = relativePoint.getComponent()[ CD ]
Line_2 $$ public void showHint(@Nullable final Editor editor, final DataContext dataContext) -->Line_22 $$ myContextComponent = PlatformDataKeys.CONTEXT_COMPONENT.getData(dataContext)[ FD ]
