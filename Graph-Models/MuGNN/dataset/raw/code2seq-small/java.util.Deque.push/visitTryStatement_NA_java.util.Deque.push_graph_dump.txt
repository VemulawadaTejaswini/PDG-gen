Line_46 $$ Set<AfterCallInstruction> postCalls = new LinkedHashSet<AfterCallInstruction>()-->Line_50 $$ postCalls.add(addCallNode(finallyInstruction, pair.getSecond(), pair.getFirst()))[ FD ]
Line_11 $$ List<Pair<InstructionImpl, GroovyPsiElement>> oldPending = null-->Line_13 $$ oldPending = myPending[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_5 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()[ CD ]
Line_16 $$ InstructionImpl tryBegin = startNode(tryBlock)-->Line_19 $$ finishNode(tryBegin)[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_5 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()[ FD ]
Line_13 $$ oldPending = myPending-->Line_72 $$ if (oldPending == null) [ FD ]
Line_45 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)-->Line_50 $$ postCalls.add(addCallNode(finallyInstruction, pair.getSecond(), pair.getFirst()))[ FD ]
Line_11 $$ List<Pair<InstructionImpl, GroovyPsiElement>> oldPending = null-->Line_75 $$ oldPending.addAll(pendingPostCalls)[ FD ]
Line_5 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_12 $$ if (finallyClause != null) [ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_21 $$ List<InstructionImpl>[] throwers = new List[catchClauses.length][ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_3 $$ final GrOpenBlock tryBlock = tryCatchStatement.getTryBlock()[ FD ]
Line_5 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_9 $$ if (finallyClause != null)[ FD ]
Line_64 $$ final ReturnInstruction returnInstruction = new ReturnInstruction(finallyClause)-->Line_66 $$ postCall.setReturnInstruction(returnInstruction)[ FD ]
Line_18 $$ InstructionImpl tryEnd = myHead-->Line_79 $$ addPendingEdge(tryCatchStatement, tryEnd)[ FD ]
Line_42 $$ if (finallyClause != null) -->Line_52 $$ if (tryEnd != null) [ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_26 $$ for (int i = 0; i < catchClauses.length; i++) [ CD ]
Line_42 $$ if (finallyClause != null) -->Line_69 $$ addNodeAndCheckPending(returnInstruction)[ CD ]
Line_13 $$ oldPending = myPending-->Line_75 $$ oldPending.addAll(pendingPostCalls)[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_57 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ FD ]
Line_26 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_32 $$ final GrParameter parameter = catchClauses[i].getParameter()[ CD ]
Line_45 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)-->Line_53 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ FD ]
Line_6 $$ for (int i = catchClauses.length - 1; i >= 0; i--) -->Line_26 $$ for (int i = 0; i < catchClauses.length; i++) [ FD ]
Line_45 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)-->Line_71 $$ finishNode(finallyInstruction)[ FD ]
Line_42 $$ if (finallyClause != null) -->Line_70 $$ interruptFlow()[ CD ]
Line_46 $$ Set<AfterCallInstruction> postCalls = new LinkedHashSet<AfterCallInstruction>()-->Line_57 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_18 $$ InstructionImpl tryEnd = myHead[ CD ]
Line_18 $$ InstructionImpl tryEnd = myHead-->Line_78 $$ if (tryEnd != null) [ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_40 $$ pendingAfterTry.addAll(myPending)[ CD ]
Line_49 $$ for (Pair<InstructionImpl, GroovyPsiElement> pair : copy) -->Line_50 $$ postCalls.add(addCallNode(finallyInstruction, pair.getSecond(), pair.getFirst()))[ FD ]
Line_5 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_63 $$ finallyClause.accept(this)[ FD ]
Line_55 $$ for (InstructionImpl catchEnd : catches) -->Line_82 $$ addPendingEdge(tryBlock, catchEnd)[ FD ]
Line_42 $$ if (finallyClause != null) -->Line_44 $$ interruptFlow()[ CD ]
Line_5 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_45 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_3 $$ final GrOpenBlock tryBlock = tryCatchStatement.getTryBlock()[ CD ]
Line_65 $$ for (AfterCallInstruction postCall : postCalls) -->Line_67 $$ addEdge(returnInstruction, postCall)[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_11 $$ List<Pair<InstructionImpl, GroovyPsiElement>> oldPending = null[ CD ]
Line_42 $$ if (finallyClause != null) -->Line_46 $$ Set<AfterCallInstruction> postCalls = new LinkedHashSet<AfterCallInstruction>()[ CD ]
Line_26 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_38 $$ finishNode(catchBeg)[ CD ]
Line_26 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_27 $$ interruptFlow()[ CD ]
Line_55 $$ for (InstructionImpl catchEnd : catches) -->Line_57 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_19 $$ finishNode(tryBegin)[ CD ]
Line_42 $$ if (finallyClause != null) -->Line_60 $$ List<Pair<InstructionImpl, GroovyPsiElement>> pendingPostCalls = myPending[ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_17 $$ tryBlock.accept(this)[ CD ]
Line_46 $$ Set<AfterCallInstruction> postCalls = new LinkedHashSet<AfterCallInstruction>()-->Line_53 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ FD ]
Line_42 $$ if (finallyClause != null) -->Line_78 $$ if (tryEnd != null) [ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_22 $$ for (int i = 0; i < catchClauses.length; i++) [ CD ]
Line_26 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_33 $$ if (parameter != null && myPolicy.isVariableInitialized(parameter)) [ CD ]
Line_3 $$ final GrOpenBlock tryBlock = tryCatchStatement.getTryBlock()-->Line_16 $$ InstructionImpl tryBegin = startNode(tryBlock)[ FD ]
Line_20 $$ Set<Pair<InstructionImpl, GroovyPsiElement>> pendingAfterTry = new LinkedHashSet<Pair<InstructionImpl, GroovyPsiElement>>(myPending)-->Line_40 $$ pendingAfterTry.addAll(myPending)[ FD ]
Line_60 $$ List<Pair<InstructionImpl, GroovyPsiElement>> pendingPostCalls = myPending-->Line_75 $$ oldPending.addAll(pendingPostCalls)[ FD ]
Line_32 $$ final GrParameter parameter = catchClauses[i].getParameter()-->Line_33 $$ if (parameter != null && myPolicy.isVariableInitialized(parameter)) [ FD ]
Line_22 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_23 $$ throwers[i] = myCaughtExceptionInfos.pop().myThrowers[ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_4 $$ final GrCatchClause[] catchClauses = tryCatchStatement.getCatchClauses()[ CD ]
Line_6 $$ for (int i = catchClauses.length - 1; i >= 0; i--) -->Line_22 $$ for (int i = 0; i < catchClauses.length; i++) [ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_25 $$ InstructionImpl[] catches = new InstructionImpl[catchClauses.length][ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_12 $$ if (finallyClause != null) [ CD ]
Line_32 $$ final GrParameter parameter = catchClauses[i].getParameter()-->Line_34 $$ addNode(new ReadWriteVariableInstruction(parameter.getName(), parameter, ReadWriteVariableInstruction.WRITE))[ FD ]
Line_18 $$ InstructionImpl tryEnd = myHead-->Line_52 $$ if (tryEnd != null) [ FD ]
Line_65 $$ for (AfterCallInstruction postCall : postCalls) -->Line_66 $$ postCall.setReturnInstruction(returnInstruction)[ FD ]
Line_26 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_36 $$ catchClauses[i].accept(this)[ CD ]
Line_42 $$ if (finallyClause != null) -->Line_72 $$ if (oldPending == null) [ CD ]
Line_42 $$ if (finallyClause != null) -->Line_47 $$ final List<Pair<InstructionImpl, GroovyPsiElement>> copy = myPending[ CD ]
Line_55 $$ for (InstructionImpl catchEnd : catches) -->Line_56 $$ if (catchEnd != null) [ FD ]
Line_29 $$ for (InstructionImpl thrower : throwers[i]) -->Line_30 $$ addEdge(thrower, catchBeg)[ FD ]
Line_42 $$ if (finallyClause != null) -->Line_71 $$ finishNode(finallyInstruction)[ CD ]
Line_52 $$ if (tryEnd != null) -->Line_53 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ CD ]
Line_45 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)-->Line_57 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ FD ]
Line_22 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_26 $$ for (int i = 0; i < catchClauses.length; i++) [ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_9 $$ if (finallyClause != null)[ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_79 $$ addPendingEdge(tryCatchStatement, tryEnd)[ FD ]
Line_33 $$ if (parameter != null && myPolicy.isVariableInitialized(parameter)) -->Line_34 $$ addNode(new ReadWriteVariableInstruction(parameter.getName(), parameter, ReadWriteVariableInstruction.WRITE))[ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_20 $$ Set<Pair<InstructionImpl, GroovyPsiElement>> pendingAfterTry = new LinkedHashSet<Pair<InstructionImpl, GroovyPsiElement>>(myPending)[ CD ]
Line_42 $$ if (finallyClause != null) -->Line_64 $$ final ReturnInstruction returnInstruction = new ReturnInstruction(finallyClause)[ CD ]
Line_28 $$ final InstructionImpl catchBeg = startNode(catchClauses[i])-->Line_38 $$ finishNode(catchBeg)[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_42 $$ if (finallyClause != null) [ CD ]
Line_64 $$ final ReturnInstruction returnInstruction = new ReturnInstruction(finallyClause)-->Line_67 $$ addEdge(returnInstruction, postCall)[ FD ]
Line_42 $$ if (finallyClause != null) -->Line_63 $$ finallyClause.accept(this)[ CD ]
Line_18 $$ InstructionImpl tryEnd = myHead-->Line_53 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_6 $$ for (int i = catchClauses.length - 1; i >= 0; i--) [ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_53 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ FD ]
Line_6 $$ for (int i = catchClauses.length - 1; i >= 0; i--) -->Line_7 $$ myCaughtExceptionInfos.push(new ExceptionInfo(catchClauses[i]))[ CD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_4 $$ final GrCatchClause[] catchClauses = tryCatchStatement.getCatchClauses()[ FD ]
Line_2 $$ public void visitTryStatement(GrTryCatchStatement tryCatchStatement) -->Line_16 $$ InstructionImpl tryBegin = startNode(tryBlock)[ CD ]
Line_5 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_42 $$ if (finallyClause != null) [ FD ]
Line_42 $$ if (finallyClause != null) -->Line_75 $$ oldPending.addAll(pendingPostCalls)[ CD ]
Line_28 $$ final InstructionImpl catchBeg = startNode(catchClauses[i])-->Line_30 $$ addEdge(thrower, catchBeg)[ FD ]
Line_12 $$ if (finallyClause != null) -->Line_13 $$ oldPending = myPending[ CD ]
Line_3 $$ final GrOpenBlock tryBlock = tryCatchStatement.getTryBlock()-->Line_17 $$ tryBlock.accept(this)[ FD ]
Line_78 $$ if (tryEnd != null) -->Line_79 $$ addPendingEdge(tryCatchStatement, tryEnd)[ CD ]
Line_42 $$ if (finallyClause != null) -->Line_45 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)[ CD ]
Line_56 $$ if (catchEnd != null) -->Line_57 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ CD ]
Line_11 $$ List<Pair<InstructionImpl, GroovyPsiElement>> oldPending = null-->Line_72 $$ if (oldPending == null) [ FD ]
Line_72 $$ if (oldPending == null) -->Line_73 $$ error()[ CD ]
Line_64 $$ final ReturnInstruction returnInstruction = new ReturnInstruction(finallyClause)-->Line_69 $$ addNodeAndCheckPending(returnInstruction)[ FD ]
Line_3 $$ final GrOpenBlock tryBlock = tryCatchStatement.getTryBlock()-->Line_82 $$ addPendingEdge(tryBlock, catchEnd)[ FD ]
Line_26 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_28 $$ final InstructionImpl catchBeg = startNode(catchClauses[i])[ CD ]
