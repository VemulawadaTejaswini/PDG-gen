Line_34 $$ final GrParameter parameter = catchClauses[i].getParameter()-->Line_36 $$ addNode(new ReadWriteVariableInstruction(parameter.getName(), parameter, ReadWriteVariableInstruction.WRITE))[ FD ]
Line_44 $$ if (finallyClause != null) -->Line_46 $$ interruptFlow()[ CD ]
Line_47 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)-->Line_74 $$ finishNode(finallyInstruction)[ FD ]
Line_6 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_66 $$ finallyClause.accept(this)[ FD ]
Line_67 $$ final ReturnInstruction returnInstruction = new ReturnInstruction(finallyClause)-->Line_70 $$ addEdge(returnInstruction, postCall)[ FD ]
Line_12 $$ List<Pair<InstructionImpl, GroovyPsiElement>> oldPending = null-->Line_78 $$ oldPending.addAll(pendingPostCalls)[ FD ]
Line_57 $$ for (InstructionImpl catchEnd : catches) -->Line_59 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ FD ]
Line_44 $$ if (finallyClause != null) -->Line_72 $$ addNodeAndCheckPending(returnInstruction)[ CD ]
Line_30 $$ final InstructionImpl catchBeg = startNode(catchClauses[i])-->Line_32 $$ addEdge(thrower, catchBeg)[ FD ]
Line_19 $$ InstructionImpl tryEnd = myHead-->Line_82 $$ addPendingEdge(tryCatchStatement, tryEnd)[ FD ]
Line_19 $$ InstructionImpl tryEnd = myHead-->Line_54 $$ if (tryEnd != null) [ FD ]
Line_48 $$ Set<AfterCallInstruction> postCalls = new LinkedHashSet<AfterCallInstruction>()-->Line_59 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ FD ]
Line_12 $$ List<Pair<InstructionImpl, GroovyPsiElement>> oldPending = null-->Line_75 $$ if (oldPending == null) [ FD ]
Line_24 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_28 $$ for (int i = 0; i < catchClauses.length; i++) [ FD ]
Line_28 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_35 $$ if (parameter != null && myPolicy.isVariableInitialized(parameter)) [ CD ]
Line_44 $$ if (finallyClause != null) -->Line_81 $$ if (tryEnd != null) [ CD ]
Line_67 $$ final ReturnInstruction returnInstruction = new ReturnInstruction(finallyClause)-->Line_72 $$ addNodeAndCheckPending(returnInstruction)[ FD ]
Line_4 $$ final GrOpenBlock tryBlock = tryCatchStatement.getTryBlock()-->Line_18 $$ tryBlock.accept(this)[ FD ]
Line_35 $$ if (parameter != null && myPolicy.isVariableInitialized(parameter)) -->Line_36 $$ addNode(new ReadWriteVariableInstruction(parameter.getName(), parameter, ReadWriteVariableInstruction.WRITE))[ CD ]
Line_6 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_10 $$ if (finallyClause != null)[ FD ]
Line_68 $$ for (AfterCallInstruction postCall : postCalls) -->Line_69 $$ postCall.setReturnInstruction(returnInstruction)[ FD ]
Line_19 $$ InstructionImpl tryEnd = myHead-->Line_81 $$ if (tryEnd != null) [ FD ]
Line_28 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_34 $$ final GrParameter parameter = catchClauses[i].getParameter()[ CD ]
Line_24 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_25 $$ throwers[i] = myCaughtExceptionInfos.pop().myThrowers[ CD ]
Line_7 $$ for (int i = catchClauses.length - 1; i >= 0; i--) -->Line_8 $$ myCaughtExceptionInfos.push(new ExceptionInfo(catchClauses[i]))[ CD ]
Line_30 $$ final InstructionImpl catchBeg = startNode(catchClauses[i])-->Line_40 $$ finishNode(catchBeg)[ FD ]
Line_13 $$ if (finallyClause != null) -->Line_14 $$ oldPending = myPending[ CD ]
Line_44 $$ if (finallyClause != null) -->Line_47 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)[ CD ]
Line_44 $$ if (finallyClause != null) -->Line_48 $$ Set<AfterCallInstruction> postCalls = new LinkedHashSet<AfterCallInstruction>()[ CD ]
Line_48 $$ Set<AfterCallInstruction> postCalls = new LinkedHashSet<AfterCallInstruction>()-->Line_52 $$ postCalls.add(addCallNode(finallyInstruction, pair.getSecond(), pair.getFirst()))[ FD ]
Line_44 $$ if (finallyClause != null) -->Line_73 $$ interruptFlow()[ CD ]
Line_4 $$ final GrOpenBlock tryBlock = tryCatchStatement.getTryBlock()-->Line_17 $$ InstructionImpl tryBegin = startNode(tryBlock)[ FD ]
Line_44 $$ if (finallyClause != null) -->Line_75 $$ if (oldPending == null) [ CD ]
Line_58 $$ if (catchEnd != null) -->Line_59 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ CD ]
Line_14 $$ oldPending = myPending-->Line_78 $$ oldPending.addAll(pendingPostCalls)[ FD ]
Line_12 $$ List<Pair<InstructionImpl, GroovyPsiElement>> oldPending = null-->Line_14 $$ oldPending = myPending[ FD ]
Line_34 $$ final GrParameter parameter = catchClauses[i].getParameter()-->Line_35 $$ if (parameter != null && myPolicy.isVariableInitialized(parameter)) [ FD ]
Line_48 $$ Set<AfterCallInstruction> postCalls = new LinkedHashSet<AfterCallInstruction>()-->Line_55 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ FD ]
Line_47 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)-->Line_55 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ FD ]
Line_28 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_30 $$ final InstructionImpl catchBeg = startNode(catchClauses[i])[ CD ]
Line_44 $$ if (finallyClause != null) -->Line_67 $$ final ReturnInstruction returnInstruction = new ReturnInstruction(finallyClause)[ CD ]
Line_28 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_40 $$ finishNode(catchBeg)[ CD ]
Line_44 $$ if (finallyClause != null) -->Line_54 $$ if (tryEnd != null) [ CD ]
Line_28 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_29 $$ interruptFlow()[ CD ]
Line_14 $$ oldPending = myPending-->Line_75 $$ if (oldPending == null) [ FD ]
Line_44 $$ if (finallyClause != null) -->Line_66 $$ finallyClause.accept(this)[ CD ]
Line_4 $$ final GrOpenBlock tryBlock = tryCatchStatement.getTryBlock()-->Line_85 $$ addPendingEdge(tryBlock, catchEnd)[ FD ]
Line_54 $$ if (tryEnd != null) -->Line_55 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ CD ]
Line_17 $$ InstructionImpl tryBegin = startNode(tryBlock)-->Line_20 $$ finishNode(tryBegin)[ FD ]
Line_68 $$ for (AfterCallInstruction postCall : postCalls) -->Line_70 $$ addEdge(returnInstruction, postCall)[ FD ]
Line_6 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_47 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)[ FD ]
Line_28 $$ for (int i = 0; i < catchClauses.length; i++) -->Line_38 $$ catchClauses[i].accept(this)[ CD ]
Line_75 $$ if (oldPending == null) -->Line_76 $$ error()[ CD ]
Line_31 $$ for (InstructionImpl thrower : throwers[i]) -->Line_32 $$ addEdge(thrower, catchBeg)[ FD ]
Line_44 $$ if (finallyClause != null) -->Line_78 $$ oldPending.addAll(pendingPostCalls)[ CD ]
Line_21 $$ Set<Pair<InstructionImpl, GroovyPsiElement>> pendingAfterTry = new LinkedHashSet<Pair<InstructionImpl, GroovyPsiElement>>(myPending)-->Line_42 $$ pendingAfterTry.addAll(myPending)[ FD ]
Line_67 $$ final ReturnInstruction returnInstruction = new ReturnInstruction(finallyClause)-->Line_69 $$ postCall.setReturnInstruction(returnInstruction)[ FD ]
Line_6 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_13 $$ if (finallyClause != null) [ FD ]
Line_7 $$ for (int i = catchClauses.length - 1; i >= 0; i--) -->Line_24 $$ for (int i = 0; i < catchClauses.length; i++) [ FD ]
Line_81 $$ if (tryEnd != null) -->Line_82 $$ addPendingEdge(tryCatchStatement, tryEnd)[ CD ]
Line_57 $$ for (InstructionImpl catchEnd : catches) -->Line_58 $$ if (catchEnd != null) [ FD ]
Line_6 $$ final GrFinallyClause finallyClause = tryCatchStatement.getFinallyClause()-->Line_44 $$ if (finallyClause != null) [ FD ]
Line_44 $$ if (finallyClause != null) -->Line_49 $$ final List<Pair<InstructionImpl, GroovyPsiElement>> copy = myPending[ CD ]
Line_47 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)-->Line_59 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, catchEnd))[ FD ]
Line_7 $$ for (int i = catchClauses.length - 1; i >= 0; i--) -->Line_28 $$ for (int i = 0; i < catchClauses.length; i++) [ FD ]
Line_44 $$ if (finallyClause != null) -->Line_74 $$ finishNode(finallyInstruction)[ CD ]
Line_57 $$ for (InstructionImpl catchEnd : catches) -->Line_85 $$ addPendingEdge(tryBlock, catchEnd)[ FD ]
Line_47 $$ final InstructionImpl finallyInstruction = startNode(finallyClause, false)-->Line_52 $$ postCalls.add(addCallNode(finallyInstruction, pair.getSecond(), pair.getFirst()))[ FD ]
Line_51 $$ for (Pair<InstructionImpl, GroovyPsiElement> pair : copy) -->Line_52 $$ postCalls.add(addCallNode(finallyInstruction, pair.getSecond(), pair.getFirst()))[ FD ]
Line_19 $$ InstructionImpl tryEnd = myHead-->Line_55 $$ postCalls.add(addCallNode(finallyInstruction, tryCatchStatement, tryEnd))[ FD ]
