Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_9 $$ branch.fals = branch.end[ CD ]
Line_19 $$ boolean allexit = false-->Line_22 $$ allexit = blocksmd.allExit[ FD ]
Line_4 $$ final AfterthoughtContext atctx = ctx.afterthought()-->Line_27 $$ visit(atctx)[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_18 $$ final BlockContext blockctx = ctx.block()[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_3 $$ final ExpressionContext exprctx = ctx.expression()[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_33 $$ jumps.pop()[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_4 $$ final AfterthoughtContext atctx = ctx.afterthought()[ CD ]
Line_18 $$ final BlockContext blockctx = ctx.block()-->Line_20 $$ if (blockctx != null) [ FD ]
Line_20 $$ if (blockctx != null) -->Line_23 $$ visit(blockctx)[ CD ]
Line_22 $$ allexit = blocksmd.allExit-->Line_29 $$ if (atctx != null || !allexit) [ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_25 $$ if (atctx != null) [ CD ]
Line_6 $$ final Label start = new Label()-->Line_14 $$ execute.mark(start)[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_3 $$ final ExpressionContext exprctx = ctx.expression()[ CD ]
Line_25 $$ if (atctx != null) -->Line_26 $$ execute.mark(branch.begin)[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_11 $$ if (ctx.initializer() != null) [ CD ]
Line_20 $$ if (blockctx != null) -->Line_21 $$ StatementMetadata blocksmd = adapter.getStatementMetadata(blockctx)[ CD ]
Line_20 $$ if (blockctx != null) -->Line_22 $$ allexit = blocksmd.allExit[ CD ]
Line_18 $$ final BlockContext blockctx = ctx.block()-->Line_23 $$ visit(blockctx)[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_34 $$ return null[ CD ]
Line_3 $$ final ExpressionContext exprctx = ctx.expression()-->Line_15 $$ if (exprctx != null) [ FD ]
Line_5 $$ final Branch branch = markBranch(ctx, exprctx)-->Line_10 $$ jumps.push(branch)[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_7 $$ branch.begin = atctx == null ? start : new Label()[ CD ]
Line_18 $$ final BlockContext blockctx = ctx.block()-->Line_21 $$ StatementMetadata blocksmd = adapter.getStatementMetadata(blockctx)[ FD ]
Line_11 $$ if (ctx.initializer() != null) -->Line_12 $$ visit(ctx.initializer())[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_10 $$ jumps.push(branch)[ CD ]
Line_3 $$ final ExpressionContext exprctx = ctx.expression()-->Line_16 $$ visit(exprctx)[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_19 $$ boolean allexit = false[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_6 $$ final Label start = new Label()[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_5 $$ final Branch branch = markBranch(ctx, exprctx)[ FD ]
Line_3 $$ final ExpressionContext exprctx = ctx.expression()-->Line_5 $$ final Branch branch = markBranch(ctx, exprctx)[ FD ]
Line_15 $$ if (exprctx != null) -->Line_16 $$ visit(exprctx)[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_14 $$ execute.mark(start)[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_15 $$ if (exprctx != null) [ CD ]
Line_6 $$ final Label start = new Label()-->Line_30 $$ execute.goTo(start)[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_11 $$ if (ctx.initializer() != null) [ FD ]
Line_25 $$ if (atctx != null) -->Line_27 $$ visit(atctx)[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_32 $$ execute.mark(branch.end)[ CD ]
Line_4 $$ final AfterthoughtContext atctx = ctx.afterthought()-->Line_25 $$ if (atctx != null) [ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_29 $$ if (atctx != null || !allexit) [ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_5 $$ final Branch branch = markBranch(ctx, exprctx)[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_12 $$ visit(ctx.initializer())[ FD ]
Line_29 $$ if (atctx != null || !allexit) -->Line_30 $$ execute.goTo(start)[ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_4 $$ final AfterthoughtContext atctx = ctx.afterthought()[ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_20 $$ if (blockctx != null) [ CD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_8 $$ branch.end = new Label()[ CD ]
Line_19 $$ boolean allexit = false-->Line_29 $$ if (atctx != null || !allexit) [ FD ]
Line_2 $$ public Void visitFor(final ForContext ctx) -->Line_18 $$ final BlockContext blockctx = ctx.block()[ CD ]
