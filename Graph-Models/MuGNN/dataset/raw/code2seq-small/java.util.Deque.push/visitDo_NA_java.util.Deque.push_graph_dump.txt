Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_5 $$ branch.begin = new Label()[ CD ]
Line_14 $$ if (!blocksmd.allExit) -->Line_15 $$ execute.goTo(branch.begin)[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_3 $$ final ExpressionContext exprctx = ctx.expression()[ FD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_10 $$ final BlockContext bctx = ctx.block()[ FD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_7 $$ branch.fals = branch.end[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_11 $$ final StatementMetadata blocksmd = adapter.getStatementMetadata(bctx)[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_14 $$ if (!blocksmd.allExit) [ CD ]
Line_10 $$ final BlockContext bctx = ctx.block()-->Line_11 $$ final StatementMetadata blocksmd = adapter.getStatementMetadata(bctx)[ FD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_19 $$ return null[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_18 $$ jumps.pop()[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_3 $$ final ExpressionContext exprctx = ctx.expression()[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_10 $$ final BlockContext bctx = ctx.block()[ CD ]
Line_3 $$ final ExpressionContext exprctx = ctx.expression()-->Line_4 $$ final Branch branch = markBranch(ctx, exprctx)[ FD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_9 $$ execute.mark(branch.begin)[ CD ]
Line_3 $$ final ExpressionContext exprctx = ctx.expression()-->Line_13 $$ visit(exprctx)[ FD ]
Line_10 $$ final BlockContext bctx = ctx.block()-->Line_12 $$ visit(bctx)[ FD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_6 $$ branch.end = new Label()[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_8 $$ jumps.push(branch)[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_12 $$ visit(bctx)[ CD ]
Line_4 $$ final Branch branch = markBranch(ctx, exprctx)-->Line_8 $$ jumps.push(branch)[ FD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_4 $$ final Branch branch = markBranch(ctx, exprctx)[ FD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_17 $$ execute.mark(branch.end)[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_4 $$ final Branch branch = markBranch(ctx, exprctx)[ CD ]
Line_2 $$ public Void visitDo(final DoContext ctx) -->Line_13 $$ visit(exprctx)[ CD ]
