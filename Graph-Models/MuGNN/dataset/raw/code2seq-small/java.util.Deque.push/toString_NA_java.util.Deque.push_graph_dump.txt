Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) -->Line_25 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ CD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_20 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_9 $$ long nestedSetsTreeNodeRight = simpleNestedSetsTreeNode.getNestedSetsTreeNodeRight()-->Line_26 $$ nestedSetsTreeNodeRight = previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight()[ FD ]
Line_21 $$ SimpleNestedSetsTreeNode previousSimpleNestedSetsTreeNode = null-->Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) [ FD ]
Line_7 $$ for (SimpleNestedSetsTreeNode simpleNestedSetsTreeNode : _simpleNestedSetsTreeNodeList) -->Line_13 $$ sb.append(simpleNestedSetsTreeNode.getPrimaryKey())[ FD ]
Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) -->Line_26 $$ nestedSetsTreeNodeRight = previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight()[ CD ]
Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) -->Line_24 $$ sb.append(previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())[ FD ]
Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) -->Line_26 $$ nestedSetsTreeNodeRight = previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight()[ FD ]
Line_6 $$ Deque<SimpleNestedSetsTreeNode> deque = new LinkedList()-->Line_27 $$ deque.pop()[ FD ]
Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) -->Line_23 $$ sb.append(StringPool.COMMA_AND_SPACE)[ CD ]
Line_9 $$ long nestedSetsTreeNodeRight = simpleNestedSetsTreeNode.getNestedSetsTreeNodeRight()-->Line_14 $$ if ((nestedSetsTreeNodeLeft + 1) != nestedSetsTreeNodeRight) [ FD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_19 $$ sb.append(nestedSetsTreeNodeRight)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_30 $$ return sb.toString()[ FD ]
Line_6 $$ Deque<SimpleNestedSetsTreeNode> deque = new LinkedList()-->Line_15 $$ deque.push(simpleNestedSetsTreeNode)[ FD ]
Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) -->Line_27 $$ deque.pop()[ CD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_18 $$ sb.append(StringPool.COMMA_AND_SPACE)[ FD ]
Line_7 $$ for (SimpleNestedSetsTreeNode simpleNestedSetsTreeNode : _simpleNestedSetsTreeNodeList) -->Line_15 $$ deque.push(simpleNestedSetsTreeNode)[ FD ]
Line_9 $$ long nestedSetsTreeNodeRight = simpleNestedSetsTreeNode.getNestedSetsTreeNodeRight()-->Line_19 $$ sb.append(nestedSetsTreeNodeRight)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_25 $$ sb.append(StringPool.CLOSE_PARENTHESIS)[ FD ]
Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) -->Line_24 $$ sb.append(previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())[ CD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_24 $$ sb.append(previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())[ FD ]
Line_21 $$ SimpleNestedSetsTreeNode previousSimpleNestedSetsTreeNode = null-->Line_24 $$ sb.append(previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_23 $$ sb.append(StringPool.COMMA_AND_SPACE)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_12 $$ sb.append(StringPool.POUND)[ FD ]
Line_7 $$ for (SimpleNestedSetsTreeNode simpleNestedSetsTreeNode : _simpleNestedSetsTreeNodeList) -->Line_9 $$ long nestedSetsTreeNodeRight = simpleNestedSetsTreeNode.getNestedSetsTreeNodeRight()[ FD ]
Line_6 $$ Deque<SimpleNestedSetsTreeNode> deque = new LinkedList()-->Line_22 $$ while (((previousSimpleNestedSetsTreeNode = deque.peek()) != null) && ((nestedSetsTreeNodeRight + 1) == previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight())) [ FD ]
Line_7 $$ for (SimpleNestedSetsTreeNode simpleNestedSetsTreeNode : _simpleNestedSetsTreeNodeList) -->Line_8 $$ long nestedSetsTreeNodeLeft = simpleNestedSetsTreeNode.getNestedSetsTreeNodeLeft()[ FD ]
Line_14 $$ if ((nestedSetsTreeNodeLeft + 1) != nestedSetsTreeNodeRight) -->Line_15 $$ deque.push(simpleNestedSetsTreeNode)[ CD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_13 $$ sb.append(simpleNestedSetsTreeNode.getPrimaryKey())[ FD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_11 $$ sb.append(nestedSetsTreeNodeLeft)[ FD ]
Line_21 $$ SimpleNestedSetsTreeNode previousSimpleNestedSetsTreeNode = null-->Line_26 $$ nestedSetsTreeNodeRight = previousSimpleNestedSetsTreeNode.getNestedSetsTreeNodeRight()[ FD ]
Line_8 $$ long nestedSetsTreeNodeLeft = simpleNestedSetsTreeNode.getNestedSetsTreeNodeLeft()-->Line_11 $$ sb.append(nestedSetsTreeNodeLeft)[ FD ]
Line_4 $$ StringBundler sb = new StringBundler(_simpleNestedSetsTreeNodeList.size() * 7)-->Line_10 $$ sb.append(StringPool.OPEN_PARENTHESIS)[ FD ]
