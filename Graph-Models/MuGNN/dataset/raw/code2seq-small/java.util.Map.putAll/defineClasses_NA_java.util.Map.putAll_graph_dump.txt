Line_2 $$ public Map<String, Class<?>> defineClasses(Map<String, byte[]> newClasses) -->Line_5 $$ pendingClasses.putAll(newClasses)[ CD ]
Line_2 $$ public Map<String, Class<?>> defineClasses(Map<String, byte[]> newClasses) -->Line_8 $$ for (String className : newClasses.keySet()) [ FD ]
Line_2 $$ public Map<String, Class<?>> defineClasses(Map<String, byte[]> newClasses) -->Line_18 $$ pendingClasses.keySet().removeAll(newClasses.keySet())[ FD ]
Line_2 $$ public Map<String, Class<?>> defineClasses(Map<String, byte[]> newClasses) -->Line_3 $$ SetView<String> conflicts = Sets.intersection(pendingClasses.keySet(), newClasses.keySet())[ FD ]
Line_8 $$ for (String className : newClasses.keySet()) -->Line_10 $$ Class<?> clazz = loadClass(className)[ FD ]
Line_2 $$ public Map<String, Class<?>> defineClasses(Map<String, byte[]> newClasses) -->Line_3 $$ SetView<String> conflicts = Sets.intersection(pendingClasses.keySet(), newClasses.keySet())[ CD ]
Line_2 $$ public Map<String, Class<?>> defineClasses(Map<String, byte[]> newClasses) -->Line_5 $$ pendingClasses.putAll(newClasses)[ FD ]
Line_8 $$ for (String className : newClasses.keySet()) -->Line_11 $$ classes.put(className, clazz)[ FD ]
Line_10 $$ Class<?> clazz = loadClass(className)-->Line_11 $$ classes.put(className, clazz)[ FD ]
Line_7 $$ Map<String, Class<?>> classes = new HashMap()-->Line_11 $$ classes.put(className, clazz)[ FD ]
Line_2 $$ public Map<String, Class<?>> defineClasses(Map<String, byte[]> newClasses) -->Line_4 $$ Preconditions.checkArgument(conflicts.isEmpty(), "The classes %s have already been defined", conflicts)[ CD ]
Line_3 $$ SetView<String> conflicts = Sets.intersection(pendingClasses.keySet(), newClasses.keySet())-->Line_4 $$ Preconditions.checkArgument(conflicts.isEmpty(), "The classes %s have already been defined", conflicts)[ FD ]
