Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_9 $$ Map<String, String> toAdd = ContainerUtilRt.newHashMap()[ CD ]
Line_30 $$ String visibleName = replaceFrom-->Line_31 $$ int i = visibleName.lastIndexOf('.')[ FD ]
Line_6 $$ Map<String, String> links = ContainerUtilRt.newHashMap()-->Line_10 $$ for (Map.Entry<String, String> entry : links.entrySet()) [ FD ]
Line_9 $$ Map<String, String> toAdd = ContainerUtilRt.newHashMap()-->Line_17 $$ toAdd.put(longName, entry.getValue())[ FD ]
Line_15 $$ String longName = parseLongName(entry.getKey(), entry.getValue())-->Line_17 $$ toAdd.put(longName, entry.getValue())[ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_20 $$ links.putAll(toAdd)[ CD ]
Line_27 $$ StringBuilder buffer = new StringBuilder(header)-->Line_28 $$ replace(buffer, "\n", "<br/>", modifiedRanges)[ FD ]
Line_29 $$ for (String replaceFrom : sortedReplacements) -->Line_35 $$ replace(buffer, replaceFrom, String.format("<a href=\"%s\">%s</a>", links.get(replaceFrom), visibleName), modifiedRanges)[ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_8 $$ process(fullText, new LinksCollector(links))[ FD ]
Line_10 $$ for (Map.Entry<String, String> entry : links.entrySet()) -->Line_11 $$ String shortName = parseShortName(entry.getKey())[ FD ]
Line_16 $$ if (longName != null) -->Line_17 $$ toAdd.put(longName, entry.getValue())[ CD ]
Line_21 $$ if (qName != null) -->Line_22 $$ links.put(qName, DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + qName)[ CD ]
Line_10 $$ for (Map.Entry<String, String> entry : links.entrySet()) -->Line_13 $$ toAdd.put(shortName, entry.getValue())[ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_28 $$ replace(buffer, "\n", "<br/>", modifiedRanges)[ CD ]
Line_27 $$ StringBuilder buffer = new StringBuilder(header)-->Line_35 $$ replace(buffer, replaceFrom, String.format("<a href=\"%s\">%s</a>", links.get(replaceFrom), visibleName), modifiedRanges)[ FD ]
Line_25 $$ List<String> sortedReplacements = ContainerUtilRt.newArrayList(links.keySet())-->Line_26 $$ Collections.sort(sortedReplacements, REPLACEMENTS_COMPARATOR)[ FD ]
Line_9 $$ Map<String, String> toAdd = ContainerUtilRt.newHashMap()-->Line_13 $$ toAdd.put(shortName, entry.getValue())[ FD ]
Line_10 $$ for (Map.Entry<String, String> entry : links.entrySet()) -->Line_15 $$ String longName = parseLongName(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_21 $$ if (qName != null) [ FD ]
Line_6 $$ Map<String, String> links = ContainerUtilRt.newHashMap()-->Line_22 $$ links.put(qName, DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + qName)[ FD ]
Line_15 $$ String longName = parseLongName(entry.getKey(), entry.getValue())-->Line_16 $$ if (longName != null) [ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_6 $$ Map<String, String> links = ContainerUtilRt.newHashMap()[ CD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_8 $$ process(fullText, new LinksCollector(links))[ CD ]
Line_10 $$ for (Map.Entry<String, String> entry : links.entrySet()) -->Line_17 $$ toAdd.put(longName, entry.getValue())[ FD ]
Line_30 $$ String visibleName = replaceFrom-->Line_33 $$ visibleName = visibleName.substring(i + 1)[ FD ]
Line_6 $$ Map<String, String> links = ContainerUtilRt.newHashMap()-->Line_20 $$ links.putAll(toAdd)[ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_25 $$ List<String> sortedReplacements = ContainerUtilRt.newArrayList(links.keySet())[ CD ]
Line_11 $$ String shortName = parseShortName(entry.getKey())-->Line_13 $$ toAdd.put(shortName, entry.getValue())[ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_24 $$ List<TextRange> modifiedRanges = ContainerUtilRt.newArrayList()[ CD ]
Line_30 $$ String visibleName = replaceFrom-->Line_32 $$ if (i > 0 && i < visibleName.length() - 1) [ FD ]
Line_27 $$ StringBuilder buffer = new StringBuilder(header)-->Line_37 $$ return buffer.toString()[ FD ]
Line_3 $$ if (fullText == null) -->Line_4 $$ return header[ CD ]
Line_32 $$ if (i > 0 && i < visibleName.length() - 1) -->Line_33 $$ visibleName = visibleName.substring(i + 1)[ CD ]
Line_24 $$ List<TextRange> modifiedRanges = ContainerUtilRt.newArrayList()-->Line_35 $$ replace(buffer, replaceFrom, String.format("<a href=\"%s\">%s</a>", links.get(replaceFrom), visibleName), modifiedRanges)[ FD ]
Line_9 $$ Map<String, String> toAdd = ContainerUtilRt.newHashMap()-->Line_20 $$ links.putAll(toAdd)[ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_37 $$ return buffer.toString()[ CD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_21 $$ if (qName != null) [ CD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_26 $$ Collections.sort(sortedReplacements, REPLACEMENTS_COMPARATOR)[ CD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_27 $$ StringBuilder buffer = new StringBuilder(header)[ CD ]
Line_11 $$ String shortName = parseShortName(entry.getKey())-->Line_12 $$ if (shortName != null) [ FD ]
Line_12 $$ if (shortName != null) -->Line_13 $$ toAdd.put(shortName, entry.getValue())[ CD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_3 $$ if (fullText == null) [ FD ]
Line_30 $$ String visibleName = replaceFrom-->Line_35 $$ replace(buffer, replaceFrom, String.format("<a href=\"%s\">%s</a>", links.get(replaceFrom), visibleName), modifiedRanges)[ FD ]
Line_6 $$ Map<String, String> links = ContainerUtilRt.newHashMap()-->Line_25 $$ List<String> sortedReplacements = ContainerUtilRt.newArrayList(links.keySet())[ FD ]
Line_33 $$ visibleName = visibleName.substring(i + 1)-->Line_35 $$ replace(buffer, replaceFrom, String.format("<a href=\"%s\">%s</a>", links.get(replaceFrom), visibleName), modifiedRanges)[ FD ]
Line_24 $$ List<TextRange> modifiedRanges = ContainerUtilRt.newArrayList()-->Line_28 $$ replace(buffer, "\n", "<br/>", modifiedRanges)[ FD ]
Line_6 $$ Map<String, String> links = ContainerUtilRt.newHashMap()-->Line_35 $$ replace(buffer, replaceFrom, String.format("<a href=\"%s\">%s</a>", links.get(replaceFrom), visibleName), modifiedRanges)[ FD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_3 $$ if (fullText == null) [ CD ]
Line_2 $$ public static String buildPreview(@NotNull final String header, @Nullable final String qName, @Nullable final String fullText) -->Line_22 $$ links.put(qName, DocumentationManagerProtocol.PSI_ELEMENT_PROTOCOL + qName)[ FD ]
