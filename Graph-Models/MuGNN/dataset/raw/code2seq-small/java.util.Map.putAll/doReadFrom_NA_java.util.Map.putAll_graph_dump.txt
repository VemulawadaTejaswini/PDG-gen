Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_15 $$ result.settings.lowercaseExpandedTerms(in.readBoolean())[ CD ]
Line_7 $$ String field = in.readString()-->Line_9 $$ fields.put(field, weight)[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_18 $$ String localeStr = in.readString()[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_14 $$ result.defaultOperator = Operator.readOperatorFrom(in)[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_18 $$ String localeStr = in.readString()[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_7 $$ String field = in.readString()[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_8 $$ Float weight = in.readFloat()[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_11 $$ result.fieldsAndWeights.putAll(fields)[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_14 $$ result.defaultOperator = Operator.readOperatorFrom(in)[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_20 $$ result.minimumShouldMatch = in.readOptionalString()[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_12 $$ result.flags = in.readInt()[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_4 $$ int size = in.readInt()[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_5 $$ Map<String, Float> fields = new HashMap()[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_13 $$ result.analyzer = in.readOptionalString()[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_4 $$ int size = in.readInt()[ CD ]
Line_18 $$ String localeStr = in.readString()-->Line_19 $$ result.settings.locale(Locale.forLanguageTag(localeStr))[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_3 $$ SimpleQueryStringBuilder result = new SimpleQueryStringBuilder(in.readString())[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_19 $$ result.settings.locale(Locale.forLanguageTag(localeStr))[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_16 $$ result.settings.lenient(in.readBoolean())[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_3 $$ SimpleQueryStringBuilder result = new SimpleQueryStringBuilder(in.readString())[ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_9 $$ fields.put(field, weight)[ CD ]
Line_8 $$ Float weight = in.readFloat()-->Line_9 $$ fields.put(field, weight)[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_6 $$ for (int i = 0; i < size; i++) [ CD ]
Line_5 $$ Map<String, Float> fields = new HashMap()-->Line_9 $$ fields.put(field, weight)[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_16 $$ result.settings.lenient(in.readBoolean())[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_17 $$ result.settings.analyzeWildcard(in.readBoolean())[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_17 $$ result.settings.analyzeWildcard(in.readBoolean())[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_13 $$ result.analyzer = in.readOptionalString()[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_8 $$ Float weight = in.readFloat()[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_21 $$ return result[ CD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_7 $$ String field = in.readString()[ CD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_15 $$ result.settings.lowercaseExpandedTerms(in.readBoolean())[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_20 $$ result.minimumShouldMatch = in.readOptionalString()[ CD ]
Line_5 $$ Map<String, Float> fields = new HashMap()-->Line_11 $$ result.fieldsAndWeights.putAll(fields)[ FD ]
Line_2 $$ protected SimpleQueryStringBuilder doReadFrom(StreamInput in) throws IOException -->Line_12 $$ result.flags = in.readInt()[ CD ]
Line_4 $$ int size = in.readInt()-->Line_6 $$ for (int i = 0; i < size; i++) [ FD ]
