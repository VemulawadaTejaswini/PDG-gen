Line_12 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) -->Line_13 $$ Object key = it.next()[ FD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_33 $$ finalExpected.putAll(secondValuesToAdd)[ CD ]
Line_3 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_17 $$ return invocation.proceed()[ FD ]
Line_12 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) -->Line_14 $$ assertEquals(expectedValues.get(key), rmi.getUserAttributes().get(key))[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_30 $$ secondValuesToAdd.put("cat", "dog")[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_46 $$ assertEquals(newName, tb.getName())[ CD ]
Line_11 $$ ReflectiveMethodInvocation rmi = (ReflectiveMethodInvocation) invocation-->Line_12 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_40 $$ pc.addAdvice(mami6)[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_42 $$ AopProxy aop = createAopProxy(pc)[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_37 $$ pc.addAdvice(mami3)[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_29 $$ secondValuesToAdd.put("foo", "bar")[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_35 $$ pc.addAdvice(mami1)[ CD ]
Line_13 $$ Object key = it.next()-->Line_14 $$ assertEquals(expectedValues.get(key), rmi.getUserAttributes().get(key))[ FD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_45 $$ tb.setName(newName)[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_36 $$ pc.addAdvice(mami2)[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_38 $$ pc.addAdvice(mami4)[ CD ]
Line_3 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_11 $$ ReflectiveMethodInvocation rmi = (ReflectiveMethodInvocation) invocation[ CD ]
Line_3 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_17 $$ return invocation.proceed()[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_41 $$ pc.setTarget(new TestBean())[ CD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_24 $$ firstValuesToAdd.put("test", "")[ CD ]
Line_11 $$ ReflectiveMethodInvocation rmi = (ReflectiveMethodInvocation) invocation-->Line_16 $$ rmi.getUserAttributes().putAll(valuesToAdd)[ FD ]
Line_11 $$ ReflectiveMethodInvocation rmi = (ReflectiveMethodInvocation) invocation-->Line_14 $$ assertEquals(expectedValues.get(key), rmi.getUserAttributes().get(key))[ FD ]
Line_2 $$ public void testUserAttributes() throws Throwable -->Line_39 $$ pc.addAdvice(mami5)[ CD ]
Line_12 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) -->Line_13 $$ Object key = it.next()[ CD ]
Line_3 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_16 $$ rmi.getUserAttributes().putAll(valuesToAdd)[ CD ]
Line_3 $$ class MapAwareMethodInterceptor implements MethodInterceptor -->Line_12 $$ for (Iterator<String> it = rmi.getUserAttributes().keySet().iterator(); it.hasNext(); ) [ CD ]
