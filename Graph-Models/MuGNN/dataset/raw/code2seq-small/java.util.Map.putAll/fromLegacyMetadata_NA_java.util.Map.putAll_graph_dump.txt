Line_14 $$ if (column.type.isCollection() && !column.type.isMultiCell()) -->Line_17 $$ target = new IndexTarget(column.name, IndexTarget.Type.VALUES)[ CD ]
Line_17 $$ target = new IndexTarget(column.name, IndexTarget.Type.VALUES)-->Line_20 $$ newOptions.put(IndexTarget.TARGET_OPTION_NAME, target.asCqlString(cfm))[ FD ]
Line_7 $$ if (newOptions.containsKey(IndexTarget.INDEX_KEYS_OPTION_NAME)) -->Line_8 $$ newOptions.remove(IndexTarget.INDEX_KEYS_OPTION_NAME)[ CD ]
Line_7 $$ if (newOptions.containsKey(IndexTarget.INDEX_KEYS_OPTION_NAME)) -->Line_9 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS)[ CD ]
Line_10 $$ if (newOptions.containsKey(IndexTarget.INDEX_ENTRIES_OPTION_NAME)) -->Line_11 $$ newOptions.remove(IndexTarget.INDEX_KEYS_OPTION_NAME)[ CD ]
Line_14 $$ if (column.type.isCollection() && !column.type.isMultiCell()) -->Line_15 $$ target = new IndexTarget(column.name, IndexTarget.Type.FULL)[ CD ]
Line_6 $$ IndexTarget target-->Line_15 $$ target = new IndexTarget(column.name, IndexTarget.Type.FULL)[ FD ]
Line_9 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS)-->Line_15 $$ target = new IndexTarget(column.name, IndexTarget.Type.FULL)[ FD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_6 $$ IndexTarget target[ CD ]
Line_6 $$ IndexTarget target-->Line_9 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS)[ FD ]
Line_3 $$ Map<String, String> newOptions = new HashMap()-->Line_5 $$ newOptions.putAll(options)[ FD ]
Line_6 $$ IndexTarget target-->Line_17 $$ target = new IndexTarget(column.name, IndexTarget.Type.VALUES)[ FD ]
Line_9 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS)-->Line_20 $$ newOptions.put(IndexTarget.TARGET_OPTION_NAME, target.asCqlString(cfm))[ FD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_5 $$ newOptions.putAll(options)[ FD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_20 $$ newOptions.put(IndexTarget.TARGET_OPTION_NAME, target.asCqlString(cfm))[ CD ]
Line_3 $$ Map<String, String> newOptions = new HashMap()-->Line_20 $$ newOptions.put(IndexTarget.TARGET_OPTION_NAME, target.asCqlString(cfm))[ FD ]
Line_3 $$ Map<String, String> newOptions = new HashMap()-->Line_7 $$ if (newOptions.containsKey(IndexTarget.INDEX_KEYS_OPTION_NAME)) [ FD ]
Line_4 $$ if (options != null)-->Line_5 $$ newOptions.putAll(options)[ CD ]
Line_10 $$ if (newOptions.containsKey(IndexTarget.INDEX_ENTRIES_OPTION_NAME)) -->Line_12 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS_AND_VALUES)[ CD ]
Line_7 $$ if (newOptions.containsKey(IndexTarget.INDEX_KEYS_OPTION_NAME)) -->Line_10 $$ if (newOptions.containsKey(IndexTarget.INDEX_ENTRIES_OPTION_NAME)) [ CD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_20 $$ newOptions.put(IndexTarget.TARGET_OPTION_NAME, target.asCqlString(cfm))[ FD ]
Line_3 $$ Map<String, String> newOptions = new HashMap()-->Line_11 $$ newOptions.remove(IndexTarget.INDEX_KEYS_OPTION_NAME)[ FD ]
Line_9 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS)-->Line_12 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS_AND_VALUES)[ FD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_7 $$ if (newOptions.containsKey(IndexTarget.INDEX_KEYS_OPTION_NAME)) [ CD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_4 $$ if (options != null)[ FD ]
Line_12 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS_AND_VALUES)-->Line_17 $$ target = new IndexTarget(column.name, IndexTarget.Type.VALUES)[ FD ]
Line_15 $$ target = new IndexTarget(column.name, IndexTarget.Type.FULL)-->Line_17 $$ target = new IndexTarget(column.name, IndexTarget.Type.VALUES)[ FD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_21 $$ return new IndexMetadata(name, newOptions, kind)[ CD ]
Line_6 $$ IndexTarget target-->Line_12 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS_AND_VALUES)[ FD ]
Line_10 $$ if (newOptions.containsKey(IndexTarget.INDEX_ENTRIES_OPTION_NAME)) -->Line_14 $$ if (column.type.isCollection() && !column.type.isMultiCell()) [ CD ]
Line_9 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS)-->Line_17 $$ target = new IndexTarget(column.name, IndexTarget.Type.VALUES)[ FD ]
Line_15 $$ target = new IndexTarget(column.name, IndexTarget.Type.FULL)-->Line_20 $$ newOptions.put(IndexTarget.TARGET_OPTION_NAME, target.asCqlString(cfm))[ FD ]
Line_3 $$ Map<String, String> newOptions = new HashMap()-->Line_10 $$ if (newOptions.containsKey(IndexTarget.INDEX_ENTRIES_OPTION_NAME)) [ FD ]
Line_3 $$ Map<String, String> newOptions = new HashMap()-->Line_8 $$ newOptions.remove(IndexTarget.INDEX_KEYS_OPTION_NAME)[ FD ]
Line_6 $$ IndexTarget target-->Line_20 $$ newOptions.put(IndexTarget.TARGET_OPTION_NAME, target.asCqlString(cfm))[ FD ]
Line_12 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS_AND_VALUES)-->Line_20 $$ newOptions.put(IndexTarget.TARGET_OPTION_NAME, target.asCqlString(cfm))[ FD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_4 $$ if (options != null)[ CD ]
Line_2 $$ public static IndexMetadata fromLegacyMetadata(CFMetaData cfm, ColumnDefinition column, String name, Kind kind, Map<String, String> options) -->Line_3 $$ Map<String, String> newOptions = new HashMap()[ CD ]
Line_12 $$ target = new IndexTarget(column.name, IndexTarget.Type.KEYS_AND_VALUES)-->Line_15 $$ target = new IndexTarget(column.name, IndexTarget.Type.FULL)[ FD ]
