Line_5 $$ Field field = cl.getDeclaredField("theEnvironment")-->Line_21 $$ field.setAccessible(true)[ FD ]
Line_2 $$ private static void setNewEnvironmentHack(Map<String, String> newenv) throws Exception -->Line_9 $$ env.putAll(newenv)[ FD ]
Line_19 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_20 $$ Field field = cl.getDeclaredField("m")[ CD ]
Line_7 $$ Map<String, String> env = (Map<String, String>) field.get(null)-->Line_22 $$ Object obj = field.get(env)[ FD ]
Line_23 $$ Map<String, String> map = (Map<String, String>) obj-->Line_24 $$ map.clear()[ FD ]
Line_2 $$ private static void setNewEnvironmentHack(Map<String, String> newenv) throws Exception -->Line_25 $$ map.putAll(newenv)[ FD ]
Line_7 $$ Map<String, String> env = (Map<String, String>) field.get(null)-->Line_9 $$ env.putAll(newenv)[ FD ]
Line_7 $$ Map<String, String> env = (Map<String, String>) field.get(null)-->Line_8 $$ env.clear()[ FD ]
Line_12 $$ Map<String, String> cienv = (Map<String, String>) ciField.get(null)-->Line_13 $$ cienv.clear()[ FD ]
Line_4 $$ Class<?> cl = Class.forName("java.lang.ProcessEnvironment")-->Line_5 $$ Field field = cl.getDeclaredField("theEnvironment")[ FD ]
Line_19 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_23 $$ Map<String, String> map = (Map<String, String>) obj[ CD ]
Line_4 $$ Class<?> cl = Class.forName("java.lang.ProcessEnvironment")-->Line_20 $$ Field field = cl.getDeclaredField("m")[ FD ]
Line_19 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_25 $$ map.putAll(newenv)[ CD ]
Line_5 $$ Field field = cl.getDeclaredField("theEnvironment")-->Line_7 $$ Map<String, String> env = (Map<String, String>) field.get(null)[ FD ]
Line_2 $$ private static void setNewEnvironmentHack(Map<String, String> newenv) throws Exception -->Line_14 $$ cienv.putAll(newenv)[ FD ]
Line_19 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_21 $$ field.setAccessible(true)[ CD ]
Line_19 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_22 $$ Object obj = field.get(env)[ CD ]
Line_10 $$ Field ciField = cl.getDeclaredField("theCaseInsensitiveEnvironment")-->Line_11 $$ ciField.setAccessible(true)[ FD ]
Line_12 $$ Map<String, String> cienv = (Map<String, String>) ciField.get(null)-->Line_14 $$ cienv.putAll(newenv)[ FD ]
Line_4 $$ Class<?> cl = Class.forName("java.lang.ProcessEnvironment")-->Line_19 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) [ FD ]
Line_5 $$ Field field = cl.getDeclaredField("theEnvironment")-->Line_6 $$ field.setAccessible(true)[ FD ]
Line_4 $$ Class<?> cl = Class.forName("java.lang.ProcessEnvironment")-->Line_10 $$ Field ciField = cl.getDeclaredField("theCaseInsensitiveEnvironment")[ FD ]
Line_23 $$ Map<String, String> map = (Map<String, String>) obj-->Line_25 $$ map.putAll(newenv)[ FD ]
Line_10 $$ Field ciField = cl.getDeclaredField("theCaseInsensitiveEnvironment")-->Line_12 $$ Map<String, String> cienv = (Map<String, String>) ciField.get(null)[ FD ]
Line_5 $$ Field field = cl.getDeclaredField("theEnvironment")-->Line_22 $$ Object obj = field.get(env)[ FD ]
Line_19 $$ if ("java.util.Collections$UnmodifiableMap".equals(cl.getName())) -->Line_24 $$ map.clear()[ CD ]
