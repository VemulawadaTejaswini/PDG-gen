Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_16 $$ setProperty(out, "sourceModule", source.getSourceModule())[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_11 $$ setProperty(out, "excludeRules", sourceExcludeRules == null ? null : new LinkedHashMap(sourceExcludeRules))[ CD ]
Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())-->Line_8 $$ setProperty(out, "namespace", source.getNamespace())[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_15 $$ setProperty(out, "dependencyArtifacts", dependencyArtifacts == null ? null : new LinkedHashMap(dependencyArtifacts))[ CD ]
Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())-->Line_15 $$ setProperty(out, "dependencyArtifacts", dependencyArtifacts == null ? null : new LinkedHashMap(dependencyArtifacts))[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_14 $$ Map dependencyArtifacts = (Map) getProperty(source, "dependencyArtifacts")[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_13 $$ setProperty(out, "includeRules", sourceIncludeRules == null ? null : new LinkedHashMap(sourceIncludeRules))[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_9 $$ ((Map) getProperty(out, "confs")).putAll((Map) getProperty(source, "confs"))[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_12 $$ Map sourceIncludeRules = (Map) getProperty(source, "includeRules")[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_17 $$ return out[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_9 $$ ((Map) getProperty(out, "confs")).putAll((Map) getProperty(source, "confs"))[ FD ]
Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())-->Line_7 $$ setProperty(out, "parentId", getProperty(source, "parentId"))[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_10 $$ Map sourceExcludeRules = (Map) getProperty(source, "excludeRules")[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_14 $$ Map dependencyArtifacts = (Map) getProperty(source, "dependencyArtifacts")[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_8 $$ setProperty(out, "namespace", source.getNamespace())[ FD ]
Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())-->Line_11 $$ setProperty(out, "excludeRules", sourceExcludeRules == null ? null : new LinkedHashMap(sourceExcludeRules))[ FD ]
Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())-->Line_13 $$ setProperty(out, "includeRules", sourceIncludeRules == null ? null : new LinkedHashMap(sourceIncludeRules))[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_3 $$ if (!(source instanceof DefaultDependencyDescriptor)) [ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_8 $$ setProperty(out, "namespace", source.getNamespace())[ CD ]
Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())-->Line_16 $$ setProperty(out, "sourceModule", source.getSourceModule())[ FD ]
Line_6 $$ DefaultDependencyDescriptor out = new DefaultDependencyDescriptor(moduleDescriptor(source), targetId, source.getDynamicConstraintDependencyRevisionId(), source.isForce(), source.isChanging(), source.isTransitive())-->Line_9 $$ ((Map) getProperty(out, "confs")).putAll((Map) getProperty(source, "confs"))[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_7 $$ setProperty(out, "parentId", getProperty(source, "parentId"))[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_16 $$ setProperty(out, "sourceModule", source.getSourceModule())[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_12 $$ Map sourceIncludeRules = (Map) getProperty(source, "includeRules")[ FD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_10 $$ Map sourceExcludeRules = (Map) getProperty(source, "excludeRules")[ CD ]
Line_2 $$ public DependencyDescriptor create(DependencyDescriptor source, ModuleRevisionId targetId) -->Line_7 $$ setProperty(out, "parentId", getProperty(source, "parentId"))[ FD ]
