Line_25 $$ for (Element hintElement : hintElements) -->Line_68 $$ String hintValue = hintElement.getText()[ FD ]
Line_72 $$ Element sanitizeElement = fieldElement.element("sanitize")-->Line_75 $$ String modes = sanitizeElement.attributeValue("modes")[ FD ]
Line_60 $$ List<Element> fieldElements = fieldElement.elements("hint-collection")-->Line_65 $$ fieldElements = fieldElement.elements("hint")[ FD ]
Line_32 $$ for (Element modelElement : rootElements) -->Line_33 $$ String name = modelElement.attributeValue("name")[ FD ]
Line_3 $$ if (inputStream == null) -->Line_7 $$ return[ CD ]
Line_15 $$ Element rootElement = document.getRootElement()-->Line_16 $$ List<Element> rootElements = rootElement.elements("hint-collection")[ FD ]
Line_76 $$ fieldSanitize = new Tuple(fieldName, contentType, modes)-->Line_99 $$ fields.put(fieldName + _SANITIZE_SUFFIX, fieldSanitize)[ FD ]
Line_27 $$ String hintValue = hintElement.getText()-->Line_69 $$ fieldHints.put(hintName, hintValue)[ FD ]
Line_54 $$ for (Element fieldElement : modelElements) -->Line_72 $$ Element sanitizeElement = fieldElement.element("sanitize")[ FD ]
Line_72 $$ Element sanitizeElement = fieldElement.element("sanitize")-->Line_73 $$ if (sanitizeElement != null) [ FD ]
Line_54 $$ for (Element fieldElement : modelElements) -->Line_79 $$ fieldElements = fieldElement.elements("validator")[ FD ]
Line_4 $$ if (_log.isWarnEnabled()) -->Line_5 $$ _log.warn("Cannot load " + source)[ CD ]
Line_58 $$ Map<String, String> fieldHints = new HashMap()-->Line_63 $$ fieldHints.putAll(hints)[ FD ]
Line_18 $$ String name = hintCollectionElement.attributeValue("name")-->Line_22 $$ _hintCollections.put(name, hints)[ FD ]
Line_78 $$ Map<String, Tuple> fieldValidators = new TreeMap()-->Line_102 $$ fields.put(fieldName + _VALIDATORS_SUFFIX, ListUtil.fromMapValues(fieldValidators))[ FD ]
Line_73 $$ if (sanitizeElement != null) -->Line_75 $$ String modes = sanitizeElement.attributeValue("modes")[ CD ]
Line_58 $$ Map<String, String> fieldHints = new HashMap()-->Line_97 $$ fields.put(fieldName + _HINTS_SUFFIX, fieldHints)[ FD ]
Line_25 $$ for (Element hintElement : hintElements) -->Line_67 $$ String hintName = hintElement.attributeValue("name")[ FD ]
Line_80 $$ for (Element validatorElement : fieldElements) -->Line_81 $$ String validatorName = validatorElement.attributeValue("name")[ FD ]
Line_36 $$ Map<String, String> defaultHints = new HashMap()-->Line_59 $$ fieldHints.putAll(defaultHints)[ FD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_13 $$ SAXReader saxReader = getSAXReader()[ CD ]
Line_3 $$ if (inputStream == null) -->Line_4 $$ if (_log.isWarnEnabled()) [ CD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_97 $$ fields.put(fieldName + _HINTS_SUFFIX, fieldHints)[ FD ]
Line_73 $$ if (sanitizeElement != null) -->Line_76 $$ fieldSanitize = new Tuple(fieldName, contentType, modes)[ CD ]
Line_71 $$ Tuple fieldSanitize = null-->Line_98 $$ if (fieldSanitize != null) [ FD ]
Line_49 $$ fields = new LinkedHashMap()-->Line_95 $$ fields.put(fieldName + _TYPE_SUFFIX, fieldType)[ FD ]
Line_80 $$ for (Element validatorElement : fieldElements) -->Line_86 $$ String validatorValue = GetterUtil.getString(validatorElement.getText())[ FD ]
Line_25 $$ for (Element hintElement : hintElements) -->Line_26 $$ String hintName = hintElement.attributeValue("name")[ FD ]
Line_9 $$ if (_log.isDebugEnabled()) -->Line_10 $$ _log.debug("Loading " + source)[ CD ]
Line_49 $$ fields = new LinkedHashMap()-->Line_96 $$ fields.put(fieldName + _LOCALIZATION_SUFFIX, fieldLocalized)[ FD ]
Line_21 $$ hints = new HashMap()-->Line_22 $$ _hintCollections.put(name, hints)[ FD ]
Line_32 $$ for (Element modelElement : rootElements) -->Line_53 $$ List<Element> modelElements = modelElement.elements("field")[ FD ]
Line_54 $$ for (Element fieldElement : modelElements) -->Line_55 $$ String fieldName = fieldElement.attributeValue("name")[ FD ]
Line_71 $$ Tuple fieldSanitize = null-->Line_99 $$ fields.put(fieldName + _SANITIZE_SUFFIX, fieldSanitize)[ FD ]
Line_25 $$ for (Element hintElement : hintElements) -->Line_43 $$ String hintValue = hintElement.getText()[ FD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_35 $$ modelHintsCallback.execute(classLoader, name)[ FD ]
Line_18 $$ String name = hintCollectionElement.attributeValue("name")-->Line_37 $$ _defaultHints.put(name, defaultHints)[ FD ]
Line_81 $$ String validatorName = validatorElement.attributeValue("name")-->Line_87 $$ boolean customValidator = isCustomValidator(validatorName)[ FD ]
Line_20 $$ if (hints == null) -->Line_21 $$ hints = new HashMap()[ CD ]
Line_26 $$ String hintName = hintElement.attributeValue("name")-->Line_44 $$ defaultHints.put(hintName, hintValue)[ FD ]
Line_91 $$ Tuple fieldValidator = new Tuple(fieldName, validatorName, validatorErrorMessage, validatorValue, customValidator)-->Line_92 $$ fieldValidators.put(validatorName, fieldValidator)[ FD ]
Line_38 $$ Element defaultHintsElement = modelElement.element("default-hints")-->Line_39 $$ if (defaultHintsElement != null) [ FD ]
Line_21 $$ hints = new HashMap()-->Line_63 $$ fieldHints.putAll(hints)[ FD ]
Line_57 $$ boolean fieldLocalized = GetterUtil.getBoolean(fieldElement.attributeValue("localized"))-->Line_96 $$ fields.put(fieldName + _LOCALIZATION_SUFFIX, fieldLocalized)[ FD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_14 $$ Document document = saxReader.read(inputStream)[ FD ]
Line_54 $$ for (Element fieldElement : modelElements) -->Line_94 $$ fields.put(fieldName + _ELEMENTS_SUFFIX, fieldElement)[ FD ]
Line_14 $$ Document document = saxReader.read(inputStream)-->Line_15 $$ Element rootElement = document.getRootElement()[ FD ]
Line_32 $$ for (Element modelElement : rootElements) -->Line_38 $$ Element defaultHintsElement = modelElement.element("default-hints")[ FD ]
Line_19 $$ Map<String, String> hints = _hintCollections.get(name)-->Line_21 $$ hints = new HashMap()[ FD ]
Line_81 $$ String validatorName = validatorElement.attributeValue("name")-->Line_82 $$ if (Validator.isNull(validatorName)) [ FD ]
Line_13 $$ SAXReader saxReader = getSAXReader()-->Line_14 $$ Document document = saxReader.read(inputStream)[ FD ]
Line_76 $$ fieldSanitize = new Tuple(fieldName, contentType, modes)-->Line_98 $$ if (fieldSanitize != null) [ FD ]
Line_58 $$ Map<String, String> fieldHints = new HashMap()-->Line_59 $$ fieldHints.putAll(defaultHints)[ FD ]
Line_34 $$ ModelHintsCallback modelHintsCallback = getModelHintsCallback()-->Line_35 $$ modelHintsCallback.execute(classLoader, name)[ FD ]
Line_81 $$ String validatorName = validatorElement.attributeValue("name")-->Line_89 $$ validatorName = buildCustomValidatorName(validatorName)[ FD ]
Line_27 $$ String hintValue = hintElement.getText()-->Line_44 $$ defaultHints.put(hintName, hintValue)[ FD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_3 $$ if (inputStream == null) [ CD ]
Line_17 $$ for (Element hintCollectionElement : rootElements) -->Line_62 $$ Map<String, String> hints = _hintCollections.get(hintCollectionElement.attributeValue("name"))[ FD ]
Line_78 $$ Map<String, Tuple> fieldValidators = new TreeMap()-->Line_92 $$ fieldValidators.put(validatorName, fieldValidator)[ FD ]
Line_25 $$ for (Element hintElement : hintElements) -->Line_42 $$ String hintName = hintElement.attributeValue("name")[ FD ]
Line_27 $$ String hintValue = hintElement.getText()-->Line_28 $$ hints.put(hintName, hintValue)[ FD ]
Line_54 $$ for (Element fieldElement : modelElements) -->Line_56 $$ String fieldType = fieldElement.attributeValue("type")[ FD ]
Line_25 $$ for (Element hintElement : hintElements) -->Line_27 $$ String hintValue = hintElement.getText()[ FD ]
Line_89 $$ validatorName = buildCustomValidatorName(validatorName)-->Line_92 $$ fieldValidators.put(validatorName, fieldValidator)[ FD ]
Line_54 $$ for (Element fieldElement : modelElements) -->Line_57 $$ boolean fieldLocalized = GetterUtil.getBoolean(fieldElement.attributeValue("localized"))[ FD ]
Line_18 $$ String name = hintCollectionElement.attributeValue("name")-->Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)[ FD ]
Line_78 $$ Map<String, Tuple> fieldValidators = new TreeMap()-->Line_101 $$ if (!fieldValidators.isEmpty()) [ FD ]
Line_18 $$ String name = hintCollectionElement.attributeValue("name")-->Line_19 $$ Map<String, String> hints = _hintCollections.get(name)[ FD ]
Line_71 $$ Tuple fieldSanitize = null-->Line_76 $$ fieldSanitize = new Tuple(fieldName, contentType, modes)[ FD ]
Line_39 $$ if (defaultHintsElement != null) -->Line_40 $$ List<Element> hintElements = defaultHintsElement.elements("hint")[ CD ]
Line_18 $$ String name = hintCollectionElement.attributeValue("name")-->Line_52 $$ _models.add(name)[ FD ]
Line_19 $$ Map<String, String> hints = _hintCollections.get(name)-->Line_28 $$ hints.put(hintName, hintValue)[ FD ]
Line_38 $$ Element defaultHintsElement = modelElement.element("default-hints")-->Line_40 $$ List<Element> hintElements = defaultHintsElement.elements("hint")[ FD ]
Line_88 $$ if (customValidator) -->Line_89 $$ validatorName = buildCustomValidatorName(validatorName)[ CD ]
Line_19 $$ Map<String, String> hints = _hintCollections.get(name)-->Line_22 $$ _hintCollections.put(name, hints)[ FD ]
Line_49 $$ fields = new LinkedHashMap()-->Line_94 $$ fields.put(fieldName + _ELEMENTS_SUFFIX, fieldElement)[ FD ]
Line_19 $$ Map<String, String> hints = _hintCollections.get(name)-->Line_20 $$ if (hints == null) [ FD ]
Line_60 $$ List<Element> fieldElements = fieldElement.elements("hint-collection")-->Line_79 $$ fieldElements = fieldElement.elements("validator")[ FD ]
Line_48 $$ if (fields == null) -->Line_50 $$ _modelFields.put(name, fields)[ CD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_96 $$ fields.put(fieldName + _LOCALIZATION_SUFFIX, fieldLocalized)[ FD ]
Line_36 $$ Map<String, String> defaultHints = new HashMap()-->Line_44 $$ defaultHints.put(hintName, hintValue)[ FD ]
Line_65 $$ fieldElements = fieldElement.elements("hint")-->Line_79 $$ fieldElements = fieldElement.elements("validator")[ FD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_16 $$ List<Element> rootElements = rootElement.elements("hint-collection")[ CD ]
Line_72 $$ Element sanitizeElement = fieldElement.element("sanitize")-->Line_74 $$ String contentType = sanitizeElement.attributeValue("content-type")[ FD ]
Line_15 $$ Element rootElement = document.getRootElement()-->Line_31 $$ rootElements = rootElement.elements("model")[ FD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_94 $$ fields.put(fieldName + _ELEMENTS_SUFFIX, fieldElement)[ FD ]
Line_36 $$ Map<String, String> defaultHints = new HashMap()-->Line_37 $$ _defaultHints.put(name, defaultHints)[ FD ]
Line_49 $$ fields = new LinkedHashMap()-->Line_50 $$ _modelFields.put(name, fields)[ FD ]
Line_21 $$ hints = new HashMap()-->Line_28 $$ hints.put(hintName, hintValue)[ FD ]
Line_26 $$ String hintName = hintElement.attributeValue("name")-->Line_69 $$ fieldHints.put(hintName, hintValue)[ FD ]
Line_54 $$ for (Element fieldElement : modelElements) -->Line_60 $$ List<Element> fieldElements = fieldElement.elements("hint-collection")[ FD ]
Line_26 $$ String hintName = hintElement.attributeValue("name")-->Line_28 $$ hints.put(hintName, hintValue)[ FD ]
Line_18 $$ String name = hintCollectionElement.attributeValue("name")-->Line_50 $$ _modelFields.put(name, fields)[ FD ]
Line_73 $$ if (sanitizeElement != null) -->Line_74 $$ String contentType = sanitizeElement.attributeValue("content-type")[ CD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_99 $$ fields.put(fieldName + _SANITIZE_SUFFIX, fieldSanitize)[ FD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_95 $$ fields.put(fieldName + _TYPE_SUFFIX, fieldType)[ FD ]
Line_49 $$ fields = new LinkedHashMap()-->Line_99 $$ fields.put(fieldName + _SANITIZE_SUFFIX, fieldSanitize)[ FD ]
Line_56 $$ String fieldType = fieldElement.attributeValue("type")-->Line_95 $$ fields.put(fieldName + _TYPE_SUFFIX, fieldType)[ FD ]
Line_58 $$ Map<String, String> fieldHints = new HashMap()-->Line_69 $$ fieldHints.put(hintName, hintValue)[ FD ]
Line_49 $$ fields = new LinkedHashMap()-->Line_102 $$ fields.put(fieldName + _VALIDATORS_SUFFIX, ListUtil.fromMapValues(fieldValidators))[ FD ]
Line_18 $$ String name = hintCollectionElement.attributeValue("name")-->Line_35 $$ modelHintsCallback.execute(classLoader, name)[ FD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_15 $$ Element rootElement = document.getRootElement()[ CD ]
Line_98 $$ if (fieldSanitize != null) -->Line_99 $$ fields.put(fieldName + _SANITIZE_SUFFIX, fieldSanitize)[ CD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_31 $$ rootElements = rootElement.elements("model")[ CD ]
Line_80 $$ for (Element validatorElement : fieldElements) -->Line_85 $$ String validatorErrorMessage = GetterUtil.getString(validatorElement.attributeValue("error-message"))[ FD ]
Line_49 $$ fields = new LinkedHashMap()-->Line_97 $$ fields.put(fieldName + _HINTS_SUFFIX, fieldHints)[ FD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_3 $$ if (inputStream == null) [ FD ]
Line_48 $$ if (fields == null) -->Line_49 $$ fields = new LinkedHashMap()[ CD ]
Line_17 $$ for (Element hintCollectionElement : rootElements) -->Line_18 $$ String name = hintCollectionElement.attributeValue("name")[ FD ]
Line_20 $$ if (hints == null) -->Line_22 $$ _hintCollections.put(name, hints)[ CD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_102 $$ fields.put(fieldName + _VALIDATORS_SUFFIX, ListUtil.fromMapValues(fieldValidators))[ FD ]
Line_81 $$ String validatorName = validatorElement.attributeValue("name")-->Line_92 $$ fieldValidators.put(validatorName, fieldValidator)[ FD ]
Line_101 $$ if (!fieldValidators.isEmpty()) -->Line_102 $$ fields.put(fieldName + _VALIDATORS_SUFFIX, ListUtil.fromMapValues(fieldValidators))[ CD ]
Line_17 $$ for (Element hintCollectionElement : rootElements) -->Line_24 $$ List<Element> hintElements = hintCollectionElement.elements("hint")[ FD ]
Line_3 $$ if (inputStream == null) -->Line_9 $$ if (_log.isDebugEnabled()) [ CD ]
Line_2 $$ public void read(ClassLoader classLoader, String source, InputStream inputStream) throws Exception -->Line_14 $$ Document document = saxReader.read(inputStream)[ CD ]
Line_19 $$ Map<String, String> hints = _hintCollections.get(name)-->Line_63 $$ fieldHints.putAll(hints)[ FD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_49 $$ fields = new LinkedHashMap()[ FD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_50 $$ _modelFields.put(name, fields)[ FD ]
Line_54 $$ for (Element fieldElement : modelElements) -->Line_65 $$ fieldElements = fieldElement.elements("hint")[ FD ]
Line_47 $$ Map<String, Object> fields = (Map<String, Object>) _modelFields.get(name)-->Line_48 $$ if (fields == null) [ FD ]
Line_16 $$ List<Element> rootElements = rootElement.elements("hint-collection")-->Line_31 $$ rootElements = rootElement.elements("model")[ FD ]
