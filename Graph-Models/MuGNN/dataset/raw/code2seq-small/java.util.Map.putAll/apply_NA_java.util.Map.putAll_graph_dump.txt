Line_11 $$ for (Map.Entry<K, T> upsert : upserts.entrySet()) -->Line_12 $$ builder.put(upsert.getKey(), upsert.getValue())[ FD ]
Line_8 $$ for (Map.Entry<K, Diff<T>> diff : diffs.entrySet()) -->Line_9 $$ builder.put(diff.getKey(), diff.getValue().apply(builder.get(diff.getKey())))[ FD ]
Line_3 $$ Map<K, T> builder = new HashMap()-->Line_6 $$ builder.remove(part)[ FD ]
Line_2 $$ public Map<K, T> apply(Map<K, T> map) -->Line_4 $$ builder.putAll(map)[ CD ]
Line_5 $$ for (K part : deletes) -->Line_6 $$ builder.remove(part)[ FD ]
Line_3 $$ Map<K, T> builder = new HashMap()-->Line_4 $$ builder.putAll(map)[ FD ]
Line_3 $$ Map<K, T> builder = new HashMap()-->Line_9 $$ builder.put(diff.getKey(), diff.getValue().apply(builder.get(diff.getKey())))[ FD ]
Line_3 $$ Map<K, T> builder = new HashMap()-->Line_12 $$ builder.put(upsert.getKey(), upsert.getValue())[ FD ]
Line_2 $$ public Map<K, T> apply(Map<K, T> map) -->Line_3 $$ Map<K, T> builder = new HashMap()[ CD ]
Line_2 $$ public Map<K, T> apply(Map<K, T> map) -->Line_4 $$ builder.putAll(map)[ FD ]
Line_2 $$ public Map<K, T> apply(Map<K, T> map) -->Line_14 $$ return builder[ CD ]
