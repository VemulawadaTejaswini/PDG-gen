Line_11 $$ final File gradleConfigFile = new File(projectSystemDir, GradleProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)-->Line_25 $$ final GradleProjectConfiguration projectConfig = loadLastConfiguration(gradleConfigFile)[ FD ]
Line_11 $$ final File gradleConfigFile = new File(projectSystemDir, GradleProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)-->Line_35 $$ FileUtil.createIfDoesntExist(gradleConfigFile)[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_25 $$ final GradleProjectConfiguration projectConfig = loadLastConfiguration(gradleConfigFile)[ CD ]
Line_19 $$ int moduleCurrentConfigurationHash = entry.getValue().computeConfigurationHash()-->Line_23 $$ affectedConfigurationHash.put(entry.getKey(), moduleCurrentConfigurationHash)[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_5 $$ if (!hasGradleModules(context))[ CD ]
Line_30 $$ buildManager.runCommand(new Runnable() -->Line_32 $$ if (finalConfigurationUpdateRequired) [ CD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_11 $$ final File gradleConfigFile = new File(projectSystemDir, GradleProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)[ CD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_13 $$ if (affectedGradleModuleConfigurations.isEmpty())[ CD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_29 $$ final boolean finalConfigurationUpdateRequired = configurationUpdateRequired[ CD ]
Line_16 $$ final Map<String, Integer> affectedConfigurationHash = new THashMap<String, Integer>()-->Line_38 $$ myModulesConfigurationHash.putAll(affectedConfigurationHash)[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_8 $$ final File projectSystemDir = buildManager.getProjectSystemDirectory(myProject)[ CD ]
Line_17 $$ for (Map.Entry<String, GradleModuleResourceConfiguration> entry : affectedGradleModuleConfigurations.entrySet()) -->Line_18 $$ Integer moduleLastConfigurationHash = myModulesConfigurationHash.get(entry.getKey())[ FD ]
Line_12 $$ final Map<String, GradleModuleResourceConfiguration> affectedGradleModuleConfigurations = generateAffectedGradleModulesConfiguration(context)-->Line_13 $$ if (affectedGradleModuleConfigurations.isEmpty())[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_15 $$ boolean configurationUpdateRequired = context.isRebuild() || !gradleConfigFile.exists()[ CD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_26 $$ projectConfig.moduleConfigurations.putAll(affectedGradleModuleConfigurations)[ CD ]
Line_7 $$ final BuildManager buildManager = BuildManager.getInstance()-->Line_33 $$ buildManager.clearState(myProject)[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_9 $$ if (projectSystemDir == null)[ CD ]
Line_7 $$ final BuildManager buildManager = BuildManager.getInstance()-->Line_8 $$ final File projectSystemDir = buildManager.getProjectSystemDirectory(myProject)[ FD ]
Line_16 $$ final Map<String, Integer> affectedConfigurationHash = new THashMap<String, Integer>()-->Line_23 $$ affectedConfigurationHash.put(entry.getKey(), moduleCurrentConfigurationHash)[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_30 $$ buildManager.runCommand(new Runnable() [ CD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_3 $$ if (shouldBeBuiltByExternalSystem(myProject))[ CD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_12 $$ final Map<String, GradleModuleResourceConfiguration> affectedGradleModuleConfigurations = generateAffectedGradleModulesConfiguration(context)[ CD ]
Line_8 $$ final File projectSystemDir = buildManager.getProjectSystemDirectory(myProject)-->Line_9 $$ if (projectSystemDir == null)[ FD ]
Line_3 $$ if (shouldBeBuiltByExternalSystem(myProject))-->Line_4 $$ return[ CD ]
Line_18 $$ Integer moduleLastConfigurationHash = myModulesConfigurationHash.get(entry.getKey())-->Line_20 $$ if (moduleLastConfigurationHash == null || moduleLastConfigurationHash.intValue() != moduleCurrentConfigurationHash) [ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_12 $$ final Map<String, GradleModuleResourceConfiguration> affectedGradleModuleConfigurations = generateAffectedGradleModulesConfiguration(context)[ FD ]
Line_5 $$ if (!hasGradleModules(context))-->Line_6 $$ return[ CD ]
Line_20 $$ if (moduleLastConfigurationHash == null || moduleLastConfigurationHash.intValue() != moduleCurrentConfigurationHash) -->Line_21 $$ configurationUpdateRequired = true[ CD ]
Line_32 $$ if (finalConfigurationUpdateRequired) -->Line_33 $$ buildManager.clearState(myProject)[ CD ]
Line_25 $$ final GradleProjectConfiguration projectConfig = loadLastConfiguration(gradleConfigFile)-->Line_28 $$ XmlSerializer.serializeInto(projectConfig, document.getRootElement())[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_28 $$ XmlSerializer.serializeInto(projectConfig, document.getRootElement())[ CD ]
Line_11 $$ final File gradleConfigFile = new File(projectSystemDir, GradleProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)-->Line_15 $$ boolean configurationUpdateRequired = context.isRebuild() || !gradleConfigFile.exists()[ FD ]
Line_15 $$ boolean configurationUpdateRequired = context.isRebuild() || !gradleConfigFile.exists()-->Line_21 $$ configurationUpdateRequired = true[ FD ]
Line_27 $$ final Document document = new Document(new Element("gradle-project-configuration"))-->Line_37 $$ JDOMUtil.writeDocument(document, gradleConfigFile, "\n")[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_15 $$ boolean configurationUpdateRequired = context.isRebuild() || !gradleConfigFile.exists()[ FD ]
Line_12 $$ final Map<String, GradleModuleResourceConfiguration> affectedGradleModuleConfigurations = generateAffectedGradleModulesConfiguration(context)-->Line_17 $$ for (Map.Entry<String, GradleModuleResourceConfiguration> entry : affectedGradleModuleConfigurations.entrySet()) [ FD ]
Line_30 $$ buildManager.runCommand(new Runnable() -->Line_35 $$ FileUtil.createIfDoesntExist(gradleConfigFile)[ CD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_7 $$ final BuildManager buildManager = BuildManager.getInstance()[ CD ]
Line_13 $$ if (affectedGradleModuleConfigurations.isEmpty())-->Line_14 $$ return[ CD ]
Line_17 $$ for (Map.Entry<String, GradleModuleResourceConfiguration> entry : affectedGradleModuleConfigurations.entrySet()) -->Line_19 $$ int moduleCurrentConfigurationHash = entry.getValue().computeConfigurationHash()[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_5 $$ if (!hasGradleModules(context))[ FD ]
Line_11 $$ final File gradleConfigFile = new File(projectSystemDir, GradleProjectConfiguration.CONFIGURATION_FILE_RELATIVE_PATH)-->Line_37 $$ JDOMUtil.writeDocument(document, gradleConfigFile, "\n")[ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_27 $$ final Document document = new Document(new Element("gradle-project-configuration"))[ CD ]
Line_9 $$ if (projectSystemDir == null)-->Line_10 $$ return[ CD ]
Line_7 $$ final BuildManager buildManager = BuildManager.getInstance()-->Line_30 $$ buildManager.runCommand(new Runnable() [ FD ]
Line_2 $$ public void generateBuildConfiguration(@NotNull final CompileContext context) -->Line_16 $$ final Map<String, Integer> affectedConfigurationHash = new THashMap<String, Integer>()[ CD ]
Line_27 $$ final Document document = new Document(new Element("gradle-project-configuration"))-->Line_28 $$ XmlSerializer.serializeInto(projectConfig, document.getRootElement())[ FD ]
Line_17 $$ for (Map.Entry<String, GradleModuleResourceConfiguration> entry : affectedGradleModuleConfigurations.entrySet()) -->Line_23 $$ affectedConfigurationHash.put(entry.getKey(), moduleCurrentConfigurationHash)[ FD ]
Line_12 $$ final Map<String, GradleModuleResourceConfiguration> affectedGradleModuleConfigurations = generateAffectedGradleModulesConfiguration(context)-->Line_26 $$ projectConfig.moduleConfigurations.putAll(affectedGradleModuleConfigurations)[ FD ]
