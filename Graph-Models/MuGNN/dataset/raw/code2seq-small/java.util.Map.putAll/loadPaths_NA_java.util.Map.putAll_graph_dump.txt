Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_19 $$ Map<Path, Path> loadedInputPaths = new HashMap()[ CD ]
Line_3 $$ Map<Path, Path> mergedPaths = new HashMap()-->Line_16 $$ mergedPaths.putAll(inputPaths)[ FD ]
Line_45 $$ List<Path> loadedRuntimePaths = new ArrayList()-->Line_58 $$ return new LoadedPaths(loadedInputPaths, StringUtil.merge(loadedBootstrapPaths, File.pathSeparator), StringUtil.merge(loadedRuntimePaths, File.pathSeparator))[ FD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_15 $$ final Map<Path, Path> inputPaths = nettyFabricWorkerConfig.getInputPathMap()[ FD ]
Line_5 $$ final Map<Path, Path> bootstrapPaths = new LinkedHashMap()-->Line_7 $$ bootstrapPaths.put(Paths.get(pathString), null)[ FD ]
Line_10 $$ final Map<Path, Path> runtimePaths = new LinkedHashMap()-->Line_14 $$ mergedPaths.putAll(runtimePaths)[ FD ]
Line_3 $$ Map<Path, Path> mergedPaths = new HashMap()-->Line_48 $$ Path loadedRuntimePath = mergedPaths.get(path)[ FD ]
Line_55 $$ if (!missedRuntimePaths.isEmpty() && _log.isWarnEnabled()) -->Line_56 $$ _log.warn("Incomplete runtime classpath loaded, missed: " + missedRuntimePaths)[ CD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) [ CD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_4 $$ ProcessConfig processConfig = nettyFabricWorkerConfig.getProcessConfig()[ CD ]
Line_6 $$ for (String pathString : processConfig.getBootstrapClassPathElements()) -->Line_7 $$ bootstrapPaths.put(Paths.get(pathString), null)[ FD ]
Line_21 $$ for (Path path : inputPaths.keySet()) -->Line_24 $$ missedInputPaths.add(path)[ FD ]
Line_32 $$ List<Path> loadedBootstrapPaths = new ArrayList()-->Line_58 $$ return new LoadedPaths(loadedInputPaths, StringUtil.merge(loadedBootstrapPaths, File.pathSeparator), StringUtil.merge(loadedRuntimePaths, File.pathSeparator))[ FD ]
Line_22 $$ Path loadedInputPath = mergedPaths.get(path)-->Line_23 $$ if (loadedInputPath == null) [ FD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_9 $$ mergedPaths.putAll(bootstrapPaths)[ CD ]
Line_48 $$ Path loadedRuntimePath = mergedPaths.get(path)-->Line_49 $$ if (loadedRuntimePath == null) [ FD ]
Line_3 $$ Map<Path, Path> mergedPaths = new HashMap()-->Line_35 $$ Path loadedBootstrapPath = mergedPaths.get(path)[ FD ]
Line_46 $$ List<Path> missedRuntimePaths = new ArrayList()-->Line_50 $$ missedRuntimePaths.add(path)[ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_29 $$ if (!missedInputPaths.isEmpty()) [ CD ]
Line_4 $$ ProcessConfig processConfig = nettyFabricWorkerConfig.getProcessConfig()-->Line_11 $$ for (String pathString : processConfig.getRuntimeClassPathElements()) [ FD ]
Line_19 $$ Map<Path, Path> loadedInputPaths = new HashMap()-->Line_26 $$ loadedInputPaths.put(path, loadedInputPath)[ FD ]
Line_21 $$ for (Path path : inputPaths.keySet()) -->Line_35 $$ Path loadedBootstrapPath = mergedPaths.get(path)[ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_55 $$ if (!missedRuntimePaths.isEmpty() && _log.isWarnEnabled()) [ CD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_5 $$ final Map<Path, Path> bootstrapPaths = new LinkedHashMap()[ CD ]
Line_36 $$ if (loadedBootstrapPath == null) -->Line_37 $$ missedBootstrapPaths.add(path)[ CD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_42 $$ if (!missedBootstrapPaths.isEmpty() && _log.isWarnEnabled()) [ CD ]
Line_21 $$ for (Path path : inputPaths.keySet()) -->Line_26 $$ loadedInputPaths.put(path, loadedInputPath)[ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_22 $$ Path loadedInputPath = mergedPaths.get(path)[ FD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_15 $$ final Map<Path, Path> inputPaths = nettyFabricWorkerConfig.getInputPathMap()[ CD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_20 $$ List<Path> missedInputPaths = new ArrayList()[ CD ]
Line_21 $$ for (Path path : inputPaths.keySet()) -->Line_50 $$ missedRuntimePaths.add(path)[ FD ]
Line_48 $$ Path loadedRuntimePath = mergedPaths.get(path)-->Line_52 $$ loadedRuntimePaths.add(loadedRuntimePath)[ FD ]
Line_5 $$ final Map<Path, Path> bootstrapPaths = new LinkedHashMap()-->Line_9 $$ mergedPaths.putAll(bootstrapPaths)[ FD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_14 $$ mergedPaths.putAll(runtimePaths)[ CD ]
Line_49 $$ if (loadedRuntimePath == null) -->Line_52 $$ loadedRuntimePaths.add(loadedRuntimePath)[ CD ]
Line_3 $$ Map<Path, Path> mergedPaths = new HashMap()-->Line_9 $$ mergedPaths.putAll(bootstrapPaths)[ FD ]
Line_36 $$ if (loadedBootstrapPath == null) -->Line_39 $$ loadedBootstrapPaths.add(loadedBootstrapPath)[ CD ]
Line_49 $$ if (loadedRuntimePath == null) -->Line_50 $$ missedRuntimePaths.add(path)[ CD ]
Line_35 $$ Path loadedBootstrapPath = mergedPaths.get(path)-->Line_36 $$ if (loadedBootstrapPath == null) [ FD ]
Line_15 $$ final Map<Path, Path> inputPaths = nettyFabricWorkerConfig.getInputPathMap()-->Line_21 $$ for (Path path : inputPaths.keySet()) [ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_33 $$ List<Path> missedBootstrapPaths = new ArrayList()[ CD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_3 $$ Map<Path, Path> mergedPaths = new HashMap()[ CD ]
Line_23 $$ if (loadedInputPath == null) -->Line_24 $$ missedInputPaths.add(path)[ CD ]
Line_21 $$ for (Path path : inputPaths.keySet()) -->Line_37 $$ missedBootstrapPaths.add(path)[ FD ]
Line_33 $$ List<Path> missedBootstrapPaths = new ArrayList()-->Line_37 $$ missedBootstrapPaths.add(path)[ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_58 $$ return new LoadedPaths(loadedInputPaths, StringUtil.merge(loadedBootstrapPaths, File.pathSeparator), StringUtil.merge(loadedRuntimePaths, File.pathSeparator))[ CD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_35 $$ Path loadedBootstrapPath = mergedPaths.get(path)[ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_46 $$ List<Path> missedRuntimePaths = new ArrayList()[ CD ]
Line_21 $$ for (Path path : inputPaths.keySet()) -->Line_48 $$ Path loadedRuntimePath = mergedPaths.get(path)[ FD ]
Line_46 $$ List<Path> missedRuntimePaths = new ArrayList()-->Line_55 $$ if (!missedRuntimePaths.isEmpty() && _log.isWarnEnabled()) [ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_32 $$ List<Path> loadedBootstrapPaths = new ArrayList()[ CD ]
Line_15 $$ final Map<Path, Path> inputPaths = nettyFabricWorkerConfig.getInputPathMap()-->Line_16 $$ mergedPaths.putAll(inputPaths)[ FD ]
Line_3 $$ Map<Path, Path> mergedPaths = new HashMap()-->Line_22 $$ Path loadedInputPath = mergedPaths.get(path)[ FD ]
Line_10 $$ final Map<Path, Path> runtimePaths = new LinkedHashMap()-->Line_12 $$ runtimePaths.put(Paths.get(pathString), null)[ FD ]
Line_3 $$ Map<Path, Path> mergedPaths = new HashMap()-->Line_14 $$ mergedPaths.putAll(runtimePaths)[ FD ]
Line_42 $$ if (!missedBootstrapPaths.isEmpty() && _log.isWarnEnabled()) -->Line_43 $$ _log.warn("Incomplete bootstrap classpath loaded, missed: " + missedBootstrapPaths)[ CD ]
Line_20 $$ List<Path> missedInputPaths = new ArrayList()-->Line_29 $$ if (!missedInputPaths.isEmpty()) [ FD ]
Line_45 $$ List<Path> loadedRuntimePaths = new ArrayList()-->Line_52 $$ loadedRuntimePaths.add(loadedRuntimePath)[ FD ]
Line_20 $$ List<Path> missedInputPaths = new ArrayList()-->Line_24 $$ missedInputPaths.add(path)[ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_48 $$ Path loadedRuntimePath = mergedPaths.get(path)[ FD ]
Line_21 $$ for (Path path : inputPaths.keySet()) -->Line_22 $$ Path loadedInputPath = mergedPaths.get(path)[ FD ]
Line_32 $$ List<Path> loadedBootstrapPaths = new ArrayList()-->Line_39 $$ loadedBootstrapPaths.add(loadedBootstrapPath)[ FD ]
Line_33 $$ List<Path> missedBootstrapPaths = new ArrayList()-->Line_42 $$ if (!missedBootstrapPaths.isEmpty() && _log.isWarnEnabled()) [ FD ]
Line_10 $$ final Map<Path, Path> runtimePaths = new LinkedHashMap()-->Line_47 $$ for (Path path : runtimePaths.keySet()) [ FD ]
Line_4 $$ ProcessConfig processConfig = nettyFabricWorkerConfig.getProcessConfig()-->Line_6 $$ for (String pathString : processConfig.getBootstrapClassPathElements()) [ FD ]
Line_35 $$ Path loadedBootstrapPath = mergedPaths.get(path)-->Line_39 $$ loadedBootstrapPaths.add(loadedBootstrapPath)[ FD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) [ FD ]
Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) -->Line_45 $$ List<Path> loadedRuntimePaths = new ArrayList()[ CD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_10 $$ final Map<Path, Path> runtimePaths = new LinkedHashMap()[ CD ]
Line_3 $$ Map<Path, Path> mergedPaths = new HashMap()-->Line_17 $$ return new NoticeableFutureConverter<LoadedPaths, Map<Path, Path>>(_repository.getFiles(channel, mergedPaths, false)) [ FD ]
Line_23 $$ if (loadedInputPath == null) -->Line_26 $$ loadedInputPaths.put(path, loadedInputPath)[ CD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_16 $$ mergedPaths.putAll(inputPaths)[ CD ]
Line_6 $$ for (String pathString : processConfig.getBootstrapClassPathElements()) -->Line_12 $$ runtimePaths.put(Paths.get(pathString), null)[ FD ]
Line_22 $$ Path loadedInputPath = mergedPaths.get(path)-->Line_26 $$ loadedInputPaths.put(path, loadedInputPath)[ FD ]
Line_5 $$ final Map<Path, Path> bootstrapPaths = new LinkedHashMap()-->Line_34 $$ for (Path path : bootstrapPaths.keySet()) [ FD ]
Line_2 $$ protected NoticeableFuture<LoadedPaths> loadPaths(Channel channel, NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig) -->Line_4 $$ ProcessConfig processConfig = nettyFabricWorkerConfig.getProcessConfig()[ FD ]
