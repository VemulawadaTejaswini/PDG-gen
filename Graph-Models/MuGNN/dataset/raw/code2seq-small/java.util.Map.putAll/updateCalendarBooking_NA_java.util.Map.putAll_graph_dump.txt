Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_29 $$ calendarBooking.setDescriptionMap(updatedDescriptionMap)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_47 $$ sendNotification(calendarBooking, NotificationTemplateType.UPDATE, serviceContext)[ FD ]
Line_27 $$ Map<Locale, String> updatedDescriptionMap = calendarBooking.getDescriptionMap()-->Line_28 $$ updatedDescriptionMap.putAll(descriptionMap)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_38 $$ calendarBooking.setSecondReminderType(secondReminderType)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_37 $$ calendarBooking.setSecondReminder(secondReminder)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_3 $$ Calendar calendar = calendarPersistence.findByPrimaryKey(calendarId)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_17 $$ secondReminder = firstReminder[ FD ]
Line_16 $$ long originalSecondReminder = secondReminder-->Line_18 $$ firstReminder = originalSecondReminder[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_28 $$ updatedDescriptionMap.putAll(descriptionMap)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_9 $$ java.util.Calendar startTimeJCalendar = JCalendarUtil.getJCalendar(startTime)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_10 $$ java.util.Calendar endTimeJCalendar = JCalendarUtil.getJCalendar(endTime)[ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_40 $$ calendarBooking.setStatus(WorkflowConstants.STATUS_DRAFT)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_42 $$ calendarBooking.setExpandoBridgeAttributes(serviceContext)[ FD ]
Line_18 $$ firstReminder = originalSecondReminder-->Line_35 $$ calendarBooking.setFirstReminder(firstReminder)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)[ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_27 $$ Map<Locale, String> updatedDescriptionMap = calendarBooking.getDescriptionMap()[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_45 $$ updateAsset(userId, calendarBooking, serviceContext.getAssetCategoryIds(), serviceContext.getAssetTagNames(), serviceContext.getAssetLinkEntryIds(), serviceContext.getAssetPriority())[ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_23 $$ calendarBooking.setCalendarId(calendarId)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_30 $$ calendarBooking.setLocation(location)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_35 $$ calendarBooking.setFirstReminder(firstReminder)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_20 $$ validate(startTimeJCalendar, endTimeJCalendar, recurrence)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_27 $$ Map<Locale, String> updatedDescriptionMap = calendarBooking.getDescriptionMap()[ CD ]
Line_13 $$ endTimeJCalendar = JCalendarUtil.toLastHourJCalendar(endTimeJCalendar)-->Line_32 $$ calendarBooking.setEndTime(endTimeJCalendar.getTimeInMillis())[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_34 $$ calendarBooking.setRecurrence(recurrence)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_32 $$ calendarBooking.setEndTime(endTimeJCalendar.getTimeInMillis())[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_36 $$ calendarBooking.setFirstReminderType(firstReminderType)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_6 $$ String sanitizedDescription = SanitizerUtil.sanitize(calendar.getCompanyId(), calendar.getGroupId(), userId, CalendarBooking.class.getName(), calendarBookingId, ContentTypes.TEXT_HTML, Sanitizer.MODE_ALL, descriptionMap.get(locale), null)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_24 $$ Map<Locale, String> updatedTitleMap = calendarBooking.getTitleMap()[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_35 $$ calendarBooking.setFirstReminder(firstReminder)[ FD ]
Line_5 $$ for (Locale locale : descriptionMap.keySet()) -->Line_6 $$ String sanitizedDescription = SanitizerUtil.sanitize(calendar.getCompanyId(), calendar.getGroupId(), userId, CalendarBooking.class.getName(), calendarBookingId, ContentTypes.TEXT_HTML, Sanitizer.MODE_ALL, descriptionMap.get(locale), null)[ FD ]
Line_15 $$ if (firstReminder < secondReminder) -->Line_18 $$ firstReminder = originalSecondReminder[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_37 $$ calendarBooking.setSecondReminder(secondReminder)[ FD ]
Line_48 $$ if (calendarBooking.isMasterBooking()) -->Line_49 $$ WorkflowHandlerRegistryUtil.startWorkflowInstance(calendarBooking.getCompanyId(), calendarBooking.getGroupId(), userId, CalendarBooking.class.getName(), calendarBooking.getCalendarBookingId(), calendarBooking, serviceContext)[ CD ]
Line_15 $$ if (firstReminder < secondReminder) -->Line_16 $$ long originalSecondReminder = secondReminder[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_22 $$ calendarBooking.setModifiedDate(serviceContext.getModifiedDate(null))[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_47 $$ sendNotification(calendarBooking, NotificationTemplateType.UPDATE, serviceContext)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_39 $$ if (!calendarBooking.isPending() || !calendarBooking.isDraft()) [ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_33 $$ calendarBooking.setAllDay(allDay)[ FD ]
Line_15 $$ if (firstReminder < secondReminder) -->Line_17 $$ secondReminder = firstReminder[ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_26 $$ calendarBooking.setTitleMap(updatedTitleMap, serviceContext.getLocale())[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_30 $$ calendarBooking.setLocation(location)[ CD ]
Line_24 $$ Map<Locale, String> updatedTitleMap = calendarBooking.getTitleMap()-->Line_25 $$ updatedTitleMap.putAll(titleMap)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_46 $$ socialActivityLocalService.addActivity(userId, calendarBooking.getGroupId(), CalendarBooking.class.getName(), calendarBookingId, CalendarActivityKeys.UPDATE_CALENDAR_BOOKING, getExtraDataJSON(calendarBooking), 0)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_44 $$ addChildCalendarBookings(calendarBooking, childCalendarIds, serviceContext)[ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_30 $$ calendarBooking.setLocation(location)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_25 $$ updatedTitleMap.putAll(titleMap)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_45 $$ updateAsset(userId, calendarBooking, serviceContext.getAssetCategoryIds(), serviceContext.getAssetTagNames(), serviceContext.getAssetLinkEntryIds(), serviceContext.getAssetPriority())[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_37 $$ calendarBooking.setSecondReminder(secondReminder)[ CD ]
Line_6 $$ String sanitizedDescription = SanitizerUtil.sanitize(calendar.getCompanyId(), calendar.getGroupId(), userId, CalendarBooking.class.getName(), calendarBookingId, ContentTypes.TEXT_HTML, Sanitizer.MODE_ALL, descriptionMap.get(locale), null)-->Line_7 $$ descriptionMap.put(locale, sanitizedDescription)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_47 $$ sendNotification(calendarBooking, NotificationTemplateType.UPDATE, serviceContext)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_33 $$ calendarBooking.setAllDay(allDay)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_18 $$ firstReminder = originalSecondReminder[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_31 $$ calendarBooking.setStartTime(startTimeJCalendar.getTimeInMillis())[ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_44 $$ addChildCalendarBookings(calendarBooking, childCalendarIds, serviceContext)[ FD ]
Line_11 $$ if (allDay) -->Line_12 $$ startTimeJCalendar = JCalendarUtil.toMidnightJCalendar(startTimeJCalendar)[ CD ]
Line_17 $$ secondReminder = firstReminder-->Line_37 $$ calendarBooking.setSecondReminder(secondReminder)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_21 $$ calendarBooking.setGroupId(calendar.getGroupId())[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_36 $$ calendarBooking.setFirstReminderType(firstReminderType)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_24 $$ Map<Locale, String> updatedTitleMap = calendarBooking.getTitleMap()[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_15 $$ if (firstReminder < secondReminder) [ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_11 $$ if (allDay) [ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_42 $$ calendarBooking.setExpandoBridgeAttributes(serviceContext)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_21 $$ calendarBooking.setGroupId(calendar.getGroupId())[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_42 $$ calendarBooking.setExpandoBridgeAttributes(serviceContext)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_46 $$ socialActivityLocalService.addActivity(userId, calendarBooking.getGroupId(), CalendarBooking.class.getName(), calendarBookingId, CalendarActivityKeys.UPDATE_CALENDAR_BOOKING, getExtraDataJSON(calendarBooking), 0)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_23 $$ calendarBooking.setCalendarId(calendarId)[ CD ]
Line_3 $$ Calendar calendar = calendarPersistence.findByPrimaryKey(calendarId)-->Line_21 $$ calendarBooking.setGroupId(calendar.getGroupId())[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_38 $$ calendarBooking.setSecondReminderType(secondReminderType)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_39 $$ if (!calendarBooking.isPending() || !calendarBooking.isDraft()) [ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_49 $$ WorkflowHandlerRegistryUtil.startWorkflowInstance(calendarBooking.getCompanyId(), calendarBooking.getGroupId(), userId, CalendarBooking.class.getName(), calendarBooking.getCalendarBookingId(), calendarBooking, serviceContext)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_26 $$ calendarBooking.setTitleMap(updatedTitleMap, serviceContext.getLocale())[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_48 $$ if (calendarBooking.isMasterBooking()) [ CD ]
Line_13 $$ endTimeJCalendar = JCalendarUtil.toLastHourJCalendar(endTimeJCalendar)-->Line_20 $$ validate(startTimeJCalendar, endTimeJCalendar, recurrence)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_3 $$ Calendar calendar = calendarPersistence.findByPrimaryKey(calendarId)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_48 $$ if (calendarBooking.isMasterBooking()) [ FD ]
Line_24 $$ Map<Locale, String> updatedTitleMap = calendarBooking.getTitleMap()-->Line_26 $$ calendarBooking.setTitleMap(updatedTitleMap, serviceContext.getLocale())[ FD ]
Line_9 $$ java.util.Calendar startTimeJCalendar = JCalendarUtil.getJCalendar(startTime)-->Line_31 $$ calendarBooking.setStartTime(startTimeJCalendar.getTimeInMillis())[ FD ]
Line_12 $$ startTimeJCalendar = JCalendarUtil.toMidnightJCalendar(startTimeJCalendar)-->Line_20 $$ validate(startTimeJCalendar, endTimeJCalendar, recurrence)[ FD ]
Line_12 $$ startTimeJCalendar = JCalendarUtil.toMidnightJCalendar(startTimeJCalendar)-->Line_31 $$ calendarBooking.setStartTime(startTimeJCalendar.getTimeInMillis())[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_15 $$ if (firstReminder < secondReminder) [ CD ]
Line_9 $$ java.util.Calendar startTimeJCalendar = JCalendarUtil.getJCalendar(startTime)-->Line_12 $$ startTimeJCalendar = JCalendarUtil.toMidnightJCalendar(startTimeJCalendar)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_35 $$ calendarBooking.setFirstReminder(firstReminder)[ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_22 $$ calendarBooking.setModifiedDate(serviceContext.getModifiedDate(null))[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_10 $$ java.util.Calendar endTimeJCalendar = JCalendarUtil.getJCalendar(endTime)[ FD ]
Line_10 $$ java.util.Calendar endTimeJCalendar = JCalendarUtil.getJCalendar(endTime)-->Line_32 $$ calendarBooking.setEndTime(endTimeJCalendar.getTimeInMillis())[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_20 $$ validate(startTimeJCalendar, endTimeJCalendar, recurrence)[ CD ]
Line_10 $$ java.util.Calendar endTimeJCalendar = JCalendarUtil.getJCalendar(endTime)-->Line_20 $$ validate(startTimeJCalendar, endTimeJCalendar, recurrence)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_22 $$ calendarBooking.setModifiedDate(serviceContext.getModifiedDate(null))[ CD ]
Line_5 $$ for (Locale locale : descriptionMap.keySet()) -->Line_7 $$ descriptionMap.put(locale, sanitizedDescription)[ FD ]
Line_27 $$ Map<Locale, String> updatedDescriptionMap = calendarBooking.getDescriptionMap()-->Line_29 $$ calendarBooking.setDescriptionMap(updatedDescriptionMap)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_32 $$ calendarBooking.setEndTime(endTimeJCalendar.getTimeInMillis())[ FD ]
Line_10 $$ java.util.Calendar endTimeJCalendar = JCalendarUtil.getJCalendar(endTime)-->Line_13 $$ endTimeJCalendar = JCalendarUtil.toLastHourJCalendar(endTimeJCalendar)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_43 $$ calendarBookingPersistence.update(calendarBooking)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_45 $$ updateAsset(userId, calendarBooking, serviceContext.getAssetCategoryIds(), serviceContext.getAssetTagNames(), serviceContext.getAssetLinkEntryIds(), serviceContext.getAssetPriority())[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_46 $$ socialActivityLocalService.addActivity(userId, calendarBooking.getGroupId(), CalendarBooking.class.getName(), calendarBookingId, CalendarActivityKeys.UPDATE_CALENDAR_BOOKING, getExtraDataJSON(calendarBooking), 0)[ FD ]
Line_11 $$ if (allDay) -->Line_13 $$ endTimeJCalendar = JCalendarUtil.toLastHourJCalendar(endTimeJCalendar)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_51 $$ return calendarBooking[ CD ]
Line_3 $$ Calendar calendar = calendarPersistence.findByPrimaryKey(calendarId)-->Line_6 $$ String sanitizedDescription = SanitizerUtil.sanitize(calendar.getCompanyId(), calendar.getGroupId(), userId, CalendarBooking.class.getName(), calendarBookingId, ContentTypes.TEXT_HTML, Sanitizer.MODE_ALL, descriptionMap.get(locale), null)[ FD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_31 $$ calendarBooking.setStartTime(startTimeJCalendar.getTimeInMillis())[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_34 $$ calendarBooking.setRecurrence(recurrence)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_26 $$ calendarBooking.setTitleMap(updatedTitleMap, serviceContext.getLocale())[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_33 $$ calendarBooking.setAllDay(allDay)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_44 $$ addChildCalendarBookings(calendarBooking, childCalendarIds, serviceContext)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_9 $$ java.util.Calendar startTimeJCalendar = JCalendarUtil.getJCalendar(startTime)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_38 $$ calendarBooking.setSecondReminderType(secondReminderType)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_25 $$ updatedTitleMap.putAll(titleMap)[ CD ]
Line_4 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_34 $$ calendarBooking.setRecurrence(recurrence)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_28 $$ updatedDescriptionMap.putAll(descriptionMap)[ CD ]
Line_39 $$ if (!calendarBooking.isPending() || !calendarBooking.isDraft()) -->Line_40 $$ calendarBooking.setStatus(WorkflowConstants.STATUS_DRAFT)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_49 $$ WorkflowHandlerRegistryUtil.startWorkflowInstance(calendarBooking.getCompanyId(), calendarBooking.getGroupId(), userId, CalendarBooking.class.getName(), calendarBooking.getCalendarBookingId(), calendarBooking, serviceContext)[ FD ]
Line_9 $$ java.util.Calendar startTimeJCalendar = JCalendarUtil.getJCalendar(startTime)-->Line_20 $$ validate(startTimeJCalendar, endTimeJCalendar, recurrence)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_36 $$ calendarBooking.setFirstReminderType(firstReminderType)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_5 $$ for (Locale locale : descriptionMap.keySet()) [ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_7 $$ descriptionMap.put(locale, sanitizedDescription)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_23 $$ calendarBooking.setCalendarId(calendarId)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_29 $$ calendarBooking.setDescriptionMap(updatedDescriptionMap)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBooking(long userId, long calendarBookingId, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_43 $$ calendarBookingPersistence.update(calendarBooking)[ CD ]
