Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_9 $$ if (allFollowing) [ CD ]
Line_14 $$ recurrence = RecurrenceSerializer.serialize(recurrenceObj)-->Line_17 $$ recurrence = StringPool.BLANK[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_12 $$ if (oldRecurrence.equals(recurrence) && (recurrenceObj.getCount() > 0)) [ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_14 $$ recurrence = RecurrenceSerializer.serialize(recurrenceObj)[ FD ]
Line_11 $$ Recurrence recurrenceObj = RecurrenceSerializer.deserialize(recurrence, calendar.getTimeZone())-->Line_14 $$ recurrence = RecurrenceSerializer.serialize(recurrenceObj)[ FD ]
Line_4 $$ if ((instanceIndex == 0) && allFollowing) -->Line_5 $$ return updateCalendarBooking(userId, calendarBookingId, calendarId, childCalendarIds, titleMap, descriptionMap, location, startTime, endTime, allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_19 $$ Map<Locale, String> updatedTitleMap = calendarBooking.getTitleMap()[ CD ]
Line_3 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_21 $$ Map<Locale, String> updatedDescriptionMap = calendarBooking.getDescriptionMap()[ FD ]
Line_11 $$ Recurrence recurrenceObj = RecurrenceSerializer.deserialize(recurrence, calendar.getTimeZone())-->Line_13 $$ recurrenceObj.setCount(recurrenceObj.getCount() - instanceIndex)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_23 $$ return addCalendarBooking(userId, calendarId, childCalendarIds, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, updatedTitleMap, updatedDescriptionMap, location, startTime, endTime, allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_12 $$ if (oldRecurrence.equals(recurrence) && (recurrenceObj.getCount() > 0)) -->Line_13 $$ recurrenceObj.setCount(recurrenceObj.getCount() - instanceIndex)[ CD ]
Line_9 $$ if (allFollowing) -->Line_17 $$ recurrence = StringPool.BLANK[ CD ]
Line_14 $$ recurrence = RecurrenceSerializer.serialize(recurrenceObj)-->Line_23 $$ return addCalendarBooking(userId, calendarId, childCalendarIds, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, updatedTitleMap, updatedDescriptionMap, location, startTime, endTime, allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_11 $$ Recurrence recurrenceObj = RecurrenceSerializer.deserialize(recurrence, calendar.getTimeZone())-->Line_12 $$ if (oldRecurrence.equals(recurrence) && (recurrenceObj.getCount() > 0)) [ FD ]
Line_21 $$ Map<Locale, String> updatedDescriptionMap = calendarBooking.getDescriptionMap()-->Line_23 $$ return addCalendarBooking(userId, calendarId, childCalendarIds, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, updatedTitleMap, updatedDescriptionMap, location, startTime, endTime, allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_10 $$ Calendar calendar = calendarLocalService.getCalendar(calendarId)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_17 $$ recurrence = StringPool.BLANK[ FD ]
Line_19 $$ Map<Locale, String> updatedTitleMap = calendarBooking.getTitleMap()-->Line_23 $$ return addCalendarBooking(userId, calendarId, childCalendarIds, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, updatedTitleMap, updatedDescriptionMap, location, startTime, endTime, allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_4 $$ if ((instanceIndex == 0) && allFollowing) [ CD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_7 $$ String oldRecurrence = calendarBooking.getRecurrence()[ CD ]
Line_19 $$ Map<Locale, String> updatedTitleMap = calendarBooking.getTitleMap()-->Line_20 $$ updatedTitleMap.putAll(titleMap)[ FD ]
Line_3 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_7 $$ String oldRecurrence = calendarBooking.getRecurrence()[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_8 $$ deleteCalendarBookingInstance(calendarBooking, instanceIndex, allFollowing)[ CD ]
Line_3 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_8 $$ deleteCalendarBookingInstance(calendarBooking, instanceIndex, allFollowing)[ FD ]
Line_9 $$ if (allFollowing) -->Line_11 $$ Recurrence recurrenceObj = RecurrenceSerializer.deserialize(recurrence, calendar.getTimeZone())[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_8 $$ deleteCalendarBookingInstance(calendarBooking, instanceIndex, allFollowing)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_3 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)[ CD ]
Line_9 $$ if (allFollowing) -->Line_12 $$ if (oldRecurrence.equals(recurrence) && (recurrenceObj.getCount() > 0)) [ CD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_20 $$ updatedTitleMap.putAll(titleMap)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_22 $$ updatedDescriptionMap.putAll(descriptionMap)[ CD ]
Line_12 $$ if (oldRecurrence.equals(recurrence) && (recurrenceObj.getCount() > 0)) -->Line_14 $$ recurrence = RecurrenceSerializer.serialize(recurrenceObj)[ CD ]
Line_21 $$ Map<Locale, String> updatedDescriptionMap = calendarBooking.getDescriptionMap()-->Line_22 $$ updatedDescriptionMap.putAll(descriptionMap)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_22 $$ updatedDescriptionMap.putAll(descriptionMap)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_23 $$ return addCalendarBooking(userId, calendarId, childCalendarIds, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, updatedTitleMap, updatedDescriptionMap, location, startTime, endTime, allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_21 $$ Map<Locale, String> updatedDescriptionMap = calendarBooking.getDescriptionMap()[ CD ]
Line_3 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)-->Line_19 $$ Map<Locale, String> updatedTitleMap = calendarBooking.getTitleMap()[ FD ]
Line_9 $$ if (allFollowing) -->Line_10 $$ Calendar calendar = calendarLocalService.getCalendar(calendarId)[ CD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_4 $$ if ((instanceIndex == 0) && allFollowing) [ FD ]
Line_10 $$ Calendar calendar = calendarLocalService.getCalendar(calendarId)-->Line_11 $$ Recurrence recurrenceObj = RecurrenceSerializer.deserialize(recurrence, calendar.getTimeZone())[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_11 $$ Recurrence recurrenceObj = RecurrenceSerializer.deserialize(recurrence, calendar.getTimeZone())[ FD ]
Line_7 $$ String oldRecurrence = calendarBooking.getRecurrence()-->Line_12 $$ if (oldRecurrence.equals(recurrence) && (recurrenceObj.getCount() > 0)) [ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_5 $$ return updateCalendarBooking(userId, calendarBookingId, calendarId, childCalendarIds, titleMap, descriptionMap, location, startTime, endTime, allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_17 $$ recurrence = StringPool.BLANK-->Line_23 $$ return addCalendarBooking(userId, calendarId, childCalendarIds, CalendarBookingConstants.PARENT_CALENDAR_BOOKING_ID_DEFAULT, updatedTitleMap, updatedDescriptionMap, location, startTime, endTime, allDay, recurrence, firstReminder, firstReminderType, secondReminder, secondReminderType, serviceContext)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_20 $$ updatedTitleMap.putAll(titleMap)[ FD ]
Line_2 $$ public CalendarBooking updateCalendarBookingInstance(long userId, long calendarBookingId, int instanceIndex, long calendarId, long[] childCalendarIds, Map<Locale, String> titleMap, Map<Locale, String> descriptionMap, String location, long startTime, long endTime, boolean allDay, String recurrence, boolean allFollowing, long firstReminder, String firstReminderType, long secondReminder, String secondReminderType, ServiceContext serviceContext) throws PortalException -->Line_3 $$ CalendarBooking calendarBooking = calendarBookingPersistence.findByPrimaryKey(calendarBookingId)[ FD ]
