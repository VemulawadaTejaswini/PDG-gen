Line_5 $$ Map<Action, JButton> buttonMap = new LinkedHashMap<Action, JButton>()-->Line_31 $$ JPanel buttonsPanel = createButtons(leftSideActions, buttonMap)[ FD ]
Line_41 $$ if (SystemInfo.isMac) -->Line_47 $$ if (cancelNdx > 0) [ CD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_17 $$ actions = ArrayUtil.remove(actions, action)[ FD ]
Line_81 $$ panel = withCB-->Line_85 $$ panel.setBorder(new CompoundBorder(line, JBUI.Borders.empty(8, 12)))[ FD ]
Line_26 $$ final JPanel lrButtonsPanel = new JPanel(new GridBagLayout())-->Line_37 $$ lrButtonsPanel.add(Box.createHorizontalGlue(), new GridBagConstraints(gridX++, 0, 1, 1, 1, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, insets, 0, 0))[ FD ]
Line_62 $$ if (hasHelpToMoveToLeftSide) -->Line_65 $$ helpButton.setText("")[ CD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_3 $$ Action[] actions = filter(createActions())[ CD ]
Line_48 $$ actions = ArrayUtil.mergeArrays(new Action[] -->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ FD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_42 $$ int okNdx = ArrayUtil.indexOf(actions, getOKAction())[ FD ]
Line_28 $$ if (actions.length > 0 || leftSideActions.length > 0) -->Line_29 $$ int gridX = 0[ CD ]
Line_26 $$ final JPanel lrButtonsPanel = new JPanel(new GridBagLayout())-->Line_70 $$ panel.add(lrButtonsPanel, BorderLayout.CENTER)[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_5 $$ Map<Action, JButton> buttonMap = new LinkedHashMap<Action, JButton>()[ CD ]
Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ FD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_21 $$ if (UIUtil.isUnderGTKLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) [ FD ]
Line_13 $$ if (SystemInfo.isMac) -->Line_21 $$ if (UIUtil.isUnderGTKLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) [ CD ]
Line_4 $$ Action[] leftSideActions = createLeftSideActions()-->Line_31 $$ JPanel buttonsPanel = createButtons(leftSideActions, buttonMap)[ FD ]
Line_41 $$ if (SystemInfo.isMac) -->Line_42 $$ int okNdx = ArrayUtil.indexOf(actions, getOKAction())[ CD ]
Line_46 $$ int cancelNdx = ArrayUtil.indexOf(actions, getCancelAction())-->Line_47 $$ if (cancelNdx > 0) [ FD ]
Line_63 $$ JButton helpButton = new JButton(getHelpAction())-->Line_67 $$ helpButton.setToolTipText(ActionsBundle.actionDescription("HelpTopics"))[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_70 $$ panel.add(lrButtonsPanel, BorderLayout.CENTER)[ CD ]
Line_17 $$ actions = ArrayUtil.remove(actions, action)-->Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ FD ]
Line_26 $$ final JPanel lrButtonsPanel = new JPanel(new GridBagLayout())-->Line_35 $$ lrButtonsPanel.add(buttonsPanel, new GridBagConstraints(gridX++, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, insets, 0, 0))[ FD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())[ FD ]
Line_72 $$ if (askOption != null) -->Line_78 $$ final JPanel withCB = addDoNotShowCheckBox(southPanel, myCheckBoxDoNotShowDialog)[ CD ]
Line_63 $$ JButton helpButton = new JButton(getHelpAction())-->Line_64 $$ helpButton.putClientProperty("JButton.buttonType", "help")[ FD ]
Line_15 $$ if (action instanceof MacOtherAction) -->Line_17 $$ actions = ArrayUtil.remove(actions, action)[ CD ]
Line_72 $$ if (askOption != null) -->Line_81 $$ panel = withCB[ CD ]
Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())-->Line_48 $$ actions = ArrayUtil.mergeArrays(new Action[] [ FD ]
Line_72 $$ if (askOption != null) -->Line_80 $$ DialogUtil.registerMnemonic(myCheckBoxDoNotShowDialog, '&')[ CD ]
Line_28 $$ if (actions.length > 0 || leftSideActions.length > 0) -->Line_60 $$ myButtonMap.putAll(buttonMap)[ CD ]
Line_78 $$ final JPanel withCB = addDoNotShowCheckBox(southPanel, myCheckBoxDoNotShowDialog)-->Line_81 $$ panel = withCB[ FD ]
Line_14 $$ for (Action action : actions) -->Line_16 $$ leftSideActions = ArrayUtil.append(leftSideActions, action)[ FD ]
Line_26 $$ final JPanel lrButtonsPanel = new JPanel(new GridBagLayout())-->Line_52 $$ lrButtonsPanel.add(buttonsPanel, new GridBagConstraints(gridX++, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, insets, 0, 0))[ FD ]
Line_71 $$ final DoNotAskOption askOption = myDoNotAsk-->Line_79 $$ myCheckBoxDoNotShowDialog.setSelected(!askOption.isToBeShown())[ FD ]
Line_72 $$ if (askOption != null) -->Line_79 $$ myCheckBoxDoNotShowDialog.setSelected(!askOption.isToBeShown())[ CD ]
Line_40 $$ if (actions.length > 0) -->Line_41 $$ if (SystemInfo.isMac) [ CD ]
Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_48 $$ actions = ArrayUtil.mergeArrays(new Action[] [ FD ]
Line_75 $$ if (!askOption.canBeHidden()) -->Line_76 $$ return southPanel[ CD ]
Line_83 $$ if (getStyle() == DialogStyle.COMPACT) -->Line_84 $$ Border line = new CustomLineBorder(OnePixelDivider.BACKGROUND, 1, 0, 0, 0)[ CD ]
Line_7 $$ if ((UIUtil.isUnderAquaBasedLookAndFeel()) && Arrays.asList(actions).contains(getHelpAction())) -->Line_10 $$ if (Registry.is("ide.remove.help.button.from.dialogs")) [ CD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_7 $$ if ((UIUtil.isUnderAquaBasedLookAndFeel()) && Arrays.asList(actions).contains(getHelpAction())) [ FD ]
Line_25 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_87 $$ panel.setBorder(JBUI.Borders.emptyTop(8))[ FD ]
Line_6 $$ boolean hasHelpToMoveToLeftSide = false-->Line_8 $$ hasHelpToMoveToLeftSide = true[ FD ]
Line_30 $$ if (leftSideActions.length > 0) -->Line_35 $$ lrButtonsPanel.add(buttonsPanel, new GridBagConstraints(gridX++, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, insets, 0, 0))[ CD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_27 $$ final Insets insets = SystemInfo.isMacOSLeopard ? UIUtil.isUnderIntelliJLaF() ? JBUI.insets(0, 8) : JBUI.emptyInsets() : new Insets(8, 0, 0, 0)[ CD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_42 $$ int okNdx = ArrayUtil.indexOf(actions, getOKAction())[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_26 $$ final JPanel lrButtonsPanel = new JPanel(new GridBagLayout())[ CD ]
Line_30 $$ if (leftSideActions.length > 0) -->Line_32 $$ if (actions.length > 0) [ CD ]
Line_17 $$ actions = ArrayUtil.remove(actions, action)-->Line_46 $$ int cancelNdx = ArrayUtil.indexOf(actions, getCancelAction())[ FD ]
Line_5 $$ Map<Action, JButton> buttonMap = new LinkedHashMap<Action, JButton>()-->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_4 $$ Action[] leftSideActions = createLeftSideActions()[ CD ]
Line_28 $$ if (actions.length > 0 || leftSideActions.length > 0) -->Line_59 $$ myButtonMap.clear()[ CD ]
Line_40 $$ if (actions.length > 0) -->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ CD ]
Line_71 $$ final DoNotAskOption askOption = myDoNotAsk-->Line_73 $$ myCheckBoxDoNotShowDialog = new JCheckBox(askOption.getDoNotShowMessage())[ FD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_17 $$ actions = ArrayUtil.remove(actions, action)[ FD ]
Line_4 $$ Action[] leftSideActions = createLeftSideActions()-->Line_22 $$ leftSideActions = ArrayUtil.append(leftSideActions, getHelpAction())[ FD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ FD ]
Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_21 $$ if (UIUtil.isUnderGTKLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) [ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_6 $$ boolean hasHelpToMoveToLeftSide = false[ CD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_83 $$ if (getStyle() == DialogStyle.COMPACT) [ CD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_89 $$ return panel[ CD ]
Line_14 $$ for (Action action : actions) -->Line_15 $$ if (action instanceof MacOtherAction) [ FD ]
Line_41 $$ if (SystemInfo.isMac) -->Line_46 $$ int cancelNdx = ArrayUtil.indexOf(actions, getCancelAction())[ CD ]
Line_7 $$ if ((UIUtil.isUnderAquaBasedLookAndFeel()) && Arrays.asList(actions).contains(getHelpAction())) -->Line_8 $$ hasHelpToMoveToLeftSide = true[ CD ]
Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ FD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_48 $$ actions = ArrayUtil.mergeArrays(new Action[] [ FD ]
Line_32 $$ if (actions.length > 0) -->Line_33 $$ buttonsPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 20))[ CD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_21 $$ if (UIUtil.isUnderGTKLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) [ FD ]
Line_29 $$ int gridX = 0-->Line_37 $$ lrButtonsPanel.add(Box.createHorizontalGlue(), new GridBagConstraints(gridX++, 0, 1, 1, 1, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, insets, 0, 0))[ FD ]
Line_25 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_70 $$ panel.add(lrButtonsPanel, BorderLayout.CENTER)[ FD ]
Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_48 $$ actions = ArrayUtil.mergeArrays(new Action[] [ FD ]
Line_62 $$ if (hasHelpToMoveToLeftSide) -->Line_66 $$ helpButton.setMargin(insets)[ CD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_13 $$ if (SystemInfo.isMac) [ CD ]
Line_71 $$ final DoNotAskOption askOption = myDoNotAsk-->Line_72 $$ if (askOption != null) [ FD ]
Line_17 $$ actions = ArrayUtil.remove(actions, action)-->Line_42 $$ int okNdx = ArrayUtil.indexOf(actions, getOKAction())[ FD ]
Line_21 $$ if (UIUtil.isUnderGTKLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) -->Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ CD ]
Line_28 $$ if (actions.length > 0 || leftSideActions.length > 0) -->Line_37 $$ lrButtonsPanel.add(Box.createHorizontalGlue(), new GridBagConstraints(gridX++, 0, 1, 1, 1, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, insets, 0, 0))[ CD ]
Line_31 $$ JPanel buttonsPanel = createButtons(leftSideActions, buttonMap)-->Line_33 $$ buttonsPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 20))[ FD ]
Line_28 $$ if (actions.length > 0 || leftSideActions.length > 0) -->Line_40 $$ if (actions.length > 0) [ CD ]
Line_28 $$ if (actions.length > 0 || leftSideActions.length > 0) -->Line_54 $$ if (SwingConstants.CENTER == myButtonAlignment) [ CD ]
Line_27 $$ final Insets insets = SystemInfo.isMacOSLeopard ? UIUtil.isUnderIntelliJLaF() ? JBUI.insets(0, 8) : JBUI.emptyInsets() : new Insets(8, 0, 0, 0)-->Line_66 $$ helpButton.setMargin(insets)[ FD ]
Line_31 $$ JPanel buttonsPanel = createButtons(leftSideActions, buttonMap)-->Line_35 $$ lrButtonsPanel.add(buttonsPanel, new GridBagConstraints(gridX++, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, insets, 0, 0))[ FD ]
Line_25 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_85 $$ panel.setBorder(new CompoundBorder(line, JBUI.Borders.empty(8, 12)))[ FD ]
Line_17 $$ actions = ArrayUtil.remove(actions, action)-->Line_21 $$ if (UIUtil.isUnderGTKLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) [ FD ]
Line_4 $$ Action[] leftSideActions = createLeftSideActions()-->Line_16 $$ leftSideActions = ArrayUtil.append(leftSideActions, action)[ FD ]
Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_17 $$ actions = ArrayUtil.remove(actions, action)[ FD ]
Line_29 $$ int gridX = 0-->Line_35 $$ lrButtonsPanel.add(buttonsPanel, new GridBagConstraints(gridX++, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, insets, 0, 0))[ FD ]
Line_47 $$ if (cancelNdx > 0) -->Line_48 $$ actions = ArrayUtil.mergeArrays(new Action[] [ CD ]
Line_72 $$ if (askOption != null) -->Line_75 $$ if (!askOption.canBeHidden()) [ CD ]
Line_40 $$ if (actions.length > 0) -->Line_52 $$ lrButtonsPanel.add(buttonsPanel, new GridBagConstraints(gridX++, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, insets, 0, 0))[ CD ]
Line_63 $$ JButton helpButton = new JButton(getHelpAction())-->Line_65 $$ helpButton.setText("")[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_7 $$ if ((UIUtil.isUnderAquaBasedLookAndFeel()) && Arrays.asList(actions).contains(getHelpAction())) [ CD ]
Line_63 $$ JButton helpButton = new JButton(getHelpAction())-->Line_68 $$ panel.add(helpButton, BorderLayout.WEST)[ FD ]
Line_54 $$ if (SwingConstants.CENTER == myButtonAlignment) -->Line_55 $$ lrButtonsPanel.add(Box.createHorizontalGlue(), new GridBagConstraints(gridX, 0, 1, 1, 1, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, insets, 0, 0))[ CD ]
Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())[ FD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_46 $$ int cancelNdx = ArrayUtil.indexOf(actions, getCancelAction())[ FD ]
Line_17 $$ actions = ArrayUtil.remove(actions, action)-->Line_48 $$ actions = ArrayUtil.mergeArrays(new Action[] [ FD ]
Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())-->Line_46 $$ int cancelNdx = ArrayUtil.indexOf(actions, getCancelAction())[ FD ]
Line_16 $$ leftSideActions = ArrayUtil.append(leftSideActions, action)-->Line_31 $$ JPanel buttonsPanel = createButtons(leftSideActions, buttonMap)[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_71 $$ final DoNotAskOption askOption = myDoNotAsk[ CD ]
Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_42 $$ int okNdx = ArrayUtil.indexOf(actions, getOKAction())[ FD ]
Line_17 $$ actions = ArrayUtil.remove(actions, action)-->Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())[ FD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ FD ]
Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())[ FD ]
Line_43 $$ if (okNdx >= 0 && okNdx != actions.length - 1) -->Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())[ CD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ FD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_48 $$ actions = ArrayUtil.mergeArrays(new Action[] [ FD ]
Line_63 $$ JButton helpButton = new JButton(getHelpAction())-->Line_66 $$ helpButton.setMargin(insets)[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_62 $$ if (hasHelpToMoveToLeftSide) [ CD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())[ FD ]
Line_31 $$ JPanel buttonsPanel = createButtons(leftSideActions, buttonMap)-->Line_52 $$ lrButtonsPanel.add(buttonsPanel, new GridBagConstraints(gridX++, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, insets, 0, 0))[ FD ]
Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_46 $$ int cancelNdx = ArrayUtil.indexOf(actions, getCancelAction())[ FD ]
Line_71 $$ final DoNotAskOption askOption = myDoNotAsk-->Line_75 $$ if (!askOption.canBeHidden()) [ FD ]
Line_28 $$ if (actions.length > 0 || leftSideActions.length > 0) -->Line_30 $$ if (leftSideActions.length > 0) [ CD ]
Line_5 $$ Map<Action, JButton> buttonMap = new LinkedHashMap<Action, JButton>()-->Line_60 $$ myButtonMap.putAll(buttonMap)[ FD ]
Line_83 $$ if (getStyle() == DialogStyle.COMPACT) -->Line_87 $$ panel.setBorder(JBUI.Borders.emptyTop(8))[ CD ]
Line_44 $$ actions = ArrayUtil.append(ArrayUtil.remove(actions, getOKAction()), getOKAction())-->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_28 $$ if (actions.length > 0 || leftSideActions.length > 0) [ CD ]
Line_26 $$ final JPanel lrButtonsPanel = new JPanel(new GridBagLayout())-->Line_55 $$ lrButtonsPanel.add(Box.createHorizontalGlue(), new GridBagConstraints(gridX, 0, 1, 1, 1, 0, GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, insets, 0, 0))[ FD ]
Line_30 $$ if (leftSideActions.length > 0) -->Line_31 $$ JPanel buttonsPanel = createButtons(leftSideActions, buttonMap)[ CD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ FD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ FD ]
Line_25 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_68 $$ panel.add(helpButton, BorderLayout.WEST)[ FD ]
Line_16 $$ leftSideActions = ArrayUtil.append(leftSideActions, action)-->Line_22 $$ leftSideActions = ArrayUtil.append(leftSideActions, getHelpAction())[ FD ]
Line_41 $$ if (SystemInfo.isMac) -->Line_43 $$ if (okNdx >= 0 && okNdx != actions.length - 1) [ CD ]
Line_14 $$ for (Action action : actions) -->Line_17 $$ actions = ArrayUtil.remove(actions, action)[ FD ]
Line_21 $$ if (UIUtil.isUnderGTKLookAndFeel() && Arrays.asList(actions).contains(getHelpAction())) -->Line_22 $$ leftSideActions = ArrayUtil.append(leftSideActions, getHelpAction())[ CD ]
Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_42 $$ int okNdx = ArrayUtil.indexOf(actions, getOKAction())[ FD ]
Line_25 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_81 $$ panel = withCB[ FD ]
Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ FD ]
Line_83 $$ if (getStyle() == DialogStyle.COMPACT) -->Line_85 $$ panel.setBorder(new CompoundBorder(line, JBUI.Borders.empty(8, 12)))[ CD ]
Line_62 $$ if (hasHelpToMoveToLeftSide) -->Line_63 $$ JButton helpButton = new JButton(getHelpAction())[ CD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_25 $$ JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_7 $$ if ((UIUtil.isUnderAquaBasedLookAndFeel()) && Arrays.asList(actions).contains(getHelpAction())) -->Line_9 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ CD ]
Line_3 $$ Action[] actions = filter(createActions())-->Line_46 $$ int cancelNdx = ArrayUtil.indexOf(actions, getCancelAction())[ FD ]
Line_62 $$ if (hasHelpToMoveToLeftSide) -->Line_68 $$ panel.add(helpButton, BorderLayout.WEST)[ CD ]
Line_29 $$ int gridX = 0-->Line_52 $$ lrButtonsPanel.add(buttonsPanel, new GridBagConstraints(gridX++, 0, 1, 1, 0, 0, GridBagConstraints.CENTER, GridBagConstraints.NONE, insets, 0, 0))[ FD ]
Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_23 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ FD ]
Line_15 $$ if (action instanceof MacOtherAction) -->Line_16 $$ leftSideActions = ArrayUtil.append(leftSideActions, action)[ CD ]
Line_17 $$ actions = ArrayUtil.remove(actions, action)-->Line_51 $$ JPanel buttonsPanel = createButtons(actions, buttonMap)[ FD ]
Line_62 $$ if (hasHelpToMoveToLeftSide) -->Line_67 $$ helpButton.setToolTipText(ActionsBundle.actionDescription("HelpTopics"))[ CD ]
Line_81 $$ panel = withCB-->Line_87 $$ panel.setBorder(JBUI.Borders.emptyTop(8))[ FD ]
Line_2 $$ protected JComponent createSouthPanel() -->Line_72 $$ if (askOption != null) [ CD ]
Line_72 $$ if (askOption != null) -->Line_74 $$ JComponent southPanel = panel[ CD ]
Line_10 $$ if (Registry.is("ide.remove.help.button.from.dialogs")) -->Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())[ CD ]
Line_22 $$ leftSideActions = ArrayUtil.append(leftSideActions, getHelpAction())-->Line_31 $$ JPanel buttonsPanel = createButtons(leftSideActions, buttonMap)[ FD ]
Line_74 $$ JComponent southPanel = panel-->Line_78 $$ final JPanel withCB = addDoNotShowCheckBox(southPanel, myCheckBoxDoNotShowDialog)[ FD ]
Line_62 $$ if (hasHelpToMoveToLeftSide) -->Line_64 $$ helpButton.putClientProperty("JButton.buttonType", "help")[ CD ]
Line_11 $$ actions = ArrayUtil.remove(actions, getHelpAction())-->Line_46 $$ int cancelNdx = ArrayUtil.indexOf(actions, getCancelAction())[ FD ]
