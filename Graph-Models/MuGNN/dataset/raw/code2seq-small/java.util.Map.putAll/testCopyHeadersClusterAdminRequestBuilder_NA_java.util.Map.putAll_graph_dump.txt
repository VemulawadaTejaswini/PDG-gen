Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_14 $$ expectedContext.putAll(transportContext)[ CD ]
Line_18 $$ for (ActionRequestBuilder requestBuilder : requestBuilders) -->Line_23 $$ assertHeaders(requestBuilder.request(), expectedHeaders)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_13 $$ Map<String, String> expectedContext = new HashMap()[ CD ]
Line_3 $$ Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10))-->Line_19 $$ putHeaders(requestBuilder.request(), transportHeaders)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_5 $$ Map<String, String> copiedHeaders = randomHeadersFrom(restHeaders)[ CD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_3 $$ Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10))[ CD ]
Line_9 $$ Map<String, String> transportContext = onlyOnLeft(randomContext(randomIntBetween(0, 10)), restContext)-->Line_20 $$ putContext(requestBuilder.request(), transportContext)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_9 $$ Map<String, String> transportContext = onlyOnLeft(randomContext(randomIntBetween(0, 10)), restContext)[ CD ]
Line_4 $$ Map<String, String> restHeaders = randomHeaders(randomIntBetween(0, 10))-->Line_5 $$ Map<String, String> copiedHeaders = randomHeadersFrom(restHeaders)[ FD ]
Line_13 $$ Map<String, String> expectedContext = new HashMap()-->Line_24 $$ assertContext(requestBuilder.request(), expectedContext)[ FD ]
Line_5 $$ Map<String, String> copiedHeaders = randomHeadersFrom(restHeaders)-->Line_12 $$ expectedHeaders.putAll(copiedHeaders)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_15 $$ expectedContext.putAll(restContext)[ CD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_6 $$ Set<String> usefulRestHeaders = new HashSet(copiedHeaders.keySet())[ CD ]
Line_18 $$ for (ActionRequestBuilder requestBuilder : requestBuilders) -->Line_24 $$ assertContext(requestBuilder.request(), expectedContext)[ FD ]
Line_18 $$ for (ActionRequestBuilder requestBuilder : requestBuilders) -->Line_19 $$ putHeaders(requestBuilder.request(), transportHeaders)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_7 $$ usefulRestHeaders.addAll(randomMap(randomIntBetween(0, 10), "useful-").keySet())[ CD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_4 $$ Map<String, String> restHeaders = randomHeaders(randomIntBetween(0, 10))[ CD ]
Line_10 $$ HashMap<String, String> expectedHeaders = new HashMap()-->Line_11 $$ expectedHeaders.putAll(transportHeaders)[ FD ]
Line_16 $$ try (Client client = client(new NoOpClient(getTestName()), new FakeRestRequest(restHeaders, restContext), usefulRestHeaders)) -->Line_17 $$ ActionRequestBuilder[] requestBuilders = new ActionRequestBuilder[] [ FD ]
Line_8 $$ Map<String, String> restContext = randomContext(randomIntBetween(0, 10))-->Line_9 $$ Map<String, String> transportContext = onlyOnLeft(randomContext(randomIntBetween(0, 10)), restContext)[ FD ]
Line_18 $$ for (ActionRequestBuilder requestBuilder : requestBuilders) -->Line_20 $$ putContext(requestBuilder.request(), transportContext)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_11 $$ expectedHeaders.putAll(transportHeaders)[ CD ]
Line_5 $$ Map<String, String> copiedHeaders = randomHeadersFrom(restHeaders)-->Line_6 $$ Set<String> usefulRestHeaders = new HashSet(copiedHeaders.keySet())[ FD ]
Line_3 $$ Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10))-->Line_11 $$ expectedHeaders.putAll(transportHeaders)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_12 $$ expectedHeaders.putAll(copiedHeaders)[ CD ]
Line_9 $$ Map<String, String> transportContext = onlyOnLeft(randomContext(randomIntBetween(0, 10)), restContext)-->Line_14 $$ expectedContext.putAll(transportContext)[ FD ]
Line_3 $$ Map<String, String> transportHeaders = randomHeaders(randomIntBetween(0, 10))-->Line_21 $$ assertHeaders(requestBuilder.request(), transportHeaders)[ FD ]
Line_8 $$ Map<String, String> restContext = randomContext(randomIntBetween(0, 10))-->Line_15 $$ expectedContext.putAll(restContext)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_8 $$ Map<String, String> restContext = randomContext(randomIntBetween(0, 10))[ CD ]
Line_6 $$ Set<String> usefulRestHeaders = new HashSet(copiedHeaders.keySet())-->Line_16 $$ try (Client client = client(new NoOpClient(getTestName()), new FakeRestRequest(restHeaders, restContext), usefulRestHeaders)) [ FD ]
Line_10 $$ HashMap<String, String> expectedHeaders = new HashMap()-->Line_23 $$ assertHeaders(requestBuilder.request(), expectedHeaders)[ FD ]
Line_10 $$ HashMap<String, String> expectedHeaders = new HashMap()-->Line_12 $$ expectedHeaders.putAll(copiedHeaders)[ FD ]
Line_6 $$ Set<String> usefulRestHeaders = new HashSet(copiedHeaders.keySet())-->Line_7 $$ usefulRestHeaders.addAll(randomMap(randomIntBetween(0, 10), "useful-").keySet())[ FD ]
Line_13 $$ Map<String, String> expectedContext = new HashMap()-->Line_15 $$ expectedContext.putAll(restContext)[ FD ]
Line_2 $$ public void testCopyHeadersClusterAdminRequestBuilder() -->Line_10 $$ HashMap<String, String> expectedHeaders = new HashMap()[ CD ]
Line_18 $$ for (ActionRequestBuilder requestBuilder : requestBuilders) -->Line_22 $$ requestBuilder.get()[ FD ]
Line_13 $$ Map<String, String> expectedContext = new HashMap()-->Line_14 $$ expectedContext.putAll(transportContext)[ FD ]
Line_18 $$ for (ActionRequestBuilder requestBuilder : requestBuilders) -->Line_21 $$ assertHeaders(requestBuilder.request(), transportHeaders)[ FD ]
