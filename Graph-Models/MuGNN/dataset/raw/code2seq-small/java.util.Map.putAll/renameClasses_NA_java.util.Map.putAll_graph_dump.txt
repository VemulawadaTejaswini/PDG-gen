Line_2 $$ private void renameClasses() -->Line_3 $$ List<ClassWrapperNode> lstClasses = getReversePostOrderListIterative(rootClasses)[ CD ]
Line_19 $$ StructClass clintr = context.getClass(ifName)-->Line_21 $$ names.putAll(processExternalInterface(clintr))[ FD ]
Line_16 $$ if (mapInt != null) -->Line_19 $$ StructClass clintr = context.getClass(ifName)[ CD ]
Line_10 $$ if (mapClass != null) -->Line_11 $$ names.putAll(mapClass)[ CD ]
Line_14 $$ for (String ifName : cl.getInterfaceNames()) -->Line_15 $$ Map<String, String> mapInt = interfaceNameMaps.get(ifName)[ FD ]
Line_9 $$ Map<String, String> mapClass = classNameMaps.get(cl.superClass.getString())-->Line_11 $$ names.putAll(mapClass)[ FD ]
Line_16 $$ if (mapInt != null) -->Line_20 $$ if (clintr != null) [ CD ]
Line_7 $$ Map<String, String> names = new HashMap<String, String>()-->Line_27 $$ classNameMaps.put(cl.qualifiedName, names)[ FD ]
Line_26 $$ if (!node.getSubclasses().isEmpty()) -->Line_27 $$ classNameMaps.put(cl.qualifiedName, names)[ CD ]
Line_15 $$ Map<String, String> mapInt = interfaceNameMaps.get(ifName)-->Line_17 $$ names.putAll(mapInt)[ FD ]
Line_4 $$ Map<String, Map<String, String>> classNameMaps = new HashMap<String, Map<String, String>>()-->Line_27 $$ classNameMaps.put(cl.qualifiedName, names)[ FD ]
Line_8 $$ if (cl.superClass != null) -->Line_9 $$ Map<String, String> mapClass = classNameMaps.get(cl.superClass.getString())[ CD ]
Line_8 $$ if (cl.superClass != null) -->Line_10 $$ if (mapClass != null) [ CD ]
Line_7 $$ Map<String, String> names = new HashMap<String, String>()-->Line_25 $$ renameClassIdentifiers(cl, names)[ FD ]
Line_6 $$ StructClass cl = node.getClassStruct()-->Line_25 $$ renameClassIdentifiers(cl, names)[ FD ]
Line_2 $$ private void renameClasses() -->Line_4 $$ Map<String, Map<String, String>> classNameMaps = new HashMap<String, Map<String, String>>()[ CD ]
Line_4 $$ Map<String, Map<String, String>> classNameMaps = new HashMap<String, Map<String, String>>()-->Line_9 $$ Map<String, String> mapClass = classNameMaps.get(cl.superClass.getString())[ FD ]
Line_15 $$ Map<String, String> mapInt = interfaceNameMaps.get(ifName)-->Line_16 $$ if (mapInt != null) [ FD ]
Line_7 $$ Map<String, String> names = new HashMap<String, String>()-->Line_11 $$ names.putAll(mapClass)[ FD ]
Line_6 $$ StructClass cl = node.getClassStruct()-->Line_14 $$ for (String ifName : cl.getInterfaceNames()) [ FD ]
Line_14 $$ for (String ifName : cl.getInterfaceNames()) -->Line_19 $$ StructClass clintr = context.getClass(ifName)[ FD ]
Line_5 $$ for (ClassWrapperNode node : lstClasses) -->Line_6 $$ StructClass cl = node.getClassStruct()[ FD ]
Line_5 $$ for (ClassWrapperNode node : lstClasses) -->Line_26 $$ if (!node.getSubclasses().isEmpty()) [ FD ]
Line_7 $$ Map<String, String> names = new HashMap<String, String>()-->Line_17 $$ names.putAll(mapInt)[ FD ]
Line_16 $$ if (mapInt != null) -->Line_17 $$ names.putAll(mapInt)[ CD ]
Line_7 $$ Map<String, String> names = new HashMap<String, String>()-->Line_21 $$ names.putAll(processExternalInterface(clintr))[ FD ]
Line_20 $$ if (clintr != null) -->Line_21 $$ names.putAll(processExternalInterface(clintr))[ CD ]
Line_19 $$ StructClass clintr = context.getClass(ifName)-->Line_20 $$ if (clintr != null) [ FD ]
Line_9 $$ Map<String, String> mapClass = classNameMaps.get(cl.superClass.getString())-->Line_10 $$ if (mapClass != null) [ FD ]
