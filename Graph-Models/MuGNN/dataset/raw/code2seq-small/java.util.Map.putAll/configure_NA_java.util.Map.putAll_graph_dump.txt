Line_2 $$ public void configure(Map props) -->Line_4 $$ final String jdbcUrl = (String) props.get(Environment.URL)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_9 $$ LOG.autoCommitMode(autocommit)[ CD ]
Line_2 $$ public void configure(Map props) -->Line_8 $$ autocommit = ConfigurationHelper.getBoolean(Environment.AUTOCOMMIT, props)[ CD ]
Line_2 $$ public void configure(Map props) -->Line_24 $$ final Integer acquireIncrement = ConfigurationHelper.getInteger(Environment.C3P0_ACQUIRE_INCREMENT, props)[ FD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_44 $$ setOverwriteProperty(Environment.C3P0_ACQUIRE_INCREMENT, C3P0_STYLE_ACQUIRE_INCREMENT, props, c3props, acquireIncrement)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_48 $$ setOverwriteProperty("", C3P0_STYLE_INITIAL_POOL_SIZE, props, c3props, minPoolSize)[ FD ]
Line_51 $$ final Map allProps = new HashMap()-->Line_53 $$ allProps.putAll(c3props)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_40 $$ setOverwriteProperty(Environment.C3P0_MIN_SIZE, C3P0_STYLE_MIN_POOL_SIZE, props, c3props, minPoolSize)[ FD ]
Line_46 $$ final Integer initialPoolSize = ConfigurationHelper.getInteger(C3P0_STYLE_INITIAL_POOL_SIZE, props)-->Line_47 $$ if (initialPoolSize == null) [ FD ]
Line_2 $$ public void configure(Map props) -->Line_3 $$ final String jdbcDriverClass = (String) props.get(Environment.DRIVER)[ FD ]
Line_51 $$ final Map allProps = new HashMap()-->Line_52 $$ allProps.putAll(props)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_45 $$ setOverwriteProperty(Environment.C3P0_IDLE_TEST_PERIOD, C3P0_STYLE_IDLE_CONNECTION_TEST_PERIOD, props, c3props, idleTestPeriod)[ FD ]
Line_5 $$ final Properties connectionProps = ConnectionProviderInitiator.getConnectionProperties(props)-->Line_50 $$ final DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, connectionProps)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_44 $$ setOverwriteProperty(Environment.C3P0_ACQUIRE_INCREMENT, C3P0_STYLE_ACQUIRE_INCREMENT, props, c3props, acquireIncrement)[ FD ]
Line_24 $$ final Integer acquireIncrement = ConfigurationHelper.getInteger(Environment.C3P0_ACQUIRE_INCREMENT, props)-->Line_44 $$ setOverwriteProperty(Environment.C3P0_ACQUIRE_INCREMENT, C3P0_STYLE_ACQUIRE_INCREMENT, props, c3props, acquireIncrement)[ FD ]
Line_31 $$ final String key = (String) o-->Line_35 $$ warnPropertyConflict(key, newKey)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_10 $$ if (jdbcDriverClass == null) [ CD ]
Line_33 $$ final String newKey = key.substring(15)-->Line_34 $$ if (props.containsKey(newKey)) [ FD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_37 $$ c3props.put(newKey, props.get(key))[ FD ]
Line_2 $$ public void configure(Map props) -->Line_5 $$ final Properties connectionProps = ConnectionProviderInitiator.getConnectionProperties(props)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_41 $$ setOverwriteProperty(Environment.C3P0_MAX_SIZE, C3P0_STYLE_MAX_POOL_SIZE, props, c3props, maxPoolSize)[ FD ]
Line_4 $$ final String jdbcUrl = (String) props.get(Environment.URL)-->Line_6 $$ LOG.c3p0UsingDriver(jdbcDriverClass, jdbcUrl)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_7 $$ LOG.connectionProperties(ConfigurationHelper.maskOut(connectionProps, "password"))[ CD ]
Line_31 $$ final String key = (String) o-->Line_33 $$ final String newKey = key.substring(15)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_46 $$ final Integer initialPoolSize = ConfigurationHelper.getInteger(C3P0_STYLE_INITIAL_POOL_SIZE, props)[ FD ]
Line_5 $$ final Properties connectionProps = ConnectionProviderInitiator.getConnectionProperties(props)-->Line_7 $$ LOG.connectionProperties(ConfigurationHelper.maskOut(connectionProps, "password"))[ FD ]
Line_2 $$ public void configure(Map props) -->Line_4 $$ final String jdbcUrl = (String) props.get(Environment.URL)[ CD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_45 $$ setOverwriteProperty(Environment.C3P0_IDLE_TEST_PERIOD, C3P0_STYLE_IDLE_CONNECTION_TEST_PERIOD, props, c3props, idleTestPeriod)[ FD ]
Line_50 $$ final DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, connectionProps)-->Line_54 $$ ds = DataSources.pooledDataSource(unpooled, allProps)[ FD ]
Line_32 $$ if (key.startsWith("hibernate.c3p0.")) -->Line_37 $$ c3props.put(newKey, props.get(key))[ CD ]
Line_33 $$ final String newKey = key.substring(15)-->Line_35 $$ warnPropertyConflict(key, newKey)[ FD ]
Line_4 $$ final String jdbcUrl = (String) props.get(Environment.URL)-->Line_50 $$ final DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, connectionProps)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_42 $$ setOverwriteProperty(Environment.C3P0_TIMEOUT, C3P0_STYLE_MAX_IDLE_TIME, props, c3props, maxIdleTime)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_20 $$ final Integer minPoolSize = ConfigurationHelper.getInteger(Environment.C3P0_MIN_SIZE, props)[ FD ]
Line_20 $$ final Integer minPoolSize = ConfigurationHelper.getInteger(Environment.C3P0_MIN_SIZE, props)-->Line_40 $$ setOverwriteProperty(Environment.C3P0_MIN_SIZE, C3P0_STYLE_MIN_POOL_SIZE, props, c3props, minPoolSize)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_22 $$ final Integer maxIdleTime = ConfigurationHelper.getInteger(Environment.C3P0_TIMEOUT, props)[ FD ]
Line_3 $$ final String jdbcDriverClass = (String) props.get(Environment.DRIVER)-->Line_16 $$ throw new ClassLoadingException(LOG.jdbcDriverNotFound(jdbcDriverClass), e)[ FD ]
Line_33 $$ final String newKey = key.substring(15)-->Line_37 $$ c3props.put(newKey, props.get(key))[ FD ]
Line_51 $$ final Map allProps = new HashMap()-->Line_54 $$ ds = DataSources.pooledDataSource(unpooled, allProps)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_23 $$ final Integer maxStatements = ConfigurationHelper.getInteger(Environment.C3P0_MAX_STATEMENTS, props)[ FD ]
Line_34 $$ if (props.containsKey(newKey)) -->Line_35 $$ warnPropertyConflict(key, newKey)[ CD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_43 $$ setOverwriteProperty(Environment.C3P0_MAX_STATEMENTS, C3P0_STYLE_MAX_STATEMENTS, props, c3props, maxStatements)[ FD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_42 $$ setOverwriteProperty(Environment.C3P0_TIMEOUT, C3P0_STYLE_MAX_IDLE_TIME, props, c3props, maxIdleTime)[ FD ]
Line_47 $$ if (initialPoolSize == null) -->Line_48 $$ setOverwriteProperty("", C3P0_STYLE_INITIAL_POOL_SIZE, props, c3props, minPoolSize)[ CD ]
Line_2 $$ public void configure(Map props) -->Line_25 $$ final Integer idleTestPeriod = ConfigurationHelper.getInteger(Environment.C3P0_IDLE_TEST_PERIOD, props)[ FD ]
Line_3 $$ final String jdbcDriverClass = (String) props.get(Environment.DRIVER)-->Line_6 $$ LOG.c3p0UsingDriver(jdbcDriverClass, jdbcUrl)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_3 $$ final String jdbcDriverClass = (String) props.get(Environment.DRIVER)[ CD ]
Line_2 $$ public void configure(Map props) -->Line_8 $$ autocommit = ConfigurationHelper.getBoolean(Environment.AUTOCOMMIT, props)[ FD ]
Line_27 $$ for (Object o : props.keySet()) -->Line_28 $$ if (!String.class.isInstance(o)) [ FD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_48 $$ setOverwriteProperty("", C3P0_STYLE_INITIAL_POOL_SIZE, props, c3props, minPoolSize)[ FD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_53 $$ allProps.putAll(c3props)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_5 $$ final Properties connectionProps = ConnectionProviderInitiator.getConnectionProperties(props)[ CD ]
Line_2 $$ public void configure(Map props) -->Line_6 $$ LOG.c3p0UsingDriver(jdbcDriverClass, jdbcUrl)[ CD ]
Line_2 $$ public void configure(Map props) -->Line_59 $$ isolation = ConnectionProviderInitiator.extractIsolation(props)[ CD ]
Line_3 $$ final String jdbcDriverClass = (String) props.get(Environment.DRIVER)-->Line_14 $$ serviceRegistry.getService(ClassLoaderService.class).classForName(jdbcDriverClass)[ FD ]
Line_10 $$ if (jdbcDriverClass == null) -->Line_11 $$ LOG.jdbcDriverNotSpecified(Environment.DRIVER)[ CD ]
Line_2 $$ public void configure(Map props) -->Line_34 $$ if (props.containsKey(newKey)) [ FD ]
Line_31 $$ final String key = (String) o-->Line_37 $$ c3props.put(newKey, props.get(key))[ FD ]
Line_2 $$ public void configure(Map props) -->Line_60 $$ LOG.jdbcIsolationLevel(ConnectionProviderInitiator.toIsolationNiceName(isolation))[ CD ]
Line_32 $$ if (key.startsWith("hibernate.c3p0.")) -->Line_34 $$ if (props.containsKey(newKey)) [ CD ]
Line_2 $$ public void configure(Map props) -->Line_37 $$ c3props.put(newKey, props.get(key))[ FD ]
Line_2 $$ public void configure(Map props) -->Line_21 $$ final Integer maxPoolSize = ConfigurationHelper.getInteger(Environment.C3P0_MAX_SIZE, props)[ FD ]
Line_32 $$ if (key.startsWith("hibernate.c3p0.")) -->Line_33 $$ final String newKey = key.substring(15)[ CD ]
Line_2 $$ public void configure(Map props) -->Line_43 $$ setOverwriteProperty(Environment.C3P0_MAX_STATEMENTS, C3P0_STYLE_MAX_STATEMENTS, props, c3props, maxStatements)[ FD ]
Line_2 $$ public void configure(Map props) -->Line_59 $$ isolation = ConnectionProviderInitiator.extractIsolation(props)[ FD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_40 $$ setOverwriteProperty(Environment.C3P0_MIN_SIZE, C3P0_STYLE_MIN_POOL_SIZE, props, c3props, minPoolSize)[ FD ]
Line_26 $$ final Properties c3props = new Properties()-->Line_41 $$ setOverwriteProperty(Environment.C3P0_MAX_SIZE, C3P0_STYLE_MAX_POOL_SIZE, props, c3props, maxPoolSize)[ FD ]
Line_22 $$ final Integer maxIdleTime = ConfigurationHelper.getInteger(Environment.C3P0_TIMEOUT, props)-->Line_42 $$ setOverwriteProperty(Environment.C3P0_TIMEOUT, C3P0_STYLE_MAX_IDLE_TIME, props, c3props, maxIdleTime)[ FD ]
Line_31 $$ final String key = (String) o-->Line_32 $$ if (key.startsWith("hibernate.c3p0.")) [ FD ]
Line_2 $$ public void configure(Map props) -->Line_52 $$ allProps.putAll(props)[ FD ]
Line_21 $$ final Integer maxPoolSize = ConfigurationHelper.getInteger(Environment.C3P0_MAX_SIZE, props)-->Line_41 $$ setOverwriteProperty(Environment.C3P0_MAX_SIZE, C3P0_STYLE_MAX_POOL_SIZE, props, c3props, maxPoolSize)[ FD ]
Line_20 $$ final Integer minPoolSize = ConfigurationHelper.getInteger(Environment.C3P0_MIN_SIZE, props)-->Line_48 $$ setOverwriteProperty("", C3P0_STYLE_INITIAL_POOL_SIZE, props, c3props, minPoolSize)[ FD ]
Line_23 $$ final Integer maxStatements = ConfigurationHelper.getInteger(Environment.C3P0_MAX_STATEMENTS, props)-->Line_43 $$ setOverwriteProperty(Environment.C3P0_MAX_STATEMENTS, C3P0_STYLE_MAX_STATEMENTS, props, c3props, maxStatements)[ FD ]
Line_25 $$ final Integer idleTestPeriod = ConfigurationHelper.getInteger(Environment.C3P0_IDLE_TEST_PERIOD, props)-->Line_45 $$ setOverwriteProperty(Environment.C3P0_IDLE_TEST_PERIOD, C3P0_STYLE_IDLE_CONNECTION_TEST_PERIOD, props, c3props, idleTestPeriod)[ FD ]
Line_3 $$ final String jdbcDriverClass = (String) props.get(Environment.DRIVER)-->Line_10 $$ if (jdbcDriverClass == null) [ FD ]
Line_2 $$ public void configure(Map props) -->Line_27 $$ for (Object o : props.keySet()) [ FD ]
