Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_27 $$ return new TypedValue(leftNumber.intValue() * rightNumber.intValue())[ FD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_5 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) [ CD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_32 $$ if (leftOperand instanceof String && rightOperand instanceof Integer) [ CD ]
Line_18 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_19 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ CD ]
Line_18 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_22 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) [ CD ]
Line_5 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_7 $$ Number rightNumber = (Number) rightOperand[ CD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_14 $$ return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())[ FD ]
Line_32 $$ if (leftOperand instanceof String && rightOperand instanceof Integer) -->Line_33 $$ int repeats = (Integer) rightOperand[ CD ]
Line_5 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) [ CD ]
Line_34 $$ StringBuilder result = new StringBuilder()-->Line_36 $$ result.append(leftOperand)[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_10 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ FD ]
Line_32 $$ if (leftOperand instanceof String && rightOperand instanceof Integer) -->Line_38 $$ return new TypedValue(result.toString())[ CD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_25 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ FD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_12 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) [ CD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_10 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ CD ]
Line_18 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_21 $$ return new TypedValue(leftBigInteger.multiply(rightBigInteger))[ CD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_24 $$ return new TypedValue(leftNumber.longValue() * rightNumber.longValue())[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_29 $$ return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_27 $$ return new TypedValue(leftNumber.intValue() * rightNumber.intValue())[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_20 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ FD ]
Line_3 $$ Object leftOperand = getLeftOperand().getValueInternal(state).getValue()-->Line_36 $$ result.append(leftOperand)[ FD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_3 $$ Object leftOperand = getLeftOperand().getValueInternal(state).getValue()[ CD ]
Line_10 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)-->Line_11 $$ return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))[ FD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_40 $$ return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)[ FD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_14 $$ return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())[ FD ]
Line_4 $$ Object rightOperand = getRightOperand().getValueInternal(state).getValue()-->Line_40 $$ return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)[ FD ]
Line_12 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_15 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) [ CD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_4 $$ Object rightOperand = getRightOperand().getValueInternal(state).getValue()[ FD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_4 $$ Object rightOperand = getRightOperand().getValueInternal(state).getValue()[ CD ]
Line_15 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_16 $$ this.exitTypeDescriptor = "F"[ CD ]
Line_25 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) -->Line_29 $$ return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())[ CD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_9 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_17 $$ return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())[ FD ]
Line_18 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_20 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ CD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_11 $$ return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))[ CD ]
Line_19 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)-->Line_21 $$ return new TypedValue(leftBigInteger.multiply(rightBigInteger))[ FD ]
Line_22 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_25 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_24 $$ return new TypedValue(leftNumber.longValue() * rightNumber.longValue())[ FD ]
Line_3 $$ Object leftOperand = getLeftOperand().getValueInternal(state).getValue()-->Line_40 $$ return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)[ FD ]
Line_32 $$ if (leftOperand instanceof String && rightOperand instanceof Integer) -->Line_34 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_15 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_17 $$ return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())[ CD ]
Line_33 $$ int repeats = (Integer) rightOperand-->Line_35 $$ for (int i = 0; i < repeats; i++) [ FD ]
Line_12 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_13 $$ this.exitTypeDescriptor = "D"[ CD ]
Line_20 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)-->Line_21 $$ return new TypedValue(leftBigInteger.multiply(rightBigInteger))[ FD ]
Line_5 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_6 $$ Number leftNumber = (Number) leftOperand[ CD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_3 $$ Object leftOperand = getLeftOperand().getValueInternal(state).getValue()[ FD ]
Line_22 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_23 $$ this.exitTypeDescriptor = "J"[ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_29 $$ return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())[ FD ]
Line_22 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_24 $$ return new TypedValue(leftNumber.longValue() * rightNumber.longValue())[ CD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_40 $$ return state.operate(Operation.MULTIPLY, leftOperand, rightOperand)[ CD ]
Line_35 $$ for (int i = 0; i < repeats; i++) -->Line_36 $$ result.append(leftOperand)[ CD ]
Line_25 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) -->Line_26 $$ this.exitTypeDescriptor = "I"[ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_19 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ FD ]
Line_25 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) -->Line_27 $$ return new TypedValue(leftNumber.intValue() * rightNumber.intValue())[ CD ]
Line_32 $$ if (leftOperand instanceof String && rightOperand instanceof Integer) -->Line_35 $$ for (int i = 0; i < repeats; i++) [ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_9 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ FD ]
Line_9 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)-->Line_11 $$ return new TypedValue(leftBigDecimal.multiply(rightBigDecimal))[ FD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_25 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ FD ]
Line_15 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_18 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) [ CD ]
Line_34 $$ StringBuilder result = new StringBuilder()-->Line_38 $$ return new TypedValue(result.toString())[ FD ]
Line_12 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_14 $$ return new TypedValue(leftNumber.doubleValue() * rightNumber.doubleValue())[ CD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_17 $$ return new TypedValue(leftNumber.floatValue() * rightNumber.floatValue())[ FD ]
