Line_26 $$ for (int i = 0; i < numMaps; ++i) -->Line_36 $$ System.out.println("Wrote input for Map #" + i)[ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_15 $$ final Path outDir = new Path(tmpDir, "out")[ CD ]
Line_18 $$ final FileSystem fs = FileSystem.get(conf)-->Line_20 $$ throw new IOException("Tmp directory " + fs.makeQualified(tmpDir) + " already exists.  Please remove it first.")[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_19 $$ if (fs.exists(tmpDir)) [ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_26 $$ for (int i = 0; i < numMaps; ++i) [ FD ]
Line_18 $$ final FileSystem fs = FileSystem.get(conf)-->Line_30 $$ final SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, LongWritable.class, LongWritable.class, CompressionType.NONE)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_30 $$ final SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, LongWritable.class, LongWritable.class, CompressionType.NONE)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_12 $$ job.setNumReduceTasks(1)[ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_5 $$ job.setJarByClass(QuasiMonteCarlo.class)[ CD ]
Line_3 $$ Job job = new Job(conf)-->Line_10 $$ job.setMapperClass(QmcMapper.class)[ FD ]
Line_3 $$ Job job = new Job(conf)-->Line_17 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_44 $$ LongWritable numInside = new LongWritable()-->Line_48 $$ reader.next(numInside, numOutside)[ FD ]
Line_44 $$ LongWritable numInside = new LongWritable()-->Line_53 $$ return BigDecimal.valueOf(4).setScale(20).multiply(BigDecimal.valueOf(numInside.get())).divide(numTotal, RoundingMode.HALF_UP)[ FD ]
Line_14 $$ final Path inDir = new Path(tmpDir, "in")-->Line_22 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_30 $$ final SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, LongWritable.class, LongWritable.class, CompressionType.NONE)-->Line_34 $$ writer.close()[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_14 $$ final Path inDir = new Path(tmpDir, "in")[ CD ]
Line_3 $$ Job job = new Job(conf)-->Line_40 $$ job.waitForCompletion(true)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_22 $$ if (!fs.mkdirs(inDir)) [ CD ]
Line_26 $$ for (int i = 0; i < numMaps; ++i) -->Line_28 $$ final LongWritable offset = new LongWritable(i * numPoints)[ CD ]
Line_28 $$ final LongWritable offset = new LongWritable(i * numPoints)-->Line_32 $$ writer.append(offset, size)[ FD ]
Line_29 $$ final LongWritable size = new LongWritable(numPoints)-->Line_32 $$ writer.append(offset, size)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_8 $$ job.setOutputValueClass(LongWritable.class)[ CD ]
Line_3 $$ Job job = new Job(conf)-->Line_6 $$ job.setInputFormatClass(SequenceFileInputFormat.class)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_4 $$ job.setJobName(QuasiMonteCarlo.class.getSimpleName())[ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_17 $$ FileOutputFormat.setOutputPath(job, outDir)[ CD ]
Line_27 $$ final Path file = new Path(inDir, "part" + i)-->Line_30 $$ final SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, LongWritable.class, LongWritable.class, CompressionType.NONE)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_13 $$ job.setSpeculativeExecution(false)[ CD ]
Line_3 $$ Job job = new Job(conf)-->Line_5 $$ job.setJarByClass(QuasiMonteCarlo.class)[ FD ]
Line_14 $$ final Path inDir = new Path(tmpDir, "in")-->Line_16 $$ FileInputFormat.setInputPaths(job, inDir)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_18 $$ final FileSystem fs = FileSystem.get(conf)[ CD ]
Line_26 $$ for (int i = 0; i < numMaps; ++i) -->Line_30 $$ final SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, LongWritable.class, LongWritable.class, CompressionType.NONE)[ CD ]
Line_3 $$ Job job = new Job(conf)-->Line_11 $$ job.setReducerClass(QmcReducer.class)[ FD ]
Line_30 $$ final SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, LongWritable.class, LongWritable.class, CompressionType.NONE)-->Line_32 $$ writer.append(offset, size)[ FD ]
Line_46 $$ SequenceFile.Reader reader = new SequenceFile.Reader(fs, inFile, conf)-->Line_48 $$ reader.next(numInside, numOutside)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_16 $$ FileInputFormat.setInputPaths(job, inDir)[ CD ]
Line_3 $$ Job job = new Job(conf)-->Line_8 $$ job.setOutputValueClass(LongWritable.class)[ FD ]
Line_26 $$ for (int i = 0; i < numMaps; ++i) -->Line_29 $$ final LongWritable size = new LongWritable(numPoints)[ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_20 $$ throw new IOException("Tmp directory " + fs.makeQualified(tmpDir) + " already exists.  Please remove it first.")[ FD ]
Line_46 $$ SequenceFile.Reader reader = new SequenceFile.Reader(fs, inFile, conf)-->Line_50 $$ reader.close()[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_11 $$ job.setReducerClass(QmcReducer.class)[ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_18 $$ final FileSystem fs = FileSystem.get(conf)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_7 $$ job.setOutputKeyClass(BooleanWritable.class)[ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_19 $$ if (fs.exists(tmpDir)) [ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_52 $$ final BigDecimal numTotal = BigDecimal.valueOf(numMaps).multiply(BigDecimal.valueOf(numPoints))[ FD ]
Line_52 $$ final BigDecimal numTotal = BigDecimal.valueOf(numMaps).multiply(BigDecimal.valueOf(numPoints))-->Line_53 $$ return BigDecimal.valueOf(4).setScale(20).multiply(BigDecimal.valueOf(numInside.get())).divide(numTotal, RoundingMode.HALF_UP)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_10 $$ job.setMapperClass(QmcMapper.class)[ CD ]
Line_3 $$ Job job = new Job(conf)-->Line_7 $$ job.setOutputKeyClass(BooleanWritable.class)[ FD ]
Line_3 $$ Job job = new Job(conf)-->Line_4 $$ job.setJobName(QuasiMonteCarlo.class.getSimpleName())[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_55 $$ fs.delete(tmpDir, true)[ FD ]
Line_3 $$ Job job = new Job(conf)-->Line_9 $$ job.setOutputFormatClass(SequenceFileOutputFormat.class)[ FD ]
Line_26 $$ for (int i = 0; i < numMaps; ++i) -->Line_27 $$ final Path file = new Path(inDir, "part" + i)[ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_6 $$ job.setInputFormatClass(SequenceFileInputFormat.class)[ CD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_9 $$ job.setOutputFormatClass(SequenceFileOutputFormat.class)[ CD ]
Line_18 $$ final FileSystem fs = FileSystem.get(conf)-->Line_19 $$ if (fs.exists(tmpDir)) [ FD ]
Line_45 $$ LongWritable numOutside = new LongWritable()-->Line_48 $$ reader.next(numInside, numOutside)[ FD ]
Line_2 $$ public static BigDecimal estimatePi(int numMaps, long numPoints, Path tmpDir, Configuration conf) throws IOException, ClassNotFoundException, InterruptedException -->Line_3 $$ Job job = new Job(conf)[ CD ]
Line_3 $$ Job job = new Job(conf)-->Line_16 $$ FileInputFormat.setInputPaths(job, inDir)[ FD ]
Line_3 $$ Job job = new Job(conf)-->Line_13 $$ job.setSpeculativeExecution(false)[ FD ]
Line_18 $$ final FileSystem fs = FileSystem.get(conf)-->Line_22 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_3 $$ Job job = new Job(conf)-->Line_12 $$ job.setNumReduceTasks(1)[ FD ]
Line_18 $$ final FileSystem fs = FileSystem.get(conf)-->Line_55 $$ fs.delete(tmpDir, true)[ FD ]
Line_15 $$ final Path outDir = new Path(tmpDir, "out")-->Line_17 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
