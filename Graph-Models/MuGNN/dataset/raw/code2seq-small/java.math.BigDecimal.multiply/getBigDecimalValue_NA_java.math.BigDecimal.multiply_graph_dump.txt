Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_10 $$ boolean matches = m.matches()[ FD ]
Line_26 $$ if (m.group(5) != null) -->Line_28 $$ if (sign == null)[ CD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_33 $$ return whole[ CD ]
Line_16 $$ BigDecimal fraction = BigDecimal.ZERO-->Line_20 $$ whole = whole.add(fraction)[ FD ]
Line_22 $$ whole = new BigDecimal("0." + m.group(4))-->Line_31 $$ whole = whole.multiply(new BigDecimal("1e" + sign + exp))[ FD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_5 $$ IElementType type = node.getElementType()[ CD ]
Line_13 $$ if (m.group(2) != null) -->Line_14 $$ whole = new BigDecimal(m.group(2))[ CD ]
Line_28 $$ if (sign == null)-->Line_29 $$ sign = "+"[ CD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_12 $$ BigDecimal whole[ CD ]
Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_15 $$ String fractionStr = m.group(3)[ FD ]
Line_15 $$ String fractionStr = m.group(3)-->Line_17 $$ if (fractionStr != null) [ FD ]
Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_26 $$ if (m.group(5) != null) [ FD ]
Line_27 $$ String sign = m.group(6)-->Line_29 $$ sign = "+"[ FD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_10 $$ boolean matches = m.matches()[ CD ]
Line_14 $$ whole = new BigDecimal(m.group(2))-->Line_31 $$ whole = whole.multiply(new BigDecimal("1e" + sign + exp))[ FD ]
Line_4 $$ String text = node.getText()-->Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)[ FD ]
Line_12 $$ BigDecimal whole-->Line_31 $$ whole = whole.multiply(new BigDecimal("1e" + sign + exp))[ FD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_13 $$ if (m.group(2) != null) [ CD ]
Line_5 $$ IElementType type = node.getElementType()-->Line_6 $$ if (type == PyElementTypes.INTEGER_LITERAL_EXPRESSION) [ FD ]
Line_14 $$ whole = new BigDecimal(m.group(2))-->Line_20 $$ whole = whole.add(fraction)[ FD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_4 $$ String text = node.getText()[ CD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_3 $$ ASTNode node = getNode()[ CD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_26 $$ if (m.group(5) != null) [ CD ]
Line_6 $$ if (type == PyElementTypes.INTEGER_LITERAL_EXPRESSION) -->Line_7 $$ return new BigDecimal(getBigIntegerValue(text))[ CD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_6 $$ if (type == PyElementTypes.INTEGER_LITERAL_EXPRESSION) [ CD ]
Line_26 $$ if (m.group(5) != null) -->Line_31 $$ whole = whole.multiply(new BigDecimal("1e" + sign + exp))[ CD ]
Line_12 $$ BigDecimal whole-->Line_22 $$ whole = new BigDecimal("0." + m.group(4))[ FD ]
Line_12 $$ BigDecimal whole-->Line_14 $$ whole = new BigDecimal(m.group(2))[ FD ]
Line_27 $$ String sign = m.group(6)-->Line_28 $$ if (sign == null)[ FD ]
Line_26 $$ if (m.group(5) != null) -->Line_30 $$ String exp = m.group(7)[ CD ]
Line_16 $$ BigDecimal fraction = BigDecimal.ZERO-->Line_18 $$ fraction = new BigDecimal("0." + fractionStr)[ FD ]
Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_22 $$ whole = new BigDecimal("0." + m.group(4))[ FD ]
Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_30 $$ String exp = m.group(7)[ FD ]
Line_3 $$ ASTNode node = getNode()-->Line_4 $$ String text = node.getText()[ FD ]
Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_27 $$ String sign = m.group(6)[ FD ]
Line_2 $$ public BigDecimal getBigDecimalValue() -->Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)[ CD ]
Line_13 $$ if (m.group(2) != null) -->Line_17 $$ if (fractionStr != null) [ CD ]
Line_13 $$ if (m.group(2) != null) -->Line_15 $$ String fractionStr = m.group(3)[ CD ]
Line_12 $$ BigDecimal whole-->Line_20 $$ whole = whole.add(fraction)[ FD ]
Line_17 $$ if (fractionStr != null) -->Line_18 $$ fraction = new BigDecimal("0." + fractionStr)[ CD ]
Line_18 $$ fraction = new BigDecimal("0." + fractionStr)-->Line_20 $$ whole = whole.add(fraction)[ FD ]
Line_21 $$ if (m.group(4) != null) -->Line_22 $$ whole = new BigDecimal("0." + m.group(4))[ CD ]
Line_13 $$ if (m.group(2) != null) -->Line_20 $$ whole = whole.add(fraction)[ CD ]
Line_20 $$ whole = whole.add(fraction)-->Line_31 $$ whole = whole.multiply(new BigDecimal("1e" + sign + exp))[ FD ]
Line_20 $$ whole = whole.add(fraction)-->Line_22 $$ whole = new BigDecimal("0." + m.group(4))[ FD ]
Line_14 $$ whole = new BigDecimal(m.group(2))-->Line_22 $$ whole = new BigDecimal("0." + m.group(4))[ FD ]
Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_13 $$ if (m.group(2) != null) [ FD ]
Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_21 $$ if (m.group(4) != null) [ FD ]
Line_4 $$ String text = node.getText()-->Line_7 $$ return new BigDecimal(getBigIntegerValue(text))[ FD ]
Line_13 $$ if (m.group(2) != null) -->Line_21 $$ if (m.group(4) != null) [ CD ]
Line_9 $$ Matcher m = PATTERN_FLOAT.matcher(text)-->Line_14 $$ whole = new BigDecimal(m.group(2))[ FD ]
Line_26 $$ if (m.group(5) != null) -->Line_27 $$ String sign = m.group(6)[ CD ]
Line_3 $$ ASTNode node = getNode()-->Line_5 $$ IElementType type = node.getElementType()[ FD ]
Line_13 $$ if (m.group(2) != null) -->Line_16 $$ BigDecimal fraction = BigDecimal.ZERO[ CD ]
