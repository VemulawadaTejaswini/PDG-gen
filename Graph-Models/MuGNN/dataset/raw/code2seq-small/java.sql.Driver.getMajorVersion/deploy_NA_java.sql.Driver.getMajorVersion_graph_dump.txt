Line_15 $$ final Class<? extends Driver> driverClass = classLoader.loadClass(driverClassName).asSubclass(Driver.class)-->Line_30 $$ InstalledDriver driverMetadata = new InstalledDriver(driverName, driverClass.getName(), null, null, majorVersion, minorVersion, compliant)[ FD ]
Line_19 $$ final int minorVersion = driver.getMinorVersion()-->Line_24 $$ DEPLOYER_JDBC_LOGGER.deployingNonCompliantJdbcDriver(driverClass, Integer.valueOf(majorVersion), Integer.valueOf(minorVersion))[ FD ]
Line_18 $$ final int majorVersion = driver.getMajorVersion()-->Line_24 $$ DEPLOYER_JDBC_LOGGER.deployingNonCompliantJdbcDriver(driverClass, Integer.valueOf(majorVersion), Integer.valueOf(minorVersion))[ FD ]
Line_21 $$ if (compliant) -->Line_24 $$ DEPLOYER_JDBC_LOGGER.deployingNonCompliantJdbcDriver(driverClass, Integer.valueOf(majorVersion), Integer.valueOf(minorVersion))[ CD ]
Line_21 $$ if (compliant) -->Line_22 $$ DEPLOYER_JDBC_LOGGER.deployingCompliantJdbcDriver(driverClass, Integer.valueOf(majorVersion), Integer.valueOf(minorVersion))[ CD ]
Line_10 $$ if (module != null && servicesAttachment != null) -->Line_11 $$ final ModuleClassLoader classLoader = module.getClassLoader()[ CD ]
Line_19 $$ final int minorVersion = driver.getMinorVersion()-->Line_22 $$ DEPLOYER_JDBC_LOGGER.deployingCompliantJdbcDriver(driverClass, Integer.valueOf(majorVersion), Integer.valueOf(minorVersion))[ FD ]
Line_31 $$ DriverService driverService = new DriverService(driverMetadata, driver)-->Line_32 $$ phaseContext.getServiceTarget().addService(ServiceName.JBOSS.append("jdbc-driver", driverName.replaceAll("\\.", "_")), driverService).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE, DriverRegistry.class, driverService.getDriverRegistryServiceInjector()).setInitialMode(Mode.ACTIVE).install()[ FD ]
Line_16 $$ final Constructor<? extends Driver> constructor = driverClass.getConstructor()-->Line_17 $$ final Driver driver = constructor.newInstance()[ FD ]
Line_26 $$ String driverName = deploymentUnit.getName()-->Line_32 $$ phaseContext.getServiceTarget().addService(ServiceName.JBOSS.append("jdbc-driver", driverName.replaceAll("\\.", "_")), driverService).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE, DriverRegistry.class, driverService.getDriverRegistryServiceInjector()).setInitialMode(Mode.ACTIVE).install()[ FD ]
Line_28 $$ driverName += "_" + driverClassName + "_" + majorVersion + "_" + minorVersion-->Line_32 $$ phaseContext.getServiceTarget().addService(ServiceName.JBOSS.append("jdbc-driver", driverName.replaceAll("\\.", "_")), driverService).addDependency(ConnectorServices.JDBC_DRIVER_REGISTRY_SERVICE, DriverRegistry.class, driverService.getDriverRegistryServiceInjector()).setInitialMode(Mode.ACTIVE).install()[ FD ]
Line_17 $$ final Driver driver = constructor.newInstance()-->Line_19 $$ final int minorVersion = driver.getMinorVersion()[ FD ]
Line_12 $$ final List<String> driverNames = servicesAttachment.getServiceImplementations(Driver.class.getName())-->Line_27 $$ if ((driverName.contains(".") && !driverName.endsWith(".jar")) || driverNames.size() != 1) [ FD ]
Line_26 $$ String driverName = deploymentUnit.getName()-->Line_27 $$ if ((driverName.contains(".") && !driverName.endsWith(".jar")) || driverNames.size() != 1) [ FD ]
Line_7 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_9 $$ final ServicesAttachment servicesAttachment = deploymentUnit.getAttachment(Attachments.SERVICES)[ FD ]
Line_17 $$ final Driver driver = constructor.newInstance()-->Line_18 $$ final int majorVersion = driver.getMajorVersion()[ FD ]
Line_18 $$ final int majorVersion = driver.getMajorVersion()-->Line_22 $$ DEPLOYER_JDBC_LOGGER.deployingCompliantJdbcDriver(driverClass, Integer.valueOf(majorVersion), Integer.valueOf(minorVersion))[ FD ]
Line_10 $$ if (module != null && servicesAttachment != null) -->Line_12 $$ final List<String> driverNames = servicesAttachment.getServiceImplementations(Driver.class.getName())[ CD ]
Line_13 $$ for (String driverClassName : driverNames) -->Line_34 $$ DEPLOYER_JDBC_LOGGER.cannotInstantiateDriverClass(driverClassName, e)[ FD ]
Line_27 $$ if ((driverName.contains(".") && !driverName.endsWith(".jar")) || driverNames.size() != 1) -->Line_28 $$ driverName += "_" + driverClassName + "_" + majorVersion + "_" + minorVersion[ CD ]
Line_15 $$ final Class<? extends Driver> driverClass = classLoader.loadClass(driverClassName).asSubclass(Driver.class)-->Line_16 $$ final Constructor<? extends Driver> constructor = driverClass.getConstructor()[ FD ]
Line_7 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ FD ]
Line_17 $$ final Driver driver = constructor.newInstance()-->Line_20 $$ final boolean compliant = driver.jdbcCompliant()[ FD ]
Line_15 $$ final Class<? extends Driver> driverClass = classLoader.loadClass(driverClassName).asSubclass(Driver.class)-->Line_22 $$ DEPLOYER_JDBC_LOGGER.deployingCompliantJdbcDriver(driverClass, Integer.valueOf(majorVersion), Integer.valueOf(minorVersion))[ FD ]
Line_13 $$ for (String driverClassName : driverNames) -->Line_15 $$ final Class<? extends Driver> driverClass = classLoader.loadClass(driverClassName).asSubclass(Driver.class)[ FD ]
Line_11 $$ final ModuleClassLoader classLoader = module.getClassLoader()-->Line_15 $$ final Class<? extends Driver> driverClass = classLoader.loadClass(driverClassName).asSubclass(Driver.class)[ FD ]
Line_7 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_26 $$ String driverName = deploymentUnit.getName()[ FD ]
Line_26 $$ String driverName = deploymentUnit.getName()-->Line_28 $$ driverName += "_" + driverClassName + "_" + majorVersion + "_" + minorVersion[ FD ]
Line_19 $$ final int minorVersion = driver.getMinorVersion()-->Line_28 $$ driverName += "_" + driverClassName + "_" + majorVersion + "_" + minorVersion[ FD ]
Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_11 $$ final ModuleClassLoader classLoader = module.getClassLoader()[ FD ]
Line_15 $$ final Class<? extends Driver> driverClass = classLoader.loadClass(driverClassName).asSubclass(Driver.class)-->Line_24 $$ DEPLOYER_JDBC_LOGGER.deployingNonCompliantJdbcDriver(driverClass, Integer.valueOf(majorVersion), Integer.valueOf(minorVersion))[ FD ]
Line_9 $$ final ServicesAttachment servicesAttachment = deploymentUnit.getAttachment(Attachments.SERVICES)-->Line_12 $$ final List<String> driverNames = servicesAttachment.getServiceImplementations(Driver.class.getName())[ FD ]
