Line_2 $$ public void trySolveSomehow() -->Line_4 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) [ CD ]
Line_8 $$ if (complementIfShort(hunk)) -->Line_9 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) [ CD ]
Line_5 $$ final SplitHunk hunk = iterator.next()-->Line_6 $$ hunk.cutSameTail()[ FD ]
Line_4 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_7 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) [ CD ]
Line_4 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_6 $$ hunk.cutSameTail()[ CD ]
Line_5 $$ final SplitHunk hunk = iterator.next()-->Line_7 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) [ FD ]
Line_5 $$ final SplitHunk hunk = iterator.next()-->Line_9 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) [ FD ]
Line_4 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_5 $$ final SplitHunk hunk = iterator.next()[ CD ]
Line_9 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) -->Line_10 $$ myNotBound.add(hunk)[ CD ]
Line_2 $$ public void trySolveSomehow() -->Line_17 $$ Collections.sort(myNotBound, HunksComparator.getInstance())[ CD ]
Line_7 $$ if (!testForPartialContextMatch(hunk, new LongTryMismatchSolver(hunk), ourMaxWalk)) -->Line_8 $$ if (complementIfShort(hunk)) [ CD ]
Line_8 $$ if (complementIfShort(hunk)) -->Line_13 $$ myNotBound.add(hunk)[ CD ]
Line_5 $$ final SplitHunk hunk = iterator.next()-->Line_13 $$ myNotBound.add(hunk)[ FD ]
Line_2 $$ public void trySolveSomehow() -->Line_18 $$ myNotExact.clear()[ CD ]
Line_5 $$ final SplitHunk hunk = iterator.next()-->Line_8 $$ if (complementIfShort(hunk)) [ FD ]
Line_5 $$ final SplitHunk hunk = iterator.next()-->Line_10 $$ myNotBound.add(hunk)[ FD ]
Line_4 $$ for (Iterator<SplitHunk> iterator = myNotExact.iterator(); iterator.hasNext(); ) -->Line_5 $$ final SplitHunk hunk = iterator.next()[ FD ]
