Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_35 $$ if (comparator != null)[ CD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_7 $$ process(files, outputRoot, outputRoot, dirToEntries, 0)[ CD ]
Line_15 $$ if (flattenOutput)-->Line_16 $$ newOutputDir = outputRoot[ CD ]
Line_9 $$ for (java.util.Map.Entry<File, ArrayList<Entry>> mapEntry : dirToEntries.entrySet()) -->Line_24 $$ entry.inputFile = mapEntry.getKey()[ FD ]
Line_4 $$ outputRoot = new File("")-->Line_16 $$ newOutputDir = outputRoot[ FD ]
Line_8 $$ ArrayList<Entry> allEntries = new ArrayList()-->Line_33 $$ allEntries.addAll(dirEntries)[ FD ]
Line_16 $$ newOutputDir = outputRoot-->Line_27 $$ entry.outputFile = newOutputDir.length() == 0 ? new File(outputName) : new File(newOutputDir, outputName)[ FD ]
Line_20 $$ String outputName = inputDir.getName()-->Line_22 $$ outputName = outputName.replaceAll("(.*)\\..*", "$1") + outputSuffix[ FD ]
Line_6 $$ LinkedHashMap<File, ArrayList<Entry>> dirToEntries = new LinkedHashMap()-->Line_7 $$ process(files, outputRoot, outputRoot, dirToEntries, 0)[ FD ]
Line_17 $$ if (!dirEntries.isEmpty())-->Line_19 $$ newOutputDir = dirEntries.get(0).outputDir[ CD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_5 $$ outputFiles.clear()[ CD ]
Line_15 $$ if (flattenOutput)-->Line_17 $$ if (!dirEntries.isEmpty())[ CD ]
Line_10 $$ ArrayList<Entry> dirEntries = mapEntry.getValue()-->Line_29 $$ processDir(entry, dirEntries)[ FD ]
Line_14 $$ File newOutputDir = null-->Line_16 $$ newOutputDir = outputRoot[ FD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_3 $$ if (outputRoot == null)[ CD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_6 $$ LinkedHashMap<File, ArrayList<Entry>> dirToEntries = new LinkedHashMap()[ CD ]
Line_14 $$ File newOutputDir = null-->Line_27 $$ entry.outputFile = newOutputDir.length() == 0 ? new File(outputName) : new File(newOutputDir, outputName)[ FD ]
Line_19 $$ newOutputDir = dirEntries.get(0).outputDir-->Line_26 $$ if (newOutputDir != null)[ FD ]
Line_9 $$ for (java.util.Map.Entry<File, ArrayList<Entry>> mapEntry : dirToEntries.entrySet()) -->Line_10 $$ ArrayList<Entry> dirEntries = mapEntry.getValue()[ FD ]
Line_16 $$ newOutputDir = outputRoot-->Line_25 $$ entry.outputDir = newOutputDir[ FD ]
Line_9 $$ for (java.util.Map.Entry<File, ArrayList<Entry>> mapEntry : dirToEntries.entrySet()) -->Line_13 $$ File inputDir = mapEntry.getKey()[ FD ]
Line_10 $$ ArrayList<Entry> dirEntries = mapEntry.getValue()-->Line_17 $$ if (!dirEntries.isEmpty())[ FD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_16 $$ newOutputDir = outputRoot[ FD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_44 $$ return outputFiles[ CD ]
Line_14 $$ File newOutputDir = null-->Line_19 $$ newOutputDir = dirEntries.get(0).outputDir[ FD ]
Line_4 $$ outputRoot = new File("")-->Line_7 $$ process(files, outputRoot, outputRoot, dirToEntries, 0)[ FD ]
Line_16 $$ newOutputDir = outputRoot-->Line_19 $$ newOutputDir = dirEntries.get(0).outputDir[ FD ]
Line_19 $$ newOutputDir = dirEntries.get(0).outputDir-->Line_25 $$ entry.outputDir = newOutputDir[ FD ]
Line_10 $$ ArrayList<Entry> dirEntries = mapEntry.getValue()-->Line_33 $$ allEntries.addAll(dirEntries)[ FD ]
Line_16 $$ newOutputDir = outputRoot-->Line_26 $$ if (newOutputDir != null)[ FD ]
Line_21 $$ if (outputSuffix != null)-->Line_22 $$ outputName = outputName.replaceAll("(.*)\\..*", "$1") + outputSuffix[ CD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_4 $$ outputRoot = new File("")[ FD ]
Line_26 $$ if (newOutputDir != null)-->Line_27 $$ entry.outputFile = newOutputDir.length() == 0 ? new File(outputName) : new File(newOutputDir, outputName)[ CD ]
Line_35 $$ if (comparator != null)-->Line_36 $$ Collections.sort(allEntries, entryComparator)[ CD ]
Line_8 $$ ArrayList<Entry> allEntries = new ArrayList()-->Line_36 $$ Collections.sort(allEntries, entryComparator)[ FD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_8 $$ ArrayList<Entry> allEntries = new ArrayList()[ CD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_3 $$ if (outputRoot == null)[ FD ]
Line_14 $$ File newOutputDir = null-->Line_25 $$ entry.outputDir = newOutputDir[ FD ]
Line_2 $$ public ArrayList<Entry> process(File[] files, File outputRoot) throws Exception -->Line_7 $$ process(files, outputRoot, outputRoot, dirToEntries, 0)[ FD ]
Line_13 $$ File inputDir = mapEntry.getKey()-->Line_20 $$ String outputName = inputDir.getName()[ FD ]
Line_19 $$ newOutputDir = dirEntries.get(0).outputDir-->Line_27 $$ entry.outputFile = newOutputDir.length() == 0 ? new File(outputName) : new File(newOutputDir, outputName)[ FD ]
Line_23 $$ Entry entry = new Entry()-->Line_39 $$ processFile(entry)[ FD ]
Line_3 $$ if (outputRoot == null)-->Line_4 $$ outputRoot = new File("")[ CD ]
Line_23 $$ Entry entry = new Entry()-->Line_29 $$ processDir(entry, dirEntries)[ FD ]
Line_14 $$ File newOutputDir = null-->Line_26 $$ if (newOutputDir != null)[ FD ]
Line_11 $$ if (comparator != null)-->Line_12 $$ Collections.sort(dirEntries, entryComparator)[ CD ]
Line_10 $$ ArrayList<Entry> dirEntries = mapEntry.getValue()-->Line_12 $$ Collections.sort(dirEntries, entryComparator)[ FD ]
Line_6 $$ LinkedHashMap<File, ArrayList<Entry>> dirToEntries = new LinkedHashMap()-->Line_9 $$ for (java.util.Map.Entry<File, ArrayList<Entry>> mapEntry : dirToEntries.entrySet()) [ FD ]
Line_10 $$ ArrayList<Entry> dirEntries = mapEntry.getValue()-->Line_19 $$ newOutputDir = dirEntries.get(0).outputDir[ FD ]
