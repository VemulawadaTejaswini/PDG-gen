Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_28 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_3 $$ final MyRefCounted counted = new MyRefCounted()-->Line_31 $$ counted.decRef()[ FD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_3 $$ final MyRefCounted counted = new MyRefCounted()[ CD ]
Line_7 $$ for (int i = 0; i < threads.length; i++) -->Line_8 $$ threads[i] = new Thread() [ CD ]
Line_7 $$ for (int i = 0; i < threads.length; i++) -->Line_25 $$ threads[i].start()[ CD ]
Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_27 $$ latch.countDown()[ FD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_7 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_6 $$ final CopyOnWriteArrayList<Throwable> exceptions = new CopyOnWriteArrayList()[ CD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_38 $$ assertThat(counted.refCount(), is(0))[ CD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_4 $$ Thread[] threads = new Thread[randomIntBetween(2, 5)][ CD ]
Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_11 $$ latch.await()[ FD ]
Line_3 $$ final MyRefCounted counted = new MyRefCounted()-->Line_33 $$ counted.ensureOpen()[ FD ]
Line_6 $$ final CopyOnWriteArrayList<Throwable> exceptions = new CopyOnWriteArrayList()-->Line_21 $$ exceptions.add(e)[ FD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_31 $$ counted.decRef()[ CD ]
Line_12 $$ for (int j = 0; j < 10000; j++) -->Line_13 $$ counted.incRef()[ CD ]
Line_7 $$ for (int i = 0; i < threads.length; i++) -->Line_28 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_3 $$ final MyRefCounted counted = new MyRefCounted()-->Line_38 $$ assertThat(counted.refCount(), is(0))[ FD ]
Line_28 $$ for (int i = 0; i < threads.length; i++) -->Line_29 $$ threads[i].join()[ CD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_39 $$ assertThat(exceptions, Matchers.emptyIterable())[ CD ]
Line_6 $$ final CopyOnWriteArrayList<Throwable> exceptions = new CopyOnWriteArrayList()-->Line_39 $$ assertThat(exceptions, Matchers.emptyIterable())[ FD ]
Line_3 $$ final MyRefCounted counted = new MyRefCounted()-->Line_13 $$ counted.incRef()[ FD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testMultiThreaded() throws InterruptedException -->Line_27 $$ latch.countDown()[ CD ]
Line_3 $$ final MyRefCounted counted = new MyRefCounted()-->Line_15 $$ counted.ensureOpen()[ FD ]
Line_3 $$ final MyRefCounted counted = new MyRefCounted()-->Line_17 $$ counted.decRef()[ FD ]
