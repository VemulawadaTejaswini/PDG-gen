Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_3 $$ DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterService.state().nodes()).masterNodeId(null)[ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_32 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_31 $$ final AtomicReference<Throwable> failure = new AtomicReference()-->Line_45 $$ assertThat(failure.get(), instanceOf(ElasticsearchTimeoutException.class))[ FD ]
Line_33 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueMillis(1), new NodeJoinController.ElectionCallback() -->Line_39 $$ failure.set(t)[ CD ]
Line_32 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_40 $$ latch.countDown()[ FD ]
Line_21 $$ DiscoveryNode node = newNode(nodeId++)-->Line_23 $$ nodesToJoin.add(node)[ FD ]
Line_3 $$ DiscoveryNodes.Builder nodes = DiscoveryNodes.builder(clusterService.state().nodes()).masterNodeId(null)-->Line_4 $$ clusterService.setState(ClusterState.builder(clusterService.state()).nodes(nodes))[ FD ]
Line_5 $$ int nodeId = 0-->Line_21 $$ DiscoveryNode node = newNode(nodeId++)[ FD ]
Line_19 $$ ArrayList<DiscoveryNode> nodesToJoin = new ArrayList()-->Line_26 $$ Collections.shuffle(nodesToJoin, random())[ FD ]
Line_33 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueMillis(1), new NodeJoinController.ElectionCallback() -->Line_36 $$ latch.countDown()[ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_8 $$ for (int i = randomInt(5); i > 0; i--) [ CD ]
Line_5 $$ int nodeId = 0-->Line_10 $$ joinNode(newNode(nodeId++))[ FD ]
Line_33 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueMillis(1), new NodeJoinController.ElectionCallback() -->Line_39 $$ failure.set(t)[ FD ]
Line_17 $$ final int initialJoins = randomIntBetween(0, requiredJoins - 1)-->Line_20 $$ for (int i = 0; i < initialJoins; i++) [ FD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_18 $$ final ArrayList<SimpleFuture> pendingJoins = new ArrayList()[ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_33 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueMillis(1), new NodeJoinController.ElectionCallback() [ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_5 $$ int nodeId = 0[ CD ]
Line_8 $$ for (int i = randomInt(5); i > 0; i--) -->Line_20 $$ for (int i = 0; i < initialJoins; i++) [ FD ]
Line_33 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueMillis(1), new NodeJoinController.ElectionCallback() -->Line_35 $$ assertThat("callback called with elected as master, but state disagrees", state.nodes().localNodeMaster(), equalTo(true))[ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_43 $$ latch.await()[ CD ]
Line_20 $$ for (int i = 0; i < initialJoins; i++) -->Line_21 $$ DiscoveryNode node = newNode(nodeId++)[ CD ]
Line_32 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_43 $$ latch.await()[ FD ]
Line_22 $$ for (int j = 1 + randomInt(3); j > 0; j--) -->Line_23 $$ nodesToJoin.add(node)[ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_4 $$ clusterService.setState(ClusterState.builder(clusterService.state()).nodes(nodes))[ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_19 $$ ArrayList<DiscoveryNode> nodesToJoin = new ArrayList()[ CD ]
Line_18 $$ final ArrayList<SimpleFuture> pendingJoins = new ArrayList()-->Line_29 $$ pendingJoins.add(joinNodeAsync(node))[ FD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_6 $$ final int requiredJoins = 1 + randomInt(5)[ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_31 $$ final AtomicReference<Throwable> failure = new AtomicReference()[ CD ]
Line_6 $$ final int requiredJoins = 1 + randomInt(5)-->Line_33 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueMillis(1), new NodeJoinController.ElectionCallback() [ FD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_16 $$ nodeJoinController.startAccumulatingJoins()[ CD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_45 $$ assertThat(failure.get(), instanceOf(ElasticsearchTimeoutException.class))[ CD ]
Line_31 $$ final AtomicReference<Throwable> failure = new AtomicReference()-->Line_39 $$ failure.set(t)[ FD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_26 $$ Collections.shuffle(nodesToJoin, random())[ CD ]
Line_33 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueMillis(1), new NodeJoinController.ElectionCallback() -->Line_35 $$ assertThat("callback called with elected as master, but state disagrees", state.nodes().localNodeMaster(), equalTo(true))[ FD ]
Line_33 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueMillis(1), new NodeJoinController.ElectionCallback() -->Line_40 $$ latch.countDown()[ CD ]
Line_21 $$ DiscoveryNode node = newNode(nodeId++)-->Line_29 $$ pendingJoins.add(joinNodeAsync(node))[ FD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_17 $$ final int initialJoins = randomIntBetween(0, requiredJoins - 1)[ CD ]
Line_32 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_36 $$ latch.countDown()[ FD ]
Line_2 $$ public void testMasterElectionTimeout() throws InterruptedException -->Line_20 $$ for (int i = 0; i < initialJoins; i++) [ CD ]
Line_28 $$ for (DiscoveryNode node : nodesToJoin) -->Line_29 $$ pendingJoins.add(joinNodeAsync(node))[ FD ]
Line_19 $$ ArrayList<DiscoveryNode> nodesToJoin = new ArrayList()-->Line_23 $$ nodesToJoin.add(node)[ FD ]
Line_20 $$ for (int i = 0; i < initialJoins; i++) -->Line_22 $$ for (int j = 1 + randomInt(3); j > 0; j--) [ CD ]
