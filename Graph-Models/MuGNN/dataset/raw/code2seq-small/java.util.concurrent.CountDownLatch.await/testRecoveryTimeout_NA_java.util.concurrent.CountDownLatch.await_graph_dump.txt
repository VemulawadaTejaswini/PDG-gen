Line_5 $$ final AtomicBoolean failed = new AtomicBoolean()-->Line_12 $$ failed.set(true)[ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_9 $$ latch.countDown()[ FD ]
Line_7 $$ final long recoveryId = startRecovery(collection, new RecoveryTarget.RecoveryListener() -->Line_9 $$ latch.countDown()[ CD ]
Line_7 $$ final long recoveryId = startRecovery(collection, new RecoveryTarget.RecoveryListener() -->Line_12 $$ failed.set(true)[ CD ]
Line_7 $$ final long recoveryId = startRecovery(collection, new RecoveryTarget.RecoveryListener() -->Line_13 $$ latch.countDown()[ CD ]
Line_4 $$ final RecoveriesCollection collection = new RecoveriesCollection(logger, getInstanceFromNode(ThreadPool.class))-->Line_7 $$ final long recoveryId = startRecovery(collection, new RecoveryTarget.RecoveryListener() [ FD ]
Line_7 $$ final long recoveryId = startRecovery(collection, new RecoveryTarget.RecoveryListener() -->Line_20 $$ collection.cancelRecovery(recoveryId, "meh")[ FD ]
Line_5 $$ final AtomicBoolean failed = new AtomicBoolean()-->Line_18 $$ assertTrue("recovery failed to timeout", failed.get())[ FD ]
Line_2 $$ public void testRecoveryTimeout() throws InterruptedException -->Line_3 $$ createIndex()[ CD ]
Line_2 $$ public void testRecoveryTimeout() throws InterruptedException -->Line_7 $$ final long recoveryId = startRecovery(collection, new RecoveryTarget.RecoveryListener() [ CD ]
Line_2 $$ public void testRecoveryTimeout() throws InterruptedException -->Line_4 $$ final RecoveriesCollection collection = new RecoveriesCollection(logger, getInstanceFromNode(ThreadPool.class))[ CD ]
Line_2 $$ public void testRecoveryTimeout() throws InterruptedException -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_13 $$ latch.countDown()[ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_17 $$ latch.await(30, TimeUnit.SECONDS)[ FD ]
Line_4 $$ final RecoveriesCollection collection = new RecoveriesCollection(logger, getInstanceFromNode(ThreadPool.class))-->Line_20 $$ collection.cancelRecovery(recoveryId, "meh")[ FD ]
Line_2 $$ public void testRecoveryTimeout() throws InterruptedException -->Line_5 $$ final AtomicBoolean failed = new AtomicBoolean()[ CD ]
