Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_4 $$ List<ClientResponse> responses = new CopyOnWriteArrayList<ClientResponse>()[ CD ]
Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_10 $$ if (body != null && !body.isEmpty()) [ FD ]
Line_4 $$ List<ClientResponse> responses = new CopyOnWriteArrayList<ClientResponse>()-->Line_17 $$ ClientResponse response = responses.iterator().next()[ FD ]
Line_8 $$ ClientRequest request = new ClientRequest().setMethod(method).setPath(url.getPath())-->Line_12 $$ request.getRequestHeaders().add(headerName, body.length())[ FD ]
Line_10 $$ if (body != null && !body.isEmpty()) -->Line_11 $$ HttpString headerName = HttpString.tryFromString(HttpHeaders.CONTENT_LENGTH)[ CD ]
Line_8 $$ ClientRequest request = new ClientRequest().setMethod(method).setPath(url.getPath())-->Line_9 $$ request.getRequestHeaders().add(HttpString.tryFromString(HttpHeaders.HOST), url.getHost())[ FD ]
Line_11 $$ HttpString headerName = HttpString.tryFromString(HttpHeaders.CONTENT_LENGTH)-->Line_12 $$ request.getRequestHeaders().add(headerName, body.length())[ FD ]
Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_9 $$ request.getRequestHeaders().add(HttpString.tryFromString(HttpHeaders.HOST), url.getHost())[ FD ]
Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_6 $$ ClientConnection connection = this.undertowBufferSupport.httpClientConnect(this.httpClient, url, this.worker, this.optionMap).get()[ FD ]
Line_3 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_16 $$ latch.await()[ FD ]
Line_6 $$ ClientConnection connection = this.undertowBufferSupport.httpClientConnect(this.httpClient, url, this.worker, this.optionMap).get()-->Line_15 $$ connection.sendRequest(request, createRequestCallback(body, responses, latch))[ FD ]
Line_8 $$ ClientRequest request = new ClientRequest().setMethod(method).setPath(url.getPath())-->Line_15 $$ connection.sendRequest(request, createRequestCallback(body, responses, latch))[ FD ]
Line_10 $$ if (body != null && !body.isEmpty()) -->Line_12 $$ request.getRequestHeaders().add(headerName, body.length())[ CD ]
Line_17 $$ ClientResponse response = responses.iterator().next()-->Line_19 $$ HttpHeaders responseHeaders = toHttpHeaders(response.getResponseHeaders())[ FD ]
Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_12 $$ request.getRequestHeaders().add(headerName, body.length())[ FD ]
Line_4 $$ List<ClientResponse> responses = new CopyOnWriteArrayList<ClientResponse>()-->Line_15 $$ connection.sendRequest(request, createRequestCallback(body, responses, latch))[ FD ]
Line_17 $$ ClientResponse response = responses.iterator().next()-->Line_18 $$ HttpStatus status = HttpStatus.valueOf(response.getResponseCode())[ FD ]
Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_15 $$ connection.sendRequest(request, createRequestCallback(body, responses, latch))[ FD ]
Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_14 $$ addHttpHeaders(request, headers)[ FD ]
Line_17 $$ ClientResponse response = responses.iterator().next()-->Line_20 $$ String responseBody = response.getAttachment(RESPONSE_BODY)[ FD ]
Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_8 $$ ClientRequest request = new ClientRequest().setMethod(method).setPath(url.getPath())[ FD ]
Line_3 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_15 $$ connection.sendRequest(request, createRequestCallback(body, responses, latch))[ FD ]
Line_6 $$ ClientConnection connection = this.undertowBufferSupport.httpClientConnect(this.httpClient, url, this.worker, this.optionMap).get()-->Line_23 $$ IoUtils.safeClose(connection)[ FD ]
Line_8 $$ ClientRequest request = new ClientRequest().setMethod(method).setPath(url.getPath())-->Line_14 $$ addHttpHeaders(request, headers)[ FD ]
Line_2 $$ protected ResponseEntity<String> executeRequest(URI url, HttpString method, HttpHeaders headers, String body) -->Line_3 $$ CountDownLatch latch = new CountDownLatch(1)[ CD ]
