Line_2 $$ public void testSanity() throws Exception -->Line_19 $$ futures.addAll(executor.processBatch(ImmutableList.of(newTask(5, executions), newTask(6, executions), newTask(7, executions), newTask(8, executions), newTask(9, executions))))[ CD ]
Line_3 $$ FairBatchExecutor executor = new FairBatchExecutor(1, daemonThreadsNamed("test-%s"))-->Line_19 $$ futures.addAll(executor.processBatch(ImmutableList.of(newTask(5, executions), newTask(6, executions), newTask(7, executions), newTask(8, executions), newTask(9, executions))))[ FD ]
Line_3 $$ FairBatchExecutor executor = new FairBatchExecutor(1, daemonThreadsNamed("test-%s"))-->Line_14 $$ futures.addAll(executor.processBatch(ImmutableList.of(newTask(1, executions), newTask(2, executions), newTask(3, executions), newTask(4, executions), newTask(5, meetingPoint, executions), newTask(6, executions), newTask(7, executions), newTask(8, executions), newTask(9, executions))))[ FD ]
Line_2 $$ public void testSanity() throws Exception -->Line_24 $$ assertTrue(Ordering.<Integer>natural().isOrdered(executions), executions.toString())[ CD ]
Line_2 $$ public void testSanity() throws Exception -->Line_14 $$ futures.addAll(executor.processBatch(ImmutableList.of(newTask(1, executions), newTask(2, executions), newTask(3, executions), newTask(4, executions), newTask(5, meetingPoint, executions), newTask(6, executions), newTask(7, executions), newTask(8, executions), newTask(9, executions))))[ CD ]
Line_4 $$ final CountDownLatch readyToStart = new CountDownLatch(1)-->Line_17 $$ readyToStart.countDown()[ FD ]
Line_4 $$ final CountDownLatch readyToStart = new CountDownLatch(1)-->Line_7 $$ readyToStart.await()[ FD ]
Line_2 $$ public void testSanity() throws Exception -->Line_25 $$ executor.shutdown()[ CD ]
Line_2 $$ public void testSanity() throws Exception -->Line_4 $$ final CountDownLatch readyToStart = new CountDownLatch(1)[ CD ]
Line_3 $$ FairBatchExecutor executor = new FairBatchExecutor(1, daemonThreadsNamed("test-%s"))-->Line_16 $$ futures.addAll(executor.processBatch(ImmutableList.of(newTask(3, executions), newTask(4, executions), newTask(5, meetingPoint, executions), newTask(6, executions), newTask(7, executions), newTask(8, executions))))[ FD ]
Line_2 $$ public void testSanity() throws Exception -->Line_3 $$ FairBatchExecutor executor = new FairBatchExecutor(1, daemonThreadsNamed("test-%s"))[ CD ]
Line_3 $$ FairBatchExecutor executor = new FairBatchExecutor(1, daemonThreadsNamed("test-%s"))-->Line_25 $$ executor.shutdown()[ FD ]
Line_3 $$ FairBatchExecutor executor = new FairBatchExecutor(1, daemonThreadsNamed("test-%s"))-->Line_15 $$ futures.addAll(executor.processBatch(ImmutableList.of(newTask(2, executions), newTask(3, executions), newTask(4, executions), newTask(5, meetingPoint, executions), newTask(6, executions))))[ FD ]
Line_2 $$ public void testSanity() throws Exception -->Line_5 $$ executor.processBatch(ImmutableList.of(new Callable<Object>() [ CD ]
Line_2 $$ public void testSanity() throws Exception -->Line_17 $$ readyToStart.countDown()[ CD ]
Line_2 $$ public void testSanity() throws Exception -->Line_16 $$ futures.addAll(executor.processBatch(ImmutableList.of(newTask(3, executions), newTask(4, executions), newTask(5, meetingPoint, executions), newTask(6, executions), newTask(7, executions), newTask(8, executions))))[ CD ]
Line_3 $$ FairBatchExecutor executor = new FairBatchExecutor(1, daemonThreadsNamed("test-%s"))-->Line_5 $$ executor.processBatch(ImmutableList.of(new Callable<Object>() [ FD ]
Line_2 $$ public void testSanity() throws Exception -->Line_20 $$ meetingPoint.notifyAdvance()[ CD ]
Line_2 $$ public void testSanity() throws Exception -->Line_18 $$ meetingPoint.waitForArrival()[ CD ]
Line_5 $$ executor.processBatch(ImmutableList.of(new Callable<Object>() -->Line_8 $$ return null[ CD ]
Line_5 $$ executor.processBatch(ImmutableList.of(new Callable<Object>() -->Line_7 $$ readyToStart.await()[ CD ]
Line_2 $$ public void testSanity() throws Exception -->Line_15 $$ futures.addAll(executor.processBatch(ImmutableList.of(newTask(2, executions), newTask(3, executions), newTask(4, executions), newTask(5, meetingPoint, executions), newTask(6, executions))))[ CD ]
