Line_22 $$ String id = Integer.toString(i)-->Line_28 $$ assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)[ FD ]
Line_37 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_39 $$ if (action.equals(RecoveryTarget.Actions.FILE_CHUNK)) [ FD ]
Line_39 $$ if (action.equals(RecoveryTarget.Actions.FILE_CHUNK)) -->Line_42 $$ if ((req.name().endsWith("cfs") || req.name().endsWith("fdt")) && req.lastChunk() && truncate.get()) [ CD ]
Line_8 $$ for (NodeStats stat : nodeStats.getNodes()) -->Line_9 $$ if (stat.getNode().isDataNode()) [ FD ]
Line_36 $$ MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().name()))-->Line_37 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) [ FD ]
Line_22 $$ String id = Integer.toString(i)-->Line_60 $$ assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_56 $$ truncate.compareAndSet(true, false)[ CD ]
Line_3 $$ for (RecoverySettings settings : internalCluster().getInstances(RecoverySettings.class)) -->Line_4 $$ IndexRecoveryIT.setChunkSize(settings, new ByteSizeValue(randomIntBetween(50, 300), ByteSizeUnit.BYTES))[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_55 $$ latch.await()[ CD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_57 $$ ensureGreen("test")[ CD ]
Line_21 $$ for (int i = 0; i < numDocs; i++) -->Line_27 $$ String id = Integer.toString(i)[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_25 $$ indexRandom(true, builder)[ CD ]
Line_34 $$ final AtomicBoolean truncate = new AtomicBoolean(true)-->Line_42 $$ if ((req.name().endsWith("cfs") || req.name().endsWith("fdt")) && req.lastChunk() && truncate.get()) [ FD ]
Line_19 $$ int numDocs = randomIntBetween(100, 200)-->Line_21 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_34 $$ final AtomicBoolean truncate = new AtomicBoolean(true)-->Line_56 $$ truncate.compareAndSet(true, false)[ FD ]
Line_20 $$ List<IndexRequestBuilder> builder = new ArrayList()-->Line_23 $$ builder.add(client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i), "the_id", id))[ FD ]
Line_26 $$ for (int i = 0; i < numDocs; i++) -->Line_27 $$ String id = Integer.toString(i)[ CD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_26 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_33 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_37 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_47 $$ super.sendRequest(node, requestId, action, request, options)[ CD ]
Line_21 $$ for (int i = 0; i < numDocs; i++) -->Line_23 $$ builder.add(client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i), "the_id", id))[ CD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_19 $$ int numDocs = randomIntBetween(100, 200)[ CD ]
Line_26 $$ for (int i = 0; i < numDocs; i++) -->Line_58 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_26 $$ for (int i = 0; i < numDocs; i++) -->Line_59 $$ String id = Integer.toString(i)[ FD ]
Line_21 $$ for (int i = 0; i < numDocs; i++) -->Line_23 $$ builder.add(client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i), "the_id", id))[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_30 $$ ensureGreen()[ CD ]
Line_21 $$ for (int i = 0; i < numDocs; i++) -->Line_22 $$ String id = Integer.toString(i)[ FD ]
Line_20 $$ List<IndexRequestBuilder> builder = new ArrayList()-->Line_25 $$ indexRandom(true, builder)[ FD ]
Line_27 $$ String id = Integer.toString(i)-->Line_28 $$ assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_21 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_7 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_13 $$ assertThat(dataNodeStats.size(), greaterThanOrEqualTo(2))[ FD ]
Line_8 $$ for (NodeStats stat : nodeStats.getNodes()) -->Line_10 $$ dataNodeStats.add(stat)[ FD ]
Line_19 $$ int numDocs = randomIntBetween(100, 200)-->Line_58 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_58 $$ for (int i = 0; i < numDocs; i++) -->Line_59 $$ String id = Integer.toString(i)[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_32 $$ client().admin().indices().prepareForceMerge().setMaxNumSegments(1).setFlush(true).get()[ CD ]
Line_26 $$ for (int i = 0; i < numDocs; i++) -->Line_28 $$ assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)[ CD ]
Line_6 $$ NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get()-->Line_8 $$ for (NodeStats stat : nodeStats.getNodes()) [ FD ]
Line_21 $$ for (int i = 0; i < numDocs; i++) -->Line_26 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_59 $$ String id = Integer.toString(i)-->Line_60 $$ assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)[ FD ]
Line_19 $$ int numDocs = randomIntBetween(100, 200)-->Line_26 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_33 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_43 $$ latch.countDown()[ FD ]
Line_21 $$ for (int i = 0; i < numDocs; i++) -->Line_22 $$ String id = Integer.toString(i)[ CD ]
Line_9 $$ if (stat.getNode().isDataNode()) -->Line_10 $$ dataNodeStats.add(stat)[ CD ]
Line_37 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_47 $$ super.sendRequest(node, requestId, action, request, options)[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_16 $$ NodeStats unluckyNode = dataNodeStats.get(1)[ CD ]
Line_7 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_16 $$ NodeStats unluckyNode = dataNodeStats.get(1)[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_34 $$ final AtomicBoolean truncate = new AtomicBoolean(true)[ CD ]
Line_21 $$ for (int i = 0; i < numDocs; i++) -->Line_59 $$ String id = Integer.toString(i)[ FD ]
Line_40 $$ RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request-->Line_41 $$ logger.debug("file chunk [" + req.toString() + "] lastChunk: " + req.lastChunk())[ FD ]
Line_42 $$ if ((req.name().endsWith("cfs") || req.name().endsWith("fdt")) && req.lastChunk() && truncate.get()) -->Line_43 $$ latch.countDown()[ CD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_52 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put("index.routing.allocation.include._name", primariesNode.getNode().name() + "," + unluckyNode.getNode().name())).get()[ CD ]
Line_7 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_15 $$ NodeStats primariesNode = dataNodeStats.get(0)[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_13 $$ assertThat(dataNodeStats.size(), greaterThanOrEqualTo(2))[ CD ]
Line_22 $$ String id = Integer.toString(i)-->Line_23 $$ builder.add(client().prepareIndex("test", "type1", id).setSource("field1", English.intToEnglish(i), "the_id", id))[ FD ]
Line_26 $$ for (int i = 0; i < numDocs; i++) -->Line_27 $$ String id = Integer.toString(i)[ FD ]
Line_15 $$ NodeStats primariesNode = dataNodeStats.get(0)-->Line_17 $$ assertAcked(prepareCreate("test").addMapping("type1", "field1", "type=string", "the_id", "type=string").setSettings(settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfShards()).put("index.routing.allocation.include._name", primariesNode.getNode().name())))[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_15 $$ NodeStats primariesNode = dataNodeStats.get(0)[ CD ]
Line_40 $$ RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request-->Line_42 $$ if ((req.name().endsWith("cfs") || req.name().endsWith("fdt")) && req.lastChunk() && truncate.get()) [ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_31 $$ client().admin().indices().prepareFlush().setForce(true).setWaitIfOngoing(true).get()[ CD ]
Line_33 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_55 $$ latch.await()[ FD ]
Line_15 $$ NodeStats primariesNode = dataNodeStats.get(0)-->Line_52 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put("index.routing.allocation.include._name", primariesNode.getNode().name() + "," + unluckyNode.getNode().name())).get()[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_17 $$ assertAcked(prepareCreate("test").addMapping("type1", "field1", "type=string", "the_id", "type=string").setSettings(settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, numberOfShards()).put("index.routing.allocation.include._name", primariesNode.getNode().name())))[ CD ]
Line_58 $$ for (int i = 0; i < numDocs; i++) -->Line_59 $$ String id = Integer.toString(i)[ CD ]
Line_58 $$ for (int i = 0; i < numDocs; i++) -->Line_60 $$ assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)[ CD ]
Line_35 $$ for (NodeStats dataNode : dataNodeStats) -->Line_36 $$ MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().name()))[ FD ]
Line_7 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_14 $$ Collections.shuffle(dataNodeStats, random())[ FD ]
Line_27 $$ String id = Integer.toString(i)-->Line_60 $$ assertHitCount(client().prepareSearch().setQuery(QueryBuilders.termQuery("the_id", id)).get(), 1)[ FD ]
Line_16 $$ NodeStats unluckyNode = dataNodeStats.get(1)-->Line_52 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(settingsBuilder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put("index.routing.allocation.include._name", primariesNode.getNode().name() + "," + unluckyNode.getNode().name())).get()[ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_14 $$ Collections.shuffle(dataNodeStats, random())[ CD ]
Line_7 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_10 $$ dataNodeStats.add(stat)[ FD ]
Line_39 $$ if (action.equals(RecoveryTarget.Actions.FILE_CHUNK)) -->Line_40 $$ RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request[ CD ]
Line_21 $$ for (int i = 0; i < numDocs; i++) -->Line_58 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_58 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_16 $$ NodeStats unluckyNode = dataNodeStats.get(1)-->Line_37 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) [ FD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_6 $$ NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get()[ CD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_7 $$ List<NodeStats> dataNodeStats = new ArrayList()[ CD ]
Line_39 $$ if (action.equals(RecoveryTarget.Actions.FILE_CHUNK)) -->Line_41 $$ logger.debug("file chunk [" + req.toString() + "] lastChunk: " + req.lastChunk())[ CD ]
Line_37 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_39 $$ if (action.equals(RecoveryTarget.Actions.FILE_CHUNK)) [ CD ]
Line_2 $$ public void testCancelRecoveryAndResume() throws Exception -->Line_20 $$ List<IndexRequestBuilder> builder = new ArrayList()[ CD ]
