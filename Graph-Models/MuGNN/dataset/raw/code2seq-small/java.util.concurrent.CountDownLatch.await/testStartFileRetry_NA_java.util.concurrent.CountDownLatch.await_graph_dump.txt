Line_2 $$ public void testStartFileRetry() throws Exception -->Line_7 $$ executor.submit(new InjectFaultTask() [ CD ]
Line_29 $$ executor.submit(new InjectFaultTask() -->Line_36 $$ assertEquals("Expected a startFile retry", 2, injector.generateCount)[ CD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_43 $$ dfsAdmin.createEncryptionZone(zone1, anotherKey)[ CD ]
Line_48 $$ for (int i = 0; i < 10; i++) -->Line_58 $$ injector.wait.countDown()[ CD ]
Line_48 $$ for (int i = 0; i < 10; i++) -->Line_51 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ CD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_47 $$ Future<?> future = executor.submit(new CreateFileTask(fsWrapper, file))[ CD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_18 $$ fsWrapper.delete(zone1, true)[ FD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_5 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ CD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_51 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ FD ]
Line_29 $$ executor.submit(new InjectFaultTask() -->Line_31 $$ fsWrapper.delete(zone1, true)[ CD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_27 $$ DFSTestUtil.createKey(otherKey, cluster, conf)[ CD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_32 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ FD ]
Line_4 $$ final Path file = new Path(zone1, "file1")-->Line_13 $$ fsWrapper.delete(file, false)[ FD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_25 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ FD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_16 $$ executor.submit(new InjectFaultTask() [ CD ]
Line_16 $$ executor.submit(new InjectFaultTask() -->Line_18 $$ fsWrapper.delete(zone1, true)[ CD ]
Line_29 $$ executor.submit(new InjectFaultTask() -->Line_32 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ CD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_50 $$ fsWrapper.delete(zone1, true)[ FD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_6 $$ ExecutorService executor = Executors.newSingleThreadExecutor()[ CD ]
Line_48 $$ for (int i = 0; i < 10; i++) -->Line_52 $$ dfsAdmin.createEncryptionZone(zone1, keyToUse)[ CD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_40 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ CD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_52 $$ dfsAdmin.createEncryptionZone(zone1, keyToUse)[ FD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_33 $$ dfsAdmin.createEncryptionZone(zone1, otherKey)[ FD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_42 $$ DFSTestUtil.createKey(anotherKey, cluster, conf)[ CD ]
Line_48 $$ for (int i = 0; i < 10; i++) -->Line_50 $$ fsWrapper.delete(zone1, true)[ CD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_43 $$ dfsAdmin.createEncryptionZone(zone1, anotherKey)[ FD ]
Line_16 $$ executor.submit(new InjectFaultTask() -->Line_21 $$ assertEquals("Expected no startFile retries", 1, injector.generateCount)[ CD ]
Line_7 $$ executor.submit(new InjectFaultTask() -->Line_13 $$ fsWrapper.delete(file, false)[ CD ]
Line_6 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_47 $$ Future<?> future = executor.submit(new CreateFileTask(fsWrapper, file))[ FD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_5 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ FD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_28 $$ dfsAdmin.createEncryptionZone(zone1, TEST_KEY)[ FD ]
Line_48 $$ for (int i = 0; i < 10; i++) -->Line_49 $$ injector.ready.await()[ CD ]
Line_48 $$ for (int i = 0; i < 10; i++) -->Line_53 $$ if (keyToUse == otherKey) [ CD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_29 $$ executor.submit(new InjectFaultTask() [ CD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_40 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ FD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_25 $$ fsWrapper.mkdir(zone1, FsPermission.getDirDefault(), true)[ CD ]
Line_29 $$ executor.submit(new InjectFaultTask() -->Line_33 $$ dfsAdmin.createEncryptionZone(zone1, otherKey)[ CD ]
Line_7 $$ executor.submit(new InjectFaultTask() -->Line_9 $$ dfsAdmin.createEncryptionZone(zone1, TEST_KEY)[ CD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_3 $$ final Path zone1 = new Path("/zone1")[ CD ]
Line_16 $$ executor.submit(new InjectFaultTask() -->Line_22 $$ fsWrapper.delete(file, false)[ CD ]
Line_6 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_7 $$ executor.submit(new InjectFaultTask() [ FD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_31 $$ fsWrapper.delete(zone1, true)[ FD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_48 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_4 $$ final Path file = new Path(zone1, "file1")-->Line_22 $$ fsWrapper.delete(file, false)[ FD ]
Line_6 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_29 $$ executor.submit(new InjectFaultTask() [ FD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_28 $$ dfsAdmin.createEncryptionZone(zone1, TEST_KEY)[ CD ]
Line_2 $$ public void testStartFileRetry() throws Exception -->Line_4 $$ final Path file = new Path(zone1, "file1")[ CD ]
Line_29 $$ executor.submit(new InjectFaultTask() -->Line_37 $$ fsWrapper.delete(zone1, true)[ CD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_9 $$ dfsAdmin.createEncryptionZone(zone1, TEST_KEY)[ FD ]
Line_3 $$ final Path zone1 = new Path("/zone1")-->Line_37 $$ fsWrapper.delete(zone1, true)[ FD ]
Line_6 $$ ExecutorService executor = Executors.newSingleThreadExecutor()-->Line_16 $$ executor.submit(new InjectFaultTask() [ FD ]
Line_7 $$ executor.submit(new InjectFaultTask() -->Line_12 $$ assertEquals("Expected a startFile retry", 2, injector.generateCount)[ CD ]
