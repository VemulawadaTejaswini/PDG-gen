Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_57 $$ assertThat("didn't see error sent", tracer.sawErrorSent, equalTo(true))[ CD ]
Line_3 $$ TransportRequestHandler handler = new TransportRequestHandler<StringMessageRequest>() -->Line_13 $$ channel.sendResponse(new RuntimeException(""))[ FD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_34 $$ serviceB.registerRequestHandler("testError", StringMessageRequest::<>new, ThreadPool.Names.SAME, handlerWithError)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_77 $$ assertThat("didn't see response received", tracer.sawResponseReceived, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_42 $$ requestCompleted.acquire()[ CD ]
Line_3 $$ TransportRequestHandler handler = new TransportRequestHandler<StringMessageRequest>() -->Line_5 $$ channel.sendResponse(new StringMessageResponse(""))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_69 $$ service.applySettings(Settings.builder().put(TransportService.TRACE_LOG_INCLUDE_SETTING.getKey(), includeSettings, TransportService.TRACE_LOG_EXCLUDE_SETTING.getKey(), excludeSettings).build())[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_75 $$ assertThat("didn't see request received", tracer.sawRequestReceived, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_70 $$ tracer.reset(4)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_3 $$ TransportRequestHandler handler = new TransportRequestHandler<StringMessageRequest>() [ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_78 $$ assertThat("saw error sent", tracer.sawErrorSent, equalTo(false))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_51 $$ requestCompleted.acquire()[ CD ]
Line_8 $$ TransportRequestHandler handlerWithError = new TransportRequestHandler<StringMessageRequest>() -->Line_10 $$ if (request.timeout() > 0) [ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_39 $$ boolean timeout = randomBoolean()[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_82 $$ tracer.expectedEvents.get().await()[ CD ]
Line_17 $$ TransportResponseHandler noopResponseHandler = new BaseTransportResponseHandler<StringMessageResponse>() -->Line_22 $$ requestCompleted.release()[ CD ]
Line_17 $$ TransportResponseHandler noopResponseHandler = new BaseTransportResponseHandler<StringMessageResponse>() -->Line_25 $$ requestCompleted.release()[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_60 $$ if (randomBoolean()) [ CD ]
Line_3 $$ TransportRequestHandler handler = new TransportRequestHandler<StringMessageRequest>() -->Line_10 $$ if (request.timeout() > 0) [ FD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_50 $$ serviceA.sendRequest(nodeB, "testError", new StringMessageRequest(""), noopResponseHandler)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_83 $$ assertThat("saw request sent", tracer.sawRequestSent, equalTo(false))[ CD ]
Line_10 $$ if (request.timeout() > 0) -->Line_11 $$ Thread.sleep(request.timeout)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_73 $$ tracer.expectedEvents.get().await()[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_31 $$ serviceA.registerRequestHandler("test", StringMessageRequest::<>new, ThreadPool.Names.SAME, handler)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_49 $$ tracer.reset(4)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_32 $$ serviceA.registerRequestHandler("testError", StringMessageRequest::<>new, ThreadPool.Names.SAME, handlerWithError)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_46 $$ assertThat("didn't see response sent", tracer.sawResponseSent, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_33 $$ serviceB.registerRequestHandler("test", StringMessageRequest::<>new, ThreadPool.Names.SAME, handler)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_71 $$ serviceA.sendRequest(nodeB, "test", new StringMessageRequest(""), noopResponseHandler)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_79 $$ tracer.reset(2)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_81 $$ requestCompleted.acquire()[ CD ]
Line_3 $$ TransportRequestHandler handler = new TransportRequestHandler<StringMessageRequest>() -->Line_5 $$ channel.sendResponse(new StringMessageResponse(""))[ FD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_86 $$ assertThat("saw response received", tracer.sawResponseReceived, equalTo(false))[ CD ]
Line_17 $$ TransportResponseHandler noopResponseHandler = new BaseTransportResponseHandler<StringMessageResponse>() -->Line_19 $$ return new StringMessageResponse()[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_56 $$ assertThat("didn't see response received", tracer.sawResponseReceived, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_43 $$ tracer.expectedEvents.get().await()[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_74 $$ assertThat("didn't see request sent", tracer.sawRequestSent, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_72 $$ requestCompleted.acquire()[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_47 $$ assertThat("didn't see response received", tracer.sawResponseReceived, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_55 $$ assertThat("saw response sent", tracer.sawResponseSent, equalTo(false))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_37 $$ serviceB.addTracer(tracer)[ CD ]
Line_8 $$ TransportRequestHandler handlerWithError = new TransportRequestHandler<StringMessageRequest>() -->Line_13 $$ channel.sendResponse(new RuntimeException(""))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_54 $$ assertThat("didn't see request received", tracer.sawRequestReceived, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_68 $$ serviceA.setDynamicSettings(service)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_80 $$ serviceA.sendRequest(nodeB, "testError", new StringMessageRequest(""), noopResponseHandler)[ CD ]
Line_3 $$ TransportRequestHandler handler = new TransportRequestHandler<StringMessageRequest>() -->Line_33 $$ serviceB.registerRequestHandler("test", StringMessageRequest::<>new, ThreadPool.Names.SAME, handler)[ FD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_38 $$ tracer.reset(4)[ CD ]
Line_8 $$ TransportRequestHandler handlerWithError = new TransportRequestHandler<StringMessageRequest>() -->Line_10 $$ if (request.timeout() > 0) [ FD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_41 $$ serviceA.sendRequest(nodeB, "test", new StringMessageRequest("", 10), options, noopResponseHandler)[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_53 $$ assertThat("didn't see request sent", tracer.sawRequestSent, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_36 $$ serviceA.addTracer(tracer)[ CD ]
Line_17 $$ TransportResponseHandler noopResponseHandler = new BaseTransportResponseHandler<StringMessageResponse>() -->Line_28 $$ return ThreadPool.Names.SAME[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_84 $$ assertThat("didn't see request received", tracer.sawRequestReceived, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_85 $$ assertThat("saw response sent", tracer.sawResponseSent, equalTo(false))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_44 $$ assertThat("didn't see request sent", tracer.sawRequestSent, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_52 $$ tracer.expectedEvents.get().await()[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_48 $$ assertThat("saw error sent", tracer.sawErrorSent, equalTo(false))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_76 $$ assertThat("didn't see response sent", tracer.sawResponseSent, equalTo(true))[ CD ]
Line_8 $$ TransportRequestHandler handlerWithError = new TransportRequestHandler<StringMessageRequest>() -->Line_13 $$ channel.sendResponse(new RuntimeException(""))[ FD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_45 $$ assertThat("didn't see request received", tracer.sawRequestReceived, equalTo(true))[ CD ]
Line_2 $$ public void testTracerLog() throws InterruptedException -->Line_87 $$ assertThat("didn't see error sent", tracer.sawErrorSent, equalTo(true))[ CD ]
Line_3 $$ TransportRequestHandler handler = new TransportRequestHandler<StringMessageRequest>() -->Line_31 $$ serviceA.registerRequestHandler("test", StringMessageRequest::<>new, ThreadPool.Names.SAME, handler)[ FD ]
