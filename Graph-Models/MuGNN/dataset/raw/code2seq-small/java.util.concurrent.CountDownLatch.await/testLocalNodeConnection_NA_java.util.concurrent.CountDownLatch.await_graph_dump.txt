Line_4 $$ if (((TransportService) serviceA).getLocalNode() != null) -->Line_5 $$ serviceA.disconnectFromNode(nodeA)[ CD ]
Line_19 $$ serviceA.sendRequest(nodeA, "localNode", new StringMessageRequest("test"), new TransportResponseHandler<StringMessageResponse>() -->Line_25 $$ responseLatch.countDown()[ CD ]
Line_2 $$ public void testLocalNodeConnection() throws InterruptedException -->Line_3 $$ assertTrue("serviceA is not connected to nodeA", serviceA.nodeConnected(nodeA))[ CD ]
Line_19 $$ serviceA.sendRequest(nodeA, "localNode", new StringMessageRequest("test"), new TransportResponseHandler<StringMessageResponse>() -->Line_32 $$ return ThreadPool.Names.GENERIC[ CD ]
Line_19 $$ serviceA.sendRequest(nodeA, "localNode", new StringMessageRequest("test"), new TransportResponseHandler<StringMessageResponse>() -->Line_29 $$ responseLatch.countDown()[ CD ]
Line_8 $$ serviceA.registerRequestHandler("localNode", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() -->Line_11 $$ channel.sendResponse(new StringMessageResponse(request.message))[ FD ]
Line_19 $$ serviceA.sendRequest(nodeA, "localNode", new StringMessageRequest("test"), new TransportResponseHandler<StringMessageResponse>() -->Line_21 $$ return new StringMessageResponse()[ CD ]
Line_7 $$ final AtomicReference<Exception> exception = new AtomicReference()-->Line_28 $$ exception.set(exp)[ FD ]
Line_2 $$ public void testLocalNodeConnection() throws InterruptedException -->Line_7 $$ final AtomicReference<Exception> exception = new AtomicReference()[ CD ]
Line_19 $$ serviceA.sendRequest(nodeA, "localNode", new StringMessageRequest("test"), new TransportResponseHandler<StringMessageResponse>() -->Line_24 $$ responseString.set(response.message)[ CD ]
Line_2 $$ public void testLocalNodeConnection() throws InterruptedException -->Line_35 $$ responseLatch.await()[ CD ]
Line_7 $$ final AtomicReference<Exception> exception = new AtomicReference()-->Line_13 $$ exception.set(e)[ FD ]
Line_19 $$ serviceA.sendRequest(nodeA, "localNode", new StringMessageRequest("test"), new TransportResponseHandler<StringMessageResponse>() -->Line_28 $$ exception.set(exp)[ CD ]
Line_2 $$ public void testLocalNodeConnection() throws InterruptedException -->Line_8 $$ serviceA.registerRequestHandler("localNode", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() [ CD ]
Line_2 $$ public void testLocalNodeConnection() throws InterruptedException -->Line_4 $$ if (((TransportService) serviceA).getLocalNode() != null) [ CD ]
Line_19 $$ serviceA.sendRequest(nodeA, "localNode", new StringMessageRequest("test"), new TransportResponseHandler<StringMessageResponse>() -->Line_28 $$ exception.set(exp)[ FD ]
Line_7 $$ final AtomicReference<Exception> exception = new AtomicReference()-->Line_36 $$ assertNull(exception.get())[ FD ]
Line_2 $$ public void testLocalNodeConnection() throws InterruptedException -->Line_36 $$ assertNull(exception.get())[ CD ]
Line_2 $$ public void testLocalNodeConnection() throws InterruptedException -->Line_19 $$ serviceA.sendRequest(nodeA, "localNode", new StringMessageRequest("test"), new TransportResponseHandler<StringMessageResponse>() [ CD ]
Line_2 $$ public void testLocalNodeConnection() throws InterruptedException -->Line_37 $$ assertThat(responseString.get(), equalTo("test"))[ CD ]
