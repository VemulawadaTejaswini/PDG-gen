Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_24 $$ latch.countDown()[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_16 $$ return false[ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_7 $$ final AtomicBoolean ackTimeout = new AtomicBoolean(false)[ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_8 $$ final AtomicBoolean onFailure = new AtomicBoolean(false)[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_13 $$ return null[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_40 $$ onFailure.set(true)[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_39 $$ logger.error("failed to execute callback in test [ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_44 $$ ensureGreen()[ CD ]
Line_5 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class)-->Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) [ FD ]
Line_7 $$ final AtomicBoolean ackTimeout = new AtomicBoolean(false)-->Line_23 $$ ackTimeout.set(true)[ FD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_23 $$ ackTimeout.set(true)[ CD ]
Line_9 $$ final AtomicBoolean executed = new AtomicBoolean(false)-->Line_35 $$ executed.set(true)[ FD ]
Line_8 $$ final AtomicBoolean onFailure = new AtomicBoolean(false)-->Line_40 $$ onFailure.set(true)[ FD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_20 $$ latch.countDown()[ FD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_9 $$ final AtomicBoolean executed = new AtomicBoolean(false)[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_19 $$ allNodesAcked.set(true)[ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) [ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_48 $$ assertThat(executed.get(), equalTo(true))[ CD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_45 $$ assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true))[ FD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_20 $$ latch.countDown()[ CD ]
Line_7 $$ final AtomicBoolean ackTimeout = new AtomicBoolean(false)-->Line_47 $$ assertThat(ackTimeout.get(), equalTo(false))[ FD ]
Line_8 $$ final AtomicBoolean onFailure = new AtomicBoolean(false)-->Line_49 $$ assertThat(onFailure.get(), equalTo(false))[ FD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_49 $$ assertThat(onFailure.get(), equalTo(false))[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_30 $$ return TimeValue.timeValueSeconds(10)[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_41 $$ latch.countDown()[ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_47 $$ assertThat(ackTimeout.get(), equalTo(false))[ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_6 $$ final AtomicBoolean allNodesAcked = new AtomicBoolean(false)[ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_4 $$ internalCluster().startNode(settings)[ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_41 $$ latch.countDown()[ FD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_45 $$ assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true))[ CD ]
Line_9 $$ final AtomicBoolean executed = new AtomicBoolean(false)-->Line_48 $$ assertThat(executed.get(), equalTo(true))[ FD ]
Line_6 $$ final AtomicBoolean allNodesAcked = new AtomicBoolean(false)-->Line_46 $$ assertThat(allNodesAcked.get(), equalTo(true))[ FD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_27 $$ return TimeValue.timeValueSeconds(10)[ CD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_46 $$ assertThat(allNodesAcked.get(), equalTo(true))[ CD ]
Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()-->Line_4 $$ internalCluster().startNode(settings)[ FD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_35 $$ executed.set(true)[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_36 $$ return ClusterState.builder(currentState).build()[ FD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_39 $$ logger.error("failed to execute callback in test [ FD ]
Line_2 $$ public void testAckedUpdateTaskNoAckExpected() throws Exception -->Line_5 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class)[ CD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_24 $$ latch.countDown()[ FD ]
Line_6 $$ final AtomicBoolean allNodesAcked = new AtomicBoolean(false)-->Line_19 $$ allNodesAcked.set(true)[ FD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new AckedClusterStateUpdateTask<Void>(null, null) -->Line_36 $$ return ClusterState.builder(currentState).build()[ CD ]
