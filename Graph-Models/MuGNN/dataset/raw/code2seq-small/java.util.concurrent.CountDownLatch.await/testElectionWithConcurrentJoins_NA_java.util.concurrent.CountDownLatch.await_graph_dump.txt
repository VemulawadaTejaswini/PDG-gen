Line_12 $$ for (int i = 0; i < threads.length; i++) -->Line_23 $$ for (int i = 0; i < iterations; i++) [ FD ]
Line_12 $$ for (int i = 0; i < threads.length; i++) -->Line_13 $$ final DiscoveryNode node = newNode(i, true)[ FD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_3 $$ DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes()).masterNodeId(null)[ CD ]
Line_12 $$ for (int i = 0; i < threads.length; i++) -->Line_29 $$ threads[i].start()[ CD ]
Line_16 $$ threads[i] = new Thread(new AbstractRunnable() -->Line_19 $$ backgroundExceptions.add(t)[ CD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_4 $$ clusterService.setState(ClusterState.builder(clusterService.state()).nodes(nodesBuilder))[ CD ]
Line_11 $$ final List<Throwable> backgroundExceptions = new CopyOnWriteArrayList()-->Line_19 $$ backgroundExceptions.add(t)[ FD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_6 $$ Thread[] threads = new Thread[3 + randomInt(5)][ CD ]
Line_12 $$ for (int i = 0; i < threads.length; i++) -->Line_16 $$ threads[i] = new Thread(new AbstractRunnable() [ CD ]
Line_12 $$ for (int i = 0; i < threads.length; i++) -->Line_13 $$ final DiscoveryNode node = newNode(i, true)[ CD ]
Line_3 $$ DiscoveryNodes.Builder nodesBuilder = DiscoveryNodes.builder(clusterService.state().nodes()).masterNodeId(null)-->Line_4 $$ clusterService.setState(ClusterState.builder(clusterService.state()).nodes(nodesBuilder))[ FD ]
Line_16 $$ threads[i] = new Thread(new AbstractRunnable() -->Line_23 $$ for (int i = 0; i < iterations; i++) [ CD ]
Line_8 $$ ArrayList<DiscoveryNode> nodes = new ArrayList()-->Line_9 $$ nodes.add(clusterService.localNode())[ FD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_52 $$ assertNodesInCurrentState(nodes)[ CD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_11 $$ final List<Throwable> backgroundExceptions = new CopyOnWriteArrayList()[ CD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_9 $$ nodes.add(clusterService.localNode())[ CD ]
Line_16 $$ threads[i] = new Thread(new AbstractRunnable() -->Line_41 $$ logger.error("unexpected error while waiting to be elected as master", t)[ FD ]
Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() -->Line_38 $$ latch.countDown()[ CD ]
Line_10 $$ final CyclicBarrier barrier = new CyclicBarrier(threads.length + 1)-->Line_22 $$ barrier.await()[ FD ]
Line_13 $$ final DiscoveryNode node = newNode(i, true)-->Line_24 $$ logger.debug("[ FD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() [ CD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_10 $$ final CyclicBarrier barrier = new CyclicBarrier(threads.length + 1)[ CD ]
Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() -->Line_41 $$ logger.error("unexpected error while waiting to be elected as master", t)[ CD ]
Line_23 $$ for (int i = 0; i < iterations; i++) -->Line_24 $$ logger.debug("[ CD ]
Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() -->Line_37 $$ assertThat("callback called with elected as master, but state disagrees", state.nodes().localNodeMaster(), equalTo(true))[ CD ]
Line_8 $$ ArrayList<DiscoveryNode> nodes = new ArrayList()-->Line_52 $$ assertNodesInCurrentState(nodes)[ FD ]
Line_12 $$ for (int i = 0; i < threads.length; i++) -->Line_15 $$ nodes.add(node)[ CD ]
Line_7 $$ final int requiredJoins = randomInt(threads.length)-->Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() [ FD ]
Line_16 $$ threads[i] = new Thread(new AbstractRunnable() -->Line_22 $$ barrier.await()[ CD ]
Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() -->Line_37 $$ assertThat("callback called with elected as master, but state disagrees", state.nodes().localNodeMaster(), equalTo(true))[ FD ]
Line_13 $$ final DiscoveryNode node = newNode(i, true)-->Line_25 $$ joinNode(node)[ FD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_7 $$ final int requiredJoins = randomInt(threads.length)[ CD ]
Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() -->Line_42 $$ failure.set(t)[ CD ]
Line_12 $$ for (int i = 0; i < threads.length; i++) -->Line_14 $$ final int iterations = rarely() ? randomIntBetween(1, 4) : 1[ CD ]
Line_8 $$ ArrayList<DiscoveryNode> nodes = new ArrayList()-->Line_15 $$ nodes.add(node)[ FD ]
Line_14 $$ final int iterations = rarely() ? randomIntBetween(1, 4) : 1-->Line_23 $$ for (int i = 0; i < iterations; i++) [ FD ]
Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() -->Line_42 $$ failure.set(t)[ FD ]
Line_16 $$ threads[i] = new Thread(new AbstractRunnable() -->Line_42 $$ failure.set(t)[ FD ]
Line_13 $$ final DiscoveryNode node = newNode(i, true)-->Line_15 $$ nodes.add(node)[ FD ]
Line_16 $$ threads[i] = new Thread(new AbstractRunnable() -->Line_18 $$ logger.error("unexpected error in join thread", t)[ FD ]
Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() -->Line_41 $$ logger.error("unexpected error while waiting to be elected as master", t)[ FD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_12 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_47 $$ ExceptionsHelper.reThrowIfNotNull(failure.get())[ CD ]
Line_10 $$ final CyclicBarrier barrier = new CyclicBarrier(threads.length + 1)-->Line_31 $$ barrier.await()[ FD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_46 $$ latch.await()[ CD ]
Line_16 $$ threads[i] = new Thread(new AbstractRunnable() -->Line_19 $$ backgroundExceptions.add(t)[ FD ]
Line_23 $$ for (int i = 0; i < iterations; i++) -->Line_25 $$ joinNode(node)[ CD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_5 $$ nodeJoinController.startAccumulatingJoins()[ CD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_8 $$ ArrayList<DiscoveryNode> nodes = new ArrayList()[ CD ]
Line_2 $$ public void testElectionWithConcurrentJoins() throws InterruptedException, BrokenBarrierException -->Line_31 $$ barrier.await()[ CD ]
Line_35 $$ nodeJoinController.waitToBeElectedAsMaster(requiredJoins, TimeValue.timeValueHours(30), new NodeJoinController.ElectionCallback() -->Line_43 $$ latch.countDown()[ CD ]
Line_16 $$ threads[i] = new Thread(new AbstractRunnable() -->Line_18 $$ logger.error("unexpected error in join thread", t)[ CD ]
