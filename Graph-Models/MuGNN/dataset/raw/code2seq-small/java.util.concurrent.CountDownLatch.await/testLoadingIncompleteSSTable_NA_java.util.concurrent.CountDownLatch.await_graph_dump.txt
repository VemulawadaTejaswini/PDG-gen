Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_24 $$ partitions = Util.getAll(Util.cmd(Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD2)).build())[ CD ]
Line_22 $$ loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))-->Line_23 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ FD ]
Line_7 $$ String query = "INSERT INTO %s.%s (key, name, val) VALUES (?, ?, ?)"-->Line_8 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD2)).using(String.format(query, KEYSPACE1, CF_STANDARD2)).withBufferSizeInMB(1).build()[ FD ]
Line_17 $$ SSTableLoader loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))-->Line_22 $$ loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))[ FD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_5 $$ assertTrue(dataDir.listFiles().length == 0)[ CD ]
Line_13 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD2)-->Line_14 $$ cfs.forceBlockingFlush()[ FD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_21 $$ writer.close()[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_8 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD2)).using(String.format(query, KEYSPACE1, CF_STANDARD2)).withBufferSizeInMB(1).build()[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_9 $$ int NB_PARTITIONS = 5000[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_23 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ CD ]
Line_3 $$ File dataDir = new File(tmpdir.getAbsolutePath() + File.separator + KEYSPACE1 + File.separator + CF_STANDARD2)-->Line_4 $$ assert dataDir.mkdirs()[ FD ]
Line_3 $$ File dataDir = new File(tmpdir.getAbsolutePath() + File.separator + KEYSPACE1 + File.separator + CF_STANDARD2)-->Line_8 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD2)).using(String.format(query, KEYSPACE1, CF_STANDARD2)).withBufferSizeInMB(1).build()[ FD ]
Line_10 $$ for (int i = 0; i < NB_PARTITIONS; i++) -->Line_11 $$ writer.addRow(String.format("key%d", i), String.format("col%d", j), "100")[ FD ]
Line_24 $$ partitions = Util.getAll(Util.cmd(Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD2)).build())-->Line_25 $$ assertEquals(NB_PARTITIONS, partitions.size())[ FD ]
Line_16 $$ final CountDownLatch latch = new CountDownLatch(2)-->Line_18 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ FD ]
Line_17 $$ SSTableLoader loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))-->Line_23 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ FD ]
Line_16 $$ final CountDownLatch latch = new CountDownLatch(2)-->Line_26 $$ latch.await()[ FD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_7 $$ String query = "INSERT INTO %s.%s (key, name, val) VALUES (?, ?, ?)"[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_6 $$ String schema = "CREATE TABLE %s.%s (key ascii, name ascii, val ascii, val1 ascii, PRIMARY KEY (key, name))"[ CD ]
Line_10 $$ for (int i = 0; i < NB_PARTITIONS; i++) -->Line_11 $$ for (int j = 0; j < 100; j++) writer.addRow(String.format("key%d", i), String.format("col%d", j), "100")[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_18 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_3 $$ File dataDir = new File(tmpdir.getAbsolutePath() + File.separator + KEYSPACE1 + File.separator + CF_STANDARD2)[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_19 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_20 $$ assertTrue(partitions.size() > 0 && partitions.size() < NB_PARTITIONS)[ CD ]
Line_9 $$ int NB_PARTITIONS = 5000-->Line_25 $$ assertEquals(NB_PARTITIONS, partitions.size())[ FD ]
Line_3 $$ File dataDir = new File(tmpdir.getAbsolutePath() + File.separator + KEYSPACE1 + File.separator + CF_STANDARD2)-->Line_5 $$ assertTrue(dataDir.listFiles().length == 0)[ FD ]
Line_17 $$ SSTableLoader loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))-->Line_18 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ FD ]
Line_13 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD2)-->Line_19 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())[ FD ]
Line_8 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD2)).using(String.format(query, KEYSPACE1, CF_STANDARD2)).withBufferSizeInMB(1).build()-->Line_21 $$ writer.close()[ FD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_13 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD2)[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_16 $$ final CountDownLatch latch = new CountDownLatch(2)[ CD ]
Line_19 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())-->Line_24 $$ partitions = Util.getAll(Util.cmd(Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD2)).build())[ FD ]
Line_3 $$ File dataDir = new File(tmpdir.getAbsolutePath() + File.separator + KEYSPACE1 + File.separator + CF_STANDARD2)-->Line_15 $$ assertTrue(dataDir.listFiles().length > 0)[ FD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_17 $$ SSTableLoader loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))[ CD ]
Line_8 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD2)).using(String.format(query, KEYSPACE1, CF_STANDARD2)).withBufferSizeInMB(1).build()-->Line_11 $$ writer.addRow(String.format("key%d", i), String.format("col%d", j), "100")[ FD ]
Line_19 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())-->Line_20 $$ assertTrue(partitions.size() > 0 && partitions.size() < NB_PARTITIONS)[ FD ]
Line_9 $$ int NB_PARTITIONS = 5000-->Line_10 $$ for (int i = 0; i < NB_PARTITIONS; i++) [ FD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_25 $$ assertEquals(NB_PARTITIONS, partitions.size())[ CD ]
Line_6 $$ String schema = "CREATE TABLE %s.%s (key ascii, name ascii, val ascii, val1 ascii, PRIMARY KEY (key, name))"-->Line_8 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD2)).using(String.format(query, KEYSPACE1, CF_STANDARD2)).withBufferSizeInMB(1).build()[ FD ]
Line_16 $$ final CountDownLatch latch = new CountDownLatch(2)-->Line_23 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ FD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_26 $$ latch.await()[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_22 $$ loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_15 $$ assertTrue(dataDir.listFiles().length > 0)[ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_10 $$ for (int i = 0; i < NB_PARTITIONS; i++) [ CD ]
Line_2 $$ public void testLoadingIncompleteSSTable() throws Exception -->Line_14 $$ cfs.forceBlockingFlush()[ CD ]
Line_19 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())-->Line_25 $$ assertEquals(NB_PARTITIONS, partitions.size())[ FD ]
