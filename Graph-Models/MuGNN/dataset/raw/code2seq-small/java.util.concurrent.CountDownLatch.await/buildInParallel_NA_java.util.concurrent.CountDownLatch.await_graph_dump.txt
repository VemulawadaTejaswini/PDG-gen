Line_3 $$ List<BuildChunkTask> initialTasks = new ArrayList<BuildChunkTask>()-->Line_9 $$ queueTasks(initialTasks)[ FD ]
Line_2 $$ public void buildInParallel() throws IOException, ProjectBuildException -->Line_15 $$ final Throwable throwable = myException.get()[ CD ]
Line_4 $$ for (BuildChunkTask task : myTasks) -->Line_5 $$ if (task.isReady()) [ FD ]
Line_5 $$ if (task.isReady()) -->Line_6 $$ initialTasks.add(task)[ CD ]
Line_2 $$ public void buildInParallel() throws IOException, ProjectBuildException -->Line_9 $$ queueTasks(initialTasks)[ CD ]
Line_15 $$ final Throwable throwable = myException.get()-->Line_18 $$ if (throwable != null) [ FD ]
Line_16 $$ if (throwable instanceof ProjectBuildException) -->Line_18 $$ if (throwable != null) [ CD ]
Line_2 $$ public void buildInParallel() throws IOException, ProjectBuildException -->Line_16 $$ if (throwable instanceof ProjectBuildException) [ CD ]
Line_4 $$ for (BuildChunkTask task : myTasks) -->Line_6 $$ initialTasks.add(task)[ FD ]
Line_3 $$ List<BuildChunkTask> initialTasks = new ArrayList<BuildChunkTask>()-->Line_6 $$ initialTasks.add(task)[ FD ]
Line_15 $$ final Throwable throwable = myException.get()-->Line_16 $$ if (throwable instanceof ProjectBuildException) [ FD ]
Line_2 $$ public void buildInParallel() throws IOException, ProjectBuildException -->Line_3 $$ List<BuildChunkTask> initialTasks = new ArrayList<BuildChunkTask>()[ CD ]
