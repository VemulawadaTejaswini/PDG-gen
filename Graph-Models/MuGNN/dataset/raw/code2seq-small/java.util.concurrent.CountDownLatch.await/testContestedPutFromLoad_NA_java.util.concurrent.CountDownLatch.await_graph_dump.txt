Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_54 $$ putter.start()[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_58 $$ assertThreadsRanCleanly()[ CD ]
Line_16 $$ SessionImplementor session = mockedSession()-->Line_17 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_13 $$ Thread blocker = new Thread("Blocker") -->Line_52 $$ blocker.start()[ FD ]
Line_16 $$ SessionImplementor session = mockedSession()-->Line_19 $$ doUpdate(localAccessStrategy, session, KEY, VALUE2, 2)[ FD ]
Line_12 $$ final CountDownLatch completionLatch = new CountDownLatch(1)-->Line_30 $$ completionLatch.countDown()[ FD ]
Line_6 $$ final Object KEY = TestingKeyFactory.generateEntityCacheKey(KEY_BASE + testCount++)-->Line_18 $$ assertEquals("Correct initial value", VALUE1, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_16 $$ SessionImplementor session = mockedSession()-->Line_39 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE1, session.getTimestamp(), 1)[ FD ]
Line_10 $$ final CountDownLatch pferCompletionLatch = new CountDownLatch(1)-->Line_55 $$ assertTrue("putFromLoadreturns promtly", pferCompletionLatch.await(10, TimeUnit.MILLISECONDS))[ FD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_7 $$ SessionImplementor s1 = mockedSession()[ CD ]
Line_11 $$ final CountDownLatch commitLatch = new CountDownLatch(1)-->Line_21 $$ commitLatch.await()[ FD ]
Line_11 $$ final CountDownLatch commitLatch = new CountDownLatch(1)-->Line_56 $$ commitLatch.countDown()[ FD ]
Line_9 $$ final CountDownLatch pferLatch = new CountDownLatch(1)-->Line_20 $$ pferLatch.countDown()[ FD ]
Line_6 $$ final Object KEY = TestingKeyFactory.generateEntityCacheKey(KEY_BASE + testCount++)-->Line_60 $$ assertEquals("Correct node1 value", VALUE2, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_56 $$ commitLatch.countDown()[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_9 $$ final CountDownLatch pferLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_55 $$ assertTrue("putFromLoadreturns promtly", pferCompletionLatch.await(10, TimeUnit.MILLISECONDS))[ CD ]
Line_16 $$ SessionImplementor session = mockedSession()-->Line_18 $$ assertEquals("Correct initial value", VALUE1, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_6 $$ final Object KEY = TestingKeyFactory.generateEntityCacheKey(KEY_BASE + testCount++)-->Line_39 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE1, session.getTimestamp(), 1)[ FD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_52 $$ blocker.start()[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_11 $$ final CountDownLatch commitLatch = new CountDownLatch(1)[ CD ]
Line_37 $$ SessionImplementor session = mockedSession()-->Line_60 $$ assertEquals("Correct node1 value", VALUE2, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_8 $$ localAccessStrategy.putFromLoad(s1, KEY, VALUE1, s1.getTimestamp(), 1)[ CD ]
Line_9 $$ final CountDownLatch pferLatch = new CountDownLatch(1)-->Line_53 $$ assertTrue("Active tx has done an update", pferLatch.await(1, TimeUnit.SECONDS))[ FD ]
Line_37 $$ SessionImplementor session = mockedSession()-->Line_39 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE1, session.getTimestamp(), 1)[ FD ]
Line_37 $$ SessionImplementor session = mockedSession()-->Line_38 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_59 $$ SessionImplementor session = mockedSession()[ CD ]
Line_10 $$ final CountDownLatch pferCompletionLatch = new CountDownLatch(1)-->Line_48 $$ pferCompletionLatch.countDown()[ FD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_13 $$ Thread blocker = new Thread("Blocker") [ CD ]
Line_16 $$ SessionImplementor session = mockedSession()-->Line_60 $$ assertEquals("Correct node1 value", VALUE2, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_6 $$ final Object KEY = TestingKeyFactory.generateEntityCacheKey(KEY_BASE + testCount++)[ CD ]
Line_7 $$ SessionImplementor s1 = mockedSession()-->Line_8 $$ localAccessStrategy.putFromLoad(s1, KEY, VALUE1, s1.getTimestamp(), 1)[ FD ]
Line_6 $$ final Object KEY = TestingKeyFactory.generateEntityCacheKey(KEY_BASE + testCount++)-->Line_19 $$ doUpdate(localAccessStrategy, session, KEY, VALUE2, 2)[ FD ]
Line_16 $$ SessionImplementor session = mockedSession()-->Line_38 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_3 $$ if (accessType == AccessType.READ_ONLY) -->Line_4 $$ return[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_3 $$ if (accessType == AccessType.READ_ONLY) [ CD ]
Line_12 $$ final CountDownLatch completionLatch = new CountDownLatch(1)-->Line_57 $$ assertTrue("Threads completed", completionLatch.await(1, TimeUnit.SECONDS))[ FD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_10 $$ final CountDownLatch pferCompletionLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_53 $$ assertTrue("Active tx has done an update", pferLatch.await(1, TimeUnit.SECONDS))[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_60 $$ assertEquals("Correct node1 value", VALUE2, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_57 $$ assertTrue("Threads completed", completionLatch.await(1, TimeUnit.SECONDS))[ CD ]
Line_2 $$ public void testContestedPutFromLoad() throws Exception -->Line_12 $$ final CountDownLatch completionLatch = new CountDownLatch(1)[ CD ]
Line_6 $$ final Object KEY = TestingKeyFactory.generateEntityCacheKey(KEY_BASE + testCount++)-->Line_8 $$ localAccessStrategy.putFromLoad(s1, KEY, VALUE1, s1.getTimestamp(), 1)[ FD ]
