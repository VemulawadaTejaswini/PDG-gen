Line_4 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_48 $$ artifacts = directArtifacts[ FD ]
Line_48 $$ artifacts = directArtifacts-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_24 $$ if (request.isResolveRoot()) [ FD ]
Line_47 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_48 $$ artifacts = directArtifacts[ CD ]
Line_47 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_60 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())[ CD ]
Line_46 $$ Set<Artifact> directArtifacts = resolutionGroup.getArtifacts()-->Line_48 $$ artifacts = directArtifacts[ FD ]
Line_3 $$ Artifact rootArtifact = request.getArtifact()-->Line_27 $$ resolve(rootArtifact, request.getRemoteRepositories(), session)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_3 $$ Artifact rootArtifact = request.getArtifact()[ FD ]
Line_55 $$ String conflictId = artifact.getDependencyConflictId()-->Line_56 $$ if (!mergedArtifacts.containsKey(conflictId)) [ FD ]
Line_47 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_52 $$ allArtifacts.addAll(directArtifacts)[ CD ]
Line_42 $$ ResolutionGroup resolutionGroup = source.retrieve(metadataRequest)-->Line_46 $$ Set<Artifact> directArtifacts = resolutionGroup.getArtifacts()[ FD ]
Line_44 $$ managedVersions = resolutionGroup.getManagedVersions()-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_46 $$ Set<Artifact> directArtifacts = resolutionGroup.getArtifacts()-->Line_52 $$ allArtifacts.addAll(directArtifacts)[ FD ]
Line_62 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_66 $$ collectionRequest.setRemoteRepositories(resolutionGroup.getResolutionRepositories())[ FD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_29 $$ result.addErrorArtifactException(e)[ FD ]
Line_50 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_104 $$ result.setArtifacts(allArtifacts)[ FD ]
Line_56 $$ if (!mergedArtifacts.containsKey(conflictId)) -->Line_57 $$ mergedArtifacts.put(conflictId, artifact)[ CD ]
Line_38 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)-->Line_39 $$ metadataRequest.setArtifact(rootArtifact)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_100 $$ if (request.isResolveRoot()) [ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_5 $$ Map<String, Artifact> managedVersions = request.getManagedVersionMap()[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_4 $$ Set<Artifact> artifacts = request.getArtifactDependencies()[ FD ]
Line_37 $$ if (request.isResolveTransitively()) -->Line_39 $$ metadataRequest.setArtifact(rootArtifact)[ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_9 $$ RepositorySystemSession session = getSession(request.getLocalRepository())[ CD ]
Line_36 $$ ArtifactResolutionRequest collectionRequest = request-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_32 $$ result.addMissingArtifact(request.getArtifact())[ FD ]
Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)-->Line_83 $$ if (result.getArtifactResolutionNodes() != null) [ FD ]
Line_36 $$ ArtifactResolutionRequest collectionRequest = request-->Line_66 $$ collectionRequest.setRemoteRepositories(resolutionGroup.getResolutionRepositories())[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_80 $$ if (result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() || result.hasCircularDependencyExceptions()) [ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ CD ]
Line_5 $$ Map<String, Artifact> managedVersions = request.getManagedVersionMap()-->Line_44 $$ managedVersions = resolutionGroup.getManagedVersions()[ FD ]
Line_6 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_83 $$ if (result.getArtifactResolutionNodes() != null) [ CD ]
Line_54 $$ for (Artifact artifact : allArtifacts) -->Line_88 $$ if (resolutionFilter == null || resolutionFilter.include(artifact)) [ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_3 $$ Artifact rootArtifact = request.getArtifact()[ CD ]
Line_16 $$ if (listeners == null) -->Line_17 $$ listeners = new ArrayList<ResolutionListener>()[ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_36 $$ ArtifactResolutionRequest collectionRequest = request[ CD ]
Line_86 $$ for (ResolutionNode node : result.getArtifactResolutionNodes()) -->Line_87 $$ Artifact artifact = node.getArtifact()[ FD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_104 $$ result.setArtifacts(allArtifacts)[ FD ]
Line_36 $$ ArtifactResolutionRequest collectionRequest = request-->Line_63 $$ collectionRequest.setServers(request.getServers())[ FD ]
Line_6 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_17 $$ listeners = new ArrayList<ResolutionListener>()[ FD ]
Line_88 $$ if (resolutionFilter == null || resolutionFilter.include(artifact)) -->Line_89 $$ executor.execute(new ResolveTask(classLoader, latch, artifact, session, node.getRemoteRepositories(), result))[ CD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_69 $$ result.addMetadataResolutionException(are)[ FD ]
Line_17 $$ listeners = new ArrayList<ResolutionListener>()-->Line_21 $$ listeners.add(new WarningResolutionListener(logger))[ FD ]
Line_38 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)-->Line_40 $$ metadataRequest.setResolveManagedVersions(managedVersions == null)[ FD ]
Line_17 $$ listeners = new ArrayList<ResolutionListener>()-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_17 $$ listeners = new ArrayList<ResolutionListener>()-->Line_19 $$ listeners.add(new DebugResolutionListener(logger))[ FD ]
Line_50 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_103 $$ allArtifacts.addAll(result.getArtifacts())[ FD ]
Line_42 $$ ResolutionGroup resolutionGroup = source.retrieve(metadataRequest)-->Line_66 $$ collectionRequest.setRemoteRepositories(resolutionGroup.getResolutionRepositories())[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_7 $$ ArtifactFilter collectionFilter = request.getCollectionFilter()[ FD ]
Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)-->Line_85 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())[ FD ]
Line_5 $$ Map<String, Artifact> managedVersions = request.getManagedVersionMap()-->Line_43 $$ if (managedVersions == null) [ FD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_97 $$ result.addErrorArtifactException(new ArtifactResolutionException("Resolution interrupted", rootArtifact, e))[ FD ]
Line_36 $$ ArtifactResolutionRequest collectionRequest = request-->Line_65 $$ collectionRequest.setProxies(request.getProxies())[ FD ]
Line_53 $$ Map<String, Artifact> mergedArtifacts = new LinkedHashMap<String, Artifact>()-->Line_60 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_106 $$ return result[ CD ]
Line_38 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)-->Line_68 $$ ArtifactResolutionException are = new ArtifactResolutionException("Unable to get dependency information for " + rootArtifact.getId() + ": " + e.getMessage(), rootArtifact, metadataRequest.getRemoteRepositories(), e)[ FD ]
Line_83 $$ if (result.getArtifactResolutionNodes() != null) -->Line_85 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())[ CD ]
Line_36 $$ ArtifactResolutionRequest collectionRequest = request-->Line_62 $$ collectionRequest = new ArtifactResolutionRequest(request)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_16 $$ if (listeners == null) [ CD ]
Line_3 $$ Artifact rootArtifact = request.getArtifact()-->Line_68 $$ ArtifactResolutionException are = new ArtifactResolutionException("Unable to get dependency information for " + rootArtifact.getId() + ": " + e.getMessage(), rootArtifact, metadataRequest.getRemoteRepositories(), e)[ FD ]
Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)-->Line_104 $$ result.setArtifacts(allArtifacts)[ FD ]
Line_43 $$ if (managedVersions == null) -->Line_44 $$ managedVersions = resolutionGroup.getManagedVersions()[ CD ]
Line_53 $$ Map<String, Artifact> mergedArtifacts = new LinkedHashMap<String, Artifact>()-->Line_56 $$ if (!mergedArtifacts.containsKey(conflictId)) [ FD ]
Line_73 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_77 $$ return result[ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_9 $$ RepositorySystemSession session = getSession(request.getLocalRepository())[ FD ]
Line_4 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_55 $$ String conflictId = artifact.getDependencyConflictId()-->Line_57 $$ mergedArtifacts.put(conflictId, artifact)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_8 $$ ArtifactFilter resolutionFilter = request.getResolutionFilter()[ FD ]
Line_60 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())-->Line_73 $$ if (artifacts == null || artifacts.isEmpty()) [ FD ]
Line_18 $$ if (logger.isDebugEnabled()) -->Line_19 $$ listeners.add(new DebugResolutionListener(logger))[ CD ]
Line_47 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_50 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()[ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_6 $$ List<ResolutionListener> listeners = request.getListeners()[ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_64 $$ collectionRequest.setMirrors(request.getMirrors())[ FD ]
Line_60 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_100 $$ if (request.isResolveRoot()) -->Line_103 $$ allArtifacts.addAll(result.getArtifacts())[ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_65 $$ collectionRequest.setProxies(request.getProxies())[ FD ]
Line_4 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_51 $$ allArtifacts.addAll(artifacts)[ FD ]
Line_42 $$ ResolutionGroup resolutionGroup = source.retrieve(metadataRequest)-->Line_44 $$ managedVersions = resolutionGroup.getManagedVersions()[ FD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_6 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_19 $$ listeners.add(new DebugResolutionListener(logger))[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_32 $$ result.addMissingArtifact(request.getArtifact())[ FD ]
Line_38 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)-->Line_42 $$ ResolutionGroup resolutionGroup = source.retrieve(metadataRequest)[ FD ]
Line_37 $$ if (request.isResolveTransitively()) -->Line_38 $$ MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request)[ CD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_103 $$ allArtifacts.addAll(result.getArtifacts())[ FD ]
Line_16 $$ if (listeners == null) -->Line_18 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_37 $$ if (request.isResolveTransitively()) [ FD ]
Line_6 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_21 $$ listeners.add(new WarningResolutionListener(logger))[ FD ]
Line_100 $$ if (request.isResolveRoot()) -->Line_104 $$ result.setArtifacts(allArtifacts)[ CD ]
Line_68 $$ ArtifactResolutionException are = new ArtifactResolutionException("Unable to get dependency information for " + rootArtifact.getId() + ": " + e.getMessage(), rootArtifact, metadataRequest.getRemoteRepositories(), e)-->Line_69 $$ result.addMetadataResolutionException(are)[ FD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_80 $$ if (result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() || result.hasCircularDependencyExceptions()) [ FD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_85 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())[ FD ]
Line_88 $$ if (resolutionFilter == null || resolutionFilter.include(artifact)) -->Line_91 $$ latch.countDown()[ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_6 $$ List<ResolutionListener> listeners = request.getListeners()[ FD ]
Line_100 $$ if (request.isResolveRoot()) -->Line_102 $$ allArtifacts.add(rootArtifact)[ CD ]
Line_53 $$ Map<String, Artifact> mergedArtifacts = new LinkedHashMap<String, Artifact>()-->Line_57 $$ mergedArtifacts.put(conflictId, artifact)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_4 $$ Set<Artifact> artifacts = request.getArtifactDependencies()[ CD ]
Line_48 $$ artifacts = directArtifacts-->Line_60 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())[ FD ]
Line_3 $$ Artifact rootArtifact = request.getArtifact()-->Line_102 $$ allArtifacts.add(rootArtifact)[ FD ]
Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)-->Line_80 $$ if (result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() || result.hasCircularDependencyExceptions()) [ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_100 $$ if (request.isResolveRoot()) [ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_24 $$ if (request.isResolveRoot()) [ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_63 $$ collectionRequest.setServers(request.getServers())[ FD ]
Line_50 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_52 $$ allArtifacts.addAll(directArtifacts)[ FD ]
Line_3 $$ Artifact rootArtifact = request.getArtifact()-->Line_39 $$ metadataRequest.setArtifact(rootArtifact)[ FD ]
Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)-->Line_86 $$ for (ResolutionNode node : result.getArtifactResolutionNodes()) [ FD ]
Line_62 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_63 $$ collectionRequest.setServers(request.getServers())[ FD ]
Line_48 $$ artifacts = directArtifacts-->Line_73 $$ if (artifacts == null || artifacts.isEmpty()) [ FD ]
Line_47 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_51 $$ allArtifacts.addAll(artifacts)[ CD ]
Line_6 $$ List<ResolutionListener> listeners = request.getListeners()-->Line_16 $$ if (listeners == null) [ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_37 $$ if (request.isResolveTransitively()) [ CD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_75 $$ result.addArtifact(rootArtifact)[ FD ]
Line_62 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_64 $$ collectionRequest.setMirrors(request.getMirrors())[ FD ]
Line_47 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_53 $$ Map<String, Artifact> mergedArtifacts = new LinkedHashMap<String, Artifact>()[ CD ]
Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)-->Line_97 $$ result.addErrorArtifactException(new ArtifactResolutionException("Resolution interrupted", rootArtifact, e))[ FD ]
Line_86 $$ for (ResolutionNode node : result.getArtifactResolutionNodes()) -->Line_89 $$ executor.execute(new ResolveTask(classLoader, latch, artifact, session, node.getRemoteRepositories(), result))[ FD ]
Line_4 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_60 $$ artifacts = new LinkedHashSet<Artifact>(mergedArtifacts.values())[ FD ]
Line_3 $$ Artifact rootArtifact = request.getArtifact()-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_73 $$ if (artifacts == null || artifacts.isEmpty()) [ CD ]
Line_80 $$ if (result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() || result.hasCircularDependencyExceptions()) -->Line_81 $$ return result[ CD ]
Line_62 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_65 $$ collectionRequest.setProxies(request.getProxies())[ FD ]
Line_4 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_73 $$ if (artifacts == null || artifacts.isEmpty()) [ FD ]
Line_54 $$ for (Artifact artifact : allArtifacts) -->Line_55 $$ String conflictId = artifact.getDependencyConflictId()[ FD ]
Line_54 $$ for (Artifact artifact : allArtifacts) -->Line_57 $$ mergedArtifacts.put(conflictId, artifact)[ FD ]
Line_83 $$ if (result.getArtifactResolutionNodes() != null) -->Line_84 $$ ClassLoader classLoader = Thread.currentThread().getContextClassLoader()[ CD ]
Line_73 $$ if (artifacts == null || artifacts.isEmpty()) -->Line_74 $$ if (request.isResolveRoot()) [ CD ]
Line_16 $$ if (listeners == null) -->Line_21 $$ listeners.add(new WarningResolutionListener(logger))[ CD ]
Line_8 $$ ArtifactFilter resolutionFilter = request.getResolutionFilter()-->Line_88 $$ if (resolutionFilter == null || resolutionFilter.include(artifact)) [ FD ]
Line_85 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())-->Line_95 $$ latch.await()[ FD ]
Line_4 $$ Set<Artifact> artifacts = request.getArtifactDependencies()-->Line_47 $$ if (artifacts == null || artifacts.isEmpty()) [ FD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_83 $$ if (result.getArtifactResolutionNodes() != null) [ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_8 $$ ArtifactFilter resolutionFilter = request.getResolutionFilter()[ CD ]
Line_9 $$ RepositorySystemSession session = getSession(request.getLocalRepository())-->Line_27 $$ resolve(rootArtifact, request.getRemoteRepositories(), session)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_5 $$ Map<String, Artifact> managedVersions = request.getManagedVersionMap()[ CD ]
Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()-->Line_86 $$ for (ResolutionNode node : result.getArtifactResolutionNodes()) [ FD ]
Line_5 $$ Map<String, Artifact> managedVersions = request.getManagedVersionMap()-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_62 $$ collectionRequest = new ArtifactResolutionRequest(request)-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)-->Line_103 $$ allArtifacts.addAll(result.getArtifacts())[ FD ]
Line_50 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_102 $$ allArtifacts.add(rootArtifact)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_7 $$ ArtifactFilter collectionFilter = request.getCollectionFilter()[ CD ]
Line_37 $$ if (request.isResolveTransitively()) -->Line_40 $$ metadataRequest.setResolveManagedVersions(managedVersions == null)[ CD ]
Line_85 $$ CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size())-->Line_91 $$ latch.countDown()[ FD ]
Line_48 $$ artifacts = directArtifacts-->Line_51 $$ allArtifacts.addAll(artifacts)[ FD ]
Line_50 $$ List<Artifact> allArtifacts = new ArrayList<Artifact>()-->Line_51 $$ allArtifacts.addAll(artifacts)[ FD ]
Line_36 $$ ArtifactResolutionRequest collectionRequest = request-->Line_64 $$ collectionRequest.setMirrors(request.getMirrors())[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_27 $$ resolve(rootArtifact, request.getRemoteRepositories(), session)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_10 $$ if (source == null) [ CD ]
Line_74 $$ if (request.isResolveRoot()) -->Line_75 $$ result.addArtifact(rootArtifact)[ CD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_74 $$ if (request.isResolveRoot()) [ FD ]
Line_3 $$ Artifact rootArtifact = request.getArtifact()-->Line_75 $$ result.addArtifact(rootArtifact)[ FD ]
Line_2 $$ public ArtifactResolutionResult resolve(ArtifactResolutionRequest request) -->Line_23 $$ ArtifactResolutionResult result = new ArtifactResolutionResult()[ CD ]
Line_7 $$ ArtifactFilter collectionFilter = request.getCollectionFilter()-->Line_79 $$ result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null)[ FD ]
