Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_27 $$ RestClusterStateAction clusterStateAction = internalCluster().getInstance(RestClusterStateAction.class)[ CD ]
Line_12 $$ getRepoAction.handleRequest(getRepoRequest, new RestChannel(getRepoRequest, true) -->Line_34 $$ assertThat(response.content().toUtf8(), containsString("notsecretusername"))[ FD ]
Line_31 $$ clusterStateAction.handleRequest(clusterStateRequest, new RestChannel(clusterStateRequest, true) -->Line_35 $$ assertThat(response.content().toUtf8(), not(containsString("verysecretpassword")))[ FD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_31 $$ clusterStateAction.handleRequest(clusterStateRequest, new RestChannel(clusterStateRequest, true) [ CD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_5 $$ internalCluster().startNodesAsync(2, nodeSettings).get()[ CD ]
Line_10 $$ final CountDownLatch getRepoLatch = new CountDownLatch(1)-->Line_20 $$ getRepoLatch.countDown()[ FD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_23 $$ assertTrue(getRepoLatch.await(1, TimeUnit.SECONDS))[ CD ]
Line_31 $$ clusterStateAction.handleRequest(clusterStateRequest, new RestChannel(clusterStateRequest, true) -->Line_34 $$ assertThat(response.content().toUtf8(), containsString("notsecretusername"))[ FD ]
Line_7 $$ RestGetRepositoriesAction getRepoAction = internalCluster().getInstance(RestGetRepositoriesAction.class)-->Line_12 $$ getRepoAction.handleRequest(getRepoRequest, new RestChannel(getRepoRequest, true) [ FD ]
Line_12 $$ getRepoAction.handleRequest(getRepoRequest, new RestChannel(getRepoRequest, true) -->Line_15 $$ assertThat(response.content().toUtf8(), containsString("notsecretusername"))[ FD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_42 $$ assertTrue(clusterStateLatch.await(1, TimeUnit.SECONDS))[ CD ]
Line_12 $$ getRepoAction.handleRequest(getRepoRequest, new RestChannel(getRepoRequest, true) -->Line_16 $$ assertThat(response.content().toUtf8(), not(containsString("verysecretpassword")))[ FD ]
Line_8 $$ RestRequest getRepoRequest = new FakeRestRequest()-->Line_9 $$ getRepoRequest.params().put("repository", "test-repo")[ FD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_8 $$ RestRequest getRepoRequest = new FakeRestRequest()[ CD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_12 $$ getRepoAction.handleRequest(getRepoRequest, new RestChannel(getRepoRequest, true) [ CD ]
Line_3 $$ Settings nodeSettings = settingsBuilder().put().build()-->Line_5 $$ internalCluster().startNodesAsync(2, nodeSettings).get()[ FD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_43 $$ if (clusterStateError.get() != null) [ CD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_6 $$ client().admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location", randomRepoPath()).put("secret.mock.username", "notsecretusername").put("secret.mock.password", "verysecretpassword")).get()[ CD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_9 $$ getRepoRequest.params().put("repository", "test-repo")[ CD ]
Line_11 $$ final AtomicReference<AssertionError> getRepoError = new AtomicReference()-->Line_18 $$ getRepoError.set(ex)[ FD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_11 $$ final AtomicReference<AssertionError> getRepoError = new AtomicReference()[ CD ]
Line_11 $$ final AtomicReference<AssertionError> getRepoError = new AtomicReference()-->Line_25 $$ throw getRepoError.get()[ FD ]
Line_12 $$ getRepoAction.handleRequest(getRepoRequest, new RestChannel(getRepoRequest, true) -->Line_35 $$ assertThat(response.content().toUtf8(), not(containsString("verysecretpassword")))[ FD ]
Line_11 $$ final AtomicReference<AssertionError> getRepoError = new AtomicReference()-->Line_24 $$ if (getRepoError.get() != null) [ FD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_10 $$ final CountDownLatch getRepoLatch = new CountDownLatch(1)[ CD ]
Line_12 $$ getRepoAction.handleRequest(getRepoRequest, new RestChannel(getRepoRequest, true) -->Line_20 $$ getRepoLatch.countDown()[ CD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_7 $$ RestGetRepositoriesAction getRepoAction = internalCluster().getInstance(RestGetRepositoriesAction.class)[ CD ]
Line_10 $$ final CountDownLatch getRepoLatch = new CountDownLatch(1)-->Line_23 $$ assertTrue(getRepoLatch.await(1, TimeUnit.SECONDS))[ FD ]
Line_31 $$ clusterStateAction.handleRequest(clusterStateRequest, new RestChannel(clusterStateRequest, true) -->Line_39 $$ clusterStateLatch.countDown()[ CD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_24 $$ if (getRepoError.get() != null) [ CD ]
Line_2 $$ public void testThatSensitiveRepositorySettingsAreNotExposed() throws Exception -->Line_3 $$ Settings nodeSettings = settingsBuilder().put().build()[ CD ]
Line_8 $$ RestRequest getRepoRequest = new FakeRestRequest()-->Line_12 $$ getRepoAction.handleRequest(getRepoRequest, new RestChannel(getRepoRequest, true) [ FD ]
