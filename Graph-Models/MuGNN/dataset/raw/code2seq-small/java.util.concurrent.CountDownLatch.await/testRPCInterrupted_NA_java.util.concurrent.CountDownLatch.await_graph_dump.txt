Line_12 $$ final AtomicReference<Throwable> error = new AtomicReference<Throwable>()-->Line_47 $$ assertTrue("rpc got exception " + error.get(), error.get() == null)[ FD ]
Line_16 $$ final TestProtocol proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_24 $$ proxy.slowPing(false)[ FD ]
Line_13 $$ Thread leaderThread = null-->Line_44 $$ leaderThread.interrupt()[ FD ]
Line_2 $$ public void testRPCInterrupted() throws IOException, InterruptedException -->Line_5 $$ server.start()[ CD ]
Line_11 $$ final AtomicBoolean leaderRunning = new AtomicBoolean(true)-->Line_21 $$ while (num == 0 || leaderRunning.get()) [ FD ]
Line_21 $$ while (num == 0 || leaderRunning.get()) -->Line_22 $$ proxy.slowPing(false)[ CD ]
Line_11 $$ final AtomicBoolean leaderRunning = new AtomicBoolean(true)-->Line_43 $$ while (leaderRunning.get()) [ FD ]
Line_43 $$ while (leaderRunning.get()) -->Line_44 $$ leaderThread.interrupt()[ CD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(numConcurrentRPC)-->Line_33 $$ latch.countDown()[ FD ]
Line_14 $$ for (int i = 0; i < numConcurrentRPC; i++) -->Line_17 $$ Thread rpcThread = new Thread(new Runnable() [ CD ]
Line_9 $$ final CyclicBarrier barrier = new CyclicBarrier(numConcurrentRPC)-->Line_20 $$ barrier.await()[ FD ]
Line_15 $$ final int num = i-->Line_26 $$ if (num == 0) [ FD ]
Line_11 $$ final AtomicBoolean leaderRunning = new AtomicBoolean(true)-->Line_27 $$ leaderRunning.set(false)[ FD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(numConcurrentRPC)-->Line_46 $$ latch.await()[ FD ]
Line_26 $$ if (num == 0) -->Line_29 $$ error.set(e)[ CD ]
Line_4 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(null).build()-->Line_49 $$ server.stop()[ FD ]
Line_7 $$ int numConcurrentRPC = 200-->Line_14 $$ for (int i = 0; i < numConcurrentRPC; i++) [ FD ]
Line_16 $$ final TestProtocol proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)-->Line_22 $$ proxy.slowPing(false)[ FD ]
Line_3 $$ final Configuration conf = new Configuration()-->Line_16 $$ final TestProtocol proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)[ FD ]
Line_14 $$ for (int i = 0; i < numConcurrentRPC; i++) -->Line_16 $$ final TestProtocol proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)[ CD ]
Line_4 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(null).build()-->Line_8 $$ InetSocketAddress addr = NetUtils.getConnectAddress(server)[ FD ]
Line_12 $$ final AtomicReference<Throwable> error = new AtomicReference<Throwable>()-->Line_29 $$ error.set(e)[ FD ]
Line_17 $$ Thread rpcThread = new Thread(new Runnable() -->Line_37 $$ rpcThread.start()[ FD ]
Line_2 $$ public void testRPCInterrupted() throws IOException, InterruptedException -->Line_4 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(null).build()[ CD ]
Line_4 $$ Server server = new RPC.Builder(conf).setProtocol(TestProtocol.class).setInstance(new TestImpl()).setBindAddress(ADDRESS).setPort(0).setNumHandlers(5).setVerbose(true).setSecretManager(null).build()-->Line_5 $$ server.start()[ FD ]
Line_2 $$ public void testRPCInterrupted() throws IOException, InterruptedException -->Line_3 $$ final Configuration conf = new Configuration()[ CD ]
Line_14 $$ for (int i = 0; i < numConcurrentRPC; i++) -->Line_37 $$ rpcThread.start()[ CD ]
Line_13 $$ Thread leaderThread = null-->Line_38 $$ if (leaderThread == null) [ FD ]
Line_14 $$ for (int i = 0; i < numConcurrentRPC; i++) -->Line_38 $$ if (leaderThread == null) [ CD ]
Line_14 $$ for (int i = 0; i < numConcurrentRPC; i++) -->Line_15 $$ final int num = i[ CD ]
Line_8 $$ InetSocketAddress addr = NetUtils.getConnectAddress(server)-->Line_16 $$ final TestProtocol proxy = RPC.getProxy(TestProtocol.class, TestProtocol.versionID, addr, conf)[ FD ]
Line_26 $$ if (num == 0) -->Line_27 $$ leaderRunning.set(false)[ CD ]
