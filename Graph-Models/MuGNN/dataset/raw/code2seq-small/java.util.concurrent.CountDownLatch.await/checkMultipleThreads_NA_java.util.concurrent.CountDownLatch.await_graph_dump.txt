Line_13 $$ List<ByteBuffer> toBeReturned = new ArrayList<ByteBuffer>(threadSizes.length)-->Line_25 $$ toBeReturned.add(buffer)[ FD ]
Line_2 $$ private void checkMultipleThreads(int threadCount, int numBuffersPerThread, final boolean returnImmediately, final int... sizes) throws InterruptedException -->Line_5 $$ for (int i = 0; i < threadCount; i++) [ CD ]
Line_5 $$ for (int i = 0; i < threadCount; i++) -->Line_7 $$ for (int j = 0; j < threadSizes.length; j++) threadSizes[j] = sizes[(i * numBuffersPerThread + j) % sizes.length][ CD ]
Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])-->Line_17 $$ assertEquals(threadSizes[j], buffer.capacity())[ FD ]
Line_5 $$ for (int i = 0; i < threadCount; i++) -->Line_41 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_42 $$ System.gc()[ CD ]
Line_22 $$ if (returnImmediately)-->Line_25 $$ toBeReturned.add(buffer)[ CD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_43 $$ Thread.sleep(100)[ CD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_20 $$ Thread.sleep(rand.nextInt(3))[ CD ]
Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])-->Line_23 $$ BufferPool.put(buffer)[ FD ]
Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])-->Line_25 $$ toBeReturned.add(buffer)[ FD ]
Line_2 $$ private void checkMultipleThreads(int threadCount, int numBuffersPerThread, final boolean returnImmediately, final int... sizes) throws InterruptedException -->Line_39 $$ finished.await()[ CD ]
Line_21 $$ for (int i = 0; i < 10; i++) assertEquals(i, buffer.getInt())-->Line_41 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_5 $$ for (int i = 0; i < threadCount; i++) -->Line_21 $$ assertEquals(i, buffer.getInt())[ FD ]
Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])-->Line_18 $$ buffer.putInt(i)[ FD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_19 $$ buffer.rewind()[ CD ]
Line_2 $$ private void checkMultipleThreads(int threadCount, int numBuffersPerThread, final boolean returnImmediately, final int... sizes) throws InterruptedException -->Line_5 $$ for (int i = 0; i < threadCount; i++) [ FD ]
Line_4 $$ final CountDownLatch finished = new CountDownLatch(threadCount)-->Line_34 $$ finished.countDown()[ FD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_16 $$ assertNotNull(buffer)[ CD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_17 $$ assertEquals(threadSizes[j], buffer.capacity())[ CD ]
Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])-->Line_19 $$ buffer.rewind()[ FD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])[ CD ]
Line_2 $$ private void checkMultipleThreads(int threadCount, int numBuffersPerThread, final boolean returnImmediately, final int... sizes) throws InterruptedException -->Line_40 $$ assertEquals(0, executorService.shutdownNow().size())[ CD ]
Line_7 $$ for (int j = 0; j < threadSizes.length; j++) threadSizes[j] = sizes[(i * numBuffersPerThread + j) % sizes.length]-->Line_14 $$ for (int j = 0; j < threadSizes.length; j++) [ FD ]
Line_2 $$ private void checkMultipleThreads(int threadCount, int numBuffersPerThread, final boolean returnImmediately, final int... sizes) throws InterruptedException -->Line_41 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_5 $$ for (int i = 0; i < threadCount; i++) -->Line_21 $$ for (int i = 0; i < 10; i++) assertEquals(i, buffer.getInt())[ FD ]
Line_5 $$ for (int i = 0; i < threadCount; i++) -->Line_6 $$ final int[] threadSizes = new int[numBuffersPerThread][ CD ]
Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])-->Line_16 $$ assertNotNull(buffer)[ FD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_22 $$ if (returnImmediately)[ CD ]
Line_5 $$ for (int i = 0; i < threadCount; i++) -->Line_18 $$ buffer.putInt(i)[ FD ]
Line_5 $$ for (int i = 0; i < threadCount; i++) -->Line_9 $$ executorService.submit(new Runnable() [ CD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_18 $$ for (int i = 0; i < 10; i++) buffer.putInt(i)[ CD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_26 $$ assertTrue(BufferPool.sizeInBytes() > 0)[ CD ]
Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])-->Line_21 $$ assertEquals(i, buffer.getInt())[ FD ]
Line_15 $$ ByteBuffer buffer = BufferPool.get(threadSizes[j])-->Line_29 $$ BufferPool.put(buffer)[ FD ]
Line_3 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)-->Line_9 $$ executorService.submit(new Runnable() [ FD ]
Line_18 $$ for (int i = 0; i < 10; i++) buffer.putInt(i)-->Line_41 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_2 $$ private void checkMultipleThreads(int threadCount, int numBuffersPerThread, final boolean returnImmediately, final int... sizes) throws InterruptedException -->Line_3 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)[ FD ]
Line_3 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)-->Line_40 $$ assertEquals(0, executorService.shutdownNow().size())[ FD ]
Line_2 $$ private void checkMultipleThreads(int threadCount, int numBuffersPerThread, final boolean returnImmediately, final int... sizes) throws InterruptedException -->Line_4 $$ final CountDownLatch finished = new CountDownLatch(threadCount)[ CD ]
Line_5 $$ for (int i = 0; i < threadCount; i++) -->Line_18 $$ for (int i = 0; i < 10; i++) buffer.putInt(i)[ FD ]
Line_4 $$ final CountDownLatch finished = new CountDownLatch(threadCount)-->Line_39 $$ finished.await()[ FD ]
Line_18 $$ for (int i = 0; i < 10; i++) buffer.putInt(i)-->Line_21 $$ assertEquals(i, buffer.getInt())[ FD ]
Line_18 $$ for (int i = 0; i < 10; i++) buffer.putInt(i)-->Line_21 $$ for (int i = 0; i < 10; i++) assertEquals(i, buffer.getInt())[ FD ]
Line_2 $$ private void checkMultipleThreads(int threadCount, int numBuffersPerThread, final boolean returnImmediately, final int... sizes) throws InterruptedException -->Line_3 $$ ExecutorService executorService = Executors.newFixedThreadPool(threadCount)[ CD ]
Line_22 $$ if (returnImmediately)-->Line_23 $$ BufferPool.put(buffer)[ CD ]
Line_14 $$ for (int j = 0; j < threadSizes.length; j++) -->Line_21 $$ for (int i = 0; i < 10; i++) assertEquals(i, buffer.getInt())[ CD ]
