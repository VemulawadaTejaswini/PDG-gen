Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)-->Line_10 $$ boolean wasCanceled = future.cancel(true)[ FD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_5 $$ final CountDownLatch latch2 = new CountDownLatch(1)[ CD ]
Line_4 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_7 $$ latch.await(WAIT_TIME_S, TimeUnit.SECONDS)[ FD ]
Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)-->Line_16 $$ String result = future.get()[ FD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_4 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_8 $$ Assert.assertFalse(future.isDone())[ CD ]
Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)-->Line_9 $$ Assert.assertFalse(future.isCancelled())[ FD ]
Line_5 $$ final CountDownLatch latch2 = new CountDownLatch(1)-->Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)[ FD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)[ CD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_15 $$ latch2.countDown()[ CD ]
Line_16 $$ String result = future.get()-->Line_18 $$ Assert.assertEquals("false;true", result)[ FD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_18 $$ Assert.assertEquals("false;true", result)[ CD ]
Line_4 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)[ FD ]
Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)-->Line_13 $$ Assert.assertTrue("isCancelled() was expected to return true after a call to cancel() returned true", future.isCancelled())[ FD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_11 $$ if (wasCanceled) [ CD ]
Line_5 $$ final CountDownLatch latch2 = new CountDownLatch(1)-->Line_15 $$ latch2.countDown()[ FD ]
Line_10 $$ boolean wasCanceled = future.cancel(true)-->Line_17 $$ Assert.assertFalse(wasCanceled)[ FD ]
Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)-->Line_12 $$ Assert.assertTrue("isDone() was expected to return true after a call to cancel() with mayBeInterrupting = true, returned true", future.isDone())[ FD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_3 $$ AsyncBean bean = lookup(AsyncBean.class)[ CD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_7 $$ latch.await(WAIT_TIME_S, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_16 $$ String result = future.get()[ CD ]
Line_3 $$ AsyncBean bean = lookup(AsyncBean.class)-->Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)[ FD ]
Line_6 $$ final Future<String> future = bean.asyncCancelMethod(latch, latch2)-->Line_8 $$ Assert.assertFalse(future.isDone())[ FD ]
Line_11 $$ if (wasCanceled) -->Line_12 $$ Assert.assertTrue("isDone() was expected to return true after a call to cancel() with mayBeInterrupting = true, returned true", future.isDone())[ CD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_17 $$ Assert.assertFalse(wasCanceled)[ CD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_9 $$ Assert.assertFalse(future.isCancelled())[ CD ]
Line_2 $$ public void testCancelAsyncMethod() throws Exception -->Line_10 $$ boolean wasCanceled = future.cancel(true)[ CD ]
Line_11 $$ if (wasCanceled) -->Line_13 $$ Assert.assertTrue("isCancelled() was expected to return true after a call to cancel() returned true", future.isCancelled())[ CD ]
