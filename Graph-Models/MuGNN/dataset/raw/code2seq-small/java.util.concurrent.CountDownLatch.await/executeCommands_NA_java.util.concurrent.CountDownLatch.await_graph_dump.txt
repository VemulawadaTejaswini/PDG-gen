Line_8 $$ List<ListenableFuture<?>> futures = new ArrayList(parallelism)-->Line_14 $$ ListenableFuture<List<Object>> allFutures = Futures.allAsList(futures)[ FD ]
Line_7 $$ BlockingQueue<String> queue = new ArrayBlockingQueue(queries.size(), false, queries)-->Line_12 $$ futures.add(runner.execute(queue, remainingQueries))[ FD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_6 $$ CountDownLatch remainingQueries = new CountDownLatch(queries.size())[ CD ]
Line_6 $$ CountDownLatch remainingQueries = new CountDownLatch(queries.size())-->Line_24 $$ remainingQueries.await()[ FD ]
Line_8 $$ List<ListenableFuture<?>> futures = new ArrayList(parallelism)-->Line_12 $$ futures.add(runner.execute(queue, remainingQueries))[ FD ]
Line_10 $$ for (int i = 0; i < parallelism; i++) -->Line_11 $$ QueryRunner runner = runners.get(i)[ FD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_4 $$ checkArgument(parallelism <= runners.size(), "parallelism is greater than maxParallelism")[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_10 $$ for (int i = 0; i < parallelism; i++) [ CD ]
Line_15 $$ Futures.addCallback(allFutures, new FutureCallback<List<Object>>() -->Line_20 $$ t.printStackTrace(System.err)[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_6 $$ CountDownLatch remainingQueries = new CountDownLatch(queries.size())[ FD ]
Line_15 $$ Futures.addCallback(allFutures, new FutureCallback<List<Object>>() -->Line_20 $$ t.printStackTrace(System.err)[ FD ]
Line_11 $$ QueryRunner runner = runners.get(i)-->Line_12 $$ futures.add(runner.execute(queue, remainingQueries))[ FD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_7 $$ BlockingQueue<String> queue = new ArrayBlockingQueue(queries.size(), false, queries)[ FD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_27 $$ return executionTime[ CD ]
Line_10 $$ for (int i = 0; i < parallelism; i++) -->Line_12 $$ futures.add(runner.execute(queue, remainingQueries))[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_26 $$ allFutures.get()[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_25 $$ Duration executionTime = Duration.nanosSince(start)[ CD ]
Line_15 $$ Futures.addCallback(allFutures, new FutureCallback<List<Object>>() -->Line_21 $$ System.exit(1)[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_9 $$ long start = System.nanoTime()[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_8 $$ List<ListenableFuture<?>> futures = new ArrayList(parallelism)[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_5 $$ requireNonNull(queries, "queries is null")[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_5 $$ requireNonNull(queries, "queries is null")[ FD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_3 $$ checkArgument(parallelism >= 0, "parallelism is negative")[ CD ]
Line_6 $$ CountDownLatch remainingQueries = new CountDownLatch(queries.size())-->Line_12 $$ futures.add(runner.execute(queue, remainingQueries))[ FD ]
Line_14 $$ ListenableFuture<List<Object>> allFutures = Futures.allAsList(futures)-->Line_15 $$ Futures.addCallback(allFutures, new FutureCallback<List<Object>>() [ FD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_14 $$ ListenableFuture<List<Object>> allFutures = Futures.allAsList(futures)[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_10 $$ for (int i = 0; i < parallelism; i++) [ FD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_7 $$ BlockingQueue<String> queue = new ArrayBlockingQueue(queries.size(), false, queries)[ CD ]
Line_10 $$ for (int i = 0; i < parallelism; i++) -->Line_11 $$ QueryRunner runner = runners.get(i)[ CD ]
Line_14 $$ ListenableFuture<List<Object>> allFutures = Futures.allAsList(futures)-->Line_26 $$ allFutures.get()[ FD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_24 $$ remainingQueries.await()[ CD ]
Line_2 $$ public Duration executeCommands(int parallelism, List<String> queries) throws Exception -->Line_15 $$ Futures.addCallback(allFutures, new FutureCallback<List<Object>>() [ CD ]
Line_15 $$ Futures.addCallback(allFutures, new FutureCallback<List<Object>>() -->Line_19 $$ System.err.println("Run failed")[ CD ]
Line_9 $$ long start = System.nanoTime()-->Line_25 $$ Duration executionTime = Duration.nanosSince(start)[ FD ]
