Line_10 $$ ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() -->Line_22 $$ iteration.transportClientNodesService.execute(new TransportClientNodesService.NodeListenerCallback<TestResponse>() [ FD ]
Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() -->Line_53 $$ assertThat(response.get(), nullValue())[ FD ]
Line_8 $$ final AtomicReference<Throwable> finalFailure = new AtomicReference()-->Line_48 $$ assertThat(finalFailure.get(), nullValue())[ FD ]
Line_54 $$ if (preSendFailures.get() == 0 && iteration.transport.failures() == 0) -->Line_55 $$ assertThat(finalFailure.get(), instanceOf(NoNodeAvailableException.class))[ CD ]
Line_2 $$ public void testListenerFailures() throws InterruptedException -->Line_4 $$ for (int i = 0; i < iters; i++) [ CD ]
Line_21 $$ final AtomicInteger preSendFailures = new AtomicInteger()-->Line_45 $$ assertThat(preSendFailures.get() + iteration.transport.failures() + iteration.transport.successes(), lessThanOrEqualTo(1))[ FD ]
Line_22 $$ iteration.transportClientNodesService.execute(new TransportClientNodesService.NodeListenerCallback<TestResponse>() -->Line_36 $$ retryListener.onFailure(exp)[ FD ]
Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() -->Line_30 $$ return new TestResponse()[ CD ]
Line_46 $$ if (iteration.transport.successes() == 1) -->Line_53 $$ assertThat(response.get(), nullValue())[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_13 $$ latch.countDown()[ FD ]
Line_9 $$ final AtomicReference<TestResponse> response = new AtomicReference()-->Line_49 $$ assertThat(response.get(), notNullValue())[ FD ]
Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() -->Line_36 $$ retryListener.onFailure(exp)[ FD ]
Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() -->Line_33 $$ retryListener.onResponse(response)[ CD ]
Line_46 $$ if (iteration.transport.successes() == 1) -->Line_47 $$ assertThat(finalFailures.get(), equalTo(0))[ CD ]
Line_8 $$ final AtomicReference<Throwable> finalFailure = new AtomicReference()-->Line_52 $$ assertThat(finalFailure.get(), notNullValue())[ FD ]
Line_46 $$ if (iteration.transport.successes() == 1) -->Line_52 $$ assertThat(finalFailure.get(), notNullValue())[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_18 $$ latch.countDown()[ FD ]
Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() -->Line_36 $$ retryListener.onFailure(exp)[ CD ]
Line_46 $$ if (iteration.transport.successes() == 1) -->Line_54 $$ if (preSendFailures.get() == 0 && iteration.transport.failures() == 0) [ CD ]
Line_9 $$ final AtomicReference<TestResponse> response = new AtomicReference()-->Line_33 $$ retryListener.onResponse(response)[ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_44 $$ assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true))[ FD ]
Line_3 $$ int iters = iterations(10, 100)-->Line_4 $$ for (int i = 0; i < iters; i++) [ FD ]
Line_10 $$ ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() -->Line_17 $$ finalFailure.set(e)[ FD ]
Line_22 $$ iteration.transportClientNodesService.execute(new TransportClientNodesService.NodeListenerCallback<TestResponse>() -->Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() [ CD ]
Line_46 $$ if (iteration.transport.successes() == 1) -->Line_49 $$ assertThat(response.get(), notNullValue())[ CD ]
Line_7 $$ final AtomicInteger finalFailures = new AtomicInteger()-->Line_16 $$ finalFailures.incrementAndGet()[ FD ]
Line_10 $$ ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() -->Line_12 $$ response.set(testResponse)[ FD ]
Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() -->Line_39 $$ return randomBoolean() ? ThreadPool.Names.SAME : ThreadPool.Names.GENERIC[ CD ]
Line_22 $$ iteration.transportClientNodesService.execute(new TransportClientNodesService.NodeListenerCallback<TestResponse>() -->Line_33 $$ retryListener.onResponse(response)[ FD ]
Line_2 $$ public void testListenerFailures() throws InterruptedException -->Line_3 $$ int iters = iterations(10, 100)[ CD ]
Line_10 $$ ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() -->Line_17 $$ finalFailure.set(e)[ CD ]
Line_7 $$ final AtomicInteger finalFailures = new AtomicInteger()-->Line_51 $$ assertThat(finalFailures.get(), equalTo(1))[ FD ]
Line_8 $$ final AtomicReference<Throwable> finalFailure = new AtomicReference()-->Line_17 $$ finalFailure.set(e)[ FD ]
Line_21 $$ final AtomicInteger preSendFailures = new AtomicInteger()-->Line_54 $$ if (preSendFailures.get() == 0 && iteration.transport.failures() == 0) [ FD ]
Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() -->Line_33 $$ retryListener.onResponse(response)[ FD ]
Line_22 $$ iteration.transportClientNodesService.execute(new TransportClientNodesService.NodeListenerCallback<TestResponse>() -->Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() [ FD ]
Line_9 $$ final AtomicReference<TestResponse> response = new AtomicReference()-->Line_12 $$ response.set(testResponse)[ FD ]
Line_28 $$ iteration.transportService.sendRequest(node, "action", new TestRequest(), TransportRequestOptions.EMPTY, new BaseTransportResponseHandler<TestResponse>() -->Line_49 $$ assertThat(response.get(), notNullValue())[ FD ]
Line_9 $$ final AtomicReference<TestResponse> response = new AtomicReference()-->Line_53 $$ assertThat(response.get(), nullValue())[ FD ]
Line_10 $$ ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() -->Line_16 $$ finalFailures.incrementAndGet()[ CD ]
Line_21 $$ final AtomicInteger preSendFailures = new AtomicInteger()-->Line_25 $$ preSendFailures.incrementAndGet()[ FD ]
Line_24 $$ if (rarely()) -->Line_25 $$ preSendFailures.incrementAndGet()[ CD ]
Line_7 $$ final AtomicInteger finalFailures = new AtomicInteger()-->Line_47 $$ assertThat(finalFailures.get(), equalTo(0))[ FD ]
Line_10 $$ ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() -->Line_18 $$ latch.countDown()[ CD ]
Line_10 $$ ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() -->Line_13 $$ latch.countDown()[ CD ]
Line_8 $$ final AtomicReference<Throwable> finalFailure = new AtomicReference()-->Line_55 $$ assertThat(finalFailure.get(), instanceOf(NoNodeAvailableException.class))[ FD ]
Line_10 $$ ActionListener<TestResponse> actionListener = new ActionListener<TestResponse>() -->Line_12 $$ response.set(testResponse)[ CD ]
Line_22 $$ iteration.transportClientNodesService.execute(new TransportClientNodesService.NodeListenerCallback<TestResponse>() -->Line_24 $$ if (rarely()) [ CD ]
Line_46 $$ if (iteration.transport.successes() == 1) -->Line_51 $$ assertThat(finalFailures.get(), equalTo(1))[ CD ]
Line_46 $$ if (iteration.transport.successes() == 1) -->Line_48 $$ assertThat(finalFailure.get(), nullValue())[ CD ]
