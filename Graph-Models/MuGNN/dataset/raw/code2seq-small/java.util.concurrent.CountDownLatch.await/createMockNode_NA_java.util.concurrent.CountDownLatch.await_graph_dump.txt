Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_29 $$ if (nodes.put(name, node) != null) [ CD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_32 $$ return node[ CD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_28 $$ node.service.removeConnectionListener(waitForConnection)[ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_5 $$ DiscoveryNode discoveryNode = new DiscoveryNode(name, name, service.boundAddress().publishAddress(), settings.getByPrefix("node.").getAsMap(), version)[ FD ]
Line_29 $$ if (nodes.put(name, node) != null) -->Line_30 $$ fail("Node with the name " + name + " already exist")[ CD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_7 $$ node.action = buildPublishClusterStateAction(settings, service, node, node)[ FD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_26 $$ curNode.service.removeConnectionListener(waitForConnection)[ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_29 $$ if (nodes.put(name, node) != null) [ FD ]
Line_8 $$ final CountDownLatch latch = new CountDownLatch(nodes.size() * 2 + 1)-->Line_11 $$ latch.countDown()[ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_8 $$ final CountDownLatch latch = new CountDownLatch(nodes.size() * 2 + 1)[ CD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_3 $$ settings = Settings.builder().put("name", name).put(TransportService.TRACE_LOG_INCLUDE_SETTING.getKey(), "", TransportService.TRACE_LOG_EXCLUDE_SETTING.getKey(), "NOTHING").put(settings).build()[ FD ]
Line_8 $$ final CountDownLatch latch = new CountDownLatch(nodes.size() * 2 + 1)-->Line_24 $$ assertThat("failed to wait for all nodes to connect", latch.await(5, TimeUnit.SECONDS), equalTo(true))[ FD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_29 $$ if (nodes.put(name, node) != null) [ FD ]
Line_4 $$ MockTransportService service = buildTransportService(settings, version)-->Line_5 $$ DiscoveryNode discoveryNode = new DiscoveryNode(name, name, service.boundAddress().publishAddress(), settings.getByPrefix("node.").getAsMap(), version)[ FD ]
Line_6 $$ MockNode node = new MockNode(discoveryNode, service, listener, logger)-->Line_29 $$ if (nodes.put(name, node) != null) [ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_3 $$ settings = Settings.builder().put("name", name).put(TransportService.TRACE_LOG_INCLUDE_SETTING.getKey(), "", TransportService.TRACE_LOG_EXCLUDE_SETTING.getKey(), "NOTHING").put(settings).build()[ CD ]
Line_3 $$ settings = Settings.builder().put("name", name).put(TransportService.TRACE_LOG_INCLUDE_SETTING.getKey(), "", TransportService.TRACE_LOG_EXCLUDE_SETTING.getKey(), "NOTHING").put(settings).build()-->Line_5 $$ DiscoveryNode discoveryNode = new DiscoveryNode(name, name, service.boundAddress().publishAddress(), settings.getByPrefix("node.").getAsMap(), version)[ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_17 $$ node.service.addConnectionListener(waitForConnection)[ CD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_4 $$ MockTransportService service = buildTransportService(settings, version)[ FD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_17 $$ node.service.addConnectionListener(waitForConnection)[ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() [ CD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_5 $$ DiscoveryNode discoveryNode = new DiscoveryNode(name, name, service.boundAddress().publishAddress(), settings.getByPrefix("node.").getAsMap(), version)[ CD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_19 $$ curNode.service.addConnectionListener(waitForConnection)[ FD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_23 $$ node.connectTo(node.discoveryNode)[ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_28 $$ node.service.removeConnectionListener(waitForConnection)[ CD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_7 $$ node.action = buildPublishClusterStateAction(settings, service, node, node)[ CD ]
Line_3 $$ settings = Settings.builder().put("name", name).put(TransportService.TRACE_LOG_INCLUDE_SETTING.getKey(), "", TransportService.TRACE_LOG_EXCLUDE_SETTING.getKey(), "NOTHING").put(settings).build()-->Line_7 $$ node.action = buildPublishClusterStateAction(settings, service, node, node)[ FD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_14 $$ fail("disconnect should not be called " + node)[ CD ]
Line_6 $$ MockNode node = new MockNode(discoveryNode, service, listener, logger)-->Line_23 $$ node.connectTo(node.discoveryNode)[ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_23 $$ node.connectTo(node.discoveryNode)[ CD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_11 $$ latch.countDown()[ CD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_6 $$ MockNode node = new MockNode(discoveryNode, service, listener, logger)[ CD ]
Line_6 $$ MockNode node = new MockNode(discoveryNode, service, listener, logger)-->Line_7 $$ node.action = buildPublishClusterStateAction(settings, service, node, node)[ FD ]
Line_6 $$ MockNode node = new MockNode(discoveryNode, service, listener, logger)-->Line_21 $$ node.connectTo(curNode.discoveryNode)[ FD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_24 $$ assertThat("failed to wait for all nodes to connect", latch.await(5, TimeUnit.SECONDS), equalTo(true))[ CD ]
Line_2 $$ public MockNode createMockNode(String name, Settings settings, Version version, @Nullable ClusterStateListener listener) throws Exception -->Line_4 $$ MockTransportService service = buildTransportService(settings, version)[ CD ]
Line_9 $$ TransportConnectionListener waitForConnection = new TransportConnectionListener() -->Line_21 $$ node.connectTo(curNode.discoveryNode)[ FD ]
Line_3 $$ settings = Settings.builder().put("name", name).put(TransportService.TRACE_LOG_INCLUDE_SETTING.getKey(), "", TransportService.TRACE_LOG_EXCLUDE_SETTING.getKey(), "NOTHING").put(settings).build()-->Line_4 $$ MockTransportService service = buildTransportService(settings, version)[ FD ]
Line_4 $$ MockTransportService service = buildTransportService(settings, version)-->Line_7 $$ node.action = buildPublishClusterStateAction(settings, service, node, node)[ FD ]
