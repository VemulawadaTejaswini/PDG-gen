Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_16 $$ assertTrue(responses.contains(SOME_RESPONSE_TEXT + PATH2))[ CD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_10 $$ final HttpRequest request2 = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, PATH2)[ CD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_9 $$ request1.headers().add(HOST, NetworkAddress.formatAddress(boundAddress))[ CD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_14 $$ responsesIn.await(RESPONSE_TIMEOUT, MILLISECONDS)[ CD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_7 $$ final Channel clientChannel = connectionFuture.getChannel()[ CD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_13 $$ clientChannel.write(request2)[ CD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_12 $$ clientChannel.write(request1)[ CD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_11 $$ request2.headers().add(HOST, NetworkAddress.formatAddress(boundAddress))[ CD ]
Line_8 $$ final HttpRequest request1 = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, PATH1)-->Line_12 $$ clientChannel.write(request1)[ FD ]
Line_5 $$ final ChannelFuture connectionFuture = clientBootstrap.connect(boundAddress)-->Line_7 $$ final Channel clientChannel = connectionFuture.getChannel()[ FD ]
Line_7 $$ final Channel clientChannel = connectionFuture.getChannel()-->Line_12 $$ clientChannel.write(request1)[ FD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_5 $$ final ChannelFuture connectionFuture = clientBootstrap.connect(boundAddress)[ CD ]
Line_8 $$ final HttpRequest request1 = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, PATH1)-->Line_9 $$ request1.headers().add(HOST, NetworkAddress.formatAddress(boundAddress))[ FD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_8 $$ final HttpRequest request1 = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, PATH1)[ CD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_4 $$ responses.clear()[ CD ]
Line_10 $$ final HttpRequest request2 = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, PATH2)-->Line_11 $$ request2.headers().add(HOST, NetworkAddress.formatAddress(boundAddress))[ FD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_6 $$ assertTrue(connectionFuture.await(CONNECTION_TIMEOUT))[ CD ]
Line_10 $$ final HttpRequest request2 = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, PATH2)-->Line_13 $$ clientChannel.write(request2)[ FD ]
Line_2 $$ public void testShouldReturnMessagesInOrder() throws InterruptedException -->Line_15 $$ assertTrue(responses.contains(SOME_RESPONSE_TEXT + PATH1))[ CD ]
Line_7 $$ final Channel clientChannel = connectionFuture.getChannel()-->Line_13 $$ clientChannel.write(request2)[ FD ]
Line_5 $$ final ChannelFuture connectionFuture = clientBootstrap.connect(boundAddress)-->Line_6 $$ assertTrue(connectionFuture.await(CONNECTION_TIMEOUT))[ FD ]
