Line_2 $$ public void streamingResponseBody() throws Exception -->Line_12 $$ assertTrue(this.request.isAsyncStarted())[ CD ]
Line_5 $$ StreamingResponseBody streamingBody = new StreamingResponseBody() -->Line_7 $$ outputStream.write("foo".getBytes(Charset.forName("UTF-8")))[ FD ]
Line_2 $$ public void streamingResponseBody() throws Exception -->Line_13 $$ assertTrue(latch.await(5, TimeUnit.SECONDS))[ CD ]
Line_3 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_13 $$ assertTrue(latch.await(5, TimeUnit.SECONDS))[ FD ]
Line_2 $$ public void streamingResponseBody() throws Exception -->Line_14 $$ assertEquals("foo", this.response.getContentAsString())[ CD ]
Line_2 $$ public void streamingResponseBody() throws Exception -->Line_4 $$ MethodParameter returnType = returnType(TestController.class, "handle")[ CD ]
Line_4 $$ MethodParameter returnType = returnType(TestController.class, "handle")-->Line_11 $$ this.handler.handleReturnValue(streamingBody, returnType, this.mavContainer, this.webRequest)[ FD ]
Line_5 $$ StreamingResponseBody streamingBody = new StreamingResponseBody() -->Line_11 $$ this.handler.handleReturnValue(streamingBody, returnType, this.mavContainer, this.webRequest)[ FD ]
Line_5 $$ StreamingResponseBody streamingBody = new StreamingResponseBody() -->Line_8 $$ latch.countDown()[ CD ]
Line_5 $$ StreamingResponseBody streamingBody = new StreamingResponseBody() -->Line_7 $$ outputStream.write("foo".getBytes(Charset.forName("UTF-8")))[ CD ]
Line_2 $$ public void streamingResponseBody() throws Exception -->Line_5 $$ StreamingResponseBody streamingBody = new StreamingResponseBody() [ CD ]
Line_3 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_8 $$ latch.countDown()[ FD ]
Line_2 $$ public void streamingResponseBody() throws Exception -->Line_11 $$ this.handler.handleReturnValue(streamingBody, returnType, this.mavContainer, this.webRequest)[ CD ]
Line_2 $$ public void streamingResponseBody() throws Exception -->Line_3 $$ CountDownLatch latch = new CountDownLatch(1)[ CD ]
