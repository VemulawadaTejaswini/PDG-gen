Line_6 $$ final List<String> tablesToDrop = copy(tables)-->Line_17 $$ schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))[ FD ]
Line_2 $$ public void afterTest() throws Throwable -->Line_9 $$ final List<String> aggregatesToDrop = copy(aggregates)[ CD ]
Line_8 $$ final List<String> functionsToDrop = copy(functions)-->Line_19 $$ schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_21 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_27 $$ latch.await(2, TimeUnit.SECONDS)[ FD ]
Line_17 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_20 $$ schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_6 $$ final List<String> tablesToDrop = copy(tables)-->Line_17 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))[ FD ]
Line_9 $$ final List<String> aggregatesToDrop = copy(aggregates)-->Line_18 $$ schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))[ FD ]
Line_6 $$ final List<String> tablesToDrop = copy(tables)-->Line_28 $$ removeAllSSTables(KEYSPACE, tablesToDrop)[ FD ]
Line_17 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_19 $$ schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_18 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))-->Line_19 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_7 $$ final List<String> typesToDrop = copy(types)-->Line_20 $$ schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_2 $$ public void afterTest() throws Throwable -->Line_6 $$ final List<String> tablesToDrop = copy(tables)[ CD ]
Line_18 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))-->Line_20 $$ schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_17 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_19 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_9 $$ final List<String> aggregatesToDrop = copy(aggregates)-->Line_18 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))[ FD ]
Line_2 $$ public void afterTest() throws Throwable -->Line_7 $$ final List<String> typesToDrop = copy(types)[ CD ]
Line_17 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_20 $$ for (int i = typesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_8 $$ final List<String> functionsToDrop = copy(functions)-->Line_19 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_19 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))-->Line_20 $$ for (int i = typesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_2 $$ public void afterTest() throws Throwable -->Line_14 $$ ScheduledExecutors.optionalTasks.execute(new Runnable() [ CD ]
Line_2 $$ public void afterTest() throws Throwable -->Line_3 $$ dropPerTestKeyspace()[ CD ]
Line_19 $$ for (int i = functionsToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))-->Line_20 $$ schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_7 $$ final List<String> typesToDrop = copy(types)-->Line_20 $$ for (int i = typesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_18 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))-->Line_19 $$ schemaChange(String.format("DROP FUNCTION IF EXISTS %s", functionsToDrop.get(i)))[ FD ]
Line_21 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_24 $$ latch.countDown()[ FD ]
Line_18 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))-->Line_20 $$ for (int i = typesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TYPE IF EXISTS %s.%s", KEYSPACE, typesToDrop.get(i)))[ FD ]
Line_17 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_18 $$ schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))[ FD ]
Line_17 $$ for (int i = tablesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP TABLE IF EXISTS %s.%s", KEYSPACE, tablesToDrop.get(i)))-->Line_18 $$ for (int i = aggregatesToDrop.size() - 1; i >= 0; i--) schemaChange(String.format("DROP AGGREGATE IF EXISTS %s", aggregatesToDrop.get(i)))[ FD ]
Line_22 $$ ScheduledExecutors.nonPeriodicTasks.execute(new Runnable() -->Line_24 $$ latch.countDown()[ CD ]
Line_2 $$ public void afterTest() throws Throwable -->Line_8 $$ final List<String> functionsToDrop = copy(functions)[ CD ]
