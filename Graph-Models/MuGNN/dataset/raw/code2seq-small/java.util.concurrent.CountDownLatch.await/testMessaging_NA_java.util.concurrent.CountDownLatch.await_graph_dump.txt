Line_5 $$ ClientConsumer consumer = session.createConsumer(QUEUE_EXAMPLE_QUEUE)-->Line_6 $$ consumer.setMessageHandler(new MessageHandler() [ FD ]
Line_2 $$ public void testMessaging() throws Exception -->Line_17 $$ String text = UUID.randomUUID().toString()[ CD ]
Line_2 $$ public void testMessaging() throws Exception -->Line_20 $$ assertEquals(text, message.get().getStringProperty(BODY))[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_19 $$ assertTrue(latch.await(1, SECONDS))[ FD ]
Line_2 $$ public void testMessaging() throws Exception -->Line_5 $$ ClientConsumer consumer = session.createConsumer(QUEUE_EXAMPLE_QUEUE)[ CD ]
Line_6 $$ consumer.setMessageHandler(new MessageHandler() -->Line_9 $$ m.acknowledge()[ FD ]
Line_6 $$ consumer.setMessageHandler(new MessageHandler() -->Line_10 $$ message.set(m)[ FD ]
Line_2 $$ public void testMessaging() throws Exception -->Line_18 $$ sendMessage(text)[ CD ]
Line_2 $$ public void testMessaging() throws Exception -->Line_4 $$ final AtomicReference<ClientMessage> message = new AtomicReference<ClientMessage>()[ CD ]
Line_2 $$ public void testMessaging() throws Exception -->Line_6 $$ consumer.setMessageHandler(new MessageHandler() [ CD ]
Line_2 $$ public void testMessaging() throws Exception -->Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testMessaging() throws Exception -->Line_19 $$ assertTrue(latch.await(1, SECONDS))[ CD ]
Line_4 $$ final AtomicReference<ClientMessage> message = new AtomicReference<ClientMessage>()-->Line_10 $$ message.set(m)[ FD ]
Line_4 $$ final AtomicReference<ClientMessage> message = new AtomicReference<ClientMessage>()-->Line_20 $$ assertEquals(text, message.get().getStringProperty(BODY))[ FD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_11 $$ latch.countDown()[ FD ]
