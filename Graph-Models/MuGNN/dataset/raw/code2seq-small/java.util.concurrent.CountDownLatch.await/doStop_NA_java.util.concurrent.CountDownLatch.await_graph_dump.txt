Line_32 $$ while (serverBootstrapIterator.hasNext()) -->Line_33 $$ Map.Entry<String, ServerBootstrap> serverBootstrapEntry = serverBootstrapIterator.next()[ CD ]
Line_2 $$ protected void doStop() -->Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_8 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_44 $$ NodeChannels nodeChannels = it.next()[ FD ]
Line_16 $$ String name = serverChannelEntry.getKey()-->Line_39 $$ logger.debug("Error closing serverBootstrap for profile [[ FD ]
Line_27 $$ if (serverOpenChannels != null) -->Line_28 $$ serverOpenChannels.close()[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_54 $$ latch.countDown()[ FD ]
Line_2 $$ protected void doStop() -->Line_4 $$ threadPool.generic().execute(new Runnable() [ CD ]
Line_43 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_44 $$ NodeChannels nodeChannels = it.next()[ FD ]
Line_33 $$ Map.Entry<String, ServerBootstrap> serverBootstrapEntry = serverBootstrapIterator.next()-->Line_34 $$ String name = serverBootstrapEntry.getKey()[ FD ]
Line_31 $$ Iterator<Map.Entry<String, ServerBootstrap>> serverBootstrapIterator = serverBootstraps.entrySet().iterator()-->Line_33 $$ Map.Entry<String, ServerBootstrap> serverBootstrapEntry = serverBootstrapIterator.next()[ FD ]
Line_8 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_11 $$ nodeChannels.close()[ CD ]
Line_8 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_10 $$ it.remove()[ CD ]
Line_33 $$ Map.Entry<String, ServerBootstrap> serverBootstrapEntry = serverBootstrapIterator.next()-->Line_35 $$ ServerBootstrap serverBootstrap = serverBootstrapEntry.getValue()[ FD ]
Line_43 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_45 $$ it.remove()[ CD ]
Line_48 $$ if (clientBootstrap != null) -->Line_49 $$ clientBootstrap.releaseExternalResources()[ CD ]
Line_8 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_10 $$ it.remove()[ FD ]
Line_8 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_45 $$ it.remove()[ FD ]
Line_9 $$ NodeChannels nodeChannels = it.next()-->Line_11 $$ nodeChannels.close()[ FD ]
Line_32 $$ while (serverBootstrapIterator.hasNext()) -->Line_41 $$ serverBootstrapIterator.remove()[ CD ]
Line_43 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_44 $$ NodeChannels nodeChannels = it.next()[ CD ]
Line_43 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_45 $$ it.remove()[ FD ]
Line_15 $$ Map.Entry<String, List<Channel>> serverChannelEntry = serverChannelIterator.next()-->Line_17 $$ List<Channel> serverChannels = serverChannelEntry.getValue()[ FD ]
Line_15 $$ Map.Entry<String, List<Channel>> serverChannelEntry = serverChannelIterator.next()-->Line_16 $$ String name = serverChannelEntry.getKey()[ FD ]
Line_31 $$ Iterator<Map.Entry<String, ServerBootstrap>> serverBootstrapIterator = serverBootstraps.entrySet().iterator()-->Line_41 $$ serverBootstrapIterator.remove()[ FD ]
Line_35 $$ ServerBootstrap serverBootstrap = serverBootstrapEntry.getValue()-->Line_37 $$ serverBootstrap.releaseExternalResources()[ FD ]
Line_8 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_9 $$ NodeChannels nodeChannels = it.next()[ FD ]
Line_9 $$ NodeChannels nodeChannels = it.next()-->Line_46 $$ nodeChannels.close()[ FD ]
Line_44 $$ NodeChannels nodeChannels = it.next()-->Line_46 $$ nodeChannels.close()[ FD ]
Line_43 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_46 $$ nodeChannels.close()[ CD ]
Line_13 $$ Iterator<Map.Entry<String, List<Channel>>> serverChannelIterator = serverChannels.entrySet().iterator()-->Line_15 $$ Map.Entry<String, List<Channel>> serverChannelEntry = serverChannelIterator.next()[ FD ]
Line_8 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_9 $$ NodeChannels nodeChannels = it.next()[ CD ]
Line_14 $$ while (serverChannelIterator.hasNext()) -->Line_16 $$ String name = serverChannelEntry.getKey()[ CD ]
Line_32 $$ while (serverBootstrapIterator.hasNext()) -->Line_35 $$ ServerBootstrap serverBootstrap = serverBootstrapEntry.getValue()[ CD ]
Line_8 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) -->Line_43 $$ for (Iterator<NodeChannels> it = connectedNodes.values().iterator(); it.hasNext(); ) [ FD ]
Line_13 $$ Iterator<Map.Entry<String, List<Channel>>> serverChannelIterator = serverChannels.entrySet().iterator()-->Line_14 $$ while (serverChannelIterator.hasNext()) [ FD ]
Line_14 $$ while (serverChannelIterator.hasNext()) -->Line_15 $$ Map.Entry<String, List<Channel>> serverChannelEntry = serverChannelIterator.next()[ CD ]
Line_14 $$ while (serverChannelIterator.hasNext()) -->Line_17 $$ List<Channel> serverChannels = serverChannelEntry.getValue()[ CD ]
Line_4 $$ threadPool.generic().execute(new Runnable() -->Line_6 $$ globalLock.writeLock().lock()[ CD ]
Line_16 $$ String name = serverChannelEntry.getKey()-->Line_22 $$ logger.debug("Error closing serverChannel for profile [[ FD ]
Line_13 $$ Iterator<Map.Entry<String, List<Channel>>> serverChannelIterator = serverChannels.entrySet().iterator()-->Line_25 $$ serverChannelIterator.remove()[ FD ]
Line_31 $$ Iterator<Map.Entry<String, ServerBootstrap>> serverBootstrapIterator = serverBootstraps.entrySet().iterator()-->Line_32 $$ while (serverBootstrapIterator.hasNext()) [ FD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_59 $$ latch.await(30, TimeUnit.SECONDS)[ FD ]
Line_34 $$ String name = serverBootstrapEntry.getKey()-->Line_39 $$ logger.debug("Error closing serverBootstrap for profile [[ FD ]
Line_32 $$ while (serverBootstrapIterator.hasNext()) -->Line_34 $$ String name = serverBootstrapEntry.getKey()[ CD ]
Line_14 $$ while (serverChannelIterator.hasNext()) -->Line_25 $$ serverChannelIterator.remove()[ CD ]
Line_18 $$ for (Channel serverChannel : serverChannels) -->Line_20 $$ serverChannel.close().awaitUninterruptibly()[ FD ]
