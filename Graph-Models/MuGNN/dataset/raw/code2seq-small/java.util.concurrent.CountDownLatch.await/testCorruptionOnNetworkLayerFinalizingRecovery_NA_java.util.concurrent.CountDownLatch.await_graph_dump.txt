Line_5 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_14 $$ NodeStats unluckyNode = dataNodeStats.get(1)[ FD ]
Line_21 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_23 $$ if (corrupt.get() && action.equals(RecoveryTarget.Actions.FILE_CHUNK)) [ CD ]
Line_14 $$ NodeStats unluckyNode = dataNodeStats.get(1)-->Line_34 $$ Settings build = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "1").put("index.routing.allocation.include._name", primariesNode.getNode().name() + "," + unluckyNode.getNode().name()).build()[ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_37 $$ hasCorrupted.await()[ CD ]
Line_17 $$ final AtomicBoolean corrupt = new AtomicBoolean(true)-->Line_38 $$ corrupt.set(false)[ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_39 $$ ensureGreen()[ CD ]
Line_5 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_13 $$ NodeStats primariesNode = dataNodeStats.get(0)[ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_17 $$ final AtomicBoolean corrupt = new AtomicBoolean(true)[ CD ]
Line_21 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_23 $$ if (corrupt.get() && action.equals(RecoveryTarget.Actions.FILE_CHUNK)) [ FD ]
Line_4 $$ NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get()-->Line_6 $$ for (NodeStats stat : nodeStats.getNodes()) [ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_38 $$ corrupt.set(false)[ CD ]
Line_13 $$ NodeStats primariesNode = dataNodeStats.get(0)-->Line_34 $$ Settings build = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "1").put("index.routing.allocation.include._name", primariesNode.getNode().name() + "," + unluckyNode.getNode().name()).build()[ FD ]
Line_6 $$ for (NodeStats stat : nodeStats.getNodes()) -->Line_7 $$ if (stat.getNode().isDataNode()) [ FD ]
Line_5 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_12 $$ Collections.shuffle(dataNodeStats, random())[ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_4 $$ NodesStatsResponse nodeStats = client().admin().cluster().prepareNodesStats().get()[ CD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_18 $$ final CountDownLatch hasCorrupted = new CountDownLatch(1)[ CD ]
Line_23 $$ if (corrupt.get() && action.equals(RecoveryTarget.Actions.FILE_CHUNK)) -->Line_27 $$ array[i] = (byte) ~array[i][ CD ]
Line_7 $$ if (stat.getNode().isDataNode()) -->Line_8 $$ dataNodeStats.add(stat)[ CD ]
Line_23 $$ if (corrupt.get() && action.equals(RecoveryTarget.Actions.FILE_CHUNK)) -->Line_25 $$ byte[] array = req.content().array()[ CD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_36 $$ client().admin().cluster().prepareReroute().get()[ CD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_3 $$ internalCluster().ensureAtLeastNumDataNodes(2)[ CD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_15 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put("index.routing.allocation.include._name", primariesNode.getNode().name()).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE)))[ CD ]
Line_23 $$ if (corrupt.get() && action.equals(RecoveryTarget.Actions.FILE_CHUNK)) -->Line_26 $$ int i = randomIntBetween(0, req.content().length() - 1)[ CD ]
Line_20 $$ MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().name()))-->Line_21 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) [ FD ]
Line_23 $$ if (corrupt.get() && action.equals(RecoveryTarget.Actions.FILE_CHUNK)) -->Line_28 $$ hasCorrupted.countDown()[ CD ]
Line_18 $$ final CountDownLatch hasCorrupted = new CountDownLatch(1)-->Line_28 $$ hasCorrupted.countDown()[ FD ]
Line_5 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_8 $$ dataNodeStats.add(stat)[ FD ]
Line_17 $$ final AtomicBoolean corrupt = new AtomicBoolean(true)-->Line_23 $$ if (corrupt.get() && action.equals(RecoveryTarget.Actions.FILE_CHUNK)) [ FD ]
Line_13 $$ NodeStats primariesNode = dataNodeStats.get(0)-->Line_15 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "0").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put("index.routing.allocation.include._name", primariesNode.getNode().name()).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE)))[ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_5 $$ List<NodeStats> dataNodeStats = new ArrayList()[ CD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_34 $$ Settings build = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, "1").put("index.routing.allocation.include._name", primariesNode.getNode().name() + "," + unluckyNode.getNode().name()).build()[ CD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_16 $$ ensureGreen()[ CD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_11 $$ assertThat(dataNodeStats.size(), greaterThanOrEqualTo(2))[ CD ]
Line_5 $$ List<NodeStats> dataNodeStats = new ArrayList()-->Line_11 $$ assertThat(dataNodeStats.size(), greaterThanOrEqualTo(2))[ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_14 $$ NodeStats unluckyNode = dataNodeStats.get(1)[ CD ]
Line_14 $$ NodeStats unluckyNode = dataNodeStats.get(1)-->Line_21 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) [ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_35 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(build).get()[ CD ]
Line_19 $$ for (NodeStats dataNode : dataNodeStats) -->Line_20 $$ MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, dataNode.getNode().name()))[ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_12 $$ Collections.shuffle(dataNodeStats, random())[ CD ]
Line_21 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_30 $$ super.sendRequest(node, requestId, action, request, options)[ FD ]
Line_18 $$ final CountDownLatch hasCorrupted = new CountDownLatch(1)-->Line_37 $$ hasCorrupted.await()[ FD ]
Line_24 $$ RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request-->Line_25 $$ byte[] array = req.content().array()[ FD ]
Line_2 $$ public void testCorruptionOnNetworkLayerFinalizingRecovery() throws ExecutionException, InterruptedException, IOException -->Line_13 $$ NodeStats primariesNode = dataNodeStats.get(0)[ CD ]
Line_23 $$ if (corrupt.get() && action.equals(RecoveryTarget.Actions.FILE_CHUNK)) -->Line_24 $$ RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request[ CD ]
Line_21 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, unluckyNode.getNode().name()), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_30 $$ super.sendRequest(node, requestId, action, request, options)[ CD ]
Line_24 $$ RecoveryFileChunkRequest req = (RecoveryFileChunkRequest) request-->Line_26 $$ int i = randomIntBetween(0, req.content().length() - 1)[ FD ]
Line_6 $$ for (NodeStats stat : nodeStats.getNodes()) -->Line_8 $$ dataNodeStats.add(stat)[ FD ]
