Line_25 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_27 $$ return false[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_7 $$ ensureGreen()[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_25 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() [ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_18 $$ latch1.countDown()[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()[ CD ]
Line_25 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_32 $$ return currentState[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_9 $$ final boolean[] taskFailed = [ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_23 $$ taskFailed[0] = true[ CD ]
Line_5 $$ InternalTestCluster.Async<String> nonMaster = internalCluster().startNodeAsync(settingsBuilder().put(settings).put("node.master", false).build())-->Line_8 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, nonMaster.get())[ FD ]
Line_25 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_30 $$ taskFailed[0] = false[ CD ]
Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()-->Line_4 $$ InternalTestCluster.Async<String> master = internalCluster().startNodeAsync(settings)[ FD ]
Line_8 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, nonMaster.get())-->Line_25 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() [ FD ]
Line_10 $$ final CountDownLatch latch1 = new CountDownLatch(1)-->Line_18 $$ latch1.countDown()[ FD ]
Line_25 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_31 $$ latch2.countDown()[ CD ]
Line_4 $$ InternalTestCluster.Async<String> master = internalCluster().startNodeAsync(settings)-->Line_6 $$ master.get()[ FD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_6 $$ master.get()[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_8 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, nonMaster.get())[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_22 $$ assertTrue("cluster state update task was executed on a non-master", taskFailed[0])[ CD ]
Line_10 $$ final CountDownLatch latch1 = new CountDownLatch(1)-->Line_21 $$ latch1.await()[ FD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_14 $$ return currentState[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_11 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() [ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_40 $$ assertFalse("non-master cluster state update task was not executed", taskFailed[0])[ CD ]
Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()-->Line_5 $$ InternalTestCluster.Async<String> nonMaster = internalCluster().startNodeAsync(settingsBuilder().put(settings).put("node.master", false).build())[ FD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_21 $$ latch1.await()[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_4 $$ InternalTestCluster.Async<String> master = internalCluster().startNodeAsync(settings)[ CD ]
Line_10 $$ final CountDownLatch latch1 = new CountDownLatch(1)-->Line_13 $$ latch1.countDown()[ FD ]
Line_8 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, nonMaster.get())-->Line_11 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() [ FD ]
Line_25 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_36 $$ latch2.countDown()[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_5 $$ InternalTestCluster.Async<String> nonMaster = internalCluster().startNodeAsync(settingsBuilder().put(settings).put("node.master", false).build())[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_10 $$ final CountDownLatch latch1 = new CountDownLatch(1)[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_13 $$ latch1.countDown()[ CD ]
Line_25 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_35 $$ taskFailed[0] = true[ CD ]
Line_2 $$ public void testMasterAwareExecution() throws Exception -->Line_39 $$ latch2.await()[ CD ]
Line_11 $$ clusterService.submitStateUpdateTask("test", new ClusterStateUpdateTask() -->Line_17 $$ taskFailed[0] = true[ CD ]
