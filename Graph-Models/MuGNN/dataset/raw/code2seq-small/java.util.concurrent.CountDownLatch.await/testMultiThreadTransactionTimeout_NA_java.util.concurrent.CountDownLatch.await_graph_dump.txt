Line_4 $$ EntityManager em = entityManagerFactory().createEntityManager()-->Line_5 $$ final SessionImpl sImpl = em.unwrap(SessionImpl.class)[ FD ]
Line_4 $$ EntityManager em = entityManagerFactory().createEntityManager()-->Line_24 $$ em.createQuery("from Book").getResultList()[ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_10 $$ latch.countDown()[ FD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_28 $$ assertTrue(caught)[ CD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_14 $$ latch.await()[ CD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_13 $$ thread.start()[ CD ]
Line_4 $$ EntityManager em = entityManagerFactory().createEntityManager()-->Line_30 $$ em.close()[ FD ]
Line_7 $$ Thread thread = new Thread() -->Line_9 $$ ((JtaTransactionCoordinatorImpl) sImpl.getTransactionCoordinator()).getSynchronizationCallbackCoordinator().afterCompletion(Status.STATUS_ROLLEDBACK)[ CD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_4 $$ EntityManager em = entityManagerFactory().createEntityManager()[ CD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_29 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().rollback()[ CD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_30 $$ em.close()[ CD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_3 $$ TestingJtaPlatformImpl.INSTANCE.getTransactionManager().begin()[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_14 $$ latch.await()[ FD ]
Line_4 $$ EntityManager em = entityManagerFactory().createEntityManager()-->Line_17 $$ em.persist(new Book("The Book of Foo", 1))[ FD ]
Line_7 $$ Thread thread = new Thread() -->Line_10 $$ latch.countDown()[ CD ]
Line_5 $$ final SessionImpl sImpl = em.unwrap(SessionImpl.class)-->Line_9 $$ ((JtaTransactionCoordinatorImpl) sImpl.getTransactionCoordinator()).getSynchronizationCallbackCoordinator().afterCompletion(Status.STATUS_ROLLEDBACK)[ FD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_21 $$ assertTrue(caught)[ CD ]
Line_7 $$ Thread thread = new Thread() -->Line_13 $$ thread.start()[ FD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_5 $$ final SessionImpl sImpl = em.unwrap(SessionImpl.class)[ CD ]
Line_2 $$ public void testMultiThreadTransactionTimeout() throws Exception -->Line_7 $$ Thread thread = new Thread() [ CD ]
