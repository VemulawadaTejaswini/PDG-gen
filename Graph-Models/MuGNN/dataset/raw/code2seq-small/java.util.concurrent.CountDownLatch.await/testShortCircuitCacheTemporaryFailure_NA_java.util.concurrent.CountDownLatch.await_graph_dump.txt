Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_27 $$ DFSTestUtil.createFile(dfs, new Path(TEST_FILE), TEST_FILE_LEN, (short) 1, SEED)[ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_19 $$ cluster.waitActive()[ CD ]
Line_33 $$ BlockReader blockReader = null-->Line_41 $$ blockReader.close()[ FD ]
Line_33 $$ BlockReader blockReader = null-->Line_52 $$ blockReader.close()[ FD ]
Line_35 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_52 $$ blockReader.close()[ FD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_66 $$ replicaCreationShouldFail.set(false)[ CD ]
Line_68 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_69 $$ Uninterruptibles.joinUninterruptibly(threads[i])[ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_4 $$ final AtomicBoolean replicaCreationShouldFail = new AtomicBoolean(true)[ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_3 $$ BlockReaderTestUtil.enableBlockReaderFactoryTracing()[ CD ]
Line_33 $$ BlockReader blockReader = null-->Line_35 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)[ FD ]
Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() -->Line_13 $$ return null[ CD ]
Line_35 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_41 $$ blockReader.close()[ FD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_20 $$ final DistributedFileSystem dfs = cluster.getFileSystem()[ CD ]
Line_33 $$ BlockReader blockReader = null-->Line_46 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)[ FD ]
Line_33 $$ BlockReader blockReader = null-->Line_40 $$ if (blockReader != null)[ FD ]
Line_51 $$ if (blockReader != null)-->Line_52 $$ blockReader.close()[ CD ]
Line_31 $$ List<LocatedBlock> locatedBlocks = cluster.getNameNode().getRpcServer().getBlockLocations(TEST_FILE, 0, TEST_FILE_LEN).getLocatedBlocks()-->Line_32 $$ LocatedBlock lblock = locatedBlocks.get(0)[ FD ]
Line_35 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_51 $$ if (blockReader != null)[ FD ]
Line_46 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_52 $$ blockReader.close()[ FD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_72 $$ sockDir.close()[ CD ]
Line_46 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_51 $$ if (blockReader != null)[ FD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_65 $$ gotFailureLatch.await()[ CD ]
Line_33 $$ BlockReader blockReader = null-->Line_51 $$ if (blockReader != null)[ FD ]
Line_4 $$ final AtomicBoolean replicaCreationShouldFail = new AtomicBoolean(true)-->Line_9 $$ if (replicaCreationShouldFail.get()) [ FD ]
Line_40 $$ if (blockReader != null)-->Line_41 $$ blockReader.close()[ CD ]
Line_35 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_46 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)[ FD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_73 $$ Assert.assertFalse(testFailed.get())[ CD ]
Line_61 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_68 $$ for (int i = 0; i < NUM_THREADS; i++) [ FD ]
Line_32 $$ LocatedBlock lblock = locatedBlocks.get(0)-->Line_35 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)[ FD ]
Line_61 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_63 $$ threads[i].start()[ CD ]
Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)-->Line_73 $$ Assert.assertFalse(testFailed.get())[ FD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_6 $$ DFSInputStream.tcpReadsDisabledForTesting = true[ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_61 $$ for (int i = 0; i < NUM_THREADS; i++) [ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_68 $$ for (int i = 0; i < NUM_THREADS; i++) [ CD ]
Line_32 $$ LocatedBlock lblock = locatedBlocks.get(0)-->Line_46 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)[ FD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_18 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ CD ]
Line_35 $$ blockReader = BlockReaderTestUtil.getBlockReader(cluster, lblock, 0, TEST_FILE_LEN)-->Line_40 $$ if (blockReader != null)[ FD ]
Line_4 $$ final AtomicBoolean replicaCreationShouldFail = new AtomicBoolean(true)-->Line_66 $$ replicaCreationShouldFail.set(false)[ FD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_17 $$ Configuration conf = createShortCircuitConf("testShortCircuitCacheTemporaryFailure", sockDir)[ CD ]
Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() -->Line_9 $$ if (replicaCreationShouldFail.get()) [ CD ]
Line_9 $$ if (replicaCreationShouldFail.get()) -->Line_10 $$ Uninterruptibles.sleepUninterruptibly(2, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_67 $$ shouldRetryLatch.countDown()[ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_71 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)[ CD ]
Line_61 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_62 $$ threads[i] = new Thread(readerRunnable)[ CD ]
Line_9 $$ if (replicaCreationShouldFail.get()) -->Line_11 $$ return new ShortCircuitReplicaInfo()[ CD ]
Line_2 $$ public void testShortCircuitCacheTemporaryFailure() throws Exception -->Line_7 $$ BlockReaderFactory.createShortCircuitReplicaInfoCallback = new ShortCircuitCache.ShortCircuitReplicaCreator() [ CD ]
Line_5 $$ final AtomicBoolean testFailed = new AtomicBoolean(false)-->Line_56 $$ testFailed.set(true)[ FD ]
