Line_2 $$ public void testWaitForIndex() throws Exception -->Line_23 $$ dir.setEnableVirusScanner(false)[ CD ]
Line_3 $$ final MockDirectoryWrapper dir = newMockDirectory()-->Line_10 $$ if (Lucene.waitForIndex(dir, 5000)) [ FD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_3 $$ final MockDirectoryWrapper dir = newMockDirectory()[ CD ]
Line_10 $$ if (Lucene.waitForIndex(dir, 5000)) -->Line_13 $$ fail("index should have eventually existed!")[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_24 $$ IndexWriterConfig iwc = newIndexWriterConfig()[ CD ]
Line_3 $$ final MockDirectoryWrapper dir = newMockDirectory()-->Line_35 $$ dir.close()[ FD ]
Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_22 $$ latch.countDown()[ FD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_31 $$ writer.addDocument(doc)[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_22 $$ latch.countDown()[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_33 $$ t.join()[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_36 $$ assertTrue("index should have eventually existed", succeeded.get())[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_34 $$ writer.close()[ CD ]
Line_6 $$ Thread t = new Thread(new Runnable() -->Line_33 $$ t.join()[ FD ]
Line_4 $$ final AtomicBoolean succeeded = new AtomicBoolean(false)-->Line_11 $$ succeeded.set(true)[ FD ]
Line_10 $$ if (Lucene.waitForIndex(dir, 5000)) -->Line_11 $$ succeeded.set(true)[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_32 $$ writer.commit()[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_30 $$ doc.add(new TextField("id", "1", random().nextBoolean() ? Field.Store.YES : Field.Store.NO))[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_25 $$ iwc.setIndexDeletionPolicy(NoDeletionPolicy.INSTANCE)[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_6 $$ Thread t = new Thread(new Runnable() [ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_26 $$ iwc.setMergePolicy(NoMergePolicy.INSTANCE)[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_21 $$ t.start()[ CD ]
Line_4 $$ final AtomicBoolean succeeded = new AtomicBoolean(false)-->Line_36 $$ assertTrue("index should have eventually existed", succeeded.get())[ FD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_35 $$ dir.close()[ CD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_4 $$ final AtomicBoolean succeeded = new AtomicBoolean(false)[ CD ]
Line_3 $$ final MockDirectoryWrapper dir = newMockDirectory()-->Line_23 $$ dir.setEnableVirusScanner(false)[ FD ]
Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_9 $$ latch.await()[ FD ]
Line_6 $$ Thread t = new Thread(new Runnable() -->Line_21 $$ t.start()[ FD ]
Line_2 $$ public void testWaitForIndex() throws Exception -->Line_27 $$ iwc.setMaxBufferedDocs(2)[ CD ]
