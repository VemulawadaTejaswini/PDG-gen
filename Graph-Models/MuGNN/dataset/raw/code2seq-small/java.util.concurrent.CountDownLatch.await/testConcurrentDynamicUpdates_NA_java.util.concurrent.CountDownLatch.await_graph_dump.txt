Line_7 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_8 $$ final String id = Integer.toString(i)[ CD ]
Line_7 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_30 $$ for (int i = 0; i < indexThreads.length; ++i) [ FD ]
Line_30 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_31 $$ assertMappingsHaveField(mappings, "index", "type", "field" + i)[ CD ]
Line_5 $$ final CountDownLatch startLatch = new CountDownLatch(1)-->Line_12 $$ startLatch.await()[ FD ]
Line_6 $$ final AtomicReference<Throwable> error = new AtomicReference()-->Line_26 $$ throw error.get()[ FD ]
Line_33 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_34 $$ assertTrue(client().prepareGet("index", "type", Integer.toString(i)).get().isExists())[ CD ]
Line_7 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_33 $$ for (int i = 0; i < indexThreads.length; ++i) [ FD ]
Line_7 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_8 $$ final String id = Integer.toString(i)[ FD ]
Line_5 $$ final CountDownLatch startLatch = new CountDownLatch(1)-->Line_21 $$ startLatch.countDown()[ FD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_33 $$ for (int i = 0; i < indexThreads.length; ++i) [ CD ]
Line_30 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_34 $$ assertTrue(client().prepareGet("index", "type", Integer.toString(i)).get().isExists())[ FD ]
Line_7 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_9 $$ indexThreads[i] = new Thread(new Runnable() [ CD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_29 $$ GetMappingsResponse mappings = client().admin().indices().prepareGetMappings("index").setTypes("type").get()[ CD ]
Line_6 $$ final AtomicReference<Throwable> error = new AtomicReference()-->Line_25 $$ if (error.get() != null) [ FD ]
Line_30 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_33 $$ for (int i = 0; i < indexThreads.length; ++i) [ FD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_4 $$ final Thread[] indexThreads = new Thread[32][ CD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_3 $$ createIndex("index")[ CD ]
Line_7 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_19 $$ indexThreads[i].start()[ CD ]
Line_33 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_34 $$ assertTrue(client().prepareGet("index", "type", Integer.toString(i)).get().isExists())[ FD ]
Line_8 $$ final String id = Integer.toString(i)-->Line_13 $$ assertTrue(client().prepareIndex("index", "type", id).setSource("field" + id, "bar").get().isCreated())[ FD ]
Line_6 $$ final AtomicReference<Throwable> error = new AtomicReference()-->Line_15 $$ error.compareAndSet(null, t)[ FD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_5 $$ final CountDownLatch startLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_21 $$ startLatch.countDown()[ CD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_7 $$ for (int i = 0; i < indexThreads.length; ++i) [ CD ]
Line_7 $$ for (int i = 0; i < indexThreads.length; ++i) -->Line_34 $$ assertTrue(client().prepareGet("index", "type", Integer.toString(i)).get().isExists())[ FD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_25 $$ if (error.get() != null) [ CD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_30 $$ for (int i = 0; i < indexThreads.length; ++i) [ CD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_28 $$ Thread.sleep(2000)[ CD ]
Line_2 $$ public void testConcurrentDynamicUpdates() throws Throwable -->Line_6 $$ final AtomicReference<Throwable> error = new AtomicReference()[ CD ]
