Line_2 $$ public void exceptionNotPropagatedWithAsync() throws InterruptedException -->Line_8 $$ countDownLatch.await(2, TimeUnit.SECONDS)[ CD ]
Line_5 $$ ExceptionEventListener listener = this.context.getBean(ExceptionEventListener.class)-->Line_9 $$ this.eventCollector.assertEvent(listener, event)[ FD ]
Line_5 $$ ExceptionEventListener listener = this.context.getBean(ExceptionEventListener.class)-->Line_6 $$ this.eventCollector.assertNoEventReceived(listener)[ FD ]
Line_2 $$ public void exceptionNotPropagatedWithAsync() throws InterruptedException -->Line_4 $$ AnotherTestEvent event = new AnotherTestEvent(this, "fail")[ CD ]
Line_2 $$ public void exceptionNotPropagatedWithAsync() throws InterruptedException -->Line_5 $$ ExceptionEventListener listener = this.context.getBean(ExceptionEventListener.class)[ CD ]
Line_2 $$ public void exceptionNotPropagatedWithAsync() throws InterruptedException -->Line_9 $$ this.eventCollector.assertEvent(listener, event)[ CD ]
Line_4 $$ AnotherTestEvent event = new AnotherTestEvent(this, "fail")-->Line_9 $$ this.eventCollector.assertEvent(listener, event)[ FD ]
Line_2 $$ public void exceptionNotPropagatedWithAsync() throws InterruptedException -->Line_10 $$ this.eventCollector.assertTotalEventsCount(1)[ CD ]
Line_4 $$ AnotherTestEvent event = new AnotherTestEvent(this, "fail")-->Line_7 $$ this.context.publishEvent(event)[ FD ]
Line_2 $$ public void exceptionNotPropagatedWithAsync() throws InterruptedException -->Line_6 $$ this.eventCollector.assertNoEventReceived(listener)[ CD ]
Line_2 $$ public void exceptionNotPropagatedWithAsync() throws InterruptedException -->Line_3 $$ loadAsync(ExceptionEventListener.class)[ CD ]
Line_2 $$ public void exceptionNotPropagatedWithAsync() throws InterruptedException -->Line_7 $$ this.context.publishEvent(event)[ CD ]
