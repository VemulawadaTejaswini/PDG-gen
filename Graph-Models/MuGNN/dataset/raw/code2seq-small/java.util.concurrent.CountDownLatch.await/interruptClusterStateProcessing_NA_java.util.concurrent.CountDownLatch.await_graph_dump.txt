Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_16 $$ return false[ CD ]
Line_8 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_26 $$ countDownLatch.countDown()[ FD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_24 $$ Thread.sleep(duration.millis() % 200)[ FD ]
Line_9 $$ ClusterService clusterService = cluster.getInstance(ClusterService.class, disruptionNodeCopy)-->Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) [ FD ]
Line_4 $$ if (disruptionNodeCopy == null) -->Line_5 $$ return false[ CD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_8 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_3 $$ final String disruptionNodeCopy = disruptedNode[ CD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_4 $$ if (disruptionNodeCopy == null) [ CD ]
Line_13 $$ final AtomicBoolean stopped = new AtomicBoolean(false)-->Line_23 $$ if (!stopped.get()) [ FD ]
Line_3 $$ final String disruptionNodeCopy = disruptedNode-->Line_4 $$ if (disruptionNodeCopy == null) [ FD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_19 $$ long count = duration.millis() / 200[ FD ]
Line_23 $$ if (!stopped.get()) -->Line_24 $$ Thread.sleep(duration.millis() % 200)[ CD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) [ CD ]
Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_26 $$ countDownLatch.countDown()[ CD ]
Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_27 $$ return currentState[ CD ]
Line_19 $$ long count = duration.millis() / 200-->Line_20 $$ for (; count > 0 && !stopped.get(); count--) [ FD ]
Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_23 $$ if (!stopped.get()) [ CD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_13 $$ final AtomicBoolean stopped = new AtomicBoolean(false)[ CD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_39 $$ return true[ CD ]
Line_8 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_30 $$ countDownLatch.countDown()[ FD ]
Line_13 $$ final AtomicBoolean stopped = new AtomicBoolean(false)-->Line_20 $$ for (; count > 0 && !stopped.get(); count--) [ FD ]
Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_30 $$ countDownLatch.countDown()[ CD ]
Line_10 $$ if (clusterService == null) -->Line_11 $$ return false[ CD ]
Line_9 $$ ClusterService clusterService = cluster.getInstance(ClusterService.class, disruptionNodeCopy)-->Line_10 $$ if (clusterService == null) [ FD ]
Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_19 $$ long count = duration.millis() / 200[ CD ]
Line_20 $$ for (; count > 0 && !stopped.get(); count--) -->Line_21 $$ Thread.sleep(200)[ CD ]
Line_3 $$ final String disruptionNodeCopy = disruptedNode-->Line_9 $$ ClusterService clusterService = cluster.getInstance(ClusterService.class, disruptionNodeCopy)[ FD ]
Line_8 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_34 $$ countDownLatch.await()[ FD ]
Line_8 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_37 $$ countDownLatch.await()[ FD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_9 $$ ClusterService clusterService = cluster.getInstance(ClusterService.class, disruptionNodeCopy)[ CD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_7 $$ logger.info("delaying cluster state updates on node [[ CD ]
Line_3 $$ final String disruptionNodeCopy = disruptedNode-->Line_7 $$ logger.info("delaying cluster state updates on node [[ FD ]
Line_13 $$ final AtomicBoolean stopped = new AtomicBoolean(false)-->Line_36 $$ stopped.set(true)[ FD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_7 $$ logger.info("delaying cluster state updates on node [[ FD ]
Line_2 $$ private boolean interruptClusterStateProcessing(final TimeValue duration) throws InterruptedException -->Line_10 $$ if (clusterService == null) [ CD ]
Line_14 $$ clusterService.submitStateUpdateTask("service_disruption_delay", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_20 $$ for (; count > 0 && !stopped.get(); count--) [ CD ]
