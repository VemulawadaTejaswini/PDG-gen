Line_47 $$ clusterService1.submitStateUpdateTask("test4", new ClusterStateUpdateTask() -->Line_55 $$ fail()[ CD ]
Line_6 $$ MockLogAppender mockAppender = new MockLogAppender()-->Line_8 $$ mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test2", "cluster.service", Level.TRACE, "*failed to execute cluster state update in *"))[ FD ]
Line_13 $$ final CountDownLatch latch = new CountDownLatch(4)-->Line_19 $$ latch.countDown()[ FD ]
Line_5 $$ ClusterService clusterService1 = internalCluster().getInstance(ClusterService.class)-->Line_25 $$ clusterService1.submitStateUpdateTask("test2", new ClusterStateUpdateTask() [ FD ]
Line_6 $$ MockLogAppender mockAppender = new MockLogAppender()-->Line_7 $$ mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test1", "cluster.service", Level.DEBUG, "*processing [test1]: took * no change in cluster_state"))[ FD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_5 $$ ClusterService clusterService1 = internalCluster().getInstance(ClusterService.class)[ CD ]
Line_13 $$ final CountDownLatch latch = new CountDownLatch(4)-->Line_41 $$ latch.countDown()[ FD ]
Line_13 $$ final CountDownLatch latch = new CountDownLatch(4)-->Line_52 $$ latch.countDown()[ FD ]
Line_13 $$ final CountDownLatch latch = new CountDownLatch(4)-->Line_33 $$ latch.countDown()[ FD ]
Line_10 $$ Logger rootLogger = Logger.getRootLogger()-->Line_11 $$ rootLogger.addAppender(mockAppender)[ FD ]
Line_47 $$ clusterService1.submitStateUpdateTask("test4", new ClusterStateUpdateTask() -->Line_52 $$ latch.countDown()[ CD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_10 $$ Logger rootLogger = Logger.getRootLogger()[ CD ]
Line_36 $$ clusterService1.submitStateUpdateTask("test3", new ClusterStateUpdateTask() -->Line_44 $$ fail()[ CD ]
Line_25 $$ clusterService1.submitStateUpdateTask("test2", new ClusterStateUpdateTask() -->Line_38 $$ return ClusterState.builder(currentState).incrementVersion().build()[ FD ]
Line_14 $$ clusterService1.submitStateUpdateTask("test1", new ClusterStateUpdateTask() -->Line_16 $$ return currentState[ CD ]
Line_6 $$ MockLogAppender mockAppender = new MockLogAppender()-->Line_60 $$ rootLogger.removeAppender(mockAppender)[ FD ]
Line_5 $$ ClusterService clusterService1 = internalCluster().getInstance(ClusterService.class)-->Line_14 $$ clusterService1.submitStateUpdateTask("test1", new ClusterStateUpdateTask() [ FD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_6 $$ MockLogAppender mockAppender = new MockLogAppender()[ CD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_11 $$ rootLogger.addAppender(mockAppender)[ CD ]
Line_36 $$ clusterService1.submitStateUpdateTask("test3", new ClusterStateUpdateTask() -->Line_38 $$ return ClusterState.builder(currentState).incrementVersion().build()[ CD ]
Line_10 $$ Logger rootLogger = Logger.getRootLogger()-->Line_60 $$ rootLogger.removeAppender(mockAppender)[ FD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_4 $$ internalCluster().startNode(settings)[ CD ]
Line_5 $$ ClusterService clusterService1 = internalCluster().getInstance(ClusterService.class)-->Line_36 $$ clusterService1.submitStateUpdateTask("test3", new ClusterStateUpdateTask() [ FD ]
Line_36 $$ clusterService1.submitStateUpdateTask("test3", new ClusterStateUpdateTask() -->Line_38 $$ return ClusterState.builder(currentState).incrementVersion().build()[ FD ]
Line_47 $$ clusterService1.submitStateUpdateTask("test4", new ClusterStateUpdateTask() -->Line_49 $$ return currentState[ CD ]
Line_6 $$ MockLogAppender mockAppender = new MockLogAppender()-->Line_62 $$ mockAppender.assertAllExpectationsMatched()[ FD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_7 $$ mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test1", "cluster.service", Level.DEBUG, "*processing [test1]: took * no change in cluster_state"))[ CD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_9 $$ mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test3", "cluster.service", Level.DEBUG, "*processing [test3]: took * done applying updated cluster_state (version: *, uuid: *)"))[ CD ]
Line_6 $$ MockLogAppender mockAppender = new MockLogAppender()-->Line_9 $$ mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test3", "cluster.service", Level.DEBUG, "*processing [test3]: took * done applying updated cluster_state (version: *, uuid: *)"))[ FD ]
Line_36 $$ clusterService1.submitStateUpdateTask("test3", new ClusterStateUpdateTask() -->Line_41 $$ latch.countDown()[ CD ]
Line_25 $$ clusterService1.submitStateUpdateTask("test2", new ClusterStateUpdateTask() -->Line_33 $$ latch.countDown()[ CD ]
Line_13 $$ final CountDownLatch latch = new CountDownLatch(4)-->Line_58 $$ assertThat(latch.await(1, TimeUnit.SECONDS), equalTo(true))[ FD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_62 $$ mockAppender.assertAllExpectationsMatched()[ CD ]
Line_25 $$ clusterService1.submitStateUpdateTask("test2", new ClusterStateUpdateTask() -->Line_30 $$ fail()[ CD ]
Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()-->Line_4 $$ internalCluster().startNode(settings)[ FD ]
Line_14 $$ clusterService1.submitStateUpdateTask("test1", new ClusterStateUpdateTask() -->Line_38 $$ return ClusterState.builder(currentState).incrementVersion().build()[ FD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_8 $$ mockAppender.addExpectation(new MockLogAppender.SeenEventExpectation("test2", "cluster.service", Level.TRACE, "*failed to execute cluster state update in *"))[ CD ]
Line_14 $$ clusterService1.submitStateUpdateTask("test1", new ClusterStateUpdateTask() -->Line_19 $$ latch.countDown()[ CD ]
Line_5 $$ ClusterService clusterService1 = internalCluster().getInstance(ClusterService.class)-->Line_47 $$ clusterService1.submitStateUpdateTask("test4", new ClusterStateUpdateTask() [ FD ]
Line_6 $$ MockLogAppender mockAppender = new MockLogAppender()-->Line_11 $$ rootLogger.addAppender(mockAppender)[ FD ]
Line_2 $$ public void testClusterStateUpdateLogging() throws Exception -->Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()[ CD ]
Line_14 $$ clusterService1.submitStateUpdateTask("test1", new ClusterStateUpdateTask() -->Line_22 $$ fail()[ CD ]
