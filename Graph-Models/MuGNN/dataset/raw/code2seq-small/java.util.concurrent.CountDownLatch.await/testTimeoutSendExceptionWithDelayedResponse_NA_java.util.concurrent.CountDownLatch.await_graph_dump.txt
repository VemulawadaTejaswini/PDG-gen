Line_44 $$ res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest(counter + "ms"), TransportRequestOptions.builder().withTimeout(3000).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_56 $$ fail("got exception instead of a response for " + counter + ": " + exp.getDetailedMessage())[ FD ]
Line_2 $$ public void testTimeoutSendExceptionWithDelayedResponse() throws Exception -->Line_3 $$ serviceA.registerRequestHandler("sayHelloTimeoutDelayedResponse", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() [ CD ]
Line_3 $$ serviceA.registerRequestHandler("sayHelloTimeoutDelayedResponse", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() -->Line_11 $$ channel.sendResponse(new StringMessageResponse("hello " + request.message))[ FD ]
Line_42 $$ for (int i = 0; i < 10; i++) -->Line_44 $$ res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest(counter + "ms"), TransportRequestOptions.builder().withTimeout(3000).build(), new BaseTransportResponseHandler<StringMessageResponse>() [ CD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_55 $$ exp.printStackTrace()[ FD ]
Line_42 $$ for (int i = 0; i < 10; i++) -->Line_59 $$ StringMessageResponse message = res.txGet()[ CD ]
Line_3 $$ serviceA.registerRequestHandler("sayHelloTimeoutDelayedResponse", StringMessageRequest::<>new, ThreadPool.Names.GENERIC, new TransportRequestHandler<StringMessageRequest>() -->Line_5 $$ TimeValue sleep = TimeValue.parseTimeValue(request.message, null, "sleep")[ CD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_21 $$ return new StringMessageResponse()[ CD ]
Line_44 $$ res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest(counter + "ms"), TransportRequestOptions.builder().withTimeout(3000).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_55 $$ exp.printStackTrace()[ CD ]
Line_5 $$ TimeValue sleep = TimeValue.parseTimeValue(request.message, null, "sleep")-->Line_7 $$ Thread.sleep(sleep.millis())[ FD ]
Line_2 $$ public void testTimeoutSendExceptionWithDelayedResponse() throws Exception -->Line_41 $$ latch.await()[ CD ]
Line_44 $$ res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest(counter + "ms"), TransportRequestOptions.builder().withTimeout(3000).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_49 $$ return ThreadPool.Names.GENERIC[ CD ]
Line_2 $$ public void testTimeoutSendExceptionWithDelayedResponse() throws Exception -->Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() [ CD ]
Line_42 $$ for (int i = 0; i < 10; i++) -->Line_43 $$ final int counter = i[ CD ]
Line_44 $$ res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest(counter + "ms"), TransportRequestOptions.builder().withTimeout(3000).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_46 $$ return new StringMessageResponse()[ CD ]
Line_44 $$ res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest(counter + "ms"), TransportRequestOptions.builder().withTimeout(3000).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_55 $$ exp.printStackTrace()[ FD ]
Line_2 $$ public void testTimeoutSendExceptionWithDelayedResponse() throws Exception -->Line_42 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_31 $$ latch.countDown()[ CD ]
Line_42 $$ for (int i = 0; i < 10; i++) -->Line_60 $$ assertThat(message.message, equalTo("hello " + counter + "ms"))[ CD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_32 $$ assertThat(exp, instanceOf(ReceiveTimeoutTransportException.class))[ FD ]
Line_2 $$ public void testTimeoutSendExceptionWithDelayedResponse() throws Exception -->Line_62 $$ serviceA.removeHandler("sayHelloTimeoutDelayedResponse")[ CD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_32 $$ assertThat(exp, instanceOf(ReceiveTimeoutTransportException.class))[ CD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_56 $$ fail("got exception instead of a response for " + counter + ": " + exp.getDetailedMessage())[ FD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_28 $$ fail("got response instead of exception")[ CD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_27 $$ latch.countDown()[ CD ]
Line_44 $$ res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest(counter + "ms"), TransportRequestOptions.builder().withTimeout(3000).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_56 $$ fail("got exception instead of a response for " + counter + ": " + exp.getDetailedMessage())[ CD ]
Line_19 $$ TransportFuture<StringMessageResponse> res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest("300ms"), TransportRequestOptions.builder().withTimeout(100).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_24 $$ return ThreadPool.Names.GENERIC[ CD ]
Line_44 $$ res = serviceB.submitRequest(nodeA, "sayHelloTimeoutDelayedResponse", new StringMessageRequest(counter + "ms"), TransportRequestOptions.builder().withTimeout(3000).build(), new BaseTransportResponseHandler<StringMessageResponse>() -->Line_52 $$ assertThat("hello " + counter + "ms", equalTo(response.message))[ CD ]
