Line_8 $$ FSImage fsimage = namesystem.getFSImage()-->Line_61 $$ assertEquals(1, verifyEditLogs(namesystem, fsimage, NNStorage.getInProgressEditsFileName(4), 4))[ FD ]
Line_2 $$ public void testSaveImageWhileSyncInProgress() throws Exception -->Line_3 $$ Configuration conf = getConf()[ CD ]
Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)-->Line_8 $$ FSImage fsimage = namesystem.getFSImage()[ FD ]
Line_2 $$ public void testSaveImageWhileSyncInProgress() throws Exception -->Line_4 $$ NameNode.initMetrics(conf, NamenodeRole.NAMENODE)[ CD ]
Line_2 $$ public void testSaveImageWhileSyncInProgress() throws Exception -->Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)[ CD ]
Line_15 $$ final Thread doAnEditThread = new Thread() -->Line_31 $$ if (Thread.currentThread() == doAnEditThread) [ FD ]
Line_11 $$ EditLogFileOutputStream spyElos = spy((EditLogFileOutputStream) jas.getCurrentStream())-->Line_12 $$ jas.setCurrentStreamForTests(spyElos)[ FD ]
Line_2 $$ public void testSaveImageWhileSyncInProgress() throws Exception -->Line_5 $$ DFSTestUtil.formatNameNode(conf)[ CD ]
Line_14 $$ final CountDownLatch waitToEnterFlush = new CountDownLatch(1)-->Line_46 $$ waitToEnterFlush.await()[ FD ]
Line_8 $$ FSImage fsimage = namesystem.getFSImage()-->Line_60 $$ assertEquals(3, verifyEditLogs(namesystem, fsimage, NNStorage.getFinalizedEditsFileName(1, 3), 1))[ FD ]
Line_10 $$ JournalAndStream jas = editLog.getJournals().get(0)-->Line_12 $$ jas.setCurrentStreamForTests(spyElos)[ FD ]
Line_31 $$ if (Thread.currentThread() == doAnEditThread) -->Line_35 $$ Thread.sleep(BLOCK_TIME * 1000)[ CD ]
Line_28 $$ Answer<Void> blockingFlush = new Answer<Void>() -->Line_39 $$ LOG.info("Flush complete")[ CD ]
Line_10 $$ JournalAndStream jas = editLog.getJournals().get(0)-->Line_11 $$ EditLogFileOutputStream spyElos = spy((EditLogFileOutputStream) jas.getCurrentStream())[ FD ]
Line_31 $$ if (Thread.currentThread() == doAnEditThread) -->Line_32 $$ LOG.info("edit thread: Telling main thread we made it to flush section...")[ CD ]
Line_31 $$ if (Thread.currentThread() == doAnEditThread) -->Line_34 $$ LOG.info("edit thread: sleeping for " + BLOCK_TIME + "secs")[ CD ]
Line_28 $$ Answer<Void> blockingFlush = new Answer<Void>() -->Line_31 $$ if (Thread.currentThread() == doAnEditThread) [ CD ]
Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)-->Line_56 $$ namesystem.saveNamespace()[ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_4 $$ NameNode.initMetrics(conf, NamenodeRole.NAMENODE)[ FD ]
Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)-->Line_60 $$ assertEquals(3, verifyEditLogs(namesystem, fsimage, NNStorage.getFinalizedEditsFileName(1, 3), 1))[ FD ]
Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)-->Line_52 $$ namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER)[ FD ]
Line_28 $$ Answer<Void> blockingFlush = new Answer<Void>() -->Line_40 $$ return null[ CD ]
Line_15 $$ final Thread doAnEditThread = new Thread() -->Line_58 $$ doAnEditThread.join()[ FD ]
Line_31 $$ if (Thread.currentThread() == doAnEditThread) -->Line_36 $$ LOG.info("Going through to flush. This will allow the main thread to continue.")[ CD ]
Line_9 $$ FSEditLog editLog = fsimage.getEditLog()-->Line_10 $$ JournalAndStream jas = editLog.getJournals().get(0)[ FD ]
Line_28 $$ Answer<Void> blockingFlush = new Answer<Void>() -->Line_38 $$ invocation.callRealMethod()[ CD ]
Line_14 $$ final CountDownLatch waitToEnterFlush = new CountDownLatch(1)-->Line_24 $$ waitToEnterFlush.countDown()[ FD ]
Line_15 $$ final Thread doAnEditThread = new Thread() -->Line_44 $$ doAnEditThread.start()[ FD ]
Line_13 $$ final AtomicReference<Throwable> deferredException = new AtomicReference<Throwable>()-->Line_47 $$ assertNull(deferredException.get())[ FD ]
Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)-->Line_19 $$ namesystem.mkdirs("/test", new PermissionStatus("test", "test", new FsPermission((short) 00755)), true)[ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)[ FD ]
Line_13 $$ final AtomicReference<Throwable> deferredException = new AtomicReference<Throwable>()-->Line_23 $$ deferredException.set(ioe)[ FD ]
Line_28 $$ Answer<Void> blockingFlush = new Answer<Void>() -->Line_30 $$ LOG.info("Flush called")[ CD ]
Line_31 $$ if (Thread.currentThread() == doAnEditThread) -->Line_33 $$ waitToEnterFlush.countDown()[ CD ]
Line_13 $$ final AtomicReference<Throwable> deferredException = new AtomicReference<Throwable>()-->Line_59 $$ assertNull(deferredException.get())[ FD ]
Line_11 $$ EditLogFileOutputStream spyElos = spy((EditLogFileOutputStream) jas.getCurrentStream())-->Line_43 $$ doAnswer(blockingFlush).when(spyElos).flush()[ FD ]
Line_3 $$ Configuration conf = getConf()-->Line_5 $$ DFSTestUtil.formatNameNode(conf)[ FD ]
Line_14 $$ final CountDownLatch waitToEnterFlush = new CountDownLatch(1)-->Line_33 $$ waitToEnterFlush.countDown()[ FD ]
Line_64 $$ if (namesystem != null)-->Line_65 $$ namesystem.close()[ CD ]
Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)-->Line_64 $$ if (namesystem != null)[ FD ]
Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)-->Line_65 $$ namesystem.close()[ FD ]
Line_8 $$ FSImage fsimage = namesystem.getFSImage()-->Line_9 $$ FSEditLog editLog = fsimage.getEditLog()[ FD ]
Line_6 $$ final FSNamesystem namesystem = FSNamesystem.loadFromDisk(conf)-->Line_61 $$ assertEquals(1, verifyEditLogs(namesystem, fsimage, NNStorage.getInProgressEditsFileName(4), 4))[ FD ]
Line_28 $$ Answer<Void> blockingFlush = new Answer<Void>() -->Line_38 $$ invocation.callRealMethod()[ FD ]
