Line_5 $$ Item item = s.load(Item.class, itemId)-->Line_31 $$ item.addOtherItem(otherItem)[ FD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_3 $$ TIME_SERVICE.advance(1)[ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_42 $$ collectionCache.removeInterceptor(CollectionUpdateTestInterceptor.class)[ CD ]
Line_25 $$ Future<Boolean> addFuture = executor.submit(() -> withTxSessionApply( s -> -->Line_40 $$ addFuture.get()[ FD ]
Line_6 $$ OtherItem otherItem = new OtherItem()-->Line_30 $$ s.persist(otherItem)[ FD ]
Line_19 $$ AtomicBoolean committing = new AtomicBoolean(false)-->Line_32 $$ committing.set(true)[ FD ]
Line_6 $$ OtherItem otherItem = new OtherItem()-->Line_7 $$ otherItem.setName("Other 1")[ FD ]
Line_6 $$ OtherItem otherItem = new OtherItem()-->Line_8 $$ s.persist(otherItem)[ FD ]
Line_17 $$ AdvancedCache collectionCache = ((BaseTransactionalDataRegion) sessionFactory().getSecondLevelCacheRegion(Item.class.getName() + ".otherItems")).getCache()-->Line_23 $$ collectionCache.addInterceptor(anotherInterceptor, 0)[ FD ]
Line_5 $$ Item item = s.load(Item.class, itemId)-->Line_13 $$ Set<OtherItem> otherItems = item.getOtherItems()[ FD ]
Line_35 $$ Future<Boolean> readFuture = executor.submit(() -> withTxSessionApply( s -> -->Line_41 $$ readFuture.get()[ FD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_20 $$ CollectionUpdateTestInterceptor collectionUpdateTestInterceptor = new CollectionUpdateTestInterceptor(putFromLoadLatch)[ CD ]
Line_6 $$ OtherItem otherItem = new OtherItem()-->Line_9 $$ item.addOtherItem(otherItem)[ FD ]
Line_6 $$ OtherItem otherItem = new OtherItem()-->Line_29 $$ otherItem.setName("Other 2")[ FD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_4 $$ withTxSession( s -> [ CD ]
Line_17 $$ AdvancedCache collectionCache = ((BaseTransactionalDataRegion) sessionFactory().getSecondLevelCacheRegion(Item.class.getName() + ".otherItems")).getCache()-->Line_42 $$ collectionCache.removeInterceptor(CollectionUpdateTestInterceptor.class)[ FD ]
Line_13 $$ Set<OtherItem> otherItems = item.getOtherItems()-->Line_15 $$ otherItems.remove(otherItems.iterator().next())[ FD ]
Line_6 $$ OtherItem otherItem = new OtherItem()-->Line_31 $$ item.addOtherItem(otherItem)[ FD ]
Line_13 $$ Set<OtherItem> otherItems = item.getOtherItems()-->Line_14 $$ assertFalse(otherItems.isEmpty())[ FD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_18 $$ CountDownLatch putFromLoadLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_35 $$ Future<Boolean> readFuture = executor.submit(() -> withTxSessionApply( s -> [ CD ]
Line_20 $$ CollectionUpdateTestInterceptor collectionUpdateTestInterceptor = new CollectionUpdateTestInterceptor(putFromLoadLatch)-->Line_22 $$ collectionCache.addInterceptor(collectionUpdateTestInterceptor, collectionCache.getInterceptorChain().size() - 1)[ FD ]
Line_17 $$ AdvancedCache collectionCache = ((BaseTransactionalDataRegion) sessionFactory().getSecondLevelCacheRegion(Item.class.getName() + ".otherItems")).getCache()-->Line_22 $$ collectionCache.addInterceptor(collectionUpdateTestInterceptor, collectionCache.getInterceptorChain().size() - 1)[ FD ]
Line_5 $$ Item item = s.load(Item.class, itemId)-->Line_37 $$ assertTrue(item.getOtherItems().isEmpty())[ FD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_40 $$ addFuture.get()[ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_21 $$ AnotherCollectionUpdateTestInterceptor anotherInterceptor = new AnotherCollectionUpdateTestInterceptor(putFromLoadLatch, committing)[ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_23 $$ collectionCache.addInterceptor(anotherInterceptor, 0)[ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_17 $$ AdvancedCache collectionCache = ((BaseTransactionalDataRegion) sessionFactory().getSecondLevelCacheRegion(Item.class.getName() + ".otherItems")).getCache()[ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_41 $$ readFuture.get()[ CD ]
Line_17 $$ AdvancedCache collectionCache = ((BaseTransactionalDataRegion) sessionFactory().getSecondLevelCacheRegion(Item.class.getName() + ".otherItems")).getCache()-->Line_43 $$ collectionCache.removeInterceptor(AnotherCollectionUpdateTestInterceptor.class)[ FD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_19 $$ AtomicBoolean committing = new AtomicBoolean(false)[ CD ]
Line_21 $$ AnotherCollectionUpdateTestInterceptor anotherInterceptor = new AnotherCollectionUpdateTestInterceptor(putFromLoadLatch, committing)-->Line_23 $$ collectionCache.addInterceptor(anotherInterceptor, 0)[ FD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_43 $$ collectionCache.removeInterceptor(AnotherCollectionUpdateTestInterceptor.class)[ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_11 $$ withTxSession( s -> [ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_24 $$ TIME_SERVICE.advance(1)[ CD ]
Line_5 $$ Item item = s.load(Item.class, itemId)-->Line_9 $$ item.addOtherItem(otherItem)[ FD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_25 $$ Future<Boolean> addFuture = executor.submit(() -> withTxSessionApply( s -> [ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_44 $$ withTxSession( s -> assertFalse(s.load(Item.class, itemId).getOtherItems().isEmpty()))[ CD ]
Line_2 $$ public void testCollectionUpdate() throws Exception -->Line_22 $$ collectionCache.addInterceptor(collectionUpdateTestInterceptor, collectionCache.getInterceptorChain().size() - 1)[ CD ]
