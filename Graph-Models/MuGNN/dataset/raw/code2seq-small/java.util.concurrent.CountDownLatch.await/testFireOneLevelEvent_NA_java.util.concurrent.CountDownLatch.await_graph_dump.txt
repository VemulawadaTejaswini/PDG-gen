Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_10 $$ coordinator.fireEvent(context, new CompositeName("test/path"), null, null, NamingEvent.OBJECT_ADDED, "bind", EventContext.ONELEVEL_SCOPE)[ CD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_9 $$ coordinator.addListener("test", EventContext.ONELEVEL_SCOPE, oneLevelListener)[ CD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_11 $$ oneLevelListener.latch.await(1, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_4 $$ final CollectingListener objectListener = new CollectingListener(0)[ CD ]
Line_8 $$ final CollectingListener oneLevelListener = new CollectingListener(1)-->Line_9 $$ coordinator.addListener("test", EventContext.ONELEVEL_SCOPE, oneLevelListener)[ FD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_6 $$ final CollectingListener subtreeListener = new CollectingListener(0)[ CD ]
Line_6 $$ final CollectingListener subtreeListener = new CollectingListener(0)-->Line_7 $$ coordinator.addListener("test", EventContext.SUBTREE_SCOPE, subtreeListener)[ FD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_7 $$ coordinator.addListener("test", EventContext.SUBTREE_SCOPE, subtreeListener)[ CD ]
Line_3 $$ final NamingEventCoordinator coordinator = new NamingEventCoordinator()-->Line_10 $$ coordinator.fireEvent(context, new CompositeName("test/path"), null, null, NamingEvent.OBJECT_ADDED, "bind", EventContext.ONELEVEL_SCOPE)[ FD ]
Line_4 $$ final CollectingListener objectListener = new CollectingListener(0)-->Line_5 $$ coordinator.addListener("test/path", EventContext.OBJECT_SCOPE, objectListener)[ FD ]
Line_3 $$ final NamingEventCoordinator coordinator = new NamingEventCoordinator()-->Line_7 $$ coordinator.addListener("test", EventContext.SUBTREE_SCOPE, subtreeListener)[ FD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_13 $$ assertTrue(subtreeListener.capturedEvents.isEmpty())[ CD ]
Line_3 $$ final NamingEventCoordinator coordinator = new NamingEventCoordinator()-->Line_9 $$ coordinator.addListener("test", EventContext.ONELEVEL_SCOPE, oneLevelListener)[ FD ]
Line_3 $$ final NamingEventCoordinator coordinator = new NamingEventCoordinator()-->Line_5 $$ coordinator.addListener("test/path", EventContext.OBJECT_SCOPE, objectListener)[ FD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_8 $$ final CollectingListener oneLevelListener = new CollectingListener(1)[ CD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_12 $$ assertTrue(objectListener.capturedEvents.isEmpty())[ CD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_5 $$ coordinator.addListener("test/path", EventContext.OBJECT_SCOPE, objectListener)[ CD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_14 $$ assertEquals(1, oneLevelListener.capturedEvents.size())[ CD ]
Line_2 $$ public void testFireOneLevelEvent() throws Exception -->Line_3 $$ final NamingEventCoordinator coordinator = new NamingEventCoordinator()[ CD ]
