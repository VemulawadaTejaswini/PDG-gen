Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_29 $$ indexShard.warmerService().logger().trace("warmed [[ FD ]
Line_3 $$ IndexWarmersMetaData custom = indexShard.getIndexSettings().getIndexMetaData().custom(IndexWarmersMetaData.TYPE)-->Line_9 $$ for (final IndexWarmersMetaData.Entry entry : custom.entries()) [ FD ]
Line_17 $$ ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexShard.getIndexSettings().getNumberOfShards(), SearchType.QUERY_THEN_FETCH, entry.source().build(queryParseContext), entry.types(), entry.requestCache())-->Line_18 $$ context = createContext(request, searcher)[ FD ]
Line_23 $$ if (canCache != top) -->Line_24 $$ return[ CD ]
Line_3 $$ IndexWarmersMetaData custom = indexShard.getIndexSettings().getIndexMetaData().custom(IndexWarmersMetaData.TYPE)-->Line_8 $$ final CountDownLatch latch = new CountDownLatch(custom.entries().size())[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_3 $$ IndexWarmersMetaData custom = indexShard.getIndexSettings().getIndexMetaData().custom(IndexWarmersMetaData.TYPE)[ FD ]
Line_18 $$ context = createContext(request, searcher)-->Line_22 $$ boolean canCache = indicesQueryCache.canCache(request, context)[ FD ]
Line_19 $$ if (context.sort() == null) -->Line_20 $$ context.size(0)[ CD ]
Line_11 $$ SearchContext context = null-->Line_37 $$ cleanContext(context)[ FD ]
Line_18 $$ context = createContext(request, searcher)-->Line_26 $$ loadOrExecuteQueryPhase(request, context, queryPhase)[ FD ]
Line_15 $$ QueryParseContext queryParseContext = new QueryParseContext(indicesService.getIndicesQueryRegistry())-->Line_16 $$ queryParseContext.parseFieldMatcher(indexService.getIndexSettings().getParseFieldMatcher())[ FD ]
Line_27 $$ long took = System.nanoTime() - now-->Line_29 $$ indexShard.warmerService().logger().trace("warmed [[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_18 $$ context = createContext(request, searcher)[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_45 $$ return () -> latch.await()[ CD ]
Line_4 $$ if (custom == null) -->Line_5 $$ return TerminationHandle.NO_WAIT[ CD ]
Line_11 $$ SearchContext context = null-->Line_36 $$ freeContext(context.id())[ FD ]
Line_15 $$ QueryParseContext queryParseContext = new QueryParseContext(indicesService.getIndicesQueryRegistry())-->Line_17 $$ ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexShard.getIndexSettings().getNumberOfShards(), SearchType.QUERY_THEN_FETCH, entry.source().build(queryParseContext), entry.types(), entry.requestCache())[ FD ]
Line_14 $$ final IndexService indexService = indicesService.indexServiceSafe(indexShard.shardId().index().name())-->Line_16 $$ queryParseContext.parseFieldMatcher(indexService.getIndexSettings().getParseFieldMatcher())[ FD ]
Line_35 $$ if (context != null) -->Line_36 $$ freeContext(context.id())[ CD ]
Line_8 $$ final CountDownLatch latch = new CountDownLatch(custom.entries().size())-->Line_45 $$ latch.await()[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_14 $$ final IndexService indexService = indicesService.indexServiceSafe(indexShard.shardId().index().name())[ FD ]
Line_7 $$ final Executor executor = indicesWarmer.getExecutor()-->Line_10 $$ executor.execute(() -> [ FD ]
Line_18 $$ context = createContext(request, searcher)-->Line_37 $$ cleanContext(context)[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_3 $$ IndexWarmersMetaData custom = indexShard.getIndexSettings().getIndexMetaData().custom(IndexWarmersMetaData.TYPE)[ CD ]
Line_3 $$ IndexWarmersMetaData custom = indexShard.getIndexSettings().getIndexMetaData().custom(IndexWarmersMetaData.TYPE)-->Line_4 $$ if (custom == null) [ FD ]
Line_18 $$ context = createContext(request, searcher)-->Line_19 $$ if (context.sort() == null) [ FD ]
Line_11 $$ SearchContext context = null-->Line_22 $$ boolean canCache = indicesQueryCache.canCache(request, context)[ FD ]
Line_35 $$ if (context != null) -->Line_37 $$ cleanContext(context)[ CD ]
Line_8 $$ final CountDownLatch latch = new CountDownLatch(custom.entries().size())-->Line_40 $$ latch.countDown()[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_17 $$ ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexShard.getIndexSettings().getNumberOfShards(), SearchType.QUERY_THEN_FETCH, entry.source().build(queryParseContext), entry.types(), entry.requestCache())[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_28 $$ if (indexShard.warmerService().logger().isTraceEnabled()) [ FD ]
Line_28 $$ if (indexShard.warmerService().logger().isTraceEnabled()) -->Line_29 $$ indexShard.warmerService().logger().trace("warmed [[ CD ]
Line_22 $$ boolean canCache = indicesQueryCache.canCache(request, context)-->Line_23 $$ if (canCache != top) [ FD ]
Line_9 $$ for (final IndexWarmersMetaData.Entry entry : custom.entries()) -->Line_17 $$ ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexShard.getIndexSettings().getNumberOfShards(), SearchType.QUERY_THEN_FETCH, entry.source().build(queryParseContext), entry.types(), entry.requestCache())[ FD ]
Line_18 $$ context = createContext(request, searcher)-->Line_36 $$ freeContext(context.id())[ FD ]
Line_18 $$ context = createContext(request, searcher)-->Line_20 $$ context.size(0)[ FD ]
Line_11 $$ SearchContext context = null-->Line_19 $$ if (context.sort() == null) [ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_7 $$ final Executor executor = indicesWarmer.getExecutor()[ CD ]
Line_11 $$ SearchContext context = null-->Line_35 $$ if (context != null) [ FD ]
Line_17 $$ ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexShard.getIndexSettings().getNumberOfShards(), SearchType.QUERY_THEN_FETCH, entry.source().build(queryParseContext), entry.types(), entry.requestCache())-->Line_26 $$ loadOrExecuteQueryPhase(request, context, queryPhase)[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_8 $$ final CountDownLatch latch = new CountDownLatch(custom.entries().size())[ CD ]
Line_17 $$ ShardSearchRequest request = new ShardSearchLocalRequest(indexShard.shardId(), indexShard.getIndexSettings().getNumberOfShards(), SearchType.QUERY_THEN_FETCH, entry.source().build(queryParseContext), entry.types(), entry.requestCache())-->Line_22 $$ boolean canCache = indicesQueryCache.canCache(request, context)[ FD ]
Line_9 $$ for (final IndexWarmersMetaData.Entry entry : custom.entries()) -->Line_29 $$ indexShard.warmerService().logger().trace("warmed [[ FD ]
Line_9 $$ for (final IndexWarmersMetaData.Entry entry : custom.entries()) -->Line_32 $$ indexShard.warmerService().logger().warn("warmer [[ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_23 $$ if (canCache != top) [ FD ]
Line_11 $$ SearchContext context = null-->Line_26 $$ loadOrExecuteQueryPhase(request, context, queryPhase)[ FD ]
Line_11 $$ SearchContext context = null-->Line_20 $$ context.size(0)[ FD ]
Line_11 $$ SearchContext context = null-->Line_18 $$ context = createContext(request, searcher)[ FD ]
Line_18 $$ context = createContext(request, searcher)-->Line_35 $$ if (context != null) [ FD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_4 $$ if (custom == null) [ CD ]
Line_2 $$ public TerminationHandle internalWarm(final IndexShard indexShard, final Engine.Searcher searcher, final boolean top) -->Line_32 $$ indexShard.warmerService().logger().warn("warmer [[ FD ]
