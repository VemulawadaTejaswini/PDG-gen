Line_6 $$ final StringBuffer log = new StringBuffer("waitAllTasksExecuted: " + this + "\n===" + ThreadDumper.dumpThreadsToString() + "\n===\n")-->Line_9 $$ log.append("Submit task\n")[ FD ]
Line_5 $$ final CountDownLatch readyToFinish = new CountDownLatch(1)-->Line_15 $$ readyToFinish.await()[ FD ]
Line_7 $$ List<Future> futures = ContainerUtil.map(Collections.nCopies(myMaxTasks, null), new Function<Object, Future>() -->Line_9 $$ log.append("Submit task\n")[ CD ]
Line_2 $$ public void waitAllTasksExecuted(int timeout, @NotNull TimeUnit unit) throws ExecutionException, InterruptedException -->Line_7 $$ List<Future> futures = ContainerUtil.map(Collections.nCopies(myMaxTasks, null), new Function<Object, Future>() [ CD ]
Line_5 $$ final CountDownLatch readyToFinish = new CountDownLatch(1)-->Line_31 $$ readyToFinish.countDown()[ FD ]
Line_6 $$ final StringBuffer log = new StringBuffer("waitAllTasksExecuted: " + this + "\n===" + ThreadDumper.dumpThreadsToString() + "\n===\n")-->Line_16 $$ log.append("Task finished.\n")[ FD ]
Line_6 $$ final StringBuffer log = new StringBuffer("waitAllTasksExecuted: " + this + "\n===" + ThreadDumper.dumpThreadsToString() + "\n===\n")-->Line_14 $$ log.append("Task run. started=" + started + "\n")[ FD ]
Line_2 $$ public void waitAllTasksExecuted(int timeout, @NotNull TimeUnit unit) throws ExecutionException, InterruptedException -->Line_4 $$ final CountDownLatch started = new CountDownLatch(myMaxTasks)[ CD ]
Line_4 $$ final CountDownLatch started = new CountDownLatch(myMaxTasks)-->Line_25 $$ if (!started.await(timeout, unit)) [ FD ]
Line_2 $$ public void waitAllTasksExecuted(int timeout, @NotNull TimeUnit unit) throws ExecutionException, InterruptedException -->Line_25 $$ if (!started.await(timeout, unit)) [ FD ]
Line_4 $$ final CountDownLatch started = new CountDownLatch(myMaxTasks)-->Line_13 $$ started.countDown()[ FD ]
Line_2 $$ public void waitAllTasksExecuted(int timeout, @NotNull TimeUnit unit) throws ExecutionException, InterruptedException -->Line_6 $$ final StringBuffer log = new StringBuffer("waitAllTasksExecuted: " + this + "\n===" + ThreadDumper.dumpThreadsToString() + "\n===\n")[ CD ]
Line_2 $$ public void waitAllTasksExecuted(int timeout, @NotNull TimeUnit unit) throws ExecutionException, InterruptedException -->Line_5 $$ final CountDownLatch readyToFinish = new CountDownLatch(1)[ CD ]
Line_7 $$ List<Future> futures = ContainerUtil.map(Collections.nCopies(myMaxTasks, null), new Function<Object, Future>() -->Line_10 $$ return submit(new Runnable() [ CD ]
