Line_2 $$ public void testHostOnMessages() throws InterruptedException -->Line_5 $$ final AtomicReference<TransportAddress> addressB = new AtomicReference()[ CD ]
Line_2 $$ public void testHostOnMessages() throws InterruptedException -->Line_6 $$ serviceB.registerRequestHandler("action1", TestRequest::<>new, ThreadPool.Names.SAME, new TransportRequestHandler<TestRequest>() [ CD ]
Line_6 $$ serviceB.registerRequestHandler("action1", TestRequest::<>new, ThreadPool.Names.SAME, new TransportRequestHandler<TestRequest>() -->Line_9 $$ channel.sendResponse(new TestResponse())[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(2)-->Line_19 $$ latch.countDown()[ FD ]
Line_28 $$ if (!latch.await(10, TimeUnit.SECONDS)) -->Line_29 $$ fail("message round trip did not complete within a sensible time frame")[ CD ]
Line_4 $$ final AtomicReference<TransportAddress> addressA = new AtomicReference()-->Line_31 $$ assertTrue(nodeA.address().sameHost(addressA.get()))[ FD ]
Line_2 $$ public void testHostOnMessages() throws InterruptedException -->Line_3 $$ final CountDownLatch latch = new CountDownLatch(2)[ CD ]
Line_2 $$ public void testHostOnMessages() throws InterruptedException -->Line_32 $$ assertTrue(nodeB.address().sameHost(addressB.get()))[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(2)-->Line_10 $$ latch.countDown()[ FD ]
Line_2 $$ public void testHostOnMessages() throws InterruptedException -->Line_4 $$ final AtomicReference<TransportAddress> addressA = new AtomicReference()[ CD ]
Line_5 $$ final AtomicReference<TransportAddress> addressB = new AtomicReference()-->Line_18 $$ addressB.set(response.remoteAddress())[ FD ]
Line_13 $$ serviceA.sendRequest(nodeB, "action1", new TestRequest(), new TransportResponseHandler<TestResponse>() -->Line_25 $$ return ThreadPool.Names.SAME[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(2)-->Line_22 $$ latch.countDown()[ FD ]
Line_13 $$ serviceA.sendRequest(nodeB, "action1", new TestRequest(), new TransportResponseHandler<TestResponse>() -->Line_22 $$ latch.countDown()[ CD ]
Line_2 $$ public void testHostOnMessages() throws InterruptedException -->Line_13 $$ serviceA.sendRequest(nodeB, "action1", new TestRequest(), new TransportResponseHandler<TestResponse>() [ CD ]
Line_2 $$ public void testHostOnMessages() throws InterruptedException -->Line_31 $$ assertTrue(nodeA.address().sameHost(addressA.get()))[ CD ]
Line_6 $$ serviceB.registerRequestHandler("action1", TestRequest::<>new, ThreadPool.Names.SAME, new TransportRequestHandler<TestRequest>() -->Line_8 $$ addressA.set(request.remoteAddress())[ CD ]
Line_2 $$ public void testHostOnMessages() throws InterruptedException -->Line_28 $$ if (!latch.await(10, TimeUnit.SECONDS)) [ CD ]
Line_4 $$ final AtomicReference<TransportAddress> addressA = new AtomicReference()-->Line_8 $$ addressA.set(request.remoteAddress())[ FD ]
Line_6 $$ serviceB.registerRequestHandler("action1", TestRequest::<>new, ThreadPool.Names.SAME, new TransportRequestHandler<TestRequest>() -->Line_8 $$ addressA.set(request.remoteAddress())[ FD ]
Line_6 $$ serviceB.registerRequestHandler("action1", TestRequest::<>new, ThreadPool.Names.SAME, new TransportRequestHandler<TestRequest>() -->Line_10 $$ latch.countDown()[ CD ]
Line_6 $$ serviceB.registerRequestHandler("action1", TestRequest::<>new, ThreadPool.Names.SAME, new TransportRequestHandler<TestRequest>() -->Line_9 $$ channel.sendResponse(new TestResponse())[ FD ]
Line_13 $$ serviceA.sendRequest(nodeB, "action1", new TestRequest(), new TransportResponseHandler<TestResponse>() -->Line_19 $$ latch.countDown()[ CD ]
Line_5 $$ final AtomicReference<TransportAddress> addressB = new AtomicReference()-->Line_32 $$ assertTrue(nodeB.address().sameHost(addressB.get()))[ FD ]
Line_13 $$ serviceA.sendRequest(nodeB, "action1", new TestRequest(), new TransportResponseHandler<TestResponse>() -->Line_15 $$ return new TestResponse()[ CD ]
Line_13 $$ serviceA.sendRequest(nodeB, "action1", new TestRequest(), new TransportResponseHandler<TestResponse>() -->Line_18 $$ addressB.set(response.remoteAddress())[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(2)-->Line_28 $$ if (!latch.await(10, TimeUnit.SECONDS)) [ FD ]
Line_13 $$ serviceA.sendRequest(nodeB, "action1", new TestRequest(), new TransportResponseHandler<TestResponse>() -->Line_18 $$ addressB.set(response.remoteAddress())[ FD ]
