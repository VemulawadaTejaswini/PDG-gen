Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_27 $$ ParsedDocument doc = testParsedDocument("1", "1", "test", null, -1, -1, document, B_1, null)[ CD ]
Line_8 $$ Thread t = new Thread(new Runnable() -->Line_30 $$ t.join()[ FD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_4 $$ final Store srStore = createStore(srDir)[ CD ]
Line_6 $$ final AtomicBoolean succeeded = new AtomicBoolean(false)-->Line_31 $$ assertTrue("ShadowEngine should have been able to be created", succeeded.get())[ FD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_22 $$ latch.countDown()[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_3 $$ final Path srDir = createTempDir()[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_31 $$ assertTrue("ShadowEngine should have been able to be created", succeeded.get())[ CD ]
Line_3 $$ final Path srDir = createTempDir()-->Line_23 $$ Store pStore = createStore(srDir)[ FD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_30 $$ t.join()[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_29 $$ pEngine.flush(true, true)[ CD ]
Line_3 $$ final Path srDir = createTempDir()-->Line_4 $$ final Store srStore = createStore(srDir)[ FD ]
Line_4 $$ final Store srStore = createStore(srDir)-->Line_5 $$ Lucene.cleanLuceneIndex(srStore.directory())[ FD ]
Line_4 $$ final Store srStore = createStore(srDir)-->Line_14 $$ try (ShadowEngine srEngine = createShadowEngine(srStore)) [ FD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_6 $$ final AtomicBoolean succeeded = new AtomicBoolean(false)[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_23 $$ Store pStore = createStore(srDir)[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_32 $$ IOUtils.close(srStore, pEngine, pStore)[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_5 $$ Lucene.cleanLuceneIndex(srStore.directory())[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_26 $$ document.add(new Field(SourceFieldMapper.NAME, B_1.toBytes(), SourceFieldMapper.Defaults.FIELD_TYPE))[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_8 $$ Thread t = new Thread(new Runnable() [ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_25 $$ ParseContext.Document document = testDocumentWithTextField()[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_28 $$ pEngine.index(new Engine.Index(newUid("1"), doc))[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_7 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_24 $$ InternalEngine pEngine = createInternalEngine(pStore, createTempDir("translog-primary"))[ CD ]
Line_4 $$ final Store srStore = createStore(srDir)-->Line_32 $$ IOUtils.close(srStore, pEngine, pStore)[ FD ]
Line_2 $$ public void testShadowEngineCreationRetry() throws Exception -->Line_21 $$ t.start()[ CD ]
Line_7 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_11 $$ latch.await()[ FD ]
Line_6 $$ final AtomicBoolean succeeded = new AtomicBoolean(false)-->Line_15 $$ succeeded.set(true)[ FD ]
Line_7 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_22 $$ latch.countDown()[ FD ]
Line_8 $$ Thread t = new Thread(new Runnable() -->Line_21 $$ t.start()[ FD ]
