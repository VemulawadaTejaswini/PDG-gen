Line_2 $$ public void testMultiTask() throws Exception -->Line_7 $$ Assert.assertEquals((20 - 0) / 5 - 2 + 1, MultiTask.middle)[ CD ]
Line_2 $$ public void testMultiTask() throws Exception -->Line_3 $$ runner.start()[ CD ]
Line_2 $$ public void testMultiTask() throws Exception -->Line_6 $$ Assert.assertTrue(MultiTask.first)[ CD ]
Line_2 $$ public void testMultiTask() throws Exception -->Line_8 $$ Assert.assertTrue(MultiTask.last)[ CD ]
Line_2 $$ public void testMultiTask() throws Exception -->Line_5 $$ MultiTask.latch.await(5000, TimeUnit.MILLISECONDS)[ CD ]
Line_2 $$ public void testMultiTask() throws Exception -->Line_4 $$ runner.schedule(new MultiTask(0, 20, 5))[ CD ]
