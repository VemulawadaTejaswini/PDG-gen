Line_2 $$ public void testWriteCall() throws Exception -->Line_14 $$ Assert.assertEquals(new Integer(1), (Integer) firstOne.get(WAITING_S, TimeUnit.SECONDS))[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_16 $$ pool.shutdown()[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_15 $$ Assert.assertEquals(new Integer(2), (Integer) otherOne.get(WAITING_S, TimeUnit.SECONDS))[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_9 $$ Future<?> firstOne = pool.submit(new SingletonCallableWrite(letsWait, waitForOtherOne))[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_17 $$ pool2.shutdown()[ CD ]
Line_8 $$ CountDownLatch letsWait = new CountDownLatch(1)-->Line_10 $$ letsWait.await(WAITING_S, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_8 $$ CountDownLatch letsWait = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_3 $$ final SingletonBean singleton = lookup(SingletonBean.class.getSimpleName(), SingletonBean.class)[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_7 $$ final CountDownLatch waitForOtherOne = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_5 $$ ExecutorService pool = Executors.newSingleThreadExecutor()[ CD ]
Line_3 $$ final SingletonBean singleton = lookup(SingletonBean.class.getSimpleName(), SingletonBean.class)-->Line_4 $$ singleton.resetCalled()[ FD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_10 $$ letsWait.await(WAITING_S, TimeUnit.SECONDS)[ CD ]
Line_5 $$ ExecutorService pool = Executors.newSingleThreadExecutor()-->Line_9 $$ Future<?> firstOne = pool.submit(new SingletonCallableWrite(letsWait, waitForOtherOne))[ FD ]
Line_7 $$ final CountDownLatch waitForOtherOne = new CountDownLatch(1)-->Line_13 $$ waitForOtherOne.countDown()[ FD ]
Line_6 $$ ExecutorService pool2 = Executors.newSingleThreadExecutor()-->Line_12 $$ Future<?> otherOne = pool2.submit(new SingletonCallableWrite(letsWait, null))[ FD ]
Line_12 $$ Future<?> otherOne = pool2.submit(new SingletonCallableWrite(letsWait, null))-->Line_15 $$ Assert.assertEquals(new Integer(2), (Integer) otherOne.get(WAITING_S, TimeUnit.SECONDS))[ FD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_11 $$ letsWait = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_4 $$ singleton.resetCalled()[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_13 $$ waitForOtherOne.countDown()[ CD ]
Line_5 $$ ExecutorService pool = Executors.newSingleThreadExecutor()-->Line_16 $$ pool.shutdown()[ FD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_6 $$ ExecutorService pool2 = Executors.newSingleThreadExecutor()[ CD ]
Line_2 $$ public void testWriteCall() throws Exception -->Line_12 $$ Future<?> otherOne = pool2.submit(new SingletonCallableWrite(letsWait, null))[ CD ]
Line_8 $$ CountDownLatch letsWait = new CountDownLatch(1)-->Line_11 $$ letsWait = new CountDownLatch(1)[ FD ]
Line_6 $$ ExecutorService pool2 = Executors.newSingleThreadExecutor()-->Line_17 $$ pool2.shutdown()[ FD ]
Line_9 $$ Future<?> firstOne = pool.submit(new SingletonCallableWrite(letsWait, waitForOtherOne))-->Line_14 $$ Assert.assertEquals(new Integer(1), (Integer) firstOne.get(WAITING_S, TimeUnit.SECONDS))[ FD ]
