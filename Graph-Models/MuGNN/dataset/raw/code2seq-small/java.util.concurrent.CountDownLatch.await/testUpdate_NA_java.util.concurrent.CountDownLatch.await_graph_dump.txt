Line_2 $$ public void testUpdate() throws Exception -->Line_74 $$ SessionImplementor s3 = mockedSession()[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_9 $$ SessionImplementor s2 = mockedSession()[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_11 $$ sleep(250)[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_12 $$ final CountDownLatch readLatch = new CountDownLatch(1)[ CD ]
Line_6 $$ final Object KEY = generateNextKey()-->Line_23 $$ doUpdate(localAccessStrategy, session, KEY, VALUE2, 2)[ FD ]
Line_12 $$ final CountDownLatch readLatch = new CountDownLatch(1)-->Line_25 $$ readLatch.countDown()[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_73 $$ assertThreadsRanCleanly()[ CD ]
Line_6 $$ final Object KEY = generateNextKey()-->Line_75 $$ assertEquals("Correct node1 value", VALUE2, localAccessStrategy.get(s3, KEY, s3.getTimestamp()))[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_15 $$ Thread updater = new Thread("testUpdate-updater") [ CD ]
Line_18 $$ SessionImplementor session = mockedSession()-->Line_23 $$ doUpdate(localAccessStrategy, session, KEY, VALUE2, 2)[ FD ]
Line_6 $$ final Object KEY = generateNextKey()-->Line_10 $$ remoteAccessStrategy.putFromLoad(s2, KEY, VALUE1, s2.getTimestamp(), 1)[ FD ]
Line_13 $$ final CountDownLatch commitLatch = new CountDownLatch(1)-->Line_62 $$ commitLatch.countDown()[ FD ]
Line_12 $$ final CountDownLatch readLatch = new CountDownLatch(1)-->Line_37 $$ readLatch.countDown()[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_3 $$ if (accessType == AccessType.READ_ONLY) [ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_69 $$ reader.setDaemon(true)[ CD ]
Line_14 $$ final CountDownLatch completionLatch = new CountDownLatch(2)-->Line_40 $$ completionLatch.countDown()[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_78 $$ assertEquals("Correct node2 value", expected, remoteAccessStrategy.get(s4, KEY, s4.getTimestamp()))[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_72 $$ assertTrue(completionLatch.await(2, TimeUnit.SECONDS))[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_14 $$ final CountDownLatch completionLatch = new CountDownLatch(2)[ CD ]
Line_15 $$ Thread updater = new Thread("testUpdate-updater") -->Line_68 $$ updater.setDaemon(true)[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_6 $$ final Object KEY = generateNextKey()[ CD ]
Line_18 $$ SessionImplementor session = mockedSession()-->Line_19 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_18 $$ SessionImplementor session = mockedSession()-->Line_53 $$ assertEquals("Correct value", expected, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_70 $$ updater.start()[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_8 $$ localAccessStrategy.putFromLoad(s1, KEY, VALUE1, s1.getTimestamp(), 1)[ CD ]
Line_15 $$ Thread updater = new Thread("testUpdate-updater") -->Line_70 $$ updater.start()[ FD ]
Line_18 $$ SessionImplementor session = mockedSession()-->Line_48 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_47 $$ SessionImplementor session = mockedSession()-->Line_48 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_52 $$ Object expected = isTransactional() || accessType == AccessType.NONSTRICT_READ_WRITE ? VALUE1 : null-->Line_53 $$ assertEquals("Correct value", expected, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_12 $$ final CountDownLatch readLatch = new CountDownLatch(1)-->Line_36 $$ if (readLatch.getCount() > 0) [ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_68 $$ updater.setDaemon(true)[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_13 $$ final CountDownLatch commitLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_71 $$ reader.start()[ CD ]
Line_14 $$ final CountDownLatch completionLatch = new CountDownLatch(2)-->Line_64 $$ completionLatch.countDown()[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_77 $$ SessionImplementor s4 = mockedSession()[ CD ]
Line_52 $$ Object expected = isTransactional() || accessType == AccessType.NONSTRICT_READ_WRITE ? VALUE1 : null-->Line_78 $$ assertEquals("Correct node2 value", expected, remoteAccessStrategy.get(s4, KEY, s4.getTimestamp()))[ FD ]
Line_6 $$ final Object KEY = generateNextKey()-->Line_21 $$ assertEquals("Correct initial value", VALUE1, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_7 $$ SessionImplementor s1 = mockedSession()-->Line_8 $$ localAccessStrategy.putFromLoad(s1, KEY, VALUE1, s1.getTimestamp(), 1)[ FD ]
Line_6 $$ final Object KEY = generateNextKey()-->Line_8 $$ localAccessStrategy.putFromLoad(s1, KEY, VALUE1, s1.getTimestamp(), 1)[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_10 $$ remoteAccessStrategy.putFromLoad(s2, KEY, VALUE1, s2.getTimestamp(), 1)[ CD ]
Line_3 $$ if (accessType == AccessType.READ_ONLY) -->Line_4 $$ return[ CD ]
Line_6 $$ final Object KEY = generateNextKey()-->Line_53 $$ assertEquals("Correct value", expected, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_75 $$ assertEquals("Correct node1 value", VALUE2, localAccessStrategy.get(s3, KEY, s3.getTimestamp()))[ CD ]
Line_12 $$ final CountDownLatch readLatch = new CountDownLatch(1)-->Line_50 $$ readLatch.await()[ FD ]
Line_6 $$ final Object KEY = generateNextKey()-->Line_78 $$ assertEquals("Correct node2 value", expected, remoteAccessStrategy.get(s4, KEY, s4.getTimestamp()))[ FD ]
Line_18 $$ SessionImplementor session = mockedSession()-->Line_21 $$ assertEquals("Correct initial value", VALUE1, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_9 $$ SessionImplementor s2 = mockedSession()-->Line_10 $$ remoteAccessStrategy.putFromLoad(s2, KEY, VALUE1, s2.getTimestamp(), 1)[ FD ]
Line_36 $$ if (readLatch.getCount() > 0) -->Line_37 $$ readLatch.countDown()[ CD ]
Line_2 $$ public void testUpdate() throws Exception -->Line_7 $$ SessionImplementor s1 = mockedSession()[ CD ]
Line_47 $$ SessionImplementor session = mockedSession()-->Line_53 $$ assertEquals("Correct value", expected, localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_13 $$ final CountDownLatch commitLatch = new CountDownLatch(1)-->Line_27 $$ commitLatch.await()[ FD ]
Line_14 $$ final CountDownLatch completionLatch = new CountDownLatch(2)-->Line_72 $$ assertTrue(completionLatch.await(2, TimeUnit.SECONDS))[ FD ]
