Line_38 $$ if (shr.getIndex().equals("short_delay")) -->Line_41 $$ longDelayUnassignedReplica = shr[ CD ]
Line_28 $$ final long baseTime = System.nanoTime()-->Line_31 $$ allocation.setNanoTimeOverride(baseTime)[ FD ]
Line_20 $$ ShardRouting longDelayReplica = null-->Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()[ FD ]
Line_12 $$ ShardRouting shortDelayReplica = null-->Line_19 $$ assertNotNull(shortDelayReplica)[ FD ]
Line_51 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_54 $$ latch.await()[ FD ]
Line_37 $$ for (ShardRouting shr : unassigned) -->Line_41 $$ longDelayUnassignedReplica = shr[ FD ]
Line_48 $$ RoutingService routingService = new RoutingService(Settings.EMPTY, testThreadPool, clusterService, allocation)-->Line_53 $$ routingService.clusterChanged(new ClusterChangedEvent("test", newState, prevState))[ FD ]
Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_21 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("long_delay")) [ FD ]
Line_15 $$ shortDelayReplica = shardRouting-->Line_44 $$ assertTrue(shortDelayReplica.isSameShard(shortDelayUnassignedReplica))[ FD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_13 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("short_delay")) [ FD ]
Line_13 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("short_delay")) -->Line_23 $$ longDelayReplica = shardRouting[ FD ]
Line_41 $$ longDelayUnassignedReplica = shr-->Line_45 $$ assertTrue(longDelayReplica.isSameShard(longDelayUnassignedReplica))[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_21 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("long_delay")) [ FD ]
Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_33 $$ RoutingNodes.UnassignedShards unassigned = clusterState.getRoutingNodes().unassigned()[ FD ]
Line_36 $$ ShardRouting longDelayUnassignedReplica = null-->Line_41 $$ longDelayUnassignedReplica = shr[ FD ]
Line_47 $$ TestClusterService clusterService = new TestClusterService(newState, testThreadPool)-->Line_52 $$ clusterService.addLast( event -> latch.countDown())[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_11 $$ assertThat("all shards should be started", clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(4))[ FD ]
Line_33 $$ RoutingNodes.UnassignedShards unassigned = clusterState.getRoutingNodes().unassigned()-->Line_34 $$ assertEquals(2, unassigned.size())[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_33 $$ RoutingNodes.UnassignedShards unassigned = clusterState.getRoutingNodes().unassigned()[ FD ]
Line_15 $$ shortDelayReplica = shardRouting-->Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()[ FD ]
Line_5 $$ MockAllocationService allocation = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator())-->Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()[ FD ]
Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()[ FD ]
Line_14 $$ if (shardRouting.primary() == false) -->Line_15 $$ shortDelayReplica = shardRouting[ CD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_21 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("long_delay")) [ FD ]
Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()[ FD ]
Line_5 $$ MockAllocationService allocation = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator())-->Line_50 $$ allocation.setNanoTimeOverride(baseTime + TimeValue.timeValueSeconds(1).nanos())[ FD ]
Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_13 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("short_delay")) [ FD ]
Line_12 $$ ShardRouting shortDelayReplica = null-->Line_15 $$ shortDelayReplica = shardRouting[ FD ]
Line_23 $$ longDelayReplica = shardRouting-->Line_27 $$ assertNotNull(longDelayReplica)[ FD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()[ FD ]
Line_13 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("short_delay")) -->Line_22 $$ if (shardRouting.primary() == false) [ FD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_11 $$ assertThat("all shards should be started", clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(4))[ FD ]
Line_5 $$ MockAllocationService allocation = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator())-->Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_13 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("short_delay")) [ FD ]
Line_3 $$ final ThreadPool testThreadPool = new ThreadPool(getTestName())-->Line_57 $$ terminate(testThreadPool)[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_32 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()[ FD ]
Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_11 $$ assertThat("all shards should be started", clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(4))[ FD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_32 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()[ FD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_33 $$ RoutingNodes.UnassignedShards unassigned = clusterState.getRoutingNodes().unassigned()[ FD ]
Line_12 $$ ShardRouting shortDelayReplica = null-->Line_44 $$ assertTrue(shortDelayReplica.isSameShard(shortDelayUnassignedReplica))[ FD ]
Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_21 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("long_delay")) [ FD ]
Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()[ FD ]
Line_12 $$ ShardRouting shortDelayReplica = null-->Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()[ FD ]
Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()[ FD ]
Line_48 $$ RoutingService routingService = new RoutingService(Settings.EMPTY, testThreadPool, clusterService, allocation)-->Line_49 $$ routingService.start()[ FD ]
Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_33 $$ RoutingNodes.UnassignedShards unassigned = clusterState.getRoutingNodes().unassigned()[ FD ]
Line_35 $$ ShardRouting shortDelayUnassignedReplica = null-->Line_44 $$ assertTrue(shortDelayReplica.isSameShard(shortDelayUnassignedReplica))[ FD ]
Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_13 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("short_delay")) [ FD ]
Line_32 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_33 $$ RoutingNodes.UnassignedShards unassigned = clusterState.getRoutingNodes().unassigned()[ FD ]
Line_22 $$ if (shardRouting.primary() == false) -->Line_23 $$ longDelayReplica = shardRouting[ CD ]
Line_35 $$ ShardRouting shortDelayUnassignedReplica = null-->Line_39 $$ shortDelayUnassignedReplica = shr[ FD ]
Line_20 $$ ShardRouting longDelayReplica = null-->Line_27 $$ assertNotNull(longDelayReplica)[ FD ]
Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_11 $$ assertThat("all shards should be started", clusterState.getRoutingNodes().shardsWithState(STARTED).size(), equalTo(4))[ FD ]
Line_51 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_52 $$ latch.countDown()[ FD ]
Line_36 $$ ShardRouting longDelayUnassignedReplica = null-->Line_45 $$ assertTrue(longDelayReplica.isSameShard(longDelayUnassignedReplica))[ FD ]
Line_20 $$ ShardRouting longDelayReplica = null-->Line_23 $$ longDelayReplica = shardRouting[ FD ]
Line_5 $$ MockAllocationService allocation = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator())-->Line_31 $$ allocation.setNanoTimeOverride(baseTime)[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()[ FD ]
Line_6 $$ MetaData metaData = MetaData.builder().put(IndexMetaData.builder("short_delay").settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING, "100ms")).numberOfShards(1).numberOfReplicas(1)).put(IndexMetaData.builder("long_delay").settings(settings(Version.CURRENT).put(UnassignedInfo.INDEX_DELAYED_NODE_LEFT_TIMEOUT_SETTING, "10s")).numberOfShards(1).numberOfReplicas(1)).build()-->Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()[ FD ]
Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()-->Line_32 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()[ FD ]
Line_15 $$ shortDelayReplica = shardRouting-->Line_19 $$ assertNotNull(shortDelayReplica)[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_9 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()[ FD ]
Line_2 $$ public void testDelayedUnassignedScheduleRerouteAfterDelayedReroute() throws Exception -->Line_3 $$ final ThreadPool testThreadPool = new ThreadPool(getTestName())[ CD ]
Line_23 $$ longDelayReplica = shardRouting-->Line_45 $$ assertTrue(longDelayReplica.isSameShard(longDelayUnassignedReplica))[ FD ]
Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_32 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()[ FD ]
Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()-->Line_33 $$ RoutingNodes.UnassignedShards unassigned = clusterState.getRoutingNodes().unassigned()[ FD ]
Line_20 $$ ShardRouting longDelayReplica = null-->Line_45 $$ assertTrue(longDelayReplica.isSameShard(longDelayUnassignedReplica))[ FD ]
Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()-->Line_32 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()[ FD ]
Line_23 $$ longDelayReplica = shardRouting-->Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()[ FD ]
Line_5 $$ MockAllocationService allocation = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator())-->Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()[ FD ]
Line_13 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("short_delay")) -->Line_14 $$ if (shardRouting.primary() == false) [ FD ]
Line_48 $$ RoutingService routingService = new RoutingService(Settings.EMPTY, testThreadPool, clusterService, allocation)-->Line_55 $$ assertThat(routingService.getMinDelaySettingAtLastSchedulingNanos(), equalTo(TimeValue.timeValueSeconds(10).nanos()))[ FD ]
Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()-->Line_10 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.applyStartedShards(clusterState, clusterState.getRoutingNodes().shardsWithState(INITIALIZING))).build()[ FD ]
Line_37 $$ for (ShardRouting shr : unassigned) -->Line_38 $$ if (shr.getIndex().equals("short_delay")) [ FD ]
Line_13 $$ for (ShardRouting shardRouting : clusterState.getRoutingNodes().routingTable().allShards("short_delay")) -->Line_15 $$ shortDelayReplica = shardRouting[ FD ]
Line_39 $$ shortDelayUnassignedReplica = shr-->Line_44 $$ assertTrue(shortDelayReplica.isSameShard(shortDelayUnassignedReplica))[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_8 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()[ FD ]
Line_7 $$ ClusterState clusterState = ClusterState.builder(ClusterName.DEFAULT).metaData(metaData).routingTable(RoutingTable.builder().addAsNew(metaData.index("short_delay")).addAsNew(metaData.index("long_delay")).build()).nodes(DiscoveryNodes.builder().put(newNode("node0", singletonMap("data", Boolean.FALSE.toString()))).localNodeId("node0").masterNodeId("node0").put(newNode("node1")).put(newNode("node2")).put(newNode("node3")).put(newNode("node4"))).build()-->Line_30 $$ clusterState = ClusterState.builder(clusterState).nodes(DiscoveryNodes.builder(clusterState.nodes()).remove(shortDelayReplica.currentNodeId()).remove(longDelayReplica.currentNodeId())).build()[ FD ]
Line_38 $$ if (shr.getIndex().equals("short_delay")) -->Line_39 $$ shortDelayUnassignedReplica = shr[ CD ]
Line_5 $$ MockAllocationService allocation = createAllocationService(Settings.EMPTY, new DelayedShardsMockGatewayAllocator())-->Line_32 $$ clusterState = ClusterState.builder(clusterState).routingResult(allocation.reroute(clusterState, "reroute")).build()[ FD ]
Line_37 $$ for (ShardRouting shr : unassigned) -->Line_39 $$ shortDelayUnassignedReplica = shr[ FD ]
