Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_4 $$ String threadName = Thread.currentThread().getName()[ CD ]
Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_9 $$ countDownLatch.await(2, TimeUnit.SECONDS)[ CD ]
Line_6 $$ SimpleService listener = this.context.getBean(SimpleService.class)-->Line_10 $$ this.eventCollector.assertEvent(listener, event)[ FD ]
Line_5 $$ AnotherTestEvent event = new AnotherTestEvent(this, threadName)-->Line_10 $$ this.eventCollector.assertEvent(listener, event)[ FD ]
Line_6 $$ SimpleService listener = this.context.getBean(SimpleService.class)-->Line_7 $$ this.eventCollector.assertNoEventReceived(listener)[ FD ]
Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_10 $$ this.eventCollector.assertEvent(listener, event)[ CD ]
Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_5 $$ AnotherTestEvent event = new AnotherTestEvent(this, threadName)[ CD ]
Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_8 $$ this.context.publishEvent(event)[ CD ]
Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_3 $$ doLoad(AsyncConfigurationWithInterfaces.class, SimpleProxyTestBean.class)[ CD ]
Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_7 $$ this.eventCollector.assertNoEventReceived(listener)[ CD ]
Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_6 $$ SimpleService listener = this.context.getBean(SimpleService.class)[ CD ]
Line_2 $$ public void asyncProcessingAppliedWithInterfaceProxy() throws InterruptedException -->Line_11 $$ this.eventCollector.assertTotalEventsCount(1)[ CD ]
Line_5 $$ AnotherTestEvent event = new AnotherTestEvent(this, threadName)-->Line_8 $$ this.context.publishEvent(event)[ FD ]
