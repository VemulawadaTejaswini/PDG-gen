Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_29 $$ BlockManagerTestUtil.updateState(nn1.getNamesystem().getBlockManager())[ CD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_25 $$ cluster.transitionToStandby(0)[ CD ]
Line_3 $$ final CountDownLatch brFinished = new CountDownLatch(1)-->Line_9 $$ brFinished.countDown()[ FD ]
Line_3 $$ final CountDownLatch brFinished = new CountDownLatch(1)-->Line_28 $$ brFinished.await()[ FD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_31 $$ assertEquals(0, nn1.getNamesystem().getCorruptReplicaBlocks())[ CD ]
Line_4 $$ DelayAnswer delayer = new GenericTestUtils.DelayAnswer(LOG) -->Line_27 $$ delayer.proceed()[ FD ]
Line_4 $$ DelayAnswer delayer = new GenericTestUtils.DelayAnswer(LOG) -->Line_7 $$ return super.passThrough(invocation)[ FD ]
Line_4 $$ DelayAnswer delayer = new GenericTestUtils.DelayAnswer(LOG) -->Line_19 $$ Mockito.doAnswer(delayer).when(spy).blockReport(Mockito.<DatanodeRegistration>anyObject(), Mockito.anyString(), Mockito.<StorageBlockReport[]>anyObject())[ FD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_26 $$ cluster.transitionToActive(1)[ CD ]
Line_4 $$ DelayAnswer delayer = new GenericTestUtils.DelayAnswer(LOG) -->Line_21 $$ delayer.waitForCall()[ FD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_32 $$ assertEquals(0, nn2.getNamesystem().getCorruptReplicaBlocks())[ CD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_3 $$ final CountDownLatch brFinished = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_28 $$ brFinished.await()[ CD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_30 $$ BlockManagerTestUtil.updateState(nn2.getNamesystem().getBlockManager())[ CD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_33 $$ DFSTestUtil.readFile(fs, TEST_FILE_PATH)[ CD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_4 $$ DelayAnswer delayer = new GenericTestUtils.DelayAnswer(LOG) [ CD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_27 $$ delayer.proceed()[ CD ]
Line_2 $$ public void testRBWReportArrivesAfterEdits() throws Exception -->Line_13 $$ FSDataOutputStream out = fs.create(TEST_FILE_PATH)[ CD ]
