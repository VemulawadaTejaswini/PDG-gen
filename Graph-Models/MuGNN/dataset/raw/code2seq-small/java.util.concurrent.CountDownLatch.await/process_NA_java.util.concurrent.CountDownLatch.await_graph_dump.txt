Line_2 $$ public R process(P payload) -->Line_5 $$ workerProcess.start()[ CD ]
Line_2 $$ public R process(P payload) -->Line_8 $$ workerProcess.getConnection().connect()[ CD ]
Line_4 $$ Receiver receiver = new Receiver(latch)-->Line_6 $$ workerProcess.getConnection().addIncoming(RhinoWorkerClientProtocol.class, receiver)[ FD ]
Line_2 $$ public R process(P payload) -->Line_7 $$ RhinoClientWorkerProtocol<P> worker = workerProcess.getConnection().addOutgoing(RhinoClientWorkerProtocol.class)[ CD ]
Line_22 $$ Serializable result = receiver.result-->Line_23 $$ if (result == null) [ FD ]
Line_7 $$ RhinoClientWorkerProtocol<P> worker = workerProcess.getConnection().addOutgoing(RhinoClientWorkerProtocol.class)-->Line_9 $$ worker.process(payload)[ FD ]
Line_23 $$ if (result == null) -->Line_24 $$ return null[ CD ]
Line_2 $$ public R process(P payload) -->Line_22 $$ Serializable result = receiver.result[ CD ]
Line_2 $$ public R process(P payload) -->Line_23 $$ if (result == null) [ CD ]
Line_22 $$ Serializable result = receiver.result-->Line_26 $$ if (resultType.isInstance(result)) [ FD ]
Line_22 $$ Serializable result = receiver.result-->Line_27 $$ return resultType.cast(result)[ FD ]
Line_2 $$ public R process(P payload) -->Line_6 $$ workerProcess.getConnection().addIncoming(RhinoWorkerClientProtocol.class, receiver)[ CD ]
Line_2 $$ public R process(P payload) -->Line_9 $$ worker.process(payload)[ CD ]
Line_2 $$ public R process(P payload) -->Line_19 $$ if (receiver.executionError != null) [ CD ]
Line_22 $$ Serializable result = receiver.result-->Line_29 $$ throw new IllegalStateException(String.format("Was expecting result of type %s, received %s", resultType, result.getClass()))[ FD ]
Line_2 $$ public R process(P payload) -->Line_15 $$ workerProcess.waitForStop()[ CD ]
Line_2 $$ public R process(P payload) -->Line_3 $$ CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_3 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_11 $$ latch.await()[ FD ]
Line_2 $$ public R process(P payload) -->Line_9 $$ worker.process(payload)[ FD ]
Line_2 $$ public R process(P payload) -->Line_16 $$ if (receiver.initialisationError != null) [ CD ]
Line_26 $$ if (resultType.isInstance(result)) -->Line_27 $$ return resultType.cast(result)[ CD ]
Line_2 $$ public R process(P payload) -->Line_4 $$ Receiver receiver = new Receiver(latch)[ CD ]
Line_2 $$ public R process(P payload) -->Line_26 $$ if (resultType.isInstance(result)) [ CD ]
