Line_24 $$ SearchResponse searchResponse = client().prepareSearch(indexName).get()-->Line_46 $$ assertHitCount(searchResponse, numDocs)[ FD ]
Line_3 $$ final String indexName = "test"-->Line_13 $$ client().admin().indices().prepareCreate(indexName).setSettings(Settings.builder().put(FilterAllocationDecider.INDEX_ROUTING_INCLUDE_GROUP + "color", "blue").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)).get()[ FD ]
Line_3 $$ final String indexName = "test"-->Line_17 $$ requests.add(client().prepareIndex(indexName, "type").setCreate(true).setSource("[ FD ]
Line_15 $$ int numDocs = scaledRandomIntBetween(25, 250)-->Line_16 $$ for (int i = 0; i < numDocs; i++) [ FD ]
Line_24 $$ SearchResponse searchResponse = client().prepareSearch(indexName).get()-->Line_25 $$ assertHitCount(searchResponse, numDocs)[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_24 $$ SearchResponse searchResponse = client().prepareSearch(indexName).get()[ CD ]
Line_22 $$ final String blueNodeId = internalCluster().getInstance(DiscoveryService.class, blueNodeName).localNode().id()-->Line_23 $$ assertFalse(stateResponse.getState().getRoutingNodes().node(blueNodeId).isEmpty())[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_33 $$ TransportService redTransportService = internalCluster().getInstance(TransportService.class, redNodeName)[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_7 $$ InternalTestCluster.Async<String> blueFuture = internalCluster().startNodeAsync(Settings.builder().put("node.color", "blue").put(nodeSettings).build())[ CD ]
Line_34 $$ TransportService blueTransportService = internalCluster().getInstance(TransportService.class, blueNodeName)-->Line_37 $$ redMockTransportService.addDelegate(blueTransportService, new RecoveryActionBlocker(dropRequests, recoveryActionToBlock, redMockTransportService.original(), requestBlocked))[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_45 $$ searchResponse = client(redNodeName).prepareSearch(indexName).setPreference("_local").get()[ CD ]
Line_24 $$ SearchResponse searchResponse = client().prepareSearch(indexName).get()-->Line_45 $$ searchResponse = client(redNodeName).prepareSearch(indexName).setPreference("_local").get()[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_31 $$ MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)[ CD ]
Line_31 $$ MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)-->Line_36 $$ blueMockTransportService.addDelegate(redTransportService, new RecoveryActionBlocker(dropRequests, recoveryActionToBlock, blueMockTransportService.original(), requestBlocked))[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_37 $$ redMockTransportService.addDelegate(blueTransportService, new RecoveryActionBlocker(dropRequests, recoveryActionToBlock, redMockTransportService.original(), requestBlocked))[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_22 $$ final String blueNodeId = internalCluster().getInstance(DiscoveryService.class, blueNodeName).localNode().id()[ CD ]
Line_33 $$ TransportService redTransportService = internalCluster().getInstance(TransportService.class, redNodeName)-->Line_36 $$ blueMockTransportService.addDelegate(redTransportService, new RecoveryActionBlocker(dropRequests, recoveryActionToBlock, blueMockTransportService.original(), requestBlocked))[ FD ]
Line_15 $$ int numDocs = scaledRandomIntBetween(25, 250)-->Line_46 $$ assertHitCount(searchResponse, numDocs)[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_29 $$ final boolean dropRequests = randomBoolean()[ CD ]
Line_9 $$ final String blueNodeName = blueFuture.get()-->Line_34 $$ TransportService blueTransportService = internalCluster().getInstance(TransportService.class, blueNodeName)[ FD ]
Line_16 $$ for (int i = 0; i < numDocs; i++) -->Line_17 $$ requests.add(client().prepareIndex(indexName, "type").setCreate(true).setSource("[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_6 $$ internalCluster().startNode(nodeSettings)[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_36 $$ blueMockTransportService.addDelegate(redTransportService, new RecoveryActionBlocker(dropRequests, recoveryActionToBlock, blueMockTransportService.original(), requestBlocked))[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_46 $$ assertHitCount(searchResponse, numDocs)[ CD ]
Line_45 $$ searchResponse = client(redNodeName).prepareSearch(indexName).setPreference("_local").get()-->Line_46 $$ assertHitCount(searchResponse, numDocs)[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_15 $$ int numDocs = scaledRandomIntBetween(25, 250)[ CD ]
Line_31 $$ MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)-->Line_42 $$ blueMockTransportService.clearAllRules()[ FD ]
Line_10 $$ final String redNodeName = redFuture.get()-->Line_32 $$ MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_9 $$ final String blueNodeName = blueFuture.get()[ CD ]
Line_3 $$ final String indexName = "test"-->Line_39 $$ client().admin().indices().prepareUpdateSettings(indexName).setSettings(Settings.builder().put(FilterAllocationDecider.INDEX_ROUTING_INCLUDE_GROUP + "color", "red,blue").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)).get()[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_13 $$ client().admin().indices().prepareCreate(indexName).setSettings(Settings.builder().put(FilterAllocationDecider.INDEX_ROUTING_INCLUDE_GROUP + "color", "blue").put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)).get()[ CD ]
Line_35 $$ final CountDownLatch requestBlocked = new CountDownLatch(1)-->Line_40 $$ requestBlocked.await()[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_42 $$ blueMockTransportService.clearAllRules()[ CD ]
Line_4 $$ final Settings nodeSettings = Settings.builder().put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), "100ms").put(RecoverySettings.INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING.getKey(), "1s").put(MockFSDirectoryService.RANDOM_PREVENT_DOUBLE_WRITE, false).build()-->Line_7 $$ InternalTestCluster.Async<String> blueFuture = internalCluster().startNodeAsync(Settings.builder().put("node.color", "blue").put(nodeSettings).build())[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_20 $$ ensureSearchable(indexName)[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_23 $$ assertFalse(stateResponse.getState().getRoutingNodes().node(blueNodeId).isEmpty())[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_21 $$ ClusterStateResponse stateResponse = client().admin().cluster().prepareState().get()[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_44 $$ ensureGreen()[ CD ]
Line_10 $$ final String redNodeName = redFuture.get()-->Line_45 $$ searchResponse = client(redNodeName).prepareSearch(indexName).setPreference("_local").get()[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_28 $$ final String recoveryActionToBlock = randomFrom(recoveryActions)[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_10 $$ final String redNodeName = redFuture.get()[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_3 $$ final String indexName = "test"[ CD ]
Line_9 $$ final String blueNodeName = blueFuture.get()-->Line_31 $$ MockTransportService blueMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, blueNodeName)[ FD ]
Line_4 $$ final Settings nodeSettings = Settings.builder().put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), "100ms").put(RecoverySettings.INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING.getKey(), "1s").put(MockFSDirectoryService.RANDOM_PREVENT_DOUBLE_WRITE, false).build()-->Line_6 $$ internalCluster().startNode(nodeSettings)[ FD ]
Line_32 $$ MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)-->Line_37 $$ redMockTransportService.addDelegate(blueTransportService, new RecoveryActionBlocker(dropRequests, recoveryActionToBlock, redMockTransportService.original(), requestBlocked))[ FD ]
Line_14 $$ List<IndexRequestBuilder> requests = new ArrayList()-->Line_17 $$ requests.add(client().prepareIndex(indexName, "type").setCreate(true).setSource("[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_12 $$ assertThat(response.isTimedOut(), is(false))[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_16 $$ for (int i = 0; i < numDocs; i++) [ CD ]
Line_3 $$ final String indexName = "test"-->Line_20 $$ ensureSearchable(indexName)[ FD ]
Line_4 $$ final Settings nodeSettings = Settings.builder().put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), "100ms").put(RecoverySettings.INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING.getKey(), "1s").put(MockFSDirectoryService.RANDOM_PREVENT_DOUBLE_WRITE, false).build()-->Line_8 $$ InternalTestCluster.Async<String> redFuture = internalCluster().startNodeAsync(Settings.builder().put("node.color", "red").put(nodeSettings).build())[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_11 $$ ClusterHealthResponse response = client().admin().cluster().prepareHealth().setWaitForNodes(">=3").get()[ CD ]
Line_8 $$ InternalTestCluster.Async<String> redFuture = internalCluster().startNodeAsync(Settings.builder().put("node.color", "red").put(nodeSettings).build())-->Line_10 $$ final String redNodeName = redFuture.get()[ FD ]
Line_9 $$ final String blueNodeName = blueFuture.get()-->Line_22 $$ final String blueNodeId = internalCluster().getInstance(DiscoveryService.class, blueNodeName).localNode().id()[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_34 $$ TransportService blueTransportService = internalCluster().getInstance(TransportService.class, blueNodeName)[ CD ]
Line_3 $$ final String indexName = "test"-->Line_24 $$ SearchResponse searchResponse = client().prepareSearch(indexName).get()[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_14 $$ List<IndexRequestBuilder> requests = new ArrayList()[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_35 $$ final CountDownLatch requestBlocked = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_43 $$ redMockTransportService.clearAllRules()[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_25 $$ assertHitCount(searchResponse, numDocs)[ CD ]
Line_11 $$ ClusterHealthResponse response = client().admin().cluster().prepareHealth().setWaitForNodes(">=3").get()-->Line_12 $$ assertThat(response.isTimedOut(), is(false))[ FD ]
Line_21 $$ ClusterStateResponse stateResponse = client().admin().cluster().prepareState().get()-->Line_23 $$ assertFalse(stateResponse.getState().getRoutingNodes().node(blueNodeId).isEmpty())[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_26 $$ String[] recoveryActions = new String[] [ CD ]
Line_10 $$ final String redNodeName = redFuture.get()-->Line_33 $$ TransportService redTransportService = internalCluster().getInstance(TransportService.class, redNodeName)[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_40 $$ requestBlocked.await()[ CD ]
Line_15 $$ int numDocs = scaledRandomIntBetween(25, 250)-->Line_25 $$ assertHitCount(searchResponse, numDocs)[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_8 $$ InternalTestCluster.Async<String> redFuture = internalCluster().startNodeAsync(Settings.builder().put("node.color", "red").put(nodeSettings).build())[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_32 $$ MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_19 $$ indexRandom(true, requests)[ CD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_39 $$ client().admin().indices().prepareUpdateSettings(indexName).setSettings(Settings.builder().put(FilterAllocationDecider.INDEX_ROUTING_INCLUDE_GROUP + "color", "red,blue").put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)).get()[ CD ]
Line_14 $$ List<IndexRequestBuilder> requests = new ArrayList()-->Line_19 $$ indexRandom(true, requests)[ FD ]
Line_32 $$ MockTransportService redMockTransportService = (MockTransportService) internalCluster().getInstance(TransportService.class, redNodeName)-->Line_43 $$ redMockTransportService.clearAllRules()[ FD ]
Line_3 $$ final String indexName = "test"-->Line_45 $$ searchResponse = client(redNodeName).prepareSearch(indexName).setPreference("_local").get()[ FD ]
Line_2 $$ public void testDisconnectsWhileRecovering() throws Exception -->Line_4 $$ final Settings nodeSettings = Settings.builder().put(RecoverySettings.INDICES_RECOVERY_RETRY_DELAY_NETWORK_SETTING.getKey(), "100ms").put(RecoverySettings.INDICES_RECOVERY_INTERNAL_ACTION_TIMEOUT_SETTING.getKey(), "1s").put(MockFSDirectoryService.RANDOM_PREVENT_DOUBLE_WRITE, false).build()[ CD ]
Line_7 $$ InternalTestCluster.Async<String> blueFuture = internalCluster().startNodeAsync(Settings.builder().put("node.color", "blue").put(nodeSettings).build())-->Line_9 $$ final String blueNodeName = blueFuture.get()[ FD ]
Line_26 $$ String[] recoveryActions = new String[] -->Line_28 $$ final String recoveryActionToBlock = randomFrom(recoveryActions)[ FD ]
