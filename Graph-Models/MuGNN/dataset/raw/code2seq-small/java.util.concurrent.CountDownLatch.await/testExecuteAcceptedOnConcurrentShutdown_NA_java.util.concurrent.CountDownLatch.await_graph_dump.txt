Line_10 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_11 $$ takeLock.lock()[ FD ]
Line_5 $$ final TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()-->Line_10 $$ ReentrantLock takeLock = taskQueue.getTakeLock()[ FD ]
Line_2 $$ public void testExecuteAcceptedOnConcurrentShutdown() throws InterruptedException -->Line_7 $$ Thread thread = new Thread() [ CD ]
Line_10 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_20 $$ takeLock.unlock()[ FD ]
Line_2 $$ public void testExecuteAcceptedOnConcurrentShutdown() throws InterruptedException -->Line_26 $$ thread.start()[ CD ]
Line_6 $$ final CountDownLatch executeLatch = new CountDownLatch(1)-->Line_27 $$ executeLatch.await()[ FD ]
Line_2 $$ public void testExecuteAcceptedOnConcurrentShutdown() throws InterruptedException -->Line_27 $$ executeLatch.await()[ CD ]
Line_6 $$ final CountDownLatch executeLatch = new CountDownLatch(1)-->Line_12 $$ executeLatch.countDown()[ FD ]
Line_4 $$ final ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 3, recordRejectedExecutionHandler, Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_30 $$ threadPoolExecutor.execute(markerBlockingJob)[ FD ]
Line_2 $$ public void testExecuteAcceptedOnConcurrentShutdown() throws InterruptedException -->Line_6 $$ final CountDownLatch executeLatch = new CountDownLatch(1)[ CD ]
Line_10 $$ ReentrantLock takeLock = taskQueue.getTakeLock()-->Line_14 $$ while (!takeLock.hasQueuedThreads()) [ FD ]
Line_2 $$ public void testExecuteAcceptedOnConcurrentShutdown() throws InterruptedException -->Line_4 $$ final ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 3, recordRejectedExecutionHandler, Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())[ CD ]
Line_4 $$ final ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 3, recordRejectedExecutionHandler, Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_18 $$ threadPoolExecutor.shutdown()[ FD ]
Line_3 $$ RecordRejectedExecutionHandler recordRejectedExecutionHandler = new RecordRejectedExecutionHandler()-->Line_31 $$ Assert.assertTrue(recordRejectedExecutionHandler.getRejectedList().isEmpty())[ FD ]
Line_14 $$ while (!takeLock.hasQueuedThreads()) -->Line_15 $$ Thread.sleep(1)[ CD ]
Line_2 $$ public void testExecuteAcceptedOnConcurrentShutdown() throws InterruptedException -->Line_5 $$ final TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()[ CD ]
Line_7 $$ Thread thread = new Thread() -->Line_26 $$ thread.start()[ FD ]
Line_5 $$ final TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()-->Line_17 $$ Assert.assertNotNull(taskQueue.take())[ FD ]
Line_4 $$ final ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 3, recordRejectedExecutionHandler, Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_33 $$ TestUtil.closePool(threadPoolExecutor)[ FD ]
Line_2 $$ public void testExecuteAcceptedOnConcurrentShutdown() throws InterruptedException -->Line_3 $$ RecordRejectedExecutionHandler recordRejectedExecutionHandler = new RecordRejectedExecutionHandler()[ CD ]
Line_4 $$ final ThreadPoolExecutor threadPoolExecutor = new ThreadPoolExecutor(1, 2, TestUtil.KEEPALIVE_TIME, TimeUnit.MILLISECONDS, true, 3, recordRejectedExecutionHandler, Executors.defaultThreadFactory(), new ThreadPoolHandlerAdapter())-->Line_5 $$ final TaskQueue<Runnable> taskQueue = threadPoolExecutor.getTaskQueue()[ FD ]
