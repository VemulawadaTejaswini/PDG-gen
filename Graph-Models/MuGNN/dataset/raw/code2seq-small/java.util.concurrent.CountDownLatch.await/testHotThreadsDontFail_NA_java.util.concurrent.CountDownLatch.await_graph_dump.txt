Line_6 $$ for (int i = 0; i < iters; i++) -->Line_7 $$ final String type[ CD ]
Line_23 $$ type = "wait"-->Line_32 $$ type = null[ FD ]
Line_8 $$ NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder = client().admin().cluster().prepareNodesHotThreads()-->Line_11 $$ nodesHotThreadsRequestBuilder.setInterval(timeValue)[ FD ]
Line_7 $$ final String type-->Line_30 $$ nodesHotThreadsRequestBuilder.setType(type)[ FD ]
Line_2 $$ public void testHotThreadsDontFail() throws ExecutionException, InterruptedException -->Line_6 $$ for (int i = 0; i < iters; i++) [ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_17 $$ if (randomBoolean()) [ CD ]
Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_62 $$ while (latch.getCount() > 0) [ FD ]
Line_26 $$ type = "block"-->Line_32 $$ type = null[ FD ]
Line_13 $$ if (randomBoolean()) -->Line_14 $$ nodesHotThreadsRequestBuilder.setThreads(rarely() ? randomIntBetween(500, 5000) : randomIntBetween(1, 500))[ CD ]
Line_23 $$ type = "wait"-->Line_26 $$ type = "block"[ FD ]
Line_2 $$ public void testHotThreadsDontFail() throws ExecutionException, InterruptedException -->Line_3 $$ createIndex("test")[ CD ]
Line_8 $$ NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder = client().admin().cluster().prepareNodesHotThreads()-->Line_16 $$ nodesHotThreadsRequestBuilder.setIgnoreIdleThreads(randomBoolean())[ FD ]
Line_26 $$ type = "block"-->Line_30 $$ nodesHotThreadsRequestBuilder.setType(type)[ FD ]
Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() -->Line_54 $$ logger.error("FAILED", e)[ FD ]
Line_8 $$ NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder = client().admin().cluster().prepareNodesHotThreads()-->Line_30 $$ nodesHotThreadsRequestBuilder.setType(type)[ FD ]
Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() -->Line_56 $$ latch.countDown()[ CD ]
Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() -->Line_54 $$ logger.error("FAILED", e)[ CD ]
Line_45 $$ success = true-->Line_47 $$ if (!success) [ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_61 $$ ensureSearchable()[ CD ]
Line_5 $$ final AtomicBoolean hasErrors = new AtomicBoolean(false)-->Line_48 $$ hasErrors.set(true)[ FD ]
Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() -->Line_40 $$ Map<String, NodeHotThreads> nodesMap = nodeHotThreads.getNodesMap()[ FD ]
Line_32 $$ type = null-->Line_30 $$ nodesHotThreadsRequestBuilder.setType(type)[ FD ]
Line_42 $$ for (NodeHotThreads ht : nodeHotThreads) -->Line_43 $$ assertNotNull(ht.getHotThreads())[ FD ]
Line_7 $$ final String type-->Line_29 $$ assertThat(type, notNullValue())[ FD ]
Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() -->Line_55 $$ hasErrors.set(true)[ CD ]
Line_17 $$ if (randomBoolean()) -->Line_29 $$ assertThat(type, notNullValue())[ CD ]
Line_40 $$ Map<String, NodeHotThreads> nodesMap = nodeHotThreads.getNodesMap()-->Line_41 $$ assertThat(nodesMap.size(), equalTo(cluster().size()))[ FD ]
Line_2 $$ public void testHotThreadsDontFail() throws ExecutionException, InterruptedException -->Line_5 $$ final AtomicBoolean hasErrors = new AtomicBoolean(false)[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_16 $$ nodesHotThreadsRequestBuilder.setIgnoreIdleThreads(randomBoolean())[ CD ]
Line_47 $$ if (!success) -->Line_48 $$ hasErrors.set(true)[ CD ]
Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() -->Line_37 $$ boolean success = false[ CD ]
Line_2 $$ public void testHotThreadsDontFail() throws ExecutionException, InterruptedException -->Line_4 $$ final int iters = scaledRandomIntBetween(2, 20)[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_13 $$ if (randomBoolean()) [ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_8 $$ NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder = client().admin().cluster().prepareNodesHotThreads()[ CD ]
Line_7 $$ final String type-->Line_20 $$ type = "cpu"[ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() [ CD ]
Line_20 $$ type = "cpu"-->Line_26 $$ type = "block"[ FD ]
Line_7 $$ final String type-->Line_23 $$ type = "wait"[ FD ]
Line_37 $$ boolean success = false-->Line_47 $$ if (!success) [ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_66 $$ assertThat(hasErrors.get(), is(false))[ CD ]
Line_37 $$ boolean success = false-->Line_45 $$ success = true[ FD ]
Line_9 $$ if (randomBoolean()) -->Line_10 $$ TimeValue timeValue = new TimeValue(rarely() ? randomIntBetween(500, 5000) : randomIntBetween(20, 500))[ CD ]
Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_65 $$ latch.await()[ FD ]
Line_10 $$ TimeValue timeValue = new TimeValue(rarely() ? randomIntBetween(500, 5000) : randomIntBetween(20, 500))-->Line_11 $$ nodesHotThreadsRequestBuilder.setInterval(timeValue)[ FD ]
Line_23 $$ type = "wait"-->Line_30 $$ nodesHotThreadsRequestBuilder.setType(type)[ FD ]
Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() -->Line_57 $$ fail()[ CD ]
Line_4 $$ final int iters = scaledRandomIntBetween(2, 20)-->Line_6 $$ for (int i = 0; i < iters; i++) [ FD ]
Line_26 $$ type = "block"-->Line_29 $$ assertThat(type, notNullValue())[ FD ]
Line_8 $$ NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder = client().admin().cluster().prepareNodesHotThreads()-->Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() [ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_60 $$ indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "value1"), client().prepareIndex("test", "type1", "2").setSource("field1", "value2"), client().prepareIndex("test", "type1", "3").setSource("field1", "value3"))[ CD ]
Line_23 $$ type = "wait"-->Line_29 $$ assertThat(type, notNullValue())[ FD ]
Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_56 $$ latch.countDown()[ FD ]
Line_17 $$ if (randomBoolean()) -->Line_32 $$ type = null[ CD ]
Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_50 $$ latch.countDown()[ FD ]
Line_8 $$ NodesHotThreadsRequestBuilder nodesHotThreadsRequestBuilder = client().admin().cluster().prepareNodesHotThreads()-->Line_14 $$ nodesHotThreadsRequestBuilder.setThreads(rarely() ? randomIntBetween(500, 5000) : randomIntBetween(1, 500))[ FD ]
Line_7 $$ final String type-->Line_26 $$ type = "block"[ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_62 $$ while (latch.getCount() > 0) [ CD ]
Line_32 $$ type = null-->Line_29 $$ assertThat(type, notNullValue())[ FD ]
Line_5 $$ final AtomicBoolean hasErrors = new AtomicBoolean(false)-->Line_55 $$ hasErrors.set(true)[ FD ]
Line_35 $$ nodesHotThreadsRequestBuilder.execute(new ActionListener<NodesHotThreadsResponse>() -->Line_39 $$ assertThat(nodeHotThreads, notNullValue())[ FD ]
Line_20 $$ type = "cpu"-->Line_30 $$ nodesHotThreadsRequestBuilder.setType(type)[ FD ]
Line_5 $$ final AtomicBoolean hasErrors = new AtomicBoolean(false)-->Line_66 $$ assertThat(hasErrors.get(), is(false))[ FD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_65 $$ latch.await()[ CD ]
Line_7 $$ final String type-->Line_32 $$ type = null[ FD ]
Line_17 $$ if (randomBoolean()) -->Line_30 $$ nodesHotThreadsRequestBuilder.setType(type)[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_20 $$ type = "cpu"-->Line_29 $$ assertThat(type, notNullValue())[ FD ]
Line_20 $$ type = "cpu"-->Line_32 $$ type = null[ FD ]
Line_62 $$ while (latch.getCount() > 0) -->Line_63 $$ assertHitCount(client().prepareSearch().setQuery(matchAllQuery()).setPostFilter(boolQuery().must(matchAllQuery()).mustNot(boolQuery().must(termQuery("field1", "value1")).must(termQuery("field1", "value2")))).get(), 3l)[ CD ]
Line_9 $$ if (randomBoolean()) -->Line_11 $$ nodesHotThreadsRequestBuilder.setInterval(timeValue)[ CD ]
Line_6 $$ for (int i = 0; i < iters; i++) -->Line_9 $$ if (randomBoolean()) [ CD ]
Line_20 $$ type = "cpu"-->Line_23 $$ type = "wait"[ FD ]
