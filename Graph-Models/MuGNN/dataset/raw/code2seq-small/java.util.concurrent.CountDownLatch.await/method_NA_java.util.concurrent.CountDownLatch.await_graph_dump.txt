Line_12 $$ Context context = new InitialContext()-->Line_13 $$ localSearchedBean = (SecuredStatelessLocal) context.lookup("java:module/" + SecuredStatelessBean.class.getSimpleName() + "!" + SecuredStatelessLocal.class.getName())[ FD ]
Line_18 $$ final Future<Boolean> future = localSearchedBean.localSecured(latchLocal)-->Line_20 $$ boolean result = future.get()[ FD ]
Line_20 $$ boolean result = future.get()-->Line_21 $$ Assert.assertTrue(result)[ FD ]
Line_2 $$ public Future<Boolean> method() throws InterruptedException, ExecutionException -->Line_21 $$ Assert.assertTrue(result)[ CD ]
Line_10 $$ SecuredStatelessLocal localSearchedBean = null-->Line_18 $$ final Future<Boolean> future = localSearchedBean.localSecured(latchLocal)[ FD ]
Line_10 $$ SecuredStatelessLocal localSearchedBean = null-->Line_13 $$ localSearchedBean = (SecuredStatelessLocal) context.lookup("java:module/" + SecuredStatelessBean.class.getSimpleName() + "!" + SecuredStatelessLocal.class.getName())[ FD ]
Line_2 $$ public Future<Boolean> method() throws InterruptedException, ExecutionException -->Line_10 $$ SecuredStatelessLocal localSearchedBean = null[ CD ]
Line_2 $$ public Future<Boolean> method() throws InterruptedException, ExecutionException -->Line_17 $$ final CountDownLatch latchLocal = new CountDownLatch(1)[ CD ]
Line_2 $$ public Future<Boolean> method() throws InterruptedException, ExecutionException -->Line_20 $$ boolean result = future.get()[ CD ]
Line_2 $$ public Future<Boolean> method() throws InterruptedException, ExecutionException -->Line_22 $$ return new AsyncResult<Boolean>(true)[ CD ]
Line_13 $$ localSearchedBean = (SecuredStatelessLocal) context.lookup("java:module/" + SecuredStatelessBean.class.getSimpleName() + "!" + SecuredStatelessLocal.class.getName())-->Line_18 $$ final Future<Boolean> future = localSearchedBean.localSecured(latchLocal)[ FD ]
Line_17 $$ final CountDownLatch latchLocal = new CountDownLatch(1)-->Line_18 $$ final Future<Boolean> future = localSearchedBean.localSecured(latchLocal)[ FD ]
Line_17 $$ final CountDownLatch latchLocal = new CountDownLatch(1)-->Line_19 $$ latchLocal.countDown()[ FD ]
Line_2 $$ public Future<Boolean> method() throws InterruptedException, ExecutionException -->Line_18 $$ final Future<Boolean> future = localSearchedBean.localSecured(latchLocal)[ CD ]
Line_2 $$ public Future<Boolean> method() throws InterruptedException, ExecutionException -->Line_19 $$ latchLocal.countDown()[ CD ]
