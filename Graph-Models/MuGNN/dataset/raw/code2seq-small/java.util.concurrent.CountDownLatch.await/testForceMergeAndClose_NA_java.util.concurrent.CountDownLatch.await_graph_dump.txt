Line_9 $$ Thread thread = new Thread() -->Line_46 $$ thread.join()[ FD ]
Line_6 $$ final InternalEngine engine = createEngine(store, createTempDir())-->Line_29 $$ engine.forceMerge(randomBoolean(), 1, false, randomBoolean(), randomBoolean())[ FD ]
Line_9 $$ Thread thread = new Thread() -->Line_38 $$ thread.start()[ FD ]
Line_17 $$ int i = 0-->Line_21 $$ i++[ FD ]
Line_18 $$ while (true) -->Line_26 $$ engine.refresh("test")[ CD ]
Line_20 $$ for (int j = 0; j < numDocs; j++) -->Line_23 $$ Engine.Index index = new Engine.Index(newUid(Integer.toString(i)), doc)[ CD ]
Line_6 $$ final InternalEngine engine = createEngine(store, createTempDir())-->Line_26 $$ engine.refresh("test")[ FD ]
Line_3 $$ int numIters = randomIntBetween(2, 10)-->Line_4 $$ for (int j = 0; j < numIters; j++) [ FD ]
Line_20 $$ for (int j = 0; j < numDocs; j++) -->Line_24 $$ engine.index(index)[ CD ]
Line_18 $$ while (true) -->Line_27 $$ indexed.countDown()[ CD ]
Line_23 $$ Engine.Index index = new Engine.Index(newUid(Integer.toString(i)), doc)-->Line_24 $$ engine.index(index)[ FD ]
Line_8 $$ final CountDownLatch indexed = new CountDownLatch(1)-->Line_27 $$ indexed.countDown()[ FD ]
Line_17 $$ int i = 0-->Line_23 $$ Engine.Index index = new Engine.Index(newUid(Integer.toString(i)), doc)[ FD ]
Line_7 $$ final CountDownLatch startGun = new CountDownLatch(1)-->Line_13 $$ startGun.await()[ FD ]
Line_6 $$ final InternalEngine engine = createEngine(store, createTempDir())-->Line_42 $$ engine.forceMerge(randomBoolean(), 1, false, randomBoolean(), randomBoolean())[ FD ]
Line_17 $$ int i = 0-->Line_22 $$ ParsedDocument doc = testParsedDocument(Integer.toString(i), Integer.toString(i), "test", null, -1, -1, testDocument(), B_1, null)[ FD ]
Line_5 $$ try (Store store = createStore()) -->Line_6 $$ final InternalEngine engine = createEngine(store, createTempDir())[ FD ]
Line_4 $$ for (int j = 0; j < numIters; j++) -->Line_20 $$ for (int j = 0; j < numDocs; j++) [ FD ]
Line_19 $$ int numDocs = randomIntBetween(1, 20)-->Line_20 $$ for (int j = 0; j < numDocs; j++) [ FD ]
Line_7 $$ final CountDownLatch startGun = new CountDownLatch(1)-->Line_39 $$ startGun.countDown()[ FD ]
Line_2 $$ public void testForceMergeAndClose() throws IOException, InterruptedException -->Line_3 $$ int numIters = randomIntBetween(2, 10)[ CD ]
Line_41 $$ for (int i = 0; i < someIters; i++) -->Line_42 $$ engine.forceMerge(randomBoolean(), 1, false, randomBoolean(), randomBoolean())[ CD ]
Line_18 $$ while (true) -->Line_20 $$ for (int j = 0; j < numDocs; j++) [ CD ]
Line_6 $$ final InternalEngine engine = createEngine(store, createTempDir())-->Line_45 $$ IOUtils.close(engine)[ FD ]
Line_17 $$ int i = 0-->Line_41 $$ for (int i = 0; i < someIters; i++) [ FD ]
Line_20 $$ for (int j = 0; j < numDocs; j++) -->Line_22 $$ ParsedDocument doc = testParsedDocument(Integer.toString(i), Integer.toString(i), "test", null, -1, -1, testDocument(), B_1, null)[ CD ]
Line_20 $$ for (int j = 0; j < numDocs; j++) -->Line_21 $$ i++[ CD ]
Line_18 $$ while (true) -->Line_19 $$ int numDocs = randomIntBetween(1, 20)[ CD ]
Line_6 $$ final InternalEngine engine = createEngine(store, createTempDir())-->Line_24 $$ engine.index(index)[ FD ]
Line_8 $$ final CountDownLatch indexed = new CountDownLatch(1)-->Line_44 $$ indexed.await()[ FD ]
Line_2 $$ public void testForceMergeAndClose() throws IOException, InterruptedException -->Line_4 $$ for (int j = 0; j < numIters; j++) [ CD ]
