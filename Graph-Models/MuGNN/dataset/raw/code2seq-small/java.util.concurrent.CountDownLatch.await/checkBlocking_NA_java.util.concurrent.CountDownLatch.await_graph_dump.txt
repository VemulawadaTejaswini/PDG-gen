Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_8 $$ int clients = maxAccept * 2[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_43 $$ Thread.sleep(10)[ CD ]
Line_16 $$ for (int i = 0; i < clients; i++) -->Line_37 $$ if (i <= callQ) [ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_14 $$ Client.setConnectTimeout(conf, 10000)[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_15 $$ Thread[] threads = new Thread[clients][ CD ]
Line_35 $$ if (i == 0) -->Line_37 $$ if (i <= callQ) [ CD ]
Line_6 $$ int initialClients = readers + callQ + handlers-->Line_44 $$ if (server.getNumOpenConnections() < initialClients) [ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_48 $$ LOG.info("ipc layer should be blocked")[ CD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_55 $$ if (server.getNumOpenConnections() < maxAccept) [ FD ]
Line_33 $$ for (int i = 0; i < initialClients; i++) -->Line_35 $$ if (i == 0) [ CD ]
Line_16 $$ for (int i = 0; i < clients; i++) -->Line_59 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_33 $$ for (int i = 0; i < initialClients; i++) -->Line_35 $$ if (i == 0) [ FD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_50 $$ assertEquals(initialClients, server.getNumOpenConnections())[ FD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_71 $$ server.stop()[ FD ]
Line_59 $$ for (int i = 0; i < 4; i++) -->Line_60 $$ assertEquals(maxAccept, server.getNumOpenConnections())[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_16 $$ for (int i = 0; i < clients; i++) [ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_6 $$ int initialClients = readers + callQ + handlers[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_51 $$ for (int i = initialClients; i < clients; i++) [ CD ]
Line_8 $$ int clients = maxAccept * 2-->Line_51 $$ for (int i = initialClients; i < clients; i++) [ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_54 $$ Thread.sleep(10)[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_5 $$ conf.setInt(CommonConfigurationKeys.IPC_SERVER_RPC_READ_CONNECTION_QUEUE_SIZE_KEY, readerQ)[ FD ]
Line_33 $$ for (int i = 0; i < initialClients; i++) -->Line_38 $$ while (server.getCallQueueLen() != i) [ FD ]
Line_6 $$ int initialClients = readers + callQ + handlers-->Line_33 $$ for (int i = 0; i < initialClients; i++) [ FD ]
Line_19 $$ Client client = new Client(LongWritable.class, conf)-->Line_28 $$ client.stop()[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_5 $$ conf.setInt(CommonConfigurationKeys.IPC_SERVER_RPC_READ_CONNECTION_QUEUE_SIZE_KEY, readerQ)[ CD ]
Line_4 $$ final Configuration conf = new Configuration()-->Line_14 $$ Client.setConnectTimeout(conf, 10000)[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_9 $$ final AtomicInteger failures = new AtomicInteger(0)[ CD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_49 $$ assertEquals(callQ, server.getCallQueueLen())[ FD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_44 $$ if (server.getNumOpenConnections() < initialClients) [ FD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_38 $$ while (server.getCallQueueLen() != i) [ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_49 $$ assertEquals(callQ, server.getCallQueueLen())[ CD ]
Line_44 $$ if (server.getNumOpenConnections() < initialClients) -->Line_45 $$ LOG.info("(initial clients) need:" + initialClients + " connections have:" + server.getNumOpenConnections())[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_12 $$ final InetSocketAddress addr = NetUtils.getConnectAddress(server)[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_65 $$ server.callBlockLatch.countDown()[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_3 $$ int handlers = 1[ CD ]
Line_59 $$ for (int i = 0; i < 4; i++) -->Line_61 $$ Thread.sleep(100)[ CD ]
Line_17 $$ threads[i] = new Thread(new Runnable() -->Line_19 $$ Client client = new Client(LongWritable.class, conf)[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_64 $$ LOG.info("releasing the calls")[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_7 $$ int maxAccept = initialClients + readers * readerQ + 1[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_10 $$ final CountDownLatch callFinishedLatch = new CountDownLatch(clients)[ CD ]
Line_33 $$ for (int i = 0; i < initialClients; i++) -->Line_59 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_13 $$ server.start()[ FD ]
Line_6 $$ int initialClients = readers + callQ + handlers-->Line_50 $$ assertEquals(initialClients, server.getNumOpenConnections())[ FD ]
Line_33 $$ for (int i = 0; i < initialClients; i++) -->Line_37 $$ if (i <= callQ) [ FD ]
Line_10 $$ final CountDownLatch callFinishedLatch = new CountDownLatch(clients)-->Line_27 $$ callFinishedLatch.countDown()[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_44 $$ if (server.getNumOpenConnections() < initialClients) [ CD ]
Line_37 $$ if (i <= callQ) -->Line_38 $$ while (server.getCallQueueLen() != i) [ CD ]
Line_16 $$ for (int i = 0; i < clients; i++) -->Line_51 $$ for (int i = initialClients; i < clients; i++) [ FD ]
Line_16 $$ for (int i = 0; i < clients; i++) -->Line_35 $$ if (i == 0) [ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_13 $$ server.start()[ CD ]
Line_38 $$ while (server.getCallQueueLen() != i) -->Line_39 $$ Thread.sleep(1)[ CD ]
Line_51 $$ for (int i = initialClients; i < clients; i++) -->Line_59 $$ for (int i = 0; i < 4; i++) [ FD ]
Line_10 $$ final CountDownLatch callFinishedLatch = new CountDownLatch(clients)-->Line_63 $$ assertEquals(clients, callFinishedLatch.getCount())[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_71 $$ server.stop()[ CD ]
Line_33 $$ for (int i = 0; i < initialClients; i++) -->Line_34 $$ threads[i].start()[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_59 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_8 $$ int clients = maxAccept * 2-->Line_16 $$ for (int i = 0; i < clients; i++) [ FD ]
Line_33 $$ for (int i = 0; i < initialClients; i++) -->Line_51 $$ for (int i = initialClients; i < clients; i++) [ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_49 $$ assertEquals(callQ, server.getCallQueueLen())[ FD ]
Line_9 $$ final AtomicInteger failures = new AtomicInteger(0)-->Line_70 $$ assertEquals(0, failures.get())[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_70 $$ assertEquals(0, failures.get())[ CD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_45 $$ LOG.info("(initial clients) need:" + initialClients + " connections have:" + server.getNumOpenConnections())[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_66 $$ callFinishedLatch.await()[ CD ]
Line_8 $$ int clients = maxAccept * 2-->Line_63 $$ assertEquals(clients, callFinishedLatch.getCount())[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_37 $$ if (i <= callQ) [ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_4 $$ final Configuration conf = new Configuration()[ CD ]
Line_7 $$ int maxAccept = initialClients + readers * readerQ + 1-->Line_55 $$ if (server.getNumOpenConnections() < maxAccept) [ FD ]
Line_35 $$ if (i == 0) -->Line_36 $$ server.firstCallLatch.await()[ CD ]
Line_9 $$ final AtomicInteger failures = new AtomicInteger(0)-->Line_24 $$ failures.incrementAndGet()[ FD ]
Line_55 $$ if (server.getNumOpenConnections() < maxAccept) -->Line_57 $$ Thread.sleep(100)[ CD ]
Line_4 $$ final Configuration conf = new Configuration()-->Line_5 $$ conf.setInt(CommonConfigurationKeys.IPC_SERVER_RPC_READ_CONNECTION_QUEUE_SIZE_KEY, readerQ)[ FD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_12 $$ final InetSocketAddress addr = NetUtils.getConnectAddress(server)[ FD ]
Line_44 $$ if (server.getNumOpenConnections() < initialClients) -->Line_46 $$ Thread.sleep(100)[ CD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_55 $$ if (server.getNumOpenConnections() < maxAccept) [ CD ]
Line_55 $$ if (server.getNumOpenConnections() < maxAccept) -->Line_56 $$ LOG.info("(max clients) need:" + maxAccept + " connections have:" + server.getNumOpenConnections())[ CD ]
Line_16 $$ for (int i = 0; i < clients; i++) -->Line_33 $$ for (int i = 0; i < initialClients; i++) [ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_50 $$ assertEquals(initialClients, server.getNumOpenConnections())[ CD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_56 $$ LOG.info("(max clients) need:" + maxAccept + " connections have:" + server.getNumOpenConnections())[ FD ]
Line_12 $$ final InetSocketAddress addr = NetUtils.getConnectAddress(server)-->Line_21 $$ client.call(new LongWritable(Thread.currentThread().getId()), addr, null, null, 60000, conf)[ FD ]
Line_19 $$ Client client = new Client(LongWritable.class, conf)-->Line_21 $$ client.call(new LongWritable(Thread.currentThread().getId()), addr, null, null, 60000, conf)[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_33 $$ for (int i = 0; i < initialClients; i++) [ CD ]
Line_11 $$ final TestServerQueue server = new TestServerQueue(clients, readers, callQ, handlers, conf)-->Line_60 $$ assertEquals(maxAccept, server.getNumOpenConnections())[ FD ]
Line_2 $$ private void checkBlocking(int readers, int readerQ, int callQ) throws Exception -->Line_63 $$ assertEquals(clients, callFinishedLatch.getCount())[ CD ]
Line_16 $$ for (int i = 0; i < clients; i++) -->Line_17 $$ threads[i] = new Thread(new Runnable() [ CD ]
Line_51 $$ for (int i = initialClients; i < clients; i++) -->Line_52 $$ threads[i].start()[ CD ]
Line_4 $$ final Configuration conf = new Configuration()-->Line_21 $$ client.call(new LongWritable(Thread.currentThread().getId()), addr, null, null, 60000, conf)[ FD ]
Line_16 $$ for (int i = 0; i < clients; i++) -->Line_38 $$ while (server.getCallQueueLen() != i) [ FD ]
Line_7 $$ int maxAccept = initialClients + readers * readerQ + 1-->Line_60 $$ assertEquals(maxAccept, server.getNumOpenConnections())[ FD ]
Line_10 $$ final CountDownLatch callFinishedLatch = new CountDownLatch(clients)-->Line_66 $$ callFinishedLatch.await()[ FD ]
