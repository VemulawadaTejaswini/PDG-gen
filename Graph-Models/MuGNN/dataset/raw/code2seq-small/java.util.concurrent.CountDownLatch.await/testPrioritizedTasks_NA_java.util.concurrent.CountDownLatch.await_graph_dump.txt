Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_11 $$ CountDownLatch latch = new CountDownLatch(taskCount)[ CD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_4 $$ internalCluster().startNode(settings)[ CD ]
Line_11 $$ CountDownLatch latch = new CountDownLatch(taskCount)-->Line_17 $$ latch.await()[ FD ]
Line_20 $$ if (prevPriority == null) -->Line_23 $$ assertThat(task.priority().sameOrAfter(prevPriority), is(true))[ CD ]
Line_6 $$ BlockingTask block = new BlockingTask(Priority.IMMEDIATE)-->Line_16 $$ block.release()[ FD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_18 $$ Priority prevPriority = null[ CD ]
Line_8 $$ int taskCount = randomIntBetween(5, 20)-->Line_12 $$ for (int i = 0; i < taskCount; i++) [ FD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_7 $$ clusterService.submitStateUpdateTask("test", block)[ CD ]
Line_19 $$ for (PrioritizedTask task : tasks) -->Line_21 $$ prevPriority = task.priority()[ FD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()[ CD ]
Line_5 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class)-->Line_14 $$ clusterService.submitStateUpdateTask("test", new PrioritizedTask(priority, latch, tasks))[ FD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_16 $$ block.release()[ CD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_9 $$ Priority[] priorities = Priority.values()[ CD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_17 $$ latch.await()[ CD ]
Line_20 $$ if (prevPriority == null) -->Line_21 $$ prevPriority = task.priority()[ CD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_6 $$ BlockingTask block = new BlockingTask(Priority.IMMEDIATE)[ CD ]
Line_18 $$ Priority prevPriority = null-->Line_20 $$ if (prevPriority == null) [ FD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_10 $$ List<PrioritizedTask> tasks = new ArrayList(taskCount)[ CD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_12 $$ for (int i = 0; i < taskCount; i++) [ CD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_8 $$ int taskCount = randomIntBetween(5, 20)[ CD ]
Line_12 $$ for (int i = 0; i < taskCount; i++) -->Line_14 $$ clusterService.submitStateUpdateTask("test", new PrioritizedTask(priority, latch, tasks))[ CD ]
Line_6 $$ BlockingTask block = new BlockingTask(Priority.IMMEDIATE)-->Line_7 $$ clusterService.submitStateUpdateTask("test", block)[ FD ]
Line_12 $$ for (int i = 0; i < taskCount; i++) -->Line_13 $$ Priority priority = priorities[randomIntBetween(0, priorities.length - 1)][ CD ]
Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()-->Line_4 $$ internalCluster().startNode(settings)[ FD ]
Line_19 $$ for (PrioritizedTask task : tasks) -->Line_23 $$ assertThat(task.priority().sameOrAfter(prevPriority), is(true))[ FD ]
Line_2 $$ public void testPrioritizedTasks() throws Exception -->Line_5 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class)[ CD ]
Line_18 $$ Priority prevPriority = null-->Line_23 $$ assertThat(task.priority().sameOrAfter(prevPriority), is(true))[ FD ]
Line_5 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class)-->Line_7 $$ clusterService.submitStateUpdateTask("test", block)[ FD ]
Line_21 $$ prevPriority = task.priority()-->Line_23 $$ assertThat(task.priority().sameOrAfter(prevPriority), is(true))[ FD ]
Line_18 $$ Priority prevPriority = null-->Line_21 $$ prevPriority = task.priority()[ FD ]
