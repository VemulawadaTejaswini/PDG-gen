Line_8 $$ channelFuture = clientBootstrap.connect(remoteAddress)-->Line_9 $$ channelFuture.await(1000)[ FD ]
Line_2 $$ public synchronized Collection<HttpResponse> sendRequests(SocketAddress remoteAddress, String... uris) throws InterruptedException -->Line_3 $$ final CountDownLatch latch = new CountDownLatch(uris.length)[ CD ]
Line_2 $$ public synchronized Collection<HttpResponse> sendRequests(SocketAddress remoteAddress, String... uris) throws InterruptedException -->Line_22 $$ return content[ CD ]
Line_3 $$ final CountDownLatch latch = new CountDownLatch(uris.length)-->Line_16 $$ latch.await()[ FD ]
Line_2 $$ public synchronized Collection<HttpResponse> sendRequests(SocketAddress remoteAddress, String... uris) throws InterruptedException -->Line_6 $$ ChannelFuture channelFuture = null[ CD ]
Line_11 $$ final HttpRequest httpRequest = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, uris[i])-->Line_13 $$ httpRequest.headers().add("X-Opaque-ID", String.valueOf(i))[ FD ]
Line_10 $$ for (int i = 0; i < uris.length; i++) -->Line_14 $$ channelFuture.getChannel().write(httpRequest)[ CD ]
Line_10 $$ for (int i = 0; i < uris.length; i++) -->Line_12 $$ httpRequest.headers().add(HOST, "localhost")[ CD ]
Line_8 $$ channelFuture = clientBootstrap.connect(remoteAddress)-->Line_18 $$ if (channelFuture != null) [ FD ]
Line_11 $$ final HttpRequest httpRequest = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, uris[i])-->Line_12 $$ httpRequest.headers().add(HOST, "localhost")[ FD ]
Line_8 $$ channelFuture = clientBootstrap.connect(remoteAddress)-->Line_14 $$ channelFuture.getChannel().write(httpRequest)[ FD ]
Line_2 $$ public synchronized Collection<HttpResponse> sendRequests(SocketAddress remoteAddress, String... uris) throws InterruptedException -->Line_8 $$ channelFuture = clientBootstrap.connect(remoteAddress)[ FD ]
Line_6 $$ ChannelFuture channelFuture = null-->Line_8 $$ channelFuture = clientBootstrap.connect(remoteAddress)[ FD ]
Line_11 $$ final HttpRequest httpRequest = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, uris[i])-->Line_14 $$ channelFuture.getChannel().write(httpRequest)[ FD ]
Line_6 $$ ChannelFuture channelFuture = null-->Line_9 $$ channelFuture.await(1000)[ FD ]
Line_10 $$ for (int i = 0; i < uris.length; i++) -->Line_11 $$ final HttpRequest httpRequest = new DefaultHttpRequest(HTTP_1_1, HttpMethod.GET, uris[i])[ CD ]
Line_18 $$ if (channelFuture != null) -->Line_19 $$ channelFuture.getChannel().close()[ CD ]
Line_2 $$ public synchronized Collection<HttpResponse> sendRequests(SocketAddress remoteAddress, String... uris) throws InterruptedException -->Line_5 $$ clientBootstrap.setPipelineFactory(new CountDownLatchPipelineFactory(latch, content))[ CD ]
Line_6 $$ ChannelFuture channelFuture = null-->Line_14 $$ channelFuture.getChannel().write(httpRequest)[ FD ]
Line_2 $$ public synchronized Collection<HttpResponse> sendRequests(SocketAddress remoteAddress, String... uris) throws InterruptedException -->Line_4 $$ final Collection<HttpResponse> content = Collections.synchronizedList(new ArrayList<HttpResponse>(uris.length))[ CD ]
Line_8 $$ channelFuture = clientBootstrap.connect(remoteAddress)-->Line_19 $$ channelFuture.getChannel().close()[ FD ]
Line_6 $$ ChannelFuture channelFuture = null-->Line_19 $$ channelFuture.getChannel().close()[ FD ]
Line_10 $$ for (int i = 0; i < uris.length; i++) -->Line_13 $$ httpRequest.headers().add("X-Opaque-ID", String.valueOf(i))[ CD ]
Line_6 $$ ChannelFuture channelFuture = null-->Line_18 $$ if (channelFuture != null) [ FD ]
Line_10 $$ for (int i = 0; i < uris.length; i++) -->Line_13 $$ httpRequest.headers().add("X-Opaque-ID", String.valueOf(i))[ FD ]
