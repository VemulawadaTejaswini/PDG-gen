Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_36 $$ node2.start()[ CD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_12 $$ assertNull(localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_44 $$ if (isUsingInvalidation()) -->Line_47 $$ assertEquals(VALUE2, remoteValue)[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_35 $$ node1.start()[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_41 $$ assertEquals(VALUE2, localAccessStrategy.get(s1, KEY, s1.getTimestamp()))[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_43 $$ Object remoteValue = remoteAccessStrategy.get(s2, KEY, s2.getTimestamp())[ CD ]
Line_14 $$ if (useMinimalAPI) -->Line_15 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE2, session.getTimestamp(), 2, true)[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_44 $$ if (isUsingInvalidation()) [ CD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_12 $$ assertNull(localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_6 $$ final CountDownLatch completionLatch = new CountDownLatch(2)-->Line_37 $$ assertTrue("Threads completed", completionLatch.await(2, TimeUnit.SECONDS))[ FD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_34 $$ node2.setDaemon(true)[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_40 $$ SessionImplementor s1 = mockedSession()[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_39 $$ long txTimestamp = System.currentTimeMillis()[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_42 $$ SessionImplementor s2 = mockedSession()[ CD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_15 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE2, session.getTimestamp(), 2, true)[ FD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_33 $$ node1.setDaemon(true)[ CD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_17 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE2, session.getTimestamp(), 2)[ FD ]
Line_5 $$ final CountDownLatch writeLatch2 = new CountDownLatch(1)-->Line_27 $$ writeLatch2.countDown()[ FD ]
Line_4 $$ final CountDownLatch writeLatch1 = new CountDownLatch(1)-->Line_13 $$ writeLatch1.await()[ FD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_38 $$ assertThreadsRanCleanly()[ CD ]
Line_44 $$ if (isUsingInvalidation()) -->Line_45 $$ assertEquals(VALUE1, remoteValue)[ CD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_15 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE2, session.getTimestamp(), 2, true)[ FD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_3 $$ final Object KEY = generateNextKey()[ CD ]
Line_7 $$ Thread node1 = new Thread() -->Line_35 $$ node1.start()[ FD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_4 $$ final CountDownLatch writeLatch1 = new CountDownLatch(1)[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_6 $$ final CountDownLatch completionLatch = new CountDownLatch(2)[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_5 $$ final CountDownLatch writeLatch2 = new CountDownLatch(1)[ CD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_41 $$ assertEquals(VALUE2, localAccessStrategy.get(s1, KEY, s1.getTimestamp()))[ FD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_11 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_7 $$ Thread node1 = new Thread() -->Line_33 $$ node1.setDaemon(true)[ FD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_7 $$ Thread node1 = new Thread() [ CD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_43 $$ Object remoteValue = remoteAccessStrategy.get(s2, KEY, s2.getTimestamp())[ FD ]
Line_6 $$ final CountDownLatch completionLatch = new CountDownLatch(2)-->Line_28 $$ completionLatch.countDown()[ FD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_17 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE2, session.getTimestamp(), 2)[ FD ]
Line_14 $$ if (useMinimalAPI) -->Line_17 $$ localAccessStrategy.putFromLoad(session, KEY, VALUE2, session.getTimestamp(), 2)[ CD ]
Line_2 $$ protected void putFromLoadTest(final boolean useMinimalAPI) throws Exception -->Line_37 $$ assertTrue("Threads completed", completionLatch.await(2, TimeUnit.SECONDS))[ CD ]
