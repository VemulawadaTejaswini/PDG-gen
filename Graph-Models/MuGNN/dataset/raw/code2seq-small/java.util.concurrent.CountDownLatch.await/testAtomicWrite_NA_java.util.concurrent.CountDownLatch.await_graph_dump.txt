Line_8 $$ final BlobObj blobObj = new BlobObj(testString) -->Line_17 $$ return builder[ CD ]
Line_6 $$ final CountDownLatch block = new CountDownLatch(1)-->Line_29 $$ block.await(5, TimeUnit.SECONDS)[ FD ]
Line_8 $$ final BlobObj blobObj = new BlobObj(testString) -->Line_10 $$ super.toXContent(builder, params)[ FD ]
Line_6 $$ final CountDownLatch block = new CountDownLatch(1)-->Line_12 $$ block.countDown()[ FD ]
Line_2 $$ public void testAtomicWrite() throws Exception -->Line_6 $$ final CountDownLatch block = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testAtomicWrite() throws Exception -->Line_3 $$ final BlobStore blobStore = createTestBlobStore()[ CD ]
Line_7 $$ final CountDownLatch unblock = new CountDownLatch(1)-->Line_31 $$ unblock.countDown()[ FD ]
Line_4 $$ final BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())-->Line_30 $$ assertFalse(blobContainer.blobExists("test-blob"))[ FD ]
Line_23 $$ Future<Void> future = threadPool.submit(new Callable<Void>() -->Line_26 $$ return null[ CD ]
Line_4 $$ final BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())-->Line_33 $$ assertTrue(blobContainer.blobExists("test-blob"))[ FD ]
Line_8 $$ final BlobObj blobObj = new BlobObj(testString) -->Line_25 $$ checksumFormat.writeAtomic(blobObj, blobContainer, "test-blob")[ FD ]
Line_2 $$ public void testAtomicWrite() throws Exception -->Line_5 $$ String testString = randomAsciiOfLength(randomInt(10000))[ CD ]
Line_7 $$ final CountDownLatch unblock = new CountDownLatch(1)-->Line_13 $$ unblock.await(5, TimeUnit.SECONDS)[ FD ]
Line_3 $$ final BlobStore blobStore = createTestBlobStore()-->Line_4 $$ final BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())[ FD ]
Line_2 $$ public void testAtomicWrite() throws Exception -->Line_21 $$ ExecutorService threadPool = Executors.newFixedThreadPool(1)[ CD ]
Line_2 $$ public void testAtomicWrite() throws Exception -->Line_7 $$ final CountDownLatch unblock = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testAtomicWrite() throws Exception -->Line_8 $$ final BlobObj blobObj = new BlobObj(testString) [ CD ]
Line_8 $$ final BlobObj blobObj = new BlobObj(testString) -->Line_10 $$ super.toXContent(builder, params)[ CD ]
Line_2 $$ public void testAtomicWrite() throws Exception -->Line_4 $$ final BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())[ CD ]
Line_4 $$ final BlobContainer blobContainer = blobStore.blobContainer(BlobPath.cleanPath())-->Line_25 $$ checksumFormat.writeAtomic(blobObj, blobContainer, "test-blob")[ FD ]
Line_23 $$ Future<Void> future = threadPool.submit(new Callable<Void>() -->Line_25 $$ checksumFormat.writeAtomic(blobObj, blobContainer, "test-blob")[ CD ]
