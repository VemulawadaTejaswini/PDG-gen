Line_6 $$ final CountDownLatch reads = new CountDownLatch(N)-->Line_14 $$ reads.countDown()[ FD ]
Line_3 $$ for (int i = 0; i < threadCount / 8 + 1; i++) -->Line_19 $$ reads.await()[ CD ]
Line_3 $$ for (int i = 0; i < threadCount / 8 + 1; i++) -->Line_20 $$ if (!exc.isNull()) [ CD ]
Line_5 $$ int N = 8-->Line_7 $$ List<Thread> threads = ContainerUtil.map(Collections.nCopies(N, ""), (Function<String, Thread>)  s -> new Thread("dom concurrency") [ FD ]
Line_6 $$ final CountDownLatch reads = new CountDownLatch(N)-->Line_19 $$ reads.await()[ FD ]
Line_3 $$ for (int i = 0; i < threadCount / 8 + 1; i++) -->Line_6 $$ final CountDownLatch reads = new CountDownLatch(N)[ CD ]
Line_3 $$ for (int i = 0; i < threadCount / 8 + 1; i++) -->Line_4 $$ final Ref<Throwable> exc = Ref.create(null)[ CD ]
Line_2 $$ private static void runThreads(int threadCount, final Runnable runnable) throws Throwable -->Line_3 $$ for (int i = 0; i < threadCount / 8 + 1; i++) [ CD ]
Line_7 $$ List<Thread> threads = ContainerUtil.map(Collections.nCopies(N, ""), (Function<String, Thread>)  s -> new Thread("dom concurrency") -->Line_18 $$ threads.forEach(Thread::<>start)[ FD ]
Line_3 $$ for (int i = 0; i < threadCount / 8 + 1; i++) -->Line_18 $$ threads.forEach(Thread::<>start)[ CD ]
Line_4 $$ final Ref<Throwable> exc = Ref.create(null)-->Line_20 $$ if (!exc.isNull()) [ FD ]
Line_4 $$ final Ref<Throwable> exc = Ref.create(null)-->Line_12 $$ exc.set(e)[ FD ]
Line_4 $$ final Ref<Throwable> exc = Ref.create(null)-->Line_21 $$ throw exc.get()[ FD ]
Line_3 $$ for (int i = 0; i < threadCount / 8 + 1; i++) -->Line_7 $$ List<Thread> threads = ContainerUtil.map(Collections.nCopies(N, ""), (Function<String, Thread>)  s -> new Thread("dom concurrency") [ CD ]
Line_2 $$ private static void runThreads(int threadCount, final Runnable runnable) throws Throwable -->Line_10 $$ runnable.run()[ FD ]
Line_3 $$ for (int i = 0; i < threadCount / 8 + 1; i++) -->Line_5 $$ int N = 8[ CD ]
Line_23 $$ for (Thread thread : threads) -->Line_24 $$ thread.join()[ FD ]
