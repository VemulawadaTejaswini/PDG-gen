Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_40 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ FD ]
Line_28 $$ PercolateResponse percolate-->Line_39 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_6 $$ final BytesReference onlyField2 = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2", "value").endObject().endObject().bytes()[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_16 $$ Thread[] threads = new Thread[scaledRandomIntBetween(2, 5)][ CD ]
Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_31 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ FD ]
Line_23 $$ while (!stop.get()) -->Line_28 $$ PercolateResponse percolate[ CD ]
Line_28 $$ PercolateResponse percolate-->Line_31 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ FD ]
Line_18 $$ for (int i = 0; i < threads.length; i++) -->Line_51 $$ threads[i] = new Thread(r)[ CD ]
Line_33 $$ if (count % 3 == 1) -->Line_40 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ CD ]
Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_39 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_23 $$ while (!stop.get()) -->Line_24 $$ int count = counts.incrementAndGet()[ CD ]
Line_33 $$ if (count % 3 == 1) -->Line_39 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ CD ]
Line_33 $$ if (count % 3 == 1) -->Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()[ CD ]
Line_5 $$ final BytesReference onlyField1 = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", 1).endObject().endObject().bytes()-->Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ FD ]
Line_12 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_54 $$ start.countDown()[ FD ]
Line_28 $$ PercolateResponse percolate-->Line_35 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_11 $$ refresh()[ CD ]
Line_13 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_26 $$ stop.set(true)[ FD ]
Line_28 $$ PercolateResponse percolate-->Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()[ FD ]
Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_31 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_7 $$ final BytesReference bothFields = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", 1).field("field2", "value").endObject().endObject().bytes()[ CD ]
Line_13 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_23 $$ while (!stop.get()) [ FD ]
Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ FD ]
Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_35 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_32 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_5 $$ final BytesReference onlyField1 = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", 1).endObject().endObject().bytes()[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_18 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_14 $$ final AtomicInteger counts = new AtomicInteger(0)[ CD ]
Line_14 $$ final AtomicInteger counts = new AtomicInteger(0)-->Line_24 $$ int count = counts.incrementAndGet()[ FD ]
Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_31 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ FD ]
Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_40 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ FD ]
Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_40 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ FD ]
Line_33 $$ if (count % 3 == 1) -->Line_36 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ CD ]
Line_29 $$ if (count % 3 == 0) -->Line_31 $$ assertThat(percolate.getMatches(), arrayWithSize(2))[ CD ]
Line_25 $$ if ((count > numberOfPercolations)) -->Line_26 $$ stop.set(true)[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_9 $$ client().prepareIndex("index", PercolatorService.TYPE_NAME, "test1").setSource(XContentFactory.jsonBuilder().startObject().field("query", termQuery("field2", "value")).endObject()).execute().actionGet()[ CD ]
Line_59 $$ if (assertionError != null) -->Line_60 $$ assertionError.printStackTrace()[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_10 $$ client().prepareIndex("index", PercolatorService.TYPE_NAME, "test2").setSource(XContentFactory.jsonBuilder().startObject().field("query", termQuery("field1", 1)).endObject()).execute().actionGet()[ CD ]
Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_36 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_3 $$ assertAcked(prepareCreate("index").addMapping("type", "field1", "type=long", "field2", "type=string"))[ CD ]
Line_28 $$ PercolateResponse percolate-->Line_36 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_12 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_22 $$ start.await()[ FD ]
Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()[ FD ]
Line_28 $$ PercolateResponse percolate-->Line_32 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ FD ]
Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_35 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_33 $$ if (count % 3 == 1) -->Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ CD ]
Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ FD ]
Line_23 $$ while (!stop.get()) -->Line_25 $$ if ((count > numberOfPercolations)) [ CD ]
Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_36 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_8 $$ client().prepareIndex("index", "type", "1").setSource(XContentFactory.jsonBuilder().startObject().field("field1", 1).field("field2", "value").endObject()).execute().actionGet()[ CD ]
Line_28 $$ PercolateResponse percolate-->Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()[ FD ]
Line_15 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()-->Line_46 $$ exceptionHolder.set(e)[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_13 $$ final AtomicBoolean stop = new AtomicBoolean(false)[ CD ]
Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_32 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ FD ]
Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_32 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ FD ]
Line_28 $$ PercolateResponse percolate-->Line_40 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test2"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_12 $$ final CountDownLatch start = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_17 $$ final int numberOfPercolations = scaledRandomIntBetween(1000, 10000)[ CD ]
Line_18 $$ for (int i = 0; i < threads.length; i++) -->Line_52 $$ threads[i].start()[ CD ]
Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_39 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_58 $$ Throwable assertionError = exceptionHolder.get()[ CD ]
Line_29 $$ if (count % 3 == 0) -->Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()[ CD ]
Line_7 $$ final BytesReference bothFields = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", 1).field("field2", "value").endObject().endObject().bytes()-->Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()[ FD ]
Line_33 $$ if (count % 3 == 1) -->Line_35 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_59 $$ if (assertionError != null) [ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_54 $$ start.countDown()[ CD ]
Line_30 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(bothFields).execute().actionGet()-->Line_35 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
Line_15 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()-->Line_58 $$ Throwable assertionError = exceptionHolder.get()[ FD ]
Line_23 $$ while (!stop.get()) -->Line_29 $$ if (count % 3 == 0) [ CD ]
Line_29 $$ if (count % 3 == 0) -->Line_32 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContainingInAnyOrder("test1", "test2"))[ CD ]
Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()-->Line_36 $$ assertThat(convertFromTextArray(percolate.getMatches(), "index"), arrayContaining("test1"))[ FD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_62 $$ assertThat(assertionError + " should be null", assertionError, nullValue())[ CD ]
Line_2 $$ public void testSimpleConcurrentPercolator() throws Exception -->Line_15 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()[ CD ]
Line_6 $$ final BytesReference onlyField2 = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2", "value").endObject().endObject().bytes()-->Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()[ FD ]
Line_18 $$ for (int i = 0; i < threads.length; i++) -->Line_19 $$ Runnable r = new Runnable() [ CD ]
Line_29 $$ if (count % 3 == 0) -->Line_33 $$ if (count % 3 == 1) [ CD ]
Line_28 $$ PercolateResponse percolate-->Line_38 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1).execute().actionGet()[ FD ]
Line_34 $$ percolate = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2).execute().actionGet()-->Line_39 $$ assertThat(percolate.getMatches(), arrayWithSize(1))[ FD ]
