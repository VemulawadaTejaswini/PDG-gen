Line_34 $$ final BytesRef id = parentIds.lookupOrd(j)-->Line_35 $$ assertEquals(expectedIds[j], id)[ FD ]
Line_16 $$ final BytesRef id = parentIds.lookupOrd(j)-->Line_17 $$ if (id != null) [ FD ]
Line_13 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)-->Line_14 $$ final BytesRef[] ids = new BytesRef[parentIds.getValueCount()][ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_3 $$ final ParentChildIndexFieldData indexFieldData = getForField(childType)[ CD ]
Line_33 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) -->Line_34 $$ final BytesRef id = parentIds.lookupOrd(j)[ CD ]
Line_33 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) -->Line_34 $$ final BytesRef id = parentIds.lookupOrd(j)[ FD ]
Line_15 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) -->Line_16 $$ final BytesRef id = parentIds.lookupOrd(j)[ FD ]
Line_23 $$ for (int i = 0; i < numThreads; ++i) -->Line_28 $$ for (int i = 0; i < 100000; ++i) [ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_23 $$ for (int i = 0; i < numThreads; ++i) [ CD ]
Line_5 $$ final IndexParentChildFieldData global = indexFieldData.loadGlobal(reader)-->Line_30 $$ AtomicParentChildFieldData leafData = global.load(context)[ FD ]
Line_23 $$ for (int i = 0; i < numThreads; ++i) -->Line_44 $$ threads[i].start()[ CD ]
Line_23 $$ for (int i = 0; i < numThreads; ++i) -->Line_24 $$ threads[i] = new Thread() [ CD ]
Line_13 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)-->Line_34 $$ final BytesRef id = parentIds.lookupOrd(j)[ FD ]
Line_10 $$ final Map<Object, BytesRef[]> expected = new HashMap()-->Line_32 $$ final BytesRef[] expectedIds = expected.get(context.reader().getCoreCacheKey())[ FD ]
Line_13 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)-->Line_33 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) [ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_5 $$ final IndexParentChildFieldData global = indexFieldData.loadGlobal(reader)[ CD ]
Line_14 $$ final BytesRef[] ids = new BytesRef[parentIds.getValueCount()]-->Line_21 $$ expected.put(context.reader().getCoreCacheKey(), ids)[ FD ]
Line_9 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_46 $$ latch.countDown()[ FD ]
Line_5 $$ final IndexParentChildFieldData global = indexFieldData.loadGlobal(reader)-->Line_12 $$ AtomicParentChildFieldData leafData = global.load(context)[ FD ]
Line_4 $$ final DirectoryReader reader = DirectoryReader.open(writer, true)-->Line_29 $$ for (LeafReaderContext context : reader.leaves()) [ FD ]
Line_3 $$ final ParentChildIndexFieldData indexFieldData = getForField(childType)-->Line_5 $$ final IndexParentChildFieldData global = indexFieldData.loadGlobal(reader)[ FD ]
Line_15 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) -->Line_16 $$ final BytesRef id = parentIds.lookupOrd(j)[ CD ]
Line_13 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)-->Line_15 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) [ FD ]
Line_13 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)-->Line_16 $$ final BytesRef id = parentIds.lookupOrd(j)[ FD ]
Line_7 $$ final int numThreads = scaledRandomIntBetween(3, 8)-->Line_23 $$ for (int i = 0; i < numThreads; ++i) [ FD ]
Line_6 $$ final AtomicReference<Exception> error = new AtomicReference()-->Line_51 $$ throw error.get()[ FD ]
Line_12 $$ AtomicParentChildFieldData leafData = global.load(context)-->Line_13 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)[ FD ]
Line_11 $$ for (LeafReaderContext context : reader.leaves()) -->Line_21 $$ expected.put(context.reader().getCoreCacheKey(), ids)[ FD ]
Line_30 $$ AtomicParentChildFieldData leafData = global.load(context)-->Line_31 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)[ FD ]
Line_15 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) -->Line_34 $$ final BytesRef id = parentIds.lookupOrd(j)[ FD ]
Line_15 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) -->Line_17 $$ if (id != null) [ CD ]
Line_31 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)-->Line_34 $$ final BytesRef id = parentIds.lookupOrd(j)[ FD ]
Line_11 $$ for (LeafReaderContext context : reader.leaves()) -->Line_12 $$ AtomicParentChildFieldData leafData = global.load(context)[ FD ]
Line_29 $$ for (LeafReaderContext context : reader.leaves()) -->Line_32 $$ final BytesRef[] expectedIds = expected.get(context.reader().getCoreCacheKey())[ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_10 $$ final Map<Object, BytesRef[]> expected = new HashMap()[ CD ]
Line_2 $$ public void testThreads() throws Exception -->Line_7 $$ final int numThreads = scaledRandomIntBetween(3, 8)[ CD ]
Line_4 $$ final DirectoryReader reader = DirectoryReader.open(writer, true)-->Line_11 $$ for (LeafReaderContext context : reader.leaves()) [ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_8 $$ final Thread[] threads = new Thread[numThreads][ CD ]
Line_16 $$ final BytesRef id = parentIds.lookupOrd(j)-->Line_18 $$ ids[j] = BytesRef.deepCopyOf(id)[ FD ]
Line_12 $$ AtomicParentChildFieldData leafData = global.load(context)-->Line_31 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)[ FD ]
Line_11 $$ for (LeafReaderContext context : reader.leaves()) -->Line_32 $$ final BytesRef[] expectedIds = expected.get(context.reader().getCoreCacheKey())[ FD ]
Line_6 $$ final AtomicReference<Exception> error = new AtomicReference()-->Line_40 $$ error.compareAndSet(null, e)[ FD ]
Line_11 $$ for (LeafReaderContext context : reader.leaves()) -->Line_30 $$ AtomicParentChildFieldData leafData = global.load(context)[ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_4 $$ final DirectoryReader reader = DirectoryReader.open(writer, true)[ CD ]
Line_33 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) -->Line_35 $$ assertEquals(expectedIds[j], id)[ CD ]
Line_17 $$ if (id != null) -->Line_18 $$ ids[j] = BytesRef.deepCopyOf(id)[ CD ]
Line_6 $$ final AtomicReference<Exception> error = new AtomicReference()-->Line_50 $$ if (error.get() != null) [ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_9 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_29 $$ for (LeafReaderContext context : reader.leaves()) -->Line_30 $$ AtomicParentChildFieldData leafData = global.load(context)[ FD ]
Line_16 $$ final BytesRef id = parentIds.lookupOrd(j)-->Line_35 $$ assertEquals(expectedIds[j], id)[ FD ]
Line_15 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) -->Line_33 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) [ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_46 $$ latch.countDown()[ CD ]
Line_2 $$ public void testThreads() throws Exception -->Line_50 $$ if (error.get() != null) [ CD ]
Line_31 $$ SortedDocValues parentIds = leafData.getOrdinalsValues(parentType)-->Line_33 $$ for (int j = 0; j < parentIds.getValueCount(); ++j) [ FD ]
Line_9 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_27 $$ latch.await()[ FD ]
Line_10 $$ final Map<Object, BytesRef[]> expected = new HashMap()-->Line_21 $$ expected.put(context.reader().getCoreCacheKey(), ids)[ FD ]
Line_4 $$ final DirectoryReader reader = DirectoryReader.open(writer, true)-->Line_5 $$ final IndexParentChildFieldData global = indexFieldData.loadGlobal(reader)[ FD ]
Line_2 $$ public void testThreads() throws Exception -->Line_6 $$ final AtomicReference<Exception> error = new AtomicReference()[ CD ]
