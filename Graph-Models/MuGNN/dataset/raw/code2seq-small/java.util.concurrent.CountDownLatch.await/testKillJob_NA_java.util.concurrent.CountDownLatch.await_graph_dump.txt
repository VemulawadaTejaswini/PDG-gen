Line_2 $$ public void testKillJob() throws Exception -->Line_18 $$ launcher.init(conf)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_21 $$ TaskId taskId = MRBuilderUtils.newTaskId(jobId, 1, TaskType.MAP)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_33 $$ when(mapTask.isMapOrReduce()).thenReturn(true)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_37 $$ when(mapTask.getJobID()).thenReturn(taskID.getJobID())[ CD ]
Line_3 $$ JobConf conf = new JobConf()-->Line_18 $$ launcher.init(conf)[ FD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_46 $$ launcher.handle(launchEvent)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_34 $$ when(mapTask.isMapTask()).thenReturn(true)[ CD ]
Line_4 $$ AppContext context = mock(AppContext.class)-->Line_16 $$ when(context.getEventHandler()).thenReturn(handler)[ FD ]
Line_6 $$ EventHandler handler = new EventHandler() -->Line_10 $$ if (event.getType() == TaskAttemptEventType.TA_CONTAINER_CLEANED) [ FD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_30 $$ when(ytask.getType()).thenReturn(TaskType.MAP)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_47 $$ Thread.sleep(200)[ CD ]
Line_5 $$ final CountDownLatch isDone = new CountDownLatch(1)-->Line_11 $$ isDone.countDown()[ FD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_20 $$ JobId jobId = MRBuilderUtils.newJobId(System.currentTimeMillis(), 1, 1)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_50 $$ isDone.await()[ CD ]
Line_6 $$ EventHandler handler = new EventHandler() -->Line_16 $$ when(context.getEventHandler()).thenReturn(handler)[ FD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_49 $$ launcher.handle(cleanupEvent)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_4 $$ AppContext context = mock(AppContext.class)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_31 $$ when(job.getTask(taskId)).thenReturn(ytask)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_29 $$ org.apache.hadoop.mapreduce.v2.app.job.Task ytask = mock(org.apache.hadoop.mapreduce.v2.app.job.Task.class)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_51 $$ launcher.close()[ CD ]
Line_6 $$ EventHandler handler = new EventHandler() -->Line_8 $$ LOG.info("handling event " + event.getClass() + " with type " + event.getType())[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_6 $$ EventHandler handler = new EventHandler() [ CD ]
Line_38 $$ doAnswer(new Answer<Void>() -->Line_41 $$ Thread.sleep(5 * 60 * 1000)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_5 $$ final CountDownLatch isDone = new CountDownLatch(1)[ CD ]
Line_5 $$ final CountDownLatch isDone = new CountDownLatch(1)-->Line_50 $$ isDone.await()[ FD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_35 $$ TaskAttemptID taskID = TypeConverter.fromYarn(taId)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_25 $$ when(job.getTotalReduces()).thenReturn(0)[ CD ]
Line_4 $$ AppContext context = mock(AppContext.class)-->Line_28 $$ when(context.getAllJobs()).thenReturn(jobs)[ FD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_38 $$ doAnswer(new Answer<Void>() [ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_16 $$ when(context.getEventHandler()).thenReturn(handler)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_36 $$ when(mapTask.getTaskID()).thenReturn(taskID)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_32 $$ MapTask mapTask = mock(MapTask.class)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_28 $$ when(context.getAllJobs()).thenReturn(jobs)[ CD ]
Line_38 $$ doAnswer(new Answer<Void>() -->Line_42 $$ return null[ CD ]
Line_38 $$ doAnswer(new Answer<Void>() -->Line_40 $$ LOG.info("sleeping for 5 minutes...")[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_27 $$ jobs.put(jobId, job)[ CD ]
Line_6 $$ EventHandler handler = new EventHandler() -->Line_9 $$ if (event instanceof TaskAttemptEvent) [ FD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_23 $$ Job job = mock(Job.class)[ CD ]
Line_9 $$ if (event instanceof TaskAttemptEvent) -->Line_10 $$ if (event.getType() == TaskAttemptEventType.TA_CONTAINER_CLEANED) [ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_3 $$ JobConf conf = new JobConf()[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_19 $$ launcher.start()[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_22 $$ TaskAttemptId taId = MRBuilderUtils.newTaskAttemptId(taskId, 0)[ CD ]
Line_2 $$ public void testKillJob() throws Exception -->Line_24 $$ when(job.getTotalMaps()).thenReturn(1)[ CD ]
Line_6 $$ EventHandler handler = new EventHandler() -->Line_9 $$ if (event instanceof TaskAttemptEvent) [ CD ]
Line_10 $$ if (event.getType() == TaskAttemptEventType.TA_CONTAINER_CLEANED) -->Line_11 $$ isDone.countDown()[ CD ]
Line_6 $$ EventHandler handler = new EventHandler() -->Line_8 $$ LOG.info("handling event " + event.getClass() + " with type " + event.getType())[ FD ]
