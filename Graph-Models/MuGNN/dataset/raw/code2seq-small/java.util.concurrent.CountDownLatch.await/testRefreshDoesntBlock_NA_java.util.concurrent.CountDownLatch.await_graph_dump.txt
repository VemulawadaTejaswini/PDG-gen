Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_31 $$ t.start()[ CD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_3 $$ final AtomicInteger count = new AtomicInteger(0)[ CD ]
Line_25 $$ Thread t = new Thread() -->Line_27 $$ Integer value = cache.getOrRefresh()[ CD ]
Line_6 $$ final CountDownLatch waiting = new CountDownLatch(1)-->Line_11 $$ waiting.countDown()[ FD ]
Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_35 $$ latch.countDown()[ FD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_32 $$ waiting.await()[ CD ]
Line_7 $$ final SingleObjectCache<Integer> cache = new SingleObjectCache<Integer>(TimeValue.timeValueMillis(1000), 0) -->Line_33 $$ assertEquals(1, cache.getOrRefresh().intValue())[ FD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_23 $$ assertEquals(1, cache.getOrRefresh().intValue())[ CD ]
Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_12 $$ latch.await()[ FD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_34 $$ needsRefresh.set(false)[ CD ]
Line_6 $$ final CountDownLatch waiting = new CountDownLatch(1)-->Line_32 $$ waiting.await()[ FD ]
Line_7 $$ final SingleObjectCache<Integer> cache = new SingleObjectCache<Integer>(TimeValue.timeValueMillis(1000), 0) -->Line_20 $$ return needsRefresh.get()[ CD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_6 $$ final CountDownLatch waiting = new CountDownLatch(1)[ CD ]
Line_25 $$ Thread t = new Thread() -->Line_28 $$ assertEquals(2, value.intValue())[ CD ]
Line_7 $$ final SingleObjectCache<Integer> cache = new SingleObjectCache<Integer>(TimeValue.timeValueMillis(1000), 0) -->Line_27 $$ Integer value = cache.getOrRefresh()[ FD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_24 $$ needsRefresh.set(true)[ CD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_35 $$ latch.countDown()[ CD ]
Line_3 $$ final AtomicInteger count = new AtomicInteger(0)-->Line_17 $$ return count.incrementAndGet()[ FD ]
Line_7 $$ final SingleObjectCache<Integer> cache = new SingleObjectCache<Integer>(TimeValue.timeValueMillis(1000), 0) -->Line_17 $$ return count.incrementAndGet()[ CD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_37 $$ assertEquals(2, cache.getOrRefresh().intValue())[ CD ]
Line_7 $$ final SingleObjectCache<Integer> cache = new SingleObjectCache<Integer>(TimeValue.timeValueMillis(1000), 0) -->Line_37 $$ assertEquals(2, cache.getOrRefresh().intValue())[ FD ]
Line_4 $$ final AtomicBoolean needsRefresh = new AtomicBoolean(true)-->Line_34 $$ needsRefresh.set(false)[ FD ]
Line_4 $$ final AtomicBoolean needsRefresh = new AtomicBoolean(true)-->Line_20 $$ return needsRefresh.get()[ FD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_4 $$ final AtomicBoolean needsRefresh = new AtomicBoolean(true)[ CD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_33 $$ assertEquals(1, cache.getOrRefresh().intValue())[ CD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_36 $$ t.join()[ CD ]
Line_7 $$ final SingleObjectCache<Integer> cache = new SingleObjectCache<Integer>(TimeValue.timeValueMillis(1000), 0) -->Line_23 $$ assertEquals(1, cache.getOrRefresh().intValue())[ FD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_5 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_27 $$ Integer value = cache.getOrRefresh()-->Line_28 $$ assertEquals(2, value.intValue())[ FD ]
Line_7 $$ final SingleObjectCache<Integer> cache = new SingleObjectCache<Integer>(TimeValue.timeValueMillis(1000), 0) -->Line_9 $$ if (count.get() == 1) [ CD ]
Line_3 $$ final AtomicInteger count = new AtomicInteger(0)-->Line_9 $$ if (count.get() == 1) [ FD ]
Line_4 $$ final AtomicBoolean needsRefresh = new AtomicBoolean(true)-->Line_24 $$ needsRefresh.set(true)[ FD ]
Line_2 $$ public void testRefreshDoesntBlock() throws InterruptedException -->Line_7 $$ final SingleObjectCache<Integer> cache = new SingleObjectCache<Integer>(TimeValue.timeValueMillis(1000), 0) [ CD ]
