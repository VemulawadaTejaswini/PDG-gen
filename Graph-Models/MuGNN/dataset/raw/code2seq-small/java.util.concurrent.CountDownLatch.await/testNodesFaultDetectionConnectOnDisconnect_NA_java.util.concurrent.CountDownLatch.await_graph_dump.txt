Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_5 $$ settings.put(FaultDetection.SETTING_CONNECT_ON_NETWORK_DISCONNECT, shouldRetry).put(FaultDetection.SETTING_PING_INTERVAL, "5m")[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_33 $$ if (!shouldRetry) [ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_29 $$ serviceB.stop()[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_7 $$ NodesFaultDetection nodesFDA = new NodesFaultDetection(settings.build(), threadPool, serviceA, clusterState.getClusterName())[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_9 $$ NodesFaultDetection nodesFDB = new NodesFaultDetection(settings.build(), threadPool, serviceB, clusterState.getClusterName())[ CD ]
Line_7 $$ NodesFaultDetection nodesFDA = new NodesFaultDetection(settings.build(), threadPool, serviceA, clusterState.getClusterName())-->Line_17 $$ nodesFDA.updateNodesAndPing(clusterState)[ FD ]
Line_3 $$ Settings.Builder settings = Settings.builder()-->Line_9 $$ NodesFaultDetection nodesFDB = new NodesFaultDetection(settings.build(), threadPool, serviceB, clusterState.getClusterName())[ FD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_22 $$ nodesFDA.addListener(new NodesFaultDetection.Listener() [ CD ]
Line_12 $$ nodesFDB.addListener(new NodesFaultDetection.Listener() -->Line_14 $$ pingSent.countDown()[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_18 $$ pingSent.await(30, TimeUnit.SECONDS)[ CD ]
Line_3 $$ Settings.Builder settings = Settings.builder()-->Line_7 $$ NodesFaultDetection nodesFDA = new NodesFaultDetection(settings.build(), threadPool, serviceA, clusterState.getClusterName())[ FD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_3 $$ Settings.Builder settings = Settings.builder()[ CD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(new ClusterName("test")).nodes(buildNodesForA(true)).build()-->Line_17 $$ nodesFDA.updateNodesAndPing(clusterState)[ FD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_11 $$ final CountDownLatch pingSent = new CountDownLatch(1)[ CD ]
Line_9 $$ NodesFaultDetection nodesFDB = new NodesFaultDetection(settings.build(), threadPool, serviceB, clusterState.getClusterName())-->Line_12 $$ nodesFDB.addListener(new NodesFaultDetection.Listener() [ FD ]
Line_22 $$ nodesFDA.addListener(new NodesFaultDetection.Listener() -->Line_25 $$ failureReason[0] = reason[ FD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(new ClusterName("test")).nodes(buildNodesForA(true)).build()-->Line_9 $$ NodesFaultDetection nodesFDB = new NodesFaultDetection(settings.build(), threadPool, serviceB, clusterState.getClusterName())[ FD ]
Line_4 $$ boolean shouldRetry = randomBoolean()-->Line_33 $$ if (!shouldRetry) [ FD ]
Line_3 $$ Settings.Builder settings = Settings.builder()-->Line_5 $$ settings.put(FaultDetection.SETTING_CONNECT_ON_NETWORK_DISCONNECT, shouldRetry).put(FaultDetection.SETTING_PING_INTERVAL, "5m")[ FD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_30 $$ notified.await(30, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_6 $$ ClusterState clusterState = ClusterState.builder(new ClusterName("test")).nodes(buildNodesForA(true)).build()[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_8 $$ nodesFDA.setLocalNode(nodeA)[ CD ]
Line_9 $$ NodesFaultDetection nodesFDB = new NodesFaultDetection(settings.build(), threadPool, serviceB, clusterState.getClusterName())-->Line_10 $$ nodesFDB.setLocalNode(nodeB)[ FD ]
Line_11 $$ final CountDownLatch pingSent = new CountDownLatch(1)-->Line_18 $$ pingSent.await(30, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_10 $$ nodesFDB.setLocalNode(nodeB)[ CD ]
Line_33 $$ if (!shouldRetry) -->Line_34 $$ matcher = Matchers.not(matcher)[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_17 $$ nodesFDA.updateNodesAndPing(clusterState)[ CD ]
Line_11 $$ final CountDownLatch pingSent = new CountDownLatch(1)-->Line_14 $$ pingSent.countDown()[ FD ]
Line_6 $$ ClusterState clusterState = ClusterState.builder(new ClusterName("test")).nodes(buildNodesForA(true)).build()-->Line_7 $$ NodesFaultDetection nodesFDA = new NodesFaultDetection(settings.build(), threadPool, serviceA, clusterState.getClusterName())[ FD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_12 $$ nodesFDB.addListener(new NodesFaultDetection.Listener() [ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_31 $$ assertEquals(nodeB, failureNode[0])[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_32 $$ Matcher<String> matcher = Matchers.containsString("verified")[ CD ]
Line_22 $$ nodesFDA.addListener(new NodesFaultDetection.Listener() -->Line_26 $$ notified.countDown()[ CD ]
Line_22 $$ nodesFDA.addListener(new NodesFaultDetection.Listener() -->Line_25 $$ failureReason[0] = reason[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_36 $$ assertThat(failureReason[0], matcher)[ CD ]
Line_22 $$ nodesFDA.addListener(new NodesFaultDetection.Listener() -->Line_24 $$ failureNode[0] = node[ FD ]
Line_7 $$ NodesFaultDetection nodesFDA = new NodesFaultDetection(settings.build(), threadPool, serviceA, clusterState.getClusterName())-->Line_8 $$ nodesFDA.setLocalNode(nodeA)[ FD ]
Line_4 $$ boolean shouldRetry = randomBoolean()-->Line_5 $$ settings.put(FaultDetection.SETTING_CONNECT_ON_NETWORK_DISCONNECT, shouldRetry).put(FaultDetection.SETTING_PING_INTERVAL, "5m")[ FD ]
Line_7 $$ NodesFaultDetection nodesFDA = new NodesFaultDetection(settings.build(), threadPool, serviceA, clusterState.getClusterName())-->Line_22 $$ nodesFDA.addListener(new NodesFaultDetection.Listener() [ FD ]
Line_22 $$ nodesFDA.addListener(new NodesFaultDetection.Listener() -->Line_24 $$ failureNode[0] = node[ CD ]
Line_2 $$ public void testNodesFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_4 $$ boolean shouldRetry = randomBoolean()[ CD ]
