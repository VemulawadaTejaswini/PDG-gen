Line_39 $$ if (start) -->Line_41 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)[ CD ]
Line_24 $$ inputStream = new BufferedInputStream(initialBundleURL.openStream())-->Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)[ FD ]
Line_17 $$ InputStream inputStream = null-->Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)[ FD ]
Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)-->Line_40 $$ bundle.start()[ FD ]
Line_8 $$ for (String part : parts) -->Line_9 $$ if (part.equals("start")) [ FD ]
Line_3 $$ boolean start = false-->Line_35 $$ if (!start && _hasLazyActivationPolicy(bundle)) [ FD ]
Line_6 $$ if (index != -1) -->Line_15 $$ location = location.substring(0, index)[ CD ]
Line_44 $$ if (trackedBundle == bundle) -->Line_46 $$ close()[ CD ]
Line_17 $$ InputStream inputStream = null-->Line_61 $$ StreamUtil.cleanUp(inputStream)[ FD ]
Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)-->Line_44 $$ if (trackedBundle == bundle) [ FD ]
Line_39 $$ if (start) -->Line_51 $$ bundleTracker.open()[ CD ]
Line_26 $$ if (_log.isWarnEnabled()) -->Line_27 $$ _log.warn(ioe.getMessage())[ CD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_7 $$ String[] parts = StringUtil.split(location.substring(index + 1), StringPool.COLON)[ FD ]
Line_39 $$ if (start) -->Line_40 $$ bundle.start()[ CD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_5 $$ int index = location.lastIndexOf(StringPool.AT)[ CD ]
Line_39 $$ if (start) -->Line_52 $$ countDownLatch.await()[ CD ]
Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)-->Line_35 $$ if (!start && _hasLazyActivationPolicy(bundle)) [ FD ]
Line_17 $$ InputStream inputStream = null-->Line_24 $$ inputStream = new BufferedInputStream(initialBundleURL.openStream())[ FD ]
Line_3 $$ boolean start = false-->Line_10 $$ start = true[ FD ]
Line_9 $$ if (part.equals("start")) -->Line_10 $$ start = true[ CD ]
Line_22 $$ URL initialBundleURL = new URL(location)-->Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)[ FD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_15 $$ location = location.substring(0, index)[ FD ]
Line_15 $$ location = location.substring(0, index)-->Line_19 $$ if (!location.startsWith("file:")) [ FD ]
Line_22 $$ URL initialBundleURL = new URL(location)-->Line_24 $$ inputStream = new BufferedInputStream(initialBundleURL.openStream())[ FD ]
Line_35 $$ if (!start && _hasLazyActivationPolicy(bundle)) -->Line_37 $$ return[ CD ]
Line_5 $$ int index = location.lastIndexOf(StringPool.AT)-->Line_6 $$ if (index != -1) [ FD ]
Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)-->Line_36 $$ bundle.start(Bundle.START_ACTIVATION_POLICY)[ FD ]
Line_6 $$ if (index != -1) -->Line_7 $$ String[] parts = StringUtil.split(location.substring(index + 1), StringPool.COLON)[ CD ]
Line_8 $$ for (String part : parts) -->Line_12 $$ startLevel = GetterUtil.getInteger(part)[ FD ]
Line_4 $$ int startLevel = PropsValues.MODULE_FRAMEWORK_BEGINNING_START_LEVEL-->Line_12 $$ startLevel = GetterUtil.getInteger(part)[ FD ]
Line_5 $$ int index = location.lastIndexOf(StringPool.AT)-->Line_15 $$ location = location.substring(0, index)[ FD ]
Line_44 $$ if (trackedBundle == bundle) -->Line_45 $$ countDownLatch.countDown()[ CD ]
Line_39 $$ if (start) -->Line_42 $$ BundleTracker<Void> bundleTracker = new BundleTracker<Void>(_framework.getBundleContext(), Bundle.ACTIVE, null) [ CD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_4 $$ int startLevel = PropsValues.MODULE_FRAMEWORK_BEGINNING_START_LEVEL[ CD ]
Line_9 $$ if (part.equals("start")) -->Line_12 $$ startLevel = GetterUtil.getInteger(part)[ CD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_5 $$ int index = location.lastIndexOf(StringPool.AT)[ FD ]
Line_42 $$ BundleTracker<Void> bundleTracker = new BundleTracker<Void>(_framework.getBundleContext(), Bundle.ACTIVE, null) -->Line_44 $$ if (trackedBundle == bundle) [ CD ]
Line_42 $$ BundleTracker<Void> bundleTracker = new BundleTracker<Void>(_framework.getBundleContext(), Bundle.ACTIVE, null) -->Line_51 $$ bundleTracker.open()[ FD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_6 $$ if (index != -1) [ CD ]
Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)-->Line_32 $$ if ((bundle == null) || _isFragmentBundle(bundle)) [ FD ]
Line_32 $$ if ((bundle == null) || _isFragmentBundle(bundle)) -->Line_33 $$ return[ CD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_19 $$ if (!location.startsWith("file:")) [ FD ]
Line_41 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_52 $$ countDownLatch.await()[ FD ]
Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)-->Line_54 $$ if (((bundle.getState() & Bundle.UNINSTALLED) == 0) && (startLevel > 0)) [ FD ]
Line_54 $$ if (((bundle.getState() & Bundle.UNINSTALLED) == 0) && (startLevel > 0)) -->Line_56 $$ bundleStartLevel.setStartLevel(startLevel)[ CD ]
Line_35 $$ if (!start && _hasLazyActivationPolicy(bundle)) -->Line_36 $$ bundle.start(Bundle.START_ACTIVATION_POLICY)[ CD ]
Line_31 $$ final Bundle bundle = _addBundle(initialBundleURL.toString(), inputStream, false)-->Line_55 $$ BundleStartLevel bundleStartLevel = bundle.adapt(BundleStartLevel.class)[ FD ]
Line_15 $$ location = location.substring(0, index)-->Line_20 $$ location = "file:" + PropsValues.MODULE_FRAMEWORK_BASE_DIR + "/static/" + location[ FD ]
Line_42 $$ BundleTracker<Void> bundleTracker = new BundleTracker<Void>(_framework.getBundleContext(), Bundle.ACTIVE, null) -->Line_44 $$ if (trackedBundle == bundle) [ FD ]
Line_41 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_45 $$ countDownLatch.countDown()[ FD ]
Line_42 $$ BundleTracker<Void> bundleTracker = new BundleTracker<Void>(_framework.getBundleContext(), Bundle.ACTIVE, null) -->Line_48 $$ return null[ CD ]
Line_12 $$ startLevel = GetterUtil.getInteger(part)-->Line_56 $$ bundleStartLevel.setStartLevel(startLevel)[ FD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_17 $$ InputStream inputStream = null[ CD ]
Line_4 $$ int startLevel = PropsValues.MODULE_FRAMEWORK_BEGINNING_START_LEVEL-->Line_56 $$ bundleStartLevel.setStartLevel(startLevel)[ FD ]
Line_54 $$ if (((bundle.getState() & Bundle.UNINSTALLED) == 0) && (startLevel > 0)) -->Line_55 $$ BundleStartLevel bundleStartLevel = bundle.adapt(BundleStartLevel.class)[ CD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_3 $$ boolean start = false[ CD ]
Line_2 $$ private void _installInitialBundle(String location) -->Line_20 $$ location = "file:" + PropsValues.MODULE_FRAMEWORK_BASE_DIR + "/static/" + location[ FD ]
Line_10 $$ start = true-->Line_35 $$ if (!start && _hasLazyActivationPolicy(bundle)) [ FD ]
Line_19 $$ if (!location.startsWith("file:")) -->Line_20 $$ location = "file:" + PropsValues.MODULE_FRAMEWORK_BASE_DIR + "/static/" + location[ CD ]
Line_24 $$ inputStream = new BufferedInputStream(initialBundleURL.openStream())-->Line_61 $$ StreamUtil.cleanUp(inputStream)[ FD ]
