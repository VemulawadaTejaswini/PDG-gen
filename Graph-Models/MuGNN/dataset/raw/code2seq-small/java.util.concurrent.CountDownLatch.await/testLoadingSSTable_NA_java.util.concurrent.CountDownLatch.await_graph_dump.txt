Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_6 $$ String schema = "CREATE TABLE %s.%s (key ascii, name ascii, val ascii, val1 ascii, PRIMARY KEY (key, name))"[ CD ]
Line_3 $$ File dataDir = new File(tmpdir.getAbsolutePath() + File.separator + KEYSPACE1 + File.separator + CF_STANDARD1)-->Line_4 $$ assert dataDir.mkdirs()[ FD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_19 $$ assertEquals(ByteBufferUtil.bytes("100"), partitions.get(0).getRow(new Clustering(ByteBufferUtil.bytes("col1"))).getCell(cfmeta.getColumnDefinition(ByteBufferUtil.bytes("val"))).value())[ CD ]
Line_5 $$ CFMetaData cfmeta = Schema.instance.getCFMetaData(KEYSPACE1, CF_STANDARD1)-->Line_19 $$ assertEquals(ByteBufferUtil.bytes("100"), partitions.get(0).getRow(new Clustering(ByteBufferUtil.bytes("col1"))).getCell(cfmeta.getColumnDefinition(ByteBufferUtil.bytes("val"))).value())[ FD ]
Line_8 $$ try (CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD1)).using(String.format(query, KEYSPACE1, CF_STANDARD1)).build()) -->Line_9 $$ writer.addRow("key1", "col1", "100")[ FD ]
Line_11 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1)-->Line_16 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())[ FD ]
Line_6 $$ String schema = "CREATE TABLE %s.%s (key ascii, name ascii, val ascii, val1 ascii, PRIMARY KEY (key, name))"-->Line_8 $$ try (CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD1)).using(String.format(query, KEYSPACE1, CF_STANDARD1)).build()) [ FD ]
Line_14 $$ SSTableLoader loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))-->Line_15 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ FD ]
Line_13 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_20 $$ latch.await()[ FD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_15 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ CD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_5 $$ CFMetaData cfmeta = Schema.instance.getCFMetaData(KEYSPACE1, CF_STANDARD1)[ CD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_20 $$ latch.await()[ CD ]
Line_11 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1)-->Line_12 $$ cfs.forceBlockingFlush()[ FD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_17 $$ assertEquals(1, partitions.size())[ CD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_13 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_16 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())-->Line_18 $$ assertEquals("key1", AsciiType.instance.getString(partitions.get(0).partitionKey().getKey()))[ FD ]
Line_16 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())-->Line_17 $$ assertEquals(1, partitions.size())[ FD ]
Line_3 $$ File dataDir = new File(tmpdir.getAbsolutePath() + File.separator + KEYSPACE1 + File.separator + CF_STANDARD1)-->Line_8 $$ try (CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD1)).using(String.format(query, KEYSPACE1, CF_STANDARD1)).build()) [ FD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_16 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())[ CD ]
Line_7 $$ String query = "INSERT INTO %s.%s (key, name, val) VALUES (?, ?, ?)"-->Line_8 $$ try (CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(String.format(schema, KEYSPACE1, CF_STANDARD1)).using(String.format(query, KEYSPACE1, CF_STANDARD1)).build()) [ FD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_12 $$ cfs.forceBlockingFlush()[ CD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_11 $$ ColumnFamilyStore cfs = Keyspace.open(KEYSPACE1).getColumnFamilyStore(CF_STANDARD1)[ CD ]
Line_13 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_15 $$ loader.stream(Collections.emptySet(), completionStreamListener(latch)).get()[ FD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_7 $$ String query = "INSERT INTO %s.%s (key, name, val) VALUES (?, ?, ?)"[ CD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_14 $$ SSTableLoader loader = new SSTableLoader(dataDir, new TestClient(), new OutputHandler.SystemOutput(false, false))[ CD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_3 $$ File dataDir = new File(tmpdir.getAbsolutePath() + File.separator + KEYSPACE1 + File.separator + CF_STANDARD1)[ CD ]
Line_2 $$ public void testLoadingSSTable() throws Exception -->Line_18 $$ assertEquals("key1", AsciiType.instance.getString(partitions.get(0).partitionKey().getKey()))[ CD ]
Line_16 $$ List<FilteredPartition> partitions = Util.getAll(Util.cmd(cfs).build())-->Line_19 $$ assertEquals(ByteBufferUtil.bytes("100"), partitions.get(0).getRow(new Clustering(ByteBufferUtil.bytes("col1"))).getCell(cfmeta.getColumnDefinition(ByteBufferUtil.bytes("val"))).value())[ FD ]
