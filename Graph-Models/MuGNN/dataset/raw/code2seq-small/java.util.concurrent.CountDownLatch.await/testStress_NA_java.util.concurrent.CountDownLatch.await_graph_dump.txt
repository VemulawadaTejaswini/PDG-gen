Line_14 $$ final Random random = new Random()-->Line_21 $$ readStep(random)[ FD ]
Line_30 $$ new WriteCommandAction(myProject, myFile) -->Line_34 $$ writeStep(random)[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_41 $$ assertTrue("Timed out", reads.await(5, TimeUnit.MINUTES))[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_27 $$ final Document document = documentManager.getDocument(myFile)[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_6 $$ final int readIterations = iterations * 3[ CD ]
Line_17 $$ if (myPsiManager == null)-->Line_18 $$ return[ CD ]
Line_8 $$ PsiClass myClass = myJavaFacade.findClass("StressClass", GlobalSearchScope.allScope(myProject))-->Line_10 $$ myFile = (PsiJavaFile) myClass.getContainingFile()[ FD ]
Line_13 $$ final CountDownLatch reads = new CountDownLatch(numOfThreads)-->Line_41 $$ assertTrue("Timed out", reads.await(5, TimeUnit.MINUTES))[ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_26 $$ threads.forEach(Thread::<>start)[ CD ]
Line_12 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(getProject())-->Line_33 $$ documentManager.commitAllDocuments()[ FD ]
Line_3 $$ int numOfThreads = 10-->Line_15 $$ List<Thread> threads = ContainerUtil.map(Collections.nCopies(numOfThreads, ""),  i -> new Thread(() -> [ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_5 $$ System.out.println("iterations = " + iterations)[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_12 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(getProject())[ CD ]
Line_6 $$ final int readIterations = iterations * 3-->Line_16 $$ for (int i1 = 0; i1 < readIterations; i1++) [ FD ]
Line_30 $$ new WriteCommandAction(myProject, myFile) -->Line_33 $$ documentManager.commitAllDocuments()[ CD ]
Line_12 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(getProject())-->Line_27 $$ final Document document = documentManager.getDocument(myFile)[ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_15 $$ List<Thread> threads = ContainerUtil.map(Collections.nCopies(numOfThreads, ""),  i -> new Thread(() -> [ CD ]
Line_15 $$ List<Thread> threads = ContainerUtil.map(Collections.nCopies(numOfThreads, ""),  i -> new Thread(() -> -->Line_26 $$ threads.forEach(Thread::<>start)[ FD ]
Line_28 $$ for (int i = 0; i < iterations; i++) -->Line_30 $$ new WriteCommandAction(myProject, myFile) [ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_4 $$ int iterations = Timings.adjustAccordingToMySpeed(20, true)[ CD ]
Line_27 $$ final Document document = documentManager.getDocument(myFile)-->Line_36 $$ assertEquals(document.getText(), myFile.getText())[ FD ]
Line_30 $$ new WriteCommandAction(myProject, myFile) -->Line_36 $$ assertEquals(document.getText(), myFile.getText())[ CD ]
Line_8 $$ PsiClass myClass = myJavaFacade.findClass("StressClass", GlobalSearchScope.allScope(myProject))-->Line_9 $$ assertNotNull(myClass)[ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_13 $$ final CountDownLatch reads = new CountDownLatch(numOfThreads)[ CD ]
Line_30 $$ new WriteCommandAction(myProject, myFile) -->Line_35 $$ documentManager.commitAllDocuments()[ CD ]
Line_16 $$ for (int i1 = 0; i1 < readIterations; i1++) -->Line_19 $$ ProgressManager.getInstance().runProcess(() -> ApplicationManager.getApplication().runReadAction(() -> [ CD ]
Line_14 $$ final Random random = new Random()-->Line_34 $$ writeStep(random)[ FD ]
Line_2 $$ public void testStress() throws Exception -->Line_14 $$ final Random random = new Random()[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_3 $$ int numOfThreads = 10[ CD ]
Line_2 $$ public void testStress() throws Exception -->Line_28 $$ for (int i = 0; i < iterations; i++) [ CD ]
Line_4 $$ int iterations = Timings.adjustAccordingToMySpeed(20, true)-->Line_28 $$ for (int i = 0; i < iterations; i++) [ FD ]
Line_13 $$ final CountDownLatch reads = new CountDownLatch(numOfThreads)-->Line_24 $$ reads.countDown()[ FD ]
Line_16 $$ for (int i1 = 0; i1 < readIterations; i1++) -->Line_17 $$ if (myPsiManager == null)[ CD ]
Line_28 $$ for (int i = 0; i < iterations; i++) -->Line_29 $$ Thread.sleep(100)[ CD ]
Line_12 $$ final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(getProject())-->Line_35 $$ documentManager.commitAllDocuments()[ FD ]
