Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_19 $$ progressIndicatorBase.cancel()[ CD ]
Line_3 $$ final Ref<FindResult> result = new Ref()-->Line_21 $$ assertNotNull(result.get())[ FD ]
Line_6 $$ final Thread thread = new Thread(() -> -->Line_23 $$ thread.join()[ FD ]
Line_3 $$ final Ref<FindResult> result = new Ref()-->Line_22 $$ assertTrue(!result.get().isStringFound())[ FD ]
Line_6 $$ final Thread thread = new Thread(() -> -->Line_16 $$ thread.start()[ FD ]
Line_4 $$ final CountDownLatch progressStarted = new CountDownLatch(1)-->Line_17 $$ progressStarted.await()[ FD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_4 $$ final CountDownLatch progressStarted = new CountDownLatch(1)[ CD ]
Line_3 $$ final Ref<FindResult> result = new Ref()-->Line_10 $$ result.set(myFindManager.findString(text, 0, findModel, new LightVirtualFile("foo.java")))[ FD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_22 $$ assertTrue(!result.get().isStringFound())[ CD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_6 $$ final Thread thread = new Thread(() -> [ CD ]
Line_5 $$ final ProgressIndicatorBase progressIndicatorBase = new ProgressIndicatorBase()-->Line_19 $$ progressIndicatorBase.cancel()[ FD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_18 $$ thread.join(100)[ CD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_21 $$ assertNotNull(result.get())[ CD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_10 $$ result.set(myFindManager.findString(text, 0, findModel, new LightVirtualFile("foo.java")))[ FD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_20 $$ thread.join(500)[ CD ]
Line_6 $$ final Thread thread = new Thread(() -> -->Line_20 $$ thread.join(500)[ FD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_17 $$ progressStarted.await()[ CD ]
Line_4 $$ final CountDownLatch progressStarted = new CountDownLatch(1)-->Line_9 $$ progressStarted.countDown()[ FD ]
Line_5 $$ final ProgressIndicatorBase progressIndicatorBase = new ProgressIndicatorBase()-->Line_7 $$ ProgressManager.getInstance().runProcess(() -> [ FD ]
Line_6 $$ final Thread thread = new Thread(() -> -->Line_18 $$ thread.join(100)[ FD ]
Line_3 $$ final Ref<FindResult> result = new Ref()-->Line_12 $$ result.set(new FindResultImpl())[ FD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_23 $$ thread.join()[ CD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_16 $$ thread.start()[ CD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_3 $$ final Ref<FindResult> result = new Ref()[ CD ]
Line_2 $$ private void runAsyncTest(String text, FindModel findModel) throws InterruptedException -->Line_5 $$ final ProgressIndicatorBase progressIndicatorBase = new ProgressIndicatorBase()[ CD ]
