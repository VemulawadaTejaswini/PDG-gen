Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_42 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new ClusterStateUpdateTask(Priority.IMMEDIATE) [ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_61 $$ assertThat(masters.size(), equalTo(2))[ CD ]
Line_5 $$ for (String node : nodes) -->Line_6 $$ ensureStableCluster(3, node)[ FD ]
Line_31 $$ if (event.state().nodes().masterNodeId() == null) -->Line_32 $$ oldMasterNodeSteppedDown.countDown()[ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_3 $$ final List<String> nodes = startCluster(3, 2)[ CD ]
Line_10 $$ final List<String> majoritySide = new ArrayList(nodes)-->Line_41 $$ assertDiscoveryCompleted(majoritySide)[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()[ CD ]
Line_10 $$ final List<String> majoritySide = new ArrayList(nodes)-->Line_40 $$ assertDifferentMaster(majoritySide.get(1), oldMasterNode)[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_42 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new ClusterStateUpdateTask(Priority.IMMEDIATE) [ CD ]
Line_29 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).add(new ClusterStateListener() -->Line_31 $$ if (event.state().nodes().masterNodeId() == null) [ FD ]
Line_3 $$ final List<String> nodes = startCluster(3, 2)-->Line_8 $$ assertMaster(oldMasterNode, nodes)[ FD ]
Line_15 $$ internalCluster().getInstance(ClusterService.class, node).add(new ClusterStateListener() -->Line_17 $$ DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_38 $$ masterNodeDisruption.startDisrupting()[ CD ]
Line_29 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).add(new ClusterStateListener() -->Line_31 $$ if (event.state().nodes().masterNodeId() == null) [ CD ]
Line_3 $$ final List<String> nodes = startCluster(3, 2)-->Line_58 $$ assertMaster(newMasterNode, nodes)[ FD ]
Line_12 $$ final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String, String>>>())-->Line_14 $$ masters.put(node, new ArrayList<Tuple<String, String>>())[ FD ]
Line_17 $$ DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()-->Line_19 $$ if (!Objects.equals(previousMaster, currentMaster)) [ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_51 $$ logger.info("new detected master node [[ CD ]
Line_9 $$ SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(getRandom(), oldMasterNode)-->Line_53 $$ masterNodeDisruption.stopDisrupting()[ FD ]
Line_15 $$ internalCluster().getInstance(ClusterService.class, node).add(new ClusterStateListener() -->Line_19 $$ if (!Objects.equals(previousMaster, currentMaster)) [ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_55 $$ assertDiscoveryCompleted(nodes)[ CD ]
Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_37 $$ logger.info("freezing node [[ FD ]
Line_10 $$ final List<String> majoritySide = new ArrayList(nodes)-->Line_50 $$ final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_53 $$ masterNodeDisruption.stopDisrupting()[ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_50 $$ final String newMasterNode = internalCluster().getMasterName(majoritySide.get(0))[ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_29 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).add(new ClusterStateListener() [ CD ]
Line_9 $$ SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(getRandom(), oldMasterNode)-->Line_36 $$ internalCluster().setDisruptionScheme(masterNodeDisruption)[ FD ]
Line_15 $$ internalCluster().getInstance(ClusterService.class, node).add(new ClusterStateListener() -->Line_18 $$ DiscoveryNode currentMaster = event.state().nodes().getMasterNode()[ CD ]
Line_19 $$ if (!Objects.equals(previousMaster, currentMaster)) -->Line_20 $$ logger.info("node [ CD ]
Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_29 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).add(new ClusterStateListener() [ FD ]
Line_42 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_47 $$ logger.warn("failure [[ FD ]
Line_12 $$ final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String, String>>>())-->Line_62 $$ for (Map.Entry<String, List<Tuple<String, String>>> entry : masters.entrySet()) [ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_10 $$ final List<String> majoritySide = new ArrayList(nodes)[ CD ]
Line_10 $$ final List<String> majoritySide = new ArrayList(nodes)-->Line_39 $$ assertDifferentMaster(majoritySide.get(0), oldMasterNode)[ FD ]
Line_3 $$ final List<String> nodes = startCluster(3, 2)-->Line_55 $$ assertDiscoveryCompleted(nodes)[ FD ]
Line_19 $$ if (!Objects.equals(previousMaster, currentMaster)) -->Line_22 $$ String currentMasterNodeName = currentMaster != null ? currentMaster.name() : null[ CD ]
Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_39 $$ assertDifferentMaster(majoritySide.get(0), oldMasterNode)[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_41 $$ assertDiscoveryCompleted(majoritySide)[ CD ]
Line_42 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_44 $$ return ClusterState.builder(currentState).build()[ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_9 $$ SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(getRandom(), oldMasterNode)[ CD ]
Line_15 $$ internalCluster().getInstance(ClusterService.class, node).add(new ClusterStateListener() -->Line_17 $$ DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()[ CD ]
Line_19 $$ if (!Objects.equals(previousMaster, currentMaster)) -->Line_21 $$ String previousMasterNodeName = previousMaster != null ? previousMaster.name() : null[ CD ]
Line_15 $$ internalCluster().getInstance(ClusterService.class, node).add(new ClusterStateListener() -->Line_31 $$ if (event.state().nodes().masterNodeId() == null) [ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_11 $$ majoritySide.remove(oldMasterNode)[ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_40 $$ assertDifferentMaster(majoritySide.get(1), oldMasterNode)[ CD ]
Line_42 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_44 $$ return ClusterState.builder(currentState).build()[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_52 $$ logger.info("Unfreeze node [[ CD ]
Line_18 $$ DiscoveryNode currentMaster = event.state().nodes().getMasterNode()-->Line_22 $$ String currentMasterNodeName = currentMaster != null ? currentMaster.name() : null[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_37 $$ logger.info("freezing node [[ CD ]
Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_52 $$ logger.info("Unfreeze node [[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_8 $$ assertMaster(oldMasterNode, nodes)[ CD ]
Line_12 $$ final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String, String>>>())-->Line_61 $$ assertThat(masters.size(), equalTo(2))[ FD ]
Line_10 $$ final List<String> majoritySide = new ArrayList(nodes)-->Line_11 $$ majoritySide.remove(oldMasterNode)[ FD ]
Line_18 $$ DiscoveryNode currentMaster = event.state().nodes().getMasterNode()-->Line_19 $$ if (!Objects.equals(previousMaster, currentMaster)) [ FD ]
Line_19 $$ if (!Objects.equals(previousMaster, currentMaster)) -->Line_23 $$ masters.get(node).add(new Tuple(previousMasterNodeName, currentMasterNodeName))[ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_54 $$ oldMasterNodeSteppedDown.await(30, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_56 $$ assertBusy(new Runnable() [ CD ]
Line_56 $$ assertBusy(new Runnable() -->Line_58 $$ assertMaster(newMasterNode, nodes)[ CD ]
Line_5 $$ for (String node : nodes) -->Line_14 $$ masters.put(node, new ArrayList<Tuple<String, String>>())[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_36 $$ internalCluster().setDisruptionScheme(masterNodeDisruption)[ CD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_39 $$ assertDifferentMaster(majoritySide.get(0), oldMasterNode)[ CD ]
Line_17 $$ DiscoveryNode previousMaster = event.previousState().nodes().getMasterNode()-->Line_21 $$ String previousMasterNodeName = previousMaster != null ? previousMaster.name() : null[ FD ]
Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_40 $$ assertDifferentMaster(majoritySide.get(1), oldMasterNode)[ FD ]
Line_9 $$ SingleNodeDisruption masterNodeDisruption = new LongGCDisruption(getRandom(), oldMasterNode)-->Line_38 $$ masterNodeDisruption.startDisrupting()[ FD ]
Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_66 $$ assertThat("[" + nodeName + "] First transition's previous master should be [null]", recordedMasterTransition.get(0).v1(), equalTo(oldMasterNode))[ FD ]
Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_11 $$ majoritySide.remove(oldMasterNode)[ FD ]
Line_4 $$ final String oldMasterNode = internalCluster().getMasterName()-->Line_8 $$ assertMaster(oldMasterNode, nodes)[ FD ]
Line_5 $$ for (String node : nodes) -->Line_15 $$ internalCluster().getInstance(ClusterService.class, node).add(new ClusterStateListener() [ FD ]
Line_5 $$ for (String node : nodes) -->Line_23 $$ masters.get(node).add(new Tuple(previousMasterNodeName, currentMasterNodeName))[ FD ]
Line_12 $$ final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String, String>>>())-->Line_23 $$ masters.get(node).add(new Tuple(previousMasterNodeName, currentMasterNodeName))[ FD ]
Line_2 $$ public void testStaleMasterNotHijackingMajority() throws Exception -->Line_12 $$ final Map<String, List<Tuple<String, String>>> masters = Collections.synchronizedMap(new HashMap<String, List<Tuple<String, String>>>())[ CD ]
Line_42 $$ internalCluster().getInstance(ClusterService.class, oldMasterNode).submitStateUpdateTask("sneaky-update", new ClusterStateUpdateTask(Priority.IMMEDIATE) -->Line_47 $$ logger.warn("failure [[ CD ]
Line_15 $$ internalCluster().getInstance(ClusterService.class, node).add(new ClusterStateListener() -->Line_20 $$ logger.info("node [ FD ]
Line_15 $$ internalCluster().getInstance(ClusterService.class, node).add(new ClusterStateListener() -->Line_18 $$ DiscoveryNode currentMaster = event.state().nodes().getMasterNode()[ FD ]
Line_5 $$ for (String node : nodes) -->Line_20 $$ logger.info("node [ FD ]
