Line_9 $$ FutureTask<Boolean> bgTask-->Line_23 $$ bgTask = new FutureTask<Boolean>(new Callable<Boolean>() [ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(TimeoutProps)-->Line_33 $$ em2.lock(lock2, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(TimeoutProps)-->Line_40 $$ em2.getTransaction().commit()[ FD ]
Line_4 $$ Map<String, Object> TimeoutProps = new HashMap<String, Object>()-->Line_5 $$ TimeoutProps.put(AvailableSettings.LOCK_TIMEOUT, 1000)[ FD ]
Line_8 $$ Thread t = null-->Line_59 $$ if (t != null) [ FD ]
Line_26 $$ boolean timedOut = false-->Line_36 $$ timedOut = true[ FD ]
Line_23 $$ bgTask = new FutureTask<Boolean>(new Callable<Boolean>() -->Line_53 $$ assertTrue("background test thread timed out on lock attempt", bgTask.get())[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_21 $$ lock.getName()[ FD ]
Line_2 $$ public void testLockTimeoutEMProps() throws Exception -->Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_15 $$ em.getTransaction().commit()[ FD ]
Line_8 $$ Thread t = null-->Line_50 $$ t.start()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_54 $$ em.getTransaction().commit()[ FD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_51 $$ boolean latchSet = latch.await(10, TimeUnit.SECONDS)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_19 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(TimeoutProps)-->Line_27 $$ em2.getTransaction().begin()[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_18 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_29 $$ Lock lock2 = em2.getReference(Lock.class, id)-->Line_30 $$ lock2.getName()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_63 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_63 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_62 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testLockTimeoutEMProps() throws Exception -->Line_5 $$ TimeoutProps.put(AvailableSettings.LOCK_TIMEOUT, 1000)[ CD ]
Line_7 $$ Lock lock = new Lock()-->Line_63 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_56 $$ if (em.getTransaction().isActive()) -->Line_57 $$ em.getTransaction().rollback()[ CD ]
Line_4 $$ Map<String, Object> TimeoutProps = new HashMap<String, Object>()-->Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(TimeoutProps)[ FD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_43 $$ latch.countDown()[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_12 $$ lock.setName("testLockTimeoutEMProps")[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_64 $$ em.remove(lock)[ FD ]
Line_2 $$ public void testLockTimeoutEMProps() throws Exception -->Line_8 $$ Thread t = null[ CD ]
Line_7 $$ Lock lock = new Lock()-->Line_19 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(TimeoutProps)-->Line_29 $$ Lock lock2 = em2.getReference(Lock.class, id)[ FD ]
Line_8 $$ Thread t = null-->Line_48 $$ t.setDaemon(true)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_66 $$ em.close()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_18 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_14 $$ em.persist(lock)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_57 $$ em.getTransaction().rollback()[ FD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_20 $$ final Integer id = lock.getId()[ FD ]
Line_2 $$ public void testLockTimeoutEMProps() throws Exception -->Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(TimeoutProps)[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_17 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testLockTimeoutEMProps() throws Exception -->Line_9 $$ FutureTask<Boolean> bgTask[ CD ]
Line_20 $$ final Integer id = lock.getId()-->Line_29 $$ Lock lock2 = em2.getReference(Lock.class, id)[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_64 $$ em.remove(lock)[ FD ]
Line_2 $$ public void testLockTimeoutEMProps() throws Exception -->Line_4 $$ Map<String, Object> TimeoutProps = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testLockTimeoutEMProps() throws Exception -->Line_3 $$ EntityManager em = getOrCreateEntityManager()[ CD ]
Line_2 $$ public void testLockTimeoutEMProps() throws Exception -->Line_7 $$ Lock lock = new Lock()[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_13 $$ em.getTransaction().begin()[ FD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_19 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_29 $$ Lock lock2 = em2.getReference(Lock.class, id)-->Line_33 $$ em2.lock(lock2, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_21 $$ lock.getName()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_56 $$ if (em.getTransaction().isActive()) [ FD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_64 $$ em.remove(lock)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_65 $$ em.getTransaction().commit()[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(TimeoutProps)-->Line_67 $$ em2.close()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_16 $$ em.clear()[ FD ]
Line_8 $$ Thread t = null-->Line_49 $$ t.setName("Lock timeout Test (bg)")[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_14 $$ em.persist(lock)[ FD ]
Line_9 $$ FutureTask<Boolean> bgTask-->Line_53 $$ assertTrue("background test thread timed out on lock attempt", bgTask.get())[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_20 $$ final Integer id = lock.getId()[ FD ]
Line_8 $$ Thread t = null-->Line_60 $$ t.join()[ FD ]
Line_59 $$ if (t != null) -->Line_60 $$ t.join()[ CD ]
