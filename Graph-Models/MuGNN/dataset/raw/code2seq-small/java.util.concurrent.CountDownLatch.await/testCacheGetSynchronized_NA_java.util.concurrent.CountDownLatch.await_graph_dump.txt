Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_4 $$ final AtomicInteger counter = new AtomicInteger()[ CD ]
Line_3 $$ T cache = getCache()-->Line_10 $$ Integer value = cache.get(key, () -> [ FD ]
Line_4 $$ final AtomicInteger counter = new AtomicInteger()-->Line_12 $$ return counter.incrementAndGet()[ FD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_3 $$ T cache = getCache()[ CD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_5 $$ final List<Object> results = new CopyOnWriteArrayList()[ CD ]
Line_5 $$ final List<Object> results = new CopyOnWriteArrayList()-->Line_23 $$ assertEquals(10, results.size())[ FD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_7 $$ String key = createRandomKey()[ CD ]
Line_7 $$ String key = createRandomKey()-->Line_10 $$ Integer value = cache.get(key, () -> [ FD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_22 $$ latch.await()[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(10)-->Line_16 $$ latch.countDown()[ FD ]
Line_5 $$ final List<Object> results = new CopyOnWriteArrayList()-->Line_24 $$ results.forEach( r -> assertThat(r, is(1)))[ FD ]
Line_10 $$ Integer value = cache.get(key, () -> -->Line_14 $$ results.add(value)[ FD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_23 $$ assertEquals(10, results.size())[ CD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_8 $$ Runnable run = () -> [ CD ]
Line_19 $$ for (int i = 0; i < 10; i++) -->Line_20 $$ new Thread(run).start()[ CD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_19 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(10)[ CD ]
Line_2 $$ public void testCacheGetSynchronized() throws InterruptedException -->Line_24 $$ results.forEach( r -> assertThat(r, is(1)))[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(10)-->Line_22 $$ latch.await()[ FD ]
Line_5 $$ final List<Object> results = new CopyOnWriteArrayList()-->Line_14 $$ results.add(value)[ FD ]
