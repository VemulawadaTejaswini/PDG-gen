Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_12 $$ final String node_2 = node_2Future.get()[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_13 $$ List<IndexRequestBuilder> indexRequestBuilderList = new ArrayList()[ CD ]
Line_13 $$ List<IndexRequestBuilder> indexRequestBuilderList = new ArrayList()-->Line_15 $$ indexRequestBuilderList.add(client().prepareIndex().setIndex("test").setType("doc").setSource("[ FD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_11 $$ InternalTestCluster.Async<String> node_2Future = internalCluster().startDataOnlyNodeAsync()[ CD ]
Line_18 $$ SingleNodeDisruption disruption = new BlockClusterStateProcessing(node_2, getRandom())-->Line_26 $$ disruption.startDisrupting()[ FD ]
Line_13 $$ List<IndexRequestBuilder> indexRequestBuilderList = new ArrayList()-->Line_17 $$ indexRandom(true, indexRequestBuilderList)[ FD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_3 $$ configureUnicastCluster(3, null, 1)[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_7 $$ final String masterNode = masterNodeFuture.get()[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_22 $$ CountDownLatch endRelocationLatch = new CountDownLatch(1)[ CD ]
Line_12 $$ final String node_2 = node_2Future.get()-->Line_20 $$ MockTransportService transportServiceNode2 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_2)[ FD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_27 $$ endRelocationLatch.await()[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_23 $$ transportServiceNode2.addTracer(new IndicesStoreIntegrationIT.ReclocationStartEndTracer(logger, beginRelocationLatch, endRelocationLatch))[ CD ]
Line_22 $$ CountDownLatch endRelocationLatch = new CountDownLatch(1)-->Line_27 $$ endRelocationLatch.await()[ FD ]
Line_14 $$ for (int i = 0; i < 100; i++) -->Line_15 $$ indexRequestBuilderList.add(client().prepareIndex().setIndex("test").setType("doc").setSource("[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_26 $$ disruption.startDisrupting()[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_25 $$ beginRelocationLatch.await()[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_17 $$ indexRandom(true, indexRequestBuilderList)[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_9 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)))[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_4 $$ InternalTestCluster.Async<String> masterNodeFuture = internalCluster().startMasterOnlyNodeAsync()[ CD ]
Line_5 $$ InternalTestCluster.Async<String> node_1Future = internalCluster().startDataOnlyNodeAsync()-->Line_6 $$ final String node_1 = node_1Future.get()[ FD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_19 $$ internalCluster().setDisruptionScheme(disruption)[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_10 $$ ensureGreen("test")[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_6 $$ final String node_1 = node_1Future.get()[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_14 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_18 $$ SingleNodeDisruption disruption = new BlockClusterStateProcessing(node_2, getRandom())-->Line_19 $$ internalCluster().setDisruptionScheme(disruption)[ FD ]
Line_21 $$ CountDownLatch beginRelocationLatch = new CountDownLatch(1)-->Line_25 $$ beginRelocationLatch.await()[ FD ]
Line_20 $$ MockTransportService transportServiceNode2 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_2)-->Line_23 $$ transportServiceNode2.addTracer(new IndicesStoreIntegrationIT.ReclocationStartEndTracer(logger, beginRelocationLatch, endRelocationLatch))[ FD ]
Line_11 $$ InternalTestCluster.Async<String> node_2Future = internalCluster().startDataOnlyNodeAsync()-->Line_12 $$ final String node_2 = node_2Future.get()[ FD ]
Line_4 $$ InternalTestCluster.Async<String> masterNodeFuture = internalCluster().startMasterOnlyNodeAsync()-->Line_7 $$ final String masterNode = masterNodeFuture.get()[ FD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_28 $$ assertThat(client().prepareSearch().setSize(0).get().getHits().totalHits(), equalTo(100l))[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_21 $$ CountDownLatch beginRelocationLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_5 $$ InternalTestCluster.Async<String> node_1Future = internalCluster().startDataOnlyNodeAsync()[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_18 $$ SingleNodeDisruption disruption = new BlockClusterStateProcessing(node_2, getRandom())[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_24 $$ internalCluster().client().admin().cluster().prepareReroute().add(new MoveAllocationCommand(new ShardId("test", 0), node_1, node_2)).get()[ CD ]
Line_2 $$ public void testSearchWithRelocationAndSlowClusterStateProcessing() throws Exception -->Line_20 $$ MockTransportService transportServiceNode2 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_2)[ CD ]
