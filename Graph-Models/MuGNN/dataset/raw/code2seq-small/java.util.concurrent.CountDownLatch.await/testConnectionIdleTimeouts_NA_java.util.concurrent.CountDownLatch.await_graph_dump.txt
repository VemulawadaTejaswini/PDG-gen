Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_15 $$ final AtomicBoolean error = new AtomicBoolean()[ CD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_12 $$ final CyclicBarrier firstCallBarrier = new CyclicBarrier(2)[ CD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_6 $$ final int killMax = 3[ CD ]
Line_13 $$ final CyclicBarrier callBarrier = new CyclicBarrier(clients)-->Line_59 $$ callBarrier.await()[ FD ]
Line_16 $$ final TestServer server = new TestServer(clients, false)-->Line_66 $$ assertEquals(i, server.getNumOpenConnections())[ FD ]
Line_15 $$ final AtomicBoolean error = new AtomicBoolean()-->Line_73 $$ assertFalse(error.get())[ FD ]
Line_16 $$ final TestServer server = new TestServer(clients, false)-->Line_81 $$ server.stop()[ FD ]
Line_12 $$ final CyclicBarrier firstCallBarrier = new CyclicBarrier(2)-->Line_71 $$ firstCallBarrier.await()[ FD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_14 $$ final CountDownLatch allCallLatch = new CountDownLatch(clients)[ CD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_4 $$ final int maxIdle = 1000[ CD ]
Line_63 $$ for (int i = clients; i > 1; i -= killMax) -->Line_66 $$ assertEquals(i, server.getNumOpenConnections())[ FD ]
Line_7 $$ final int clients = 1 + killMax * 2-->Line_40 $$ for (int i = 0; i < clients; i++) [ FD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_8 $$ conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, maxIdle)[ CD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_10 $$ conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_KILL_MAX_KEY, killMax)[ CD ]
Line_6 $$ final int killMax = 3-->Line_63 $$ for (int i = clients; i > 1; i -= killMax) [ FD ]
Line_63 $$ for (int i = clients; i > 1; i -= killMax) -->Line_66 $$ assertEquals(i, server.getNumOpenConnections())[ CD ]
Line_16 $$ final TestServer server = new TestServer(clients, false)-->Line_70 $$ assertEquals(1, server.getNumOpenConnections())[ FD ]
Line_15 $$ final AtomicBoolean error = new AtomicBoolean()-->Line_31 $$ error.set(true)[ FD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_5 $$ final int cleanupInterval = maxIdle * 3 / 4[ CD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_16 $$ final TestServer server = new TestServer(clients, false)[ CD ]
Line_40 $$ for (int i = 0; i < clients; i++) -->Line_54 $$ threads[i].start()[ CD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_17 $$ Thread[] threads = new Thread[clients][ CD ]
Line_14 $$ final CountDownLatch allCallLatch = new CountDownLatch(clients)-->Line_56 $$ allCallLatch.await()[ FD ]
Line_7 $$ final int clients = 1 + killMax * 2-->Line_61 $$ assertEquals(clients, server.getNumOpenConnections())[ FD ]
Line_16 $$ final TestServer server = new TestServer(clients, false)-->Line_61 $$ assertEquals(clients, server.getNumOpenConnections())[ FD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_3 $$ ((Log4JLogger) Server.LOG).getLogger().setLevel(Level.DEBUG)[ CD ]
Line_77 $$ if (t != null) -->Line_78 $$ t.interrupt()[ CD ]
Line_43 $$ Client client = new Client(LongWritable.class, clientConf)-->Line_45 $$ client.call(new LongWritable(Thread.currentThread().getId()), addr, null, null, 0, clientConf)[ FD ]
Line_16 $$ final TestServer server = new TestServer(clients, false)-->Line_74 $$ assertEquals(0, server.getNumOpenConnections())[ FD ]
Line_63 $$ for (int i = clients; i > 1; i -= killMax) -->Line_65 $$ assertFalse(error.get())[ CD ]
Line_13 $$ final CyclicBarrier callBarrier = new CyclicBarrier(clients)-->Line_27 $$ callBarrier.await()[ FD ]
Line_5 $$ final int cleanupInterval = maxIdle * 3 / 4-->Line_64 $$ Thread.sleep(cleanupInterval)[ FD ]
Line_15 $$ final AtomicBoolean error = new AtomicBoolean()-->Line_65 $$ assertFalse(error.get())[ FD ]
Line_24 $$ if (first.compareAndSet(true, false)) -->Line_27 $$ callBarrier.await()[ CD ]
Line_15 $$ final AtomicBoolean error = new AtomicBoolean()-->Line_57 $$ assertFalse(error.get())[ FD ]
Line_16 $$ final TestServer server = new TestServer(clients, false)-->Line_58 $$ assertEquals(clients, server.getNumOpenConnections())[ FD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_11 $$ conf.setInt(CommonConfigurationKeys.IPC_CLIENT_CONNECTION_IDLESCANINTERVAL_KEY, cleanupInterval)[ CD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_9 $$ conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_IDLETHRESHOLD_KEY, 0)[ CD ]
Line_24 $$ if (first.compareAndSet(true, false)) -->Line_25 $$ firstCallBarrier.await()[ CD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_7 $$ final int clients = 1 + killMax * 2[ CD ]
Line_40 $$ for (int i = 0; i < clients; i++) -->Line_41 $$ threads[i] = new Thread(new Runnable() [ CD ]
Line_16 $$ final TestServer server = new TestServer(clients, false)-->Line_35 $$ server.start()[ FD ]
Line_12 $$ final CyclicBarrier firstCallBarrier = new CyclicBarrier(2)-->Line_25 $$ firstCallBarrier.await()[ FD ]
Line_7 $$ final int clients = 1 + killMax * 2-->Line_58 $$ assertEquals(clients, server.getNumOpenConnections())[ FD ]
Line_14 $$ final CountDownLatch allCallLatch = new CountDownLatch(clients)-->Line_23 $$ allCallLatch.countDown()[ FD ]
Line_16 $$ final TestServer server = new TestServer(clients, false)-->Line_37 $$ final InetSocketAddress addr = NetUtils.getConnectAddress(server)[ FD ]
Line_40 $$ for (int i = 0; i < clients; i++) -->Line_63 $$ for (int i = clients; i > 1; i -= killMax) [ FD ]
Line_40 $$ for (int i = 0; i < clients; i++) -->Line_66 $$ assertEquals(i, server.getNumOpenConnections())[ FD ]
Line_6 $$ final int killMax = 3-->Line_10 $$ conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_KILL_MAX_KEY, killMax)[ FD ]
Line_4 $$ final int maxIdle = 1000-->Line_8 $$ conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECTION_MAXIDLETIME_KEY, maxIdle)[ FD ]
Line_2 $$ public void testConnectionIdleTimeouts() throws Exception -->Line_13 $$ final CyclicBarrier callBarrier = new CyclicBarrier(clients)[ CD ]
Line_41 $$ threads[i] = new Thread(new Runnable() -->Line_43 $$ Client client = new Client(LongWritable.class, clientConf)[ CD ]
Line_5 $$ final int cleanupInterval = maxIdle * 3 / 4-->Line_68 $$ Thread.sleep(cleanupInterval)[ FD ]
Line_15 $$ final AtomicBoolean error = new AtomicBoolean()-->Line_69 $$ assertFalse(error.get())[ FD ]
Line_77 $$ if (t != null) -->Line_79 $$ t.join()[ CD ]
Line_63 $$ for (int i = clients; i > 1; i -= killMax) -->Line_64 $$ Thread.sleep(cleanupInterval)[ CD ]
Line_5 $$ final int cleanupInterval = maxIdle * 3 / 4-->Line_11 $$ conf.setInt(CommonConfigurationKeys.IPC_CLIENT_CONNECTION_IDLESCANINTERVAL_KEY, cleanupInterval)[ FD ]
