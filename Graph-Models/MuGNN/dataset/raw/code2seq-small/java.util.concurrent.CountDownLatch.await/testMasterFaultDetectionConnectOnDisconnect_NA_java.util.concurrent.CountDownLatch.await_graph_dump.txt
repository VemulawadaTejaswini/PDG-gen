Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_3 $$ Settings.Builder settings = Settings.builder()[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_6 $$ ClusterName clusterName = new ClusterName(randomAsciiOfLengthBetween(3, 20))[ CD ]
Line_4 $$ boolean shouldRetry = randomBoolean()-->Line_24 $$ if (!shouldRetry) [ FD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_5 $$ settings.put(FaultDetection.SETTING_CONNECT_ON_NETWORK_DISCONNECT, shouldRetry).put(FaultDetection.SETTING_PING_INTERVAL, "5m")[ CD ]
Line_13 $$ masterFD.addListener(new MasterFaultDetection.Listener() -->Line_16 $$ failureReason[0] = reason[ CD ]
Line_24 $$ if (!shouldRetry) -->Line_25 $$ matcher = Matchers.not(matcher)[ CD ]
Line_12 $$ final CountDownLatch notified = new CountDownLatch(1)-->Line_17 $$ notified.countDown()[ FD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_7 $$ final ClusterState state = ClusterState.builder(clusterName).nodes(buildNodesForA(false)).build()[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_11 $$ final DiscoveryNode[] failureNode = new DiscoveryNode[1][ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_20 $$ serviceB.stop()[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_27 $$ assertThat(failureReason[0], matcher)[ CD ]
Line_8 $$ MasterFaultDetection masterFD = new MasterFaultDetection(settings.build(), threadPool, serviceA, clusterName, new NoopClusterService(state))-->Line_9 $$ masterFD.start(nodeB, "test")[ FD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_10 $$ final String[] failureReason = new String[1][ CD ]
Line_3 $$ Settings.Builder settings = Settings.builder()-->Line_8 $$ MasterFaultDetection masterFD = new MasterFaultDetection(settings.build(), threadPool, serviceA, clusterName, new NoopClusterService(state))[ FD ]
Line_8 $$ MasterFaultDetection masterFD = new MasterFaultDetection(settings.build(), threadPool, serviceA, clusterName, new NoopClusterService(state))-->Line_13 $$ masterFD.addListener(new MasterFaultDetection.Listener() [ FD ]
Line_13 $$ masterFD.addListener(new MasterFaultDetection.Listener() -->Line_15 $$ failureNode[0] = masterNode[ FD ]
Line_12 $$ final CountDownLatch notified = new CountDownLatch(1)-->Line_21 $$ notified.await(30, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_4 $$ boolean shouldRetry = randomBoolean()[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_8 $$ MasterFaultDetection masterFD = new MasterFaultDetection(settings.build(), threadPool, serviceA, clusterName, new NoopClusterService(state))[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_12 $$ final CountDownLatch notified = new CountDownLatch(1)[ CD ]
Line_3 $$ Settings.Builder settings = Settings.builder()-->Line_5 $$ settings.put(FaultDetection.SETTING_CONNECT_ON_NETWORK_DISCONNECT, shouldRetry).put(FaultDetection.SETTING_PING_INTERVAL, "5m")[ FD ]
Line_13 $$ masterFD.addListener(new MasterFaultDetection.Listener() -->Line_17 $$ notified.countDown()[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_21 $$ notified.await(30, TimeUnit.SECONDS)[ CD ]
Line_13 $$ masterFD.addListener(new MasterFaultDetection.Listener() -->Line_15 $$ failureNode[0] = masterNode[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_9 $$ masterFD.start(nodeB, "test")[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_23 $$ Matcher<String> matcher = Matchers.containsString("verified")[ CD ]
Line_6 $$ ClusterName clusterName = new ClusterName(randomAsciiOfLengthBetween(3, 20))-->Line_7 $$ final ClusterState state = ClusterState.builder(clusterName).nodes(buildNodesForA(false)).build()[ FD ]
Line_13 $$ masterFD.addListener(new MasterFaultDetection.Listener() -->Line_16 $$ failureReason[0] = reason[ FD ]
Line_4 $$ boolean shouldRetry = randomBoolean()-->Line_5 $$ settings.put(FaultDetection.SETTING_CONNECT_ON_NETWORK_DISCONNECT, shouldRetry).put(FaultDetection.SETTING_PING_INTERVAL, "5m")[ FD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_13 $$ masterFD.addListener(new MasterFaultDetection.Listener() [ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_22 $$ assertEquals(nodeB, failureNode[0])[ CD ]
Line_2 $$ public void testMasterFaultDetectionConnectOnDisconnect() throws InterruptedException -->Line_24 $$ if (!shouldRetry) [ CD ]
