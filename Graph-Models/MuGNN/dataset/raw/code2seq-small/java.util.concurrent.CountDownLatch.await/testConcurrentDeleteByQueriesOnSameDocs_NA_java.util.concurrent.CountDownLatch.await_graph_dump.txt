Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_5 $$ final long docs = randomIntBetween(50, 100)[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_12 $$ final CountDownLatch start = new CountDownLatch(1)[ CD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_17 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(query).get(), docs)[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_46 $$ assertHitCount(client().prepareSearch("test").setSize(0).get(), 0L)[ CD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_33 $$ threads[i] = new Thread(r)[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_45 $$ assertThat(assertionError + " should be null", assertionError, nullValue())[ CD ]
Line_14 $$ final MatchQueryBuilder query = QueryBuilders.matchQuery("foo", "bar")-->Line_17 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(query).get(), docs)[ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_14 $$ final MatchQueryBuilder query = QueryBuilders.matchQuery("foo", "bar")[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_48 $$ assertSearchContextsClosed()[ CD ]
Line_12 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_36 $$ start.countDown()[ FD ]
Line_6 $$ for (int i = 0; i < docs; i++) -->Line_7 $$ index("test", "test", String.valueOf(i), "foo", "bar")[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_6 $$ for (int i = 0; i < docs; i++) [ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_11 $$ final Thread[] threads = new Thread[scaledRandomIntBetween(2, 9)][ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_9 $$ refresh()[ CD ]
Line_13 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()-->Line_41 $$ Throwable assertionError = exceptionHolder.get()[ FD ]
Line_22 $$ DeleteByQueryResponse rsp = newDeleteByQuery().setQuery(query).get()-->Line_24 $$ assertThat(rsp.getTotalFound(), equalTo(docs))[ FD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_34 $$ threads[i].start()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_15 $$ final AtomicLong deleted = new AtomicLong(0)[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_42 $$ if (assertionError != null) [ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_47 $$ assertThat(deleted.get(), equalTo(docs))[ CD ]
Line_13 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()-->Line_28 $$ exceptionHolder.set(e)[ FD ]
Line_22 $$ DeleteByQueryResponse rsp = newDeleteByQuery().setQuery(query).get()-->Line_23 $$ deleted.addAndGet(rsp.getTotalDeleted())[ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_16 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_40 $$ refresh()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_41 $$ Throwable assertionError = exceptionHolder.get()[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_10 $$ assertHitCount(client().prepareSearch("test").setSize(0).get(), docs)[ CD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_3 $$ assertAcked(prepareCreate("test").setSettings(Settings.settingsBuilder().put("index.refresh_interval", -1)))[ CD ]
Line_12 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_21 $$ start.await()[ FD ]
Line_15 $$ final AtomicLong deleted = new AtomicLong(0)-->Line_47 $$ assertThat(deleted.get(), equalTo(docs))[ FD ]
Line_5 $$ final long docs = randomIntBetween(50, 100)-->Line_10 $$ assertHitCount(client().prepareSearch("test").setSize(0).get(), docs)[ FD ]
Line_42 $$ if (assertionError != null) -->Line_43 $$ assertionError.printStackTrace()[ CD ]
Line_6 $$ for (int i = 0; i < docs; i++) -->Line_16 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_14 $$ final MatchQueryBuilder query = QueryBuilders.matchQuery("foo", "bar")-->Line_22 $$ DeleteByQueryResponse rsp = newDeleteByQuery().setQuery(query).get()[ FD ]
Line_5 $$ final long docs = randomIntBetween(50, 100)-->Line_24 $$ assertThat(rsp.getTotalFound(), equalTo(docs))[ FD ]
Line_5 $$ final long docs = randomIntBetween(50, 100)-->Line_6 $$ for (int i = 0; i < docs; i++) [ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_36 $$ start.countDown()[ CD ]
Line_5 $$ final long docs = randomIntBetween(50, 100)-->Line_47 $$ assertThat(deleted.get(), equalTo(docs))[ FD ]
Line_16 $$ for (int i = 0; i < threads.length; i++) -->Line_18 $$ Runnable r = new Runnable() [ CD ]
Line_6 $$ for (int i = 0; i < docs; i++) -->Line_7 $$ index("test", "test", String.valueOf(i), "foo", "bar")[ FD ]
Line_2 $$ public void testConcurrentDeleteByQueriesOnSameDocs() throws Exception -->Line_13 $$ final AtomicReference<Throwable> exceptionHolder = new AtomicReference()[ CD ]
Line_5 $$ final long docs = randomIntBetween(50, 100)-->Line_17 $$ assertHitCount(client().prepareSearch("test").setSize(0).setQuery(query).get(), docs)[ FD ]
Line_15 $$ final AtomicLong deleted = new AtomicLong(0)-->Line_23 $$ deleted.addAndGet(rsp.getTotalDeleted())[ FD ]
