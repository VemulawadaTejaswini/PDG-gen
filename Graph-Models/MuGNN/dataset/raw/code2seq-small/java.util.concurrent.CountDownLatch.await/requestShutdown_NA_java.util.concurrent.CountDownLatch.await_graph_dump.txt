Line_11 $$ CountDownLatch countDownLatch = new CountDownLatch(activeTasks.size())-->Line_15 $$ countDownLatch.countDown()[ FD ]
Line_2 $$ public synchronized void requestShutdown() -->Line_8 $$ shutdownHandler.schedule(() -> [ CD ]
Line_11 $$ CountDownLatch countDownLatch = new CountDownLatch(activeTasks.size())-->Line_21 $$ countDownLatch.await()[ FD ]
Line_2 $$ public synchronized void requestShutdown() -->Line_3 $$ log.info("Shutdown requested")[ CD ]
Line_9 $$ List<TaskInfo> activeTasks = getActiveTasks()-->Line_11 $$ CountDownLatch countDownLatch = new CountDownLatch(activeTasks.size())[ FD ]
Line_10 $$ while (activeTasks.size() > 0) -->Line_11 $$ CountDownLatch countDownLatch = new CountDownLatch(activeTasks.size())[ CD ]
Line_10 $$ while (activeTasks.size() > 0) -->Line_26 $$ activeTasks = getActiveTasks()[ CD ]
Line_26 $$ activeTasks = getActiveTasks()-->Line_10 $$ while (activeTasks.size() > 0) [ FD ]
Line_26 $$ activeTasks = getActiveTasks()-->Line_11 $$ CountDownLatch countDownLatch = new CountDownLatch(activeTasks.size())[ FD ]
Line_9 $$ List<TaskInfo> activeTasks = getActiveTasks()-->Line_10 $$ while (activeTasks.size() > 0) [ FD ]
Line_12 $$ for (TaskInfo taskInfo : activeTasks) -->Line_13 $$ sqlTaskManager.addStateChangeListener(taskInfo.getTaskId(),  newState -> [ FD ]
Line_9 $$ List<TaskInfo> activeTasks = getActiveTasks()-->Line_26 $$ activeTasks = getActiveTasks()[ FD ]
Line_29 $$ Future<?> shutdownFuture = lifeCycleStopper.submit(() -> -->Line_34 $$ shutdownFuture.get(LIFECYCLE_STOP_TIMEOUT.toMillis(), MILLISECONDS)[ FD ]
Line_2 $$ public synchronized void requestShutdown() -->Line_7 $$ setShutdownRequested(true)[ CD ]
Line_4 $$ if (isShutdownRequested() || isCoordinator) -->Line_5 $$ return[ CD ]
Line_14 $$ if (newState.isDone()) -->Line_15 $$ countDownLatch.countDown()[ CD ]
Line_10 $$ while (activeTasks.size() > 0) -->Line_19 $$ log.info("Waiting for all tasks to finish")[ CD ]
Line_2 $$ public synchronized void requestShutdown() -->Line_4 $$ if (isShutdownRequested() || isCoordinator) [ CD ]
