Line_3 $$ final AtomicReference<Throwable> failure = new AtomicReference<Throwable>()-->Line_21 $$ failure.set(new IllegalStateException("Unexpected error: '" + actual + "'"))[ FD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_3 $$ final AtomicReference<Throwable> failure = new AtomicReference<Throwable>()[ CD ]
Line_4 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_24 $$ latch.countDown()[ FD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_6 $$ this.template.setThrowExceptionOnLateReply(true)[ CD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_4 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_7 $$ SubscribableChannel channel = new ExecutorSubscribableChannel(this.executor)-->Line_8 $$ channel.subscribe(new MessageHandler() [ FD ]
Line_3 $$ final AtomicReference<Throwable> failure = new AtomicReference<Throwable>()-->Line_30 $$ if (failure.get() != null) [ FD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_5 $$ this.template.setReceiveTimeout(1)[ CD ]
Line_20 $$ if (!expected.equals(actual)) -->Line_21 $$ failure.set(new IllegalStateException("Unexpected error: '" + actual + "'"))[ CD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_8 $$ channel.subscribe(new MessageHandler() [ CD ]
Line_8 $$ channel.subscribe(new MessageHandler() -->Line_12 $$ MessageChannel replyChannel = (MessageChannel) message.getHeaders().getReplyChannel()[ FD ]
Line_19 $$ String actual = ex.getMessage()-->Line_20 $$ if (!expected.equals(actual)) [ FD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_28 $$ assertNull(this.template.convertSendAndReceive(channel, "request", String.class))[ CD ]
Line_12 $$ MessageChannel replyChannel = (MessageChannel) message.getHeaders().getReplyChannel()-->Line_13 $$ replyChannel.send(new GenericMessage<String>("response"))[ FD ]
Line_18 $$ String expected = "Reply message received but the receiving thread has exited due to a timeout"-->Line_20 $$ if (!expected.equals(actual)) [ FD ]
Line_4 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_29 $$ assertTrue(latch.await(1000, TimeUnit.MILLISECONDS))[ FD ]
Line_3 $$ final AtomicReference<Throwable> failure = new AtomicReference<Throwable>()-->Line_14 $$ failure.set(new IllegalStateException("Expected exception"))[ FD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_29 $$ assertTrue(latch.await(1000, TimeUnit.MILLISECONDS))[ CD ]
Line_3 $$ final AtomicReference<Throwable> failure = new AtomicReference<Throwable>()-->Line_31 $$ throw new AssertionError(failure.get())[ FD ]
Line_7 $$ SubscribableChannel channel = new ExecutorSubscribableChannel(this.executor)-->Line_28 $$ assertNull(this.template.convertSendAndReceive(channel, "request", String.class))[ FD ]
Line_3 $$ final AtomicReference<Throwable> failure = new AtomicReference<Throwable>()-->Line_16 $$ failure.set(e)[ FD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_7 $$ SubscribableChannel channel = new ExecutorSubscribableChannel(this.executor)[ CD ]
Line_2 $$ public void sendAndReceiveTimeout() throws InterruptedException -->Line_30 $$ if (failure.get() != null) [ CD ]
