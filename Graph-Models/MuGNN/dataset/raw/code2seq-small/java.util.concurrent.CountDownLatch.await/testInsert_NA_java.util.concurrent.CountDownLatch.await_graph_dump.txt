Line_2 $$ public void testInsert() throws Exception -->Line_6 $$ final CountDownLatch completionLatch = new CountDownLatch(2)[ CD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_32 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_31 $$ SessionImplementor session = mockedSession()-->Line_34 $$ assertNull("Correct initial value", localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_55 $$ assertEquals("Correct node1 value", VALUE1, localAccessStrategy.get(s1, KEY, s1.getTimestamp()))[ FD ]
Line_7 $$ Thread inserter = new Thread() -->Line_48 $$ inserter.setDaemon(true)[ FD ]
Line_2 $$ public void testInsert() throws Exception -->Line_7 $$ Thread inserter = new Thread() [ CD ]
Line_31 $$ SessionImplementor session = mockedSession()-->Line_32 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_2 $$ public void testInsert() throws Exception -->Line_52 $$ assertTrue("Threads completed", completionLatch.await(1000, TimeUnit.SECONDS))[ CD ]
Line_2 $$ public void testInsert() throws Exception -->Line_53 $$ assertThreadsRanCleanly()[ CD ]
Line_2 $$ public void testInsert() throws Exception -->Line_49 $$ reader.setDaemon(true)[ CD ]
Line_2 $$ public void testInsert() throws Exception -->Line_4 $$ final CountDownLatch readLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testInsert() throws Exception -->Line_48 $$ inserter.setDaemon(true)[ CD ]
Line_6 $$ final CountDownLatch completionLatch = new CountDownLatch(2)-->Line_24 $$ completionLatch.countDown()[ FD ]
Line_5 $$ final CountDownLatch commitLatch = new CountDownLatch(1)-->Line_43 $$ commitLatch.countDown()[ FD ]
Line_2 $$ public void testInsert() throws Exception -->Line_57 $$ SessionImplementor s2 = mockedSession()[ CD ]
Line_5 $$ final CountDownLatch commitLatch = new CountDownLatch(1)-->Line_15 $$ commitLatch.await()[ FD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_34 $$ assertNull("Correct initial value", localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_13 $$ doInsert(localAccessStrategy, session, KEY, VALUE1, 1)[ FD ]
Line_2 $$ public void testInsert() throws Exception -->Line_5 $$ final CountDownLatch commitLatch = new CountDownLatch(1)[ CD ]
Line_4 $$ final CountDownLatch readLatch = new CountDownLatch(1)-->Line_33 $$ readLatch.await()[ FD ]
Line_2 $$ public void testInsert() throws Exception -->Line_3 $$ final Object KEY = generateNextKey()[ CD ]
Line_7 $$ Thread inserter = new Thread() -->Line_50 $$ inserter.start()[ FD ]
Line_2 $$ public void testInsert() throws Exception -->Line_55 $$ assertEquals("Correct node1 value", VALUE1, localAccessStrategy.get(s1, KEY, s1.getTimestamp()))[ CD ]
Line_2 $$ public void testInsert() throws Exception -->Line_50 $$ inserter.start()[ CD ]
Line_2 $$ public void testInsert() throws Exception -->Line_58 $$ assertEquals("Correct node2 value", expected, remoteAccessStrategy.get(s2, KEY, s2.getTimestamp()))[ CD ]
Line_2 $$ public void testInsert() throws Exception -->Line_51 $$ reader.start()[ CD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_13 $$ doInsert(localAccessStrategy, session, KEY, VALUE1, 1)[ FD ]
Line_4 $$ final CountDownLatch readLatch = new CountDownLatch(1)-->Line_14 $$ readLatch.countDown()[ FD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_11 $$ withTx(localEnvironment, session, () -> [ FD ]
Line_10 $$ SessionImplementor session = mockedSession()-->Line_12 $$ assertNull("Correct initial value", localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_6 $$ final CountDownLatch completionLatch = new CountDownLatch(2)-->Line_44 $$ completionLatch.countDown()[ FD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_34 $$ assertNull("Correct initial value", localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_12 $$ assertNull("Correct initial value", localAccessStrategy.get(session, KEY, session.getTimestamp()))[ FD ]
Line_6 $$ final CountDownLatch completionLatch = new CountDownLatch(2)-->Line_52 $$ assertTrue("Threads completed", completionLatch.await(1000, TimeUnit.SECONDS))[ FD ]
Line_2 $$ public void testInsert() throws Exception -->Line_54 $$ SessionImplementor s1 = mockedSession()[ CD ]
Line_3 $$ final Object KEY = generateNextKey()-->Line_58 $$ assertEquals("Correct node2 value", expected, remoteAccessStrategy.get(s2, KEY, s2.getTimestamp()))[ FD ]
