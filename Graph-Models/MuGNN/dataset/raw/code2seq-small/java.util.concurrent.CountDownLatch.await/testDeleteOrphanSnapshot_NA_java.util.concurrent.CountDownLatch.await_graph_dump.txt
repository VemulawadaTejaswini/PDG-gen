Line_17 $$ ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder()-->Line_22 $$ entries.add(new Entry(new SnapshotId("test-repo", "test-snap"), true, State.ABORTED, Collections.singletonList("test-idx"), System.currentTimeMillis(), shards.build()))[ FD ]
Line_11 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx").get()-->Line_12 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_21 $$ List<Entry> entries = new ArrayList()-->Line_23 $$ return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE, new SnapshotsInProgress(Collections.unmodifiableList(entries))).build()[ FD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_22 $$ entries.add(new Entry(new SnapshotId("test-repo", "test-snap"), true, State.ABORTED, Collections.singletonList("test-idx"), System.currentTimeMillis(), shards.build()))[ CD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_11 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx").get()[ CD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_32 $$ countDownLatch.await()[ CD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_23 $$ return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE, new SnapshotsInProgress(Collections.unmodifiableList(entries))).build()[ CD ]
Line_17 $$ ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder()-->Line_19 $$ shards.put(new ShardId("test-idx", 1), new ShardSnapshotStatus("unknown-node", State.ABORTED))[ FD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_7 $$ ensureGreen()[ CD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_13 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ CD ]
Line_3 $$ Client client = client()-->Line_5 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location", randomRepoPath()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ FD ]
Line_11 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx").get()-->Line_13 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_3 $$ Client client = client()[ CD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_21 $$ List<Entry> entries = new ArrayList()[ CD ]
Line_9 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_29 $$ countDownLatch.countDown()[ FD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_8 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, internalCluster().getMasterName())[ CD ]
Line_21 $$ List<Entry> entries = new ArrayList()-->Line_22 $$ entries.add(new Entry(new SnapshotId("test-repo", "test-snap"), true, State.ABORTED, Collections.singletonList("test-idx"), System.currentTimeMillis(), shards.build()))[ FD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_9 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)[ CD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_26 $$ fail()[ CD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_6 $$ createIndex("test-idx")[ CD ]
Line_17 $$ ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder()-->Line_20 $$ shards.put(new ShardId("test-idx", 2), new ShardSnapshotStatus("unknown-node", State.ABORTED))[ FD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_12 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_17 $$ ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder()[ CD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_19 $$ shards.put(new ShardId("test-idx", 1), new ShardSnapshotStatus("unknown-node", State.ABORTED))[ CD ]
Line_9 $$ final CountDownLatch countDownLatch = new CountDownLatch(1)-->Line_32 $$ countDownLatch.await()[ FD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() [ CD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_5 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("mock").setSettings(Settings.settingsBuilder().put("location", randomRepoPath()).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ CD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_18 $$ shards.put(new ShardId("test-idx", 0), new ShardSnapshotStatus("unknown-node", State.ABORTED))[ CD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_29 $$ countDownLatch.countDown()[ CD ]
Line_3 $$ Client client = client()-->Line_11 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap").setWaitForCompletion(true).setIndices("test-idx").get()[ FD ]
Line_17 $$ ImmutableOpenMap.Builder<ShardId, ShardSnapshotStatus> shards = ImmutableOpenMap.builder()-->Line_18 $$ shards.put(new ShardId("test-idx", 0), new ShardSnapshotStatus("unknown-node", State.ABORTED))[ FD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_20 $$ shards.put(new ShardId("test-idx", 2), new ShardSnapshotStatus("unknown-node", State.ABORTED))[ CD ]
Line_8 $$ ClusterService clusterService = internalCluster().getInstance(ClusterService.class, internalCluster().getMasterName())-->Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() [ FD ]
Line_2 $$ public void testDeleteOrphanSnapshot() throws Exception -->Line_34 $$ assertAcked(client.admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap").get("10s"))[ CD ]
Line_3 $$ Client client = client()-->Line_34 $$ assertAcked(client.admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap").get("10s"))[ FD ]
Line_15 $$ clusterService.submitStateUpdateTask("orphan snapshot test", new ClusterStateUpdateTask() -->Line_23 $$ return ClusterState.builder(currentState).putCustom(SnapshotsInProgress.TYPE, new SnapshotsInProgress(Collections.unmodifiableList(entries))).build()[ FD ]
