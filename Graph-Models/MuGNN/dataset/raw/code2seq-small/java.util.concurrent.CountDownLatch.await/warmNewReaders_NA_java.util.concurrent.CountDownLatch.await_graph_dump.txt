Line_12 $$ for (ObjectMapper objectMapper : docMapper.objectMappers().values()) -->Line_14 $$ ObjectMapper parentObjectMapper = docMapper.findParentObjectMapper(objectMapper)[ FD ]
Line_14 $$ ObjectMapper parentObjectMapper = docMapper.findParentObjectMapper(objectMapper)-->Line_16 $$ warmUp.add(parentObjectMapper.nestedTypeFilter())[ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_26 $$ final CountDownLatch latch = new CountDownLatch(searcher.reader().leaves().size() * warmUp.size())[ FD ]
Line_13 $$ if (objectMapper.nested().isNested()) -->Line_15 $$ if (parentObjectMapper != null && parentObjectMapper.nested().isNested()) [ CD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_22 $$ if (hasNested) [ CD ]
Line_8 $$ final MapperService mapperService = indexShard.mapperService()-->Line_9 $$ for (DocumentMapper docMapper : mapperService.docMappers(false)) [ FD ]
Line_7 $$ final Set<Query> warmUp = new HashSet()-->Line_26 $$ final CountDownLatch latch = new CountDownLatch(searcher.reader().leaves().size() * warmUp.size())[ FD ]
Line_22 $$ if (hasNested) -->Line_23 $$ warmUp.add(Queries.newNonNestedFilter())[ CD ]
Line_3 $$ if (!loadRandomAccessFiltersEagerly) -->Line_4 $$ return TerminationHandle.NO_WAIT[ CD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_3 $$ if (!loadRandomAccessFiltersEagerly) [ CD ]
Line_9 $$ for (DocumentMapper docMapper : mapperService.docMappers(false)) -->Line_12 $$ for (ObjectMapper objectMapper : docMapper.objectMappers().values()) [ FD ]
Line_26 $$ final CountDownLatch latch = new CountDownLatch(searcher.reader().leaves().size() * warmUp.size())-->Line_44 $$ latch.await()[ FD ]
Line_26 $$ final CountDownLatch latch = new CountDownLatch(searcher.reader().leaves().size() * warmUp.size())-->Line_39 $$ latch.countDown()[ FD ]
Line_15 $$ if (parentObjectMapper != null && parentObjectMapper.nested().isNested()) -->Line_16 $$ warmUp.add(parentObjectMapper.nestedTypeFilter())[ CD ]
Line_6 $$ boolean hasNested = false-->Line_11 $$ hasNested = true[ FD ]
Line_9 $$ for (DocumentMapper docMapper : mapperService.docMappers(false)) -->Line_10 $$ if (docMapper.hasNestedObjects()) [ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_25 $$ final Executor executor = indicesWarmer.getExecutor()[ CD ]
Line_33 $$ if (indexShard.warmerService().logger().isTraceEnabled()) -->Line_34 $$ indexShard.warmerService().logger().trace("warmed bitset for [[ CD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_27 $$ for (final LeafReaderContext ctx : searcher.reader().leaves()) [ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_37 $$ indexShard.warmerService().logger().warn("failed to load bitset for [[ FD ]
Line_27 $$ for (final LeafReaderContext ctx : searcher.reader().leaves()) -->Line_32 $$ getAndLoadIfNotPresent(filterToWarm, ctx)[ FD ]
Line_28 $$ for (final Query filterToWarm : warmUp) -->Line_34 $$ indexShard.warmerService().logger().trace("warmed bitset for [[ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_8 $$ final MapperService mapperService = indexShard.mapperService()[ CD ]
Line_28 $$ for (final Query filterToWarm : warmUp) -->Line_37 $$ indexShard.warmerService().logger().warn("failed to load bitset for [[ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_26 $$ final CountDownLatch latch = new CountDownLatch(searcher.reader().leaves().size() * warmUp.size())[ CD ]
Line_7 $$ final Set<Query> warmUp = new HashSet()-->Line_23 $$ warmUp.add(Queries.newNonNestedFilter())[ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_34 $$ indexShard.warmerService().logger().trace("warmed bitset for [[ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_44 $$ return () -> latch.await()[ CD ]
Line_12 $$ for (ObjectMapper objectMapper : docMapper.objectMappers().values()) -->Line_13 $$ if (objectMapper.nested().isNested()) [ FD ]
Line_13 $$ if (objectMapper.nested().isNested()) -->Line_14 $$ ObjectMapper parentObjectMapper = docMapper.findParentObjectMapper(objectMapper)[ CD ]
Line_7 $$ final Set<Query> warmUp = new HashSet()-->Line_16 $$ warmUp.add(parentObjectMapper.nestedTypeFilter())[ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_7 $$ final Set<Query> warmUp = new HashSet()[ CD ]
Line_28 $$ for (final Query filterToWarm : warmUp) -->Line_32 $$ getAndLoadIfNotPresent(filterToWarm, ctx)[ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_6 $$ boolean hasNested = false[ CD ]
Line_10 $$ if (docMapper.hasNestedObjects()) -->Line_11 $$ hasNested = true[ CD ]
Line_25 $$ final Executor executor = indicesWarmer.getExecutor()-->Line_29 $$ executor.execute(() -> [ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_33 $$ if (indexShard.warmerService().logger().isTraceEnabled()) [ FD ]
Line_14 $$ ObjectMapper parentObjectMapper = docMapper.findParentObjectMapper(objectMapper)-->Line_15 $$ if (parentObjectMapper != null && parentObjectMapper.nested().isNested()) [ FD ]
Line_2 $$ public IndicesWarmer.TerminationHandle warmNewReaders(final IndexShard indexShard, final Engine.Searcher searcher) -->Line_8 $$ final MapperService mapperService = indexShard.mapperService()[ FD ]
Line_9 $$ for (DocumentMapper docMapper : mapperService.docMappers(false)) -->Line_14 $$ ObjectMapper parentObjectMapper = docMapper.findParentObjectMapper(objectMapper)[ FD ]
