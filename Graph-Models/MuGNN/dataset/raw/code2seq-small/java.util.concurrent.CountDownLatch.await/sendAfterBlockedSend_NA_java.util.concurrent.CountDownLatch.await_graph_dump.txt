Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_6 $$ final ConcurrentWebSocketSessionDecorator concurrentSession = new ConcurrentWebSocketSessionDecorator(blockingSession, 10 * 1000, 1024)[ CD ]
Line_7 $$ Executors.newSingleThreadExecutor().submit(new Runnable() -->Line_9 $$ TextMessage textMessage = new TextMessage("slow message")[ CD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_4 $$ blockingSession.setOpen(true)[ CD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_5 $$ CountDownLatch sentMessageLatch = blockingSession.getSentMessageLatch()[ CD ]
Line_9 $$ TextMessage textMessage = new TextMessage("slow message")-->Line_11 $$ concurrentSession.sendMessage(textMessage)[ FD ]
Line_6 $$ final ConcurrentWebSocketSessionDecorator concurrentSession = new ConcurrentWebSocketSessionDecorator(blockingSession, 10 * 1000, 1024)-->Line_22 $$ concurrentSession.sendMessage(payload)[ FD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_21 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_24 $$ assertTrue(concurrentSession.getTimeSinceSendStarted() > 0)[ CD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_3 $$ BlockingSession blockingSession = new BlockingSession()[ CD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_7 $$ Executors.newSingleThreadExecutor().submit(new Runnable() [ CD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_17 $$ assertTrue(sentMessageLatch.await(5, TimeUnit.SECONDS))[ CD ]
Line_5 $$ CountDownLatch sentMessageLatch = blockingSession.getSentMessageLatch()-->Line_17 $$ assertTrue(sentMessageLatch.await(5, TimeUnit.SECONDS))[ FD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_26 $$ assertTrue(blockingSession.isOpen())[ CD ]
Line_6 $$ final ConcurrentWebSocketSessionDecorator concurrentSession = new ConcurrentWebSocketSessionDecorator(blockingSession, 10 * 1000, 1024)-->Line_25 $$ assertEquals(5 * payload.getPayloadLength(), concurrentSession.getBufferSize())[ FD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_18 $$ Thread.sleep(100)[ CD ]
Line_6 $$ final ConcurrentWebSocketSessionDecorator concurrentSession = new ConcurrentWebSocketSessionDecorator(blockingSession, 10 * 1000, 1024)-->Line_11 $$ concurrentSession.sendMessage(textMessage)[ FD ]
Line_6 $$ final ConcurrentWebSocketSessionDecorator concurrentSession = new ConcurrentWebSocketSessionDecorator(blockingSession, 10 * 1000, 1024)-->Line_19 $$ assertTrue(concurrentSession.getTimeSinceSendStarted() > 0)[ FD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_19 $$ assertTrue(concurrentSession.getTimeSinceSendStarted() > 0)[ CD ]
Line_3 $$ BlockingSession blockingSession = new BlockingSession()-->Line_4 $$ blockingSession.setOpen(true)[ FD ]
Line_3 $$ BlockingSession blockingSession = new BlockingSession()-->Line_5 $$ CountDownLatch sentMessageLatch = blockingSession.getSentMessageLatch()[ FD ]
Line_3 $$ BlockingSession blockingSession = new BlockingSession()-->Line_26 $$ assertTrue(blockingSession.isOpen())[ FD ]
Line_2 $$ public void sendAfterBlockedSend() throws IOException, InterruptedException -->Line_25 $$ assertEquals(5 * payload.getPayloadLength(), concurrentSession.getBufferSize())[ CD ]
Line_6 $$ final ConcurrentWebSocketSessionDecorator concurrentSession = new ConcurrentWebSocketSessionDecorator(blockingSession, 10 * 1000, 1024)-->Line_24 $$ assertTrue(concurrentSession.getTimeSinceSendStarted() > 0)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_22 $$ concurrentSession.sendMessage(payload)[ CD ]
