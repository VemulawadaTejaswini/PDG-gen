Line_26 $$ Set<String> ids = new HashSet()-->Line_32 $$ assertThat(ids.add(bulkItemResponse.getId()), equalTo(true))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_21 $$ closeLatch.await()[ CD ]
Line_6 $$ int expectedBulkActions = numDocs / bulkActions-->Line_16 $$ assertThat(listener.beforeCounts.get(), equalTo(expectedBulkActions))[ FD ]
Line_12 $$ try (BulkProcessor processor = BulkProcessor.builder(client(), listener).setConcurrentRequests(concurrentRequests).setBulkActions(bulkActions).setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(1, ByteSizeUnit.GB)).build()) -->Line_14 $$ multiGetRequestBuilder = indexDocs(client(), processor, numDocs)[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_26 $$ Set<String> ids = new HashSet()[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_8 $$ int totalExpectedBulkActions = numDocs % bulkActions == 0 ? expectedBulkActions : expectedBulkActions + 1[ CD ]
Line_27 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_29 $$ assertThat(bulkItemResponse.getIndex(), equalTo("test"))[ FD ]
Line_4 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)-->Line_14 $$ multiGetRequestBuilder = indexDocs(client(), processor, numDocs)[ FD ]
Line_4 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)-->Line_34 $$ assertMultiGetResponse(multiGetRequestBuilder.get(), numDocs)[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_9 $$ final CountDownLatch closeLatch = new CountDownLatch(totalExpectedBulkActions)[ CD ]
Line_10 $$ BulkProcessorTestListener listener = new BulkProcessorTestListener(latch, closeLatch)-->Line_12 $$ try (BulkProcessor processor = BulkProcessor.builder(client(), listener).setConcurrentRequests(concurrentRequests).setBulkActions(bulkActions).setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(1, ByteSizeUnit.GB)).build()) [ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_11 $$ MultiGetRequestBuilder multiGetRequestBuilder[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_24 $$ assertThat(listener.bulkFailures.size(), equalTo(0))[ CD ]
Line_3 $$ int bulkActions = randomIntBetween(10, 100)-->Line_12 $$ try (BulkProcessor processor = BulkProcessor.builder(client(), listener).setConcurrentRequests(concurrentRequests).setBulkActions(bulkActions).setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(1, ByteSizeUnit.GB)).build()) [ FD ]
Line_11 $$ MultiGetRequestBuilder multiGetRequestBuilder-->Line_34 $$ assertMultiGetResponse(multiGetRequestBuilder.get(), numDocs)[ FD ]
Line_8 $$ int totalExpectedBulkActions = numDocs % bulkActions == 0 ? expectedBulkActions : expectedBulkActions + 1-->Line_22 $$ assertThat(listener.beforeCounts.get(), equalTo(totalExpectedBulkActions))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_22 $$ assertThat(listener.beforeCounts.get(), equalTo(totalExpectedBulkActions))[ CD ]
Line_27 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_30 $$ assertThat(bulkItemResponse.getType(), equalTo("test"))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_3 $$ int bulkActions = randomIntBetween(10, 100)[ CD ]
Line_8 $$ int totalExpectedBulkActions = numDocs % bulkActions == 0 ? expectedBulkActions : expectedBulkActions + 1-->Line_23 $$ assertThat(listener.afterCounts.get(), equalTo(totalExpectedBulkActions))[ FD ]
Line_5 $$ int concurrentRequests = randomIntBetween(0, 7)-->Line_12 $$ try (BulkProcessor processor = BulkProcessor.builder(client(), listener).setConcurrentRequests(concurrentRequests).setBulkActions(bulkActions).setFlushInterval(TimeValue.timeValueHours(24)).setBulkSize(new ByteSizeValue(1, ByteSizeUnit.GB)).build()) [ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_4 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)[ CD ]
Line_27 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_28 $$ assertThat(bulkItemResponse.getFailureMessage(), bulkItemResponse.isFailed(), equalTo(false))[ FD ]
Line_6 $$ int expectedBulkActions = numDocs / bulkActions-->Line_17 $$ assertThat(listener.afterCounts.get(), equalTo(expectedBulkActions))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_6 $$ int expectedBulkActions = numDocs / bulkActions[ CD ]
Line_4 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)-->Line_25 $$ assertThat(listener.bulkItems.size(), equalTo(numDocs))[ FD ]
Line_27 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_32 $$ assertThat(ids.add(bulkItemResponse.getId()), equalTo(true))[ FD ]
Line_3 $$ int bulkActions = randomIntBetween(10, 100)-->Line_4 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)[ FD ]
Line_11 $$ MultiGetRequestBuilder multiGetRequestBuilder-->Line_14 $$ multiGetRequestBuilder = indexDocs(client(), processor, numDocs)[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_23 $$ assertThat(listener.afterCounts.get(), equalTo(totalExpectedBulkActions))[ CD ]
Line_14 $$ multiGetRequestBuilder = indexDocs(client(), processor, numDocs)-->Line_34 $$ assertMultiGetResponse(multiGetRequestBuilder.get(), numDocs)[ FD ]
Line_4 $$ int numDocs = randomIntBetween(bulkActions, bulkActions + 100)-->Line_31 $$ assertThat(Integer.valueOf(bulkItemResponse.getId()), both(greaterThan(0)).and(lessThanOrEqualTo(numDocs)))[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_7 $$ final CountDownLatch latch = new CountDownLatch(expectedBulkActions)[ CD ]
Line_7 $$ final CountDownLatch latch = new CountDownLatch(expectedBulkActions)-->Line_15 $$ latch.await()[ FD ]
Line_9 $$ final CountDownLatch closeLatch = new CountDownLatch(totalExpectedBulkActions)-->Line_21 $$ closeLatch.await()[ FD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_10 $$ BulkProcessorTestListener listener = new BulkProcessorTestListener(latch, closeLatch)[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_5 $$ int concurrentRequests = randomIntBetween(0, 7)[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_25 $$ assertThat(listener.bulkItems.size(), equalTo(numDocs))[ CD ]
Line_2 $$ public void testBulkProcessorConcurrentRequests() throws Exception -->Line_34 $$ assertMultiGetResponse(multiGetRequestBuilder.get(), numDocs)[ CD ]
Line_27 $$ for (BulkItemResponse bulkItemResponse : listener.bulkItems) -->Line_31 $$ assertThat(Integer.valueOf(bulkItemResponse.getId()), both(greaterThan(0)).and(lessThanOrEqualTo(numDocs)))[ FD ]
