Line_9 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_15 $$ String testKey = getTestKeyName(threadIndex, i)[ FD ]
Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_16 $$ String testNewKey = testKey + ".new"[ CD ]
Line_8 $$ List<Future<Void>> futures = new LinkedList<Future<Void>>()-->Line_10 $$ futures.add(executor.schedule(new Callable<Void>() [ FD ]
Line_5 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(2 * NUM_THREAD_IDS, new ThreadFactoryBuilder().setDaemon(true).setNameFormat("testConcurrentDeprecateAndManipulate modification thread %d").build())-->Line_25 $$ futures.add(executor.schedule(new Callable<Void>() [ FD ]
Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_32 $$ String value = "value." + threadIndex + "." + i[ CD ]
Line_27 $$ Configuration conf = new Configuration()-->Line_33 $$ conf.set(testNewKey, value)[ FD ]
Line_16 $$ String testNewKey = testKey + ".new"-->Line_33 $$ conf.set(testNewKey, value)[ FD ]
Line_16 $$ String testNewKey = testKey + ".new"-->Line_34 $$ Assert.assertEquals(value, conf.get(testNewKey))[ FD ]
Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_15 $$ String testKey = getTestKeyName(threadIndex, i)[ CD ]
Line_4 $$ final int NUM_KEYS_PER_THREAD = 1000-->Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) [ FD ]
Line_9 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_10 $$ futures.add(executor.schedule(new Callable<Void>() [ CD ]
Line_25 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_28 $$ latch.await()[ CD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_4 $$ final int NUM_KEYS_PER_THREAD = 1000[ CD ]
Line_25 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) [ CD ]
Line_10 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_19 $$ return null[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_28 $$ latch.await()[ FD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_40 $$ latch.countDown()[ CD ]
Line_9 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_24 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) [ FD ]
Line_32 $$ String value = "value." + threadIndex + "." + i-->Line_33 $$ conf.set(testNewKey, value)[ FD ]
Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"[ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_12 $$ latch.await()[ FD ]
Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_24 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) [ FD ]
Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"[ FD ]
Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_33 $$ conf.set(testNewKey, value)[ CD ]
Line_24 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) [ FD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_24 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) [ CD ]
Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"[ CD ]
Line_9 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) [ FD ]
Line_24 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_25 $$ futures.add(executor.schedule(new Callable<Void>() [ CD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_7 $$ final AtomicInteger highestModificationThreadId = new AtomicInteger(1)[ CD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_5 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(2 * NUM_THREAD_IDS, new ThreadFactoryBuilder().setDaemon(true).setNameFormat("testConcurrentDeprecateAndManipulate modification thread %d").build())[ CD ]
Line_10 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_13 $$ int threadIndex = highestModificationThreadId.addAndGet(1)[ CD ]
Line_10 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) [ CD ]
Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) [ FD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_9 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) [ CD ]
Line_24 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"[ FD ]
Line_3 $$ final int NUM_THREAD_IDS = 10-->Line_24 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) [ FD ]
Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_17 $$ Configuration.addDeprecations(new DeprecationDelta[] [ CD ]
Line_25 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_27 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_3 $$ final int NUM_THREAD_IDS = 10[ CD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_9 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) [ FD ]
Line_4 $$ final int NUM_KEYS_PER_THREAD = 1000-->Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) [ FD ]
Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"-->Line_33 $$ conf.set(testNewKey, value)[ FD ]
Line_30 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_34 $$ Assert.assertEquals(value, conf.get(testNewKey))[ CD ]
Line_2 $$ public void testConcurrentDeprecateAndManipulate() throws Exception -->Line_8 $$ List<Future<Void>> futures = new LinkedList<Future<Void>>()[ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_40 $$ latch.countDown()[ FD ]
Line_32 $$ String value = "value." + threadIndex + "." + i-->Line_34 $$ Assert.assertEquals(value, conf.get(testNewKey))[ FD ]
Line_10 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_12 $$ latch.await()[ CD ]
Line_9 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) -->Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"[ FD ]
Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"-->Line_34 $$ Assert.assertEquals(value, conf.get(testNewKey))[ FD ]
Line_3 $$ final int NUM_THREAD_IDS = 10-->Line_9 $$ for (int i = 0; i < NUM_THREAD_IDS; i++) [ FD ]
Line_25 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_36 $$ return null[ CD ]
Line_13 $$ int threadIndex = highestModificationThreadId.addAndGet(1)-->Line_15 $$ String testKey = getTestKeyName(threadIndex, i)[ FD ]
Line_14 $$ for (int i = 0; i < NUM_KEYS_PER_THREAD; i++) -->Line_15 $$ String testKey = getTestKeyName(threadIndex, i)[ FD ]
Line_27 $$ Configuration conf = new Configuration()-->Line_34 $$ Assert.assertEquals(value, conf.get(testNewKey))[ FD ]
Line_7 $$ final AtomicInteger highestModificationThreadId = new AtomicInteger(1)-->Line_13 $$ int threadIndex = highestModificationThreadId.addAndGet(1)[ FD ]
Line_8 $$ List<Future<Void>> futures = new LinkedList<Future<Void>>()-->Line_25 $$ futures.add(executor.schedule(new Callable<Void>() [ FD ]
Line_25 $$ futures.add(executor.schedule(new Callable<Void>() -->Line_29 $$ int threadIndex = highestAccessThreadId.addAndGet(1)[ CD ]
Line_29 $$ int threadIndex = highestAccessThreadId.addAndGet(1)-->Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"[ FD ]
Line_13 $$ int threadIndex = highestModificationThreadId.addAndGet(1)-->Line_31 $$ String testNewKey = getTestKeyName(threadIndex, i) + ".new"[ FD ]
Line_5 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(2 * NUM_THREAD_IDS, new ThreadFactoryBuilder().setDaemon(true).setNameFormat("testConcurrentDeprecateAndManipulate modification thread %d").build())-->Line_10 $$ futures.add(executor.schedule(new Callable<Void>() [ FD ]
