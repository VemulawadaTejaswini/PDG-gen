Line_10 $$ builders = new ArrayList(builders)-->Line_18 $$ builders.add(client().prepareIndex(index, RANDOM_BOGUS_TYPE, id).setSource("[ FD ]
Line_11 $$ final String[] indices = indicesSet.toArray(new String[indicesSet.size()])-->Line_30 $$ postIndexAsyncActions(indices, inFlightAsyncOperations, maybeFlush)[ FD ]
Line_56 $$ if (ExceptionsHelper.unwrapCause(tuple.v2()) instanceof EsRejectedExecutionException) -->Line_59 $$ actualErrors.add(tuple.v2())[ CD ]
Line_10 $$ builders = new ArrayList(builders)-->Line_33 $$ logger.info("Index [[ FD ]
Line_43 $$ BulkRequestBuilder bulkBuilder = client().prepareBulk()-->Line_45 $$ bulkBuilder.add(indexRequestBuilder)[ FD ]
Line_65 $$ final DeleteResponse deleteResponse = client().prepareDelete(doc.v1(), RANDOM_BOGUS_TYPE, doc.v2()).get()-->Line_66 $$ if (deleteResponse.isFound() == false) [ FD ]
Line_14 $$ for (int i = 0; i < numBogusDocs; i++) -->Line_17 $$ bogusIds.add(new Tuple(index, id))[ CD ]
Line_10 $$ builders = new ArrayList(builders)-->Line_25 $$ if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : builders.size() < ALWAYS_BULK_THRESHOLD ? rarely() : false) [ FD ]
Line_10 $$ builders = new ArrayList(builders)-->Line_12 $$ final int numBogusDocs = scaledRandomIntBetween(1, builders.size() * 2)[ FD ]
Line_5 $$ for (IndexRequestBuilder builder : builders) -->Line_6 $$ indicesSet.add(builder.request().index())[ FD ]
Line_11 $$ final String[] indices = indicesSet.toArray(new String[indicesSet.size()])-->Line_36 $$ postIndexAsyncActions(indices, inFlightAsyncOperations, maybeFlush)[ FD ]
Line_15 $$ String id = randomRealisticUnicodeOfLength(unicodeLen) + Integer.toString(dummmyDocIdGenerator.incrementAndGet())-->Line_18 $$ builders.add(client().prepareIndex(index, RANDOM_BOGUS_TYPE, id).setSource("[ FD ]
Line_11 $$ final String[] indices = indicesSet.toArray(new String[indicesSet.size()])-->Line_16 $$ String index = RandomPicks.randomFrom(random, indices)[ FD ]
Line_8 $$ Set<Tuple<String, String>> bogusIds = new HashSet()-->Line_63 $$ if (!bogusIds.isEmpty()) [ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_71 $$ if (forceRefresh) [ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_62 $$ assertThat(actualErrors, emptyIterable())[ CD ]
Line_10 $$ builders = new ArrayList(builders)-->Line_40 $$ List<List<IndexRequestBuilder>> partition = eagerPartition(builders, Math.min(MAX_BULK_INDEX_REQUEST_SIZE, Math.max(1, (int) (builders.size() * randomDouble()))))[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_12 $$ final int numBogusDocs = scaledRandomIntBetween(1, builders.size() * 2)[ FD ]
Line_16 $$ String index = RandomPicks.randomFrom(random, indices)-->Line_18 $$ builders.add(client().prepareIndex(index, RANDOM_BOGUS_TYPE, id).setSource("[ FD ]
Line_9 $$ if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) -->Line_13 $$ final int unicodeLen = between(1, 10)[ CD ]
Line_64 $$ for (Tuple<String, String> doc : bogusIds) -->Line_65 $$ final DeleteResponse deleteResponse = client().prepareDelete(doc.v1(), RANDOM_BOGUS_TYPE, doc.v2()).get()[ FD ]
Line_54 $$ final List<Throwable> actualErrors = new ArrayList()-->Line_62 $$ assertThat(actualErrors, emptyIterable())[ FD ]
Line_24 $$ List<CountDownLatch> inFlightAsyncOperations = new ArrayList()-->Line_29 $$ indexRequestBuilder.execute(new PayloadLatchedActionListener<IndexResponse, IndexRequestBuilder>(indexRequestBuilder, newLatch(inFlightAsyncOperations), errors))[ FD ]
Line_9 $$ if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) -->Line_12 $$ final int numBogusDocs = scaledRandomIntBetween(1, builders.size() * 2)[ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_63 $$ if (!bogusIds.isEmpty()) [ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_10 $$ builders = new ArrayList(builders)[ FD ]
Line_47 $$ BulkResponse actionGet = bulkBuilder.execute().actionGet()-->Line_48 $$ assertThat(actionGet.hasFailures() ? actionGet.buildFailureMessage() : "", actionGet.hasFailures(), equalTo(false))[ FD ]
Line_10 $$ builders = new ArrayList(builders)-->Line_41 $$ logger.info("Index [[ FD ]
Line_71 $$ if (forceRefresh) -->Line_72 $$ assertNoFailures(client().admin().indices().prepareRefresh(indices).setIndicesOptions(IndicesOptions.lenientExpandOpen()).execute().get())[ CD ]
Line_24 $$ List<CountDownLatch> inFlightAsyncOperations = new ArrayList()-->Line_30 $$ postIndexAsyncActions(indices, inFlightAsyncOperations, maybeFlush)[ FD ]
Line_9 $$ if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) -->Line_11 $$ final String[] indices = indicesSet.toArray(new String[indicesSet.size()])[ CD ]
Line_14 $$ for (int i = 0; i < numBogusDocs; i++) -->Line_18 $$ builders.add(client().prepareIndex(index, RANDOM_BOGUS_TYPE, id).setSource("[ CD ]
Line_13 $$ final int unicodeLen = between(1, 10)-->Line_15 $$ String id = randomRealisticUnicodeOfLength(unicodeLen) + Integer.toString(dummmyDocIdGenerator.incrementAndGet())[ FD ]
Line_56 $$ if (ExceptionsHelper.unwrapCause(tuple.v2()) instanceof EsRejectedExecutionException) -->Line_57 $$ tuple.v1().execute().actionGet()[ CD ]
Line_54 $$ final List<Throwable> actualErrors = new ArrayList()-->Line_59 $$ actualErrors.add(tuple.v2())[ FD ]
Line_25 $$ if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : builders.size() < ALWAYS_BULK_THRESHOLD ? rarely() : false) -->Line_26 $$ if (frequently()) [ CD ]
Line_28 $$ for (IndexRequestBuilder indexRequestBuilder : builders) -->Line_29 $$ indexRequestBuilder.execute(new PayloadLatchedActionListener<IndexResponse, IndexRequestBuilder>(indexRequestBuilder, newLatch(inFlightAsyncOperations), errors))[ FD ]
Line_25 $$ if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : builders.size() < ALWAYS_BULK_THRESHOLD ? rarely() : false) -->Line_40 $$ List<List<IndexRequestBuilder>> partition = eagerPartition(builders, Math.min(MAX_BULK_INDEX_REQUEST_SIZE, Math.max(1, (int) (builders.size() * randomDouble()))))[ CD ]
Line_3 $$ Random random = getRandom()-->Line_9 $$ if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) [ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_21 $$ final String[] indices = indicesSet.toArray(new String[indicesSet.size()])[ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_18 $$ builders.add(client().prepareIndex(index, RANDOM_BOGUS_TYPE, id).setSource("[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_22 $$ Collections.shuffle(builders, random())[ CD ]
Line_25 $$ if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : builders.size() < ALWAYS_BULK_THRESHOLD ? rarely() : false) -->Line_41 $$ logger.info("Index [[ CD ]
Line_3 $$ Random random = getRandom()-->Line_16 $$ String index = RandomPicks.randomFrom(random, indices)[ FD ]
Line_24 $$ List<CountDownLatch> inFlightAsyncOperations = new ArrayList()-->Line_36 $$ postIndexAsyncActions(indices, inFlightAsyncOperations, maybeFlush)[ FD ]
Line_28 $$ for (IndexRequestBuilder indexRequestBuilder : builders) -->Line_35 $$ indexRequestBuilder.execute().actionGet()[ FD ]
Line_64 $$ for (Tuple<String, String> doc : bogusIds) -->Line_67 $$ logger.warn("failed to delete a dummy doc [[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_54 $$ final List<Throwable> actualErrors = new ArrayList()[ CD ]
Line_4 $$ Set<String> indicesSet = new HashSet()-->Line_6 $$ indicesSet.add(builder.request().index())[ FD ]
Line_43 $$ BulkRequestBuilder bulkBuilder = client().prepareBulk()-->Line_47 $$ BulkResponse actionGet = bulkBuilder.execute().actionGet()[ FD ]
Line_40 $$ List<List<IndexRequestBuilder>> partition = eagerPartition(builders, Math.min(MAX_BULK_INDEX_REQUEST_SIZE, Math.max(1, (int) (builders.size() * randomDouble()))))-->Line_41 $$ logger.info("Index [[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_9 $$ if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) [ CD ]
Line_26 $$ if (frequently()) -->Line_27 $$ logger.info("Index [[ CD ]
Line_14 $$ for (int i = 0; i < numBogusDocs; i++) -->Line_16 $$ String index = RandomPicks.randomFrom(random, indices)[ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_41 $$ logger.info("Index [[ FD ]
Line_51 $$ for (CountDownLatch operation : inFlightAsyncOperations) -->Line_52 $$ operation.await()[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_4 $$ Set<String> indicesSet = new HashSet()[ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_8 $$ Set<Tuple<String, String>> bogusIds = new HashSet()[ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_25 $$ if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : builders.size() < ALWAYS_BULK_THRESHOLD ? rarely() : false) [ CD ]
Line_55 $$ for (Tuple<IndexRequestBuilder, Throwable> tuple : errors) -->Line_59 $$ actualErrors.add(tuple.v2())[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_25 $$ if (builders.size() < FREQUENT_BULK_THRESHOLD ? frequently() : builders.size() < ALWAYS_BULK_THRESHOLD ? rarely() : false) [ FD ]
Line_4 $$ Set<String> indicesSet = new HashSet()-->Line_11 $$ final String[] indices = indicesSet.toArray(new String[indicesSet.size()])[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_9 $$ if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) [ FD ]
Line_55 $$ for (Tuple<IndexRequestBuilder, Throwable> tuple : errors) -->Line_56 $$ if (ExceptionsHelper.unwrapCause(tuple.v2()) instanceof EsRejectedExecutionException) [ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_22 $$ Collections.shuffle(builders, random())[ FD ]
Line_9 $$ if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) -->Line_14 $$ for (int i = 0; i < numBogusDocs; i++) [ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_36 $$ postIndexAsyncActions(indices, inFlightAsyncOperations, maybeFlush)[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_23 $$ final CopyOnWriteArrayList<Tuple<IndexRequestBuilder, Throwable>> errors = new CopyOnWriteArrayList()[ CD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_27 $$ logger.info("Index [[ FD ]
Line_28 $$ for (IndexRequestBuilder indexRequestBuilder : builders) -->Line_45 $$ bulkBuilder.add(indexRequestBuilder)[ FD ]
Line_11 $$ final String[] indices = indicesSet.toArray(new String[indicesSet.size()])-->Line_72 $$ assertNoFailures(client().admin().indices().prepareRefresh(indices).setIndicesOptions(IndicesOptions.lenientExpandOpen()).execute().get())[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_40 $$ List<List<IndexRequestBuilder>> partition = eagerPartition(builders, Math.min(MAX_BULK_INDEX_REQUEST_SIZE, Math.max(1, (int) (builders.size() * randomDouble()))))[ FD ]
Line_4 $$ Set<String> indicesSet = new HashSet()-->Line_21 $$ final String[] indices = indicesSet.toArray(new String[indicesSet.size()])[ FD ]
Line_8 $$ Set<Tuple<String, String>> bogusIds = new HashSet()-->Line_17 $$ bogusIds.add(new Tuple(index, id))[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_30 $$ postIndexAsyncActions(indices, inFlightAsyncOperations, maybeFlush)[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_24 $$ List<CountDownLatch> inFlightAsyncOperations = new ArrayList()[ CD ]
Line_14 $$ for (int i = 0; i < numBogusDocs; i++) -->Line_15 $$ String id = randomRealisticUnicodeOfLength(unicodeLen) + Integer.toString(dummmyDocIdGenerator.incrementAndGet())[ CD ]
Line_10 $$ builders = new ArrayList(builders)-->Line_27 $$ logger.info("Index [[ FD ]
Line_66 $$ if (deleteResponse.isFound() == false) -->Line_67 $$ logger.warn("failed to delete a dummy doc [[ CD ]
Line_55 $$ for (Tuple<IndexRequestBuilder, Throwable> tuple : errors) -->Line_57 $$ tuple.v1().execute().actionGet()[ FD ]
Line_12 $$ final int numBogusDocs = scaledRandomIntBetween(1, builders.size() * 2)-->Line_14 $$ for (int i = 0; i < numBogusDocs; i++) [ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_3 $$ Random random = getRandom()[ CD ]
Line_26 $$ if (frequently()) -->Line_33 $$ logger.info("Index [[ CD ]
Line_10 $$ builders = new ArrayList(builders)-->Line_22 $$ Collections.shuffle(builders, random())[ FD ]
Line_2 $$ public void indexRandom(boolean forceRefresh, boolean dummyDocuments, boolean maybeFlush, List<IndexRequestBuilder> builders) throws InterruptedException, ExecutionException -->Line_33 $$ logger.info("Index [[ FD ]
Line_9 $$ if (random.nextBoolean() && !builders.isEmpty() && dummyDocuments) -->Line_10 $$ builders = new ArrayList(builders)[ CD ]
