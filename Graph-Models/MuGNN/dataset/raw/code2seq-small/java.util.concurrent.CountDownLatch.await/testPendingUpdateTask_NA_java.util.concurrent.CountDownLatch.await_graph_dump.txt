Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_50 $$ assertThat(response.pendingTasks().size(), greaterThanOrEqualTo(10))[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_52 $$ assertThat(response.pendingTasks().get(0).isExecuting(), equalTo(true))[ CD ]
Line_9 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() -->Line_11 $$ invoked1.countDown()[ CD ]
Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)-->Line_59 $$ clusterService.pendingTasks().isEmpty()[ FD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_9 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() [ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_42 $$ assertThat(pendingClusterTasks.get(0).getSource().string(), equalTo("1"))[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_60 $$ waitNoPendingTasksOnAll()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_63 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() [ CD ]
Line_26 $$ for (int i = 2; i <= 10; i++) -->Line_27 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() [ FD ]
Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()-->Line_5 $$ internalCluster().startNodeClient(settings)[ FD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_7 $$ final CountDownLatch block1 = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_24 $$ invoked1.await()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_58 $$ invoked2.await()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_59 $$ assertTrue(awaitBusy(() -> clusterService.pendingTasks().isEmpty()))[ CD ]
Line_27 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() -->Line_32 $$ fail()[ CD ]
Line_27 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() -->Line_29 $$ return currentState[ CD ]
Line_7 $$ final CountDownLatch block1 = new CountDownLatch(1)-->Line_13 $$ block1.await()[ FD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_105 $$ assertTrue(controlSources.isEmpty())[ CD ]
Line_80 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() -->Line_85 $$ fail()[ CD ]
Line_101 $$ if (controlSources.remove(task.getSource().string())) -->Line_102 $$ assertThat(task.getTimeInQueueInMillis(), greaterThan(0l))[ CD ]
Line_9 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() -->Line_20 $$ invoked1.countDown()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_40 $$ List<PendingClusterTask> pendingClusterTasks = clusterService.pendingTasks()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_79 $$ for (int i = 2; i <= 5; i++) [ CD ]
Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)-->Line_27 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() [ FD ]
Line_63 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() -->Line_65 $$ invoked3.countDown()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_96 $$ assertTrue(controlSources.isEmpty())[ CD ]
Line_7 $$ final CountDownLatch block1 = new CountDownLatch(1)-->Line_57 $$ block1.countDown()[ FD ]
Line_63 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() -->Line_74 $$ invoked3.countDown()[ CD ]
Line_63 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() -->Line_75 $$ fail()[ CD ]
Line_27 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() -->Line_35 $$ invoked2.countDown()[ CD ]
Line_79 $$ for (int i = 2; i <= 5; i++) -->Line_80 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() [ FD ]
Line_9 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() -->Line_21 $$ fail()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_26 $$ for (int i = 2; i <= 10; i++) [ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_78 $$ invoked3.await()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_89 $$ Thread.sleep(100)[ CD ]
Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)-->Line_90 $$ pendingClusterTasks = clusterService.pendingTasks()[ FD ]
Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)-->Line_80 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() [ FD ]
Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)-->Line_9 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() [ FD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_90 $$ pendingClusterTasks = clusterService.pendingTasks()[ CD ]
Line_26 $$ for (int i = 2; i <= 10; i++) -->Line_80 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() [ FD ]
Line_80 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() -->Line_82 $$ return currentState[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_57 $$ block1.countDown()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_91 $$ assertThat(pendingClusterTasks.size(), greaterThanOrEqualTo(5))[ CD ]
Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)-->Line_40 $$ List<PendingClusterTask> pendingClusterTasks = clusterService.pendingTasks()[ FD ]
Line_4 $$ String node_0 = internalCluster().startNode(settings)-->Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)[ FD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_56 $$ assertTrue(controlSources.isEmpty())[ CD ]
Line_8 $$ final CountDownLatch invoked1 = new CountDownLatch(1)-->Line_11 $$ invoked1.countDown()[ FD ]
Line_26 $$ for (int i = 2; i <= 10; i++) -->Line_79 $$ for (int i = 2; i <= 5; i++) [ FD ]
Line_9 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() -->Line_17 $$ return currentState[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_8 $$ final CountDownLatch invoked1 = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_106 $$ block2.countDown()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_97 $$ response = internalCluster().clientNodeClient().admin().cluster().preparePendingClusterTasks().get()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_43 $$ assertThat(pendingClusterTasks.get(0).isExecuting(), equalTo(true))[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_49 $$ PendingClusterTasksResponse response = internalCluster().clientNodeClient().admin().cluster().preparePendingClusterTasks().execute().actionGet()[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_4 $$ String node_0 = internalCluster().startNode(settings)[ CD ]
Line_3 $$ Settings settings = settingsBuilder().put("discovery.type", "local").build()-->Line_4 $$ String node_0 = internalCluster().startNode(settings)[ FD ]
Line_8 $$ final CountDownLatch invoked1 = new CountDownLatch(1)-->Line_24 $$ invoked1.await()[ FD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_47 $$ assertTrue(controlSources.isEmpty())[ CD ]
Line_8 $$ final CountDownLatch invoked1 = new CountDownLatch(1)-->Line_20 $$ invoked1.countDown()[ FD ]
Line_26 $$ for (int i = 2; i <= 10; i++) -->Line_27 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() [ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_51 $$ assertThat(response.pendingTasks().get(0).getSource().string(), equalTo("1"))[ CD ]
Line_6 $$ final ClusterService clusterService = internalCluster().getInstance(ClusterService.class, node_0)-->Line_63 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() [ FD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_98 $$ assertThat(response.pendingTasks().size(), greaterThanOrEqualTo(5))[ CD ]
Line_79 $$ for (int i = 2; i <= 5; i++) -->Line_80 $$ clusterService.submitStateUpdateTask(Integer.toString(i), new ClusterStateUpdateTask() [ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_5 $$ internalCluster().startNodeClient(settings)[ CD ]
Line_63 $$ clusterService.submitStateUpdateTask("1", new ClusterStateUpdateTask() -->Line_71 $$ return currentState[ CD ]
Line_2 $$ public void testPendingUpdateTask() throws Exception -->Line_41 $$ assertThat(pendingClusterTasks.size(), greaterThanOrEqualTo(10))[ CD ]
