Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_5 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) [ CD ]
Line_16 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) [ CD ]
Line_16 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_17 $$ this.exitTypeDescriptor = "F"[ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_26 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ FD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_33 $$ return state.operate(Operation.DIVIDE, leftOperand, rightOperand)[ CD ]
Line_26 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) -->Line_27 $$ this.exitTypeDescriptor = "I"[ CD ]
Line_5 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_7 $$ Number rightNumber = (Number) rightOperand[ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_25 $$ return new TypedValue(leftNumber.longValue() / rightNumber.longValue())[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_15 $$ return new TypedValue(leftNumber.doubleValue() / rightNumber.doubleValue())[ FD ]
Line_5 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) [ CD ]
Line_26 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) -->Line_30 $$ return new TypedValue(leftNumber.doubleValue() / rightNumber.doubleValue())[ CD ]
Line_9 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)-->Line_11 $$ int scale = Math.max(leftBigDecimal.scale(), rightBigDecimal.scale())[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_10 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ FD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_13 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) [ CD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_18 $$ return new TypedValue(leftNumber.floatValue() / rightNumber.floatValue())[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_26 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ FD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_10 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_28 $$ return new TypedValue(leftNumber.intValue() / rightNumber.intValue())[ FD ]
Line_21 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)-->Line_22 $$ return new TypedValue(leftBigInteger.divide(rightBigInteger))[ FD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_30 $$ return new TypedValue(leftNumber.doubleValue() / rightNumber.doubleValue())[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_25 $$ return new TypedValue(leftNumber.longValue() / rightNumber.longValue())[ FD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_3 $$ Object leftOperand = getLeftOperand().getValueInternal(state).getValue()[ CD ]
Line_16 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_18 $$ return new TypedValue(leftNumber.floatValue() / rightNumber.floatValue())[ CD ]
Line_23 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_25 $$ return new TypedValue(leftNumber.longValue() / rightNumber.longValue())[ CD ]
Line_3 $$ Object leftOperand = getLeftOperand().getValueInternal(state).getValue()-->Line_33 $$ return state.operate(Operation.DIVIDE, leftOperand, rightOperand)[ FD ]
Line_13 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_15 $$ return new TypedValue(leftNumber.doubleValue() / rightNumber.doubleValue())[ CD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_33 $$ return state.operate(Operation.DIVIDE, leftOperand, rightOperand)[ FD ]
Line_23 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_26 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) [ CD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_4 $$ Object rightOperand = getRightOperand().getValueInternal(state).getValue()[ FD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_4 $$ Object rightOperand = getRightOperand().getValueInternal(state).getValue()[ CD ]
Line_13 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_16 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) [ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_15 $$ return new TypedValue(leftNumber.doubleValue() / rightNumber.doubleValue())[ FD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_9 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ CD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_20 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ FD ]
Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_20 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ CD ]
Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_21 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ CD ]
Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_22 $$ return new TypedValue(leftBigInteger.divide(rightBigInteger))[ CD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_11 $$ int scale = Math.max(leftBigDecimal.scale(), rightBigDecimal.scale())[ CD ]
Line_10 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)-->Line_12 $$ return new TypedValue(leftBigDecimal.divide(rightBigDecimal, scale, RoundingMode.HALF_EVEN))[ FD ]
Line_19 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_23 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) [ CD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_21 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ FD ]
Line_5 $$ if (leftOperand instanceof Number && rightOperand instanceof Number) -->Line_6 $$ Number leftNumber = (Number) leftOperand[ CD ]
Line_2 $$ public TypedValue getValueInternal(ExpressionState state) throws EvaluationException -->Line_3 $$ Object leftOperand = getLeftOperand().getValueInternal(state).getValue()[ FD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_18 $$ return new TypedValue(leftNumber.floatValue() / rightNumber.floatValue())[ FD ]
Line_13 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_14 $$ this.exitTypeDescriptor = "D"[ CD ]
Line_4 $$ Object rightOperand = getRightOperand().getValueInternal(state).getValue()-->Line_33 $$ return state.operate(Operation.DIVIDE, leftOperand, rightOperand)[ FD ]
Line_10 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)-->Line_11 $$ int scale = Math.max(leftBigDecimal.scale(), rightBigDecimal.scale())[ FD ]
Line_23 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_24 $$ this.exitTypeDescriptor = "J"[ CD ]
Line_26 $$ if (CodeFlow.isIntegerForNumericOp(leftNumber) || CodeFlow.isIntegerForNumericOp(rightNumber)) -->Line_28 $$ return new TypedValue(leftNumber.intValue() / rightNumber.intValue())[ CD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_28 $$ return new TypedValue(leftNumber.intValue() / rightNumber.intValue())[ FD ]
Line_6 $$ Number leftNumber = (Number) leftOperand-->Line_9 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ FD ]
Line_9 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)-->Line_12 $$ return new TypedValue(leftBigDecimal.divide(rightBigDecimal, scale, RoundingMode.HALF_EVEN))[ FD ]
Line_20 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)-->Line_22 $$ return new TypedValue(leftBigInteger.divide(rightBigInteger))[ FD ]
Line_7 $$ Number rightNumber = (Number) rightOperand-->Line_30 $$ return new TypedValue(leftNumber.doubleValue() / rightNumber.doubleValue())[ FD ]
Line_11 $$ int scale = Math.max(leftBigDecimal.scale(), rightBigDecimal.scale())-->Line_12 $$ return new TypedValue(leftBigDecimal.divide(rightBigDecimal, scale, RoundingMode.HALF_EVEN))[ FD ]
Line_8 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_12 $$ return new TypedValue(leftBigDecimal.divide(rightBigDecimal, scale, RoundingMode.HALF_EVEN))[ CD ]
