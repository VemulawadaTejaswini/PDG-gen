Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_9 $$ s.persist(f)[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_17 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ CD ]
Line_7 $$ MutualFund f = new MutualFund()-->Line_9 $$ s.persist(f)[ FD ]
Line_5 $$ final BigDecimal AMOUNT = new BigDecimal(73000000d)-->Line_6 $$ final BigDecimal AMOUNT_MILLIONS = AMOUNT.divide(new BigDecimal(1000000d))[ FD ]
Line_7 $$ MutualFund f = new MutualFund()-->Line_17 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ FD ]
Line_18 $$ f = (MutualFund) s.createQuery("from MutualFund f where f.holdings.amount between ? and ?").setBigDecimal(0, AMOUNT.subtract(one)).setBigDecimal(1, AMOUNT.add(one)).uniqueResult()-->Line_19 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_11 $$ BigDecimal amountViaSql = (BigDecimal) s.createSQLQuery("select amount_millions from MutualFund").uniqueResult()[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ org.hibernate.Transaction t = s.beginTransaction()[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_5 $$ final BigDecimal AMOUNT = new BigDecimal(73000000d)[ CD ]
Line_7 $$ MutualFund f = new MutualFund()-->Line_19 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_7 $$ MutualFund f = new MutualFund()[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_13 $$ BigDecimal amountViaHql = (BigDecimal) s.createQuery("select f.holdings.amount from MutualFund f").uniqueResult()[ CD ]
Line_7 $$ MutualFund f = new MutualFund()-->Line_8 $$ f.setHoldings(new MonetoryAmount(AMOUNT, Currency.getInstance("USD")))[ FD ]
Line_6 $$ final BigDecimal AMOUNT_MILLIONS = AMOUNT.divide(new BigDecimal(1000000d))-->Line_12 $$ assertEquals(AMOUNT_MILLIONS.doubleValue(), amountViaSql.doubleValue(), 0.01d)[ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()[ FD ]
Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()-->Line_18 $$ f = (MutualFund) s.createQuery("from MutualFund f where f.holdings.amount between ? and ?").setBigDecimal(0, AMOUNT.subtract(one)).setBigDecimal(1, AMOUNT.add(one)).uniqueResult()[ FD ]
Line_7 $$ MutualFund f = new MutualFund()-->Line_20 $$ s.delete(f)[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.flush()[ FD ]
Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()-->Line_19 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ FD ]
Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()-->Line_20 $$ s.delete(f)[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_4 $$ org.hibernate.Transaction t = s.beginTransaction()[ CD ]
Line_15 $$ BigDecimal one = new BigDecimal(1)-->Line_18 $$ f = (MutualFund) s.createQuery("from MutualFund f where f.holdings.amount between ? and ?").setBigDecimal(0, AMOUNT.subtract(one)).setBigDecimal(1, AMOUNT.add(one)).uniqueResult()[ FD ]
Line_11 $$ BigDecimal amountViaSql = (BigDecimal) s.createSQLQuery("select amount_millions from MutualFund").uniqueResult()-->Line_12 $$ assertEquals(AMOUNT_MILLIONS.doubleValue(), amountViaSql.doubleValue(), 0.01d)[ FD ]
Line_5 $$ final BigDecimal AMOUNT = new BigDecimal(73000000d)-->Line_14 $$ assertEquals(AMOUNT.doubleValue(), amountViaHql.doubleValue(), 0.01d)[ FD ]
Line_5 $$ final BigDecimal AMOUNT = new BigDecimal(73000000d)-->Line_17 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ FD ]
Line_15 $$ BigDecimal one = new BigDecimal(1)-->Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()[ FD ]
Line_18 $$ f = (MutualFund) s.createQuery("from MutualFund f where f.holdings.amount between ? and ?").setBigDecimal(0, AMOUNT.subtract(one)).setBigDecimal(1, AMOUNT.add(one)).uniqueResult()-->Line_20 $$ s.delete(f)[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_6 $$ final BigDecimal AMOUNT_MILLIONS = AMOUNT.divide(new BigDecimal(1000000d))[ CD ]
Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()-->Line_17 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ f = (MutualFund) s.createQuery("from MutualFund f where f.holdings.amount between ? and ?").setBigDecimal(0, AMOUNT.subtract(one)).setBigDecimal(1, AMOUNT.add(one)).uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ BigDecimal amountViaHql = (BigDecimal) s.createQuery("select f.holdings.amount from MutualFund f").uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_9 $$ s.persist(f)[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_21 $$ t.commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s.delete(f)[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ BigDecimal amountViaSql = (BigDecimal) s.createSQLQuery("select amount_millions from MutualFund").uniqueResult()[ FD ]
Line_5 $$ final BigDecimal AMOUNT = new BigDecimal(73000000d)-->Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()[ FD ]
Line_5 $$ final BigDecimal AMOUNT = new BigDecimal(73000000d)-->Line_19 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ FD ]
Line_7 $$ MutualFund f = new MutualFund()-->Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_8 $$ f.setHoldings(new MonetoryAmount(AMOUNT, Currency.getInstance("USD")))[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_19 $$ assertEquals(AMOUNT.doubleValue(), f.getHoldings().getAmount().doubleValue(), 0.01d)[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_12 $$ assertEquals(AMOUNT_MILLIONS.doubleValue(), amountViaSql.doubleValue(), 0.01d)[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_20 $$ s.delete(f)[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_14 $$ assertEquals(AMOUNT.doubleValue(), amountViaHql.doubleValue(), 0.01d)[ CD ]
Line_5 $$ final BigDecimal AMOUNT = new BigDecimal(73000000d)-->Line_18 $$ f = (MutualFund) s.createQuery("from MutualFund f where f.holdings.amount between ? and ?").setBigDecimal(0, AMOUNT.subtract(one)).setBigDecimal(1, AMOUNT.add(one)).uniqueResult()[ FD ]
Line_13 $$ BigDecimal amountViaHql = (BigDecimal) s.createQuery("select f.holdings.amount from MutualFund f").uniqueResult()-->Line_14 $$ assertEquals(AMOUNT.doubleValue(), amountViaHql.doubleValue(), 0.01d)[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_10 $$ s.flush()[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_18 $$ f = (MutualFund) s.createQuery("from MutualFund f where f.holdings.amount between ? and ?").setBigDecimal(0, AMOUNT.subtract(one)).setBigDecimal(1, AMOUNT.add(one)).uniqueResult()[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_16 $$ f = (MutualFund) s.createCriteria(MutualFund.class).add(Restrictions.between("holdings.amount", AMOUNT.subtract(one), AMOUNT.add(one))).uniqueResult()[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_3 $$ Session s = openSession()[ CD ]
Line_7 $$ MutualFund f = new MutualFund()-->Line_18 $$ f = (MutualFund) s.createQuery("from MutualFund f where f.holdings.amount between ? and ?").setBigDecimal(0, AMOUNT.subtract(one)).setBigDecimal(1, AMOUNT.add(one)).uniqueResult()[ FD ]
Line_4 $$ org.hibernate.Transaction t = s.beginTransaction()-->Line_21 $$ t.commit()[ FD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_15 $$ BigDecimal one = new BigDecimal(1)[ CD ]
Line_2 $$ public void testCustomColumnReadAndWrite() -->Line_22 $$ s.close()[ CD ]
