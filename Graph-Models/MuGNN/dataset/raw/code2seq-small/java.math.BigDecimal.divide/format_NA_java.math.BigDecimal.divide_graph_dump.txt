Line_14 $$ duration = duration % MILLIS_PER_HOUR-->Line_20 $$ duration = duration % MILLIS_PER_MINUTE[ FD ]
Line_2 $$ public String format(long duration) -->Line_14 $$ duration = duration % MILLIS_PER_HOUR[ FD ]
Line_2 $$ public String format(long duration) -->Line_15 $$ if (hours > 0 || result.length() > 0) [ CD ]
Line_19 $$ long minutes = duration / MILLIS_PER_MINUTE-->Line_22 $$ result.append(minutes)[ FD ]
Line_25 $$ int secondsScale = result.length() > 0 ? 2 : 3-->Line_26 $$ result.append(BigDecimal.valueOf(duration).divide(BigDecimal.valueOf(MILLIS_PER_SECOND)).setScale(secondsScale, BigDecimal.ROUND_HALF_UP))[ FD ]
Line_9 $$ if (days > 0) -->Line_10 $$ result.append(days)[ CD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_28 $$ return result.toString()[ FD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_26 $$ result.append(BigDecimal.valueOf(duration).divide(BigDecimal.valueOf(MILLIS_PER_SECOND)).setScale(secondsScale, BigDecimal.ROUND_HALF_UP))[ FD ]
Line_20 $$ duration = duration % MILLIS_PER_MINUTE-->Line_26 $$ result.append(BigDecimal.valueOf(duration).divide(BigDecimal.valueOf(MILLIS_PER_SECOND)).setScale(secondsScale, BigDecimal.ROUND_HALF_UP))[ FD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_22 $$ result.append(minutes)[ FD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_25 $$ int secondsScale = result.length() > 0 ? 2 : 3[ FD ]
Line_7 $$ long days = duration / MILLIS_PER_DAY-->Line_10 $$ result.append(days)[ FD ]
Line_13 $$ long hours = duration / MILLIS_PER_HOUR-->Line_16 $$ result.append(hours)[ FD ]
Line_15 $$ if (hours > 0 || result.length() > 0) -->Line_17 $$ result.append("h")[ CD ]
Line_2 $$ public String format(long duration) -->Line_20 $$ duration = duration % MILLIS_PER_MINUTE[ CD ]
Line_21 $$ if (minutes > 0 || result.length() > 0) -->Line_22 $$ result.append(minutes)[ CD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_17 $$ result.append("h")[ FD ]
Line_2 $$ public String format(long duration) -->Line_26 $$ result.append(BigDecimal.valueOf(duration).divide(BigDecimal.valueOf(MILLIS_PER_SECOND)).setScale(secondsScale, BigDecimal.ROUND_HALF_UP))[ FD ]
Line_2 $$ public String format(long duration) -->Line_6 $$ StringBuilder result = new StringBuilder()[ CD ]
Line_2 $$ public String format(long duration) -->Line_26 $$ result.append(BigDecimal.valueOf(duration).divide(BigDecimal.valueOf(MILLIS_PER_SECOND)).setScale(secondsScale, BigDecimal.ROUND_HALF_UP))[ CD ]
Line_8 $$ duration = duration % MILLIS_PER_DAY-->Line_20 $$ duration = duration % MILLIS_PER_MINUTE[ FD ]
Line_14 $$ duration = duration % MILLIS_PER_HOUR-->Line_26 $$ result.append(BigDecimal.valueOf(duration).divide(BigDecimal.valueOf(MILLIS_PER_SECOND)).setScale(secondsScale, BigDecimal.ROUND_HALF_UP))[ FD ]
Line_21 $$ if (minutes > 0 || result.length() > 0) -->Line_23 $$ result.append("m")[ CD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_27 $$ result.append("s")[ FD ]
Line_2 $$ public String format(long duration) -->Line_25 $$ int secondsScale = result.length() > 0 ? 2 : 3[ CD ]
Line_15 $$ if (hours > 0 || result.length() > 0) -->Line_16 $$ result.append(hours)[ CD ]
Line_2 $$ public String format(long duration) -->Line_14 $$ duration = duration % MILLIS_PER_HOUR[ CD ]
Line_2 $$ public String format(long duration) -->Line_21 $$ if (minutes > 0 || result.length() > 0) [ CD ]
Line_2 $$ public String format(long duration) -->Line_3 $$ if (duration == 0) [ CD ]
Line_2 $$ public String format(long duration) -->Line_8 $$ duration = duration % MILLIS_PER_DAY[ FD ]
Line_2 $$ public String format(long duration) -->Line_8 $$ duration = duration % MILLIS_PER_DAY[ CD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_15 $$ if (hours > 0 || result.length() > 0) [ FD ]
Line_2 $$ public String format(long duration) -->Line_13 $$ long hours = duration / MILLIS_PER_HOUR[ CD ]
Line_9 $$ if (days > 0) -->Line_11 $$ result.append("d")[ CD ]
Line_2 $$ public String format(long duration) -->Line_9 $$ if (days > 0) [ CD ]
Line_2 $$ public String format(long duration) -->Line_7 $$ long days = duration / MILLIS_PER_DAY[ CD ]
Line_2 $$ public String format(long duration) -->Line_3 $$ if (duration == 0) [ FD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_10 $$ result.append(days)[ FD ]
Line_2 $$ public String format(long duration) -->Line_27 $$ result.append("s")[ CD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_16 $$ result.append(hours)[ FD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_21 $$ if (minutes > 0 || result.length() > 0) [ FD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_23 $$ result.append("m")[ FD ]
Line_3 $$ if (duration == 0) -->Line_4 $$ return "0s"[ CD ]
Line_2 $$ public String format(long duration) -->Line_28 $$ return result.toString()[ CD ]
Line_6 $$ StringBuilder result = new StringBuilder()-->Line_11 $$ result.append("d")[ FD ]
Line_8 $$ duration = duration % MILLIS_PER_DAY-->Line_14 $$ duration = duration % MILLIS_PER_HOUR[ FD ]
Line_8 $$ duration = duration % MILLIS_PER_DAY-->Line_26 $$ result.append(BigDecimal.valueOf(duration).divide(BigDecimal.valueOf(MILLIS_PER_SECOND)).setScale(secondsScale, BigDecimal.ROUND_HALF_UP))[ FD ]
Line_2 $$ public String format(long duration) -->Line_19 $$ long minutes = duration / MILLIS_PER_MINUTE[ CD ]
Line_7 $$ long days = duration / MILLIS_PER_DAY-->Line_9 $$ if (days > 0) [ FD ]
Line_2 $$ public String format(long duration) -->Line_20 $$ duration = duration % MILLIS_PER_MINUTE[ FD ]
