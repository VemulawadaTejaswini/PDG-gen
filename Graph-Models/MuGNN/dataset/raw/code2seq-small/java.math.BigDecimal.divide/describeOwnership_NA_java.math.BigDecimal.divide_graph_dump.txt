Line_2 $$ public Map<Token, Float> describeOwnership(List<Token> sortedTokens) -->Line_4 $$ Iterator<Token> i = sortedTokens.iterator()[ FD ]
Line_2 $$ public Map<Token, Float> describeOwnership(List<Token> sortedTokens) -->Line_3 $$ Map<Token, Float> ownerships = new HashMap<Token, Float>()[ CD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_15 $$ Token t[ CD ]
Line_15 $$ Token t-->Line_18 $$ t = i.next()[ FD ]
Line_22 $$ tim1 = ti-->Line_20 $$ float age = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_3 $$ Map<Token, Float> ownerships = new HashMap<Token, Float>()-->Line_8 $$ ownerships.put(i.next(), new Float(1.0))[ FD ]
Line_19 $$ ti = BigInteger.valueOf(((LongToken) t).token)-->Line_22 $$ tim1 = ti[ FD ]
Line_14 $$ BigInteger ti = BigInteger.valueOf(((LongToken) start).token)-->Line_24 $$ float x = new BigDecimal(BigInteger.valueOf(((LongToken) start).token).subtract(ti).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_25 $$ ownerships.put(start, x)[ CD ]
Line_4 $$ Iterator<Token> i = sortedTokens.iterator()-->Line_17 $$ while (i.hasNext()) [ FD ]
Line_15 $$ Token t-->Line_21 $$ ownerships.put(t, age)[ FD ]
Line_4 $$ Iterator<Token> i = sortedTokens.iterator()-->Line_18 $$ t = i.next()[ FD ]
Line_2 $$ public Map<Token, Float> describeOwnership(List<Token> sortedTokens) -->Line_4 $$ Iterator<Token> i = sortedTokens.iterator()[ CD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_8 $$ ownerships.put(i.next(), new Float(1.0))[ CD ]
Line_2 $$ public Map<Token, Float> describeOwnership(List<Token> sortedTokens) -->Line_27 $$ return ownerships[ CD ]
Line_17 $$ while (i.hasNext()) -->Line_18 $$ t = i.next()[ CD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_13 $$ Token start = i.next()[ CD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_17 $$ while (i.hasNext()) [ CD ]
Line_18 $$ t = i.next()-->Line_21 $$ ownerships.put(t, age)[ FD ]
Line_16 $$ BigInteger tim1 = ti-->Line_22 $$ tim1 = ti[ FD ]
Line_12 $$ final BigDecimal r = new BigDecimal(ri)-->Line_24 $$ float x = new BigDecimal(BigInteger.valueOf(((LongToken) start).token).subtract(ti).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_2 $$ public Map<Token, Float> describeOwnership(List<Token> sortedTokens) -->Line_7 $$ if (sortedTokens.size() == 1)[ CD ]
Line_2 $$ public Map<Token, Float> describeOwnership(List<Token> sortedTokens) -->Line_5 $$ if (!i.hasNext())[ CD ]
Line_24 $$ float x = new BigDecimal(BigInteger.valueOf(((LongToken) start).token).subtract(ti).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()-->Line_25 $$ ownerships.put(start, x)[ FD ]
Line_4 $$ Iterator<Token> i = sortedTokens.iterator()-->Line_8 $$ ownerships.put(i.next(), new Float(1.0))[ FD ]
Line_3 $$ Map<Token, Float> ownerships = new HashMap<Token, Float>()-->Line_21 $$ ownerships.put(t, age)[ FD ]
Line_12 $$ final BigDecimal r = new BigDecimal(ri)-->Line_20 $$ float age = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_24 $$ float x = new BigDecimal(BigInteger.valueOf(((LongToken) start).token).subtract(ti).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ CD ]
Line_14 $$ BigInteger ti = BigInteger.valueOf(((LongToken) start).token)-->Line_19 $$ ti = BigInteger.valueOf(((LongToken) t).token)[ FD ]
Line_3 $$ Map<Token, Float> ownerships = new HashMap<Token, Float>()-->Line_25 $$ ownerships.put(start, x)[ FD ]
Line_14 $$ BigInteger ti = BigInteger.valueOf(((LongToken) start).token)-->Line_20 $$ float age = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_19 $$ ti = BigInteger.valueOf(((LongToken) t).token)-->Line_24 $$ float x = new BigDecimal(BigInteger.valueOf(((LongToken) start).token).subtract(ti).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_17 $$ while (i.hasNext()) -->Line_21 $$ ownerships.put(t, age)[ CD ]
Line_11 $$ final BigInteger ri = BigInteger.valueOf(MAXIMUM).subtract(BigInteger.valueOf(MINIMUM.token + 1))-->Line_24 $$ float x = new BigDecimal(BigInteger.valueOf(((LongToken) start).token).subtract(ti).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_17 $$ while (i.hasNext()) -->Line_19 $$ ti = BigInteger.valueOf(((LongToken) t).token)[ CD ]
Line_4 $$ Iterator<Token> i = sortedTokens.iterator()-->Line_13 $$ Token start = i.next()[ FD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_16 $$ BigInteger tim1 = ti[ CD ]
Line_17 $$ while (i.hasNext()) -->Line_22 $$ tim1 = ti[ CD ]
Line_20 $$ float age = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()-->Line_21 $$ ownerships.put(t, age)[ FD ]
Line_2 $$ public Map<Token, Float> describeOwnership(List<Token> sortedTokens) -->Line_7 $$ if (sortedTokens.size() == 1)[ FD ]
Line_16 $$ BigInteger tim1 = ti-->Line_20 $$ float age = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_4 $$ Iterator<Token> i = sortedTokens.iterator()-->Line_5 $$ if (!i.hasNext())[ FD ]
Line_17 $$ while (i.hasNext()) -->Line_20 $$ float age = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ CD ]
Line_19 $$ ti = BigInteger.valueOf(((LongToken) t).token)-->Line_20 $$ float age = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_12 $$ final BigDecimal r = new BigDecimal(ri)[ CD ]
Line_13 $$ Token start = i.next()-->Line_25 $$ ownerships.put(start, x)[ FD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_11 $$ final BigInteger ri = BigInteger.valueOf(MAXIMUM).subtract(BigInteger.valueOf(MINIMUM.token + 1))[ CD ]
Line_11 $$ final BigInteger ri = BigInteger.valueOf(MAXIMUM).subtract(BigInteger.valueOf(MINIMUM.token + 1))-->Line_20 $$ float age = new BigDecimal(ti.subtract(tim1).add(ri).mod(ri)).divide(r, 6, BigDecimal.ROUND_HALF_EVEN).floatValue()[ FD ]
Line_14 $$ BigInteger ti = BigInteger.valueOf(((LongToken) start).token)-->Line_22 $$ tim1 = ti[ FD ]
Line_7 $$ if (sortedTokens.size() == 1)-->Line_14 $$ BigInteger ti = BigInteger.valueOf(((LongToken) start).token)[ CD ]
