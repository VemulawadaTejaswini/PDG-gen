Line_4 $$ final long seed = RAN.nextLong()-->Line_6 $$ RAN.setSeed(seed)[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_67 $$ final FSDataOutputStream out = hdfs.create(zeroByteFile, false, buffer_size, (short) 2, block_size)[ FD ]
Line_85 $$ final int barhashcode = barcs.hashCode()-->Line_91 $$ assertEquals(webhdfs_qfoocs.hashCode(), barhashcode)[ FD ]
Line_7 $$ final Configuration conf = getTestConfiguration()-->Line_41 $$ conf.setInt(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY, 512)[ FD ]
Line_31 $$ final FileSystem webhdfs = ugi.doAs(new PrivilegedExceptionAction<FileSystem>() -->Line_62 $$ final FileChecksum webhdfs_qfoocs = webhdfs.getFileChecksum(webhdfsqualified)[ FD ]
Line_12 $$ final UserGroupInformation current = UserGroupInformation.getCurrentUser()-->Line_13 $$ final UserGroupInformation ugi = UserGroupInformation.createUserForTesting(current.getShortUserName() + "x", new String[] [ FD ]
Line_7 $$ final Configuration conf = getTestConfiguration()-->Line_35 $$ return new Path(webhdfsuri).getFileSystem(conf)[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_94 $$ hdfs.setPermission(dir, new FsPermission((short) 0))[ FD ]
Line_9 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_106 $$ cluster.shutdown()[ FD ]
Line_62 $$ final FileChecksum webhdfs_qfoocs = webhdfs.getFileChecksum(webhdfsqualified)-->Line_91 $$ assertEquals(webhdfs_qfoocs.hashCode(), barhashcode)[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_22 $$ hdfs.mkdirs(path)[ FD ]
Line_51 $$ final FSDataOutputStream out = hdfs.create(foo, false, buffer_size, (short) 2, block_size)-->Line_80 $$ out.close()[ FD ]
Line_62 $$ final FileChecksum webhdfs_qfoocs = webhdfs.getFileChecksum(webhdfsqualified)-->Line_92 $$ assertEquals(webhdfs_qfoocs, barcs)[ FD ]
Line_51 $$ final FSDataOutputStream out = hdfs.create(foo, false, buffer_size, (short) 2, block_size)-->Line_79 $$ out.write(data)[ FD ]
Line_85 $$ final int barhashcode = barcs.hashCode()-->Line_86 $$ assertEquals(hdfsfoocs.hashCode(), barhashcode)[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_23 $$ hdfs.getFileChecksum(path)[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_78 $$ final FSDataOutputStream out = hdfs.create(bar, false, buffer_size, (short) 2, block_size)[ FD ]
Line_51 $$ final FSDataOutputStream out = hdfs.create(foo, false, buffer_size, (short) 2, block_size)-->Line_53 $$ out.close()[ FD ]
Line_13 $$ final UserGroupInformation ugi = UserGroupInformation.createUserForTesting(current.getShortUserName() + "x", new String[] -->Line_31 $$ final FileSystem webhdfs = ugi.doAs(new PrivilegedExceptionAction<FileSystem>() [ FD ]
Line_7 $$ final Configuration conf = getTestConfiguration()-->Line_40 $$ final int buffer_size = conf.getInt(CommonConfigurationKeys.IO_FILE_BUFFER_SIZE_KEY, 4096)[ FD ]
Line_31 $$ final FileSystem webhdfs = ugi.doAs(new PrivilegedExceptionAction<FileSystem>() -->Line_98 $$ webhdfs.getFileChecksum(webhdfsqualified)[ FD ]
Line_21 $$ Path path = new Path("/test/TestExistingDir/")-->Line_23 $$ hdfs.getFileChecksum(path)[ FD ]
Line_31 $$ final FileSystem webhdfs = ugi.doAs(new PrivilegedExceptionAction<FileSystem>() -->Line_35 $$ return new Path(webhdfsuri).getFileSystem(conf)[ CD ]
Line_51 $$ final FSDataOutputStream out = hdfs.create(foo, false, buffer_size, (short) 2, block_size)-->Line_68 $$ out.close()[ FD ]
Line_72 $$ final FileChecksum zeroChecksum = hdfs.getFileChecksum(zeroByteFile)-->Line_73 $$ assertEquals(zeroChecksum.toString(), "MD5-of-0MD5-of-0CRC32:70bc8f4b72a86921468bf8e8441dce51")[ FD ]
Line_61 $$ final Path webhdfsqualified = new Path(webhdfsuri + dir, "foo" + n)-->Line_62 $$ final FileChecksum webhdfs_qfoocs = webhdfs.getFileChecksum(webhdfsqualified)[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_15 $$ hdfs.getFileChecksum(new Path("/test/TestNonExistingFile"))[ FD ]
Line_7 $$ final Configuration conf = getTestConfiguration()-->Line_11 $$ final String nnAddr = conf.get(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY)[ FD ]
Line_61 $$ final Path webhdfsqualified = new Path(webhdfsuri + dir, "foo" + n)-->Line_98 $$ webhdfs.getFileChecksum(webhdfsqualified)[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_51 $$ final FSDataOutputStream out = hdfs.create(foo, false, buffer_size, (short) 2, block_size)[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_104 $$ hdfs.setPermission(dir, new FsPermission((short) 0777))[ FD ]
Line_9 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()[ FD ]
Line_10 $$ final FileSystem hdfs = cluster.getFileSystem()-->Line_72 $$ final FileChecksum zeroChecksum = hdfs.getFileChecksum(zeroByteFile)[ FD ]
Line_7 $$ final Configuration conf = getTestConfiguration()-->Line_8 $$ conf.setBoolean(DFSConfigKeys.DFS_WEBHDFS_ENABLED_KEY, true)[ FD ]
Line_51 $$ final FSDataOutputStream out = hdfs.create(foo, false, buffer_size, (short) 2, block_size)-->Line_52 $$ out.write(data)[ FD ]
Line_21 $$ Path path = new Path("/test/TestExistingDir/")-->Line_22 $$ hdfs.mkdirs(path)[ FD ]
