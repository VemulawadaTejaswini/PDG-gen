Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_58 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_8 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_14 $$ blockInfoList.add(new BlockInfo(blockList.get(i), 3))[ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_29 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_15 $$ dd.addBlock(blockInfoList.get(i))[ CD ]
Line_8 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_58 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_29 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_49 $$ while (temp != null) -->Line_50 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ CD ]
Line_31 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ CD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_56 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_46 $$ temp = dd.getBlockListHeadForTesting()[ FD ]
Line_8 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_10 $$ int curIndex-->Line_58 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_29 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_5 $$ final int MAX_BLOCKS = 10-->Line_28 $$ assertEquals("There should be MAX_BLOCK blockInfo's", MAX_BLOCKS, len)[ FD ]
Line_8 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_50 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_51 $$ temp = temp.getNext(0)-->Line_50 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_46 $$ temp = dd.getBlockListHeadForTesting()-->Line_51 $$ temp = temp.getNext(0)[ FD ]
Line_24 $$ while (it.hasNext()) -->Line_26 $$ len++[ CD ]
Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_8 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_5 $$ final int MAX_BLOCKS = 10-->Line_21 $$ assertEquals("Length should be MAX_BLOCK", MAX_BLOCKS, dd.numBlocks())[ FD ]
Line_7 $$ ArrayList<Block> blockList = new ArrayList<Block>(MAX_BLOCKS)-->Line_14 $$ blockInfoList.add(new BlockInfo(blockList.get(i), 3))[ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_15 $$ dd.addBlock(blockInfoList.get(i))[ FD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_13 $$ blockList.add(new Block(i, 0, GenerationStamp.LAST_RESERVED_STAMP))[ CD ]
Line_10 $$ int curIndex-->Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_56 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_58 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ CD ]
Line_51 $$ temp = temp.getNext(0)-->Line_49 $$ while (temp != null) [ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_39 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_43 $$ assertEquals("Moving head to the head of the list shopuld not change the list", temp, dd.getBlockListHeadForTesting())[ FD ]
Line_5 $$ final int MAX_BLOCKS = 10-->Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_9 $$ int headIndex-->Line_29 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_31 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_56 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_58 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_10 $$ int curIndex-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_9 $$ int headIndex-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_39 $$ BlockInfo temp = dd.getBlockListHeadForTesting()[ FD ]
Line_56 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ CD ]
Line_48 $$ int c = MAX_BLOCKS - 1-->Line_50 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_9 $$ int headIndex-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_29 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_54 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_40 $$ curIndex = 0-->Line_58 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_14 $$ blockInfoList.add(new BlockInfo(blockList.get(i), 3))[ FD ]
Line_40 $$ curIndex = 0-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_22 $$ Iterator<BlockInfo> it = dd.getBlockIterator()-->Line_24 $$ while (it.hasNext()) [ FD ]
Line_46 $$ temp = dd.getBlockListHeadForTesting()-->Line_47 $$ assertNotNull("Head should not be null", temp)[ FD ]
Line_5 $$ final int MAX_BLOCKS = 10-->Line_57 $$ int j = rand.nextInt(MAX_BLOCKS)[ FD ]
Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_40 $$ curIndex = 0[ FD ]
Line_39 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_49 $$ while (temp != null) [ FD ]
Line_57 $$ int j = rand.nextInt(MAX_BLOCKS)-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_8 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_15 $$ dd.addBlock(blockInfoList.get(i))[ FD ]
Line_22 $$ Iterator<BlockInfo> it = dd.getBlockIterator()-->Line_25 $$ it.next()[ FD ]
Line_46 $$ temp = dd.getBlockListHeadForTesting()-->Line_49 $$ while (temp != null) [ FD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_7 $$ ArrayList<Block> blockList = new ArrayList<Block>(MAX_BLOCKS)-->Line_13 $$ blockList.add(new Block(i, 0, GenerationStamp.LAST_RESERVED_STAMP))[ FD ]
Line_23 $$ int len = 0-->Line_28 $$ assertEquals("There should be MAX_BLOCK blockInfo's", MAX_BLOCKS, len)[ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_43 $$ assertEquals("Moving head to the head of the list shopuld not change the list", temp, dd.getBlockListHeadForTesting())[ FD ]
Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_49 $$ while (temp != null) -->Line_51 $$ temp = temp.getNext(0)[ CD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_54 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_10 $$ int curIndex-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_31 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_39 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_51 $$ temp = temp.getNext(0)[ FD ]
Line_39 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_41 $$ headIndex = 0-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_46 $$ temp = dd.getBlockListHeadForTesting()-->Line_50 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_10 $$ int curIndex-->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_58 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_15 $$ dd.addBlock(blockInfoList.get(i))[ FD ]
Line_29 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_41 $$ headIndex = 0[ FD ]
Line_5 $$ final int MAX_BLOCKS = 10-->Line_31 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_40 $$ curIndex = 0-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_14 $$ blockInfoList.add(new BlockInfo(blockList.get(i), 3))[ CD ]
Line_23 $$ int len = 0-->Line_26 $$ len++[ FD ]
Line_5 $$ final int MAX_BLOCKS = 10-->Line_56 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_22 $$ Iterator<BlockInfo> it = dd.getBlockIterator()[ FD ]
Line_29 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_10 $$ int curIndex-->Line_40 $$ curIndex = 0[ FD ]
Line_24 $$ while (it.hasNext()) -->Line_25 $$ it.next()[ CD ]
Line_39 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_47 $$ assertNotNull("Head should not be null", temp)[ FD ]
Line_9 $$ int headIndex-->Line_41 $$ headIndex = 0[ FD ]
Line_41 $$ headIndex = 0-->Line_54 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_8 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)-->Line_54 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_9 $$ int headIndex-->Line_54 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_12 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_31 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_41 $$ headIndex = 0-->Line_42 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_57 $$ int j = rand.nextInt(MAX_BLOCKS)-->Line_58 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_55 $$ Random rand = new Random()-->Line_57 $$ int j = rand.nextInt(MAX_BLOCKS)[ FD ]
Line_39 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_50 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_54 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)-->Line_59 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_31 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ CD ]
Line_39 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_46 $$ temp = dd.getBlockListHeadForTesting()[ FD ]
Line_56 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_57 $$ int j = rand.nextInt(MAX_BLOCKS)[ CD ]
Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)-->Line_41 $$ headIndex = 0[ FD ]
Line_6 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_21 $$ assertEquals("Length should be MAX_BLOCK", MAX_BLOCKS, dd.numBlocks())[ FD ]
Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_9 $$ int headIndex-->Line_33 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_31 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_32 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
