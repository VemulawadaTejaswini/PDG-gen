Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_13 $$ blockInfoList.add(new BlockInfo(blockList.get(i), 3))[ FD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_50 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_51 $$ int j = rand.nextInt(MAX_BLOCKS)-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_54 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(j), dd.getBlockListHeadForTesting())[ FD ]
Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_45 $$ temp = temp.getNext(0)[ FD ]
Line_50 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_54 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(j), dd.getBlockListHeadForTesting())[ CD ]
Line_26 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_39 $$ LOG.info("Checking elements of the list...")[ CD ]
Line_6 $$ ArrayList<Block> blockList = new ArrayList<Block>(MAX_BLOCKS)-->Line_13 $$ blockInfoList.add(new BlockInfo(blockList.get(i), 3))[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_38 $$ assertEquals("Moving head to the head of the list shopuld not change the list", temp, dd.getBlockListHeadForTesting())[ FD ]
Line_40 $$ temp = dd.getBlockListHeadForTesting()-->Line_44 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_52 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_4 $$ final int MAX_BLOCKS = 10-->Line_18 $$ assertEquals("Length should be MAX_BLOCK", MAX_BLOCKS, dd.numBlocks())[ FD ]
Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_41 $$ assertNotNull("Head should not be null", temp)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_19 $$ Iterator<BlockInfo> it = dd.getBlockIterator()[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_33 $$ LOG.info("Moving head to the head...")[ CD ]
Line_26 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_36 $$ headIndex = 0[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ CD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_50 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_51 $$ int j = rand.nextInt(MAX_BLOCKS)[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")[ CD ]
Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ CD ]
Line_9 $$ int curIndex-->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_52 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_51 $$ int j = rand.nextInt(MAX_BLOCKS)-->Line_52 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_8 $$ int headIndex-->Line_48 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_36 $$ headIndex = 0-->Line_48 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_54 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(j), dd.getBlockListHeadForTesting())[ FD ]
Line_51 $$ int j = rand.nextInt(MAX_BLOCKS)-->Line_54 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(j), dd.getBlockListHeadForTesting())[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_3 $$ LOG.info("BlockInfo moveToHead tests...")[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_8 $$ int headIndex[ CD ]
Line_9 $$ int curIndex-->Line_52 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_9 $$ int curIndex[ CD ]
Line_35 $$ curIndex = 0-->Line_52 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_40 $$ temp = dd.getBlockListHeadForTesting()-->Line_43 $$ while (temp != null) [ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_6 $$ ArrayList<Block> blockList = new ArrayList<Block>(MAX_BLOCKS)[ CD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_18 $$ assertEquals("Length should be MAX_BLOCK", MAX_BLOCKS, dd.numBlocks())[ FD ]
Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_4 $$ final int MAX_BLOCKS = 10-->Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_45 $$ temp = temp.getNext(0)-->Line_43 $$ while (temp != null) [ FD ]
Line_21 $$ while (it.hasNext()) -->Line_23 $$ len++[ CD ]
Line_40 $$ temp = dd.getBlockListHeadForTesting()-->Line_45 $$ temp = temp.getNext(0)[ FD ]
Line_52 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_4 $$ final int MAX_BLOCKS = 10-->Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_35 $$ curIndex = 0[ FD ]
Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_50 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_4 $$ final int MAX_BLOCKS = 10-->Line_51 $$ int j = rand.nextInt(MAX_BLOCKS)[ FD ]
Line_42 $$ int c = MAX_BLOCKS - 1-->Line_44 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_17 $$ LOG.info("Checking list length...")[ CD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_9 $$ int curIndex-->Line_35 $$ curIndex = 0[ FD ]
Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_43 $$ while (temp != null) [ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_10 $$ LOG.info("Building block list...")[ CD ]
Line_50 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_52 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_21 $$ while (it.hasNext()) [ CD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_50 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ CD ]
Line_8 $$ int headIndex-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_26 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_9 $$ int curIndex-->Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ CD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_31 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(i), dd.getBlockListHeadForTesting())[ FD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_14 $$ dd.addBlock(blockInfoList.get(i))[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_19 $$ Iterator<BlockInfo> it = dd.getBlockIterator()[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_18 $$ assertEquals("Length should be MAX_BLOCK", MAX_BLOCKS, dd.numBlocks())[ CD ]
Line_48 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_13 $$ blockInfoList.add(new BlockInfo(blockList.get(i), 3))[ CD ]
Line_20 $$ int len = 0-->Line_23 $$ len++[ FD ]
Line_9 $$ int curIndex-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_25 $$ assertEquals("There should be MAX_BLOCK blockInfo's", MAX_BLOCKS, len)[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_20 $$ int len = 0[ CD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_47 $$ LOG.info("Moving random blocks to the head of the list...")[ CD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_15 $$ assertEquals("Find datanode should be 0", 0, blockInfoList.get(i).findStorageInfo(dd))[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_41 $$ assertNotNull("Head should not be null", temp)[ CD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()[ FD ]
Line_8 $$ int headIndex-->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_38 $$ assertEquals("Moving head to the head of the list shopuld not change the list", temp, dd.getBlockListHeadForTesting())[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_48 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ CD ]
Line_4 $$ final int MAX_BLOCKS = 10-->Line_50 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()[ CD ]
Line_21 $$ while (it.hasNext()) -->Line_22 $$ it.next()[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()[ CD ]
Line_8 $$ int headIndex-->Line_26 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_48 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_31 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(i), dd.getBlockListHeadForTesting())[ FD ]
Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_50 $$ for (int i = 0; i < MAX_BLOCKS; i++) [ CD ]
Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_44 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_40 $$ temp = dd.getBlockListHeadForTesting()-->Line_41 $$ assertNotNull("Head should not be null", temp)[ FD ]
Line_20 $$ int len = 0-->Line_25 $$ assertEquals("There should be MAX_BLOCK blockInfo's", MAX_BLOCKS, len)[ FD ]
Line_8 $$ int headIndex-->Line_36 $$ headIndex = 0[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_35 $$ curIndex = 0-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_34 $$ BlockInfo temp = dd.getBlockListHeadForTesting()-->Line_40 $$ temp = dd.getBlockListHeadForTesting()[ FD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_36 $$ headIndex = 0[ CD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_15 $$ assertEquals("Find datanode should be 0", 0, blockInfoList.get(i).findStorageInfo(dd))[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_42 $$ int c = MAX_BLOCKS - 1[ CD ]
Line_26 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)[ FD ]
Line_45 $$ temp = temp.getNext(0)-->Line_44 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_27 $$ LOG.info("Moving each block to the head of the list...")[ CD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_44 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ FD ]
Line_28 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_31 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(i), dd.getBlockListHeadForTesting())[ CD ]
Line_36 $$ headIndex = 0-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_15 $$ assertEquals("Find datanode should be 0", 0, blockInfoList.get(i).findStorageInfo(dd))[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_26 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ CD ]
Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_26 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_48 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_26 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_35 $$ curIndex = 0[ CD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_31 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(i), dd.getBlockListHeadForTesting())[ FD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_12 $$ blockList.add(new Block(i, 0, GenerationStamp.LAST_RESERVED_STAMP))[ CD ]
Line_19 $$ Iterator<BlockInfo> it = dd.getBlockIterator()-->Line_21 $$ while (it.hasNext()) [ FD ]
Line_4 $$ final int MAX_BLOCKS = 10-->Line_25 $$ assertEquals("There should be MAX_BLOCK blockInfo's", MAX_BLOCKS, len)[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_52 $$ curIndex = blockInfoList.get(j).findStorageInfo(dd)[ FD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_19 $$ Iterator<BlockInfo> it = dd.getBlockIterator()-->Line_22 $$ it.next()[ FD ]
Line_9 $$ int curIndex-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_6 $$ ArrayList<Block> blockList = new ArrayList<Block>(MAX_BLOCKS)-->Line_12 $$ blockList.add(new Block(i, 0, GenerationStamp.LAST_RESERVED_STAMP))[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)[ FD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_15 $$ assertEquals("Find datanode should be 0", 0, blockInfoList.get(i).findStorageInfo(dd))[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_40 $$ temp = dd.getBlockListHeadForTesting()[ CD ]
Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)-->Line_48 $$ headIndex = dd.getBlockListHeadForTesting().findStorageInfo(dd)[ FD ]
Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_7 $$ ArrayList<BlockInfo> blockInfoList = new ArrayList<BlockInfo>()-->Line_13 $$ blockInfoList.add(new BlockInfo(blockList.get(i), 3))[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_4 $$ final int MAX_BLOCKS = 10[ CD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_43 $$ while (temp != null) [ CD ]
Line_35 $$ curIndex = 0-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_40 $$ temp = dd.getBlockListHeadForTesting()[ FD ]
Line_36 $$ headIndex = 0-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_49 $$ Random rand = new Random()-->Line_51 $$ int j = rand.nextInt(MAX_BLOCKS)[ FD ]
Line_43 $$ while (temp != null) -->Line_44 $$ assertEquals("Expected element is not on the list", blockInfoList.get(c--), temp)[ CD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_14 $$ dd.addBlock(blockInfoList.get(i))[ CD ]
Line_29 $$ curIndex = blockInfoList.get(i).findStorageInfo(dd)-->Line_37 $$ dd.moveBlockToHead(temp, curIndex, headIndex)[ FD ]
Line_8 $$ int headIndex-->Line_53 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(j), curIndex, headIndex)[ FD ]
Line_11 $$ for (int i = 0; i < MAX_BLOCKS; i++) -->Line_14 $$ dd.addBlock(blockInfoList.get(i))[ FD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_14 $$ dd.addBlock(blockInfoList.get(i))[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_38 $$ assertEquals("Moving head to the head of the list shopuld not change the list", temp, dd.getBlockListHeadForTesting())[ CD ]
Line_30 $$ headIndex = dd.moveBlockToHead(blockInfoList.get(i), curIndex, headIndex)-->Line_36 $$ headIndex = 0[ FD ]
Line_43 $$ while (temp != null) -->Line_45 $$ temp = temp.getNext(0)[ CD ]
Line_5 $$ DatanodeStorageInfo dd = DFSTestUtil.createDatanodeStorageInfo("s1", "1.1.1.1")-->Line_31 $$ assertEquals("Block should be at the head of the list now.", blockInfoList.get(i), dd.getBlockListHeadForTesting())[ FD ]
Line_2 $$ public void testBlockListMoveToHead() throws Exception -->Line_49 $$ Random rand = new Random()[ CD ]
