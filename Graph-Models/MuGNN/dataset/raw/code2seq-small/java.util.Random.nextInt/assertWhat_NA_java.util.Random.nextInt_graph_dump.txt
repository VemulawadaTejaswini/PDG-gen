Line_5 $$ final DataInputBuffer in = new DataInputBuffer()-->Line_18 $$ tempFilter.readFields(in)[ FD ]
Line_8 $$ ImmutableList.Builder<Integer> blist = ImmutableList.builder()-->Line_10 $$ blist.add(rnd.nextInt(numInsertions * 2))[ FD ]
Line_7 $$ Filter tempFilter = getSymmetricFilter(filter.getClass(), numInsertions, hashId)-->Line_18 $$ tempFilter.readFields(in)[ FD ]
Line_2 $$ public void assertWhat(Filter filter, int numInsertions, int hashId, ImmutableSet<Integer> falsePositives) -->Line_14 $$ filter.add(new Key(String.valueOf(slot).getBytes()))[ FD ]
Line_2 $$ public void assertWhat(Filter filter, int numInsertions, int hashId, ImmutableSet<Integer> falsePositives) -->Line_4 $$ final DataOutputBuffer out = new DataOutputBuffer()[ CD ]
Line_2 $$ public void assertWhat(Filter filter, int numInsertions, int hashId, ImmutableSet<Integer> falsePositives) -->Line_20 $$ assertTrue("read/write mask check filter error on " + slot, filter.membershipTest(new Key(String.valueOf(slot).getBytes())))[ FD ]
Line_4 $$ final DataOutputBuffer out = new DataOutputBuffer()-->Line_17 $$ in.reset(out.getData(), out.getLength())[ FD ]
Line_9 $$ for (int i = 0; i < slotSize; i++) -->Line_10 $$ blist.add(rnd.nextInt(numInsertions * 2))[ CD ]
Line_8 $$ ImmutableList.Builder<Integer> blist = ImmutableList.builder()-->Line_12 $$ ImmutableList<Integer> list = blist.build()[ FD ]
Line_13 $$ for (Integer slot : list) -->Line_14 $$ filter.add(new Key(String.valueOf(slot).getBytes()))[ FD ]
Line_13 $$ for (Integer slot : list) -->Line_20 $$ assertTrue("read/write mask check filter error on " + slot, filter.membershipTest(new Key(String.valueOf(slot).getBytes())))[ FD ]
Line_3 $$ final Random rnd = new Random()-->Line_10 $$ blist.add(rnd.nextInt(numInsertions * 2))[ FD ]
Line_4 $$ final DataOutputBuffer out = new DataOutputBuffer()-->Line_16 $$ filter.write(out)[ FD ]
Line_2 $$ public void assertWhat(Filter filter, int numInsertions, int hashId, ImmutableSet<Integer> falsePositives) -->Line_5 $$ final DataInputBuffer in = new DataInputBuffer()[ CD ]
Line_2 $$ public void assertWhat(Filter filter, int numInsertions, int hashId, ImmutableSet<Integer> falsePositives) -->Line_16 $$ filter.write(out)[ FD ]
Line_2 $$ public void assertWhat(Filter filter, int numInsertions, int hashId, ImmutableSet<Integer> falsePositives) -->Line_3 $$ final Random rnd = new Random()[ CD ]
Line_2 $$ public void assertWhat(Filter filter, int numInsertions, int hashId, ImmutableSet<Integer> falsePositives) -->Line_7 $$ Filter tempFilter = getSymmetricFilter(filter.getClass(), numInsertions, hashId)[ FD ]
Line_5 $$ final DataInputBuffer in = new DataInputBuffer()-->Line_17 $$ in.reset(out.getData(), out.getLength())[ FD ]
