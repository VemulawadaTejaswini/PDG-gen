Line_67 $$ previous = blocks[idx]-->Line_63 $$ assertTrue("Cannot corrupt meta file.", previous.renameTo(blocks[idx]))[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_32 $$ channel.truncate(newsize)[ CD ]
Line_16 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_17 $$ assertTrue("data directory does not exist", data_dir.exists())[ FD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_5 $$ short replFactor = 2[ CD ]
Line_60 $$ if (count % 2 == 0) -->Line_64 $$ assertTrue("Cannot recreate empty meta file.", previous.createNewFile())[ CD ]
Line_6 $$ Random random = new Random()-->Line_41 $$ int length = random.nextInt((int) (channel.size() - position + 1))[ FD ]
Line_55 $$ int count = 0-->Line_59 $$ count++[ FD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_71 $$ assertTrue("Corrupted replicas not handled properly.", util.checkFiles(fs, "/srcdat"))[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()[ FD ]
Line_56 $$ File previous = null-->Line_63 $$ assertTrue("Cannot corrupt meta file.", previous.renameTo(blocks[idx]))[ FD ]
Line_11 $$ FileSystem fs = cluster.getFileSystem()-->Line_71 $$ assertTrue("Corrupted replicas not handled properly.", util.checkFiles(fs, "/srcdat"))[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_38 $$ if (num != 2) [ CD ]
Line_22 $$ if (blocks[idx].getName().startsWith("blk_") && blocks[idx].getName().endsWith(".meta")) -->Line_23 $$ num++[ CD ]
Line_27 $$ if (num % 3 == 1) -->Line_43 $$ random.nextBytes(buffer)[ CD ]
Line_24 $$ if (num % 3 == 0) -->Line_27 $$ if (num % 3 == 1) [ CD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_7 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, 10)[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_78 $$ cluster.shutdown()[ FD ]
Line_65 $$ previous = null-->Line_67 $$ previous = blocks[idx][ FD ]
Line_29 $$ FileChannel channel = file.getChannel()-->Line_41 $$ int length = random.nextInt((int) (channel.size() - position + 1))[ FD ]
Line_37 $$ long position = 0-->Line_44 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_65 $$ previous = null-->Line_61 $$ System.out.println("Deliberately insertimg bad crc into files " + blocks[idx].getName() + " " + previous.getName())[ FD ]
Line_51 $$ data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_53 $$ blocks = data_dir.listFiles()[ FD ]
Line_16 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_53 $$ blocks = data_dir.listFiles()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_11 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_56 $$ File previous = null-->Line_61 $$ System.out.println("Deliberately insertimg bad crc into files " + blocks[idx].getName() + " " + previous.getName())[ FD ]
Line_28 $$ RandomAccessFile file = new RandomAccessFile(blocks[idx], "rw")-->Line_29 $$ FileChannel channel = file.getChannel()[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_42 $$ byte[] buffer = new byte[length][ CD ]
Line_5 $$ short replFactor = 2-->Line_12 $$ util.createFiles(fs, "/srcdat", replFactor)[ FD ]
Line_14 $$ File storageDir = cluster.getInstanceStorageDir(0, 1)-->Line_51 $$ data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_67 $$ previous = blocks[idx]-->Line_64 $$ assertTrue("Cannot recreate empty meta file.", previous.createNewFile())[ FD ]
Line_11 $$ FileSystem fs = cluster.getFileSystem()-->Line_13 $$ util.waitReplication(fs, "/srcdat", (short) 2)[ FD ]
Line_38 $$ if (num != 2) -->Line_39 $$ position = (long) random.nextInt((int) channel.size())[ CD ]
Line_27 $$ if (num % 3 == 1) -->Line_37 $$ long position = 0[ CD ]
Line_67 $$ previous = blocks[idx]-->Line_61 $$ System.out.println("Deliberately insertimg bad crc into files " + blocks[idx].getName() + " " + previous.getName())[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_28 $$ RandomAccessFile file = new RandomAccessFile(blocks[idx], "rw")[ CD ]
Line_4 $$ int numDataNodes = 2-->Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_36 $$ FileChannel channel = file.getChannel()[ CD ]
Line_27 $$ if (num % 3 == 1) -->Line_31 $$ System.out.println("Deliberately truncating file " + blocks[idx].getName() + " to size " + newsize + " bytes.")[ CD ]
Line_14 $$ File storageDir = cluster.getInstanceStorageDir(0, 1)-->Line_50 $$ storageDir = cluster.getInstanceStorageDir(0, 1)[ FD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_6 $$ Random random = new Random()[ CD ]
Line_58 $$ if (blocks[idx].getName().startsWith("blk_") && blocks[idx].getName().endsWith(".meta")) -->Line_60 $$ if (count % 2 == 0) [ CD ]
Line_56 $$ File previous = null-->Line_67 $$ previous = blocks[idx][ FD ]
Line_21 $$ for (int idx = 0; idx < blocks.length; idx++) -->Line_57 $$ for (int idx = 0; idx < blocks.length; idx++) [ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_10 $$ cluster.waitActive()[ FD ]
Line_22 $$ if (blocks[idx].getName().startsWith("blk_") && blocks[idx].getName().endsWith(".meta")) -->Line_24 $$ if (num % 3 == 0) [ CD ]
Line_21 $$ for (int idx = 0; idx < blocks.length; idx++) -->Line_22 $$ if (blocks[idx].getName().startsWith("blk_") && blocks[idx].getName().endsWith(".meta")) [ CD ]
Line_11 $$ FileSystem fs = cluster.getFileSystem()-->Line_73 $$ util.setReplication(fs, "/srcdat", (short) 1)[ FD ]
Line_42 $$ byte[] buffer = new byte[length]-->Line_43 $$ random.nextBytes(buffer)[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_46 $$ file.close()[ CD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_13 $$ util.waitReplication(fs, "/srcdat", (short) 2)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_77 $$ if (cluster != null) [ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_14 $$ File storageDir = cluster.getInstanceStorageDir(0, 1)[ FD ]
Line_6 $$ Random random = new Random()-->Line_39 $$ position = (long) random.nextInt((int) channel.size())[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_50 $$ storageDir = cluster.getInstanceStorageDir(0, 1)[ FD ]
Line_60 $$ if (count % 2 == 0) -->Line_61 $$ System.out.println("Deliberately insertimg bad crc into files " + blocks[idx].getName() + " " + previous.getName())[ CD ]
Line_24 $$ if (num % 3 == 0) -->Line_26 $$ assertTrue("Cannot remove file.", blocks[idx].delete())[ CD ]
Line_29 $$ FileChannel channel = file.getChannel()-->Line_32 $$ channel.truncate(newsize)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_78 $$ cluster.shutdown()[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_29 $$ FileChannel channel = file.getChannel()[ CD ]
Line_27 $$ if (num % 3 == 1) -->Line_44 $$ channel.write(ByteBuffer.wrap(buffer), position)[ CD ]
Line_15 $$ String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_51 $$ data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_39 $$ position = (long) random.nextInt((int) channel.size())-->Line_44 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_42 $$ byte[] buffer = new byte[length]-->Line_44 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_7 $$ conf.setInt(DFSConfigKeys.DFS_CLIENT_RETRY_WINDOW_BASE, 10)[ CD ]
Line_65 $$ previous = null-->Line_64 $$ assertTrue("Cannot recreate empty meta file.", previous.createNewFile())[ FD ]
Line_29 $$ FileChannel channel = file.getChannel()-->Line_39 $$ position = (long) random.nextInt((int) channel.size())[ FD ]
Line_30 $$ int newsize = random.nextInt((int) channel.size() / 2)-->Line_32 $$ channel.truncate(newsize)[ FD ]
Line_56 $$ File previous = null-->Line_64 $$ assertTrue("Cannot recreate empty meta file.", previous.createNewFile())[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_10 $$ cluster.waitActive()[ FD ]
Line_60 $$ if (count % 2 == 0) -->Line_65 $$ previous = null[ CD ]
Line_29 $$ FileChannel channel = file.getChannel()-->Line_44 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_29 $$ FileChannel channel = file.getChannel()-->Line_30 $$ int newsize = random.nextInt((int) channel.size() / 2)[ FD ]
Line_57 $$ for (int idx = 0; idx < blocks.length; idx++) -->Line_58 $$ if (blocks[idx].getName().startsWith("blk_") && blocks[idx].getName().endsWith(".meta")) [ CD ]
Line_15 $$ String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_16 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_16 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_18 $$ File[] blocks = data_dir.listFiles()[ FD ]
Line_56 $$ File previous = null-->Line_65 $$ previous = null[ FD ]
Line_24 $$ if (num % 3 == 0) -->Line_25 $$ System.out.println("Deliberately removing file " + blocks[idx].getName())[ CD ]
Line_20 $$ int num = 0-->Line_23 $$ num++[ FD ]
Line_11 $$ FileSystem fs = cluster.getFileSystem()-->Line_12 $$ util.createFiles(fs, "/srcdat", replFactor)[ FD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_73 $$ util.setReplication(fs, "/srcdat", (short) 1)[ FD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_75 $$ util.cleanup(fs, "/srcdat")[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_33 $$ file.close()[ CD ]
Line_60 $$ if (count % 2 == 0) -->Line_62 $$ assertTrue("Cannot remove file.", blocks[idx].delete())[ CD ]
Line_27 $$ if (num % 3 == 1) -->Line_45 $$ System.out.println("Deliberately corrupting file " + blocks[idx].getName() + " at offset " + position + " length " + length)[ CD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_77 $$ if (cluster != null) [ FD ]
Line_14 $$ File storageDir = cluster.getInstanceStorageDir(0, 1)-->Line_16 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_50 $$ storageDir = cluster.getInstanceStorageDir(0, 1)[ FD ]
Line_27 $$ if (num % 3 == 1) -->Line_41 $$ int length = random.nextInt((int) (channel.size() - position + 1))[ CD ]
Line_51 $$ data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_52 $$ assertTrue("data directory does not exist", data_dir.exists())[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_11 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_50 $$ storageDir = cluster.getInstanceStorageDir(0, 1)-->Line_51 $$ data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_12 $$ util.createFiles(fs, "/srcdat", replFactor)[ FD ]
Line_6 $$ Random random = new Random()-->Line_43 $$ random.nextBytes(buffer)[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_14 $$ File storageDir = cluster.getInstanceStorageDir(0, 1)[ FD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_4 $$ int numDataNodes = 2[ CD ]
Line_28 $$ RandomAccessFile file = new RandomAccessFile(blocks[idx], "rw")-->Line_33 $$ file.close()[ FD ]
Line_28 $$ RandomAccessFile file = new RandomAccessFile(blocks[idx], "rw")-->Line_46 $$ file.close()[ FD ]
Line_58 $$ if (blocks[idx].getName().startsWith("blk_") && blocks[idx].getName().endsWith(".meta")) -->Line_59 $$ count++[ CD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(numDataNodes).build()-->Line_15 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ FD ]
Line_20 $$ int num = 0-->Line_38 $$ if (num != 2) [ FD ]
Line_16 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_51 $$ data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_28 $$ RandomAccessFile file = new RandomAccessFile(blocks[idx], "rw")-->Line_36 $$ FileChannel channel = file.getChannel()[ FD ]
Line_65 $$ previous = null-->Line_63 $$ assertTrue("Cannot corrupt meta file.", previous.renameTo(blocks[idx]))[ FD ]
Line_77 $$ if (cluster != null) -->Line_78 $$ cluster.shutdown()[ CD ]
Line_6 $$ Random random = new Random()-->Line_30 $$ int newsize = random.nextInt((int) channel.size() / 2)[ FD ]
Line_60 $$ if (count % 2 == 0) -->Line_63 $$ assertTrue("Cannot corrupt meta file.", previous.renameTo(blocks[idx]))[ CD ]
Line_27 $$ if (num % 3 == 1) -->Line_30 $$ int newsize = random.nextInt((int) channel.size() / 2)[ CD ]
Line_16 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_52 $$ assertTrue("data directory does not exist", data_dir.exists())[ FD ]
Line_60 $$ if (count % 2 == 0) -->Line_67 $$ previous = blocks[idx][ CD ]
Line_2 $$ private void thistest(Configuration conf, DFSTestUtil util) throws Exception -->Line_3 $$ MiniDFSCluster cluster = null[ CD ]
Line_11 $$ FileSystem fs = cluster.getFileSystem()-->Line_75 $$ util.cleanup(fs, "/srcdat")[ FD ]
Line_18 $$ File[] blocks = data_dir.listFiles()-->Line_53 $$ blocks = data_dir.listFiles()[ FD ]
Line_37 $$ long position = 0-->Line_39 $$ position = (long) random.nextInt((int) channel.size())[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_15 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ FD ]
