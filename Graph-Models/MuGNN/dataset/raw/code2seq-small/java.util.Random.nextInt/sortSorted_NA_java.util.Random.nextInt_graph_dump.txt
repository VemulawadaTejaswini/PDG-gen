Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_9 $$ for (int i = 0; i < SAMPLE; ++i) [ CD ]
Line_5 $$ Random r = new Random()-->Line_10 $$ values[i] = r.nextInt(100)[ FD ]
Line_3 $$ final int SAMPLE = 500-->Line_14 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_3 $$ final int SAMPLE = 500-->Line_9 $$ for (int i = 0; i < SAMPLE; ++i) [ FD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_16 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ CD ]
Line_5 $$ Random r = new Random()-->Line_6 $$ long seed = r.nextLong()[ FD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_12 $$ Arrays.sort(values)[ CD ]
Line_4 $$ int[] values = new int[SAMPLE]-->Line_12 $$ Arrays.sort(values)[ FD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_8 $$ System.out.println("testSorted seed: " + seed + "(" + sorter.getClass().getName() + ")")[ FD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_5 $$ Random r = new Random()[ CD ]
Line_9 $$ for (int i = 0; i < SAMPLE; ++i) -->Line_10 $$ values[i] = r.nextInt(100)[ CD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_14 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_4 $$ int[] values = new int[SAMPLE]-->Line_16 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ FD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_8 $$ System.out.println("testSorted seed: " + seed + "(" + sorter.getClass().getName() + ")")[ CD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_13 $$ SampleSortable s = new SampleSortable(values)[ CD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_14 $$ sorter.sort(s, 0, SAMPLE)[ CD ]
Line_5 $$ Random r = new Random()-->Line_7 $$ r.setSeed(seed)[ FD ]
Line_13 $$ SampleSortable s = new SampleSortable(values)-->Line_15 $$ int[] check = s.getSorted()[ FD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_4 $$ int[] values = new int[SAMPLE][ CD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_3 $$ final int SAMPLE = 500[ CD ]
Line_13 $$ SampleSortable s = new SampleSortable(values)-->Line_14 $$ sorter.sort(s, 0, SAMPLE)[ FD ]
Line_15 $$ int[] check = s.getSorted()-->Line_16 $$ assertTrue(Arrays.toString(values) + "\ndoesn't match\n" + Arrays.toString(check), Arrays.equals(values, check))[ FD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_6 $$ long seed = r.nextLong()[ CD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_7 $$ r.setSeed(seed)[ CD ]
Line_2 $$ public void sortSorted(IndexedSorter sorter) throws Exception -->Line_15 $$ int[] check = s.getSorted()[ CD ]
Line_6 $$ long seed = r.nextLong()-->Line_7 $$ r.setSeed(seed)[ FD ]
