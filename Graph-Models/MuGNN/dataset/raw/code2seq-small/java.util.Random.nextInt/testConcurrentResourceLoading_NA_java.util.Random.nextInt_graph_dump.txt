Line_2 $$ public void testConcurrentResourceLoading() throws Exception -->Line_21 $$ int threadCount = 3[ CD ]
Line_8 $$ ZipFile zipFile = new ZipFile(file)-->Line_15 $$ zipFile.close()[ FD ]
Line_43 $$ futures.add(executor.submit(new Runnable() -->Line_62 $$ Enumeration<URL> resources = loader.getResources(name)[ FD ]
Line_8 $$ ZipFile zipFile = new ZipFile(file)-->Line_10 $$ Enumeration<? extends ZipEntry> entries = zipFile.entries()[ FD ]
Line_23 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(threadCount, ConcurrencyUtil.newNamedThreadFactory("conc loading"))-->Line_79 $$ executor.awaitTermination(1000, TimeUnit.SECONDS)[ FD ]
Line_4 $$ List<URL> urls = ContainerUtil.newArrayList()-->Line_7 $$ urls.add(file.toURI().toURL())[ FD ]
Line_27 $$ for (int attempt = 0; attempt < attemptCount; attempt++) -->Line_38 $$ for (int j = 0; j < resourceCount; j++) [ CD ]
Line_11 $$ while (entries.hasMoreElements()) -->Line_12 $$ resourceNames.add(entries.nextElement().getName())[ CD ]
Line_2 $$ public void testConcurrentResourceLoading() throws Exception -->Line_3 $$ final List<String> resourceNames = ContainerUtil.newArrayList()[ CD ]
Line_5 $$ for (File file : new File(PathManager.getHomePathFor(UrlClassLoader.class) + "/lib").listFiles()) -->Line_6 $$ if (file.getName().endsWith(".jar")) [ FD ]
Line_38 $$ for (int j = 0; j < resourceCount; j++) -->Line_39 $$ namesToLoad.add(resourceNames.get(random.nextInt(resourceNames.size())))[ CD ]
Line_43 $$ futures.add(executor.submit(new Runnable() -->Line_60 $$ if (findResourceOrFindResourcesChooser.nextBoolean()) [ CD ]
Line_62 $$ Enumeration<URL> resources = loader.getResources(name)-->Line_64 $$ return resources.nextElement()[ FD ]
Line_27 $$ for (int attempt = 0; attempt < attemptCount; attempt++) -->Line_42 $$ for (int i = 0; i < threadCount; i++) [ CD ]
Line_3 $$ final List<String> resourceNames = ContainerUtil.newArrayList()-->Line_12 $$ resourceNames.add(entries.nextElement().getName())[ FD ]
Line_3 $$ final List<String> resourceNames = ContainerUtil.newArrayList()-->Line_39 $$ namesToLoad.add(resourceNames.get(random.nextInt(resourceNames.size())))[ FD ]
Line_43 $$ futures.add(executor.submit(new Runnable() -->Line_69 $$ return loader.findResource(name)[ FD ]
Line_26 $$ UrlClassLoader.CachePool pool = UrlClassLoader.createCachePool()-->Line_28 $$ final UrlClassLoader loader = UrlClassLoader.build().urls(urls).parent(null).useCache(pool, new UrlClassLoader.CachingCondition() [ FD ]
Line_27 $$ for (int attempt = 0; attempt < attemptCount; attempt++) -->Line_41 $$ List<Future> futures = ContainerUtil.newArrayList()[ CD ]
Line_10 $$ Enumeration<? extends ZipEntry> entries = zipFile.entries()-->Line_12 $$ resourceNames.add(entries.nextElement().getName())[ FD ]
Line_2 $$ public void testConcurrentResourceLoading() throws Exception -->Line_22 $$ final int resourceCount = 20[ CD ]
Line_22 $$ final int resourceCount = 20-->Line_38 $$ for (int j = 0; j < resourceCount; j++) [ FD ]
Line_62 $$ Enumeration<URL> resources = loader.getResources(name)-->Line_63 $$ assertTrue(resources.hasMoreElements())[ FD ]
Line_5 $$ for (File file : new File(PathManager.getHomePathFor(UrlClassLoader.class) + "/lib").listFiles()) -->Line_7 $$ urls.add(file.toURI().toURL())[ FD ]
Line_23 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(threadCount, ConcurrencyUtil.newNamedThreadFactory("conc loading"))-->Line_78 $$ executor.shutdownNow()[ FD ]
Line_28 $$ final UrlClassLoader loader = UrlClassLoader.build().urls(urls).parent(null).useCache(pool, new UrlClassLoader.CachingCondition() -->Line_62 $$ Enumeration<URL> resources = loader.getResources(name)[ FD ]
Line_28 $$ final UrlClassLoader loader = UrlClassLoader.build().urls(urls).parent(null).useCache(pool, new UrlClassLoader.CachingCondition() -->Line_69 $$ return loader.findResource(name)[ FD ]
Line_25 $$ final Random random = new Random()-->Line_39 $$ namesToLoad.add(resourceNames.get(random.nextInt(resourceNames.size())))[ FD ]
Line_2 $$ public void testConcurrentResourceLoading() throws Exception -->Line_23 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(threadCount, ConcurrencyUtil.newNamedThreadFactory("conc loading"))[ CD ]
Line_23 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(threadCount, ConcurrencyUtil.newNamedThreadFactory("conc loading"))-->Line_43 $$ futures.add(executor.submit(new Runnable() [ FD ]
Line_10 $$ Enumeration<? extends ZipEntry> entries = zipFile.entries()-->Line_11 $$ while (entries.hasMoreElements()) [ FD ]
Line_21 $$ int threadCount = 3-->Line_42 $$ for (int i = 0; i < threadCount; i++) [ FD ]
Line_2 $$ public void testConcurrentResourceLoading() throws Exception -->Line_4 $$ List<URL> urls = ContainerUtil.newArrayList()[ CD ]
Line_47 $$ for (String name : namesToLoad) -->Line_49 $$ assertNotNull(findResource(name))[ FD ]
Line_4 $$ List<URL> urls = ContainerUtil.newArrayList()-->Line_28 $$ final UrlClassLoader loader = UrlClassLoader.build().urls(urls).parent(null).useCache(pool, new UrlClassLoader.CachingCondition() [ FD ]
Line_47 $$ for (String name : namesToLoad) -->Line_62 $$ Enumeration<URL> resources = loader.getResources(name)[ FD ]
Line_43 $$ futures.add(executor.submit(new Runnable() -->Line_69 $$ return loader.findResource(name)[ CD ]
Line_27 $$ for (int attempt = 0; attempt < attemptCount; attempt++) -->Line_28 $$ final UrlClassLoader loader = UrlClassLoader.build().urls(urls).parent(null).useCache(pool, new UrlClassLoader.CachingCondition() [ CD ]
Line_47 $$ for (String name : namesToLoad) -->Line_69 $$ return loader.findResource(name)[ FD ]
Line_42 $$ for (int i = 0; i < threadCount; i++) -->Line_43 $$ futures.add(executor.submit(new Runnable() [ CD ]
Line_6 $$ if (file.getName().endsWith(".jar")) -->Line_7 $$ urls.add(file.toURI().toURL())[ CD ]
Line_6 $$ if (file.getName().endsWith(".jar")) -->Line_8 $$ ZipFile zipFile = new ZipFile(file)[ CD ]
