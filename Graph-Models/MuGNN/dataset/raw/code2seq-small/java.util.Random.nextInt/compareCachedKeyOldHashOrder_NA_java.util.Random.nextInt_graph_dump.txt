Line_9 $$ while (gen1.hasNext()) -->Line_14 $$ bf3.add(cached)[ CD ]
Line_9 $$ while (gen1.hasNext()) -->Line_10 $$ ByteBuffer key = gen1.next()[ CD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_17 $$ BitSetTest.compare(bf1.bitset, bf3.bitset)[ CD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_16 $$ BitSetTest.compare(bf1.bitset, bf2.bitset)[ CD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_5 $$ BloomFilter bf3 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false, true)[ CD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_7 $$ BitSetTest.compare(bf1.bitset, bf2.bitset)[ CD ]
Line_6 $$ RandomStringGenerator gen1 = new KeyGenerator.RandomStringGenerator(new Random().nextInt(), FilterTestHelper.ELEMENTS)-->Line_9 $$ while (gen1.hasNext()) [ FD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_6 $$ RandomStringGenerator gen1 = new KeyGenerator.RandomStringGenerator(new Random().nextInt(), FilterTestHelper.ELEMENTS)[ CD ]
Line_9 $$ while (gen1.hasNext()) -->Line_13 $$ bf2.add(cached)[ CD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_8 $$ BitSetTest.compare(bf1.bitset, bf3.bitset)[ CD ]
Line_10 $$ ByteBuffer key = gen1.next()-->Line_12 $$ bf1.add(FilterTestHelper.wrap(key))[ FD ]
Line_10 $$ ByteBuffer key = gen1.next()-->Line_11 $$ FilterKey cached = FilterTestHelper.wrapCached(key)[ FD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_9 $$ while (gen1.hasNext()) [ CD ]
Line_4 $$ BloomFilter bf2 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false, true)-->Line_13 $$ bf2.add(cached)[ FD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_3 $$ BloomFilter bf1 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false, true)[ CD ]
Line_6 $$ RandomStringGenerator gen1 = new KeyGenerator.RandomStringGenerator(new Random().nextInt(), FilterTestHelper.ELEMENTS)-->Line_10 $$ ByteBuffer key = gen1.next()[ FD ]
Line_11 $$ FilterKey cached = FilterTestHelper.wrapCached(key)-->Line_13 $$ bf2.add(cached)[ FD ]
Line_9 $$ while (gen1.hasNext()) -->Line_11 $$ FilterKey cached = FilterTestHelper.wrapCached(key)[ CD ]
Line_11 $$ FilterKey cached = FilterTestHelper.wrapCached(key)-->Line_14 $$ bf3.add(cached)[ FD ]
Line_2 $$ public void compareCachedKeyOldHashOrder() -->Line_4 $$ BloomFilter bf2 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false, true)[ CD ]
Line_9 $$ while (gen1.hasNext()) -->Line_12 $$ bf1.add(FilterTestHelper.wrap(key))[ CD ]
Line_3 $$ BloomFilter bf1 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false, true)-->Line_12 $$ bf1.add(FilterTestHelper.wrap(key))[ FD ]
Line_5 $$ BloomFilter bf3 = (BloomFilter) FilterFactory.getFilter(FilterTestHelper.ELEMENTS / 2, FilterTestHelper.MAX_FAILURE_RATE, false, true)-->Line_14 $$ bf3.add(cached)[ FD ]
