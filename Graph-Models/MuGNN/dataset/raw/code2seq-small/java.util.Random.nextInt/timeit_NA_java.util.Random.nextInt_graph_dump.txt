Line_2 $$ private static void timeit(boolean oldBfHashOrder) -->Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)[ FD ]
Line_2 $$ private static void timeit(boolean oldBfHashOrder) -->Line_3 $$ int size = 300 * FilterTestHelper.ELEMENTS[ CD ]
Line_2 $$ private static void timeit(boolean oldBfHashOrder) -->Line_6 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_2 $$ private static void timeit(boolean oldBfHashOrder) -->Line_10 $$ logger.info("Bloom filter mean false positive for oldBfHashOrder=[ CD ]
Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)-->Line_8 $$ bf.clear()[ FD ]
Line_2 $$ private static void timeit(boolean oldBfHashOrder) -->Line_10 $$ logger.info("Bloom filter mean false positive for oldBfHashOrder=[ FD ]
Line_6 $$ for (int i = 0; i < 10; i++) -->Line_7 $$ testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size), new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size))[ CD ]
Line_6 $$ for (int i = 0; i < 10; i++) -->Line_8 $$ bf.clear()[ CD ]
Line_2 $$ private static void timeit(boolean oldBfHashOrder) -->Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)[ CD ]
Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)-->Line_7 $$ testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size), new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size))[ FD ]
Line_3 $$ int size = 300 * FilterTestHelper.ELEMENTS-->Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)[ FD ]
Line_2 $$ private static void timeit(boolean oldBfHashOrder) -->Line_5 $$ double sumfp = 0[ CD ]
