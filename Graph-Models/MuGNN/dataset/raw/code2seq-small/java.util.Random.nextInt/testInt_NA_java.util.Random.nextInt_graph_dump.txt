Line_4 $$ int[] ints = new int[_COUNT]-->Line_21 $$ Assert.assertTrue(Arrays.equals(ints, newInts))[ FD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 4]-->Line_14 $$ BigEndianCodec.putInt(bytes, i * 4, ints[i])[ FD ]
Line_11 $$ IntBuffer intBuffer = byteBuffer.asIntBuffer()-->Line_13 $$ intBuffer.put(ints[i])[ FD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_16 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_11 $$ IntBuffer intBuffer = byteBuffer.asIntBuffer()[ FD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 4]-->Line_19 $$ newInts[i] = BigEndianCodec.getInt(bytes, i * 4)[ FD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_6 $$ ints[i] = _random.nextInt()[ CD ]
Line_18 $$ for (int i = 0; i < _COUNT; i++) -->Line_19 $$ newInts[i] = BigEndianCodec.getInt(bytes, i * 4)[ CD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ intBuffer.put(ints[i])[ CD ]
Line_17 $$ int[] newInts = new int[_COUNT]-->Line_21 $$ Assert.assertTrue(Arrays.equals(ints, newInts))[ FD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_10 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_14 $$ BigEndianCodec.putInt(bytes, i * 4, ints[i])[ CD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 4]-->Line_16 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
