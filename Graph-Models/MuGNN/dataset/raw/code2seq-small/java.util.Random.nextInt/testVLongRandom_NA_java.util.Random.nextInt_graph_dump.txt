Line_13 $$ FSDataOutputStream out = fs.create(path)-->Line_15 $$ Utils.writeVLong(out, data[i])[ FD ]
Line_6 $$ for (int i = 0; i < data.length; ++i) -->Line_10 $$ long b = ((long) rng.nextInt()) & 0xffffffffL[ CD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_19 $$ for (int i = 0; i < data.length; ++i) [ CD ]
Line_14 $$ for (int i = 0; i < data.length; ++i) -->Line_15 $$ Utils.writeVLong(out, data[i])[ CD ]
Line_18 $$ FSDataInputStream in = fs.open(path)-->Line_20 $$ Assert.assertEquals(Utils.readVLong(in), data[i])[ FD ]
Line_5 $$ Random rng = new Random()-->Line_9 $$ long a = ((long) rng.nextInt()) << 32[ FD ]
Line_5 $$ Random rng = new Random()-->Line_10 $$ long b = ((long) rng.nextInt()) & 0xffffffffL[ FD ]
Line_5 $$ Random rng = new Random()-->Line_7 $$ int shift = rng.nextInt(Long.SIZE) + 1[ FD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_4 $$ long[] data = new long[count][ CD ]
Line_13 $$ FSDataOutputStream out = fs.create(path)-->Line_17 $$ out.close()[ FD ]
Line_6 $$ for (int i = 0; i < data.length; ++i) -->Line_11 $$ data[i] = (a + b) & mask[ CD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_18 $$ FSDataInputStream in = fs.open(path)[ CD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_6 $$ for (int i = 0; i < data.length; ++i) [ CD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_17 $$ out.close()[ CD ]
Line_8 $$ long mask = (1L << shift) - 1-->Line_11 $$ data[i] = (a + b) & mask[ FD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_14 $$ for (int i = 0; i < data.length; ++i) [ CD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_5 $$ Random rng = new Random()[ CD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_22 $$ in.close()[ CD ]
Line_19 $$ for (int i = 0; i < data.length; ++i) -->Line_20 $$ Assert.assertEquals(Utils.readVLong(in), data[i])[ CD ]
Line_6 $$ for (int i = 0; i < data.length; ++i) -->Line_19 $$ for (int i = 0; i < data.length; ++i) [ FD ]
Line_6 $$ for (int i = 0; i < data.length; ++i) -->Line_7 $$ int shift = rng.nextInt(Long.SIZE) + 1[ CD ]
Line_6 $$ for (int i = 0; i < data.length; ++i) -->Line_14 $$ for (int i = 0; i < data.length; ++i) [ FD ]
Line_18 $$ FSDataInputStream in = fs.open(path)-->Line_22 $$ in.close()[ FD ]
Line_6 $$ for (int i = 0; i < data.length; ++i) -->Line_9 $$ long a = ((long) rng.nextInt()) << 32[ CD ]
Line_6 $$ for (int i = 0; i < data.length; ++i) -->Line_8 $$ long mask = (1L << shift) - 1[ CD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_13 $$ FSDataOutputStream out = fs.create(path)[ CD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_23 $$ fs.delete(path, false)[ CD ]
Line_14 $$ for (int i = 0; i < data.length; ++i) -->Line_19 $$ for (int i = 0; i < data.length; ++i) [ FD ]
Line_2 $$ public void testVLongRandom() throws IOException -->Line_3 $$ int count = 1024 * 1024[ CD ]
