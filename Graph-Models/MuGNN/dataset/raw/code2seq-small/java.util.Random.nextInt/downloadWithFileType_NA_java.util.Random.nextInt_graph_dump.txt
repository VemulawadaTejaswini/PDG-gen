Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)-->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_43 $$ FileStatus[] filesstatus = files.getDefaultFileSystem().listStatus(basedir)[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)[ FD ]
Line_16 $$ int size = rand.nextInt(512) + 512-->Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_19 $$ LocalResource rsrc = null[ CD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_46 $$ FileStatus[] childFiles = files.getDefaultFileSystem().listStatus(filestatus.getPath())[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ FD ]
Line_19 $$ LocalResource rsrc = null-->Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)[ FD ]
Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_18 $$ Path p = new Path(basedir, "" + 1)-->Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)[ FD ]
Line_37 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)-->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)-->Line_41 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ FD ]
Line_9 $$ Random rand = new Random()-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)-->Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)[ FD ]
Line_13 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_41 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_10 $$ long sharedSeed = rand.nextLong()[ CD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_15 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())[ CD ]
Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)-->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ CD ]
Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)-->Line_26 $$ rsrc.setType(LocalResourceType.PATTERN)[ FD ]
Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)-->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_36 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ CD ]
Line_16 $$ int size = rand.nextInt(512) + 512-->Line_35 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ FD ]
Line_19 $$ LocalResource rsrc = null-->Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)[ FD ]
Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)-->Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)[ FD ]
Line_44 $$ for (FileStatus filestatus : filesstatus) -->Line_46 $$ FileStatus[] childFiles = files.getDefaultFileSystem().listStatus(filestatus.getPath())[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_16 $$ int size = rand.nextInt(512) + 512[ CD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_43 $$ FileStatus[] filesstatus = files.getDefaultFileSystem().listStatus(basedir)[ FD ]
Line_18 $$ Path p = new Path(basedir, "" + 1)-->Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)[ FD ]
Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)-->Line_41 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ FD ]
Line_45 $$ if (filestatus.isDirectory()) -->Line_46 $$ FileStatus[] childFiles = files.getDefaultFileSystem().listStatus(filestatus.getPath())[ CD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_7 $$ files.mkdir(basedir, null, true)[ FD ]
Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)-->Line_41 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ FD ]
Line_14 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE[ CD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_16 $$ int size = rand.nextInt(512) + 512-->Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_7 $$ files.mkdir(basedir, null, true)[ CD ]
Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)[ FD ]
Line_19 $$ LocalResource rsrc = null-->Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_13 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()[ CD ]
Line_19 $$ LocalResource rsrc = null-->Line_26 $$ rsrc.setType(LocalResourceType.PATTERN)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_35 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ CD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_12 $$ System.out.println("SEED: " + sharedSeed)[ CD ]
Line_9 $$ Random rand = new Random()-->Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)[ FD ]
Line_19 $$ LocalResource rsrc = null-->Line_41 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_39 $$ exec.shutdown()[ CD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_11 $$ rand.setSeed(sharedSeed)[ CD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)[ FD ]
Line_19 $$ LocalResource rsrc = null-->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_4 $$ conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, "077")[ CD ]
Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_35 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_37 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)[ CD ]
Line_16 $$ int size = rand.nextInt(512) + 512-->Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)[ FD ]
Line_9 $$ Random rand = new Random()-->Line_10 $$ long sharedSeed = rand.nextLong()[ FD ]
Line_14 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_39 $$ exec.shutdown()[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, "077")[ FD ]
Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)-->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_48 $$ if (childfile.getPath().getName().startsWith("tmp")) -->Line_49 $$ Assert.fail("Tmp File should not have been there " + childfile.getPath())[ CD ]
Line_9 $$ Random rand = new Random()-->Line_16 $$ int size = rand.nextInt(512) + 512[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)[ FD ]
Line_47 $$ for (FileStatus childfile : childFiles) -->Line_49 $$ Assert.fail("Tmp File should not have been there " + childfile.getPath())[ FD ]
Line_35 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)-->Line_36 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_7 $$ files.mkdir(basedir, null, true)[ FD ]
Line_10 $$ long sharedSeed = rand.nextLong()-->Line_11 $$ rand.setSeed(sharedSeed)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ CD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_9 $$ Random rand = new Random()[ CD ]
Line_18 $$ Path p = new Path(basedir, "" + 1)-->Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_5 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ CD ]
Line_18 $$ Path p = new Path(basedir, "" + 1)-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_16 $$ int size = rand.nextInt(512) + 512-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_9 $$ Random rand = new Random()-->Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)[ FD ]
Line_15 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())-->Line_35 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_41 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ CD ]
Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)[ FD ]
Line_44 $$ for (FileStatus filestatus : filesstatus) -->Line_45 $$ if (filestatus.isDirectory()) [ FD ]
Line_47 $$ for (FileStatus childfile : childFiles) -->Line_48 $$ if (childfile.getPath().getName().startsWith("tmp")) [ FD ]
Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_18 $$ Path p = new Path(basedir, "" + 1)[ CD ]
Line_14 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_40 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ FD ]
Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)-->Line_26 $$ rsrc.setType(LocalResourceType.PATTERN)[ FD ]
Line_19 $$ LocalResource rsrc = null-->Line_32 $$ rsrc = createTgzFile(files, p, size, rand, vis)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_40 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ CD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_14 $$ ExecutorService exec = Executors.newSingleThreadExecutor()[ CD ]
Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)-->Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_35 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), size, conf)[ FD ]
Line_13 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_38 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_9 $$ Random rand = new Random()-->Line_11 $$ rand.setSeed(sharedSeed)[ FD ]
Line_2 $$ private void downloadWithFileType(TEST_FILE_TYPE fileType) throws IOException, URISyntaxException, InterruptedException -->Line_6 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ CD ]
Line_17 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_25 $$ rsrc = createJarFile(files, p, size, rand, vis)[ FD ]
Line_9 $$ Random rand = new Random()-->Line_29 $$ rsrc = createZipFile(files, p, size, rand, vis)[ FD ]
Line_22 $$ rsrc = createTarFile(files, p, size, rand, vis)-->Line_41 $$ Assert.assertTrue(pending.get(rsrc).isDone())[ FD ]
