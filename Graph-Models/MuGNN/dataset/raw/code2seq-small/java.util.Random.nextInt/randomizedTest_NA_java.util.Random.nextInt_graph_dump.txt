Line_4 $$ Random rand = new Random(2)-->Line_11 $$ int idx = rand.nextInt(BTree.size(btree))[ FD ]
Line_5 $$ SortedSet<Integer> data = new TreeSet()-->Line_7 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())[ FD ]
Line_4 $$ Random rand = new Random(2)-->Line_6 $$ data.add(rand.nextInt())[ FD ]
Line_7 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_12 $$ Integer val = BTree.findByIndex(btree, idx)[ FD ]
Line_10 $$ while (btree != BTree.empty()) -->Line_12 $$ Integer val = BTree.findByIndex(btree, idx)[ CD ]
Line_12 $$ Integer val = BTree.findByIndex(btree, idx)-->Line_13 $$ assertTrue(data.remove(val))[ FD ]
Line_14 $$ btree = assertRemove(btree, val)-->Line_10 $$ while (btree != BTree.empty()) [ FD ]
Line_7 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_8 $$ assertTrue(BTree.isWellFormed(btree, CMP))[ FD ]
Line_5 $$ SortedSet<Integer> data = new TreeSet()-->Line_6 $$ data.add(rand.nextInt())[ FD ]
Line_14 $$ btree = assertRemove(btree, val)-->Line_12 $$ Integer val = BTree.findByIndex(btree, idx)[ FD ]
Line_10 $$ while (btree != BTree.empty()) -->Line_11 $$ int idx = rand.nextInt(BTree.size(btree))[ CD ]
Line_11 $$ int idx = rand.nextInt(BTree.size(btree))-->Line_12 $$ Integer val = BTree.findByIndex(btree, idx)[ FD ]
Line_10 $$ while (btree != BTree.empty()) -->Line_13 $$ assertTrue(data.remove(val))[ CD ]
Line_10 $$ while (btree != BTree.empty()) -->Line_14 $$ btree = assertRemove(btree, val)[ CD ]
Line_7 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_9 $$ assertTrue(Iterables.elementsEqual(data, BTree.iterable(btree)))[ FD ]
Line_5 $$ SortedSet<Integer> data = new TreeSet()-->Line_13 $$ assertTrue(data.remove(val))[ FD ]
Line_7 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_14 $$ btree = assertRemove(btree, val)[ FD ]
Line_7 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_11 $$ int idx = rand.nextInt(BTree.size(btree))[ FD ]
Line_12 $$ Integer val = BTree.findByIndex(btree, idx)-->Line_14 $$ btree = assertRemove(btree, val)[ FD ]
Line_7 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_10 $$ while (btree != BTree.empty()) [ FD ]
Line_14 $$ btree = assertRemove(btree, val)-->Line_11 $$ int idx = rand.nextInt(BTree.size(btree))[ FD ]
Line_5 $$ SortedSet<Integer> data = new TreeSet()-->Line_9 $$ assertTrue(Iterables.elementsEqual(data, BTree.iterable(btree)))[ FD ]
