Line_4 $$ SortedSet<Integer> data = new TreeSet()-->Line_8 $$ assertTrue(Iterables.elementsEqual(data, BTree.iterable(btree)))[ FD ]
Line_2 $$ public void randomizedTest() -->Line_8 $$ assertTrue(Iterables.elementsEqual(data, BTree.iterable(btree)))[ CD ]
Line_4 $$ SortedSet<Integer> data = new TreeSet()-->Line_12 $$ assertTrue(data.remove(val))[ FD ]
Line_4 $$ SortedSet<Integer> data = new TreeSet()-->Line_5 $$ data.add(rand.nextInt())[ FD ]
Line_4 $$ SortedSet<Integer> data = new TreeSet()-->Line_6 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())[ FD ]
Line_2 $$ public void randomizedTest() -->Line_5 $$ for (int i = 0; i < 1000; ++i) data.add(rand.nextInt())[ CD ]
Line_6 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_8 $$ assertTrue(Iterables.elementsEqual(data, BTree.iterable(btree)))[ FD ]
Line_9 $$ while (btree != BTree.empty()) -->Line_11 $$ Integer val = BTree.findByIndex(btree, idx)[ CD ]
Line_11 $$ Integer val = BTree.findByIndex(btree, idx)-->Line_13 $$ btree = assertRemove(btree, val)[ FD ]
Line_9 $$ while (btree != BTree.empty()) -->Line_10 $$ int idx = rand.nextInt(BTree.size(btree))[ CD ]
Line_13 $$ btree = assertRemove(btree, val)-->Line_9 $$ while (btree != BTree.empty()) [ FD ]
Line_6 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_13 $$ btree = assertRemove(btree, val)[ FD ]
Line_6 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_11 $$ Integer val = BTree.findByIndex(btree, idx)[ FD ]
Line_3 $$ Random rand = new Random(2)-->Line_10 $$ int idx = rand.nextInt(BTree.size(btree))[ FD ]
Line_2 $$ public void randomizedTest() -->Line_9 $$ while (btree != BTree.empty()) [ CD ]
Line_6 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_10 $$ int idx = rand.nextInt(BTree.size(btree))[ FD ]
Line_2 $$ public void randomizedTest() -->Line_3 $$ Random rand = new Random(2)[ CD ]
Line_3 $$ Random rand = new Random(2)-->Line_5 $$ data.add(rand.nextInt())[ FD ]
Line_9 $$ while (btree != BTree.empty()) -->Line_13 $$ btree = assertRemove(btree, val)[ CD ]
Line_6 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_9 $$ while (btree != BTree.empty()) [ FD ]
Line_2 $$ public void randomizedTest() -->Line_7 $$ assertTrue(BTree.isWellFormed(btree, CMP))[ CD ]
Line_13 $$ btree = assertRemove(btree, val)-->Line_11 $$ Integer val = BTree.findByIndex(btree, idx)[ FD ]
Line_13 $$ btree = assertRemove(btree, val)-->Line_10 $$ int idx = rand.nextInt(BTree.size(btree))[ FD ]
Line_6 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())-->Line_7 $$ assertTrue(BTree.isWellFormed(btree, CMP))[ FD ]
Line_9 $$ while (btree != BTree.empty()) -->Line_12 $$ assertTrue(data.remove(val))[ CD ]
Line_10 $$ int idx = rand.nextInt(BTree.size(btree))-->Line_11 $$ Integer val = BTree.findByIndex(btree, idx)[ FD ]
Line_2 $$ public void randomizedTest() -->Line_6 $$ Object[] btree = BTree.build(data, UpdateFunction.<Integer>noOp())[ CD ]
Line_2 $$ public void randomizedTest() -->Line_4 $$ SortedSet<Integer> data = new TreeSet()[ CD ]
Line_11 $$ Integer val = BTree.findByIndex(btree, idx)-->Line_12 $$ assertTrue(data.remove(val))[ FD ]
