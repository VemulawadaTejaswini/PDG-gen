Line_7 $$ final int len = 1 << 16-->Line_8 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_13 $$ checkSyncMetric(cluster, 1)[ FD ]
Line_15 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)-->Line_17 $$ w.append(generator.getKey(), generator.getValue())[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_17 $$ w.append(generator.getKey(), generator.getValue())[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_21 $$ checkSyncMetric(cluster, 2)[ CD ]
Line_6 $$ final Path p = new Path("/testSequenceFileSync/foo")-->Line_8 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_5 $$ final FileSystem fs = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_9 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_13 $$ checkSyncMetric(cluster, 1)[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_7 $$ final int len = 1 << 16[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_19 $$ checkSyncMetric(cluster, 2)[ CD ]
Line_9 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_18 $$ w.hsync()[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()[ CD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_23 $$ checkSyncMetric(cluster, 3)[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_5 $$ final FileSystem fs = cluster.getFileSystem()[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_8 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_14 $$ int seed = new Random().nextInt()[ CD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_24 $$ cluster.shutdown()[ FD ]
Line_9 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_17 $$ w.append(generator.getKey(), generator.getValue())[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_24 $$ cluster.shutdown()[ CD ]
Line_8 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)-->Line_22 $$ out.close()[ FD ]
Line_8 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)-->Line_9 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))[ FD ]
Line_9 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_12 $$ w.hsync()[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_12 $$ w.hsync()[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_6 $$ final Path p = new Path("/testSequenceFileSync/foo")[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_10 $$ w.hflush()[ CD ]
Line_9 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_20 $$ w.close()[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_21 $$ checkSyncMetric(cluster, 2)[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_11 $$ checkSyncMetric(cluster, 0)[ CD ]
Line_9 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_10 $$ w.hflush()[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_22 $$ out.close()[ CD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_11 $$ checkSyncMetric(cluster, 0)[ FD ]
Line_5 $$ final FileSystem fs = cluster.getFileSystem()-->Line_8 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_20 $$ w.close()[ CD ]
Line_15 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)-->Line_16 $$ generator.next()[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_19 $$ checkSyncMetric(cluster, 2)[ FD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_16 $$ generator.next()[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_15 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_18 $$ w.hsync()[ CD ]
Line_2 $$ public void testSequenceFileSync() throws Exception -->Line_23 $$ checkSyncMetric(cluster, 3)[ CD ]
