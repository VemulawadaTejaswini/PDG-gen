Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_23 $$ checkSyncMetric(cluster, 2)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_28 $$ cluster.shutdown()[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_9 $$ final FileSystem fs = cluster.getFileSystem()[ FD ]
Line_13 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_14 $$ w.hflush()[ FD ]
Line_19 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)-->Line_20 $$ generator.next()[ FD ]
Line_9 $$ final FileSystem fs = cluster.getFileSystem()-->Line_12 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)[ FD ]
Line_12 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)-->Line_13 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_27 $$ checkSyncMetric(cluster, 3)[ FD ]
Line_13 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_22 $$ w.hsync()[ FD ]
Line_11 $$ final int len = 1 << 16-->Line_12 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)[ FD ]
Line_12 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)-->Line_26 $$ out.close()[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_25 $$ checkSyncMetric(cluster, 2)[ FD ]
Line_10 $$ final Path p = new Path("/testSequenceFileSync/foo")-->Line_12 $$ FSDataOutputStream out = fs.create(p, FsPermission.getDefault(), EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE, CreateFlag.SYNC_BLOCK), 4096, (short) 1, len, null)[ FD ]
Line_19 $$ RandomDatum.Generator generator = new RandomDatum.Generator(seed)-->Line_21 $$ w.append(generator.getKey(), generator.getValue())[ FD ]
Line_13 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_21 $$ w.append(generator.getKey(), generator.getValue())[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_15 $$ checkSyncMetric(cluster, 0)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_17 $$ checkSyncMetric(cluster, 1)[ FD ]
Line_13 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_16 $$ w.hsync()[ FD ]
Line_13 $$ Writer w = SequenceFile.createWriter(new Configuration(), Writer.stream(out), Writer.keyClass(RandomDatum.class), Writer.valueClass(RandomDatum.class), Writer.compression(CompressionType.NONE, new DefaultCodec()))-->Line_24 $$ w.close()[ FD ]
