Line_23 $$ final HighlightInfoHolder infoHolder = new HighlightInfoHolder(myFile)-->Line_27 $$ v.analyze(myFile, true, infoHolder, () -> v.visit(element))[ FD ]
Line_18 $$ aClass.accept(new PsiRecursiveElementVisitor() -->Line_22 $$ super.visitElement(element)[ CD ]
Line_18 $$ aClass.accept(new PsiRecursiveElementVisitor() -->Line_27 $$ v.visit(element)[ FD ]
Line_2 $$ private void readStep(final Random random) -->Line_3 $$ PsiClass aClass = getPsiClass()[ CD ]
Line_12 $$ for (int offset = 0; offset < myFile.getTextLength(); offset++) -->Line_13 $$ myFile.findElementAt(offset)[ FD ]
Line_18 $$ aClass.accept(new PsiRecursiveElementVisitor() -->Line_23 $$ final HighlightInfoHolder infoHolder = new HighlightInfoHolder(myFile)[ CD ]
Line_2 $$ private void readStep(final Random random) -->Line_4 $$ switch(random.nextInt(4)) [ FD ]
Line_3 $$ PsiClass aClass = getPsiClass()-->Line_7 $$ aClass.getContainingFile().accept(new PsiRecursiveElementVisitor() [ FD ]
Line_3 $$ PsiClass aClass = getPsiClass()-->Line_34 $$ for (PsiMethod method : aClass.getMethods()) [ FD ]
Line_3 $$ PsiClass aClass = getPsiClass()-->Line_18 $$ aClass.accept(new PsiRecursiveElementVisitor() [ FD ]
Line_18 $$ aClass.accept(new PsiRecursiveElementVisitor() -->Line_22 $$ super.visitElement(element)[ FD ]
Line_12 $$ for (int offset = 0; offset < myFile.getTextLength(); offset++) -->Line_13 $$ myFile.findElementAt(offset)[ CD ]
