Line_9 $$ for (; s < SNAPSHOT_LIMIT; s++) -->Line_10 $$ final String snapshotName = "s" + s[ CD ]
Line_3 $$ final int step = 1000-->Line_26 $$ for (; s < SNAPSHOT_LIMIT; s += RANDOM.nextInt(step)) [ FD ]
Line_13 $$ final Path file = new Path(dirStr, "f" + s)-->Line_27 $$ final Path p = SnapshotTestHelper.getSnapshotPath(dir, "s" + s, file)[ FD ]
Line_23 $$ for (int f = 0; f < SNAPSHOT_LIMIT; f += step) -->Line_24 $$ final String file = "f" + f[ CD ]
Line_8 $$ int s = 0-->Line_25 $$ s = RANDOM.nextInt(step)[ FD ]
Line_27 $$ final Path p = SnapshotTestHelper.getSnapshotPath(dir, "s" + s, file)-->Line_28 $$ Assert.assertEquals(s > f, hdfs.exists(p))[ FD ]
Line_26 $$ for (; s < SNAPSHOT_LIMIT; s += RANDOM.nextInt(step)) -->Line_27 $$ final Path p = SnapshotTestHelper.getSnapshotPath(dir, "s" + s, file)[ CD ]
Line_3 $$ final int step = 1000-->Line_23 $$ for (int f = 0; f < SNAPSHOT_LIMIT; f += step) [ FD ]
Line_9 $$ for (; s < SNAPSHOT_LIMIT; s++) -->Line_11 $$ hdfs.createSnapshot(dir, snapshotName)[ CD ]
Line_2 $$ public void testSnapshotLimit() throws Exception -->Line_7 $$ hdfs.allowSnapshot(dir)[ CD ]
Line_8 $$ int s = 0-->Line_9 $$ for (; s < SNAPSHOT_LIMIT; s++) [ FD ]
Line_12 $$ if (s % step == 0) -->Line_14 $$ DFSTestUtil.createFile(hdfs, file, BLOCKSIZE, REPLICATION, SEED)[ CD ]
Line_26 $$ for (; s < SNAPSHOT_LIMIT; s += RANDOM.nextInt(step)) -->Line_28 $$ Assert.assertEquals(s > f, hdfs.exists(p))[ CD ]
Line_2 $$ public void testSnapshotLimit() throws Exception -->Line_23 $$ for (int f = 0; f < SNAPSHOT_LIMIT; f += step) [ CD ]
Line_13 $$ final Path file = new Path(dirStr, "f" + s)-->Line_14 $$ DFSTestUtil.createFile(hdfs, file, BLOCKSIZE, REPLICATION, SEED)[ FD ]
Line_2 $$ public void testSnapshotLimit() throws Exception -->Line_5 $$ final Path dir = new Path(dirStr)[ CD ]
Line_9 $$ for (; s < SNAPSHOT_LIMIT; s++) -->Line_12 $$ if (s % step == 0) [ CD ]
Line_5 $$ final Path dir = new Path(dirStr)-->Line_6 $$ hdfs.mkdirs(dir, new FsPermission((short) 0777))[ FD ]
Line_5 $$ final Path dir = new Path(dirStr)-->Line_18 $$ hdfs.createSnapshot(dir, "s" + s)[ FD ]
Line_23 $$ for (int f = 0; f < SNAPSHOT_LIMIT; f += step) -->Line_25 $$ s = RANDOM.nextInt(step)[ CD ]
Line_2 $$ public void testSnapshotLimit() throws Exception -->Line_8 $$ int s = 0[ CD ]
Line_3 $$ final int step = 1000-->Line_25 $$ s = RANDOM.nextInt(step)[ FD ]
Line_2 $$ public void testSnapshotLimit() throws Exception -->Line_9 $$ for (; s < SNAPSHOT_LIMIT; s++) [ CD ]
Line_5 $$ final Path dir = new Path(dirStr)-->Line_7 $$ hdfs.allowSnapshot(dir)[ FD ]
Line_25 $$ s = RANDOM.nextInt(step)-->Line_26 $$ for (; s < SNAPSHOT_LIMIT; s += RANDOM.nextInt(step)) [ FD ]
Line_2 $$ public void testSnapshotLimit() throws Exception -->Line_4 $$ final String dirStr = "/testSnapshotLimit/dir"[ CD ]
Line_2 $$ public void testSnapshotLimit() throws Exception -->Line_6 $$ hdfs.mkdirs(dir, new FsPermission((short) 0777))[ CD ]
Line_12 $$ if (s % step == 0) -->Line_13 $$ final Path file = new Path(dirStr, "f" + s)[ CD ]
Line_24 $$ final String file = "f" + f-->Line_27 $$ final Path p = SnapshotTestHelper.getSnapshotPath(dir, "s" + s, file)[ FD ]
Line_10 $$ final String snapshotName = "s" + s-->Line_11 $$ hdfs.createSnapshot(dir, snapshotName)[ FD ]
Line_2 $$ public void testSnapshotLimit() throws Exception -->Line_3 $$ final int step = 1000[ CD ]
Line_8 $$ int s = 0-->Line_26 $$ for (; s < SNAPSHOT_LIMIT; s += RANDOM.nextInt(step)) [ FD ]
Line_5 $$ final Path dir = new Path(dirStr)-->Line_27 $$ final Path p = SnapshotTestHelper.getSnapshotPath(dir, "s" + s, file)[ FD ]
Line_5 $$ final Path dir = new Path(dirStr)-->Line_11 $$ hdfs.createSnapshot(dir, snapshotName)[ FD ]
Line_23 $$ for (int f = 0; f < SNAPSHOT_LIMIT; f += step) -->Line_26 $$ for (; s < SNAPSHOT_LIMIT; s += RANDOM.nextInt(step)) [ CD ]
