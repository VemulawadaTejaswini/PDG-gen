Line_36 $$ final byte[] buf = new byte[data.length]-->Line_38 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_15 $$ final byte[] expected = new byte[2 * data.length]-->Line_38 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_35 $$ final long largeOffset = fileLength - smallOffset-->Line_39 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_22 $$ long remaining = fileLength-->Line_27 $$ remaining -= n[ FD ]
Line_19 $$ final Ticker t = new Ticker("WRITE", "fileLength=" + fileLength)-->Line_32 $$ t.end(fileLength)[ FD ]
Line_22 $$ long remaining = fileLength-->Line_23 $$ for (; remaining > 0; ) [ FD ]
Line_23 $$ for (; remaining > 0; ) -->Line_24 $$ t.tick(fileLength - remaining, "remaining=%d", remaining)[ CD ]
Line_18 $$ final Path p = new Path(dir, "file")-->Line_20 $$ final FSDataOutputStream out = fs.create(p)[ FD ]
Line_7 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_41 $$ cluster.shutdown()[ FD ]
Line_27 $$ remaining -= n-->Line_25 $$ final int n = (int) Math.min(remaining, data.length)[ FD ]
Line_10 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_33 $$ Assert.assertEquals(fileLength, fs.getFileStatus(p).getLen())[ FD ]
Line_13 $$ final byte[] data = new byte[1 << 20]-->Line_26 $$ out.write(data, 0, n)[ FD ]
Line_35 $$ final long largeOffset = fileLength - smallOffset-->Line_37 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_27 $$ remaining -= n-->Line_23 $$ for (; remaining > 0; ) [ FD ]
Line_19 $$ final Ticker t = new Ticker("WRITE", "fileLength=" + fileLength)-->Line_24 $$ t.tick(fileLength - remaining, "remaining=%d", remaining)[ FD ]
Line_15 $$ final byte[] expected = new byte[2 * data.length]-->Line_17 $$ System.arraycopy(data, 0, expected, data.length, data.length)[ FD ]
Line_23 $$ for (; remaining > 0; ) -->Line_26 $$ out.write(data, 0, n)[ CD ]
Line_25 $$ final int n = (int) Math.min(remaining, data.length)-->Line_27 $$ remaining -= n[ FD ]
Line_10 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_20 $$ final FSDataOutputStream out = fs.create(p)[ FD ]
Line_22 $$ long remaining = fileLength-->Line_24 $$ t.tick(fileLength - remaining, "remaining=%d", remaining)[ FD ]
Line_15 $$ final byte[] expected = new byte[2 * data.length]-->Line_37 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_10 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_37 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_15 $$ final byte[] expected = new byte[2 * data.length]-->Line_39 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_27 $$ remaining -= n-->Line_24 $$ t.tick(fileLength - remaining, "remaining=%d", remaining)[ FD ]
Line_18 $$ final Path p = new Path(dir, "file")-->Line_38 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_7 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_9 $$ cluster.waitActive()[ FD ]
Line_10 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_12 $$ Assert.assertTrue(fs.mkdirs(dir))[ FD ]
Line_10 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_38 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_20 $$ final FSDataOutputStream out = fs.create(p)-->Line_26 $$ out.write(data, 0, n)[ FD ]
Line_15 $$ final byte[] expected = new byte[2 * data.length]-->Line_16 $$ System.arraycopy(data, 0, expected, 0, data.length)[ FD ]
Line_23 $$ for (; remaining > 0; ) -->Line_27 $$ remaining -= n[ CD ]
Line_25 $$ final int n = (int) Math.min(remaining, data.length)-->Line_26 $$ out.write(data, 0, n)[ FD ]
Line_18 $$ final Path p = new Path(dir, "file")-->Line_33 $$ Assert.assertEquals(fileLength, fs.getFileStatus(p).getLen())[ FD ]
Line_18 $$ final Path p = new Path(dir, "file")-->Line_37 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_36 $$ final byte[] buf = new byte[data.length]-->Line_37 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_20 $$ final FSDataOutputStream out = fs.create(p)-->Line_30 $$ out.close()[ FD ]
Line_18 $$ final Path p = new Path(dir, "file")-->Line_39 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_11 $$ final Path dir = new Path("/test/largeFile")-->Line_12 $$ Assert.assertTrue(fs.mkdirs(dir))[ FD ]
Line_13 $$ final byte[] data = new byte[1 << 20]-->Line_16 $$ System.arraycopy(data, 0, expected, 0, data.length)[ FD ]
Line_23 $$ for (; remaining > 0; ) -->Line_25 $$ final int n = (int) Math.min(remaining, data.length)[ CD ]
Line_36 $$ final byte[] buf = new byte[data.length]-->Line_39 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_13 $$ final byte[] data = new byte[1 << 20]-->Line_14 $$ RANDOM.nextBytes(data)[ FD ]
Line_22 $$ long remaining = fileLength-->Line_25 $$ final int n = (int) Math.min(remaining, data.length)[ FD ]
Line_10 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_39 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_34 $$ final long smallOffset = RANDOM.nextInt(1 << 20) + (1 << 20)-->Line_38 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_13 $$ final byte[] data = new byte[1 << 20]-->Line_17 $$ System.arraycopy(data, 0, expected, data.length, data.length)[ FD ]
Line_6 $$ final Configuration conf = WebHdfsTestUtil.createConf()-->Line_10 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)[ FD ]
