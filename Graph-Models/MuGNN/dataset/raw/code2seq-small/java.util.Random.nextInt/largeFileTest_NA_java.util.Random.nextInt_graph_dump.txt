Line_17 $$ final FSDataOutputStream out = fs.create(p)-->Line_23 $$ out.write(data, 0, n)[ FD ]
Line_10 $$ final byte[] data = new byte[1 << 20]-->Line_14 $$ System.arraycopy(data, 0, expected, data.length, data.length)[ FD ]
Line_10 $$ final byte[] data = new byte[1 << 20]-->Line_23 $$ out.write(data, 0, n)[ FD ]
Line_16 $$ final Ticker t = new Ticker("WRITE", "fileLength=" + fileLength)-->Line_21 $$ t.tick(fileLength - remaining, "remaining=%d", remaining)[ FD ]
Line_7 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_36 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_38 $$ cluster.shutdown()[ FD ]
Line_12 $$ final byte[] expected = new byte[2 * data.length]-->Line_14 $$ System.arraycopy(data, 0, expected, data.length, data.length)[ FD ]
Line_32 $$ final long largeOffset = fileLength - smallOffset-->Line_34 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_2 $$ static void largeFileTest(final long fileLength) throws Exception -->Line_36 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_20 $$ for (; remaining > 0; ) -->Line_23 $$ out.write(data, 0, n)[ CD ]
Line_2 $$ static void largeFileTest(final long fileLength) throws Exception -->Line_3 $$ final Configuration conf = WebHdfsTestUtil.createConf()[ CD ]
Line_12 $$ final byte[] expected = new byte[2 * data.length]-->Line_34 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_20 $$ for (; remaining > 0; ) -->Line_21 $$ t.tick(fileLength - remaining, "remaining=%d", remaining)[ CD ]
Line_15 $$ final Path p = new Path(dir, "file")-->Line_34 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_12 $$ final byte[] expected = new byte[2 * data.length]-->Line_36 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_19 $$ long remaining = fileLength-->Line_24 $$ remaining -= n[ FD ]
Line_17 $$ final FSDataOutputStream out = fs.create(p)-->Line_27 $$ out.close()[ FD ]
Line_7 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_17 $$ final FSDataOutputStream out = fs.create(p)[ FD ]
Line_19 $$ long remaining = fileLength-->Line_22 $$ final int n = (int) Math.min(remaining, data.length)[ FD ]
Line_10 $$ final byte[] data = new byte[1 << 20]-->Line_11 $$ RANDOM.nextBytes(data)[ FD ]
Line_2 $$ static void largeFileTest(final long fileLength) throws Exception -->Line_34 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_7 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_34 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_33 $$ final byte[] buf = new byte[data.length]-->Line_36 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_7 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_9 $$ Assert.assertTrue(fs.mkdirs(dir))[ FD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_6 $$ cluster.waitActive()[ FD ]
Line_2 $$ static void largeFileTest(final long fileLength) throws Exception -->Line_29 $$ t.end(fileLength)[ FD ]
Line_7 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_30 $$ Assert.assertEquals(fileLength, fs.getFileStatus(p).getLen())[ FD ]
Line_20 $$ for (; remaining > 0; ) -->Line_22 $$ final int n = (int) Math.min(remaining, data.length)[ CD ]
Line_7 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)-->Line_35 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_2 $$ static void largeFileTest(final long fileLength) throws Exception -->Line_35 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_3 $$ final Configuration conf = WebHdfsTestUtil.createConf()-->Line_7 $$ final FileSystem fs = WebHdfsTestUtil.getWebHdfsFileSystem(conf, WebHdfsFileSystem.SCHEME)[ FD ]
Line_33 $$ final byte[] buf = new byte[data.length]-->Line_35 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_31 $$ final long smallOffset = RANDOM.nextInt(1 << 20) + (1 << 20)-->Line_35 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_15 $$ final Path p = new Path(dir, "file")-->Line_36 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_20 $$ for (; remaining > 0; ) -->Line_24 $$ remaining -= n[ CD ]
Line_24 $$ remaining -= n-->Line_21 $$ t.tick(fileLength - remaining, "remaining=%d", remaining)[ FD ]
Line_10 $$ final byte[] data = new byte[1 << 20]-->Line_13 $$ System.arraycopy(data, 0, expected, 0, data.length)[ FD ]
Line_15 $$ final Path p = new Path(dir, "file")-->Line_35 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_19 $$ long remaining = fileLength-->Line_21 $$ t.tick(fileLength - remaining, "remaining=%d", remaining)[ FD ]
Line_22 $$ final int n = (int) Math.min(remaining, data.length)-->Line_24 $$ remaining -= n[ FD ]
Line_2 $$ static void largeFileTest(final long fileLength) throws Exception -->Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()[ CD ]
Line_2 $$ static void largeFileTest(final long fileLength) throws Exception -->Line_30 $$ Assert.assertEquals(fileLength, fs.getFileStatus(p).getLen())[ FD ]
Line_15 $$ final Path p = new Path(dir, "file")-->Line_17 $$ final FSDataOutputStream out = fs.create(p)[ FD ]
Line_8 $$ final Path dir = new Path("/test/largeFile")-->Line_9 $$ Assert.assertTrue(fs.mkdirs(dir))[ FD ]
Line_15 $$ final Path p = new Path(dir, "file")-->Line_30 $$ Assert.assertEquals(fileLength, fs.getFileStatus(p).getLen())[ FD ]
Line_19 $$ long remaining = fileLength-->Line_20 $$ for (; remaining > 0; ) [ FD ]
Line_24 $$ remaining -= n-->Line_20 $$ for (; remaining > 0; ) [ FD ]
Line_24 $$ remaining -= n-->Line_22 $$ final int n = (int) Math.min(remaining, data.length)[ FD ]
Line_12 $$ final byte[] expected = new byte[2 * data.length]-->Line_35 $$ verifySeek(fs, p, smallOffset, fileLength, buf, expected)[ FD ]
Line_32 $$ final long largeOffset = fileLength - smallOffset-->Line_36 $$ verifyPread(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_33 $$ final byte[] buf = new byte[data.length]-->Line_34 $$ verifySeek(fs, p, largeOffset, fileLength, buf, expected)[ FD ]
Line_12 $$ final byte[] expected = new byte[2 * data.length]-->Line_13 $$ System.arraycopy(data, 0, expected, 0, data.length)[ FD ]
Line_22 $$ final int n = (int) Math.min(remaining, data.length)-->Line_23 $$ out.write(data, 0, n)[ FD ]
Line_16 $$ final Ticker t = new Ticker("WRITE", "fileLength=" + fileLength)-->Line_29 $$ t.end(fileLength)[ FD ]
