Line_2 $$ public void testReadShort() -->Line_7 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_5 $$ ShortBuffer shortBuffer = byteBuffer.asShortBuffer()-->Line_9 $$ shortBuffer.put(shorts[i])[ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ Assert.assertEquals(shorts[i], deserializer.readShort())[ CD ]
Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)-->Line_13 $$ Assert.assertEquals(shorts[i], deserializer.readShort())[ FD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 2)-->Line_5 $$ ShortBuffer shortBuffer = byteBuffer.asShortBuffer()[ FD ]
Line_2 $$ public void testReadShort() -->Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 2)[ CD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_8 $$ shorts[i] = (short) _random.nextInt()[ CD ]
Line_2 $$ public void testReadShort() -->Line_6 $$ short[] shorts = new short[_COUNT][ CD ]
Line_2 $$ public void testReadShort() -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ CD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_9 $$ shortBuffer.put(shorts[i])[ CD ]
Line_2 $$ public void testReadShort() -->Line_11 $$ Deserializer deserializer = new Deserializer(byteBuffer)[ CD ]
Line_3 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 2)-->Line_4 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_7 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_2 $$ public void testReadShort() -->Line_5 $$ ShortBuffer shortBuffer = byteBuffer.asShortBuffer()[ CD ]
Line_2 $$ public void testReadShort() -->Line_4 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ CD ]
