Line_18 $$ for (int i = 0; i < _COUNT; i++) -->Line_19 $$ newChars[i] = BigEndianCodec.getChar(bytes, i * 2)[ CD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_16 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_14 $$ BigEndianCodec.putChar(bytes, i * 2, chars[i])[ CD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_14 $$ BigEndianCodec.putChar(bytes, i * 2, chars[i])[ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_17 $$ char[] newChars = new char[_COUNT]-->Line_21 $$ Assert.assertArrayEquals(chars, newChars)[ FD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_4 $$ char[] chars = new char[_COUNT]-->Line_21 $$ Assert.assertArrayEquals(chars, newChars)[ FD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_16 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_6 $$ chars[i] = (char) _random.nextInt()[ CD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_10 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_19 $$ newChars[i] = BigEndianCodec.getChar(bytes, i * 2)[ FD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_11 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()[ FD ]
Line_11 $$ CharBuffer charBuffer = byteBuffer.asCharBuffer()-->Line_13 $$ charBuffer.put(chars[i])[ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ charBuffer.put(chars[i])[ CD ]
