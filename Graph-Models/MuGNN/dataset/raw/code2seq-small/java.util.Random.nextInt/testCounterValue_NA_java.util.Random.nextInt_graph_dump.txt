Line_12 $$ for (int j = 0; j < NUMBER_INC; j++) -->Line_13 $$ int incValue = rand.nextInt()[ CD ]
Line_8 $$ long expectedValue = initValue-->Line_11 $$ assertEquals("Counter value is not initialized correctly", expectedValue, counter.getValue())[ FD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_20 $$ assertEquals("Counter value is not set correctly", expectedValue, counter.getValue())[ CD ]
Line_9 $$ Counter counter = new Counters().findCounter("test", "foo")-->Line_19 $$ counter.setValue(expectedValue)[ FD ]
Line_15 $$ expectedValue += incValue-->Line_18 $$ expectedValue = rand.nextInt()[ FD ]
Line_2 $$ public void testCounterValue() -->Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) [ CD ]
Line_9 $$ Counter counter = new Counters().findCounter("test", "foo")-->Line_14 $$ counter.increment(incValue)[ FD ]
Line_18 $$ expectedValue = rand.nextInt()-->Line_19 $$ counter.setValue(expectedValue)[ FD ]
Line_9 $$ Counter counter = new Counters().findCounter("test", "foo")-->Line_20 $$ assertEquals("Counter value is not set correctly", expectedValue, counter.getValue())[ FD ]
Line_5 $$ final Random rand = new Random()-->Line_7 $$ long initValue = rand.nextInt()[ FD ]
Line_12 $$ for (int j = 0; j < NUMBER_INC; j++) -->Line_14 $$ counter.increment(incValue)[ CD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_10 $$ counter.setValue(initValue)[ CD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_18 $$ expectedValue = rand.nextInt()[ CD ]
Line_18 $$ expectedValue = rand.nextInt()-->Line_11 $$ assertEquals("Counter value is not initialized correctly", expectedValue, counter.getValue())[ FD ]
Line_15 $$ expectedValue += incValue-->Line_20 $$ assertEquals("Counter value is not set correctly", expectedValue, counter.getValue())[ FD ]
Line_8 $$ long expectedValue = initValue-->Line_16 $$ assertEquals("Counter value is not incremented correctly", expectedValue, counter.getValue())[ FD ]
Line_5 $$ final Random rand = new Random()-->Line_13 $$ int incValue = rand.nextInt()[ FD ]
Line_2 $$ public void testCounterValue() -->Line_3 $$ final int NUMBER_TESTS = 100[ CD ]
Line_12 $$ for (int j = 0; j < NUMBER_INC; j++) -->Line_16 $$ assertEquals("Counter value is not incremented correctly", expectedValue, counter.getValue())[ CD ]
Line_12 $$ for (int j = 0; j < NUMBER_INC; j++) -->Line_15 $$ expectedValue += incValue[ CD ]
Line_7 $$ long initValue = rand.nextInt()-->Line_10 $$ counter.setValue(initValue)[ FD ]
Line_8 $$ long expectedValue = initValue-->Line_20 $$ assertEquals("Counter value is not set correctly", expectedValue, counter.getValue())[ FD ]
Line_9 $$ Counter counter = new Counters().findCounter("test", "foo")-->Line_10 $$ counter.setValue(initValue)[ FD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_12 $$ for (int j = 0; j < NUMBER_INC; j++) [ CD ]
Line_3 $$ final int NUMBER_TESTS = 100-->Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) [ FD ]
Line_8 $$ long expectedValue = initValue-->Line_15 $$ expectedValue += incValue[ FD ]
Line_15 $$ expectedValue += incValue-->Line_19 $$ counter.setValue(expectedValue)[ FD ]
Line_5 $$ final Random rand = new Random()-->Line_18 $$ expectedValue = rand.nextInt()[ FD ]
Line_2 $$ public void testCounterValue() -->Line_4 $$ final int NUMBER_INC = 10[ CD ]
Line_18 $$ expectedValue = rand.nextInt()-->Line_20 $$ assertEquals("Counter value is not set correctly", expectedValue, counter.getValue())[ FD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_9 $$ Counter counter = new Counters().findCounter("test", "foo")[ CD ]
Line_8 $$ long expectedValue = initValue-->Line_18 $$ expectedValue = rand.nextInt()[ FD ]
Line_9 $$ Counter counter = new Counters().findCounter("test", "foo")-->Line_16 $$ assertEquals("Counter value is not incremented correctly", expectedValue, counter.getValue())[ FD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_11 $$ assertEquals("Counter value is not initialized correctly", expectedValue, counter.getValue())[ CD ]
Line_8 $$ long expectedValue = initValue-->Line_19 $$ counter.setValue(expectedValue)[ FD ]
Line_9 $$ Counter counter = new Counters().findCounter("test", "foo")-->Line_11 $$ assertEquals("Counter value is not initialized correctly", expectedValue, counter.getValue())[ FD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_8 $$ long expectedValue = initValue[ CD ]
Line_15 $$ expectedValue += incValue-->Line_16 $$ assertEquals("Counter value is not incremented correctly", expectedValue, counter.getValue())[ FD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_7 $$ long initValue = rand.nextInt()[ CD ]
Line_13 $$ int incValue = rand.nextInt()-->Line_15 $$ expectedValue += incValue[ FD ]
Line_13 $$ int incValue = rand.nextInt()-->Line_14 $$ counter.increment(incValue)[ FD ]
Line_6 $$ for (int i = 0; i < NUMBER_TESTS; i++) -->Line_19 $$ counter.setValue(expectedValue)[ CD ]
Line_4 $$ final int NUMBER_INC = 10-->Line_12 $$ for (int j = 0; j < NUMBER_INC; j++) [ FD ]
Line_2 $$ public void testCounterValue() -->Line_5 $$ final Random rand = new Random()[ CD ]
