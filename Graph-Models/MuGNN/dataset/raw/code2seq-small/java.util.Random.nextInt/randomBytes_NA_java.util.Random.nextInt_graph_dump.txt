Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_4 $$ ByteBuffer source = dataSource.duplicate()[ CD ]
Line_4 $$ ByteBuffer source = dataSource.duplicate()-->Line_5 $$ source.position(tlr.nextInt(source.capacity() - quantity))[ FD ]
Line_4 $$ ByteBuffer source = dataSource.duplicate()-->Line_7 $$ slice.put(source)[ FD ]
Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_9 $$ return slice[ CD ]
Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_8 $$ slice.flip()[ CD ]
Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_6 $$ source.limit(source.position() + quantity)[ CD ]
Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_5 $$ source.position(tlr.nextInt(source.capacity() - quantity))[ FD ]
Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_7 $$ slice.put(source)[ CD ]
Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_5 $$ source.position(tlr.nextInt(source.capacity() - quantity))[ CD ]
Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_3 $$ ByteBuffer slice = ByteBuffer.allocate(quantity)[ CD ]
Line_3 $$ ByteBuffer slice = ByteBuffer.allocate(quantity)-->Line_7 $$ slice.put(source)[ FD ]
Line_2 $$ public static ByteBuffer randomBytes(int quantity, Random tlr) -->Line_3 $$ ByteBuffer slice = ByteBuffer.allocate(quantity)[ FD ]
Line_4 $$ ByteBuffer source = dataSource.duplicate()-->Line_6 $$ source.limit(source.position() + quantity)[ FD ]
Line_3 $$ ByteBuffer slice = ByteBuffer.allocate(quantity)-->Line_8 $$ slice.flip()[ FD ]
