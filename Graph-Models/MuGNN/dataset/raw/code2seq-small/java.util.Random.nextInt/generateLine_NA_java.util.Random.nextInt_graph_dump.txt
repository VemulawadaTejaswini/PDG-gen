Line_5 $$ final List<Couple<Integer>> result = new ArrayList<Couple<Integer>>()-->Line_18 $$ result.add(Couple.of(newX, newY))[ FD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_4 $$ int yCurrent = startY[ CD ]
Line_8 $$ int prevStep = wasPrevStep-->Line_14 $$ prevStep = yStep[ FD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_6 $$ final Random xRnd = new Random()[ CD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_9 $$ while (xCurrent < finalX) [ FD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_21 $$ return result[ CD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_12 $$ yStep = yRnd.nextInt(yDiff * 2) - yDiff[ FD ]
Line_9 $$ while (xCurrent < finalX) -->Line_19 $$ xCurrent = newX[ CD ]
Line_3 $$ int xCurrent = startX-->Line_19 $$ xCurrent = newX[ FD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_3 $$ int xCurrent = startX[ CD ]
Line_9 $$ while (xCurrent < finalX) -->Line_17 $$ newX = Math.min(newX, finalX)[ CD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_9 $$ while (xCurrent < finalX) [ CD ]
Line_12 $$ yStep = yRnd.nextInt(yDiff * 2) - yDiff-->Line_14 $$ prevStep = yStep[ FD ]
Line_3 $$ int xCurrent = startX-->Line_9 $$ while (xCurrent < finalX) [ FD ]
Line_7 $$ final Random yRnd = new Random()-->Line_12 $$ yStep = yRnd.nextInt(yDiff * 2) - yDiff[ FD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_5 $$ final List<Couple<Integer>> result = new ArrayList<Couple<Integer>>()[ CD ]
Line_10 $$ int yStep = prevStep-->Line_14 $$ prevStep = yStep[ FD ]
Line_6 $$ final Random xRnd = new Random()-->Line_16 $$ int newX = xCurrent + 4 + xRnd.nextInt(xVariation)[ FD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_17 $$ newX = Math.min(newX, finalX)[ FD ]
Line_10 $$ int yStep = prevStep-->Line_12 $$ yStep = yRnd.nextInt(yDiff * 2) - yDiff[ FD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_7 $$ final Random yRnd = new Random()[ CD ]
Line_9 $$ while (xCurrent < finalX) -->Line_11 $$ while (prevStep == yStep) [ CD ]
Line_12 $$ yStep = yRnd.nextInt(yDiff * 2) - yDiff-->Line_11 $$ while (prevStep == yStep) [ FD ]
Line_9 $$ while (xCurrent < finalX) -->Line_18 $$ result.add(Couple.of(newX, newY))[ CD ]
Line_11 $$ while (prevStep == yStep) -->Line_12 $$ yStep = yRnd.nextInt(yDiff * 2) - yDiff[ CD ]
Line_2 $$ private static List<Couple<Integer>> generateLine(final int startX, int startY, int finalX, final int yBase, final int yDiff, final int wasPrevStep) -->Line_8 $$ int prevStep = wasPrevStep[ CD ]
Line_8 $$ int prevStep = wasPrevStep-->Line_11 $$ while (prevStep == yStep) [ FD ]
Line_19 $$ xCurrent = newX-->Line_9 $$ while (xCurrent < finalX) [ FD ]
Line_9 $$ while (xCurrent < finalX) -->Line_10 $$ int yStep = prevStep[ CD ]
Line_10 $$ int yStep = prevStep-->Line_11 $$ while (prevStep == yStep) [ FD ]
Line_9 $$ while (xCurrent < finalX) -->Line_14 $$ prevStep = yStep[ CD ]
