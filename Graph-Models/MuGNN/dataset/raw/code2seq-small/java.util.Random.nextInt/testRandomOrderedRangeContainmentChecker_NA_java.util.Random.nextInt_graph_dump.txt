Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_8 $$ for (int i = 0; i < 2 * numTokens; i++) tokens.add(t(r.nextLong()))[ CD ]
Line_7 $$ List<Token> tokens = new ArrayList(2 * numTokens)-->Line_11 $$ ranges.add(new Range(tokens.get(i), tokens.get(i + 1)))[ FD ]
Line_10 $$ for (int i = 0; i < tokens.size(); i++) -->Line_11 $$ ranges.add(new Range(tokens.get(i), tokens.get(i + 1)))[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_20 $$ Collections.sort(tokensToTest)[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_5 $$ int numTokens = r.nextInt(300) + 1[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_17 $$ tokensToTest.add(t(Long.MIN_VALUE))[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_19 $$ tokensToTest.add(t(Long.MIN_VALUE + 1))[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_15 $$ for (int i = 0; i < 10000; i++) tokensToTest.add(t(r.nextLong()))[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_6 $$ List<Range<Token>> ranges = new ArrayList(numTokens)[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_9 $$ Collections.sort(tokens)[ CD ]
Line_7 $$ List<Token> tokens = new ArrayList(2 * numTokens)-->Line_9 $$ Collections.sort(tokens)[ FD ]
Line_7 $$ List<Token> tokens = new ArrayList(2 * numTokens)-->Line_8 $$ tokens.add(t(r.nextLong()))[ FD ]
Line_3 $$ Random r = new Random()-->Line_5 $$ int numTokens = r.nextInt(300) + 1[ FD ]
Line_23 $$ if (checker.contains(t) != Range.isInRanges(t, ranges))-->Line_25 $$ fail(String.format("This should never flap! If it does, it is a bug (ranges = %s, token = %s)", Joiner.on(",").join(ranges), t))[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_7 $$ List<Token> tokens = new ArrayList(2 * numTokens)[ CD ]
Line_6 $$ List<Range<Token>> ranges = new ArrayList(numTokens)-->Line_11 $$ ranges.add(new Range(tokens.get(i), tokens.get(i + 1)))[ FD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_10 $$ for (int i = 0; i < tokens.size(); i++) [ CD ]
Line_8 $$ for (int i = 0; i < 2 * numTokens; i++) tokens.add(t(r.nextLong()))-->Line_11 $$ ranges.add(new Range(tokens.get(i), tokens.get(i + 1)))[ FD ]
Line_8 $$ for (int i = 0; i < 2 * numTokens; i++) tokens.add(t(r.nextLong()))-->Line_10 $$ for (int i = 0; i < tokens.size(); i++) [ FD ]
Line_6 $$ List<Range<Token>> ranges = new ArrayList(numTokens)-->Line_23 $$ if (checker.contains(t) != Range.isInRanges(t, ranges))[ FD ]
Line_2 $$ public void testRandomOrderedRangeContainmentChecker() -->Line_4 $$ for (int j = 0; j < 1000; j++) [ CD ]
Line_3 $$ Random r = new Random()-->Line_15 $$ tokensToTest.add(t(r.nextLong()))[ FD ]
Line_7 $$ List<Token> tokens = new ArrayList(2 * numTokens)-->Line_10 $$ for (int i = 0; i < tokens.size(); i++) [ FD ]
Line_3 $$ Random r = new Random()-->Line_8 $$ tokens.add(t(r.nextLong()))[ FD ]
Line_8 $$ for (int i = 0; i < 2 * numTokens; i++) tokens.add(t(r.nextLong()))-->Line_12 $$ i++[ FD ]
Line_6 $$ List<Range<Token>> ranges = new ArrayList(numTokens)-->Line_25 $$ fail(String.format("This should never flap! If it does, it is a bug (ranges = %s, token = %s)", Joiner.on(",").join(ranges), t))[ FD ]
Line_10 $$ for (int i = 0; i < tokens.size(); i++) -->Line_12 $$ i++[ CD ]
Line_10 $$ for (int i = 0; i < tokens.size(); i++) -->Line_15 $$ for (int i = 0; i < 10000; i++) tokensToTest.add(t(r.nextLong()))[ FD ]
Line_2 $$ public void testRandomOrderedRangeContainmentChecker() -->Line_3 $$ Random r = new Random()[ CD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_16 $$ tokensToTest.add(t(Long.MAX_VALUE))[ CD ]
Line_10 $$ for (int i = 0; i < tokens.size(); i++) -->Line_11 $$ ranges.add(new Range(tokens.get(i), tokens.get(i + 1)))[ FD ]
Line_4 $$ for (int j = 0; j < 1000; j++) -->Line_18 $$ tokensToTest.add(t(Long.MAX_VALUE - 1))[ CD ]
Line_10 $$ for (int i = 0; i < tokens.size(); i++) -->Line_12 $$ i++[ FD ]
Line_8 $$ for (int i = 0; i < 2 * numTokens; i++) tokens.add(t(r.nextLong()))-->Line_15 $$ for (int i = 0; i < 10000; i++) tokensToTest.add(t(r.nextLong()))[ FD ]
