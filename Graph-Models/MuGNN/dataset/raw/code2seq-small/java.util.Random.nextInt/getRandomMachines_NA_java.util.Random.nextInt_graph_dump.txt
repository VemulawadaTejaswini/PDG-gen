Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_8 $$ int select = Math.min(expected, total)[ FD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_21 $$ if (i == select) [ CD ]
Line_9 $$ if (mNodesFlattened == null) -->Line_10 $$ mNodesFlattened = machineNodes.toArray(new MachineNode[total])[ CD ]
Line_12 $$ MachineNode[] retval = new MachineNode[select]-->Line_24 $$ System.arraycopy(mNodesFlattened, 0, retval, 0, select)[ FD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_3 $$ if (expected == 0) [ FD ]
Line_13 $$ int i = 0-->Line_21 $$ if (i == select) [ FD ]
Line_21 $$ if (i == select) -->Line_24 $$ System.arraycopy(mNodesFlattened, 0, retval, 0, select)[ CD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_12 $$ MachineNode[] retval = new MachineNode[select][ CD ]
Line_14 $$ while ((i != select) && (total != i + select)) -->Line_19 $$ ++i[ CD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_8 $$ int select = Math.min(expected, total)[ CD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_7 $$ int total = machineNodes.size()[ CD ]
Line_14 $$ while ((i != select) && (total != i + select)) -->Line_16 $$ MachineNode tmp = mNodesFlattened[index][ CD ]
Line_7 $$ int total = machineNodes.size()-->Line_8 $$ int select = Math.min(expected, total)[ FD ]
Line_16 $$ MachineNode tmp = mNodesFlattened[index]-->Line_18 $$ mNodesFlattened[total - i - 1] = tmp[ FD ]
Line_13 $$ int i = 0-->Line_19 $$ ++i[ FD ]
Line_14 $$ while ((i != select) && (total != i + select)) -->Line_15 $$ int index = random.nextInt(total - i)[ CD ]
Line_14 $$ while ((i != select) && (total != i + select)) -->Line_17 $$ mNodesFlattened[index] = mNodesFlattened[total - i - 1][ CD ]
Line_3 $$ if (expected == 0) -->Line_4 $$ return new MachineNode[0][ CD ]
Line_8 $$ int select = Math.min(expected, total)-->Line_22 $$ System.arraycopy(mNodesFlattened, total - i, retval, 0, select)[ FD ]
Line_8 $$ int select = Math.min(expected, total)-->Line_21 $$ if (i == select) [ FD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_6 $$ parseTopologyTree()[ CD ]
Line_12 $$ MachineNode[] retval = new MachineNode[select]-->Line_22 $$ System.arraycopy(mNodesFlattened, total - i, retval, 0, select)[ FD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_3 $$ if (expected == 0) [ CD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_13 $$ int i = 0[ CD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_9 $$ if (mNodesFlattened == null) [ CD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_14 $$ while ((i != select) && (total != i + select)) [ CD ]
Line_8 $$ int select = Math.min(expected, total)-->Line_24 $$ System.arraycopy(mNodesFlattened, 0, retval, 0, select)[ FD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_26 $$ return retval[ CD ]
Line_21 $$ if (i == select) -->Line_22 $$ System.arraycopy(mNodesFlattened, total - i, retval, 0, select)[ CD ]
Line_2 $$ public synchronized MachineNode[] getRandomMachines(int expected, Random random) -->Line_15 $$ int index = random.nextInt(total - i)[ FD ]
Line_14 $$ while ((i != select) && (total != i + select)) -->Line_18 $$ mNodesFlattened[total - i - 1] = tmp[ CD ]
