Line_6 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_7 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))[ FD ]
Line_25 $$ Path p = new Path(basedir, "" + i)-->Line_26 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_26 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)-->Line_27 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_25 $$ Path p = new Path(basedir, "" + i)-->Line_47 $$ System.out.println("File permission " + perm + " for rsrc vis " + p.getKey().getVisibility().name())[ FD ]
Line_39 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_47 $$ System.out.println("File permission " + perm + " for rsrc vis " + p.getKey().getVisibility().name())[ FD ]
Line_40 $$ Path localized = p.getValue().get()-->Line_42 $$ FileStatus status = files.getFileStatus(localized.getParent())[ FD ]
Line_23 $$ vis = LocalResourceVisibility.APPLICATION-->Line_26 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_30 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)[ CD ]
Line_17 $$ LocalDirAllocator dirs = new LocalDirAllocator(TestFSDownload.class.getName())-->Line_28 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)[ FD ]
Line_6 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_8 $$ files.mkdir(basedir, null, true)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_28 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)[ FD ]
Line_43 $$ FsPermission perm = status.getPermission()-->Line_46 $$ perm = status.getPermission()[ FD ]
Line_11 $$ Random rand = new Random()-->Line_13 $$ rand.setSeed(sharedSeed)[ FD ]
Line_25 $$ Path p = new Path(basedir, "" + i)-->Line_41 $$ assertEquals(sizes[Integer.valueOf(localized.getName())], p.getKey().getSize())[ FD ]
Line_22 $$ if (i % 2 == 1) -->Line_23 $$ vis = LocalResourceVisibility.APPLICATION[ CD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_20 $$ sizes[i] = rand.nextInt(512) + 512[ CD ]
Line_15 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_31 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_21 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE[ CD ]
Line_15 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_39 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) [ FD ]
Line_42 $$ FileStatus status = files.getFileStatus(localized.getParent())-->Line_43 $$ FsPermission perm = status.getPermission()[ FD ]
Line_16 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_33 $$ exec.shutdown()[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ FileContext files = FileContext.getLocalFSFileContext(conf)[ FD ]
Line_46 $$ perm = status.getPermission()-->Line_49 $$ Assert.assertTrue("Private file should be 500", perm.toShort() == FSDownload.PRIVATE_FILE_PERMS.toShort())[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_9 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_42 $$ FileStatus status = files.getFileStatus(localized.getParent())-->Line_46 $$ perm = status.getPermission()[ FD ]
Line_39 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_48 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_45 $$ status = files.getFileStatus(localized)-->Line_46 $$ perm = status.getPermission()[ FD ]
Line_7 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_8 $$ files.mkdir(basedir, null, true)[ FD ]
Line_12 $$ long sharedSeed = rand.nextLong()-->Line_13 $$ rand.setSeed(sharedSeed)[ FD ]
Line_6 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_26 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_21 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_27 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_23 $$ vis = LocalResourceVisibility.APPLICATION-->Line_27 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_26 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ CD ]
Line_10 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()-->Line_48 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_6 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_45 $$ status = files.getFileStatus(localized)[ FD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_27 $$ rsrcVis.put(rsrc, vis)[ CD ]
Line_16 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_31 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_35 $$ for (Future<Path> path : pending.values()) -->Line_36 $$ Assert.assertTrue(path.isDone())[ FD ]
Line_21 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_23 $$ vis = LocalResourceVisibility.APPLICATION[ FD ]
Line_15 $$ Map<LocalResource, Future<Path>> pending = new HashMap<LocalResource, Future<Path>>()-->Line_35 $$ for (Future<Path> path : pending.values()) [ FD ]
Line_6 $$ FileContext files = FileContext.getLocalFSFileContext(conf)-->Line_42 $$ FileStatus status = files.getFileStatus(localized.getParent())[ FD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_31 $$ pending.put(rsrc, exec.submit(fsd))[ CD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_25 $$ Path p = new Path(basedir, "" + i)[ CD ]
Line_30 $$ FSDownload fsd = new FSDownload(files, UserGroupInformation.getCurrentUser(), conf, destPath, rsrc)-->Line_31 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_11 $$ Random rand = new Random()-->Line_12 $$ long sharedSeed = rand.nextLong()[ FD ]
Line_39 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_41 $$ assertEquals(sizes[Integer.valueOf(localized.getName())], p.getKey().getSize())[ FD ]
Line_39 $$ for (Map.Entry<LocalResource, Future<Path>> p : pending.entrySet()) -->Line_40 $$ Path localized = p.getValue().get()[ FD ]
Line_21 $$ LocalResourceVisibility vis = LocalResourceVisibility.PRIVATE-->Line_26 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_16 $$ ExecutorService exec = Executors.newSingleThreadExecutor()-->Line_34 $$ while (!exec.awaitTermination(1000, TimeUnit.MILLISECONDS)) [ FD ]
Line_7 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_28 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)[ FD ]
Line_11 $$ Random rand = new Random()-->Line_26 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)[ FD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_29 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, "077")[ FD ]
Line_28 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)-->Line_29 $$ destPath = new Path(destPath, Long.toString(uniqueNumberGenerator.incrementAndGet()))[ FD ]
Line_40 $$ Path localized = p.getValue().get()-->Line_45 $$ status = files.getFileStatus(localized)[ FD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_22 $$ if (i % 2 == 1) [ CD ]
Line_19 $$ for (int i = 0; i < 10; ++i) -->Line_28 $$ Path destPath = dirs.getLocalPathForWrite(basedir.toString(), sizes[i], conf)[ CD ]
Line_25 $$ Path p = new Path(basedir, "" + i)-->Line_48 $$ assert (rsrcVis.containsKey(p.getKey()))[ FD ]
Line_43 $$ FsPermission perm = status.getPermission()-->Line_44 $$ assertEquals("Cache directory permissions are incorrect", new FsPermission((short) 0755), perm)[ FD ]
Line_40 $$ Path localized = p.getValue().get()-->Line_41 $$ assertEquals(sizes[Integer.valueOf(localized.getName())], p.getKey().getSize())[ FD ]
Line_11 $$ Random rand = new Random()-->Line_20 $$ sizes[i] = rand.nextInt(512) + 512[ FD ]
Line_7 $$ final Path basedir = files.makeQualified(new Path("target", TestFSDownload.class.getSimpleName()))-->Line_9 $$ conf.setStrings(TestFSDownload.class.getName(), basedir.toString())[ FD ]
Line_10 $$ Map<LocalResource, LocalResourceVisibility> rsrcVis = new HashMap<LocalResource, LocalResourceVisibility>()-->Line_27 $$ rsrcVis.put(rsrc, vis)[ FD ]
Line_26 $$ LocalResource rsrc = createFile(files, p, sizes[i], rand, vis)-->Line_31 $$ pending.put(rsrc, exec.submit(fsd))[ FD ]
Line_42 $$ FileStatus status = files.getFileStatus(localized.getParent())-->Line_45 $$ status = files.getFileStatus(localized)[ FD ]
Line_25 $$ Path p = new Path(basedir, "" + i)-->Line_40 $$ Path localized = p.getValue().get()[ FD ]
Line_43 $$ FsPermission perm = status.getPermission()-->Line_49 $$ Assert.assertTrue("Private file should be 500", perm.toShort() == FSDownload.PRIVATE_FILE_PERMS.toShort())[ FD ]
