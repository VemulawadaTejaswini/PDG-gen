Line_4 $$ int pos = reversed ? KEY_RANGE : 0-->Line_9 $$ pos += skip * mul[ FD ]
Line_15 $$ started = true-->Line_12 $$ if (row == null && skip == 0 && started)[ FD ]
Line_2 $$ void testSearchIterator(NavigableSet<Clusterable> sortedContent, Partition partition, ColumnFilter cf, boolean reversed) -->Line_5 $$ int mul = reversed ? -1 : 1[ CD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_12 $$ if (row == null && skip == 0 && started)[ CD ]
Line_8 $$ int skip = rand.nextInt(KEY_RANGE / 10)-->Line_9 $$ pos += skip * mul[ FD ]
Line_10 $$ Clustering cl = clustering(pos)-->Line_16 $$ Row expected = getRow(sortedContent, cl)[ FD ]
Line_11 $$ Row row = searchIter.next(cl)-->Line_20 $$ assertRowsEqual(expected.filter(cf, cfm), row)[ FD ]
Line_6 $$ boolean started = false-->Line_15 $$ started = true[ FD ]
Line_16 $$ Row expected = getRow(sortedContent, cl)-->Line_20 $$ assertRowsEqual(expected.filter(cf, cfm), row)[ FD ]
Line_3 $$ SearchIterator<Clustering, Row> searchIter = partition.searchIterator(cf, reversed)-->Line_11 $$ Row row = searchIter.next(cl)[ FD ]
Line_2 $$ void testSearchIterator(NavigableSet<Clusterable> sortedContent, Partition partition, ColumnFilter cf, boolean reversed) -->Line_16 $$ Row expected = getRow(sortedContent, cl)[ FD ]
Line_2 $$ void testSearchIterator(NavigableSet<Clusterable> sortedContent, Partition partition, ColumnFilter cf, boolean reversed) -->Line_6 $$ boolean started = false[ CD ]
Line_2 $$ void testSearchIterator(NavigableSet<Clusterable> sortedContent, Partition partition, ColumnFilter cf, boolean reversed) -->Line_3 $$ SearchIterator<Clustering, Row> searchIter = partition.searchIterator(cf, reversed)[ FD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_15 $$ started = true[ CD ]
Line_6 $$ boolean started = false-->Line_12 $$ if (row == null && skip == 0 && started)[ FD ]
Line_2 $$ void testSearchIterator(NavigableSet<Clusterable> sortedContent, Partition partition, ColumnFilter cf, boolean reversed) -->Line_4 $$ int pos = reversed ? KEY_RANGE : 0[ CD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_10 $$ Clustering cl = clustering(pos)[ CD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_18 $$ if (row == null)[ CD ]
Line_2 $$ void testSearchIterator(NavigableSet<Clusterable> sortedContent, Partition partition, ColumnFilter cf, boolean reversed) -->Line_7 $$ while (searchIter.hasNext()) [ CD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_17 $$ assertEquals(expected == null, row == null)[ CD ]
Line_9 $$ pos += skip * mul-->Line_10 $$ Clustering cl = clustering(pos)[ FD ]
Line_3 $$ SearchIterator<Clustering, Row> searchIter = partition.searchIterator(cf, reversed)-->Line_7 $$ while (searchIter.hasNext()) [ FD ]
Line_10 $$ Clustering cl = clustering(pos)-->Line_11 $$ Row row = searchIter.next(cl)[ FD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_8 $$ int skip = rand.nextInt(KEY_RANGE / 10)[ CD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_16 $$ Row expected = getRow(sortedContent, cl)[ CD ]
Line_11 $$ Row row = searchIter.next(cl)-->Line_18 $$ if (row == null)[ FD ]
Line_2 $$ void testSearchIterator(NavigableSet<Clusterable> sortedContent, Partition partition, ColumnFilter cf, boolean reversed) -->Line_20 $$ assertRowsEqual(expected.filter(cf, cfm), row)[ FD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_9 $$ pos += skip * mul[ CD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_20 $$ assertRowsEqual(expected.filter(cf, cfm), row)[ CD ]
Line_2 $$ void testSearchIterator(NavigableSet<Clusterable> sortedContent, Partition partition, ColumnFilter cf, boolean reversed) -->Line_3 $$ SearchIterator<Clustering, Row> searchIter = partition.searchIterator(cf, reversed)[ CD ]
Line_5 $$ int mul = reversed ? -1 : 1-->Line_9 $$ pos += skip * mul[ FD ]
Line_7 $$ while (searchIter.hasNext()) -->Line_11 $$ Row row = searchIter.next(cl)[ CD ]
Line_4 $$ int pos = reversed ? KEY_RANGE : 0-->Line_10 $$ Clustering cl = clustering(pos)[ FD ]
