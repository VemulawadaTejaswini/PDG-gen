Line_4 $$ int megabytes = 1-->Line_35 $$ sortTest(fs, count, megabytes, factor, false, blockCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_24 $$ readTest(fs, count, seed, recordCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_32 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_35 $$ sortTest(fs, count, megabytes, factor, false, blockCompressedFile)[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_14 $$ readTest(fs, count, seed, file)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_39 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, false, factor, megabytes)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_19 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, false, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_23 $$ writeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, codec)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_21 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, true, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_14 $$ readTest(fs, count, seed, file)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_28 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_17 $$ sortTest(fs, count, megabytes, factor, true, file)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_31 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, true, factor, megabytes)[ FD ]
Line_4 $$ int megabytes = 1-->Line_15 $$ sortTest(fs, count, megabytes, factor, false, file)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_25 $$ sortTest(fs, count, megabytes, factor, false, recordCompressedFile)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_36 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_22 $$ checkSort(fs, count, seed, file)[ FD ]
Line_5 $$ int factor = 5-->Line_37 $$ sortTest(fs, count, megabytes, factor, true, blockCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_19 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, false, factor, megabytes)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_42 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_26 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_19 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, false, factor, megabytes)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_42 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_10 $$ LOG.info("Seed = " + seed)[ CD ]
Line_4 $$ int megabytes = 1-->Line_17 $$ sortTest(fs, count, megabytes, factor, true, file)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_5 $$ int factor = 5[ CD ]
Line_3 $$ int count = 1024 * 10-->Line_19 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, false, factor, megabytes)[ FD ]
Line_5 $$ int factor = 5-->Line_35 $$ sortTest(fs, count, megabytes, factor, false, blockCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_15 $$ sortTest(fs, count, megabytes, factor, false, file)[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_16 $$ checkSort(fs, count, seed, file)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_28 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_3 $$ int count = 1024 * 10[ CD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")[ CD ]
Line_3 $$ int count = 1024 * 10-->Line_26 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_4 $$ int megabytes = 1-->Line_39 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, false, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_32 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_41 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, true, factor, megabytes)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_21 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, true, factor, megabytes)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_35 $$ sortTest(fs, count, megabytes, factor, false, blockCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_25 $$ sortTest(fs, count, megabytes, factor, false, recordCompressedFile)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_40 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_30 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")[ CD ]
Line_5 $$ int factor = 5-->Line_15 $$ sortTest(fs, count, megabytes, factor, false, file)[ FD ]
Line_5 $$ int factor = 5-->Line_27 $$ sortTest(fs, count, megabytes, factor, true, recordCompressedFile)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_39 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, false, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_28 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_13 $$ writeTest(fs, count, seed, file, CompressionType.NONE, null)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_16 $$ checkSort(fs, count, seed, file)[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_17 $$ sortTest(fs, count, megabytes, factor, true, file)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_24 $$ readTest(fs, count, seed, recordCompressedFile)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_26 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_32 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_22 $$ checkSort(fs, count, seed, file)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_41 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, true, factor, megabytes)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_4 $$ int megabytes = 1[ CD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_29 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, false, factor, megabytes)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_36 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_23 $$ writeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, codec)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_41 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, true, factor, megabytes)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_36 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_39 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, false, factor, megabytes)[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_18 $$ checkSort(fs, count, seed, file)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_42 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_24 $$ readTest(fs, count, seed, recordCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_13 $$ writeTest(fs, count, seed, file, CompressionType.NONE, null)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_27 $$ sortTest(fs, count, megabytes, factor, true, recordCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_42 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_21 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, true, factor, megabytes)[ FD ]
Line_4 $$ int megabytes = 1-->Line_25 $$ sortTest(fs, count, megabytes, factor, false, recordCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_20 $$ checkSort(fs, count, seed, file)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_16 $$ checkSort(fs, count, seed, file)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_34 $$ readTest(fs, count, seed, blockCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_37 $$ sortTest(fs, count, megabytes, factor, true, blockCompressedFile)[ FD ]
Line_5 $$ int factor = 5-->Line_39 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, false, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_17 $$ sortTest(fs, count, megabytes, factor, true, file)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_32 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_26 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_28 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_4 $$ int megabytes = 1-->Line_31 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, true, factor, megabytes)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_34 $$ readTest(fs, count, seed, blockCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_34 $$ readTest(fs, count, seed, blockCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_23 $$ writeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, codec)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_23 $$ writeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, codec)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_33 $$ writeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, codec)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_27 $$ sortTest(fs, count, megabytes, factor, true, recordCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_24 $$ readTest(fs, count, seed, recordCompressedFile)[ FD ]
Line_4 $$ int megabytes = 1-->Line_37 $$ sortTest(fs, count, megabytes, factor, true, blockCompressedFile)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_34 $$ readTest(fs, count, seed, blockCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_39 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, false, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_33 $$ writeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, codec)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_15 $$ sortTest(fs, count, megabytes, factor, false, file)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_31 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, true, factor, megabytes)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_18 $$ checkSort(fs, count, seed, file)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_25 $$ sortTest(fs, count, megabytes, factor, false, recordCompressedFile)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_29 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, false, factor, megabytes)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_20 $$ checkSort(fs, count, seed, file)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_38 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_20 $$ checkSort(fs, count, seed, file)[ FD ]
Line_5 $$ int factor = 5-->Line_19 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, false, factor, megabytes)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_9 $$ int seed = new Random().nextInt()[ CD ]
Line_5 $$ int factor = 5-->Line_29 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, false, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_35 $$ sortTest(fs, count, megabytes, factor, false, blockCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_30 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_38 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_4 $$ int megabytes = 1-->Line_19 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, false, factor, megabytes)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_31 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, true, factor, megabytes)[ FD ]
Line_5 $$ int factor = 5-->Line_21 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, true, factor, megabytes)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_33 $$ writeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, codec)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_29 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, false, factor, megabytes)[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_21 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, true, factor, megabytes)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_16 $$ checkSort(fs, count, seed, file)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_14 $$ readTest(fs, count, seed, file)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_33 $$ writeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, codec)[ FD ]
Line_5 $$ int factor = 5-->Line_17 $$ sortTest(fs, count, megabytes, factor, true, file)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_33 $$ writeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, codec)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_37 $$ sortTest(fs, count, megabytes, factor, true, blockCompressedFile)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")[ CD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_20 $$ checkSort(fs, count, seed, file)[ FD ]
Line_5 $$ int factor = 5-->Line_31 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, true, factor, megabytes)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_22 $$ checkSort(fs, count, seed, file)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_29 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, false, factor, megabytes)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_14 $$ readTest(fs, count, seed, file)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_18 $$ checkSort(fs, count, seed, file)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_40 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_4 $$ int megabytes = 1-->Line_29 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, false, factor, megabytes)[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_15 $$ sortTest(fs, count, megabytes, factor, false, file)[ FD ]
Line_5 $$ int factor = 5-->Line_41 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, true, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_40 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_22 $$ checkSort(fs, count, seed, file)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_18 $$ checkSort(fs, count, seed, file)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_30 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_36 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_38 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_30 $$ checkSort(fs, count, seed, recordCompressedFile)[ FD ]
Line_4 $$ int megabytes = 1-->Line_27 $$ sortTest(fs, count, megabytes, factor, true, recordCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_40 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_8 $$ Path blockCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.bc.seq")-->Line_37 $$ sortTest(fs, count, megabytes, factor, true, blockCompressedFile)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_38 $$ checkSort(fs, count, seed, blockCompressedFile)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_41 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, true, factor, megabytes)[ FD ]
Line_2 $$ public void compressedSeqFileTest(CompressionCodec codec) throws Exception -->Line_23 $$ writeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, codec)[ FD ]
Line_4 $$ int megabytes = 1-->Line_21 $$ mergeTest(fs, count, seed, file, CompressionType.NONE, true, factor, megabytes)[ FD ]
Line_11 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_44 $$ fs.close()[ FD ]
Line_6 $$ Path file = new Path(System.getProperty("test.build.data", ".") + "/test.seq")-->Line_13 $$ writeTest(fs, count, seed, file, CompressionType.NONE, null)[ FD ]
Line_9 $$ int seed = new Random().nextInt()-->Line_13 $$ writeTest(fs, count, seed, file, CompressionType.NONE, null)[ FD ]
Line_4 $$ int megabytes = 1-->Line_41 $$ mergeTest(fs, count, seed, blockCompressedFile, CompressionType.BLOCK, true, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 10-->Line_31 $$ mergeTest(fs, count, seed, recordCompressedFile, CompressionType.RECORD, true, factor, megabytes)[ FD ]
Line_5 $$ int factor = 5-->Line_25 $$ sortTest(fs, count, megabytes, factor, false, recordCompressedFile)[ FD ]
Line_7 $$ Path recordCompressedFile = new Path(System.getProperty("test.build.data", ".") + "/test.rc.seq")-->Line_27 $$ sortTest(fs, count, megabytes, factor, true, recordCompressedFile)[ FD ]
