Line_2 $$ private static void testBigRandom(boolean oldBfHashOrder) -->Line_3 $$ int size = 10 * 1000 * 1000[ CD ]
Line_5 $$ double fp = testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size), new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size))-->Line_6 $$ logger.info("Bloom filter false positive for oldBfHashOrder=[ FD ]
Line_3 $$ int size = 10 * 1000 * 1000-->Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)[ FD ]
Line_2 $$ private static void testBigRandom(boolean oldBfHashOrder) -->Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)[ FD ]
Line_2 $$ private static void testBigRandom(boolean oldBfHashOrder) -->Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)[ CD ]
Line_2 $$ private static void testBigRandom(boolean oldBfHashOrder) -->Line_6 $$ logger.info("Bloom filter false positive for oldBfHashOrder=[ CD ]
Line_2 $$ private static void testBigRandom(boolean oldBfHashOrder) -->Line_6 $$ logger.info("Bloom filter false positive for oldBfHashOrder=[ FD ]
Line_4 $$ IFilter bf = getFilter(size, FilterTestHelper.spec.bucketsPerElement, false, oldBfHashOrder)-->Line_5 $$ double fp = testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size), new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size))[ FD ]
Line_2 $$ private static void testBigRandom(boolean oldBfHashOrder) -->Line_5 $$ double fp = testFalsePositives(bf, new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size), new KeyGenerator.RandomStringGenerator(new Random().nextInt(), size))[ CD ]
