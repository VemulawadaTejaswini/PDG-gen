Line_61 $$ final Path path = relPathToRoot(stat.getPath(), parentPath)-->Line_73 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_63 $$ if (stat.isDirectory()) -->Line_66 $$ children = new String[list.length][ CD ]
Line_62 $$ final String[] children-->Line_66 $$ children = new String[list.length][ FD ]
Line_13 $$ FileSystem fs = parentPath.getFileSystem(conf)-->Line_19 $$ conf.set(SRC_PARENT_LABEL, parentPath.makeQualified(fs).toString())[ FD ]
Line_20 $$ Path outputPath = new Path(dest, archiveName)-->Line_21 $$ FileOutputFormat.setOutputPath(conf, outputPath)[ FD ]
Line_41 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_74 $$ srcWriter.sync()[ FD ]
Line_33 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_102 $$ jobfs.delete(jobDirectory, true)[ FD ]
Line_54 $$ ArrayList<FileStatusDir> allFiles = new ArrayList<FileStatusDir>()-->Line_57 $$ recursivels(fs, fdir, allFiles)[ FD ]
Line_41 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_80 $$ srcWriter.close()[ FD ]
Line_41 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_47 $$ srcWriter.sync()[ FD ]
Line_59 $$ FileStatus stat = statDir.getFileStatus()-->Line_60 $$ long len = stat.isDirectory() ? 0 : stat.getLen()[ FD ]
Line_56 $$ FileStatusDir fdir = new FileStatusDir(fstatus, null)-->Line_57 $$ recursivels(fs, fdir, allFiles)[ FD ]
Line_67 $$ for (int i = 0; i < list.length; i++) -->Line_68 $$ children[i] = list[i].getPath().getName()[ CD ]
Line_12 $$ long totalSize = 0-->Line_85 $$ conf.setLong(TOTAL_SIZE_LABEL, totalSize)[ FD ]
Line_27 $$ Path stagingArea-->Line_29 $$ stagingArea = JobSubmissionFiles.getStagingDir(new Cluster(conf), conf)[ FD ]
Line_20 $$ Path outputPath = new Path(dest, archiveName)-->Line_22 $$ FileSystem outFs = outputPath.getFileSystem(conf)[ FD ]
Line_13 $$ FileSystem fs = parentPath.getFileSystem(conf)-->Line_55 $$ FileStatus fstatus = fs.getFileStatus(src)[ FD ]
Line_62 $$ final String[] children-->Line_71 $$ children = null[ FD ]
Line_71 $$ children = null-->Line_73 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_62 $$ final String[] children-->Line_73 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_20 $$ Path outputPath = new Path(dest, archiveName)-->Line_23 $$ if (outFs.exists(outputPath) || outFs.isFile(dest)) [ FD ]
Line_12 $$ long totalSize = 0-->Line_76 $$ totalSize += len[ FD ]
Line_59 $$ FileStatus stat = statDir.getFileStatus()-->Line_63 $$ if (stat.isDirectory()) [ FD ]
Line_39 $$ Path srcFiles = new Path(jobDirectory, "_har_src_files")-->Line_40 $$ conf.set(SRC_LIST_LABEL, srcFiles.toString())[ FD ]
Line_33 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_36 $$ conf.set(JOB_DIR_LABEL, jobDirectory.toString())[ FD ]
Line_11 $$ int numFiles = 0-->Line_84 $$ conf.setInt(SRC_COUNT_LABEL, numFiles)[ FD ]
Line_20 $$ Path outputPath = new Path(dest, archiveName)-->Line_26 $$ conf.set(DST_DIR_LABEL, outputPath.toString())[ FD ]
Line_13 $$ FileSystem fs = parentPath.getFileSystem(conf)-->Line_57 $$ recursivels(fs, fdir, allFiles)[ FD ]
Line_66 $$ children = new String[list.length]-->Line_71 $$ children = null[ FD ]
Line_60 $$ long len = stat.isDirectory() ? 0 : stat.getLen()-->Line_76 $$ totalSize += len[ FD ]
Line_22 $$ FileSystem outFs = outputPath.getFileSystem(conf)-->Line_23 $$ if (outFs.exists(outputPath) || outFs.isFile(dest)) [ FD ]
Line_66 $$ children = new String[list.length]-->Line_73 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_33 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_96 $$ FileInputFormat.addInputPath(conf, jobDirectory)[ FD ]
Line_58 $$ for (FileStatusDir statDir : allFiles) -->Line_59 $$ FileStatus stat = statDir.getFileStatus()[ FD ]
Line_34 $$ FsPermission mapredSysPerms = new FsPermission(JobSubmissionFiles.JOB_DIR_PERMISSION)-->Line_35 $$ FileSystem.mkdirs(jobDirectory.getFileSystem(conf), jobDirectory, mapredSysPerms)[ FD ]
Line_11 $$ int numFiles = 0-->Line_75 $$ numFiles++[ FD ]
Line_60 $$ long len = stat.isDirectory() ? 0 : stat.getLen()-->Line_73 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_76 $$ totalSize += len-->Line_85 $$ conf.setLong(TOTAL_SIZE_LABEL, totalSize)[ FD ]
Line_39 $$ Path srcFiles = new Path(jobDirectory, "_har_src_files")-->Line_41 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_63 $$ if (stat.isDirectory()) -->Line_67 $$ for (int i = 0; i < list.length; i++) [ CD ]
Line_63 $$ if (stat.isDirectory()) -->Line_71 $$ children = null[ CD ]
Line_59 $$ FileStatus stat = statDir.getFileStatus()-->Line_61 $$ final Path path = relPathToRoot(stat.getPath(), parentPath)[ FD ]
Line_33 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_35 $$ FileSystem.mkdirs(jobDirectory.getFileSystem(conf), jobDirectory, mapredSysPerms)[ FD ]
Line_41 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_73 $$ append(srcWriter, len, path.toString(), children)[ FD ]
