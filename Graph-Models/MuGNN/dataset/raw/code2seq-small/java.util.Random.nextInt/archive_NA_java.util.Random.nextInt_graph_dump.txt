Line_43 $$ FileStatus stat = statDir.getFileStatus()-->Line_47 $$ if (stat.isDirectory()) [ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_20 $$ Path stagingArea[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_11 $$ conf.set(DST_HAR_LABEL, archiveName)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_66 $$ conf.setInt(SRC_COUNT_LABEL, numFiles)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_7 $$ this.blockSize = conf.getLong(HAR_BLOCKSIZE_LABEL, blockSize)[ CD ]
Line_42 $$ for (FileStatusDir statDir : allFiles) -->Line_48 $$ FileStatus[] list = statDir.getChildren()[ FD ]
Line_31 $$ Path srcFiles = new Path(jobDirectory, "_har_src_files")-->Line_65 $$ jobfs.setReplication(srcFiles, (short) 10)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_35 $$ writeTopLevelDirs(srcWriter, srcPaths, parentPath)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_9 $$ conf.setLong(HAR_BLOCKSIZE_LABEL, blockSize)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_15 $$ FileSystem outFs = outputPath.getFileSystem(conf)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_65 $$ jobfs.setReplication(srcFiles, (short) 10)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_8 $$ this.partSize = conf.getLong(HAR_PARTSIZE_LABEL, partSize)[ CD ]
Line_47 $$ if (stat.isDirectory()) -->Line_48 $$ FileStatus[] list = statDir.getChildren()[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_12 $$ conf.set(SRC_PARENT_LABEL, parentPath.makeQualified(fs).toString())[ CD ]
Line_5 $$ long totalSize = 0-->Line_59 $$ totalSize += len[ FD ]
Line_54 $$ children = null-->Line_56 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_68 $$ int numMaps = (int) (totalSize / partSize)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_45 $$ final Path path = relPathToRoot(stat.getPath(), parentPath)[ FD ]
Line_47 $$ if (stat.isDirectory()) -->Line_50 $$ for (int i = 0; i < list.length; i++) [ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_28 $$ FileSystem.mkdirs(jobDirectory.getFileSystem(conf), jobDirectory, mapredSysPerms)[ CD ]
Line_27 $$ FsPermission mapredSysPerms = new FsPermission(JobSubmissionFiles.JOB_DIR_PERMISSION)-->Line_28 $$ FileSystem.mkdirs(jobDirectory.getFileSystem(conf), jobDirectory, mapredSysPerms)[ FD ]
Line_6 $$ FileSystem fs = parentPath.getFileSystem(conf)-->Line_39 $$ FileStatus fstatus = fs.getFileStatus(src)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_67 $$ conf.setLong(TOTAL_SIZE_LABEL, totalSize)[ CD ]
Line_26 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_28 $$ FileSystem.mkdirs(jobDirectory.getFileSystem(conf), jobDirectory, mapredSysPerms)[ FD ]
Line_20 $$ Path stagingArea-->Line_22 $$ stagingArea = JobSubmissionFiles.getStagingDir(new Cluster(conf), conf)[ FD ]
Line_26 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_29 $$ conf.set(JOB_DIR_LABEL, jobDirectory.toString())[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_16 $$ if (outFs.exists(outputPath) || outFs.isFile(dest)) [ FD ]
Line_46 $$ final String[] children-->Line_49 $$ children = new String[list.length][ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_13 $$ Path outputPath = new Path(dest, archiveName)[ CD ]
Line_4 $$ int numFiles = 0-->Line_58 $$ numFiles++[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_12 $$ conf.set(SRC_PARENT_LABEL, parentPath.makeQualified(fs).toString())[ FD ]
Line_26 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_77 $$ FileInputFormat.addInputPath(conf, jobDirectory)[ FD ]
Line_33 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_35 $$ writeTopLevelDirs(srcWriter, srcPaths, parentPath)[ FD ]
Line_42 $$ for (FileStatusDir statDir : allFiles) -->Line_43 $$ FileStatus stat = statDir.getFileStatus()[ FD ]
Line_5 $$ long totalSize = 0-->Line_67 $$ conf.setLong(TOTAL_SIZE_LABEL, totalSize)[ FD ]
Line_30 $$ FileSystem jobfs = jobDirectory.getFileSystem(conf)-->Line_81 $$ jobfs.delete(jobDirectory, true)[ FD ]
Line_59 $$ totalSize += len-->Line_67 $$ conf.setLong(TOTAL_SIZE_LABEL, totalSize)[ FD ]
Line_45 $$ final Path path = relPathToRoot(stat.getPath(), parentPath)-->Line_56 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_6 $$ FileSystem fs = parentPath.getFileSystem(conf)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_79 $$ JobClient.runJob(conf)[ CD ]
Line_4 $$ int numFiles = 0-->Line_66 $$ conf.setInt(SRC_COUNT_LABEL, numFiles)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_5 $$ long totalSize = 0[ CD ]
Line_31 $$ Path srcFiles = new Path(jobDirectory, "_har_src_files")-->Line_33 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_37 $$ for (Path src : srcPaths) -->Line_39 $$ FileStatus fstatus = fs.getFileStatus(src)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_77 $$ FileInputFormat.addInputPath(conf, jobDirectory)[ CD ]
Line_15 $$ FileSystem outFs = outputPath.getFileSystem(conf)-->Line_16 $$ if (outFs.exists(outputPath) || outFs.isFile(dest)) [ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_70 $$ conf.setNumReduceTasks(1)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_3 $$ checkPaths(conf, srcPaths)[ FD ]
Line_13 $$ Path outputPath = new Path(dest, archiveName)-->Line_14 $$ FileOutputFormat.setOutputPath(conf, outputPath)[ FD ]
Line_33 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_57 $$ srcWriter.sync()[ FD ]
Line_33 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_56 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_47 $$ if (stat.isDirectory()) -->Line_49 $$ children = new String[list.length][ CD ]
Line_13 $$ Path outputPath = new Path(dest, archiveName)-->Line_15 $$ FileSystem outFs = outputPath.getFileSystem(conf)[ FD ]
Line_46 $$ final String[] children-->Line_56 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_71 $$ conf.setInputFormat(HArchiveInputFormat.class)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_14 $$ FileOutputFormat.setOutputPath(conf, outputPath)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_69 $$ conf.setNumMapTasks(numMaps == 0 ? 1 : numMaps)[ CD ]
Line_47 $$ if (stat.isDirectory()) -->Line_54 $$ children = null[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_27 $$ FsPermission mapredSysPerms = new FsPermission(JobSubmissionFiles.JOB_DIR_PERMISSION)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_3 $$ checkPaths(conf, srcPaths)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_76 $$ conf.setMapOutputValueClass(Text.class)[ CD ]
Line_6 $$ FileSystem fs = parentPath.getFileSystem(conf)-->Line_12 $$ conf.set(SRC_PARENT_LABEL, parentPath.makeQualified(fs).toString())[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_73 $$ conf.setMapperClass(HArchivesMapper.class)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_74 $$ conf.setReducerClass(HArchivesReducer.class)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_30 $$ FileSystem jobfs = jobDirectory.getFileSystem(conf)[ CD ]
Line_43 $$ FileStatus stat = statDir.getFileStatus()-->Line_44 $$ long len = stat.isDirectory() ? 0 : stat.getLen()[ FD ]
Line_44 $$ long len = stat.isDirectory() ? 0 : stat.getLen()-->Line_59 $$ totalSize += len[ FD ]
Line_50 $$ for (int i = 0; i < list.length; i++) -->Line_51 $$ children[i] = list[i].getPath().getName()[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_32 $$ conf.set(SRC_LIST_LABEL, srcFiles.toString())[ CD ]
Line_38 $$ ArrayList<FileStatusDir> allFiles = new ArrayList<FileStatusDir>()-->Line_41 $$ recursivels(fs, fdir, allFiles)[ FD ]
Line_49 $$ children = new String[list.length]-->Line_54 $$ children = null[ FD ]
Line_43 $$ FileStatus stat = statDir.getFileStatus()-->Line_45 $$ final Path path = relPathToRoot(stat.getPath(), parentPath)[ FD ]
Line_6 $$ FileSystem fs = parentPath.getFileSystem(conf)-->Line_41 $$ recursivels(fs, fdir, allFiles)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_31 $$ Path srcFiles = new Path(jobDirectory, "_har_src_files")[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_10 $$ conf.setLong(HAR_PARTSIZE_LABEL, partSize)[ CD ]
Line_26 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_30 $$ FileSystem jobfs = jobDirectory.getFileSystem(conf)[ FD ]
Line_49 $$ children = new String[list.length]-->Line_56 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_26 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))[ CD ]
Line_31 $$ Path srcFiles = new Path(jobDirectory, "_har_src_files")-->Line_32 $$ conf.set(SRC_LIST_LABEL, srcFiles.toString())[ FD ]
Line_33 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_63 $$ srcWriter.close()[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_78 $$ conf.setSpeculativeExecution(false)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_29 $$ conf.set(JOB_DIR_LABEL, jobDirectory.toString())[ CD ]
Line_44 $$ long len = stat.isDirectory() ? 0 : stat.getLen()-->Line_56 $$ append(srcWriter, len, path.toString(), children)[ FD ]
Line_13 $$ Path outputPath = new Path(dest, archiveName)-->Line_16 $$ if (outFs.exists(outputPath) || outFs.isFile(dest)) [ FD ]
Line_46 $$ final String[] children-->Line_54 $$ children = null[ FD ]
Line_26 $$ Path jobDirectory = new Path(stagingArea, NAME + "_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE), 36))-->Line_81 $$ jobfs.delete(jobDirectory, true)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_33 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_4 $$ int numFiles = 0[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_16 $$ if (outFs.exists(outputPath) || outFs.isFile(dest)) [ CD ]
Line_30 $$ FileSystem jobfs = jobDirectory.getFileSystem(conf)-->Line_33 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)[ FD ]
Line_40 $$ FileStatusDir fdir = new FileStatusDir(fstatus, null)-->Line_41 $$ recursivels(fs, fdir, allFiles)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_72 $$ conf.setOutputFormat(NullOutputFormat.class)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_19 $$ conf.set(DST_DIR_LABEL, outputPath.toString())[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_6 $$ FileSystem fs = parentPath.getFileSystem(conf)[ CD ]
Line_33 $$ SequenceFile.Writer srcWriter = SequenceFile.createWriter(jobfs, conf, srcFiles, LongWritable.class, HarEntry.class, SequenceFile.CompressionType.NONE)-->Line_36 $$ srcWriter.sync()[ FD ]
Line_30 $$ FileSystem jobfs = jobDirectory.getFileSystem(conf)-->Line_65 $$ jobfs.setReplication(srcFiles, (short) 10)[ FD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_75 $$ conf.setMapOutputKeyClass(IntWritable.class)[ CD ]
Line_2 $$ void archive(Path parentPath, List<Path> srcPaths, String archiveName, Path dest) throws IOException -->Line_11 $$ conf.set(DST_HAR_LABEL, archiveName)[ FD ]
Line_13 $$ Path outputPath = new Path(dest, archiveName)-->Line_19 $$ conf.set(DST_DIR_LABEL, outputPath.toString())[ FD ]
