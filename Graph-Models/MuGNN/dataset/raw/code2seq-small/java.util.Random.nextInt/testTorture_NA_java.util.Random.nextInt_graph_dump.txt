Line_8 $$ Thread thread = new Thread(() -> -->Line_17 $$ thread.start()[ FD ]
Line_2 $$ public void testTorture() throws InterruptedException -->Line_4 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(1000).weigher(( k,  v) -> 2).build()[ CD ]
Line_5 $$ CountDownLatch latch = new CountDownLatch(1 + numberOfThreads)-->Line_10 $$ latch.countDown()[ FD ]
Line_11 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_12 $$ Integer key = random.nextInt(numberOfEntries)[ CD ]
Line_7 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_16 $$ threads.add(thread)[ CD ]
Line_3 $$ int numberOfThreads = randomIntBetween(2, 32)-->Line_7 $$ for (int i = 0; i < numberOfThreads; i++) [ FD ]
Line_8 $$ Thread thread = new Thread(() -> -->Line_16 $$ threads.add(thread)[ FD ]
Line_7 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_17 $$ thread.start()[ CD ]
Line_5 $$ CountDownLatch latch = new CountDownLatch(1 + numberOfThreads)-->Line_19 $$ latch.countDown()[ FD ]
Line_4 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(1000).weigher(( k,  v) -> 2).build()-->Line_13 $$ cache.put(key, Integer.toString(j))[ FD ]
Line_12 $$ Integer key = random.nextInt(numberOfEntries)-->Line_13 $$ cache.put(key, Integer.toString(j))[ FD ]
Line_6 $$ List<Thread> threads = new ArrayList()-->Line_16 $$ threads.add(thread)[ FD ]
Line_2 $$ public void testTorture() throws InterruptedException -->Line_6 $$ List<Thread> threads = new ArrayList()[ CD ]
Line_20 $$ for (Thread thread : threads) -->Line_21 $$ thread.join()[ FD ]
Line_11 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_13 $$ cache.put(key, Integer.toString(j))[ CD ]
Line_7 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_8 $$ Thread thread = new Thread(() -> [ CD ]
Line_11 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_13 $$ cache.put(key, Integer.toString(j))[ FD ]
Line_2 $$ public void testTorture() throws InterruptedException -->Line_7 $$ for (int i = 0; i < numberOfThreads; i++) [ CD ]
Line_9 $$ Random random = new Random(random().nextLong())-->Line_12 $$ Integer key = random.nextInt(numberOfEntries)[ FD ]
Line_2 $$ public void testTorture() throws InterruptedException -->Line_24 $$ assertEquals(500, cache.count())[ CD ]
Line_8 $$ Thread thread = new Thread(() -> -->Line_21 $$ thread.join()[ FD ]
Line_2 $$ public void testTorture() throws InterruptedException -->Line_3 $$ int numberOfThreads = randomIntBetween(2, 32)[ CD ]
Line_2 $$ public void testTorture() throws InterruptedException -->Line_5 $$ CountDownLatch latch = new CountDownLatch(1 + numberOfThreads)[ CD ]
Line_2 $$ public void testTorture() throws InterruptedException -->Line_19 $$ latch.countDown()[ CD ]
Line_4 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(1000).weigher(( k,  v) -> 2).build()-->Line_24 $$ assertEquals(500, cache.count())[ FD ]
Line_2 $$ public void testTorture() throws InterruptedException -->Line_23 $$ cache.refresh()[ CD ]
Line_4 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(1000).weigher(( k,  v) -> 2).build()-->Line_23 $$ cache.refresh()[ FD ]
