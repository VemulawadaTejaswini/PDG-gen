Line_10 $$ Thread thread = new Thread(() -> -->Line_18 $$ threads.add(thread)[ FD ]
Line_10 $$ Thread thread = new Thread(() -> -->Line_23 $$ thread.join()[ FD ]
Line_5 $$ int numberOfThreads = randomIntBetween(2, 32)-->Line_9 $$ for (int i = 0; i < numberOfThreads; i++) [ FD ]
Line_9 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_18 $$ threads.add(thread)[ CD ]
Line_9 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_19 $$ thread.start()[ CD ]
Line_22 $$ for (Thread thread : threads) -->Line_23 $$ thread.join()[ FD ]
Line_6 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(1000).weigher(( k,  v) -> 2).build()-->Line_15 $$ cache.put(key, Integer.toString(j))[ FD ]
Line_13 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_15 $$ cache.put(key, Integer.toString(j))[ CD ]
Line_14 $$ Integer key = random.nextInt(numberOfEntries)-->Line_15 $$ cache.put(key, Integer.toString(j))[ FD ]
Line_13 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_14 $$ Integer key = random.nextInt(numberOfEntries)[ CD ]
Line_13 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_15 $$ cache.put(key, Integer.toString(j))[ FD ]
Line_6 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(1000).weigher(( k,  v) -> 2).build()-->Line_25 $$ cache.refresh()[ FD ]
Line_9 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_10 $$ Thread thread = new Thread(() -> [ CD ]
Line_7 $$ CountDownLatch latch = new CountDownLatch(1 + numberOfThreads)-->Line_21 $$ latch.countDown()[ FD ]
Line_11 $$ Random random = new Random(random().nextLong())-->Line_14 $$ Integer key = random.nextInt(numberOfEntries)[ FD ]
Line_7 $$ CountDownLatch latch = new CountDownLatch(1 + numberOfThreads)-->Line_12 $$ latch.countDown()[ FD ]
Line_8 $$ List<Thread> threads = new ArrayList()-->Line_18 $$ threads.add(thread)[ FD ]
Line_10 $$ Thread thread = new Thread(() -> -->Line_19 $$ thread.start()[ FD ]
Line_6 $$ final Cache<Integer, String> cache = CacheBuilder.<Integer, String>builder().setMaximumWeight(1000).weigher(( k,  v) -> 2).build()-->Line_26 $$ assertEquals(500, cache.count())[ FD ]
