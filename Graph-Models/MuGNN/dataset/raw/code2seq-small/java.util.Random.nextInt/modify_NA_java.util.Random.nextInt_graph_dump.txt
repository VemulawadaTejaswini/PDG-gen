Line_3 $$ final int i = Diff.search(current, inode.getKey())-->Line_5 $$ final INodeDirectory oldinode = (INodeDirectory) current.get(i)[ FD ]
Line_6 $$ final INodeDirectory newinode = new INodeDirectory(oldinode, false, oldinode.getFeatures())-->Line_7 $$ newinode.setModificationTime(oldinode.getModificationTime() + 1)[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_6 $$ final INodeDirectory newinode = new INodeDirectory(oldinode, false, oldinode.getFeatures())[ CD ]
Line_9 $$ if (diff != null) -->Line_13 $$ if (testUndo) [ CD ]
Line_17 $$ if (testUndo) -->Line_21 $$ assertDiff(before, diff)[ CD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_24 $$ assertDiff(after, diff)[ FD ]
Line_6 $$ final INodeDirectory newinode = new INodeDirectory(oldinode, false, oldinode.getFeatures())-->Line_8 $$ current.set(i, newinode)[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_21 $$ assertDiff(before, diff)[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_18 $$ final String after = diff.toString()[ FD ]
Line_5 $$ final INodeDirectory oldinode = (INodeDirectory) current.get(i)-->Line_7 $$ newinode.setModificationTime(oldinode.getModificationTime() + 1)[ FD ]
Line_14 $$ before = diff.toString()-->Line_21 $$ assertDiff(before, diff)[ FD ]
Line_17 $$ if (testUndo) -->Line_24 $$ assertDiff(after, diff)[ CD ]
Line_12 $$ String before = null-->Line_14 $$ before = diff.toString()[ FD ]
Line_3 $$ final int i = Diff.search(current, inode.getKey())-->Line_8 $$ current.set(i, newinode)[ FD ]
Line_13 $$ if (testUndo) -->Line_14 $$ before = diff.toString()[ CD ]
Line_9 $$ if (diff != null) -->Line_16 $$ final UndoInfo<INode> undoInfo = diff.modify(oldinode, newinode)[ CD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_14 $$ before = diff.toString()[ FD ]
Line_6 $$ final INodeDirectory newinode = new INodeDirectory(oldinode, false, oldinode.getFeatures())-->Line_16 $$ final UndoInfo<INode> undoInfo = diff.modify(oldinode, newinode)[ FD ]
Line_5 $$ final INodeDirectory oldinode = (INodeDirectory) current.get(i)-->Line_16 $$ final UndoInfo<INode> undoInfo = diff.modify(oldinode, newinode)[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_16 $$ final UndoInfo<INode> undoInfo = diff.modify(oldinode, newinode)[ FD ]
Line_18 $$ final String after = diff.toString()-->Line_24 $$ assertDiff(after, diff)[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_5 $$ final INodeDirectory oldinode = (INodeDirectory) current.get(i)[ CD ]
Line_9 $$ if (diff != null) -->Line_12 $$ String before = null[ CD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_3 $$ final int i = Diff.search(current, inode.getKey())[ CD ]
Line_9 $$ if (diff != null) -->Line_17 $$ if (testUndo) [ CD ]
Line_12 $$ String before = null-->Line_21 $$ assertDiff(before, diff)[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_8 $$ current.set(i, newinode)[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_5 $$ final INodeDirectory oldinode = (INodeDirectory) current.get(i)[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_9 $$ if (diff != null) [ FD ]
Line_17 $$ if (testUndo) -->Line_18 $$ final String after = diff.toString()[ CD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_9 $$ if (diff != null) [ CD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_8 $$ current.set(i, newinode)[ CD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_3 $$ final int i = Diff.search(current, inode.getKey())[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_7 $$ newinode.setModificationTime(oldinode.getModificationTime() + 1)[ CD ]
Line_5 $$ final INodeDirectory oldinode = (INodeDirectory) current.get(i)-->Line_6 $$ final INodeDirectory newinode = new INodeDirectory(oldinode, false, oldinode.getFeatures())[ FD ]
Line_2 $$ static void modify(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_4 $$ Assert.assertTrue(i >= 0)[ CD ]
