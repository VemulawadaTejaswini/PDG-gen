Line_4 $$ Path analysisOutput = null-->Line_8 $$ analysisOutput = new Path(outputDirectory)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_17 $$ grepJob.set(COLUMN_SEPARATOR, columnSeparator)[ FD ]
Line_5 $$ if (outputDirectory.equals("")) -->Line_6 $$ analysisOutput = new Path(inputFilesDirectory, "logalyzer_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)))[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_15 $$ grepJob.set(RegexMapper.PATTERN, grepPattern)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_10 $$ JobConf grepJob = new JobConf(fsConfig)[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_12 $$ FileInputFormat.setInputPaths(grepJob, grepInput)[ CD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_26 $$ JobClient.runJob(grepJob)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_16 $$ grepJob.set(SORT_COLUMNS, sortColumns)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_22 $$ grepJob.setOutputKeyClass(Text.class)[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_25 $$ grepJob.setNumReduceTasks(1)[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_11 $$ grepJob.setJobName("logalyzer-grep-sort")[ CD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_11 $$ grepJob.setJobName("logalyzer-grep-sort")[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_4 $$ Path analysisOutput = null[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_17 $$ grepJob.set(COLUMN_SEPARATOR, columnSeparator)[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_23 $$ grepJob.setOutputValueClass(LongWritable.class)[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_21 $$ grepJob.setOutputFormat(TextOutputFormat.class)[ CD ]
Line_4 $$ Path analysisOutput = null-->Line_6 $$ analysisOutput = new Path(inputFilesDirectory, "logalyzer_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)))[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_15 $$ grepJob.set(RegexMapper.PATTERN, grepPattern)[ CD ]
Line_4 $$ Path analysisOutput = null-->Line_20 $$ FileOutputFormat.setOutputPath(grepJob, analysisOutput)[ FD ]
Line_8 $$ analysisOutput = new Path(outputDirectory)-->Line_20 $$ FileOutputFormat.setOutputPath(grepJob, analysisOutput)[ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_12 $$ FileInputFormat.setInputPaths(grepJob, grepInput)[ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_24 $$ grepJob.setOutputKeyComparatorClass(LogComparator.class)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_5 $$ if (outputDirectory.equals("")) [ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_16 $$ grepJob.set(SORT_COLUMNS, sortColumns)[ CD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_16 $$ grepJob.set(SORT_COLUMNS, sortColumns)[ FD ]
Line_3 $$ Path grepInput = new Path(inputFilesDirectory)-->Line_12 $$ FileInputFormat.setInputPaths(grepJob, grepInput)[ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_17 $$ grepJob.set(COLUMN_SEPARATOR, columnSeparator)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_18 $$ grepJob.setCombinerClass(LongSumReducer.class)[ CD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_18 $$ grepJob.setCombinerClass(LongSumReducer.class)[ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_13 $$ grepJob.setInputFormat(TextInputFormat.class)[ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_23 $$ grepJob.setOutputValueClass(LongWritable.class)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_3 $$ Path grepInput = new Path(inputFilesDirectory)[ CD ]
Line_6 $$ analysisOutput = new Path(inputFilesDirectory, "logalyzer_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)))-->Line_8 $$ analysisOutput = new Path(outputDirectory)[ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_22 $$ grepJob.setOutputKeyClass(Text.class)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_20 $$ FileOutputFormat.setOutputPath(grepJob, analysisOutput)[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_14 $$ grepJob.setMapperClass(LogRegexMapper.class)[ CD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_20 $$ FileOutputFormat.setOutputPath(grepJob, analysisOutput)[ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_21 $$ grepJob.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_5 $$ if (outputDirectory.equals("")) [ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_15 $$ grepJob.set(RegexMapper.PATTERN, grepPattern)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_19 $$ grepJob.setReducerClass(LongSumReducer.class)[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_26 $$ JobClient.runJob(grepJob)[ CD ]
Line_6 $$ analysisOutput = new Path(inputFilesDirectory, "logalyzer_" + Integer.toString(new Random().nextInt(Integer.MAX_VALUE)))-->Line_20 $$ FileOutputFormat.setOutputPath(grepJob, analysisOutput)[ FD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_24 $$ grepJob.setOutputKeyComparatorClass(LogComparator.class)[ CD ]
Line_2 $$ public void doAnalyze(String inputFilesDirectory, String outputDirectory, String grepPattern, String sortColumns, String columnSeparator) throws IOException -->Line_13 $$ grepJob.setInputFormat(TextInputFormat.class)[ CD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_19 $$ grepJob.setReducerClass(LongSumReducer.class)[ FD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_25 $$ grepJob.setNumReduceTasks(1)[ FD ]
Line_5 $$ if (outputDirectory.equals("")) -->Line_8 $$ analysisOutput = new Path(outputDirectory)[ CD ]
Line_10 $$ JobConf grepJob = new JobConf(fsConfig)-->Line_14 $$ grepJob.setMapperClass(LogRegexMapper.class)[ FD ]
