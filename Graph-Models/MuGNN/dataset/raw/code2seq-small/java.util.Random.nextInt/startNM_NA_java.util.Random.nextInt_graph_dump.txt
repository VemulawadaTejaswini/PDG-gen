Line_2 $$ private void startNM() throws YarnException, IOException -->Line_5 $$ nmVCores = conf.getInt(SLSConfiguration.NM_VCORES, SLSConfiguration.NM_VCORES_DEFAULT)[ CD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_9 $$ if (nodeFile.isEmpty()) [ CD ]
Line_6 $$ int heartbeatInterval = conf.getInt(SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS, SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS_DEFAULT)-->Line_28 $$ nm.init(hostName, nmMemoryMB, nmVCores, random.nextInt(heartbeatInterval), heartbeatInterval, rm)[ FD ]
Line_9 $$ if (nodeFile.isEmpty()) -->Line_10 $$ if (isSLS) [ CD ]
Line_11 $$ for (String inputTrace : inputTraces) -->Line_16 $$ nodeSet.addAll(SLSUtils.parseNodesFromRumenTrace(inputTrace))[ FD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_33 $$ numRacks = rackSet.size()[ CD ]
Line_11 $$ for (String inputTrace : inputTraces) -->Line_12 $$ nodeSet.addAll(SLSUtils.parseNodesFromSLSTrace(inputTrace))[ FD ]
Line_25 $$ for (String hostName : nodeSet) -->Line_28 $$ nm.init(hostName, nmMemoryMB, nmVCores, random.nextInt(heartbeatInterval), heartbeatInterval, rm)[ FD ]
Line_24 $$ Set<String> rackSet = new HashSet<String>()-->Line_33 $$ numRacks = rackSet.size()[ FD ]
Line_9 $$ if (nodeFile.isEmpty()) -->Line_20 $$ nodeSet.addAll(SLSUtils.parseNodesFromNodeFile(nodeFile))[ CD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_24 $$ Set<String> rackSet = new HashSet<String>()[ CD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_34 $$ numNMs = nmMap.size()[ CD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_6 $$ int heartbeatInterval = conf.getInt(SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS, SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS_DEFAULT)[ CD ]
Line_24 $$ Set<String> rackSet = new HashSet<String>()-->Line_31 $$ rackSet.add(nm.getNode().getRackName())[ FD ]
