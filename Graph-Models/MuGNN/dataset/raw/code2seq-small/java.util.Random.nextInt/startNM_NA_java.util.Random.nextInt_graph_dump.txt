Line_23 $$ NMSimulator nm = new NMSimulator()-->Line_26 $$ runner.schedule(nm)[ FD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_29 $$ numRacks = rackSet.size()[ CD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_3 $$ nmMemoryMB = conf.getInt(SLSConfiguration.NM_MEMORY_MB, SLSConfiguration.NM_MEMORY_MB_DEFAULT)[ CD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_7 $$ if (nodeFile.isEmpty()) [ CD ]
Line_9 $$ for (String inputTrace : inputTraces) -->Line_10 $$ nodeSet.addAll(SLSUtils.parseNodesFromSLSTrace(inputTrace))[ FD ]
Line_6 $$ Set<String> nodeSet = new HashSet<String>()-->Line_14 $$ nodeSet.addAll(SLSUtils.parseNodesFromRumenTrace(inputTrace))[ FD ]
Line_9 $$ for (String inputTrace : inputTraces) -->Line_14 $$ nodeSet.addAll(SLSUtils.parseNodesFromRumenTrace(inputTrace))[ FD ]
Line_6 $$ Set<String> nodeSet = new HashSet<String>()-->Line_10 $$ nodeSet.addAll(SLSUtils.parseNodesFromSLSTrace(inputTrace))[ FD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_20 $$ Random random = new Random()[ CD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_21 $$ Set<String> rackSet = new HashSet<String>()[ CD ]
Line_6 $$ Set<String> nodeSet = new HashSet<String>()-->Line_18 $$ nodeSet.addAll(SLSUtils.parseNodesFromNodeFile(nodeFile))[ FD ]
Line_23 $$ NMSimulator nm = new NMSimulator()-->Line_24 $$ nm.init(hostName, nmMemoryMB, nmVCores, random.nextInt(heartbeatInterval), heartbeatInterval, rm)[ FD ]
Line_21 $$ Set<String> rackSet = new HashSet<String>()-->Line_27 $$ rackSet.add(nm.getNode().getRackName())[ FD ]
Line_21 $$ Set<String> rackSet = new HashSet<String>()-->Line_29 $$ numRacks = rackSet.size()[ FD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_5 $$ int heartbeatInterval = conf.getInt(SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS, SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS_DEFAULT)[ CD ]
Line_7 $$ if (nodeFile.isEmpty()) -->Line_8 $$ if (isSLS) [ CD ]
Line_22 $$ for (String hostName : nodeSet) -->Line_24 $$ nm.init(hostName, nmMemoryMB, nmVCores, random.nextInt(heartbeatInterval), heartbeatInterval, rm)[ FD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_6 $$ Set<String> nodeSet = new HashSet<String>()[ CD ]
Line_5 $$ int heartbeatInterval = conf.getInt(SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS, SLSConfiguration.NM_HEARTBEAT_INTERVAL_MS_DEFAULT)-->Line_24 $$ nm.init(hostName, nmMemoryMB, nmVCores, random.nextInt(heartbeatInterval), heartbeatInterval, rm)[ FD ]
Line_20 $$ Random random = new Random()-->Line_24 $$ nm.init(hostName, nmMemoryMB, nmVCores, random.nextInt(heartbeatInterval), heartbeatInterval, rm)[ FD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_30 $$ numNMs = nmMap.size()[ CD ]
Line_2 $$ private void startNM() throws YarnException, IOException -->Line_4 $$ nmVCores = conf.getInt(SLSConfiguration.NM_VCORES, SLSConfiguration.NM_VCORES_DEFAULT)[ CD ]
Line_7 $$ if (nodeFile.isEmpty()) -->Line_18 $$ nodeSet.addAll(SLSUtils.parseNodesFromNodeFile(nodeFile))[ CD ]
Line_23 $$ NMSimulator nm = new NMSimulator()-->Line_25 $$ nmMap.put(nm.getNode().getNodeID(), nm)[ FD ]
Line_23 $$ NMSimulator nm = new NMSimulator()-->Line_27 $$ rackSet.add(nm.getNode().getRackName())[ FD ]
