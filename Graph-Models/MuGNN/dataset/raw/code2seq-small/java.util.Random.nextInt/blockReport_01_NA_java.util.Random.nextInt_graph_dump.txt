Line_4 $$ Path filePath = new Path("/" + METHOD_NAME + ".dat")-->Line_31 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))[ FD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_11 $$ for (int i = 0; i < blocks.size(); i++) [ CD ]
Line_5 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)-->Line_7 $$ LOG.debug("Number of blocks allocated " + blocks.size())[ FD ]
Line_22 $$ if (LOG.isDebugEnabled()) -->Line_23 $$ LOG.debug("Block " + b.getBlockName() + " after\t " + "Size " + b.getNumBytes())[ CD ]
Line_36 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()-->Line_37 $$ assertEquals("Length of " + i + "th block is incorrect", oldLengths[i], b.getNumBytes())[ FD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_6 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_12 $$ Block b = blocks.get(i)-->Line_16 $$ oldLengths[i] = b.getNumBytes()[ FD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_12 $$ Block b = blocks.get(i)[ CD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_17 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_3 $$ final String METHOD_NAME = GenericTestUtils.getMethodName()-->Line_5 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)[ FD ]
Line_31 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))-->Line_36 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()[ FD ]
Line_32 $$ if (LOG.isDebugEnabled()) -->Line_33 $$ LOG.debug("After mods: Number of blocks allocated " + blocksAfterReport.size())[ CD ]
Line_20 $$ tempLen = rand.nextInt(BLOCK_SIZE)-->Line_21 $$ b.set(b.getBlockId(), tempLen, b.getGenerationStamp())[ FD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_20 $$ tempLen = rand.nextInt(BLOCK_SIZE)[ CD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_21 $$ b.set(b.getBlockId(), tempLen, b.getGenerationStamp())[ CD ]
Line_6 $$ if (LOG.isDebugEnabled()) -->Line_7 $$ LOG.debug("Number of blocks allocated " + blocks.size())[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_3 $$ final String METHOD_NAME = GenericTestUtils.getMethodName()[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_10 $$ int tempLen[ CD ]
Line_5 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)-->Line_12 $$ Block b = blocks.get(i)[ FD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_22 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_13 $$ if (LOG.isDebugEnabled()) -->Line_14 $$ LOG.debug("Block " + b.getBlockName() + " before\t" + "Size " + b.getNumBytes())[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_29 $$ StorageBlockReport[] reports = getBlockReports(dn, poolId, false, false)[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_5 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)[ CD ]
Line_35 $$ for (int i = 0; i < blocksAfterReport.size(); i++) -->Line_36 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_30 $$ sendBlockReports(dnR, poolId, reports)[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_35 $$ for (int i = 0; i < blocksAfterReport.size(); i++) [ CD ]
Line_12 $$ Block b = blocks.get(i)-->Line_23 $$ LOG.debug("Block " + b.getBlockName() + " after\t " + "Size " + b.getNumBytes())[ FD ]
Line_17 $$ if (LOG.isDebugEnabled()) -->Line_18 $$ LOG.debug("Setting new length")[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_32 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_27 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_28 $$ DatanodeRegistration dnR = dn.getDNRegistrationForBP(poolId)[ FD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_35 $$ for (int i = 0; i < blocksAfterReport.size(); i++) [ FD ]
Line_26 $$ DataNode dn = cluster.getDataNodes().get(DN_N0)-->Line_29 $$ StorageBlockReport[] reports = getBlockReports(dn, poolId, false, false)[ FD ]
Line_26 $$ DataNode dn = cluster.getDataNodes().get(DN_N0)-->Line_28 $$ DatanodeRegistration dnR = dn.getDNRegistrationForBP(poolId)[ FD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_31 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_27 $$ String poolId = cluster.getNamesystem().getBlockPoolId()[ CD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_26 $$ DataNode dn = cluster.getDataNodes().get(DN_N0)[ CD ]
Line_27 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_29 $$ StorageBlockReport[] reports = getBlockReports(dn, poolId, false, false)[ FD ]
Line_4 $$ Path filePath = new Path("/" + METHOD_NAME + ".dat")-->Line_5 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)[ FD ]
Line_10 $$ int tempLen-->Line_20 $$ tempLen = rand.nextInt(BLOCK_SIZE)[ FD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_9 $$ long[] oldLengths = new long[blocks.size()][ CD ]
Line_35 $$ for (int i = 0; i < blocksAfterReport.size(); i++) -->Line_37 $$ assertEquals("Length of " + i + "th block is incorrect", oldLengths[i], b.getNumBytes())[ CD ]
Line_28 $$ DatanodeRegistration dnR = dn.getDNRegistrationForBP(poolId)-->Line_30 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_27 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_30 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_4 $$ Path filePath = new Path("/" + METHOD_NAME + ".dat")[ CD ]
Line_31 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))-->Line_33 $$ LOG.debug("After mods: Number of blocks allocated " + blocksAfterReport.size())[ FD ]
Line_31 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))-->Line_35 $$ for (int i = 0; i < blocksAfterReport.size(); i++) [ FD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_36 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()[ FD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_16 $$ oldLengths[i] = b.getNumBytes()[ CD ]
Line_12 $$ Block b = blocks.get(i)-->Line_37 $$ assertEquals("Length of " + i + "th block is incorrect", oldLengths[i], b.getNumBytes())[ FD ]
Line_29 $$ StorageBlockReport[] reports = getBlockReports(dn, poolId, false, false)-->Line_30 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_5 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)-->Line_9 $$ long[] oldLengths = new long[blocks.size()][ FD ]
Line_5 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)-->Line_11 $$ for (int i = 0; i < blocks.size(); i++) [ FD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_13 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_12 $$ Block b = blocks.get(i)-->Line_14 $$ LOG.debug("Block " + b.getBlockName() + " before\t" + "Size " + b.getNumBytes())[ FD ]
Line_11 $$ for (int i = 0; i < blocks.size(); i++) -->Line_12 $$ Block b = blocks.get(i)[ FD ]
Line_12 $$ Block b = blocks.get(i)-->Line_21 $$ b.set(b.getBlockId(), tempLen, b.getGenerationStamp())[ FD ]
Line_35 $$ for (int i = 0; i < blocksAfterReport.size(); i++) -->Line_36 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()[ FD ]
Line_2 $$ public void blockReport_01() throws IOException -->Line_28 $$ DatanodeRegistration dnR = dn.getDNRegistrationForBP(poolId)[ CD ]
Line_10 $$ int tempLen-->Line_21 $$ b.set(b.getBlockId(), tempLen, b.getGenerationStamp())[ FD ]
