Line_13 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)-->Line_17 $$ long[] oldLengths = new long[blocks.size()][ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_24 $$ oldLengths[i] = b.getNumBytes()[ CD ]
Line_36 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_37 $$ DatanodeRegistration dnR = dn.getDNRegistrationForBP(poolId)[ FD ]
Line_21 $$ if (LOG.isDebugEnabled()) -->Line_22 $$ LOG.debug("Block " + b.getBlockName() + " before\t" + "Size " + b.getNumBytes())[ CD ]
Line_11 $$ final String METHOD_NAME = GenericTestUtils.getMethodName()-->Line_13 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)[ FD ]
Line_20 $$ Block b = blocks.get(i)-->Line_31 $$ LOG.debug("Block " + b.getBlockName() + " after\t " + "Size " + b.getNumBytes())[ FD ]
Line_44 $$ for (int i = 0; i < blocksAfterReport.size(); i++) -->Line_46 $$ assertEquals("Length of " + i + "th block is incorrect", oldLengths[i], b.getNumBytes())[ CD ]
Line_13 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)-->Line_20 $$ Block b = blocks.get(i)[ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_29 $$ b.set(b.getBlockId(), tempLen, b.getGenerationStamp())[ CD ]
Line_45 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()-->Line_46 $$ assertEquals("Length of " + i + "th block is incorrect", oldLengths[i], b.getNumBytes())[ FD ]
Line_18 $$ int tempLen-->Line_28 $$ tempLen = rand.nextInt(BLOCK_SIZE)[ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_28 $$ tempLen = rand.nextInt(BLOCK_SIZE)[ CD ]
Line_36 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_38 $$ StorageBlockReport[] reports = getBlockReports(dn, poolId, false, false)[ FD ]
Line_12 $$ Path filePath = new Path("/" + METHOD_NAME + ".dat")-->Line_13 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)[ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_44 $$ for (int i = 0; i < blocksAfterReport.size(); i++) [ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_45 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()[ FD ]
Line_20 $$ Block b = blocks.get(i)-->Line_24 $$ oldLengths[i] = b.getNumBytes()[ FD ]
Line_38 $$ StorageBlockReport[] reports = getBlockReports(dn, poolId, false, false)-->Line_39 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_41 $$ if (LOG.isDebugEnabled()) -->Line_42 $$ LOG.debug("After mods: Number of blocks allocated " + blocksAfterReport.size())[ CD ]
Line_44 $$ for (int i = 0; i < blocksAfterReport.size(); i++) -->Line_45 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()[ FD ]
Line_20 $$ Block b = blocks.get(i)-->Line_29 $$ b.set(b.getBlockId(), tempLen, b.getGenerationStamp())[ FD ]
Line_25 $$ if (LOG.isDebugEnabled()) -->Line_26 $$ LOG.debug("Setting new length")[ CD ]
Line_14 $$ if (LOG.isDebugEnabled()) -->Line_15 $$ LOG.debug("Number of blocks allocated " + blocks.size())[ CD ]
Line_18 $$ int tempLen-->Line_29 $$ b.set(b.getBlockId(), tempLen, b.getGenerationStamp())[ FD ]
Line_20 $$ Block b = blocks.get(i)-->Line_46 $$ assertEquals("Length of " + i + "th block is incorrect", oldLengths[i], b.getNumBytes())[ FD ]
Line_40 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))-->Line_44 $$ for (int i = 0; i < blocksAfterReport.size(); i++) [ FD ]
Line_37 $$ DatanodeRegistration dnR = dn.getDNRegistrationForBP(poolId)-->Line_39 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_20 $$ Block b = blocks.get(i)[ CD ]
Line_36 $$ String poolId = cluster.getNamesystem().getBlockPoolId()-->Line_39 $$ sendBlockReports(dnR, poolId, reports)[ FD ]
Line_12 $$ Path filePath = new Path("/" + METHOD_NAME + ".dat")-->Line_40 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))[ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_25 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_13 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)-->Line_15 $$ LOG.debug("Number of blocks allocated " + blocks.size())[ FD ]
Line_13 $$ ArrayList<Block> blocks = prepareForRide(filePath, METHOD_NAME, FILE_SIZE)-->Line_19 $$ for (int i = 0; i < blocks.size(); i++) [ FD ]
Line_40 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))-->Line_42 $$ LOG.debug("After mods: Number of blocks allocated " + blocksAfterReport.size())[ FD ]
Line_20 $$ Block b = blocks.get(i)-->Line_22 $$ LOG.debug("Block " + b.getBlockName() + " before\t" + "Size " + b.getNumBytes())[ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_20 $$ Block b = blocks.get(i)[ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_21 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_28 $$ tempLen = rand.nextInt(BLOCK_SIZE)-->Line_29 $$ b.set(b.getBlockId(), tempLen, b.getGenerationStamp())[ FD ]
Line_19 $$ for (int i = 0; i < blocks.size(); i++) -->Line_30 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_44 $$ for (int i = 0; i < blocksAfterReport.size(); i++) -->Line_45 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()[ CD ]
Line_40 $$ List<LocatedBlock> blocksAfterReport = DFSTestUtil.getAllBlocks(fs.open(filePath))-->Line_45 $$ ExtendedBlock b = blocksAfterReport.get(i).getBlock()[ FD ]
Line_30 $$ if (LOG.isDebugEnabled()) -->Line_31 $$ LOG.debug("Block " + b.getBlockName() + " after\t " + "Size " + b.getNumBytes())[ CD ]
