Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()-->Line_29 $$ newnode = cluster.getDataNodes().get(REPLICATION)[ FD ]
Line_15 $$ final int len = bytes.length < remaining ? bytes.length : remaining-->Line_16 $$ out.write(bytes, 0, len)[ FD ]
Line_15 $$ final int len = bytes.length < remaining ? bytes.length : remaining-->Line_18 $$ remaining -= len[ FD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()-->Line_51 $$ cluster.shutdown()[ FD ]
Line_13 $$ for (int remaining = size; remaining > 0; ) -->Line_17 $$ out.hflush()[ CD ]
Line_29 $$ newnode = cluster.getDataNodes().get(REPLICATION)-->Line_35 $$ for (DatanodeRegistration dnReg = newnode.getDNRegistrationForBP(bpid); i < datatnodeinfos.length && !datatnodeinfos[i].equals(dnReg); i++) [ FD ]
Line_7 $$ final DistributedFileSystem fs = cluster.getFileSystem()-->Line_41 $$ final BlockOpResponseProto s = DFSTestUtil.transferRbw(b, DFSClientAdapter.getDFSClient(fs), oldnodeinfo, newnodeinfo)[ FD ]
Line_11 $$ final FSDataOutputStream out = fs.create(p, REPLICATION)-->Line_16 $$ out.write(bytes, 0, len)[ FD ]
Line_22 $$ final DatanodeInfo newnodeinfo-->Line_41 $$ final BlockOpResponseProto s = DFSTestUtil.transferRbw(b, DFSClientAdapter.getDFSClient(fs), oldnodeinfo, newnodeinfo)[ FD ]
Line_37 $$ newnodeinfo = datatnodeinfos[i]-->Line_41 $$ final BlockOpResponseProto s = DFSTestUtil.transferRbw(b, DFSClientAdapter.getDFSClient(fs), oldnodeinfo, newnodeinfo)[ FD ]
Line_44 $$ final ReplicaBeingWritten newrbw = getRbw(newnode, bpid)-->Line_48 $$ Assert.assertEquals(oldrbw.getVisibleLength(), newrbw.getVisibleLength())[ FD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()-->Line_28 $$ cluster.startDataNodes(conf, 1, true, null, null)[ FD ]
Line_13 $$ for (int remaining = size; remaining > 0; ) -->Line_18 $$ remaining -= len[ FD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()-->Line_25 $$ final DataNode oldnode = cluster.getDataNodes().get(0)[ FD ]
Line_20 $$ final ReplicaBeingWritten oldrbw-->Line_48 $$ Assert.assertEquals(oldrbw.getVisibleLength(), newrbw.getVisibleLength())[ FD ]
Line_12 $$ final byte[] bytes = new byte[1024]-->Line_14 $$ RAN.nextBytes(bytes)[ FD ]
Line_30 $$ final DatanodeInfo oldnodeinfo-->Line_41 $$ final BlockOpResponseProto s = DFSTestUtil.transferRbw(b, DFSClientAdapter.getDFSClient(fs), oldnodeinfo, newnodeinfo)[ FD ]
Line_41 $$ final BlockOpResponseProto s = DFSTestUtil.transferRbw(b, DFSClientAdapter.getDFSClient(fs), oldnodeinfo, newnodeinfo)-->Line_42 $$ Assert.assertEquals(Status.SUCCESS, s.getStatus())[ FD ]
Line_26 $$ oldrbw = getRbw(oldnode, bpid)-->Line_40 $$ final ExtendedBlock b = new ExtendedBlock(bpid, oldrbw.getBlockId(), oldrbw.getBytesAcked(), oldrbw.getGenerationStamp())[ FD ]
Line_20 $$ final ReplicaBeingWritten oldrbw-->Line_46 $$ Assert.assertEquals(oldrbw.getBlockId(), newrbw.getBlockId())[ FD ]
Line_20 $$ final ReplicaBeingWritten oldrbw-->Line_40 $$ final ExtendedBlock b = new ExtendedBlock(bpid, oldrbw.getBlockId(), oldrbw.getBytesAcked(), oldrbw.getGenerationStamp())[ FD ]
Line_11 $$ final FSDataOutputStream out = fs.create(p, REPLICATION)-->Line_17 $$ out.hflush()[ FD ]
Line_13 $$ for (int remaining = size; remaining > 0; ) -->Line_18 $$ remaining -= len[ CD ]
Line_8 $$ final Path p = new Path("/foo")-->Line_11 $$ final FSDataOutputStream out = fs.create(p, REPLICATION)[ FD ]
Line_23 $$ final String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_44 $$ final ReplicaBeingWritten newrbw = getRbw(newnode, bpid)[ FD ]
Line_26 $$ oldrbw = getRbw(oldnode, bpid)-->Line_46 $$ Assert.assertEquals(oldrbw.getBlockId(), newrbw.getBlockId())[ FD ]
Line_25 $$ final DataNode oldnode = cluster.getDataNodes().get(0)-->Line_26 $$ oldrbw = getRbw(oldnode, bpid)[ FD ]
Line_12 $$ final byte[] bytes = new byte[1024]-->Line_16 $$ out.write(bytes, 0, len)[ FD ]
Line_21 $$ final DataNode newnode-->Line_29 $$ newnode = cluster.getDataNodes().get(REPLICATION)[ FD ]
Line_7 $$ final DistributedFileSystem fs = cluster.getFileSystem()-->Line_11 $$ final FSDataOutputStream out = fs.create(p, REPLICATION)[ FD ]
Line_2 $$ public void testTransferRbw() throws Exception -->Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()[ CD ]
Line_23 $$ final String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_35 $$ for (DatanodeRegistration dnReg = newnode.getDNRegistrationForBP(bpid); i < datatnodeinfos.length && !datatnodeinfos[i].equals(dnReg); i++) [ FD ]
Line_29 $$ newnode = cluster.getDataNodes().get(REPLICATION)-->Line_44 $$ final ReplicaBeingWritten newrbw = getRbw(newnode, bpid)[ FD ]
Line_44 $$ final ReplicaBeingWritten newrbw = getRbw(newnode, bpid)-->Line_46 $$ Assert.assertEquals(oldrbw.getBlockId(), newrbw.getBlockId())[ FD ]
Line_26 $$ oldrbw = getRbw(oldnode, bpid)-->Line_48 $$ Assert.assertEquals(oldrbw.getVisibleLength(), newrbw.getVisibleLength())[ FD ]
Line_13 $$ for (int remaining = size; remaining > 0; ) -->Line_14 $$ RAN.nextBytes(bytes)[ CD ]
Line_20 $$ final ReplicaBeingWritten oldrbw-->Line_47 $$ Assert.assertEquals(oldrbw.getGenerationStamp(), newrbw.getGenerationStamp())[ FD ]
Line_44 $$ final ReplicaBeingWritten newrbw = getRbw(newnode, bpid)-->Line_47 $$ Assert.assertEquals(oldrbw.getGenerationStamp(), newrbw.getGenerationStamp())[ FD ]
Line_38 $$ oldnodeinfo = datatnodeinfos[1 - i]-->Line_41 $$ final BlockOpResponseProto s = DFSTestUtil.transferRbw(b, DFSClientAdapter.getDFSClient(fs), oldnodeinfo, newnodeinfo)[ FD ]
Line_21 $$ final DataNode newnode-->Line_44 $$ final ReplicaBeingWritten newrbw = getRbw(newnode, bpid)[ FD ]
Line_13 $$ for (int remaining = size; remaining > 0; ) -->Line_16 $$ out.write(bytes, 0, len)[ CD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()-->Line_23 $$ final String bpid = cluster.getNamesystem().getBlockPoolId()[ FD ]
Line_3 $$ final HdfsConfiguration conf = new HdfsConfiguration()-->Line_28 $$ cluster.startDataNodes(conf, 1, true, null, null)[ FD ]
Line_34 $$ int i = 0-->Line_35 $$ for (DatanodeRegistration dnReg = newnode.getDNRegistrationForBP(bpid); i < datatnodeinfos.length && !datatnodeinfos[i].equals(dnReg); i++) [ FD ]
Line_2 $$ public void testTransferRbw() throws Exception -->Line_3 $$ final HdfsConfiguration conf = new HdfsConfiguration()[ CD ]
Line_22 $$ final DatanodeInfo newnodeinfo-->Line_37 $$ newnodeinfo = datatnodeinfos[i][ FD ]
Line_30 $$ final DatanodeInfo oldnodeinfo-->Line_38 $$ oldnodeinfo = datatnodeinfos[1 - i][ FD ]
Line_40 $$ final ExtendedBlock b = new ExtendedBlock(bpid, oldrbw.getBlockId(), oldrbw.getBytesAcked(), oldrbw.getGenerationStamp())-->Line_41 $$ final BlockOpResponseProto s = DFSTestUtil.transferRbw(b, DFSClientAdapter.getDFSClient(fs), oldnodeinfo, newnodeinfo)[ FD ]
Line_21 $$ final DataNode newnode-->Line_35 $$ for (DatanodeRegistration dnReg = newnode.getDNRegistrationForBP(bpid); i < datatnodeinfos.length && !datatnodeinfos[i].equals(dnReg); i++) [ FD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()-->Line_32 $$ final DatanodeInfo[] datatnodeinfos = cluster.getNameNodeRpc().getDatanodeReport(DatanodeReportType.LIVE)[ FD ]
Line_26 $$ oldrbw = getRbw(oldnode, bpid)-->Line_47 $$ Assert.assertEquals(oldrbw.getGenerationStamp(), newrbw.getGenerationStamp())[ FD ]
Line_13 $$ for (int remaining = size; remaining > 0; ) -->Line_15 $$ final int len = bytes.length < remaining ? bytes.length : remaining[ CD ]
Line_18 $$ remaining -= len-->Line_13 $$ for (int remaining = size; remaining > 0; ) [ FD ]
Line_20 $$ final ReplicaBeingWritten oldrbw-->Line_26 $$ oldrbw = getRbw(oldnode, bpid)[ FD ]
Line_23 $$ final String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_26 $$ oldrbw = getRbw(oldnode, bpid)[ FD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()-->Line_6 $$ cluster.waitActive()[ FD ]
Line_4 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(REPLICATION).build()-->Line_7 $$ final DistributedFileSystem fs = cluster.getFileSystem()[ FD ]
