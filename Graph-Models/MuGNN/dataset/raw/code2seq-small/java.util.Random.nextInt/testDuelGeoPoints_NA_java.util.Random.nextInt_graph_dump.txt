Line_29 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_31 $$ typeMap.put(new FieldDataType("geo_point", Settings.builder().put("format", "array")), Type.GeoPoint)[ FD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_10 $$ double defaultLon = randomDouble() * 360 - 180[ CD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_3 $$ final String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("geopoint").field("type", "geo_point").startObject("fielddata").field("format", "doc_values").endObject().endObject().endObject().endObject().endObject().string()[ CD ]
Line_35 $$ Entry<FieldDataType, Type> left-->Line_41 $$ right = left = list.remove(0)[ FD ]
Line_4 $$ final DocumentMapper mapper = mapperService.documentMapperParser().parse("type", new CompressedXContent(mapping))-->Line_22 $$ final ParsedDocument d = mapper.parse("test", "type", Integer.toString(i), doc.bytes())[ FD ]
Line_49 $$ DirectoryReader perSegment = DirectoryReader.open(writer, true)-->Line_50 $$ CompositeReaderContext composite = perSegment.getContext()[ FD ]
Line_11 $$ for (int i = 0; i < atLeast; i++) -->Line_22 $$ final ParsedDocument d = mapper.parse("test", "type", Integer.toString(i), doc.bytes())[ FD ]
Line_10 $$ double defaultLon = randomDouble() * 360 - 180-->Line_16 $$ doc.startObject().field("lat", defaultLat).field("lon", defaultLon).endObject()[ FD ]
Line_13 $$ XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startArray("geopoint")-->Line_18 $$ doc.startObject().field("lat", randomDouble() * 180 - 90).field("lon", randomDouble() * 360 - 180).endObject()[ FD ]
Line_44 $$ IndexGeoPointFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))-->Line_48 $$ duelFieldDataGeoPoint(random, context, rightFieldData, leftFieldData, precision)[ FD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_7 $$ int maxValuesPerDoc = randomBoolean() ? 1 : randomIntBetween(2, 10)[ CD ]
Line_36 $$ Entry<FieldDataType, Type> right-->Line_41 $$ right = left = list.remove(0)[ FD ]
Line_21 $$ doc = doc.endArray().endObject()-->Line_22 $$ final ParsedDocument d = mapper.parse("test", "type", Integer.toString(i), doc.bytes())[ FD ]
Line_44 $$ IndexGeoPointFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))-->Line_53 $$ duelFieldDataGeoPoint(random, atomicReaderContext, leftFieldData, rightFieldData, precision)[ FD ]
Line_34 $$ while (!list.isEmpty()) -->Line_51 $$ List<LeafReaderContext> leaves = composite.leaves()[ CD ]
Line_29 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_33 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())[ FD ]
Line_44 $$ IndexGeoPointFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))-->Line_47 $$ duelFieldDataGeoPoint(random, context, leftFieldData, rightFieldData, precision)[ FD ]
Line_33 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_39 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_5 $$ Random random = getRandom()-->Line_48 $$ duelFieldDataGeoPoint(random, context, rightFieldData, leftFieldData, precision)[ FD ]
Line_34 $$ while (!list.isEmpty()) -->Line_46 $$ IndexGeoPointFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))[ CD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_11 $$ for (int i = 0; i < atLeast; i++) [ CD ]
Line_33 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_41 $$ right = left = list.remove(0)[ FD ]
Line_35 $$ Entry<FieldDataType, Type> left-->Line_44 $$ IndexGeoPointFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_5 $$ Random random = getRandom()-->Line_24 $$ if (random.nextInt(10) == 0) [ FD ]
Line_6 $$ int atLeast = scaledRandomIntBetween(200, 1500)-->Line_11 $$ for (int i = 0; i < atLeast; i++) [ FD ]
Line_5 $$ Random random = getRandom()-->Line_39 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_7 $$ int maxValuesPerDoc = randomBoolean() ? 1 : randomIntBetween(2, 10)-->Line_12 $$ final int numValues = randomInt(maxValuesPerDoc)[ FD ]
Line_33 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_34 $$ while (!list.isEmpty()) [ FD ]
Line_30 $$ final Distance precision = new Distance(1, randomFrom(DistanceUnit.values()))-->Line_48 $$ duelFieldDataGeoPoint(random, context, rightFieldData, leftFieldData, precision)[ FD ]
Line_34 $$ while (!list.isEmpty()) -->Line_36 $$ Entry<FieldDataType, Type> right[ CD ]
Line_33 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_38 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_24 $$ if (random.nextInt(10) == 0) -->Line_25 $$ refreshReader()[ CD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_6 $$ int atLeast = scaledRandomIntBetween(200, 1500)[ CD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_4 $$ final DocumentMapper mapper = mapperService.documentMapperParser().parse("type", new CompressedXContent(mapping))[ CD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_33 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())[ CD ]
Line_34 $$ while (!list.isEmpty()) -->Line_50 $$ CompositeReaderContext composite = perSegment.getContext()[ CD ]
Line_46 $$ IndexGeoPointFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))-->Line_53 $$ duelFieldDataGeoPoint(random, atomicReaderContext, leftFieldData, rightFieldData, precision)[ FD ]
Line_30 $$ final Distance precision = new Distance(1, randomFrom(DistanceUnit.values()))-->Line_47 $$ duelFieldDataGeoPoint(random, context, leftFieldData, rightFieldData, precision)[ FD ]
Line_5 $$ Random random = getRandom()-->Line_53 $$ duelFieldDataGeoPoint(random, atomicReaderContext, leftFieldData, rightFieldData, precision)[ FD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_31 $$ typeMap.put(new FieldDataType("geo_point", Settings.builder().put("format", "array")), Type.GeoPoint)[ CD ]
Line_28 $$ LeafReaderContext context = refreshReader()-->Line_47 $$ duelFieldDataGeoPoint(random, context, leftFieldData, rightFieldData, precision)[ FD ]
Line_14 $$ for (int j = 0; j < numValues; ++j) -->Line_15 $$ if (randomBoolean()) [ CD ]
Line_34 $$ while (!list.isEmpty()) -->Line_55 $$ perSegment.close()[ CD ]
Line_36 $$ Entry<FieldDataType, Type> right-->Line_46 $$ IndexGeoPointFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_34 $$ while (!list.isEmpty()) -->Line_47 $$ duelFieldDataGeoPoint(random, context, leftFieldData, rightFieldData, precision)[ CD ]
Line_34 $$ while (!list.isEmpty()) -->Line_35 $$ Entry<FieldDataType, Type> left[ CD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_34 $$ while (!list.isEmpty()) [ CD ]
Line_34 $$ while (!list.isEmpty()) -->Line_48 $$ duelFieldDataGeoPoint(random, context, rightFieldData, leftFieldData, precision)[ CD ]
Line_34 $$ while (!list.isEmpty()) -->Line_49 $$ DirectoryReader perSegment = DirectoryReader.open(writer, true)[ CD ]
Line_49 $$ DirectoryReader perSegment = DirectoryReader.open(writer, true)-->Line_55 $$ perSegment.close()[ FD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_29 $$ Map<FieldDataType, Type> typeMap = new HashMap()[ CD ]
Line_28 $$ LeafReaderContext context = refreshReader()-->Line_48 $$ duelFieldDataGeoPoint(random, context, rightFieldData, leftFieldData, precision)[ FD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_32 $$ typeMap.put(new FieldDataType("geo_point", Settings.builder().put("format", "doc_values")), Type.GeoPoint)[ CD ]
Line_13 $$ XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startArray("geopoint")-->Line_16 $$ doc.startObject().field("lat", defaultLat).field("lon", defaultLon).endObject()[ FD ]
Line_5 $$ Random random = getRandom()-->Line_47 $$ duelFieldDataGeoPoint(random, context, leftFieldData, rightFieldData, precision)[ FD ]
Line_34 $$ while (!list.isEmpty()) -->Line_44 $$ IndexGeoPointFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))[ CD ]
Line_11 $$ for (int i = 0; i < atLeast; i++) -->Line_13 $$ XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startArray("geopoint")[ CD ]
Line_41 $$ right = left = list.remove(0)-->Line_44 $$ IndexGeoPointFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_28 $$ LeafReaderContext context = refreshReader()[ CD ]
Line_34 $$ while (!list.isEmpty()) -->Line_45 $$ ifdService.clear()[ CD ]
Line_35 $$ Entry<FieldDataType, Type> left-->Line_38 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_50 $$ CompositeReaderContext composite = perSegment.getContext()-->Line_51 $$ List<LeafReaderContext> leaves = composite.leaves()[ FD ]
Line_30 $$ final Distance precision = new Distance(1, randomFrom(DistanceUnit.values()))-->Line_53 $$ duelFieldDataGeoPoint(random, atomicReaderContext, leftFieldData, rightFieldData, precision)[ FD ]
Line_13 $$ XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startArray("geopoint")-->Line_21 $$ doc = doc.endArray().endObject()[ FD ]
Line_11 $$ for (int i = 0; i < atLeast; i++) -->Line_12 $$ final int numValues = randomInt(maxValuesPerDoc)[ CD ]
Line_11 $$ for (int i = 0; i < atLeast; i++) -->Line_22 $$ final ParsedDocument d = mapper.parse("test", "type", Integer.toString(i), doc.bytes())[ CD ]
Line_11 $$ for (int i = 0; i < atLeast; i++) -->Line_21 $$ doc = doc.endArray().endObject()[ CD ]
Line_46 $$ IndexGeoPointFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))-->Line_48 $$ duelFieldDataGeoPoint(random, context, rightFieldData, leftFieldData, precision)[ FD ]
Line_37 $$ if (list.size() > 1) -->Line_39 $$ right = list.remove(random.nextInt(list.size()))[ CD ]
Line_11 $$ for (int i = 0; i < atLeast; i++) -->Line_14 $$ for (int j = 0; j < numValues; ++j) [ CD ]
Line_52 $$ for (LeafReaderContext atomicReaderContext : leaves) -->Line_53 $$ duelFieldDataGeoPoint(random, atomicReaderContext, leftFieldData, rightFieldData, precision)[ FD ]
Line_29 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_32 $$ typeMap.put(new FieldDataType("geo_point", Settings.builder().put("format", "doc_values")), Type.GeoPoint)[ FD ]
Line_39 $$ right = list.remove(random.nextInt(list.size()))-->Line_41 $$ right = left = list.remove(0)[ FD ]
Line_46 $$ IndexGeoPointFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))-->Line_47 $$ duelFieldDataGeoPoint(random, context, leftFieldData, rightFieldData, precision)[ FD ]
Line_15 $$ if (randomBoolean()) -->Line_18 $$ doc.startObject().field("lat", randomDouble() * 180 - 90).field("lon", randomDouble() * 360 - 180).endObject()[ CD ]
Line_39 $$ right = list.remove(random.nextInt(list.size()))-->Line_46 $$ IndexGeoPointFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_41 $$ right = left = list.remove(0)-->Line_46 $$ IndexGeoPointFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_5 $$ Random random = getRandom()[ CD ]
Line_5 $$ Random random = getRandom()-->Line_38 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_33 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_37 $$ if (list.size() > 1) [ FD ]
Line_38 $$ left = list.remove(random.nextInt(list.size()))-->Line_44 $$ IndexGeoPointFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_34 $$ while (!list.isEmpty()) -->Line_43 $$ ifdService.clear()[ CD ]
Line_15 $$ if (randomBoolean()) -->Line_16 $$ doc.startObject().field("lat", defaultLat).field("lon", defaultLon).endObject()[ CD ]
Line_34 $$ while (!list.isEmpty()) -->Line_37 $$ if (list.size() > 1) [ CD ]
Line_37 $$ if (list.size() > 1) -->Line_38 $$ left = list.remove(random.nextInt(list.size()))[ CD ]
Line_13 $$ XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startArray("geopoint")-->Line_22 $$ final ParsedDocument d = mapper.parse("test", "type", Integer.toString(i), doc.bytes())[ FD ]
Line_37 $$ if (list.size() > 1) -->Line_41 $$ right = left = list.remove(0)[ CD ]
Line_2 $$ public void testDuelGeoPoints() throws Exception -->Line_30 $$ final Distance precision = new Distance(1, randomFrom(DistanceUnit.values()))[ CD ]
Line_11 $$ for (int i = 0; i < atLeast; i++) -->Line_23 $$ writer.addDocument(d.rootDoc())[ CD ]
Line_38 $$ left = list.remove(random.nextInt(list.size()))-->Line_41 $$ right = left = list.remove(0)[ FD ]
Line_11 $$ for (int i = 0; i < atLeast; i++) -->Line_24 $$ if (random.nextInt(10) == 0) [ CD ]
Line_36 $$ Entry<FieldDataType, Type> right-->Line_39 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_12 $$ final int numValues = randomInt(maxValuesPerDoc)-->Line_14 $$ for (int j = 0; j < numValues; ++j) [ FD ]
