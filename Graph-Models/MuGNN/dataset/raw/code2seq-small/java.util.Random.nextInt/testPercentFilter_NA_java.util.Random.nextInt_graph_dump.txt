Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_13 $$ if (expectedCount * 1000 != length)[ FD ]
Line_13 $$ if (expectedCount * 1000 != length)-->Line_14 $$ expectedCount++[ CD ]
Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_10 $$ int count = countRecords(1)[ CD ]
Line_12 $$ int expectedCount = length / 1000-->Line_14 $$ expectedCount++[ FD ]
Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_9 $$ createSequenceFile(length)[ FD ]
Line_2 $$ public void testPercentFilter() throws Exception -->Line_5 $$ SequenceFileInputFilter.PercentFilter.setFrequency(job.getConfiguration(), 1000)[ CD ]
Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_11 $$ LOG.info("Accepted " + count + " records")[ CD ]
Line_2 $$ public void testPercentFilter() throws Exception -->Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) [ CD ]
Line_2 $$ public void testPercentFilter() throws Exception -->Line_3 $$ LOG.info("Testing Percent Filter with frequency: 1000")[ CD ]
Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_15 $$ assertEquals(count, expectedCount)[ CD ]
Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_13 $$ if (expectedCount * 1000 != length)[ CD ]
Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_8 $$ LOG.info("******Number of records: " + length)[ CD ]
Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_12 $$ int expectedCount = length / 1000[ CD ]
Line_10 $$ int count = countRecords(1)-->Line_15 $$ assertEquals(count, expectedCount)[ FD ]
Line_7 $$ for (int length = 0; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_9 $$ createSequenceFile(length)[ CD ]
Line_2 $$ public void testPercentFilter() throws Exception -->Line_6 $$ fs.delete(inDir, true)[ CD ]
Line_2 $$ public void testPercentFilter() throws Exception -->Line_17 $$ fs.delete(inDir, true)[ CD ]
Line_2 $$ public void testPercentFilter() throws Exception -->Line_4 $$ SequenceFileInputFilter.setFilterClass(job, SequenceFileInputFilter.PercentFilter.class)[ CD ]
Line_12 $$ int expectedCount = length / 1000-->Line_15 $$ assertEquals(count, expectedCount)[ FD ]
