Line_5 $$ for (int i = 0; i < numRuns; i++) -->Line_11 $$ JobClient.runJob(jobConf)[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(masterJobConf)-->Line_9 $$ LOG.info("Running job " + i + ":" + " input=" + FileInputFormat.getInputPaths(jobConf)[0] + " output=" + FileOutputFormat.getOutputPath(jobConf))[ FD ]
Line_2 $$ private ArrayList<Long> runJobInSequence(JobConf masterJobConf, int numRuns) throws IOException -->Line_7 $$ jobConf.setJar(masterJobConf.getJar())[ FD ]
Line_5 $$ for (int i = 0; i < numRuns; i++) -->Line_8 $$ FileOutputFormat.setOutputPath(jobConf, new Path(OUTPUT_DIR, "output_" + rand.nextInt()))[ CD ]
Line_5 $$ for (int i = 0; i < numRuns; i++) -->Line_10 $$ long curTime = System.currentTimeMillis()[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(masterJobConf)-->Line_11 $$ JobClient.runJob(jobConf)[ FD ]
Line_2 $$ private ArrayList<Long> runJobInSequence(JobConf masterJobConf, int numRuns) throws IOException -->Line_5 $$ for (int i = 0; i < numRuns; i++) [ CD ]
Line_4 $$ ArrayList<Long> execTimes = new ArrayList<Long>()-->Line_12 $$ execTimes.add(new Long(System.currentTimeMillis() - curTime))[ FD ]
Line_2 $$ private ArrayList<Long> runJobInSequence(JobConf masterJobConf, int numRuns) throws IOException -->Line_4 $$ ArrayList<Long> execTimes = new ArrayList<Long>()[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(masterJobConf)-->Line_7 $$ jobConf.setJar(masterJobConf.getJar())[ FD ]
Line_2 $$ private ArrayList<Long> runJobInSequence(JobConf masterJobConf, int numRuns) throws IOException -->Line_5 $$ for (int i = 0; i < numRuns; i++) [ FD ]
Line_2 $$ private ArrayList<Long> runJobInSequence(JobConf masterJobConf, int numRuns) throws IOException -->Line_14 $$ return execTimes[ CD ]
Line_5 $$ for (int i = 0; i < numRuns; i++) -->Line_12 $$ execTimes.add(new Long(System.currentTimeMillis() - curTime))[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(masterJobConf)-->Line_8 $$ FileOutputFormat.setOutputPath(jobConf, new Path(OUTPUT_DIR, "output_" + rand.nextInt()))[ FD ]
Line_3 $$ Random rand = new Random()-->Line_8 $$ FileOutputFormat.setOutputPath(jobConf, new Path(OUTPUT_DIR, "output_" + rand.nextInt()))[ FD ]
Line_5 $$ for (int i = 0; i < numRuns; i++) -->Line_9 $$ LOG.info("Running job " + i + ":" + " input=" + FileInputFormat.getInputPaths(jobConf)[0] + " output=" + FileOutputFormat.getOutputPath(jobConf))[ CD ]
Line_5 $$ for (int i = 0; i < numRuns; i++) -->Line_7 $$ jobConf.setJar(masterJobConf.getJar())[ CD ]
Line_5 $$ for (int i = 0; i < numRuns; i++) -->Line_6 $$ JobConf jobConf = new JobConf(masterJobConf)[ CD ]
Line_2 $$ private ArrayList<Long> runJobInSequence(JobConf masterJobConf, int numRuns) throws IOException -->Line_3 $$ Random rand = new Random()[ CD ]
