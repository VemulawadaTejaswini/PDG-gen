Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_28 $$ bos.write((byte) (theValue >>> 8))[ FD ]
Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_22 $$ bos.write((byte) (theValue >>> 56))[ FD ]
Line_12 $$ Random r = new Random(seed)-->Line_20 $$ theValue = r.nextLong()[ FD ]
Line_7 $$ for (int tid = 0; tid < threadCount; tid++) -->Line_38 $$ threads[tid].start()[ CD ]
Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_24 $$ bos.write((byte) (theValue >>> 40))[ FD ]
Line_14 $$ for (int i = 0; i < 10; i++) -->Line_18 $$ for (int j = 0; j < numLongs; j++) [ CD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_24 $$ bos.write((byte) (theValue >>> 40))[ CD ]
Line_17 $$ long theValue = r.nextLong()-->Line_20 $$ theValue = r.nextLong()[ FD ]
Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_25 $$ bos.write((byte) (theValue >>> 32))[ FD ]
Line_2 $$ public void testRepetitionsLThreads() throws Exception -->Line_7 $$ for (int tid = 0; tid < threadCount; tid++) [ CD ]
Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_27 $$ bos.write((byte) (theValue >>> 16))[ FD ]
Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_23 $$ bos.write((byte) (theValue >>> 48))[ FD ]
Line_14 $$ for (int i = 0; i < 10; i++) -->Line_15 $$ int numLongs = TestUtil.nextInt(r, 1, 10000)[ CD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_25 $$ bos.write((byte) (theValue >>> 32))[ CD ]
Line_3 $$ final Random r = getRandom()-->Line_8 $$ final long seed = r.nextLong()[ FD ]
Line_7 $$ for (int tid = 0; tid < threadCount; tid++) -->Line_8 $$ final long seed = r.nextLong()[ CD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_19 $$ if (r.nextInt(10) == 0) [ CD ]
Line_3 $$ final Random r = getRandom()-->Line_19 $$ if (r.nextInt(10) == 0) [ FD ]
Line_3 $$ final Random r = getRandom()-->Line_20 $$ theValue = r.nextLong()[ FD ]
Line_12 $$ Random r = new Random(seed)-->Line_17 $$ long theValue = r.nextLong()[ FD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_26 $$ bos.write((byte) (theValue >>> 24))[ CD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_29 $$ bos.write((byte) theValue)[ CD ]
Line_15 $$ int numLongs = TestUtil.nextInt(r, 1, 10000)-->Line_18 $$ for (int j = 0; j < numLongs; j++) [ FD ]
Line_2 $$ public void testRepetitionsLThreads() throws Exception -->Line_3 $$ final Random r = getRandom()[ CD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_28 $$ bos.write((byte) (theValue >>> 8))[ CD ]
Line_6 $$ final CountDownLatch startingGun = new CountDownLatch(1)-->Line_40 $$ startingGun.countDown()[ FD ]
Line_3 $$ final Random r = getRandom()-->Line_17 $$ long theValue = r.nextLong()[ FD ]
Line_2 $$ public void testRepetitionsLThreads() throws Exception -->Line_5 $$ Thread[] threads = new Thread[threadCount][ CD ]
Line_12 $$ Random r = new Random(seed)-->Line_19 $$ if (r.nextInt(10) == 0) [ FD ]
Line_2 $$ public void testRepetitionsLThreads() throws Exception -->Line_6 $$ final CountDownLatch startingGun = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testRepetitionsLThreads() throws Exception -->Line_4 $$ int threadCount = TestUtil.nextInt(r, 2, 6)[ CD ]
Line_6 $$ final CountDownLatch startingGun = new CountDownLatch(1)-->Line_13 $$ startingGun.await()[ FD ]
Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_31 $$ doTest(bos.toByteArray())[ FD ]
Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_26 $$ bos.write((byte) (theValue >>> 24))[ FD ]
Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_29 $$ bos.write((byte) theValue)[ FD ]
Line_2 $$ public void testRepetitionsLThreads() throws Exception -->Line_40 $$ startingGun.countDown()[ CD ]
Line_4 $$ int threadCount = TestUtil.nextInt(r, 2, 6)-->Line_7 $$ for (int tid = 0; tid < threadCount; tid++) [ FD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_23 $$ bos.write((byte) (theValue >>> 48))[ CD ]
Line_14 $$ for (int i = 0; i < 10; i++) -->Line_17 $$ long theValue = r.nextLong()[ CD ]
Line_3 $$ final Random r = getRandom()-->Line_15 $$ int numLongs = TestUtil.nextInt(r, 1, 10000)[ FD ]
Line_14 $$ for (int i = 0; i < 10; i++) -->Line_16 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()[ CD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_22 $$ bos.write((byte) (theValue >>> 56))[ CD ]
Line_18 $$ for (int j = 0; j < numLongs; j++) -->Line_27 $$ bos.write((byte) (theValue >>> 16))[ CD ]
Line_3 $$ final Random r = getRandom()-->Line_4 $$ int threadCount = TestUtil.nextInt(r, 2, 6)[ FD ]
Line_7 $$ for (int tid = 0; tid < threadCount; tid++) -->Line_9 $$ threads[tid] = new Thread() [ CD ]
Line_14 $$ for (int i = 0; i < 10; i++) -->Line_31 $$ doTest(bos.toByteArray())[ CD ]
Line_19 $$ if (r.nextInt(10) == 0) -->Line_20 $$ theValue = r.nextLong()[ CD ]
Line_12 $$ Random r = new Random(seed)-->Line_15 $$ int numLongs = TestUtil.nextInt(r, 1, 10000)[ FD ]
