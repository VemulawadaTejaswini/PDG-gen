Line_4 $$ if (maxDepth > 0) -->Line_7 $$ int numOfSubDirs = minWidth + r.nextInt(maxWidth - minWidth + 1)[ CD ]
Line_4 $$ if (maxDepth > 0) -->Line_6 $$ int minDepth = maxDepth * 2 / 3[ CD ]
Line_2 $$ private INode genDirStructure(String rootName, int maxDepth) -->Line_4 $$ if (maxDepth > 0) [ CD ]
Line_2 $$ private INode genDirStructure(String rootName, int maxDepth) -->Line_3 $$ INode root = new INode(rootName)[ CD ]
Line_10 $$ INode child = genDirStructure("dir" + i, childDepth)-->Line_11 $$ root.addChild(child)[ FD ]
Line_9 $$ int childDepth = (maxDepth == 0) ? 0 : (r.nextInt(maxDepth - minDepth + 1) + minDepth)-->Line_10 $$ INode child = genDirStructure("dir" + i, childDepth)[ FD ]
Line_4 $$ if (maxDepth > 0) -->Line_8 $$ for (int i = 0; i < numOfSubDirs; i++) [ CD ]
Line_7 $$ int numOfSubDirs = minWidth + r.nextInt(maxWidth - minWidth + 1)-->Line_8 $$ for (int i = 0; i < numOfSubDirs; i++) [ FD ]
Line_2 $$ private INode genDirStructure(String rootName, int maxDepth) -->Line_5 $$ maxDepth--[ FD ]
Line_8 $$ for (int i = 0; i < numOfSubDirs; i++) -->Line_10 $$ INode child = genDirStructure("dir" + i, childDepth)[ CD ]
Line_8 $$ for (int i = 0; i < numOfSubDirs; i++) -->Line_11 $$ root.addChild(child)[ CD ]
Line_2 $$ private INode genDirStructure(String rootName, int maxDepth) -->Line_14 $$ return root[ CD ]
Line_4 $$ if (maxDepth > 0) -->Line_5 $$ maxDepth--[ CD ]
Line_3 $$ INode root = new INode(rootName)-->Line_11 $$ root.addChild(child)[ FD ]
Line_8 $$ for (int i = 0; i < numOfSubDirs; i++) -->Line_9 $$ int childDepth = (maxDepth == 0) ? 0 : (r.nextInt(maxDepth - minDepth + 1) + minDepth)[ CD ]
Line_2 $$ private INode genDirStructure(String rootName, int maxDepth) -->Line_4 $$ if (maxDepth > 0) [ FD ]
