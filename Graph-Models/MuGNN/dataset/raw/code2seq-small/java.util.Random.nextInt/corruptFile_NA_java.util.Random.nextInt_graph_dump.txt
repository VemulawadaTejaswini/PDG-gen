Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_41 $$ assertThat("no file corrupted", fileToCorrupt, notNullValue())[ FD ]
Line_6 $$ try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) -->Line_26 $$ try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) [ FD ]
Line_24 $$ long checksumAfterCorruption-->Line_29 $$ checksumAfterCorruption = input.getChecksum()[ FD ]
Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_26 $$ try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) [ FD ]
Line_32 $$ StringBuilder msg = new StringBuilder()-->Line_33 $$ msg.append("Checksum before: [").append(checksumBeforeCorruption).append("]")[ FD ]
Line_2 $$ public static void corruptFile(Random random, Path... files) throws IOException -->Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)[ CD ]
Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_5 $$ assertTrue(fileToCorrupt + " is not a file", Files.isRegularFile(fileToCorrupt))[ FD ]
Line_2 $$ public static void corruptFile(Random random, Path... files) throws IOException -->Line_3 $$ assertTrue("files must be non-empty", files.length > 0)[ CD ]
Line_14 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_16 $$ bb.flip()[ FD ]
Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_6 $$ try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) [ FD ]
Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_22 $$ logger.info("Corrupting file --  flipping at position [ FD ]
Line_25 $$ long actualChecksumAfterCorruption-->Line_35 $$ msg.append(" checksum value after corruption: ").append(actualChecksumAfterCorruption).append("]")[ FD ]
Line_14 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_21 $$ raf.write(bb)[ FD ]
Line_9 $$ checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)-->Line_33 $$ msg.append("Checksum before: [").append(checksumBeforeCorruption).append("]")[ FD ]
Line_11 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) -->Line_13 $$ long filePointer = raf.position()[ FD ]
Line_17 $$ byte oldValue = bb.get(0)-->Line_22 $$ logger.info("Corrupting file --  flipping at position [ FD ]
Line_8 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_27 $$ assertThat(input.getFilePointer(), is(0l))[ FD ]
Line_32 $$ StringBuilder msg = new StringBuilder()-->Line_38 $$ assumeTrue("Checksum collision - " + msg.toString(), checksumAfterCorruption != checksumBeforeCorruption || actualChecksumAfterCorruption != checksumBeforeCorruption)[ FD ]
Line_18 $$ byte newValue = (byte) (oldValue + 1)-->Line_22 $$ logger.info("Corrupting file --  flipping at position [ FD ]
Line_14 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_17 $$ byte oldValue = bb.get(0)[ FD ]
Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_36 $$ msg.append(" file: ").append(fileToCorrupt.getFileName()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()))[ FD ]
Line_14 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_19 $$ bb.put(0, newValue)[ FD ]
Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_11 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) [ FD ]
Line_14 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_15 $$ raf.read(bb)[ FD ]
Line_11 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) -->Line_12 $$ raf.position(random.nextInt((int) Math.min(Integer.MAX_VALUE, raf.size())))[ FD ]
Line_29 $$ checksumAfterCorruption = input.getChecksum()-->Line_34 $$ msg.append(" after: [").append(checksumAfterCorruption).append("]")[ FD ]
Line_6 $$ try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) -->Line_36 $$ msg.append(" file: ").append(fileToCorrupt.getFileName()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()))[ FD ]
Line_18 $$ byte newValue = (byte) (oldValue + 1)-->Line_19 $$ bb.put(0, newValue)[ FD ]
Line_6 $$ try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) -->Line_8 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) [ FD ]
Line_13 $$ long filePointer = raf.position()-->Line_22 $$ logger.info("Corrupting file --  flipping at position [ FD ]
Line_32 $$ StringBuilder msg = new StringBuilder()-->Line_37 $$ logger.info(msg.toString())[ FD ]
Line_13 $$ long filePointer = raf.position()-->Line_20 $$ raf.position(filePointer)[ FD ]
Line_11 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) -->Line_21 $$ raf.write(bb)[ FD ]
Line_30 $$ actualChecksumAfterCorruption = input.readLong()-->Line_35 $$ msg.append(" checksum value after corruption: ").append(actualChecksumAfterCorruption).append("]")[ FD ]
Line_8 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_29 $$ checksumAfterCorruption = input.getChecksum()[ FD ]
Line_2 $$ public static void corruptFile(Random random, Path... files) throws IOException -->Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)[ FD ]
Line_8 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_30 $$ actualChecksumAfterCorruption = input.readLong()[ FD ]
Line_25 $$ long actualChecksumAfterCorruption-->Line_30 $$ actualChecksumAfterCorruption = input.readLong()[ FD ]
Line_32 $$ StringBuilder msg = new StringBuilder()-->Line_36 $$ msg.append(" file: ").append(fileToCorrupt.getFileName()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()))[ FD ]
Line_8 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_28 $$ input.seek(input.length() - 8)[ FD ]
Line_11 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) -->Line_20 $$ raf.position(filePointer)[ FD ]
Line_7 $$ long checksumBeforeCorruption-->Line_9 $$ checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)[ FD ]
Line_2 $$ public static void corruptFile(Random random, Path... files) throws IOException -->Line_5 $$ assertTrue(fileToCorrupt + " is not a file", Files.isRegularFile(fileToCorrupt))[ CD ]
Line_11 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) -->Line_15 $$ raf.read(bb)[ FD ]
Line_24 $$ long checksumAfterCorruption-->Line_34 $$ msg.append(" after: [").append(checksumAfterCorruption).append("]")[ FD ]
Line_4 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_8 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) [ FD ]
Line_32 $$ StringBuilder msg = new StringBuilder()-->Line_34 $$ msg.append(" after: [").append(checksumAfterCorruption).append("]")[ FD ]
Line_2 $$ public static void corruptFile(Random random, Path... files) throws IOException -->Line_12 $$ raf.position(random.nextInt((int) Math.min(Integer.MAX_VALUE, raf.size())))[ FD ]
Line_32 $$ StringBuilder msg = new StringBuilder()-->Line_35 $$ msg.append(" checksum value after corruption: ").append(actualChecksumAfterCorruption).append("]")[ FD ]
Line_7 $$ long checksumBeforeCorruption-->Line_33 $$ msg.append("Checksum before: [").append(checksumBeforeCorruption).append("]")[ FD ]
Line_8 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_9 $$ checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)[ FD ]
