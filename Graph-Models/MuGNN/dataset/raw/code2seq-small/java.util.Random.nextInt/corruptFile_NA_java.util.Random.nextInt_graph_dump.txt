Line_7 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_8 $$ assertTrue(fileToCorrupt + " is not a file", Files.isRegularFile(fileToCorrupt))[ FD ]
Line_18 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_24 $$ bb.put(0, newValue)[ FD ]
Line_11 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_33 $$ assertThat(input.getFilePointer(), is(0l))[ FD ]
Line_7 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_11 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) [ FD ]
Line_7 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_28 $$ logger.info("Corrupting file --  flipping at position [ FD ]
Line_9 $$ try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) -->Line_11 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) [ FD ]
Line_7 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_9 $$ try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) [ FD ]
Line_10 $$ long checksumBeforeCorruption-->Line_12 $$ checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)[ FD ]
Line_12 $$ checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)-->Line_42 $$ msg.append("Checksum before: [").append(checksumBeforeCorruption).append("]")[ FD ]
Line_11 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_12 $$ checksumBeforeCorruption = CodecUtil.retrieveChecksum(input)[ FD ]
Line_23 $$ byte newValue = (byte) (oldValue + 1)-->Line_28 $$ logger.info("Corrupting file --  flipping at position [ FD ]
Line_9 $$ try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) -->Line_32 $$ try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) [ FD ]
Line_31 $$ long actualChecksumAfterCorruption-->Line_44 $$ msg.append(" checksum value after corruption: ").append(actualChecksumAfterCorruption).append("]")[ FD ]
Line_7 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_14 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) [ FD ]
Line_11 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_37 $$ actualChecksumAfterCorruption = input.readLong()[ FD ]
Line_10 $$ long checksumBeforeCorruption-->Line_42 $$ msg.append("Checksum before: [").append(checksumBeforeCorruption).append("]")[ FD ]
Line_30 $$ long checksumAfterCorruption-->Line_36 $$ checksumAfterCorruption = input.getChecksum()[ FD ]
Line_18 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_27 $$ raf.write(bb)[ FD ]
Line_30 $$ long checksumAfterCorruption-->Line_43 $$ msg.append(" after: [").append(checksumAfterCorruption).append("]")[ FD ]
Line_7 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_45 $$ msg.append(" file: ").append(fileToCorrupt.getFileName()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()))[ FD ]
Line_14 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) -->Line_17 $$ long filePointer = raf.position()[ FD ]
Line_18 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_20 $$ bb.flip()[ FD ]
Line_17 $$ long filePointer = raf.position()-->Line_28 $$ logger.info("Corrupting file --  flipping at position [ FD ]
Line_7 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_50 $$ assertThat("no file corrupted", fileToCorrupt, notNullValue())[ FD ]
Line_9 $$ try (Directory dir = FSDirectory.open(fileToCorrupt.toAbsolutePath().getParent())) -->Line_45 $$ msg.append(" file: ").append(fileToCorrupt.getFileName()).append(" length: ").append(dir.fileLength(fileToCorrupt.getFileName().toString()))[ FD ]
Line_14 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) -->Line_27 $$ raf.write(bb)[ FD ]
Line_11 $$ try (IndexInput input = dir.openInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) -->Line_36 $$ checksumAfterCorruption = input.getChecksum()[ FD ]
Line_7 $$ final Path fileToCorrupt = RandomPicks.randomFrom(random, files)-->Line_32 $$ try (ChecksumIndexInput input = dir.openChecksumInput(fileToCorrupt.getFileName().toString(), IOContext.DEFAULT)) [ FD ]
Line_18 $$ ByteBuffer bb = ByteBuffer.wrap(new byte[1])-->Line_19 $$ raf.read(bb)[ FD ]
Line_36 $$ checksumAfterCorruption = input.getChecksum()-->Line_43 $$ msg.append(" after: [").append(checksumAfterCorruption).append("]")[ FD ]
Line_37 $$ actualChecksumAfterCorruption = input.readLong()-->Line_44 $$ msg.append(" checksum value after corruption: ").append(actualChecksumAfterCorruption).append("]")[ FD ]
Line_14 $$ try (FileChannel raf = FileChannel.open(fileToCorrupt, StandardOpenOption.READ, StandardOpenOption.WRITE)) -->Line_19 $$ raf.read(bb)[ FD ]
Line_31 $$ long actualChecksumAfterCorruption-->Line_37 $$ actualChecksumAfterCorruption = input.readLong()[ FD ]
Line_23 $$ byte newValue = (byte) (oldValue + 1)-->Line_24 $$ bb.put(0, newValue)[ FD ]
