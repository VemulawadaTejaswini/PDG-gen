Line_14 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_24 $$ LOG.info("Will add XAttr " + toAdd.get(i))[ FD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_27 $$ verifyXAttrsPresent(newXAttrs, numExpectedXAttrs)[ CD ]
Line_13 $$ final int numToAdd = rand.nextInt(5) + 1-->Line_14 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)[ FD ]
Line_35 $$ for (int i = 0; i < numToRemove; i++) -->Line_40 $$ numExpectedXAttrs--[ CD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_12 $$ LOG.info("Currently have " + numExpectedXAttrs + " xattrs")[ CD ]
Line_35 $$ for (int i = 0; i < numToRemove; i++) -->Line_39 $$ toRemove.add(generatedXAttrs.get(numExpectedXAttrs - 1))[ CD ]
Line_10 $$ int numExpectedXAttrs = 0-->Line_40 $$ numExpectedXAttrs--[ FD ]
Line_14 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_22 $$ LOG.info("Attempting to add " + toAdd.size() + " XAttrs")[ FD ]
Line_28 $$ existingXAttrs = newXAttrs-->Line_26 $$ List<XAttr> newXAttrs = fsdir.setINodeXAttrs(existingXAttrs, toAdd, EnumSet.of(XAttrSetFlag.CREATE))[ FD ]
Line_14 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_23 $$ for (int i = 0; i < toAdd.size(); i++) [ FD ]
Line_35 $$ for (int i = 0; i < numToRemove; i++) -->Line_36 $$ if (numExpectedXAttrs == 0) [ CD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_13 $$ final int numToAdd = rand.nextInt(5) + 1[ CD ]
Line_7 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)-->Line_45 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ FD ]
Line_15 $$ for (int i = 0; i < numToAdd; i++) -->Line_24 $$ LOG.info("Will add XAttr " + toAdd.get(i))[ FD ]
Line_10 $$ int numExpectedXAttrs = 0-->Line_16 $$ if (numExpectedXAttrs >= numGeneratedXAttrs) [ FD ]
Line_34 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)-->Line_42 $$ final int expectedNumToRemove = toRemove.size()[ FD ]
Line_33 $$ final int numToRemove = rand.nextInt(5) + 1-->Line_34 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)[ FD ]
Line_7 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)-->Line_28 $$ existingXAttrs = newXAttrs[ FD ]
Line_15 $$ for (int i = 0; i < numToAdd; i++) -->Line_23 $$ for (int i = 0; i < toAdd.size(); i++) [ FD ]
Line_15 $$ for (int i = 0; i < numToAdd; i++) -->Line_19 $$ toAdd.add(generatedXAttrs.get(numExpectedXAttrs))[ CD ]
Line_13 $$ final int numToAdd = rand.nextInt(5) + 1-->Line_15 $$ for (int i = 0; i < numToAdd; i++) [ FD ]
Line_10 $$ int numExpectedXAttrs = 0-->Line_27 $$ verifyXAttrsPresent(newXAttrs, numExpectedXAttrs)[ FD ]
Line_48 $$ existingXAttrs = newXAttrs-->Line_45 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ FD ]
Line_14 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_26 $$ List<XAttr> newXAttrs = fsdir.setINodeXAttrs(existingXAttrs, toAdd, EnumSet.of(XAttrSetFlag.CREATE))[ FD ]
Line_28 $$ existingXAttrs = newXAttrs-->Line_48 $$ existingXAttrs = newXAttrs[ FD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_28 $$ existingXAttrs = newXAttrs[ CD ]
Line_34 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)-->Line_39 $$ toRemove.add(generatedXAttrs.get(numExpectedXAttrs - 1))[ FD ]
Line_10 $$ int numExpectedXAttrs = 0-->Line_20 $$ numExpectedXAttrs++[ FD ]
Line_15 $$ for (int i = 0; i < numToAdd; i++) -->Line_35 $$ for (int i = 0; i < numToRemove; i++) [ FD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_26 $$ List<XAttr> newXAttrs = fsdir.setINodeXAttrs(existingXAttrs, toAdd, EnumSet.of(XAttrSetFlag.CREATE))[ CD ]
Line_28 $$ existingXAttrs = newXAttrs-->Line_45 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ FD ]
Line_7 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)-->Line_26 $$ List<XAttr> newXAttrs = fsdir.setINodeXAttrs(existingXAttrs, toAdd, EnumSet.of(XAttrSetFlag.CREATE))[ FD ]
Line_34 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)-->Line_45 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ FD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_15 $$ for (int i = 0; i < numToAdd; i++) [ CD ]
Line_15 $$ for (int i = 0; i < numToAdd; i++) -->Line_20 $$ numExpectedXAttrs++[ CD ]
Line_10 $$ int numExpectedXAttrs = 0-->Line_47 $$ verifyXAttrsPresent(newXAttrs, numExpectedXAttrs)[ FD ]
Line_14 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_19 $$ toAdd.add(generatedXAttrs.get(numExpectedXAttrs))[ FD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_14 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)[ CD ]
Line_15 $$ for (int i = 0; i < numToAdd; i++) -->Line_16 $$ if (numExpectedXAttrs >= numGeneratedXAttrs) [ CD ]
Line_23 $$ for (int i = 0; i < toAdd.size(); i++) -->Line_35 $$ for (int i = 0; i < numToRemove; i++) [ FD ]
Line_23 $$ for (int i = 0; i < toAdd.size(); i++) -->Line_24 $$ LOG.info("Will add XAttr " + toAdd.get(i))[ CD ]
Line_7 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)-->Line_48 $$ existingXAttrs = newXAttrs[ FD ]
Line_10 $$ int numExpectedXAttrs = 0-->Line_19 $$ toAdd.add(generatedXAttrs.get(numExpectedXAttrs))[ FD ]
Line_10 $$ int numExpectedXAttrs = 0-->Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) [ FD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_23 $$ for (int i = 0; i < toAdd.size(); i++) [ CD ]
Line_11 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_22 $$ LOG.info("Attempting to add " + toAdd.size() + " XAttrs")[ CD ]
Line_10 $$ int numExpectedXAttrs = 0-->Line_36 $$ if (numExpectedXAttrs == 0) [ FD ]
Line_33 $$ final int numToRemove = rand.nextInt(5) + 1-->Line_35 $$ for (int i = 0; i < numToRemove; i++) [ FD ]
Line_23 $$ for (int i = 0; i < toAdd.size(); i++) -->Line_24 $$ LOG.info("Will add XAttr " + toAdd.get(i))[ FD ]
