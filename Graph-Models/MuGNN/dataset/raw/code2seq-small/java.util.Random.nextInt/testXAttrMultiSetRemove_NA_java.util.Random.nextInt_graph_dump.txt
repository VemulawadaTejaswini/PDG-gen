Line_29 $$ for (int i = 0; i < numToRemove; i++) -->Line_34 $$ numExpectedXAttrs--[ CD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_11 $$ if (numExpectedXAttrs >= numGeneratedXAttrs) [ FD ]
Line_10 $$ for (int i = 0; i < numToAdd; i++) -->Line_11 $$ if (numExpectedXAttrs >= numGeneratedXAttrs) [ CD ]
Line_29 $$ for (int i = 0; i < numToRemove; i++) -->Line_33 $$ toRemove.add(generatedXAttrs.get(numExpectedXAttrs - 1))[ CD ]
Line_28 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)-->Line_39 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ FD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_7 $$ LOG.info("Currently have " + numExpectedXAttrs + " xattrs")[ CD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_27 $$ final int numToRemove = rand.nextInt(5) + 1[ CD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_37 $$ LOG.info("Attempting to remove " + expectedNumToRemove + " XAttrs")[ CD ]
Line_18 $$ for (int i = 0; i < toAdd.size(); i++) -->Line_19 $$ LOG.info("Will add XAttr " + toAdd.get(i))[ FD ]
Line_2 $$ public void testXAttrMultiSetRemove() throws Exception -->Line_25 $$ while (numExpectedXAttrs > 0) [ CD ]
Line_27 $$ final int numToRemove = rand.nextInt(5) + 1-->Line_28 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)[ FD ]
Line_28 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)-->Line_36 $$ final int expectedNumToRemove = toRemove.size()[ FD ]
Line_3 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)-->Line_39 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ FD ]
Line_3 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)-->Line_21 $$ List<XAttr> newXAttrs = fsdir.setINodeXAttrs(existingXAttrs, toAdd, EnumSet.of(XAttrSetFlag.CREATE))[ FD ]
Line_3 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)-->Line_23 $$ existingXAttrs = newXAttrs[ FD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_34 $$ numExpectedXAttrs--[ FD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_39 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ CD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_28 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)[ CD ]
Line_4 $$ final Random rand = new Random(0xFEEDA)-->Line_27 $$ final int numToRemove = rand.nextInt(5) + 1[ FD ]
Line_9 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_17 $$ LOG.info("Attempting to add " + toAdd.size() + " XAttrs")[ FD ]
Line_10 $$ for (int i = 0; i < numToAdd; i++) -->Line_18 $$ for (int i = 0; i < toAdd.size(); i++) [ FD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_22 $$ verifyXAttrsPresent(newXAttrs, numExpectedXAttrs)[ FD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_30 $$ if (numExpectedXAttrs == 0) [ FD ]
Line_2 $$ public void testXAttrMultiSetRemove() throws Exception -->Line_5 $$ int numExpectedXAttrs = 0[ CD ]
Line_2 $$ public void testXAttrMultiSetRemove() throws Exception -->Line_4 $$ final Random rand = new Random(0xFEEDA)[ CD ]
Line_10 $$ for (int i = 0; i < numToAdd; i++) -->Line_15 $$ numExpectedXAttrs++[ CD ]
Line_23 $$ existingXAttrs = newXAttrs-->Line_42 $$ existingXAttrs = newXAttrs[ FD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_10 $$ for (int i = 0; i < numToAdd; i++) [ CD ]
Line_4 $$ final Random rand = new Random(0xFEEDA)-->Line_8 $$ final int numToAdd = rand.nextInt(5) + 1[ FD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_26 $$ LOG.info("Currently have " + numExpectedXAttrs + " xattrs")[ CD ]
Line_9 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_18 $$ for (int i = 0; i < toAdd.size(); i++) [ FD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_29 $$ for (int i = 0; i < numToRemove; i++) [ CD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_21 $$ List<XAttr> newXAttrs = fsdir.setINodeXAttrs(existingXAttrs, toAdd, EnumSet.of(XAttrSetFlag.CREATE))[ CD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_38 $$ List<XAttr> removedXAttrs = Lists.newArrayList()[ CD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_41 $$ verifyXAttrsPresent(newXAttrs, numExpectedXAttrs)[ CD ]
Line_8 $$ final int numToAdd = rand.nextInt(5) + 1-->Line_9 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)[ FD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_42 $$ existingXAttrs = newXAttrs[ CD ]
Line_23 $$ existingXAttrs = newXAttrs-->Line_21 $$ List<XAttr> newXAttrs = fsdir.setINodeXAttrs(existingXAttrs, toAdd, EnumSet.of(XAttrSetFlag.CREATE))[ FD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_14 $$ toAdd.add(generatedXAttrs.get(numExpectedXAttrs))[ FD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_8 $$ final int numToAdd = rand.nextInt(5) + 1[ CD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_40 $$ assertEquals("Unexpected number of removed XAttrs", expectedNumToRemove, removedXAttrs.size())[ CD ]
Line_28 $$ List<XAttr> toRemove = Lists.newArrayListWithCapacity(numToRemove)-->Line_33 $$ toRemove.add(generatedXAttrs.get(numExpectedXAttrs - 1))[ FD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_15 $$ numExpectedXAttrs++[ FD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_18 $$ for (int i = 0; i < toAdd.size(); i++) [ CD ]
Line_9 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_21 $$ List<XAttr> newXAttrs = fsdir.setINodeXAttrs(existingXAttrs, toAdd, EnumSet.of(XAttrSetFlag.CREATE))[ FD ]
Line_2 $$ public void testXAttrMultiSetRemove() throws Exception -->Line_3 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)[ CD ]
Line_10 $$ for (int i = 0; i < numToAdd; i++) -->Line_14 $$ toAdd.add(generatedXAttrs.get(numExpectedXAttrs))[ CD ]
Line_25 $$ while (numExpectedXAttrs > 0) -->Line_36 $$ final int expectedNumToRemove = toRemove.size()[ CD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_23 $$ existingXAttrs = newXAttrs[ CD ]
Line_29 $$ for (int i = 0; i < numToRemove; i++) -->Line_30 $$ if (numExpectedXAttrs == 0) [ CD ]
Line_42 $$ existingXAttrs = newXAttrs-->Line_39 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ FD ]
Line_18 $$ for (int i = 0; i < toAdd.size(); i++) -->Line_19 $$ LOG.info("Will add XAttr " + toAdd.get(i))[ CD ]
Line_9 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_19 $$ LOG.info("Will add XAttr " + toAdd.get(i))[ FD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_22 $$ verifyXAttrsPresent(newXAttrs, numExpectedXAttrs)[ CD ]
Line_2 $$ public void testXAttrMultiSetRemove() throws Exception -->Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) [ CD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) [ FD ]
Line_18 $$ for (int i = 0; i < toAdd.size(); i++) -->Line_29 $$ for (int i = 0; i < numToRemove; i++) [ FD ]
Line_10 $$ for (int i = 0; i < numToAdd; i++) -->Line_29 $$ for (int i = 0; i < numToRemove; i++) [ FD ]
Line_27 $$ final int numToRemove = rand.nextInt(5) + 1-->Line_29 $$ for (int i = 0; i < numToRemove; i++) [ FD ]
Line_3 $$ List<XAttr> existingXAttrs = Lists.newArrayListWithCapacity(0)-->Line_42 $$ existingXAttrs = newXAttrs[ FD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_9 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)[ CD ]
Line_9 $$ List<XAttr> toAdd = Lists.newArrayListWithCapacity(numToAdd)-->Line_14 $$ toAdd.add(generatedXAttrs.get(numExpectedXAttrs))[ FD ]
Line_8 $$ final int numToAdd = rand.nextInt(5) + 1-->Line_10 $$ for (int i = 0; i < numToAdd; i++) [ FD ]
Line_23 $$ existingXAttrs = newXAttrs-->Line_39 $$ List<XAttr> newXAttrs = fsdir.filterINodeXAttrs(existingXAttrs, toRemove, removedXAttrs)[ FD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_25 $$ while (numExpectedXAttrs > 0) [ FD ]
Line_5 $$ int numExpectedXAttrs = 0-->Line_41 $$ verifyXAttrsPresent(newXAttrs, numExpectedXAttrs)[ FD ]
Line_10 $$ for (int i = 0; i < numToAdd; i++) -->Line_19 $$ LOG.info("Will add XAttr " + toAdd.get(i))[ FD ]
Line_6 $$ while (numExpectedXAttrs < numGeneratedXAttrs) -->Line_17 $$ LOG.info("Attempting to add " + toAdd.size() + " XAttrs")[ CD ]
