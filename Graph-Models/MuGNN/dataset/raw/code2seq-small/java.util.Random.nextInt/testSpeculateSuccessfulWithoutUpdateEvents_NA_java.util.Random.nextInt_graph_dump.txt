Line_32 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) -->Line_34 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_CONTAINER_CLEANED))[ CD ]
Line_28 $$ final Task taskToBeSpeculated = (Task) taskValues[generator.nextInt(taskValues.length)]-->Line_43 $$ if (taskToBeSpeculated.getAttempts().size() != 2) [ FD ]
Line_43 $$ if (taskToBeSpeculated.getAttempts().size() != 2) -->Line_45 $$ return false[ CD ]
Line_43 $$ if (taskToBeSpeculated.getAttempts().size() != 2) -->Line_44 $$ clock.setTime(System.currentTimeMillis() + 1000)[ CD ]
Line_32 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) -->Line_33 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_12 $$ Iterator<Task> taskIter = tasks.values().iterator()-->Line_14 $$ app.waitForState(taskIter.next(), TaskState.RUNNING)[ FD ]
Line_20 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_22 $$ TaskAttemptStatusUpdateEvent event = new TaskAttemptStatusUpdateEvent(taskAttempt.getKey(), status)[ FD ]
Line_7 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_8 $$ Job job = app.submit(new Configuration(), true, true)[ FD ]
Line_5 $$ final ControlledClock clock = new ControlledClock(actualClock)-->Line_6 $$ clock.setTime(System.currentTimeMillis())[ FD ]
Line_7 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_14 $$ app.waitForState(taskIter.next(), TaskState.RUNNING)[ FD ]
Line_43 $$ if (taskToBeSpeculated.getAttempts().size() != 2) -->Line_47 $$ return true[ CD ]
Line_10 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_27 $$ Object[] taskValues = tasks.values().toArray()[ FD ]
Line_7 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_53 $$ verifySpeculationMessage(app, ta)[ FD ]
Line_8 $$ Job job = app.submit(new Configuration(), true, true)-->Line_10 $$ Map<TaskId, Task> tasks = job.getTasks()[ FD ]
Line_10 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_19 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) [ FD ]
Line_26 $$ Random generator = new Random()-->Line_28 $$ final Task taskToBeSpeculated = (Task) taskValues[generator.nextInt(taskValues.length)][ FD ]
Line_19 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) -->Line_32 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) [ FD ]
Line_8 $$ Job job = app.submit(new Configuration(), true, true)-->Line_9 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_28 $$ final Task taskToBeSpeculated = (Task) taskValues[generator.nextInt(taskValues.length)]-->Line_32 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) [ FD ]
Line_20 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_35 $$ app.waitForState(taskAttempt.getValue(), TaskAttemptState.SUCCEEDED)[ FD ]
Line_10 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_11 $$ Assert.assertEquals("Num tasks is not correct", NUM_MAPPERS + NUM_REDUCERS, tasks.size())[ FD ]
Line_20 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_33 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_19 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) -->Line_20 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) [ FD ]
Line_18 $$ EventHandler appEventHandler = app.getContext().getEventHandler()-->Line_23 $$ appEventHandler.handle(event)[ FD ]
Line_5 $$ final ControlledClock clock = new ControlledClock(actualClock)-->Line_44 $$ clock.setTime(System.currentTimeMillis() + 1000)[ FD ]
Line_7 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_18 $$ EventHandler appEventHandler = app.getContext().getEventHandler()[ FD ]
Line_19 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) -->Line_31 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) [ FD ]
Line_12 $$ Iterator<Task> taskIter = tasks.values().iterator()-->Line_13 $$ while (taskIter.hasNext()) [ FD ]
Line_22 $$ TaskAttemptStatusUpdateEvent event = new TaskAttemptStatusUpdateEvent(taskAttempt.getKey(), status)-->Line_23 $$ appEventHandler.handle(event)[ FD ]
Line_20 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_34 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_CONTAINER_CLEANED))[ FD ]
Line_10 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_12 $$ Iterator<Task> taskIter = tasks.values().iterator()[ FD ]
Line_39 $$ GenericTestUtils.waitFor(new Supplier<Boolean>() -->Line_43 $$ if (taskToBeSpeculated.getAttempts().size() != 2) [ CD ]
Line_7 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_35 $$ app.waitForState(taskAttempt.getValue(), TaskAttemptState.SUCCEEDED)[ FD ]
Line_18 $$ EventHandler appEventHandler = app.getContext().getEventHandler()-->Line_33 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_13 $$ while (taskIter.hasNext()) -->Line_14 $$ app.waitForState(taskIter.next(), TaskState.RUNNING)[ CD ]
Line_18 $$ EventHandler appEventHandler = app.getContext().getEventHandler()-->Line_34 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_CONTAINER_CLEANED))[ FD ]
Line_7 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_54 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_32 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) -->Line_35 $$ app.waitForState(taskAttempt.getValue(), TaskAttemptState.SUCCEEDED)[ CD ]
Line_20 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_21 $$ TaskAttemptStatus status = createTaskAttemptStatus(taskAttempt.getKey(), (float) 0.8, TaskAttemptState.RUNNING)[ FD ]
Line_7 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_9 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
