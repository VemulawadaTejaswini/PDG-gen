Line_18 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_31 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_CONTAINER_CLEANED))[ FD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_11 $$ Iterator<Task> taskIter = tasks.values().iterator()[ CD ]
Line_9 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_27 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) [ FD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_15 $$ clock.setTime(System.currentTimeMillis() + 2000)[ CD ]
Line_4 $$ final ControlledClock clock = new ControlledClock(actualClock)-->Line_15 $$ clock.setTime(System.currentTimeMillis() + 2000)[ FD ]
Line_18 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_32 $$ app.waitForState(taskAttempt.getValue(), TaskAttemptState.SUCCEEDED)[ FD ]
Line_26 $$ final Task taskToBeSpeculated = (Task) taskValues[generator.nextInt(taskValues.length)]-->Line_46 $$ TaskAttempt[] ta = makeFirstAttemptWin(appEventHandler, taskToBeSpeculated)[ FD ]
Line_29 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) -->Line_30 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_6 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_7 $$ Job job = app.submit(new Configuration(), true, true)[ FD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_9 $$ Map<TaskId, Task> tasks = job.getTasks()[ CD ]
Line_6 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_13 $$ app.waitForState(taskIter.next(), TaskState.RUNNING)[ FD ]
Line_6 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_16 $$ EventHandler appEventHandler = app.getContext().getEventHandler()[ FD ]
Line_18 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_19 $$ TaskAttemptStatus status = createTaskAttemptStatus(taskAttempt.getKey(), (float) 0.8, TaskAttemptState.RUNNING)[ FD ]
Line_7 $$ Job job = app.submit(new Configuration(), true, true)-->Line_9 $$ Map<TaskId, Task> tasks = job.getTasks()[ FD ]
Line_11 $$ Iterator<Task> taskIter = tasks.values().iterator()-->Line_12 $$ while (taskIter.hasNext()) [ FD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_10 $$ Assert.assertEquals("Num tasks is not correct", NUM_MAPPERS + NUM_REDUCERS, tasks.size())[ CD ]
Line_26 $$ final Task taskToBeSpeculated = (Task) taskValues[generator.nextInt(taskValues.length)]-->Line_29 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) [ FD ]
Line_9 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_17 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) [ FD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_6 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_7 $$ Job job = app.submit(new Configuration(), true, true)[ CD ]
Line_18 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_20 $$ TaskAttemptStatusUpdateEvent event = new TaskAttemptStatusUpdateEvent(taskAttempt.getKey(), status)[ FD ]
Line_4 $$ final ControlledClock clock = new ControlledClock(actualClock)-->Line_39 $$ clock.setTime(System.currentTimeMillis() + 1000)[ FD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_47 $$ verifySpeculationMessage(app, ta)[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_16 $$ EventHandler appEventHandler = app.getContext().getEventHandler()[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_12 $$ while (taskIter.hasNext()) [ CD ]
Line_16 $$ EventHandler appEventHandler = app.getContext().getEventHandler()-->Line_46 $$ TaskAttempt[] ta = makeFirstAttemptWin(appEventHandler, taskToBeSpeculated)[ FD ]
Line_6 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_32 $$ app.waitForState(taskAttempt.getValue(), TaskAttemptState.SUCCEEDED)[ FD ]
Line_29 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) -->Line_31 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_CONTAINER_CLEANED))[ CD ]
Line_16 $$ EventHandler appEventHandler = app.getContext().getEventHandler()-->Line_21 $$ appEventHandler.handle(event)[ FD ]
Line_18 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) -->Line_30 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_12 $$ while (taskIter.hasNext()) -->Line_13 $$ app.waitForState(taskIter.next(), TaskState.RUNNING)[ CD ]
Line_6 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_47 $$ verifySpeculationMessage(app, ta)[ FD ]
Line_17 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) -->Line_29 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) [ FD ]
Line_9 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_10 $$ Assert.assertEquals("Num tasks is not correct", NUM_MAPPERS + NUM_REDUCERS, tasks.size())[ FD ]
Line_20 $$ TaskAttemptStatusUpdateEvent event = new TaskAttemptStatusUpdateEvent(taskAttempt.getKey(), status)-->Line_21 $$ appEventHandler.handle(event)[ FD ]
Line_16 $$ EventHandler appEventHandler = app.getContext().getEventHandler()-->Line_30 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ final ControlledClock clock = new ControlledClock(actualClock)-->Line_5 $$ clock.setTime(System.currentTimeMillis())[ FD ]
Line_38 $$ if (taskToBeSpeculated.getAttempts().size() != 2) -->Line_42 $$ return true[ CD ]
Line_11 $$ Iterator<Task> taskIter = tasks.values().iterator()-->Line_13 $$ app.waitForState(taskIter.next(), TaskState.RUNNING)[ FD ]
Line_17 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) -->Line_18 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) [ FD ]
Line_26 $$ final Task taskToBeSpeculated = (Task) taskValues[generator.nextInt(taskValues.length)]-->Line_38 $$ if (taskToBeSpeculated.getAttempts().size() != 2) [ FD ]
Line_6 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_48 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_29 $$ if (mapTask.getKey() != taskToBeSpeculated.getID()) -->Line_32 $$ app.waitForState(taskAttempt.getValue(), TaskAttemptState.SUCCEEDED)[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_5 $$ clock.setTime(System.currentTimeMillis())[ CD ]
Line_6 $$ MRApp app = new MRApp(NUM_MAPPERS, NUM_REDUCERS, false, "test", true, clock)-->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_46 $$ TaskAttempt[] ta = makeFirstAttemptWin(appEventHandler, taskToBeSpeculated)[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_36 $$ GenericTestUtils.waitFor(new Supplier<Boolean>() [ CD ]
Line_7 $$ Job job = app.submit(new Configuration(), true, true)-->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_9 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_11 $$ Iterator<Task> taskIter = tasks.values().iterator()[ FD ]
Line_9 $$ Map<TaskId, Task> tasks = job.getTasks()-->Line_25 $$ Object[] taskValues = tasks.values().toArray()[ FD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_3 $$ Clock actualClock = new SystemClock()[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_4 $$ final ControlledClock clock = new ControlledClock(actualClock)[ CD ]
Line_24 $$ Random generator = new Random()-->Line_26 $$ final Task taskToBeSpeculated = (Task) taskValues[generator.nextInt(taskValues.length)][ FD ]
Line_38 $$ if (taskToBeSpeculated.getAttempts().size() != 2) -->Line_40 $$ return false[ CD ]
Line_16 $$ EventHandler appEventHandler = app.getContext().getEventHandler()-->Line_31 $$ appEventHandler.handle(new TaskAttemptEvent(taskAttempt.getKey(), TaskAttemptEventType.TA_CONTAINER_CLEANED))[ FD ]
Line_38 $$ if (taskToBeSpeculated.getAttempts().size() != 2) -->Line_39 $$ clock.setTime(System.currentTimeMillis() + 1000)[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_26 $$ final Task taskToBeSpeculated = (Task) taskValues[generator.nextInt(taskValues.length)][ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_24 $$ Random generator = new Random()[ CD ]
Line_36 $$ GenericTestUtils.waitFor(new Supplier<Boolean>() -->Line_38 $$ if (taskToBeSpeculated.getAttempts().size() != 2) [ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_48 $$ app.waitForState(Service.STATE.STOPPED)[ CD ]
Line_2 $$ public void testSpeculateSuccessfulWithoutUpdateEvents() throws Exception -->Line_25 $$ Object[] taskValues = tasks.values().toArray()[ CD ]
Line_17 $$ for (Map.Entry<TaskId, Task> mapTask : tasks.entrySet()) -->Line_28 $$ for (Map.Entry<TaskAttemptId, TaskAttempt> taskAttempt : mapTask.getValue().getAttempts().entrySet()) [ FD ]
