Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_20 $$ assertDiff(after, diff)[ FD ]
Line_10 $$ before = diff.toString()-->Line_17 $$ assertDiff(before, diff)[ FD ]
Line_14 $$ final String after = diff.toString()-->Line_20 $$ assertDiff(after, diff)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_17 $$ assertDiff(before, diff)[ FD ]
Line_13 $$ if (testUndo) -->Line_14 $$ final String after = diff.toString()[ CD ]
Line_8 $$ String before = null-->Line_17 $$ assertDiff(before, diff)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_4 $$ current.remove(i)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_5 $$ if (diff != null) [ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_14 $$ final String after = diff.toString()[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_10 $$ before = diff.toString()[ FD ]
Line_5 $$ if (diff != null) -->Line_13 $$ if (testUndo) [ CD ]
Line_13 $$ if (testUndo) -->Line_17 $$ assertDiff(before, diff)[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_12 $$ final UndoInfo<INode> undoInfo = diff.delete(inode)[ FD ]
Line_3 $$ final int i = Diff.search(current, inode.getKey())-->Line_4 $$ current.remove(i)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_5 $$ if (diff != null) [ CD ]
Line_5 $$ if (diff != null) -->Line_9 $$ if (testUndo) [ CD ]
Line_9 $$ if (testUndo) -->Line_10 $$ before = diff.toString()[ CD ]
Line_8 $$ String before = null-->Line_10 $$ before = diff.toString()[ FD ]
Line_5 $$ if (diff != null) -->Line_12 $$ final UndoInfo<INode> undoInfo = diff.delete(inode)[ CD ]
Line_5 $$ if (diff != null) -->Line_8 $$ String before = null[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_4 $$ current.remove(i)[ CD ]
Line_13 $$ if (testUndo) -->Line_20 $$ assertDiff(after, diff)[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_3 $$ final int i = Diff.search(current, inode.getKey())[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_3 $$ final int i = Diff.search(current, inode.getKey())[ FD ]
