Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_3 $$ final int i = Diff.search(current, inode.getKey())[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_3 $$ final int i = Diff.search(current, inode.getKey())[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_17 $$ assertDiff(after, diff)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_16 $$ diff.delete(inode)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_13 $$ final String after = diff.toString()[ FD ]
Line_11 $$ final UndoInfo<INode> undoInfo = diff.delete(inode)-->Line_14 $$ diff.undoDelete(inode, undoInfo)[ FD ]
Line_13 $$ final String after = diff.toString()-->Line_17 $$ assertDiff(after, diff)[ FD ]
Line_3 $$ final int i = Diff.search(current, inode.getKey())-->Line_4 $$ current.remove(i)[ FD ]
Line_7 $$ String before = null-->Line_15 $$ assertDiff(before, diff)[ FD ]
Line_8 $$ if (testUndo) -->Line_9 $$ before = diff.toString()[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_4 $$ current.remove(i)[ FD ]
Line_5 $$ if (diff != null) -->Line_8 $$ if (testUndo) [ CD ]
Line_9 $$ before = diff.toString()-->Line_15 $$ assertDiff(before, diff)[ FD ]
Line_12 $$ if (testUndo) -->Line_16 $$ diff.delete(inode)[ CD ]
Line_5 $$ if (diff != null) -->Line_11 $$ final UndoInfo<INode> undoInfo = diff.delete(inode)[ CD ]
Line_5 $$ if (diff != null) -->Line_7 $$ String before = null[ CD ]
Line_5 $$ if (diff != null) -->Line_6 $$ final boolean testUndo = RANDOM.nextInt(UNDO_TEST_P) == 0[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_15 $$ assertDiff(before, diff)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_9 $$ before = diff.toString()[ FD ]
Line_12 $$ if (testUndo) -->Line_14 $$ diff.undoDelete(inode, undoInfo)[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_4 $$ current.remove(i)[ CD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_5 $$ if (diff != null) [ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_11 $$ final UndoInfo<INode> undoInfo = diff.delete(inode)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_14 $$ diff.undoDelete(inode, undoInfo)[ FD ]
Line_2 $$ static void delete(INode inode, final List<INode> current, Diff<byte[], INode> diff) -->Line_5 $$ if (diff != null) [ CD ]
Line_7 $$ String before = null-->Line_9 $$ before = diff.toString()[ FD ]
Line_12 $$ if (testUndo) -->Line_15 $$ assertDiff(before, diff)[ CD ]
Line_12 $$ if (testUndo) -->Line_13 $$ final String after = diff.toString()[ CD ]
Line_12 $$ if (testUndo) -->Line_17 $$ assertDiff(after, diff)[ CD ]
Line_5 $$ if (diff != null) -->Line_12 $$ if (testUndo) [ CD ]
