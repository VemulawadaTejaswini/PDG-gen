Line_33 $$ if (r.nextDouble() <= freq) -->Line_34 $$ if (samples.size() < numSamples) [ CD ]
Line_30 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_31 $$ reader.initialize(splits.get(i), samplingContext)[ FD ]
Line_11 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_30 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)[ FD ]
Line_21 $$ int j = r.nextInt(splits.size())-->Line_23 $$ splits.set(j, tmp)[ FD ]
Line_11 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_22 $$ splits.set(i, splits.get(j))[ FD ]
Line_30 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_35 $$ samples.add(ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_12 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_35 $$ samples.add(ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_42 $$ if (ind != numSamples) -->Line_43 $$ samples.set(ind, ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ CD ]
Line_12 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_34 $$ if (samples.size() < numSamples) [ FD ]
Line_20 $$ InputSplit tmp = splits.get(i)-->Line_23 $$ splits.set(j, tmp)[ FD ]
Line_14 $$ Random r = new Random()-->Line_16 $$ r.setSeed(seed)[ FD ]
Line_29 $$ TaskAttemptContext samplingContext = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())-->Line_30 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)[ FD ]
Line_11 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_31 $$ reader.initialize(splits.get(i), samplingContext)[ FD ]
Line_30 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_43 $$ samples.set(ind, ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_11 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_20 $$ InputSplit tmp = splits.get(i)[ FD ]
Line_29 $$ TaskAttemptContext samplingContext = new TaskAttemptContextImpl(job.getConfiguration(), new TaskAttemptID())-->Line_31 $$ reader.initialize(splits.get(i), samplingContext)[ FD ]
Line_21 $$ int j = r.nextInt(splits.size())-->Line_22 $$ splits.set(i, splits.get(j))[ FD ]
Line_30 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_49 $$ reader.close()[ FD ]
Line_11 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_23 $$ splits.set(j, tmp)[ FD ]
Line_14 $$ Random r = new Random()-->Line_15 $$ long seed = r.nextLong()[ FD ]
Line_34 $$ if (samples.size() < numSamples) -->Line_42 $$ if (ind != numSamples) [ CD ]
Line_12 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_43 $$ samples.set(ind, ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ FD ]
Line_32 $$ while (reader.nextKeyValue()) -->Line_33 $$ if (r.nextDouble() <= freq) [ CD ]
Line_14 $$ Random r = new Random()-->Line_21 $$ int j = r.nextInt(splits.size())[ FD ]
Line_11 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_21 $$ int j = r.nextInt(splits.size())[ FD ]
Line_12 $$ ArrayList<K> samples = new ArrayList<K>(numSamples)-->Line_51 $$ return (K[]) samples.toArray()[ FD ]
Line_11 $$ List<InputSplit> splits = inf.getSplits(job)-->Line_13 $$ int splitsToSample = Math.min(maxSplitsSampled, splits.size())[ FD ]
Line_34 $$ if (samples.size() < numSamples) -->Line_35 $$ samples.add(ReflectionUtils.copy(job.getConfiguration(), reader.getCurrentKey(), null))[ CD ]
Line_15 $$ long seed = r.nextLong()-->Line_16 $$ r.setSeed(seed)[ FD ]
Line_14 $$ Random r = new Random()-->Line_33 $$ if (r.nextDouble() <= freq) [ FD ]
Line_30 $$ RecordReader<K, V> reader = inf.createRecordReader(splits.get(i), samplingContext)-->Line_32 $$ while (reader.nextKeyValue()) [ FD ]
