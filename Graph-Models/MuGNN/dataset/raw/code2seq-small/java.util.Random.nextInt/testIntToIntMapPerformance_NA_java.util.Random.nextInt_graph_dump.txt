Line_3 $$ File file = FileUtil.createTempFile("persistent", "map")-->Line_59 $$ clearMap(file, map)[ FD ]
Line_9 $$ if (checkMap.size() == 0) -->Line_11 $$ checkMap.put(r.nextInt(), 0)[ CD ]
Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)-->Line_26 $$ boolean result = checkMap.forEachEntry(( a,  b) -> [ FD ]
Line_9 $$ if (checkMap.size() == 0) -->Line_10 $$ checkMap.put(r.nextInt(), 0)[ CD ]
Line_2 $$ public void testIntToIntMapPerformance() throws IOException -->Line_3 $$ File file = FileUtil.createTempFile("persistent", "map")[ CD ]
Line_20 $$ map = new PersistentHashMap<Integer, Integer>(file, EnumeratorIntegerDescriptor.INSTANCE, EnumeratorIntegerDescriptor.INSTANCE) -->Line_59 $$ clearMap(file, map)[ FD ]
Line_2 $$ public void testIntToIntMapPerformance() throws IOException -->Line_8 $$ while (size != checkMap.size()) [ CD ]
Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)-->Line_12 $$ checkMap.put(0, Math.abs(r.nextInt()))[ FD ]
Line_18 $$ PersistentHashMap<Integer, Integer> map = null-->Line_37 $$ map.close()[ FD ]
Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)-->Line_10 $$ checkMap.put(r.nextInt(), 0)[ FD ]
Line_7 $$ Random r = new Random(1)-->Line_14 $$ checkMap.put(r.nextInt(), Math.abs(r.nextInt()))[ FD ]
Line_3 $$ File file = FileUtil.createTempFile("persistent", "map")-->Line_4 $$ FileUtil.createParentDirs(file)[ FD ]
Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)-->Line_8 $$ while (size != checkMap.size()) [ FD ]
Line_7 $$ Random r = new Random(1)-->Line_10 $$ checkMap.put(r.nextInt(), 0)[ FD ]
Line_20 $$ map = new PersistentHashMap<Integer, Integer>(file, EnumeratorIntegerDescriptor.INSTANCE, EnumeratorIntegerDescriptor.INSTANCE) -->Line_22 $$ return true[ CD ]
Line_20 $$ map = new PersistentHashMap<Integer, Integer>(file, EnumeratorIntegerDescriptor.INSTANCE, EnumeratorIntegerDescriptor.INSTANCE) -->Line_37 $$ map.close()[ FD ]
Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)-->Line_11 $$ checkMap.put(r.nextInt(), 0)[ FD ]
Line_2 $$ public void testIntToIntMapPerformance() throws IOException -->Line_18 $$ PersistentHashMap<Integer, Integer> map = null[ CD ]
Line_40 $$ map = new PersistentHashMap<Integer, Integer>(file, EnumeratorIntegerDescriptor.INSTANCE, EnumeratorIntegerDescriptor.INSTANCE) -->Line_42 $$ return true[ CD ]
Line_7 $$ Random r = new Random(1)-->Line_11 $$ checkMap.put(r.nextInt(), 0)[ FD ]
Line_2 $$ public void testIntToIntMapPerformance() throws IOException -->Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)[ CD ]
Line_2 $$ public void testIntToIntMapPerformance() throws IOException -->Line_7 $$ Random r = new Random(1)[ CD ]
Line_2 $$ public void testIntToIntMapPerformance() throws IOException -->Line_17 $$ long started = System.currentTimeMillis()[ CD ]
Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)-->Line_14 $$ checkMap.put(r.nextInt(), Math.abs(r.nextInt()))[ FD ]
Line_7 $$ Random r = new Random(1)-->Line_12 $$ checkMap.put(0, Math.abs(r.nextInt()))[ FD ]
Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)-->Line_9 $$ if (checkMap.size() == 0) [ FD ]
Line_5 $$ int size = 10000000-->Line_8 $$ while (size != checkMap.size()) [ FD ]
Line_9 $$ if (checkMap.size() == 0) -->Line_12 $$ checkMap.put(0, Math.abs(r.nextInt()))[ CD ]
Line_2 $$ public void testIntToIntMapPerformance() throws IOException -->Line_4 $$ FileUtil.createParentDirs(file)[ CD ]
Line_18 $$ PersistentHashMap<Integer, Integer> map = null-->Line_59 $$ clearMap(file, map)[ FD ]
Line_2 $$ public void testIntToIntMapPerformance() throws IOException -->Line_5 $$ int size = 10000000[ CD ]
Line_9 $$ if (checkMap.size() == 0) -->Line_14 $$ checkMap.put(r.nextInt(), Math.abs(r.nextInt()))[ CD ]
Line_18 $$ PersistentHashMap<Integer, Integer> map = null-->Line_20 $$ map = new PersistentHashMap<Integer, Integer>(file, EnumeratorIntegerDescriptor.INSTANCE, EnumeratorIntegerDescriptor.INSTANCE) [ FD ]
Line_8 $$ while (size != checkMap.size()) -->Line_9 $$ if (checkMap.size() == 0) [ CD ]
Line_6 $$ TIntIntHashMap checkMap = new TIntIntHashMap(size)-->Line_46 $$ result = checkMap.forEachEntry(( a,  b) -> [ FD ]
