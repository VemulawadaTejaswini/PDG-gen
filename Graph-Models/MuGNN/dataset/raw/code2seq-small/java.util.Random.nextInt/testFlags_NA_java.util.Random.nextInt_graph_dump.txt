Line_7 $$ for (int i = 0; i < num; i++) -->Line_10 $$ StringBuilder builder = new StringBuilder()[ CD ]
Line_9 $$ int current = 0-->Line_19 $$ String flagsToString = Regex.flagsToString(current)[ FD ]
Line_7 $$ for (int i = 0; i < num; i++) -->Line_8 $$ int numFlags = random.nextInt(flags.length + 1)[ CD ]
Line_2 $$ public void testFlags() -->Line_3 $$ String[] supportedFlags = new String[] [ CD ]
Line_11 $$ for (int j = 0; j < numFlags; j++) -->Line_12 $$ int index = random.nextInt(flags.length)[ CD ]
Line_9 $$ int current = 0-->Line_20 $$ assertThat(Regex.flagsFromString(builder.toString()), equalTo(current))[ FD ]
Line_7 $$ for (int i = 0; i < num; i++) -->Line_20 $$ assertThat(Regex.flagsFromString(builder.toString()), equalTo(current))[ CD ]
Line_9 $$ int current = 0-->Line_13 $$ current |= flags[index][ FD ]
Line_11 $$ for (int j = 0; j < numFlags; j++) -->Line_15 $$ if (j < numFlags - 1) [ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_16 $$ builder.append("|")[ FD ]
Line_13 $$ current |= flags[index]-->Line_20 $$ assertThat(Regex.flagsFromString(builder.toString()), equalTo(current))[ FD ]
Line_7 $$ for (int i = 0; i < num; i++) -->Line_19 $$ String flagsToString = Regex.flagsToString(current)[ CD ]
Line_11 $$ for (int j = 0; j < numFlags; j++) -->Line_14 $$ builder.append(supportedFlags[index])[ CD ]
Line_8 $$ int numFlags = random.nextInt(flags.length + 1)-->Line_11 $$ for (int j = 0; j < numFlags; j++) [ FD ]
Line_15 $$ if (j < numFlags - 1) -->Line_16 $$ builder.append("|")[ CD ]
Line_7 $$ for (int i = 0; i < num; i++) -->Line_11 $$ for (int j = 0; j < numFlags; j++) [ CD ]
Line_13 $$ current |= flags[index]-->Line_19 $$ String flagsToString = Regex.flagsToString(current)[ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_21 $$ assertThat(Regex.flagsFromString(builder.toString()), equalTo(Regex.flagsFromString(flagsToString)))[ FD ]
Line_5 $$ Random random = getRandom()-->Line_12 $$ int index = random.nextInt(flags.length)[ FD ]
Line_5 $$ Random random = getRandom()-->Line_6 $$ int num = 10 + random.nextInt(100)[ FD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_14 $$ builder.append(supportedFlags[index])[ FD ]
Line_2 $$ public void testFlags() -->Line_6 $$ int num = 10 + random.nextInt(100)[ CD ]
Line_11 $$ for (int j = 0; j < numFlags; j++) -->Line_13 $$ current |= flags[index][ CD ]
Line_7 $$ for (int i = 0; i < num; i++) -->Line_9 $$ int current = 0[ CD ]
Line_2 $$ public void testFlags() -->Line_7 $$ for (int i = 0; i < num; i++) [ CD ]
Line_11 $$ for (int j = 0; j < numFlags; j++) -->Line_15 $$ if (j < numFlags - 1) [ CD ]
Line_10 $$ StringBuilder builder = new StringBuilder()-->Line_20 $$ assertThat(Regex.flagsFromString(builder.toString()), equalTo(current))[ FD ]
Line_5 $$ Random random = getRandom()-->Line_8 $$ int numFlags = random.nextInt(flags.length + 1)[ FD ]
Line_2 $$ public void testFlags() -->Line_5 $$ Random random = getRandom()[ CD ]
Line_2 $$ public void testFlags() -->Line_4 $$ int[] flags = new int[] [ CD ]
Line_7 $$ for (int i = 0; i < num; i++) -->Line_21 $$ assertThat(Regex.flagsFromString(builder.toString()), equalTo(Regex.flagsFromString(flagsToString)))[ CD ]
Line_6 $$ int num = 10 + random.nextInt(100)-->Line_7 $$ for (int i = 0; i < num; i++) [ FD ]
