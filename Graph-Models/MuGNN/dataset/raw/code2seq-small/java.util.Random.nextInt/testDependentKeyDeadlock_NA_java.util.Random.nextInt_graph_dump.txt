Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_60 $$ scheduler.scheduleAtFixedRate(() -> [ CD ]
Line_39 $$ if (k.key == 0) -->Line_43 $$ return value != null ? value : 0[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_27 $$ final Cache<Key, Integer> cache = CacheBuilder.<Key, Integer>builder().build()[ CD ]
Line_15 $$ if (o == null || getClass() != o.getClass())-->Line_16 $$ return false[ CD ]
Line_32 $$ Thread thread = new Thread(() -> -->Line_54 $$ thread.start()[ FD ]
Line_3 $$ class Key -->Line_15 $$ if (o == null || getClass() != o.getClass())[ CD ]
Line_3 $$ class Key -->Line_13 $$ if (this == o)[ FD ]
Line_39 $$ if (k.key == 0) -->Line_40 $$ return 0[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_31 $$ for (int i = 0; i < numberOfThreads; i++) [ CD ]
Line_32 $$ Thread thread = new Thread(() -> -->Line_53 $$ threads.add(thread)[ FD ]
Line_31 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_53 $$ threads.add(thread)[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_84 $$ assertFalse("deadlock", deadlock.get())[ CD ]
Line_3 $$ class Key -->Line_18 $$ return key == key1.key[ CD ]
Line_2 $$ public void testDependentKeyDeadlock() throws InterruptedException -->Line_26 $$ int numberOfThreads = randomIntBetween(2, 32)[ CD ]
Line_31 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_54 $$ thread.start()[ CD ]
Line_35 $$ for (int j = 0; j < numberOfEntries; j++) -->Line_36 $$ Key key = new Key(random.nextInt(numberOfEntries))[ CD ]
Line_33 $$ Random random = new Random(random().nextLong())-->Line_36 $$ Key key = new Key(random.nextInt(numberOfEntries))[ FD ]
Line_39 $$ if (k.key == 0) -->Line_42 $$ Integer value = cache.get(new Key(k.key / 2))[ CD ]
Line_13 $$ if (this == o)-->Line_14 $$ return true[ CD ]
Line_3 $$ class Key -->Line_23 $$ return key % 2[ CD ]
Line_3 $$ class Key -->Line_15 $$ if (o == null || getClass() != o.getClass())[ FD ]
Line_3 $$ class Key -->Line_17 $$ Key key1 = (Key) o[ CD ]
Line_3 $$ class Key -->Line_13 $$ if (this == o)[ CD ]
Line_31 $$ for (int i = 0; i < numberOfThreads; i++) -->Line_32 $$ Thread thread = new Thread(() -> [ CD ]
Line_36 $$ Key key = new Key(random.nextInt(numberOfEntries))-->Line_38 $$ cache.computeIfAbsent(key,  k -> [ FD ]
