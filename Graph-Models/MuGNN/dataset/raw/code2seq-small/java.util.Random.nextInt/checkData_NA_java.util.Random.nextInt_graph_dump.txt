Line_5 $$ for (int i = 0; i < n; i++) -->Line_6 $$ if (expected[j] != actual[i]) [ CD ]
Line_6 $$ if (expected[j] != actual[i]) -->Line_7 $$ Assert.fail("expected[" + j + "]=" + expected[j] + " != actual[" + i + "]=" + actual[i] + ", offset=" + offset + ", remaining=" + remaining + ", n=" + n)[ CD ]
Line_3 $$ if (RANDOM.nextInt(100) == 0) -->Line_4 $$ int j = (int) (offset % actual.length)[ CD ]
Line_2 $$ static void checkData(long offset, long remaining, int n, byte[] actual, byte[] expected) -->Line_3 $$ if (RANDOM.nextInt(100) == 0) [ CD ]
Line_3 $$ if (RANDOM.nextInt(100) == 0) -->Line_5 $$ for (int i = 0; i < n; i++) [ CD ]
Line_4 $$ int j = (int) (offset % actual.length)-->Line_9 $$ j++[ FD ]
Line_5 $$ for (int i = 0; i < n; i++) -->Line_9 $$ j++[ CD ]
Line_2 $$ static void checkData(long offset, long remaining, int n, byte[] actual, byte[] expected) -->Line_5 $$ for (int i = 0; i < n; i++) [ FD ]
