Line_35 $$ left = list.remove(random.nextInt(list.size()))-->Line_41 $$ IndexFieldData<?> leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_32 $$ Entry<FieldDataType, Type> left-->Line_38 $$ right = left = list.remove(0)[ FD ]
Line_21 $$ if (random.nextInt(10) == 0) -->Line_22 $$ refreshReader()[ CD ]
Line_30 $$ Preprocessor pre = new Preprocessor()-->Line_45 $$ duelFieldDataBytes(random, context, rightFieldData, leftFieldData, pre)[ FD ]
Line_31 $$ while (!list.isEmpty()) -->Line_45 $$ duelFieldDataBytes(random, context, rightFieldData, leftFieldData, pre)[ CD ]
Line_29 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_38 $$ right = left = list.remove(0)[ FD ]
Line_43 $$ IndexFieldData<?> rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))-->Line_50 $$ duelFieldDataBytes(random, atomicReaderContext, leftFieldData, rightFieldData, pre)[ FD ]
Line_46 $$ DirectoryReader perSegment = DirectoryReader.open(writer, true)-->Line_52 $$ perSegment.close()[ FD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_5 $$ for (int i = 0; i < atLeast; i++) [ CD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_4 $$ int atLeast = scaledRandomIntBetween(200, 1500)[ CD ]
Line_41 $$ IndexFieldData<?> leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))-->Line_44 $$ duelFieldDataBytes(random, context, leftFieldData, rightFieldData, pre)[ FD ]
Line_26 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_28 $$ typeMap.put(new FieldDataType("string", Settings.builder().put("format", "doc_values")), Type.Bytes)[ FD ]
Line_31 $$ while (!list.isEmpty()) -->Line_41 $$ IndexFieldData<?> leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))[ CD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_30 $$ Preprocessor pre = new Preprocessor()[ CD ]
Line_46 $$ DirectoryReader perSegment = DirectoryReader.open(writer, true)-->Line_47 $$ CompositeReaderContext composite = perSegment.getContext()[ FD ]
Line_29 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_36 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_5 $$ for (int i = 0; i < atLeast; i++) -->Line_21 $$ if (random.nextInt(10) == 0) [ CD ]
Line_3 $$ Random random = getRandom()-->Line_45 $$ duelFieldDataBytes(random, context, rightFieldData, leftFieldData, pre)[ FD ]
Line_33 $$ Entry<FieldDataType, Type> right-->Line_43 $$ IndexFieldData<?> rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_28 $$ typeMap.put(new FieldDataType("string", Settings.builder().put("format", "doc_values")), Type.Bytes)[ CD ]
Line_15 $$ if (random.nextInt(10) == 0) -->Line_16 $$ d.add(new StringField("bytes", "", Field.Store.NO))[ CD ]
Line_26 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_29 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())[ FD ]
Line_32 $$ Entry<FieldDataType, Type> left-->Line_41 $$ IndexFieldData<?> leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_3 $$ Random random = getRandom()-->Line_15 $$ if (random.nextInt(10) == 0) [ FD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_26 $$ Map<FieldDataType, Type> typeMap = new HashMap()[ CD ]
Line_6 $$ Document d = new Document()-->Line_13 $$ d.add(new SortedSetDocValuesField("bytes", new BytesRef(s)))[ FD ]
Line_47 $$ CompositeReaderContext composite = perSegment.getContext()-->Line_48 $$ List<LeafReaderContext> leaves = composite.leaves()[ FD ]
Line_4 $$ int atLeast = scaledRandomIntBetween(200, 1500)-->Line_5 $$ for (int i = 0; i < atLeast; i++) [ FD ]
Line_43 $$ IndexFieldData<?> rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))-->Line_44 $$ duelFieldDataBytes(random, context, leftFieldData, rightFieldData, pre)[ FD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_29 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())[ CD ]
Line_49 $$ for (LeafReaderContext atomicReaderContext : leaves) -->Line_50 $$ duelFieldDataBytes(random, atomicReaderContext, leftFieldData, rightFieldData, pre)[ FD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_25 $$ LeafReaderContext context = refreshReader()[ CD ]
Line_3 $$ Random random = getRandom()-->Line_21 $$ if (random.nextInt(10) == 0) [ FD ]
Line_34 $$ if (list.size() > 1) -->Line_35 $$ left = list.remove(random.nextInt(list.size()))[ CD ]
Line_36 $$ right = list.remove(random.nextInt(list.size()))-->Line_43 $$ IndexFieldData<?> rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_3 $$ Random random = getRandom()-->Line_8 $$ if (random.nextInt(15) != 0) [ FD ]
Line_6 $$ Document d = new Document()-->Line_20 $$ writer.addDocument(d)[ FD ]
Line_10 $$ for (int j : numbers) -->Line_11 $$ final String s = English.longToEnglish(j)[ FD ]
Line_32 $$ Entry<FieldDataType, Type> left-->Line_35 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_38 $$ right = left = list.remove(0)-->Line_41 $$ IndexFieldData<?> leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_34 $$ if (list.size() > 1) -->Line_36 $$ right = list.remove(random.nextInt(list.size()))[ CD ]
Line_8 $$ if (random.nextInt(15) != 0) -->Line_9 $$ int[] numbers = getNumbers(random, Integer.MAX_VALUE)[ CD ]
Line_25 $$ LeafReaderContext context = refreshReader()-->Line_44 $$ duelFieldDataBytes(random, context, leftFieldData, rightFieldData, pre)[ FD ]
Line_41 $$ IndexFieldData<?> leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))-->Line_50 $$ duelFieldDataBytes(random, atomicReaderContext, leftFieldData, rightFieldData, pre)[ FD ]
Line_31 $$ while (!list.isEmpty()) -->Line_32 $$ Entry<FieldDataType, Type> left[ CD ]
Line_3 $$ Random random = getRandom()-->Line_44 $$ duelFieldDataBytes(random, context, leftFieldData, rightFieldData, pre)[ FD ]
Line_6 $$ Document d = new Document()-->Line_7 $$ d.add(new StringField("_id", "" + i, Field.Store.NO))[ FD ]
Line_3 $$ Random random = getRandom()-->Line_9 $$ int[] numbers = getNumbers(random, Integer.MAX_VALUE)[ FD ]
Line_35 $$ left = list.remove(random.nextInt(list.size()))-->Line_38 $$ right = left = list.remove(0)[ FD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_3 $$ Random random = getRandom()[ CD ]
Line_8 $$ if (random.nextInt(15) != 0) -->Line_15 $$ if (random.nextInt(10) == 0) [ CD ]
Line_3 $$ Random random = getRandom()-->Line_35 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_26 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_27 $$ typeMap.put(new FieldDataType("string", Settings.builder().put("format", "paged_bytes")), Type.Bytes)[ FD ]
Line_31 $$ while (!list.isEmpty()) -->Line_47 $$ CompositeReaderContext composite = perSegment.getContext()[ CD ]
Line_5 $$ for (int i = 0; i < atLeast; i++) -->Line_20 $$ writer.addDocument(d)[ CD ]
Line_31 $$ while (!list.isEmpty()) -->Line_44 $$ duelFieldDataBytes(random, context, leftFieldData, rightFieldData, pre)[ CD ]
Line_29 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_34 $$ if (list.size() > 1) [ FD ]
Line_38 $$ right = left = list.remove(0)-->Line_43 $$ IndexFieldData<?> rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))[ FD ]
Line_5 $$ for (int i = 0; i < atLeast; i++) -->Line_6 $$ Document d = new Document()[ CD ]
Line_43 $$ IndexFieldData<?> rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))-->Line_45 $$ duelFieldDataBytes(random, context, rightFieldData, leftFieldData, pre)[ FD ]
Line_25 $$ LeafReaderContext context = refreshReader()-->Line_45 $$ duelFieldDataBytes(random, context, rightFieldData, leftFieldData, pre)[ FD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_31 $$ while (!list.isEmpty()) [ CD ]
Line_31 $$ while (!list.isEmpty()) -->Line_52 $$ perSegment.close()[ CD ]
Line_33 $$ Entry<FieldDataType, Type> right-->Line_36 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_29 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_35 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_41 $$ IndexFieldData<?> leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT))-->Line_45 $$ duelFieldDataBytes(random, context, rightFieldData, leftFieldData, pre)[ FD ]
Line_2 $$ public void testDuelStrings() throws Exception -->Line_27 $$ typeMap.put(new FieldDataType("string", Settings.builder().put("format", "paged_bytes")), Type.Bytes)[ CD ]
Line_31 $$ while (!list.isEmpty()) -->Line_43 $$ IndexFieldData<?> rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT))[ CD ]
Line_31 $$ while (!list.isEmpty()) -->Line_34 $$ if (list.size() > 1) [ CD ]
Line_5 $$ for (int i = 0; i < atLeast; i++) -->Line_7 $$ d.add(new StringField("_id", "" + i, Field.Store.NO))[ CD ]
Line_6 $$ Document d = new Document()-->Line_16 $$ d.add(new StringField("bytes", "", Field.Store.NO))[ FD ]
Line_6 $$ Document d = new Document()-->Line_17 $$ d.add(new SortedSetDocValuesField("bytes", new BytesRef()))[ FD ]
Line_34 $$ if (list.size() > 1) -->Line_38 $$ right = left = list.remove(0)[ CD ]
Line_31 $$ while (!list.isEmpty()) -->Line_48 $$ List<LeafReaderContext> leaves = composite.leaves()[ CD ]
Line_31 $$ while (!list.isEmpty()) -->Line_46 $$ DirectoryReader perSegment = DirectoryReader.open(writer, true)[ CD ]
Line_29 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_31 $$ while (!list.isEmpty()) [ FD ]
Line_15 $$ if (random.nextInt(10) == 0) -->Line_17 $$ d.add(new SortedSetDocValuesField("bytes", new BytesRef()))[ CD ]
Line_31 $$ while (!list.isEmpty()) -->Line_40 $$ ifdService.clear()[ CD ]
Line_31 $$ while (!list.isEmpty()) -->Line_33 $$ Entry<FieldDataType, Type> right[ CD ]
Line_30 $$ Preprocessor pre = new Preprocessor()-->Line_44 $$ duelFieldDataBytes(random, context, leftFieldData, rightFieldData, pre)[ FD ]
Line_3 $$ Random random = getRandom()-->Line_50 $$ duelFieldDataBytes(random, atomicReaderContext, leftFieldData, rightFieldData, pre)[ FD ]
Line_36 $$ right = list.remove(random.nextInt(list.size()))-->Line_38 $$ right = left = list.remove(0)[ FD ]
Line_31 $$ while (!list.isEmpty()) -->Line_42 $$ ifdService.clear()[ CD ]
Line_5 $$ for (int i = 0; i < atLeast; i++) -->Line_8 $$ if (random.nextInt(15) != 0) [ CD ]
Line_30 $$ Preprocessor pre = new Preprocessor()-->Line_50 $$ duelFieldDataBytes(random, atomicReaderContext, leftFieldData, rightFieldData, pre)[ FD ]
Line_6 $$ Document d = new Document()-->Line_12 $$ d.add(new StringField("bytes", s, Field.Store.NO))[ FD ]
Line_3 $$ Random random = getRandom()-->Line_36 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_33 $$ Entry<FieldDataType, Type> right-->Line_38 $$ right = left = list.remove(0)[ FD ]
