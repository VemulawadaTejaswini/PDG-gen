Line_6 $$ List<List<Integer>> lists = new LCSGenerator<Integer>(Ordering.<Integer>natural(), levelCount, levelMultiplier, levelOverlap) -->Line_10 $$ return r.nextInt()[ CD ]
Line_5 $$ Reducer<Integer, Counted<Integer>> reducer = new Counter<Integer>()-->Line_20 $$ testMergeIterator(reducer, lists)[ FD ]
Line_13 $$ if (sizeOfL0 > 0 && countOfL0 > 0)-->Line_14 $$ lists.addAll(new NaturalListGenerator<Integer>(countOfL0, sizeOfL0 / countOfL0) [ CD ]
Line_2 $$ public void testLCS(int levelCount, int levelMultiplier, float levelOverlap, int countOfL0, int sizeOfL0) -->Line_13 $$ if (sizeOfL0 > 0 && countOfL0 > 0)[ CD ]
Line_2 $$ public void testLCS(int levelCount, int levelMultiplier, float levelOverlap, int countOfL0, int sizeOfL0) -->Line_3 $$ System.out.printf("testLCS(lc=%d,lm=%d,o=%.2f,L0=%d*%d)\n", levelCount, levelMultiplier, levelOverlap, countOfL0, countOfL0 == 0 ? 0 : sizeOfL0 / countOfL0)[ CD ]
Line_14 $$ lists.addAll(new NaturalListGenerator<Integer>(countOfL0, sizeOfL0 / countOfL0) -->Line_17 $$ return r.nextInt()[ CD ]
Line_6 $$ List<List<Integer>> lists = new LCSGenerator<Integer>(Ordering.<Integer>natural(), levelCount, levelMultiplier, levelOverlap) -->Line_20 $$ testMergeIterator(reducer, lists)[ FD ]
Line_2 $$ public void testLCS(int levelCount, int levelMultiplier, float levelOverlap, int countOfL0, int sizeOfL0) -->Line_5 $$ Reducer<Integer, Counted<Integer>> reducer = new Counter<Integer>()[ CD ]
Line_6 $$ List<List<Integer>> lists = new LCSGenerator<Integer>(Ordering.<Integer>natural(), levelCount, levelMultiplier, levelOverlap) -->Line_14 $$ lists.addAll(new NaturalListGenerator<Integer>(countOfL0, sizeOfL0 / countOfL0) [ FD ]
Line_2 $$ public void testLCS(int levelCount, int levelMultiplier, float levelOverlap, int countOfL0, int sizeOfL0) -->Line_6 $$ List<List<Integer>> lists = new LCSGenerator<Integer>(Ordering.<Integer>natural(), levelCount, levelMultiplier, levelOverlap) [ CD ]
Line_4 $$ final Random r = new Random()-->Line_10 $$ return r.nextInt()[ FD ]
Line_4 $$ final Random r = new Random()-->Line_17 $$ return r.nextInt()[ FD ]
Line_2 $$ public void testLCS(int levelCount, int levelMultiplier, float levelOverlap, int countOfL0, int sizeOfL0) -->Line_3 $$ System.out.printf("testLCS(lc=%d,lm=%d,o=%.2f,L0=%d*%d)\n", levelCount, levelMultiplier, levelOverlap, countOfL0, countOfL0 == 0 ? 0 : sizeOfL0 / countOfL0)[ FD ]
Line_2 $$ public void testLCS(int levelCount, int levelMultiplier, float levelOverlap, int countOfL0, int sizeOfL0) -->Line_20 $$ testMergeIterator(reducer, lists)[ CD ]
Line_2 $$ public void testLCS(int levelCount, int levelMultiplier, float levelOverlap, int countOfL0, int sizeOfL0) -->Line_4 $$ final Random r = new Random()[ CD ]
