Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_7 $$ for (int i = 0; i < usedSpace.length; i++) [ CD ]
Line_7 $$ for (int i = 0; i < usedSpace.length; i++) -->Line_24 $$ List<Block> nodeBlockList = blockReports.get(i)[ FD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_6 $$ Block[][] results = new Block[usedSpace.length][][ CD ]
Line_12 $$ boolean notChosen = true-->Line_16 $$ notChosen = false[ FD ]
Line_5 $$ List<List<Block>> blockReports = new ArrayList<List<Block>>(usedSpace.length)-->Line_8 $$ blockReports.add(new ArrayList<Block>())[ FD ]
Line_24 $$ List<Block> nodeBlockList = blockReports.get(i)-->Line_25 $$ results[i] = nodeBlockList.toArray(new Block[nodeBlockList.size()])[ FD ]
Line_23 $$ for (int i = 0; i < usedSpace.length; i++) -->Line_24 $$ List<Block> nodeBlockList = blockReports.get(i)[ FD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_5 $$ List<List<Block>> blockReports = new ArrayList<List<Block>>(usedSpace.length)[ CD ]
Line_14 $$ int chosenIndex = r.nextInt(usedSpace.length)-->Line_17 $$ blockReports.get(chosenIndex).add(blocks[i].getLocalBlock())[ FD ]
Line_10 $$ for (int i = 0; i < blocks.length; i++) -->Line_11 $$ for (int j = 0; j < replicationFactor; j++) [ CD ]
Line_7 $$ for (int i = 0; i < usedSpace.length; i++) -->Line_23 $$ for (int i = 0; i < usedSpace.length; i++) [ FD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_10 $$ for (int i = 0; i < blocks.length; i++) [ CD ]
Line_10 $$ for (int i = 0; i < blocks.length; i++) -->Line_24 $$ List<Block> nodeBlockList = blockReports.get(i)[ FD ]
Line_23 $$ for (int i = 0; i < usedSpace.length; i++) -->Line_25 $$ results[i] = nodeBlockList.toArray(new Block[nodeBlockList.size()])[ CD ]
Line_11 $$ for (int j = 0; j < replicationFactor; j++) -->Line_12 $$ boolean notChosen = true[ CD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_4 $$ System.arraycopy(distribution, 0, usedSpace, 0, distribution.length)[ FD ]
Line_5 $$ List<List<Block>> blockReports = new ArrayList<List<Block>>(usedSpace.length)-->Line_17 $$ blockReports.get(chosenIndex).add(blocks[i].getLocalBlock())[ FD ]
Line_15 $$ if (usedSpace[chosenIndex] > 0) -->Line_16 $$ notChosen = false[ CD ]
Line_15 $$ if (usedSpace[chosenIndex] > 0) -->Line_17 $$ blockReports.get(chosenIndex).add(blocks[i].getLocalBlock())[ CD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_4 $$ System.arraycopy(distribution, 0, usedSpace, 0, distribution.length)[ CD ]
Line_23 $$ for (int i = 0; i < usedSpace.length; i++) -->Line_24 $$ List<Block> nodeBlockList = blockReports.get(i)[ CD ]
Line_3 $$ long[] usedSpace = new long[distribution.length]-->Line_4 $$ System.arraycopy(distribution, 0, usedSpace, 0, distribution.length)[ FD ]
Line_10 $$ for (int i = 0; i < blocks.length; i++) -->Line_23 $$ for (int i = 0; i < usedSpace.length; i++) [ FD ]
Line_13 $$ while (notChosen) -->Line_15 $$ if (usedSpace[chosenIndex] > 0) [ CD ]
Line_5 $$ List<List<Block>> blockReports = new ArrayList<List<Block>>(usedSpace.length)-->Line_24 $$ List<Block> nodeBlockList = blockReports.get(i)[ FD ]
Line_13 $$ while (notChosen) -->Line_14 $$ int chosenIndex = r.nextInt(usedSpace.length)[ CD ]
Line_7 $$ for (int i = 0; i < usedSpace.length; i++) -->Line_10 $$ for (int i = 0; i < blocks.length; i++) [ FD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_11 $$ for (int j = 0; j < replicationFactor; j++) [ FD ]
Line_15 $$ if (usedSpace[chosenIndex] > 0) -->Line_18 $$ usedSpace[chosenIndex] -= blocks[i].getNumBytes()[ CD ]
Line_7 $$ for (int i = 0; i < usedSpace.length; i++) -->Line_8 $$ blockReports.add(new ArrayList<Block>())[ CD ]
Line_11 $$ for (int j = 0; j < replicationFactor; j++) -->Line_13 $$ while (notChosen) [ CD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_27 $$ return results[ CD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_3 $$ long[] usedSpace = new long[distribution.length][ CD ]
Line_2 $$ static Block[][] distributeBlocks(ExtendedBlock[] blocks, short replicationFactor, final long[] distribution) -->Line_23 $$ for (int i = 0; i < usedSpace.length; i++) [ CD ]
