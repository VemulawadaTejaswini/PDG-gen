Line_27 $$ final LineReader lreader = new LineReader(in)-->Line_33 $$ lreader.readLine(line)[ FD ]
Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))-->Line_12 $$ if (infile.getLen() > Integer.MAX_VALUE) [ FD ]
Line_5 $$ final Random rand = new Random()-->Line_8 $$ rand.setSeed(seed)[ FD ]
Line_5 $$ final Random rand = new Random()-->Line_6 $$ final long seed = rand.nextLong()[ FD ]
Line_16 $$ final Text line = new Text()-->Line_39 $$ final int seq2 = readLeadingInt(line)[ FD ]
Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))-->Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) [ FD ]
Line_6 $$ final long seed = rand.nextLong()-->Line_8 $$ rand.setSeed(seed)[ FD ]
Line_4 $$ final Configuration conf = new Configuration()-->Line_9 $$ SplittableCompressionCodec codec = ReflectionUtils.newInstance(codecClass, conf)[ FD ]
Line_4 $$ final Configuration conf = new Configuration()-->Line_10 $$ final FileSystem fs = FileSystem.getLocal(conf)[ FD ]
Line_9 $$ SplittableCompressionCodec codec = ReflectionUtils.newInstance(codecClass, conf)-->Line_17 $$ final Decompressor dcmp = CodecPool.getDecompressor(codec)[ FD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_23 $$ if (in.getAdjustedStart() >= flen) [ CD ]
Line_5 $$ final Random rand = new Random()-->Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) [ FD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_36 $$ if (in.getPos() >= flen) [ CD ]
Line_15 $$ final int flen = (int) infile.getLen()-->Line_23 $$ if (in.getAdjustedStart() >= flen) [ FD ]
Line_17 $$ final Decompressor dcmp = CodecPool.getDecompressor(codec)-->Line_43 $$ CodecPool.returnDecompressor(dcmp)[ FD ]
Line_10 $$ final FileSystem fs = FileSystem.getLocal(conf)-->Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))[ FD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_15 $$ final int flen = (int) infile.getLen()[ CD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_5 $$ final Random rand = new Random()[ CD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_7 $$ LOG.info("seed: " + seed)[ CD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_34 $$ final int seq1 = readLeadingInt(line)[ CD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_9 $$ SplittableCompressionCodec codec = ReflectionUtils.newInstance(codecClass, conf)[ CD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_9 $$ SplittableCompressionCodec codec = ReflectionUtils.newInstance(codecClass, conf)[ FD ]
Line_27 $$ final LineReader lreader = new LineReader(in)-->Line_35 $$ lreader.readLine(line)[ FD ]
Line_15 $$ final int flen = (int) infile.getLen()-->Line_36 $$ if (in.getPos() >= flen) [ FD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_6 $$ final long seed = rand.nextLong()[ CD ]
Line_5 $$ final Random rand = new Random()-->Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))[ FD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_16 $$ final Text line = new Text()[ CD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_39 $$ final int seq2 = readLeadingInt(line)[ CD ]
Line_3 $$ final long DEFLBYTES = 2 * 1024 * 1024-->Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))[ FD ]
Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))-->Line_15 $$ final int flen = (int) infile.getLen()[ FD ]
Line_15 $$ final int flen = (int) infile.getLen()-->Line_30 $$ if (in.getPos() >= flen) [ FD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_8 $$ rand.setSeed(seed)[ CD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_40 $$ assertEquals("Mismatched lines", seq1 + 1, seq2)[ CD ]
Line_16 $$ final Text line = new Text()-->Line_34 $$ final int seq1 = readLeadingInt(line)[ FD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_12 $$ if (infile.getLen() > Integer.MAX_VALUE) [ CD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_4 $$ final Configuration conf = new Configuration()[ CD ]
Line_12 $$ if (infile.getLen() > Integer.MAX_VALUE) -->Line_13 $$ fail("Unexpected compression: " + DEFLBYTES + " -> " + infile.getLen())[ CD ]
Line_16 $$ final Text line = new Text()-->Line_35 $$ lreader.readLine(line)[ FD ]
Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))-->Line_13 $$ fail("Unexpected compression: " + DEFLBYTES + " -> " + infile.getLen())[ FD ]
Line_39 $$ final int seq2 = readLeadingInt(line)-->Line_40 $$ assertEquals("Mismatched lines", seq1 + 1, seq2)[ FD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_17 $$ final Decompressor dcmp = CodecPool.getDecompressor(codec)[ CD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))[ CD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_3 $$ final long DEFLBYTES = 2 * 1024 * 1024[ CD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_35 $$ lreader.readLine(line)[ CD ]
Line_2 $$ private void testSplitableCodec(Class<? extends SplittableCompressionCodec> codecClass) throws IOException -->Line_10 $$ final FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_9 $$ SplittableCompressionCodec codec = ReflectionUtils.newInstance(codecClass, conf)-->Line_11 $$ final FileStatus infile = fs.getFileStatus(writeSplitTestFile(fs, rand, codec, DEFLBYTES))[ FD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_27 $$ final LineReader lreader = new LineReader(in)[ CD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_33 $$ lreader.readLine(line)[ CD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_30 $$ if (in.getPos() >= flen) [ CD ]
Line_16 $$ final Text line = new Text()-->Line_33 $$ lreader.readLine(line)[ FD ]
Line_19 $$ for (int pos = 0; pos < infile.getLen(); pos += rand.nextInt(flen / 8)) -->Line_26 $$ LOG.info("SAMPLE " + in.getAdjustedStart() + "," + in.getAdjustedEnd())[ CD ]
