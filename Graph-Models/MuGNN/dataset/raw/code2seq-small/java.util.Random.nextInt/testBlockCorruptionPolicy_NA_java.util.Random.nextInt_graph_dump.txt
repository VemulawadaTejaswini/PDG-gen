Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)[ CD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_18 $$ DFSTestUtil.waitReplication(fs, file1, (short) 2)[ CD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_28 $$ cluster.shutdown()[ CD ]
Line_6 $$ FileSystem fs = null-->Line_10 $$ fs = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_3 $$ Configuration conf = new HdfsConfiguration()[ CD ]
Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)-->Line_21 $$ assertTrue(MiniDFSCluster.corruptReplica(1, block))[ FD ]
Line_6 $$ FileSystem fs = null-->Line_18 $$ DFSTestUtil.waitReplication(fs, file1, (short) 2)[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_10 $$ fs = cluster.getFileSystem()[ CD ]
Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")-->Line_15 $$ assertFalse(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_12 $$ DFSTestUtil.createFile(fs, file1, 1024, (short) 3, 0)[ CD ]
Line_6 $$ FileSystem fs = null-->Line_26 $$ DFSTestUtil.waitReplication(fs, file1, (short) 3)[ FD ]
Line_10 $$ fs = cluster.getFileSystem()-->Line_26 $$ DFSTestUtil.waitReplication(fs, file1, (short) 3)[ FD ]
Line_10 $$ fs = cluster.getFileSystem()-->Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)[ FD ]
Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")-->Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_23 $$ for (DataNode dn : cluster.getDataNodes()) [ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_19 $$ assertFalse(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_9 $$ cluster.waitActive()[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_19 $$ assertFalse(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ CD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_9 $$ cluster.waitActive()[ CD ]
Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)-->Line_20 $$ assertTrue(MiniDFSCluster.corruptReplica(0, block))[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_16 $$ assertTrue(MiniDFSCluster.corruptReplica(rand, block))[ CD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")[ CD ]
Line_10 $$ fs = cluster.getFileSystem()-->Line_18 $$ DFSTestUtil.waitReplication(fs, file1, (short) 2)[ FD ]
Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")-->Line_12 $$ DFSTestUtil.createFile(fs, file1, 1024, (short) 3, 0)[ FD ]
Line_3 $$ Configuration conf = new HdfsConfiguration()-->Line_4 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 1000L)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_17 $$ cluster.restartDataNode(rand)[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_4 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 1000L)[ CD ]
Line_7 $$ int rand = random.nextInt(3)-->Line_17 $$ cluster.restartDataNode(rand)[ FD ]
Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")-->Line_26 $$ DFSTestUtil.waitReplication(fs, file1, (short) 3)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_27 $$ assertTrue(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_27 $$ assertTrue(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ CD ]
Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")-->Line_27 $$ assertTrue(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_10 $$ fs = cluster.getFileSystem()[ FD ]
Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)-->Line_22 $$ assertTrue(MiniDFSCluster.corruptReplica(2, block))[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_26 $$ DFSTestUtil.waitReplication(fs, file1, (short) 3)[ CD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_15 $$ assertFalse(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ CD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_21 $$ assertTrue(MiniDFSCluster.corruptReplica(1, block))[ CD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_22 $$ assertTrue(MiniDFSCluster.corruptReplica(2, block))[ CD ]
Line_6 $$ FileSystem fs = null-->Line_12 $$ DFSTestUtil.createFile(fs, file1, 1024, (short) 3, 0)[ FD ]
Line_6 $$ FileSystem fs = null-->Line_14 $$ DFSTestUtil.waitReplication(fs, file1, (short) 3)[ FD ]
Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")-->Line_19 $$ assertFalse(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_14 $$ DFSTestUtil.waitReplication(fs, file1, (short) 3)[ CD ]
Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")-->Line_14 $$ DFSTestUtil.waitReplication(fs, file1, (short) 3)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_28 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_7 $$ int rand = random.nextInt(3)[ CD ]
Line_10 $$ fs = cluster.getFileSystem()-->Line_14 $$ DFSTestUtil.waitReplication(fs, file1, (short) 3)[ FD ]
Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)-->Line_16 $$ assertTrue(MiniDFSCluster.corruptReplica(rand, block))[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_20 $$ assertTrue(MiniDFSCluster.corruptReplica(0, block))[ CD ]
Line_11 $$ Path file1 = new Path("/tmp/testBlockVerification/file1")-->Line_18 $$ DFSTestUtil.waitReplication(fs, file1, (short) 2)[ FD ]
Line_23 $$ for (DataNode dn : cluster.getDataNodes()) -->Line_24 $$ DataNodeTestUtils.runBlockScannerForBlock(dn, block)[ FD ]
Line_10 $$ fs = cluster.getFileSystem()-->Line_12 $$ DFSTestUtil.createFile(fs, file1, 1024, (short) 3, 0)[ FD ]
Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_15 $$ assertFalse(DFSTestUtil.allBlockReplicasCorrupt(cluster, file1, 0))[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_17 $$ cluster.restartDataNode(rand)[ CD ]
Line_7 $$ int rand = random.nextInt(3)-->Line_16 $$ assertTrue(MiniDFSCluster.corruptReplica(rand, block))[ FD ]
Line_5 $$ Random random = new Random()-->Line_7 $$ int rand = random.nextInt(3)[ FD ]
Line_6 $$ FileSystem fs = null-->Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_6 $$ FileSystem fs = null[ CD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_5 $$ Random random = new Random()[ CD ]
Line_13 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, file1)-->Line_24 $$ DataNodeTestUtils.runBlockScannerForBlock(dn, block)[ FD ]
Line_2 $$ public void testBlockCorruptionPolicy() throws Exception -->Line_8 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()[ CD ]
