Line_9 $$ for (int i = 0; i < numValues; i++) -->Line_76 $$ assertThat(docs.nextOrd(), equalTo(docOrds.get(i)))[ FD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_13 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() [ CD ]
Line_70 $$ if (!docOrds.isEmpty()) -->Line_75 $$ for (int i = 0; i < numOrds; i++) [ CD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_61 $$ Ordinals ords = creationMultiOrdinals(builder)[ CD ]
Line_70 $$ if (!docOrds.isEmpty()) -->Line_74 $$ assertThat(numOrds, equalTo(docOrds.size()))[ CD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_4 $$ int numDocs = 100 + random.nextInt(1000)[ CD ]
Line_53 $$ if (o1.ord > o2.ord) -->Line_54 $$ return 1[ CD ]
Line_3 $$ Random random = getRandom()-->Line_6 $$ int numValues = 100 + random.nextInt(100000)[ FD ]
Line_9 $$ for (int i = 0; i < numValues; i++) -->Line_79 $$ for (int i = 0; i < array.length; i++) [ FD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_12 $$ List<OrdAndId> ordsAndIds = new ArrayList(ordsAndIdSet)[ CD ]
Line_20 $$ if (o1.ord == o2.ord) -->Line_24 $$ if (o1.id > o2.id) [ CD ]
Line_79 $$ for (int i = 0; i < array.length; i++) -->Line_80 $$ array[i] = docOrds.get(i)[ FD ]
Line_13 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() -->Line_17 $$ if (o1.ord < o2.ord) [ CD ]
Line_79 $$ for (int i = 0; i < array.length; i++) -->Line_85 $$ assertThat((long) singleOrds.getOrd(i), equalTo(RandomAccessOrds.NO_MORE_ORDS))[ FD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_7 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)[ CD ]
Line_70 $$ if (!docOrds.isEmpty()) -->Line_71 $$ assertThat((long) singleOrds.getOrd(docId), equalTo(docOrds.get(0)))[ CD ]
Line_67 $$ if (docId == ordAndId.id) -->Line_68 $$ docOrds.add(ordAndId.ord)[ CD ]
Line_42 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() -->Line_58 $$ return 1[ CD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_5 $$ int numOrdinals = 1 + random.nextInt(200)[ CD ]
Line_75 $$ for (int i = 0; i < numOrds; i++) -->Line_76 $$ assertThat(docs.nextOrd(), equalTo(docOrds.get(i)))[ FD ]
Line_13 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() -->Line_20 $$ if (o1.ord == o2.ord) [ CD ]
Line_46 $$ if (o1.id < o2.id) -->Line_47 $$ return -1[ CD ]
Line_7 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)-->Line_61 $$ Ordinals ords = creationMultiOrdinals(builder)[ FD ]
Line_75 $$ for (int i = 0; i < numOrds; i++) -->Line_85 $$ assertThat((long) singleOrds.getOrd(i), equalTo(RandomAccessOrds.NO_MORE_ORDS))[ FD ]
Line_70 $$ if (!docOrds.isEmpty()) -->Line_82 $$ assertIter(docs, docId, array)[ CD ]
Line_20 $$ if (o1.ord == o2.ord) -->Line_21 $$ if (o1.id < o2.id) [ CD ]
Line_5 $$ int numOrdinals = 1 + random.nextInt(200)-->Line_10 $$ ordsAndIdSet.add(new OrdAndId(random.nextInt(numOrdinals), random.nextInt(numDocs)))[ FD ]
Line_13 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() -->Line_29 $$ return 1[ CD ]
Line_70 $$ if (!docOrds.isEmpty()) -->Line_79 $$ for (int i = 0; i < array.length; i++) [ CD ]
Line_9 $$ for (int i = 0; i < numValues; i++) -->Line_10 $$ ordsAndIdSet.add(new OrdAndId(random.nextInt(numOrdinals), random.nextInt(numDocs)))[ CD ]
Line_75 $$ for (int i = 0; i < numOrds; i++) -->Line_80 $$ array[i] = docOrds.get(i)[ FD ]
Line_67 $$ if (docId == ordAndId.id) -->Line_84 $$ for (int i = docId + 1; i < ordAndId.id; i++) [ CD ]
Line_84 $$ for (int i = docId + 1; i < ordAndId.id; i++) -->Line_85 $$ assertThat((long) singleOrds.getOrd(i), equalTo(RandomAccessOrds.NO_MORE_ORDS))[ FD ]
Line_20 $$ if (o1.ord == o2.ord) -->Line_27 $$ return 0[ CD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_63 $$ final SortedDocValues singleOrds = MultiValueMode.MIN.select(docs)[ CD ]
Line_21 $$ if (o1.id < o2.id) -->Line_22 $$ return -1[ CD ]
Line_8 $$ Set<OrdAndId> ordsAndIdSet = new HashSet()-->Line_10 $$ ordsAndIdSet.add(new OrdAndId(random.nextInt(numOrdinals), random.nextInt(numDocs)))[ FD ]
Line_6 $$ int numValues = 100 + random.nextInt(100000)-->Line_9 $$ for (int i = 0; i < numValues; i++) [ FD ]
Line_70 $$ if (!docOrds.isEmpty()) -->Line_73 $$ final int numOrds = docs.cardinality()[ CD ]
Line_3 $$ Random random = getRandom()-->Line_5 $$ int numOrdinals = 1 + random.nextInt(200)[ FD ]
Line_12 $$ List<OrdAndId> ordsAndIds = new ArrayList(ordsAndIdSet)-->Line_64 $$ int docId = ordsAndIds.get(0).id[ FD ]
Line_84 $$ for (int i = docId + 1; i < ordAndId.id; i++) -->Line_85 $$ assertThat((long) singleOrds.getOrd(i), equalTo(RandomAccessOrds.NO_MORE_ORDS))[ CD ]
Line_67 $$ if (docId == ordAndId.id) -->Line_70 $$ if (!docOrds.isEmpty()) [ CD ]
Line_67 $$ if (docId == ordAndId.id) -->Line_88 $$ docOrds.clear()[ CD ]
Line_75 $$ for (int i = 0; i < numOrds; i++) -->Line_79 $$ for (int i = 0; i < array.length; i++) [ FD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_32 $$ long lastOrd = -1[ CD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_8 $$ Set<OrdAndId> ordsAndIdSet = new HashSet()[ CD ]
Line_49 $$ if (o1.id == o2.id) -->Line_53 $$ if (o1.ord > o2.ord) [ CD ]
Line_12 $$ List<OrdAndId> ordsAndIds = new ArrayList(ordsAndIdSet)-->Line_42 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() [ FD ]
Line_42 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() -->Line_49 $$ if (o1.id == o2.id) [ CD ]
Line_12 $$ List<OrdAndId> ordsAndIds = new ArrayList(ordsAndIdSet)-->Line_13 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() [ FD ]
Line_75 $$ for (int i = 0; i < numOrds; i++) -->Line_76 $$ assertThat(docs.nextOrd(), equalTo(docOrds.get(i)))[ CD ]
Line_9 $$ for (int i = 0; i < numValues; i++) -->Line_84 $$ for (int i = docId + 1; i < ordAndId.id; i++) [ FD ]
Line_17 $$ if (o1.ord < o2.ord) -->Line_18 $$ return -1[ CD ]
Line_9 $$ for (int i = 0; i < numValues; i++) -->Line_80 $$ array[i] = docOrds.get(i)[ FD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_6 $$ int numValues = 100 + random.nextInt(100000)[ CD ]
Line_49 $$ if (o1.id == o2.id) -->Line_50 $$ if (o1.ord < o2.ord) [ CD ]
Line_34 $$ if (lastOrd != ordAndId.ord) -->Line_36 $$ builder.nextOrdinal()[ CD ]
Line_75 $$ for (int i = 0; i < numOrds; i++) -->Line_84 $$ for (int i = docId + 1; i < ordAndId.id; i++) [ FD ]
Line_42 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() -->Line_46 $$ if (o1.id < o2.id) [ CD ]
Line_7 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)-->Line_40 $$ builder.addDoc(ordAndId.id)[ FD ]
Line_79 $$ for (int i = 0; i < array.length; i++) -->Line_84 $$ for (int i = docId + 1; i < ordAndId.id; i++) [ FD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_42 $$ Collections.sort(ordsAndIds, new Comparator<OrdAndId>() [ CD ]
Line_3 $$ Random random = getRandom()-->Line_4 $$ int numDocs = 100 + random.nextInt(1000)[ FD ]
Line_79 $$ for (int i = 0; i < array.length; i++) -->Line_80 $$ array[i] = docOrds.get(i)[ CD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_62 $$ RandomAccessOrds docs = ords.ordinals()[ CD ]
Line_4 $$ int numDocs = 100 + random.nextInt(1000)-->Line_10 $$ ordsAndIdSet.add(new OrdAndId(random.nextInt(numOrdinals), random.nextInt(numDocs)))[ FD ]
Line_7 $$ OrdinalsBuilder builder = new OrdinalsBuilder(numDocs)-->Line_36 $$ builder.nextOrdinal()[ FD ]
Line_9 $$ for (int i = 0; i < numValues; i++) -->Line_75 $$ for (int i = 0; i < numOrds; i++) [ FD ]
Line_24 $$ if (o1.id > o2.id) -->Line_25 $$ return 1[ CD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_9 $$ for (int i = 0; i < numValues; i++) [ CD ]
Line_50 $$ if (o1.ord < o2.ord) -->Line_51 $$ return -1[ CD ]
Line_2 $$ public void testRandomValues() throws IOException -->Line_3 $$ Random random = getRandom()[ CD ]
Line_9 $$ for (int i = 0; i < numValues; i++) -->Line_85 $$ assertThat((long) singleOrds.getOrd(i), equalTo(RandomAccessOrds.NO_MORE_ORDS))[ FD ]
Line_70 $$ if (!docOrds.isEmpty()) -->Line_72 $$ docs.setDocument(docId)[ CD ]
Line_49 $$ if (o1.id == o2.id) -->Line_56 $$ return 0[ CD ]
Line_3 $$ Random random = getRandom()-->Line_10 $$ ordsAndIdSet.add(new OrdAndId(random.nextInt(numOrdinals), random.nextInt(numDocs)))[ FD ]
Line_67 $$ if (docId == ordAndId.id) -->Line_89 $$ docOrds.add(ordAndId.ord)[ CD ]
