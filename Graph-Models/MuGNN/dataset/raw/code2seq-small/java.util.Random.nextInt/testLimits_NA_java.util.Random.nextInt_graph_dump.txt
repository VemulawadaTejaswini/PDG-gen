Line_7 $$ final String nnUri = FileSystem.getDefaultUri(conf).toString()-->Line_40 $$ final MyFile[] srcs = createFiles(URI.create(nnUri), srcrootdir)[ FD ]
Line_12 $$ final Path srcrootpath = new Path(srcrootdir)-->Line_41 $$ final long totalsize = fs.getContentSummary(srcrootpath).getLength()[ FD ]
Line_33 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)-->Line_35 $$ assertTrue(summary.getLength() <= sizelimit)[ FD ]
Line_7 $$ final String nnUri = FileSystem.getDefaultUri(conf).toString()-->Line_29 $$ createFiles(URI.create(nnUri), srcrootdir)[ FD ]
Line_13 $$ final String dstrootdir = "/dst_root"-->Line_23 $$ FileStatus[] dststat = getFileStatus(fs, dstrootdir, files, true)[ FD ]
Line_11 $$ final String srcrootdir = "/src_root"-->Line_26 $$ deldir(fs, srcrootdir)[ FD ]
Line_70 $$ if (cluster != null) -->Line_71 $$ cluster.shutdown()[ CD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_41 $$ final long totalsize = fs.getContentSummary(srcrootpath).getLength()[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_71 $$ cluster.shutdown()[ FD ]
Line_13 $$ final String dstrootdir = "/dst_root"-->Line_21 $$ results = removePrefix(results, dstrootdir)[ FD ]
Line_40 $$ final MyFile[] srcs = createFiles(URI.create(nnUri), srcrootdir)-->Line_62 $$ assertTrue(checkFiles(fs, dstrootdir, srcs, true))[ FD ]
Line_40 $$ final MyFile[] srcs = createFiles(URI.create(nnUri), srcrootdir)-->Line_56 $$ FileStatus[] dststat = getFileStatus(fs, dstrootdir, srcs, true)[ FD ]
Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_70 $$ if (cluster != null) [ FD ]
Line_11 $$ final String srcrootdir = "/src_root"-->Line_29 $$ createFiles(URI.create(nnUri), srcrootdir)[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_59 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)[ CD ]
Line_33 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)-->Line_61 $$ assertTrue(summary.getLength() - dstsize <= sizelimit)[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_63 $$ dstfilecount = dststat.length[ CD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_62 $$ assertTrue(checkFiles(fs, dstrootdir, srcs, true))[ FD ]
Line_14 $$ final Path dstrootpath = new Path(dstrootdir)-->Line_59 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)[ FD ]
Line_2 $$ public void testLimits() throws Exception -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_25 $$ deldir(fs, dstrootdir)[ FD ]
Line_11 $$ final String srcrootdir = "/src_root"-->Line_37 $$ deldir(fs, srcrootdir)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_70 $$ if (cluster != null) [ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_56 $$ FileStatus[] dststat = getFileStatus(fs, dstrootdir, srcs, true)[ FD ]
Line_10 $$ final FsShell shell = new FsShell(conf)-->Line_20 $$ String results = execCmd(shell, "-lsr", dstrootdir)[ FD ]
Line_11 $$ final String srcrootdir = "/src_root"-->Line_40 $$ final MyFile[] srcs = createFiles(URI.create(nnUri), srcrootdir)[ FD ]
Line_14 $$ final Path dstrootpath = new Path(dstrootdir)-->Line_33 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_64 $$ dstsize = summary.getLength()[ CD ]
Line_9 $$ final DistCpV1 distcp = new DistCpV1(conf)-->Line_32 $$ ToolRunner.run(distcp, new String[] [ FD ]
Line_2 $$ public void testLimits() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_58 $$ assertTrue(dststat.length - dstfilecount <= filelimit)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ final String nnUri = FileSystem.getDefaultUri(conf).toString()[ FD ]
Line_13 $$ final String dstrootdir = "/dst_root"-->Line_56 $$ FileStatus[] dststat = getFileStatus(fs, dstrootdir, srcs, true)[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_56 $$ FileStatus[] dststat = getFileStatus(fs, dstrootdir, srcs, true)[ CD ]
Line_13 $$ final String dstrootdir = "/dst_root"-->Line_62 $$ assertTrue(checkFiles(fs, dstrootdir, srcs, true))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)[ FD ]
Line_13 $$ final String dstrootdir = "/dst_root"-->Line_25 $$ deldir(fs, dstrootdir)[ FD ]
Line_11 $$ final String srcrootdir = "/src_root"-->Line_67 $$ deldir(fs, srcrootdir)[ FD ]
Line_9 $$ final DistCpV1 distcp = new DistCpV1(conf)-->Line_19 $$ ToolRunner.run(distcp, new String[] [ FD ]
Line_13 $$ final String dstrootdir = "/dst_root"-->Line_36 $$ deldir(fs, dstrootdir)[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_37 $$ deldir(fs, srcrootdir)[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_36 $$ deldir(fs, dstrootdir)[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_60 $$ System.out.println(i + ") summary.getLength()=" + summary.getLength())[ CD ]
Line_7 $$ final String nnUri = FileSystem.getDefaultUri(conf).toString()-->Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)[ FD ]
Line_17 $$ int filelimit = files.length / 2-->Line_24 $$ assertEquals(filelimit, dststat.length)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_6 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()[ FD ]
Line_59 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)-->Line_61 $$ assertTrue(summary.getLength() - dstsize <= sizelimit)[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_66 $$ deldir(fs, dstrootdir)[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_67 $$ deldir(fs, srcrootdir)[ FD ]
Line_52 $$ int dstfilecount = 0-->Line_63 $$ dstfilecount = dststat.length[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_55 $$ ToolRunner.run(distcp, args)[ CD ]
Line_16 $$ MyFile[] files = createFiles(URI.create(nnUri), srcrootdir)-->Line_23 $$ FileStatus[] dststat = getFileStatus(fs, dstrootdir, files, true)[ FD ]
Line_7 $$ final String nnUri = FileSystem.getDefaultUri(conf).toString()-->Line_16 $$ MyFile[] files = createFiles(URI.create(nnUri), srcrootdir)[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_62 $$ assertTrue(checkFiles(fs, dstrootdir, srcs, true))[ CD ]
Line_33 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)-->Line_60 $$ System.out.println(i + ") summary.getLength()=" + summary.getLength())[ FD ]
Line_45 $$ final int parts = RAN.nextInt(NFILES / 3 - 1) + 2-->Line_54 $$ for (int i = 0; i <= parts; i++) [ FD ]
Line_20 $$ String results = execCmd(shell, "-lsr", dstrootdir)-->Line_21 $$ results = removePrefix(results, dstrootdir)[ FD ]
Line_53 $$ long dstsize = 0-->Line_64 $$ dstsize = summary.getLength()[ FD ]
Line_13 $$ final String dstrootdir = "/dst_root"-->Line_66 $$ deldir(fs, dstrootdir)[ FD ]
Line_12 $$ final Path srcrootpath = new Path(srcrootdir)-->Line_30 $$ long sizelimit = fs.getContentSummary(srcrootpath).getLength() / 2[ FD ]
Line_59 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)-->Line_64 $$ dstsize = summary.getLength()[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_57 $$ System.out.println(i + ") dststat.length=" + dststat.length)[ CD ]
Line_59 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)-->Line_60 $$ System.out.println(i + ") summary.getLength()=" + summary.getLength())[ FD ]
Line_11 $$ final String srcrootdir = "/src_root"-->Line_16 $$ MyFile[] files = createFiles(URI.create(nnUri), srcrootdir)[ FD ]
Line_33 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)-->Line_64 $$ dstsize = summary.getLength()[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_44 $$ fs.mkdirs(dstrootpath)[ FD ]
Line_14 $$ final Path dstrootpath = new Path(dstrootdir)-->Line_44 $$ fs.mkdirs(dstrootpath)[ FD ]
Line_9 $$ final DistCpV1 distcp = new DistCpV1(conf)-->Line_55 $$ ToolRunner.run(distcp, args)[ FD ]
Line_51 $$ final String[] args = -->Line_55 $$ ToolRunner.run(distcp, args)[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_26 $$ deldir(fs, srcrootdir)[ FD ]
Line_13 $$ final String dstrootdir = "/dst_root"-->Line_20 $$ String results = execCmd(shell, "-lsr", dstrootdir)[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_33 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_59 $$ ContentSummary summary = fs.getContentSummary(dstrootpath)[ FD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_23 $$ FileStatus[] dststat = getFileStatus(fs, dstrootdir, files, true)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_71 $$ cluster.shutdown()[ FD ]
Line_54 $$ for (int i = 0; i <= parts; i++) -->Line_61 $$ assertTrue(summary.getLength() - dstsize <= sizelimit)[ CD ]
Line_8 $$ final FileSystem fs = FileSystem.get(URI.create(nnUri), conf)-->Line_30 $$ long sizelimit = fs.getContentSummary(srcrootpath).getLength() / 2[ FD ]
