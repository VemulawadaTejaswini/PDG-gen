Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_74 $$ int atLeastExpected-->Line_78 $$ atLeastExpected = type1.get()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_12 $$ final AtomicInteger type2 = new AtomicInteger()[ CD ]
Line_27 $$ while (runningPercolateThreads.get() > 0) -->Line_28 $$ Thread.sleep(100)[ CD ]
Line_6 $$ final int numPercolateThreads = scaledRandomIntBetween(2, 6)-->Line_61 $$ for (int i = 0; i < numPercolateThreads; i++) [ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_31 $$ IndexResponse response-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_92 $$ atLeastExpected = type3.get()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_87 $$ assertNoFailures(response)[ FD ]
Line_11 $$ final AtomicInteger type1 = new AtomicInteger()-->Line_35 $$ type1.incrementAndGet()[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_25 $$ XContentBuilder field1And2 = XContentFactory.jsonBuilder().startObject().field("query", boolQuery().must(termQuery("field1", "value")).must(termQuery("field2", "value"))).endObject()-->Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_27 $$ while (runningPercolateThreads.get() > 0) -->Line_31 $$ IndexResponse response[ CD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_121 $$ assertThat(exceptionsHolder.isEmpty(), equalTo(true))[ CD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_48 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_11 $$ final AtomicInteger type1 = new AtomicInteger()-->Line_78 $$ atLeastExpected = type1.get()[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_49 $$ assertThat(response.getVersion(), equalTo(1l))[ FD ]
Line_31 $$ IndexResponse response-->Line_48 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_87 $$ assertNoFailures(response)[ FD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_75 $$ PercolateResponse response-->Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_6 $$ final int numPercolateThreads = scaledRandomIntBetween(2, 6)[ CD ]
Line_92 $$ atLeastExpected = type3.get()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_111 $$ start.countDown()[ CD ]
Line_31 $$ IndexResponse response-->Line_80 $$ assertNoFailures(response)[ FD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_81 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_94 $$ assertNoFailures(response)[ FD ]
Line_9 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_26 $$ start.await()[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_5 $$ final int numIndexThreads = scaledRandomIntBetween(1, 3)-->Line_16 $$ for (int i = 0; i < numIndexThreads; i++) [ FD ]
Line_31 $$ IndexResponse response-->Line_81 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_85 $$ atLeastExpected = type2.get()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_7 $$ final int numPercolatorOperationsPerThread = scaledRandomIntBetween(100, 1000)[ CD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_13 $$ final AtomicInteger type3 = new AtomicInteger()[ CD ]
Line_72 $$ for (int counter = 0; counter < numPercolatorOperationsPerThread; counter++) -->Line_75 $$ PercolateResponse response[ CD ]
Line_62 $$ final Random rand = new Random(getRandom().nextLong())-->Line_73 $$ int x = rand.nextInt(3)[ FD ]
Line_75 $$ PercolateResponse response-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_78 $$ atLeastExpected = type1.get()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_14 $$ final AtomicInteger idGen = new AtomicInteger()-->Line_30 $$ String id = Integer.toString(idGen.incrementAndGet())[ FD ]
Line_78 $$ atLeastExpected = type1.get()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_74 $$ int atLeastExpected-->Line_92 $$ atLeastExpected = type3.get()[ FD ]
Line_31 $$ IndexResponse response-->Line_94 $$ assertNoFailures(response)[ FD ]
Line_92 $$ atLeastExpected = type3.get()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_31 $$ IndexResponse response-->Line_95 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_9 $$ final CountDownLatch start = new CountDownLatch(1)[ CD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_88 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_80 $$ assertNoFailures(response)[ FD ]
Line_75 $$ PercolateResponse response-->Line_80 $$ assertNoFailures(response)[ FD ]
Line_85 $$ atLeastExpected = type2.get()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_7 $$ final int numPercolatorOperationsPerThread = scaledRandomIntBetween(100, 1000)-->Line_72 $$ for (int counter = 0; counter < numPercolatorOperationsPerThread; counter++) [ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_11 $$ final AtomicInteger type1 = new AtomicInteger()[ CD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_49 $$ assertThat(response.getVersion(), equalTo(1l))[ FD ]
Line_75 $$ PercolateResponse response-->Line_88 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_58 $$ indexThreads[i].start()[ CD ]
Line_31 $$ IndexResponse response-->Line_49 $$ assertThat(response.getVersion(), equalTo(1l))[ FD ]
Line_31 $$ IndexResponse response-->Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_81 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_88 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_80 $$ assertNoFailures(response)[ FD ]
Line_24 $$ XContentBuilder onlyField2 = XContentFactory.jsonBuilder().startObject().field("query", termQuery("field2", "value")).endObject()-->Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_8 $$ final Set<Throwable> exceptionsHolder = ConcurrentCollections.newConcurrentSet()[ CD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_80 $$ assertNoFailures(response)[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_95 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_8 $$ final Set<Throwable> exceptionsHolder = ConcurrentCollections.newConcurrentSet()-->Line_52 $$ exceptionsHolder.add(t)[ FD ]
Line_30 $$ String id = Integer.toString(idGen.incrementAndGet())-->Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_95 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_61 $$ for (int i = 0; i < numPercolateThreads; i++) -->Line_63 $$ Runnable r = new Runnable() [ CD ]
Line_10 $$ final AtomicInteger runningPercolateThreads = new AtomicInteger(numPercolateThreads)-->Line_104 $$ runningPercolateThreads.decrementAndGet()[ FD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_87 $$ assertNoFailures(response)[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_15 $$ Thread[] indexThreads = new Thread[numIndexThreads][ CD ]
Line_61 $$ for (int i = 0; i < numPercolateThreads; i++) -->Line_109 $$ percolateThreads[i].start()[ CD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_27 $$ while (runningPercolateThreads.get() > 0) -->Line_29 $$ int x = rand.nextInt(3)[ CD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_5 $$ final int numIndexThreads = scaledRandomIntBetween(1, 3)[ CD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_88 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_78 $$ atLeastExpected = type1.get()-->Line_85 $$ atLeastExpected = type2.get()[ FD ]
Line_31 $$ IndexResponse response-->Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_8 $$ final Set<Throwable> exceptionsHolder = ConcurrentCollections.newConcurrentSet()-->Line_121 $$ assertThat(exceptionsHolder.isEmpty(), equalTo(true))[ FD ]
Line_10 $$ final AtomicInteger runningPercolateThreads = new AtomicInteger(numPercolateThreads)-->Line_27 $$ while (runningPercolateThreads.get() > 0) [ FD ]
Line_61 $$ for (int i = 0; i < numPercolateThreads; i++) -->Line_62 $$ final Random rand = new Random(getRandom().nextLong())[ CD ]
Line_75 $$ PercolateResponse response-->Line_87 $$ assertNoFailures(response)[ FD ]
Line_75 $$ PercolateResponse response-->Line_81 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_94 $$ assertNoFailures(response)[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_18 $$ Runnable r = new Runnable() [ CD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_95 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_94 $$ assertNoFailures(response)[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_88 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_31 $$ IndexResponse response-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_61 $$ for (int i = 0; i < numPercolateThreads; i++) [ CD ]
Line_12 $$ final AtomicInteger type2 = new AtomicInteger()-->Line_85 $$ atLeastExpected = type2.get()[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_95 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_81 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_16 $$ for (int i = 0; i < numIndexThreads; i++) [ CD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_81 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_48 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_17 $$ final Random rand = new Random(getRandom().nextLong())[ CD ]
Line_17 $$ final Random rand = new Random(getRandom().nextLong())-->Line_29 $$ int x = rand.nextInt(3)[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_81 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_88 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_80 $$ assertNoFailures(response)[ FD ]
Line_61 $$ for (int i = 0; i < numPercolateThreads; i++) -->Line_108 $$ percolateThreads[i] = new Thread(r)[ CD ]
Line_78 $$ atLeastExpected = type1.get()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_31 $$ IndexResponse response-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_48 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_80 $$ assertNoFailures(response)[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_61 $$ for (int i = 0; i < numPercolateThreads; i++) [ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_87 $$ assertNoFailures(response)[ FD ]
Line_31 $$ IndexResponse response-->Line_88 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_27 $$ while (runningPercolateThreads.get() > 0) -->Line_48 $$ assertThat(response.getId(), equalTo(id))[ CD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_70 $$ XContentBuilder field1AndField2Doc = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", "value").field("field2", "value").endObject().endObject()-->Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_31 $$ IndexResponse response-->Line_87 $$ assertNoFailures(response)[ FD ]
Line_27 $$ while (runningPercolateThreads.get() > 0) -->Line_30 $$ String id = Integer.toString(idGen.incrementAndGet())[ CD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_88 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_9 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_71 $$ start.await()[ FD ]
Line_75 $$ PercolateResponse response-->Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_85 $$ atLeastExpected = type2.get()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_30 $$ String id = Integer.toString(idGen.incrementAndGet())-->Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()[ FD ]
Line_75 $$ PercolateResponse response-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_87 $$ assertNoFailures(response)[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_94 $$ assertNoFailures(response)[ FD ]
Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_75 $$ PercolateResponse response-->Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_23 $$ XContentBuilder onlyField1 = XContentFactory.jsonBuilder().startObject().field("query", termQuery("field1", "value")).endObject()-->Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()[ FD ]
Line_74 $$ int atLeastExpected-->Line_85 $$ atLeastExpected = type2.get()[ FD ]
Line_75 $$ PercolateResponse response-->Line_95 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_12 $$ final AtomicInteger type2 = new AtomicInteger()-->Line_39 $$ type2.incrementAndGet()[ FD ]
Line_30 $$ String id = Integer.toString(idGen.incrementAndGet())-->Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_10 $$ final AtomicInteger runningPercolateThreads = new AtomicInteger(numPercolateThreads)[ CD ]
Line_30 $$ String id = Integer.toString(idGen.incrementAndGet())-->Line_48 $$ assertThat(response.getId(), equalTo(id))[ FD ]
Line_68 $$ XContentBuilder onlyField1Doc = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field1", "value").endObject().endObject()-->Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_94 $$ assertNoFailures(response)[ FD ]
Line_13 $$ final AtomicInteger type3 = new AtomicInteger()-->Line_43 $$ type3.incrementAndGet()[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_81 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_13 $$ final AtomicInteger type3 = new AtomicInteger()-->Line_92 $$ atLeastExpected = type3.get()[ FD ]
Line_9 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_111 $$ start.countDown()[ FD ]
Line_16 $$ for (int i = 0; i < numIndexThreads; i++) -->Line_57 $$ indexThreads[i] = new Thread(r)[ CD ]
Line_8 $$ final Set<Throwable> exceptionsHolder = ConcurrentCollections.newConcurrentSet()-->Line_101 $$ exceptionsHolder.add(t)[ FD ]
Line_69 $$ XContentBuilder onlyField2Doc = XContentFactory.jsonBuilder().startObject().startObject("doc").field("field2", "value").endObject().endObject()-->Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_75 $$ PercolateResponse response-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_95 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_27 $$ while (runningPercolateThreads.get() > 0) -->Line_49 $$ assertThat(response.getVersion(), equalTo(1l))[ CD ]
Line_78 $$ atLeastExpected = type1.get()-->Line_92 $$ atLeastExpected = type3.get()[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_95 $$ assertThat(response.getSuccessfulShards(), equalTo(response.getTotalShards()))[ FD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_86 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField2Doc).execute().actionGet()[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_49 $$ assertThat(response.getVersion(), equalTo(1l))[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_87 $$ assertNoFailures(response)[ FD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_74 $$ int atLeastExpected-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_85 $$ atLeastExpected = type2.get()-->Line_92 $$ atLeastExpected = type3.get()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_14 $$ final AtomicInteger idGen = new AtomicInteger()[ CD ]
Line_34 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField1).execute().actionGet()-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_74 $$ int atLeastExpected-->Line_96 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()-->Line_80 $$ assertNoFailures(response)[ FD ]
Line_31 $$ IndexResponse response-->Line_93 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(field1AndField2Doc).execute().actionGet()[ FD ]
Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()-->Line_89 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_74 $$ int atLeastExpected-->Line_82 $$ assertThat(response.getMatches().length, greaterThanOrEqualTo(atLeastExpected))[ FD ]
Line_72 $$ for (int counter = 0; counter < numPercolatorOperationsPerThread; counter++) -->Line_74 $$ int atLeastExpected[ CD ]
Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()-->Line_94 $$ assertNoFailures(response)[ FD ]
Line_72 $$ for (int counter = 0; counter < numPercolatorOperationsPerThread; counter++) -->Line_73 $$ int x = rand.nextInt(3)[ CD ]
Line_17 $$ final Random rand = new Random(getRandom().nextLong())-->Line_73 $$ int x = rand.nextInt(3)[ FD ]
Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()-->Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_2 $$ public void testConcurrentAddingAndPercolating() throws Exception -->Line_3 $$ assertAcked(prepareCreate("index").addMapping("type", "field1", "type=string", "field2", "type=string"))[ CD ]
Line_31 $$ IndexResponse response-->Line_42 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(field1And2).execute().actionGet()[ FD ]
Line_31 $$ IndexResponse response-->Line_79 $$ response = client().preparePercolate().setIndices("index").setDocumentType("type").setSource(onlyField1Doc).execute().actionGet()[ FD ]
Line_31 $$ IndexResponse response-->Line_38 $$ response = client().prepareIndex("index", PercolatorService.TYPE_NAME, id).setSource(onlyField2).execute().actionGet()[ FD ]
Line_75 $$ PercolateResponse response-->Line_94 $$ assertNoFailures(response)[ FD ]
