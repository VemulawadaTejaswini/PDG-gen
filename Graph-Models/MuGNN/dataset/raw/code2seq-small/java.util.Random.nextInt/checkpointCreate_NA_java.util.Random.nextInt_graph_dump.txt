Line_3 $$ int WRITES = 128-->Line_19 $$ for (int i = 0; i < WRITES; ++i) [ FD ]
Line_19 $$ for (int i = 0; i < WRITES; ++i) -->Line_21 $$ int s = r.nextInt(BUFSIZE - 1)[ CD ]
Line_19 $$ for (int i = 0; i < WRITES; ++i) -->Line_27 $$ out.write(b)[ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_4 $$ FileSystem fs = mock(FileSystem.class)[ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_11 $$ when(fs.rename(isA(Path.class), isA(Path.class))).thenReturn(true)[ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_19 $$ for (int i = 0; i < WRITES; ++i) [ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_30 $$ CheckpointID cid = chk.commit(out)[ CD ]
Line_19 $$ for (int i = 0; i < WRITES; ++i) -->Line_22 $$ int e = r.nextInt(BUFSIZE - s) + 1[ CD ]
Line_6 $$ FSDataOutputStream hdfs = spy(new FSDataOutputStream(dob, null))-->Line_31 $$ verify(hdfs).close()[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_17 $$ Random r = new Random()[ CD ]
Line_4 $$ FileSystem fs = mock(FileSystem.class)-->Line_10 $$ when(fs.create(isA(Path.class), eq((short) 1))).thenReturn(hdfs)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_26 $$ b.position(s).limit(b.position() + e)[ FD ]
Line_4 $$ FileSystem fs = mock(FileSystem.class)-->Line_29 $$ verify(fs, never()).rename(any(Path.class), eq(finalLoc))[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_13 $$ Path finalLoc = new Path("/chk/checkpoint_chk0")[ CD ]
Line_18 $$ final byte[] randBytes = new byte[BUFSIZE]-->Line_20 $$ r.nextBytes(randBytes)[ FD ]
Line_18 $$ final byte[] randBytes = new byte[BUFSIZE]-->Line_23 $$ verif.write(randBytes, s, e)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_10 $$ when(fs.create(isA(Path.class), eq((short) 1))).thenReturn(hdfs)[ CD ]
Line_15 $$ FSCheckpointService chk = new FSCheckpointService(fs, base, new SimpleNamingService("chk0"), (short) 1)-->Line_30 $$ CheckpointID cid = chk.commit(out)[ FD ]
Line_19 $$ for (int i = 0; i < WRITES; ++i) -->Line_23 $$ verif.write(randBytes, s, e)[ CD ]
Line_16 $$ CheckpointWriteChannel out = chk.create()-->Line_30 $$ CheckpointID cid = chk.commit(out)[ FD ]
Line_13 $$ Path finalLoc = new Path("/chk/checkpoint_chk0")-->Line_14 $$ Path tmp = FSCheckpointService.tmpfile(finalLoc)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_15 $$ FSCheckpointService chk = new FSCheckpointService(fs, base, new SimpleNamingService("chk0"), (short) 1)[ CD ]
Line_17 $$ Random r = new Random()-->Line_22 $$ int e = r.nextInt(BUFSIZE - s) + 1[ FD ]
Line_16 $$ CheckpointWriteChannel out = chk.create()-->Line_27 $$ out.write(b)[ FD ]
Line_5 $$ DataOutputBuffer dob = new DataOutputBuffer()-->Line_33 $$ assertArrayEquals(Arrays.copyOfRange(verif.getData(), 0, verif.getLength()), Arrays.copyOfRange(dob.getData(), 0, dob.getLength()))[ FD ]
Line_17 $$ Random r = new Random()-->Line_20 $$ r.nextBytes(randBytes)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_33 $$ assertArrayEquals(Arrays.copyOfRange(verif.getData(), 0, verif.getLength()), Arrays.copyOfRange(dob.getData(), 0, dob.getLength()))[ CD ]
Line_4 $$ FileSystem fs = mock(FileSystem.class)-->Line_11 $$ when(fs.rename(isA(Path.class), isA(Path.class))).thenReturn(true)[ FD ]
Line_13 $$ Path finalLoc = new Path("/chk/checkpoint_chk0")-->Line_32 $$ verify(fs).rename(eq(tmp), eq(finalLoc))[ FD ]
Line_18 $$ final byte[] randBytes = new byte[BUFSIZE]-->Line_25 $$ b.put(randBytes).flip()[ FD ]
Line_6 $$ FSDataOutputStream hdfs = spy(new FSDataOutputStream(dob, null))-->Line_10 $$ when(fs.create(isA(Path.class), eq((short) 1))).thenReturn(hdfs)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_12 $$ Path base = new Path("/chk")[ CD ]
Line_13 $$ Path finalLoc = new Path("/chk/checkpoint_chk0")-->Line_29 $$ verify(fs, never()).rename(any(Path.class), eq(finalLoc))[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_32 $$ verify(fs).rename(eq(tmp), eq(finalLoc))[ CD ]
Line_4 $$ FileSystem fs = mock(FileSystem.class)-->Line_32 $$ verify(fs).rename(eq(tmp), eq(finalLoc))[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_18 $$ final byte[] randBytes = new byte[BUFSIZE][ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_3 $$ int WRITES = 128[ CD ]
Line_14 $$ Path tmp = FSCheckpointService.tmpfile(finalLoc)-->Line_32 $$ verify(fs).rename(eq(tmp), eq(finalLoc))[ FD ]
Line_15 $$ FSCheckpointService chk = new FSCheckpointService(fs, base, new SimpleNamingService("chk0"), (short) 1)-->Line_16 $$ CheckpointWriteChannel out = chk.create()[ FD ]
Line_19 $$ for (int i = 0; i < WRITES; ++i) -->Line_24 $$ b.clear()[ CD ]
Line_21 $$ int s = r.nextInt(BUFSIZE - 1)-->Line_23 $$ verif.write(randBytes, s, e)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_27 $$ out.write(b)[ FD ]
Line_19 $$ for (int i = 0; i < WRITES; ++i) -->Line_26 $$ b.position(s).limit(b.position() + e)[ CD ]
Line_21 $$ int s = r.nextInt(BUFSIZE - 1)-->Line_26 $$ b.position(s).limit(b.position() + e)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_31 $$ verify(hdfs).close()[ CD ]
Line_17 $$ Random r = new Random()-->Line_21 $$ int s = r.nextInt(BUFSIZE - 1)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_25 $$ b.put(randBytes).flip()[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_5 $$ DataOutputBuffer dob = new DataOutputBuffer()[ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_16 $$ CheckpointWriteChannel out = chk.create()[ CD ]
Line_19 $$ for (int i = 0; i < WRITES; ++i) -->Line_25 $$ b.put(randBytes).flip()[ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_29 $$ verify(fs, never()).rename(any(Path.class), eq(finalLoc))[ CD ]
Line_22 $$ int e = r.nextInt(BUFSIZE - s) + 1-->Line_23 $$ verif.write(randBytes, s, e)[ FD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_14 $$ Path tmp = FSCheckpointService.tmpfile(finalLoc)[ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_24 $$ b.clear()[ FD ]
Line_19 $$ for (int i = 0; i < WRITES; ++i) -->Line_20 $$ r.nextBytes(randBytes)[ CD ]
Line_2 $$ public void checkpointCreate(ByteBuffer b) throws Exception -->Line_6 $$ FSDataOutputStream hdfs = spy(new FSDataOutputStream(dob, null))[ CD ]
