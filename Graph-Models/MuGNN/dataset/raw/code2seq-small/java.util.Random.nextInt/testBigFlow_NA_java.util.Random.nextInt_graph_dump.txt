Line_21 $$ MockSvnRepository repository = null-->Line_29 $$ repository.fireConnectionOpened()[ FD ]
Line_16 $$ for (int i = 0; i < 25; i++) -->Line_37 $$ Thread thread = new Thread(target, "svn cache")[ CD ]
Line_23 $$ repository = (MockSvnRepository) poolManager.createRepository(url, true)-->Line_31 $$ repository.fireConnectionClosed()[ FD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_3 $$ poolManager.setCreator(new ThrowableConvertor<SVNURL, SVNRepository, SVNException>() [ FD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_16 $$ for (int i = 0; i < 25; i++) [ CD ]
Line_21 $$ MockSvnRepository repository = null-->Line_31 $$ repository.fireConnectionClosed()[ FD ]
Line_60 $$ if (disposeAfter) -->Line_63 $$ Assert.assertEquals(0, guard.getInstanceCount())[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_54 $$ Assert.assertEquals(0, guard.getCurrentlyActiveConnections())[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_55 $$ final CachingSvnRepositoryPool pool = (CachingSvnRepositoryPool) poolManager.getPool()[ FD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_59 $$ Assert.assertEquals(0, group.getUsedSize())[ CD ]
Line_17 $$ Runnable target = new Runnable() -->Line_30 $$ TimeoutUtil.sleep(random.nextInt(10))[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_56 $$ Map<String, CachingSvnRepositoryPool.RepoGroup> groups = pool.getGroups()[ CD ]
Line_60 $$ if (disposeAfter) -->Line_64 $$ Assert.assertEquals(0, group.getUsedSize())[ CD ]
Line_37 $$ Thread thread = new Thread(target, "svn cache")-->Line_68 $$ thread.join()[ FD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_3 $$ poolManager.setCreator(new ThrowableConvertor<SVNURL, SVNRepository, SVNException>() [ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_51 $$ Assert.assertEquals(0, cnt[0])[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_57 $$ Assert.assertEquals(1, groups.size())[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_23 $$ repository = (MockSvnRepository) poolManager.createRepository(url, true)[ FD ]
Line_3 $$ poolManager.setCreator(new ThrowableConvertor<SVNURL, SVNRepository, SVNException>() -->Line_7 $$ return new MockSvnRepository(svnurl, ISVNSession.DEFAULT)[ CD ]
Line_37 $$ Thread thread = new Thread(target, "svn cache")-->Line_39 $$ threads.add(thread)[ FD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_13 $$ cnt[0] = 25[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_61 $$ poolManager.dispose()[ FD ]
Line_23 $$ repository = (MockSvnRepository) poolManager.createRepository(url, true)-->Line_29 $$ repository.fireConnectionOpened()[ FD ]
Line_16 $$ for (int i = 0; i < 25; i++) -->Line_39 $$ threads.add(thread)[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_41 $$ final long start = System.currentTimeMillis()[ CD ]
Line_17 $$ Runnable target = new Runnable() -->Line_31 $$ repository.fireConnectionClosed()[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_60 $$ if (disposeAfter) [ CD ]
Line_17 $$ Runnable target = new Runnable() -->Line_21 $$ MockSvnRepository repository = null[ CD ]
Line_60 $$ if (disposeAfter) -->Line_61 $$ poolManager.dispose()[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_58 $$ CachingSvnRepositoryPool.RepoGroup group = groups.values().iterator().next()[ CD ]
Line_16 $$ for (int i = 0; i < 25; i++) -->Line_17 $$ Runnable target = new Runnable() [ CD ]
Line_37 $$ Thread thread = new Thread(target, "svn cache")-->Line_38 $$ thread.start()[ FD ]
Line_60 $$ if (disposeAfter) -->Line_62 $$ Assert.assertEquals(0, guard.getCurrentlyActiveConnections())[ CD ]
Line_2 $$ private void testBigFlow(final SvnIdeaRepositoryPoolManager poolManager, boolean disposeAfter) throws SVNException, InterruptedException -->Line_10 $$ final SVNURL url = SVNURL.parseURIEncoded("http://a.b.c")[ CD ]
Line_16 $$ for (int i = 0; i < 25; i++) -->Line_38 $$ thread.start()[ CD ]
Line_60 $$ if (disposeAfter) -->Line_65 $$ Assert.assertEquals(0, group.getInactiveSize())[ CD ]
Line_17 $$ Runnable target = new Runnable() -->Line_29 $$ repository.fireConnectionOpened()[ CD ]
Line_21 $$ MockSvnRepository repository = null-->Line_23 $$ repository = (MockSvnRepository) poolManager.createRepository(url, true)[ FD ]
