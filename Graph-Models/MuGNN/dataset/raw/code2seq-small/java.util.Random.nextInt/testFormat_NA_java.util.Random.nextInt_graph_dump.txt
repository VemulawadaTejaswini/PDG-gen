Line_39 $$ RecordReader<Text, Text> reader = format.getRecordReader(splits[j], job, reporter)-->Line_44 $$ Text value = reader.createValue()[ FD ]
Line_45 $$ Class valueClass = value.getClass()-->Line_47 $$ assertEquals("Value class is Text.", Text.class, valueClass)[ FD ]
Line_42 $$ Text key = reader.createKey()-->Line_50 $$ while (reader.next(key, value)) [ FD ]
Line_31 $$ int numSplits = random.nextInt(MAX_LENGTH / 20) + 1-->Line_33 $$ InputSplit[] splits = format.getSplits(job, numSplits)[ FD ]
Line_18 $$ for (int i = 0; i < length; i++) -->Line_21 $$ writer.write(Integer.toString(i))[ CD ]
Line_44 $$ Text value = reader.createValue()-->Line_45 $$ Class valueClass = value.getClass()[ FD ]
Line_50 $$ while (reader.next(key, value)) -->Line_52 $$ LOG.debug("read " + v)[ CD ]
Line_18 $$ for (int i = 0; i < length; i++) -->Line_19 $$ writer.write(Integer.toString(i * 2))[ CD ]
Line_2 $$ public void testFormat() throws Exception -->Line_10 $$ localFs.delete(workDir, true)[ CD ]
Line_2 $$ public void testFormat() throws Exception -->Line_8 $$ LOG.info("seed = " + seed)[ CD ]
Line_18 $$ for (int i = 0; i < length; i++) -->Line_20 $$ writer.write("\t")[ CD ]
Line_18 $$ for (int i = 0; i < length; i++) -->Line_30 $$ for (int i = 0; i < 3; i++) [ FD ]
Line_2 $$ public void testFormat() throws Exception -->Line_7 $$ int seed = new Random().nextInt()[ CD ]
Line_50 $$ while (reader.next(key, value)) -->Line_51 $$ int v = Integer.parseInt(value.toString())[ CD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_39 $$ RecordReader<Text, Text> reader = format.getRecordReader(splits[j], job, reporter)[ CD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_38 $$ LOG.debug("split[" + j + "]= " + splits[j])[ CD ]
Line_39 $$ RecordReader<Text, Text> reader = format.getRecordReader(splits[j], job, reporter)-->Line_40 $$ Class readerClass = reader.getClass()[ FD ]
Line_30 $$ for (int i = 0; i < 3; i++) -->Line_31 $$ int numSplits = random.nextInt(MAX_LENGTH / 20) + 1[ CD ]
Line_42 $$ Text key = reader.createKey()-->Line_43 $$ Class keyClass = key.getClass()[ FD ]
Line_39 $$ RecordReader<Text, Text> reader = format.getRecordReader(splits[j], job, reporter)-->Line_50 $$ while (reader.next(key, value)) [ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_11 $$ FileInputFormat.setInputPaths(job, workDir)[ FD ]
Line_40 $$ Class readerClass = reader.getClass()-->Line_41 $$ assertEquals("reader class is KeyValueLineRecordReader.", KeyValueLineRecordReader.class, readerClass)[ FD ]
Line_2 $$ public void testFormat() throws Exception -->Line_3 $$ JobConf job = new JobConf()[ CD ]
Line_2 $$ public void testFormat() throws Exception -->Line_9 $$ Random random = new Random(seed)[ CD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_42 $$ Text key = reader.createKey()[ CD ]
Line_44 $$ Text value = reader.createValue()-->Line_51 $$ int v = Integer.parseInt(value.toString())[ FD ]
Line_2 $$ public void testFormat() throws Exception -->Line_4 $$ Path file = new Path(workDir, "test.txt")[ CD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_46 $$ assertEquals("Key class is Text.", Text.class, keyClass)[ CD ]
Line_43 $$ Class keyClass = key.getClass()-->Line_46 $$ assertEquals("Key class is Text.", Text.class, keyClass)[ FD ]
Line_39 $$ RecordReader<Text, Text> reader = format.getRecordReader(splits[j], job, reporter)-->Line_54 $$ LOG.warn("conflict with " + v + " in split " + j + " at position " + reader.getPos())[ FD ]
Line_50 $$ while (reader.next(key, value)) -->Line_58 $$ count++[ CD ]
Line_39 $$ RecordReader<Text, Text> reader = format.getRecordReader(splits[j], job, reporter)-->Line_62 $$ reader.close()[ FD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_45 $$ Class valueClass = value.getClass()[ CD ]
Line_18 $$ for (int i = 0; i < length; i++) -->Line_21 $$ writer.write(Integer.toString(i))[ FD ]
Line_51 $$ int v = Integer.parseInt(value.toString())-->Line_53 $$ if (bits.get(v)) [ FD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_44 $$ Text value = reader.createValue()[ CD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_41 $$ assertEquals("reader class is KeyValueLineRecordReader.", KeyValueLineRecordReader.class, readerClass)[ CD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_47 $$ assertEquals("Value class is Text.", Text.class, valueClass)[ CD ]
Line_18 $$ for (int i = 0; i < length; i++) -->Line_22 $$ writer.write("\n")[ CD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_43 $$ Class keyClass = key.getClass()[ CD ]
Line_53 $$ if (bits.get(v)) -->Line_54 $$ LOG.warn("conflict with " + v + " in split " + j + " at position " + reader.getPos())[ CD ]
Line_39 $$ RecordReader<Text, Text> reader = format.getRecordReader(splits[j], job, reporter)-->Line_42 $$ Text key = reader.createKey()[ FD ]
Line_30 $$ for (int i = 0; i < 3; i++) -->Line_65 $$ assertEquals("Some keys in no partition.", length, bits.cardinality())[ CD ]
Line_51 $$ int v = Integer.parseInt(value.toString())-->Line_57 $$ bits.set(v)[ FD ]
Line_30 $$ for (int i = 0; i < 3; i++) -->Line_33 $$ InputSplit[] splits = format.getSplits(job, numSplits)[ CD ]
Line_50 $$ while (reader.next(key, value)) -->Line_56 $$ assertFalse("Key in multiple partitions.", bits.get(v))[ CD ]
Line_2 $$ public void testFormat() throws Exception -->Line_11 $$ FileInputFormat.setInputPaths(job, workDir)[ CD ]
Line_37 $$ for (int j = 0; j < splits.length; j++) -->Line_40 $$ Class readerClass = reader.getClass()[ CD ]
Line_30 $$ for (int i = 0; i < 3; i++) -->Line_34 $$ LOG.debug("splitting: got =        " + splits.length)[ CD ]
Line_50 $$ while (reader.next(key, value)) -->Line_53 $$ if (bits.get(v)) [ CD ]
Line_51 $$ int v = Integer.parseInt(value.toString())-->Line_56 $$ assertFalse("Key in multiple partitions.", bits.get(v))[ FD ]
Line_50 $$ while (reader.next(key, value)) -->Line_57 $$ bits.set(v)[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_29 $$ format.configure(job)[ FD ]
Line_9 $$ Random random = new Random(seed)-->Line_31 $$ int numSplits = random.nextInt(MAX_LENGTH / 20) + 1[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_33 $$ InputSplit[] splits = format.getSplits(job, numSplits)[ FD ]
Line_49 $$ int count = 0-->Line_58 $$ count++[ FD ]
Line_44 $$ Text value = reader.createValue()-->Line_50 $$ while (reader.next(key, value)) [ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_39 $$ RecordReader<Text, Text> reader = format.getRecordReader(splits[j], job, reporter)[ FD ]
Line_30 $$ for (int i = 0; i < 3; i++) -->Line_32 $$ LOG.debug("splitting: requesting = " + numSplits)[ CD ]
Line_30 $$ for (int i = 0; i < 3; i++) -->Line_37 $$ for (int j = 0; j < splits.length; j++) [ CD ]
