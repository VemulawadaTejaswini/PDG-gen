Line_22 $$ List<CompressAwarePath> inputs = pendingToBeMerged.get(i)-->Line_23 $$ for (int j = 1; j < inputs.size(); ++j) [ FD ]
Line_9 $$ MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable> onDiskMerger = (MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable>) Whitebox.getInternalState(manager, "onDiskMerger")-->Line_10 $$ int mergeFactor = (Integer) Whitebox.getInternalState(onDiskMerger, "mergeFactor")[ FD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_8 $$ MergeManagerImpl<IntWritable, IntWritable> manager = new MergeManagerImpl<IntWritable, IntWritable>(null, jobConf, fs, null, null, null, null, null, null, null, null, null, null, mapOutputFile)[ CD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_4 $$ final int SORT_FACTOR = 5[ CD ]
Line_23 $$ for (int j = 1; j < inputs.size(); ++j) -->Line_25 $$ assertTrue("Inputs to be merged were not sorted according to size: ", inputs.get(j).getCompressedSize() >= inputs.get(j - 1).getCompressedSize())[ CD ]
Line_23 $$ for (int j = 1; j < inputs.size(); ++j) -->Line_25 $$ assertTrue("Inputs to be merged were not sorted according to size: ", inputs.get(j).getCompressedSize() >= inputs.get(j - 1).getCompressedSize())[ FD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_7 $$ FileSystem fs = FileSystem.getLocal(jobConf)[ CD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_3 $$ JobConf jobConf = new JobConf()[ CD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_7 $$ FileSystem fs = FileSystem.getLocal(jobConf)[ FD ]
Line_8 $$ MergeManagerImpl<IntWritable, IntWritable> manager = new MergeManagerImpl<IntWritable, IntWritable>(null, jobConf, fs, null, null, null, null, null, null, null, null, null, null, mapOutputFile)-->Line_9 $$ MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable> onDiskMerger = (MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable>) Whitebox.getInternalState(manager, "onDiskMerger")[ FD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_10 $$ int mergeFactor = (Integer) Whitebox.getInternalState(onDiskMerger, "mergeFactor")[ CD ]
Line_4 $$ final int SORT_FACTOR = 5-->Line_11 $$ assertEquals(mergeFactor, SORT_FACTOR)[ FD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_20 $$ assertTrue("No inputs were added to list pending to merge", pendingToBeMerged.size() > 0)[ CD ]
Line_21 $$ for (int i = 0; i < pendingToBeMerged.size(); ++i) -->Line_23 $$ for (int j = 1; j < inputs.size(); ++j) [ CD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_9 $$ MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable> onDiskMerger = (MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable>) Whitebox.getInternalState(manager, "onDiskMerger")[ CD ]
Line_22 $$ List<CompressAwarePath> inputs = pendingToBeMerged.get(i)-->Line_24 $$ assertTrue("Not enough / too many inputs were going to be merged", inputs.size() > 0 && inputs.size() <= SORT_FACTOR)[ FD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_14 $$ for (int i = 0; i < 2 * SORT_FACTOR; ++i) [ CD ]
Line_9 $$ MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable> onDiskMerger = (MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable>) Whitebox.getInternalState(manager, "onDiskMerger")-->Line_12 $$ onDiskMerger.suspend()[ FD ]
Line_3 $$ JobConf jobConf = new JobConf()-->Line_5 $$ jobConf.setInt(MRJobConfig.IO_SORT_FACTOR, SORT_FACTOR)[ FD ]
Line_21 $$ for (int i = 0; i < pendingToBeMerged.size(); ++i) -->Line_22 $$ List<CompressAwarePath> inputs = pendingToBeMerged.get(i)[ FD ]
Line_14 $$ for (int i = 0; i < 2 * SORT_FACTOR; ++i) -->Line_17 $$ manager.closeOnDiskFile(cap)[ CD ]
Line_21 $$ for (int i = 0; i < pendingToBeMerged.size(); ++i) -->Line_22 $$ List<CompressAwarePath> inputs = pendingToBeMerged.get(i)[ CD ]
Line_16 $$ CompressAwarePath cap = new CompressAwarePath(path, 1l, rand.nextInt())-->Line_17 $$ manager.closeOnDiskFile(cap)[ FD ]
Line_10 $$ int mergeFactor = (Integer) Whitebox.getInternalState(onDiskMerger, "mergeFactor")-->Line_11 $$ assertEquals(mergeFactor, SORT_FACTOR)[ FD ]
Line_13 $$ Random rand = new Random()-->Line_16 $$ CompressAwarePath cap = new CompressAwarePath(path, 1l, rand.nextInt())[ FD ]
Line_19 $$ LinkedList<List<CompressAwarePath>> pendingToBeMerged = (LinkedList<List<CompressAwarePath>>) Whitebox.getInternalState(onDiskMerger, "pendingToBeMerged")-->Line_22 $$ List<CompressAwarePath> inputs = pendingToBeMerged.get(i)[ FD ]
Line_14 $$ for (int i = 0; i < 2 * SORT_FACTOR; ++i) -->Line_16 $$ CompressAwarePath cap = new CompressAwarePath(path, 1l, rand.nextInt())[ CD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_6 $$ MapOutputFile mapOutputFile = new MROutputFiles()[ CD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_19 $$ LinkedList<List<CompressAwarePath>> pendingToBeMerged = (LinkedList<List<CompressAwarePath>>) Whitebox.getInternalState(onDiskMerger, "pendingToBeMerged")[ CD ]
Line_22 $$ List<CompressAwarePath> inputs = pendingToBeMerged.get(i)-->Line_25 $$ assertTrue("Inputs to be merged were not sorted according to size: ", inputs.get(j).getCompressedSize() >= inputs.get(j - 1).getCompressedSize())[ FD ]
Line_19 $$ LinkedList<List<CompressAwarePath>> pendingToBeMerged = (LinkedList<List<CompressAwarePath>>) Whitebox.getInternalState(onDiskMerger, "pendingToBeMerged")-->Line_21 $$ for (int i = 0; i < pendingToBeMerged.size(); ++i) [ FD ]
Line_19 $$ LinkedList<List<CompressAwarePath>> pendingToBeMerged = (LinkedList<List<CompressAwarePath>>) Whitebox.getInternalState(onDiskMerger, "pendingToBeMerged")-->Line_20 $$ assertTrue("No inputs were added to list pending to merge", pendingToBeMerged.size() > 0)[ FD ]
Line_14 $$ for (int i = 0; i < 2 * SORT_FACTOR; ++i) -->Line_15 $$ Path path = new Path("somePath")[ CD ]
Line_9 $$ MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable> onDiskMerger = (MergeThread<MapOutput<IntWritable, IntWritable>, IntWritable, IntWritable>) Whitebox.getInternalState(manager, "onDiskMerger")-->Line_19 $$ LinkedList<List<CompressAwarePath>> pendingToBeMerged = (LinkedList<List<CompressAwarePath>>) Whitebox.getInternalState(onDiskMerger, "pendingToBeMerged")[ FD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_13 $$ Random rand = new Random()[ CD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_11 $$ assertEquals(mergeFactor, SORT_FACTOR)[ CD ]
Line_4 $$ final int SORT_FACTOR = 5-->Line_5 $$ jobConf.setInt(MRJobConfig.IO_SORT_FACTOR, SORT_FACTOR)[ FD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_21 $$ for (int i = 0; i < pendingToBeMerged.size(); ++i) [ CD ]
Line_8 $$ MergeManagerImpl<IntWritable, IntWritable> manager = new MergeManagerImpl<IntWritable, IntWritable>(null, jobConf, fs, null, null, null, null, null, null, null, null, null, null, mapOutputFile)-->Line_17 $$ manager.closeOnDiskFile(cap)[ FD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_5 $$ jobConf.setInt(MRJobConfig.IO_SORT_FACTOR, SORT_FACTOR)[ CD ]
Line_14 $$ for (int i = 0; i < 2 * SORT_FACTOR; ++i) -->Line_21 $$ for (int i = 0; i < pendingToBeMerged.size(); ++i) [ FD ]
Line_14 $$ for (int i = 0; i < 2 * SORT_FACTOR; ++i) -->Line_22 $$ List<CompressAwarePath> inputs = pendingToBeMerged.get(i)[ FD ]
Line_23 $$ for (int j = 1; j < inputs.size(); ++j) -->Line_24 $$ assertTrue("Not enough / too many inputs were going to be merged", inputs.size() > 0 && inputs.size() <= SORT_FACTOR)[ CD ]
Line_2 $$ public void testOnDiskMerger() throws IOException, URISyntaxException, InterruptedException -->Line_12 $$ onDiskMerger.suspend()[ CD ]
