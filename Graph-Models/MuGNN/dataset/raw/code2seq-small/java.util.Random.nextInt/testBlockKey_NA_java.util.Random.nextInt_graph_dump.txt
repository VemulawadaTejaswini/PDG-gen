Line_14 $$ for (int i = 0; i < blkids.length; i++) -->Line_16 $$ Long v = map.get(b)[ CD ]
Line_4 $$ final Random RAN = new Random()-->Line_10 $$ blkids[i] = 1000L + RAN.nextInt(100000)[ FD ]
Line_14 $$ for (int i = 0; i < blkids.length; i++) -->Line_18 $$ assertEquals(blkids[i], v.longValue())[ CD ]
Line_2 $$ public void testBlockKey() -->Line_3 $$ Map<Block, Long> map = new HashMap<Block, Long>()[ CD ]
Line_3 $$ Map<Block, Long> map = new HashMap<Block, Long>()-->Line_16 $$ Long v = map.get(b)[ FD ]
Line_4 $$ final Random RAN = new Random()-->Line_7 $$ RAN.setSeed(seed)[ FD ]
Line_9 $$ for (int i = 0; i < blkids.length; i++) -->Line_14 $$ for (int i = 0; i < blkids.length; i++) [ FD ]
Line_14 $$ for (int i = 0; i < blkids.length; i++) -->Line_17 $$ System.out.println(b + " => " + v)[ CD ]
Line_9 $$ for (int i = 0; i < blkids.length; i++) -->Line_11 $$ map.put(new Block(blkids[i], 0, blkids[i]), blkids[i])[ CD ]
Line_2 $$ public void testBlockKey() -->Line_9 $$ for (int i = 0; i < blkids.length; i++) [ CD ]
Line_2 $$ public void testBlockKey() -->Line_14 $$ for (int i = 0; i < blkids.length; i++) [ CD ]
Line_5 $$ final long seed = RAN.nextLong()-->Line_7 $$ RAN.setSeed(seed)[ FD ]
Line_4 $$ final Random RAN = new Random()-->Line_5 $$ final long seed = RAN.nextLong()[ FD ]
Line_2 $$ public void testBlockKey() -->Line_8 $$ long[] blkids = new long[10][ CD ]
Line_3 $$ Map<Block, Long> map = new HashMap<Block, Long>()-->Line_13 $$ System.out.println("map=" + map.toString().replace(",", "\n  "))[ FD ]
Line_2 $$ public void testBlockKey() -->Line_5 $$ final long seed = RAN.nextLong()[ CD ]
Line_2 $$ public void testBlockKey() -->Line_7 $$ RAN.setSeed(seed)[ CD ]
Line_9 $$ for (int i = 0; i < blkids.length; i++) -->Line_10 $$ blkids[i] = 1000L + RAN.nextInt(100000)[ CD ]
Line_2 $$ public void testBlockKey() -->Line_6 $$ System.out.println("seed=" + seed)[ CD ]
Line_14 $$ for (int i = 0; i < blkids.length; i++) -->Line_15 $$ Block b = new Block(blkids[i], 0, GenerationStamp.GRANDFATHER_GENERATION_STAMP)[ CD ]
Line_15 $$ Block b = new Block(blkids[i], 0, GenerationStamp.GRANDFATHER_GENERATION_STAMP)-->Line_16 $$ Long v = map.get(b)[ FD ]
Line_16 $$ Long v = map.get(b)-->Line_18 $$ assertEquals(blkids[i], v.longValue())[ FD ]
Line_3 $$ Map<Block, Long> map = new HashMap<Block, Long>()-->Line_11 $$ map.put(new Block(blkids[i], 0, blkids[i]), blkids[i])[ FD ]
Line_2 $$ public void testBlockKey() -->Line_4 $$ final Random RAN = new Random()[ CD ]
Line_2 $$ public void testBlockKey() -->Line_13 $$ System.out.println("map=" + map.toString().replace(",", "\n  "))[ CD ]
