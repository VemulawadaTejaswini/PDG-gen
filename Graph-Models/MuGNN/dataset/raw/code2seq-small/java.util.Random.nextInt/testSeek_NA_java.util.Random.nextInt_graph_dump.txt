Line_41 $$ if (numThreads == 1) -->Line_45 $$ for (int i = 0; i < numThreads; i++) executor.submit(worker)[ CD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_31 $$ assertEquals(pos, reader.getPosition())[ FD ]
Line_4 $$ final byte[] expected = new byte[1 << 16]-->Line_32 $$ ByteBuffer buf = ByteBuffer.wrap(expected, pos, expected.length - pos).order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_33 $$ while (reader.bytesRemaining() > 4) assertEquals(buf.getInt(), reader.readInt())[ FD ]
Line_2 $$ private static void testSeek(int numThreads) throws IOException, InterruptedException -->Line_5 $$ long seed = System.nanoTime()[ CD ]
Line_41 $$ if (numThreads == 1) -->Line_47 $$ executor.awaitTermination(1, TimeUnit.MINUTES)[ CD ]
Line_2 $$ private static void testSeek(int numThreads) throws IOException, InterruptedException -->Line_45 $$ for (int i = 0; i < numThreads; i++) executor.submit(worker)[ FD ]
Line_2 $$ private static void testSeek(int numThreads) throws IOException, InterruptedException -->Line_4 $$ final byte[] expected = new byte[1 << 16][ CD ]
Line_4 $$ final byte[] expected = new byte[1 << 16]-->Line_20 $$ assertTrue(Arrays.equals(expected, b.array()))[ FD ]
Line_4 $$ final byte[] expected = new byte[1 << 16]-->Line_25 $$ assertTrue(Arrays.equals(expected, b.array()))[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_30 $$ reader.seek(pos)[ FD ]
Line_29 $$ int pos = r.nextInt(expected.length)-->Line_30 $$ reader.seek(pos)[ FD ]
Line_16 $$ final Runnable worker = () -> -->Line_42 $$ worker.run()[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_35 $$ reader.close()[ FD ]
Line_16 $$ final Runnable worker = () -> -->Line_45 $$ executor.submit(worker)[ FD ]
Line_2 $$ private static void testSeek(int numThreads) throws IOException, InterruptedException -->Line_8 $$ Random r = new Random(seed)[ CD ]
Line_4 $$ final byte[] expected = new byte[1 << 16]-->Line_9 $$ r.nextBytes(expected)[ FD ]
Line_2 $$ private static void testSeek(int numThreads) throws IOException, InterruptedException -->Line_9 $$ r.nextBytes(expected)[ CD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_24 $$ b = ByteBufferUtil.read(reader, expected.length)[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_26 $$ assertTrue(reader.isEOF())[ FD ]
Line_28 $$ for (int i = 0; i < 10; i++) -->Line_30 $$ reader.seek(pos)[ CD ]
Line_2 $$ private static void testSeek(int numThreads) throws IOException, InterruptedException -->Line_41 $$ if (numThreads == 1) [ FD ]
Line_3 $$ final File f = File.createTempFile("testMark", "1")-->Line_14 $$ assert f.exists()[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_18 $$ assertEquals(expected.length, reader.length())[ FD ]
Line_28 $$ for (int i = 0; i < 10; i++) -->Line_45 $$ for (int i = 0; i < numThreads; i++) executor.submit(worker)[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_27 $$ assertEquals(0, reader.bytesRemaining())[ FD ]
Line_2 $$ private static void testSeek(int numThreads) throws IOException, InterruptedException -->Line_3 $$ final File f = File.createTempFile("testMark", "1")[ CD ]
Line_32 $$ ByteBuffer buf = ByteBuffer.wrap(expected, pos, expected.length - pos).order(ByteOrder.BIG_ENDIAN)-->Line_33 $$ assertEquals(buf.getInt(), reader.readInt())[ FD ]
Line_44 $$ ExecutorService executor = Executors.newFixedThreadPool(numThreads)-->Line_47 $$ executor.awaitTermination(1, TimeUnit.MINUTES)[ FD ]
Line_41 $$ if (numThreads == 1) -->Line_46 $$ executor.shutdown()[ CD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_19 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length)[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_21 $$ assertTrue(reader.isEOF())[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_23 $$ reader.seek(0)[ FD ]
Line_28 $$ for (int i = 0; i < 10; i++) -->Line_33 $$ while (reader.bytesRemaining() > 4) assertEquals(buf.getInt(), reader.readInt())[ CD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_33 $$ assertEquals(buf.getInt(), reader.readInt())[ FD ]
Line_29 $$ int pos = r.nextInt(expected.length)-->Line_32 $$ ByteBuffer buf = ByteBuffer.wrap(expected, pos, expected.length - pos).order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_41 $$ if (numThreads == 1) -->Line_42 $$ worker.run()[ CD ]
Line_44 $$ ExecutorService executor = Executors.newFixedThreadPool(numThreads)-->Line_46 $$ executor.shutdown()[ FD ]
Line_4 $$ final byte[] expected = new byte[1 << 16]-->Line_11 $$ writer.write(expected)[ FD ]
Line_8 $$ Random r = new Random(seed)-->Line_29 $$ int pos = r.nextInt(expected.length)[ FD ]
Line_10 $$ try (SequentialWriter writer = SequentialWriter.open(f)) -->Line_11 $$ writer.write(expected)[ FD ]
Line_17 $$ try (RandomAccessReader reader = new RandomAccessReader.Builder(channel).build()) -->Line_22 $$ assertEquals(0, reader.bytesRemaining())[ FD ]
Line_41 $$ if (numThreads == 1) -->Line_44 $$ ExecutorService executor = Executors.newFixedThreadPool(numThreads)[ CD ]
Line_2 $$ private static void testSeek(int numThreads) throws IOException, InterruptedException -->Line_44 $$ ExecutorService executor = Executors.newFixedThreadPool(numThreads)[ FD ]
Line_19 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length)-->Line_24 $$ b = ByteBufferUtil.read(reader, expected.length)[ FD ]
Line_24 $$ b = ByteBufferUtil.read(reader, expected.length)-->Line_25 $$ assertTrue(Arrays.equals(expected, b.array()))[ FD ]
Line_28 $$ for (int i = 0; i < 10; i++) -->Line_29 $$ int pos = r.nextInt(expected.length)[ CD ]
Line_29 $$ int pos = r.nextInt(expected.length)-->Line_31 $$ assertEquals(pos, reader.getPosition())[ FD ]
Line_44 $$ ExecutorService executor = Executors.newFixedThreadPool(numThreads)-->Line_45 $$ executor.submit(worker)[ FD ]
Line_28 $$ for (int i = 0; i < 10; i++) -->Line_32 $$ ByteBuffer buf = ByteBuffer.wrap(expected, pos, expected.length - pos).order(ByteOrder.BIG_ENDIAN)[ CD ]
Line_19 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length)-->Line_20 $$ assertTrue(Arrays.equals(expected, b.array()))[ FD ]
Line_19 $$ ByteBuffer b = ByteBufferUtil.read(reader, expected.length)-->Line_25 $$ assertTrue(Arrays.equals(expected, b.array()))[ FD ]
Line_28 $$ for (int i = 0; i < 10; i++) -->Line_31 $$ assertEquals(pos, reader.getPosition())[ CD ]
Line_3 $$ final File f = File.createTempFile("testMark", "1")-->Line_10 $$ try (SequentialWriter writer = SequentialWriter.open(f)) [ FD ]
Line_8 $$ Random r = new Random(seed)-->Line_9 $$ r.nextBytes(expected)[ FD ]
Line_10 $$ try (SequentialWriter writer = SequentialWriter.open(f)) -->Line_12 $$ writer.finish()[ FD ]
