Line_6 $$ List<List<Integer>> lists = new NaturalListGenerator<Integer>(ITERATOR_COUNT, LIST_LENGTH) -->Line_9 $$ return r.nextBoolean() ? r.nextInt(5 * LIST_LENGTH) : next++[ CD ]
Line_2 $$ public void testCombinationInts() -->Line_4 $$ final Random r = new Random()[ CD ]
Line_6 $$ List<List<Integer>> lists = new NaturalListGenerator<Integer>(ITERATOR_COUNT, LIST_LENGTH) -->Line_12 $$ testMergeIterator(reducer, lists)[ FD ]
Line_2 $$ public void testCombinationInts() -->Line_12 $$ testMergeIterator(reducer, lists)[ CD ]
Line_2 $$ public void testCombinationInts() -->Line_6 $$ List<List<Integer>> lists = new NaturalListGenerator<Integer>(ITERATOR_COUNT, LIST_LENGTH) [ CD ]
Line_4 $$ final Random r = new Random()-->Line_9 $$ return r.nextBoolean() ? r.nextInt(5 * LIST_LENGTH) : next++[ FD ]
Line_5 $$ Reducer<Integer, Counted<Integer>> reducer = new Counter<Integer>()-->Line_12 $$ testMergeIterator(reducer, lists)[ FD ]
Line_2 $$ public void testCombinationInts() -->Line_3 $$ System.out.println("testCombinationInts")[ CD ]
Line_2 $$ public void testCombinationInts() -->Line_5 $$ Reducer<Integer, Counted<Integer>> reducer = new Counter<Integer>()[ CD ]
