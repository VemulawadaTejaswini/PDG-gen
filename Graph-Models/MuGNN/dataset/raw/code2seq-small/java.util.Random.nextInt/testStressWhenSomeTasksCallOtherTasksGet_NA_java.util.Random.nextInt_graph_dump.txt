Line_5 $$ final Disposable myDisposable = Disposer.newDisposable()-->Line_45 $$ Disposer.dispose(myDisposable)[ FD ]
Line_4 $$ for (int maxSimultaneousTasks = 1; maxSimultaneousTasks < 20; maxSimultaneousTasks++) -->Line_7 $$ AtomicInteger running = new AtomicInteger()[ CD ]
Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxSimultaneousTasks, myDisposable)-->Line_16 $$ futures[i] = executor.submit((Runnable) () -> [ FD ]
Line_4 $$ for (int maxSimultaneousTasks = 1; maxSimultaneousTasks < 20; maxSimultaneousTasks++) -->Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxSimultaneousTasks, myDisposable)[ CD ]
Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxSimultaneousTasks, myDisposable)-->Line_36 $$ executor.waitAllTasksExecuted(5, TimeUnit.MINUTES)[ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_15 $$ final int finalMaxSimultaneousTasks = maxSimultaneousTasks[ CD ]
Line_15 $$ final int finalMaxSimultaneousTasks = maxSimultaneousTasks-->Line_19 $$ int r = random.nextInt(finalMaxSimultaneousTasks)[ FD ]
Line_8 $$ AtomicInteger maxThreads = new AtomicInteger()-->Line_48 $$ assertTrue("Max threads was: " + maxThreads + " but bound was: " + maxSimultaneousTasks, maxThreads.get() <= maxSimultaneousTasks)[ FD ]
Line_4 $$ for (int maxSimultaneousTasks = 1; maxSimultaneousTasks < 20; maxSimultaneousTasks++) -->Line_48 $$ assertTrue("Max threads was: " + maxThreads + " but bound was: " + maxSimultaneousTasks, maxThreads.get() <= maxSimultaneousTasks)[ CD ]
Line_2 $$ public void testStressWhenSomeTasksCallOtherTasksGet() throws ExecutionException, InterruptedException -->Line_3 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))[ CD ]
Line_12 $$ Random random = new Random()-->Line_19 $$ int r = random.nextInt(finalMaxSimultaneousTasks)[ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_14 $$ final int finalI = i[ CD ]
Line_7 $$ AtomicInteger running = new AtomicInteger()-->Line_30 $$ running.decrementAndGet()[ FD ]
Line_2 $$ public void testStressWhenSomeTasksCallOtherTasksGet() throws ExecutionException, InterruptedException -->Line_50 $$ backendExecutor.shutdownNow()[ CD ]
Line_19 $$ int r = random.nextInt(finalMaxSimultaneousTasks)-->Line_28 $$ TimeoutUtil.sleep(r)[ FD ]
Line_3 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))-->Line_51 $$ assertTrue(backendExecutor.awaitTermination(100, TimeUnit.SECONDS))[ FD ]
Line_8 $$ AtomicInteger maxThreads = new AtomicInteger()-->Line_17 $$ maxThreads.accumulateAndGet(running.incrementAndGet(), Math::<>max)[ FD ]
Line_2 $$ public void testStressWhenSomeTasksCallOtherTasksGet() throws ExecutionException, InterruptedException -->Line_51 $$ assertTrue(backendExecutor.awaitTermination(100, TimeUnit.SECONDS))[ CD ]
Line_4 $$ for (int maxSimultaneousTasks = 1; maxSimultaneousTasks < 20; maxSimultaneousTasks++) -->Line_5 $$ final Disposable myDisposable = Disposer.newDisposable()[ CD ]
Line_3 $$ ExecutorService backendExecutor = Executors.newCachedThreadPool(ConcurrencyUtil.newNamedThreadFactory(getName()))-->Line_50 $$ backendExecutor.shutdownNow()[ FD ]
Line_10 $$ int N = 5000-->Line_13 $$ for (int i = 0; i < N; i++) [ FD ]
Line_4 $$ for (int maxSimultaneousTasks = 1; maxSimultaneousTasks < 20; maxSimultaneousTasks++) -->Line_8 $$ AtomicInteger maxThreads = new AtomicInteger()[ CD ]
Line_2 $$ public void testStressWhenSomeTasksCallOtherTasksGet() throws ExecutionException, InterruptedException -->Line_4 $$ for (int maxSimultaneousTasks = 1; maxSimultaneousTasks < 20; maxSimultaneousTasks++) [ CD ]
Line_7 $$ AtomicInteger running = new AtomicInteger()-->Line_17 $$ maxThreads.accumulateAndGet(running.incrementAndGet(), Math::<>max)[ FD ]
Line_6 $$ BoundedTaskExecutor executor = new BoundedTaskExecutor(backendExecutor, maxSimultaneousTasks, myDisposable)-->Line_46 $$ assertTrue(executor.isShutdown())[ FD ]
Line_13 $$ for (int i = 0; i < N; i++) -->Line_16 $$ futures[i] = executor.submit((Runnable) () -> [ CD ]
