Line_22 $$ final INode i = newINode(n++, width)-->Line_98 $$ computed = i < 0 ? null : current.get(i)[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_47 $$ if (!hasIdenticalElements(current, c)) [ CD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_67 $$ for (int i = 1; i < diffs.size(); i++) [ FD ]
Line_5 $$ final List<INode> previous = new ArrayList<INode>()-->Line_100 $$ final int j = Diff.search(previous, inode.getKey())[ FD ]
Line_44 $$ for (int i = 0; i < diffs.size(); i++) -->Line_68 $$ combined.combinePosterior(diffs.get(i), null)[ FD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_102 $$ Assert.assertTrue(computed == expected)[ CD ]
Line_67 $$ for (int i = 1; i < diffs.size(); i++) -->Line_68 $$ combined.combinePosterior(diffs.get(i), null)[ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)[ CD ]
Line_6 $$ int n = 0-->Line_8 $$ previous.add(newINode(n, width))[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_15 $$ for (int m = 0; m < numModifications; m++) [ FD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_47 $$ if (!hasIdenticalElements(current, c)) [ FD ]
Line_58 $$ if (!hasIdenticalElements(previous, p)) -->Line_62 $$ System.out.println("current  = " + current)[ CD ]
Line_16 $$ final int j = m * diffs.size() / numModifications-->Line_101 $$ final INode expected = j < 0 ? null : previous.get(j)[ FD ]
Line_67 $$ for (int i = 1; i < diffs.size(); i++) -->Line_98 $$ computed = i < 0 ? null : current.get(i)[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_80 $$ if (!hasIdenticalElements(previous, p)) [ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) [ CD ]
Line_93 $$ final INode computed-->Line_108 $$ computed = r.getElement()[ FD ]
Line_5 $$ final List<INode> previous = new ArrayList<INode>()-->Line_80 $$ if (!hasIdenticalElements(previous, p)) [ FD ]
Line_5 $$ final List<INode> previous = new ArrayList<INode>()-->Line_58 $$ if (!hasIdenticalElements(previous, p)) [ FD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_115 $$ Assert.assertTrue(computed == expected)[ CD ]
Line_12 $$ for (int j = 0; j < 5; j++) -->Line_13 $$ diffs.add(new Diff<byte[], INode>())[ CD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_13 $$ diffs.add(new Diff<byte[], INode>())[ FD ]
Line_72 $$ if (!hasIdenticalElements(current, c)) -->Line_75 $$ System.out.println("current  = " + current)[ CD ]
Line_94 $$ if (r != null) -->Line_98 $$ computed = i < 0 ? null : current.get(i)[ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_6 $$ int n = 0[ CD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_56 $$ p = diffs.get(i).apply2Current(p)[ FD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_36 $$ final INode i = current.get(RANDOM.nextInt(current.size()))[ FD ]
Line_107 $$ if (r != null) -->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ CD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_98 $$ computed = i < 0 ? null : current.get(i)[ FD ]
Line_47 $$ if (!hasIdenticalElements(current, c)) -->Line_48 $$ System.out.println("previous = " + previous)[ CD ]
Line_5 $$ final List<INode> previous = new ArrayList<INode>()-->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_45 $$ c = diffs.get(i).apply2Previous(c)[ FD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_105 $$ final Container<INode> r = combined.accessCurrent(inode.getKey())[ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_12 $$ for (int j = 0; j < 5; j++) [ CD ]
Line_100 $$ final int j = Diff.search(previous, inode.getKey())-->Line_101 $$ final INode expected = j < 0 ? null : previous.get(j)[ FD ]
Line_44 $$ for (int i = 0; i < diffs.size(); i++) -->Line_56 $$ p = diffs.get(i).apply2Current(p)[ FD ]
Line_92 $$ final Container<INode> r = combined.accessPrevious(inode.getKey())-->Line_95 $$ computed = r.getElement()[ FD ]
Line_95 $$ computed = r.getElement()-->Line_108 $$ computed = r.getElement()[ FD ]
Line_16 $$ final int j = m * diffs.size() / numModifications-->Line_23 $$ create(i, current, diffs.get(j))[ FD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_66 $$ final Diff<byte[], INode> combined = diffs.get(0)[ FD ]
Line_58 $$ if (!hasIdenticalElements(previous, p)) -->Line_61 $$ System.out.println()[ CD ]
Line_5 $$ final List<INode> previous = new ArrayList<INode>()-->Line_101 $$ final INode expected = j < 0 ? null : previous.get(j)[ FD ]
Line_90 $$ final INode inode = newINode(m, width)-->Line_105 $$ final Container<INode> r = combined.accessCurrent(inode.getKey())[ FD ]
Line_107 $$ if (r != null) -->Line_110 $$ final int i = Diff.search(previous, inode.getKey())[ CD ]
Line_6 $$ int n = 0-->Line_7 $$ for (; n < startSize; n++) [ FD ]
Line_44 $$ for (int i = 0; i < diffs.size(); i++) -->Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) [ FD ]
Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) -->Line_98 $$ computed = i < 0 ? null : current.get(i)[ FD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_97 $$ final int i = Diff.search(current, inode.getKey())[ FD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_37 $$ modify(i, current, diffs.get(j))[ FD ]
Line_92 $$ final Container<INode> r = combined.accessPrevious(inode.getKey())-->Line_94 $$ if (r != null) [ FD ]
Line_92 $$ final Container<INode> r = combined.accessPrevious(inode.getKey())-->Line_107 $$ if (r != null) [ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_7 $$ for (; n < startSize; n++) [ CD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_44 $$ for (int i = 0; i < diffs.size(); i++) [ FD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_30 $$ delete(i, current, diffs.get(j))[ FD ]
Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) -->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_7 $$ for (; n < startSize; n++) -->Line_8 $$ previous.add(newINode(n, width))[ CD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_114 $$ final INode expected = j < 0 ? null : current.get(j)[ FD ]
Line_90 $$ final INode inode = newINode(m, width)-->Line_100 $$ final int j = Diff.search(previous, inode.getKey())[ FD ]
Line_43 $$ List<INode> c = previous-->Line_72 $$ if (!hasIdenticalElements(current, c)) [ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_72 $$ if (!hasIdenticalElements(current, c)) [ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_15 $$ for (int m = 0; m < numModifications; m++) [ CD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_23 $$ create(i, current, diffs.get(j))[ FD ]
Line_3 $$ final int width = findWidth(startSize + numModifications)-->Line_90 $$ final INode inode = newINode(m, width)[ FD ]
Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) -->Line_67 $$ for (int i = 1; i < diffs.size(); i++) [ FD ]
Line_93 $$ final INode computed-->Line_98 $$ computed = i < 0 ? null : current.get(i)[ FD ]
Line_15 $$ for (int m = 0; m < numModifications; m++) -->Line_89 $$ for (int m = 0; m < n; m++) [ FD ]
Line_92 $$ final Container<INode> r = combined.accessPrevious(inode.getKey())-->Line_108 $$ computed = r.getElement()[ FD ]
Line_15 $$ for (int m = 0; m < numModifications; m++) -->Line_90 $$ final INode inode = newINode(m, width)[ FD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_68 $$ combined.combinePosterior(diffs.get(i), null)[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_5 $$ final List<INode> previous = new ArrayList<INode>()[ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_66 $$ final Diff<byte[], INode> combined = diffs.get(0)[ CD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_30 $$ delete(i, current, diffs.get(j))[ FD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_72 $$ if (!hasIdenticalElements(current, c)) [ FD ]
Line_80 $$ if (!hasIdenticalElements(previous, p)) -->Line_83 $$ System.out.println()[ CD ]
Line_97 $$ final int i = Diff.search(current, inode.getKey())-->Line_98 $$ computed = i < 0 ? null : current.get(i)[ FD ]
Line_6 $$ int n = 0-->Line_22 $$ final INode i = newINode(n++, width)[ FD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_44 $$ for (int i = 0; i < diffs.size(); i++) [ FD ]
Line_16 $$ final int j = m * diffs.size() / numModifications-->Line_37 $$ modify(i, current, diffs.get(j))[ FD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_90 $$ final INode inode = newINode(m, width)[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_79 $$ final List<INode> p = combined.apply2Current(current)[ CD ]
Line_98 $$ computed = i < 0 ? null : current.get(i)-->Line_108 $$ computed = r.getElement()[ FD ]
Line_95 $$ computed = r.getElement()-->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_56 $$ p = diffs.get(i).apply2Current(p)-->Line_58 $$ if (!hasIdenticalElements(previous, p)) [ FD ]
Line_12 $$ for (int j = 0; j < 5; j++) -->Line_23 $$ create(i, current, diffs.get(j))[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_54 $$ List<INode> p = current[ CD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_79 $$ final List<INode> p = combined.apply2Current(current)[ FD ]
Line_6 $$ int n = 0-->Line_89 $$ for (int m = 0; m < n; m++) [ FD ]
Line_90 $$ final INode inode = newINode(m, width)-->Line_97 $$ final int i = Diff.search(current, inode.getKey())[ FD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_45 $$ c = diffs.get(i).apply2Previous(c)[ FD ]
Line_47 $$ if (!hasIdenticalElements(current, c)) -->Line_50 $$ System.out.println("current  = " + current)[ CD ]
Line_94 $$ if (r != null) -->Line_95 $$ computed = r.getElement()[ CD ]
Line_95 $$ computed = r.getElement()-->Line_98 $$ computed = i < 0 ? null : current.get(i)[ FD ]
Line_45 $$ c = diffs.get(i).apply2Previous(c)-->Line_72 $$ if (!hasIdenticalElements(current, c)) [ FD ]
Line_66 $$ final Diff<byte[], INode> combined = diffs.get(0)-->Line_105 $$ final Container<INode> r = combined.accessCurrent(inode.getKey())[ FD ]
Line_47 $$ if (!hasIdenticalElements(current, c)) -->Line_49 $$ System.out.println()[ CD ]
Line_54 $$ List<INode> p = current-->Line_80 $$ if (!hasIdenticalElements(previous, p)) [ FD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_30 $$ delete(i, current, diffs.get(j))[ FD ]
Line_44 $$ for (int i = 0; i < diffs.size(); i++) -->Line_45 $$ c = diffs.get(i).apply2Previous(c)[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_7 $$ for (; n < startSize; n++) [ FD ]
Line_15 $$ for (int m = 0; m < numModifications; m++) -->Line_17 $$ final int nextOperation = current.isEmpty() ? 1 : RANDOM.nextInt(3) + 1[ CD ]
Line_43 $$ List<INode> c = previous-->Line_45 $$ c = diffs.get(i).apply2Previous(c)[ FD ]
Line_16 $$ final int j = m * diffs.size() / numModifications-->Line_114 $$ final INode expected = j < 0 ? null : current.get(j)[ FD ]
Line_90 $$ final INode inode = newINode(m, width)-->Line_110 $$ final int i = Diff.search(previous, inode.getKey())[ FD ]
Line_66 $$ final Diff<byte[], INode> combined = diffs.get(0)-->Line_92 $$ final Container<INode> r = combined.accessPrevious(inode.getKey())[ FD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_113 $$ final int j = Diff.search(current, inode.getKey())[ CD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_93 $$ final INode computed[ CD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_16 $$ final int j = m * diffs.size() / numModifications[ FD ]
Line_54 $$ List<INode> p = current-->Line_58 $$ if (!hasIdenticalElements(previous, p)) [ FD ]
Line_3 $$ final int width = findWidth(startSize + numModifications)-->Line_22 $$ final INode i = newINode(n++, width)[ FD ]
Line_80 $$ if (!hasIdenticalElements(previous, p)) -->Line_84 $$ System.out.println("current  = " + current)[ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_89 $$ for (int m = 0; m < n; m++) [ CD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_107 $$ if (r != null) [ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()[ CD ]
Line_12 $$ for (int j = 0; j < 5; j++) -->Line_30 $$ delete(i, current, diffs.get(j))[ FD ]
Line_107 $$ if (r != null) -->Line_108 $$ computed = r.getElement()[ CD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_29 $$ final INode i = current.get(RANDOM.nextInt(current.size()))[ FD ]
Line_66 $$ final Diff<byte[], INode> combined = diffs.get(0)-->Line_79 $$ final List<INode> p = combined.apply2Current(current)[ FD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_37 $$ modify(i, current, diffs.get(j))[ FD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) [ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_71 $$ final List<INode> c = combined.apply2Previous(previous)[ CD ]
Line_44 $$ for (int i = 0; i < diffs.size(); i++) -->Line_98 $$ computed = i < 0 ? null : current.get(i)[ FD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_23 $$ create(i, current, diffs.get(j))[ FD ]
Line_93 $$ final INode computed-->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_113 $$ final int j = Diff.search(current, inode.getKey())[ FD ]
Line_56 $$ p = diffs.get(i).apply2Current(p)-->Line_80 $$ if (!hasIdenticalElements(previous, p)) [ FD ]
Line_12 $$ for (int j = 0; j < 5; j++) -->Line_37 $$ modify(i, current, diffs.get(j))[ FD ]
Line_5 $$ final List<INode> previous = new ArrayList<INode>()-->Line_8 $$ previous.add(newINode(n, width))[ FD ]
Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) -->Line_56 $$ p = diffs.get(i).apply2Current(p)[ CD ]
Line_58 $$ if (!hasIdenticalElements(previous, p)) -->Line_59 $$ System.out.println("previous = " + previous)[ CD ]
Line_72 $$ if (!hasIdenticalElements(current, c)) -->Line_76 $$ System.out.println("c        = " + c)[ CD ]
Line_80 $$ if (!hasIdenticalElements(previous, p)) -->Line_82 $$ System.out.println("p        = " + p)[ CD ]
Line_54 $$ List<INode> p = current-->Line_56 $$ p = diffs.get(i).apply2Current(p)[ FD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) [ FD ]
Line_80 $$ if (!hasIdenticalElements(previous, p)) -->Line_81 $$ System.out.println("previous = " + previous)[ CD ]
Line_100 $$ final int j = Diff.search(previous, inode.getKey())-->Line_114 $$ final INode expected = j < 0 ? null : current.get(j)[ FD ]
Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) -->Line_56 $$ p = diffs.get(i).apply2Current(p)[ FD ]
Line_43 $$ List<INode> c = previous-->Line_47 $$ if (!hasIdenticalElements(current, c)) [ FD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_67 $$ for (int i = 1; i < diffs.size(); i++) [ FD ]
Line_15 $$ for (int m = 0; m < numModifications; m++) -->Line_16 $$ final int j = m * diffs.size() / numModifications[ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_58 $$ if (!hasIdenticalElements(previous, p)) [ CD ]
Line_45 $$ c = diffs.get(i).apply2Previous(c)-->Line_47 $$ if (!hasIdenticalElements(current, c)) [ FD ]
Line_44 $$ for (int i = 0; i < diffs.size(); i++) -->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_47 $$ if (!hasIdenticalElements(current, c)) -->Line_51 $$ System.out.println("c        = " + c)[ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_44 $$ for (int i = 0; i < diffs.size(); i++) [ CD ]
Line_97 $$ final int i = Diff.search(current, inode.getKey())-->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_5 $$ final List<INode> previous = new ArrayList<INode>()-->Line_110 $$ final int i = Diff.search(previous, inode.getKey())[ FD ]
Line_66 $$ final Diff<byte[], INode> combined = diffs.get(0)-->Line_68 $$ combined.combinePosterior(diffs.get(i), null)[ FD ]
Line_94 $$ if (r != null) -->Line_97 $$ final int i = Diff.search(current, inode.getKey())[ CD ]
Line_44 $$ for (int i = 0; i < diffs.size(); i++) -->Line_45 $$ c = diffs.get(i).apply2Previous(c)[ CD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_100 $$ final int j = Diff.search(previous, inode.getKey())[ CD ]
Line_12 $$ for (int j = 0; j < 5; j++) -->Line_101 $$ final INode expected = j < 0 ? null : previous.get(j)[ FD ]
Line_67 $$ for (int i = 1; i < diffs.size(); i++) -->Line_68 $$ combined.combinePosterior(diffs.get(i), null)[ FD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_94 $$ if (r != null) [ CD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_4 $$ System.out.println("\nstartSize=" + startSize + ", numModifications=" + numModifications + ", width=" + width)[ CD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_68 $$ combined.combinePosterior(diffs.get(i), null)[ FD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_98 $$ computed = i < 0 ? null : current.get(i)-->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_5 $$ final List<INode> previous = new ArrayList<INode>()-->Line_71 $$ final List<INode> c = combined.apply2Previous(previous)[ FD ]
Line_90 $$ final INode inode = newINode(m, width)-->Line_113 $$ final int j = Diff.search(current, inode.getKey())[ FD ]
Line_72 $$ if (!hasIdenticalElements(current, c)) -->Line_74 $$ System.out.println()[ CD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_101 $$ final INode expected = j < 0 ? null : previous.get(j)[ CD ]
Line_67 $$ for (int i = 1; i < diffs.size(); i++) -->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_90 $$ final INode inode = newINode(m, width)[ CD ]
Line_93 $$ final INode computed-->Line_95 $$ computed = r.getElement()[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_43 $$ List<INode> c = previous[ CD ]
Line_58 $$ if (!hasIdenticalElements(previous, p)) -->Line_60 $$ System.out.println("p        = " + p)[ CD ]
Line_22 $$ final INode i = newINode(n++, width)-->Line_23 $$ create(i, current, diffs.get(j))[ FD ]
Line_108 $$ computed = r.getElement()-->Line_111 $$ computed = i < 0 ? null : previous.get(i)[ FD ]
Line_16 $$ final int j = m * diffs.size() / numModifications-->Line_30 $$ delete(i, current, diffs.get(j))[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_3 $$ final int width = findWidth(startSize + numModifications)[ CD ]
Line_3 $$ final int width = findWidth(startSize + numModifications)-->Line_8 $$ previous.add(newINode(n, width))[ FD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_37 $$ modify(i, current, diffs.get(j))[ FD ]
Line_44 $$ for (int i = 0; i < diffs.size(); i++) -->Line_67 $$ for (int i = 1; i < diffs.size(); i++) [ FD ]
Line_66 $$ final Diff<byte[], INode> combined = diffs.get(0)-->Line_71 $$ final List<INode> c = combined.apply2Previous(previous)[ FD ]
Line_11 $$ final List<Diff<byte[], INode>> diffs = new ArrayList<Diff<byte[], INode>>()-->Line_56 $$ p = diffs.get(i).apply2Current(p)[ FD ]
Line_55 $$ for (int i = diffs.size() - 1; i >= 0; i--) -->Line_68 $$ combined.combinePosterior(diffs.get(i), null)[ FD ]
Line_89 $$ for (int m = 0; m < n; m++) -->Line_92 $$ final Container<INode> r = combined.accessPrevious(inode.getKey())[ CD ]
Line_10 $$ final List<INode> current = new ArrayList<INode>(previous)-->Line_17 $$ final int nextOperation = current.isEmpty() ? 1 : RANDOM.nextInt(3) + 1[ FD ]
Line_2 $$ void runDiffTest(int startSize, int numModifications) -->Line_67 $$ for (int i = 1; i < diffs.size(); i++) [ CD ]
Line_90 $$ final INode inode = newINode(m, width)-->Line_92 $$ final Container<INode> r = combined.accessPrevious(inode.getKey())[ FD ]
Line_72 $$ if (!hasIdenticalElements(current, c)) -->Line_73 $$ System.out.println("previous = " + previous)[ CD ]
Line_12 $$ for (int j = 0; j < 5; j++) -->Line_114 $$ final INode expected = j < 0 ? null : current.get(j)[ FD ]
