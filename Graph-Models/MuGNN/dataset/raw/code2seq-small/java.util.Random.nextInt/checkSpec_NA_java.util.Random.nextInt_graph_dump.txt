Line_12 $$ final int in_rec = r.nextInt(Integer.MAX_VALUE)-->Line_18 $$ final int min = WritableUtils.getVIntSize(in_rec) + WritableUtils.getVIntSize(out_rec) + WritableUtils.getVIntSize(out_bytes) + WritableUtils.getVIntSize(0)[ FD ]
Line_16 $$ final int out_bytes = r.nextInt(Integer.MAX_VALUE)-->Line_30 $$ assertEquals(out_bytes, b.getReduceOutputBytes())[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_15 $$ a.setReduceOutputRecords(out_rec)[ CD ]
Line_14 $$ final int out_rec = r.nextInt(Integer.MAX_VALUE)-->Line_18 $$ final int min = WritableUtils.getVIntSize(in_rec) + WritableUtils.getVIntSize(out_rec) + WritableUtils.getVIntSize(out_bytes) + WritableUtils.getVIntSize(0)[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_22 $$ assertEquals(size, out.getLength())[ CD ]
Line_7 $$ final DataInputBuffer in = new DataInputBuffer()-->Line_26 $$ b.readFields(in)[ FD ]
Line_20 $$ final int size = r.nextInt(1024) + a.fixedBytes() + 1-->Line_22 $$ assertEquals(size, out.getLength())[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_6 $$ LOG.info("spec: " + s)[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_10 $$ b.setType(GridmixKey.REDUCE_SPEC)[ CD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_20 $$ final int size = r.nextInt(1024) + a.fixedBytes() + 1[ CD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_23 $$ assertTrue(a.equals(a))[ CD ]
Line_3 $$ final Random r = new Random()-->Line_16 $$ final int out_bytes = r.nextInt(Integer.MAX_VALUE)[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_14 $$ final int out_rec = r.nextInt(Integer.MAX_VALUE)[ CD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_13 $$ a.setReduceInputRecords(in_rec)[ CD ]
Line_3 $$ final Random r = new Random()-->Line_21 $$ setSerialize(a, r.nextLong(), size, out)[ FD ]
Line_7 $$ final DataInputBuffer in = new DataInputBuffer()-->Line_25 $$ in.reset(out.getData(), 0, out.getLength())[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_13 $$ a.setReduceInputRecords(in_rec)[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_31 $$ assertTrue(a.equals(b))[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_17 $$ a.setReduceOutputBytes(out_bytes)[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_27 $$ assertEquals(size, b.getSize())[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_17 $$ a.setReduceOutputBytes(out_bytes)[ FD ]
Line_8 $$ final DataOutputBuffer out = new DataOutputBuffer()-->Line_22 $$ assertEquals(size, out.getLength())[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_32 $$ assertEquals(0, a.compareTo(b))[ CD ]
Line_3 $$ final Random r = new Random()-->Line_4 $$ final long s = r.nextLong()[ FD ]
Line_14 $$ final int out_rec = r.nextInt(Integer.MAX_VALUE)-->Line_15 $$ a.setReduceOutputRecords(out_rec)[ FD ]
Line_4 $$ final long s = r.nextLong()-->Line_5 $$ r.setSeed(s)[ FD ]
Line_3 $$ final Random r = new Random()-->Line_5 $$ r.setSeed(s)[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_21 $$ setSerialize(a, r.nextLong(), size, out)[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_24 $$ assertEquals(0, a.compareTo(a))[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_16 $$ final int out_bytes = r.nextInt(Integer.MAX_VALUE)[ CD ]
Line_16 $$ final int out_bytes = r.nextInt(Integer.MAX_VALUE)-->Line_18 $$ final int min = WritableUtils.getVIntSize(in_rec) + WritableUtils.getVIntSize(out_rec) + WritableUtils.getVIntSize(out_bytes) + WritableUtils.getVIntSize(0)[ FD ]
Line_3 $$ final Random r = new Random()-->Line_20 $$ final int size = r.nextInt(1024) + a.fixedBytes() + 1[ FD ]
Line_3 $$ final Random r = new Random()-->Line_14 $$ final int out_rec = r.nextInt(Integer.MAX_VALUE)[ FD ]
Line_8 $$ final DataOutputBuffer out = new DataOutputBuffer()-->Line_21 $$ setSerialize(a, r.nextLong(), size, out)[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_25 $$ in.reset(out.getData(), 0, out.getLength())[ CD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_26 $$ b.readFields(in)[ CD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_28 $$ assertEquals(in_rec, b.getReduceInputRecords())[ CD ]
Line_20 $$ final int size = r.nextInt(1024) + a.fixedBytes() + 1-->Line_27 $$ assertEquals(size, b.getSize())[ FD ]
Line_12 $$ final int in_rec = r.nextInt(Integer.MAX_VALUE)-->Line_13 $$ a.setReduceInputRecords(in_rec)[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_31 $$ assertTrue(a.equals(b))[ CD ]
Line_20 $$ final int size = r.nextInt(1024) + a.fixedBytes() + 1-->Line_21 $$ setSerialize(a, r.nextLong(), size, out)[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_26 $$ b.readFields(in)[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_19 $$ assertEquals(min + 2, a.fixedBytes())[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_21 $$ setSerialize(a, r.nextLong(), size, out)[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_10 $$ b.setType(GridmixKey.REDUCE_SPEC)[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_19 $$ assertEquals(min + 2, a.fixedBytes())[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_7 $$ final DataInputBuffer in = new DataInputBuffer()[ CD ]
Line_14 $$ final int out_rec = r.nextInt(Integer.MAX_VALUE)-->Line_29 $$ assertEquals(out_rec, b.getReduceOutputRecords())[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_29 $$ assertEquals(out_rec, b.getReduceOutputRecords())[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_30 $$ assertEquals(out_bytes, b.getReduceOutputBytes())[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_32 $$ assertEquals(0, a.compareTo(b))[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_33 $$ assertEquals(a.hashCode(), b.hashCode())[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_20 $$ final int size = r.nextInt(1024) + a.fixedBytes() + 1[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_18 $$ final int min = WritableUtils.getVIntSize(in_rec) + WritableUtils.getVIntSize(out_rec) + WritableUtils.getVIntSize(out_bytes) + WritableUtils.getVIntSize(0)[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_11 $$ for (int i = 0; i < 100; ++i) [ CD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_24 $$ assertEquals(0, a.compareTo(a))[ CD ]
Line_3 $$ final Random r = new Random()-->Line_12 $$ final int in_rec = r.nextInt(Integer.MAX_VALUE)[ FD ]
Line_16 $$ final int out_bytes = r.nextInt(Integer.MAX_VALUE)-->Line_17 $$ a.setReduceOutputBytes(out_bytes)[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_28 $$ assertEquals(in_rec, b.getReduceInputRecords())[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_27 $$ assertEquals(size, b.getSize())[ CD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_30 $$ assertEquals(out_bytes, b.getReduceOutputBytes())[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_23 $$ assertTrue(a.equals(a))[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_15 $$ a.setReduceOutputRecords(out_rec)[ FD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_3 $$ final Random r = new Random()[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_4 $$ final long s = r.nextLong()[ CD ]
Line_12 $$ final int in_rec = r.nextInt(Integer.MAX_VALUE)-->Line_28 $$ assertEquals(in_rec, b.getReduceInputRecords())[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_33 $$ assertEquals(a.hashCode(), b.hashCode())[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_5 $$ r.setSeed(s)[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_8 $$ final DataOutputBuffer out = new DataOutputBuffer()[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_9 $$ a.setType(GridmixKey.REDUCE_SPEC)[ CD ]
Line_2 $$ static void checkSpec(GridmixKey a, GridmixKey b) throws Exception -->Line_9 $$ a.setType(GridmixKey.REDUCE_SPEC)[ FD ]
Line_8 $$ final DataOutputBuffer out = new DataOutputBuffer()-->Line_25 $$ in.reset(out.getData(), 0, out.getLength())[ FD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_29 $$ assertEquals(out_rec, b.getReduceOutputRecords())[ CD ]
Line_11 $$ for (int i = 0; i < 100; ++i) -->Line_12 $$ final int in_rec = r.nextInt(Integer.MAX_VALUE)[ CD ]
