Line_2 $$ public void testRegexFilter() throws Exception -->Line_6 $$ fs.delete(inDir, true)[ CD ]
Line_7 $$ for (int length = 1; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_10 $$ int count = countRecords(0)[ CD ]
Line_7 $$ for (int length = 1; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_9 $$ createSequenceFile(length)[ FD ]
Line_2 $$ public void testRegexFilter() throws Exception -->Line_3 $$ LOG.info("Testing Regex Filter with patter: \\A10*")[ CD ]
Line_7 $$ for (int length = 1; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_11 $$ assertEquals(count, length == 0 ? 0 : (int) Math.log10(length) + 1)[ CD ]
Line_7 $$ for (int length = 1; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_11 $$ assertEquals(count, length == 0 ? 0 : (int) Math.log10(length) + 1)[ FD ]
Line_2 $$ public void testRegexFilter() throws Exception -->Line_13 $$ fs.delete(inDir, true)[ CD ]
Line_7 $$ for (int length = 1; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_8 $$ LOG.info("******Number of records: " + length)[ CD ]
Line_10 $$ int count = countRecords(0)-->Line_11 $$ assertEquals(count, length == 0 ? 0 : (int) Math.log10(length) + 1)[ FD ]
Line_2 $$ public void testRegexFilter() throws Exception -->Line_7 $$ for (int length = 1; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) [ CD ]
Line_7 $$ for (int length = 1; length < MAX_LENGTH; length += random.nextInt(MAX_LENGTH / 10) + 1) -->Line_9 $$ createSequenceFile(length)[ CD ]
Line_2 $$ public void testRegexFilter() throws Exception -->Line_4 $$ SequenceFileInputFilter.setFilterClass(job, SequenceFileInputFilter.RegexFilter.class)[ CD ]
Line_2 $$ public void testRegexFilter() throws Exception -->Line_5 $$ SequenceFileInputFilter.RegexFilter.setPattern(job.getConfiguration(), "\\A10*")[ CD ]
