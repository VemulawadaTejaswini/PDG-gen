Line_20 $$ while (!job.isDone() && (started.get() || System.currentTimeMillis() < start + 2000)) -->Line_23 $$ boolean wasFinished = finished.get()[ CD ]
Line_20 $$ while (!job.isDone() && (started.get() || System.currentTimeMillis() < start + 2000)) -->Line_21 $$ boolean wasDone = job.isDone()[ CD ]
Line_7 $$ Job<Void> job = JobLauncher.getInstance().submitToJobThread(new Runnable() -->Line_11 $$ started.set(true)[ CD ]
Line_2 $$ public void testAfterCancelInTheMiddleOfTheExecutionTaskIsDoneReturnsFalseUntilFinished() throws ExecutionException, InterruptedException -->Line_4 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_7 $$ Job<Void> job = JobLauncher.getInstance().submitToJobThread(new Runnable() -->Line_16 $$ assertFalse(job.isDone())[ FD ]
Line_4 $$ for (int i = 0; i < 100; i++) -->Line_7 $$ Job<Void> job = JobLauncher.getInstance().submitToJobThread(new Runnable() [ CD ]
Line_24 $$ if (wasStarted && !wasFinished) -->Line_25 $$ assertFalse(wasDone)[ CD ]
Line_7 $$ Job<Void> job = JobLauncher.getInstance().submitToJobThread(new Runnable() -->Line_20 $$ while (!job.isDone() && (started.get() || System.currentTimeMillis() < start + 2000)) [ FD ]
Line_20 $$ while (!job.isDone() && (started.get() || System.currentTimeMillis() < start + 2000)) -->Line_24 $$ if (wasStarted && !wasFinished) [ CD ]
Line_21 $$ boolean wasDone = job.isDone()-->Line_25 $$ assertFalse(wasDone)[ FD ]
Line_7 $$ Job<Void> job = JobLauncher.getInstance().submitToJobThread(new Runnable() -->Line_18 $$ job.cancel()[ FD ]
Line_7 $$ Job<Void> job = JobLauncher.getInstance().submitToJobThread(new Runnable() -->Line_13 $$ finished.set(true)[ CD ]
Line_4 $$ for (int i = 0; i < 100; i++) -->Line_19 $$ long start = System.currentTimeMillis()[ CD ]
Line_4 $$ for (int i = 0; i < 100; i++) -->Line_16 $$ assertFalse(job.isDone())[ CD ]
Line_4 $$ for (int i = 0; i < 100; i++) -->Line_6 $$ final AtomicBoolean started = new AtomicBoolean()[ CD ]
Line_4 $$ for (int i = 0; i < 100; i++) -->Line_5 $$ final AtomicBoolean finished = new AtomicBoolean()[ CD ]
Line_3 $$ Random random = new Random()-->Line_17 $$ TimeoutUtil.sleep(random.nextInt(100))[ FD ]
Line_4 $$ for (int i = 0; i < 100; i++) -->Line_17 $$ TimeoutUtil.sleep(random.nextInt(100))[ CD ]
Line_23 $$ boolean wasFinished = finished.get()-->Line_24 $$ if (wasStarted && !wasFinished) [ FD ]
Line_7 $$ Job<Void> job = JobLauncher.getInstance().submitToJobThread(new Runnable() -->Line_12 $$ TimeoutUtil.sleep(100)[ CD ]
Line_2 $$ public void testAfterCancelInTheMiddleOfTheExecutionTaskIsDoneReturnsFalseUntilFinished() throws ExecutionException, InterruptedException -->Line_3 $$ Random random = new Random()[ CD ]
Line_23 $$ boolean wasFinished = finished.get()-->Line_30 $$ assertTrue(wasFinished)[ FD ]
Line_5 $$ final AtomicBoolean finished = new AtomicBoolean()-->Line_23 $$ boolean wasFinished = finished.get()[ FD ]
Line_6 $$ final AtomicBoolean started = new AtomicBoolean()-->Line_22 $$ boolean wasStarted = started.get()[ FD ]
Line_4 $$ for (int i = 0; i < 100; i++) -->Line_20 $$ while (!job.isDone() && (started.get() || System.currentTimeMillis() < start + 2000)) [ CD ]
Line_22 $$ boolean wasStarted = started.get()-->Line_24 $$ if (wasStarted && !wasFinished) [ FD ]
Line_4 $$ for (int i = 0; i < 100; i++) -->Line_18 $$ job.cancel()[ CD ]
Line_6 $$ final AtomicBoolean started = new AtomicBoolean()-->Line_20 $$ while (!job.isDone() && (started.get() || System.currentTimeMillis() < start + 2000)) [ FD ]
Line_5 $$ final AtomicBoolean finished = new AtomicBoolean()-->Line_13 $$ finished.set(true)[ FD ]
Line_6 $$ final AtomicBoolean started = new AtomicBoolean()-->Line_11 $$ started.set(true)[ FD ]
Line_20 $$ while (!job.isDone() && (started.get() || System.currentTimeMillis() < start + 2000)) -->Line_22 $$ boolean wasStarted = started.get()[ CD ]
Line_7 $$ Job<Void> job = JobLauncher.getInstance().submitToJobThread(new Runnable() -->Line_21 $$ boolean wasDone = job.isDone()[ FD ]
