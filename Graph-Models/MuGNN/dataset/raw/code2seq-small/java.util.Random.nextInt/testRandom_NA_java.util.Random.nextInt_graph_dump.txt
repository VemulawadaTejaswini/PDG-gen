Line_9 $$ final Random r = new Random()-->Line_10 $$ final long seed = r.nextLong()[ FD ]
Line_10 $$ final long seed = r.nextLong()-->Line_12 $$ r.setSeed(seed)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_13 $$ conf.set(MRJobConfig.MAP_SORT_SPILL_PERCENT, Float.toString(Math.max(0.1f, r.nextFloat())))[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ Job job = Job.getInstance(conf)[ FD ]
Line_5 $$ Job job = Job.getInstance(conf)-->Line_17 $$ runTest("random", job)[ FD ]
Line_6 $$ conf = job.getConfiguration()-->Line_14 $$ RandomFactory.setLengths(conf, r, 1 << 14)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_14 $$ RandomFactory.setLengths(conf, r, 1 << 14)[ CD ]
Line_9 $$ final Random r = new Random()-->Line_15 $$ conf.setInt("test.spillmap.records", r.nextInt(500))[ FD ]
Line_5 $$ Job job = Job.getInstance(conf)-->Line_6 $$ conf = job.getConfiguration()[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_5 $$ Job job = Job.getInstance(conf)[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_7 $$ conf.setInt(MRJobConfig.IO_SORT_MB, 1)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_16 $$ conf.setLong("test.randomfactory.seed", r.nextLong())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setInt(Job.COMPLETION_POLL_INTERVAL_KEY, 100)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_8 $$ conf.setClass("test.mapcollection.class", RandomFactory.class, RecordFactory.class)[ CD ]
Line_9 $$ final Random r = new Random()-->Line_13 $$ conf.set(MRJobConfig.MAP_SORT_SPILL_PERCENT, Float.toString(Math.max(0.1f, r.nextFloat())))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setInt(MRJobConfig.IO_SORT_MB, 1)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_6 $$ conf = job.getConfiguration()[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ conf = job.getConfiguration()[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_17 $$ runTest("random", job)[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_10 $$ final long seed = r.nextLong()[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_12 $$ r.setSeed(seed)[ CD ]
Line_6 $$ conf = job.getConfiguration()-->Line_8 $$ conf.setClass("test.mapcollection.class", RandomFactory.class, RecordFactory.class)[ FD ]
Line_6 $$ conf = job.getConfiguration()-->Line_15 $$ conf.setInt("test.spillmap.records", r.nextInt(500))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_13 $$ conf.set(MRJobConfig.MAP_SORT_SPILL_PERCENT, Float.toString(Math.max(0.1f, r.nextFloat())))[ CD ]
Line_2 $$ public void testRandom() throws Exception -->Line_15 $$ conf.setInt("test.spillmap.records", r.nextInt(500))[ CD ]
Line_9 $$ final Random r = new Random()-->Line_14 $$ RandomFactory.setLengths(conf, r, 1 << 14)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_4 $$ conf.setInt(Job.COMPLETION_POLL_INTERVAL_KEY, 100)[ CD ]
Line_6 $$ conf = job.getConfiguration()-->Line_7 $$ conf.setInt(MRJobConfig.IO_SORT_MB, 1)[ FD ]
Line_9 $$ final Random r = new Random()-->Line_12 $$ r.setSeed(seed)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_15 $$ conf.setInt("test.spillmap.records", r.nextInt(500))[ FD ]
Line_6 $$ conf = job.getConfiguration()-->Line_13 $$ conf.set(MRJobConfig.MAP_SORT_SPILL_PERCENT, Float.toString(Math.max(0.1f, r.nextFloat())))[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_11 $$ LOG.info("SEED: " + seed)[ CD ]
Line_6 $$ conf = job.getConfiguration()-->Line_16 $$ conf.setLong("test.randomfactory.seed", r.nextLong())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setClass("test.mapcollection.class", RandomFactory.class, RecordFactory.class)[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_16 $$ conf.setLong("test.randomfactory.seed", r.nextLong())[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_14 $$ RandomFactory.setLengths(conf, r, 1 << 14)[ FD ]
Line_9 $$ final Random r = new Random()-->Line_16 $$ conf.setLong("test.randomfactory.seed", r.nextLong())[ FD ]
Line_2 $$ public void testRandom() throws Exception -->Line_9 $$ final Random r = new Random()[ CD ]
