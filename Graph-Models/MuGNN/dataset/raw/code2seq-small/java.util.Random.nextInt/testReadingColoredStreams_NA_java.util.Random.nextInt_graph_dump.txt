Line_8 $$ Random r = new Random()-->Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000)) + "\n"[ FD ]
Line_4 $$ for (final Key each : ALL_TYPES) -->Line_16 $$ written.get(each).add(s)[ FD ]
Line_3 $$ final Map<Key, List<String>> written = new ConcurrentHashMap<Key, List<String>>()-->Line_23 $$ assertOrderedEquals(myOutput.get(eachType), written.get(eachType))[ FD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000)) + "\n"[ CD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_16 $$ written.get(each).add(s)[ CD ]
Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000)) + "\n"-->Line_16 $$ written.get(each).add(s)[ FD ]
Line_2 $$ public void testReadingColoredStreams() throws Exception -->Line_21 $$ mySplitter.flush()[ CD ]
Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000)) + "\n"-->Line_14 $$ mySplitter.process(s, each)[ FD ]
Line_6 $$ execute(new Runnable() -->Line_9 $$ for (int i = 0; i < 1000; i++) [ CD ]
Line_11 $$ if (each == ProcessOutputTypes.STDOUT) -->Line_14 $$ mySplitter.process(s, each)[ CD ]
Line_8 $$ Random r = new Random()-->Line_12 $$ mySplitter.process(s, ALL_COLORS.get(r.nextInt(2)))[ FD ]
Line_3 $$ final Map<Key, List<String>> written = new ConcurrentHashMap<Key, List<String>>()-->Line_16 $$ written.get(each).add(s)[ FD ]
Line_4 $$ for (final Key each : ALL_TYPES) -->Line_14 $$ mySplitter.process(s, each)[ FD ]
Line_4 $$ for (final Key each : ALL_TYPES) -->Line_11 $$ if (each == ProcessOutputTypes.STDOUT) [ FD ]
Line_9 $$ for (int i = 0; i < 1000; i++) -->Line_11 $$ if (each == ProcessOutputTypes.STDOUT) [ CD ]
Line_2 $$ public void testReadingColoredStreams() throws Exception -->Line_3 $$ final Map<Key, List<String>> written = new ConcurrentHashMap<Key, List<String>>()[ CD ]
Line_11 $$ if (each == ProcessOutputTypes.STDOUT) -->Line_12 $$ mySplitter.process(s, ALL_COLORS.get(r.nextInt(2)))[ CD ]
Line_10 $$ String s = StringUtil.repeat("A", 100 + r.nextInt(1000)) + "\n"-->Line_12 $$ mySplitter.process(s, ALL_COLORS.get(r.nextInt(2)))[ FD ]
Line_4 $$ for (final Key each : ALL_TYPES) -->Line_5 $$ written.put(each, new ArrayList<String>())[ FD ]
Line_6 $$ execute(new Runnable() -->Line_8 $$ Random r = new Random()[ CD ]
Line_3 $$ final Map<Key, List<String>> written = new ConcurrentHashMap<Key, List<String>>()-->Line_5 $$ written.put(each, new ArrayList<String>())[ FD ]
