Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_45 $$ if (i == (MAX_TESTS - 1)) [ FD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_42 $$ int numSplits = 1[ CD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_69 $$ int recordNumber = 0[ CD ]
Line_73 $$ MapContext<LongWritable, BytesWritable, LongWritable, BytesWritable> mcontext = new MapContextImpl<LongWritable, BytesWritable, LongWritable, BytesWritable>(job.getConfiguration(), context.getTaskAttemptID(), reader, null, null, MapReduceTestUtil.createDummyReporter(), split)-->Line_74 $$ reader.initialize(split, mcontext)[ FD ]
Line_70 $$ for (InputSplit split : splits) -->Line_72 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)[ FD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_65 $$ List<InputSplit> splits = format.getSplits(job)[ CD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_14 $$ BytesWritable value[ CD ]
Line_65 $$ List<InputSplit> splits = format.getSplits(job)-->Line_66 $$ LOG.info("Actual number of splits = " + splits.size())[ FD ]
Line_14 $$ BytesWritable value-->Line_83 $$ assertEquals("Checking record length:", recordLength, value.getLength())[ FD ]
Line_80 $$ value = reader.getCurrentValue()-->Line_82 $$ String valueString = new String(value.getBytes(), 0, value.getLength())[ FD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_4 $$ if (codec != null) [ CD ]
Line_70 $$ for (InputSplit split : splits) -->Line_74 $$ reader.initialize(split, mcontext)[ FD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_39 $$ assertTrue(localFs.exists(file))[ CD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_8 $$ Path file = new Path(workDir, fileName.toString())[ CD ]
Line_14 $$ BytesWritable value-->Line_82 $$ String valueString = new String(value.getBytes(), 0, value.getLength())[ FD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_34 $$ if (codec != null) [ CD ]
Line_34 $$ if (codec != null) -->Line_35 $$ ReflectionUtils.setConf(codec, job.getConfiguration())[ CD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_91 $$ assertEquals("Total original records should be total read records:", recordList.size(), recordNumber)[ CD ]
Line_12 $$ int MAX_TESTS = 20-->Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) [ FD ]
Line_75 $$ Class<?> clazz = reader.getClass()-->Line_76 $$ assertEquals("RecordReader class should be FixedLengthRecordReader:", FixedLengthRecordReader.class, clazz)[ FD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_66 $$ LOG.info("Actual number of splits = " + splits.size())[ CD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_9 $$ int seed = new Random().nextInt()[ CD ]
Line_45 $$ if (i == (MAX_TESTS - 1)) -->Line_49 $$ if (MAX_TESTS % i == 0) [ CD ]
Line_13 $$ LongWritable key-->Line_81 $$ assertEquals("Checking key", (long) (recordNumber * recordLength), key.get())[ FD ]
Line_8 $$ Path file = new Path(workDir, fileName.toString())-->Line_39 $$ assertTrue(localFs.exists(file))[ FD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_11 $$ Random random = new Random(seed)[ CD ]
Line_13 $$ LongWritable key-->Line_79 $$ key = reader.getCurrentKey()[ FD ]
Line_85 $$ String origRecord = recordList.get(recordNumber)-->Line_86 $$ assertEquals("Checking record content:", origRecord, valueString)[ FD ]
Line_82 $$ String valueString = new String(value.getBytes(), 0, value.getLength())-->Line_86 $$ assertEquals("Checking record content:", origRecord, valueString)[ FD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_10 $$ LOG.info("Seed = " + seed)[ CD ]
Line_4 $$ if (codec != null) -->Line_5 $$ fileName.append(".gz")[ CD ]
Line_72 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)-->Line_79 $$ key = reader.getCurrentKey()[ FD ]
Line_69 $$ int recordNumber = 0-->Line_91 $$ assertEquals("Total original records should be total read records:", recordList.size(), recordNumber)[ FD ]
Line_72 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)-->Line_75 $$ Class<?> clazz = reader.getClass()[ FD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_13 $$ LongWritable key[ CD ]
Line_71 $$ TaskAttemptContext context = MapReduceTestUtil.createDummyMapTaskAttemptContext(job.getConfiguration())-->Line_73 $$ MapContext<LongWritable, BytesWritable, LongWritable, BytesWritable> mcontext = new MapContextImpl<LongWritable, BytesWritable, LongWritable, BytesWritable>(job.getConfiguration(), context.getTaskAttemptID(), reader, null, null, MapReduceTestUtil.createDummyReporter(), split)[ FD ]
Line_69 $$ int recordNumber = 0-->Line_85 $$ String origRecord = recordList.get(recordNumber)[ FD ]
Line_71 $$ TaskAttemptContext context = MapReduceTestUtil.createDummyMapTaskAttemptContext(job.getConfiguration())-->Line_72 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)[ FD ]
Line_72 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)-->Line_89 $$ reader.close()[ FD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_16 $$ LOG.info("----------------------------------------------------------")[ CD ]
Line_80 $$ value = reader.getCurrentValue()-->Line_83 $$ assertEquals("Checking record length:", recordLength, value.getLength())[ FD ]
Line_79 $$ key = reader.getCurrentKey()-->Line_81 $$ assertEquals("Checking key", (long) (recordNumber * recordLength), key.get())[ FD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_34 $$ if (codec != null) [ FD ]
Line_69 $$ int recordNumber = 0-->Line_87 $$ recordNumber++[ FD ]
Line_72 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)-->Line_74 $$ reader.initialize(split, mcontext)[ FD ]
Line_14 $$ BytesWritable value-->Line_80 $$ value = reader.getCurrentValue()[ FD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_12 $$ int MAX_TESTS = 20[ CD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_4 $$ if (codec != null) [ FD ]
Line_3 $$ StringBuilder fileName = new StringBuilder("testFormat.txt")-->Line_5 $$ fileName.append(".gz")[ FD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_35 $$ ReflectionUtils.setConf(codec, job.getConfiguration())[ FD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_60 $$ job.getConfiguration().setLong("mapreduce.input.fileinputformat.split.maxsize", (long) (fileSize / numSplits))[ CD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_3 $$ StringBuilder fileName = new StringBuilder("testFormat.txt")[ CD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_7 $$ localFs.delete(workDir, true)[ CD ]
Line_72 $$ RecordReader<LongWritable, BytesWritable> reader = format.createRecordReader(split, context)-->Line_80 $$ value = reader.getCurrentValue()[ FD ]
Line_3 $$ StringBuilder fileName = new StringBuilder("testFormat.txt")-->Line_8 $$ Path file = new Path(workDir, fileName.toString())[ FD ]
Line_2 $$ private void runRandomTests(CompressionCodec codec) throws Exception -->Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) [ CD ]
Line_15 $$ for (int i = 0; i < MAX_TESTS; i++) -->Line_31 $$ LOG.info("totalRecords=" + totalRecords + " recordLength=" + recordLength)[ CD ]
Line_27 $$ recordLength = 1-->Line_83 $$ assertEquals("Checking record length:", recordLength, value.getLength())[ FD ]
