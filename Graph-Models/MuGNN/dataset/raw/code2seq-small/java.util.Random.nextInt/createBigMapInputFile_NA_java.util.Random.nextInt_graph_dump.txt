Line_29 $$ numBytesToWrite -= keyLength + valueLength-->Line_21 $$ while (numBytesToWrite > 0) [ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_4 $$ FileStatus[] list = fs.listStatus(dir)[ FD ]
Line_21 $$ while (numBytesToWrite > 0) -->Line_23 $$ randomKey.setSize(keyLength)[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_9 $$ Path file = new Path(dir, "part-0")[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_16 $$ int valueSizeRange = conf.getInt(MAX_VALUE, 20000) - minValueSize[ CD ]
Line_11 $$ long numBytesToWrite = fileSizeInMB * 1024 * 1024-->Line_29 $$ numBytesToWrite -= keyLength + valueLength[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_11 $$ long numBytesToWrite = fileSizeInMB * 1024 * 1024[ CD ]
Line_18 $$ BytesWritable randomValue = new BytesWritable()-->Line_28 $$ writer.append(randomKey, randomValue)[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_10 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, BytesWritable.class, BytesWritable.class, CompressionType.NONE)[ FD ]
Line_10 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, BytesWritable.class, BytesWritable.class, CompressionType.NONE)-->Line_31 $$ writer.close()[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_20 $$ long start = System.currentTimeMillis()[ CD ]
Line_17 $$ BytesWritable randomKey = new BytesWritable()-->Line_24 $$ randomizeBytes(randomKey.getBytes(), 0, randomKey.getLength())[ FD ]
Line_17 $$ BytesWritable randomKey = new BytesWritable()-->Line_28 $$ writer.append(randomKey, randomValue)[ FD ]
Line_14 $$ int keySizeRange = conf.getInt(MAX_KEY, 1000) - minKeySize-->Line_22 $$ int keyLength = minKeySize + (keySizeRange != 0 ? random.nextInt(keySizeRange) : 0)[ FD ]
Line_22 $$ int keyLength = minKeySize + (keySizeRange != 0 ? random.nextInt(keySizeRange) : 0)-->Line_23 $$ randomKey.setSize(keyLength)[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_14 $$ int keySizeRange = conf.getInt(MAX_KEY, 1000) - minKeySize[ CD ]
Line_25 $$ int valueLength = minValueSize + (valueSizeRange != 0 ? random.nextInt(valueSizeRange) : 0)-->Line_26 $$ randomValue.setSize(valueLength)[ FD ]
Line_25 $$ int valueLength = minValueSize + (valueSizeRange != 0 ? random.nextInt(valueSizeRange) : 0)-->Line_29 $$ numBytesToWrite -= keyLength + valueLength[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_3 $$ if (fs.exists(dir)) [ CD ]
Line_9 $$ Path file = new Path(dir, "part-0")-->Line_10 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, BytesWritable.class, BytesWritable.class, CompressionType.NONE)[ FD ]
Line_21 $$ while (numBytesToWrite > 0) -->Line_26 $$ randomValue.setSize(valueLength)[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_18 $$ BytesWritable randomValue = new BytesWritable()[ CD ]
Line_18 $$ BytesWritable randomValue = new BytesWritable()-->Line_26 $$ randomValue.setSize(valueLength)[ FD ]
Line_21 $$ while (numBytesToWrite > 0) -->Line_28 $$ writer.append(randomKey, randomValue)[ CD ]
Line_21 $$ while (numBytesToWrite > 0) -->Line_29 $$ numBytesToWrite -= keyLength + valueLength[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_33 $$ LOG.info("Created " + file + " of size: " + fileSizeInMB + "MB in " + (end - start) / 1000 + "secs")[ CD ]
Line_11 $$ long numBytesToWrite = fileSizeInMB * 1024 * 1024-->Line_21 $$ while (numBytesToWrite > 0) [ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_12 $$ int minKeySize = conf.getInt(MIN_KEY, 10)[ CD ]
Line_3 $$ if (fs.exists(dir)) -->Line_4 $$ FileStatus[] list = fs.listStatus(dir)[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_14 $$ int keySizeRange = conf.getInt(MAX_KEY, 1000) - minKeySize[ FD ]
Line_10 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, BytesWritable.class, BytesWritable.class, CompressionType.NONE)-->Line_28 $$ writer.append(randomKey, randomValue)[ FD ]
Line_3 $$ if (fs.exists(dir)) -->Line_5 $$ if (list.length > 0) [ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_12 $$ int minKeySize = conf.getInt(MIN_KEY, 10)[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_19 $$ LOG.info("Writing " + numBytesToWrite + " bytes to " + file + " with " + "minKeySize: " + minKeySize + " keySizeRange: " + keySizeRange + " minValueSize: " + minValueSize + " valueSizeRange: " + valueSizeRange)[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_21 $$ while (numBytesToWrite > 0) [ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_32 $$ long end = System.currentTimeMillis()[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_16 $$ int valueSizeRange = conf.getInt(MAX_VALUE, 20000) - minValueSize[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_17 $$ BytesWritable randomKey = new BytesWritable()[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_15 $$ int minValueSize = conf.getInt(MIN_VALUE, 0)[ CD ]
Line_16 $$ int valueSizeRange = conf.getInt(MAX_VALUE, 20000) - minValueSize-->Line_25 $$ int valueLength = minValueSize + (valueSizeRange != 0 ? random.nextInt(valueSizeRange) : 0)[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_15 $$ int minValueSize = conf.getInt(MIN_VALUE, 0)[ FD ]
Line_21 $$ while (numBytesToWrite > 0) -->Line_22 $$ int keyLength = minKeySize + (keySizeRange != 0 ? random.nextInt(keySizeRange) : 0)[ CD ]
Line_21 $$ while (numBytesToWrite > 0) -->Line_25 $$ int valueLength = minValueSize + (valueSizeRange != 0 ? random.nextInt(valueSizeRange) : 0)[ CD ]
Line_18 $$ BytesWritable randomValue = new BytesWritable()-->Line_27 $$ randomizeBytes(randomValue.getBytes(), 0, randomValue.getLength())[ FD ]
Line_21 $$ while (numBytesToWrite > 0) -->Line_24 $$ randomizeBytes(randomKey.getBytes(), 0, randomKey.getLength())[ CD ]
Line_21 $$ while (numBytesToWrite > 0) -->Line_27 $$ randomizeBytes(randomValue.getBytes(), 0, randomValue.getLength())[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_10 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, file, BytesWritable.class, BytesWritable.class, CompressionType.NONE)[ CD ]
Line_22 $$ int keyLength = minKeySize + (keySizeRange != 0 ? random.nextInt(keySizeRange) : 0)-->Line_29 $$ numBytesToWrite -= keyLength + valueLength[ FD ]
Line_17 $$ BytesWritable randomKey = new BytesWritable()-->Line_23 $$ randomKey.setSize(keyLength)[ FD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_31 $$ writer.close()[ CD ]
Line_2 $$ private static void createBigMapInputFile(Configuration conf, FileSystem fs, Path dir, long fileSizeInMB) throws IOException -->Line_3 $$ if (fs.exists(dir)) [ FD ]
