Line_86 $$ while (true) -->Line_95 $$ IDAndVersion idVersion = idVersions[index][ CD ]
Line_118 $$ if (threadRandom.nextInt(100) == 7) -->Line_121 $$ System.out.println(threadID + ": TEST: refresh done at " + (System.nanoTime() - startTime))[ CD ]
Line_123 $$ if (threadRandom.nextInt(100) == 7) -->Line_124 $$ System.out.println(threadID + ": TEST: now flush at " + (System.nanoTime() - startTime))[ CD ]
Line_86 $$ while (true) -->Line_92 $$ if (VERBOSE && index % 100 == 0) [ CD ]
Line_99 $$ long version = idVersion.version-->Line_113 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_162 $$ for (int i = 0; i < idVersions.length; i++) -->Line_163 $$ System.out.println("i=" + i + " " + idVersions[i])[ CD ]
Line_160 $$ if (failed) -->Line_161 $$ System.out.println("All versions:")[ CD ]
Line_39 $$ final Map<String, IDAndVersion> truth = new HashMap()-->Line_54 $$ IDAndVersion curVersion = truth.get(idVersions[i].id)[ FD ]
Line_45 $$ version += TestUtil.nextInt(random, 1, 10)-->Line_113 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_123 $$ if (threadRandom.nextInt(100) == 7) -->Line_130 $$ System.out.println(threadID + ": TEST: flush done at " + (System.nanoTime() - startTime))[ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_25 $$ int numIDs[ CD ]
Line_86 $$ while (true) -->Line_99 $$ long version = idVersion.version[ CD ]
Line_43 $$ for (int i = 0; i < idVersions.length; i++) -->Line_49 $$ idVersions[i] = new IDAndVersion()[ CD ]
Line_76 $$ for (int i = 0; i < threads.length; i++) -->Line_162 $$ for (int i = 0; i < idVersions.length; i++) [ FD ]
Line_86 $$ while (true) -->Line_100 $$ if (idVersion.delete) [ CD ]
Line_25 $$ int numIDs-->Line_29 $$ numIDs = scaledRandomIntBetween(50, 100)[ FD ]
Line_12 $$ Random random = getRandom()-->Line_50 $$ idVersions[i].id = ids[random.nextInt(numIDs)][ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_72 $$ final AtomicInteger upto = new AtomicInteger()[ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_75 $$ final long startTime = System.nanoTime()[ CD ]
Line_25 $$ int numIDs-->Line_50 $$ idVersions[i].id = ids[random.nextInt(numIDs)][ FD ]
Line_96 $$ String id = idVersion.id-->Line_113 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_16 $$ String idPrefix[ CD ]
Line_43 $$ for (int i = 0; i < idVersions.length; i++) -->Line_55 $$ if (curVersion == null || idVersions[i].version > curVersion.version) [ CD ]
Line_45 $$ version += TestUtil.nextInt(random, 1, 10)-->Line_105 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_73 $$ final CountDownLatch startingGun = new CountDownLatch(1)[ CD ]
Line_118 $$ if (threadRandom.nextInt(100) == 7) -->Line_120 $$ refresh()[ CD ]
Line_39 $$ final Map<String, IDAndVersion> truth = new HashMap()-->Line_148 $$ IDAndVersion idVersion = truth.get(id)[ FD ]
Line_44 $$ if (useMonotonicVersion) -->Line_47 $$ version = random.nextLong() & 0x3fffffffffffffffL[ CD ]
Line_86 $$ while (true) -->Line_98 $$ idVersion.indexStartTime = System.nanoTime() - startTime[ CD ]
Line_86 $$ while (true) -->Line_96 $$ String id = idVersion.id[ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_76 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_96 $$ String id = idVersion.id-->Line_102 $$ idVersion.response = client().prepareDelete("test", "type", id).setVersion(version).setVersionType(VersionType.EXTERNAL).execute().actionGet()[ FD ]
Line_12 $$ Random random = getRandom()-->Line_20 $$ idPrefix = TestUtil.randomSimpleString(random)[ FD ]
Line_160 $$ if (failed) -->Line_162 $$ for (int i = 0; i < idVersions.length; i++) [ CD ]
Line_45 $$ version += TestUtil.nextInt(random, 1, 10)-->Line_51 $$ idVersions[i].version = version[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_38 $$ final IDAndVersion[] idVersions = new IDAndVersion[TestUtil.nextInt(random, numIDs / 2, numIDs * (TEST_NIGHTLY ? 8 : 2))][ CD ]
Line_86 $$ while (true) -->Line_89 $$ if (index >= idVersions.length) [ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_17 $$ if (randomBoolean()) [ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_34 $$ String[] ids = idsSet.toArray(new String[numIDs])[ CD ]
Line_62 $$ int index = random.nextInt(i + 1)-->Line_89 $$ if (index >= idVersions.length) [ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_31 $$ while (idsSet.size() < numIDs) [ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_39 $$ final Map<String, IDAndVersion> truth = new HashMap()[ CD ]
Line_47 $$ version = random.nextLong() & 0x3fffffffffffffffL-->Line_110 $$ idVersion.response = client().prepareIndex("test", "type", id).setSource("foo", "bar").setVersion(version).setVersionType(VersionType.EXTERNAL).get()[ FD ]
Line_76 $$ for (int i = 0; i < threads.length; i++) -->Line_78 $$ threads[i] = new Thread() [ CD ]
Line_27 $$ numIDs = scaledRandomIntBetween(300, 1000)-->Line_31 $$ while (idsSet.size() < numIDs) [ FD ]
Line_39 $$ final Map<String, IDAndVersion> truth = new HashMap()-->Line_69 $$ System.out.println("id=" + idVersion.id + " version=" + idVersion.version + " delete?=" + idVersion.delete + " truth?=" + (truth.get(idVersion.id) == idVersion))[ FD ]
Line_26 $$ if (TEST_NIGHTLY) -->Line_27 $$ numIDs = scaledRandomIntBetween(300, 1000)[ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_160 $$ if (failed) [ CD ]
Line_96 $$ String id = idVersion.id-->Line_110 $$ idVersion.response = client().prepareIndex("test", "type", id).setSource("foo", "bar").setVersion(version).setVersionType(VersionType.EXTERNAL).get()[ FD ]
Line_12 $$ Random random = getRandom()-->Line_47 $$ version = random.nextLong() & 0x3fffffffffffffffL[ FD ]
Line_155 $$ if (actualVersion != expected) -->Line_156 $$ System.out.println("FAILED: idVersion=" + idVersion + " actualVersion=" + actualVersion)[ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_11 $$ assertAcked(client().admin().indices().prepareUpdateSettings("test").setSettings(newSettings).execute().actionGet())[ CD ]
Line_27 $$ numIDs = scaledRandomIntBetween(300, 1000)-->Line_50 $$ idVersions[i].id = ids[random.nextInt(numIDs)][ FD ]
Line_118 $$ if (threadRandom.nextInt(100) == 7) -->Line_119 $$ System.out.println(threadID + ": TEST: now refresh at " + (System.nanoTime() - startTime))[ CD ]
Line_73 $$ final CountDownLatch startingGun = new CountDownLatch(1)-->Line_85 $$ startingGun.await()[ FD ]
Line_45 $$ version += TestUtil.nextInt(random, 1, 10)-->Line_102 $$ idVersion.response = client().prepareDelete("test", "type", id).setVersion(version).setVersionType(VersionType.EXTERNAL).execute().actionGet()[ FD ]
Line_76 $$ for (int i = 0; i < threads.length; i++) -->Line_138 $$ threads[i].start()[ CD ]
Line_86 $$ while (true) -->Line_123 $$ if (threadRandom.nextInt(100) == 7) [ CD ]
Line_149 $$ if (idVersion != null && idVersion.delete == false) -->Line_152 $$ expected = -1[ CD ]
Line_68 $$ for (IDAndVersion idVersion : idVersions) -->Line_100 $$ if (idVersion.delete) [ FD ]
Line_99 $$ long version = idVersion.version-->Line_102 $$ idVersion.response = client().prepareDelete("test", "type", id).setVersion(version).setVersionType(VersionType.EXTERNAL).execute().actionGet()[ FD ]
Line_16 $$ String idPrefix-->Line_18 $$ idPrefix = ""[ FD ]
Line_12 $$ Random random = getRandom()-->Line_62 $$ int index = random.nextInt(i + 1)[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_3 $$ createIndex("test")[ CD ]
Line_96 $$ String id = idVersion.id-->Line_105 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_43 $$ for (int i = 0; i < idVersions.length; i++) -->Line_54 $$ IDAndVersion curVersion = truth.get(idVersions[i].id)[ CD ]
Line_45 $$ version += TestUtil.nextInt(random, 1, 10)-->Line_47 $$ version = random.nextLong() & 0x3fffffffffffffffL[ FD ]
Line_29 $$ numIDs = scaledRandomIntBetween(50, 100)-->Line_50 $$ idVersions[i].id = ids[random.nextInt(numIDs)][ FD ]
Line_96 $$ String id = idVersion.id-->Line_154 $$ long actualVersion = client().prepareGet("test", "type", id).execute().actionGet().getVersion()[ FD ]
Line_25 $$ int numIDs-->Line_27 $$ numIDs = scaledRandomIntBetween(300, 1000)[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_43 $$ for (int i = 0; i < idVersions.length; i++) [ CD ]
Line_76 $$ for (int i = 0; i < threads.length; i++) -->Line_77 $$ final int threadID = i[ CD ]
Line_21 $$ if (VERBOSE) -->Line_22 $$ System.out.println("TEST: use id prefix: " + idPrefix)[ CD ]
Line_17 $$ if (randomBoolean()) -->Line_21 $$ if (VERBOSE) [ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_140 $$ startingGun.countDown()[ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_35 $$ boolean useMonotonicVersion = randomBoolean()[ CD ]
Line_86 $$ while (true) -->Line_118 $$ if (threadRandom.nextInt(100) == 7) [ CD ]
Line_26 $$ if (TEST_NIGHTLY) -->Line_29 $$ numIDs = scaledRandomIntBetween(50, 100)[ CD ]
Line_86 $$ while (true) -->Line_117 $$ idVersion.indexFinishTime = System.nanoTime() - startTime[ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_12 $$ Random random = getRandom()[ CD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_18 $$ idPrefix = ""-->Line_20 $$ idPrefix = TestUtil.randomSimpleString(random)[ FD ]
Line_12 $$ Random random = getRandom()-->Line_45 $$ version += TestUtil.nextInt(random, 1, 10)[ FD ]
Line_15 $$ Set<String> idsSet = new HashSet()-->Line_31 $$ while (idsSet.size() < numIDs) [ FD ]
Line_47 $$ version = random.nextLong() & 0x3fffffffffffffffL-->Line_113 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_160 $$ if (failed) -->Line_165 $$ fail("wrong versions for some IDs")[ CD ]
Line_63 $$ IDAndVersion x = idVersions[index]-->Line_65 $$ idVersions[i] = x[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_26 $$ if (TEST_NIGHTLY) [ CD ]
Line_43 $$ for (int i = 0; i < idVersions.length; i++) -->Line_51 $$ idVersions[i].version = version[ CD ]
Line_99 $$ long version = idVersion.version-->Line_105 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_44 $$ if (useMonotonicVersion) -->Line_45 $$ version += TestUtil.nextInt(random, 1, 10)[ CD ]
Line_29 $$ numIDs = scaledRandomIntBetween(50, 100)-->Line_31 $$ while (idsSet.size() < numIDs) [ FD ]
Line_45 $$ version += TestUtil.nextInt(random, 1, 10)-->Line_110 $$ idVersion.response = client().prepareIndex("test", "type", id).setSource("foo", "bar").setVersion(version).setVersionType(VersionType.EXTERNAL).get()[ FD ]
Line_27 $$ numIDs = scaledRandomIntBetween(300, 1000)-->Line_29 $$ numIDs = scaledRandomIntBetween(50, 100)[ FD ]
Line_31 $$ while (idsSet.size() < numIDs) -->Line_32 $$ idsSet.add(idPrefix + idSource.next())[ CD ]
Line_15 $$ Set<String> idsSet = new HashSet()-->Line_32 $$ idsSet.add(idPrefix + idSource.next())[ FD ]
Line_47 $$ version = random.nextLong() & 0x3fffffffffffffffL-->Line_51 $$ idVersions[i].version = version[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_67 $$ if (VERBOSE) [ CD ]
Line_73 $$ final CountDownLatch startingGun = new CountDownLatch(1)-->Line_140 $$ startingGun.countDown()[ FD ]
Line_12 $$ Random random = getRandom()-->Line_38 $$ final IDAndVersion[] idVersions = new IDAndVersion[TestUtil.nextInt(random, numIDs / 2, numIDs * (TEST_NIGHTLY ? 8 : 2))][ FD ]
Line_92 $$ if (VERBOSE && index % 100 == 0) -->Line_93 $$ System.out.println(Thread.currentThread().getName() + ": index=" + index)[ CD ]
Line_17 $$ if (randomBoolean()) -->Line_18 $$ idPrefix = ""[ CD ]
Line_43 $$ for (int i = 0; i < idVersions.length; i++) -->Line_44 $$ if (useMonotonicVersion) [ CD ]
Line_16 $$ String idPrefix-->Line_20 $$ idPrefix = TestUtil.randomSimpleString(random)[ FD ]
Line_43 $$ for (int i = 0; i < idVersions.length; i++) -->Line_50 $$ idVersions[i].id = ids[random.nextInt(numIDs)][ CD ]
Line_47 $$ version = random.nextLong() & 0x3fffffffffffffffL-->Line_105 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_75 $$ final long startTime = System.nanoTime()-->Line_98 $$ idVersion.indexStartTime = System.nanoTime() - startTime[ FD ]
Line_99 $$ long version = idVersion.version-->Line_110 $$ idVersion.response = client().prepareIndex("test", "type", id).setSource("foo", "bar").setVersion(version).setVersionType(VersionType.EXTERNAL).get()[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_74 $$ Thread[] threads = new Thread[TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 20 : 5)][ CD ]
Line_39 $$ final Map<String, IDAndVersion> truth = new HashMap()-->Line_113 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_40 $$ if (VERBOSE) [ CD ]
Line_43 $$ for (int i = 0; i < idVersions.length; i++) -->Line_162 $$ for (int i = 0; i < idVersions.length; i++) [ FD ]
Line_17 $$ if (randomBoolean()) -->Line_20 $$ idPrefix = TestUtil.randomSimpleString(random)[ CD ]
Line_25 $$ int numIDs-->Line_31 $$ while (idsSet.size() < numIDs) [ FD ]
Line_43 $$ for (int i = 0; i < idVersions.length; i++) -->Line_76 $$ for (int i = 0; i < threads.length; i++) [ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_15 $$ Set<String> idsSet = new HashSet()[ CD ]
Line_47 $$ version = random.nextLong() & 0x3fffffffffffffffL-->Line_102 $$ idVersion.response = client().prepareDelete("test", "type", id).setVersion(version).setVersionType(VersionType.EXTERNAL).execute().actionGet()[ FD ]
Line_15 $$ Set<String> idsSet = new HashSet()-->Line_34 $$ String[] ids = idsSet.toArray(new String[numIDs])[ FD ]
Line_95 $$ IDAndVersion idVersion = idVersions[index]-->Line_100 $$ if (idVersion.delete) [ FD ]
Line_75 $$ final long startTime = System.nanoTime()-->Line_117 $$ idVersion.indexFinishTime = System.nanoTime() - startTime[ FD ]
Line_12 $$ Random random = getRandom()-->Line_74 $$ Thread[] threads = new Thread[TestUtil.nextInt(random, 1, TEST_NIGHTLY ? 20 : 5)][ FD ]
Line_2 $$ public void testRandomIDsAndVersions() throws Exception -->Line_10 $$ newSettings.put("index.gc_deletes", "1000000h")[ CD ]
Line_96 $$ String id = idVersion.id-->Line_148 $$ IDAndVersion idVersion = truth.get(id)[ FD ]
Line_39 $$ final Map<String, IDAndVersion> truth = new HashMap()-->Line_105 $$ assertThat(version, lessThanOrEqualTo(truth.get(id).version))[ FD ]
Line_40 $$ if (VERBOSE) -->Line_41 $$ System.out.println("TEST: use " + numIDs + " ids; " + idVersions.length + " operations")[ CD ]
