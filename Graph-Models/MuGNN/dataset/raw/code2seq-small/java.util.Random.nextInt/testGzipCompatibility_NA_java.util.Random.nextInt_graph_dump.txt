Line_16 $$ Configuration conf = new Configuration()-->Line_18 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)[ FD ]
Line_19 $$ Decompressor decom = codec.createDecompressor()-->Line_22 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_18 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)-->Line_19 $$ Decompressor decom = codec.createDecompressor()[ FD ]
Line_8 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_24 $$ IOUtils.copyBytes(gzin, dflbuf, 4096)[ FD ]
Line_10 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)]-->Line_26 $$ assertArrayEquals(b, dflchk)[ FD ]
Line_4 $$ Random r = new Random()-->Line_5 $$ long seed = r.nextLong()[ FD ]
Line_9 $$ GZIPOutputStream gzout = new GZIPOutputStream(dflbuf)-->Line_13 $$ gzout.close()[ FD ]
Line_14 $$ DataInputBuffer gzbuf = new DataInputBuffer()-->Line_22 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_5 $$ long seed = r.nextLong()-->Line_6 $$ r.setSeed(seed)[ FD ]
Line_19 $$ Decompressor decom = codec.createDecompressor()-->Line_21 $$ assertEquals(BuiltInGzipDecompressor.class, decom.getClass())[ FD ]
Line_10 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)]-->Line_11 $$ r.nextBytes(b)[ FD ]
Line_22 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)-->Line_24 $$ IOUtils.copyBytes(gzin, dflbuf, 4096)[ FD ]
Line_4 $$ Random r = new Random()-->Line_11 $$ r.nextBytes(b)[ FD ]
Line_14 $$ DataInputBuffer gzbuf = new DataInputBuffer()-->Line_15 $$ gzbuf.reset(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_8 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_23 $$ dflbuf.reset()[ FD ]
Line_19 $$ Decompressor decom = codec.createDecompressor()-->Line_20 $$ assertNotNull(decom)[ FD ]
Line_18 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)-->Line_22 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_4 $$ Random r = new Random()-->Line_10 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)][ FD ]
Line_9 $$ GZIPOutputStream gzout = new GZIPOutputStream(dflbuf)-->Line_12 $$ gzout.write(b)[ FD ]
Line_16 $$ Configuration conf = new Configuration()-->Line_17 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, false)[ FD ]
Line_8 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_25 $$ final byte[] dflchk = Arrays.copyOf(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_8 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_15 $$ gzbuf.reset(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_4 $$ Random r = new Random()-->Line_6 $$ r.setSeed(seed)[ FD ]
Line_25 $$ final byte[] dflchk = Arrays.copyOf(dflbuf.getData(), dflbuf.getLength())-->Line_26 $$ assertArrayEquals(b, dflchk)[ FD ]
Line_10 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)]-->Line_12 $$ gzout.write(b)[ FD ]
