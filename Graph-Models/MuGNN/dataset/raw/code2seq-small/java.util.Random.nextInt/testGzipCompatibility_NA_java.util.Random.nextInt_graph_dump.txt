Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_13 $$ DataInputBuffer gzbuf = new DataInputBuffer()[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_17 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)[ CD ]
Line_21 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)-->Line_23 $$ IOUtils.copyBytes(gzin, dflbuf, 4096)[ FD ]
Line_18 $$ Decompressor decom = codec.createDecompressor()-->Line_21 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_8 $$ GZIPOutputStream gzout = new GZIPOutputStream(dflbuf)[ CD ]
Line_15 $$ Configuration conf = new Configuration()-->Line_17 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)[ FD ]
Line_24 $$ final byte[] dflchk = Arrays.copyOf(dflbuf.getData(), dflbuf.getLength())-->Line_25 $$ assertArrayEquals(b, dflchk)[ FD ]
Line_13 $$ DataInputBuffer gzbuf = new DataInputBuffer()-->Line_14 $$ gzbuf.reset(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_9 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)]-->Line_11 $$ gzout.write(b)[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_3 $$ Random r = new Random()[ CD ]
Line_3 $$ Random r = new Random()-->Line_4 $$ long seed = r.nextLong()[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_5 $$ r.setSeed(seed)[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_18 $$ Decompressor decom = codec.createDecompressor()[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_24 $$ final byte[] dflchk = Arrays.copyOf(dflbuf.getData(), dflbuf.getLength())[ CD ]
Line_17 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)-->Line_21 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_7 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()[ CD ]
Line_3 $$ Random r = new Random()-->Line_10 $$ r.nextBytes(b)[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_4 $$ long seed = r.nextLong()[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_6 $$ LOG.info("seed: " + seed)[ CD ]
Line_18 $$ Decompressor decom = codec.createDecompressor()-->Line_19 $$ assertNotNull(decom)[ FD ]
Line_15 $$ Configuration conf = new Configuration()-->Line_16 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, false)[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_20 $$ assertEquals(BuiltInGzipDecompressor.class, decom.getClass())[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_15 $$ Configuration conf = new Configuration()[ CD ]
Line_7 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_24 $$ final byte[] dflchk = Arrays.copyOf(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_4 $$ long seed = r.nextLong()-->Line_5 $$ r.setSeed(seed)[ FD ]
Line_8 $$ GZIPOutputStream gzout = new GZIPOutputStream(dflbuf)-->Line_11 $$ gzout.write(b)[ FD ]
Line_17 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)-->Line_18 $$ Decompressor decom = codec.createDecompressor()[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_23 $$ IOUtils.copyBytes(gzin, dflbuf, 4096)[ CD ]
Line_7 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_22 $$ dflbuf.reset()[ FD ]
Line_7 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_23 $$ IOUtils.copyBytes(gzin, dflbuf, 4096)[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_12 $$ gzout.close()[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_11 $$ gzout.write(b)[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_10 $$ r.nextBytes(b)[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_25 $$ assertArrayEquals(b, dflchk)[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_9 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)][ CD ]
Line_18 $$ Decompressor decom = codec.createDecompressor()-->Line_20 $$ assertEquals(BuiltInGzipDecompressor.class, decom.getClass())[ FD ]
Line_3 $$ Random r = new Random()-->Line_9 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)][ FD ]
Line_7 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_14 $$ gzbuf.reset(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_3 $$ Random r = new Random()-->Line_5 $$ r.setSeed(seed)[ FD ]
Line_13 $$ DataInputBuffer gzbuf = new DataInputBuffer()-->Line_21 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_14 $$ gzbuf.reset(dflbuf.getData(), dflbuf.getLength())[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_22 $$ dflbuf.reset()[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_16 $$ conf.setBoolean(CommonConfigurationKeys.IO_NATIVE_LIB_AVAILABLE_KEY, false)[ CD ]
Line_9 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)]-->Line_25 $$ assertArrayEquals(b, dflchk)[ FD ]
Line_9 $$ byte[] b = new byte[r.nextInt(128 * 1024 + 1)]-->Line_10 $$ r.nextBytes(b)[ FD ]
Line_8 $$ GZIPOutputStream gzout = new GZIPOutputStream(dflbuf)-->Line_12 $$ gzout.close()[ FD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_19 $$ assertNotNull(decom)[ CD ]
Line_2 $$ public void testGzipCompatibility() throws IOException -->Line_21 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ CD ]
