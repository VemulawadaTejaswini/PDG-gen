Line_24 $$ for (int i = 0; i < docCount; i++) -->Line_25 $$ assertThat(createdCounts.get(i), lessThanOrEqualTo(1))[ CD ]
Line_12 $$ for (int i = 0; i < taskCount; i++) -->Line_25 $$ assertThat(createdCounts.get(i), lessThanOrEqualTo(1))[ FD ]
Line_6 $$ final int docCount = 300-->Line_15 $$ int docId = random.nextInt(docCount)[ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_10 $$ List<Callable<Void>> tasks = new ArrayList(taskCount)[ CD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_8 $$ final AtomicIntegerArray createdCounts = new AtomicIntegerArray(docCount)[ CD ]
Line_16 $$ IndexResponse indexResponse = index("test", "type", Integer.toString(docId), "field1", "value")-->Line_17 $$ if (indexResponse.isCreated())[ FD ]
Line_24 $$ for (int i = 0; i < docCount; i++) -->Line_25 $$ assertThat(createdCounts.get(i), lessThanOrEqualTo(1))[ FD ]
Line_5 $$ int threadCount = 20-->Line_9 $$ ExecutorService threadPool = Executors.newFixedThreadPool(threadCount)[ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_7 $$ int taskCount = docCount * threadCount[ CD ]
Line_7 $$ int taskCount = docCount * threadCount-->Line_12 $$ for (int i = 0; i < taskCount; i++) [ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_6 $$ final int docCount = 300[ CD ]
Line_12 $$ for (int i = 0; i < taskCount; i++) -->Line_13 $$ tasks.add(new Callable<Void>() [ CD ]
Line_10 $$ List<Callable<Void>> tasks = new ArrayList(taskCount)-->Line_13 $$ tasks.add(new Callable<Void>() [ FD ]
Line_11 $$ final Random random = getRandom()-->Line_15 $$ int docId = random.nextInt(docCount)[ FD ]
Line_9 $$ ExecutorService threadPool = Executors.newFixedThreadPool(threadCount)-->Line_27 $$ terminate(threadPool)[ FD ]
Line_9 $$ ExecutorService threadPool = Executors.newFixedThreadPool(threadCount)-->Line_23 $$ threadPool.invokeAll(tasks)[ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_4 $$ ensureGreen()[ CD ]
Line_8 $$ final AtomicIntegerArray createdCounts = new AtomicIntegerArray(docCount)-->Line_18 $$ createdCounts.incrementAndGet(docId)[ FD ]
Line_6 $$ final int docCount = 300-->Line_24 $$ for (int i = 0; i < docCount; i++) [ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_23 $$ threadPool.invokeAll(tasks)[ CD ]
Line_17 $$ if (indexResponse.isCreated())-->Line_18 $$ createdCounts.incrementAndGet(docId)[ CD ]
Line_13 $$ tasks.add(new Callable<Void>() -->Line_19 $$ return null[ CD ]
Line_13 $$ tasks.add(new Callable<Void>() -->Line_15 $$ int docId = random.nextInt(docCount)[ CD ]
Line_13 $$ tasks.add(new Callable<Void>() -->Line_16 $$ IndexResponse indexResponse = index("test", "type", Integer.toString(docId), "field1", "value")[ CD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_9 $$ ExecutorService threadPool = Executors.newFixedThreadPool(threadCount)[ CD ]
Line_8 $$ final AtomicIntegerArray createdCounts = new AtomicIntegerArray(docCount)-->Line_25 $$ assertThat(createdCounts.get(i), lessThanOrEqualTo(1))[ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_12 $$ for (int i = 0; i < taskCount; i++) [ CD ]
Line_10 $$ List<Callable<Void>> tasks = new ArrayList(taskCount)-->Line_23 $$ threadPool.invokeAll(tasks)[ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_24 $$ for (int i = 0; i < docCount; i++) [ CD ]
Line_13 $$ tasks.add(new Callable<Void>() -->Line_17 $$ if (indexResponse.isCreated())[ CD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_5 $$ int threadCount = 20[ CD ]
Line_15 $$ int docId = random.nextInt(docCount)-->Line_16 $$ IndexResponse indexResponse = index("test", "type", Integer.toString(docId), "field1", "value")[ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_3 $$ createIndex("test")[ CD ]
Line_15 $$ int docId = random.nextInt(docCount)-->Line_18 $$ createdCounts.incrementAndGet(docId)[ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_11 $$ final Random random = getRandom()[ CD ]
Line_12 $$ for (int i = 0; i < taskCount; i++) -->Line_24 $$ for (int i = 0; i < docCount; i++) [ FD ]
Line_2 $$ public void testCreatedFlagParallelExecution() throws Exception -->Line_27 $$ terminate(threadPool)[ CD ]
