Line_50 $$ marker = new RangeTombstoneBoundMarker(marker.closeBound(false), current)-->Line_56 $$ toAdd = marker[ FD ]
Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) -->Line_12 $$ RangeTombstoneMarker open = RangeTombstoneBoundMarker.inclusiveOpen(false, clustering(start).getRawValues(), dt)[ CD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_21 $$ DeletionTime current = DeletionTime.LIVE[ CD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ FD ]
Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) -->Line_6 $$ int delTime[ CD ]
Line_23 $$ if (marker.isOpen(false)) -->Line_42 $$ boolean removed = open.remove(delTime)[ CD ]
Line_44 $$ if (current.equals(delTime)) -->Line_54 $$ if (best != DeletionTime.LIVE)[ CD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE[ FD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_37 $$ current = delTime[ FD ]
Line_34 $$ if (current != DeletionTime.LIVE)-->Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)[ CD ]
Line_53 $$ DeletionTime best = open.stream().max(DeletionTime::<>compareTo).orElse(DeletionTime.LIVE)-->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ FD ]
Line_23 $$ if (marker.isOpen(false)) -->Line_24 $$ DeletionTime delTime = marker.openDeletionTime(false)[ CD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_49 $$ current = toAdd.closeDeletionTime(false)[ FD ]
Line_44 $$ if (current.equals(delTime)) -->Line_45 $$ if (toAdd != null) [ CD ]
Line_6 $$ int delTime-->Line_25 $$ open.add(delTime)[ FD ]
Line_23 $$ if (marker.isOpen(false)) -->Line_41 $$ DeletionTime delTime = marker.closeDeletionTime(false)[ CD ]
Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)-->Line_50 $$ marker = new RangeTombstoneBoundMarker(marker.closeBound(false), current)[ FD ]
Line_50 $$ marker = new RangeTombstoneBoundMarker(marker.closeBound(false), current)-->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ FD ]
Line_23 $$ if (marker.isOpen(false)) -->Line_44 $$ if (current.equals(delTime)) [ CD ]
Line_8 $$ delTime = rand.nextInt(KEY_RANGE)-->Line_44 $$ if (current.equals(delTime)) [ FD ]
Line_36 $$ toAdd = marker-->Line_47 $$ content.add(toAdd)[ FD ]
Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) -->Line_10 $$ int start = rand.nextInt(KEY_RANGE)[ CD ]
Line_8 $$ delTime = rand.nextInt(KEY_RANGE)-->Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)[ FD ]
Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE-->Line_57 $$ current = best[ FD ]
Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE-->Line_37 $$ current = delTime[ FD ]
Line_37 $$ current = delTime-->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ FD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_44 $$ if (current.equals(delTime)) [ FD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_26 $$ if (delTime.supersedes(current)) [ FD ]
Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)-->Line_41 $$ DeletionTime delTime = marker.closeDeletionTime(false)[ FD ]
Line_8 $$ delTime = rand.nextInt(KEY_RANGE)-->Line_25 $$ open.add(delTime)[ FD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_50 $$ marker = new RangeTombstoneBoundMarker(marker.closeBound(false), current)[ FD ]
Line_44 $$ if (current.equals(delTime)) -->Line_56 $$ toAdd = marker[ CD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_20 $$ Set<DeletionTime> open = new HashSet()[ CD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)[ FD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_36 $$ toAdd = marker[ FD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_45 $$ if (toAdd != null) [ FD ]
Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)-->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ FD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_36 $$ toAdd = marker[ FD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_4 $$ Set<Integer> delTimes = new HashSet()[ CD ]
Line_7 $$ do -->Line_8 $$ delTime = rand.nextInt(KEY_RANGE)[ CD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ FD ]
Line_8 $$ delTime = rand.nextInt(KEY_RANGE)-->Line_7 $$ do [ FD ]
Line_36 $$ toAdd = marker-->Line_61 $$ content.add(toAdd)[ FD ]
Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)-->Line_56 $$ toAdd = marker[ FD ]
Line_24 $$ DeletionTime delTime = marker.openDeletionTime(false)-->Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)[ FD ]
Line_24 $$ DeletionTime delTime = marker.openDeletionTime(false)-->Line_25 $$ open.add(delTime)[ FD ]
Line_44 $$ if (current.equals(delTime)) -->Line_57 $$ current = best[ CD ]
Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE-->Line_49 $$ current = toAdd.closeDeletionTime(false)[ FD ]
Line_46 $$ if (cfm.comparator.compare(toAdd, marker) != 0)-->Line_50 $$ marker = new RangeTombstoneBoundMarker(marker.closeBound(false), current)[ CD ]
Line_20 $$ Set<DeletionTime> open = new HashSet()-->Line_53 $$ DeletionTime best = open.stream().max(DeletionTime::<>compareTo).orElse(DeletionTime.LIVE)[ FD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_18 $$ markers.sort(cfm.comparator)[ CD ]
Line_20 $$ Set<DeletionTime> open = new HashSet()-->Line_63 $$ assert open.isEmpty()[ FD ]
Line_23 $$ if (marker.isOpen(false)) -->Line_26 $$ if (delTime.supersedes(current)) [ CD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_24 $$ DeletionTime delTime = marker.openDeletionTime(false)[ FD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_41 $$ DeletionTime delTime = marker.closeDeletionTime(false)[ FD ]
Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) -->Line_13 $$ int end = start + rand.nextInt((KEY_RANGE - start) / 4 + 1)[ CD ]
Line_36 $$ toAdd = marker-->Line_49 $$ current = toAdd.closeDeletionTime(false)[ FD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_19 $$ RangeTombstoneMarker toAdd = null[ CD ]
Line_37 $$ current = delTime-->Line_49 $$ current = toAdd.closeDeletionTime(false)[ FD ]
Line_8 $$ delTime = rand.nextInt(KEY_RANGE)-->Line_42 $$ boolean removed = open.remove(delTime)[ FD ]
Line_44 $$ if (current.equals(delTime)) -->Line_53 $$ DeletionTime best = open.stream().max(DeletionTime::<>compareTo).orElse(DeletionTime.LIVE)[ CD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_47 $$ content.add(toAdd)[ FD ]
Line_23 $$ if (marker.isOpen(false)) -->Line_25 $$ open.add(delTime)[ CD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_61 $$ content.add(toAdd)[ FD ]
Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) -->Line_7 $$ do [ CD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_61 $$ content.add(toAdd)[ FD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_28 $$ if (cfm.comparator.compare(toAdd, marker) != 0)[ FD ]
Line_24 $$ DeletionTime delTime = marker.openDeletionTime(false)-->Line_37 $$ current = delTime[ FD ]
Line_36 $$ toAdd = marker-->Line_45 $$ if (toAdd != null) [ FD ]
Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE-->Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)[ FD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_3 $$ List<RangeTombstoneMarker> markers = new ArrayList()[ CD ]
Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE-->Line_44 $$ if (current.equals(delTime)) [ FD ]
Line_4 $$ Set<Integer> delTimes = new HashSet()-->Line_7 $$ do [ FD ]
Line_6 $$ int delTime-->Line_42 $$ boolean removed = open.remove(delTime)[ FD ]
Line_24 $$ DeletionTime delTime = marker.openDeletionTime(false)-->Line_26 $$ if (delTime.supersedes(current)) [ FD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_64 $$ return content[ CD ]
Line_8 $$ delTime = rand.nextInt(KEY_RANGE)-->Line_37 $$ current = delTime[ FD ]
Line_45 $$ if (toAdd != null) -->Line_46 $$ if (cfm.comparator.compare(toAdd, marker) != 0)[ CD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_46 $$ if (cfm.comparator.compare(toAdd, marker) != 0)[ FD ]
Line_28 $$ if (cfm.comparator.compare(toAdd, marker) != 0)-->Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE[ CD ]
Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)-->Line_36 $$ toAdd = marker[ FD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_29 $$ content.add(toAdd)[ FD ]
Line_26 $$ if (delTime.supersedes(current)) -->Line_37 $$ current = delTime[ CD ]
Line_36 $$ toAdd = marker-->Line_56 $$ toAdd = marker[ FD ]
Line_53 $$ DeletionTime best = open.stream().max(DeletionTime::<>compareTo).orElse(DeletionTime.LIVE)-->Line_57 $$ current = best[ FD ]
Line_36 $$ toAdd = marker-->Line_46 $$ if (cfm.comparator.compare(toAdd, marker) != 0)[ FD ]
Line_20 $$ Set<DeletionTime> open = new HashSet()-->Line_42 $$ boolean removed = open.remove(delTime)[ FD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_28 $$ if (cfm.comparator.compare(toAdd, marker) != 0)[ FD ]
Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)-->Line_46 $$ if (cfm.comparator.compare(toAdd, marker) != 0)[ FD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_56 $$ toAdd = marker[ FD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_47 $$ content.add(toAdd)[ FD ]
Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) -->Line_14 $$ RangeTombstoneMarker close = RangeTombstoneBoundMarker.inclusiveClose(false, clustering(end).getRawValues(), dt)[ CD ]
Line_28 $$ if (cfm.comparator.compare(toAdd, marker) != 0)-->Line_29 $$ content.add(toAdd)[ CD ]
Line_20 $$ Set<DeletionTime> open = new HashSet()-->Line_25 $$ open.add(delTime)[ FD ]
Line_24 $$ DeletionTime delTime = marker.openDeletionTime(false)-->Line_42 $$ boolean removed = open.remove(delTime)[ FD ]
Line_46 $$ if (cfm.comparator.compare(toAdd, marker) != 0)-->Line_49 $$ current = toAdd.closeDeletionTime(false)[ CD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_23 $$ if (marker.isOpen(false)) [ FD ]
Line_37 $$ current = delTime-->Line_57 $$ current = best[ FD ]
Line_8 $$ delTime = rand.nextInt(KEY_RANGE)-->Line_26 $$ if (delTime.supersedes(current)) [ FD ]
Line_3 $$ List<RangeTombstoneMarker> markers = new ArrayList()-->Line_16 $$ markers.add(close)[ FD ]
Line_26 $$ if (delTime.supersedes(current)) -->Line_36 $$ toAdd = marker[ CD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) [ CD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE[ FD ]
Line_26 $$ if (delTime.supersedes(current)) -->Line_34 $$ if (current != DeletionTime.LIVE)[ CD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_29 $$ content.add(toAdd)[ FD ]
Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) -->Line_16 $$ markers.add(close)[ CD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_49 $$ current = toAdd.closeDeletionTime(false)[ FD ]
Line_6 $$ int delTime-->Line_44 $$ if (current.equals(delTime)) [ FD ]
Line_6 $$ int delTime-->Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)[ FD ]
Line_3 $$ List<RangeTombstoneMarker> markers = new ArrayList()-->Line_15 $$ markers.add(open)[ FD ]
Line_24 $$ DeletionTime delTime = marker.openDeletionTime(false)-->Line_44 $$ if (current.equals(delTime)) [ FD ]
Line_46 $$ if (cfm.comparator.compare(toAdd, marker) != 0)-->Line_47 $$ content.add(toAdd)[ CD ]
Line_3 $$ List<RangeTombstoneMarker> markers = new ArrayList()-->Line_18 $$ markers.sort(cfm.comparator)[ FD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_46 $$ if (cfm.comparator.compare(toAdd, marker) != 0)[ FD ]
Line_26 $$ if (delTime.supersedes(current)) -->Line_27 $$ if (toAdd != null) [ CD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_40 $$ assert marker.isClose(false)[ FD ]
Line_49 $$ current = toAdd.closeDeletionTime(false)-->Line_57 $$ current = best[ FD ]
Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)-->Line_40 $$ assert marker.isClose(false)[ FD ]
Line_6 $$ int delTime-->Line_26 $$ if (delTime.supersedes(current)) [ FD ]
Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)-->Line_56 $$ toAdd = marker[ FD ]
Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE-->Line_34 $$ if (current != DeletionTime.LIVE)[ FD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_56 $$ toAdd = marker[ FD ]
Line_37 $$ current = delTime-->Line_44 $$ if (current.equals(delTime)) [ FD ]
Line_5 $$ for (int i = 0; i < ENTRIES / 10; ++i) -->Line_15 $$ markers.add(open)[ CD ]
Line_6 $$ int delTime-->Line_37 $$ current = delTime[ FD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_57 $$ current = best[ FD ]
Line_19 $$ RangeTombstoneMarker toAdd = null-->Line_27 $$ if (toAdd != null) [ FD ]
Line_27 $$ if (toAdd != null) -->Line_28 $$ if (cfm.comparator.compare(toAdd, marker) != 0)[ CD ]
Line_56 $$ toAdd = marker-->Line_61 $$ content.add(toAdd)[ FD ]
Line_54 $$ if (best != DeletionTime.LIVE)-->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ CD ]
Line_6 $$ int delTime-->Line_7 $$ do [ FD ]
Line_22 $$ for (RangeTombstoneMarker marker : markers) -->Line_35 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.openBound(false).invert(), marker.openBound(false), current, delTime)[ FD ]
Line_49 $$ current = toAdd.closeDeletionTime(false)-->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ FD ]
Line_2 $$ List<Unfiltered> addMarkers(List<Unfiltered> content) -->Line_61 $$ content.add(toAdd)[ CD ]
Line_6 $$ int delTime-->Line_8 $$ delTime = rand.nextInt(KEY_RANGE)[ FD ]
Line_31 $$ current = toAdd.isClose(false) ? toAdd.closeDeletionTime(false) : DeletionTime.LIVE-->Line_55 $$ marker = RangeTombstoneBoundaryMarker.makeBoundary(false, marker.closeBound(false), marker.closeBound(false).invert(), current, best)[ FD ]
Line_21 $$ DeletionTime current = DeletionTime.LIVE-->Line_34 $$ if (current != DeletionTime.LIVE)[ FD ]
Line_53 $$ DeletionTime best = open.stream().max(DeletionTime::<>compareTo).orElse(DeletionTime.LIVE)-->Line_54 $$ if (best != DeletionTime.LIVE)[ FD ]
