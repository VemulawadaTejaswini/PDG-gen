Line_2 $$ private void assertRetriesOnSocketTimeouts(Configuration conf, int maxTimeoutRetries) throws IOException -->Line_5 $$ Client client = new Client(IntWritable.class, conf, mockFactory)[ CD ]
Line_2 $$ private void assertRetriesOnSocketTimeouts(Configuration conf, int maxTimeoutRetries) throws IOException -->Line_8 $$ client.call(new IntWritable(RANDOM.nextInt()), address, null, null, 0, conf)[ FD ]
Line_5 $$ Client client = new Client(IntWritable.class, conf, mockFactory)-->Line_8 $$ client.call(new IntWritable(RANDOM.nextInt()), address, null, null, 0, conf)[ FD ]
Line_6 $$ InetSocketAddress address = new InetSocketAddress("127.0.0.1", 9090)-->Line_8 $$ client.call(new IntWritable(RANDOM.nextInt()), address, null, null, 0, conf)[ FD ]
Line_3 $$ SocketFactory mockFactory = Mockito.mock(SocketFactory.class)-->Line_11 $$ Mockito.verify(mockFactory, Mockito.times(maxTimeoutRetries)).createSocket()[ FD ]
Line_2 $$ private void assertRetriesOnSocketTimeouts(Configuration conf, int maxTimeoutRetries) throws IOException -->Line_11 $$ Mockito.verify(mockFactory, Mockito.times(maxTimeoutRetries)).createSocket()[ FD ]
Line_2 $$ private void assertRetriesOnSocketTimeouts(Configuration conf, int maxTimeoutRetries) throws IOException -->Line_4 $$ doThrow(new ConnectTimeoutException("fake")).when(mockFactory).createSocket()[ CD ]
Line_2 $$ private void assertRetriesOnSocketTimeouts(Configuration conf, int maxTimeoutRetries) throws IOException -->Line_3 $$ SocketFactory mockFactory = Mockito.mock(SocketFactory.class)[ CD ]
Line_3 $$ SocketFactory mockFactory = Mockito.mock(SocketFactory.class)-->Line_4 $$ doThrow(new ConnectTimeoutException("fake")).when(mockFactory).createSocket()[ FD ]
Line_2 $$ private void assertRetriesOnSocketTimeouts(Configuration conf, int maxTimeoutRetries) throws IOException -->Line_6 $$ InetSocketAddress address = new InetSocketAddress("127.0.0.1", 9090)[ CD ]
