Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_3 $$ HttpClientBuilder httpClientBuilder = HttpClients.custom()[ CD ]
Line_8 $$ final URL url = new URL(_url, "/api/jsonws/test.testweb/sum/a/" + a + "/b/" + b)-->Line_9 $$ credentialsProvider.setCredentials(new AuthScope(url.getHost(), url.getPort()), new UsernamePasswordCredentials("test@liferay.com", "test"))[ FD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_11 $$ CloseableHttpClient closeableHttpClient = httpClientBuilder.build()[ CD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_7 $$ int b = random.nextInt(50)[ CD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_5 $$ Random random = new Random()[ CD ]
Line_14 $$ HttpEntity httpEntity = closeableHttpResponse.getEntity()-->Line_15 $$ InputStream inputStream = httpEntity.getContent()[ FD ]
Line_3 $$ HttpClientBuilder httpClientBuilder = HttpClients.custom()-->Line_11 $$ CloseableHttpClient closeableHttpClient = httpClientBuilder.build()[ FD ]
Line_15 $$ InputStream inputStream = httpEntity.getContent()-->Line_16 $$ String string = StringUtil.read(inputStream)[ FD ]
Line_5 $$ Random random = new Random()-->Line_7 $$ int b = random.nextInt(50)[ FD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_15 $$ InputStream inputStream = httpEntity.getContent()[ CD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_12 $$ HttpGet httpGet = new HttpGet(url.toURI())[ CD ]
Line_8 $$ final URL url = new URL(_url, "/api/jsonws/test.testweb/sum/a/" + a + "/b/" + b)-->Line_12 $$ HttpGet httpGet = new HttpGet(url.toURI())[ FD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_16 $$ String string = StringUtil.read(inputStream)[ CD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_4 $$ CredentialsProvider credentialsProvider = new BasicCredentialsProvider()[ CD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_10 $$ httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)[ CD ]
Line_4 $$ CredentialsProvider credentialsProvider = new BasicCredentialsProvider()-->Line_10 $$ httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)[ FD ]
Line_4 $$ CredentialsProvider credentialsProvider = new BasicCredentialsProvider()-->Line_9 $$ credentialsProvider.setCredentials(new AuthScope(url.getHost(), url.getPort()), new UsernamePasswordCredentials("test@liferay.com", "test"))[ FD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_6 $$ int a = random.nextInt(50)[ CD ]
Line_3 $$ HttpClientBuilder httpClientBuilder = HttpClients.custom()-->Line_10 $$ httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider)[ FD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_8 $$ final URL url = new URL(_url, "/api/jsonws/test.testweb/sum/a/" + a + "/b/" + b)[ CD ]
Line_13 $$ CloseableHttpResponse closeableHttpResponse = closeableHttpClient.execute(httpGet)-->Line_14 $$ HttpEntity httpEntity = closeableHttpResponse.getEntity()[ FD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_14 $$ HttpEntity httpEntity = closeableHttpResponse.getEntity()[ CD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_17 $$ Assert.assertEquals(a + b, Integer.parseInt(string))[ CD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_9 $$ credentialsProvider.setCredentials(new AuthScope(url.getHost(), url.getPort()), new UsernamePasswordCredentials("test@liferay.com", "test"))[ CD ]
Line_11 $$ CloseableHttpClient closeableHttpClient = httpClientBuilder.build()-->Line_13 $$ CloseableHttpResponse closeableHttpResponse = closeableHttpClient.execute(httpGet)[ FD ]
Line_12 $$ HttpGet httpGet = new HttpGet(url.toURI())-->Line_13 $$ CloseableHttpResponse closeableHttpResponse = closeableHttpClient.execute(httpGet)[ FD ]
Line_5 $$ Random random = new Random()-->Line_6 $$ int a = random.nextInt(50)[ FD ]
Line_2 $$ public void testWebServiceInvocation() throws IOException, URISyntaxException -->Line_13 $$ CloseableHttpResponse closeableHttpResponse = closeableHttpClient.execute(httpGet)[ CD ]
Line_16 $$ String string = StringUtil.read(inputStream)-->Line_17 $$ Assert.assertEquals(a + b, Integer.parseInt(string))[ FD ]
