Line_6 $$ final FilePool pool = new FilePool(conf, base)-->Line_18 $$ pool.refresh()[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_20 $$ assertEquals((NFILES / 2 * (NFILES / 2 + 1)) * 1024, pool.getInputFiles(Long.MAX_VALUE, files))[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_15 $$ final long rand = r.nextInt(expectedPoolSize)[ CD ]
Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_13 $$ assertEquals(expectedPoolSize, pool.getInputFiles(expectedPoolSize, files))[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_18 $$ pool.refresh()[ CD ]
Line_6 $$ final FilePool pool = new FilePool(conf, base)-->Line_13 $$ assertEquals(expectedPoolSize, pool.getInputFiles(expectedPoolSize, files))[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_17 $$ conf.setLong(FilePool.GRIDMIX_MIN_FILE, 0)[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_3 $$ final Random r = new Random()[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_4 $$ final Configuration conf = new Configuration()[ CD ]
Line_4 $$ final Configuration conf = new Configuration()-->Line_17 $$ conf.setLong(FilePool.GRIDMIX_MIN_FILE, 0)[ FD ]
Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_20 $$ assertEquals((NFILES / 2 * (NFILES / 2 + 1)) * 1024, pool.getInputFiles(Long.MAX_VALUE, files))[ FD ]
Line_6 $$ final FilePool pool = new FilePool(conf, base)-->Line_10 $$ assertEquals(expectedPoolSize, pool.getInputFiles(Long.MAX_VALUE, files))[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_7 $$ pool.refresh()[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()[ CD ]
Line_6 $$ final FilePool pool = new FilePool(conf, base)-->Line_20 $$ assertEquals((NFILES / 2 * (NFILES / 2 + 1)) * 1024, pool.getInputFiles(Long.MAX_VALUE, files))[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_5 $$ conf.setLong(FilePool.GRIDMIX_MIN_FILE, 3 * 1024)[ CD ]
Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_12 $$ files.clear()[ FD ]
Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_16 $$ assertTrue("Missed: " + rand, (NFILES / 2) * 1024 > rand - pool.getInputFiles(rand, files))[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_10 $$ assertEquals(expectedPoolSize, pool.getInputFiles(Long.MAX_VALUE, files))[ CD ]
Line_6 $$ final FilePool pool = new FilePool(conf, base)-->Line_7 $$ pool.refresh()[ FD ]
Line_6 $$ final FilePool pool = new FilePool(conf, base)-->Line_16 $$ assertTrue("Missed: " + rand, (NFILES / 2) * 1024 > rand - pool.getInputFiles(rand, files))[ FD ]
Line_4 $$ final Configuration conf = new Configuration()-->Line_5 $$ conf.setLong(FilePool.GRIDMIX_MIN_FILE, 3 * 1024)[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_12 $$ files.clear()[ CD ]
Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_14 $$ files.clear()[ FD ]
Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_19 $$ files.clear()[ FD ]
Line_15 $$ final long rand = r.nextInt(expectedPoolSize)-->Line_16 $$ assertTrue("Missed: " + rand, (NFILES / 2) * 1024 > rand - pool.getInputFiles(rand, files))[ FD ]
Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_10 $$ assertEquals(expectedPoolSize, pool.getInputFiles(Long.MAX_VALUE, files))[ FD ]
Line_9 $$ final int expectedPoolSize = (NFILES / 2 * (NFILES / 2 + 1) - 6) * 1024-->Line_10 $$ assertEquals(expectedPoolSize, pool.getInputFiles(Long.MAX_VALUE, files))[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_11 $$ assertEquals(NFILES - 4, files.size())[ CD ]
Line_9 $$ final int expectedPoolSize = (NFILES / 2 * (NFILES / 2 + 1) - 6) * 1024-->Line_15 $$ final long rand = r.nextInt(expectedPoolSize)[ FD ]
Line_8 $$ final ArrayList<FileStatus> files = new ArrayList<FileStatus>()-->Line_11 $$ assertEquals(NFILES - 4, files.size())[ FD ]
Line_9 $$ final int expectedPoolSize = (NFILES / 2 * (NFILES / 2 + 1) - 6) * 1024-->Line_13 $$ assertEquals(expectedPoolSize, pool.getInputFiles(expectedPoolSize, files))[ FD ]
Line_3 $$ final Random r = new Random()-->Line_15 $$ final long rand = r.nextInt(expectedPoolSize)[ FD ]
Line_2 $$ public void testPool() throws Exception -->Line_19 $$ files.clear()[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_16 $$ assertTrue("Missed: " + rand, (NFILES / 2) * 1024 > rand - pool.getInputFiles(rand, files))[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_6 $$ final FilePool pool = new FilePool(conf, base)[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_14 $$ files.clear()[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_13 $$ assertEquals(expectedPoolSize, pool.getInputFiles(expectedPoolSize, files))[ CD ]
Line_2 $$ public void testPool() throws Exception -->Line_9 $$ final int expectedPoolSize = (NFILES / 2 * (NFILES / 2 + 1) - 6) * 1024[ CD ]
