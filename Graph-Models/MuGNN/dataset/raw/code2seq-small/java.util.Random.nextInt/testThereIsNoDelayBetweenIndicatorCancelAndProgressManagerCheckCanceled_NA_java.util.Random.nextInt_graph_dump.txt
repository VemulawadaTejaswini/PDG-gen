Line_4 $$ final ProgressIndicatorBase indicator = new ProgressIndicatorBase()-->Line_5 $$ ProgressManager.getInstance().executeProcessUnderProgress(() -> [ FD ]
Line_4 $$ final ProgressIndicatorBase indicator = new ProgressIndicatorBase()-->Line_8 $$ indicator.cancel()[ FD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_16 $$ threads.forEach(Thread::<>start)[ CD ]
Line_2 $$ public void testThereIsNoDelayBetweenIndicatorCancelAndProgressManagerCheckCanceled() throws Throwable -->Line_3 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_4 $$ final ProgressIndicatorBase indicator = new ProgressIndicatorBase()[ CD ]
Line_2 $$ public void testThereIsNoDelayBetweenIndicatorCancelAndProgressManagerCheckCanceled() throws Throwable -->Line_21 $$ if (exception != null)[ CD ]
Line_17 $$ for (Thread thread : threads) -->Line_18 $$ thread.join()[ FD ]
Line_3 $$ for (int i = 0; i < 100; i++) -->Line_5 $$ List<Thread> threads = ContainerUtil.map(Collections.nCopies(10, ""),  s -> new Thread(() -> ProgressManager.getInstance().executeProcessUnderProgress(() -> [ CD ]
Line_5 $$ List<Thread> threads = ContainerUtil.map(Collections.nCopies(10, ""),  s -> new Thread(() -> ProgressManager.getInstance().executeProcessUnderProgress(() -> -->Line_16 $$ threads.forEach(Thread::<>start)[ FD ]
