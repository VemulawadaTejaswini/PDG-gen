Line_13 $$ for (InetAddress node : nodes) -->Line_17 $$ nodeToRack.put(node, rack)[ FD ]
Line_4 $$ final Map<InetAddress, String> nodeToDC = new HashMap()-->Line_25 $$ return nodeToDC.get(endpoint)[ FD ]
Line_20 $$ return new AbstractNetworkTopologySnitch() -->Line_22 $$ return nodeToRack.get(endpoint)[ CD ]
Line_4 $$ final Map<InetAddress, String> nodeToDC = new HashMap()-->Line_18 $$ nodeToDC.put(node, dc)[ FD ]
Line_20 $$ return new AbstractNetworkTopologySnitch() -->Line_22 $$ return nodeToRack.get(endpoint)[ FD ]
Line_20 $$ return new AbstractNetworkTopologySnitch() -->Line_25 $$ return nodeToDC.get(endpoint)[ CD ]
Line_14 $$ String dc = dcs[rand.nextInt(rf)]-->Line_18 $$ nodeToDC.put(node, dc)[ FD ]
Line_10 $$ for (Map.Entry<String, Integer> dce : datacenters.entrySet()) -->Line_11 $$ for (int i = 0; i < dce.getValue(); ++i) dcs[pos++] = dce.getKey()[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_14 $$ String dc = dcs[rand.nextInt(rf)][ FD ]
Line_3 $$ final Map<InetAddress, String> nodeToRack = new HashMap()-->Line_22 $$ return nodeToRack.get(endpoint)[ FD ]
Line_10 $$ for (Map.Entry<String, Integer> dce : datacenters.entrySet()) -->Line_11 $$ dcs[pos++] = dce.getKey()[ FD ]
Line_16 $$ String rack = racks.get(rand.nextInt(racks.size()))-->Line_17 $$ nodeToRack.put(node, rack)[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_16 $$ String rack = racks.get(rand.nextInt(racks.size()))[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_6 $$ racksPerDC.put(dc, randomRacks(rf, rand))[ FD ]
Line_5 $$ Map<String, List<String>> racksPerDC = new HashMap()-->Line_15 $$ List<String> racks = racksPerDC.get(dc)[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_10 $$ for (Map.Entry<String, Integer> dce : datacenters.entrySet()) [ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_20 $$ return new AbstractNetworkTopologySnitch() [ CD ]
Line_13 $$ for (InetAddress node : nodes) -->Line_18 $$ nodeToDC.put(node, dc)[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_6 $$ datacenters.forEach(( dc,  rf) -> racksPerDC.put(dc, randomRacks(rf, rand)))[ CD ]
Line_15 $$ List<String> racks = racksPerDC.get(dc)-->Line_16 $$ String rack = racks.get(rand.nextInt(racks.size()))[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_7 $$ int rf = datacenters.values().stream().mapToInt( x -> x).sum()[ CD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_4 $$ final Map<InetAddress, String> nodeToDC = new HashMap()[ CD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_8 $$ String[] dcs = new String[rf][ CD ]
Line_9 $$ int pos = 0-->Line_11 $$ dcs[pos++] = dce.getKey()[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_3 $$ final Map<InetAddress, String> nodeToRack = new HashMap()[ CD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_9 $$ int pos = 0[ CD ]
Line_14 $$ String dc = dcs[rand.nextInt(rf)]-->Line_15 $$ List<String> racks = racksPerDC.get(dc)[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_7 $$ int rf = datacenters.values().stream().mapToInt( x -> x).sum()[ FD ]
Line_7 $$ int rf = datacenters.values().stream().mapToInt( x -> x).sum()-->Line_14 $$ String dc = dcs[rand.nextInt(rf)][ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_5 $$ Map<String, List<String>> racksPerDC = new HashMap()[ CD ]
Line_20 $$ return new AbstractNetworkTopologySnitch() -->Line_25 $$ return nodeToDC.get(endpoint)[ FD ]
Line_3 $$ final Map<InetAddress, String> nodeToRack = new HashMap()-->Line_17 $$ nodeToRack.put(node, rack)[ FD ]
Line_2 $$ IEndpointSnitch generateSnitch(Map<String, Integer> datacenters, Collection<InetAddress> nodes, Random rand) -->Line_6 $$ datacenters.forEach(( dc,  rf) -> racksPerDC.put(dc, randomRacks(rf, rand)))[ FD ]
Line_5 $$ Map<String, List<String>> racksPerDC = new HashMap()-->Line_6 $$ racksPerDC.put(dc, randomRacks(rf, rand))[ FD ]
