Line_20 $$ String[] argv = new String[2]-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_65 $$ argv = new String[2]-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_45 $$ out = new ByteArrayOutputStream()-->Line_70 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_12 $$ for (int i = 0; i < 1024; ++i) -->Line_13 $$ char c = Character.forDigit(r.nextInt(26) + 10, 36)[ CD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_53 $$ out.reset()[ FD ]
Line_33 $$ argv = new String[2]-->Line_65 $$ argv = new String[2][ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_39 $$ out.reset()[ FD ]
Line_74 $$ writebytes = "bar".getBytes()-->Line_75 $$ pout.write(writebytes)[ FD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_69 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_3 $$ PrintStream bak = null-->Line_88 $$ System.setOut(bak)[ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_71 $$ out.reset()[ FD ]
Line_5 $$ final FileSystem fs = root.getFileSystem(conf)-->Line_6 $$ fs.mkdirs(root)[ FD ]
Line_33 $$ argv = new String[2]-->Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_2 $$ private void textTest(Path root, Configuration conf) throws Exception -->Line_3 $$ PrintStream bak = null[ CD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_70 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_9 $$ Random r = new Random()-->Line_13 $$ char c = Character.forDigit(r.nextInt(26) + 10, 36)[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_38 $$ assertTrue("Output doesn't match input", Arrays.equals("Foo\tBar\n".getBytes(), out.toByteArray()))[ FD ]
Line_3 $$ PrintStream bak = null-->Line_10 $$ bak = System.out[ FD ]
Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_37 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_65 $$ argv = new String[2]-->Line_79 $$ argv = new String[2][ FD ]
Line_47 $$ argv = new String[2]-->Line_65 $$ argv = new String[2][ FD ]
Line_63 $$ out = new ByteArrayOutputStream()-->Line_84 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_65 $$ argv = new String[2]-->Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_45 $$ out = new ByteArrayOutputStream()-->Line_53 $$ out.reset()[ FD ]
Line_60 $$ byte[] writebytes = "foo".getBytes()-->Line_61 $$ fout.write(writebytes)[ FD ]
Line_20 $$ String[] argv = new String[2]-->Line_65 $$ argv = new String[2][ FD ]
Line_79 $$ argv = new String[2]-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_63 $$ out = new ByteArrayOutputStream()-->Line_71 $$ out.reset()[ FD ]
Line_45 $$ out = new ByteArrayOutputStream()-->Line_84 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_33 $$ argv = new String[2]-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_69 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_11 $$ ByteArrayOutputStream file = new ByteArrayOutputStream()-->Line_25 $$ assertTrue("Output doesn't match input", Arrays.equals(file.toByteArray(), out.toByteArray()))[ FD ]
Line_11 $$ ByteArrayOutputStream file = new ByteArrayOutputStream()-->Line_14 $$ file.write(c)[ FD ]
Line_60 $$ byte[] writebytes = "foo".getBytes()-->Line_84 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_77 $$ out = new ByteArrayOutputStream()[ FD ]
Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_69 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_85 $$ out.reset()[ FD ]
Line_20 $$ String[] argv = new String[2]-->Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_83 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_77 $$ out = new ByteArrayOutputStream()-->Line_84 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_3 $$ PrintStream bak = null-->Line_87 $$ if (null != bak) [ FD ]
Line_63 $$ out = new ByteArrayOutputStream()-->Line_85 $$ out.reset()[ FD ]
Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_42 $$ byte[] outbytes = "foo".getBytes()-->Line_43 $$ dout.write(outbytes)[ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_38 $$ assertTrue("Output doesn't match input", Arrays.equals("Foo\tBar\n".getBytes(), out.toByteArray()))[ FD ]
Line_60 $$ byte[] writebytes = "foo".getBytes()-->Line_70 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_84 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_33 $$ argv = new String[2]-->Line_79 $$ argv = new String[2][ FD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_51 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_31 $$ out = new ByteArrayOutputStream()[ FD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_69 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_63 $$ out = new ByteArrayOutputStream()-->Line_77 $$ out = new ByteArrayOutputStream()[ FD ]
Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_83 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_83 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_47 $$ argv = new String[2]-->Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_37 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_20 $$ String[] argv = new String[2]-->Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_52 $$ assertTrue("Output doesn't match input", Arrays.equals(outbytes, out.toByteArray()))[ FD ]
Line_59 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))-->Line_61 $$ fout.write(writebytes)[ FD ]
Line_10 $$ bak = System.out-->Line_87 $$ if (null != bak) [ FD ]
Line_87 $$ if (null != bak) -->Line_88 $$ System.setOut(bak)[ CD ]
Line_33 $$ argv = new String[2]-->Line_47 $$ argv = new String[2][ FD ]
Line_45 $$ out = new ByteArrayOutputStream()-->Line_77 $$ out = new ByteArrayOutputStream()[ FD ]
Line_20 $$ String[] argv = new String[2]-->Line_79 $$ argv = new String[2][ FD ]
Line_2 $$ private void textTest(Path root, Configuration conf) throws Exception -->Line_6 $$ fs.mkdirs(root)[ FD ]
Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_83 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_63 $$ out = new ByteArrayOutputStream()[ FD ]
Line_47 $$ argv = new String[2]-->Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_77 $$ out = new ByteArrayOutputStream()-->Line_85 $$ out.reset()[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_53 $$ out.reset()[ FD ]
Line_5 $$ final FileSystem fs = root.getFileSystem(conf)-->Line_59 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))[ FD ]
Line_12 $$ for (int i = 0; i < 1024; ++i) -->Line_14 $$ file.write(c)[ CD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_2 $$ private void textTest(Path root, Configuration conf) throws Exception -->Line_5 $$ final FileSystem fs = root.getFileSystem(conf)[ FD ]
Line_45 $$ out = new ByteArrayOutputStream()-->Line_52 $$ assertTrue("Output doesn't match input", Arrays.equals(outbytes, out.toByteArray()))[ FD ]
Line_74 $$ writebytes = "bar".getBytes()-->Line_84 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_12 $$ for (int i = 0; i < 1024; ++i) -->Line_15 $$ zout.write(c)[ CD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_70 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_20 $$ String[] argv = new String[2]-->Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_25 $$ assertTrue("Output doesn't match input", Arrays.equals(file.toByteArray(), out.toByteArray()))[ FD ]
Line_47 $$ argv = new String[2]-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_77 $$ out = new ByteArrayOutputStream()[ FD ]
Line_42 $$ byte[] outbytes = "foo".getBytes()-->Line_52 $$ assertTrue("Output doesn't match input", Arrays.equals(outbytes, out.toByteArray()))[ FD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_13 $$ char c = Character.forDigit(r.nextInt(26) + 10, 36)-->Line_15 $$ zout.write(c)[ FD ]
Line_63 $$ out = new ByteArrayOutputStream()-->Line_70 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_36 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_51 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_58 $$ Path p = new Path(root, "file." + extension)-->Line_59 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))[ FD ]
Line_33 $$ argv = new String[2]-->Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_60 $$ byte[] writebytes = "foo".getBytes()-->Line_74 $$ writebytes = "bar".getBytes()[ FD ]
Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_83 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_20 $$ String[] argv = new String[2]-->Line_33 $$ argv = new String[2][ FD ]
Line_23 $$ int ret = ToolRunner.run(new FsShell(conf), argv)-->Line_24 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_84 $$ assertTrue("Output doesn't match input", Arrays.equals(writebytes, out.toByteArray()))[ FD ]
Line_13 $$ char c = Character.forDigit(r.nextInt(26) + 10, 36)-->Line_14 $$ file.write(c)[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_52 $$ assertTrue("Output doesn't match input", Arrays.equals(outbytes, out.toByteArray()))[ FD ]
Line_31 $$ out = new ByteArrayOutputStream()-->Line_45 $$ out = new ByteArrayOutputStream()[ FD ]
Line_47 $$ argv = new String[2]-->Line_79 $$ argv = new String[2][ FD ]
Line_45 $$ out = new ByteArrayOutputStream()-->Line_85 $$ out.reset()[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_63 $$ out = new ByteArrayOutputStream()[ FD ]
Line_59 $$ OutputStream fout = new DataOutputStream(codec.createOutputStream(fs.create(p, true)))-->Line_62 $$ fout.close()[ FD ]
Line_45 $$ out = new ByteArrayOutputStream()-->Line_63 $$ out = new ByteArrayOutputStream()[ FD ]
Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_51 $$ assertEquals("'-text " + argv[1] + " returned " + ret, 0, ret)[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_85 $$ out.reset()[ FD ]
Line_10 $$ bak = System.out-->Line_88 $$ System.setOut(bak)[ FD ]
Line_20 $$ String[] argv = new String[2]-->Line_68 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_20 $$ String[] argv = new String[2]-->Line_47 $$ argv = new String[2][ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_71 $$ out.reset()[ FD ]
Line_45 $$ out = new ByteArrayOutputStream()-->Line_71 $$ out.reset()[ FD ]
Line_33 $$ argv = new String[2]-->Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_50 $$ ret = ToolRunner.run(new FsShell(conf), argv)-->Line_82 $$ ret = ToolRunner.run(new FsShell(conf), argv)[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_45 $$ out = new ByteArrayOutputStream()[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_39 $$ out.reset()[ FD ]
Line_60 $$ byte[] writebytes = "foo".getBytes()-->Line_75 $$ pout.write(writebytes)[ FD ]
