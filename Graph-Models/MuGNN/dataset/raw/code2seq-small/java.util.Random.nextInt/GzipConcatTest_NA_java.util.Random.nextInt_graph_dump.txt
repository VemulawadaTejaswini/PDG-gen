Line_12 $$ for (int i = 0; i < CONCAT; ++i) -->Line_15 $$ int len = r.nextInt(BUFLEN)[ CD ]
Line_23 $$ Decompressor decom = codec.createDecompressor()-->Line_25 $$ assertEquals(decomClass, decom.getClass())[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_10 $$ DataOutputBuffer chkbuf = new DataOutputBuffer()[ CD ]
Line_13 $$ GZIPOutputStream gzout = new GZIPOutputStream(dflbuf)-->Line_18 $$ gzout.write(b, off, len)[ FD ]
Line_13 $$ GZIPOutputStream gzout = new GZIPOutputStream(dflbuf)-->Line_19 $$ gzout.close()[ FD ]
Line_12 $$ for (int i = 0; i < CONCAT; ++i) -->Line_16 $$ int off = r.nextInt(BUFLEN - len)[ CD ]
Line_10 $$ DataOutputBuffer chkbuf = new DataOutputBuffer()-->Line_21 $$ final byte[] chk = Arrays.copyOf(chkbuf.getData(), chkbuf.getLength())[ FD ]
Line_3 $$ Random r = new Random()-->Line_16 $$ int off = r.nextInt(BUFLEN - len)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_25 $$ assertEquals(decomClass, decom.getClass())[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_32 $$ assertArrayEquals(chk, dflchk)[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_26 $$ DataInputBuffer gzbuf = new DataInputBuffer()[ CD ]
Line_9 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_30 $$ IOUtils.copyBytes(gzin, dflbuf, 4096)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_3 $$ Random r = new Random()[ CD ]
Line_3 $$ Random r = new Random()-->Line_15 $$ int len = r.nextInt(BUFLEN)[ FD ]
Line_12 $$ for (int i = 0; i < CONCAT; ++i) -->Line_17 $$ chkbuf.write(b, off, len)[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_23 $$ Decompressor decom = codec.createDecompressor()[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_31 $$ final byte[] dflchk = Arrays.copyOf(dflbuf.getData(), dflbuf.getLength())[ CD ]
Line_3 $$ Random r = new Random()-->Line_14 $$ r.nextBytes(b)[ FD ]
Line_10 $$ DataOutputBuffer chkbuf = new DataOutputBuffer()-->Line_17 $$ chkbuf.write(b, off, len)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_29 $$ dflbuf.reset()[ CD ]
Line_3 $$ Random r = new Random()-->Line_4 $$ long seed = r.nextLong()[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_28 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ CD ]
Line_11 $$ byte[] b = new byte[BUFLEN]-->Line_14 $$ r.nextBytes(b)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_22 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_12 $$ for (int i = 0; i < CONCAT; ++i) [ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_21 $$ final byte[] chk = Arrays.copyOf(chkbuf.getData(), chkbuf.getLength())[ CD ]
Line_9 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_31 $$ final byte[] dflchk = Arrays.copyOf(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_11 $$ byte[] b = new byte[BUFLEN]-->Line_18 $$ gzout.write(b, off, len)[ FD ]
Line_8 $$ final int BUFLEN = 128 * 1024-->Line_15 $$ int len = r.nextInt(BUFLEN)[ FD ]
Line_9 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_27 $$ gzbuf.reset(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_28 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)-->Line_30 $$ IOUtils.copyBytes(gzin, dflbuf, 4096)[ FD ]
Line_23 $$ Decompressor decom = codec.createDecompressor()-->Line_24 $$ assertNotNull(decom)[ FD ]
Line_12 $$ for (int i = 0; i < CONCAT; ++i) -->Line_14 $$ r.nextBytes(b)[ CD ]
Line_22 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)-->Line_23 $$ Decompressor decom = codec.createDecompressor()[ FD ]
Line_4 $$ long seed = r.nextLong()-->Line_5 $$ r.setSeed(seed)[ FD ]
Line_16 $$ int off = r.nextInt(BUFLEN - len)-->Line_18 $$ gzout.write(b, off, len)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_7 $$ final int CONCAT = r.nextInt(4) + 3[ CD ]
Line_16 $$ int off = r.nextInt(BUFLEN - len)-->Line_17 $$ chkbuf.write(b, off, len)[ FD ]
Line_12 $$ for (int i = 0; i < CONCAT; ++i) -->Line_19 $$ gzout.close()[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_8 $$ final int BUFLEN = 128 * 1024[ CD ]
Line_12 $$ for (int i = 0; i < CONCAT; ++i) -->Line_13 $$ GZIPOutputStream gzout = new GZIPOutputStream(dflbuf)[ CD ]
Line_3 $$ Random r = new Random()-->Line_7 $$ final int CONCAT = r.nextInt(4) + 3[ FD ]
Line_31 $$ final byte[] dflchk = Arrays.copyOf(dflbuf.getData(), dflbuf.getLength())-->Line_32 $$ assertArrayEquals(chk, dflchk)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_4 $$ long seed = r.nextLong()[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_30 $$ IOUtils.copyBytes(gzin, dflbuf, 4096)[ CD ]
Line_11 $$ byte[] b = new byte[BUFLEN]-->Line_17 $$ chkbuf.write(b, off, len)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_24 $$ assertNotNull(decom)[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_9 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()[ CD ]
Line_23 $$ Decompressor decom = codec.createDecompressor()-->Line_28 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_22 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)-->Line_28 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_21 $$ final byte[] chk = Arrays.copyOf(chkbuf.getData(), chkbuf.getLength())-->Line_32 $$ assertArrayEquals(chk, dflchk)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_5 $$ r.setSeed(seed)[ CD ]
Line_9 $$ DataOutputBuffer dflbuf = new DataOutputBuffer()-->Line_29 $$ dflbuf.reset()[ FD ]
Line_26 $$ DataInputBuffer gzbuf = new DataInputBuffer()-->Line_27 $$ gzbuf.reset(dflbuf.getData(), dflbuf.getLength())[ FD ]
Line_12 $$ for (int i = 0; i < CONCAT; ++i) -->Line_18 $$ gzout.write(b, off, len)[ CD ]
Line_3 $$ Random r = new Random()-->Line_5 $$ r.setSeed(seed)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_6 $$ LOG.info(decomClass + " seed: " + seed)[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_11 $$ byte[] b = new byte[BUFLEN][ CD ]
Line_15 $$ int len = r.nextInt(BUFLEN)-->Line_18 $$ gzout.write(b, off, len)[ FD ]
Line_26 $$ DataInputBuffer gzbuf = new DataInputBuffer()-->Line_28 $$ InputStream gzin = codec.createInputStream(gzbuf, decom)[ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_22 $$ CompressionCodec codec = ReflectionUtils.newInstance(GzipCodec.class, conf)[ CD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_27 $$ gzbuf.reset(dflbuf.getData(), dflbuf.getLength())[ CD ]
Line_15 $$ int len = r.nextInt(BUFLEN)-->Line_17 $$ chkbuf.write(b, off, len)[ FD ]
Line_7 $$ final int CONCAT = r.nextInt(4) + 3-->Line_12 $$ for (int i = 0; i < CONCAT; ++i) [ FD ]
Line_2 $$ void GzipConcatTest(Configuration conf, Class<? extends Decompressor> decomClass) throws IOException -->Line_25 $$ assertEquals(decomClass, decom.getClass())[ FD ]
