Line_3 $$ int count = 1024 * 1024-->Line_26 $$ count = Integer.parseInt(args[++i])[ FD ]
Line_32 $$ seed = Integer.parseInt(args[++i])-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_4 $$ int megabytes = 1-->Line_28 $$ megabytes = Integer.parseInt(args[++i])[ FD ]
Line_44 $$ compressType = args[++i]-->Line_69 $$ CompressionType compressionType = CompressionType.valueOf(compressType)[ FD ]
Line_4 $$ int megabytes = 1-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_13 $$ Path file = null-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_27 $$ if (args[i].equals("-megabytes")) -->Line_28 $$ megabytes = Integer.parseInt(args[++i])[ CD ]
Line_7 $$ boolean rwonly = false-->Line_65 $$ if (rwonly && (!create || merge || fast)) [ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_12 $$ String compressionCodec = "org.apache.hadoop.io.compress.DefaultCodec"[ CD ]
Line_39 $$ if (args[i].equals("-fast")) -->Line_41 $$ if (args[i].equals("-merge")) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ int count = 1024 * 1024[ CD ]
Line_20 $$ FileSystem fs = null-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_8 $$ boolean check = false-->Line_38 $$ check = true[ FD ]
Line_3 $$ int count = 1024 * 1024-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_6 $$ boolean create = true-->Line_65 $$ if (rwonly && (!create || merge || fast)) [ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_7 $$ boolean rwonly = false[ CD ]
Line_11 $$ String compressType = "NONE"-->Line_69 $$ CompressionType compressionType = CompressionType.valueOf(compressType)[ FD ]
Line_12 $$ String compressionCodec = "org.apache.hadoop.io.compress.DefaultCodec"-->Line_70 $$ CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_14 $$ int seed = new Random().nextInt()[ CD ]
Line_33 $$ if (args[i].equals("-rwonly")) -->Line_34 $$ rwonly = true[ CD ]
Line_20 $$ FileSystem fs = null-->Line_86 $$ fs.close()[ FD ]
Line_29 $$ if (args[i].equals("-factor")) -->Line_30 $$ factor = Integer.parseInt(args[++i])[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_16 $$ if (args.length == 0) [ CD ]
Line_48 $$ file = new Path(args[i])-->Line_52 $$ fs = file.getFileSystem(test.conf)[ FD ]
Line_3 $$ int count = 1024 * 1024-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_20 $$ FileSystem fs = null-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_26 $$ count = Integer.parseInt(args[++i])-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_76 $$ if (merge) -->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ CD ]
Line_52 $$ fs = file.getFileSystem(test.conf)-->Line_86 $$ fs.close()[ FD ]
Line_45 $$ if (args[i].equals("-codec")) -->Line_46 $$ compressionCodec = args[++i][ CD ]
Line_70 $$ CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf)-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_10 $$ boolean merge = false[ CD ]
Line_9 $$ boolean fast = false-->Line_40 $$ fast = true[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_9 $$ boolean fast = false[ CD ]
Line_48 $$ file = new Path(args[i])-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_11 $$ String compressType = "NONE"[ CD ]
Line_31 $$ if (args[i].equals("-seed")) -->Line_32 $$ seed = Integer.parseInt(args[++i])[ CD ]
Line_36 $$ create = false-->Line_65 $$ if (rwonly && (!create || merge || fast)) [ FD ]
Line_26 $$ count = Integer.parseInt(args[++i])-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_14 $$ int seed = new Random().nextInt()-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_7 $$ boolean rwonly = false-->Line_75 $$ if (!rwonly) [ FD ]
Line_5 $$ int factor = 10-->Line_30 $$ factor = Integer.parseInt(args[++i])[ FD ]
Line_15 $$ String usage = "Usage: SequenceFile " + "[-count N] " + "[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] " + "-codec <compressionCodec> " + "[[-rwonly] | -->Line_66 $$ System.err.println(usage)[ FD ]
Line_27 $$ if (args[i].equals("-megabytes")) -->Line_29 $$ if (args[i].equals("-factor")) [ CD ]
Line_4 $$ int megabytes = 1-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_51 $$ TestSequenceFile test = new TestSequenceFile()-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_14 $$ int seed = new Random().nextInt()-->Line_32 $$ seed = Integer.parseInt(args[++i])[ FD ]
Line_48 $$ file = new Path(args[i])-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_32 $$ seed = Integer.parseInt(args[++i])-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_9 $$ boolean fast = false-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_32 $$ seed = Integer.parseInt(args[++i])-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_40 $$ fast = true-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_30 $$ factor = Integer.parseInt(args[++i])-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_15 $$ String usage = "Usage: SequenceFile " + "[-count N] " + "[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] " + "-codec <compressionCodec> " + "[[-rwonly] | -->Line_17 $$ System.err.println(usage)[ FD ]
Line_3 $$ int count = 1024 * 1024-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_71 $$ if (rwonly || (create && !merge)) -->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ CD ]
Line_13 $$ Path file = null-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_48 $$ file = new Path(args[i])-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_48 $$ file = new Path(args[i])-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_75 $$ if (!rwonly) -->Line_76 $$ if (merge) [ CD ]
Line_29 $$ if (args[i].equals("-factor")) -->Line_31 $$ if (args[i].equals("-seed")) [ CD ]
Line_65 $$ if (rwonly && (!create || merge || fast)) -->Line_66 $$ System.err.println(usage)[ CD ]
Line_23 $$ if (args[i] == null) -->Line_25 $$ if (args[i].equals("-count")) [ CD ]
Line_35 $$ if (args[i].equals("-nocreate")) -->Line_36 $$ create = false[ CD ]
Line_51 $$ TestSequenceFile test = new TestSequenceFile()-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_13 $$ Path file = null-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_20 $$ FileSystem fs = null-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_11 $$ String compressType = "NONE"-->Line_44 $$ compressType = args[++i][ FD ]
Line_42 $$ merge = true-->Line_71 $$ if (rwonly || (create && !merge)) [ FD ]
Line_65 $$ if (rwonly && (!create || merge || fast)) -->Line_67 $$ System.exit(-1)[ CD ]
Line_37 $$ if (args[i].equals("-check")) -->Line_39 $$ if (args[i].equals("-fast")) [ CD ]
Line_35 $$ if (args[i].equals("-nocreate")) -->Line_37 $$ if (args[i].equals("-check")) [ CD ]
Line_43 $$ if (args[i].equals("-compressType")) -->Line_44 $$ compressType = args[++i][ CD ]
Line_28 $$ megabytes = Integer.parseInt(args[++i])-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_25 $$ if (args[i].equals("-count")) -->Line_26 $$ count = Integer.parseInt(args[++i])[ CD ]
Line_26 $$ count = Integer.parseInt(args[++i])-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_69 $$ CompressionType compressionType = CompressionType.valueOf(compressType)-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_26 $$ count = Integer.parseInt(args[++i])-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_9 $$ boolean fast = false-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_45 $$ if (args[i].equals("-codec")) -->Line_48 $$ file = new Path(args[i])[ CD ]
Line_3 $$ int count = 1024 * 1024-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_52 $$ fs = file.getFileSystem(test.conf)-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_22 $$ for (int i = 0; i < args.length; ++i) -->Line_28 $$ megabytes = Integer.parseInt(args[++i])[ FD ]
Line_46 $$ compressionCodec = args[++i]-->Line_70 $$ CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf)[ FD ]
Line_39 $$ if (args[i].equals("-fast")) -->Line_40 $$ fast = true[ CD ]
Line_41 $$ if (args[i].equals("-merge")) -->Line_43 $$ if (args[i].equals("-compressType")) [ CD ]
Line_13 $$ Path file = null-->Line_48 $$ file = new Path(args[i])[ FD ]
Line_76 $$ if (merge) -->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ CD ]
Line_30 $$ factor = Integer.parseInt(args[++i])-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_41 $$ if (args[i].equals("-merge")) -->Line_42 $$ merge = true[ CD ]
Line_34 $$ rwonly = true-->Line_71 $$ if (rwonly || (create && !merge)) [ FD ]
Line_6 $$ boolean create = true-->Line_36 $$ create = false[ FD ]
Line_22 $$ for (int i = 0; i < args.length; ++i) -->Line_46 $$ compressionCodec = args[++i][ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_15 $$ String usage = "Usage: SequenceFile " + "[-count N] " + "[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] " + "-codec <compressionCodec> " + "[[-rwonly] | [ CD ]
Line_7 $$ boolean rwonly = false-->Line_34 $$ rwonly = true[ FD ]
Line_52 $$ fs = file.getFileSystem(test.conf)-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_14 $$ int seed = new Random().nextInt()-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_20 $$ FileSystem fs = null-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_20 $$ FileSystem fs = null[ CD ]
Line_71 $$ if (rwonly || (create && !merge)) -->Line_73 $$ test.readTest(fs, count, seed, file)[ CD ]
Line_5 $$ int factor = 10-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_22 $$ for (int i = 0; i < args.length; ++i) -->Line_26 $$ count = Integer.parseInt(args[++i])[ FD ]
Line_48 $$ file = new Path(args[i])-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_52 $$ fs = file.getFileSystem(test.conf)-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_13 $$ Path file = null-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_20 $$ FileSystem fs = null-->Line_52 $$ fs = file.getFileSystem(test.conf)[ FD ]
Line_13 $$ Path file = null-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_51 $$ TestSequenceFile test = new TestSequenceFile()-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_25 $$ if (args[i].equals("-count")) -->Line_27 $$ if (args[i].equals("-megabytes")) [ CD ]
Line_16 $$ if (args.length == 0) -->Line_18 $$ System.exit(-1)[ CD ]
Line_22 $$ for (int i = 0; i < args.length; ++i) -->Line_32 $$ seed = Integer.parseInt(args[++i])[ FD ]
Line_26 $$ count = Integer.parseInt(args[++i])-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_22 $$ for (int i = 0; i < args.length; ++i) -->Line_23 $$ if (args[i] == null) [ CD ]
Line_52 $$ fs = file.getFileSystem(test.conf)-->Line_73 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_14 $$ int seed = new Random().nextInt()-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_52 $$ fs = file.getFileSystem(test.conf)-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_31 $$ if (args[i].equals("-seed")) -->Line_33 $$ if (args[i].equals("-rwonly")) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_13 $$ Path file = null[ CD ]
Line_40 $$ fast = true-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_8 $$ boolean check = false[ CD ]
Line_5 $$ int factor = 10-->Line_79 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_10 $$ boolean merge = false-->Line_71 $$ if (rwonly || (create && !merge)) [ FD ]
Line_10 $$ boolean merge = false-->Line_42 $$ merge = true[ FD ]
Line_14 $$ int seed = new Random().nextInt()-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_51 $$ TestSequenceFile test = new TestSequenceFile()-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_51 $$ TestSequenceFile test = new TestSequenceFile()-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_33 $$ if (args[i].equals("-rwonly")) -->Line_35 $$ if (args[i].equals("-nocreate")) [ CD ]
Line_7 $$ boolean rwonly = false-->Line_71 $$ if (rwonly || (create && !merge)) [ FD ]
Line_32 $$ seed = Integer.parseInt(args[++i])-->Line_72 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_28 $$ megabytes = Integer.parseInt(args[++i])-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_69 $$ CompressionType compressionType = CompressionType.valueOf(compressType)-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_37 $$ if (args[i].equals("-check")) -->Line_38 $$ check = true[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_6 $$ boolean create = true[ CD ]
Line_34 $$ rwonly = true-->Line_65 $$ if (rwonly && (!create || merge || fast)) [ FD ]
Line_12 $$ String compressionCodec = "org.apache.hadoop.io.compress.DefaultCodec"-->Line_46 $$ compressionCodec = args[++i][ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_4 $$ int megabytes = 1[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_5 $$ int factor = 10[ CD ]
Line_22 $$ for (int i = 0; i < args.length; ++i) -->Line_30 $$ factor = Integer.parseInt(args[++i])[ FD ]
Line_34 $$ rwonly = true-->Line_75 $$ if (!rwonly) [ FD ]
Line_20 $$ FileSystem fs = null-->Line_77 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_3 $$ int count = 1024 * 1024-->Line_83 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_13 $$ Path file = null-->Line_52 $$ fs = file.getFileSystem(test.conf)[ FD ]
Line_43 $$ if (args[i].equals("-compressType")) -->Line_45 $$ if (args[i].equals("-codec")) [ CD ]
Line_82 $$ if (check) -->Line_83 $$ test.checkSort(fs, count, seed, file)[ CD ]
Line_16 $$ if (args.length == 0) -->Line_17 $$ System.err.println(usage)[ CD ]
Line_22 $$ for (int i = 0; i < args.length; ++i) -->Line_44 $$ compressType = args[++i][ FD ]
