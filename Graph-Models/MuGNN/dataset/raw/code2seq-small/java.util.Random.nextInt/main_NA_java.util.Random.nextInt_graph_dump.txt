Line_75 $$ CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf)-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_23 $$ FileSystem fs = null-->Line_88 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_7 $$ int megabytes = 1-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_32 $$ megabytes = Integer.parseInt(args[++i])-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_57 $$ fs = file.getFileSystem(test.conf)-->Line_88 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_14 $$ String compressType = "NONE"-->Line_48 $$ compressType = args[++i][ FD ]
Line_13 $$ boolean merge = false-->Line_46 $$ merge = true[ FD ]
Line_37 $$ if (args[i].equals("-rwonly")) -->Line_39 $$ if (args[i].equals("-nocreate")) [ CD ]
Line_56 $$ TestSequenceFile test = new TestSequenceFile()-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_48 $$ compressType = args[++i]-->Line_74 $$ CompressionType compressionType = CompressionType.valueOf(compressType)[ FD ]
Line_45 $$ if (args[i].equals("-merge")) -->Line_46 $$ merge = true[ CD ]
Line_34 $$ factor = Integer.parseInt(args[++i])-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_16 $$ Path file = null-->Line_88 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_36 $$ seed = Integer.parseInt(args[++i])-->Line_78 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_70 $$ if (rwonly && (!create || merge || fast)) -->Line_71 $$ System.err.println(usage)[ CD ]
Line_45 $$ if (args[i].equals("-merge")) -->Line_47 $$ if (args[i].equals("-compressType")) [ CD ]
Line_30 $$ count = Integer.parseInt(args[++i])-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_19 $$ if (args.length == 0) -->Line_20 $$ System.err.println(usage)[ CD ]
Line_25 $$ for (int i = 0; i < args.length; ++i) -->Line_32 $$ megabytes = Integer.parseInt(args[++i])[ FD ]
Line_30 $$ count = Integer.parseInt(args[++i])-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_12 $$ boolean fast = false-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_10 $$ boolean rwonly = false-->Line_76 $$ if (rwonly || (create && !merge)) [ FD ]
Line_6 $$ int count = 1024 * 1024-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_6 $$ int count = 1024 * 1024-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_23 $$ FileSystem fs = null-->Line_91 $$ fs.close()[ FD ]
Line_14 $$ String compressType = "NONE"-->Line_74 $$ CompressionType compressionType = CompressionType.valueOf(compressType)[ FD ]
Line_23 $$ FileSystem fs = null-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_16 $$ Path file = null-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_6 $$ int count = 1024 * 1024-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_81 $$ if (merge) -->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ CD ]
Line_32 $$ megabytes = Integer.parseInt(args[++i])-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_36 $$ seed = Integer.parseInt(args[++i])-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_39 $$ if (args[i].equals("-nocreate")) -->Line_41 $$ if (args[i].equals("-check")) [ CD ]
Line_38 $$ rwonly = true-->Line_76 $$ if (rwonly || (create && !merge)) [ FD ]
Line_30 $$ count = Integer.parseInt(args[++i])-->Line_78 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_74 $$ CompressionType compressionType = CompressionType.valueOf(compressType)-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_43 $$ if (args[i].equals("-fast")) -->Line_45 $$ if (args[i].equals("-merge")) [ CD ]
Line_44 $$ fast = true-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_16 $$ Path file = null-->Line_57 $$ fs = file.getFileSystem(test.conf)[ FD ]
Line_10 $$ boolean rwonly = false-->Line_80 $$ if (!rwonly) [ FD ]
Line_34 $$ factor = Integer.parseInt(args[++i])-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_17 $$ int seed = new Random().nextInt()-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_16 $$ Path file = null-->Line_78 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_25 $$ for (int i = 0; i < args.length; ++i) -->Line_36 $$ seed = Integer.parseInt(args[++i])[ FD ]
Line_36 $$ seed = Integer.parseInt(args[++i])-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_23 $$ FileSystem fs = null-->Line_78 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_35 $$ if (args[i].equals("-seed")) -->Line_37 $$ if (args[i].equals("-rwonly")) [ CD ]
Line_16 $$ Path file = null-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_76 $$ if (rwonly || (create && !merge)) -->Line_78 $$ test.readTest(fs, count, seed, file)[ CD ]
Line_25 $$ for (int i = 0; i < args.length; ++i) -->Line_50 $$ compressionCodec = args[++i][ FD ]
Line_50 $$ compressionCodec = args[++i]-->Line_75 $$ CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf)[ FD ]
Line_30 $$ count = Integer.parseInt(args[++i])-->Line_88 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_57 $$ fs = file.getFileSystem(test.conf)-->Line_91 $$ fs.close()[ FD ]
Line_57 $$ fs = file.getFileSystem(test.conf)-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_33 $$ if (args[i].equals("-factor")) -->Line_35 $$ if (args[i].equals("-seed")) [ CD ]
Line_74 $$ CompressionType compressionType = CompressionType.valueOf(compressType)-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_38 $$ rwonly = true-->Line_80 $$ if (!rwonly) [ FD ]
Line_80 $$ if (!rwonly) -->Line_81 $$ if (merge) [ CD ]
Line_56 $$ TestSequenceFile test = new TestSequenceFile()-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_40 $$ create = false-->Line_70 $$ if (rwonly && (!create || merge || fast)) [ FD ]
Line_16 $$ Path file = null-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_10 $$ boolean rwonly = false-->Line_70 $$ if (rwonly && (!create || merge || fast)) [ FD ]
Line_7 $$ int megabytes = 1-->Line_32 $$ megabytes = Integer.parseInt(args[++i])[ FD ]
Line_56 $$ TestSequenceFile test = new TestSequenceFile()-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_38 $$ rwonly = true-->Line_70 $$ if (rwonly && (!create || merge || fast)) [ FD ]
Line_23 $$ FileSystem fs = null-->Line_57 $$ fs = file.getFileSystem(test.conf)[ FD ]
Line_49 $$ if (args[i].equals("-codec")) -->Line_50 $$ compressionCodec = args[++i][ CD ]
Line_29 $$ if (args[i].equals("-count")) -->Line_31 $$ if (args[i].equals("-megabytes")) [ CD ]
Line_81 $$ if (merge) -->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ CD ]
Line_15 $$ String compressionCodec = "org.apache.hadoop.io.compress.DefaultCodec"-->Line_50 $$ compressionCodec = args[++i][ FD ]
Line_6 $$ int count = 1024 * 1024-->Line_30 $$ count = Integer.parseInt(args[++i])[ FD ]
Line_57 $$ fs = file.getFileSystem(test.conf)-->Line_78 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_31 $$ if (args[i].equals("-megabytes")) -->Line_33 $$ if (args[i].equals("-factor")) [ CD ]
Line_11 $$ boolean check = false-->Line_42 $$ check = true[ FD ]
Line_18 $$ String usage = "Usage: SequenceFile " + "[-count N] " + "[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] " + "-codec <compressionCodec> " + "[[-rwonly] | -->Line_71 $$ System.err.println(usage)[ FD ]
Line_87 $$ if (check) -->Line_88 $$ test.checkSort(fs, count, seed, file)[ CD ]
Line_7 $$ int megabytes = 1-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_33 $$ if (args[i].equals("-factor")) -->Line_34 $$ factor = Integer.parseInt(args[++i])[ CD ]
Line_47 $$ if (args[i].equals("-compressType")) -->Line_48 $$ compressType = args[++i][ CD ]
Line_25 $$ for (int i = 0; i < args.length; ++i) -->Line_48 $$ compressType = args[++i][ FD ]
Line_25 $$ for (int i = 0; i < args.length; ++i) -->Line_30 $$ count = Integer.parseInt(args[++i])[ FD ]
Line_10 $$ boolean rwonly = false-->Line_38 $$ rwonly = true[ FD ]
Line_47 $$ if (args[i].equals("-compressType")) -->Line_49 $$ if (args[i].equals("-codec")) [ CD ]
Line_39 $$ if (args[i].equals("-nocreate")) -->Line_40 $$ create = false[ CD ]
Line_6 $$ int count = 1024 * 1024-->Line_88 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_8 $$ int factor = 10-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_29 $$ if (args[i].equals("-count")) -->Line_30 $$ count = Integer.parseInt(args[++i])[ CD ]
Line_12 $$ boolean fast = false-->Line_44 $$ fast = true[ FD ]
Line_57 $$ fs = file.getFileSystem(test.conf)-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_56 $$ TestSequenceFile test = new TestSequenceFile()-->Line_78 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_44 $$ fast = true-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_43 $$ if (args[i].equals("-fast")) -->Line_44 $$ fast = true[ CD ]
Line_6 $$ int count = 1024 * 1024-->Line_78 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_23 $$ FileSystem fs = null-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_23 $$ FileSystem fs = null-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_17 $$ int seed = new Random().nextInt()-->Line_36 $$ seed = Integer.parseInt(args[++i])[ FD ]
Line_70 $$ if (rwonly && (!create || merge || fast)) -->Line_72 $$ System.exit(-1)[ CD ]
Line_46 $$ merge = true-->Line_76 $$ if (rwonly || (create && !merge)) [ FD ]
Line_57 $$ fs = file.getFileSystem(test.conf)-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_13 $$ boolean merge = false-->Line_76 $$ if (rwonly || (create && !merge)) [ FD ]
Line_56 $$ TestSequenceFile test = new TestSequenceFile()-->Line_88 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_12 $$ boolean fast = false-->Line_84 $$ test.sortTest(fs, count, megabytes, factor, fast, file)[ FD ]
Line_41 $$ if (args[i].equals("-check")) -->Line_43 $$ if (args[i].equals("-fast")) [ CD ]
Line_36 $$ seed = Integer.parseInt(args[++i])-->Line_88 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_30 $$ count = Integer.parseInt(args[++i])-->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ FD ]
Line_37 $$ if (args[i].equals("-rwonly")) -->Line_38 $$ rwonly = true[ CD ]
Line_8 $$ int factor = 10-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_8 $$ int factor = 10-->Line_34 $$ factor = Integer.parseInt(args[++i])[ FD ]
Line_35 $$ if (args[i].equals("-seed")) -->Line_36 $$ seed = Integer.parseInt(args[++i])[ CD ]
Line_17 $$ int seed = new Random().nextInt()-->Line_82 $$ test.mergeTest(fs, count, seed, file, compressionType, fast, factor, megabytes)[ FD ]
Line_17 $$ int seed = new Random().nextInt()-->Line_78 $$ test.readTest(fs, count, seed, file)[ FD ]
Line_17 $$ int seed = new Random().nextInt()-->Line_88 $$ test.checkSort(fs, count, seed, file)[ FD ]
Line_18 $$ String usage = "Usage: SequenceFile " + "[-count N] " + "[-seed #] [-check] [-compressType <NONE|RECORD|BLOCK>] " + "-codec <compressionCodec> " + "[[-rwonly] | -->Line_20 $$ System.err.println(usage)[ FD ]
Line_19 $$ if (args.length == 0) -->Line_21 $$ System.exit(-1)[ CD ]
Line_15 $$ String compressionCodec = "org.apache.hadoop.io.compress.DefaultCodec"-->Line_75 $$ CompressionCodec codec = (CompressionCodec) ReflectionUtils.newInstance(test.conf.getClassByName(compressionCodec), test.conf)[ FD ]
Line_9 $$ boolean create = true-->Line_70 $$ if (rwonly && (!create || merge || fast)) [ FD ]
Line_41 $$ if (args[i].equals("-check")) -->Line_42 $$ check = true[ CD ]
Line_76 $$ if (rwonly || (create && !merge)) -->Line_77 $$ test.writeTest(fs, count, seed, file, compressionType, codec)[ CD ]
Line_25 $$ for (int i = 0; i < args.length; ++i) -->Line_34 $$ factor = Integer.parseInt(args[++i])[ FD ]
Line_31 $$ if (args[i].equals("-megabytes")) -->Line_32 $$ megabytes = Integer.parseInt(args[++i])[ CD ]
Line_9 $$ boolean create = true-->Line_40 $$ create = false[ FD ]
