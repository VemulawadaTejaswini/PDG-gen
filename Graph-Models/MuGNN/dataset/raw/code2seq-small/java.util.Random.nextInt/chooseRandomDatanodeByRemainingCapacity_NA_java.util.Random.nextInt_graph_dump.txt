Line_7 $$ TreeMap<Integer, DatanodeDescriptor> lottery = new TreeMap<Integer, DatanodeDescriptor>()-->Line_12 $$ lottery.put(offset, d)[ FD ]
Line_3 $$ float total = 0-->Line_5 $$ total += d.getCacheRemainingPercent()[ FD ]
Line_4 $$ for (DatanodeDescriptor d : targets) -->Line_5 $$ total += d.getCacheRemainingPercent()[ FD ]
Line_7 $$ TreeMap<Integer, DatanodeDescriptor> lottery = new TreeMap<Integer, DatanodeDescriptor>()-->Line_14 $$ DatanodeDescriptor winner = lottery.higherEntry(random.nextInt(offset)).getValue()[ FD ]
Line_2 $$ private static DatanodeDescriptor chooseRandomDatanodeByRemainingCapacity(final List<DatanodeDescriptor> targets) -->Line_7 $$ TreeMap<Integer, DatanodeDescriptor> lottery = new TreeMap<Integer, DatanodeDescriptor>()[ CD ]
Line_8 $$ int offset = 0-->Line_14 $$ DatanodeDescriptor winner = lottery.higherEntry(random.nextInt(offset)).getValue()[ FD ]
Line_2 $$ private static DatanodeDescriptor chooseRandomDatanodeByRemainingCapacity(final List<DatanodeDescriptor> targets) -->Line_15 $$ return winner[ CD ]
Line_2 $$ private static DatanodeDescriptor chooseRandomDatanodeByRemainingCapacity(final List<DatanodeDescriptor> targets) -->Line_3 $$ float total = 0[ CD ]
Line_8 $$ int offset = 0-->Line_11 $$ offset += weight[ FD ]
Line_4 $$ for (DatanodeDescriptor d : targets) -->Line_12 $$ lottery.put(offset, d)[ FD ]
Line_2 $$ private static DatanodeDescriptor chooseRandomDatanodeByRemainingCapacity(final List<DatanodeDescriptor> targets) -->Line_14 $$ DatanodeDescriptor winner = lottery.higherEntry(random.nextInt(offset)).getValue()[ CD ]
Line_4 $$ for (DatanodeDescriptor d : targets) -->Line_10 $$ int weight = Math.max(1, (int) ((d.getCacheRemainingPercent() / total) * 1000000))[ FD ]
Line_10 $$ int weight = Math.max(1, (int) ((d.getCacheRemainingPercent() / total) * 1000000))-->Line_11 $$ offset += weight[ FD ]
Line_11 $$ offset += weight-->Line_14 $$ DatanodeDescriptor winner = lottery.higherEntry(random.nextInt(offset)).getValue()[ FD ]
Line_2 $$ private static DatanodeDescriptor chooseRandomDatanodeByRemainingCapacity(final List<DatanodeDescriptor> targets) -->Line_8 $$ int offset = 0[ CD ]
Line_11 $$ offset += weight-->Line_12 $$ lottery.put(offset, d)[ FD ]
Line_8 $$ int offset = 0-->Line_12 $$ lottery.put(offset, d)[ FD ]
