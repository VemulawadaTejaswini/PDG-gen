Line_12 $$ int totalsize = bytesPerFile-->Line_15 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_27 $$ Path f = new Path(p, Integer.toString(totalsize, 36))[ FD ]
Line_27 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_17 $$ checkRecord(rec, totalsize)[ FD ]
Line_44 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())-->Line_48 $$ checkRecord(rec, totalsize)[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_17 $$ checkRecord(rec, totalsize)[ CD ]
Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_48 $$ checkRecord(rec, totalsize)[ FD ]
Line_23 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_27 $$ Path f = new Path(p, Integer.toString(totalsize, 36))[ CD ]
Line_43 $$ for (int i = bytesPerFile << 1; i < 1024 * 1024; i += bytesPerFile) -->Line_45 $$ checkRecord(rec, i)[ CD ]
Line_3 $$ Random r = new Random()-->Line_4 $$ long seed = r.nextLong()[ FD ]
Line_41 $$ if (!fnf)-->Line_42 $$ fail("Failed to push out last entry")[ CD ]
Line_35 $$ if (e.getCause() == null || !(e.getCause() instanceof FileNotFoundException)) -->Line_38 $$ fnf = true[ CD ]
Line_43 $$ for (int i = bytesPerFile << 1; i < 1024 * 1024; i += bytesPerFile) -->Line_44 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_15 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_3 $$ Random r = new Random()-->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_4 $$ long seed = r.nextLong()-->Line_5 $$ r.setSeed(seed)[ FD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_44 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_43 $$ for (int i = bytesPerFile << 1; i < 1024 * 1024; i += bytesPerFile) -->Line_45 $$ checkRecord(rec, i)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_27 $$ Path f = new Path(p, Integer.toString(totalsize, 36))[ FD ]
Line_3 $$ Random r = new Random()-->Line_44 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_3 $$ Random r = new Random()-->Line_5 $$ r.setSeed(seed)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_4 $$ long seed = r.nextLong()[ CD ]
Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_48 $$ checkRecord(rec, totalsize)[ FD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))[ FD ]
Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_25 $$ checkRecord(rec, i)[ CD ]
Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_23 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_30 $$ fs.delete(f, false)[ FD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_48 $$ checkRecord(rec, totalsize)[ FD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_23 $$ Path f = new Path(p, Integer.toString(i, 36))[ FD ]
Line_23 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_28 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_7 $$ fs.delete(p, true)[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_30 $$ fs.delete(f, false)[ CD ]
Line_23 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_12 $$ int totalsize = bytesPerFile[ CD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_3 $$ Random r = new Random()-->Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_33 $$ cache.getIndexInformation(Integer.toString(bytesPerFile, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(bytesPerFile)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_28 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_15 $$ writeFile(fs, f, totalsize, partsPerMap)[ CD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_10 $$ final int bytesPerFile = partsPerMap * 24-->Line_43 $$ for (int i = bytesPerFile << 1; i < 1024 * 1024; i += bytesPerFile) [ FD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_45 $$ checkRecord(rec, i)[ FD ]
Line_3 $$ Random r = new Random()-->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_31 $$ boolean fnf = false-->Line_41 $$ if (!fnf)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_10 $$ final int bytesPerFile = partsPerMap * 24[ CD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) [ CD ]
Line_9 $$ final int partsPerMap = 1000-->Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_28 $$ writeFile(fs, f, totalsize, partsPerMap)[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_41 $$ if (!fnf)[ CD ]
Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_45 $$ checkRecord(rec, i)[ FD ]
Line_31 $$ boolean fnf = false-->Line_38 $$ fnf = true[ FD ]
Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_48 $$ checkRecord(rec, totalsize)[ FD ]
Line_10 $$ final int bytesPerFile = partsPerMap * 24-->Line_33 $$ cache.getIndexInformation(Integer.toString(bytesPerFile, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(bytesPerFile)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_10 $$ final int bytesPerFile = partsPerMap * 24-->Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) [ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_8 $$ conf.setInt(TTConfig.TT_INDEX_CACHE, 1)[ CD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_25 $$ checkRecord(rec, i)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_11 $$ IndexCache cache = new IndexCache(conf)[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_6 $$ System.out.println("seed: " + seed)[ CD ]
Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_30 $$ fs.delete(f, false)[ FD ]
Line_10 $$ final int bytesPerFile = partsPerMap * 24-->Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) [ FD ]
Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_43 $$ for (int i = bytesPerFile << 1; i < 1024 * 1024; i += bytesPerFile) -->Line_44 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_15 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_19 $$ for (FileStatus stat : fs.listStatus(p)) -->Line_20 $$ fs.delete(stat.getPath(), true)[ FD ]
Line_27 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) [ CD ]
Line_3 $$ Random r = new Random()-->Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_48 $$ checkRecord(rec, totalsize)[ FD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_3 $$ Random r = new Random()[ CD ]
Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_17 $$ checkRecord(rec, totalsize)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_33 $$ cache.getIndexInformation(Integer.toString(bytesPerFile, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(bytesPerFile)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_43 $$ for (int i = bytesPerFile << 1; i < 1024 * 1024; i += bytesPerFile) [ FD ]
Line_24 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_45 $$ checkRecord(rec, i)[ FD ]
Line_3 $$ Random r = new Random()-->Line_33 $$ cache.getIndexInformation(Integer.toString(bytesPerFile, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(bytesPerFile)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_31 $$ boolean fnf = false[ CD ]
Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_17 $$ checkRecord(rec, totalsize)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_15 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_9 $$ final int partsPerMap = 1000[ CD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) [ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_43 $$ for (int i = bytesPerFile << 1; i < 1024 * 1024; i += bytesPerFile) [ CD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_44 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_48 $$ checkRecord(rec, totalsize)[ CD ]
Line_38 $$ fnf = true-->Line_41 $$ if (!fnf)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_28 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_14 $$ Path f = new Path(p, Integer.toString(totalsize, 36))[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_44 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_44 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())-->Line_45 $$ checkRecord(rec, i)[ FD ]
Line_27 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_30 $$ fs.delete(f, false)[ FD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_23 $$ Path f = new Path(p, Integer.toString(i, 36))[ CD ]
Line_12 $$ int totalsize = bytesPerFile-->Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_5 $$ r.setSeed(seed)[ CD ]
Line_27 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_28 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_28 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_22 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_25 $$ checkRecord(rec, i)[ FD ]
Line_23 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_28 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_47 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_25 $$ checkRecord(rec, i)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_29 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_13 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_16 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
