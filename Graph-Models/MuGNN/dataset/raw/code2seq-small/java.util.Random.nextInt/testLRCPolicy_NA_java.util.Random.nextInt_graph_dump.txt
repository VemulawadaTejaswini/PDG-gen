Line_2 $$ public void testLRCPolicy() throws Exception -->Line_4 $$ long seed = r.nextLong()[ CD ]
Line_10 $$ final int bytesPerFile = partsPerMap * 24-->Line_37 $$ cache.getIndexInformation(Integer.toString(bytesPerFile, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(bytesPerFile)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_18 $$ checkRecord(rec, totalsize)[ CD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_16 $$ writeFile(fs, f, totalsize, partsPerMap)[ CD ]
Line_10 $$ final int bytesPerFile = partsPerMap * 24-->Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) [ FD ]
Line_39 $$ if (e.getCause() == null || !(e.getCause() instanceof FileNotFoundException)) -->Line_42 $$ fnf = true[ CD ]
Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_10 $$ final int bytesPerFile = partsPerMap * 24[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) [ CD ]
Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_18 $$ checkRecord(rec, totalsize)[ FD ]
Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_27 $$ checkRecord(rec, i)[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_18 $$ checkRecord(rec, totalsize)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_32 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_33 $$ fs.delete(f, false)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_33 $$ fs.delete(f, false)[ CD ]
Line_3 $$ Random r = new Random()-->Line_4 $$ long seed = r.nextLong()[ FD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_32 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_25 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_31 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_6 $$ System.out.println("seed: " + seed)[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_53 $$ checkRecord(rec, totalsize)[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_32 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_3 $$ Random r = new Random()-->Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_8 $$ conf.setInt(TTConfig.TT_INDEX_CACHE, 1)[ CD ]
Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_31 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_4 $$ long seed = r.nextLong()-->Line_5 $$ r.setSeed(seed)[ FD ]
Line_49 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())-->Line_53 $$ checkRecord(rec, totalsize)[ FD ]
Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_49 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_32 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_25 $$ Path f = new Path(p, Integer.toString(i, 36))[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_11 $$ IndexCache cache = new IndexCache(conf)[ CD ]
Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_27 $$ checkRecord(rec, i)[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_7 $$ fs.delete(p, true)[ CD ]
Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_53 $$ checkRecord(rec, totalsize)[ FD ]
Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_25 $$ Path f = new Path(p, Integer.toString(i, 36))[ CD ]
Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_32 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_31 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_45 $$ if (!fnf)-->Line_46 $$ fail("Failed to push out last entry")[ CD ]
Line_3 $$ Random r = new Random()-->Line_5 $$ r.setSeed(seed)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_5 $$ r.setSeed(seed)[ CD ]
Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_24 $$ for (int i = bytesPerFile; i < 1024 * 1024; i += bytesPerFile) -->Line_50 $$ checkRecord(rec, i)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_37 $$ cache.getIndexInformation(Integer.toString(bytesPerFile, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(bytesPerFile)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_9 $$ final int partsPerMap = 1000[ CD ]
Line_10 $$ final int bytesPerFile = partsPerMap * 24-->Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) [ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_3 $$ Random r = new Random()[ CD ]
Line_3 $$ Random r = new Random()-->Line_37 $$ cache.getIndexInformation(Integer.toString(bytesPerFile, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(bytesPerFile)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_50 $$ checkRecord(rec, i)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_31 $$ writeFile(fs, f, totalsize, partsPerMap)[ CD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_37 $$ cache.getIndexInformation(Integer.toString(bytesPerFile, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(bytesPerFile)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_52 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_16 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_3 $$ Random r = new Random()-->Line_32 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_25 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_52 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_52 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_52 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_25 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_3 $$ Random r = new Random()-->Line_49 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_3 $$ Random r = new Random()-->Line_52 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_53 $$ checkRecord(rec, totalsize)[ FD ]
Line_52 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_53 $$ checkRecord(rec, totalsize)[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_52 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) [ CD ]
Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_27 $$ checkRecord(rec, i)[ FD ]
Line_42 $$ fnf = true-->Line_45 $$ if (!fnf)[ FD ]
Line_9 $$ final int partsPerMap = 1000-->Line_31 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_52 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_25 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_33 $$ fs.delete(f, false)[ FD ]
Line_49 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())-->Line_50 $$ checkRecord(rec, i)[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ CD ]
Line_9 $$ final int partsPerMap = 1000-->Line_49 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))-->Line_16 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_2 $$ public void testLRCPolicy() throws Exception -->Line_45 $$ if (!fnf)[ CD ]
Line_3 $$ Random r = new Random()-->Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_11 $$ IndexCache cache = new IndexCache(conf)-->Line_49 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), new Path(p, Integer.toString(i, 36)), UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_17 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_50 $$ checkRecord(rec, i)[ FD ]
Line_25 $$ Path f = new Path(p, Integer.toString(i, 36))-->Line_32 $$ cache.getIndexInformation(Integer.toString(totalsize, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_16 $$ writeFile(fs, f, totalsize, partsPerMap)[ FD ]
Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_27 $$ checkRecord(rec, i)[ FD ]
Line_26 $$ IndexRecord rec = cache.getIndexInformation(Integer.toString(i, 36), r.nextInt(partsPerMap), f, UserGroupInformation.getCurrentUser().getShortUserName())-->Line_53 $$ checkRecord(rec, totalsize)[ FD ]
Line_14 $$ for (; totalsize < 1024 * 1024; totalsize += bytesPerFile) -->Line_15 $$ Path f = new Path(p, Integer.toString(totalsize, 36))[ CD ]
