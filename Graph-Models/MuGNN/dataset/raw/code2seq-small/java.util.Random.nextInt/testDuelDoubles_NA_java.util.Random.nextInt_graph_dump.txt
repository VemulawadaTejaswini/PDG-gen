Line_57 $$ IndexNumericFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT), true)-->Line_64 $$ duelFieldDataDouble(random, atomicReaderContext, leftFieldData, rightFieldData)[ FD ]
Line_50 $$ right = list.remove(random.nextInt(list.size()))-->Line_57 $$ IndexNumericFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT), true)[ FD ]
Line_14 $$ if (randomBoolean()) -->Line_17 $$ vals.add(randomFloat())[ CD ]
Line_57 $$ IndexNumericFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT), true)-->Line_58 $$ duelFieldDataDouble(random, context, leftFieldData, rightFieldData)[ FD ]
Line_44 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_48 $$ if (list.size() > 1) [ FD ]
Line_20 $$ numValues = vals.size()-->Line_26 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_46 $$ Entry<FieldDataType, Type> left-->Line_55 $$ IndexNumericFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT), true)[ FD ]
Line_45 $$ while (!list.isEmpty()) -->Line_62 $$ List<LeafReaderContext> leaves = composite.leaves()[ CD ]
Line_5 $$ Random random = getRandom()-->Line_36 $$ if (random.nextInt(10) == 0) [ FD ]
Line_36 $$ if (random.nextInt(10) == 0) -->Line_37 $$ refreshReader()[ CD ]
Line_5 $$ Random random = getRandom()-->Line_49 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_46 $$ Entry<FieldDataType, Type> left-->Line_49 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_44 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_45 $$ while (!list.isEmpty()) [ FD ]
Line_45 $$ while (!list.isEmpty()) -->Line_47 $$ Entry<FieldDataType, Type> right[ CD ]
Line_45 $$ while (!list.isEmpty()) -->Line_46 $$ Entry<FieldDataType, Type> left[ CD ]
Line_55 $$ IndexNumericFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT), true)-->Line_64 $$ duelFieldDataDouble(random, atomicReaderContext, leftFieldData, rightFieldData)[ FD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_34 $$ final ParsedDocument d = mapper.parse("test", "type", Integer.toString(i), doc.bytes())[ FD ]
Line_12 $$ Set<Float> vals = new HashSet<Float>()-->Line_15 $$ vals.add(def)[ FD ]
Line_20 $$ numValues = vals.size()-->Line_30 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_34 $$ final ParsedDocument d = mapper.parse("test", "type", Integer.toString(i), doc.bytes())[ CD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_44 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())[ CD ]
Line_14 $$ if (randomBoolean()) -->Line_15 $$ vals.add(def)[ CD ]
Line_40 $$ LeafReaderContext context = refreshReader()-->Line_58 $$ duelFieldDataDouble(random, context, leftFieldData, rightFieldData)[ FD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_43 $$ typeMap.put(new FieldDataType("float", Settings.builder().put("format", "doc_values")), Type.Float)[ CD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_20 $$ numValues = vals.size()[ CD ]
Line_12 $$ Set<Float> vals = new HashSet<Float>()-->Line_20 $$ numValues = vals.size()[ FD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_5 $$ Random random = getRandom()[ CD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_12 $$ Set<Float> vals = new HashSet<Float>()[ CD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_26 $$ for (int j = 0; j < numValues; ++j) [ CD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_40 $$ LeafReaderContext context = refreshReader()[ CD ]
Line_44 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_50 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_61 $$ CompositeReaderContext composite = perSegment.getContext()-->Line_62 $$ List<LeafReaderContext> leaves = composite.leaves()[ FD ]
Line_55 $$ IndexNumericFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT), true)-->Line_58 $$ duelFieldDataDouble(random, context, leftFieldData, rightFieldData)[ FD ]
Line_45 $$ while (!list.isEmpty()) -->Line_55 $$ IndexNumericFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT), true)[ CD ]
Line_44 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_49 $$ left = list.remove(random.nextInt(list.size()))[ FD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_10 $$ int numValues = randomInt(maxNumValues)[ CD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_36 $$ if (random.nextInt(10) == 0) [ CD ]
Line_7 $$ final int maxNumValues = randomBoolean() ? 1 : randomIntBetween(2, 10)-->Line_10 $$ int numValues = randomInt(maxNumValues)[ FD ]
Line_50 $$ right = list.remove(random.nextInt(list.size()))-->Line_52 $$ right = left = list.remove(0)[ FD ]
Line_13 $$ for (int j = 0; j < numValues; ++j) -->Line_14 $$ if (randomBoolean()) [ CD ]
Line_45 $$ while (!list.isEmpty()) -->Line_56 $$ ifdService.clear()[ CD ]
Line_5 $$ Random random = getRandom()-->Line_58 $$ duelFieldDataDouble(random, context, leftFieldData, rightFieldData)[ FD ]
Line_60 $$ DirectoryReader perSegment = DirectoryReader.open(writer, true)-->Line_61 $$ CompositeReaderContext composite = perSegment.getContext()[ FD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_30 $$ for (int j = 0; j < numValues; ++j) [ CD ]
Line_12 $$ Set<Float> vals = new HashSet<Float>()-->Line_17 $$ vals.add(randomFloat())[ FD ]
Line_10 $$ int numValues = randomInt(maxNumValues)-->Line_13 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_52 $$ right = left = list.remove(0)-->Line_57 $$ IndexNumericFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT), true)[ FD ]
Line_45 $$ while (!list.isEmpty()) -->Line_57 $$ IndexNumericFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT), true)[ CD ]
Line_45 $$ while (!list.isEmpty()) -->Line_59 $$ duelFieldDataDouble(random, context, rightFieldData, leftFieldData)[ CD ]
Line_63 $$ for (LeafReaderContext atomicReaderContext : leaves) -->Line_64 $$ duelFieldDataDouble(random, atomicReaderContext, leftFieldData, rightFieldData)[ FD ]
Line_10 $$ int numValues = randomInt(maxNumValues)-->Line_26 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_9 $$ for (int i = 0; i < atLeast; i++) [ CD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_45 $$ while (!list.isEmpty()) [ CD ]
Line_26 $$ for (int j = 0; j < numValues; ++j) -->Line_30 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_4 $$ final DocumentMapper mapper = mapperService.documentMapperParser().parse("type", new CompressedXContent(mapping))-->Line_34 $$ final ParsedDocument d = mapper.parse("test", "type", Integer.toString(i), doc.bytes())[ FD ]
Line_49 $$ left = list.remove(random.nextInt(list.size()))-->Line_55 $$ IndexNumericFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT), true)[ FD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_13 $$ for (int j = 0; j < numValues; ++j) [ CD ]
Line_26 $$ for (int j = 0; j < numValues; ++j) -->Line_27 $$ doc = doc.value(values[j])[ CD ]
Line_48 $$ if (list.size() > 1) -->Line_49 $$ left = list.remove(random.nextInt(list.size()))[ CD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_42 $$ typeMap.put(new FieldDataType("double", Settings.builder().put("format", "doc_values")), Type.Double)[ CD ]
Line_47 $$ Entry<FieldDataType, Type> right-->Line_57 $$ IndexNumericFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT), true)[ FD ]
Line_6 $$ int atLeast = scaledRandomIntBetween(200, 1500)-->Line_9 $$ for (int i = 0; i < atLeast; i++) [ FD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_35 $$ writer.addDocument(d.rootDoc())[ CD ]
Line_11 $$ float def = randomBoolean() ? randomFloat() : Float.NaN-->Line_15 $$ vals.add(def)[ FD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_3 $$ final String mapping = XContentFactory.jsonBuilder().startObject().startObject("type").startObject("properties").startObject("float").field("type", "float").endObject().startObject("double").field("type", "double").endObject().endObject().endObject().endObject().string()[ CD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_7 $$ final int maxNumValues = randomBoolean() ? 1 : randomIntBetween(2, 10)[ CD ]
Line_41 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_43 $$ typeMap.put(new FieldDataType("float", Settings.builder().put("format", "doc_values")), Type.Float)[ FD ]
Line_41 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_42 $$ typeMap.put(new FieldDataType("double", Settings.builder().put("format", "doc_values")), Type.Double)[ FD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_29 $$ doc = doc.endArray().startArray("double")[ CD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_11 $$ float def = randomBoolean() ? randomFloat() : Float.NaN[ CD ]
Line_10 $$ int numValues = randomInt(maxNumValues)-->Line_30 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_48 $$ if (list.size() > 1) -->Line_50 $$ right = list.remove(random.nextInt(list.size()))[ CD ]
Line_55 $$ IndexNumericFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT), true)-->Line_59 $$ duelFieldDataDouble(random, context, rightFieldData, leftFieldData)[ FD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_6 $$ int atLeast = scaledRandomIntBetween(200, 1500)[ CD ]
Line_49 $$ left = list.remove(random.nextInt(list.size()))-->Line_52 $$ right = left = list.remove(0)[ FD ]
Line_46 $$ Entry<FieldDataType, Type> left-->Line_52 $$ right = left = list.remove(0)[ FD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_4 $$ final DocumentMapper mapper = mapperService.documentMapperParser().parse("type", new CompressedXContent(mapping))[ CD ]
Line_10 $$ int numValues = randomInt(maxNumValues)-->Line_20 $$ numValues = vals.size()[ FD ]
Line_47 $$ Entry<FieldDataType, Type> right-->Line_50 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_45 $$ while (!list.isEmpty()) -->Line_58 $$ duelFieldDataDouble(random, context, leftFieldData, rightFieldData)[ CD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_33 $$ doc = doc.endArray().endObject()[ CD ]
Line_45 $$ while (!list.isEmpty()) -->Line_54 $$ ifdService.clear()[ CD ]
Line_13 $$ for (int j = 0; j < numValues; ++j) -->Line_26 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_47 $$ Entry<FieldDataType, Type> right-->Line_52 $$ right = left = list.remove(0)[ FD ]
Line_40 $$ LeafReaderContext context = refreshReader()-->Line_59 $$ duelFieldDataDouble(random, context, rightFieldData, leftFieldData)[ FD ]
Line_41 $$ Map<FieldDataType, Type> typeMap = new HashMap()-->Line_44 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())[ FD ]
Line_45 $$ while (!list.isEmpty()) -->Line_48 $$ if (list.size() > 1) [ CD ]
Line_45 $$ while (!list.isEmpty()) -->Line_61 $$ CompositeReaderContext composite = perSegment.getContext()[ CD ]
Line_30 $$ for (int j = 0; j < numValues; ++j) -->Line_31 $$ doc = doc.value(values[j])[ CD ]
Line_45 $$ while (!list.isEmpty()) -->Line_60 $$ DirectoryReader perSegment = DirectoryReader.open(writer, true)[ CD ]
Line_5 $$ Random random = getRandom()-->Line_64 $$ duelFieldDataDouble(random, atomicReaderContext, leftFieldData, rightFieldData)[ FD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_8 $$ float[] values = new float[maxNumValues][ CD ]
Line_52 $$ right = left = list.remove(0)-->Line_55 $$ IndexNumericFieldData leftFieldData = getForField(left.getKey(), left.getValue().name().toLowerCase(Locale.ROOT), true)[ FD ]
Line_2 $$ public void testDuelDoubles() throws Exception -->Line_41 $$ Map<FieldDataType, Type> typeMap = new HashMap()[ CD ]
Line_9 $$ for (int i = 0; i < atLeast; i++) -->Line_25 $$ XContentBuilder doc = XContentFactory.jsonBuilder().startObject().startArray("float")[ CD ]
Line_5 $$ Random random = getRandom()-->Line_59 $$ duelFieldDataDouble(random, context, rightFieldData, leftFieldData)[ FD ]
Line_5 $$ Random random = getRandom()-->Line_50 $$ right = list.remove(random.nextInt(list.size()))[ FD ]
Line_57 $$ IndexNumericFieldData rightFieldData = getForField(right.getKey(), right.getValue().name().toLowerCase(Locale.ROOT), true)-->Line_59 $$ duelFieldDataDouble(random, context, rightFieldData, leftFieldData)[ FD ]
Line_44 $$ ArrayList<Entry<FieldDataType, Type>> list = new ArrayList(typeMap.entrySet())-->Line_52 $$ right = left = list.remove(0)[ FD ]
Line_13 $$ for (int j = 0; j < numValues; ++j) -->Line_30 $$ for (int j = 0; j < numValues; ++j) [ FD ]
Line_48 $$ if (list.size() > 1) -->Line_52 $$ right = left = list.remove(0)[ CD ]
