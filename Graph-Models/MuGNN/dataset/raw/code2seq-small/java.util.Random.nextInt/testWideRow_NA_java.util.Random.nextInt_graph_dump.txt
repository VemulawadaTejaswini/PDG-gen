Line_13 $$ for (int i = 0; i < size; i++) -->Line_18 $$ queryColumns.append(i)[ CD ]
Line_26 $$ for (int i = 0; i < high; i++) -->Line_28 $$ values.add(0)[ CD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_26 $$ for (int i = 0; i < high; i++) [ FD ]
Line_22 $$ String insert = "INSERT INTO cql_keyspace.table1 (k, c" + queryColumns.toString() + ") VALUES (?, ?" + queryValues.toString() + ")"-->Line_23 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(schema).using(insert).withBufferSizeInMB(1).build()[ FD ]
Line_6 $$ int size = 30000-->Line_30 $$ for (int j = 0; j < size; j++) [ FD ]
Line_7 $$ File tempdir = Files.createTempDir()-->Line_8 $$ File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE)[ FD ]
Line_30 $$ for (int j = 0; j < size; j++) -->Line_31 $$ values.add(i)[ CD ]
Line_12 $$ StringBuilder queryValues = new StringBuilder()-->Line_22 $$ String insert = "INSERT INTO cql_keyspace.table1 (k, c" + queryColumns.toString() + ") VALUES (?, ?" + queryValues.toString() + ")"[ FD ]
Line_6 $$ int size = 30000-->Line_13 $$ for (int i = 0; i < size; i++) [ FD ]
Line_11 $$ StringBuilder queryColumns = new StringBuilder()-->Line_22 $$ String insert = "INSERT INTO cql_keyspace.table1 (k, c" + queryColumns.toString() + ") VALUES (?, ?" + queryValues.toString() + ")"[ FD ]
Line_26 $$ for (int i = 0; i < high; i++) -->Line_31 $$ values.add(i)[ FD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_14 $$ schemaColumns.append("v")[ CD ]
Line_21 $$ String schema = "CREATE TABLE cql_keyspace.table1 (" + "  k int," + "  c int," + schemaColumns.toString() + "  PRIMARY KEY (k, c)" + ")"-->Line_23 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(schema).using(insert).withBufferSizeInMB(1).build()[ FD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_18 $$ queryColumns.append(i)[ FD ]
Line_26 $$ for (int i = 0; i < high; i++) -->Line_27 $$ List<Object> values = new ArrayList(size + 2)[ CD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_16 $$ schemaColumns.append(" int,")[ CD ]
Line_26 $$ for (int i = 0; i < high; i++) -->Line_29 $$ values.add(r.nextInt())[ CD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_15 $$ schemaColumns.append(i)[ CD ]
Line_10 $$ StringBuilder schemaColumns = new StringBuilder()-->Line_14 $$ schemaColumns.append("v")[ FD ]
Line_10 $$ StringBuilder schemaColumns = new StringBuilder()-->Line_15 $$ schemaColumns.append(i)[ FD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_15 $$ schemaColumns.append(i)[ FD ]
Line_11 $$ StringBuilder queryColumns = new StringBuilder()-->Line_17 $$ queryColumns.append(", v")[ FD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_31 $$ values.add(i)[ FD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_17 $$ queryColumns.append(", v")[ CD ]
Line_25 $$ Random r = new Random(0)-->Line_29 $$ values.add(r.nextInt())[ FD ]
Line_27 $$ List<Object> values = new ArrayList(size + 2)-->Line_28 $$ values.add(0)[ FD ]
Line_23 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(schema).using(insert).withBufferSizeInMB(1).build()-->Line_33 $$ writer.addRow(values)[ FD ]
Line_8 $$ File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE)-->Line_9 $$ assert dataDir.mkdirs()[ FD ]
Line_23 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(schema).using(insert).withBufferSizeInMB(1).build()-->Line_35 $$ writer.close()[ FD ]
Line_8 $$ File dataDir = new File(tempdir.getAbsolutePath() + File.separator + KS + File.separator + TABLE)-->Line_23 $$ CQLSSTableWriter writer = CQLSSTableWriter.builder().inDirectory(dataDir).forTable(schema).using(insert).withBufferSizeInMB(1).build()[ FD ]
Line_12 $$ StringBuilder queryValues = new StringBuilder()-->Line_19 $$ queryValues.append(", ?")[ FD ]
Line_11 $$ StringBuilder queryColumns = new StringBuilder()-->Line_18 $$ queryColumns.append(i)[ FD ]
Line_10 $$ StringBuilder schemaColumns = new StringBuilder()-->Line_16 $$ schemaColumns.append(" int,")[ FD ]
Line_26 $$ for (int i = 0; i < high; i++) -->Line_30 $$ for (int j = 0; j < size; j++) [ CD ]
Line_27 $$ List<Object> values = new ArrayList(size + 2)-->Line_29 $$ values.add(r.nextInt())[ FD ]
Line_27 $$ List<Object> values = new ArrayList(size + 2)-->Line_31 $$ values.add(i)[ FD ]
Line_27 $$ List<Object> values = new ArrayList(size + 2)-->Line_33 $$ writer.addRow(values)[ FD ]
Line_26 $$ for (int i = 0; i < high; i++) -->Line_33 $$ writer.addRow(values)[ CD ]
Line_13 $$ for (int i = 0; i < size; i++) -->Line_19 $$ queryValues.append(", ?")[ CD ]
Line_10 $$ StringBuilder schemaColumns = new StringBuilder()-->Line_21 $$ String schema = "CREATE TABLE cql_keyspace.table1 (" + "  k int," + "  c int," + schemaColumns.toString() + "  PRIMARY KEY (k, c)" + ")"[ FD ]
Line_24 $$ long high = 100-->Line_26 $$ for (int i = 0; i < high; i++) [ FD ]
