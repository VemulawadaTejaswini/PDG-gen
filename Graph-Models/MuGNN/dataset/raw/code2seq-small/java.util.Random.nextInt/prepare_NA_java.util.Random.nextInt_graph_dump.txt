Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_3 $$ this.trees = tree[ CD ]
Line_15 $$ if (keys.isEmpty()) -->Line_19 $$ int numKeys = keys.size()[ CD ]
Line_8 $$ List<DecoratedKey> keys = new ArrayList()-->Line_15 $$ if (keys.isEmpty()) [ FD ]
Line_4 $$ if (!tree.partitioner().preservesOrder()) -->Line_9 $$ Random random = new Random()[ CD ]
Line_8 $$ List<DecoratedKey> keys = new ArrayList()-->Line_22 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_31 $$ ranges = tree.invalids()[ CD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_31 $$ ranges = tree.invalids()[ FD ]
Line_10 $$ for (Range<Token> range : tree.ranges()) -->Line_11 $$ for (DecoratedKey sample : cfs.keySamples(range)) [ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_30 $$ logger.debug("Prepared AEService trees of size [ CD ]
Line_11 $$ for (DecoratedKey sample : cfs.keySamples(range)) -->Line_13 $$ keys.add(sample)[ FD ]
Line_4 $$ if (!tree.partitioner().preservesOrder()) -->Line_8 $$ List<DecoratedKey> keys = new ArrayList()[ CD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_4 $$ if (!tree.partitioner().preservesOrder()) [ FD ]
Line_8 $$ List<DecoratedKey> keys = new ArrayList()-->Line_19 $$ int numKeys = keys.size()[ FD ]
Line_22 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))-->Line_23 $$ if (!tree.split(dk.getToken()))[ FD ]
Line_9 $$ Random random = new Random()-->Line_22 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))[ FD ]
Line_19 $$ int numKeys = keys.size()-->Line_22 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))[ FD ]
Line_8 $$ List<DecoratedKey> keys = new ArrayList()-->Line_13 $$ keys.add(sample)[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_10 $$ for (Range<Token> range : tree.ranges()) [ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_11 $$ for (DecoratedKey sample : cfs.keySamples(range)) [ FD ]
Line_10 $$ for (Range<Token> range : tree.ranges()) -->Line_12 $$ assert range.contains(sample.getToken()) : "Token " + sample.getToken() + " is not within range " + desc.ranges[ FD ]
Line_15 $$ if (keys.isEmpty()) -->Line_26 $$ keys.clear()[ CD ]
Line_8 $$ List<DecoratedKey> keys = new ArrayList()-->Line_26 $$ keys.clear()[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_3 $$ this.trees = tree[ FD ]
Line_11 $$ for (DecoratedKey sample : cfs.keySamples(range)) -->Line_12 $$ assert range.contains(sample.getToken()) : "Token " + sample.getToken() + " is not within range " + desc.ranges[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_23 $$ if (!tree.split(dk.getToken()))[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_4 $$ if (!tree.partitioner().preservesOrder()) [ CD ]
