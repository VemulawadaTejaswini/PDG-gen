Line_7 $$ List<DecoratedKey> keys = new ArrayList()-->Line_17 $$ int numKeys = keys.size()[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_4 $$ if (!tree.partitioner().preservesOrder()) [ CD ]
Line_14 $$ if (keys.isEmpty()) -->Line_17 $$ int numKeys = keys.size()[ CD ]
Line_4 $$ if (!tree.partitioner().preservesOrder()) -->Line_8 $$ Random random = new Random()[ CD ]
Line_17 $$ int numKeys = keys.size()-->Line_19 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_20 $$ if (!tree.split(dk.getToken()))[ FD ]
Line_14 $$ if (keys.isEmpty()) -->Line_18 $$ while (true) [ CD ]
Line_14 $$ if (keys.isEmpty()) -->Line_23 $$ keys.clear()[ CD ]
Line_9 $$ for (Range<Token> range : tree.ranges()) -->Line_10 $$ for (DecoratedKey sample : cfs.keySamples(range)) [ FD ]
Line_7 $$ List<DecoratedKey> keys = new ArrayList()-->Line_19 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))[ FD ]
Line_10 $$ for (DecoratedKey sample : cfs.keySamples(range)) -->Line_12 $$ keys.add(sample)[ FD ]
Line_8 $$ Random random = new Random()-->Line_19 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))[ FD ]
Line_7 $$ List<DecoratedKey> keys = new ArrayList()-->Line_14 $$ if (keys.isEmpty()) [ FD ]
Line_18 $$ while (true) -->Line_19 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))[ CD ]
Line_18 $$ while (true) -->Line_20 $$ if (!tree.split(dk.getToken()))[ CD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_28 $$ ranges = tree.invalids()[ CD ]
Line_4 $$ if (!tree.partitioner().preservesOrder()) -->Line_7 $$ List<DecoratedKey> keys = new ArrayList()[ CD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_10 $$ for (DecoratedKey sample : cfs.keySamples(range)) [ FD ]
Line_9 $$ for (Range<Token> range : tree.ranges()) -->Line_15 $$ tree.init(range)[ FD ]
Line_9 $$ for (Range<Token> range : tree.ranges()) -->Line_11 $$ assert range.contains(sample.getToken()) : "Token " + sample.getToken() + " is not within range " + desc.ranges[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_3 $$ this.trees = tree[ FD ]
Line_4 $$ if (!tree.partitioner().preservesOrder()) -->Line_5 $$ tree.init()[ CD ]
Line_10 $$ for (DecoratedKey sample : cfs.keySamples(range)) -->Line_11 $$ assert range.contains(sample.getToken()) : "Token " + sample.getToken() + " is not within range " + desc.ranges[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_9 $$ for (Range<Token> range : tree.ranges()) [ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_15 $$ tree.init(range)[ FD ]
Line_19 $$ DecoratedKey dk = keys.get(random.nextInt(numKeys))-->Line_20 $$ if (!tree.split(dk.getToken()))[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_4 $$ if (!tree.partitioner().preservesOrder()) [ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_5 $$ tree.init()[ FD ]
Line_14 $$ if (keys.isEmpty()) -->Line_15 $$ tree.init(range)[ CD ]
Line_7 $$ List<DecoratedKey> keys = new ArrayList()-->Line_23 $$ keys.clear()[ FD ]
Line_7 $$ List<DecoratedKey> keys = new ArrayList()-->Line_12 $$ keys.add(sample)[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_27 $$ logger.debug("Prepared AEService trees of size [ CD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_28 $$ ranges = tree.invalids()[ FD ]
Line_2 $$ public void prepare(ColumnFamilyStore cfs, MerkleTrees tree) -->Line_3 $$ this.trees = tree[ CD ]
