Line_18 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())-->Line_19 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ FD ]
Line_4 $$ Path targetPath = inputOptions.getTargetPath()-->Line_5 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)[ FD ]
Line_4 $$ Path targetPath = inputOptions.getTargetPath()-->Line_6 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())[ FD ]
Line_15 $$ if (workDir == null) -->Line_16 $$ workDir = targetPath.getParent()[ CD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_28 $$ Path logPath = inputOptions.getLogPath()[ CD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_25 $$ CopyOutputFormat.setWorkingDirectory(job, targetPath)[ FD ]
Line_14 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_15 $$ if (workDir == null) [ FD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_34 $$ CopyOutputFormat.setOutputPath(job, logPath)[ CD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_13 $$ if (inputOptions.shouldAtomicCommit()) [ CD ]
Line_6 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())-->Line_16 $$ workDir = targetPath.getParent()[ FD ]
Line_19 $$ FileSystem workFS = workDir.getFileSystem(configuration)-->Line_20 $$ if (!DistCpUtils.compareFs(targetFS, workFS)) [ FD ]
Line_3 $$ final Configuration configuration = job.getConfiguration()-->Line_5 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)[ FD ]
Line_14 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_23 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ FD ]
Line_13 $$ if (inputOptions.shouldAtomicCommit()) -->Line_25 $$ CopyOutputFormat.setWorkingDirectory(job, targetPath)[ CD ]
Line_10 $$ if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) -->Line_11 $$ DistCpUtils.checkFileSystemXAttrSupport(targetFS)[ CD ]
Line_4 $$ Path targetPath = inputOptions.getTargetPath()-->Line_25 $$ CopyOutputFormat.setWorkingDirectory(job, targetPath)[ FD ]
Line_16 $$ workDir = targetPath.getParent()-->Line_19 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ FD ]
Line_7 $$ if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) -->Line_8 $$ DistCpUtils.checkFileSystemAclSupport(targetFS)[ CD ]
Line_5 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)-->Line_6 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())[ FD ]
Line_29 $$ if (logPath == null) -->Line_30 $$ logPath = new Path(metaFolder, "_logs")[ CD ]
Line_14 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_16 $$ workDir = targetPath.getParent()[ FD ]
Line_13 $$ if (inputOptions.shouldAtomicCommit()) -->Line_18 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ CD ]
Line_28 $$ Path logPath = inputOptions.getLogPath()-->Line_29 $$ if (logPath == null) [ FD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_5 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)[ CD ]
Line_6 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())-->Line_18 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ FD ]
Line_14 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_19 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ FD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_27 $$ CopyOutputFormat.setCommitDirectory(job, targetPath)[ FD ]
Line_30 $$ logPath = new Path(metaFolder, "_logs")-->Line_34 $$ CopyOutputFormat.setOutputPath(job, logPath)[ FD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_3 $$ final Configuration configuration = job.getConfiguration()[ FD ]
Line_5 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)-->Line_20 $$ if (!DistCpUtils.compareFs(targetFS, workFS)) [ FD ]
Line_6 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())-->Line_27 $$ CopyOutputFormat.setCommitDirectory(job, targetPath)[ FD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_4 $$ Path targetPath = inputOptions.getTargetPath()[ CD ]
Line_4 $$ Path targetPath = inputOptions.getTargetPath()-->Line_18 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ FD ]
Line_14 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_18 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ FD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_7 $$ if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) [ CD ]
Line_4 $$ Path targetPath = inputOptions.getTargetPath()-->Line_27 $$ CopyOutputFormat.setCommitDirectory(job, targetPath)[ FD ]
Line_13 $$ if (inputOptions.shouldAtomicCommit()) -->Line_19 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ CD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_29 $$ if (logPath == null) [ CD ]
Line_4 $$ Path targetPath = inputOptions.getTargetPath()-->Line_16 $$ workDir = targetPath.getParent()[ FD ]
Line_29 $$ if (logPath == null) -->Line_32 $$ LOG.info("DistCp job log path: " + logPath)[ CD ]
Line_13 $$ if (inputOptions.shouldAtomicCommit()) -->Line_23 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ CD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_23 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ FD ]
Line_18 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())-->Line_23 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ FD ]
Line_13 $$ if (inputOptions.shouldAtomicCommit()) -->Line_20 $$ if (!DistCpUtils.compareFs(targetFS, workFS)) [ CD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_3 $$ final Configuration configuration = job.getConfiguration()[ CD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_10 $$ if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) [ CD ]
Line_16 $$ workDir = targetPath.getParent()-->Line_18 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ FD ]
Line_6 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())-->Line_25 $$ CopyOutputFormat.setWorkingDirectory(job, targetPath)[ FD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_27 $$ CopyOutputFormat.setCommitDirectory(job, targetPath)[ CD ]
Line_28 $$ Path logPath = inputOptions.getLogPath()-->Line_30 $$ logPath = new Path(metaFolder, "_logs")[ FD ]
Line_13 $$ if (inputOptions.shouldAtomicCommit()) -->Line_15 $$ if (workDir == null) [ CD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_34 $$ CopyOutputFormat.setOutputPath(job, logPath)[ FD ]
Line_5 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)-->Line_11 $$ DistCpUtils.checkFileSystemXAttrSupport(targetFS)[ FD ]
Line_16 $$ workDir = targetPath.getParent()-->Line_23 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ FD ]
Line_3 $$ final Configuration configuration = job.getConfiguration()-->Line_19 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ FD ]
Line_2 $$ private void configureOutputFormat(Job job) throws IOException -->Line_6 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())[ CD ]
Line_5 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)-->Line_8 $$ DistCpUtils.checkFileSystemAclSupport(targetFS)[ FD ]
Line_13 $$ if (inputOptions.shouldAtomicCommit()) -->Line_14 $$ Path workDir = inputOptions.getAtomicWorkPath()[ CD ]
Line_28 $$ Path logPath = inputOptions.getLogPath()-->Line_34 $$ CopyOutputFormat.setOutputPath(job, logPath)[ FD ]
