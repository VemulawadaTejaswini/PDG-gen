Line_24 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())-->Line_25 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ FD ]
Line_10 $$ Path targetPath = inputOptions.getTargetPath()-->Line_31 $$ CopyOutputFormat.setWorkingDirectory(job, targetPath)[ FD ]
Line_19 $$ if (inputOptions.shouldAtomicCommit()) -->Line_26 $$ if (!DistCpUtils.compareFs(targetFS, workFS)) [ CD ]
Line_19 $$ if (inputOptions.shouldAtomicCommit()) -->Line_29 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ CD ]
Line_11 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)-->Line_17 $$ DistCpUtils.checkFileSystemXAttrSupport(targetFS)[ FD ]
Line_35 $$ if (logPath == null) -->Line_38 $$ LOG.info("DistCp job log path: " + logPath)[ CD ]
Line_12 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())-->Line_24 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ FD ]
Line_20 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_24 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ FD ]
Line_24 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())-->Line_29 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ FD ]
Line_34 $$ Path logPath = inputOptions.getLogPath()-->Line_40 $$ CopyOutputFormat.setOutputPath(job, logPath)[ FD ]
Line_10 $$ Path targetPath = inputOptions.getTargetPath()-->Line_22 $$ workDir = targetPath.getParent()[ FD ]
Line_25 $$ FileSystem workFS = workDir.getFileSystem(configuration)-->Line_26 $$ if (!DistCpUtils.compareFs(targetFS, workFS)) [ FD ]
Line_11 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)-->Line_14 $$ DistCpUtils.checkFileSystemAclSupport(targetFS)[ FD ]
Line_12 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())-->Line_22 $$ workDir = targetPath.getParent()[ FD ]
Line_12 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())-->Line_31 $$ CopyOutputFormat.setWorkingDirectory(job, targetPath)[ FD ]
Line_35 $$ if (logPath == null) -->Line_36 $$ logPath = new Path(metaFolder, "_logs")[ CD ]
Line_21 $$ if (workDir == null) -->Line_22 $$ workDir = targetPath.getParent()[ CD ]
Line_16 $$ if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.XATTR)) -->Line_17 $$ DistCpUtils.checkFileSystemXAttrSupport(targetFS)[ CD ]
Line_22 $$ workDir = targetPath.getParent()-->Line_25 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ FD ]
Line_19 $$ if (inputOptions.shouldAtomicCommit()) -->Line_20 $$ Path workDir = inputOptions.getAtomicWorkPath()[ CD ]
Line_11 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)-->Line_12 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())[ FD ]
Line_20 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_29 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ FD ]
Line_10 $$ Path targetPath = inputOptions.getTargetPath()-->Line_12 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())[ FD ]
Line_20 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_21 $$ if (workDir == null) [ FD ]
Line_9 $$ final Configuration configuration = job.getConfiguration()-->Line_25 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ FD ]
Line_20 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_22 $$ workDir = targetPath.getParent()[ FD ]
Line_10 $$ Path targetPath = inputOptions.getTargetPath()-->Line_24 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ FD ]
Line_34 $$ Path logPath = inputOptions.getLogPath()-->Line_36 $$ logPath = new Path(metaFolder, "_logs")[ FD ]
Line_19 $$ if (inputOptions.shouldAtomicCommit()) -->Line_31 $$ CopyOutputFormat.setWorkingDirectory(job, targetPath)[ CD ]
Line_9 $$ final Configuration configuration = job.getConfiguration()-->Line_11 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)[ FD ]
Line_20 $$ Path workDir = inputOptions.getAtomicWorkPath()-->Line_25 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ FD ]
Line_19 $$ if (inputOptions.shouldAtomicCommit()) -->Line_24 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ CD ]
Line_34 $$ Path logPath = inputOptions.getLogPath()-->Line_35 $$ if (logPath == null) [ FD ]
Line_22 $$ workDir = targetPath.getParent()-->Line_24 $$ workDir = new Path(workDir, WIP_PREFIX + targetPath.getName() + rand.nextInt())[ FD ]
Line_11 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)-->Line_26 $$ if (!DistCpUtils.compareFs(targetFS, workFS)) [ FD ]
Line_19 $$ if (inputOptions.shouldAtomicCommit()) -->Line_25 $$ FileSystem workFS = workDir.getFileSystem(configuration)[ CD ]
Line_13 $$ if (inputOptions.shouldPreserve(DistCpOptions.FileAttribute.ACL)) -->Line_14 $$ DistCpUtils.checkFileSystemAclSupport(targetFS)[ CD ]
Line_10 $$ Path targetPath = inputOptions.getTargetPath()-->Line_33 $$ CopyOutputFormat.setCommitDirectory(job, targetPath)[ FD ]
Line_36 $$ logPath = new Path(metaFolder, "_logs")-->Line_40 $$ CopyOutputFormat.setOutputPath(job, logPath)[ FD ]
Line_19 $$ if (inputOptions.shouldAtomicCommit()) -->Line_21 $$ if (workDir == null) [ CD ]
Line_22 $$ workDir = targetPath.getParent()-->Line_29 $$ CopyOutputFormat.setWorkingDirectory(job, workDir)[ FD ]
Line_12 $$ targetPath = targetPath.makeQualified(targetFS.getUri(), targetFS.getWorkingDirectory())-->Line_33 $$ CopyOutputFormat.setCommitDirectory(job, targetPath)[ FD ]
Line_10 $$ Path targetPath = inputOptions.getTargetPath()-->Line_11 $$ FileSystem targetFS = targetPath.getFileSystem(configuration)[ FD ]
