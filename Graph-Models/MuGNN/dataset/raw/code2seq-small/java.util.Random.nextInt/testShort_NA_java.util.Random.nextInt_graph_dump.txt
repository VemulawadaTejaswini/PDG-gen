Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_14 $$ BigEndianCodec.putShort(bytes, i * 2, shorts[i])[ CD ]
Line_4 $$ short[] shorts = new short[_COUNT]-->Line_21 $$ Assert.assertTrue(Arrays.equals(shorts, newShorts))[ FD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_16 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_6 $$ shorts[i] = (short) _random.nextInt()[ CD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_11 $$ ShortBuffer shortBuffer = byteBuffer.asShortBuffer()-->Line_13 $$ shortBuffer.put(shorts[i])[ FD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_16 $$ Assert.assertArrayEquals(byteBuffer.array(), bytes)[ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_18 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_19 $$ newShorts[i] = BigEndianCodec.getShort(bytes, i * 2)[ FD ]
Line_18 $$ for (int i = 0; i < _COUNT; i++) -->Line_19 $$ newShorts[i] = BigEndianCodec.getShort(bytes, i * 2)[ CD ]
Line_5 $$ for (int i = 0; i < _COUNT; i++) -->Line_12 $$ for (int i = 0; i < _COUNT; i++) [ FD ]
Line_12 $$ for (int i = 0; i < _COUNT; i++) -->Line_13 $$ shortBuffer.put(shorts[i])[ CD ]
Line_8 $$ byte[] bytes = new byte[_COUNT * 2]-->Line_14 $$ BigEndianCodec.putShort(bytes, i * 2, shorts[i])[ FD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_11 $$ ShortBuffer shortBuffer = byteBuffer.asShortBuffer()[ FD ]
Line_9 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(bytes.length)-->Line_10 $$ byteBuffer.order(ByteOrder.BIG_ENDIAN)[ FD ]
Line_17 $$ short[] newShorts = new short[_COUNT]-->Line_21 $$ Assert.assertTrue(Arrays.equals(shorts, newShorts))[ FD ]
