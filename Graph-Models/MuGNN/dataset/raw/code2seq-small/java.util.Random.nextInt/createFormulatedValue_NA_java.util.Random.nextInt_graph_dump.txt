Line_57 $$ if (value instanceof SimpleValue) -->Line_73 $$ while (columns.hasNext()) [ CD ]
Line_75 $$ Formula formula = new Formula()-->Line_89 $$ formula.setFormula(formulaString)[ FD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_51 $$ newProperty.setPropertyAccessorName(current.getPropertyAccessorName())[ FD ]
Line_86 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"-->Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_41 $$ Property newProperty = new Property()-->Line_46 $$ newProperty.setMetaAttributes(current.getMetaAttributes())[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_48 $$ newProperty.setNaturalIdentifier(false)[ CD ]
Line_32 $$ fromAndWhere = fromAndWhereSb.substring(0, fromAndWhereSb.length() - 5)-->Line_84 $$ if (fromAndWhere != null) [ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_3 $$ Value element = collection.getElement()[ CD ]
Line_17 $$ if (referencedPropertyName == null) -->Line_21 $$ referencedEntityColumns = referencedProperty.getColumnIterator()[ CD ]
Line_39 $$ while (properties.hasNext()) -->Line_53 $$ newProperty.setValue(createFormulatedValue(current.getValue(), collection, targetPropertyName, associatedClass, buildingContext))[ CD ]
Line_37 $$ Component indexComponent = new Component(getBuildingContext().getMetadataCollector(), collection)-->Line_54 $$ indexComponent.addProperty(newProperty)[ FD ]
Line_23 $$ String alias = "$alias$"-->Line_30 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_60 $$ if (value instanceof ManyToOne) [ FD ]
Line_62 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_65 $$ targetManyToOne.setReferencedEntityName(sourceManyToOne.getReferencedEntityName())[ FD ]
Line_77 $$ if (current instanceof Column) -->Line_79 $$ if (current instanceof Formula) [ CD ]
Line_73 $$ while (columns.hasNext()) -->Line_89 $$ formula.setFormula(formulaString)[ CD ]
Line_59 $$ SimpleValue targetValue-->Line_68 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ FD ]
Line_36 $$ Iterator properties = component.getPropertyIterator()-->Line_40 $$ Property current = (Property) properties.next()[ FD ]
Line_84 $$ if (fromAndWhere != null) -->Line_86 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ CD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_43 $$ newProperty.setValueGenerationStrategy(current.getValueGenerationStrategy())[ FD ]
Line_7 $$ if (element instanceof ToOne) -->Line_9 $$ if (element instanceof DependantValue) [ CD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_16 $$ Iterator referencedEntityColumns[ CD ]
Line_41 $$ Property newProperty = new Property()-->Line_45 $$ newProperty.setUpdateable(false)[ FD ]
Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())-->Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_78 $$ formulaString = ((Column) current).getQuotedName()-->Line_89 $$ formula.setFormula(formulaString)[ FD ]
Line_26 $$ Iterator collectionTableColumns = element.getColumnIterator()-->Line_27 $$ while (collectionTableColumns.hasNext()) [ FD ]
Line_66 $$ targetValue = targetManyToOne-->Line_69 $$ targetValue.copyTypeFrom(sourceValue)[ FD ]
Line_17 $$ if (referencedPropertyName == null) -->Line_20 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ CD ]
Line_57 $$ if (value instanceof SimpleValue) -->Line_58 $$ SimpleValue sourceValue = (SimpleValue) value[ CD ]
Line_39 $$ while (properties.hasNext()) -->Line_49 $$ newProperty.setOptional(false)[ CD ]
Line_34 $$ if (value instanceof Component) -->Line_37 $$ Component indexComponent = new Component(getBuildingContext().getMetadataCollector(), collection)[ CD ]
Line_41 $$ Property newProperty = new Property()-->Line_47 $$ newProperty.setName(current.getName())[ FD ]
Line_41 $$ Property newProperty = new Property()-->Line_51 $$ newProperty.setPropertyAccessorName(current.getPropertyAccessorName())[ FD ]
Line_76 $$ String formulaString-->Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_11 $$ referencedPropertyName = collection.getReferencedPropertyName()-->Line_20 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ FD ]
Line_60 $$ if (value instanceof ManyToOne) -->Line_66 $$ targetValue = targetManyToOne[ CD ]
Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()-->Line_17 $$ if (referencedPropertyName == null) [ FD ]
Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())-->Line_86 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ FD ]
Line_60 $$ if (value instanceof ManyToOne) -->Line_64 $$ targetManyToOne.setLazy(true)[ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_34 $$ if (value instanceof Component) [ FD ]
Line_18 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()-->Line_21 $$ referencedEntityColumns = referencedProperty.getColumnIterator()[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_42 $$ newProperty.setCascade(current.getCascade())[ CD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_26 $$ Iterator collectionTableColumns = element.getColumnIterator()[ CD ]
Line_80 $$ formulaString = ((Formula) current).getFormula()-->Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_41 $$ Property newProperty = new Property()[ CD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_47 $$ newProperty.setName(current.getName())[ FD ]
Line_16 $$ Iterator referencedEntityColumns-->Line_21 $$ referencedEntityColumns = referencedProperty.getColumnIterator()[ FD ]
Line_71 $$ Iterator columns = sourceValue.getColumnIterator()-->Line_73 $$ while (columns.hasNext()) [ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_18 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_32 $$ fromAndWhere = fromAndWhereSb.substring(0, fromAndWhereSb.length() - 5)[ CD ]
Line_59 $$ SimpleValue targetValue-->Line_69 $$ targetValue.copyTypeFrom(sourceValue)[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_40 $$ Property current = (Property) properties.next()[ CD ]
Line_17 $$ if (referencedPropertyName == null) -->Line_18 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()[ CD ]
Line_3 $$ Value element = collection.getElement()-->Line_9 $$ if (element instanceof DependantValue) [ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_54 $$ indexComponent.addProperty(newProperty)[ CD ]
Line_73 $$ while (columns.hasNext()) -->Line_74 $$ Object current = columns.next()[ CD ]
Line_37 $$ Component indexComponent = new Component(getBuildingContext().getMetadataCollector(), collection)-->Line_38 $$ indexComponent.setComponentClassName(component.getComponentClassName())[ FD ]
Line_34 $$ if (value instanceof Component) -->Line_57 $$ if (value instanceof SimpleValue) [ CD ]
Line_41 $$ Property newProperty = new Property()-->Line_43 $$ newProperty.setValueGenerationStrategy(current.getValueGenerationStrategy())[ FD ]
Line_62 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_63 $$ targetManyToOne.setFetchMode(FetchMode.DEFAULT)[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_52 $$ newProperty.setSelectable(current.isSelectable())[ CD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_7 $$ if (element instanceof ToOne) [ CD ]
Line_24 $$ StringBuilder fromAndWhereSb = new StringBuilder(" from ").append(associatedClass.getTable().getName()).append(" ").append(alias).append(" where ")-->Line_30 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ FD ]
Line_76 $$ String formulaString-->Line_78 $$ formulaString = ((Column) current).getQuotedName()[ FD ]
Line_35 $$ Component component = (Component) value-->Line_36 $$ Iterator properties = component.getPropertyIterator()[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_53 $$ newProperty.setValue(createFormulatedValue(current.getValue(), collection, targetPropertyName, associatedClass, buildingContext))[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_3 $$ Value element = collection.getElement()[ FD ]
Line_27 $$ while (collectionTableColumns.hasNext()) -->Line_30 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ CD ]
Line_84 $$ if (fromAndWhere != null) -->Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ CD ]
Line_24 $$ StringBuilder fromAndWhereSb = new StringBuilder(" from ").append(associatedClass.getTable().getName()).append(" ").append(alias).append(" where ")-->Line_32 $$ fromAndWhere = fromAndWhereSb.substring(0, fromAndWhereSb.length() - 5)[ FD ]
Line_36 $$ Iterator properties = component.getPropertyIterator()-->Line_39 $$ while (properties.hasNext()) [ FD ]
Line_74 $$ Object current = columns.next()-->Line_79 $$ if (current instanceof Formula) [ FD ]
Line_78 $$ formulaString = ((Column) current).getQuotedName()-->Line_86 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ FD ]
Line_84 $$ if (fromAndWhere != null) -->Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ CD ]
Line_60 $$ if (value instanceof ManyToOne) -->Line_61 $$ ManyToOne sourceManyToOne = (ManyToOne) sourceValue[ CD ]
Line_74 $$ Object current = columns.next()-->Line_82 $$ throw new AssertionFailure("Unknown element in column iterator: " + current.getClass())[ FD ]
Line_80 $$ formulaString = ((Formula) current).getFormula()-->Line_89 $$ formula.setFormula(formulaString)[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_6 $$ String referencedPropertyName = null[ CD ]
Line_86 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"-->Line_89 $$ formula.setFormula(formulaString)[ FD ]
Line_60 $$ if (value instanceof ManyToOne) -->Line_68 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_11 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_45 $$ newProperty.setUpdateable(false)[ CD ]
Line_3 $$ Value element = collection.getElement()-->Line_26 $$ Iterator collectionTableColumns = element.getColumnIterator()[ FD ]
Line_9 $$ if (element instanceof DependantValue) -->Line_10 $$ if (propertyName != null) [ CD ]
Line_41 $$ Property newProperty = new Property()-->Line_50 $$ newProperty.setPersistentClass(current.getPersistentClass())[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_62 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ FD ]
Line_61 $$ ManyToOne sourceManyToOne = (ManyToOne) sourceValue-->Line_65 $$ targetManyToOne.setReferencedEntityName(sourceManyToOne.getReferencedEntityName())[ FD ]
Line_6 $$ String referencedPropertyName = null-->Line_20 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ FD ]
Line_58 $$ SimpleValue sourceValue = (SimpleValue) value-->Line_71 $$ Iterator columns = sourceValue.getColumnIterator()[ FD ]
Line_3 $$ Value element = collection.getElement()-->Line_7 $$ if (element instanceof ToOne) [ FD ]
Line_77 $$ if (current instanceof Column) -->Line_78 $$ formulaString = ((Column) current).getQuotedName()[ CD ]
Line_4 $$ String fromAndWhere = null-->Line_32 $$ fromAndWhere = fromAndWhereSb.substring(0, fromAndWhereSb.length() - 5)[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_24 $$ StringBuilder fromAndWhereSb = new StringBuilder(" from ").append(associatedClass.getTable().getName()).append(" ").append(alias).append(" where ")[ FD ]
Line_57 $$ if (value instanceof SimpleValue) -->Line_72 $$ Random random = new Random()[ CD ]
Line_39 $$ while (properties.hasNext()) -->Line_51 $$ newProperty.setPropertyAccessorName(current.getPropertyAccessorName())[ CD ]
Line_39 $$ while (properties.hasNext()) -->Line_50 $$ newProperty.setPersistentClass(current.getPersistentClass())[ CD ]
Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()-->Line_11 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_5 $$ if (!(element instanceof OneToMany)) [ CD ]
Line_72 $$ Random random = new Random()-->Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_26 $$ Iterator collectionTableColumns = element.getColumnIterator()-->Line_28 $$ Column colColumn = (Column) collectionTableColumns.next()[ FD ]
Line_27 $$ while (collectionTableColumns.hasNext()) -->Line_29 $$ Column refColumn = (Column) referencedEntityColumns.next()[ CD ]
Line_79 $$ if (current instanceof Formula) -->Line_80 $$ formulaString = ((Formula) current).getFormula()[ CD ]
Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())-->Line_89 $$ formula.setFormula(formulaString)[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_24 $$ StringBuilder fromAndWhereSb = new StringBuilder(" from ").append(associatedClass.getTable().getName()).append(" ").append(alias).append(" where ")[ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_68 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_47 $$ newProperty.setName(current.getName())[ CD ]
Line_34 $$ if (value instanceof Component) -->Line_56 $$ return indexComponent[ CD ]
Line_76 $$ String formulaString-->Line_86 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ FD ]
Line_68 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_69 $$ targetValue.copyTypeFrom(sourceValue)[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_94 $$ throw new AssertionFailure("Unknown type encounters for map key: " + value.getClass())[ FD ]
Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()-->Line_20 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ FD ]
Line_20 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)-->Line_21 $$ referencedEntityColumns = referencedProperty.getColumnIterator()[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_46 $$ newProperty.setMetaAttributes(current.getMetaAttributes())[ CD ]
Line_73 $$ while (columns.hasNext()) -->Line_84 $$ if (fromAndWhere != null) [ CD ]
Line_41 $$ Property newProperty = new Property()-->Line_49 $$ newProperty.setOptional(false)[ FD ]
Line_28 $$ Column colColumn = (Column) collectionTableColumns.next()-->Line_30 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ FD ]
Line_75 $$ Formula formula = new Formula()-->Line_90 $$ targetValue.addFormula(formula)[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_20 $$ Property referencedProperty = associatedClass.getRecursiveProperty(referencedPropertyName)[ FD ]
Line_10 $$ if (propertyName != null) -->Line_11 $$ referencedPropertyName = collection.getReferencedPropertyName()[ CD ]
Line_60 $$ if (value instanceof ManyToOne) -->Line_69 $$ targetValue.copyTypeFrom(sourceValue)[ CD ]
Line_76 $$ String formulaString-->Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_50 $$ newProperty.setPersistentClass(current.getPersistentClass())[ FD ]
Line_59 $$ SimpleValue targetValue-->Line_90 $$ targetValue.addFormula(formula)[ FD ]
Line_66 $$ targetValue = targetManyToOne-->Line_90 $$ targetValue.addFormula(formula)[ FD ]
Line_6 $$ String referencedPropertyName = null-->Line_11 $$ referencedPropertyName = collection.getReferencedPropertyName()[ FD ]
Line_71 $$ Iterator columns = sourceValue.getColumnIterator()-->Line_74 $$ Object current = columns.next()[ FD ]
Line_73 $$ while (columns.hasNext()) -->Line_90 $$ targetValue.addFormula(formula)[ CD ]
Line_60 $$ if (value instanceof ManyToOne) -->Line_62 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ CD ]
Line_73 $$ while (columns.hasNext()) -->Line_77 $$ if (current instanceof Column) [ CD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_17 $$ if (referencedPropertyName == null) [ CD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_46 $$ newProperty.setMetaAttributes(current.getMetaAttributes())[ FD ]
Line_23 $$ String alias = "$alias$"-->Line_24 $$ StringBuilder fromAndWhereSb = new StringBuilder(" from ").append(associatedClass.getTable().getName()).append(" ").append(alias).append(" where ")[ FD ]
Line_34 $$ if (value instanceof Component) -->Line_38 $$ indexComponent.setComponentClassName(component.getComponentClassName())[ CD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_79 $$ if (current instanceof Formula) [ FD ]
Line_34 $$ if (value instanceof Component) -->Line_36 $$ Iterator properties = component.getPropertyIterator()[ CD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_4 $$ String fromAndWhere = null[ CD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_52 $$ newProperty.setSelectable(current.isSelectable())[ FD ]
Line_73 $$ while (columns.hasNext()) -->Line_75 $$ Formula formula = new Formula()[ CD ]
Line_80 $$ formulaString = ((Formula) current).getFormula()-->Line_86 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"[ FD ]
Line_16 $$ Iterator referencedEntityColumns-->Line_29 $$ Column refColumn = (Column) referencedEntityColumns.next()[ FD ]
Line_78 $$ formulaString = ((Column) current).getQuotedName()-->Line_80 $$ formulaString = ((Formula) current).getFormula()[ FD ]
Line_66 $$ targetValue = targetManyToOne-->Line_68 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())[ FD ]
Line_58 $$ SimpleValue sourceValue = (SimpleValue) value-->Line_69 $$ targetValue.copyTypeFrom(sourceValue)[ FD ]
Line_41 $$ Property newProperty = new Property()-->Line_42 $$ newProperty.setCascade(current.getCascade())[ FD ]
Line_76 $$ String formulaString-->Line_80 $$ formulaString = ((Formula) current).getFormula()[ FD ]
Line_60 $$ if (value instanceof ManyToOne) -->Line_63 $$ targetManyToOne.setFetchMode(FetchMode.DEFAULT)[ CD ]
Line_57 $$ if (value instanceof SimpleValue) -->Line_71 $$ Iterator columns = sourceValue.getColumnIterator()[ CD ]
Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))-->Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_34 $$ if (value instanceof Component) [ CD ]
Line_21 $$ referencedEntityColumns = referencedProperty.getColumnIterator()-->Line_29 $$ Column refColumn = (Column) referencedEntityColumns.next()[ FD ]
Line_78 $$ formulaString = ((Column) current).getQuotedName()-->Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_27 $$ while (collectionTableColumns.hasNext()) [ CD ]
Line_41 $$ Property newProperty = new Property()-->Line_44 $$ newProperty.setInsertable(false)[ FD ]
Line_41 $$ Property newProperty = new Property()-->Line_52 $$ newProperty.setSelectable(current.isSelectable())[ FD ]
Line_4 $$ String fromAndWhere = null-->Line_84 $$ if (fromAndWhere != null) [ FD ]
Line_34 $$ if (value instanceof Component) -->Line_35 $$ Component component = (Component) value[ CD ]
Line_11 $$ referencedPropertyName = collection.getReferencedPropertyName()-->Line_17 $$ if (referencedPropertyName == null) [ FD ]
Line_62 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_66 $$ targetValue = targetManyToOne[ FD ]
Line_18 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()-->Line_29 $$ Column refColumn = (Column) referencedEntityColumns.next()[ FD ]
Line_29 $$ Column refColumn = (Column) referencedEntityColumns.next()-->Line_30 $$ fromAndWhereSb.append(alias).append('.').append(refColumn.getQuotedName()).append('=').append(colColumn.getQuotedName()).append(" and ")[ FD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_42 $$ newProperty.setCascade(current.getCascade())[ FD ]
Line_27 $$ while (collectionTableColumns.hasNext()) -->Line_28 $$ Column colColumn = (Column) collectionTableColumns.next()[ CD ]
Line_39 $$ while (properties.hasNext()) -->Line_43 $$ newProperty.setValueGenerationStrategy(current.getValueGenerationStrategy())[ CD ]
Line_41 $$ Property newProperty = new Property()-->Line_54 $$ indexComponent.addProperty(newProperty)[ FD ]
Line_86 $$ formulaString = "(select " + formulaString + fromAndWhere + ")"-->Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
Line_57 $$ if (value instanceof SimpleValue) -->Line_60 $$ if (value instanceof ManyToOne) [ CD ]
Line_76 $$ String formulaString-->Line_89 $$ formula.setFormula(formulaString)[ FD ]
Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))-->Line_89 $$ formula.setFormula(formulaString)[ FD ]
Line_59 $$ SimpleValue targetValue-->Line_66 $$ targetValue = targetManyToOne[ FD ]
Line_5 $$ if (!(element instanceof OneToMany)) -->Line_23 $$ String alias = "$alias$"[ CD ]
Line_35 $$ Component component = (Component) value-->Line_38 $$ indexComponent.setComponentClassName(component.getComponentClassName())[ FD ]
Line_2 $$ protected Value createFormulatedValue(Value value, Collection collection, String targetPropertyName, PersistentClass associatedClass, MetadataBuildingContext buildingContext) -->Line_57 $$ if (value instanceof SimpleValue) [ FD ]
Line_68 $$ targetValue = new SimpleValue(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_90 $$ targetValue.addFormula(formula)[ FD ]
Line_6 $$ String referencedPropertyName = null-->Line_17 $$ if (referencedPropertyName == null) [ FD ]
Line_57 $$ if (value instanceof SimpleValue) -->Line_92 $$ return targetValue[ CD ]
Line_60 $$ if (value instanceof ManyToOne) -->Line_65 $$ targetManyToOne.setReferencedEntityName(sourceManyToOne.getReferencedEntityName())[ CD ]
Line_78 $$ formulaString = ((Column) current).getQuotedName()-->Line_87 $$ formulaString = StringHelper.replace(formulaString, "$alias$", "a" + random.nextInt(16))[ FD ]
Line_62 $$ ManyToOne targetManyToOne = new ManyToOne(getBuildingContext().getMetadataCollector(), collection.getCollectionTable())-->Line_64 $$ targetManyToOne.setLazy(true)[ FD ]
Line_6 $$ String referencedPropertyName = null-->Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()[ FD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_77 $$ if (current instanceof Column) [ FD ]
Line_41 $$ Property newProperty = new Property()-->Line_53 $$ newProperty.setValue(createFormulatedValue(current.getValue(), collection, targetPropertyName, associatedClass, buildingContext))[ FD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_82 $$ throw new AssertionFailure("Unknown element in column iterator: " + current.getClass())[ FD ]
Line_74 $$ Object current = columns.next()-->Line_77 $$ if (current instanceof Column) [ FD ]
Line_7 $$ if (element instanceof ToOne) -->Line_8 $$ referencedPropertyName = ((ToOne) element).getReferencedPropertyName()[ CD ]
Line_16 $$ Iterator referencedEntityColumns-->Line_18 $$ referencedEntityColumns = associatedClass.getIdentifier().getColumnIterator()[ FD ]
Line_57 $$ if (value instanceof SimpleValue) -->Line_59 $$ SimpleValue targetValue[ CD ]
Line_40 $$ Property current = (Property) properties.next()-->Line_53 $$ newProperty.setValue(createFormulatedValue(current.getValue(), collection, targetPropertyName, associatedClass, buildingContext))[ FD ]
Line_73 $$ while (columns.hasNext()) -->Line_76 $$ String formulaString[ CD ]
Line_41 $$ Property newProperty = new Property()-->Line_48 $$ newProperty.setNaturalIdentifier(false)[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_44 $$ newProperty.setInsertable(false)[ CD ]
Line_34 $$ if (value instanceof Component) -->Line_39 $$ while (properties.hasNext()) [ CD ]
Line_80 $$ formulaString = ((Formula) current).getFormula()-->Line_85 $$ formulaString = Template.renderWhereStringTemplate(formulaString, "$alias$", new HSQLDialect())[ FD ]
