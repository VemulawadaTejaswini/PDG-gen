Line_73 $$ for (int i = N; i >= 0; i--) -->Line_76 $$ Matcher mat = pat.matcher(processTreeDump)[ CD ]
Line_30 $$ Thread t = new RogueTaskThread()-->Line_31 $$ t.start()[ FD ]
Line_13 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_19 $$ pidFile = TEST_ROOT_DIR + File.separator + tempFile.getName()[ FD ]
Line_73 $$ for (int i = N; i >= 0; i--) -->Line_77 $$ Assert.assertTrue("Process-tree dump doesn't contain the cmdLineDump of " + i + "th process!", mat.find())[ CD ]
Line_74 $$ String cmdLineDump = "\\|- [0-9]+ [0-9]+ [0-9]+ [0-9]+ \\(sh\\)" + " [0-9]+ [0-9]+ [0-9]+ [0-9]+ sh " + shellScript + " " + i-->Line_75 $$ Pattern pat = Pattern.compile(cmdLineDump)[ FD ]
Line_13 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_14 $$ tempFile.deleteOnExit()[ FD ]
Line_76 $$ Matcher mat = pat.matcher(processTreeDump)-->Line_77 $$ Assert.assertTrue("Process-tree dump doesn't contain the cmdLineDump of " + i + "th process!", mat.find())[ FD ]
Line_55 $$ for (int tries = 100; tries > 0; tries--) -->Line_63 $$ if (!isAlive) [ CD ]
Line_13 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_18 $$ tempFile.deleteOnExit()[ FD ]
Line_23 $$ FileWriter fWriter = new FileWriter(shellScript)-->Line_25 $$ fWriter.close()[ FD ]
Line_73 $$ for (int i = N; i >= 0; i--) -->Line_75 $$ Pattern pat = Pattern.compile(cmdLineDump)[ CD ]
Line_34 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_90 $$ Assert.assertTrue(p.toString().equals("[ ]"))[ FD ]
Line_73 $$ for (int i = N; i >= 0; i--) -->Line_74 $$ String cmdLineDump = "\\|- [0-9]+ [0-9]+ [0-9]+ [0-9]+ \\(sh\\)" + " [0-9]+ [0-9]+ [0-9]+ [0-9]+ sh " + shellScript + " " + i[ CD ]
Line_55 $$ for (int tries = 100; tries > 0; tries--) -->Line_66 $$ Thread.sleep(100)[ CD ]
Line_34 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_89 $$ Assert.assertTrue("Cumulative vmem for the gone-process is " + p.getCumulativeVmem() + " . It should be zero.", p.getCumulativeVmem() == 0)[ FD ]
Line_32 $$ String pid = getRogueTaskPID()-->Line_88 $$ Assert.assertFalse("ProcessTree must have been gone", isAlive(pid))[ FD ]
Line_30 $$ Thread t = new RogueTaskThread()-->Line_81 $$ t.join(2000)[ FD ]
Line_13 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_15 $$ shellScript = TEST_ROOT_DIR + File.separator + tempFile.getName()[ FD ]
Line_34 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_37 $$ LOG.info("ProcessTree: " + p.toString())[ FD ]
Line_55 $$ for (int tries = 100; tries > 0; tries--) -->Line_56 $$ if (isSetsidAvailable()) [ CD ]
Line_54 $$ boolean isAlive = true-->Line_63 $$ if (!isAlive) [ FD ]
Line_75 $$ Pattern pat = Pattern.compile(cmdLineDump)-->Line_76 $$ Matcher mat = pat.matcher(processTreeDump)[ FD ]
Line_34 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_49 $$ LOG.info("ProcessTree: " + p.toString())[ FD ]
Line_32 $$ String pid = getRogueTaskPID()-->Line_34 $$ ProcfsBasedProcessTree p = createProcessTree(pid)[ FD ]
Line_68 $$ if (isAlive) -->Line_69 $$ fail("ProcessTree shouldn't be alive")[ CD ]
