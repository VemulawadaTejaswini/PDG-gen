Line_48 $$ isAlive = isAnyProcessInTreeAlive(p)-->Line_52 $$ if (!isAlive) [ FD ]
Line_62 $$ for (int i = N; i >= 0; i--) -->Line_63 $$ String cmdLineDump = "\\|- [0-9]+ [0-9]+ [0-9]+ [0-9]+ \\(sh\\)" + " [0-9]+ [0-9]+ [0-9]+ [0-9]+ sh " + shellScript + " " + i[ CD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_76 $$ Assert.assertTrue("Cumulative vmem for the gone-process is " + p.getCumulativeVmem() + " . It should be zero.", p.getCumulativeVmem() == 0)[ FD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_31 $$ p.updateProcessTree()[ FD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_74 $$ p.updateProcessTree()[ FD ]
Line_33 $$ File leaf = new File(lowestDescendant)-->Line_34 $$ while (!leaf.exists()) [ FD ]
Line_46 $$ for (int tries = 100; tries > 0; tries--) -->Line_52 $$ if (!isAlive) [ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_61 $$ Assert.assertTrue("Process-tree dump doesn't start with a proper header", processTreeDump.startsWith("\t|- PID PPID PGRPID SESSID CMD_NAME " + "USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) " + "RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n"))[ CD ]
Line_11 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_15 $$ tempFile.deleteOnExit()[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_45 $$ boolean isAlive = true[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_76 $$ Assert.assertTrue("Cumulative vmem for the gone-process is " + p.getCumulativeVmem() + " . It should be zero.", p.getCumulativeVmem() == 0)[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_28 $$ String pid = getRogueTaskPID()[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_31 $$ p.updateProcessTree()[ CD ]
Line_26 $$ Thread t = new RogueTaskThread()-->Line_69 $$ t.join(2000)[ FD ]
Line_62 $$ for (int i = N; i >= 0; i--) -->Line_65 $$ Matcher mat = pat.matcher(processTreeDump)[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_46 $$ for (int tries = 100; tries > 0; tries--) [ CD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_42 $$ LOG.info("ProcessTree: " + p.toString())[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_32 $$ LOG.info("ProcessTree: " + p.toString())[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_43 $$ String processTreeDump = p.getProcessTreeDump()[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_15 $$ tempFile.deleteOnExit()[ CD ]
Line_28 $$ String pid = getRogueTaskPID()-->Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)[ FD ]
Line_45 $$ boolean isAlive = true-->Line_52 $$ if (!isAlive) [ FD ]
Line_57 $$ if (isAlive) -->Line_58 $$ fail("ProcessTree shouldn't be alive")[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_57 $$ if (isAlive) [ CD ]
Line_64 $$ Pattern pat = Pattern.compile(cmdLineDump)-->Line_65 $$ Matcher mat = pat.matcher(processTreeDump)[ FD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_43 $$ String processTreeDump = p.getProcessTreeDump()[ FD ]
Line_46 $$ for (int tries = 100; tries > 0; tries--) -->Line_47 $$ if (isSetsidAvailable()) [ CD ]
Line_45 $$ boolean isAlive = true-->Line_48 $$ isAlive = isAnyProcessInTreeAlive(p)[ FD ]
Line_62 $$ for (int i = N; i >= 0; i--) -->Line_64 $$ Pattern pat = Pattern.compile(cmdLineDump)[ CD ]
Line_10 $$ Random rm = new Random()-->Line_11 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")[ FD ]
Line_47 $$ if (isSetsidAvailable()) -->Line_48 $$ isAlive = isAnyProcessInTreeAlive(p)[ CD ]
Line_48 $$ isAlive = isAnyProcessInTreeAlive(p)-->Line_50 $$ isAlive = isAlive(pid)[ FD ]
Line_63 $$ String cmdLineDump = "\\|- [0-9]+ [0-9]+ [0-9]+ [0-9]+ \\(sh\\)" + " [0-9]+ [0-9]+ [0-9]+ [0-9]+ sh " + shellScript + " " + i-->Line_64 $$ Pattern pat = Pattern.compile(cmdLineDump)[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_75 $$ Assert.assertFalse("ProcessTree must have been gone", isAlive(pid))[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_77 $$ Assert.assertTrue(p.toString().equals("[ ]"))[ CD ]
Line_11 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_12 $$ tempFile.deleteOnExit()[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_44 $$ destroyProcessTree(pid)[ CD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_41 $$ p.updateProcessTree()[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_62 $$ for (int i = N; i >= 0; i--) [ CD ]
Line_43 $$ String processTreeDump = p.getProcessTreeDump()-->Line_65 $$ Matcher mat = pat.matcher(processTreeDump)[ FD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_32 $$ LOG.info("ProcessTree: " + p.toString())[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_26 $$ Thread t = new RogueTaskThread()[ CD ]
Line_10 $$ Random rm = new Random()-->Line_14 $$ tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_pidFile_" + rm.nextInt() + ".pid")[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_34 $$ while (!leaf.exists()) [ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_10 $$ Random rm = new Random()[ CD ]
Line_50 $$ isAlive = isAlive(pid)-->Line_52 $$ if (!isAlive) [ FD ]
Line_46 $$ for (int tries = 100; tries > 0; tries--) -->Line_55 $$ Thread.sleep(100)[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_74 $$ p.updateProcessTree()[ CD ]
Line_28 $$ String pid = getRogueTaskPID()-->Line_75 $$ Assert.assertFalse("ProcessTree must have been gone", isAlive(pid))[ FD ]
Line_26 $$ Thread t = new RogueTaskThread()-->Line_27 $$ t.start()[ FD ]
Line_47 $$ if (isSetsidAvailable()) -->Line_50 $$ isAlive = isAlive(pid)[ CD ]
Line_19 $$ FileWriter fWriter = new FileWriter(shellScript)-->Line_21 $$ fWriter.close()[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_27 $$ t.start()[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_14 $$ tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_pidFile_" + rm.nextInt() + ".pid")[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_11 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")[ CD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_48 $$ isAlive = isAnyProcessInTreeAlive(p)[ FD ]
Line_45 $$ boolean isAlive = true-->Line_50 $$ isAlive = isAlive(pid)[ FD ]
Line_11 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_14 $$ tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_pidFile_" + rm.nextInt() + ".pid")[ FD ]
Line_28 $$ String pid = getRogueTaskPID()-->Line_44 $$ destroyProcessTree(pid)[ FD ]
Line_28 $$ String pid = getRogueTaskPID()-->Line_50 $$ isAlive = isAlive(pid)[ FD ]
Line_43 $$ String processTreeDump = p.getProcessTreeDump()-->Line_61 $$ Assert.assertTrue("Process-tree dump doesn't start with a proper header", processTreeDump.startsWith("\t|- PID PPID PGRPID SESSID CMD_NAME " + "USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) " + "RSSMEM_USAGE(PAGES) FULL_CMD_LINE\n"))[ FD ]
Line_14 $$ tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_pidFile_" + rm.nextInt() + ".pid")-->Line_15 $$ tempFile.deleteOnExit()[ FD ]
Line_62 $$ for (int i = N; i >= 0; i--) -->Line_66 $$ Assert.assertTrue("Process-tree dump doesn't contain the cmdLineDump of " + i + "th process!", mat.find())[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_60 $$ LOG.info("Process-tree dump follows: \n" + processTreeDump)[ CD ]
Line_11 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_13 $$ shellScript = TEST_ROOT_DIR + File.separator + tempFile.getName()[ FD ]
Line_65 $$ Matcher mat = pat.matcher(processTreeDump)-->Line_66 $$ Assert.assertTrue("Process-tree dump doesn't contain the cmdLineDump of " + i + "th process!", mat.find())[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_33 $$ File leaf = new File(lowestDescendant)[ CD ]
Line_14 $$ tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_pidFile_" + rm.nextInt() + ".pid")-->Line_16 $$ pidFile = TEST_ROOT_DIR + File.separator + tempFile.getName()[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_42 $$ LOG.info("ProcessTree: " + p.toString())[ CD ]
Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)-->Line_77 $$ Assert.assertTrue(p.toString().equals("[ ]"))[ FD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_29 $$ LOG.info("Root process pid: " + pid)[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_30 $$ ProcfsBasedProcessTree p = createProcessTree(pid)[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_41 $$ p.updateProcessTree()[ CD ]
Line_2 $$ public void testProcessTree() throws Exception -->Line_12 $$ tempFile.deleteOnExit()[ CD ]
Line_11 $$ File tempFile = new File(TEST_ROOT_DIR, getClass().getName() + "_shellScript_" + rm.nextInt() + ".sh")-->Line_16 $$ pidFile = TEST_ROOT_DIR + File.separator + tempFile.getName()[ FD ]
