Line_8 $$ for (int i = 0; i < 5; i++) -->Line_10 $$ subdir.mkdir()[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_25 $$ File protectedFile = new File(protectedDir, ".safeFile")[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_18 $$ checkTempFilePresence(f, false)[ CD ]
Line_25 $$ File protectedFile = new File(protectedDir, ".safeFile")-->Line_30 $$ assert protectedFile.exists()[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_6 $$ f.mkdir()[ CD ]
Line_8 $$ for (int i = 0; i < 5; i++) -->Line_11 $$ for (int j = 0; j < 5; j++) new File(subdir, Integer.toString(j)).createNewFile()[ CD ]
Line_8 $$ for (int i = 0; i < 5; i++) -->Line_14 $$ WindowsFailedSnapshotTracker.handleFailedSnapshot(new File(f, Integer.toString(i)))[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_24 $$ protectedDir.mkdir()[ CD ]
Line_25 $$ File protectedFile = new File(protectedDir, ".safeFile")-->Line_26 $$ protectedFile.createNewFile()[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_7 $$ f.deleteOnExit()[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_14 $$ for (int i = 0; i < 5; i++) WindowsFailedSnapshotTracker.handleFailedSnapshot(new File(f, Integer.toString(i)))[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_27 $$ WindowsFailedSnapshotTracker.handleFailedSnapshot(protectedDir)[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_28 $$ WindowsFailedSnapshotTracker.deleteOldSnapshots()[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_16 $$ WindowsFailedSnapshotTracker.resetForTests()[ CD ]
Line_20 $$ PrintWriter tempPrinter = new PrintWriter(new FileWriter(WindowsFailedSnapshotTracker.TODELETEFILE, true))-->Line_22 $$ tempPrinter.close()[ FD ]
Line_5 $$ File f = new File(System.getenv("TEMP") + File.separator + Integer.toString(new Random().nextInt()))-->Line_6 $$ f.mkdir()[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_19 $$ WindowsFailedSnapshotTracker.resetForTests()[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_5 $$ File f = new File(System.getenv("TEMP") + File.separator + Integer.toString(new Random().nextInt()))[ CD ]
Line_20 $$ PrintWriter tempPrinter = new PrintWriter(new FileWriter(WindowsFailedSnapshotTracker.TODELETEFILE, true))-->Line_21 $$ tempPrinter.println(".safeDir")[ FD ]
Line_8 $$ for (int i = 0; i < 5; i++) -->Line_9 $$ File subdir = new File(f, Integer.toString(i))[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_31 $$ protectedFile.delete()[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_32 $$ protectedDir.delete()[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_20 $$ PrintWriter tempPrinter = new PrintWriter(new FileWriter(WindowsFailedSnapshotTracker.TODELETEFILE, true))[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_22 $$ tempPrinter.close()[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_3 $$ assumeTrue(FBUtilities.isWindows())[ CD ]
Line_23 $$ File protectedDir = new File(".safeDir")-->Line_27 $$ WindowsFailedSnapshotTracker.handleFailedSnapshot(protectedDir)[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_21 $$ tempPrinter.println(".safeDir")[ CD ]
Line_23 $$ File protectedDir = new File(".safeDir")-->Line_29 $$ assert protectedDir.exists()[ FD ]
Line_23 $$ File protectedDir = new File(".safeDir")-->Line_32 $$ protectedDir.delete()[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_17 $$ WindowsFailedSnapshotTracker.deleteOldSnapshots()[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_4 $$ WindowsFailedSnapshotTracker.deleteOldSnapshots()[ CD ]
Line_9 $$ File subdir = new File(f, Integer.toString(i))-->Line_10 $$ subdir.mkdir()[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_23 $$ File protectedDir = new File(".safeDir")[ CD ]
Line_23 $$ File protectedDir = new File(".safeDir")-->Line_24 $$ protectedDir.mkdir()[ FD ]
Line_25 $$ File protectedFile = new File(protectedDir, ".safeFile")-->Line_31 $$ protectedFile.delete()[ FD ]
Line_5 $$ File f = new File(System.getenv("TEMP") + File.separator + Integer.toString(new Random().nextInt()))-->Line_13 $$ checkTempFilePresence(f, true)[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_13 $$ checkTempFilePresence(f, true)[ CD ]
Line_8 $$ for (int i = 0; i < 5; i++) -->Line_14 $$ for (int i = 0; i < 5; i++) WindowsFailedSnapshotTracker.handleFailedSnapshot(new File(f, Integer.toString(i)))[ FD ]
Line_5 $$ File f = new File(System.getenv("TEMP") + File.separator + Integer.toString(new Random().nextInt()))-->Line_7 $$ f.deleteOnExit()[ FD ]
Line_5 $$ File f = new File(System.getenv("TEMP") + File.separator + Integer.toString(new Random().nextInt()))-->Line_18 $$ checkTempFilePresence(f, false)[ FD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_8 $$ for (int i = 0; i < 5; i++) [ CD ]
Line_8 $$ for (int i = 0; i < 5; i++) -->Line_9 $$ File subdir = new File(f, Integer.toString(i))[ CD ]
Line_2 $$ public void testSnapshotFailureHandler() throws IOException -->Line_26 $$ protectedFile.createNewFile()[ CD ]
