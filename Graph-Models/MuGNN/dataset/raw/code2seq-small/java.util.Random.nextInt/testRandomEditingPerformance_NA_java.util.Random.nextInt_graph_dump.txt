Line_4 $$ List<HighlightInfo> oldWarnings = doHighlighting()-->Line_15 $$ Collections.sort(oldWarnings, infoComparator)[ FD ]
Line_11 $$ if (o1.getActualStartOffset() != o2.getActualStartOffset())-->Line_12 $$ return o1.getActualStartOffset() - o2.getActualStartOffset()[ CD ]
Line_5 $$ List<String> oldWarningTexts = new ArrayList()-->Line_17 $$ oldWarningTexts.add(info.getText() + info.getDescription())[ FD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_25 $$ long start = System.currentTimeMillis()[ CD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_27 $$ String s = myFile.getText()[ CD ]
Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) -->Line_54 $$ for (int k = 0; k < "/*--*/".length(); k++) [ FD ]
Line_6 $$ int oldWarningSize = oldWarnings.size()-->Line_37 $$ if (oldWarningSize != infos.size()) [ FD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_58 $$ long end = System.currentTimeMillis()[ CD ]
Line_4 $$ List<HighlightInfo> oldWarnings = doHighlighting()-->Line_6 $$ int oldWarningSize = oldWarnings.size()[ FD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_22 $$ long[] time = new long[N][ CD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_26 $$ System.out.println("i = " + i)[ CD ]
Line_16 $$ for (HighlightInfo info : oldWarnings) -->Line_52 $$ assertNotSame(info + "", HighlightSeverity.ERROR, info.getSeverity())[ FD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_37 $$ if (oldWarningSize != infos.size()) [ CD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_59 $$ time[i] = end - start[ CD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_23 $$ for (int i = 0; i < N; i++) [ CD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_21 $$ int N = 20[ CD ]
Line_43 $$ String oldText = oldWarningTexts.get(k)-->Line_44 $$ if (!text.equals(oldText)) [ FD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_19 $$ Random random = new Random()[ CD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_24 $$ PsiDocumentManager.getInstance(getProject()).commitAllDocuments()[ CD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_54 $$ for (int k = 0; k < "/*--*/".length(); k++) [ CD ]
Line_27 $$ String s = myFile.getText()-->Line_30 $$ offset = random.nextInt(s.length())[ FD ]
Line_41 $$ HighlightInfo info = infos.get(k)-->Line_42 $$ String text = info.getText() + info.getDescription()[ FD ]
Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) -->Line_44 $$ if (!text.equals(oldText)) [ CD ]
Line_19 $$ Random random = new Random()-->Line_30 $$ offset = random.nextInt(s.length())[ FD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_3 $$ configureFromFileText("Stress.java", text)[ CD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_20 $$ DaemonCodeAnalyzer.getInstance(getProject()).restart()[ CD ]
Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) -->Line_43 $$ String oldText = oldWarningTexts.get(k)[ FD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_7 $$ oldWarnings = new ArrayList(oldWarnings)[ CD ]
Line_30 $$ offset = random.nextInt(s.length())-->Line_31 $$ if (s.charAt(offset) == ' ')[ FD ]
Line_44 $$ if (!text.equals(oldText)) -->Line_45 $$ System.err.println("Old (" + k + "): " + oldText + "; new: " + info)[ CD ]
Line_28 $$ int offset-->Line_34 $$ myEditor.getCaretModel().moveToOffset(offset)[ FD ]
Line_21 $$ int N = 20-->Line_23 $$ for (int i = 0; i < N; i++) [ FD ]
Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) -->Line_41 $$ HighlightInfo info = infos.get(k)[ FD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_28 $$ int offset[ CD ]
Line_37 $$ if (oldWarningSize != infos.size()) -->Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) [ CD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_8 $$ Comparator<HighlightInfo> infoComparator = ( o1,  o2) -> [ CD ]
Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) -->Line_42 $$ String text = info.getText() + info.getDescription()[ CD ]
Line_8 $$ Comparator<HighlightInfo> infoComparator = ( o1,  o2) -> -->Line_15 $$ Collections.sort(oldWarnings, infoComparator)[ FD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_5 $$ List<String> oldWarningTexts = new ArrayList()[ CD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_35 $$ type("/*--*/")[ CD ]
Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) -->Line_41 $$ HighlightInfo info = infos.get(k)[ CD ]
Line_16 $$ for (HighlightInfo info : oldWarnings) -->Line_17 $$ oldWarningTexts.add(info.getText() + info.getDescription())[ FD ]
Line_6 $$ int oldWarningSize = oldWarnings.size()-->Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) [ FD ]
Line_37 $$ if (oldWarningSize != infos.size()) -->Line_49 $$ assertEquals(infos.toString(), oldWarningSize, infos.size())[ CD ]
Line_27 $$ String s = myFile.getText()-->Line_31 $$ if (s.charAt(offset) == ' ')[ FD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_6 $$ int oldWarningSize = oldWarnings.size()[ CD ]
Line_42 $$ String text = info.getText() + info.getDescription()-->Line_44 $$ if (!text.equals(oldText)) [ FD ]
Line_37 $$ if (oldWarningSize != infos.size()) -->Line_39 $$ Collections.sort(infos, infoComparator)[ CD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_36 $$ List<HighlightInfo> infos = doHighlighting()[ CD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_61 $$ FileEditorManagerEx.getInstanceEx(getProject()).closeAllFiles()[ CD ]
Line_6 $$ int oldWarningSize = oldWarnings.size()-->Line_49 $$ assertEquals(infos.toString(), oldWarningSize, infos.size())[ FD ]
Line_28 $$ int offset-->Line_31 $$ if (s.charAt(offset) == ' ')[ FD ]
Line_7 $$ oldWarnings = new ArrayList(oldWarnings)-->Line_15 $$ Collections.sort(oldWarnings, infoComparator)[ FD ]
Line_22 $$ long[] time = new long[N]-->Line_62 $$ System.out.println("Average among the N/3 median times: " + ArrayUtil.averageAmongMedians(time, 3) + "ms")[ FD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_29 $$ while (true) [ CD ]
Line_8 $$ Comparator<HighlightInfo> infoComparator = ( o1,  o2) -> -->Line_39 $$ Collections.sort(infos, infoComparator)[ FD ]
Line_16 $$ for (HighlightInfo info : oldWarnings) -->Line_42 $$ String text = info.getText() + info.getDescription()[ FD ]
Line_41 $$ HighlightInfo info = infos.get(k)-->Line_52 $$ assertNotSame(info + "", HighlightSeverity.ERROR, info.getSeverity())[ FD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_62 $$ System.out.println("Average among the N/3 median times: " + ArrayUtil.averageAmongMedians(time, 3) + "ms")[ CD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_34 $$ myEditor.getCaretModel().moveToOffset(offset)[ CD ]
Line_30 $$ offset = random.nextInt(s.length())-->Line_34 $$ myEditor.getCaretModel().moveToOffset(offset)[ FD ]
Line_25 $$ long start = System.currentTimeMillis()-->Line_59 $$ time[i] = end - start[ FD ]
Line_40 $$ for (int k = 0; k < Math.min(infos.size(), oldWarningSize); k++) -->Line_43 $$ String oldText = oldWarningTexts.get(k)[ CD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_4 $$ List<HighlightInfo> oldWarnings = doHighlighting()[ CD ]
Line_29 $$ while (true) -->Line_30 $$ offset = random.nextInt(s.length())[ CD ]
Line_29 $$ while (true) -->Line_31 $$ if (s.charAt(offset) == ' ')[ CD ]
Line_4 $$ List<HighlightInfo> oldWarnings = doHighlighting()-->Line_7 $$ oldWarnings = new ArrayList(oldWarnings)[ FD ]
Line_23 $$ for (int i = 0; i < N; i++) -->Line_57 $$ UIUtil.dispatchAllInvocationEvents()[ CD ]
Line_54 $$ for (int k = 0; k < "/*--*/".length(); k++) -->Line_55 $$ backspace()[ CD ]
Line_5 $$ List<String> oldWarningTexts = new ArrayList()-->Line_43 $$ String oldText = oldWarningTexts.get(k)[ FD ]
Line_9 $$ if (o1.equals(o2))-->Line_10 $$ return 0[ CD ]
Line_28 $$ int offset-->Line_30 $$ offset = random.nextInt(s.length())[ FD ]
Line_2 $$ public void testRandomEditingPerformance() throws Exception -->Line_15 $$ Collections.sort(oldWarnings, infoComparator)[ CD ]
