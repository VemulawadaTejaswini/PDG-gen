Line_27 $$ String name = xmlStreamReader.getLocalName()-->Line_37 $$ name = xmlStreamReader.getLocalName()[ FD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_27 $$ String name = xmlStreamReader.getLocalName()[ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_6 $$ Http.Options options = new Http.Options()[ CD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_15 $$ options.setPost(true)[ CD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_39 $$ error = xmlStreamReader.getElementText()[ FD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_25 $$ xmlStreamReader.nextTag()[ FD ]
Line_28 $$ if (name.equals("error")) -->Line_38 $$ if (name.equals("message")) [ CD ]
Line_8 $$ if (_HTTP_HEADER_VERSION_VERBOSITY_PARTIAL) -->Line_9 $$ options.addHeader(HttpHeaders.USER_AGENT, ReleaseInfo.getName())[ CD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_14 $$ options.setParts(parts)[ FD ]
Line_28 $$ if (name.equals("error")) -->Line_30 $$ if (status == 0) [ CD ]
Line_28 $$ if (name.equals("error")) -->Line_37 $$ name = xmlStreamReader.getLocalName()[ CD ]
Line_37 $$ name = xmlStreamReader.getLocalName()-->Line_38 $$ if (name.equals("message")) [ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_14 $$ options.setParts(parts)[ CD ]
Line_20 $$ String error = xml-->Line_39 $$ error = xmlStreamReader.getElementText()[ FD ]
Line_17 $$ if (_log.isDebugEnabled()) -->Line_18 $$ _log.debug(xml)[ CD ]
Line_8 $$ if (_HTTP_HEADER_VERSION_VERBOSITY_PARTIAL) -->Line_11 $$ options.addHeader(HttpHeaders.USER_AGENT, ReleaseInfo.getServerInfo())[ CD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_27 $$ String name = xmlStreamReader.getLocalName()[ FD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_29 $$ int status = GetterUtil.getInteger(xmlStreamReader.getElementText(), 1)[ FD ]
Line_16 $$ String xml = HttpUtil.URLtoString(options)-->Line_18 $$ _log.debug(xml)[ FD ]
Line_30 $$ if (status == 0) -->Line_34 $$ return true[ CD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_26 $$ xmlStreamReader.nextTag()[ FD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_29 $$ int status = GetterUtil.getInteger(xmlStreamReader.getElementText(), 1)[ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_51 $$ return false[ CD ]
Line_6 $$ Http.Options options = new Http.Options()-->Line_15 $$ options.setPost(true)[ FD ]
Line_6 $$ Http.Options options = new Http.Options()-->Line_9 $$ options.addHeader(HttpHeaders.USER_AGENT, ReleaseInfo.getName())[ FD ]
Line_30 $$ if (status == 0) -->Line_31 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_20 $$ String error = xml[ CD ]
Line_6 $$ Http.Options options = new Http.Options()-->Line_13 $$ options.setLocation(trackback)[ FD ]
Line_3 $$ if (_log.isInfoEnabled()) -->Line_4 $$ _log.info("Pinging trackback " + trackback)[ CD ]
Line_28 $$ if (name.equals("error")) -->Line_29 $$ int status = GetterUtil.getInteger(xmlStreamReader.getElementText(), 1)[ CD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_16 $$ String xml = HttpUtil.URLtoString(options)[ CD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))[ FD ]
Line_38 $$ if (name.equals("message")) -->Line_39 $$ error = xmlStreamReader.getElementText()[ CD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_45 $$ xmlStreamReader.close()[ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_50 $$ _log.error("Error while pinging trackback at " + trackback + ": " + error)[ CD ]
Line_6 $$ Http.Options options = new Http.Options()-->Line_16 $$ String xml = HttpUtil.URLtoString(options)[ FD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_39 $$ error = xmlStreamReader.getElementText()[ FD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_25 $$ xmlStreamReader.nextTag()[ FD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_37 $$ name = xmlStreamReader.getLocalName()[ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_13 $$ options.setLocation(trackback)[ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_7 $$ if (_HTTP_HEADER_VERSION_VERBOSITY_DEFAULT) [ CD ]
Line_6 $$ Http.Options options = new Http.Options()-->Line_14 $$ options.setParts(parts)[ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_13 $$ options.setLocation(trackback)[ CD ]
Line_7 $$ if (_HTTP_HEADER_VERSION_VERBOSITY_DEFAULT) -->Line_8 $$ if (_HTTP_HEADER_VERSION_VERBOSITY_PARTIAL) [ CD ]
Line_6 $$ Http.Options options = new Http.Options()-->Line_11 $$ options.addHeader(HttpHeaders.USER_AGENT, ReleaseInfo.getServerInfo())[ FD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_36 $$ xmlStreamReader.nextTag()[ FD ]
Line_29 $$ int status = GetterUtil.getInteger(xmlStreamReader.getElementText(), 1)-->Line_30 $$ if (status == 0) [ FD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_37 $$ name = xmlStreamReader.getLocalName()[ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_17 $$ if (_log.isDebugEnabled()) [ CD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_45 $$ xmlStreamReader.close()[ FD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_26 $$ xmlStreamReader.nextTag()[ FD ]
Line_27 $$ String name = xmlStreamReader.getLocalName()-->Line_28 $$ if (name.equals("error")) [ FD ]
Line_21 $$ XMLStreamReader xmlStreamReader = null-->Line_43 $$ if (xmlStreamReader != null) [ FD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_21 $$ XMLStreamReader xmlStreamReader = null[ CD ]
Line_31 $$ if (_log.isInfoEnabled()) -->Line_32 $$ _log.info("Trackback accepted")[ CD ]
Line_27 $$ String name = xmlStreamReader.getLocalName()-->Line_38 $$ if (name.equals("message")) [ FD ]
Line_28 $$ if (name.equals("error")) -->Line_36 $$ xmlStreamReader.nextTag()[ CD ]
Line_2 $$ public static boolean sendTrackback(String trackback, Map<String, String> parts) throws Exception -->Line_3 $$ if (_log.isInfoEnabled()) [ CD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_43 $$ if (xmlStreamReader != null) [ FD ]
Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))-->Line_36 $$ xmlStreamReader.nextTag()[ FD ]
Line_23 $$ XMLInputFactory xmlInputFactory = StAXReaderUtil.getXMLInputFactory()-->Line_24 $$ xmlStreamReader = xmlInputFactory.createXMLStreamReader(new UnsyncStringReader(xml))[ FD ]
