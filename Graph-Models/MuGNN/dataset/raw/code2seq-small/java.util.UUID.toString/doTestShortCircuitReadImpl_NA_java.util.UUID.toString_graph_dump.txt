Line_12 $$ if (simulatedStorage) -->Line_13 $$ SimulatedFSDataset.setFactory(conf)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY, ignoreChecksum)[ FD ]
Line_16 $$ FileSystem fs = cluster.getFileSystem()-->Line_29 $$ fs.close()[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_26 $$ checkFileContent(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_27 $$ checkFileContentDirect(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_21 $$ Path file1 = fs.makeQualified(new Path("filelocal.dat"))-->Line_22 $$ FSDataOutputStream stm = createFile(fs, file1, 1)[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_15 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()[ CD ]
Line_20 $$ byte[] fileData = AppendTestUtil.randomBytes(seed, size)-->Line_23 $$ stm.write(fileData)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.set(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY, new File(sockDir.getDir(), "TestShortCircuitLocalRead._PORT.sock").getAbsolutePath())[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_27 $$ checkFileContentDirect(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_7 $$ conf.set(DFSConfigKeys.DFS_DOMAIN_SOCKET_PATH_KEY, new File(sockDir.getDir(), "TestShortCircuitLocalRead._PORT.sock").getAbsolutePath())[ CD ]
Line_15 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_16 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_8 $$ if (shortCircuitUser != null) -->Line_10 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL, true)[ CD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_9 $$ conf.set(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY, shortCircuitUser)[ FD ]
Line_16 $$ FileSystem fs = cluster.getFileSystem()-->Line_21 $$ Path file1 = fs.makeQualified(new Path("filelocal.dat"))[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_8 $$ if (shortCircuitUser != null) [ CD ]
Line_20 $$ byte[] fileData = AppendTestUtil.randomBytes(seed, size)-->Line_26 $$ checkFileContent(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_18 $$ Path path = new Path("/")-->Line_19 $$ assertTrue("/ should be a directory", fs.getFileStatus(path).isDirectory() == true)[ FD ]
Line_21 $$ Path file1 = fs.makeQualified(new Path("filelocal.dat"))-->Line_26 $$ checkFileContent(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_5 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY, ignoreChecksum)[ CD ]
Line_8 $$ if (shortCircuitUser != null) -->Line_9 $$ conf.set(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY, shortCircuitUser)[ CD ]
Line_16 $$ FileSystem fs = cluster.getFileSystem()-->Line_19 $$ assertTrue("/ should be a directory", fs.getFileStatus(path).isDirectory() == true)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY, true)[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_26 $$ checkFileContent(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_9 $$ conf.set(DFSConfigKeys.DFS_BLOCK_LOCAL_PATH_ACCESS_USER_KEY, shortCircuitUser)[ FD ]
Line_20 $$ byte[] fileData = AppendTestUtil.randomBytes(seed, size)-->Line_27 $$ checkFileContentDirect(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_22 $$ FSDataOutputStream stm = createFile(fs, file1, 1)-->Line_24 $$ stm.close()[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_5 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY, ignoreChecksum)[ FD ]
Line_15 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_25 $$ URI uri = cluster.getURI()[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.set(DFSConfigKeys.DFS_CLIENT_CONTEXT, UUID.randomUUID().toString())[ FD ]
Line_15 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).format(true).build()-->Line_30 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_4 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_KEY, true)[ CD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_6 $$ conf.set(DFSConfigKeys.DFS_CLIENT_CONTEXT, UUID.randomUUID().toString())[ CD ]
Line_16 $$ FileSystem fs = cluster.getFileSystem()-->Line_22 $$ FSDataOutputStream stm = createFile(fs, file1, 1)[ FD ]
Line_21 $$ Path file1 = fs.makeQualified(new Path("filelocal.dat"))-->Line_27 $$ checkFileContentDirect(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_16 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_25 $$ URI uri = cluster.getURI()-->Line_27 $$ checkFileContentDirect(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_20 $$ byte[] fileData = AppendTestUtil.randomBytes(seed, size)[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_8 $$ if (shortCircuitUser != null) [ FD ]
Line_25 $$ URI uri = cluster.getURI()-->Line_26 $$ checkFileContent(uri, file1, fileData, readOffset, readingUser, conf, legacyShortCircuitFails)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_13 $$ SimulatedFSDataset.setFactory(conf)[ FD ]
Line_22 $$ FSDataOutputStream stm = createFile(fs, file1, 1)-->Line_23 $$ stm.write(fileData)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_USE_LEGACY_BLOCKREADERLOCAL, true)[ FD ]
Line_2 $$ public void doTestShortCircuitReadImpl(boolean ignoreChecksum, int size, int readOffset, String shortCircuitUser, String readingUser, boolean legacyShortCircuitFails) throws IOException, InterruptedException -->Line_12 $$ if (simulatedStorage) [ CD ]
