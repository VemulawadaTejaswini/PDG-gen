Line_9 $$ try (CloseableProducer<Long, Object> producer = embeddedKafka.createProducer()) -->Line_17 $$ producer.send(builder.build())[ FD ]
Line_2 $$ public void startKafka() throws Exception -->Line_6 $$ Properties topicProperties = new Properties()[ CD ]
Line_2 $$ public void startKafka() throws Exception -->Line_8 $$ embeddedKafka.createTopics(1, 1, topicProperties, topicName)[ CD ]
Line_12 $$ for (long i = 0; i < iMax; i++) -->Line_14 $$ for (long j = 0; j < jMax; j++) [ CD ]
Line_2 $$ public void startKafka() throws Exception -->Line_7 $$ topicProperties.setProperty("segment.bytes", "256")[ CD ]
Line_10 $$ int jMax = 10_000-->Line_14 $$ for (long j = 0; j < jMax; j++) [ FD ]
Line_2 $$ public void startKafka() throws Exception -->Line_4 $$ embeddedKafka.start()[ CD ]
Line_11 $$ int iMax = 100_000 / jMax-->Line_12 $$ for (long i = 0; i < iMax; i++) [ FD ]
Line_12 $$ for (long i = 0; i < iMax; i++) -->Line_13 $$ ImmutableList.Builder<KeyedMessage<Long, Object>> builder = ImmutableList.builder()[ CD ]
Line_14 $$ for (long j = 0; j < jMax; j++) -->Line_15 $$ builder.add(new KeyedMessage<Long, Object>(topicName, i, ImmutableMap.of("id", Long.toString(i * iMax + j), "value", UUID.randomUUID().toString())))[ CD ]
Line_12 $$ for (long i = 0; i < iMax; i++) -->Line_17 $$ producer.send(builder.build())[ CD ]
Line_6 $$ Properties topicProperties = new Properties()-->Line_8 $$ embeddedKafka.createTopics(1, 1, topicProperties, topicName)[ FD ]
Line_13 $$ ImmutableList.Builder<KeyedMessage<Long, Object>> builder = ImmutableList.builder()-->Line_17 $$ producer.send(builder.build())[ FD ]
Line_2 $$ public void startKafka() throws Exception -->Line_3 $$ embeddedKafka = EmbeddedKafka.createEmbeddedKafka()[ CD ]
Line_6 $$ Properties topicProperties = new Properties()-->Line_7 $$ topicProperties.setProperty("segment.bytes", "256")[ FD ]
Line_13 $$ ImmutableList.Builder<KeyedMessage<Long, Object>> builder = ImmutableList.builder()-->Line_15 $$ builder.add(new KeyedMessage<Long, Object>(topicName, i, ImmutableMap.of("id", Long.toString(i * iMax + j), "value", UUID.randomUUID().toString())))[ FD ]
