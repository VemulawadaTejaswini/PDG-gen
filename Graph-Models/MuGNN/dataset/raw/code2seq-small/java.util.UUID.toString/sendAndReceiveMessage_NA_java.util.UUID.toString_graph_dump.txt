Line_6 $$ String reply = HttpRequest.get(url.toExternalForm(), 10, TimeUnit.SECONDS)-->Line_7 $$ assertNotNull(reply)[ FD ]
Line_2 $$ private void sendAndReceiveMessage(boolean sendToQueue) throws Exception -->Line_7 $$ assertNotNull(reply)[ CD ]
Line_6 $$ String reply = HttpRequest.get(url.toExternalForm(), 10, TimeUnit.SECONDS)-->Line_8 $$ assertEquals(text, reply)[ FD ]
Line_2 $$ private void sendAndReceiveMessage(boolean sendToQueue) throws Exception -->Line_6 $$ String reply = HttpRequest.get(url.toExternalForm(), 10, TimeUnit.SECONDS)[ CD ]
Line_2 $$ private void sendAndReceiveMessage(boolean sendToQueue) throws Exception -->Line_8 $$ assertEquals(text, reply)[ CD ]
Line_2 $$ private void sendAndReceiveMessage(boolean sendToQueue) throws Exception -->Line_5 $$ URL url = new URL(this.url.toExternalForm() + "DependentMessagingDeploymentTestCase?destination=" + destination + "&text=" + text)[ CD ]
Line_2 $$ private void sendAndReceiveMessage(boolean sendToQueue) throws Exception -->Line_3 $$ String destination = sendToQueue ? "queue" : "topic"[ CD ]
Line_5 $$ URL url = new URL(this.url.toExternalForm() + "DependentMessagingDeploymentTestCase?destination=" + destination + "&text=" + text)-->Line_6 $$ String reply = HttpRequest.get(url.toExternalForm(), 10, TimeUnit.SECONDS)[ FD ]
Line_4 $$ String text = UUID.randomUUID().toString()-->Line_8 $$ assertEquals(text, reply)[ FD ]
Line_2 $$ private void sendAndReceiveMessage(boolean sendToQueue) throws Exception -->Line_4 $$ String text = UUID.randomUUID().toString()[ CD ]
