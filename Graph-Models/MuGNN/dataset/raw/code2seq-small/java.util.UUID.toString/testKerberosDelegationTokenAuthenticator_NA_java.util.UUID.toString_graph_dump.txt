Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_6 $$ File testDir = new File("target/" + UUID.randomUUID().toString())[ CD ]
Line_9 $$ final Server jetty = createJettyServer()-->Line_12 $$ jetty.setHandler(context)[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_32 $$ aUrl.getDelegationToken(url, token, "client")[ FD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_34 $$ aUrl.renewDelegationToken(url, token)[ CD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_47 $$ return null[ CD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_3 $$ org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration()[ CD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_4 $$ conf.set("hadoop.security.authentication", "kerberos")[ CD ]
Line_23 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_39 $$ aUrl.renewDelegationToken(url, token)[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_44 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_45 $$ aUrl.cancelDelegationToken(url, token)[ FD ]
Line_17 $$ File keytabFile = new File(testDir, "test.keytab")-->Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() [ FD ]
Line_22 $$ final DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_34 $$ aUrl.renewDelegationToken(url, token)[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_46 $$ Assert.assertNull(token.getDelegationToken())[ FD ]
Line_23 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_25 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_37 $$ Assert.assertNotNull(token.getDelegationToken())[ CD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_44 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ CD ]
Line_8 $$ MiniKdc kdc = new MiniKdc(MiniKdc.createConf(), testDir)-->Line_18 $$ kdc.createPrincipal(keytabFile, "client", "HTTP/localhost")[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_34 $$ aUrl.renewDelegationToken(url, token)[ FD ]
Line_23 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_34 $$ aUrl.renewDelegationToken(url, token)[ FD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_35 $$ Assert.assertNotNull(token.getDelegationToken())[ CD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_32 $$ aUrl.getDelegationToken(url, token, "client")[ CD ]
Line_10 $$ Context context = new Context()-->Line_12 $$ jetty.setHandler(context)[ FD ]
Line_10 $$ Context context = new Context()-->Line_14 $$ context.addServlet(new ServletHolder(UserServlet.class), "/bar")[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_35 $$ Assert.assertNotNull(token.getDelegationToken())[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_36 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_9 $$ final Server jetty = createJettyServer()-->Line_51 $$ jetty.stop()[ FD ]
Line_6 $$ File testDir = new File("target/" + UUID.randomUUID().toString())-->Line_7 $$ Assert.assertTrue(testDir.mkdirs())[ FD ]
Line_3 $$ org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration()-->Line_4 $$ conf.set("hadoop.security.authentication", "kerberos")[ FD ]
Line_23 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_44 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_8 $$ MiniKdc kdc = new MiniKdc(MiniKdc.createConf(), testDir)-->Line_16 $$ kdc.start()[ FD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_46 $$ Assert.assertNull(token.getDelegationToken())[ CD ]
Line_10 $$ Context context = new Context()-->Line_11 $$ context.setContextPath("/foo")[ FD ]
Line_23 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_36 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_33 $$ Assert.assertNotNull(token.getDelegationToken())[ CD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_39 $$ aUrl.renewDelegationToken(url, token)[ FD ]
Line_22 $$ final DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_36 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_23 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_45 $$ aUrl.cancelDelegationToken(url, token)[ FD ]
Line_23 $$ final URL url = new URL(getJettyURL() + "/foo/bar")-->Line_32 $$ aUrl.getDelegationToken(url, token, "client")[ FD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_11 $$ context.setContextPath("/foo")[ CD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_7 $$ Assert.assertTrue(testDir.mkdirs())[ CD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_10 $$ Context context = new Context()[ CD ]
Line_3 $$ org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration()-->Line_5 $$ UserGroupInformation.setConfiguration(conf)[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_25 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_13 $$ context.addFilter(new FilterHolder(KDTAFilter.class), "/*", 0)[ CD ]
Line_22 $$ final DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_25 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_33 $$ Assert.assertNotNull(token.getDelegationToken())[ FD ]
Line_8 $$ MiniKdc kdc = new MiniKdc(MiniKdc.createConf(), testDir)-->Line_52 $$ kdc.stop()[ FD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_9 $$ final Server jetty = createJettyServer()[ CD ]
Line_22 $$ final DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_44 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ FD ]
Line_17 $$ File keytabFile = new File(testDir, "test.keytab")-->Line_18 $$ kdc.createPrincipal(keytabFile, "client", "HTTP/localhost")[ FD ]
Line_21 $$ final DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token()-->Line_37 $$ Assert.assertNotNull(token.getDelegationToken())[ FD ]
Line_22 $$ final DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_45 $$ aUrl.cancelDelegationToken(url, token)[ FD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_12 $$ jetty.setHandler(context)[ CD ]
Line_17 $$ File keytabFile = new File(testDir, "test.keytab")-->Line_19 $$ KDTAFilter.keytabFile = keytabFile.getAbsolutePath()[ FD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_45 $$ aUrl.cancelDelegationToken(url, token)[ CD ]
Line_10 $$ Context context = new Context()-->Line_13 $$ context.addFilter(new FilterHolder(KDTAFilter.class), "/*", 0)[ FD ]
Line_30 $$ doAsKerberosUser("client", keytabFile.getAbsolutePath(), new Callable<Void>() -->Line_36 $$ aUrl.getDelegationToken(url, token, FOO_USER)[ CD ]
Line_22 $$ final DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_39 $$ aUrl.renewDelegationToken(url, token)[ FD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_8 $$ MiniKdc kdc = new MiniKdc(MiniKdc.createConf(), testDir)[ CD ]
Line_22 $$ final DelegationTokenAuthenticatedURL aUrl = new DelegationTokenAuthenticatedURL()-->Line_32 $$ aUrl.getDelegationToken(url, token, "client")[ FD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_5 $$ UserGroupInformation.setConfiguration(conf)[ CD ]
Line_9 $$ final Server jetty = createJettyServer()-->Line_20 $$ jetty.start()[ FD ]
Line_2 $$ public void testKerberosDelegationTokenAuthenticator() throws Exception -->Line_14 $$ context.addServlet(new ServletHolder(UserServlet.class), "/bar")[ CD ]
