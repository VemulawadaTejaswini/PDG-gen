Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_11 $$ jobConf.setInputFormat(NonSplitableSequenceFileInputFormat.class)[ CD ]
Line_8 $$ int noSortReduceTasks = outputfs.listStatus(sortOutput, sortPathsFilter).length-->Line_18 $$ jobConf.setNumMapTasks(noSortReduceTasks)[ FD ]
Line_8 $$ int noSortReduceTasks = outputfs.listStatus(sortOutput, sortPathsFilter).length-->Line_9 $$ jobConf.setInt(SORT_REDUCES, noSortReduceTasks)[ FD ]
Line_29 $$ Date startTime = new Date()-->Line_35 $$ System.out.println("The job took " + (end_time.getTime() - startTime.getTime()) / 1000 + " seconds.")[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_16 $$ jobConf.setCombinerClass(Reduce.class)[ CD ]
Line_23 $$ if (defaultfs.exists(outputPath)) -->Line_24 $$ defaultfs.delete(outputPath, true)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_5 $$ FileSystem defaultfs = FileSystem.get(defaults)[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_27 $$ Path[] inputPaths = FileInputFormat.getInputPaths(jobConf)[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_31 $$ JobClient.runJob(jobConf)[ FD ]
Line_22 $$ Path outputPath = new Path(new Path("/tmp", "sortvalidate"), UUID.randomUUID().toString())-->Line_23 $$ if (defaultfs.exists(outputPath)) [ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_13 $$ jobConf.setOutputKeyClass(IntWritable.class)[ FD ]
Line_40 $$ RecordStatsWritable v1 = new RecordStatsWritable()-->Line_42 $$ if (!stats.next(k1, v1)) [ FD ]
Line_40 $$ RecordStatsWritable v1 = new RecordStatsWritable()-->Line_49 $$ throw new IOException("(" + v1.getBytes() + ", " + v1.getRecords() + ", " + v1.getChecksum() + ") v/s (" + v2.getBytes() + ", " + v2.getRecords() + ", " + v2.getChecksum() + ")")[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_4 $$ FileSystem outputfs = sortOutput.getFileSystem(defaults)[ FD ]
Line_36 $$ SequenceFile.Reader stats = new SequenceFile.Reader(defaultfs, new Path(outputPath, "part-00000"), defaults)-->Line_42 $$ if (!stats.next(k1, v1)) [ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_8 $$ int noSortReduceTasks = outputfs.listStatus(sortOutput, sortPathsFilter).length[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_8 $$ int noSortReduceTasks = outputfs.listStatus(sortOutput, sortPathsFilter).length[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_12 $$ jobConf.setOutputFormat(SequenceFileOutputFormat.class)[ CD ]
Line_33 $$ Date end_time = new Date()-->Line_35 $$ System.out.println("The job took " + (end_time.getTime() - startTime.getTime()) / 1000 + " seconds.")[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_7 $$ jobConf.setJobName("sortvalidate-recordstats-checker")[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_5 $$ FileSystem defaultfs = FileSystem.get(defaults)[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_21 $$ FileInputFormat.addInputPath(jobConf, sortOutput)[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_21 $$ FileInputFormat.addInputPath(jobConf, sortOutput)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_27 $$ Path[] inputPaths = FileInputFormat.getInputPaths(jobConf)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_20 $$ FileInputFormat.setInputPaths(jobConf, sortInput)[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_15 $$ jobConf.setMapperClass(Map.class)[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_11 $$ jobConf.setInputFormat(NonSplitableSequenceFileInputFormat.class)[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_7 $$ jobConf.setJobName("sortvalidate-recordstats-checker")[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_22 $$ Path outputPath = new Path(new Path("/tmp", "sortvalidate"), UUID.randomUUID().toString())[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_28 $$ System.out.println("\nSortValidator.RecordStatsChecker: Validate sort " + "from " + inputPaths[0] + " (" + noSortInputpaths + " files), " + inputPaths[1] + " (" + noSortReduceTasks + " files) into " + FileOutputFormat.getOutputPath(jobConf) + " with 1 reducer.")[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_19 $$ jobConf.setNumReduceTasks(1)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_29 $$ Date startTime = new Date()[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_17 $$ jobConf.setReducerClass(Reduce.class)[ FD ]
Line_41 $$ RecordStatsWritable v2 = new RecordStatsWritable()-->Line_45 $$ if (!stats.next(k2, v2)) [ FD ]
Line_40 $$ RecordStatsWritable v1 = new RecordStatsWritable()-->Line_48 $$ if ((v1.getBytes() != v2.getBytes()) || (v1.getRecords() != v2.getRecords()) || v1.getChecksum() != v2.getChecksum()) [ FD ]
Line_22 $$ Path outputPath = new Path(new Path("/tmp", "sortvalidate"), UUID.randomUUID().toString())-->Line_55 $$ defaultfs.delete(outputPath, true)[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)[ CD ]
Line_38 $$ IntWritable k1 = new IntWritable()-->Line_42 $$ if (!stats.next(k1, v1)) [ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_30 $$ System.out.println("Job started: " + startTime)[ CD ]
Line_41 $$ RecordStatsWritable v2 = new RecordStatsWritable()-->Line_49 $$ throw new IOException("(" + v1.getBytes() + ", " + v1.getRecords() + ", " + v1.getChecksum() + ") v/s (" + v2.getBytes() + ", " + v2.getRecords() + ", " + v2.getChecksum() + ")")[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_10 $$ int noSortInputpaths = inputfs.listStatus(sortInput).length[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_12 $$ jobConf.setOutputFormat(SequenceFileOutputFormat.class)[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_20 $$ FileInputFormat.setInputPaths(jobConf, sortInput)[ CD ]
Line_36 $$ SequenceFile.Reader stats = new SequenceFile.Reader(defaultfs, new Path(outputPath, "part-00000"), defaults)-->Line_52 $$ stats.close()[ FD ]
Line_3 $$ FileSystem inputfs = sortInput.getFileSystem(defaults)-->Line_10 $$ int noSortInputpaths = inputfs.listStatus(sortInput).length[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_14 $$ jobConf.setOutputValueClass(RecordStatsChecker.RecordStatsWritable.class)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_4 $$ FileSystem outputfs = sortOutput.getFileSystem(defaults)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_10 $$ int noSortInputpaths = inputfs.listStatus(sortInput).length[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_16 $$ jobConf.setCombinerClass(Reduce.class)[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_23 $$ if (defaultfs.exists(outputPath)) [ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_3 $$ FileSystem inputfs = sortInput.getFileSystem(defaults)[ FD ]
Line_5 $$ FileSystem defaultfs = FileSystem.get(defaults)-->Line_23 $$ if (defaultfs.exists(outputPath)) [ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_31 $$ JobClient.runJob(jobConf)[ CD ]
Line_39 $$ IntWritable k2 = new IntWritable()-->Line_45 $$ if (!stats.next(k2, v2)) [ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_3 $$ FileSystem inputfs = sortInput.getFileSystem(defaults)[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_9 $$ jobConf.setInt(SORT_REDUCES, noSortReduceTasks)[ FD ]
Line_4 $$ FileSystem outputfs = sortOutput.getFileSystem(defaults)-->Line_8 $$ int noSortReduceTasks = outputfs.listStatus(sortOutput, sortPathsFilter).length[ FD ]
Line_5 $$ FileSystem defaultfs = FileSystem.get(defaults)-->Line_55 $$ defaultfs.delete(outputPath, true)[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_19 $$ jobConf.setNumReduceTasks(1)[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_18 $$ jobConf.setNumMapTasks(noSortReduceTasks)[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_26 $$ FileOutputFormat.setOutputPath(jobConf, outputPath)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_9 $$ jobConf.setInt(SORT_REDUCES, noSortReduceTasks)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_13 $$ jobConf.setOutputKeyClass(IntWritable.class)[ CD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_14 $$ jobConf.setOutputValueClass(RecordStatsChecker.RecordStatsWritable.class)[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_15 $$ jobConf.setMapperClass(Map.class)[ FD ]
Line_22 $$ Path outputPath = new Path(new Path("/tmp", "sortvalidate"), UUID.randomUUID().toString())-->Line_24 $$ defaultfs.delete(outputPath, true)[ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_21 $$ FileInputFormat.addInputPath(jobConf, sortOutput)[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_20 $$ FileInputFormat.setInputPaths(jobConf, sortInput)[ FD ]
Line_5 $$ FileSystem defaultfs = FileSystem.get(defaults)-->Line_24 $$ defaultfs.delete(outputPath, true)[ FD ]
Line_6 $$ JobConf jobConf = new JobConf(defaults, RecordStatsChecker.class)-->Line_26 $$ FileOutputFormat.setOutputPath(jobConf, outputPath)[ FD ]
Line_36 $$ SequenceFile.Reader stats = new SequenceFile.Reader(defaultfs, new Path(outputPath, "part-00000"), defaults)-->Line_45 $$ if (!stats.next(k2, v2)) [ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_17 $$ jobConf.setReducerClass(Reduce.class)[ CD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_28 $$ System.out.println("\nSortValidator.RecordStatsChecker: Validate sort " + "from " + inputPaths[0] + " (" + noSortInputpaths + " files), " + inputPaths[1] + " (" + noSortReduceTasks + " files) into " + FileOutputFormat.getOutputPath(jobConf) + " with 1 reducer.")[ CD ]
Line_22 $$ Path outputPath = new Path(new Path("/tmp", "sortvalidate"), UUID.randomUUID().toString())-->Line_26 $$ FileOutputFormat.setOutputPath(jobConf, outputPath)[ FD ]
Line_41 $$ RecordStatsWritable v2 = new RecordStatsWritable()-->Line_48 $$ if ((v1.getBytes() != v2.getBytes()) || (v1.getRecords() != v2.getRecords()) || v1.getChecksum() != v2.getChecksum()) [ FD ]
Line_2 $$ static void checkRecords(Configuration defaults, Path sortInput, Path sortOutput) throws IOException -->Line_18 $$ jobConf.setNumMapTasks(noSortReduceTasks)[ CD ]
