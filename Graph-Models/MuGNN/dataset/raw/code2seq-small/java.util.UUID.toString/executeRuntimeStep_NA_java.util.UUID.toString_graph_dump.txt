Line_13 $$ List<Protocol> protocols = channel.getProtocolStack().getProtocols()-->Line_16 $$ stack.addProtocols(protocols)[ FD ]
Line_2 $$ protected void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException -->Line_18 $$ context.completeStep(OperationContext.RollbackHandler.NOOP_ROLLBACK_HANDLER)[ FD ]
Line_4 $$ ServiceRegistry registry = context.getServiceRegistry(false)-->Line_7 $$ ServiceController<ChannelFactory> controller = ServiceContainerHelper.getService(registry, serviceName)[ FD ]
Line_5 $$ ServiceName serviceName = ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(stackName)-->Line_7 $$ ServiceController<ChannelFactory> controller = ServiceContainerHelper.getService(registry, serviceName)[ FD ]
Line_15 $$ ProtocolStack stack = new ProtocolStack()-->Line_17 $$ context.getResult().set(stack.printProtocolSpecAsXML())[ FD ]
Line_7 $$ ServiceController<ChannelFactory> controller = ServiceContainerHelper.getService(registry, serviceName)-->Line_11 $$ ChannelFactory factory = controller.awaitValue()[ FD ]
Line_3 $$ String stackName = context.getCurrentAddressValue()-->Line_5 $$ ServiceName serviceName = ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(stackName)[ FD ]
Line_12 $$ try (Channel channel = factory.createChannel(UUID.randomUUID().toString())) -->Line_13 $$ List<Protocol> protocols = channel.getProtocolStack().getProtocols()[ FD ]
Line_2 $$ protected void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException -->Line_3 $$ String stackName = context.getCurrentAddressValue()[ CD ]
Line_2 $$ protected void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException -->Line_3 $$ String stackName = context.getCurrentAddressValue()[ FD ]
Line_7 $$ ServiceController<ChannelFactory> controller = ServiceContainerHelper.getService(registry, serviceName)-->Line_21 $$ controller.setMode(mode)[ FD ]
Line_8 $$ ServiceController.Mode mode = controller.getMode()-->Line_21 $$ controller.setMode(mode)[ FD ]
Line_2 $$ protected void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException -->Line_4 $$ ServiceRegistry registry = context.getServiceRegistry(false)[ CD ]
Line_13 $$ List<Protocol> protocols = channel.getProtocolStack().getProtocols()-->Line_14 $$ Collections.reverse(protocols)[ FD ]
Line_7 $$ ServiceController<ChannelFactory> controller = ServiceContainerHelper.getService(registry, serviceName)-->Line_8 $$ ServiceController.Mode mode = controller.getMode()[ FD ]
Line_7 $$ ServiceController<ChannelFactory> controller = ServiceContainerHelper.getService(registry, serviceName)-->Line_9 $$ controller.setMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_2 $$ protected void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException -->Line_5 $$ ServiceName serviceName = ProtocolStackServiceName.CHANNEL_FACTORY.getServiceName(stackName)[ CD ]
Line_2 $$ protected void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException -->Line_17 $$ context.getResult().set(stack.printProtocolSpecAsXML())[ FD ]
Line_15 $$ ProtocolStack stack = new ProtocolStack()-->Line_16 $$ stack.addProtocols(protocols)[ FD ]
Line_2 $$ protected void executeRuntimeStep(OperationContext context, ModelNode operation) throws OperationFailedException -->Line_4 $$ ServiceRegistry registry = context.getServiceRegistry(false)[ FD ]
Line_11 $$ ChannelFactory factory = controller.awaitValue()-->Line_12 $$ try (Channel channel = factory.createChannel(UUID.randomUUID().toString())) [ FD ]
