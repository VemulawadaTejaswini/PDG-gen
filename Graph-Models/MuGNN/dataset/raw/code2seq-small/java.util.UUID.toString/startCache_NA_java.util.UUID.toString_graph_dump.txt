Line_10 $$ ServiceContainer target = currentServiceContainer()-->Line_11 $$ ServiceBuilder<EmbeddedCacheManager> builder = new AliasServiceBuilder(serviceName, CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container), EmbeddedCacheManager.class).build(target).setInitialMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_6 $$ ServiceName serviceName-->Line_9 $$ serviceName = ServiceName.JBOSS.append(DEFAULT_CACHE_CONTAINER, (name != null) ? name : UUID.randomUUID().toString())[ FD ]
Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) -->Line_15 $$ ServiceRegistry registry = currentServiceContainer()[ CD ]
Line_11 $$ ServiceBuilder<EmbeddedCacheManager> builder = new AliasServiceBuilder(serviceName, CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container), EmbeddedCacheManager.class).build(target).setInitialMode(ServiceController.Mode.ACTIVE)-->Line_12 $$ embeddedCacheManager = ServiceContainerHelper.getValue(builder.install())[ FD ]
Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) -->Line_10 $$ ServiceContainer target = currentServiceContainer()[ CD ]
Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) -->Line_14 $$ serviceName = CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container)[ CD ]
Line_6 $$ ServiceName serviceName-->Line_16 $$ embeddedCacheManager = (EmbeddedCacheManager) registry.getRequiredService(serviceName).getValue()[ FD ]
Line_5 $$ EmbeddedCacheManager embeddedCacheManager-->Line_16 $$ embeddedCacheManager = (EmbeddedCacheManager) registry.getRequiredService(serviceName).getValue()[ FD ]
Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) -->Line_8 $$ String name = properties.getProperty(NAME)[ CD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_6 $$ ServiceName serviceName[ CD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_18 $$ return new CacheWrapper(embeddedCacheManager, serviceName)[ CD ]
Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) -->Line_12 $$ embeddedCacheManager = ServiceContainerHelper.getValue(builder.install())[ CD ]
Line_4 $$ String container = properties.getProperty(CONTAINER)-->Line_14 $$ serviceName = CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container)[ FD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) [ CD ]
Line_4 $$ String container = properties.getProperty(CONTAINER)-->Line_11 $$ ServiceBuilder<EmbeddedCacheManager> builder = new AliasServiceBuilder(serviceName, CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container), EmbeddedCacheManager.class).build(target).setInitialMode(ServiceController.Mode.ACTIVE)[ FD ]
Line_9 $$ serviceName = ServiceName.JBOSS.append(DEFAULT_CACHE_CONTAINER, (name != null) ? name : UUID.randomUUID().toString())-->Line_16 $$ embeddedCacheManager = (EmbeddedCacheManager) registry.getRequiredService(serviceName).getValue()[ FD ]
Line_15 $$ ServiceRegistry registry = currentServiceContainer()-->Line_16 $$ embeddedCacheManager = (EmbeddedCacheManager) registry.getRequiredService(serviceName).getValue()[ FD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_4 $$ String container = properties.getProperty(CONTAINER)[ CD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_3 $$ String cache_type = properties.getProperty(CACHE_TYPE)[ FD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_8 $$ String name = properties.getProperty(NAME)[ FD ]
Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) -->Line_9 $$ serviceName = ServiceName.JBOSS.append(DEFAULT_CACHE_CONTAINER, (name != null) ? name : UUID.randomUUID().toString())[ CD ]
Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) -->Line_11 $$ ServiceBuilder<EmbeddedCacheManager> builder = new AliasServiceBuilder(serviceName, CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container), EmbeddedCacheManager.class).build(target).setInitialMode(ServiceController.Mode.ACTIVE)[ CD ]
Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) -->Line_16 $$ embeddedCacheManager = (EmbeddedCacheManager) registry.getRequiredService(serviceName).getValue()[ CD ]
Line_6 $$ ServiceName serviceName-->Line_14 $$ serviceName = CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container)[ FD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_5 $$ EmbeddedCacheManager embeddedCacheManager[ CD ]
Line_14 $$ serviceName = CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container)-->Line_16 $$ embeddedCacheManager = (EmbeddedCacheManager) registry.getRequiredService(serviceName).getValue()[ FD ]
Line_9 $$ serviceName = ServiceName.JBOSS.append(DEFAULT_CACHE_CONTAINER, (name != null) ? name : UUID.randomUUID().toString())-->Line_14 $$ serviceName = CacheContainerServiceName.CACHE_CONTAINER.getServiceName(container)[ FD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_3 $$ String cache_type = properties.getProperty(CACHE_TYPE)[ CD ]
Line_3 $$ String cache_type = properties.getProperty(CACHE_TYPE)-->Line_7 $$ if (CACHE_PRIVATE.equals(cache_type)) [ FD ]
Line_2 $$ public Wrapper startCache(Classification classification, Properties properties) throws Exception -->Line_4 $$ String container = properties.getProperty(CONTAINER)[ FD ]
Line_5 $$ EmbeddedCacheManager embeddedCacheManager-->Line_12 $$ embeddedCacheManager = ServiceContainerHelper.getValue(builder.install())[ FD ]
Line_12 $$ embeddedCacheManager = ServiceContainerHelper.getValue(builder.install())-->Line_16 $$ embeddedCacheManager = (EmbeddedCacheManager) registry.getRequiredService(serviceName).getValue()[ FD ]
