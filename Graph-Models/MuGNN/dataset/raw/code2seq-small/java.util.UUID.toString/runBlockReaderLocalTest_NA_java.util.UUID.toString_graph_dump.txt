Line_19 $$ RandomAccessFile raf = null-->Line_73 $$ if (raf != null)[ FD ]
Line_12 $$ final Path TEST_PATH = new Path("/a")-->Line_52 $$ blockReaderLocal = new BlockReaderLocal.Builder(new DFSClient.Conf(conf)).setFilename(TEST_PATH.getName()).setBlock(block).setShortCircuitReplica(replica).setCachingStrategy(new CachingStrategy(false, readahead)).setVerifyChecksum(checksum).build()[ FD ]
Line_61 $$ if (fs != null)-->Line_62 $$ fs.close()[ CD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_9 $$ conf.setLong(DFSConfigKeys.DFS_CLIENT_CACHE_READAHEAD, readahead)[ FD ]
Line_37 $$ File dataFile = MiniDFSCluster.getBlockFile(0, block)-->Line_42 $$ test.setup(dataFile, checksum)[ FD ]
Line_35 $$ fsIn = null-->Line_60 $$ fsIn.close()[ FD ]
Line_11 $$ FileInputStream dataIn = null, metaIn = null-->Line_53 $$ dataIn = null[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_16 $$ byte[] original = new byte[BlockReaderLocalTest.TEST_LENGTH][ CD ]
Line_23 $$ fs = cluster.getFileSystem()-->Line_62 $$ fs.close()[ FD ]
Line_17 $$ FileSystem fs = null-->Line_26 $$ DFSTestUtil.waitReplication(fs, TEST_PATH, (short) 1)[ FD ]
Line_35 $$ fsIn = null-->Line_59 $$ if (fsIn != null)[ FD ]
Line_45 $$ metaIn = streams[1]-->Line_68 $$ metaIn.close()[ FD ]
Line_17 $$ FileSystem fs = null-->Line_32 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_52 $$ blockReaderLocal = new BlockReaderLocal.Builder(new DFSClient.Conf(conf)).setFilename(TEST_PATH.getName()).setBlock(block).setShortCircuitReplica(replica).setCachingStrategy(new CachingStrategy(false, readahead)).setVerifyChecksum(checksum).build()-->Line_70 $$ blockReaderLocal.close()[ FD ]
Line_11 $$ FileInputStream dataIn = null, metaIn = null-->Line_44 $$ dataIn = streams[0][ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_23 $$ fs = cluster.getFileSystem()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_64 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_42 $$ test.setup(dataFile, checksum)[ FD ]
Line_47 $$ raf = new RandomAccessFile(new File(sockDir.getDir().getAbsolutePath(), UUID.randomUUID().toString()), "rw")-->Line_48 $$ raf.setLength(8192)[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_19 $$ RandomAccessFile raf = null[ CD ]
Line_12 $$ final Path TEST_PATH = new Path("/a")-->Line_24 $$ DFSTestUtil.createFile(fs, TEST_PATH, BlockReaderLocalTest.TEST_LENGTH, (short) 1, RANDOM_SEED)[ FD ]
Line_65 $$ if (dataIn != null)-->Line_66 $$ dataIn.close()[ CD ]
Line_11 $$ FileInputStream dataIn = null, metaIn = null-->Line_66 $$ dataIn.close()[ FD ]
Line_14 $$ BlockReaderLocal blockReaderLocal = null-->Line_52 $$ blockReaderLocal = new BlockReaderLocal.Builder(new DFSClient.Conf(conf)).setFilename(TEST_PATH.getName()).setBlock(block).setShortCircuitReplica(replica).setCachingStrategy(new CachingStrategy(false, readahead)).setVerifyChecksum(checksum).build()[ FD ]
Line_53 $$ dataIn = null-->Line_65 $$ if (dataIn != null)[ FD ]
Line_11 $$ FileInputStream dataIn = null, metaIn = null-->Line_54 $$ metaIn = null[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_55 $$ test.doTest(blockReaderLocal, original)[ FD ]
Line_18 $$ ShortCircuitShm shm = null-->Line_50 $$ shm = new ShortCircuitShm(ShmId.createRandom(), shmStream)[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_4 $$ MiniDFSCluster cluster = null[ CD ]
Line_63 $$ if (cluster != null)-->Line_64 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_52 $$ blockReaderLocal = new BlockReaderLocal.Builder(new DFSClient.Conf(conf)).setFilename(TEST_PATH.getName()).setBlock(block).setShortCircuitReplica(replica).setCachingStrategy(new CachingStrategy(false, readahead)).setVerifyChecksum(checksum).build()[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_13 $$ final long RANDOM_SEED = 4567L[ CD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_8 $$ conf.set(DFSConfigKeys.DFS_CHECKSUM_TYPE_KEY, "CRC32C")[ CD ]
Line_45 $$ metaIn = streams[1]-->Line_54 $$ metaIn = null[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_14 $$ BlockReaderLocal blockReaderLocal = null[ CD ]
Line_11 $$ FileInputStream dataIn = null, metaIn = null-->Line_65 $$ if (dataIn != null)[ FD ]
Line_69 $$ if (blockReaderLocal != null)-->Line_70 $$ blockReaderLocal.close()[ CD ]
Line_18 $$ ShortCircuitShm shm = null-->Line_51 $$ ShortCircuitReplica replica = new ShortCircuitReplica(key, dataIn, metaIn, shortCircuitCache, Time.now(), shm.allocAndRegisterSlot(ExtendedBlockId.fromExtendedBlock(block)))[ FD ]
Line_45 $$ metaIn = streams[1]-->Line_67 $$ if (metaIn != null)[ FD ]
Line_16 $$ byte[] original = new byte[BlockReaderLocalTest.TEST_LENGTH]-->Line_55 $$ test.doTest(blockReaderLocal, original)[ FD ]
Line_14 $$ BlockReaderLocal blockReaderLocal = null-->Line_69 $$ if (blockReaderLocal != null)[ FD ]
Line_11 $$ FileInputStream dataIn = null, metaIn = null-->Line_45 $$ metaIn = streams[1][ FD ]
Line_19 $$ RandomAccessFile raf = null-->Line_49 $$ FileInputStream shmStream = new FileInputStream(raf.getFD())[ FD ]
Line_67 $$ if (metaIn != null)-->Line_68 $$ metaIn.close()[ CD ]
Line_23 $$ fs = cluster.getFileSystem()-->Line_36 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, TEST_PATH)[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_41 $$ cluster = null[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_3 $$ Assume.assumeThat(DomainSocket.getLoadingFailureReason(), equalTo(null))[ CD ]
Line_44 $$ dataIn = streams[0]-->Line_66 $$ dataIn.close()[ FD ]
Line_15 $$ FSDataInputStream fsIn = null-->Line_59 $$ if (fsIn != null)[ FD ]
Line_14 $$ BlockReaderLocal blockReaderLocal = null-->Line_70 $$ blockReaderLocal.close()[ FD ]
Line_51 $$ ShortCircuitReplica replica = new ShortCircuitReplica(key, dataIn, metaIn, shortCircuitCache, Time.now(), shm.allocAndRegisterSlot(ExtendedBlockId.fromExtendedBlock(block)))-->Line_52 $$ blockReaderLocal = new BlockReaderLocal.Builder(new DFSClient.Conf(conf)).setFilename(TEST_PATH.getName()).setBlock(block).setShortCircuitReplica(replica).setCachingStrategy(new CachingStrategy(false, readahead)).setVerifyChecksum(checksum).build()[ FD ]
Line_23 $$ fs = cluster.getFileSystem()-->Line_61 $$ if (fs != null)[ FD ]
Line_11 $$ FileInputStream dataIn = null, metaIn = null-->Line_67 $$ if (metaIn != null)[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_23 $$ fs = cluster.getFileSystem()[ FD ]
Line_44 $$ dataIn = streams[0]-->Line_53 $$ dataIn = null[ FD ]
Line_44 $$ dataIn = streams[0]-->Line_65 $$ if (dataIn != null)[ FD ]
Line_54 $$ metaIn = null-->Line_67 $$ if (metaIn != null)[ FD ]
Line_18 $$ ShortCircuitShm shm = null-->Line_72 $$ shm.free()[ FD ]
Line_19 $$ RandomAccessFile raf = null-->Line_48 $$ raf.setLength(8192)[ FD ]
Line_59 $$ if (fsIn != null)-->Line_60 $$ fsIn.close()[ CD ]
Line_17 $$ FileSystem fs = null-->Line_36 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, TEST_PATH)[ FD ]
Line_36 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, TEST_PATH)-->Line_51 $$ ShortCircuitReplica replica = new ShortCircuitReplica(key, dataIn, metaIn, shortCircuitCache, Time.now(), shm.allocAndRegisterSlot(ExtendedBlockId.fromExtendedBlock(block)))[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_63 $$ if (cluster != null)[ FD ]
Line_11 $$ FileInputStream dataIn = null, metaIn = null-->Line_68 $$ metaIn.close()[ FD ]
Line_54 $$ metaIn = null-->Line_68 $$ metaIn.close()[ FD ]
Line_32 $$ fsIn = fs.open(TEST_PATH)-->Line_35 $$ fsIn = null[ FD ]
Line_73 $$ if (raf != null)-->Line_74 $$ raf.close()[ CD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_6 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY, !checksum)[ CD ]
Line_17 $$ FileSystem fs = null-->Line_62 $$ fs.close()[ FD ]
Line_15 $$ FSDataInputStream fsIn = null-->Line_33 $$ IOUtils.readFully(fsIn, original, 0, BlockReaderLocalTest.TEST_LENGTH)[ FD ]
Line_12 $$ final Path TEST_PATH = new Path("/a")-->Line_32 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_17 $$ FileSystem fs = null-->Line_61 $$ if (fs != null)[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_15 $$ FSDataInputStream fsIn = null[ CD ]
Line_32 $$ fsIn = fs.open(TEST_PATH)-->Line_34 $$ fsIn.close()[ FD ]
Line_41 $$ cluster = null-->Line_64 $$ cluster.shutdown()[ FD ]
Line_41 $$ cluster = null-->Line_63 $$ if (cluster != null)[ FD ]
Line_47 $$ raf = new RandomAccessFile(new File(sockDir.getDir().getAbsolutePath(), UUID.randomUUID().toString()), "rw")-->Line_74 $$ raf.close()[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_9 $$ conf.setLong(DFSConfigKeys.DFS_CLIENT_CACHE_READAHEAD, readahead)[ CD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_11 $$ FileInputStream dataIn = null, metaIn = null[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_22 $$ cluster.waitActive()[ FD ]
Line_14 $$ BlockReaderLocal blockReaderLocal = null-->Line_55 $$ test.doTest(blockReaderLocal, original)[ FD ]
Line_13 $$ final long RANDOM_SEED = 4567L-->Line_24 $$ DFSTestUtil.createFile(fs, TEST_PATH, BlockReaderLocalTest.TEST_LENGTH, (short) 1, RANDOM_SEED)[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_7 $$ conf.setLong(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY, BlockReaderLocalTest.BYTES_PER_CHECKSUM)[ CD ]
Line_5 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_39 $$ ShortCircuitCache shortCircuitCache = ClientContext.getFromConf(conf).getShortCircuitCache()[ FD ]
Line_47 $$ raf = new RandomAccessFile(new File(sockDir.getDir().getAbsolutePath(), UUID.randomUUID().toString()), "rw")-->Line_73 $$ if (raf != null)[ FD ]
Line_23 $$ fs = cluster.getFileSystem()-->Line_24 $$ DFSTestUtil.createFile(fs, TEST_PATH, BlockReaderLocalTest.TEST_LENGTH, (short) 1, RANDOM_SEED)[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_10 $$ test.setConfiguration(conf)[ CD ]
Line_12 $$ final Path TEST_PATH = new Path("/a")-->Line_36 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, TEST_PATH)[ FD ]
Line_17 $$ FileSystem fs = null-->Line_24 $$ DFSTestUtil.createFile(fs, TEST_PATH, BlockReaderLocalTest.TEST_LENGTH, (short) 1, RANDOM_SEED)[ FD ]
Line_36 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, TEST_PATH)-->Line_38 $$ File metaFile = MiniDFSCluster.getBlockMetadataFile(0, block)[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_10 $$ test.setConfiguration(conf)[ FD ]
Line_17 $$ FileSystem fs = null-->Line_23 $$ fs = cluster.getFileSystem()[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_40 $$ cluster.shutdown()[ FD ]
Line_15 $$ FSDataInputStream fsIn = null-->Line_60 $$ fsIn.close()[ FD ]
Line_19 $$ RandomAccessFile raf = null-->Line_74 $$ raf.close()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_40 $$ cluster.shutdown()[ FD ]
Line_5 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_8 $$ conf.set(DFSConfigKeys.DFS_CHECKSUM_TYPE_KEY, "CRC32C")[ FD ]
Line_19 $$ RandomAccessFile raf = null-->Line_47 $$ raf = new RandomAccessFile(new File(sockDir.getDir().getAbsolutePath(), UUID.randomUUID().toString()), "rw")[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_12 $$ final Path TEST_PATH = new Path("/a")[ CD ]
Line_23 $$ fs = cluster.getFileSystem()-->Line_32 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_36 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, TEST_PATH)-->Line_46 $$ ExtendedBlockId key = new ExtendedBlockId(block.getBlockId(), block.getBlockPoolId())[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_17 $$ FileSystem fs = null[ CD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_63 $$ if (cluster != null)[ FD ]
Line_5 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_6 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY, !checksum)[ FD ]
Line_15 $$ FSDataInputStream fsIn = null-->Line_32 $$ fsIn = fs.open(TEST_PATH)[ FD ]
Line_36 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, TEST_PATH)-->Line_52 $$ blockReaderLocal = new BlockReaderLocal.Builder(new DFSClient.Conf(conf)).setFilename(TEST_PATH.getName()).setBlock(block).setShortCircuitReplica(replica).setCachingStrategy(new CachingStrategy(false, readahead)).setVerifyChecksum(checksum).build()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_41 $$ cluster = null[ FD ]
Line_23 $$ fs = cluster.getFileSystem()-->Line_26 $$ DFSTestUtil.waitReplication(fs, TEST_PATH, (short) 1)[ FD ]
Line_53 $$ dataIn = null-->Line_66 $$ dataIn.close()[ FD ]
Line_4 $$ MiniDFSCluster cluster = null-->Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()[ FD ]
Line_32 $$ fsIn = fs.open(TEST_PATH)-->Line_60 $$ fsIn.close()[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_18 $$ ShortCircuitShm shm = null[ CD ]
Line_15 $$ FSDataInputStream fsIn = null-->Line_34 $$ fsIn.close()[ FD ]
Line_50 $$ shm = new ShortCircuitShm(ShmId.createRandom(), shmStream)-->Line_51 $$ ShortCircuitReplica replica = new ShortCircuitReplica(key, dataIn, metaIn, shortCircuitCache, Time.now(), shm.allocAndRegisterSlot(ExtendedBlockId.fromExtendedBlock(block)))[ FD ]
Line_5 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_10 $$ test.setConfiguration(conf)[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_64 $$ cluster.shutdown()[ FD ]
Line_5 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_9 $$ conf.setLong(DFSConfigKeys.DFS_CLIENT_CACHE_READAHEAD, readahead)[ FD ]
Line_36 $$ ExtendedBlock block = DFSTestUtil.getFirstBlock(fs, TEST_PATH)-->Line_37 $$ File dataFile = MiniDFSCluster.getBlockFile(0, block)[ FD ]
Line_47 $$ raf = new RandomAccessFile(new File(sockDir.getDir().getAbsolutePath(), UUID.randomUUID().toString()), "rw")-->Line_49 $$ FileInputStream shmStream = new FileInputStream(raf.getFD())[ FD ]
Line_50 $$ shm = new ShortCircuitShm(ShmId.createRandom(), shmStream)-->Line_71 $$ if (shm != null)[ FD ]
Line_5 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_7 $$ conf.setLong(DFSConfigKeys.DFS_BYTES_PER_CHECKSUM_KEY, BlockReaderLocalTest.BYTES_PER_CHECKSUM)[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_6 $$ conf.setBoolean(DFSConfigKeys.DFS_CLIENT_READ_SHORTCIRCUIT_SKIP_CHECKSUM_KEY, !checksum)[ FD ]
Line_16 $$ byte[] original = new byte[BlockReaderLocalTest.TEST_LENGTH]-->Line_33 $$ IOUtils.readFully(fsIn, original, 0, BlockReaderLocalTest.TEST_LENGTH)[ FD ]
Line_50 $$ shm = new ShortCircuitShm(ShmId.createRandom(), shmStream)-->Line_72 $$ shm.free()[ FD ]
Line_18 $$ ShortCircuitShm shm = null-->Line_71 $$ if (shm != null)[ FD ]
Line_32 $$ fsIn = fs.open(TEST_PATH)-->Line_33 $$ IOUtils.readFully(fsIn, original, 0, BlockReaderLocalTest.TEST_LENGTH)[ FD ]
Line_71 $$ if (shm != null)-->Line_72 $$ shm.free()[ CD ]
Line_15 $$ FSDataInputStream fsIn = null-->Line_35 $$ fsIn = null[ FD ]
Line_2 $$ public void runBlockReaderLocalTest(BlockReaderLocalTest test, boolean checksum, long readahead) throws IOException -->Line_5 $$ HdfsConfiguration conf = new HdfsConfiguration()[ CD ]
Line_32 $$ fsIn = fs.open(TEST_PATH)-->Line_59 $$ if (fsIn != null)[ FD ]
Line_52 $$ blockReaderLocal = new BlockReaderLocal.Builder(new DFSClient.Conf(conf)).setFilename(TEST_PATH.getName()).setBlock(block).setShortCircuitReplica(replica).setCachingStrategy(new CachingStrategy(false, readahead)).setVerifyChecksum(checksum).build()-->Line_69 $$ if (blockReaderLocal != null)[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(1).build()-->Line_22 $$ cluster.waitActive()[ FD ]
Line_12 $$ final Path TEST_PATH = new Path("/a")-->Line_26 $$ DFSTestUtil.waitReplication(fs, TEST_PATH, (short) 1)[ FD ]
Line_52 $$ blockReaderLocal = new BlockReaderLocal.Builder(new DFSClient.Conf(conf)).setFilename(TEST_PATH.getName()).setBlock(block).setShortCircuitReplica(replica).setCachingStrategy(new CachingStrategy(false, readahead)).setVerifyChecksum(checksum).build()-->Line_55 $$ test.doTest(blockReaderLocal, original)[ FD ]
