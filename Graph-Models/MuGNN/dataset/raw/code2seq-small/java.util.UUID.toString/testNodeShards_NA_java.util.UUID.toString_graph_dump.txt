Line_17 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 4, 44, 444)-->Line_26 $$ dao.insertShardNode(shardId4, nodeId2)[ FD ]
Line_10 $$ UUID shardUuid2 = UUID.randomUUID()-->Line_15 $$ long shardId2 = dao.insertShard(shardUuid2, tableId, 2, 22, 222)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_5 $$ int nodeId1 = dao.insertNode(nodeName1)[ CD ]
Line_13 $$ long tableId = createTable("test")-->Line_15 $$ long shardId2 = dao.insertShard(shardUuid2, tableId, 2, 22, 222)[ FD ]
Line_13 $$ long tableId = createTable("test")-->Line_17 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 4, 44, 444)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_29 $$ ShardMetadata shard3 = new ShardMetadata(tableId, shardId3, shardUuid3, 3, 33, 333)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_30 $$ ShardMetadata shard4 = new ShardMetadata(tableId, shardId4, shardUuid4, 4, 44, 444)[ CD ]
Line_12 $$ UUID shardUuid4 = UUID.randomUUID()-->Line_18 $$ assertEquals(dao.getShards(tableId), ImmutableList.of(shardUuid1, shardUuid2, shardUuid3, shardUuid4))[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_23 $$ dao.insertShardNode(shardId3, nodeId1)[ CD ]
Line_27 $$ ShardMetadata shard1 = new ShardMetadata(tableId, shardId1, shardUuid1, 1, 11, 111)-->Line_31 $$ assertEquals(dao.getNodeShards(nodeName1), ImmutableSet.of(shard1, shard2, shard3, shard4))[ FD ]
Line_27 $$ ShardMetadata shard1 = new ShardMetadata(tableId, shardId1, shardUuid1, 1, 11, 111)-->Line_32 $$ assertEquals(dao.getNodeShards(nodeName2), ImmutableSet.of(shard1, shard4))[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_36 $$ assertEquals(dao.getShards(tableId), ImmutableList.of())[ CD ]
Line_4 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_8 $$ assertEquals(dao.getAllNodesInUse(), ImmutableSet.of(nodeName1, nodeName2))[ FD ]
Line_9 $$ UUID shardUuid1 = UUID.randomUUID()-->Line_18 $$ assertEquals(dao.getShards(tableId), ImmutableList.of(shardUuid1, shardUuid2, shardUuid3, shardUuid4))[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_18 $$ assertEquals(dao.getShards(tableId), ImmutableList.of(shardUuid1, shardUuid2, shardUuid3, shardUuid4))[ CD ]
Line_13 $$ long tableId = createTable("test")-->Line_35 $$ dao.dropShards(tableId)[ FD ]
Line_9 $$ UUID shardUuid1 = UUID.randomUUID()-->Line_14 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 1, 11, 111)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_3 $$ assertEquals(dao.getAllNodesInUse(), ImmutableSet.of())[ CD ]
Line_13 $$ long tableId = createTable("test")-->Line_18 $$ assertEquals(dao.getShards(tableId), ImmutableList.of(shardUuid1, shardUuid2, shardUuid3, shardUuid4))[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_11 $$ UUID shardUuid3 = UUID.randomUUID()[ CD ]
Line_5 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_21 $$ dao.insertShardNode(shardId1, nodeId1)[ FD ]
Line_15 $$ long shardId2 = dao.insertShard(shardUuid2, tableId, 2, 22, 222)-->Line_22 $$ dao.insertShardNode(shardId2, nodeId1)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_7 $$ int nodeId2 = dao.insertNode(nodeName2)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_13 $$ long tableId = createTable("test")[ CD ]
Line_5 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_24 $$ dao.insertShardNode(shardId4, nodeId1)[ FD ]
Line_13 $$ long tableId = createTable("test")-->Line_34 $$ assertEquals(dao.getShardNodes(tableId), ImmutableList.of())[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_28 $$ ShardMetadata shard2 = new ShardMetadata(tableId, shardId2, shardUuid2, 2, 22, 222)[ CD ]
Line_29 $$ ShardMetadata shard3 = new ShardMetadata(tableId, shardId3, shardUuid3, 3, 33, 333)-->Line_31 $$ assertEquals(dao.getNodeShards(nodeName1), ImmutableSet.of(shard1, shard2, shard3, shard4))[ FD ]
Line_7 $$ int nodeId2 = dao.insertNode(nodeName2)-->Line_26 $$ dao.insertShardNode(shardId4, nodeId2)[ FD ]
Line_6 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_32 $$ assertEquals(dao.getNodeShards(nodeName2), ImmutableSet.of(shard1, shard4))[ FD ]
Line_4 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_31 $$ assertEquals(dao.getNodeShards(nodeName1), ImmutableSet.of(shard1, shard2, shard3, shard4))[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_12 $$ UUID shardUuid4 = UUID.randomUUID()[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_35 $$ dao.dropShards(tableId)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_17 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 4, 44, 444)[ CD ]
Line_17 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 4, 44, 444)-->Line_24 $$ dao.insertShardNode(shardId4, nodeId1)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_19 $$ assertEquals(dao.getNodeShards(nodeName1).size(), 0)[ CD ]
Line_13 $$ long tableId = createTable("test")-->Line_14 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 1, 11, 111)[ FD ]
Line_12 $$ UUID shardUuid4 = UUID.randomUUID()-->Line_17 $$ long shardId4 = dao.insertShard(shardUuid4, tableId, 4, 44, 444)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_34 $$ assertEquals(dao.getShardNodes(tableId), ImmutableList.of())[ CD ]
Line_13 $$ long tableId = createTable("test")-->Line_16 $$ long shardId3 = dao.insertShard(shardUuid3, tableId, 3, 33, 333)[ FD ]
Line_11 $$ UUID shardUuid3 = UUID.randomUUID()-->Line_18 $$ assertEquals(dao.getShards(tableId), ImmutableList.of(shardUuid1, shardUuid2, shardUuid3, shardUuid4))[ FD ]
Line_14 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 1, 11, 111)-->Line_25 $$ dao.insertShardNode(shardId1, nodeId2)[ FD ]
Line_16 $$ long shardId3 = dao.insertShard(shardUuid3, tableId, 3, 33, 333)-->Line_23 $$ dao.insertShardNode(shardId3, nodeId1)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_21 $$ dao.insertShardNode(shardId1, nodeId1)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_22 $$ dao.insertShardNode(shardId2, nodeId1)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_14 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 1, 11, 111)[ CD ]
Line_14 $$ long shardId1 = dao.insertShard(shardUuid1, tableId, 1, 11, 111)-->Line_21 $$ dao.insertShardNode(shardId1, nodeId1)[ FD ]
Line_4 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_19 $$ assertEquals(dao.getNodeShards(nodeName1).size(), 0)[ FD ]
Line_10 $$ UUID shardUuid2 = UUID.randomUUID()-->Line_18 $$ assertEquals(dao.getShards(tableId), ImmutableList.of(shardUuid1, shardUuid2, shardUuid3, shardUuid4))[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_33 $$ dao.dropShardNodes(tableId)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_31 $$ assertEquals(dao.getNodeShards(nodeName1), ImmutableSet.of(shard1, shard2, shard3, shard4))[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_26 $$ dao.insertShardNode(shardId4, nodeId2)[ CD ]
Line_28 $$ ShardMetadata shard2 = new ShardMetadata(tableId, shardId2, shardUuid2, 2, 22, 222)-->Line_31 $$ assertEquals(dao.getNodeShards(nodeName1), ImmutableSet.of(shard1, shard2, shard3, shard4))[ FD ]
Line_13 $$ long tableId = createTable("test")-->Line_33 $$ dao.dropShardNodes(tableId)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_10 $$ UUID shardUuid2 = UUID.randomUUID()[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_24 $$ dao.insertShardNode(shardId4, nodeId1)[ CD ]
Line_6 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_20 $$ assertEquals(dao.getNodeShards(nodeName2).size(), 0)[ FD ]
Line_4 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_5 $$ int nodeId1 = dao.insertNode(nodeName1)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_15 $$ long shardId2 = dao.insertShard(shardUuid2, tableId, 2, 22, 222)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_25 $$ dao.insertShardNode(shardId1, nodeId2)[ CD ]
Line_5 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_22 $$ dao.insertShardNode(shardId2, nodeId1)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_16 $$ long shardId3 = dao.insertShard(shardUuid3, tableId, 3, 33, 333)[ CD ]
Line_30 $$ ShardMetadata shard4 = new ShardMetadata(tableId, shardId4, shardUuid4, 4, 44, 444)-->Line_31 $$ assertEquals(dao.getNodeShards(nodeName1), ImmutableSet.of(shard1, shard2, shard3, shard4))[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_8 $$ assertEquals(dao.getAllNodesInUse(), ImmutableSet.of(nodeName1, nodeName2))[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_9 $$ UUID shardUuid1 = UUID.randomUUID()[ CD ]
Line_30 $$ ShardMetadata shard4 = new ShardMetadata(tableId, shardId4, shardUuid4, 4, 44, 444)-->Line_32 $$ assertEquals(dao.getNodeShards(nodeName2), ImmutableSet.of(shard1, shard4))[ FD ]
Line_6 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_8 $$ assertEquals(dao.getAllNodesInUse(), ImmutableSet.of(nodeName1, nodeName2))[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_20 $$ assertEquals(dao.getNodeShards(nodeName2).size(), 0)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_6 $$ String nodeName2 = UUID.randomUUID().toString()[ CD ]
Line_6 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_7 $$ int nodeId2 = dao.insertNode(nodeName2)[ FD ]
Line_13 $$ long tableId = createTable("test")-->Line_36 $$ assertEquals(dao.getShards(tableId), ImmutableList.of())[ FD ]
Line_11 $$ UUID shardUuid3 = UUID.randomUUID()-->Line_16 $$ long shardId3 = dao.insertShard(shardUuid3, tableId, 3, 33, 333)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_4 $$ String nodeName1 = UUID.randomUUID().toString()[ CD ]
Line_7 $$ int nodeId2 = dao.insertNode(nodeName2)-->Line_25 $$ dao.insertShardNode(shardId1, nodeId2)[ FD ]
Line_5 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_23 $$ dao.insertShardNode(shardId3, nodeId1)[ FD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_27 $$ ShardMetadata shard1 = new ShardMetadata(tableId, shardId1, shardUuid1, 1, 11, 111)[ CD ]
Line_2 $$ public void testNodeShards() throws Exception -->Line_32 $$ assertEquals(dao.getNodeShards(nodeName2), ImmutableSet.of(shard1, shard4))[ CD ]
