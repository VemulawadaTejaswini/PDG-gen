Line_15 $$ Entry entry = new DefaultEntry(schemaManager, ldifEntry.getEntry())-->Line_16 $$ if (entry.get(SchemaConstants.ENTRY_CSN_AT) == null) [ FD ]
Line_15 $$ Entry entry = new DefaultEntry(schemaManager, ldifEntry.getEntry())-->Line_20 $$ entry.add(SchemaConstants.ENTRY_UUID_AT, UUID.randomUUID().toString())[ FD ]
Line_15 $$ Entry entry = new DefaultEntry(schemaManager, ldifEntry.getEntry())-->Line_19 $$ if (entry.get(SchemaConstants.ENTRY_UUID_AT) == null) [ FD ]
Line_3 $$ if (initialized)-->Line_4 $$ return[ CD ]
Line_13 $$ LdifEntry ldifEntry = reader.next()-->Line_15 $$ Entry entry = new DefaultEntry(schemaManager, ldifEntry.getEntry())[ FD ]
Line_15 $$ Entry entry = new DefaultEntry(schemaManager, ldifEntry.getEntry())-->Line_17 $$ entry.add(SchemaConstants.ENTRY_CSN_AT, defaultCSNFactory.newInstance().toString())[ FD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_23 $$ super.add(addContext)[ CD ]
Line_16 $$ if (entry.get(SchemaConstants.ENTRY_CSN_AT) == null) -->Line_17 $$ entry.add(SchemaConstants.ENTRY_CSN_AT, defaultCSNFactory.newInstance().toString())[ CD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_12 $$ LdifReader reader = new LdifReader(resource.openStream())[ CD ]
Line_2 $$ protected void doInit() throws Exception -->Line_6 $$ suffixDn.apply(schemaManager)[ CD ]
Line_2 $$ protected void doInit() throws Exception -->Line_8 $$ final Map<String, Boolean> resMap = ResourceMap.getResources(Pattern.compile("schema[/\\Q\\\\E]ou=schema.*"))[ CD ]
Line_8 $$ final Map<String, Boolean> resMap = ResourceMap.getResources(Pattern.compile("schema[/\\Q\\\\E]ou=schema.*"))-->Line_9 $$ for (String resourcePath : new TreeSet<String>(resMap.keySet())) [ FD ]
Line_9 $$ for (String resourcePath : new TreeSet<String>(resMap.keySet())) -->Line_11 $$ URL resource = DefaultSchemaLdifExtractor.getUniqueResource(resourcePath, "Schema LDIF file")[ FD ]
Line_2 $$ protected void doInit() throws Exception -->Line_7 $$ super.doInit()[ CD ]
Line_11 $$ URL resource = DefaultSchemaLdifExtractor.getUniqueResource(resourcePath, "Schema LDIF file")-->Line_12 $$ LdifReader reader = new LdifReader(resource.openStream())[ FD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_13 $$ LdifEntry ldifEntry = reader.next()[ CD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_19 $$ if (entry.get(SchemaConstants.ENTRY_UUID_AT) == null) [ CD ]
Line_12 $$ LdifReader reader = new LdifReader(resource.openStream())-->Line_14 $$ reader.close()[ FD ]
Line_2 $$ protected void doInit() throws Exception -->Line_3 $$ if (initialized)[ CD ]
Line_2 $$ protected void doInit() throws Exception -->Line_5 $$ LOG.debug("Initializing schema partition " + getId())[ CD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_16 $$ if (entry.get(SchemaConstants.ENTRY_CSN_AT) == null) [ CD ]
Line_12 $$ LdifReader reader = new LdifReader(resource.openStream())-->Line_13 $$ LdifEntry ldifEntry = reader.next()[ FD ]
Line_22 $$ AddOperationContext addContext = new AddOperationContext(null, entry)-->Line_23 $$ super.add(addContext)[ FD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_15 $$ Entry entry = new DefaultEntry(schemaManager, ldifEntry.getEntry())[ CD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_11 $$ URL resource = DefaultSchemaLdifExtractor.getUniqueResource(resourcePath, "Schema LDIF file")[ CD ]
Line_9 $$ for (String resourcePath : new TreeSet<String>(resMap.keySet())) -->Line_10 $$ if (resourcePath.endsWith(".ldif")) [ FD ]
Line_19 $$ if (entry.get(SchemaConstants.ENTRY_UUID_AT) == null) -->Line_20 $$ entry.add(SchemaConstants.ENTRY_UUID_AT, UUID.randomUUID().toString())[ CD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_14 $$ reader.close()[ CD ]
Line_10 $$ if (resourcePath.endsWith(".ldif")) -->Line_22 $$ AddOperationContext addContext = new AddOperationContext(null, entry)[ CD ]
