Line_21 $$ actual = getMaterializedResults(cursor, SHARD_METADATA.getColumns())-->Line_25 $$ assertEquals(actual, expected)[ FD ]
Line_2 $$ public void testSimple() throws Exception -->Line_12 $$ long transactionId = shardManager.beginTransaction()[ CD ]
Line_10 $$ ShardInfo shardInfo3 = new ShardInfo(uuid3, ImmutableSet.of("node3"), ImmutableList.of(), 3, 30, 300)-->Line_11 $$ List<ShardInfo> shards = ImmutableList.of(shardInfo1, shardInfo2, shardInfo3)[ FD ]
Line_6 $$ UUID uuid2 = UUID.randomUUID()-->Line_24 $$ List<MaterializedRow> expected = ImmutableList.of(new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid1.toString()), 100, 10, 1), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid2.toString()), 200, 20, 2), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid3.toString()), 300, 30, 3))[ FD ]
Line_2 $$ public void testSimple() throws Exception -->Line_8 $$ ShardInfo shardInfo1 = new ShardInfo(uuid1, ImmutableSet.of("node1"), ImmutableList.of(), 1, 10, 100)[ CD ]
Line_21 $$ actual = getMaterializedResults(cursor, SHARD_METADATA.getColumns())-->Line_23 $$ assertEquals(actual.size(), 3)[ FD ]
Line_2 $$ public void testSimple() throws Exception -->Line_6 $$ UUID uuid2 = UUID.randomUUID()[ CD ]
Line_8 $$ ShardInfo shardInfo1 = new ShardInfo(uuid1, ImmutableSet.of("node1"), ImmutableList.of(), 1, 10, 100)-->Line_11 $$ List<ShardInfo> shards = ImmutableList.of(shardInfo1, shardInfo2, shardInfo3)[ FD ]
Line_16 $$ DateTime date1 = DateTime.parse("2015-01-01T00:00")-->Line_18 $$ TupleDomain<Integer> tupleDomain = TupleDomain.withColumnDomains(ImmutableMap.<Integer, Domain>builder().put(0, Domain.singleValue(VARCHAR, schema)).put(1, Domain.create(ValueSet.ofRanges(lessThanOrEqual(VARCHAR, table)), true)).put(6, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).put(7, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).build())[ FD ]
Line_18 $$ TupleDomain<Integer> tupleDomain = TupleDomain.withColumnDomains(ImmutableMap.<Integer, Domain>builder().put(0, Domain.singleValue(VARCHAR, schema)).put(1, Domain.create(ValueSet.ofRanges(lessThanOrEqual(VARCHAR, table)), true)).put(6, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).put(7, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).build())-->Line_20 $$ try (RecordCursor cursor = new ShardMetadataSystemTable(dbi).cursor(SESSION, tupleDomain)) [ FD ]
Line_20 $$ try (RecordCursor cursor = new ShardMetadataSystemTable(dbi).cursor(SESSION, tupleDomain)) -->Line_21 $$ actual = getMaterializedResults(cursor, SHARD_METADATA.getColumns())[ FD ]
Line_2 $$ public void testSimple() throws Exception -->Line_5 $$ UUID uuid1 = UUID.randomUUID()[ CD ]
Line_19 $$ List<MaterializedRow> actual-->Line_25 $$ assertEquals(actual, expected)[ FD ]
Line_3 $$ ShardManager shardManager = createShardManager(dbi)-->Line_13 $$ shardManager.commitShards(transactionId, tableId, ImmutableList.of(new ColumnInfo(1, BIGINT), new ColumnInfo(2, DATE)), shards, Optional.empty())[ FD ]
Line_4 $$ long tableId = 1-->Line_13 $$ shardManager.commitShards(transactionId, tableId, ImmutableList.of(new ColumnInfo(1, BIGINT), new ColumnInfo(2, DATE)), shards, Optional.empty())[ FD ]
Line_14 $$ Slice schema = utf8Slice(DEFAULT_TEST_ORDERS.getSchemaName())-->Line_18 $$ TupleDomain<Integer> tupleDomain = TupleDomain.withColumnDomains(ImmutableMap.<Integer, Domain>builder().put(0, Domain.singleValue(VARCHAR, schema)).put(1, Domain.create(ValueSet.ofRanges(lessThanOrEqual(VARCHAR, table)), true)).put(6, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).put(7, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).build())[ FD ]
Line_2 $$ public void testSimple() throws Exception -->Line_23 $$ assertEquals(actual.size(), 3)[ CD ]
Line_3 $$ ShardManager shardManager = createShardManager(dbi)-->Line_12 $$ long transactionId = shardManager.beginTransaction()[ FD ]
Line_5 $$ UUID uuid1 = UUID.randomUUID()-->Line_24 $$ List<MaterializedRow> expected = ImmutableList.of(new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid1.toString()), 100, 10, 1), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid2.toString()), 200, 20, 2), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid3.toString()), 300, 30, 3))[ FD ]
Line_12 $$ long transactionId = shardManager.beginTransaction()-->Line_13 $$ shardManager.commitShards(transactionId, tableId, ImmutableList.of(new ColumnInfo(1, BIGINT), new ColumnInfo(2, DATE)), shards, Optional.empty())[ FD ]
Line_7 $$ UUID uuid3 = UUID.randomUUID()-->Line_24 $$ List<MaterializedRow> expected = ImmutableList.of(new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid1.toString()), 100, 10, 1), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid2.toString()), 200, 20, 2), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid3.toString()), 300, 30, 3))[ FD ]
Line_2 $$ public void testSimple() throws Exception -->Line_7 $$ UUID uuid3 = UUID.randomUUID()[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_14 $$ Slice schema = utf8Slice(DEFAULT_TEST_ORDERS.getSchemaName())[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_4 $$ long tableId = 1[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_13 $$ shardManager.commitShards(transactionId, tableId, ImmutableList.of(new ColumnInfo(1, BIGINT), new ColumnInfo(2, DATE)), shards, Optional.empty())[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_16 $$ DateTime date1 = DateTime.parse("2015-01-01T00:00")[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_24 $$ List<MaterializedRow> expected = ImmutableList.of(new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid1.toString()), 100, 10, 1), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid2.toString()), 200, 20, 2), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid3.toString()), 300, 30, 3))[ CD ]
Line_17 $$ DateTime date2 = DateTime.parse("2015-01-02T00:00")-->Line_18 $$ TupleDomain<Integer> tupleDomain = TupleDomain.withColumnDomains(ImmutableMap.<Integer, Domain>builder().put(0, Domain.singleValue(VARCHAR, schema)).put(1, Domain.create(ValueSet.ofRanges(lessThanOrEqual(VARCHAR, table)), true)).put(6, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).put(7, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).build())[ FD ]
Line_2 $$ public void testSimple() throws Exception -->Line_10 $$ ShardInfo shardInfo3 = new ShardInfo(uuid3, ImmutableSet.of("node3"), ImmutableList.of(), 3, 30, 300)[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_19 $$ List<MaterializedRow> actual[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_15 $$ Slice table = utf8Slice(DEFAULT_TEST_ORDERS.getTableName())[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_3 $$ ShardManager shardManager = createShardManager(dbi)[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_9 $$ ShardInfo shardInfo2 = new ShardInfo(uuid2, ImmutableSet.of("node2"), ImmutableList.of(), 2, 20, 200)[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_25 $$ assertEquals(actual, expected)[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_11 $$ List<ShardInfo> shards = ImmutableList.of(shardInfo1, shardInfo2, shardInfo3)[ CD ]
Line_24 $$ List<MaterializedRow> expected = ImmutableList.of(new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid1.toString()), 100, 10, 1), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid2.toString()), 200, 20, 2), new MaterializedRow(DEFAULT_PRECISION, schema, table, utf8Slice(uuid3.toString()), 300, 30, 3))-->Line_25 $$ assertEquals(actual, expected)[ FD ]
Line_2 $$ public void testSimple() throws Exception -->Line_18 $$ TupleDomain<Integer> tupleDomain = TupleDomain.withColumnDomains(ImmutableMap.<Integer, Domain>builder().put(0, Domain.singleValue(VARCHAR, schema)).put(1, Domain.create(ValueSet.ofRanges(lessThanOrEqual(VARCHAR, table)), true)).put(6, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).put(7, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).build())[ CD ]
Line_2 $$ public void testSimple() throws Exception -->Line_17 $$ DateTime date2 = DateTime.parse("2015-01-02T00:00")[ CD ]
Line_19 $$ List<MaterializedRow> actual-->Line_23 $$ assertEquals(actual.size(), 3)[ FD ]
Line_19 $$ List<MaterializedRow> actual-->Line_21 $$ actual = getMaterializedResults(cursor, SHARD_METADATA.getColumns())[ FD ]
Line_9 $$ ShardInfo shardInfo2 = new ShardInfo(uuid2, ImmutableSet.of("node2"), ImmutableList.of(), 2, 20, 200)-->Line_11 $$ List<ShardInfo> shards = ImmutableList.of(shardInfo1, shardInfo2, shardInfo3)[ FD ]
Line_11 $$ List<ShardInfo> shards = ImmutableList.of(shardInfo1, shardInfo2, shardInfo3)-->Line_13 $$ shardManager.commitShards(transactionId, tableId, ImmutableList.of(new ColumnInfo(1, BIGINT), new ColumnInfo(2, DATE)), shards, Optional.empty())[ FD ]
Line_15 $$ Slice table = utf8Slice(DEFAULT_TEST_ORDERS.getTableName())-->Line_18 $$ TupleDomain<Integer> tupleDomain = TupleDomain.withColumnDomains(ImmutableMap.<Integer, Domain>builder().put(0, Domain.singleValue(VARCHAR, schema)).put(1, Domain.create(ValueSet.ofRanges(lessThanOrEqual(VARCHAR, table)), true)).put(6, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).put(7, Domain.create(ValueSet.ofRanges(lessThanOrEqual(BIGINT, date1.getMillis()), greaterThan(BIGINT, date2.getMillis())), true)).build())[ FD ]
