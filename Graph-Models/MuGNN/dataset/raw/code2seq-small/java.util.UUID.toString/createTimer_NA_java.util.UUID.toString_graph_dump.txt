Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_9 $$ if (intervalDuration < 0) [ FD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_13 $$ TimerImpl timer = TimerImpl.builder().setNewTimer(true).setId(uuid.toString()).setInitialDate(initialExpiration).setRepeatInterval(intervalDuration).setInfo(info).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimerState(TimerState.CREATED).setTimedObjectId(getInvoker().getTimedObjectId()).build(this)[ CD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_15 $$ this.startTimer(timer)[ CD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_16 $$ return timer[ CD ]
Line_13 $$ TimerImpl timer = TimerImpl.builder().setNewTimer(true).setId(uuid.toString()).setInitialDate(initialExpiration).setRepeatInterval(intervalDuration).setInfo(info).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimerState(TimerState.CREATED).setTimedObjectId(getInvoker().getTimedObjectId()).build(this)-->Line_15 $$ this.startTimer(timer)[ FD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_3 $$ if (this.isLifecycleCallbackInvocation() && !this.isSingletonBeanInvocation()) [ CD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_9 $$ if (intervalDuration < 0) [ CD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_12 $$ UUID uuid = UUID.randomUUID()[ CD ]
Line_12 $$ UUID uuid = UUID.randomUUID()-->Line_13 $$ TimerImpl timer = TimerImpl.builder().setNewTimer(true).setId(uuid.toString()).setInitialDate(initialExpiration).setRepeatInterval(intervalDuration).setInfo(info).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimerState(TimerState.CREATED).setTimedObjectId(getInvoker().getTimedObjectId()).build(this)[ FD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_6 $$ if (initialExpiration == null) [ CD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_6 $$ if (initialExpiration == null) [ FD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_14 $$ this.persistTimer(timer, true)[ CD ]
Line_13 $$ TimerImpl timer = TimerImpl.builder().setNewTimer(true).setId(uuid.toString()).setInitialDate(initialExpiration).setRepeatInterval(intervalDuration).setInfo(info).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimerState(TimerState.CREATED).setTimedObjectId(getInvoker().getTimedObjectId()).build(this)-->Line_14 $$ this.persistTimer(timer, true)[ FD ]
Line_2 $$ private Timer createTimer(Date initialExpiration, long intervalDuration, Serializable info, boolean persistent) -->Line_13 $$ TimerImpl timer = TimerImpl.builder().setNewTimer(true).setId(uuid.toString()).setInitialDate(initialExpiration).setRepeatInterval(intervalDuration).setInfo(info).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimerState(TimerState.CREATED).setTimedObjectId(getInvoker().getTimedObjectId()).build(this)[ FD ]
