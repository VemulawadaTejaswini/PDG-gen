Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_16 $$ remover.start()[ CD ]
Line_3 $$ final AtomicBoolean success = new AtomicBoolean(false)-->Line_25 $$ assertTrue(success.get())[ FD ]
Line_4 $$ Thread remover = new Thread() -->Line_13 $$ success.set(true)[ CD ]
Line_4 $$ Thread remover = new Thread() -->Line_16 $$ remover.start()[ FD ]
Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_24 $$ remover.join()[ CD ]
Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_18 $$ assertTrue(tmd.isLeaving(removalhost))[ CD ]
Line_4 $$ Thread remover = new Thread() -->Line_24 $$ remover.join()[ FD ]
Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_17 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_26 $$ assertTrue(tmd.getLeavingEndpoints().isEmpty())[ CD ]
Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_4 $$ Thread remover = new Thread() [ CD ]
Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_19 $$ assertEquals(1, tmd.getLeavingEndpoints().size())[ CD ]
Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_3 $$ final AtomicBoolean success = new AtomicBoolean(false)[ CD ]
Line_3 $$ final AtomicBoolean success = new AtomicBoolean(false)-->Line_13 $$ success.set(true)[ FD ]
Line_2 $$ public void testRemoveHostId() throws InterruptedException -->Line_25 $$ assertTrue(success.get())[ CD ]
