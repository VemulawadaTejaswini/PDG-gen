Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_6 $$ handler.setConf(new YarnConfiguration())[ CD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_7 $$ handler.initConfig()[ CD ]
Line_5 $$ CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler()-->Line_25 $$ Assert.assertFalse(handler.deleteCgroup(file.getPath()))[ FD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_4 $$ clock.time = System.currentTimeMillis()[ CD ]
Line_13 $$ new Thread() -->Line_20 $$ clock.time += YarnConfiguration.DEFAULT_NM_LINUX_CONTAINER_CGROUPS_DELETE_TIMEOUT[ CD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_5 $$ CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler()[ CD ]
Line_5 $$ CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler()-->Line_11 $$ Assert.assertTrue(handler.deleteCgroup(file.getPath()))[ FD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_3 $$ final MockClock clock = new MockClock()[ CD ]
Line_12 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_15 $$ latch.countDown()[ FD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_23 $$ latch.await()[ CD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_8 $$ handler.clock = clock[ CD ]
Line_9 $$ File file = new File("target", UUID.randomUUID().toString())-->Line_11 $$ Assert.assertTrue(handler.deleteCgroup(file.getPath()))[ FD ]
Line_3 $$ final MockClock clock = new MockClock()-->Line_8 $$ handler.clock = clock[ FD ]
Line_13 $$ new Thread() -->Line_15 $$ latch.countDown()[ CD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_25 $$ Assert.assertFalse(handler.deleteCgroup(file.getPath()))[ CD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_12 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_5 $$ CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler()-->Line_7 $$ handler.initConfig()[ FD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_13 $$ new Thread() [ CD ]
Line_9 $$ File file = new File("target", UUID.randomUUID().toString())-->Line_25 $$ Assert.assertFalse(handler.deleteCgroup(file.getPath()))[ FD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_9 $$ File file = new File("target", UUID.randomUUID().toString())[ CD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_10 $$ new FileOutputStream(file).close()[ CD ]
Line_12 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_23 $$ latch.await()[ FD ]
Line_2 $$ public void testDeleteCgroup() throws Exception -->Line_11 $$ Assert.assertTrue(handler.deleteCgroup(file.getPath()))[ CD ]
Line_5 $$ CgroupsLCEResourcesHandler handler = new CgroupsLCEResourcesHandler()-->Line_6 $$ handler.setConf(new YarnConfiguration())[ FD ]
