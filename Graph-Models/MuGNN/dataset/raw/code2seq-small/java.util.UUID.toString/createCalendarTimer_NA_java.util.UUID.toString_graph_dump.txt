Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_10 $$ TimerImpl timer = CalendarTimer.builder().setAutoTimer(timeoutMethod != null).setScheduleExprSecond(schedule.getSecond()).setScheduleExprMinute(schedule.getMinute()).setScheduleExprHour(schedule.getHour()).setScheduleExprDayOfWeek(schedule.getDayOfWeek()).setScheduleExprDayOfMonth(schedule.getDayOfMonth()).setScheduleExprMonth(schedule.getMonth()).setScheduleExprYear(schedule.getYear()).setScheduleExprStartDate(schedule.getStart()).setScheduleExprEndDate(schedule.getEnd()).setScheduleExprTimezone(schedule.getTimezone()).setTimeoutMethod(timeoutMethod).setTimerState(TimerState.CREATED).setId(uuid.toString()).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimedObjectId(getInvoker().getTimedObjectId()).setInfo(info).setNewTimer(true).build(this)[ FD ]
Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_6 $$ if (schedule == null) [ CD ]
Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_11 $$ this.persistTimer(timer, true)[ CD ]
Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_10 $$ TimerImpl timer = CalendarTimer.builder().setAutoTimer(timeoutMethod != null).setScheduleExprSecond(schedule.getSecond()).setScheduleExprMinute(schedule.getMinute()).setScheduleExprHour(schedule.getHour()).setScheduleExprDayOfWeek(schedule.getDayOfWeek()).setScheduleExprDayOfMonth(schedule.getDayOfMonth()).setScheduleExprMonth(schedule.getMonth()).setScheduleExprYear(schedule.getYear()).setScheduleExprStartDate(schedule.getStart()).setScheduleExprEndDate(schedule.getEnd()).setScheduleExprTimezone(schedule.getTimezone()).setTimeoutMethod(timeoutMethod).setTimerState(TimerState.CREATED).setId(uuid.toString()).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimedObjectId(getInvoker().getTimedObjectId()).setInfo(info).setNewTimer(true).build(this)[ CD ]
Line_10 $$ TimerImpl timer = CalendarTimer.builder().setAutoTimer(timeoutMethod != null).setScheduleExprSecond(schedule.getSecond()).setScheduleExprMinute(schedule.getMinute()).setScheduleExprHour(schedule.getHour()).setScheduleExprDayOfWeek(schedule.getDayOfWeek()).setScheduleExprDayOfMonth(schedule.getDayOfMonth()).setScheduleExprMonth(schedule.getMonth()).setScheduleExprYear(schedule.getYear()).setScheduleExprStartDate(schedule.getStart()).setScheduleExprEndDate(schedule.getEnd()).setScheduleExprTimezone(schedule.getTimezone()).setTimeoutMethod(timeoutMethod).setTimerState(TimerState.CREATED).setId(uuid.toString()).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimedObjectId(getInvoker().getTimedObjectId()).setInfo(info).setNewTimer(true).build(this)-->Line_12 $$ this.startTimer(timer)[ FD ]
Line_9 $$ UUID uuid = UUID.randomUUID()-->Line_10 $$ TimerImpl timer = CalendarTimer.builder().setAutoTimer(timeoutMethod != null).setScheduleExprSecond(schedule.getSecond()).setScheduleExprMinute(schedule.getMinute()).setScheduleExprHour(schedule.getHour()).setScheduleExprDayOfWeek(schedule.getDayOfWeek()).setScheduleExprDayOfMonth(schedule.getDayOfMonth()).setScheduleExprMonth(schedule.getMonth()).setScheduleExprYear(schedule.getYear()).setScheduleExprStartDate(schedule.getStart()).setScheduleExprEndDate(schedule.getEnd()).setScheduleExprTimezone(schedule.getTimezone()).setTimeoutMethod(timeoutMethod).setTimerState(TimerState.CREATED).setId(uuid.toString()).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimedObjectId(getInvoker().getTimedObjectId()).setInfo(info).setNewTimer(true).build(this)[ FD ]
Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_12 $$ this.startTimer(timer)[ CD ]
Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_13 $$ return timer[ CD ]
Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_3 $$ if (this.isLifecycleCallbackInvocation() && !this.isSingletonBeanInvocation()) [ CD ]
Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_6 $$ if (schedule == null) [ FD ]
Line_10 $$ TimerImpl timer = CalendarTimer.builder().setAutoTimer(timeoutMethod != null).setScheduleExprSecond(schedule.getSecond()).setScheduleExprMinute(schedule.getMinute()).setScheduleExprHour(schedule.getHour()).setScheduleExprDayOfWeek(schedule.getDayOfWeek()).setScheduleExprDayOfMonth(schedule.getDayOfMonth()).setScheduleExprMonth(schedule.getMonth()).setScheduleExprYear(schedule.getYear()).setScheduleExprStartDate(schedule.getStart()).setScheduleExprEndDate(schedule.getEnd()).setScheduleExprTimezone(schedule.getTimezone()).setTimeoutMethod(timeoutMethod).setTimerState(TimerState.CREATED).setId(uuid.toString()).setPersistent(persistent).setPrimaryKey(currentPrimaryKey()).setTimedObjectId(getInvoker().getTimedObjectId()).setInfo(info).setNewTimer(true).build(this)-->Line_11 $$ this.persistTimer(timer, true)[ FD ]
Line_2 $$ private TimerImpl createCalendarTimer(ScheduleExpression schedule, Serializable info, boolean persistent, Method timeoutMethod) -->Line_9 $$ UUID uuid = UUID.randomUUID()[ CD ]
