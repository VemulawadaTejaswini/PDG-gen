Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_48 $$ appendParam(cmdLine, Integer.toString(port))[ FD ]
Line_51 $$ final ProcessBuilder builder = new ProcessBuilder(cmdLine)-->Line_53 $$ final Process process = builder.start()[ FD ]
Line_37 $$ final StringBuilder classpath = new StringBuilder()-->Line_44 $$ appendParam(cmdLine, classpath.toString())[ FD ]
Line_6 $$ if (heapSize > 0) -->Line_8 $$ if (xms > 32) [ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_4 $$ appendParam(cmdLine, getVMExecutablePath(sdkHomePath))[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_19 $$ appendParam(cmdLine, "-Duser.language=" + lang)[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_50 $$ appendParam(cmdLine, FileUtil.toSystemIndependentName(workingDir.getPath()))[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_49 $$ workingDir.mkdirs()[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_22 $$ if (country != null) [ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_31 $$ appendParam(cmdLine, "-Dlog4j.defaultInitOverride=true")[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_36 $$ final List<File> cp = ClasspathBootstrap.getExternalJavacProcessClasspath(sdkHomePath, compilingTool)[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_48 $$ appendParam(cmdLine, Integer.toString(port))[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_52 $$ builder.directory(workingDir)[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_4 $$ appendParam(cmdLine, getVMExecutablePath(sdkHomePath))[ FD ]
Line_22 $$ if (country != null) -->Line_23 $$ appendParam(cmdLine, "-Duser.country=" + country)[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_30 $$ appendParam(cmdLine, "-Djava.ext.dirs=")[ FD ]
Line_21 $$ final String country = System.getProperty("user.country")-->Line_22 $$ if (country != null) [ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_26 $$ if (region != null) [ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_13 $$ final String encoding = System.getProperty("file.encoding")[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_6 $$ if (heapSize > 0) [ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_47 $$ appendParam(cmdLine, "127.0.0.1")[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_4 $$ appendParam(cmdLine, getVMExecutablePath(sdkHomePath))[ CD ]
Line_37 $$ final StringBuilder classpath = new StringBuilder()-->Line_39 $$ if (classpath.length() > 0) [ FD ]
Line_37 $$ final StringBuilder classpath = new StringBuilder()-->Line_40 $$ classpath.append(File.pathSeparator)[ FD ]
Line_6 $$ if (heapSize > 0) -->Line_7 $$ final int xms = heapSize / 2[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_37 $$ final StringBuilder classpath = new StringBuilder()[ CD ]
Line_14 $$ if (encoding != null) -->Line_15 $$ appendParam(cmdLine, "-Dfile.encoding=" + encoding)[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_35 $$ appendParam(cmdLine, "-classpath")[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_51 $$ final ProcessBuilder builder = new ProcessBuilder(cmdLine)[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_3 $$ final List<String> cmdLine = new ArrayList<String>()[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_54 $$ return createProcessHandler(process, StringUtil.join(cmdLine, " "))[ FD ]
Line_37 $$ final StringBuilder classpath = new StringBuilder()-->Line_42 $$ classpath.append(file.getPath())[ FD ]
Line_38 $$ for (File file : cp) -->Line_42 $$ classpath.append(file.getPath())[ FD ]
Line_51 $$ final ProcessBuilder builder = new ProcessBuilder(cmdLine)-->Line_52 $$ builder.directory(workingDir)[ FD ]
Line_17 $$ final String lang = System.getProperty("user.language")-->Line_18 $$ if (lang != null) [ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_35 $$ appendParam(cmdLine, "-classpath")[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_50 $$ appendParam(cmdLine, FileUtil.toSystemIndependentName(workingDir.getPath()))[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_17 $$ final String lang = System.getProperty("user.language")[ CD ]
Line_6 $$ if (heapSize > 0) -->Line_11 $$ appendParam(cmdLine, "-Xmx" + heapSize + "m")[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_25 $$ final String region = System.getProperty("user.region")[ CD ]
Line_18 $$ if (lang != null) -->Line_19 $$ appendParam(cmdLine, "-Duser.language=" + lang)[ CD ]
Line_26 $$ if (region != null) -->Line_27 $$ appendParam(cmdLine, "-Duser.region=" + region)[ CD ]
Line_8 $$ if (xms > 32) -->Line_9 $$ appendParam(cmdLine, "-Xms" + xms + "m")[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_5 $$ appendParam(cmdLine, "-Djava.awt.headless=true")[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_49 $$ workingDir.mkdirs()[ CD ]
Line_39 $$ if (classpath.length() > 0) -->Line_40 $$ classpath.append(File.pathSeparator)[ CD ]
Line_53 $$ final Process process = builder.start()-->Line_54 $$ return createProcessHandler(process, StringUtil.join(cmdLine, " "))[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_14 $$ if (encoding != null) [ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_29 $$ appendParam(cmdLine, "-D" + ExternalJavacProcess.JPS_JAVA_COMPILING_TOOL_PROPERTY + "=" + compilingTool.getId())[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_6 $$ if (heapSize > 0) [ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_44 $$ appendParam(cmdLine, classpath.toString())[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_50 $$ appendParam(cmdLine, FileUtil.toSystemIndependentName(workingDir.getPath()))[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_33 $$ appendParam(cmdLine, option)[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_46 $$ appendParam(cmdLine, uuid.toString())[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_15 $$ appendParam(cmdLine, "-Dfile.encoding=" + encoding)[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_46 $$ appendParam(cmdLine, uuid.toString())[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_27 $$ appendParam(cmdLine, "-Duser.region=" + region)[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_45 $$ appendParam(cmdLine, ExternalJavacProcess.class.getName())[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_45 $$ appendParam(cmdLine, ExternalJavacProcess.class.getName())[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_29 $$ appendParam(cmdLine, "-D" + ExternalJavacProcess.JPS_JAVA_COMPILING_TOOL_PROPERTY + "=" + compilingTool.getId())[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_54 $$ return createProcessHandler(process, StringUtil.join(cmdLine, " "))[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_36 $$ final List<File> cp = ClasspathBootstrap.getExternalJavacProcessClasspath(sdkHomePath, compilingTool)[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_11 $$ appendParam(cmdLine, "-Xmx" + heapSize + "m")[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_48 $$ appendParam(cmdLine, Integer.toString(port))[ FD ]
Line_25 $$ final String region = System.getProperty("user.region")-->Line_26 $$ if (region != null) [ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_31 $$ appendParam(cmdLine, "-Dlog4j.defaultInitOverride=true")[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_29 $$ appendParam(cmdLine, "-D" + ExternalJavacProcess.JPS_JAVA_COMPILING_TOOL_PROPERTY + "=" + compilingTool.getId())[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_47 $$ appendParam(cmdLine, "127.0.0.1")[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_23 $$ appendParam(cmdLine, "-Duser.country=" + country)[ FD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_9 $$ appendParam(cmdLine, "-Xms" + xms + "m")[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_18 $$ if (lang != null) [ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_52 $$ builder.directory(workingDir)[ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_46 $$ appendParam(cmdLine, uuid.toString())[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_5 $$ appendParam(cmdLine, "-Djava.awt.headless=true")[ FD ]
Line_13 $$ final String encoding = System.getProperty("file.encoding")-->Line_14 $$ if (encoding != null) [ FD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_53 $$ final Process process = builder.start()[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_30 $$ appendParam(cmdLine, "-Djava.ext.dirs=")[ CD ]
Line_2 $$ private ExternalJavacProcessHandler launchExternalJavacProcess(UUID uuid, String sdkHomePath, int heapSize, int port, File workingDir, List<String> vmOptions, JavaCompilingTool compilingTool) throws Exception -->Line_21 $$ final String country = System.getProperty("user.country")[ CD ]
Line_3 $$ final List<String> cmdLine = new ArrayList<String>()-->Line_44 $$ appendParam(cmdLine, classpath.toString())[ FD ]
Line_7 $$ final int xms = heapSize / 2-->Line_8 $$ if (xms > 32) [ FD ]
Line_32 $$ for (String option : vmOptions) -->Line_33 $$ appendParam(cmdLine, option)[ FD ]
