Line_31 $$ for (int i = 0; i < 5; i++) -->Line_108 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_62 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_105 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 1), arrayBlockOf(BIGINT, 5, 6)))[ FD ]
Line_5 $$ MapType mapType = new MapType(VARCHAR, BOOLEAN)-->Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, arrayType, mapType, arrayOfArrayType)[ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_86 $$ assertEquals(column0.getPositionCount(), 2)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_56 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 2), mapBlockOf(VARCHAR, BOOLEAN, "k3", true)))[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_62 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_52 $$ assertEquals(column3.isNull(i), false)[ CD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_120 $$ assertEquals(reader.nextBatch(), -1)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_111 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 0), mapBlockOf(VARCHAR, BOOLEAN, "k1", true)))[ FD ]
Line_108 $$ for (int i = 0; i < 2; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_44 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 0), arrayBlockOf(BIGINT, 1, 2)))[ FD ]
Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, arrayType, mapType, arrayOfArrayType)-->Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_41 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_82 $$ assertEquals(reader.getFileRowCount(), 2)[ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_118 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_32 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_94 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_71 $$ BitSet rowsToDelete = new BitSet(5)-->Line_73 $$ rowsToDelete.set(3)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_72 $$ rowsToDelete.set(1)[ CD ]
Line_71 $$ BitSet rowsToDelete = new BitSet(5)-->Line_72 $$ rowsToDelete.set(1)[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_105 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 1), arrayBlockOf(BIGINT, 5, 6)))[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_108 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_67 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 3), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 8), null)))[ FD ]
Line_115 $$ for (int i = 0; i < 2; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_73 $$ rowsToDelete.set(3)[ CD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_104 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 0), arrayBlockOf(BIGINT, 1, 2)))[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_45 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 1), arrayBlockOf(BIGINT, 3, 4)))[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_101 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_37 $$ assertEquals(VARCHAR.getSlice(column1, 3), utf8Slice("world"))[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_42 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_50 $$ assertEquals(column3.getPositionCount(), 5)[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_97 $$ assertEquals(VARCHAR.getSlice(column1, 0), utf8Slice("hello"))[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_5 $$ MapType mapType = new MapType(VARCHAR, BOOLEAN)[ CD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)[ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_64 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_6 $$ List<Long> columnIds = ImmutableList.of(3L, 7L, 9L, 10L, 11L)-->Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_74 $$ rowsToDelete.set(4)[ CD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_24 $$ assertEquals(BIGINT.getLong(column0, 0), 123L)[ FD ]
Line_71 $$ BitSet rowsToDelete = new BitSet(5)-->Line_74 $$ rowsToDelete.set(4)[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_32 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_8 $$ File file = new File(temporary, randomUUID().toString())-->Line_76 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, rowsToDelete)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_57 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 3), mapBlockOf(VARCHAR, BOOLEAN, "k4", true)))[ FD ]
Line_76 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, rowsToDelete)-->Line_77 $$ assertEquals(info.getRowCount(), 2)[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_87 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_17 $$ assertEquals(reader.getSplitLength(), file.length())[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_35 $$ assertEquals(VARCHAR.getSlice(column1, 1), utf8Slice("sky"))[ FD ]
Line_101 $$ for (int i = 0; i < 2; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_15 $$ assertEquals(reader.getReaderRowCount(), 5)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_42 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_62 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_42 $$ assertEquals(column2.isNull(i), false)[ CD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_8 $$ File file = new File(temporary, randomUUID().toString())-->Line_17 $$ assertEquals(reader.getSplitLength(), file.length())[ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_62 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_52 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_42 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_67 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 3), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 8), null)))[ FD ]
Line_10 $$ List<Page> pages = rowPagesBuilder(columnTypes).row(123, "hello", arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(777, "sky", arrayBlockOf(BIGINT, 3, 4), mapBlockOf(VARCHAR, BOOLEAN, "k2", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 6))).row(456, "bye", arrayBlockOf(BIGINT, 5, 6), mapBlockOf(VARCHAR, BOOLEAN, "k3", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))).row(888, "world", arrayBlockOf(BIGINT, 7, 8), mapBlockOf(VARCHAR, BOOLEAN, "k4", true), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 8), null)).row(999, "done", arrayBlockOf(BIGINT, 9, 10), mapBlockOf(VARCHAR, BOOLEAN, "k5", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 9, 10))).build()-->Line_11 $$ writer.appendPages(pages)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_118 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, arrayType, mapType, arrayOfArrayType)-->Line_10 $$ List<Page> pages = rowPagesBuilder(columnTypes).row(123, "hello", arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(777, "sky", arrayBlockOf(BIGINT, 3, 4), mapBlockOf(VARCHAR, BOOLEAN, "k2", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 6))).row(456, "bye", arrayBlockOf(BIGINT, 5, 6), mapBlockOf(VARCHAR, BOOLEAN, "k3", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))).row(888, "world", arrayBlockOf(BIGINT, 7, 8), mapBlockOf(VARCHAR, BOOLEAN, "k4", true), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 8), null)).row(999, "done", arrayBlockOf(BIGINT, 9, 10), mapBlockOf(VARCHAR, BOOLEAN, "k5", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 9, 10))).build()[ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_25 $$ assertEquals(BIGINT.getLong(column0, 1), 777L)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_112 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 1), mapBlockOf(VARCHAR, BOOLEAN, "k3", true)))[ FD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_118 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_108 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_101 $$ for (int i = 0; i < 2; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_5 $$ MapType mapType = new MapType(VARCHAR, BOOLEAN)-->Line_106 $$ Block column3 = reader.readBlock(mapType, 3)[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_104 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 0), arrayBlockOf(BIGINT, 1, 2)))[ FD ]
Line_101 $$ for (int i = 0; i < 2; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_94 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)[ CD ]
Line_94 $$ for (int i = 0; i < 2; i++) -->Line_108 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_26 $$ assertEquals(BIGINT.getLong(column0, 2), 456L)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_81 $$ assertEquals(reader.getReaderRowCount(), 2)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_16 $$ assertEquals(reader.getFileRowCount(), 5)[ FD ]
Line_108 $$ for (int i = 0; i < 2; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ CD ]
Line_9 $$ try (OrcFileWriter writer = new OrcFileWriter(columnIds, columnTypes, file)) -->Line_11 $$ writer.appendPages(pages)[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, arrayType, mapType, arrayOfArrayType)[ CD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_83 $$ assertEquals(reader.getSplitLength(), newFile.length())[ FD ]
Line_101 $$ for (int i = 0; i < 2; i++) -->Line_108 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_94 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_101 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_87 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_108 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_108 $$ for (int i = 0; i < 2; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_20 $$ assertEquals(column0.getPositionCount(), 5)[ FD ]
Line_5 $$ MapType mapType = new MapType(VARCHAR, BOOLEAN)-->Line_49 $$ Block column3 = reader.readBlock(mapType, 3)[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_48 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 4), arrayBlockOf(BIGINT, 9, 10)))[ FD ]
Line_75 $$ File newFile = new File(temporary, randomUUID().toString())-->Line_83 $$ assertEquals(reader.getSplitLength(), newFile.length())[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_38 $$ assertEquals(VARCHAR.getSlice(column1, 4), utf8Slice("done"))[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, arrayType, mapType, arrayOfArrayType)[ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_65 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 1), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 6))))[ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_114 $$ assertEquals(column4.getPositionCount(), 2)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_88 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_101 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_68 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 4), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 9, 10))))[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_68 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 4), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 9, 10))))[ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_90 $$ assertEquals(BIGINT.getLong(column0, 0), 123L)[ FD ]
Line_94 $$ for (int i = 0; i < 2; i++) -->Line_101 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_22 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_94 $$ for (int i = 0; i < 2; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_108 $$ for (int i = 0; i < 2; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_44 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 0), arrayBlockOf(BIGINT, 1, 2)))[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_95 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_119 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 1), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))))[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_47 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 3), arrayBlockOf(BIGINT, 7, 8)))[ FD ]
Line_76 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, rowsToDelete)-->Line_78 $$ assertEquals(info.getUncompressedSize(), 78)[ FD ]
Line_8 $$ File file = new File(temporary, randomUUID().toString())-->Line_13 $$ try (OrcDataSource dataSource = fileOrcDataSource(file)) [ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_98 $$ assertEquals(VARCHAR.getSlice(column1, 1), utf8Slice("bye"))[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_108 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_88 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_52 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_87 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_52 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_28 $$ assertEquals(BIGINT.getLong(column0, 4), 999L)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_95 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_56 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 2), mapBlockOf(VARCHAR, BOOLEAN, "k3", true)))[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_46 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 2), arrayBlockOf(BIGINT, 5, 6)))[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_54 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 0), mapBlockOf(VARCHAR, BOOLEAN, "k1", true)))[ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_30 $$ assertEquals(column1.getPositionCount(), 5)[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_113 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_58 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 4), mapBlockOf(VARCHAR, BOOLEAN, "k5", true)))[ FD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_88 $$ assertEquals(column0.isNull(i), false)[ CD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_101 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_36 $$ assertEquals(VARCHAR.getSlice(column1, 2), utf8Slice("bye"))[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_107 $$ assertEquals(column3.getPositionCount(), 2)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_119 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 1), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))))[ FD ]
Line_94 $$ for (int i = 0; i < 2; i++) -->Line_95 $$ assertEquals(column1.isNull(i), false)[ CD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_34 $$ assertEquals(VARCHAR.getSlice(column1, 0), utf8Slice("hello"))[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_32 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_48 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 4), arrayBlockOf(BIGINT, 9, 10)))[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_42 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_113 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)[ FD ]
Line_13 $$ try (OrcDataSource dataSource = fileOrcDataSource(file)) -->Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_95 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_52 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_94 $$ for (int i = 0; i < 2; i++) -->Line_95 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_108 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_40 $$ assertEquals(column2.getPositionCount(), 5)[ FD ]
Line_71 $$ BitSet rowsToDelete = new BitSet(5)-->Line_76 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, rowsToDelete)[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_61 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_68 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 4), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 9, 10))))[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_75 $$ File newFile = new File(temporary, randomUUID().toString())-->Line_76 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, rowsToDelete)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_87 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, arrayType, mapType, arrayOfArrayType)-->Line_80 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_46 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 2), arrayBlockOf(BIGINT, 5, 6)))[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_51 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_94 $$ for (int i = 0; i < 2; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_49 $$ Block column3 = reader.readBlock(mapType, 3)-->Line_55 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 1), mapBlockOf(VARCHAR, BOOLEAN, "k2", false)))[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_88 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_18 $$ assertEquals(reader.nextBatch(), 5)[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_8 $$ File file = new File(temporary, randomUUID().toString())[ CD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_67 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 3), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 8), null)))[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_99 $$ Block column2 = reader.readBlock(arrayType, 2)[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_22 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_95 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_101 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_55 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 1), mapBlockOf(VARCHAR, BOOLEAN, "k2", false)))[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_112 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 1), mapBlockOf(VARCHAR, BOOLEAN, "k3", true)))[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_62 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_27 $$ assertEquals(BIGINT.getLong(column0, 3), 888L)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_49 $$ Block column3 = reader.readBlock(mapType, 3)[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)[ CD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_94 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_119 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 1), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))))[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_62 $$ assertEquals(column4.isNull(i), false)[ CD ]
Line_39 $$ Block column2 = reader.readBlock(arrayType, 2)-->Line_100 $$ assertEquals(column2.getPositionCount(), 2)[ FD ]
Line_101 $$ for (int i = 0; i < 2; i++) -->Line_102 $$ assertEquals(column2.isNull(i), false)[ CD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_57 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 3), mapBlockOf(VARCHAR, BOOLEAN, "k4", true)))[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_106 $$ Block column3 = reader.readBlock(mapType, 3)[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_6 $$ List<Long> columnIds = ImmutableList.of(3L, 7L, 9L, 10L, 11L)[ CD ]
Line_94 $$ for (int i = 0; i < 2; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_95 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_101 $$ for (int i = 0; i < 2; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_92 $$ Block column1 = reader.readBlock(VARCHAR, 1)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_64 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_95 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_94 $$ for (int i = 0; i < 2; i++) -->Line_115 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_69 $$ assertEquals(reader.nextBatch(), -1)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_88 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_71 $$ BitSet rowsToDelete = new BitSet(5)[ CD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_94 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_66 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 2), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))))[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_85 $$ Block column0 = reader.readBlock(BIGINT, 0)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_54 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 0), mapBlockOf(VARCHAR, BOOLEAN, "k1", true)))[ FD ]
Line_115 $$ for (int i = 0; i < 2; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ CD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_58 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 4), mapBlockOf(VARCHAR, BOOLEAN, "k5", true)))[ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_32 $$ assertEquals(column1.isNull(i), false)[ CD ]
Line_75 $$ File newFile = new File(temporary, randomUUID().toString())-->Line_79 $$ try (OrcDataSource dataSource = fileOrcDataSource(newFile)) [ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_87 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_31 $$ for (int i = 0; i < 5; i++) -->Line_94 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_65 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 1), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 6))))[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_99 $$ Block column2 = reader.readBlock(arrayType, 2)[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_95 $$ assertEquals(column1.isNull(i), false)[ FD ]
Line_6 $$ List<Long> columnIds = ImmutableList.of(3L, 7L, 9L, 10L, 11L)-->Line_80 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_109 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_101 $$ for (int i = 0; i < 2; i++) [ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_78 $$ assertEquals(info.getUncompressedSize(), 78)[ CD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_41 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_62 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_31 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_64 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_84 $$ assertEquals(reader.nextBatch(), 2)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_111 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column3, 0), mapBlockOf(VARCHAR, BOOLEAN, "k1", true)))[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_116 $$ assertEquals(column4.isNull(i), false)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_45 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 1), arrayBlockOf(BIGINT, 3, 4)))[ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_60 $$ assertEquals(column4.getPositionCount(), 5)[ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_91 $$ assertEquals(BIGINT.getLong(column0, 1), 456L)[ FD ]
Line_61 $$ for (int i = 0; i < 5; i++) -->Line_88 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_93 $$ assertEquals(column1.getPositionCount(), 2)[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_47 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column2, 3), arrayBlockOf(BIGINT, 7, 8)))[ FD ]
Line_51 $$ for (int i = 0; i < 5; i++) -->Line_52 $$ assertEquals(column3.isNull(i), false)[ FD ]
Line_59 $$ Block column4 = reader.readBlock(arrayOfArrayType, 4)-->Line_66 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 2), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))))[ FD ]
Line_13 $$ try (OrcDataSource dataSource = fileOrcDataSource(file)) -->Line_80 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_87 $$ for (int i = 0; i < 2; i++) -->Line_88 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_41 $$ for (int i = 0; i < 5; i++) -->Line_51 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_76 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, rowsToDelete)[ CD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, arrayType, mapType, arrayOfArrayType)[ FD ]
Line_19 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_88 $$ assertEquals(column0.isNull(i), false)[ FD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_65 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 1), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 6))))[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_75 $$ File newFile = new File(temporary, randomUUID().toString())[ CD ]
Line_4 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_66 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column4, 2), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))))[ FD ]
Line_3 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_10 $$ List<Page> pages = rowPagesBuilder(columnTypes).row(123, "hello", arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(777, "sky", arrayBlockOf(BIGINT, 3, 4), mapBlockOf(VARCHAR, BOOLEAN, "k2", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 6))).row(456, "bye", arrayBlockOf(BIGINT, 5, 6), mapBlockOf(VARCHAR, BOOLEAN, "k3", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 7))).row(888, "world", arrayBlockOf(BIGINT, 7, 8), mapBlockOf(VARCHAR, BOOLEAN, "k4", true), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 8), null)).row(999, "done", arrayBlockOf(BIGINT, 9, 10), mapBlockOf(VARCHAR, BOOLEAN, "k5", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 9, 10))).build()[ FD ]
Line_2 $$ public void testRewrite() throws Exception -->Line_77 $$ assertEquals(info.getRowCount(), 2)[ CD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_51 $$ for (int i = 0; i < 5; i++) [ FD ]
Line_14 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_29 $$ Block column1 = reader.readBlock(VARCHAR, 1)[ FD ]
Line_21 $$ for (int i = 0; i < 5; i++) -->Line_22 $$ assertEquals(column0.isNull(i), false)[ CD ]
