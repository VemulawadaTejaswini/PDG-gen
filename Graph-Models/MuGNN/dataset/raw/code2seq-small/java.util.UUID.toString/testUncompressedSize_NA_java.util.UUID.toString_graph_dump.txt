Line_2 $$ public void testUncompressedSize() throws Exception -->Line_12 $$ assertEquals(info.getRowCount(), 3)[ CD ]
Line_10 $$ File newFile = new File(temporary, randomUUID().toString())-->Line_11 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, new BitSet())[ FD ]
Line_2 $$ public void testUncompressedSize() throws Exception -->Line_13 $$ assertEquals(info.getUncompressedSize(), 55)[ CD ]
Line_6 $$ try (OrcFileWriter writer = new OrcFileWriter(columnIds, columnTypes, file)) -->Line_8 $$ writer.appendPages(pages)[ FD ]
Line_11 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, new BitSet())-->Line_12 $$ assertEquals(info.getRowCount(), 3)[ FD ]
Line_7 $$ List<Page> pages = rowPagesBuilder(columnTypes).row(true, 123, 98.7, "hello", utf8Slice("abc")).row(false, 456, 65.4, "world", utf8Slice("xyz")).row(null, null, null, null, null).build()-->Line_8 $$ writer.appendPages(pages)[ FD ]
Line_11 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, new BitSet())-->Line_13 $$ assertEquals(info.getUncompressedSize(), 55)[ FD ]
Line_2 $$ public void testUncompressedSize() throws Exception -->Line_5 $$ File file = new File(temporary, randomUUID().toString())[ CD ]
Line_5 $$ File file = new File(temporary, randomUUID().toString())-->Line_11 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, new BitSet())[ FD ]
Line_2 $$ public void testUncompressedSize() throws Exception -->Line_11 $$ OrcFileInfo info = OrcFileRewriter.rewrite(file, newFile, new BitSet())[ CD ]
Line_4 $$ List<Type> columnTypes = ImmutableList.of(BOOLEAN, BIGINT, DOUBLE, VARCHAR, VARBINARY)-->Line_7 $$ List<Page> pages = rowPagesBuilder(columnTypes).row(true, 123, 98.7, "hello", utf8Slice("abc")).row(false, 456, 65.4, "world", utf8Slice("xyz")).row(null, null, null, null, null).build()[ FD ]
Line_2 $$ public void testUncompressedSize() throws Exception -->Line_3 $$ List<Long> columnIds = ImmutableList.of(1L, 2L, 3L, 4L, 5L)[ CD ]
Line_2 $$ public void testUncompressedSize() throws Exception -->Line_4 $$ List<Type> columnTypes = ImmutableList.of(BOOLEAN, BIGINT, DOUBLE, VARCHAR, VARBINARY)[ CD ]
Line_2 $$ public void testUncompressedSize() throws Exception -->Line_10 $$ File newFile = new File(temporary, randomUUID().toString())[ CD ]
