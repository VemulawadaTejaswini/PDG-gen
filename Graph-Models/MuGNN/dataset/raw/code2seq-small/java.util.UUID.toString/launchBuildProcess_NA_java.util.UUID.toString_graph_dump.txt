Line_40 $$ if (!StringUtil.isEmptyOrSpaces(additionalOptions)) -->Line_41 $$ final StringTokenizer tokenizer = new StringTokenizer(additionalOptions, " ", false)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_177 $$ return processHandler[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_35 $$ String userDefinedHeapSize = null[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_94 $$ if (myBuildProcessDebuggingEnabled) [ CD ]
Line_5 $$ JavaSdkVersion sdkVersion = null-->Line_66 $$ if (sdkVersion != null && sdkVersion.ordinal() < JavaSdkVersion.JDK_1_9.ordinal()) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_81 $$ cmdLine.addParameter("-D" + GlobalOptions.COMPILE_PARALLEL_OPTION + "=" + Boolean.toString(config.PARALLEL_COMPILATION))[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_114 $$ String[] propertiesToPass = [ CD ]
Line_133 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_137 $$ launcherCp.addAll(BuildProcessClasspathManager.getLauncherClasspath(project))[ FD ]
Line_46 $$ userDefinedHeapSize = option-->Line_57 $$ cmdLine.addParameter(userDefinedHeapSize)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_79 $$ cmdLine.addParameter("-D" + GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION + "=" + shouldGenerateIndex)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_111 $$ cmdLine.setCharset(mySystemCharset)[ CD ]
Line_73 $$ if (requestProjectPreload) -->Line_75 $$ cmdLine.addParameter("-Dpreload.config.path=" + FileUtil.toCanonicalPath(PathManager.getOptionsPath()))[ CD ]
Line_46 $$ userDefinedHeapSize = option-->Line_56 $$ if (userDefinedHeapSize != null) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_78 $$ if (shouldGenerateIndex != null) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_149 $$ cmdLine.addParameter(Integer.toString(port))[ FD ]
Line_43 $$ final String option = tokenizer.nextToken()-->Line_46 $$ userDefinedHeapSize = option[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_127 $$ cmdLine.addParameter("-Djava.io.tmpdir=" + FileUtil.toSystemIndependentName(workDirectory.getPath()) + "/" + TEMP_DIR_NAME)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_37 $$ final String userAdditionalVMOptions = config.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS[ CD ]
Line_10 $$ sdkVersion = pair.second-->Line_66 $$ if (sdkVersion != null && sdkVersion.ordinal() < JavaSdkVersion.JDK_1_9.ordinal()) [ FD ]
Line_93 $$ int debugPort = -1-->Line_103 $$ if (debugPort > 0) [ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_140 $$ cmdLine.addParameter(launcherClass.getName())[ FD ]
Line_18 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())-->Line_20 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_112 $$ cmdLine.addParameter("-D" + CharsetToolkit.FILE_ENCODING_PROPERTY + "=" + mySystemCharset.name())[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_66 $$ if (sdkVersion != null && sdkVersion.ordinal() < JavaSdkVersion.JDK_1_9.ordinal()) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) [ CD ]
Line_83 $$ if (Boolean.TRUE.equals(Boolean.valueOf(System.getProperty("java.net.preferIPv4Stack", "false")))) -->Line_84 $$ cmdLine.addParameter("-Djava.net.preferIPv4Stack=true")[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_122 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_CONFIG_PATH + "=" + PathManager.getConfigPath())[ FD ]
Line_13 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_14 $$ final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler()[ CD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_25 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)[ CD ]
Line_56 $$ if (userDefinedHeapSize != null) -->Line_59 $$ final int heapSize = projectConfig.getBuildProcessHeapSize(JavacConfiguration.getOptions(project, JavacConfiguration.class).MAXIMUM_HEAP_SIZE)[ CD ]
Line_141 $$ final List<String> cp = ClasspathBootstrap.getBuildProcessApplicationClasspath(true)-->Line_142 $$ cp.addAll(myClasspathManager.getBuildProcessPluginsClasspath(project))[ FD ]
Line_158 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) -->Line_166 $$ processHandler.addProcessListener(new ProcessAdapter() [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_31 $$ final CompilerWorkspaceConfiguration config = CompilerWorkspaceConfiguration.getInstance(project)[ FD ]
Line_132 $$ final Class<?> launcherClass = org.jetbrains.jps.cmdline.Launcher.class-->Line_140 $$ cmdLine.addParameter(launcherClass.getName())[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_27 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_91 $$ cmdLine.addParameter("-agentlib:yjpagent=disablealloc,delay=10000,sessionname=ExternalBuild")[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_11 $$ final Sdk internalJdk = JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk()[ CD ]
Line_43 $$ final String option = tokenizer.nextToken()-->Line_88 $$ cmdLine.addParameter(option)[ FD ]
Line_13 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_20 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ CD ]
Line_41 $$ final StringTokenizer tokenizer = new StringTokenizer(additionalOptions, " ", false)-->Line_42 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_115 $$ for (String name : propertiesToPass) -->Line_116 $$ final String value = System.getProperty(name)[ FD ]
Line_90 $$ if (isProfilingMode) -->Line_91 $$ cmdLine.addParameter("-agentlib:yjpagent=disablealloc,delay=10000,sessionname=ExternalBuild")[ CD ]
Line_40 $$ if (!StringUtil.isEmptyOrSpaces(additionalOptions)) -->Line_42 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_40 $$ if (!StringUtil.isEmptyOrSpaces(additionalOptions)) [ CD ]
Line_43 $$ final String option = tokenizer.nextToken()-->Line_52 $$ userAdditionalOptionsList.add(option)[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_9 $$ final Sdk projectJdk = pair.first[ CD ]
Line_25 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)-->Line_28 $$ vmExecutablePath = new File(forcedCompiledJdkHome, "bin/java").getAbsolutePath()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_82 $$ cmdLine.addParameter("-D" + GlobalOptions.REBUILD_ON_DEPENDENCY_CHANGE_OPTION + "=" + Boolean.toString(config.REBUILD_ON_DEPENDENCY_CHANGE))[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_143 $$ if (isProfilingMode) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_158 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_123 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_PLUGINS_PATH + "=" + PathManager.getPluginsPath())[ CD ]
Line_3 $$ final String compilerPath-->Line_20 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_124 $$ cmdLine.addParameter("-D" + GlobalOptions.LOG_DIR_OPTION + "=" + FileUtil.toSystemIndependentName(getBuildLogDirectory().getAbsolutePath()))[ FD ]
Line_158 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) -->Line_160 $$ return true[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_147 $$ cmdLine.addParameter(BuildMain.class.getName())[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_128 $$ for (BuildProcessParametersProvider provider : project.getExtensions(BuildProcessParametersProvider.EP_NAME)) [ FD ]
Line_18 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())-->Line_27 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()[ FD ]
Line_103 $$ if (debugPort > 0) -->Line_104 $$ cmdLine.addParameter("-XX:+HeapDumpOnOutOfMemoryError")[ CD ]
Line_4 $$ final String vmExecutablePath-->Line_33 $$ cmdLine.setExePath(vmExecutablePath)[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_13 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) [ CD ]
Line_95 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_98 $$ debugPort = NetUtils.findAvailableSocketPort()[ FD ]
Line_103 $$ if (debugPort > 0) -->Line_105 $$ cmdLine.addParameter("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=" + debugPort)[ CD ]
Line_27 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()-->Line_135 $$ launcherCp.add(compilerPath)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_88 $$ cmdLine.addParameter(option)[ FD ]
Line_128 $$ for (BuildProcessParametersProvider provider : project.getExtensions(BuildProcessParametersProvider.EP_NAME)) -->Line_129 $$ final List<String> args = provider.getVMArguments()[ FD ]
Line_133 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_134 $$ launcherCp.add(ClasspathBootstrap.getResourcePath(launcherClass))[ FD ]
Line_35 $$ String userDefinedHeapSize = null-->Line_56 $$ if (userDefinedHeapSize != null) [ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_81 $$ cmdLine.addParameter("-D" + GlobalOptions.COMPILE_PARALLEL_OPTION + "=" + Boolean.toString(config.PARALLEL_COMPILATION))[ FD ]
Line_20 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)-->Line_21 $$ if (compilerPath == null) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_83 $$ if (Boolean.TRUE.equals(Boolean.valueOf(System.getProperty("java.net.preferIPv4Stack", "false")))) [ CD ]
Line_5 $$ JavaSdkVersion sdkVersion = null-->Line_62 $$ if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_174 $$ if (debugPort > 0) [ CD ]
Line_14 $$ final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler()-->Line_15 $$ if (systemCompiler == null) [ FD ]
Line_45 $$ if (userLocalOptionsActive) -->Line_46 $$ userDefinedHeapSize = option[ CD ]
Line_69 $$ if (IS_UNIT_TEST_MODE) -->Line_70 $$ cmdLine.addParameter("-Dtest.mode=true")[ CD ]
Line_95 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_96 $$ if (debugPort <= 0) [ FD ]
Line_5 $$ JavaSdkVersion sdkVersion = null-->Line_10 $$ sdkVersion = pair.second[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_105 $$ cmdLine.addParameter("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=" + debugPort)[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_28 $$ vmExecutablePath = new File(forcedCompiledJdkHome, "bin/java").getAbsolutePath()[ CD ]
Line_98 $$ debugPort = NetUtils.findAvailableSocketPort()-->Line_103 $$ if (debugPort > 0) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_150 $$ cmdLine.addParameter(sessionId.toString())[ FD ]
Line_44 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) -->Line_45 $$ if (userLocalOptionsActive) [ CD ]
Line_78 $$ if (shouldGenerateIndex != null) -->Line_79 $$ cmdLine.addParameter("-D" + GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION + "=" + shouldGenerateIndex)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_147 $$ cmdLine.addParameter(BuildMain.class.getName())[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_63 $$ cmdLine.addParameter("-d32")[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_142 $$ cp.addAll(myClasspathManager.getBuildProcessPluginsClasspath(project))[ CD ]
Line_20 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)-->Line_27 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()[ FD ]
Line_3 $$ final String compilerPath-->Line_21 $$ if (compilerPath == null) [ FD ]
Line_93 $$ int debugPort = -1-->Line_98 $$ debugPort = NetUtils.findAvailableSocketPort()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_69 $$ if (IS_UNIT_TEST_MODE) [ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_121 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_HOME_PATH + "=" + PathManager.getHomePath())[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_166 $$ processHandler.addProcessListener(new ProcessAdapter() [ CD ]
Line_77 $$ final String shouldGenerateIndex = System.getProperty(GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION)-->Line_78 $$ if (shouldGenerateIndex != null) [ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_8 $$ final Pair<Sdk, JavaSdkVersion> pair = getBuildProcessRuntimeSdk(project)[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_75 $$ cmdLine.addParameter("-Dpreload.config.path=" + FileUtil.toCanonicalPath(PathManager.getOptionsPath()))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_86 $$ cmdLine.addParameter("-Dio.netty.initialSeedUniquifier=" + ThreadLocalRandom.getInitialSeedUniquifier())[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_137 $$ launcherCp.addAll(BuildProcessClasspathManager.getLauncherClasspath(project))[ CD ]
Line_43 $$ final String option = tokenizer.nextToken()-->Line_44 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) [ FD ]
Line_43 $$ final String option = tokenizer.nextToken()-->Line_49 $$ if ("-Dprofiling.mode=true".equals(option)) [ FD ]
Line_10 $$ sdkVersion = pair.second-->Line_62 $$ if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) [ FD ]
Line_141 $$ final List<String> cp = ClasspathBootstrap.getBuildProcessApplicationClasspath(true)-->Line_144 $$ cp.add(new File(workDirectory, "yjp-controller-api-redist.jar").getPath())[ FD ]
Line_174 $$ if (debugPort > 0) -->Line_175 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_4 $$ final String vmExecutablePath[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_151 $$ cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_3 $$ final String compilerPath[ CD ]
Line_129 $$ final List<String> args = provider.getVMArguments()-->Line_130 $$ cmdLine.addParameters(args)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_148 $$ cmdLine.addParameter(Boolean.valueOf(System.getProperty("java.net.preferIPv6Addresses", "false")) ? "::1" : "127.0.0.1")[ CD ]
Line_44 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) -->Line_52 $$ userAdditionalOptionsList.add(option)[ CD ]
Line_93 $$ int debugPort = -1-->Line_95 $$ debugPort = Registry.intValue("compiler.process.debug.port")[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_74 $$ cmdLine.addParameter("-Dpreload.project.path=" + FileUtil.toCanonicalPath(getProjectPath(project)))[ FD ]
Line_73 $$ if (requestProjectPreload) -->Line_74 $$ cmdLine.addParameter("-Dpreload.project.path=" + FileUtil.toCanonicalPath(getProjectPath(project)))[ CD ]
Line_133 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_135 $$ launcherCp.add(compilerPath)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_150 $$ cmdLine.addParameter(sessionId.toString())[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_57 $$ cmdLine.addParameter(userDefinedHeapSize)[ FD ]
Line_18 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())-->Line_135 $$ launcherCp.add(compilerPath)[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_10 $$ sdkVersion = pair.second[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_134 $$ launcherCp.add(ClasspathBootstrap.getResourcePath(launcherClass))[ CD ]
Line_62 $$ if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) -->Line_63 $$ cmdLine.addParameter("-d32")[ CD ]
Line_133 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_139 $$ cmdLine.addParameter(classpathToString(launcherCp))[ FD ]
Line_166 $$ processHandler.addProcessListener(new ProcessAdapter() -->Line_169 $$ if (!StringUtil.isEmptyOrSpaces(text)) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_8 $$ final Pair<Sdk, JavaSdkVersion> pair = getBuildProcessRuntimeSdk(project)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_154 $$ ApplicationManager.getApplication().getMessageBus().syncPublisher(BuildManagerListener.TOPIC).beforeBuildProcessStarted(project, sessionId)[ FD ]
Line_42 $$ while (tokenizer.hasMoreTokens()) -->Line_43 $$ final String option = tokenizer.nextToken()[ CD ]
Line_34 $$ boolean isProfilingMode = false-->Line_50 $$ isProfilingMode = true[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_149 $$ cmdLine.addParameter(Integer.toString(port))[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_109 $$ cmdLine.addParameter("-D" + GlobalOptions.USE_MEMORY_TEMP_CACHE_OPTION + "=false")[ FD ]
Line_125 $$ final File workDirectory = getBuildSystemDirectory()-->Line_126 $$ workDirectory.mkdirs()[ FD ]
Line_44 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) -->Line_49 $$ if ("-Dprofiling.mode=true".equals(option)) [ CD ]
Line_9 $$ final Sdk projectJdk = pair.first-->Line_25 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_36 $$ final List<String> userAdditionalOptionsList = new SmartList<String>()[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_108 $$ if (!Registry.is("compiler.process.use.memory.temp.cache")) [ CD ]
Line_116 $$ final String value = System.getProperty(name)-->Line_117 $$ if (value != null) [ FD ]
Line_35 $$ String userDefinedHeapSize = null-->Line_57 $$ cmdLine.addParameter(userDefinedHeapSize)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_139 $$ cmdLine.addParameter(classpathToString(launcherCp))[ FD ]
Line_158 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) -->Line_175 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_72 $$ cmdLine.addParameter("-Djdt.compiler.useSingleThread=true")[ CD ]
Line_3 $$ final String compilerPath-->Line_135 $$ launcherCp.add(compilerPath)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_30 $$ final CompilerConfiguration projectConfig = CompilerConfiguration.getInstance(project)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_60 $$ cmdLine.addParameter("-Xmx" + heapSize + "m")[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_149 $$ cmdLine.addParameter(Integer.toString(port))[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_86 $$ cmdLine.addParameter("-Dio.netty.initialSeedUniquifier=" + ThreadLocalRandom.getInitialSeedUniquifier())[ FD ]
Line_6 $$ final String forcedCompiledJdkHome = Registry.stringValue(COMPILER_PROCESS_JDK_PROPERTY)-->Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) [ FD ]
Line_117 $$ if (value != null) -->Line_118 $$ cmdLine.addParameter("-D" + name + "=" + value)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_74 $$ cmdLine.addParameter("-Dpreload.project.path=" + FileUtil.toCanonicalPath(getProjectPath(project)))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_31 $$ final CompilerWorkspaceConfiguration config = CompilerWorkspaceConfiguration.getInstance(project)[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_123 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_PLUGINS_PATH + "=" + PathManager.getPluginsPath())[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_126 $$ workDirectory.mkdirs()[ CD ]
Line_30 $$ final CompilerConfiguration projectConfig = CompilerConfiguration.getInstance(project)-->Line_59 $$ final int heapSize = projectConfig.getBuildProcessHeapSize(JavacConfiguration.getOptions(project, JavacConfiguration.class).MAXIMUM_HEAP_SIZE)[ FD ]
Line_87 $$ for (String option : userAdditionalOptionsList) -->Line_88 $$ cmdLine.addParameter(option)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_65 $$ cmdLine.addParameter("-Djava.awt.headless=true")[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_152 $$ cmdLine.setWorkDirectory(workDirectory)[ FD ]
Line_37 $$ final String userAdditionalVMOptions = config.COMPILER_PROCESS_ADDITIONAL_VM_OPTIONS-->Line_38 $$ final boolean userLocalOptionsActive = !StringUtil.isEmptyOrSpaces(userAdditionalVMOptions)[ FD ]
Line_168 $$ final String text = event.getText()-->Line_169 $$ if (!StringUtil.isEmptyOrSpaces(text)) [ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_67 $$ cmdLine.addParameter("-Djava.endorsed.dirs=\"\"")[ FD ]
Line_9 $$ final Sdk projectJdk = pair.first-->Line_20 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ FD ]
Line_25 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)-->Line_33 $$ cmdLine.setExePath(vmExecutablePath)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_112 $$ cmdLine.addParameter("-D" + CharsetToolkit.FILE_ENCODING_PROPERTY + "=" + mySystemCharset.name())[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_132 $$ final Class<?> launcherClass = org.jetbrains.jps.cmdline.Launcher.class[ CD ]
Line_14 $$ final JavaCompiler systemCompiler = ToolProvider.getSystemJavaCompiler()-->Line_18 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())[ FD ]
Line_3 $$ final String compilerPath-->Line_18 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_148 $$ cmdLine.addParameter(Boolean.valueOf(System.getProperty("java.net.preferIPv6Addresses", "false")) ? "::1" : "127.0.0.1")[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_151 $$ cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()))[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_104 $$ cmdLine.addParameter("-XX:+HeapDumpOnOutOfMemoryError")[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_125 $$ final File workDirectory = getBuildSystemDirectory()[ CD ]
Line_41 $$ final StringTokenizer tokenizer = new StringTokenizer(additionalOptions, " ", false)-->Line_43 $$ final String option = tokenizer.nextToken()[ FD ]
Line_9 $$ final Sdk projectJdk = pair.first-->Line_12 $$ final JavaSdkType projectJdkType = (JavaSdkType) projectJdk.getSdkType()[ FD ]
Line_94 $$ if (myBuildProcessDebuggingEnabled) -->Line_95 $$ debugPort = Registry.intValue("compiler.process.debug.port")[ CD ]
Line_132 $$ final Class<?> launcherClass = org.jetbrains.jps.cmdline.Launcher.class-->Line_134 $$ launcherCp.add(ClasspathBootstrap.getResourcePath(launcherClass))[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_65 $$ cmdLine.addParameter("-Djava.awt.headless=true")[ FD ]
Line_13 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_15 $$ if (systemCompiler == null) [ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_70 $$ cmdLine.addParameter("-Dtest.mode=true")[ FD ]
Line_94 $$ if (myBuildProcessDebuggingEnabled) -->Line_96 $$ if (debugPort <= 0) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_6 $$ final String forcedCompiledJdkHome = Registry.stringValue(COMPILER_PROCESS_JDK_PROPERTY)[ CD ]
Line_93 $$ int debugPort = -1-->Line_96 $$ if (debugPort <= 0) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_137 $$ launcherCp.addAll(BuildProcessClasspathManager.getLauncherClasspath(project))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_121 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_HOME_PATH + "=" + PathManager.getHomePath())[ CD ]
Line_20 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)-->Line_135 $$ launcherCp.add(compilerPath)[ FD ]
Line_168 $$ final String text = event.getText()-->Line_170 $$ LOG.info("BUILDER_PROCESS [" + outputType.toString() + "]: " + text.trim())[ FD ]
Line_42 $$ while (tokenizer.hasMoreTokens()) -->Line_44 $$ if (StringUtil.startsWithIgnoreCase(option, "-Xmx")) [ CD ]
Line_39 $$ final String additionalOptions = userLocalOptionsActive ? userAdditionalVMOptions : projectConfig.getBuildProcessVMOptions()-->Line_40 $$ if (!StringUtil.isEmptyOrSpaces(additionalOptions)) [ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_72 $$ cmdLine.addParameter("-Djdt.compiler.useSingleThread=true")[ FD ]
Line_30 $$ final CompilerConfiguration projectConfig = CompilerConfiguration.getInstance(project)-->Line_39 $$ final String additionalOptions = userLocalOptionsActive ? userAdditionalVMOptions : projectConfig.getBuildProcessVMOptions()[ FD ]
Line_3 $$ final String compilerPath-->Line_27 $$ compilerPath = new File(forcedCompiledJdkHome, "lib/tools.jar").getAbsolutePath()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_73 $$ if (requestProjectPreload) [ CD ]
Line_98 $$ debugPort = NetUtils.findAvailableSocketPort()-->Line_175 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ FD ]
Line_158 $$ final OSProcessHandler processHandler = new OSProcessHandler(cmdLine) -->Line_163 $$ return false[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_84 $$ cmdLine.addParameter("-Djava.net.preferIPv4Stack=true")[ FD ]
Line_166 $$ processHandler.addProcessListener(new ProcessAdapter() -->Line_168 $$ final String text = event.getText()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_124 $$ cmdLine.addParameter("-D" + GlobalOptions.LOG_DIR_OPTION + "=" + FileUtil.toSystemIndependentName(getBuildLogDirectory().getAbsolutePath()))[ CD ]
Line_56 $$ if (userDefinedHeapSize != null) -->Line_60 $$ cmdLine.addParameter("-Xmx" + heapSize + "m")[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_62 $$ if (SystemInfo.isMac && sdkVersion != null && JavaSdkVersion.JDK_1_6.equals(sdkVersion) && Registry.is("compiler.process.32bit.vm.on.mac")) [ CD ]
Line_94 $$ if (myBuildProcessDebuggingEnabled) -->Line_103 $$ if (debugPort > 0) [ CD ]
Line_125 $$ final File workDirectory = getBuildSystemDirectory()-->Line_152 $$ cmdLine.setWorkDirectory(workDirectory)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_111 $$ cmdLine.setCharset(mySystemCharset)[ FD ]
Line_12 $$ final JavaSdkType projectJdkType = (JavaSdkType) projectJdk.getSdkType()-->Line_20 $$ compilerPath = projectJdkType.getToolsPath(projectJdk)[ FD ]
Line_12 $$ final JavaSdkType projectJdkType = (JavaSdkType) projectJdk.getSdkType()-->Line_25 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)[ FD ]
Line_166 $$ processHandler.addProcessListener(new ProcessAdapter() -->Line_168 $$ final String text = event.getText()[ CD ]
Line_13 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_18 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())[ CD ]
Line_108 $$ if (!Registry.is("compiler.process.use.memory.temp.cache")) -->Line_109 $$ cmdLine.addParameter("-D" + GlobalOptions.USE_MEMORY_TEMP_CACHE_OPTION + "=false")[ CD ]
Line_169 $$ if (!StringUtil.isEmptyOrSpaces(text)) -->Line_170 $$ LOG.info("BUILDER_PROCESS [" + outputType.toString() + "]: " + text.trim())[ CD ]
Line_28 $$ vmExecutablePath = new File(forcedCompiledJdkHome, "bin/java").getAbsolutePath()-->Line_33 $$ cmdLine.setExePath(vmExecutablePath)[ FD ]
Line_93 $$ int debugPort = -1-->Line_174 $$ if (debugPort > 0) [ FD ]
Line_141 $$ final List<String> cp = ClasspathBootstrap.getBuildProcessApplicationClasspath(true)-->Line_146 $$ cmdLine.addParameter(classpathToString(cp))[ FD ]
Line_98 $$ debugPort = NetUtils.findAvailableSocketPort()-->Line_174 $$ if (debugPort > 0) [ FD ]
Line_9 $$ final Sdk projectJdk = pair.first-->Line_22 $$ throw new ExecutionException("Cannot determine path to 'tools.jar' library for " + projectJdk.getName() + " (" + projectJdk.getHomePath() + ")")[ FD ]
Line_125 $$ final File workDirectory = getBuildSystemDirectory()-->Line_127 $$ cmdLine.addParameter("-Djava.io.tmpdir=" + FileUtil.toSystemIndependentName(workDirectory.getPath()) + "/" + TEMP_DIR_NAME)[ FD ]
Line_18 $$ compilerPath = ClasspathBootstrap.getResourcePath(systemCompiler.getClass())-->Line_21 $$ if (compilerPath == null) [ FD ]
Line_4 $$ final String vmExecutablePath-->Line_28 $$ vmExecutablePath = new File(forcedCompiledJdkHome, "bin/java").getAbsolutePath()[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_113 $$ cmdLine.addParameter("-D" + JpsGlobalLoader.FILE_TYPES_COMPONENT_NAME_KEY + "=" + FileTypeManagerImpl.getFileTypeComponentName())[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_30 $$ final CompilerConfiguration projectConfig = CompilerConfiguration.getInstance(project)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_33 $$ cmdLine.setExePath(vmExecutablePath)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_77 $$ final String shouldGenerateIndex = System.getProperty(GlobalOptions.GENERATE_CLASSPATH_INDEX_OPTION)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_152 $$ cmdLine.setWorkDirectory(workDirectory)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_141 $$ final List<String> cp = ClasspathBootstrap.getBuildProcessApplicationClasspath(true)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_150 $$ cmdLine.addParameter(sessionId.toString())[ CD ]
Line_93 $$ int debugPort = -1-->Line_175 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_133 $$ final List<String> launcherCp = new ArrayList<String>()[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_142 $$ cp.addAll(myClasspathManager.getBuildProcessPluginsClasspath(project))[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_138 $$ cmdLine.addParameter("-classpath")[ FD ]
Line_9 $$ final Sdk projectJdk = pair.first-->Line_13 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_56 $$ if (userDefinedHeapSize != null) [ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_82 $$ cmdLine.addParameter("-D" + GlobalOptions.REBUILD_ON_DEPENDENCY_CHANGE_OPTION + "=" + Boolean.toString(config.REBUILD_ON_DEPENDENCY_CHANGE))[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_122 $$ cmdLine.addParameter("-D" + PathManager.PROPERTY_CONFIG_PATH + "=" + PathManager.getConfigPath())[ CD ]
Line_95 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_175 $$ processHandler.putUserData(COMPILER_PROCESS_DEBUG_PORT, debugPort)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_5 $$ JavaSdkVersion sdkVersion = null[ CD ]
Line_36 $$ final List<String> userAdditionalOptionsList = new SmartList<String>()-->Line_52 $$ userAdditionalOptionsList.add(option)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_93 $$ int debugPort = -1[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_136 $$ ClasspathBootstrap.appendJavaCompilerClasspath(launcherCp)[ CD ]
Line_125 $$ final File workDirectory = getBuildSystemDirectory()-->Line_151 $$ cmdLine.addParameter(FileUtil.toSystemIndependentName(workDirectory.getPath()))[ FD ]
Line_166 $$ processHandler.addProcessListener(new ProcessAdapter() -->Line_170 $$ LOG.info("BUILDER_PROCESS [" + outputType.toString() + "]: " + text.trim())[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_146 $$ cmdLine.addParameter(classpathToString(cp))[ FD ]
Line_56 $$ if (userDefinedHeapSize != null) -->Line_57 $$ cmdLine.addParameter(userDefinedHeapSize)[ CD ]
Line_95 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_174 $$ if (debugPort > 0) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_138 $$ cmdLine.addParameter("-classpath")[ CD ]
Line_133 $$ final List<String> launcherCp = new ArrayList<String>()-->Line_136 $$ ClasspathBootstrap.appendJavaCompilerClasspath(launcherCp)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_38 $$ final boolean userLocalOptionsActive = !StringUtil.isEmptyOrSpaces(userAdditionalVMOptions)[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_34 $$ boolean isProfilingMode = false[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_59 $$ final int heapSize = projectConfig.getBuildProcessHeapSize(JavacConfiguration.getOptions(project, JavacConfiguration.class).MAXIMUM_HEAP_SIZE)[ FD ]
Line_95 $$ debugPort = Registry.intValue("compiler.process.debug.port")-->Line_103 $$ if (debugPort > 0) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_139 $$ cmdLine.addParameter(classpathToString(launcherCp))[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_140 $$ cmdLine.addParameter(launcherClass.getName())[ CD ]
Line_143 $$ if (isProfilingMode) -->Line_144 $$ cp.add(new File(workDirectory, "yjp-controller-api-redist.jar").getPath())[ CD ]
Line_13 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) -->Line_21 $$ if (compilerPath == null) [ CD ]
Line_4 $$ final String vmExecutablePath-->Line_25 $$ vmExecutablePath = projectJdkType.getVMExecutablePath(projectJdk)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_130 $$ cmdLine.addParameters(args)[ FD ]
Line_11 $$ final Sdk internalJdk = JavaAwareProjectJdkTableImpl.getInstanceEx().getInternalJdk()-->Line_13 $$ if (FileUtil.pathsEqual(projectJdk.getHomePath(), internalJdk.getHomePath())) [ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_90 $$ if (isProfilingMode) [ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_146 $$ cmdLine.addParameter(classpathToString(cp))[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_33 $$ cmdLine.setExePath(vmExecutablePath)[ FD ]
Line_7 $$ if (StringUtil.isEmptyOrSpaces(forcedCompiledJdkHome)) -->Line_12 $$ final JavaSdkType projectJdkType = (JavaSdkType) projectJdk.getSdkType()[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_118 $$ cmdLine.addParameter("-D" + name + "=" + value)[ FD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_135 $$ launcherCp.add(compilerPath)[ CD ]
Line_66 $$ if (sdkVersion != null && sdkVersion.ordinal() < JavaSdkVersion.JDK_1_9.ordinal()) -->Line_67 $$ cmdLine.addParameter("-Djava.endorsed.dirs=\"\"")[ CD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_127 $$ cmdLine.addParameter("-Djava.io.tmpdir=" + FileUtil.toSystemIndependentName(workDirectory.getPath()) + "/" + TEMP_DIR_NAME)[ FD ]
Line_32 $$ final GeneralCommandLine cmdLine = new GeneralCommandLine()-->Line_113 $$ cmdLine.addParameter("-D" + JpsGlobalLoader.FILE_TYPES_COMPONENT_NAME_KEY + "=" + FileTypeManagerImpl.getFileTypeComponentName())[ FD ]
Line_49 $$ if ("-Dprofiling.mode=true".equals(option)) -->Line_50 $$ isProfilingMode = true[ CD ]
Line_2 $$ private OSProcessHandler launchBuildProcess(Project project, final int port, final UUID sessionId, boolean requestProjectPreload) throws ExecutionException -->Line_39 $$ final String additionalOptions = userLocalOptionsActive ? userAdditionalVMOptions : projectConfig.getBuildProcessVMOptions()[ CD ]
Line_35 $$ String userDefinedHeapSize = null-->Line_46 $$ userDefinedHeapSize = option[ FD ]
