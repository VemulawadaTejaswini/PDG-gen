Line_2 $$ public void testDeletedShardNodes() -->Line_4 $$ int nodeId1 = dao.insertNode(nodeName1)[ CD ]
Line_3 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_18 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName1, future()), shards)[ FD ]
Line_4 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_12 $$ dao.updateCleanedShardNodes(shards, nodeId1)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_21 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName1, future()), ImmutableList.of())[ CD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_14 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName2, future()), shards)[ FD ]
Line_5 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_22 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName2, future()), shards)[ FD ]
Line_5 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_6 $$ int nodeId2 = dao.insertNode(nodeName2)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_3 $$ String nodeName1 = UUID.randomUUID().toString()[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_24 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName1, future()), ImmutableList.of())[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_16 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName1, future()), ImmutableList.of())[ CD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_19 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName2, future()), shards)[ FD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_22 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName2, future()), shards)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_6 $$ int nodeId2 = dao.insertNode(nodeName2)[ CD ]
Line_4 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_8 $$ dao.insertDeletedShardNodes(shards, ImmutableList.of(nodeId1))[ FD ]
Line_3 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_21 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName1, future()), ImmutableList.of())[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_10 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName1, future()), shards)[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_8 $$ dao.insertDeletedShardNodes(shards, ImmutableList.of(nodeId1))[ CD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_10 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName1, future()), shards)[ FD ]
Line_3 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_10 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName1, future()), shards)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_15 $$ dao.updateCleanedShardNodes(shards, nodeId2)[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_19 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName2, future()), shards)[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_18 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName1, future()), shards)[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_22 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName2, future()), shards)[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_25 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName2, future()), ImmutableList.of())[ CD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_9 $$ dao.insertDeletedShardNodes(shards, ImmutableList.of(nodeId2))[ FD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_11 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName2, future()), shards)[ FD ]
Line_5 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_14 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName2, future()), shards)[ FD ]
Line_5 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_17 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName2, future()), ImmutableList.of())[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_20 $$ dao.updatePurgedShardNodes(shards, nodeId1)[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_5 $$ String nodeName2 = UUID.randomUUID().toString()[ CD ]
Line_4 $$ int nodeId1 = dao.insertNode(nodeName1)-->Line_20 $$ dao.updatePurgedShardNodes(shards, nodeId1)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_12 $$ dao.updateCleanedShardNodes(shards, nodeId1)[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())[ CD ]
Line_6 $$ int nodeId2 = dao.insertNode(nodeName2)-->Line_23 $$ dao.updatePurgedShardNodes(shards, nodeId2)[ FD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_15 $$ dao.updateCleanedShardNodes(shards, nodeId2)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_9 $$ dao.insertDeletedShardNodes(shards, ImmutableList.of(nodeId2))[ CD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_18 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName1, future()), shards)[ FD ]
Line_3 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_13 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName1, future()), ImmutableList.of())[ FD ]
Line_5 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_25 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName2, future()), ImmutableList.of())[ FD ]
Line_6 $$ int nodeId2 = dao.insertNode(nodeName2)-->Line_15 $$ dao.updateCleanedShardNodes(shards, nodeId2)[ FD ]
Line_3 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_4 $$ int nodeId1 = dao.insertNode(nodeName1)[ FD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_20 $$ dao.updatePurgedShardNodes(shards, nodeId1)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_23 $$ dao.updatePurgedShardNodes(shards, nodeId2)[ CD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_11 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName2, future()), shards)[ CD ]
Line_3 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_24 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName1, future()), ImmutableList.of())[ FD ]
Line_6 $$ int nodeId2 = dao.insertNode(nodeName2)-->Line_9 $$ dao.insertDeletedShardNodes(shards, ImmutableList.of(nodeId2))[ FD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_23 $$ dao.updatePurgedShardNodes(shards, nodeId2)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_17 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName2, future()), ImmutableList.of())[ CD ]
Line_5 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_19 $$ assertEquals(dao.getPurgableShardNodesBatch(nodeName2, future()), shards)[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_13 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName1, future()), ImmutableList.of())[ CD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_8 $$ dao.insertDeletedShardNodes(shards, ImmutableList.of(nodeId1))[ FD ]
Line_5 $$ String nodeName2 = UUID.randomUUID().toString()-->Line_11 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName2, future()), shards)[ FD ]
Line_7 $$ ImmutableList<UUID> shards = ImmutableList.of(UUID.randomUUID())-->Line_12 $$ dao.updateCleanedShardNodes(shards, nodeId1)[ FD ]
Line_3 $$ String nodeName1 = UUID.randomUUID().toString()-->Line_16 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName1, future()), ImmutableList.of())[ FD ]
Line_2 $$ public void testDeletedShardNodes() -->Line_14 $$ assertEquals(dao.getCleanableShardNodesBatch(nodeName2, future()), shards)[ CD ]
