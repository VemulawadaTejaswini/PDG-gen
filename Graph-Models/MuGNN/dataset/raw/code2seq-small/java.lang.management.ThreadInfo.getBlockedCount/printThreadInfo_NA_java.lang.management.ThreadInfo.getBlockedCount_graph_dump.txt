Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_21 $$ stream.println("  Waited time: " + info.getWaitedTime())[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_34 $$ stream.flush()[ CD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_27 $$ stream.println("  Blocked by " + getTaskName(info.getLockOwnerId(), info.getLockOwnerName()))[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_16 $$ stream.println("  State: " + state)[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_6 $$ stream.println("Process Thread Dump: " + title)[ FD ]
Line_23 $$ if (state == Thread.State.WAITING) -->Line_24 $$ stream.println("  Waiting on " + info.getLockName())[ CD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_21 $$ stream.println("  Waited time: " + info.getWaitedTime())[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_14 $$ stream.println("Thread " + getTaskName(info.getThreadId(), info.getThreadName()) + ":")[ FD ]
Line_25 $$ if (state == Thread.State.BLOCKED) -->Line_26 $$ stream.println("  Blocked on " + info.getLockName())[ CD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_34 $$ stream.flush()[ FD ]
Line_19 $$ if (contention) -->Line_21 $$ stream.println("  Waited time: " + info.getWaitedTime())[ CD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_30 $$ for (StackTraceElement frame : info.getStackTrace()) [ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_4 $$ boolean contention = threadBean.isThreadContentionMonitoringEnabled()[ CD ]
Line_19 $$ if (contention) -->Line_20 $$ stream.println("  Blocked time: " + info.getBlockedTime())[ CD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_24 $$ stream.println("  Waiting on " + info.getLockName())[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_20 $$ stream.println("  Blocked time: " + info.getBlockedTime())[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_7 $$ stream.println(threadIds.length + " active threads")[ CD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_20 $$ stream.println("  Blocked time: " + info.getBlockedTime())[ FD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_10 $$ if (info == null) [ FD ]
Line_8 $$ for (long tid : threadIds) -->Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)[ FD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_17 $$ stream.println("  Blocked count: " + info.getBlockedCount())[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_5 $$ long[] threadIds = threadBean.getAllThreadIds()[ CD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_24 $$ stream.println("  Waiting on " + info.getLockName())[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_31 $$ stream.println("    " + frame.toString())[ FD ]
Line_10 $$ if (info == null) -->Line_11 $$ stream.println("  Inactive")[ CD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_27 $$ stream.println("  Blocked by " + getTaskName(info.getLockOwnerId(), info.getLockOwnerName()))[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_7 $$ stream.println(threadIds.length + " active threads")[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_3 $$ final int STACK_DEPTH = 20[ CD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_14 $$ stream.println("Thread " + getTaskName(info.getThreadId(), info.getThreadName()) + ":")[ FD ]
Line_15 $$ Thread.State state = info.getThreadState()-->Line_23 $$ if (state == Thread.State.WAITING) [ FD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_18 $$ stream.println("  Waited count: " + info.getWaitedCount())[ FD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_15 $$ Thread.State state = info.getThreadState()[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_17 $$ stream.println("  Blocked count: " + info.getBlockedCount())[ FD ]
Line_23 $$ if (state == Thread.State.WAITING) -->Line_25 $$ if (state == Thread.State.BLOCKED) [ CD ]
Line_15 $$ Thread.State state = info.getThreadState()-->Line_25 $$ if (state == Thread.State.BLOCKED) [ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_29 $$ stream.println("  Stack:")[ FD ]
Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)-->Line_26 $$ stream.println("  Blocked on " + info.getLockName())[ FD ]
Line_30 $$ for (StackTraceElement frame : info.getStackTrace()) -->Line_31 $$ stream.println("    " + frame.toString())[ FD ]
Line_25 $$ if (state == Thread.State.BLOCKED) -->Line_27 $$ stream.println("  Blocked by " + getTaskName(info.getLockOwnerId(), info.getLockOwnerName()))[ CD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_18 $$ stream.println("  Waited count: " + info.getWaitedCount())[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_26 $$ stream.println("  Blocked on " + info.getLockName())[ FD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_6 $$ stream.println("Process Thread Dump: " + title)[ CD ]
Line_2 $$ public static synchronized void printThreadInfo(PrintWriter stream, String title) -->Line_11 $$ stream.println("  Inactive")[ FD ]
Line_3 $$ final int STACK_DEPTH = 20-->Line_9 $$ ThreadInfo info = threadBean.getThreadInfo(tid, STACK_DEPTH)[ FD ]
