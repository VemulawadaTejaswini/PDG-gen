Line_4 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_7 $$ TaskHandle taskHandle = taskExecutor.addTask(new TaskId("test", "test", "test"))[ FD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_35 $$ assertEquals(driver2.getCompletedPhases(), 2)[ FD ]
Line_4 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_16 $$ ListenableFuture<?> future2 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver2)))[ FD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_43 $$ assertEquals(beginPhase.getPhase(), verificationComplete.getPhase() + 1)[ FD ]
Line_7 $$ TaskHandle taskHandle = taskExecutor.addTask(new TaskId("test", "test", "test"))-->Line_31 $$ ListenableFuture<?> future3 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, false, ImmutableList.of(driver3)))[ FD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_27 $$ assertEquals(driver2.getCompletedPhases(), 1)[ FD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_64 $$ assertEquals(driver2.getLastPhase(), 10)[ FD ]
Line_40 $$ for (int i = 0; i < 7; i++) -->Line_43 $$ assertEquals(beginPhase.getPhase(), verificationComplete.getPhase() + 1)[ CD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_61 $$ assertEquals(driver2.getFirstPhase(), 0)[ FD ]
Line_8 $$ final Phaser beginPhase = new Phaser()-->Line_42 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_14 $$ ListenableFuture<?> future1 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver1)))-->Line_48 $$ future1.get(1, TimeUnit.SECONDS)[ FD ]
Line_8 $$ final Phaser beginPhase = new Phaser()-->Line_9 $$ beginPhase.register()[ FD ]
Line_40 $$ for (int i = 0; i < 7; i++) -->Line_41 $$ verificationComplete.arriveAndAwaitAdvance()[ CD ]
Line_4 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_14 $$ ListenableFuture<?> future1 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver1)))[ FD ]
Line_8 $$ final Phaser beginPhase = new Phaser()-->Line_54 $$ beginPhase.arriveAndAwaitAdvance()[ FD ]
Line_7 $$ TaskHandle taskHandle = taskExecutor.addTask(new TaskId("test", "test", "test"))-->Line_16 $$ ListenableFuture<?> future2 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver2)))[ FD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_46 $$ assertEquals(driver2.getCompletedPhases(), 10)[ FD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_18 $$ assertEquals(driver2.getCompletedPhases(), 0)[ FD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_56 $$ assertEquals(driver2.getCompletedPhases(), 10)[ FD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_23 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_31 $$ ListenableFuture<?> future3 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, false, ImmutableList.of(driver3)))-->Line_58 $$ future3.get(1, TimeUnit.SECONDS)[ FD ]
Line_4 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_31 $$ ListenableFuture<?> future3 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, false, ImmutableList.of(driver3)))[ FD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_16 $$ ListenableFuture<?> future2 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver2)))[ FD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_37 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_16 $$ ListenableFuture<?> future2 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver2)))-->Line_49 $$ future2.get(1, TimeUnit.SECONDS)[ FD ]
Line_40 $$ for (int i = 0; i < 7; i++) -->Line_42 $$ beginPhase.arriveAndAwaitAdvance()[ CD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_59 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_11 $$ verificationComplete.register()[ FD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_28 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_7 $$ TaskHandle taskHandle = taskExecutor.addTask(new TaskId("test", "test", "test"))-->Line_14 $$ ListenableFuture<?> future1 = getOnlyElement(taskExecutor.enqueueSplits(taskHandle, true, ImmutableList.of(driver1)))[ FD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_50 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_41 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_10 $$ final Phaser verificationComplete = new Phaser()-->Line_53 $$ verificationComplete.arriveAndAwaitAdvance()[ FD ]
Line_4 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_67 $$ taskExecutor.stop()[ FD ]
Line_8 $$ final Phaser beginPhase = new Phaser()-->Line_43 $$ assertEquals(beginPhase.getPhase(), verificationComplete.getPhase() + 1)[ FD ]
Line_4 $$ TaskExecutor taskExecutor = new TaskExecutor(4, 8)-->Line_5 $$ taskExecutor.start()[ FD ]
Line_15 $$ TestingJob driver2 = new TestingJob(beginPhase, verificationComplete, 10)-->Line_22 $$ assertEquals(driver2.getCompletedPhases(), 0)[ FD ]
