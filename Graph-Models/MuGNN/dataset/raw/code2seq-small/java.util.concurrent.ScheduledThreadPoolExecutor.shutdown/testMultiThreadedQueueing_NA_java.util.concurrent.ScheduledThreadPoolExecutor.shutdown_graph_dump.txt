Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_6 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(100, ConcurrencyUtil.newNamedThreadFactory("testMultiThreadedQueueing()"))[ CD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_5 $$ final AtomicInteger count = new AtomicInteger()[ CD ]
Line_9 $$ ScheduledFuture<?> future = executor.schedule(new Runnable() -->Line_21 $$ futures.add(future)[ FD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_4 $$ queue.showNotify()[ CD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_28 $$ executor.shutdown()[ CD ]
Line_3 $$ final MyQueue queue = new MyQueue(20)-->Line_13 $$ queue.queue(new Update(new Object()) [ FD ]
Line_3 $$ final MyQueue queue = new MyQueue(20)-->Line_26 $$ waitForExecution(queue)[ FD ]
Line_3 $$ final MyQueue queue = new MyQueue(20)-->Line_4 $$ queue.showNotify()[ FD ]
Line_7 $$ List<Future> futures = ContainerUtil.newArrayList()-->Line_21 $$ futures.add(future)[ FD ]
Line_6 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(100, ConcurrencyUtil.newNamedThreadFactory("testMultiThreadedQueueing()"))-->Line_9 $$ ScheduledFuture<?> future = executor.schedule(new Runnable() [ FD ]
Line_6 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(100, ConcurrencyUtil.newNamedThreadFactory("testMultiThreadedQueueing()"))-->Line_29 $$ assertTrue(executor.awaitTermination(100, TimeUnit.SECONDS))[ FD ]
Line_13 $$ queue.queue(new Update(new Object()) -->Line_15 $$ count.incrementAndGet()[ CD ]
Line_5 $$ final AtomicInteger count = new AtomicInteger()-->Line_27 $$ assertEquals(1000, count.get())[ FD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_3 $$ final MyQueue queue = new MyQueue(20)[ CD ]
Line_6 $$ ScheduledThreadPoolExecutor executor = new ScheduledThreadPoolExecutor(100, ConcurrencyUtil.newNamedThreadFactory("testMultiThreadedQueueing()"))-->Line_28 $$ executor.shutdown()[ FD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_8 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_11 $$ for (int j = 0; j < 100; j++) -->Line_13 $$ queue.queue(new Update(new Object()) [ CD ]
Line_9 $$ ScheduledFuture<?> future = executor.schedule(new Runnable() -->Line_11 $$ for (int j = 0; j < 100; j++) [ CD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_27 $$ assertEquals(1000, count.get())[ CD ]
Line_11 $$ for (int j = 0; j < 100; j++) -->Line_12 $$ TimeoutUtil.sleep(1)[ CD ]
Line_5 $$ final AtomicInteger count = new AtomicInteger()-->Line_15 $$ count.incrementAndGet()[ FD ]
Line_8 $$ for (int i = 0; i < 10; i++) -->Line_21 $$ futures.add(future)[ CD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_29 $$ assertTrue(executor.awaitTermination(100, TimeUnit.SECONDS))[ CD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_26 $$ waitForExecution(queue)[ CD ]
Line_2 $$ public void testMultiThreadedQueueing() throws ExecutionException, InterruptedException -->Line_7 $$ List<Future> futures = ContainerUtil.newArrayList()[ CD ]
Line_9 $$ ScheduledFuture<?> future = executor.schedule(new Runnable() -->Line_24 $$ future.get()[ FD ]
Line_8 $$ for (int i = 0; i < 10; i++) -->Line_9 $$ ScheduledFuture<?> future = executor.schedule(new Runnable() [ CD ]
