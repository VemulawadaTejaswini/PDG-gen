Line_28 $$ AnimatedIcon animatedIcon2 = new AnimatedIcon("Long", icons2, passive, 600 * cycles)-->Line_30 $$ animatedIcon2.resume()[ FD ]
Line_4 $$ worker.scheduleWithFixedDelay(new Runnable() -->Line_6 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_29 $$ animatedIcon1.resume()[ CD ]
Line_3 $$ ScheduledThreadPoolExecutor worker = ConcurrencyUtil.newSingleScheduledThreadExecutor("DumbWorker")-->Line_4 $$ worker.scheduleWithFixedDelay(new Runnable() [ FD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_28 $$ AnimatedIcon animatedIcon2 = new AnimatedIcon("Long", icons2, passive, 600 * cycles)[ CD ]
Line_2 $$ public void actionPerformed(final AnActionEvent e) -->Line_3 $$ ScheduledThreadPoolExecutor worker = ConcurrencyUtil.newSingleScheduledThreadExecutor("DumbWorker")[ CD ]
Line_27 $$ AnimatedIcon animatedIcon1 = new AnimatedIcon("Casual", icons1, passive, 600)-->Line_31 $$ panel.add(animatedIcon1, BorderLayout.WEST)[ FD ]
Line_2 $$ public void actionPerformed(final AnActionEvent e) -->Line_4 $$ worker.scheduleWithFixedDelay(new Runnable() [ CD ]
Line_18 $$ int cycles = 20-->Line_22 $$ for (int i = 0; i < cycles; i++) [ FD ]
Line_2 $$ public void actionPerformed(final AnActionEvent e) -->Line_36 $$ worker.shutdown()[ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_21 $$ List<Icon> iconsList2 = new ArrayList<Icon>()[ CD ]
Line_21 $$ List<Icon> iconsList2 = new ArrayList<Icon>()-->Line_23 $$ Collections.addAll(iconsList2, icons1)[ FD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_31 $$ panel.add(animatedIcon1, BorderLayout.WEST)[ CD ]
Line_21 $$ List<Icon> iconsList2 = new ArrayList<Icon>()-->Line_25 $$ Icon[] icons2 = ContainerUtil.toArray(iconsList2, new Icon[iconsList2.size()])[ FD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_27 $$ AnimatedIcon animatedIcon1 = new AnimatedIcon("Casual", icons1, passive, 600)[ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_30 $$ animatedIcon2.resume()[ CD ]
Line_27 $$ AnimatedIcon animatedIcon1 = new AnimatedIcon("Casual", icons1, passive, 600)-->Line_29 $$ animatedIcon1.resume()[ FD ]
Line_2 $$ public void actionPerformed(final AnActionEvent e) -->Line_13 $$ new DialogWrapper(e.getProject()) [ CD ]
Line_3 $$ ScheduledThreadPoolExecutor worker = ConcurrencyUtil.newSingleScheduledThreadExecutor("DumbWorker")-->Line_36 $$ worker.shutdown()[ FD ]
Line_26 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_32 $$ panel.add(animatedIcon2, BorderLayout.EAST)[ FD ]
Line_26 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_31 $$ panel.add(animatedIcon1, BorderLayout.WEST)[ FD ]
Line_6 $$ SwingUtilities.invokeLater(new Runnable() -->Line_8 $$ TimeoutUtil.sleep(30)[ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_19 $$ Icon passive = AllIcons.Process.Big.Step_passive[ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_33 $$ return panel[ CD ]
Line_20 $$ Icon[] icons1 = -->Line_23 $$ Collections.addAll(iconsList2, icons1)[ FD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_25 $$ Icon[] icons2 = ContainerUtil.toArray(iconsList2, new Icon[iconsList2.size()])[ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_20 $$ Icon[] icons1 = [ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_18 $$ int cycles = 20[ CD ]
Line_22 $$ for (int i = 0; i < cycles; i++) -->Line_23 $$ Collections.addAll(iconsList2, icons1)[ CD ]
Line_2 $$ public void actionPerformed(final AnActionEvent e) -->Line_13 $$ new DialogWrapper(e.getProject()) [ FD ]
Line_28 $$ AnimatedIcon animatedIcon2 = new AnimatedIcon("Long", icons2, passive, 600 * cycles)-->Line_32 $$ panel.add(animatedIcon2, BorderLayout.EAST)[ FD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_32 $$ panel.add(animatedIcon2, BorderLayout.EAST)[ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_26 $$ JPanel panel = new JPanel(new BorderLayout())[ CD ]
Line_13 $$ new DialogWrapper(e.getProject()) -->Line_22 $$ for (int i = 0; i < cycles; i++) [ CD ]
