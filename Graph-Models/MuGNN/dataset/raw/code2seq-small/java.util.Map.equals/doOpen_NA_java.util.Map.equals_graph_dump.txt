Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_3 $$ File canonicalDir = GFileUtils.canonicalise(cacheDir)[ CD ]
Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_12 $$ throw new IllegalStateException(String.format("Cache '%s' is already open with different options.", cacheDir))[ FD ]
Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_5 $$ if (dirCacheReference == null) [ CD ]
Line_3 $$ File canonicalDir = GFileUtils.canonicalise(cacheDir)-->Line_9 $$ dirCaches.put(canonicalDir, dirCacheReference)[ FD ]
Line_5 $$ if (dirCacheReference == null) -->Line_9 $$ dirCaches.put(canonicalDir, dirCacheReference)[ CD ]
Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_14 $$ if (!properties.equals(dirCacheReference.properties)) [ FD ]
Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_3 $$ File canonicalDir = GFileUtils.canonicalise(cacheDir)[ FD ]
Line_6 $$ ReferencablePersistentCache cache = new DefaultPersistentDirectoryCache(canonicalDir, displayName, validator, properties, lockOptions, action, lockManager)-->Line_7 $$ cache.open()[ FD ]
Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_18 $$ return new ReferenceTrackingCache(dirCacheReference)[ CD ]
Line_5 $$ if (dirCacheReference == null) -->Line_6 $$ ReferencablePersistentCache cache = new DefaultPersistentDirectoryCache(canonicalDir, displayName, validator, properties, lockOptions, action, lockManager)[ CD ]
Line_5 $$ if (dirCacheReference == null) -->Line_8 $$ dirCacheReference = new DirCacheReference(cache, properties, lockOptions)[ CD ]
Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_15 $$ throw new IllegalStateException(String.format("Cache '%s' is already open with different state.", cacheDir))[ FD ]
Line_5 $$ if (dirCacheReference == null) -->Line_14 $$ if (!properties.equals(dirCacheReference.properties)) [ CD ]
Line_3 $$ File canonicalDir = GFileUtils.canonicalise(cacheDir)-->Line_4 $$ DirCacheReference dirCacheReference = dirCaches.get(canonicalDir)[ FD ]
Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_11 $$ if (!lockOptions.equals(dirCacheReference.lockOptions)) [ FD ]
Line_4 $$ DirCacheReference dirCacheReference = dirCaches.get(canonicalDir)-->Line_5 $$ if (dirCacheReference == null) [ FD ]
Line_2 $$ private PersistentCache doOpen(File cacheDir, String displayName, CacheValidator validator, Map<String, ?> properties, LockOptions lockOptions, Action<? super PersistentCache> action) -->Line_4 $$ DirCacheReference dirCacheReference = dirCaches.get(canonicalDir)[ CD ]
Line_4 $$ DirCacheReference dirCacheReference = dirCaches.get(canonicalDir)-->Line_9 $$ dirCaches.put(canonicalDir, dirCacheReference)[ FD ]
Line_5 $$ if (dirCacheReference == null) -->Line_11 $$ if (!lockOptions.equals(dirCacheReference.lockOptions)) [ CD ]
Line_4 $$ DirCacheReference dirCacheReference = dirCaches.get(canonicalDir)-->Line_8 $$ dirCacheReference = new DirCacheReference(cache, properties, lockOptions)[ FD ]
Line_8 $$ dirCacheReference = new DirCacheReference(cache, properties, lockOptions)-->Line_9 $$ dirCaches.put(canonicalDir, dirCacheReference)[ FD ]
Line_5 $$ if (dirCacheReference == null) -->Line_7 $$ cache.open()[ CD ]
