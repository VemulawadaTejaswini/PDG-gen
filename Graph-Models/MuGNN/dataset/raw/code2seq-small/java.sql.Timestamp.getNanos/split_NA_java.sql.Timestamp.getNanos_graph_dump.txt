Line_5 $$ int sqlDataType = results.getMetaData().getColumnType(1)-->Line_7 $$ maxVal = resultSetColToLong(results, 2, sqlDataType)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_8 $$ String lowClausePrefix = colName + " >= "[ CD ]
Line_22 $$ Date startDate = longToDate(start, sqlDataType)-->Line_41 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), highClausePrefix + dateToString(endDate)))[ FD ]
Line_14 $$ if (minVal == Long.MIN_VALUE && maxVal == Long.MIN_VALUE) -->Line_15 $$ List<InputSplit> splits = new ArrayList<InputSplit>()[ CD ]
Line_30 $$ long end = splitPoints.get(i)-->Line_43 $$ start = end[ FD ]
Line_22 $$ Date startDate = longToDate(start, sqlDataType)-->Line_39 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), colName + " <= " + dateToString(endDate)))[ FD ]
Line_10 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)-->Line_11 $$ if (numSplits < 1) [ FD ]
Line_31 $$ Date endDate = longToDate(end, sqlDataType)-->Line_44 $$ startDate = endDate[ FD ]
Line_22 $$ Date startDate = longToDate(start, sqlDataType)-->Line_44 $$ startDate = endDate[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_4 $$ long maxVal[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_11 $$ if (numSplits < 1) [ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_10 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)[ FD ]
Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_43 $$ start = end[ CD ]
Line_31 $$ Date endDate = longToDate(end, sqlDataType)-->Line_39 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), colName + " <= " + dateToString(endDate)))[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_14 $$ if (minVal == Long.MIN_VALUE && maxVal == Long.MIN_VALUE) [ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_7 $$ maxVal = resultSetColToLong(results, 2, sqlDataType)[ FD ]
Line_32 $$ if (i == splitPoints.size() - 1) -->Line_33 $$ if (sqlDataType == Types.TIMESTAMP) [ CD ]
Line_15 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_41 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), highClausePrefix + dateToString(endDate)))[ FD ]
Line_44 $$ startDate = endDate-->Line_41 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), highClausePrefix + dateToString(endDate)))[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_46 $$ if (minVal == Long.MIN_VALUE || maxVal == Long.MIN_VALUE) [ CD ]
Line_5 $$ int sqlDataType = results.getMetaData().getColumnType(1)-->Line_23 $$ if (sqlDataType == Types.TIMESTAMP) [ FD ]
Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)-->Line_21 $$ long start = splitPoints.get(0)[ FD ]
Line_6 $$ minVal = resultSetColToLong(results, 1, sqlDataType)-->Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_6 $$ minVal = resultSetColToLong(results, 1, sqlDataType)[ CD ]
Line_14 $$ if (minVal == Long.MIN_VALUE && maxVal == Long.MIN_VALUE) -->Line_17 $$ return splits[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_9 $$ String highClausePrefix = colName + " < "[ CD ]
Line_3 $$ long minVal-->Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_30 $$ long end = splitPoints.get(i)[ FD ]
Line_7 $$ maxVal = resultSetColToLong(results, 2, sqlDataType)-->Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_5 $$ int sqlDataType = results.getMetaData().getColumnType(1)-->Line_33 $$ if (sqlDataType == Types.TIMESTAMP) [ FD ]
Line_44 $$ startDate = endDate-->Line_39 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), colName + " <= " + dateToString(endDate)))[ FD ]
Line_10 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)-->Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_25 $$ ((java.sql.Timestamp) startDate).setNanos(results.getTimestamp(1).getNanos())[ FD ]
Line_21 $$ long start = splitPoints.get(0)-->Line_43 $$ start = end[ FD ]
Line_15 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_39 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), colName + " <= " + dateToString(endDate)))[ FD ]
Line_11 $$ if (numSplits < 1) -->Line_12 $$ numSplits = 1[ CD ]
Line_30 $$ long end = splitPoints.get(i)-->Line_31 $$ Date endDate = longToDate(end, sqlDataType)[ FD ]
Line_14 $$ if (minVal == Long.MIN_VALUE && maxVal == Long.MIN_VALUE) -->Line_16 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(colName + " IS NULL", colName + " IS NULL"))[ CD ]
Line_5 $$ int sqlDataType = results.getMetaData().getColumnType(1)-->Line_6 $$ minVal = resultSetColToLong(results, 1, sqlDataType)[ FD ]
Line_5 $$ int sqlDataType = results.getMetaData().getColumnType(1)-->Line_31 $$ Date endDate = longToDate(end, sqlDataType)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_23 $$ if (sqlDataType == Types.TIMESTAMP) [ CD ]
Line_46 $$ if (minVal == Long.MIN_VALUE || maxVal == Long.MIN_VALUE) -->Line_47 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(colName + " IS NULL", colName + " IS NULL"))[ CD ]
Line_4 $$ long maxVal-->Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_31 $$ Date endDate = longToDate(end, sqlDataType)[ CD ]
Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)-->Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) [ FD ]
Line_4 $$ long maxVal-->Line_7 $$ maxVal = resultSetColToLong(results, 2, sqlDataType)[ FD ]
Line_5 $$ int sqlDataType = results.getMetaData().getColumnType(1)-->Line_22 $$ Date startDate = longToDate(start, sqlDataType)[ FD ]
Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_32 $$ if (i == splitPoints.size() - 1) [ FD ]
Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_44 $$ startDate = endDate[ CD ]
Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)-->Line_30 $$ long end = splitPoints.get(i)[ FD ]
Line_21 $$ long start = splitPoints.get(0)-->Line_22 $$ Date startDate = longToDate(start, sqlDataType)[ FD ]
Line_10 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)-->Line_12 $$ numSplits = 1[ FD ]
Line_3 $$ long minVal-->Line_6 $$ minVal = resultSetColToLong(results, 1, sqlDataType)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_7 $$ maxVal = resultSetColToLong(results, 2, sqlDataType)[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_5 $$ int sqlDataType = results.getMetaData().getColumnType(1)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_3 $$ long minVal[ CD ]
Line_15 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_16 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(colName + " IS NULL", colName + " IS NULL"))[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) [ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_22 $$ Date startDate = longToDate(start, sqlDataType)[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_6 $$ minVal = resultSetColToLong(results, 1, sqlDataType)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_49 $$ return splits[ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_35 $$ ((java.sql.Timestamp) endDate).setNanos(results.getTimestamp(2).getNanos())[ FD ]
Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_30 $$ long end = splitPoints.get(i)[ CD ]
Line_32 $$ if (i == splitPoints.size() - 1) -->Line_39 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), colName + " <= " + dateToString(endDate)))[ CD ]
Line_12 $$ numSplits = 1-->Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_10 $$ int numSplits = conf.getInt(MRJobConfig.NUM_MAPS, 1)[ CD ]
Line_31 $$ Date endDate = longToDate(end, sqlDataType)-->Line_41 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), highClausePrefix + dateToString(endDate)))[ FD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_21 $$ long start = splitPoints.get(0)[ CD ]
Line_29 $$ for (int i = 1; i < splitPoints.size(); i++) -->Line_32 $$ if (i == splitPoints.size() - 1) [ CD ]
Line_2 $$ public List<InputSplit> split(Configuration conf, ResultSet results, String colName) throws SQLException -->Line_5 $$ int sqlDataType = results.getMetaData().getColumnType(1)[ CD ]
Line_19 $$ List<Long> splitPoints = split(numSplits, minVal, maxVal)-->Line_32 $$ if (i == splitPoints.size() - 1) [ FD ]
Line_32 $$ if (i == splitPoints.size() - 1) -->Line_41 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(lowClausePrefix + dateToString(startDate), highClausePrefix + dateToString(endDate)))[ CD ]
Line_15 $$ List<InputSplit> splits = new ArrayList<InputSplit>()-->Line_47 $$ splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(colName + " IS NULL", colName + " IS NULL"))[ FD ]
