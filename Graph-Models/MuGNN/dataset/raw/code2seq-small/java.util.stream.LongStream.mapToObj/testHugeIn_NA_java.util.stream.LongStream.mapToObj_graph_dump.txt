Line_2 $$ public void testHugeIn() throws Exception -->Line_7 $$ assertExecute("bound_double in (12.34, " + doubleValues + ")", BOOLEAN, true)[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_3 $$ String longValues = range(2000, 7000).asLongStream().mapToObj(Long::<>toString).collect(joining(", "))[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_5 $$ assertExecute("bound_long in (" + longValues + ")", BOOLEAN, false)[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_10 $$ assertExecute("bound_string in ('hello', " + stringValues + ")", BOOLEAN, true)[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_13 $$ assertExecute("bound_timestamp_with_timezone in (" + timestampValues + ")", BOOLEAN, true)[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_11 $$ assertExecute("bound_string in (" + stringValues + ")", BOOLEAN, false)[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_14 $$ assertExecute("bound_timestamp_with_timezone in (TIMESTAMP '1970-01-01 01:01:00.0+02:00')", BOOLEAN, false)[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_4 $$ assertExecute("bound_long in (1234, " + longValues + ")", BOOLEAN, true)[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_9 $$ String stringValues = range(2000, 7000).asLongStream().mapToObj( i -> format("'%s'", i)).collect(joining(", "))[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_12 $$ String timestampValues = range(0, 2_000).asLongStream().mapToObj( i -> format("TIMESTAMP '1970-01-01 01:01:0%s.%s+01:00'", i / 1000, i % 1000)).collect(joining(", "))[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_15 $$ Futures.allAsList(futures).get()[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_8 $$ assertExecute("bound_double in (" + doubleValues + ")", BOOLEAN, false)[ CD ]
Line_2 $$ public void testHugeIn() throws Exception -->Line_6 $$ String doubleValues = range(2000, 7000).asDoubleStream().mapToObj(Double::<>toString).collect(joining(", "))[ CD ]
