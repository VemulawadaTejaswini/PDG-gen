Line_3 $$ List<Dish> menu = Arrays.asList(new Dish("pork", false, 800, Dish.Type.MEAT), new Dish("beef", false, 700, Dish.Type.MEAT), new Dish("chicken", false, 400, Dish.Type.MEAT), new Dish("french fries", true, 530, Dish.Type.OTHER), new Dish("rice", true, 350, Dish.Type.OTHER), new Dish("season fruit", true, 120, Dish.Type.OTHER), new Dish("pizza", true, 550, Dish.Type.OTHER), new Dish("prawns", false, 400, Dish.Type.FISH), new Dish("salmon", false, 450, Dish.Type.FISH))-->Line_4 $$ System.out.println(menu.stream().collect(reducing(0, Dish::<>getCalories, (Integer i, Integer j) -> i + j)))[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ List<Dish> menu = Arrays.asList(new Dish("pork", false, 800, Dish.Type.MEAT), new Dish("beef", false, 700, Dish.Type.MEAT), new Dish("chicken", false, 400, Dish.Type.MEAT), new Dish("french fries", true, 530, Dish.Type.OTHER), new Dish("rice", true, 350, Dish.Type.OTHER), new Dish("season fruit", true, 120, Dish.Type.OTHER), new Dish("pizza", true, 550, Dish.Type.OTHER), new Dish("prawns", false, 400, Dish.Type.FISH), new Dish("salmon", false, 450, Dish.Type.FISH))[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ System.out.println(menu.stream().collect(reducing(0, Dish::<>getCalories, (Integer i, Integer j) -> i + j)))[ CD ]
Line_6 $$ if (dish.getCalories() <= 400)-->Line_8 $$ if (dish.getCalories() <= 700)[ CD ]
Line_6 $$ if (dish.getCalories() <= 400)-->Line_7 $$ return CaloricLevel.DIET[ CD ]
Line_8 $$ if (dish.getCalories() <= 700)-->Line_11 $$ return CaloricLevel.FAT[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ System.out.println(menu.stream().collect(groupingBy(Dish::<>getType, collectingAndThen(reducing(( d1,  d2) -> d1.getCalories() > d2.getCalories() ? d1 : d2), Optional::<>get))))[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ System.out.println(menu.stream().collect(groupingBy(Dish::<>getType, mapping( dish -> [ CD ]
Line_3 $$ List<Dish> menu = Arrays.asList(new Dish("pork", false, 800, Dish.Type.MEAT), new Dish("beef", false, 700, Dish.Type.MEAT), new Dish("chicken", false, 400, Dish.Type.MEAT), new Dish("french fries", true, 530, Dish.Type.OTHER), new Dish("rice", true, 350, Dish.Type.OTHER), new Dish("season fruit", true, 120, Dish.Type.OTHER), new Dish("pizza", true, 550, Dish.Type.OTHER), new Dish("prawns", false, 400, Dish.Type.FISH), new Dish("salmon", false, 450, Dish.Type.FISH))-->Line_13 $$ System.out.println(menu.stream().collect(groupingBy(Dish::<>getType, collectingAndThen(reducing(( d1,  d2) -> d1.getCalories() > d2.getCalories() ? d1 : d2), Optional::<>get))))[ FD ]
Line_3 $$ List<Dish> menu = Arrays.asList(new Dish("pork", false, 800, Dish.Type.MEAT), new Dish("beef", false, 700, Dish.Type.MEAT), new Dish("chicken", false, 400, Dish.Type.MEAT), new Dish("french fries", true, 530, Dish.Type.OTHER), new Dish("rice", true, 350, Dish.Type.OTHER), new Dish("season fruit", true, 120, Dish.Type.OTHER), new Dish("pizza", true, 550, Dish.Type.OTHER), new Dish("prawns", false, 400, Dish.Type.FISH), new Dish("salmon", false, 450, Dish.Type.FISH))-->Line_5 $$ System.out.println(menu.stream().collect(groupingBy(Dish::<>getType, mapping( dish -> [ FD ]
Line_8 $$ if (dish.getCalories() <= 700)-->Line_9 $$ return CaloricLevel.NORMAL[ CD ]
