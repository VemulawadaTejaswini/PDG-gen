Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_13 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 10, 10, 1)[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_6 $$ doNothing().when(mm).waitForResource()[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_3 $$ final int FETCHER = 2[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_10 $$ when(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_NAME)).thenReturn(ShuffleHeader.DEFAULT_HTTP_HEADER_NAME)[ CD ]
Line_16 $$ final StuckInputStream in = new StuckInputStream(new ByteArrayInputStream(bout.toByteArray()))-->Line_17 $$ when(connection.getInputStream()).thenReturn(in)[ FD ]
Line_16 $$ final StuckInputStream in = new StuckInputStream(new ByteArrayInputStream(bout.toByteArray()))-->Line_26 $$ in.waitForFetcher()[ FD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_16 $$ final StuckInputStream in = new StuckInputStream(new ByteArrayInputStream(bout.toByteArray()))[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_18 $$ doAnswer(new Answer<Void>() [ CD ]
Line_4 $$ InMemoryMapOutput<Text, Text> immo = spy(new InMemoryMapOutput<Text, Text>(job, id, mm, 100, null, true))-->Line_5 $$ when(mm.reserve(any(TaskAttemptID.class), anyLong(), anyInt())).thenReturn(immo)[ FD ]
Line_18 $$ doAnswer(new Answer<Void>() -->Line_21 $$ return null[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_30 $$ verify(immo).abort()[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_5 $$ when(mm.reserve(any(TaskAttemptID.class), anyLong(), anyInt())).thenReturn(immo)[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_7 $$ when(ss.getHost()).thenReturn(host)[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_26 $$ in.waitForFetcher()[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_9 $$ when(connection.getResponseCode()).thenReturn(200)[ CD ]
Line_16 $$ final StuckInputStream in = new StuckInputStream(new ByteArrayInputStream(bout.toByteArray()))-->Line_20 $$ in.close()[ FD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_28 $$ underTest.join()[ CD ]
Line_14 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_16 $$ final StuckInputStream in = new StuckInputStream(new ByteArrayInputStream(bout.toByteArray()))[ FD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_14 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_25 $$ underTest.start()[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_11 $$ when(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_VERSION)).thenReturn(ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION)[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_15 $$ header.write(new DataOutputStream(bout))[ CD ]
Line_16 $$ final StuckInputStream in = new StuckInputStream(new ByteArrayInputStream(bout.toByteArray()))-->Line_29 $$ assertTrue(in.wasClosedProperly())[ FD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_29 $$ assertTrue(in.wasClosedProperly())[ CD ]
Line_18 $$ doAnswer(new Answer<Void>() -->Line_20 $$ in.close()[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_27 $$ underTest.shutDown()[ CD ]
Line_13 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 10, 10, 1)-->Line_15 $$ header.write(new DataOutputStream(bout))[ FD ]
Line_8 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)-->Line_12 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ FD ]
Line_4 $$ InMemoryMapOutput<Text, Text> immo = spy(new InMemoryMapOutput<Text, Text>(job, id, mm, 100, null, true))-->Line_30 $$ verify(immo).abort()[ FD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_8 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_12 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_4 $$ InMemoryMapOutput<Text, Text> immo = spy(new InMemoryMapOutput<Text, Text>(job, id, mm, 100, null, true))[ CD ]
Line_2 $$ public void testInterruptInMemory() throws Exception -->Line_17 $$ when(connection.getInputStream()).thenReturn(in)[ CD ]
