Line_13 $$ byte[] b = new byte[1 << 15]-->Line_14 $$ Arrays.fill(b, (byte) 43)[ FD ]
Line_16 $$ cos = codec.createOutputStream(bos, c)-->Line_19 $$ if (cos != null) [ FD ]
Line_16 $$ cos = codec.createOutputStream(bos, c)-->Line_17 $$ cos.write(b)[ FD ]
Line_3 $$ CompressionCodec codec = null-->Line_6 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)[ FD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_3 $$ CompressionCodec codec = null[ CD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_13 $$ byte[] b = new byte[1 << 15][ CD ]
Line_3 $$ CompressionCodec codec = null-->Line_10 $$ Compressor c = codec.createCompressor()[ FD ]
Line_11 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_23 $$ byte[] outbytes = bos.toByteArray()[ FD ]
Line_19 $$ if (cos != null) -->Line_20 $$ cos.close()[ CD ]
Line_6 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)-->Line_10 $$ Compressor c = codec.createCompressor()[ FD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_6 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)[ FD ]
Line_12 $$ CompressionOutputStream cos = null-->Line_16 $$ cos = codec.createOutputStream(bos, c)[ FD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_11 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()[ CD ]
Line_12 $$ CompressionOutputStream cos = null-->Line_20 $$ cos.close()[ FD ]
Line_6 $$ codec = (CompressionCodec) ReflectionUtils.newInstance(conf.getClassByName(codecClass), conf)-->Line_16 $$ cos = codec.createOutputStream(bos, c)[ FD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_24 $$ assertTrue("Compressed bytes contrary to configuration(NO_COMPRESSION)", outbytes.length >= b.length)[ CD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_4 $$ ZlibFactory.setCompressionLevel(conf, CompressionLevel.NO_COMPRESSION)[ CD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_14 $$ Arrays.fill(b, (byte) 43)[ CD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_12 $$ CompressionOutputStream cos = null[ CD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_23 $$ byte[] outbytes = bos.toByteArray()[ CD ]
Line_13 $$ byte[] b = new byte[1 << 15]-->Line_17 $$ cos.write(b)[ FD ]
Line_3 $$ CompressionCodec codec = null-->Line_16 $$ cos = codec.createOutputStream(bos, c)[ FD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_4 $$ ZlibFactory.setCompressionLevel(conf, CompressionLevel.NO_COMPRESSION)[ FD ]
Line_2 $$ private static void codecTestWithNOCompression(Configuration conf, String codecClass) throws IOException -->Line_10 $$ Compressor c = codec.createCompressor()[ CD ]
Line_10 $$ Compressor c = codec.createCompressor()-->Line_16 $$ cos = codec.createOutputStream(bos, c)[ FD ]
Line_11 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_16 $$ cos = codec.createOutputStream(bos, c)[ FD ]
Line_12 $$ CompressionOutputStream cos = null-->Line_17 $$ cos.write(b)[ FD ]
Line_16 $$ cos = codec.createOutputStream(bos, c)-->Line_20 $$ cos.close()[ FD ]
Line_12 $$ CompressionOutputStream cos = null-->Line_19 $$ if (cos != null) [ FD ]
