Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)-->Line_15 $$ assertThat(out.getFlushCount(), equalTo(times))[ FD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_13 $$ assertThat(out.getBufferSize(), equalTo(randomBufferSize))[ CD ]
Line_3 $$ Integer randomBufferSize = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE)-->Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)[ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)-->Line_13 $$ assertThat(out.getBufferSize(), equalTo(randomBufferSize))[ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)-->Line_17 $$ assertTrue(out.isMultipart())[ FD ]
Line_3 $$ Integer randomBufferSize = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE)-->Line_14 $$ int times = (int) Math.ceil(randomLength.doubleValue() / randomBufferSize.doubleValue())[ FD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_5 $$ Integer randomLength = randomIntBetween(1, 2 * BUFFER_SIZE)[ CD ]
Line_14 $$ int times = (int) Math.ceil(randomLength.doubleValue() / randomBufferSize.doubleValue())-->Line_15 $$ assertThat(out.getFlushCount(), equalTo(times))[ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)-->Line_19 $$ assertFalse(out.isMultipart())[ FD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_16 $$ if (times > 1) [ CD ]
Line_6 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(randomLength)-->Line_8 $$ content.write(randomByte())[ FD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_12 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ CD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_7 $$ for (int i = 0; i < randomLength; i++) [ CD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_10 $$ copy(content.toByteArray(), out)[ CD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_11 $$ assertThat(out.getLength(), equalTo((long) randomLength))[ CD ]
Line_3 $$ Integer randomBufferSize = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE)-->Line_13 $$ assertThat(out.getBufferSize(), equalTo(randomBufferSize))[ FD ]
Line_16 $$ if (times > 1) -->Line_17 $$ assertTrue(out.isMultipart())[ CD ]
Line_5 $$ Integer randomLength = randomIntBetween(1, 2 * BUFFER_SIZE)-->Line_7 $$ for (int i = 0; i < randomLength; i++) [ FD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)[ CD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_15 $$ assertThat(out.getFlushCount(), equalTo(times))[ CD ]
Line_16 $$ if (times > 1) -->Line_19 $$ assertFalse(out.isMultipart())[ CD ]
Line_5 $$ Integer randomLength = randomIntBetween(1, 2 * BUFFER_SIZE)-->Line_14 $$ int times = (int) Math.ceil(randomLength.doubleValue() / randomBufferSize.doubleValue())[ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)-->Line_10 $$ copy(content.toByteArray(), out)[ FD ]
Line_7 $$ for (int i = 0; i < randomLength; i++) -->Line_8 $$ content.write(randomByte())[ CD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_14 $$ int times = (int) Math.ceil(randomLength.doubleValue() / randomBufferSize.doubleValue())[ CD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)-->Line_12 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ FD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_6 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(randomLength)[ CD ]
Line_6 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(randomLength)-->Line_12 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ FD ]
Line_2 $$ public void testWriteRandomNumberOfBytes() throws IOException -->Line_3 $$ Integer randomBufferSize = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE)[ CD ]
Line_14 $$ int times = (int) Math.ceil(randomLength.doubleValue() / randomBufferSize.doubleValue())-->Line_16 $$ if (times > 1) [ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(randomBufferSize)-->Line_11 $$ assertThat(out.getLength(), equalTo((long) randomLength))[ FD ]
Line_6 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(randomLength)-->Line_10 $$ copy(content.toByteArray(), out)[ FD ]
