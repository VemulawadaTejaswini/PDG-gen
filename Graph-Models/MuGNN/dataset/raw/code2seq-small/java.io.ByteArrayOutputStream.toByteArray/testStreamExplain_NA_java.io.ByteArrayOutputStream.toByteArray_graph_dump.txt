Line_3 $$ Explanation exp = Explanation.match(2f, "some explanation")-->Line_17 $$ Lucene.writeExplanation(out, exp)[ FD ]
Line_11 $$ Explanation result = Lucene.readExplanation(esBuffer)-->Line_22 $$ assertThat(exp.toString(), equalTo(result.toString()))[ FD ]
Line_3 $$ Explanation exp = Explanation.match(2f, "some explanation")-->Line_7 $$ Lucene.writeExplanation(out, exp)[ FD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_11 $$ Explanation result = Lucene.readExplanation(esBuffer)[ CD ]
Line_11 $$ Explanation result = Lucene.readExplanation(esBuffer)-->Line_12 $$ assertThat(exp.toString(), equalTo(result.toString()))[ FD ]
Line_6 $$ OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer)-->Line_17 $$ Lucene.writeExplanation(out, exp)[ FD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_20 $$ esBuffer = new InputStreamStreamInput(esInBuffer)[ CD ]
Line_3 $$ Explanation exp = Explanation.match(2f, "some explanation")-->Line_22 $$ assertThat(exp.toString(), equalTo(result.toString()))[ FD ]
Line_3 $$ Explanation exp = Explanation.match(2f, "some explanation")-->Line_13 $$ exp = Explanation.match(2.0f, "some explanation", Explanation.match(2.0f, "another explanation"))[ FD ]
Line_13 $$ exp = Explanation.match(2.0f, "some explanation", Explanation.match(2.0f, "another explanation"))-->Line_17 $$ Lucene.writeExplanation(out, exp)[ FD ]
Line_13 $$ exp = Explanation.match(2.0f, "some explanation", Explanation.match(2.0f, "another explanation"))-->Line_22 $$ assertThat(exp.toString(), equalTo(result.toString()))[ FD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_13 $$ exp = Explanation.match(2.0f, "some explanation", Explanation.match(2.0f, "another explanation"))[ CD ]
Line_6 $$ OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer)-->Line_16 $$ out = new OutputStreamStreamOutput(outBuffer)[ FD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_17 $$ Lucene.writeExplanation(out, exp)[ CD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_16 $$ out = new OutputStreamStreamOutput(outBuffer)[ CD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_7 $$ Lucene.writeExplanation(out, exp)[ CD ]
Line_21 $$ result = Lucene.readExplanation(esBuffer)-->Line_22 $$ assertThat(exp.toString(), equalTo(result.toString()))[ FD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_3 $$ Explanation exp = Explanation.match(2f, "some explanation")[ CD ]
Line_10 $$ InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer)-->Line_21 $$ result = Lucene.readExplanation(esBuffer)[ FD ]
Line_11 $$ Explanation result = Lucene.readExplanation(esBuffer)-->Line_21 $$ result = Lucene.readExplanation(esBuffer)[ FD ]
Line_6 $$ OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer)-->Line_7 $$ Lucene.writeExplanation(out, exp)[ FD ]
Line_10 $$ InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer)-->Line_11 $$ Explanation result = Lucene.readExplanation(esBuffer)[ FD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_12 $$ assertThat(exp.toString(), equalTo(result.toString()))[ CD ]
Line_10 $$ InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer)-->Line_20 $$ esBuffer = new InputStreamStreamInput(esInBuffer)[ FD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_10 $$ InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer)[ CD ]
Line_3 $$ Explanation exp = Explanation.match(2f, "some explanation")-->Line_12 $$ assertThat(exp.toString(), equalTo(result.toString()))[ FD ]
Line_20 $$ esBuffer = new InputStreamStreamInput(esInBuffer)-->Line_21 $$ result = Lucene.readExplanation(esBuffer)[ FD ]
Line_16 $$ out = new OutputStreamStreamOutput(outBuffer)-->Line_17 $$ Lucene.writeExplanation(out, exp)[ FD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_22 $$ assertThat(exp.toString(), equalTo(result.toString()))[ CD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_6 $$ OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer)[ CD ]
Line_2 $$ public void testStreamExplain() throws Exception -->Line_21 $$ result = Lucene.readExplanation(esBuffer)[ CD ]
