Line_8 $$ DataOutput out = new DataOutputStream(byteOut)-->Line_9 $$ info.write(out)[ FD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_6 $$ info.setTrackerName("trackerName")[ CD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_6 $$ info.setTrackerName("trackerName")[ FD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_9 $$ info.write(out)[ FD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_12 $$ assertEquals(info, info)[ FD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_5 $$ info.setReasonForBlackListing("reasonForBlackListing")[ FD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_7 $$ ByteArrayOutputStream byteOut = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_9 $$ info.write(out)[ CD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_4 $$ info.setBlackListReport("blackListInfo")[ CD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_15 $$ assertEquals(info.getReasonForBlackListing(), "reasonForBlackListing")[ CD ]
Line_10 $$ BlackListInfo info2 = new BlackListInfo()-->Line_11 $$ info2.readFields(new DataInputStream(new ByteArrayInputStream(byteOut.toByteArray())))[ FD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_13 $$ assertEquals(info.toString(), info.toString())[ CD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_8 $$ DataOutput out = new DataOutputStream(byteOut)[ CD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_3 $$ BlackListInfo info = new BlackListInfo()[ CD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_12 $$ assertEquals(info, info)[ CD ]
Line_7 $$ ByteArrayOutputStream byteOut = new ByteArrayOutputStream()-->Line_11 $$ info2.readFields(new DataInputStream(new ByteArrayInputStream(byteOut.toByteArray())))[ FD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_14 $$ assertEquals(info.getTrackerName(), "trackerName")[ FD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_16 $$ assertEquals(info.getBlackListReport(), "blackListInfo")[ CD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_11 $$ info2.readFields(new DataInputStream(new ByteArrayInputStream(byteOut.toByteArray())))[ CD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_5 $$ info.setReasonForBlackListing("reasonForBlackListing")[ CD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_15 $$ assertEquals(info.getReasonForBlackListing(), "reasonForBlackListing")[ FD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_13 $$ assertEquals(info.toString(), info.toString())[ FD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_14 $$ assertEquals(info.getTrackerName(), "trackerName")[ CD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_4 $$ info.setBlackListReport("blackListInfo")[ FD ]
Line_3 $$ BlackListInfo info = new BlackListInfo()-->Line_16 $$ assertEquals(info.getBlackListReport(), "blackListInfo")[ FD ]
Line_2 $$ public void testBlackListInfo() throws IOException -->Line_10 $$ BlackListInfo info2 = new BlackListInfo()[ CD ]
