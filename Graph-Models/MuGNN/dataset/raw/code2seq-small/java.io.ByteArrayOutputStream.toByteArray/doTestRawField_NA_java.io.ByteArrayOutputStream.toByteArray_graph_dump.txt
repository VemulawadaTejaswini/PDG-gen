Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_23 $$ assertEquals(Token.FIELD_NAME, parser.nextToken())[ CD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_27 $$ assertEquals("foo", parser.currentName())[ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_8 $$ generator.writeEndObject()[ FD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_12 $$ try (XContentGenerator generator = xcontentType().xContent().createGenerator(os)) [ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_6 $$ generator.writeFieldName("foo")[ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_15 $$ generator.writeRawField("bar", new ByteArrayInputStream(rawData))[ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_13 $$ generator.writeStartObject()[ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_10 $$ final byte[] rawData = os.toByteArray()[ CD ]
Line_11 $$ os = new ByteArrayOutputStream()-->Line_12 $$ try (XContentGenerator generator = xcontentType().xContent().createGenerator(os)) [ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_30 $$ assertEquals(Token.END_OBJECT, parser.nextToken())[ CD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_28 $$ assertEquals(Token.VALUE_NULL, parser.nextToken())[ FD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_22 $$ assertEquals(Token.START_OBJECT, parser.nextToken())[ FD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_23 $$ assertEquals(Token.FIELD_NAME, parser.nextToken())[ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_19 $$ generator.writeEndObject()[ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_24 $$ assertEquals("bar", parser.currentName())[ CD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())[ CD ]
Line_14 $$ if (useStream) -->Line_17 $$ generator.writeRawField("bar", new BytesArray(rawData))[ CD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_29 $$ assertEquals(Token.END_OBJECT, parser.nextToken())[ CD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_10 $$ final byte[] rawData = os.toByteArray()[ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_27 $$ assertEquals("foo", parser.currentName())[ CD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_11 $$ os = new ByteArrayOutputStream()[ FD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_24 $$ assertEquals("bar", parser.currentName())[ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_17 $$ generator.writeRawField("bar", new BytesArray(rawData))[ FD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_30 $$ assertEquals(Token.END_OBJECT, parser.nextToken())[ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_5 $$ generator.writeStartObject()[ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_31 $$ assertNull(parser.nextToken())[ CD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_7 $$ generator.writeNull()[ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()[ CD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_29 $$ assertEquals(Token.END_OBJECT, parser.nextToken())[ FD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())[ FD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) [ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) [ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_26 $$ assertEquals(Token.FIELD_NAME, parser.nextToken())[ CD ]
Line_11 $$ os = new ByteArrayOutputStream()-->Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())[ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_25 $$ assertEquals(Token.START_OBJECT, parser.nextToken())[ CD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_25 $$ assertEquals(Token.START_OBJECT, parser.nextToken())[ FD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_11 $$ os = new ByteArrayOutputStream()[ CD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_22 $$ assertEquals(Token.START_OBJECT, parser.nextToken())[ CD ]
Line_2 $$ void doTestRawField(XContent source, boolean useStream) throws Exception -->Line_28 $$ assertEquals(Token.VALUE_NULL, parser.nextToken())[ CD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_26 $$ assertEquals(Token.FIELD_NAME, parser.nextToken())[ FD ]
Line_14 $$ if (useStream) -->Line_15 $$ generator.writeRawField("bar", new ByteArrayInputStream(rawData))[ CD ]
Line_21 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_31 $$ assertNull(parser.nextToken())[ FD ]
