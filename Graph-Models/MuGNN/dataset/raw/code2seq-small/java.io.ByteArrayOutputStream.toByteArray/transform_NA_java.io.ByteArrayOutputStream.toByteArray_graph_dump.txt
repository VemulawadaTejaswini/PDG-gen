Line_3 $$ ExecAction exec = execActionFactory.newExecAction()-->Line_9 $$ exec.setErrorOutput(new ByteArrayOutputStream())[ FD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_11 $$ ExecResult result = exec.execute()[ CD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_7 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_4 $$ exec.executable(gccBinary.getAbsolutePath())[ FD ]
Line_3 $$ ExecAction exec = execActionFactory.newExecAction()-->Line_5 $$ exec.setWorkingDir(gccBinary.getParentFile())[ FD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_6 $$ exec.args(args)[ CD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_10 $$ exec.setIgnoreExitValue(true)[ CD ]
Line_11 $$ ExecResult result = exec.execute()-->Line_12 $$ int exitValue = result.getExitValue()[ FD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_5 $$ exec.setWorkingDir(gccBinary.getParentFile())[ FD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_13 $$ if (exitValue == 0) [ CD ]
Line_3 $$ ExecAction exec = execActionFactory.newExecAction()-->Line_10 $$ exec.setIgnoreExitValue(true)[ FD ]
Line_3 $$ ExecAction exec = execActionFactory.newExecAction()-->Line_4 $$ exec.executable(gccBinary.getAbsolutePath())[ FD ]
Line_13 $$ if (exitValue == 0) -->Line_14 $$ return new String(baos.toByteArray())[ CD ]
Line_7 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_14 $$ return new String(baos.toByteArray())[ FD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_12 $$ int exitValue = result.getExitValue()[ CD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_5 $$ exec.setWorkingDir(gccBinary.getParentFile())[ CD ]
Line_13 $$ if (exitValue == 0) -->Line_16 $$ return null[ CD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_6 $$ exec.args(args)[ FD ]
Line_3 $$ ExecAction exec = execActionFactory.newExecAction()-->Line_6 $$ exec.args(args)[ FD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_8 $$ exec.setStandardOutput(baos)[ CD ]
Line_3 $$ ExecAction exec = execActionFactory.newExecAction()-->Line_8 $$ exec.setStandardOutput(baos)[ FD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_9 $$ exec.setErrorOutput(new ByteArrayOutputStream())[ CD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_3 $$ ExecAction exec = execActionFactory.newExecAction()[ CD ]
Line_2 $$ private String transform(File gccBinary, List<String> args) -->Line_4 $$ exec.executable(gccBinary.getAbsolutePath())[ CD ]
Line_3 $$ ExecAction exec = execActionFactory.newExecAction()-->Line_11 $$ ExecResult result = exec.execute()[ FD ]
Line_7 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_8 $$ exec.setStandardOutput(baos)[ FD ]
Line_12 $$ int exitValue = result.getExitValue()-->Line_13 $$ if (exitValue == 0) [ FD ]
