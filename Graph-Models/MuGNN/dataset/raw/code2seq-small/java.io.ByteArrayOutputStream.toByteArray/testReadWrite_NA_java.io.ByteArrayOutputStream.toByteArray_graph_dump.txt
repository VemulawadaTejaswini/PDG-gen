Line_16 $$ bis = new ByteArrayInputStream(result)-->Line_19 $$ IOUtils.closeStream(bis)[ FD ]
Line_14 $$ ByteArrayInputStream bis = null-->Line_16 $$ bis = new ByteArrayInputStream(result)[ FD ]
Line_3 $$ MultiFileSplit split = new MultiFileSplit(new JobConf(), new Path[] -->Line_22 $$ assertEquals(split.getLength(), readSplit.getLength())[ FD ]
Line_5 $$ byte[] result = null-->Line_9 $$ result = bos.toByteArray()[ FD ]
Line_7 $$ bos = new ByteArrayOutputStream()-->Line_11 $$ IOUtils.closeStream(bos)[ FD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_25 $$ System.out.println(split.toString())[ CD ]
Line_3 $$ MultiFileSplit split = new MultiFileSplit(new JobConf(), new Path[] -->Line_8 $$ split.write(new DataOutputStream(bos))[ FD ]
Line_3 $$ MultiFileSplit split = new MultiFileSplit(new JobConf(), new Path[] -->Line_23 $$ assertTrue(Arrays.equals(split.getPaths(), readSplit.getPaths()))[ FD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_22 $$ assertEquals(split.getLength(), readSplit.getLength())[ CD ]
Line_7 $$ bos = new ByteArrayOutputStream()-->Line_9 $$ result = bos.toByteArray()[ FD ]
Line_13 $$ MultiFileSplit readSplit = new MultiFileSplit()-->Line_17 $$ readSplit.readFields(new DataInputStream(bis))[ FD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_5 $$ byte[] result = null[ CD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_21 $$ assertTrue(split.getLength() != 0)[ CD ]
Line_4 $$ ByteArrayOutputStream bos = null-->Line_7 $$ bos = new ByteArrayOutputStream()[ FD ]
Line_3 $$ MultiFileSplit split = new MultiFileSplit(new JobConf(), new Path[] -->Line_25 $$ System.out.println(split.toString())[ FD ]
Line_4 $$ ByteArrayOutputStream bos = null-->Line_11 $$ IOUtils.closeStream(bos)[ FD ]
Line_4 $$ ByteArrayOutputStream bos = null-->Line_9 $$ result = bos.toByteArray()[ FD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_23 $$ assertTrue(Arrays.equals(split.getPaths(), readSplit.getPaths()))[ CD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_14 $$ ByteArrayInputStream bis = null[ CD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_3 $$ MultiFileSplit split = new MultiFileSplit(new JobConf(), new Path[] [ CD ]
Line_3 $$ MultiFileSplit split = new MultiFileSplit(new JobConf(), new Path[] -->Line_21 $$ assertTrue(split.getLength() != 0)[ FD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_4 $$ ByteArrayOutputStream bos = null[ CD ]
Line_13 $$ MultiFileSplit readSplit = new MultiFileSplit()-->Line_22 $$ assertEquals(split.getLength(), readSplit.getLength())[ FD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_13 $$ MultiFileSplit readSplit = new MultiFileSplit()[ CD ]
Line_3 $$ MultiFileSplit split = new MultiFileSplit(new JobConf(), new Path[] -->Line_24 $$ assertTrue(Arrays.equals(split.getLengths(), readSplit.getLengths()))[ FD ]
Line_2 $$ public void testReadWrite() throws Exception -->Line_24 $$ assertTrue(Arrays.equals(split.getLengths(), readSplit.getLengths()))[ CD ]
Line_14 $$ ByteArrayInputStream bis = null-->Line_19 $$ IOUtils.closeStream(bis)[ FD ]
Line_13 $$ MultiFileSplit readSplit = new MultiFileSplit()-->Line_24 $$ assertTrue(Arrays.equals(split.getLengths(), readSplit.getLengths()))[ FD ]
Line_13 $$ MultiFileSplit readSplit = new MultiFileSplit()-->Line_23 $$ assertTrue(Arrays.equals(split.getPaths(), readSplit.getPaths()))[ FD ]
