Line_18 $$ if (cos != null) -->Line_19 $$ cos.close()[ CD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_3 $$ ZlibFactory.setCompressionLevel(conf, CompressionLevel.BEST_COMPRESSION)[ CD ]
Line_11 $$ CompressionOutputStream cos = null-->Line_19 $$ cos.close()[ FD ]
Line_11 $$ CompressionOutputStream cos = null-->Line_15 $$ cos = codec.createOutputStream(bos, c2)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_24 $$ assertTrue("Compressed bytes contrary to configuration", outbytes.length >= b.length)[ CD ]
Line_11 $$ CompressionOutputStream cos = null-->Line_16 $$ cos.write(b)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_7 $$ ZlibFactory.setCompressionLevel(conf, CompressionLevel.NO_COMPRESSION)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_8 $$ Compressor c2 = CodecPool.getCompressor(codec, conf)[ CD ]
Line_10 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_15 $$ cos = codec.createOutputStream(bos, c2)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_13 $$ Arrays.fill(b, (byte) 43)[ CD ]
Line_10 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_23 $$ byte[] outbytes = bos.toByteArray()[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_3 $$ ZlibFactory.setCompressionLevel(conf, CompressionLevel.BEST_COMPRESSION)[ FD ]
Line_15 $$ cos = codec.createOutputStream(bos, c2)-->Line_16 $$ cos.write(b)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_7 $$ ZlibFactory.setCompressionLevel(conf, CompressionLevel.NO_COMPRESSION)[ CD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_15 $$ cos = codec.createOutputStream(bos, c2)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_12 $$ byte[] b = new byte[1 << 15][ CD ]
Line_15 $$ cos = codec.createOutputStream(bos, c2)-->Line_18 $$ if (cos != null) [ FD ]
Line_5 $$ Compressor c1 = CodecPool.getCompressor(codec)-->Line_6 $$ CodecPool.returnCompressor(c1)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_9 $$ assertTrue("Got mismatched ZlibCompressor", c1 == c2)[ CD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_11 $$ CompressionOutputStream cos = null[ CD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_4 $$ ZlibFactory.setCompressionStrategy(conf, CompressionStrategy.DEFAULT_STRATEGY)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_5 $$ Compressor c1 = CodecPool.getCompressor(codec)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_23 $$ byte[] outbytes = bos.toByteArray()[ CD ]
Line_8 $$ Compressor c2 = CodecPool.getCompressor(codec, conf)-->Line_15 $$ cos = codec.createOutputStream(bos, c2)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_4 $$ ZlibFactory.setCompressionStrategy(conf, CompressionStrategy.DEFAULT_STRATEGY)[ CD ]
Line_15 $$ cos = codec.createOutputStream(bos, c2)-->Line_19 $$ cos.close()[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_6 $$ CodecPool.returnCompressor(c1)[ CD ]
Line_8 $$ Compressor c2 = CodecPool.getCompressor(codec, conf)-->Line_21 $$ CodecPool.returnCompressor(c2)[ FD ]
Line_12 $$ byte[] b = new byte[1 << 15]-->Line_13 $$ Arrays.fill(b, (byte) 43)[ FD ]
Line_12 $$ byte[] b = new byte[1 << 15]-->Line_16 $$ cos.write(b)[ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_5 $$ Compressor c1 = CodecPool.getCompressor(codec)[ CD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_8 $$ Compressor c2 = CodecPool.getCompressor(codec, conf)[ FD ]
Line_11 $$ CompressionOutputStream cos = null-->Line_18 $$ if (cos != null) [ FD ]
Line_2 $$ private static void gzipReinitTest(Configuration conf, CompressionCodec codec) throws IOException -->Line_10 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()[ CD ]
