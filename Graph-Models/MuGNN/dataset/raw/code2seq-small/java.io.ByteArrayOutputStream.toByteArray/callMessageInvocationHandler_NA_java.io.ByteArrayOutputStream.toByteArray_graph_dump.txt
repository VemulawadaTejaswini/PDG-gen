Line_6 $$ final InputStream inputStream = new PipedInputStream(pos)-->Line_11 $$ handler.processMessage(channelAssociation, inputStream)[ FD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_6 $$ final InputStream inputStream = new PipedInputStream(pos)[ CD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_10 $$ writeInvocationRequest(dataOutput, remoteInterface, methodName)[ FD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_5 $$ final DataOutputStream dataOutput = new DataOutputStream(pos)[ CD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_10 $$ writeInvocationRequest(dataOutput, remoteInterface, methodName)[ CD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_12 $$ return outputStream.toByteArray()[ CD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_9 $$ final ChannelAssociation channelAssociation = createChannelAssociation(outputStream)[ CD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_11 $$ handler.processMessage(channelAssociation, inputStream)[ CD ]
Line_5 $$ final DataOutputStream dataOutput = new DataOutputStream(pos)-->Line_10 $$ writeInvocationRequest(dataOutput, remoteInterface, methodName)[ FD ]
Line_9 $$ final ChannelAssociation channelAssociation = createChannelAssociation(outputStream)-->Line_11 $$ handler.processMessage(channelAssociation, inputStream)[ FD ]
