Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_3 $$ final PipedOutputStream pos = new PipedOutputStream()[ CD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_4 $$ final DataOutputStream dataOutput = new DataOutputStream(pos)[ CD ]
Line_5 $$ final InputStream inputStream = new PipedInputStream(pos)-->Line_9 $$ handler.processMessage(channelAssociation, inputStream)[ FD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_9 $$ handler.processMessage(channelAssociation, inputStream)[ CD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_6 $$ final ByteArrayOutputStream outputStream = new ByteArrayOutputStream()[ CD ]
Line_6 $$ final ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_7 $$ final ChannelAssociation channelAssociation = createChannelAssociation(outputStream)[ FD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_5 $$ final InputStream inputStream = new PipedInputStream(pos)[ CD ]
Line_6 $$ final ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_10 $$ return outputStream.toByteArray()[ FD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_7 $$ final ChannelAssociation channelAssociation = createChannelAssociation(outputStream)[ CD ]
Line_7 $$ final ChannelAssociation channelAssociation = createChannelAssociation(outputStream)-->Line_9 $$ handler.processMessage(channelAssociation, inputStream)[ FD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_8 $$ writeInvocationRequest(dataOutput, remoteInterface, methodName)[ FD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_10 $$ return outputStream.toByteArray()[ CD ]
Line_4 $$ final DataOutputStream dataOutput = new DataOutputStream(pos)-->Line_8 $$ writeInvocationRequest(dataOutput, remoteInterface, methodName)[ FD ]
Line_2 $$ private byte[] callMessageInvocationHandler(Class remoteInterface, String methodName) throws Exception -->Line_8 $$ writeInvocationRequest(dataOutput, remoteInterface, methodName)[ CD ]
