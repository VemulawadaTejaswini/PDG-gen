Line_12 $$ if (originalRawData.length > maxSize) -->Line_13 $$ do [ CD ]
Line_18 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)-->Line_20 $$ blockLabels.add(compresSize)[ FD ]
Line_7 $$ int compresSize = 0-->Line_20 $$ blockLabels.add(compresSize)[ FD ]
Line_5 $$ int len = originalRawData.length-->Line_14 $$ int bufLen = Math.min(len, maxSize)[ FD ]
Line_27 $$ off = 0-->Line_37 $$ off = off + step[ FD ]
Line_17 $$ while (!compressor.finished()) -->Line_20 $$ blockLabels.add(compresSize)[ CD ]
Line_14 $$ int bufLen = Math.min(len, maxSize)-->Line_24 $$ len -= bufLen[ FD ]
Line_13 $$ do -->Line_23 $$ off += bufLen[ CD ]
Line_13 $$ do -->Line_17 $$ while (!compressor.finished()) [ CD ]
Line_10 $$ ByteArrayOutputStream decompressOut = new ByteArrayOutputStream()-->Line_48 $$ decompressOut.close()[ FD ]
Line_32 $$ while (!decompressor.finished()) -->Line_33 $$ int dSize = decompressor.decompress(operationBlock, 0, operationBlock.length)[ CD ]
Line_32 $$ while (!decompressor.finished()) -->Line_34 $$ decompressOut.write(operationBlock, 0, dSize)[ CD ]
Line_6 $$ int maxSize = BLOCK_SIZE - overheadSpace-->Line_14 $$ int bufLen = Math.min(len, maxSize)[ FD ]
Line_23 $$ off += bufLen-->Line_27 $$ off = 0[ FD ]
Line_13 $$ do -->Line_22 $$ compressor.reset()[ CD ]
Line_7 $$ int compresSize = 0-->Line_19 $$ compressedOut.write(operationBlock, 0, compresSize)[ FD ]
Line_13 $$ do -->Line_15 $$ compressor.setInput(originalRawData, off, bufLen)[ CD ]
Line_4 $$ int off = 0-->Line_37 $$ off = off + step[ FD ]
Line_14 $$ int bufLen = Math.min(len, maxSize)-->Line_15 $$ compressor.setInput(originalRawData, off, bufLen)[ FD ]
Line_17 $$ while (!compressor.finished()) -->Line_19 $$ compressedOut.write(operationBlock, 0, compresSize)[ CD ]
Line_13 $$ do -->Line_14 $$ int bufLen = Math.min(len, maxSize)[ CD ]
Line_23 $$ off += bufLen-->Line_31 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_5 $$ int len = originalRawData.length-->Line_13 $$ do [ FD ]
Line_6 $$ int maxSize = BLOCK_SIZE - overheadSpace-->Line_12 $$ if (originalRawData.length > maxSize) [ FD ]
Line_30 $$ for (Integer step : blockLabels) -->Line_31 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_10 $$ ByteArrayOutputStream decompressOut = new ByteArrayOutputStream()-->Line_34 $$ decompressOut.write(operationBlock, 0, dSize)[ FD ]
Line_5 $$ int len = originalRawData.length-->Line_24 $$ len -= bufLen[ FD ]
Line_4 $$ int off = 0-->Line_15 $$ compressor.setInput(originalRawData, off, bufLen)[ FD ]
Line_13 $$ do -->Line_24 $$ len -= bufLen[ CD ]
Line_33 $$ int dSize = decompressor.decompress(operationBlock, 0, operationBlock.length)-->Line_34 $$ decompressOut.write(operationBlock, 0, dSize)[ FD ]
Line_4 $$ int off = 0-->Line_23 $$ off += bufLen[ FD ]
Line_27 $$ off = 0-->Line_31 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_9 $$ ByteArrayOutputStream compressedOut = new ByteArrayOutputStream()-->Line_44 $$ compressedOut.close()[ FD ]
Line_13 $$ do -->Line_16 $$ compressor.finish()[ CD ]
Line_30 $$ for (Integer step : blockLabels) -->Line_37 $$ off = off + step[ FD ]
Line_24 $$ len -= bufLen-->Line_13 $$ do [ FD ]
Line_23 $$ off += bufLen-->Line_37 $$ off = off + step[ FD ]
Line_18 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)-->Line_19 $$ compressedOut.write(operationBlock, 0, compresSize)[ FD ]
Line_23 $$ off += bufLen-->Line_15 $$ compressor.setInput(originalRawData, off, bufLen)[ FD ]
Line_17 $$ while (!compressor.finished()) -->Line_18 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)[ CD ]
Line_10 $$ ByteArrayOutputStream decompressOut = new ByteArrayOutputStream()-->Line_39 $$ assertArrayEquals(joiner.join(name, "byte arrays not equals error !!!"), originalRawData, decompressOut.toByteArray())[ FD ]
Line_7 $$ int compresSize = 0-->Line_18 $$ compresSize = compressor.compress(operationBlock, 0, operationBlock.length)[ FD ]
Line_4 $$ int off = 0-->Line_31 $$ decompressor.setInput(compressedBytes, off, step)[ FD ]
Line_24 $$ len -= bufLen-->Line_14 $$ int bufLen = Math.min(len, maxSize)[ FD ]
Line_8 $$ List<Integer> blockLabels = new ArrayList<Integer>()-->Line_20 $$ blockLabels.add(compresSize)[ FD ]
Line_14 $$ int bufLen = Math.min(len, maxSize)-->Line_23 $$ off += bufLen[ FD ]
Line_9 $$ ByteArrayOutputStream compressedOut = new ByteArrayOutputStream()-->Line_19 $$ compressedOut.write(operationBlock, 0, compresSize)[ FD ]
Line_4 $$ int off = 0-->Line_27 $$ off = 0[ FD ]
