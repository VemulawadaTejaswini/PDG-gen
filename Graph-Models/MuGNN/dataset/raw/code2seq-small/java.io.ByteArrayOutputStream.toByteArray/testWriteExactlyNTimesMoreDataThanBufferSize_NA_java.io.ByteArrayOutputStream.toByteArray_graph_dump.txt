Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_13 $$ assertThat(out.getBufferSize(), equalTo(BUFFER_SIZE))[ CD ]
Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(length)-->Line_10 $$ copy(content.toByteArray(), out)[ FD ]
Line_9 $$ MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE)-->Line_14 $$ assertThat(out.getFlushCount(), equalTo(n))[ FD ]
Line_3 $$ int n = randomIntBetween(2, 3)-->Line_14 $$ assertThat(out.getFlushCount(), equalTo(n))[ FD ]
Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(length)-->Line_12 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ FD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_4 $$ int length = n * BUFFER_SIZE[ CD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_9 $$ MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE)[ CD ]
Line_9 $$ MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE)-->Line_15 $$ assertThat(out.getNumberOfUploadRequests(), equalTo(n))[ FD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_15 $$ assertThat(out.getNumberOfUploadRequests(), equalTo(n))[ CD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_6 $$ for (int i = 0; i < length; i++) [ CD ]
Line_9 $$ MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE)-->Line_10 $$ copy(content.toByteArray(), out)[ FD ]
Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(length)-->Line_7 $$ content.write(randomByte())[ FD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_12 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ CD ]
Line_9 $$ MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE)-->Line_16 $$ assertTrue(out.isMultipart())[ FD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_11 $$ assertThat(out.getLength(), equalTo((long) length))[ CD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_10 $$ copy(content.toByteArray(), out)[ CD ]
Line_6 $$ for (int i = 0; i < length; i++) -->Line_7 $$ content.write(randomByte())[ CD ]
Line_3 $$ int n = randomIntBetween(2, 3)-->Line_15 $$ assertThat(out.getNumberOfUploadRequests(), equalTo(n))[ FD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_14 $$ assertThat(out.getFlushCount(), equalTo(n))[ CD ]
Line_9 $$ MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE)-->Line_11 $$ assertThat(out.getLength(), equalTo((long) length))[ FD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_3 $$ int n = randomIntBetween(2, 3)[ CD ]
Line_4 $$ int length = n * BUFFER_SIZE-->Line_6 $$ for (int i = 0; i < length; i++) [ FD ]
Line_9 $$ MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE)-->Line_13 $$ assertThat(out.getBufferSize(), equalTo(BUFFER_SIZE))[ FD ]
Line_9 $$ MockDefaultS3OutputStream out = newS3OutputStream(BUFFER_SIZE)-->Line_12 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ FD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_16 $$ assertTrue(out.isMultipart())[ CD ]
Line_2 $$ public void testWriteExactlyNTimesMoreDataThanBufferSize() throws IOException -->Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(length)[ CD ]
