Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_29 $$ if (StringUtils.isNotBlank(version)) [ CD ]
Line_3 $$ String[] tokens = StringUtils.split(location, '/')-->Line_8 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 3)[ FD ]
Line_6 $$ String version = tokens[tokens.length - 2]-->Line_13 $$ version = null[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_27 $$ metadata.setGroupId(group)[ CD ]
Line_6 $$ String version = tokens[tokens.length - 2]-->Line_19 $$ if (StringUtils.isNotBlank(version)) [ FD ]
Line_4 $$ String group = null-->Line_8 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 3)[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_19 $$ if (StringUtils.isNotBlank(version)) [ CD ]
Line_13 $$ version = null-->Line_30 $$ metadata.setVersion(version)[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_7 $$ if (StringUtils.endsWithIgnoreCase(version, "-SNAPSHOT")) [ CD ]
Line_7 $$ if (StringUtils.endsWithIgnoreCase(version, "-SNAPSHOT")) -->Line_11 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 2)[ CD ]
Line_29 $$ if (StringUtils.isNotBlank(version)) -->Line_30 $$ metadata.setVersion(version)[ CD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_4 $$ String group = null[ CD ]
Line_25 $$ Metadata metadata = new Metadata()-->Line_27 $$ metadata.setGroupId(group)[ FD ]
Line_28 $$ Versioning versioning = new Versioning()-->Line_37 $$ versioning.setLatest(_getModuleLatestVersion(moduleDir, false))[ FD ]
Line_33 $$ for (ComparableVersion moduleVersion : moduleVersions) -->Line_34 $$ versioning.addVersion(moduleVersion.toString())[ FD ]
Line_12 $$ module = version-->Line_26 $$ metadata.setArtifactId(module)[ FD ]
Line_5 $$ String module = null-->Line_9 $$ module = tokens[tokens.length - 3][ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_39 $$ metadata.setVersioning(versioning)[ CD ]
Line_5 $$ String module = null-->Line_26 $$ metadata.setArtifactId(module)[ FD ]
Line_6 $$ String version = tokens[tokens.length - 2]-->Line_7 $$ if (StringUtils.endsWithIgnoreCase(version, "-SNAPSHOT")) [ FD ]
Line_4 $$ String group = null-->Line_27 $$ metadata.setGroupId(group)[ FD ]
Line_15 $$ File moduleDir = new File(_getGradleUserHome(), _FILES_CACHE_DIR_NAME + "/" + group + "/" + module)-->Line_37 $$ versioning.setLatest(_getModuleLatestVersion(moduleDir, false))[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_25 $$ Metadata metadata = new Metadata()[ CD ]
Line_41 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()-->Line_42 $$ metadataXpp3Writer.write(byteArrayOutputStream, metadata)[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_3 $$ String[] tokens = StringUtils.split(location, '/')[ CD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_6 $$ String version = tokens[tokens.length - 2][ CD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_38 $$ versioning.setRelease(_getModuleLatestVersion(moduleDir, true))[ CD ]
Line_15 $$ File moduleDir = new File(_getGradleUserHome(), _FILES_CACHE_DIR_NAME + "/" + group + "/" + module)-->Line_38 $$ versioning.setRelease(_getModuleLatestVersion(moduleDir, true))[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_3 $$ String[] tokens = StringUtils.split(location, '/')[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_42 $$ metadataXpp3Writer.write(byteArrayOutputStream, metadata)[ CD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_28 $$ Versioning versioning = new Versioning()[ CD ]
Line_4 $$ String group = null-->Line_11 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 2)[ FD ]
Line_43 $$ HttpResponse httpResponse = new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, null))-->Line_44 $$ httpResponse.setEntity(new ByteArrayEntity(byteArrayOutputStream.toByteArray(), ContentType.APPLICATION_XML))[ FD ]
Line_29 $$ if (StringUtils.isNotBlank(version)) -->Line_32 $$ SortedSet<ComparableVersion> moduleVersions = _getModuleVersions(moduleDir, false)[ CD ]
Line_9 $$ module = tokens[tokens.length - 3]-->Line_26 $$ metadata.setArtifactId(module)[ FD ]
Line_7 $$ if (StringUtils.endsWithIgnoreCase(version, "-SNAPSHOT")) -->Line_13 $$ version = null[ CD ]
Line_6 $$ String version = tokens[tokens.length - 2]-->Line_29 $$ if (StringUtils.isNotBlank(version)) [ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_46 $$ return new HttpResponseResource(HttpGet.METHOD_NAME, uri, httpResponse)[ CD ]
Line_28 $$ Versioning versioning = new Versioning()-->Line_38 $$ versioning.setRelease(_getModuleLatestVersion(moduleDir, true))[ FD ]
Line_13 $$ version = null-->Line_19 $$ if (StringUtils.isNotBlank(version)) [ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_5 $$ String module = null[ CD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_44 $$ httpResponse.setEntity(new ByteArrayEntity(byteArrayOutputStream.toByteArray(), ContentType.APPLICATION_XML))[ CD ]
Line_43 $$ HttpResponse httpResponse = new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, null))-->Line_45 $$ httpResponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(byteArrayOutputStream.size()))[ FD ]
Line_7 $$ if (StringUtils.endsWithIgnoreCase(version, "-SNAPSHOT")) -->Line_9 $$ module = tokens[tokens.length - 3][ CD ]
Line_5 $$ String module = null-->Line_12 $$ module = version[ FD ]
Line_28 $$ Versioning versioning = new Versioning()-->Line_34 $$ versioning.addVersion(moduleVersion.toString())[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_26 $$ metadata.setArtifactId(module)[ CD ]
Line_41 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()-->Line_44 $$ httpResponse.setEntity(new ByteArrayEntity(byteArrayOutputStream.toByteArray(), ContentType.APPLICATION_XML))[ FD ]
Line_21 $$ if (!artifactDir.exists()) -->Line_22 $$ return null[ CD ]
Line_25 $$ Metadata metadata = new Metadata()-->Line_30 $$ metadata.setVersion(version)[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_40 $$ MetadataXpp3Writer metadataXpp3Writer = new MetadataXpp3Writer()[ CD ]
Line_15 $$ File moduleDir = new File(_getGradleUserHome(), _FILES_CACHE_DIR_NAME + "/" + group + "/" + module)-->Line_32 $$ SortedSet<ComparableVersion> moduleVersions = _getModuleVersions(moduleDir, false)[ FD ]
Line_19 $$ if (StringUtils.isNotBlank(version)) -->Line_20 $$ File artifactDir = new File(moduleDir, version)[ CD ]
Line_3 $$ String[] tokens = StringUtils.split(location, '/')-->Line_11 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 2)[ FD ]
Line_20 $$ File artifactDir = new File(moduleDir, version)-->Line_21 $$ if (!artifactDir.exists()) [ FD ]
Line_16 $$ if (!moduleDir.exists()) -->Line_17 $$ return null[ CD ]
Line_25 $$ Metadata metadata = new Metadata()-->Line_39 $$ metadata.setVersioning(versioning)[ FD ]
Line_7 $$ if (StringUtils.endsWithIgnoreCase(version, "-SNAPSHOT")) -->Line_8 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 3)[ CD ]
Line_25 $$ Metadata metadata = new Metadata()-->Line_26 $$ metadata.setArtifactId(module)[ FD ]
Line_8 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 3)-->Line_11 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 2)[ FD ]
Line_6 $$ String version = tokens[tokens.length - 2]-->Line_30 $$ metadata.setVersion(version)[ FD ]
Line_25 $$ Metadata metadata = new Metadata()-->Line_42 $$ metadataXpp3Writer.write(byteArrayOutputStream, metadata)[ FD ]
Line_19 $$ if (StringUtils.isNotBlank(version)) -->Line_21 $$ if (!artifactDir.exists()) [ CD ]
Line_15 $$ File moduleDir = new File(_getGradleUserHome(), _FILES_CACHE_DIR_NAME + "/" + group + "/" + module)-->Line_16 $$ if (!moduleDir.exists()) [ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_37 $$ versioning.setLatest(_getModuleLatestVersion(moduleDir, false))[ CD ]
Line_13 $$ version = null-->Line_29 $$ if (StringUtils.isNotBlank(version)) [ FD ]
Line_9 $$ module = tokens[tokens.length - 3]-->Line_12 $$ module = version[ FD ]
Line_8 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 3)-->Line_27 $$ metadata.setGroupId(group)[ FD ]
Line_11 $$ group = StringUtils.join(tokens, '.', 0, tokens.length - 2)-->Line_27 $$ metadata.setGroupId(group)[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_41 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()[ CD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_43 $$ HttpResponse httpResponse = new BasicHttpResponse(new BasicStatusLine(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, null))[ CD ]
Line_6 $$ String version = tokens[tokens.length - 2]-->Line_12 $$ module = version[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_15 $$ File moduleDir = new File(_getGradleUserHome(), _FILES_CACHE_DIR_NAME + "/" + group + "/" + module)[ CD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_45 $$ httpResponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(byteArrayOutputStream.size()))[ CD ]
Line_40 $$ MetadataXpp3Writer metadataXpp3Writer = new MetadataXpp3Writer()-->Line_42 $$ metadataXpp3Writer.write(byteArrayOutputStream, metadata)[ FD ]
Line_41 $$ ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()-->Line_45 $$ httpResponse.setHeader(HttpHeaders.CONTENT_LENGTH, String.valueOf(byteArrayOutputStream.size()))[ FD ]
Line_2 $$ private HttpResponseResource _getMavenMetadataResponseResource(URI uri, String location) throws Exception -->Line_16 $$ if (!moduleDir.exists()) [ CD ]
Line_28 $$ Versioning versioning = new Versioning()-->Line_39 $$ metadata.setVersioning(versioning)[ FD ]
Line_7 $$ if (StringUtils.endsWithIgnoreCase(version, "-SNAPSHOT")) -->Line_12 $$ module = version[ CD ]
