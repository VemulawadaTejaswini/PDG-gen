Line_7 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_9 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())[ FD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_14 $$ when(connection.getInputStream()).thenReturn(in)[ CD ]
Line_9 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())-->Line_14 $$ when(connection.getInputStream()).thenReturn(in)[ FD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_16 $$ underTest.copyFromHost(host)[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_12 $$ when(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_VERSION)).thenReturn(ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION)[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_10 $$ when(connection.getResponseCode()).thenReturn(200)[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_11 $$ when(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_NAME)).thenReturn(ShuffleHeader.DEFAULT_HTTP_HEADER_NAME)[ CD ]
Line_5 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)-->Line_13 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ FD ]
Line_4 $$ Fetcher<Text, Text> underTest = new FakeFetcher<Text, Text>(job, id, ss, mm, r, metrics, except, key, connection)-->Line_16 $$ underTest.copyFromHost(host)[ FD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_15 $$ when(mm.reserve(any(TaskAttemptID.class), anyLong(), anyInt())).thenThrow(new DiskErrorException("No disk space available"))[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_6 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 10, 10, 1)[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_7 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_9 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_17 $$ verify(ss).reportLocalError(any(IOException.class))[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_13 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_5 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)[ CD ]
Line_6 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 10, 10, 1)-->Line_8 $$ header.write(new DataOutputStream(bout))[ FD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_8 $$ header.write(new DataOutputStream(bout))[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_3 $$ LOG.info("testReduceOutOfDiskSpace")[ CD ]
Line_2 $$ public void testReduceOutOfDiskSpace() throws Throwable -->Line_4 $$ Fetcher<Text, Text> underTest = new FakeFetcher<Text, Text>(job, id, ss, mm, r, metrics, except, key, connection)[ CD ]
