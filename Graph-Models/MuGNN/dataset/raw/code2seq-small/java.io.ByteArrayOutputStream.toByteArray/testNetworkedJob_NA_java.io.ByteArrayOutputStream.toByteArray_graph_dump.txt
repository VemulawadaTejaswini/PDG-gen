Line_29 $$ JobID jobId = rj.getID()-->Line_56 $$ client.getCleanupTaskReports(jobId)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_47 $$ assertEquals(runningJob.getFailureInfo(), "")[ FD ]
Line_13 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_27 $$ JobClient client = new JobClient(mr.getConfig())[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_34 $$ assertEquals(runningJob.getID(), jobId)[ FD ]
Line_13 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_128 $$ mr.stop()[ FD ]
Line_13 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_14 $$ JobConf job = new JobConf(mr.getConfig())[ FD ]
Line_127 $$ if (mr != null) -->Line_128 $$ mr.stop()[ CD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_41 $$ assertTrue(runningJob.cleanupProgress() == 0.0f)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)[ FD ]
Line_15 $$ fileSys = FileSystem.get(job)-->Line_17 $$ FSDataOutputStream out = fileSys.create(inFile, true)[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_22 $$ job.setInputFormat(TextInputFormat.class)[ FD ]
Line_29 $$ JobID jobId = rj.getID()-->Line_34 $$ assertEquals(runningJob.getID(), jobId)[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_23 $$ job.setOutputFormat(TextOutputFormat.class)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_43 $$ TaskCompletionEvent[] tce = runningJob.getTaskCompletionEvents(0)[ FD ]
Line_13 $$ mr = createMiniClusterWithCapacityScheduler()-->Line_127 $$ if (mr != null) [ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_35 $$ assertEquals(runningJob.getJobID(), jobId.toString())[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_15 $$ fileSys = FileSystem.get(job)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_51 $$ client.getSetupTaskReports(jobId)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_106 $$ assertEquals(client.getJobsFromQueue("default").length, 1)[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_25 $$ job.setReducerClass(IdentityReducer.class)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_40 $$ assertTrue(runningJob.reduceProgress() == 0.0f)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_42 $$ assertTrue(runningJob.setupProgress() == 0.0f)[ FD ]
Line_81 $$ ClusterStatus status2 = new ClusterStatus()-->Line_82 $$ status2.readFields(new DataInputStream(new ByteArrayInputStream(dataOut.toByteArray())))[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_108 $$ JobQueueInfo qi = client.getQueueInfo("default")[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_37 $$ assertTrue(runningJob.getJobFile().endsWith(".staging/" + runningJob.getJobID() + "/job.xml"))[ FD ]
Line_29 $$ JobID jobId = rj.getID()-->Line_51 $$ client.getSetupTaskReports(jobId)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_36 $$ assertEquals(runningJob.getJobName(), "N/A")[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_20 $$ FileInputFormat.setInputPaths(job, inFile)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_38 $$ assertTrue(runningJob.getTrackingURL().length() > 0)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_60 $$ assertEquals(client.getReduceTaskReports(jobId).length, 0)[ FD ]
Line_29 $$ JobID jobId = rj.getID()-->Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)[ FD ]
Line_81 $$ ClusterStatus status2 = new ClusterStatus()-->Line_84 $$ assertEquals(status.getBlackListedTrackersInfo(), status2.getBlackListedTrackersInfo())[ FD ]
Line_81 $$ ClusterStatus status2 = new ClusterStatus()-->Line_85 $$ assertEquals(status.getMapTasks(), status2.getMapTasks())[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_48 $$ assertEquals(runningJob.getJobStatus().getJobName(), "N/A")[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_102 $$ JobQueueInfo[] qinfo = client.getQueues()[ FD ]
Line_15 $$ fileSys = FileSystem.get(job)-->Line_16 $$ fileSys.delete(testDir, true)[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_21 $$ FileOutputFormat.setOutputPath(job, outDir)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_56 $$ client.getCleanupTaskReports(jobId)[ FD ]
Line_17 $$ FSDataOutputStream out = fileSys.create(inFile, true)-->Line_18 $$ out.writeBytes("This is a test file")[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_97 $$ assertEquals(client.getSystemDir().getName(), "jobSubmitDir")[ FD ]
Line_29 $$ JobID jobId = rj.getID()-->Line_35 $$ assertEquals(runningJob.getJobID(), jobId.toString())[ FD ]
Line_108 $$ JobQueueInfo qi = client.getQueueInfo("default")-->Line_110 $$ assertEquals(qi.getQueueState(), "running")[ FD ]
Line_11 $$ FileSystem fileSys = null-->Line_17 $$ FSDataOutputStream out = fileSys.create(inFile, true)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_45 $$ assertEquals(runningJob.getHistoryUrl(), "")[ FD ]
Line_29 $$ JobID jobId = rj.getID()-->Line_49 $$ assertEquals(client.getMapTaskReports(jobId).length, 0)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_122 $$ assertEquals("Expected matching startTimes", rj.getJobStatus().getStartTime(), client.getJob(jobId).getJobStatus().getStartTime())[ FD ]
Line_28 $$ RunningJob rj = client.submitJob(job)-->Line_29 $$ JobID jobId = rj.getID()[ FD ]
Line_108 $$ JobQueueInfo qi = client.getQueueInfo("default")-->Line_109 $$ assertEquals(qi.getQueueName(), "default")[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_26 $$ job.setNumReduceTasks(0)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_96 $$ assertEquals(client.getDefaultReduces(), 4)[ FD ]
Line_28 $$ RunningJob rj = client.submitJob(job)-->Line_122 $$ assertEquals("Expected matching startTimes", rj.getJobStatus().getStartTime(), client.getJob(jobId).getJobStatus().getStartTime())[ FD ]
Line_15 $$ fileSys = FileSystem.get(job)-->Line_125 $$ fileSys.delete(testDir, true)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_111 $$ QueueAclsInfo[] aai = client.getQueueAclsForCurrentUser()[ FD ]
Line_81 $$ ClusterStatus status2 = new ClusterStatus()-->Line_83 $$ assertEquals(status.getActiveTrackerNames(), status2.getActiveTrackerNames())[ FD ]
Line_11 $$ FileSystem fileSys = null-->Line_15 $$ fileSys = FileSystem.get(job)[ FD ]
Line_11 $$ FileSystem fileSys = null-->Line_124 $$ if (fileSys != null) [ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_28 $$ RunningJob rj = client.submitJob(job)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_39 $$ assertTrue(runningJob.mapProgress() == 0.0f)[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_49 $$ assertEquals(client.getMapTaskReports(jobId).length, 0)[ FD ]
Line_124 $$ if (fileSys != null) -->Line_125 $$ fileSys.delete(testDir, true)[ CD ]
Line_15 $$ fileSys = FileSystem.get(job)-->Line_124 $$ if (fileSys != null) [ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_105 $$ assertEquals(client.getChildQueues("default").length, 0)[ FD ]
Line_17 $$ FSDataOutputStream out = fileSys.create(inFile, true)-->Line_19 $$ out.close()[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_107 $$ assertTrue(client.getJobsFromQueue("default")[0].getJobFile().endsWith("/job.xml"))[ FD ]
Line_11 $$ FileSystem fileSys = null-->Line_16 $$ fileSys.delete(testDir, true)[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_24 $$ job.setMapperClass(IdentityMapper.class)[ FD ]
Line_29 $$ JobID jobId = rj.getID()-->Line_60 $$ assertEquals(client.getReduceTaskReports(jobId).length, 0)[ FD ]
Line_29 $$ JobID jobId = rj.getID()-->Line_122 $$ assertEquals("Expected matching startTimes", rj.getJobStatus().getStartTime(), client.getJob(jobId).getJobStatus().getStartTime())[ FD ]
Line_11 $$ FileSystem fileSys = null-->Line_125 $$ fileSys.delete(testDir, true)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_46 $$ assertFalse(runningJob.isRetired())[ FD ]
Line_14 $$ JobConf job = new JobConf(mr.getConfig())-->Line_92 $$ assertEquals(JobClient.getTaskOutputFilter(job), TaskStatusFilter.ALL)[ FD ]
Line_30 $$ NetworkedJob runningJob = (NetworkedJob) client.getJob(jobId)-->Line_31 $$ runningJob.setJobPriority(JobPriority.HIGH.name())[ FD ]
Line_27 $$ JobClient client = new JobClient(mr.getConfig())-->Line_28 $$ RunningJob rj = client.submitJob(job)[ FD ]
