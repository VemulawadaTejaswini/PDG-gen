Line_7 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_21 $$ output.write((byte) 0)[ FD ]
Line_2 $$ public byte[] encode(Map<String, Object> headers, byte[] payload) -->Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) [ FD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_16 $$ output.write(command.toString().getBytes(StompDecoder.UTF8_CHARSET))[ CD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_9 $$ if (logger.isTraceEnabled()) [ CD ]
Line_2 $$ public byte[] encode(Map<String, Object> headers, byte[] payload) -->Line_3 $$ Assert.notNull(headers, "'headers' is required")[ CD ]
Line_14 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)-->Line_16 $$ output.write(command.toString().getBytes(StompDecoder.UTF8_CHARSET))[ FD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_15 $$ Assert.notNull(command, "Missing STOMP command: " + headers)[ CD ]
Line_7 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_19 $$ output.write(LF)[ FD ]
Line_2 $$ public byte[] encode(Map<String, Object> headers, byte[] payload) -->Line_18 $$ writeHeaders(command, headers, payload, output)[ FD ]
Line_7 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_17 $$ output.write(LF)[ FD ]
Line_14 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)-->Line_15 $$ Assert.notNull(command, "Missing STOMP command: " + headers)[ FD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_14 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)[ CD ]
Line_9 $$ if (logger.isTraceEnabled()) -->Line_10 $$ logger.trace("Encoding heartbeat")[ CD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_18 $$ writeHeaders(command, headers, payload, output)[ CD ]
Line_2 $$ public byte[] encode(Map<String, Object> headers, byte[] payload) -->Line_20 $$ writeBody(payload, output)[ FD ]
Line_2 $$ public byte[] encode(Map<String, Object> headers, byte[] payload) -->Line_4 $$ Assert.notNull(payload, "'payload' is required")[ CD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_12 $$ output.write(StompDecoder.HEARTBEAT_PAYLOAD)[ CD ]
Line_7 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_12 $$ output.write(StompDecoder.HEARTBEAT_PAYLOAD)[ FD ]
Line_7 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_18 $$ writeHeaders(command, headers, payload, output)[ FD ]
Line_7 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_16 $$ output.write(command.toString().getBytes(StompDecoder.UTF8_CHARSET))[ FD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_21 $$ output.write((byte) 0)[ CD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_20 $$ writeBody(payload, output)[ CD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_17 $$ output.write(LF)[ CD ]
Line_6 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(128 + payload.length)-->Line_23 $$ return baos.toByteArray()[ FD ]
Line_2 $$ public byte[] encode(Map<String, Object> headers, byte[] payload) -->Line_14 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)[ FD ]
Line_2 $$ public byte[] encode(Map<String, Object> headers, byte[] payload) -->Line_3 $$ Assert.notNull(headers, "'headers' is required")[ FD ]
Line_8 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_19 $$ output.write(LF)[ CD ]
Line_2 $$ public byte[] encode(Map<String, Object> headers, byte[] payload) -->Line_4 $$ Assert.notNull(payload, "'payload' is required")[ FD ]
Line_14 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)-->Line_18 $$ writeHeaders(command, headers, payload, output)[ FD ]
Line_7 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_20 $$ writeBody(payload, output)[ FD ]
