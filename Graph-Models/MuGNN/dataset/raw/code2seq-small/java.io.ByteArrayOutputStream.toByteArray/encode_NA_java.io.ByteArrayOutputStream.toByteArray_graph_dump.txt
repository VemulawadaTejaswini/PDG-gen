Line_20 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)-->Line_22 $$ output.write(command.toString().getBytes(StompDecoder.UTF8_CHARSET))[ FD ]
Line_20 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)-->Line_21 $$ Assert.notNull(command, "Missing STOMP command: " + headers)[ FD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_25 $$ output.write(LF)[ CD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_22 $$ output.write(command.toString().getBytes(StompDecoder.UTF8_CHARSET))[ CD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_15 $$ if (logger.isTraceEnabled()) [ CD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_26 $$ writeBody(payload, output)[ CD ]
Line_13 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_24 $$ writeHeaders(command, headers, payload, output)[ FD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_18 $$ output.write(StompDecoder.HEARTBEAT_PAYLOAD)[ CD ]
Line_13 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_23 $$ output.write(LF)[ FD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_20 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)[ CD ]
Line_20 $$ StompCommand command = StompHeaderAccessor.getCommand(headers)-->Line_24 $$ writeHeaders(command, headers, payload, output)[ FD ]
Line_13 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_25 $$ output.write(LF)[ FD ]
Line_13 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_27 $$ output.write((byte) 0)[ FD ]
Line_15 $$ if (logger.isTraceEnabled()) -->Line_16 $$ logger.trace("Encoding heartbeat")[ CD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_23 $$ output.write(LF)[ CD ]
Line_13 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_26 $$ writeBody(payload, output)[ FD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_27 $$ output.write((byte) 0)[ CD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_21 $$ Assert.notNull(command, "Missing STOMP command: " + headers)[ CD ]
Line_14 $$ if (SimpMessageType.HEARTBEAT.equals(SimpMessageHeaderAccessor.getMessageType(headers))) -->Line_24 $$ writeHeaders(command, headers, payload, output)[ CD ]
Line_13 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_18 $$ output.write(StompDecoder.HEARTBEAT_PAYLOAD)[ FD ]
Line_12 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(128 + payload.length)-->Line_29 $$ return baos.toByteArray()[ FD ]
Line_13 $$ DataOutputStream output = new DataOutputStream(baos)-->Line_22 $$ output.write(command.toString().getBytes(StompDecoder.UTF8_CHARSET))[ FD ]
