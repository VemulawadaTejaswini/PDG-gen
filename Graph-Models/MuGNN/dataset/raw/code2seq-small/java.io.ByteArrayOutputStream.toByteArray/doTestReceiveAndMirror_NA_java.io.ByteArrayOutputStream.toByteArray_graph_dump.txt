Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_4 $$ final byte[] CHECKSUMS = AppendTestUtil.initBuffer(checksumsLen)[ CD ]
Line_8 $$ ByteBuffer parsedData = pr.getDataSlice()-->Line_9 $$ assertArrayEquals(DATA, remainingAsArray(parsedData))[ FD ]
Line_3 $$ final byte[] DATA = AppendTestUtil.initBuffer(dataLen)-->Line_5 $$ byte[] packet = prepareFakePacket(DATA, CHECKSUMS)[ FD ]
Line_12 $$ PacketHeader header = pr.getHeader()-->Line_14 $$ assertEquals(OFFSET_IN_BLOCK, header.getOffsetInBlock())[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_10 $$ ByteBuffer parsedChecksums = pr.getChecksumSlice()[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_3 $$ final byte[] DATA = AppendTestUtil.initBuffer(dataLen)[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_7 $$ pr.receiveNextPacket(in)[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_9 $$ assertArrayEquals(DATA, remainingAsArray(parsedData))[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_19 $$ pr.mirrorPacketTo(new DataOutputStream(mirrored))[ FD ]
Line_5 $$ byte[] packet = prepareFakePacket(DATA, CHECKSUMS)-->Line_24 $$ assertArrayEquals(packet, mirrored.toByteArray())[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_12 $$ PacketHeader header = pr.getHeader()[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_10 $$ ByteBuffer parsedChecksums = pr.getChecksumSlice()[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_24 $$ assertArrayEquals(packet, mirrored.toByteArray())[ CD ]
Line_10 $$ ByteBuffer parsedChecksums = pr.getChecksumSlice()-->Line_11 $$ assertArrayEquals(CHECKSUMS, remainingAsArray(parsedChecksums))[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_18 $$ mirrored = Mockito.spy(mirrored)[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_19 $$ pr.mirrorPacketTo(new DataOutputStream(mirrored))[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_8 $$ ByteBuffer parsedData = pr.getDataSlice()[ FD ]
Line_12 $$ PacketHeader header = pr.getHeader()-->Line_13 $$ assertEquals(SEQNO, header.getSeqno())[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_5 $$ byte[] packet = prepareFakePacket(DATA, CHECKSUMS)[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_13 $$ assertEquals(SEQNO, header.getSeqno())[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_4 $$ final byte[] CHECKSUMS = AppendTestUtil.initBuffer(checksumsLen)[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_3 $$ final byte[] DATA = AppendTestUtil.initBuffer(dataLen)[ CD ]
Line_4 $$ final byte[] CHECKSUMS = AppendTestUtil.initBuffer(checksumsLen)-->Line_5 $$ byte[] packet = prepareFakePacket(DATA, CHECKSUMS)[ FD ]
Line_18 $$ mirrored = Mockito.spy(mirrored)-->Line_24 $$ assertArrayEquals(packet, mirrored.toByteArray())[ FD ]
Line_3 $$ final byte[] DATA = AppendTestUtil.initBuffer(dataLen)-->Line_9 $$ assertArrayEquals(DATA, remainingAsArray(parsedData))[ FD ]
Line_4 $$ final byte[] CHECKSUMS = AppendTestUtil.initBuffer(checksumsLen)-->Line_11 $$ assertArrayEquals(CHECKSUMS, remainingAsArray(parsedChecksums))[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_11 $$ assertArrayEquals(CHECKSUMS, remainingAsArray(parsedChecksums))[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_8 $$ ByteBuffer parsedData = pr.getDataSlice()[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_7 $$ pr.receiveNextPacket(in)[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_23 $$ Mockito.verifyNoMoreInteractions(mirrored)[ CD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_6 $$ ByteArrayInputStream in = new ByteArrayInputStream(packet)[ CD ]
Line_6 $$ ByteArrayInputStream in = new ByteArrayInputStream(packet)-->Line_7 $$ pr.receiveNextPacket(in)[ FD ]
Line_18 $$ mirrored = Mockito.spy(mirrored)-->Line_23 $$ Mockito.verifyNoMoreInteractions(mirrored)[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_12 $$ PacketHeader header = pr.getHeader()[ FD ]
Line_2 $$ private void doTestReceiveAndMirror(PacketReceiver pr, int dataLen, int checksumsLen) throws IOException -->Line_14 $$ assertEquals(OFFSET_IN_BLOCK, header.getOffsetInBlock())[ CD ]
