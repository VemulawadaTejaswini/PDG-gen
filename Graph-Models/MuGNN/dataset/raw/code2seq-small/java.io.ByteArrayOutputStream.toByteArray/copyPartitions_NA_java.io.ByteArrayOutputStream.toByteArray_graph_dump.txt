Line_7 $$ IndexRecord indexRecord = new IndexRecord()-->Line_18 $$ spillRecord.putIndex(indexRecord, i)[ FD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_6 $$ SpillRecord spillRecord = new SpillRecord(numberOfPartitions)[ CD ]
Line_10 $$ byte[] buffer = outStreams[i].toByteArray()-->Line_12 $$ checksumOutput.write(buffer)[ FD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_4 $$ FileSystem rfs = ((LocalFileSystem) localFs).getRaw()[ CD ]
Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) -->Line_9 $$ indexRecord.startOffset = rawOutput.getPos()[ CD ]
Line_6 $$ SpillRecord spillRecord = new SpillRecord(numberOfPartitions)-->Line_18 $$ spillRecord.putIndex(indexRecord, i)[ FD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_22 $$ spillRecord.writeToFile(indexPath, jobConf)[ CD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_21 $$ rawOutput.close()[ CD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_5 $$ FSDataOutputStream rawOutput = rfs.create(mapOutputPath, true, BUF_SIZE)[ CD ]
Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) -->Line_17 $$ indexRecord.partLength = rawOutput.getPos() - indexRecord.startOffset[ CD ]
Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) -->Line_19 $$ reporter.progress()[ CD ]
Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) -->Line_18 $$ spillRecord.putIndex(indexRecord, i)[ CD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_5 $$ FSDataOutputStream rawOutput = rfs.create(mapOutputPath, true, BUF_SIZE)[ FD ]
Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) -->Line_18 $$ spillRecord.putIndex(indexRecord, i)[ FD ]
Line_5 $$ FSDataOutputStream rawOutput = rfs.create(mapOutputPath, true, BUF_SIZE)-->Line_21 $$ rawOutput.close()[ FD ]
Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) -->Line_12 $$ checksumOutput.write(buffer)[ CD ]
Line_5 $$ FSDataOutputStream rawOutput = rfs.create(mapOutputPath, true, BUF_SIZE)-->Line_17 $$ indexRecord.partLength = rawOutput.getPos() - indexRecord.startOffset[ FD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_22 $$ spillRecord.writeToFile(indexPath, jobConf)[ FD ]
Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) -->Line_11 $$ IFileOutputStream checksumOutput = new IFileOutputStream(rawOutput)[ CD ]
Line_11 $$ IFileOutputStream checksumOutput = new IFileOutputStream(rawOutput)-->Line_12 $$ checksumOutput.write(buffer)[ FD ]
Line_5 $$ FSDataOutputStream rawOutput = rfs.create(mapOutputPath, true, BUF_SIZE)-->Line_9 $$ indexRecord.startOffset = rawOutput.getPos()[ FD ]
Line_4 $$ FileSystem rfs = ((LocalFileSystem) localFs).getRaw()-->Line_5 $$ FSDataOutputStream rawOutput = rfs.create(mapOutputPath, true, BUF_SIZE)[ FD ]
Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) -->Line_10 $$ byte[] buffer = outStreams[i].toByteArray()[ CD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_3 $$ FileSystem localFs = FileSystem.getLocal(jobConf)[ CD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_7 $$ IndexRecord indexRecord = new IndexRecord()[ CD ]
Line_2 $$ private void copyPartitions(Path mapOutputPath, Path indexPath) throws IOException -->Line_8 $$ for (int i = 0; i < numberOfPartitions; i++) [ CD ]
Line_6 $$ SpillRecord spillRecord = new SpillRecord(numberOfPartitions)-->Line_22 $$ spillRecord.writeToFile(indexPath, jobConf)[ FD ]
