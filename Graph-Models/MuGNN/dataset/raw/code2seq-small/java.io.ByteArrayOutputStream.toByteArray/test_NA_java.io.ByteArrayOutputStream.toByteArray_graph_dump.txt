Line_2 $$ public static <T> void test(Externalizer<T> externalizer, T subject, BiConsumer<T, T> assertion) throws IOException, ClassNotFoundException -->Line_10 $$ assertion.accept(subject, result)[ FD ]
Line_2 $$ public static <T> void test(Externalizer<T> externalizer, T subject, BiConsumer<T, T> assertion) throws IOException, ClassNotFoundException -->Line_3 $$ assertTrue(externalizer.getTargetClass().isInstance(subject))[ CD ]
Line_9 $$ T result = externalizer.readObject(input)-->Line_10 $$ assertion.accept(subject, result)[ FD ]
Line_2 $$ public static <T> void test(Externalizer<T> externalizer, T subject, BiConsumer<T, T> assertion) throws IOException, ClassNotFoundException -->Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public static <T> void test(Externalizer<T> externalizer, T subject, BiConsumer<T, T> assertion) throws IOException, ClassNotFoundException -->Line_9 $$ T result = externalizer.readObject(input)[ FD ]
Line_2 $$ public static <T> void test(Externalizer<T> externalizer, T subject, BiConsumer<T, T> assertion) throws IOException, ClassNotFoundException -->Line_6 $$ externalizer.writeObject(output, subject)[ FD ]
Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_8 $$ try (ObjectInputStream input = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()))) [ FD ]
Line_5 $$ try (ObjectOutputStream output = new ObjectOutputStream(out)) -->Line_6 $$ externalizer.writeObject(output, subject)[ FD ]
Line_2 $$ public static <T> void test(Externalizer<T> externalizer, T subject, BiConsumer<T, T> assertion) throws IOException, ClassNotFoundException -->Line_3 $$ assertTrue(externalizer.getTargetClass().isInstance(subject))[ FD ]
Line_8 $$ try (ObjectInputStream input = new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()))) -->Line_9 $$ T result = externalizer.readObject(input)[ FD ]
