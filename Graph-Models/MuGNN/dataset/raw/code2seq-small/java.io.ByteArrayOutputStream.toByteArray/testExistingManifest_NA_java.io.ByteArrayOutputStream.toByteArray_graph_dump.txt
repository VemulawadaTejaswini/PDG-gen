Line_11 $$ OutputStream os = new FileOutputStream(manifestFile)-->Line_13 $$ os.close()[ FD ]
Line_11 $$ OutputStream os = new FileOutputStream(manifestFile)-->Line_12 $$ manifest.write(os)[ FD ]
Line_7 $$ File metaInfDir = new File(dir, "META-INF")-->Line_8 $$ metaInfDir.mkdirs()[ FD ]
Line_21 $$ JarInputStream jis = new JarInputStream(new ByteArrayInputStream(baos.toByteArray()))-->Line_22 $$ Assert.assertNotNull(jis.getManifest())[ FD ]
Line_4 $$ File dir = new File(System.getProperty("test.build.dir", "target/test-dir"), TestJarFinder.class.getName() + "-testExistingManifest")-->Line_5 $$ delete(dir)[ FD ]
Line_10 $$ Manifest manifest = new Manifest()-->Line_12 $$ manifest.write(os)[ FD ]
Line_19 $$ JarOutputStream zos = new JarOutputStream(baos)-->Line_20 $$ JarFinder.jarDir(dir, "", zos)[ FD ]
Line_18 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_21 $$ JarInputStream jis = new JarInputStream(new ByteArrayInputStream(baos.toByteArray()))[ FD ]
Line_21 $$ JarInputStream jis = new JarInputStream(new ByteArrayInputStream(baos.toByteArray()))-->Line_23 $$ jis.close()[ FD ]
Line_15 $$ Writer writer = new FileWriter(propsFile)-->Line_16 $$ new Properties().store(writer, "")[ FD ]
Line_15 $$ Writer writer = new FileWriter(propsFile)-->Line_17 $$ writer.close()[ FD ]
Line_4 $$ File dir = new File(System.getProperty("test.build.dir", "target/test-dir"), TestJarFinder.class.getName() + "-testExistingManifest")-->Line_6 $$ dir.mkdirs()[ FD ]
Line_4 $$ File dir = new File(System.getProperty("test.build.dir", "target/test-dir"), TestJarFinder.class.getName() + "-testExistingManifest")-->Line_20 $$ JarFinder.jarDir(dir, "", zos)[ FD ]
