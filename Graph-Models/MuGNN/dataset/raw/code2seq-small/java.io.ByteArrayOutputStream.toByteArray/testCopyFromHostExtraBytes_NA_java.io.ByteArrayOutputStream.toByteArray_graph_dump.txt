Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_26 $$ when(mm.reserve(eq(map2ID), anyLong(), anyInt())).thenReturn(mapOut2)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_14 $$ ios.write("MAPDATA123".getBytes())[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_3 $$ Fetcher<Text, Text> underTest = new FakeFetcher<Text, Text>(job, id, ss, mm, r, metrics, except, key, connection)[ CD ]
Line_17 $$ IFileOutputStream ios2 = new IFileOutputStream(dos)-->Line_20 $$ ios2.finish()[ FD ]
Line_12 $$ IFileOutputStream ios = new IFileOutputStream(dos)-->Line_15 $$ ios.finish()[ FD ]
Line_21 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())-->Line_22 $$ when(connection.getInputStream()).thenReturn(in)[ FD ]
Line_9 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 14, 10, 1)-->Line_13 $$ header.write(dos)[ FD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_18 $$ header2.write(dos)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_15 $$ ios.finish()[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_16 $$ ShuffleHeader header2 = new ShuffleHeader(map2ID.toString(), 14, 10, 1)[ CD ]
Line_12 $$ IFileOutputStream ios = new IFileOutputStream(dos)-->Line_14 $$ ios.write("MAPDATA123".getBytes())[ FD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_21 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_4 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_7 $$ when(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_VERSION)).thenReturn(ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_32 $$ verify(ss).putBackKnownMapOutput(any(MapHost.class), eq(map2ID))[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_12 $$ IFileOutputStream ios = new IFileOutputStream(dos)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_8 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_17 $$ IFileOutputStream ios2 = new IFileOutputStream(dos)[ CD ]
Line_24 $$ InMemoryMapOutput<Text, Text> mapOut2 = new InMemoryMapOutput<Text, Text>(job, map2ID, mm, 10, null, true)-->Line_26 $$ when(mm.reserve(eq(map2ID), anyLong(), anyInt())).thenReturn(mapOut2)[ FD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_27 $$ underTest.copyFromHost(host)[ CD ]
Line_17 $$ IFileOutputStream ios2 = new IFileOutputStream(dos)-->Line_19 $$ ios2.write("MAPDATA456".getBytes())[ FD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_22 $$ when(connection.getInputStream()).thenReturn(in)[ CD ]
Line_4 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)-->Line_8 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ FD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_11 $$ DataOutputStream dos = new DataOutputStream(bout)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_28 $$ verify(allErrs).increment(1)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_24 $$ InMemoryMapOutput<Text, Text> mapOut2 = new InMemoryMapOutput<Text, Text>(job, map2ID, mm, 10, null, true)[ CD ]
Line_3 $$ Fetcher<Text, Text> underTest = new FakeFetcher<Text, Text>(job, id, ss, mm, r, metrics, except, key, connection)-->Line_27 $$ underTest.copyFromHost(host)[ FD ]
Line_11 $$ DataOutputStream dos = new DataOutputStream(bout)-->Line_18 $$ header2.write(dos)[ FD ]
Line_23 $$ InMemoryMapOutput<Text, Text> mapOut = new InMemoryMapOutput<Text, Text>(job, map1ID, mm, 8, null, true)-->Line_25 $$ when(mm.reserve(eq(map1ID), anyLong(), anyInt())).thenReturn(mapOut)[ FD ]
Line_11 $$ DataOutputStream dos = new DataOutputStream(bout)-->Line_13 $$ header.write(dos)[ FD ]
Line_16 $$ ShuffleHeader header2 = new ShuffleHeader(map2ID.toString(), 14, 10, 1)-->Line_18 $$ header2.write(dos)[ FD ]
Line_10 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_21 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())[ FD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_9 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 14, 10, 1)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_5 $$ when(connection.getResponseCode()).thenReturn(200)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_13 $$ header.write(dos)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_20 $$ ios2.finish()[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_23 $$ InMemoryMapOutput<Text, Text> mapOut = new InMemoryMapOutput<Text, Text>(job, map1ID, mm, 8, null, true)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_19 $$ ios2.write("MAPDATA456".getBytes())[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_25 $$ when(mm.reserve(eq(map1ID), anyLong(), anyInt())).thenReturn(mapOut)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_6 $$ when(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_NAME)).thenReturn(ShuffleHeader.DEFAULT_HTTP_HEADER_NAME)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_29 $$ verify(ss).copyFailed(map1ID, host, true, false)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_30 $$ verify(ss, never()).copyFailed(map2ID, host, true, false)[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_10 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testCopyFromHostExtraBytes() throws Exception -->Line_31 $$ verify(ss).putBackKnownMapOutput(any(MapHost.class), eq(map1ID))[ CD ]
