Line_12 $$ DataOutputStream dos = new DataOutputStream(bout)-->Line_19 $$ header2.write(dos)[ FD ]
Line_13 $$ IFileOutputStream ios = new IFileOutputStream(dos)-->Line_16 $$ ios.finish()[ FD ]
Line_26 $$ InMemoryMapOutput<Text, Text> mapOut2 = new InMemoryMapOutput<Text, Text>(job, map2ID, mm, 10, null, true)-->Line_28 $$ when(mm.reserve(eq(map2ID), anyLong(), anyInt())).thenReturn(mapOut2)[ FD ]
Line_10 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 14, 10, 1)-->Line_14 $$ header.write(dos)[ FD ]
Line_18 $$ IFileOutputStream ios2 = new IFileOutputStream(dos)-->Line_21 $$ ios2.finish()[ FD ]
Line_13 $$ IFileOutputStream ios = new IFileOutputStream(dos)-->Line_15 $$ ios.write("MAPDATA123".getBytes())[ FD ]
Line_11 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_22 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())[ FD ]
Line_5 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)-->Line_9 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ FD ]
Line_17 $$ ShuffleHeader header2 = new ShuffleHeader(map2ID.toString(), 14, 10, 1)-->Line_19 $$ header2.write(dos)[ FD ]
Line_4 $$ Fetcher<Text, Text> underTest = new FakeFetcher<Text, Text>(job, id, ss, mm, r, metrics, except, key, connection)-->Line_29 $$ underTest.copyFromHost(host)[ FD ]
Line_22 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())-->Line_23 $$ when(connection.getInputStream()).thenReturn(in)[ FD ]
Line_12 $$ DataOutputStream dos = new DataOutputStream(bout)-->Line_14 $$ header.write(dos)[ FD ]
Line_18 $$ IFileOutputStream ios2 = new IFileOutputStream(dos)-->Line_20 $$ ios2.write("MAPDATA456".getBytes())[ FD ]
