Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_7 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 10, 10, 1)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_5 $$ when(connection.getResponseCode()).thenReturn(200)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_15 $$ underTest.copyFromHost(host)[ CD ]
Line_8 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()-->Line_10 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())[ FD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_11 $$ when(connection.getInputStream()).thenReturn(in)[ CD ]
Line_3 $$ Fetcher<Text, Text> underTest = new FakeFetcher<Text, Text>(job, id, ss, mm, r, metrics, except, key, connection)-->Line_15 $$ underTest.copyFromHost(host)[ FD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_6 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_9 $$ header.write(new DataOutputStream(bout))[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_17 $$ verify(allErrs, never()).increment(1)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_13 $$ when(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_VERSION)).thenReturn(ShuffleHeader.DEFAULT_HTTP_HEADER_VERSION)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_8 $$ ByteArrayOutputStream bout = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_18 $$ verify(ss, never()).copyFailed(map1ID, host, true, false)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_19 $$ verify(ss, never()).copyFailed(map2ID, host, true, false)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_10 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_20 $$ verify(ss).putBackKnownMapOutput(any(MapHost.class), eq(map1ID))[ CD ]
Line_10 $$ ByteArrayInputStream in = new ByteArrayInputStream(bout.toByteArray())-->Line_11 $$ when(connection.getInputStream()).thenReturn(in)[ FD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_21 $$ verify(ss).putBackKnownMapOutput(any(MapHost.class), eq(map2ID))[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_4 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_14 $$ when(mm.reserve(any(TaskAttemptID.class), anyLong(), anyInt())).thenReturn(null)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_16 $$ verify(connection).addRequestProperty(SecureShuffleUtils.HTTP_HEADER_URL_HASH, encHash)[ CD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_3 $$ Fetcher<Text, Text> underTest = new FakeFetcher<Text, Text>(job, id, ss, mm, r, metrics, except, key, connection)[ CD ]
Line_4 $$ String replyHash = SecureShuffleUtils.generateHash(encHash.getBytes(), key)-->Line_6 $$ when(connection.getHeaderField(SecureShuffleUtils.HTTP_HEADER_REPLY_URL_HASH)).thenReturn(replyHash)[ FD ]
Line_2 $$ public void testCopyFromHostWait() throws Exception -->Line_12 $$ when(connection.getHeaderField(ShuffleHeader.HTTP_HEADER_NAME)).thenReturn(ShuffleHeader.DEFAULT_HTTP_HEADER_NAME)[ CD ]
Line_7 $$ ShuffleHeader header = new ShuffleHeader(map1ID.toString(), 10, 10, 1)-->Line_9 $$ header.write(new DataOutputStream(bout))[ FD ]
