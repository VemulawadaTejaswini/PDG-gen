Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_21 $$ assertNull(parser.nextToken())[ FD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_11 $$ os = new ByteArrayOutputStream()[ CD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())[ CD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_8 $$ generator.writeEndObject()[ FD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_12 $$ try (XContentGenerator generator = xcontentType().xContent().createGenerator(os)) [ FD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_20 $$ assertEquals(Token.END_OBJECT, parser.nextToken())[ CD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_6 $$ generator.writeFieldName("foo")[ FD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_10 $$ final byte[] rawData = os.toByteArray()[ CD ]
Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_18 $$ assertEquals("foo", parser.currentName())[ FD ]
Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_20 $$ assertEquals(Token.END_OBJECT, parser.nextToken())[ FD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()[ CD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) [ FD ]
Line_11 $$ os = new ByteArrayOutputStream()-->Line_12 $$ try (XContentGenerator generator = xcontentType().xContent().createGenerator(os)) [ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_13 $$ generator.writeRawValue(new BytesArray(rawData))[ FD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_10 $$ final byte[] rawData = os.toByteArray()[ FD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_11 $$ os = new ByteArrayOutputStream()[ FD ]
Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_16 $$ assertEquals(Token.START_OBJECT, parser.nextToken())[ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_5 $$ generator.writeStartObject()[ FD ]
Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) -->Line_7 $$ generator.writeNull()[ FD ]
Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_19 $$ assertEquals(Token.VALUE_NULL, parser.nextToken())[ FD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_16 $$ assertEquals(Token.START_OBJECT, parser.nextToken())[ CD ]
Line_11 $$ os = new ByteArrayOutputStream()-->Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())[ FD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_4 $$ try (XContentGenerator generator = source.createGenerator(os)) [ FD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_18 $$ assertEquals("foo", parser.currentName())[ CD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_19 $$ assertEquals(Token.VALUE_NULL, parser.nextToken())[ CD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_21 $$ assertNull(parser.nextToken())[ CD ]
Line_2 $$ void doTestRawValue(XContent source) throws Exception -->Line_17 $$ assertEquals(Token.FIELD_NAME, parser.nextToken())[ CD ]
Line_3 $$ ByteArrayOutputStream os = new ByteArrayOutputStream()-->Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())[ FD ]
Line_15 $$ XContentParser parser = xcontentType().xContent().createParser(os.toByteArray())-->Line_17 $$ assertEquals(Token.FIELD_NAME, parser.nextToken())[ FD ]
