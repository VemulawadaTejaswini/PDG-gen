Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_13 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_12 $$ test = new TaskID(jid, false, 1)-->Line_21 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_14 $$ test = new TaskID("001", 1, false, 1)-->Line_15 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_12 $$ test = new TaskID(jid, false, 1)-->Line_15 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_16 $$ test = new TaskID("001", 1, true, 1)[ FD ]
Line_20 $$ TaskID ti = TaskID.read(new DataInputStream(new ByteArrayInputStream(out.toByteArray())))-->Line_21 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_14 $$ test = new TaskID("001", 1, false, 1)-->Line_19 $$ test.write(new DataOutputStream(out))[ FD ]
Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_12 $$ test = new TaskID(jid, false, 1)[ FD ]
Line_14 $$ test = new TaskID("001", 1, false, 1)-->Line_16 $$ test = new TaskID("001", 1, true, 1)[ FD ]
Line_16 $$ test = new TaskID("001", 1, true, 1)-->Line_21 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_16 $$ test = new TaskID("001", 1, true, 1)-->Line_19 $$ test.write(new DataOutputStream(out))[ FD ]
Line_16 $$ test = new TaskID("001", 1, true, 1)-->Line_17 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_14 $$ test = new TaskID("001", 1, false, 1)-->Line_21 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_12 $$ test = new TaskID(jid, false, 1)-->Line_14 $$ test = new TaskID("001", 1, false, 1)[ FD ]
Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_15 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_11 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_14 $$ test = new TaskID("001", 1, false, 1)[ FD ]
Line_12 $$ test = new TaskID(jid, false, 1)-->Line_19 $$ test.write(new DataOutputStream(out))[ FD ]
Line_12 $$ test = new TaskID(jid, false, 1)-->Line_16 $$ test = new TaskID("001", 1, true, 1)[ FD ]
Line_12 $$ test = new TaskID(jid, false, 1)-->Line_13 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_19 $$ test.write(new DataOutputStream(out))[ FD ]
Line_12 $$ test = new TaskID(jid, false, 1)-->Line_17 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_18 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_20 $$ TaskID ti = TaskID.read(new DataInputStream(new ByteArrayInputStream(out.toByteArray())))[ FD ]
Line_14 $$ test = new TaskID("001", 1, false, 1)-->Line_17 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_21 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_10 $$ TaskID test = new TaskID(jid, true, 1)-->Line_17 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
