Line_14 $$ TaskID ti = TaskID.read(new DataInputStream(new ByteArrayInputStream(out.toByteArray())))-->Line_15 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_10 $$ test = new TaskID("001", 1, true, 1)-->Line_11 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_8 $$ test = new TaskID("001", 1, false, 1)-->Line_10 $$ test = new TaskID("001", 1, true, 1)[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_6 $$ test = new TaskID(jid, false, 1)[ CD ]
Line_12 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_14 $$ TaskID ti = TaskID.read(new DataInputStream(new ByteArrayInputStream(out.toByteArray())))[ FD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_15 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_18 $$ assertEquals("003_0001_m_000004", TaskID.getTaskIDsPatternWOPrefix("003", 1, TaskType.MAP, 4).toString())[ CD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_9 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_9 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ CD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_11 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ CD ]
Line_6 $$ test = new TaskID(jid, false, 1)-->Line_11 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_8 $$ test = new TaskID("001", 1, false, 1)-->Line_13 $$ test.write(new DataOutputStream(out))[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_17 $$ assertEquals("task_003_0001_m_000004", TaskID.getTaskIDsPattern("003", 1, TaskType.MAP, 4))[ CD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_7 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ CD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_5 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ CD ]
Line_6 $$ test = new TaskID(jid, false, 1)-->Line_13 $$ test.write(new DataOutputStream(out))[ FD ]
Line_6 $$ test = new TaskID(jid, false, 1)-->Line_10 $$ test = new TaskID("001", 1, true, 1)[ FD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_5 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_6 $$ test = new TaskID(jid, false, 1)-->Line_7 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_6 $$ test = new TaskID(jid, false, 1)-->Line_15 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_13 $$ test.write(new DataOutputStream(out))[ CD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_10 $$ test = new TaskID("001", 1, true, 1)[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_15 $$ assertEquals(ti.toString(), test.toString())[ CD ]
Line_6 $$ test = new TaskID(jid, false, 1)-->Line_9 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_6 $$ test = new TaskID(jid, false, 1)[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_10 $$ test = new TaskID("001", 1, true, 1)[ CD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_14 $$ TaskID ti = TaskID.read(new DataInputStream(new ByteArrayInputStream(out.toByteArray())))[ CD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_16 $$ assertEquals("task_001_0001_m_000002", TaskID.getTaskIDsPattern("001", 1, true, 2))[ CD ]
Line_10 $$ test = new TaskID("001", 1, true, 1)-->Line_13 $$ test.write(new DataOutputStream(out))[ FD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_13 $$ test.write(new DataOutputStream(out))[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_3 $$ JobID jid = new JobID()[ CD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_12 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_8 $$ test = new TaskID("001", 1, false, 1)-->Line_15 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_10 $$ test = new TaskID("001", 1, true, 1)-->Line_15 $$ assertEquals(ti.toString(), test.toString())[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_4 $$ TaskID test = new TaskID(jid, true, 1)[ CD ]
Line_8 $$ test = new TaskID("001", 1, false, 1)-->Line_9 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_8 $$ test = new TaskID("001", 1, false, 1)[ FD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_11 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_6 $$ test = new TaskID(jid, false, 1)-->Line_8 $$ test = new TaskID("001", 1, false, 1)[ FD ]
Line_2 $$ public void testDepricatedMethods() throws IOException -->Line_8 $$ test = new TaskID("001", 1, false, 1)[ CD ]
Line_8 $$ test = new TaskID("001", 1, false, 1)-->Line_11 $$ assertEquals(test.getTaskType(), TaskType.MAP)[ FD ]
Line_4 $$ TaskID test = new TaskID(jid, true, 1)-->Line_7 $$ assertEquals(test.getTaskType(), TaskType.REDUCE)[ FD ]
