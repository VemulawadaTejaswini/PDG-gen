Line_8 $$ for (long v : testValues) -->Line_15 $$ assertEquals(v, in.readUnsignedVInt())[ FD ]
Line_2 $$ public void testUnsignedVInt() throws Exception -->Line_12 $$ ndosp.flush()[ CD ]
Line_2 $$ public void testUnsignedVInt() throws Exception -->Line_13 $$ DataInputBuffer in = new DataInputBuffer(generated.toByteArray())[ CD ]
Line_2 $$ public void testUnsignedVInt() throws Exception -->Line_3 $$ setUp()[ CD ]
Line_2 $$ public void testUnsignedVInt() throws Exception -->Line_14 $$ assertEquals(expectedSize, generated.toByteArray().length)[ CD ]
Line_7 $$ int expectedSize = 0-->Line_9 $$ expectedSize += VIntCoding.computeUnsignedVIntSize(v)[ FD ]
Line_8 $$ for (long v : testValues) -->Line_9 $$ expectedSize += VIntCoding.computeUnsignedVIntSize(v)[ FD ]
Line_8 $$ for (long v : testValues) -->Line_10 $$ ndosp.writeUnsignedVInt(v)[ FD ]
Line_2 $$ public void testUnsignedVInt() throws Exception -->Line_4 $$ long[] testValues = new long[] [ CD ]
Line_13 $$ DataInputBuffer in = new DataInputBuffer(generated.toByteArray())-->Line_15 $$ assertEquals(v, in.readUnsignedVInt())[ FD ]
Line_2 $$ public void testUnsignedVInt() throws Exception -->Line_7 $$ int expectedSize = 0[ CD ]
Line_4 $$ long[] testValues = new long[] -->Line_6 $$ testValues = enrich(testValues)[ FD ]
Line_2 $$ public void testUnsignedVInt() throws Exception -->Line_6 $$ testValues = enrich(testValues)[ CD ]
Line_9 $$ expectedSize += VIntCoding.computeUnsignedVIntSize(v)-->Line_14 $$ assertEquals(expectedSize, generated.toByteArray().length)[ FD ]
Line_7 $$ int expectedSize = 0-->Line_14 $$ assertEquals(expectedSize, generated.toByteArray().length)[ FD ]
