Line_17 $$ java.util.zip.GZIPOutputStream gzos = null-->Line_23 $$ gzos.write(source, off, len)[ FD ]
Line_17 $$ java.util.zip.GZIPOutputStream gzos = null-->Line_24 $$ gzos.close()[ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_13 $$ throw new IllegalArgumentException(String.format(Locale.ROOT, "Cannot have offset of %d and length of %d with array of length %d", off, len, source.length))[ FD ]
Line_52 $$ int d = 0-->Line_65 $$ if (d < len) [ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_15 $$ if ((options & GZIP) != 0) [ CD ]
Line_69 $$ if (e <= outBuff.length - 1) -->Line_71 $$ System.arraycopy(outBuff, 0, finalOut, 0, e)[ CD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_65 $$ if (d < len) [ CD ]
Line_22 $$ gzos = new java.util.zip.GZIPOutputStream(b64os)-->Line_24 $$ gzos.close()[ FD ]
Line_69 $$ if (e <= outBuff.length - 1) -->Line_70 $$ byte[] finalOut = new byte[e][ CD ]
Line_53 $$ int e = 0-->Line_56 $$ for (; d < len2; d += 3, e += 4) [ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_65 $$ if (d < len) [ FD ]
Line_18 $$ Base64.OutputStream b64os = null-->Line_35 $$ b64os.close()[ FD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_57 $$ encode3to4(source, d + off, 3, outBuff, e, options)[ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_23 $$ gzos.write(source, off, len)[ FD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_67 $$ e += 4[ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_3 $$ if (source == null) [ CD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_12 $$ if (off + len > source.length) [ CD ]
Line_51 $$ byte[] outBuff = new byte[encLen]-->Line_71 $$ System.arraycopy(outBuff, 0, finalOut, 0, e)[ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_3 $$ if (source == null) [ FD ]
Line_58 $$ lineLength += 4-->Line_62 $$ lineLength = 0[ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_6 $$ if (off < 0) [ FD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_58 $$ lineLength += 4[ CD ]
Line_53 $$ int e = 0-->Line_67 $$ e += 4[ FD ]
Line_22 $$ gzos = new java.util.zip.GZIPOutputStream(b64os)-->Line_23 $$ gzos.write(source, off, len)[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_53 $$ int e = 0[ CD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_56 $$ for (; d < len2; d += 3, e += 4) [ CD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_59 $$ if (breakLines && lineLength >= MAX_LINE_LENGTH) [ CD ]
Line_53 $$ int e = 0-->Line_66 $$ encode3to4(source, d + off, len - d, outBuff, e, options)[ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_9 $$ if (len < 0) [ FD ]
Line_17 $$ java.util.zip.GZIPOutputStream gzos = null-->Line_22 $$ gzos = new java.util.zip.GZIPOutputStream(b64os)[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_18 $$ Base64.OutputStream b64os = null[ CD ]
Line_16 $$ java.io.ByteArrayOutputStream baos = null-->Line_43 $$ return baos.toByteArray()[ FD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_65 $$ if (d < len) [ FD ]
Line_53 $$ int e = 0-->Line_69 $$ if (e <= outBuff.length - 1) [ FD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_69 $$ if (e <= outBuff.length - 1) [ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_43 $$ return baos.toByteArray()[ CD ]
Line_59 $$ if (breakLines && lineLength >= MAX_LINE_LENGTH) -->Line_61 $$ e++[ CD ]
Line_22 $$ gzos = new java.util.zip.GZIPOutputStream(b64os)-->Line_31 $$ gzos.close()[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_69 $$ if (e <= outBuff.length - 1) [ CD ]
Line_69 $$ if (e <= outBuff.length - 1) -->Line_72 $$ return finalOut[ CD ]
Line_55 $$ int lineLength = 0-->Line_62 $$ lineLength = 0[ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_66 $$ encode3to4(source, d + off, len - d, outBuff, e, options)[ FD ]
Line_53 $$ int e = 0-->Line_61 $$ e++[ FD ]
Line_55 $$ int lineLength = 0-->Line_58 $$ lineLength += 4[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_47 $$ int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0)[ CD ]
Line_70 $$ byte[] finalOut = new byte[e]-->Line_71 $$ System.arraycopy(outBuff, 0, finalOut, 0, e)[ FD ]
Line_51 $$ byte[] outBuff = new byte[encLen]-->Line_66 $$ encode3to4(source, d + off, len - d, outBuff, e, options)[ FD ]
Line_69 $$ if (e <= outBuff.length - 1) -->Line_74 $$ return outBuff[ CD ]
Line_16 $$ java.io.ByteArrayOutputStream baos = null-->Line_39 $$ baos.close()[ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_57 $$ encode3to4(source, d + off, 3, outBuff, e, options)[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_16 $$ java.io.ByteArrayOutputStream baos = null[ CD ]
Line_46 $$ boolean breakLines = (options & DO_BREAK_LINES) != 0-->Line_59 $$ if (breakLines && lineLength >= MAX_LINE_LENGTH) [ FD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_71 $$ System.arraycopy(outBuff, 0, finalOut, 0, e)[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_51 $$ byte[] outBuff = new byte[encLen][ CD ]
Line_48 $$ if (breakLines) -->Line_49 $$ encLen += encLen / MAX_LINE_LENGTH[ CD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_9 $$ if (len < 0) [ CD ]
Line_17 $$ java.util.zip.GZIPOutputStream gzos = null-->Line_31 $$ gzos.close()[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_17 $$ java.util.zip.GZIPOutputStream gzos = null[ CD ]
Line_59 $$ if (breakLines && lineLength >= MAX_LINE_LENGTH) -->Line_62 $$ lineLength = 0[ CD ]
Line_52 $$ int d = 0-->Line_56 $$ for (; d < len2; d += 3, e += 4) [ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_54 $$ int len2 = len - 2[ CD ]
Line_20 $$ baos = new java.io.ByteArrayOutputStream()-->Line_39 $$ baos.close()[ FD ]
Line_65 $$ if (d < len) -->Line_67 $$ e += 4[ CD ]
Line_16 $$ java.io.ByteArrayOutputStream baos = null-->Line_20 $$ baos = new java.io.ByteArrayOutputStream()[ FD ]
Line_47 $$ int encLen = (len / 3) * 4 + (len % 3 > 0 ? 4 : 0)-->Line_49 $$ encLen += encLen / MAX_LINE_LENGTH[ FD ]
Line_67 $$ e += 4-->Line_71 $$ System.arraycopy(outBuff, 0, finalOut, 0, e)[ FD ]
Line_51 $$ byte[] outBuff = new byte[encLen]-->Line_57 $$ encode3to4(source, d + off, 3, outBuff, e, options)[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_46 $$ boolean breakLines = (options & DO_BREAK_LINES) != 0[ CD ]
Line_54 $$ int len2 = len - 2-->Line_56 $$ for (; d < len2; d += 3, e += 4) [ FD ]
Line_53 $$ int e = 0-->Line_71 $$ System.arraycopy(outBuff, 0, finalOut, 0, e)[ FD ]
Line_18 $$ Base64.OutputStream b64os = null-->Line_21 $$ b64os = new Base64.OutputStream(baos, ENCODE | options)[ FD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_57 $$ encode3to4(source, d + off, 3, outBuff, e, options)[ CD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_61 $$ e++[ FD ]
Line_67 $$ e += 4-->Line_69 $$ if (e <= outBuff.length - 1) [ FD ]
Line_2 $$ public static byte[] encodeBytesToBytes(byte[] source, int off, int len, int options) throws java.io.IOException -->Line_6 $$ if (off < 0) [ CD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_52 $$ int d = 0[ CD ]
Line_65 $$ if (d < len) -->Line_66 $$ encode3to4(source, d + off, len - d, outBuff, e, options)[ CD ]
Line_53 $$ int e = 0-->Line_57 $$ encode3to4(source, d + off, 3, outBuff, e, options)[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_48 $$ if (breakLines) [ CD ]
Line_20 $$ baos = new java.io.ByteArrayOutputStream()-->Line_43 $$ return baos.toByteArray()[ FD ]
Line_21 $$ b64os = new Base64.OutputStream(baos, ENCODE | options)-->Line_35 $$ b64os.close()[ FD ]
Line_56 $$ for (; d < len2; d += 3, e += 4) -->Line_66 $$ encode3to4(source, d + off, len - d, outBuff, e, options)[ FD ]
Line_15 $$ if ((options & GZIP) != 0) -->Line_55 $$ int lineLength = 0[ CD ]
