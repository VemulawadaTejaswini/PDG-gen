Line_53 $$ if (timer.getScheduleExpression().getEnd() != null) -->Line_54 $$ writer.writeAttribute(SCHEDULE_EXPR_END_DATE, Long.toString(timer.getScheduleExpression().getEnd().getTime()))[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_40 $$ writer.writeAttribute(NEXT_DATE, Long.toString(timer.getNextExpiration().getTime()))[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_39 $$ if (timer.getNextExpiration() != null) [ FD ]
Line_39 $$ if (timer.getNextExpiration() != null) -->Line_40 $$ writer.writeAttribute(NEXT_DATE, Long.toString(timer.getNextExpiration().getTime()))[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_67 $$ writer.writeEndElement()[ FD ]
Line_13 $$ info = Base64.getEncoder().encodeToString(out.toByteArray())-->Line_61 $$ writer.writeCharacters(info)[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_29 $$ EjbLogger.ROOT_LOGGER.failedToPersistTimer(timer, e)[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_47 $$ writer.writeAttribute(SCHEDULE_EXPR_DAY_OF_MONTH, timer.getScheduleExpression().getDayOfMonth())[ CD ]
Line_59 $$ if (info != null) -->Line_62 $$ writer.writeEndElement()[ CD ]
Line_69 $$ if (timer.isAutoTimer()) -->Line_78 $$ writer.writeEndElement()[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_57 $$ writer.writeAttribute(SCHEDULE_EXPR_TIMEZONE, timer.getScheduleExpression().getTimezone())[ FD ]
Line_7 $$ Marshaller marshaller = factory.createMarshaller(configuration)-->Line_23 $$ marshaller.start(new OutputStreamByteOutput(out))[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_73 $$ for (Class<?> param : timer.getTimeoutMethod().getParameterTypes()) [ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_43 $$ writer.writeAttribute(SCHEDULE_EXPR_SECOND, timer.getScheduleExpression().getSecond())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_53 $$ if (timer.getScheduleExpression().getEnd() != null) [ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_61 $$ writer.writeCharacters(info)[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_80 $$ writer.writeEndElement()[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_34 $$ writer.writeAttribute(TIMED_OBJECT_ID, timer.getTimedObjectId())[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_45 $$ writer.writeAttribute(SCHEDULE_EXPR_HOUR, timer.getScheduleExpression().getHour())[ FD ]
Line_69 $$ if (timer.isAutoTimer()) -->Line_70 $$ writer.writeStartElement(TIMEOUT_METHOD)[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_33 $$ writer.writeStartElement(CALENDAR_TIMER)[ CD ]
Line_4 $$ String primaryKey = null-->Line_66 $$ writer.writeCharacters(primaryKey)[ FD ]
Line_7 $$ Marshaller marshaller = factory.createMarshaller(configuration)-->Line_12 $$ marshaller.flush()[ FD ]
Line_3 $$ String info = null-->Line_61 $$ writer.writeCharacters(info)[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_69 $$ if (timer.isAutoTimer()) [ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_80 $$ writer.writeEndElement()[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_76 $$ writer.writeEndElement()[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_3 $$ String info = null[ CD ]
Line_4 $$ String primaryKey = null-->Line_64 $$ if (primaryKey != null) [ FD ]
Line_7 $$ Marshaller marshaller = factory.createMarshaller(configuration)-->Line_9 $$ marshaller.start(new OutputStreamByteOutput(out))[ FD ]
Line_3 $$ String info = null-->Line_13 $$ info = Base64.getEncoder().encodeToString(out.toByteArray())[ FD ]
Line_27 $$ primaryKey = Base64.getEncoder().encodeToString(out.toByteArray())-->Line_64 $$ if (primaryKey != null) [ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_54 $$ writer.writeAttribute(SCHEDULE_EXPR_END_DATE, Long.toString(timer.getScheduleExpression().getEnd().getTime()))[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_72 $$ writer.writeAttribute(NAME, timer.getTimeoutMethod().getName())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_69 $$ if (timer.isAutoTimer()) [ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_71 $$ writer.writeAttribute(DECLARING_CLASS, timer.getTimeoutMethod().getDeclaringClass().getName())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_36 $$ if (timer.getInitialExpiration() != null) [ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_33 $$ writer.writeStartElement(CALENDAR_TIMER)[ FD ]
Line_3 $$ String info = null-->Line_59 $$ if (info != null) [ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_59 $$ if (info != null) [ CD ]
Line_69 $$ if (timer.isAutoTimer()) -->Line_71 $$ writer.writeAttribute(DECLARING_CLASS, timer.getTimeoutMethod().getDeclaringClass().getName())[ CD ]
Line_36 $$ if (timer.getInitialExpiration() != null) -->Line_37 $$ writer.writeAttribute(INITIAL_DATE, Long.toString(timer.getInitialExpiration().getTime()))[ CD ]
Line_64 $$ if (primaryKey != null) -->Line_67 $$ writer.writeEndElement()[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_51 $$ writer.writeAttribute(SCHEDULE_EXPR_START_DATE, Long.toString(timer.getScheduleExpression().getStart().getTime()))[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_19 $$ if (timer.getPrimaryKey() != null) [ FD ]
Line_56 $$ if (timer.getScheduleExpression().getTimezone() != null) -->Line_57 $$ writer.writeAttribute(SCHEDULE_EXPR_TIMEZONE, timer.getScheduleExpression().getTimezone())[ CD ]
Line_64 $$ if (primaryKey != null) -->Line_65 $$ writer.writeStartElement(PRIMARY_KEY)[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_45 $$ writer.writeAttribute(SCHEDULE_EXPR_HOUR, timer.getScheduleExpression().getHour())[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_42 $$ writer.writeAttribute(TIMER_STATE, timer.getState().name())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_10 $$ marshaller.writeObject(timer.getInfo())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_50 $$ if (timer.getScheduleExpression().getStart() != null) [ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_46 $$ writer.writeAttribute(SCHEDULE_EXPR_DAY_OF_WEEK, timer.getScheduleExpression().getDayOfWeek())[ FD ]
Line_27 $$ primaryKey = Base64.getEncoder().encodeToString(out.toByteArray())-->Line_66 $$ writer.writeCharacters(primaryKey)[ FD ]
Line_7 $$ Marshaller marshaller = factory.createMarshaller(configuration)-->Line_24 $$ marshaller.writeObject(timer.getPrimaryKey())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_62 $$ writer.writeEndElement()[ FD ]
Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_13 $$ info = Base64.getEncoder().encodeToString(out.toByteArray())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_24 $$ marshaller.writeObject(timer.getPrimaryKey())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_39 $$ if (timer.getNextExpiration() != null) [ CD ]
Line_50 $$ if (timer.getScheduleExpression().getStart() != null) -->Line_51 $$ writer.writeAttribute(SCHEDULE_EXPR_START_DATE, Long.toString(timer.getScheduleExpression().getStart().getTime()))[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_4 $$ String primaryKey = null[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_78 $$ writer.writeEndElement()[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_70 $$ writer.writeStartElement(TIMEOUT_METHOD)[ FD ]
Line_4 $$ String primaryKey = null-->Line_27 $$ primaryKey = Base64.getEncoder().encodeToString(out.toByteArray())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_56 $$ if (timer.getScheduleExpression().getTimezone() != null) [ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_66 $$ writer.writeCharacters(primaryKey)[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_56 $$ if (timer.getScheduleExpression().getTimezone() != null) [ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_35 $$ writer.writeAttribute(TIMER_ID, timer.getId())[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_42 $$ writer.writeAttribute(TIMER_STATE, timer.getState().name())[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_44 $$ writer.writeAttribute(SCHEDULE_EXPR_MINUTE, timer.getScheduleExpression().getMinute())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_49 $$ writer.writeAttribute(SCHEDULE_EXPR_YEAR, timer.getScheduleExpression().getYear())[ CD ]
Line_59 $$ if (info != null) -->Line_61 $$ writer.writeCharacters(info)[ CD ]
Line_69 $$ if (timer.isAutoTimer()) -->Line_72 $$ writer.writeAttribute(NAME, timer.getTimeoutMethod().getName())[ CD ]
Line_13 $$ info = Base64.getEncoder().encodeToString(out.toByteArray())-->Line_59 $$ if (info != null) [ FD ]
Line_7 $$ Marshaller marshaller = factory.createMarshaller(configuration)-->Line_11 $$ marshaller.finish()[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_50 $$ if (timer.getScheduleExpression().getStart() != null) [ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_64 $$ if (primaryKey != null) [ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_60 $$ writer.writeStartElement(INFO)[ FD ]
Line_7 $$ Marshaller marshaller = factory.createMarshaller(configuration)-->Line_26 $$ marshaller.flush()[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_48 $$ writer.writeAttribute(SCHEDULE_EXPR_MONTH, timer.getScheduleExpression().getMonth())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_5 $$ if (timer.getInfo() != null) [ FD ]
Line_7 $$ Marshaller marshaller = factory.createMarshaller(configuration)-->Line_25 $$ marshaller.finish()[ FD ]
Line_59 $$ if (info != null) -->Line_60 $$ writer.writeStartElement(INFO)[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_49 $$ writer.writeAttribute(SCHEDULE_EXPR_YEAR, timer.getScheduleExpression().getYear())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_47 $$ writer.writeAttribute(SCHEDULE_EXPR_DAY_OF_MONTH, timer.getScheduleExpression().getDayOfMonth())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_53 $$ if (timer.getScheduleExpression().getEnd() != null) [ CD ]
Line_64 $$ if (primaryKey != null) -->Line_66 $$ writer.writeCharacters(primaryKey)[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_5 $$ if (timer.getInfo() != null) [ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_19 $$ if (timer.getPrimaryKey() != null) [ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_65 $$ writer.writeStartElement(PRIMARY_KEY)[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_44 $$ writer.writeAttribute(SCHEDULE_EXPR_MINUTE, timer.getScheduleExpression().getMinute())[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_37 $$ writer.writeAttribute(INITIAL_DATE, Long.toString(timer.getInitialExpiration().getTime()))[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_48 $$ writer.writeAttribute(SCHEDULE_EXPR_MONTH, timer.getScheduleExpression().getMonth())[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_35 $$ writer.writeAttribute(TIMER_ID, timer.getId())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_74 $$ writer.writeStartElement(PARAMETER)[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_36 $$ if (timer.getInitialExpiration() != null) [ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_75 $$ writer.writeAttribute(TYPE, param.getName())[ FD ]
Line_73 $$ for (Class<?> param : timer.getTimeoutMethod().getParameterTypes()) -->Line_75 $$ writer.writeAttribute(TYPE, param.getName())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_34 $$ writer.writeAttribute(TIMED_OBJECT_ID, timer.getTimedObjectId())[ FD ]
Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_27 $$ primaryKey = Base64.getEncoder().encodeToString(out.toByteArray())[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_46 $$ writer.writeAttribute(SCHEDULE_EXPR_DAY_OF_WEEK, timer.getScheduleExpression().getDayOfWeek())[ CD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_15 $$ EjbLogger.ROOT_LOGGER.failedToPersistTimer(timer, e)[ FD ]
Line_2 $$ private void writeCalendarTimer(XMLExtendedStreamWriter writer, CalendarTimer timer) throws XMLStreamException -->Line_43 $$ writer.writeAttribute(SCHEDULE_EXPR_SECOND, timer.getScheduleExpression().getSecond())[ CD ]
Line_7 $$ Marshaller marshaller = factory.createMarshaller(configuration)-->Line_10 $$ marshaller.writeObject(timer.getInfo())[ FD ]
