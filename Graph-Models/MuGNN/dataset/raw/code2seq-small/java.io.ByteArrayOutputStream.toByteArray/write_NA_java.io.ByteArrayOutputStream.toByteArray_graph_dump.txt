Line_2 $$ public final void write(DataOutput out) throws IOException -->Line_12 $$ out.writeInt(compressed.length)[ FD ]
Line_3 $$ if (compressed == null) -->Line_9 $$ deflater.end()[ CD ]
Line_3 $$ if (compressed == null) -->Line_10 $$ compressed = deflated.toByteArray()[ CD ]
Line_2 $$ public final void write(DataOutput out) throws IOException -->Line_13 $$ out.write(compressed)[ CD ]
Line_6 $$ DataOutputStream dout = new DataOutputStream(new DeflaterOutputStream(deflated, deflater))-->Line_7 $$ writeCompressed(dout)[ FD ]
Line_3 $$ if (compressed == null) -->Line_4 $$ ByteArrayOutputStream deflated = new ByteArrayOutputStream()[ CD ]
Line_3 $$ if (compressed == null) -->Line_6 $$ DataOutputStream dout = new DataOutputStream(new DeflaterOutputStream(deflated, deflater))[ CD ]
Line_6 $$ DataOutputStream dout = new DataOutputStream(new DeflaterOutputStream(deflated, deflater))-->Line_8 $$ dout.close()[ FD ]
Line_3 $$ if (compressed == null) -->Line_7 $$ writeCompressed(dout)[ CD ]
Line_2 $$ public final void write(DataOutput out) throws IOException -->Line_12 $$ out.writeInt(compressed.length)[ CD ]
Line_2 $$ public final void write(DataOutput out) throws IOException -->Line_13 $$ out.write(compressed)[ FD ]
Line_3 $$ if (compressed == null) -->Line_8 $$ dout.close()[ CD ]
Line_2 $$ public final void write(DataOutput out) throws IOException -->Line_3 $$ if (compressed == null) [ CD ]
Line_5 $$ Deflater deflater = new Deflater(Deflater.BEST_SPEED)-->Line_9 $$ deflater.end()[ FD ]
Line_4 $$ ByteArrayOutputStream deflated = new ByteArrayOutputStream()-->Line_10 $$ compressed = deflated.toByteArray()[ FD ]
Line_3 $$ if (compressed == null) -->Line_5 $$ Deflater deflater = new Deflater(Deflater.BEST_SPEED)[ CD ]
