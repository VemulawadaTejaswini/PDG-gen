Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)-->Line_15 $$ assertFalse(out.isMultipart())[ FD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_10 $$ assertThat(out.getLength(), equalTo((long) size))[ CD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_13 $$ assertThat(out.getFlushCount(), equalTo(1))[ CD ]
Line_3 $$ int size = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE)-->Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)[ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)-->Line_10 $$ assertThat(out.getLength(), equalTo((long) size))[ FD ]
Line_3 $$ int size = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE)-->Line_12 $$ assertThat(out.getBufferSize(), equalTo(size))[ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)-->Line_14 $$ assertThat(out.getNumberOfUploadRequests(), equalTo(1))[ FD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_15 $$ assertFalse(out.isMultipart())[ CD ]
Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(size)-->Line_7 $$ content.write(randomByte())[ FD ]
Line_6 $$ for (int i = 0; i < size; i++) -->Line_7 $$ content.write(randomByte())[ CD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_14 $$ assertThat(out.getNumberOfUploadRequests(), equalTo(1))[ CD ]
Line_3 $$ int size = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE)-->Line_6 $$ for (int i = 0; i < size; i++) [ FD ]
Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(size)-->Line_11 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ FD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)[ CD ]
Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(size)-->Line_9 $$ copy(content.toByteArray(), out)[ FD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_12 $$ assertThat(out.getBufferSize(), equalTo(size))[ CD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)-->Line_9 $$ copy(content.toByteArray(), out)[ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)-->Line_11 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ FD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_5 $$ ByteArrayOutputStream content = new ByteArrayOutputStream(size)[ CD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_6 $$ for (int i = 0; i < size; i++) [ CD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_9 $$ copy(content.toByteArray(), out)[ CD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_3 $$ int size = randomIntBetween(BUFFER_SIZE, 2 * BUFFER_SIZE)[ CD ]
Line_2 $$ public void testWriteSameDataThanBufferSize() throws IOException -->Line_11 $$ assertThat(Arrays.equals(content.toByteArray(), out.toByteArray()), equalTo(true))[ CD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)-->Line_12 $$ assertThat(out.getBufferSize(), equalTo(size))[ FD ]
Line_4 $$ MockDefaultS3OutputStream out = newS3OutputStream(size)-->Line_13 $$ assertThat(out.getFlushCount(), equalTo(1))[ FD ]
