Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_3 $$ JavaVersion version = cachedResults.get(jvm)[ CD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_7 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()[ CD ]
Line_3 $$ JavaVersion version = cachedResults.get(jvm)-->Line_15 $$ cachedResults.put(jvm, version)[ FD ]
Line_8 $$ ExecHandleBuilder builder = new ExecHandleBuilder()-->Line_12 $$ builder.setErrorOutput(outputStream)[ FD ]
Line_8 $$ ExecHandleBuilder builder = new ExecHandleBuilder()-->Line_9 $$ builder.setWorkingDir(new File(".").getAbsolutePath())[ FD ]
Line_7 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_14 $$ version = parseJavaVersionCommandOutput(jvm.getJavaExecutable().getPath(), new BufferedReader(new InputStreamReader(new ByteArrayInputStream(outputStream.toByteArray()))))[ FD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_13 $$ builder.build().start().waitForFinish().assertNormalExitValue()[ CD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_10 $$ builder.setCommandLine(jvm.getJavaExecutable(), "-version")[ CD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_11 $$ builder.setStandardOutput(new ByteArrayOutputStream())[ CD ]
Line_8 $$ ExecHandleBuilder builder = new ExecHandleBuilder()-->Line_10 $$ builder.setCommandLine(jvm.getJavaExecutable(), "-version")[ FD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_16 $$ return version[ CD ]
Line_7 $$ ByteArrayOutputStream outputStream = new ByteArrayOutputStream()-->Line_12 $$ builder.setErrorOutput(outputStream)[ FD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_4 $$ if (version != null) [ CD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_14 $$ version = parseJavaVersionCommandOutput(jvm.getJavaExecutable().getPath(), new BufferedReader(new InputStreamReader(new ByteArrayInputStream(outputStream.toByteArray()))))[ FD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_15 $$ cachedResults.put(jvm, version)[ CD ]
Line_14 $$ version = parseJavaVersionCommandOutput(jvm.getJavaExecutable().getPath(), new BufferedReader(new InputStreamReader(new ByteArrayInputStream(outputStream.toByteArray()))))-->Line_15 $$ cachedResults.put(jvm, version)[ FD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_14 $$ version = parseJavaVersionCommandOutput(jvm.getJavaExecutable().getPath(), new BufferedReader(new InputStreamReader(new ByteArrayInputStream(outputStream.toByteArray()))))[ CD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_9 $$ builder.setWorkingDir(new File(".").getAbsolutePath())[ CD ]
Line_8 $$ ExecHandleBuilder builder = new ExecHandleBuilder()-->Line_13 $$ builder.build().start().waitForFinish().assertNormalExitValue()[ FD ]
Line_3 $$ JavaVersion version = cachedResults.get(jvm)-->Line_4 $$ if (version != null) [ FD ]
Line_4 $$ if (version != null) -->Line_5 $$ return version[ CD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_3 $$ JavaVersion version = cachedResults.get(jvm)[ FD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_10 $$ builder.setCommandLine(jvm.getJavaExecutable(), "-version")[ FD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_12 $$ builder.setErrorOutput(outputStream)[ CD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_15 $$ cachedResults.put(jvm, version)[ FD ]
Line_3 $$ JavaVersion version = cachedResults.get(jvm)-->Line_14 $$ version = parseJavaVersionCommandOutput(jvm.getJavaExecutable().getPath(), new BufferedReader(new InputStreamReader(new ByteArrayInputStream(outputStream.toByteArray()))))[ FD ]
Line_2 $$ public JavaVersion getJavaVersion(JavaInfo jvm) -->Line_8 $$ ExecHandleBuilder builder = new ExecHandleBuilder()[ CD ]
Line_8 $$ ExecHandleBuilder builder = new ExecHandleBuilder()-->Line_11 $$ builder.setStandardOutput(new ByteArrayOutputStream())[ FD ]
