Line_18 $$ int numDocs = TestUtil.nextInt(r, 1, 200)-->Line_20 $$ for (int j = 0; j < numDocs; j++) [ FD ]
Line_16 $$ LineFileDocs lineFileDocs = new LineFileDocs(r)-->Line_26 $$ lineFileDocs.close()[ FD ]
Line_21 $$ String s = lineFileDocs.nextDoc().get("body")-->Line_22 $$ bos.write(s.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_3 $$ final Random r = getRandom()-->Line_4 $$ int threadCount = TestUtil.nextInt(r, 2, 6)[ FD ]
Line_17 $$ for (int i = 0; i < 10; i++) -->Line_24 $$ doTest(bos.toByteArray())[ CD ]
Line_2 $$ public void testLineDocsThreads() throws Exception -->Line_4 $$ int threadCount = TestUtil.nextInt(r, 2, 6)[ CD ]
Line_19 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_22 $$ bos.write(s.getBytes(StandardCharsets.UTF_8))[ FD ]
Line_3 $$ final Random r = getRandom()-->Line_8 $$ final long seed = r.nextLong()[ FD ]
Line_2 $$ public void testLineDocsThreads() throws Exception -->Line_5 $$ Thread[] threads = new Thread[threadCount][ CD ]
Line_2 $$ public void testLineDocsThreads() throws Exception -->Line_34 $$ startingGun.countDown()[ CD ]
Line_3 $$ final Random r = getRandom()-->Line_18 $$ int numDocs = TestUtil.nextInt(r, 1, 200)[ FD ]
Line_14 $$ Random r = new Random(seed)-->Line_18 $$ int numDocs = TestUtil.nextInt(r, 1, 200)[ FD ]
Line_6 $$ final CountDownLatch startingGun = new CountDownLatch(1)-->Line_15 $$ startingGun.await()[ FD ]
Line_6 $$ final CountDownLatch startingGun = new CountDownLatch(1)-->Line_34 $$ startingGun.countDown()[ FD ]
Line_17 $$ for (int i = 0; i < 10; i++) -->Line_19 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()[ CD ]
Line_7 $$ for (int tid = 0; tid < threadCount; tid++) -->Line_32 $$ threads[tid].start()[ CD ]
Line_20 $$ for (int j = 0; j < numDocs; j++) -->Line_21 $$ String s = lineFileDocs.nextDoc().get("body")[ CD ]
Line_2 $$ public void testLineDocsThreads() throws Exception -->Line_3 $$ final Random r = getRandom()[ CD ]
Line_2 $$ public void testLineDocsThreads() throws Exception -->Line_6 $$ final CountDownLatch startingGun = new CountDownLatch(1)[ CD ]
Line_16 $$ LineFileDocs lineFileDocs = new LineFileDocs(r)-->Line_21 $$ String s = lineFileDocs.nextDoc().get("body")[ FD ]
Line_19 $$ ByteArrayOutputStream bos = new ByteArrayOutputStream()-->Line_24 $$ doTest(bos.toByteArray())[ FD ]
Line_20 $$ for (int j = 0; j < numDocs; j++) -->Line_22 $$ bos.write(s.getBytes(StandardCharsets.UTF_8))[ CD ]
Line_7 $$ for (int tid = 0; tid < threadCount; tid++) -->Line_8 $$ final long seed = r.nextLong()[ CD ]
Line_2 $$ public void testLineDocsThreads() throws Exception -->Line_7 $$ for (int tid = 0; tid < threadCount; tid++) [ CD ]
Line_17 $$ for (int i = 0; i < 10; i++) -->Line_20 $$ for (int j = 0; j < numDocs; j++) [ CD ]
Line_17 $$ for (int i = 0; i < 10; i++) -->Line_18 $$ int numDocs = TestUtil.nextInt(r, 1, 200)[ CD ]
Line_7 $$ for (int tid = 0; tid < threadCount; tid++) -->Line_9 $$ threads[tid] = new Thread() [ CD ]
Line_4 $$ int threadCount = TestUtil.nextInt(r, 2, 6)-->Line_7 $$ for (int tid = 0; tid < threadCount; tid++) [ FD ]
