Line_4 $$ Transformer transformer = this.transformerFactory.newTransformer()-->Line_9 $$ transformer.transform(source, new StreamResult(os))[ FD ]
Line_2 $$ private Object transformAndUnmarshal(Source source, String encoding) throws IOException -->Line_13 $$ throw new MarshallingFailureException("Could not transform from [" + ClassUtils.getShortName(source.getClass()) + "]", ex)[ FD ]
Line_2 $$ private Object transformAndUnmarshal(Source source, String encoding) throws IOException -->Line_9 $$ transformer.transform(source, new StreamResult(os))[ FD ]
Line_10 $$ ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray())-->Line_11 $$ return unmarshalInputStream(is)[ FD ]
Line_4 $$ Transformer transformer = this.transformerFactory.newTransformer()-->Line_6 $$ transformer.setOutputProperty(OutputKeys.ENCODING, encoding)[ FD ]
Line_8 $$ ByteArrayOutputStream os = new ByteArrayOutputStream(1024)-->Line_10 $$ ByteArrayInputStream is = new ByteArrayInputStream(os.toByteArray())[ FD ]
Line_2 $$ private Object transformAndUnmarshal(Source source, String encoding) throws IOException -->Line_6 $$ transformer.setOutputProperty(OutputKeys.ENCODING, encoding)[ FD ]
Line_2 $$ private Object transformAndUnmarshal(Source source, String encoding) throws IOException -->Line_5 $$ if (encoding != null) [ FD ]
Line_5 $$ if (encoding != null) -->Line_6 $$ transformer.setOutputProperty(OutputKeys.ENCODING, encoding)[ CD ]
