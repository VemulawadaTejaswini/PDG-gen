Line_4 $$ boolean hashed = false-->Line_11 $$ hashed = true[ FD ]
Line_2 $$ public byte[] hash(Range<Token> range) -->Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public byte[] hash(Range<Token> range) -->Line_18 $$ return hashed ? baos.toByteArray() : null[ CD ]
Line_2 $$ public byte[] hash(Range<Token> range) -->Line_4 $$ boolean hashed = false[ CD ]
Line_8 $$ byte[] bytes = merkleTrees.get(rt).hash(range)-->Line_9 $$ if (bytes != null) [ FD ]
Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_18 $$ return hashed ? baos.toByteArray() : null[ FD ]
Line_7 $$ if (rt.intersects(range)) -->Line_8 $$ byte[] bytes = merkleTrees.get(rt).hash(range)[ CD ]
Line_9 $$ if (bytes != null) -->Line_10 $$ baos.write(bytes)[ CD ]
Line_6 $$ for (Range<Token> rt : merkleTrees.keySet()) -->Line_8 $$ byte[] bytes = merkleTrees.get(rt).hash(range)[ FD ]
Line_2 $$ public byte[] hash(Range<Token> range) -->Line_8 $$ byte[] bytes = merkleTrees.get(rt).hash(range)[ FD ]
Line_7 $$ if (rt.intersects(range)) -->Line_9 $$ if (bytes != null) [ CD ]
Line_8 $$ byte[] bytes = merkleTrees.get(rt).hash(range)-->Line_10 $$ baos.write(bytes)[ FD ]
Line_6 $$ for (Range<Token> rt : merkleTrees.keySet()) -->Line_7 $$ if (rt.intersects(range)) [ FD ]
Line_9 $$ if (bytes != null) -->Line_11 $$ hashed = true[ CD ]
Line_2 $$ public byte[] hash(Range<Token> range) -->Line_7 $$ if (rt.intersects(range)) [ FD ]
Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_10 $$ baos.write(bytes)[ FD ]
