Line_4 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_19 $$ return hashed ? baos.toByteArray() : null[ FD ]
Line_9 $$ byte[] bytes = merkleTrees.get(rt).hash(range)-->Line_10 $$ if (bytes != null) [ FD ]
Line_9 $$ byte[] bytes = merkleTrees.get(rt).hash(range)-->Line_11 $$ baos.write(bytes)[ FD ]
Line_8 $$ if (rt.intersects(range)) -->Line_9 $$ byte[] bytes = merkleTrees.get(rt).hash(range)[ CD ]
Line_10 $$ if (bytes != null) -->Line_11 $$ baos.write(bytes)[ CD ]
Line_10 $$ if (bytes != null) -->Line_12 $$ hashed = true[ CD ]
Line_8 $$ if (rt.intersects(range)) -->Line_10 $$ if (bytes != null) [ CD ]
Line_4 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_11 $$ baos.write(bytes)[ FD ]
Line_7 $$ for (Range<Token> rt : merkleTrees.keySet()) -->Line_8 $$ if (rt.intersects(range)) [ FD ]
Line_5 $$ boolean hashed = false-->Line_12 $$ hashed = true[ FD ]
Line_7 $$ for (Range<Token> rt : merkleTrees.keySet()) -->Line_9 $$ byte[] bytes = merkleTrees.get(rt).hash(range)[ FD ]
