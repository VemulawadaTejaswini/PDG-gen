Line_25 $$ Manifest manifest = readManifestFile()-->Line_28 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)[ FD ]
Line_23 $$ Package pkg = findLoadedPackage(packageName)-->Line_24 $$ if (pkg == null) [ FD ]
Line_43 $$ buffer = baos.toByteArray()-->Line_44 $$ return defineClass(name, buffer, 0, buffer.length)[ FD ]
Line_39 $$ byte[] buffer = new byte[1024]-->Line_43 $$ buffer = baos.toByteArray()[ FD ]
Line_39 $$ byte[] buffer = new byte[1024]-->Line_44 $$ return defineClass(name, buffer, 0, buffer.length)[ FD ]
Line_27 $$ final Attributes mainAttribute = manifest.getMainAttributes()-->Line_30 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ FD ]
Line_28 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)-->Line_29 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null[ FD ]
Line_4 $$ Class<?> loaded = findLoadedClass(name)-->Line_5 $$ if (loaded != null) [ FD ]
Line_26 $$ if (manifest != null) -->Line_32 $$ definePackage(packageName, null, null, null, null, null, null, null)[ CD ]
Line_37 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_43 $$ buffer = baos.toByteArray()[ FD ]
Line_26 $$ if (manifest != null) -->Line_30 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ CD ]
Line_37 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_41 $$ baos.write(buffer, 0, i)[ FD ]
Line_13 $$ InputStream resource = delegate.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_40 $$ for (int i = 0; (i = resource.read(buffer, 0, buffer.length)) != -1; ) [ FD ]
Line_13 $$ InputStream resource = delegate.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_14 $$ if (resource == null) [ FD ]
Line_26 $$ if (manifest != null) -->Line_27 $$ final Attributes mainAttribute = manifest.getMainAttributes()[ CD ]
Line_39 $$ byte[] buffer = new byte[1024]-->Line_40 $$ for (int i = 0; (i = resource.read(buffer, 0, buffer.length)) != -1; ) [ FD ]
Line_39 $$ byte[] buffer = new byte[1024]-->Line_41 $$ baos.write(buffer, 0, i)[ FD ]
Line_29 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null-->Line_30 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ FD ]
Line_26 $$ if (manifest != null) -->Line_28 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)[ CD ]
Line_13 $$ InputStream resource = delegate.getResourceAsStream(name.replace('.', '/') + ".class")-->Line_49 $$ resource.close()[ FD ]
Line_25 $$ Manifest manifest = readManifestFile()-->Line_27 $$ final Attributes mainAttribute = manifest.getMainAttributes()[ FD ]
Line_28 $$ final Attributes entryAttribute = manifest.getAttributes(packageName)-->Line_30 $$ definePackage(packageName, getDefinedAttribute(Attributes.Name.SPECIFICATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.SPECIFICATION_VENDOR, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_TITLE, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VERSION, entryAttribute, mainAttribute), getDefinedAttribute(Attributes.Name.IMPLEMENTATION_VENDOR, entryAttribute, mainAttribute), url)[ FD ]
Line_25 $$ Manifest manifest = readManifestFile()-->Line_26 $$ if (manifest != null) [ FD ]
Line_26 $$ if (manifest != null) -->Line_29 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null[ CD ]
Line_24 $$ if (pkg == null) -->Line_26 $$ if (manifest != null) [ CD ]
Line_27 $$ final Attributes mainAttribute = manifest.getMainAttributes()-->Line_29 $$ URL url = "true".equals(getDefinedAttribute(Attributes.Name.SEALED, entryAttribute, mainAttribute)) ? delegate.getResource(name.replace('.', '/') + ".class") : null[ FD ]
Line_40 $$ for (int i = 0; (i = resource.read(buffer, 0, buffer.length)) != -1; ) -->Line_41 $$ baos.write(buffer, 0, i)[ FD ]
Line_5 $$ if (loaded != null) -->Line_6 $$ return loaded[ CD ]
Line_24 $$ if (pkg == null) -->Line_25 $$ Manifest manifest = readManifestFile()[ CD ]
Line_40 $$ for (int i = 0; (i = resource.read(buffer, 0, buffer.length)) != -1; ) -->Line_41 $$ baos.write(buffer, 0, i)[ CD ]
