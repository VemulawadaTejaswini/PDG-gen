Line_4 $$ PrintWriter writer = new PrintWriter(output)-->Line_9 $$ writer.write(matcher.replaceAll(replacement))[ FD ]
Line_10 $$ if (i < (lineCount - 1)) -->Line_11 $$ writer.write(Utils.LINE_SEP)[ CD ]
Line_7 $$ for (int i = 0; i < lineCount; i++) -->Line_10 $$ if (i < (lineCount - 1)) [ CD ]
Line_2 $$ public InputStream sanitize(InputStream in) throws Exception -->Line_5 $$ String[] lines = Utils.readLines(in).toArray(new String[0])[ CD ]
Line_4 $$ PrintWriter writer = new PrintWriter(output)-->Line_14 $$ writer.close()[ FD ]
Line_4 $$ PrintWriter writer = new PrintWriter(output)-->Line_11 $$ writer.write(Utils.LINE_SEP)[ FD ]
Line_2 $$ public InputStream sanitize(InputStream in) throws Exception -->Line_3 $$ ByteArrayOutputStream output = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public InputStream sanitize(InputStream in) throws Exception -->Line_5 $$ String[] lines = Utils.readLines(in).toArray(new String[0])[ FD ]
Line_2 $$ public InputStream sanitize(InputStream in) throws Exception -->Line_7 $$ for (int i = 0; i < lineCount; i++) [ CD ]
Line_6 $$ int lineCount = lines.length-->Line_7 $$ for (int i = 0; i < lineCount; i++) [ FD ]
Line_2 $$ public InputStream sanitize(InputStream in) throws Exception -->Line_6 $$ int lineCount = lines.length[ CD ]
Line_7 $$ for (int i = 0; i < lineCount; i++) -->Line_8 $$ Matcher matcher = pattern.matcher(lines[i])[ CD ]
Line_8 $$ Matcher matcher = pattern.matcher(lines[i])-->Line_9 $$ writer.write(matcher.replaceAll(replacement))[ FD ]
Line_3 $$ ByteArrayOutputStream output = new ByteArrayOutputStream()-->Line_15 $$ return new ByteArrayInputStream(output.toByteArray())[ FD ]
Line_7 $$ for (int i = 0; i < lineCount; i++) -->Line_9 $$ writer.write(matcher.replaceAll(replacement))[ CD ]
Line_2 $$ public InputStream sanitize(InputStream in) throws Exception -->Line_4 $$ PrintWriter writer = new PrintWriter(output)[ CD ]
Line_2 $$ public InputStream sanitize(InputStream in) throws Exception -->Line_14 $$ writer.close()[ CD ]
Line_2 $$ public InputStream sanitize(InputStream in) throws Exception -->Line_15 $$ return new ByteArrayInputStream(output.toByteArray())[ CD ]
Line_7 $$ for (int i = 0; i < lineCount; i++) -->Line_10 $$ if (i < (lineCount - 1)) [ FD ]
