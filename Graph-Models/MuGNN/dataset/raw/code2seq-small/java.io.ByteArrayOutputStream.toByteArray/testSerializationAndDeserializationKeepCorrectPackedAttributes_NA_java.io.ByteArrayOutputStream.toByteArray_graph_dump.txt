Line_10 $$ EntityEntry deserializedEntry = MutableEntityEntry.deserialize(new ObjectInputStream(is), getPersistenceContextMock())-->Line_13 $$ assertEquals(true, deserializedEntry.isExistsInDatabase())[ FD ]
Line_6 $$ ObjectOutputStream oos = new ObjectOutputStream(baos)-->Line_7 $$ entityEntry.serialize(oos)[ FD ]
Line_10 $$ EntityEntry deserializedEntry = MutableEntityEntry.deserialize(new ObjectInputStream(is), getPersistenceContextMock())-->Line_12 $$ assertEquals(Status.MANAGED, deserializedEntry.getStatus())[ FD ]
Line_10 $$ EntityEntry deserializedEntry = MutableEntityEntry.deserialize(new ObjectInputStream(is), getPersistenceContextMock())-->Line_14 $$ assertEquals(true, deserializedEntry.isBeingReplicated())[ FD ]
Line_4 $$ EntityEntry entityEntry = createEntityEntry()-->Line_7 $$ entityEntry.serialize(oos)[ FD ]
Line_5 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_9 $$ InputStream is = new ByteArrayInputStream(baos.toByteArray())[ FD ]
Line_6 $$ ObjectOutputStream oos = new ObjectOutputStream(baos)-->Line_8 $$ oos.flush()[ FD ]
Line_10 $$ EntityEntry deserializedEntry = MutableEntityEntry.deserialize(new ObjectInputStream(is), getPersistenceContextMock())-->Line_11 $$ assertEquals(LockMode.OPTIMISTIC, deserializedEntry.getLockMode())[ FD ]
