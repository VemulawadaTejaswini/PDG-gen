Line_14 $$ final ByteArrayOutputStream out = fillVerif()-->Line_15 $$ final byte[] verif = out.toByteArray()[ FD ]
Line_13 $$ final FileQueue q = new FileQueue(new CombineFileSplit(paths, start, len, loc), conf)-->Line_17 $$ q.read(check, 0, verif.length)[ FD ]
Line_8 $$ final int B2 = BLOCK / 2-->Line_10 $$ start[i] += B2[ FD ]
Line_9 $$ for (int i = 0; i < NFILES; i += 2) -->Line_11 $$ len[i] -= B2[ CD ]
Line_16 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2]-->Line_18 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ FD ]
Line_13 $$ final FileQueue q = new FileQueue(new CombineFileSplit(paths, start, len, loc), conf)-->Line_19 $$ q.read(check, 0, verif.length)[ FD ]
Line_15 $$ final byte[] verif = out.toByteArray()-->Line_20 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ FD ]
Line_16 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2]-->Line_19 $$ q.read(check, 0, verif.length)[ FD ]
Line_16 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2]-->Line_20 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ FD ]
Line_8 $$ final int B2 = BLOCK / 2-->Line_11 $$ len[i] -= B2[ FD ]
Line_16 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2]-->Line_17 $$ q.read(check, 0, verif.length)[ FD ]
Line_15 $$ final byte[] verif = out.toByteArray()-->Line_18 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ FD ]
Line_9 $$ for (int i = 0; i < NFILES; i += 2) -->Line_10 $$ start[i] += B2[ CD ]
