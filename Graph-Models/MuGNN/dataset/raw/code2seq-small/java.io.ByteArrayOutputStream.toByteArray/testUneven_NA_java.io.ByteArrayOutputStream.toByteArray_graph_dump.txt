Line_7 $$ final int B2 = BLOCK / 2-->Line_9 $$ start[i] += B2[ FD ]
Line_2 $$ public void testUneven() throws Exception -->Line_5 $$ Arrays.fill(start, 0L)[ CD ]
Line_8 $$ for (int i = 0; i < NFILES; i += 2) -->Line_10 $$ len[i] -= B2[ CD ]
Line_2 $$ public void testUneven() throws Exception -->Line_6 $$ Arrays.fill(len, BLOCK)[ CD ]
Line_2 $$ public void testUneven() throws Exception -->Line_13 $$ final ByteArrayOutputStream out = fillVerif()[ CD ]
Line_2 $$ public void testUneven() throws Exception -->Line_18 $$ q.read(check, 0, verif.length)[ CD ]
Line_15 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2]-->Line_18 $$ q.read(check, 0, verif.length)[ FD ]
Line_2 $$ public void testUneven() throws Exception -->Line_19 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ CD ]
Line_2 $$ public void testUneven() throws Exception -->Line_15 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2][ CD ]
Line_2 $$ public void testUneven() throws Exception -->Line_16 $$ q.read(check, 0, verif.length)[ CD ]
Line_7 $$ final int B2 = BLOCK / 2-->Line_10 $$ len[i] -= B2[ FD ]
Line_15 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2]-->Line_19 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ FD ]
Line_15 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2]-->Line_16 $$ q.read(check, 0, verif.length)[ FD ]
Line_13 $$ final ByteArrayOutputStream out = fillVerif()-->Line_14 $$ final byte[] verif = out.toByteArray()[ FD ]
Line_15 $$ final byte[] check = new byte[NFILES / 2 * BLOCK + NFILES / 2 * B2]-->Line_17 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ FD ]
Line_8 $$ for (int i = 0; i < NFILES; i += 2) -->Line_9 $$ start[i] += B2[ CD ]
Line_2 $$ public void testUneven() throws Exception -->Line_4 $$ Arrays.fill(loc, "")[ CD ]
Line_12 $$ final FileQueue q = new FileQueue(new CombineFileSplit(paths, start, len, loc), conf)-->Line_18 $$ q.read(check, 0, verif.length)[ FD ]
Line_2 $$ public void testUneven() throws Exception -->Line_7 $$ final int B2 = BLOCK / 2[ CD ]
Line_14 $$ final byte[] verif = out.toByteArray()-->Line_17 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ FD ]
Line_2 $$ public void testUneven() throws Exception -->Line_3 $$ final Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testUneven() throws Exception -->Line_8 $$ for (int i = 0; i < NFILES; i += 2) [ CD ]
Line_12 $$ final FileQueue q = new FileQueue(new CombineFileSplit(paths, start, len, loc), conf)-->Line_16 $$ q.read(check, 0, verif.length)[ FD ]
Line_2 $$ public void testUneven() throws Exception -->Line_17 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ CD ]
Line_14 $$ final byte[] verif = out.toByteArray()-->Line_19 $$ assertArrayEquals(verif, Arrays.copyOf(check, verif.length))[ FD ]
Line_2 $$ public void testUneven() throws Exception -->Line_12 $$ final FileQueue q = new FileQueue(new CombineFileSplit(paths, start, len, loc), conf)[ CD ]
Line_2 $$ public void testUneven() throws Exception -->Line_14 $$ final byte[] verif = out.toByteArray()[ CD ]
