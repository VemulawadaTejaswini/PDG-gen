Line_2 $$ private void doVarIntTest(int value) throws IOException -->Line_5 $$ cout.writeRawVarint32(value)[ FD ]
Line_2 $$ private void doVarIntTest(int value) throws IOException -->Line_6 $$ cout.flush()[ CD ]
Line_2 $$ private void doVarIntTest(int value) throws IOException -->Line_4 $$ CodedOutputStream cout = CodedOutputStream.newInstance(baos)[ CD ]
Line_4 $$ CodedOutputStream cout = CodedOutputStream.newInstance(baos)-->Line_6 $$ cout.flush()[ FD ]
Line_2 $$ private void doVarIntTest(int value) throws IOException -->Line_8 $$ assertEquals(value, ProtoUtil.readRawVarint32(dis))[ FD ]
Line_2 $$ private void doVarIntTest(int value) throws IOException -->Line_7 $$ DataInputStream dis = new DataInputStream(new ByteArrayInputStream(baos.toByteArray()))[ CD ]
Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_4 $$ CodedOutputStream cout = CodedOutputStream.newInstance(baos)[ FD ]
Line_4 $$ CodedOutputStream cout = CodedOutputStream.newInstance(baos)-->Line_5 $$ cout.writeRawVarint32(value)[ FD ]
Line_2 $$ private void doVarIntTest(int value) throws IOException -->Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_3 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_7 $$ DataInputStream dis = new DataInputStream(new ByteArrayInputStream(baos.toByteArray()))[ FD ]
Line_2 $$ private void doVarIntTest(int value) throws IOException -->Line_5 $$ cout.writeRawVarint32(value)[ CD ]
Line_2 $$ private void doVarIntTest(int value) throws IOException -->Line_8 $$ assertEquals(value, ProtoUtil.readRawVarint32(dis))[ CD ]
Line_7 $$ DataInputStream dis = new DataInputStream(new ByteArrayInputStream(baos.toByteArray()))-->Line_8 $$ assertEquals(value, ProtoUtil.readRawVarint32(dis))[ FD ]
