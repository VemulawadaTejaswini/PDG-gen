Line_21 $$ if (outBuf.remaining() == 0) -->Line_26 $$ outBuf.clear()[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_10 $$ byte[] compressedResult = baos.toByteArray()[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_29 $$ outBuf.flip()[ CD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_29 $$ outBuf.flip()[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_12 $$ ZlibDirectDecompressor decompressor = new ZlibDirectDecompressor()[ CD ]
Line_3 $$ byte[] rawData = null-->Line_4 $$ rawData = generate(rawDataSize)[ FD ]
Line_21 $$ if (outBuf.remaining() == 0) -->Line_23 $$ while (outBuf.remaining() > 0) [ CD ]
Line_21 $$ if (outBuf.remaining() == 0) -->Line_22 $$ outBuf.flip()[ CD ]
Line_4 $$ rawData = generate(rawDataSize)-->Line_7 $$ dos.write(rawData)[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_4 $$ rawData = generate(rawDataSize)[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_33 $$ outBuf.clear()[ CD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_33 $$ outBuf.clear()[ FD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_21 $$ if (outBuf.remaining() == 0) [ FD ]
Line_19 $$ while (!decompressor.finished()) -->Line_21 $$ if (outBuf.remaining() == 0) [ CD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_24 $$ assertEquals(expected.get(), outBuf.get())[ FD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_26 $$ outBuf.clear()[ FD ]
Line_10 $$ byte[] compressedResult = baos.toByteArray()-->Line_15 $$ inBuf.put(compressedResult, 0, compressedSize)[ FD ]
Line_30 $$ while (outBuf.remaining() > 0) -->Line_31 $$ assertEquals(expected.get(), outBuf.get())[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_11 $$ int compressedSize = compressedResult.length[ CD ]
Line_12 $$ ZlibDirectDecompressor decompressor = new ZlibDirectDecompressor()-->Line_20 $$ decompressor.decompress(inBuf, outBuf)[ FD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_31 $$ assertEquals(expected.get(), outBuf.get())[ FD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_30 $$ while (outBuf.remaining() > 0) [ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_4 $$ rawData = generate(rawDataSize)[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)[ FD ]
Line_3 $$ byte[] rawData = null-->Line_17 $$ ByteBuffer expected = ByteBuffer.wrap(rawData)[ FD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_20 $$ decompressor.decompress(inBuf, outBuf)[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_7 $$ dos.write(rawData)[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_18 $$ outBuf.clear()[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_6 $$ DeflaterOutputStream dos = new DeflaterOutputStream(baos)[ CD ]
Line_6 $$ DeflaterOutputStream dos = new DeflaterOutputStream(baos)-->Line_7 $$ dos.write(rawData)[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_13 $$ ByteBuffer inBuf = ByteBuffer.allocateDirect(compressedSize)[ CD ]
Line_11 $$ int compressedSize = compressedResult.length-->Line_15 $$ inBuf.put(compressedResult, 0, compressedSize)[ FD ]
Line_13 $$ ByteBuffer inBuf = ByteBuffer.allocateDirect(compressedSize)-->Line_20 $$ decompressor.decompress(inBuf, outBuf)[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_16 $$ inBuf.flip()[ CD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_22 $$ outBuf.flip()[ FD ]
Line_6 $$ DeflaterOutputStream dos = new DeflaterOutputStream(baos)-->Line_9 $$ dos.close()[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_30 $$ while (outBuf.remaining() > 0) [ CD ]
Line_4 $$ rawData = generate(rawDataSize)-->Line_17 $$ ByteBuffer expected = ByteBuffer.wrap(rawData)[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_9 $$ dos.close()[ CD ]
Line_13 $$ ByteBuffer inBuf = ByteBuffer.allocateDirect(compressedSize)-->Line_15 $$ inBuf.put(compressedResult, 0, compressedSize)[ FD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_23 $$ while (outBuf.remaining() > 0) [ FD ]
Line_11 $$ int compressedSize = compressedResult.length-->Line_13 $$ ByteBuffer inBuf = ByteBuffer.allocateDirect(compressedSize)[ FD ]
Line_6 $$ DeflaterOutputStream dos = new DeflaterOutputStream(baos)-->Line_8 $$ dos.flush()[ FD ]
Line_17 $$ ByteBuffer expected = ByteBuffer.wrap(rawData)-->Line_34 $$ assertEquals(0, expected.remaining())[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_15 $$ inBuf.put(compressedResult, 0, compressedSize)[ CD ]
Line_17 $$ ByteBuffer expected = ByteBuffer.wrap(rawData)-->Line_24 $$ assertEquals(expected.get(), outBuf.get())[ FD ]
Line_14 $$ ByteBuffer outBuf = ByteBuffer.allocateDirect(rawDataSize)-->Line_18 $$ outBuf.clear()[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_5 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(rawDataSize + 12)[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_3 $$ byte[] rawData = null[ CD ]
Line_17 $$ ByteBuffer expected = ByteBuffer.wrap(rawData)-->Line_31 $$ assertEquals(expected.get(), outBuf.get())[ FD ]
Line_12 $$ ZlibDirectDecompressor decompressor = new ZlibDirectDecompressor()-->Line_19 $$ while (!decompressor.finished()) [ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_8 $$ dos.flush()[ CD ]
Line_19 $$ while (!decompressor.finished()) -->Line_20 $$ decompressor.decompress(inBuf, outBuf)[ CD ]
Line_5 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream(rawDataSize + 12)-->Line_10 $$ byte[] compressedResult = baos.toByteArray()[ FD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_19 $$ while (!decompressor.finished()) [ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_17 $$ ByteBuffer expected = ByteBuffer.wrap(rawData)[ CD ]
Line_3 $$ byte[] rawData = null-->Line_7 $$ dos.write(rawData)[ FD ]
Line_23 $$ while (outBuf.remaining() > 0) -->Line_24 $$ assertEquals(expected.get(), outBuf.get())[ CD ]
Line_2 $$ private void compressDecompressLoop(int rawDataSize) throws IOException -->Line_34 $$ assertEquals(0, expected.remaining())[ CD ]
Line_13 $$ ByteBuffer inBuf = ByteBuffer.allocateDirect(compressedSize)-->Line_16 $$ inBuf.flip()[ FD ]
