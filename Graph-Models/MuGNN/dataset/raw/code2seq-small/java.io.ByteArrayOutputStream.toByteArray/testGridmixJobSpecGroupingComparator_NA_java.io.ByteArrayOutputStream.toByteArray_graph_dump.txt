Line_9 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_14 $$ WritableUtils.writeVInt(dos, 7)[ FD ]
Line_9 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_10 $$ WritableUtils.writeVInt(dos, 2)[ FD ]
Line_8 $$ ByteArrayOutputStream data = new ByteArrayOutputStream()-->Line_16 $$ byte[] b1 = data.toByteArray()[ FD ]
Line_9 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_15 $$ WritableUtils.writeVInt(dos, 4)[ FD ]
Line_9 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_11 $$ WritableUtils.writeVInt(dos, 1)[ FD ]
Line_8 $$ ByteArrayOutputStream data = new ByteArrayOutputStream()-->Line_17 $$ byte[] b2 = data.toByteArray()[ FD ]
Line_17 $$ byte[] b2 = data.toByteArray()-->Line_26 $$ assertEquals(-1, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_16 $$ byte[] b1 = data.toByteArray()-->Line_26 $$ assertEquals(-1, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_7 $$ GridmixJob.SpecGroupingComparator test = new GridmixJob.SpecGroupingComparator()-->Line_31 $$ assertEquals(1, test.compare(new GridmixKey(GridmixKey.DATA, 100, 2), new GridmixKey(GridmixKey.REDUCE_SPEC, 100, 2)))[ FD ]
Line_7 $$ GridmixJob.SpecGroupingComparator test = new GridmixJob.SpecGroupingComparator()-->Line_26 $$ assertEquals(-1, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
