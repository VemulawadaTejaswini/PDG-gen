Line_14 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_20 $$ String answer = new String(out.toByteArray())[ FD ]
Line_7 $$ Job job = MapReduceTestUtil.createJob(conf, getInputDir(), getOutputDir(), 1, 1, "ping")-->Line_13 $$ job.getConfiguration().writeXml(new FileOutputStream(fcon))[ FD ]
Line_10 $$ File fcon = File.createTempFile("config", ".xml")-->Line_12 $$ String fconUri = new Path(fcon.getAbsolutePath()).makeQualified(localFs.getUri(), localFs.getWorkingDirectory()).toUri().toString()[ FD ]
Line_18 $$ exitCode = runTool(conf, jc, new String[] -->Line_19 $$ assertEquals("Exit code", 0, exitCode)[ FD ]
Line_14 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_18 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
Line_11 $$ FileSystem localFs = FileSystem.getLocal(conf)-->Line_12 $$ String fconUri = new Path(fcon.getAbsolutePath()).makeQualified(localFs.getUri(), localFs.getWorkingDirectory()).toUri().toString()[ FD ]
Line_7 $$ Job job = MapReduceTestUtil.createJob(conf, getInputDir(), getOutputDir(), 1, 1, "ping")-->Line_8 $$ job.setJobName("mr")[ FD ]
Line_7 $$ Job job = MapReduceTestUtil.createJob(conf, getInputDir(), getOutputDir(), 1, 1, "ping")-->Line_9 $$ job.setPriority(JobPriority.NORMAL)[ FD ]
Line_6 $$ CLI jc = createJobClient()-->Line_18 $$ exitCode = runTool(conf, jc, new String[] [ FD ]
