Line_21 $$ baos = new ByteArrayOutputStream((int) outFile.length())-->Line_22 $$ IOUtils.copyBytes(is, baos, 1024, true)[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_10 $$ new MyMetrics2().registerWith(ms)[ CD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_15 $$ ms.shutdown()[ CD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_14 $$ ms.stop()[ CD ]
Line_20 $$ is = new FileInputStream(outFile)-->Line_25 $$ IOUtils.cleanup(null, baos, is)[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_18 $$ String outFileContent = null[ CD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_21 $$ baos = new ByteArrayOutputStream((int) outFile.length())[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_30 $$ assertTrue(expectedContentPattern.matcher(outFileContent).matches())[ CD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_25 $$ IOUtils.cleanup(null, baos, is)[ FD ]
Line_16 $$ InputStream is = null-->Line_25 $$ IOUtils.cleanup(null, baos, is)[ FD ]
Line_7 $$ MetricsSystemImpl ms = new MetricsSystemImpl("test")-->Line_13 $$ ms.publishMetricsNow()[ FD ]
Line_18 $$ String outFileContent = null-->Line_30 $$ assertTrue(expectedContentPattern.matcher(outFileContent).matches())[ FD ]
Line_4 $$ final String outPath = outFile.getAbsolutePath()-->Line_5 $$ new ConfigBuilder().add("*.period", 10000).add("test.sink.mysink0.class", FileSink.class.getName()).add("test.sink.mysink0.filename", outPath).add("test.sink.mysink0.context", "test1").save(TestMetricsConfig.getTestFilename("hadoop-metrics2-test"))[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_12 $$ mm1.testMetric2.incr(2)[ CD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_17 $$ ByteArrayOutputStream baos = null[ CD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_13 $$ ms.publishMetricsNow()[ CD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_5 $$ new ConfigBuilder().add("*.period", 10000).add("test.sink.mysink0.class", FileSink.class.getName()).add("test.sink.mysink0.filename", outPath).add("test.sink.mysink0.context", "test1").save(TestMetricsConfig.getTestFilename("hadoop-metrics2-test"))[ CD ]
Line_7 $$ MetricsSystemImpl ms = new MetricsSystemImpl("test")-->Line_8 $$ ms.start()[ FD ]
Line_7 $$ MetricsSystemImpl ms = new MetricsSystemImpl("test")-->Line_9 $$ final MyMetrics1 mm1 = new MyMetrics1().registerWith(ms)[ FD ]
Line_23 $$ outFileContent = new String(baos.toByteArray(), "UTF-8")-->Line_30 $$ assertTrue(expectedContentPattern.matcher(outFileContent).matches())[ FD ]
Line_16 $$ InputStream is = null-->Line_22 $$ IOUtils.copyBytes(is, baos, 1024, true)[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_27 $$ Pattern expectedContentPattern = Pattern.compile("^\\d+\\s+test1.testRecord1:\\s+Context=test1,\\s+" + "(testTag1=testTagValue1,\\s+testTag2=testTagValue2|testTag2=testTagValue2,\\s+testTag1=testTagValue1)," + "\\s+Hostname=.*,\\s+(testMetric1=1,\\s+testMetric2=2|testMetric2=2,\\s+testMetric1=1)" + "$[\\n\\r]*^\\d+\\s+test1.testRecord2:\\s+Context=test1," + "\\s+testTag22=testTagValue22,\\s+Hostname=.*$[\\n\\r]*", Pattern.MULTILINE)[ CD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_23 $$ outFileContent = new String(baos.toByteArray(), "UTF-8")[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_7 $$ MetricsSystemImpl ms = new MetricsSystemImpl("test")[ CD ]
Line_16 $$ InputStream is = null-->Line_20 $$ is = new FileInputStream(outFile)[ FD ]
Line_20 $$ is = new FileInputStream(outFile)-->Line_22 $$ IOUtils.copyBytes(is, baos, 1024, true)[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_16 $$ InputStream is = null[ CD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_11 $$ mm1.testMetric1.incr()[ CD ]
Line_27 $$ Pattern expectedContentPattern = Pattern.compile("^\\d+\\s+test1.testRecord1:\\s+Context=test1,\\s+" + "(testTag1=testTagValue1,\\s+testTag2=testTagValue2|testTag2=testTagValue2,\\s+testTag1=testTagValue1)," + "\\s+Hostname=.*,\\s+(testMetric1=1,\\s+testMetric2=2|testMetric2=2,\\s+testMetric1=1)" + "$[\\n\\r]*^\\d+\\s+test1.testRecord2:\\s+Context=test1," + "\\s+testTag22=testTagValue22,\\s+Hostname=.*$[\\n\\r]*", Pattern.MULTILINE)-->Line_30 $$ assertTrue(expectedContentPattern.matcher(outFileContent).matches())[ FD ]
Line_7 $$ MetricsSystemImpl ms = new MetricsSystemImpl("test")-->Line_10 $$ new MyMetrics2().registerWith(ms)[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_9 $$ final MyMetrics1 mm1 = new MyMetrics1().registerWith(ms)[ CD ]
Line_17 $$ ByteArrayOutputStream baos = null-->Line_22 $$ IOUtils.copyBytes(is, baos, 1024, true)[ FD ]
Line_21 $$ baos = new ByteArrayOutputStream((int) outFile.length())-->Line_23 $$ outFileContent = new String(baos.toByteArray(), "UTF-8")[ FD ]
Line_21 $$ baos = new ByteArrayOutputStream((int) outFile.length())-->Line_25 $$ IOUtils.cleanup(null, baos, is)[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_3 $$ outFile = getTestTempFile("test-file-sink-", ".out")[ CD ]
Line_7 $$ MetricsSystemImpl ms = new MetricsSystemImpl("test")-->Line_15 $$ ms.shutdown()[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_8 $$ ms.start()[ CD ]
Line_18 $$ String outFileContent = null-->Line_23 $$ outFileContent = new String(baos.toByteArray(), "UTF-8")[ FD ]
Line_2 $$ public void testFileSink() throws IOException -->Line_4 $$ final String outPath = outFile.getAbsolutePath()[ CD ]
Line_7 $$ MetricsSystemImpl ms = new MetricsSystemImpl("test")-->Line_14 $$ ms.stop()[ FD ]
