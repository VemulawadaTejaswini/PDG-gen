Line_3 $$ if (call.connection.saslServer != null) -->Line_14 $$ DataOutputStream out = new DataOutputStream(response)[ CD ]
Line_3 $$ if (call.connection.saslServer != null) -->Line_12 $$ RpcSaslProto saslMessage = RpcSaslProto.newBuilder().setState(SaslState.WRAP).setToken(ByteString.copyFrom(token, 0, token.length)).build()[ CD ]
Line_3 $$ if (call.connection.saslServer != null) -->Line_4 $$ byte[] token = response.toByteArray()[ CD ]
Line_14 $$ DataOutputStream out = new DataOutputStream(response)-->Line_15 $$ out.writeInt(saslResponse.getLength())[ FD ]
Line_3 $$ if (call.connection.saslServer != null) -->Line_11 $$ RpcResponseHeaderProto saslHeader = RpcResponseHeaderProto.newBuilder().setCallId(AuthProtocol.SASL.callId).setStatus(RpcStatusProto.SUCCESS).build()[ CD ]
Line_2 $$ private void wrapWithSasl(ByteArrayOutputStream response, Call call) throws IOException -->Line_10 $$ response.reset()[ FD ]
Line_2 $$ private void wrapWithSasl(ByteArrayOutputStream response, Call call) throws IOException -->Line_3 $$ if (call.connection.saslServer != null) [ CD ]
Line_6 $$ token = call.connection.saslServer.wrap(token, 0, token.length)-->Line_12 $$ RpcSaslProto saslMessage = RpcSaslProto.newBuilder().setState(SaslState.WRAP).setToken(ByteString.copyFrom(token, 0, token.length)).build()[ FD ]
Line_3 $$ if (call.connection.saslServer != null) -->Line_15 $$ out.writeInt(saslResponse.getLength())[ CD ]
Line_14 $$ DataOutputStream out = new DataOutputStream(response)-->Line_16 $$ saslResponse.write(out)[ FD ]
Line_3 $$ if (call.connection.saslServer != null) -->Line_16 $$ saslResponse.write(out)[ CD ]
Line_4 $$ byte[] token = response.toByteArray()-->Line_6 $$ token = call.connection.saslServer.wrap(token, 0, token.length)[ FD ]
Line_2 $$ private void wrapWithSasl(ByteArrayOutputStream response, Call call) throws IOException -->Line_4 $$ byte[] token = response.toByteArray()[ FD ]
Line_8 $$ if (LOG.isDebugEnabled())-->Line_9 $$ LOG.debug("Adding saslServer wrapped token of size " + token.length + " as call response.")[ CD ]
Line_3 $$ if (call.connection.saslServer != null) -->Line_13 $$ RpcResponseMessageWrapper saslResponse = new RpcResponseMessageWrapper(saslHeader, saslMessage)[ CD ]
Line_13 $$ RpcResponseMessageWrapper saslResponse = new RpcResponseMessageWrapper(saslHeader, saslMessage)-->Line_15 $$ out.writeInt(saslResponse.getLength())[ FD ]
Line_3 $$ if (call.connection.saslServer != null) -->Line_8 $$ if (LOG.isDebugEnabled())[ CD ]
Line_3 $$ if (call.connection.saslServer != null) -->Line_10 $$ response.reset()[ CD ]
Line_4 $$ byte[] token = response.toByteArray()-->Line_12 $$ RpcSaslProto saslMessage = RpcSaslProto.newBuilder().setState(SaslState.WRAP).setToken(ByteString.copyFrom(token, 0, token.length)).build()[ FD ]
Line_13 $$ RpcResponseMessageWrapper saslResponse = new RpcResponseMessageWrapper(saslHeader, saslMessage)-->Line_16 $$ saslResponse.write(out)[ FD ]
