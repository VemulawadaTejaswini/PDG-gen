Line_42 $$ final MemberSignature[] fields = serialVersionUIDBuilder.getNonPrivateFields()-->Line_43 $$ writeSignatures(fields, dataOutputStream)[ FD ]
Line_21 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_35 $$ dataOutputStream.writeInt(classModifiers)[ FD ]
Line_21 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_43 $$ writeSignatures(fields, dataOutputStream)[ FD ]
Line_8 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)-->Line_9 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)[ FD ]
Line_52 $$ final MessageDigest digest = MessageDigest.getInstance(algorithm)-->Line_53 $$ final byte[] digestBytes = digest.digest(byteArrayOutputStream.toByteArray())[ FD ]
Line_60 $$ final InternalError internalError = new InternalError(exception.getMessage())-->Line_61 $$ internalError.initCause(exception)[ FD ]
Line_36 $$ final PsiClass[] interfaces = psiClass.getInterfaces()-->Line_37 $$ Arrays.sort(interfaces, INTERFACE_COMPARATOR)[ FD ]
Line_9 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)-->Line_14 $$ final boolean isSerializable = psiClass.isInheritor(serializable, true)[ FD ]
Line_6 $$ final Project project = psiClass.getProject()-->Line_8 $$ final JavaPsiFacade psiFacade = JavaPsiFacade.getInstance(project)[ FD ]
Line_18 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)-->Line_26 $$ final MemberSignature[] methodSignatures = serialVersionUIDBuilder.getNonPrivateMethodSignatures()[ FD ]
Line_22 $$ final String className = PsiFormatUtil.getExternalName(psiClass)-->Line_23 $$ dataOutputStream.writeUTF(className)[ FD ]
Line_18 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)-->Line_42 $$ final MemberSignature[] fields = serialVersionUIDBuilder.getNonPrivateFields()[ FD ]
Line_21 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_48 $$ writeSignatures(methodSignatures, dataOutputStream)[ FD ]
Line_38 $$ for (PsiClass aInterfaces : interfaces) -->Line_39 $$ final String name = aInterfaces.getQualifiedName()[ FD ]
Line_46 $$ final MemberSignature[] constructors = serialVersionUIDBuilder.getNonPrivateConstructors()-->Line_47 $$ writeSignatures(constructors, dataOutputStream)[ FD ]
Line_18 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)-->Line_44 $$ final MemberSignature[] staticInitializers = serialVersionUIDBuilder.getStaticInitializers()[ FD ]
Line_18 $$ final SerialVersionUIDBuilder serialVersionUIDBuilder = new SerialVersionUIDBuilder(psiClass)-->Line_46 $$ final MemberSignature[] constructors = serialVersionUIDBuilder.getNonPrivateConstructors()[ FD ]
Line_6 $$ final Project project = psiClass.getProject()-->Line_7 $$ final GlobalSearchScope scope = GlobalSearchScope.allScope(project)[ FD ]
Line_25 $$ int classModifiers = classModifierList != null ? MemberSignature.calculateModifierBitmap(classModifierList) : 0-->Line_28 $$ classModifiers |= Modifier.INTERFACE[ FD ]
Line_26 $$ final MemberSignature[] methodSignatures = serialVersionUIDBuilder.getNonPrivateMethodSignatures()-->Line_48 $$ writeSignatures(methodSignatures, dataOutputStream)[ FD ]
Line_64 $$ final SecurityException securityException = new SecurityException(exception.getMessage())-->Line_65 $$ securityException.initCause(exception)[ FD ]
Line_21 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_40 $$ dataOutputStream.writeUTF(name)[ FD ]
Line_25 $$ int classModifiers = classModifierList != null ? MemberSignature.calculateModifierBitmap(classModifierList) : 0-->Line_35 $$ dataOutputStream.writeInt(classModifiers)[ FD ]
Line_20 $$ final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream()-->Line_53 $$ final byte[] digestBytes = digest.digest(byteArrayOutputStream.toByteArray())[ FD ]
Line_28 $$ classModifiers |= Modifier.INTERFACE-->Line_35 $$ dataOutputStream.writeInt(classModifiers)[ FD ]
Line_15 $$ if (!isSerializable) -->Line_16 $$ return 0L[ CD ]
Line_55 $$ for (int i = Math.min(digestBytes.length, 8) - 1; i >= 0; i--) -->Line_56 $$ serialVersionUID = serialVersionUID << 8 | digestBytes[i] & 0xFF[ CD ]
Line_21 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_47 $$ writeSignatures(constructors, dataOutputStream)[ FD ]
Line_44 $$ final MemberSignature[] staticInitializers = serialVersionUIDBuilder.getStaticInitializers()-->Line_45 $$ writeSignatures(staticInitializers, dataOutputStream)[ FD ]
Line_21 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_23 $$ dataOutputStream.writeUTF(className)[ FD ]
Line_14 $$ final boolean isSerializable = psiClass.isInheritor(serializable, true)-->Line_15 $$ if (!isSerializable) [ FD ]
Line_24 $$ final PsiModifierList classModifierList = psiClass.getModifierList()-->Line_25 $$ int classModifiers = classModifierList != null ? MemberSignature.calculateModifierBitmap(classModifierList) : 0[ FD ]
Line_7 $$ final GlobalSearchScope scope = GlobalSearchScope.allScope(project)-->Line_9 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)[ FD ]
Line_27 $$ if (psiClass.isInterface()) -->Line_28 $$ classModifiers |= Modifier.INTERFACE[ CD ]
Line_39 $$ final String name = aInterfaces.getQualifiedName()-->Line_40 $$ dataOutputStream.writeUTF(name)[ FD ]
Line_27 $$ if (psiClass.isInterface()) -->Line_29 $$ if (methodSignatures.length == 0) [ CD ]
Line_21 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_45 $$ writeSignatures(staticInitializers, dataOutputStream)[ FD ]
Line_21 $$ final DataOutputStream dataOutputStream = new DataOutputStream(byteArrayOutputStream)-->Line_49 $$ dataOutputStream.flush()[ FD ]
Line_54 $$ long serialVersionUID = 0L-->Line_56 $$ serialVersionUID = serialVersionUID << 8 | digestBytes[i] & 0xFF[ FD ]
Line_9 $$ final PsiClass serializable = psiFacade.findClass(CommonClassNames.JAVA_IO_SERIALIZABLE, scope)-->Line_10 $$ if (serializable == null) [ FD ]
