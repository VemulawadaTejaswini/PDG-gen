Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_57 $$ DaemonStartupInfo daemonInfo = startProcess(daemonArgs, daemonDir.getVersionedDir(), stdInput)[ FD ]
Line_9 $$ searchClassPath = Collections.emptyList()-->Line_16 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_58 $$ listener.daemonStarted(daemonInfo)[ CD ]
Line_4 $$ ClassPath classpath-->Line_14 $$ classpath = classpath.plus(module.getClasspath())[ FD ]
Line_16 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()-->Line_48 $$ encoder.writeSmallInt(searchClassPath.size())[ FD ]
Line_56 $$ ByteArrayInputStream stdInput = new ByteArrayInputStream(serializedConfig.toByteArray())-->Line_57 $$ DaemonStartupInfo daemonInfo = startProcess(daemonArgs, daemonDir.getVersionedDir(), stdInput)[ FD ]
Line_5 $$ List<File> searchClassPath-->Line_9 $$ searchClassPath = Collections.emptyList()[ FD ]
Line_4 $$ ClassPath classpath-->Line_18 $$ if (classpath.isEmpty()) [ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_4 $$ ClassPath classpath[ CD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_52 $$ encoder.flush()[ FD ]
Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_27 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ FD ]
Line_4 $$ ClassPath classpath-->Line_27 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ FD ]
Line_5 $$ List<File> searchClassPath-->Line_48 $$ encoder.writeSmallInt(searchClassPath.size())[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_33 $$ daemonArgs.add(GradleDaemon.class.getName())[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_28 $$ if (Boolean.getBoolean("org.gradle.daemon.debug")) [ CD ]
Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_30 $$ daemonArgs.add("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")[ FD ]
Line_45 $$ for (String daemonOpt : daemonOpts) -->Line_46 $$ encoder.writeString(daemonOpt)[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_32 $$ LOGGER.debug("Using daemon args: [ CD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_41 $$ encoder.writeString(daemonDir.getBaseDir().getAbsolutePath())[ FD ]
Line_28 $$ if (Boolean.getBoolean("org.gradle.daemon.debug")) -->Line_29 $$ daemonArgs.add("-Xdebug")[ CD ]
Line_3 $$ ModuleRegistry registry = new DefaultModuleRegistry()-->Line_13 $$ for (Module module : registry.getModule("gradle-launcher").getAllRequiredModules()) [ FD ]
Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_33 $$ daemonArgs.add(GradleDaemon.class.getName())[ FD ]
Line_6 $$ if (new DefaultGradleDistributionLocator().getGradleHome() != null) -->Line_9 $$ searchClassPath = Collections.emptyList()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_26 $$ daemonArgs.add("-cp")[ CD ]
Line_28 $$ if (Boolean.getBoolean("org.gradle.daemon.debug")) -->Line_30 $$ daemonArgs.add("-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005")[ CD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_48 $$ encoder.writeSmallInt(searchClassPath.size())[ FD ]
Line_5 $$ List<File> searchClassPath-->Line_16 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()[ FD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_44 $$ encoder.writeSmallInt(daemonOpts.size())[ FD ]
Line_24 $$ List<String> daemonOpts = daemonParameters.getEffectiveJvmArgs()-->Line_25 $$ daemonArgs.addAll(daemonOpts)[ FD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_40 $$ encoder.writeString(daemonParameters.getGradleUserHomeDir().getAbsolutePath())[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_3 $$ ModuleRegistry registry = new DefaultModuleRegistry()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_57 $$ DaemonStartupInfo daemonInfo = startProcess(daemonArgs, daemonDir.getVersionedDir(), stdInput)[ CD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_42 $$ encoder.writeSmallInt(daemonParameters.getIdleTimeout())[ FD ]
Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_23 $$ daemonArgs.add(daemonParameters.getEffectiveJvm().getJavaExecutable().getAbsolutePath())[ FD ]
Line_6 $$ if (new DefaultGradleDistributionLocator().getGradleHome() != null) -->Line_16 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_24 $$ List<String> daemonOpts = daemonParameters.getEffectiveJvmArgs()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_25 $$ daemonArgs.addAll(daemonOpts)[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_5 $$ List<File> searchClassPath[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_59 $$ return daemonInfo[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_56 $$ ByteArrayInputStream stdInput = new ByteArrayInputStream(serializedConfig.toByteArray())[ CD ]
Line_9 $$ searchClassPath = Collections.emptyList()-->Line_48 $$ encoder.writeSmallInt(searchClassPath.size())[ FD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_46 $$ encoder.writeString(daemonOpt)[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_23 $$ daemonArgs.add(daemonParameters.getEffectiveJvm().getJavaExecutable().getAbsolutePath())[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_21 $$ versionValidator.validate(daemonParameters)[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))[ CD ]
Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_26 $$ daemonArgs.add("-cp")[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_22 $$ List<String> daemonArgs = new ArrayList<String>()[ CD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_27 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ CD ]
Line_24 $$ List<String> daemonOpts = daemonParameters.getEffectiveJvmArgs()-->Line_44 $$ encoder.writeSmallInt(daemonOpts.size())[ FD ]
Line_57 $$ DaemonStartupInfo daemonInfo = startProcess(daemonArgs, daemonDir.getVersionedDir(), stdInput)-->Line_58 $$ listener.daemonStarted(daemonInfo)[ FD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_50 $$ encoder.writeString(file.getAbsolutePath())[ FD ]
Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_29 $$ daemonArgs.add("-Xdebug")[ FD ]
Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_25 $$ daemonArgs.addAll(daemonOpts)[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_18 $$ if (classpath.isEmpty()) [ CD ]
Line_22 $$ List<String> daemonArgs = new ArrayList<String>()-->Line_32 $$ LOGGER.debug("Using daemon args: [ FD ]
Line_3 $$ ModuleRegistry registry = new DefaultModuleRegistry()-->Line_16 $$ searchClassPath = registry.getAdditionalClassPath().getAsFiles()[ FD ]
Line_14 $$ classpath = classpath.plus(module.getClasspath())-->Line_18 $$ if (classpath.isEmpty()) [ FD ]
Line_14 $$ classpath = classpath.plus(module.getClasspath())-->Line_27 $$ daemonArgs.add(CollectionUtils.join(File.pathSeparator, classpath.getAsFiles()))[ FD ]
Line_2 $$ public DaemonStartupInfo startDaemon() -->Line_6 $$ if (new DefaultGradleDistributionLocator().getGradleHome() != null) [ CD ]
Line_49 $$ for (File file : searchClassPath) -->Line_50 $$ encoder.writeString(file.getAbsolutePath())[ FD ]
Line_38 $$ FlushableEncoder encoder = new KryoBackedEncoder(new EncodedStream.EncodedOutput(serializedConfig))-->Line_43 $$ encoder.writeString(daemonParameters.getUid())[ FD ]
Line_13 $$ for (Module module : registry.getModule("gradle-launcher").getAllRequiredModules()) -->Line_14 $$ classpath = classpath.plus(module.getClasspath())[ FD ]
