Line_9 $$ NIODataInputStream is = new NIODataInputStream(wrap(baos.toByteArray()), 9)-->Line_10 $$ assertEquals(v, is.readVInt())[ FD ]
Line_2 $$ public void testReadVInt() throws Exception -->Line_8 $$ daos.flush()[ CD ]
Line_11 $$ boolean threw = false-->Line_15 $$ threw = true[ FD ]
Line_2 $$ public void testReadVInt() throws Exception -->Line_11 $$ boolean threw = false[ CD ]
Line_4 $$ DataOutputStreamPlus daos = new WrappedDataOutputStreamPlus(baos)-->Line_8 $$ daos.flush()[ FD ]
Line_2 $$ public void testReadVInt() throws Exception -->Line_3 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testReadVInt() throws Exception -->Line_6 $$ values = BufferedDataOutputStreamTest.enrich(values)[ CD ]
Line_3 $$ final ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_9 $$ NIODataInputStream is = new NIODataInputStream(wrap(baos.toByteArray()), 9)[ FD ]
Line_9 $$ NIODataInputStream is = new NIODataInputStream(wrap(baos.toByteArray()), 9)-->Line_13 $$ is.readVInt()[ FD ]
Line_11 $$ boolean threw = false-->Line_17 $$ assertTrue(threw)[ FD ]
Line_2 $$ public void testReadVInt() throws Exception -->Line_9 $$ NIODataInputStream is = new NIODataInputStream(wrap(baos.toByteArray()), 9)[ CD ]
Line_5 $$ long[] values = new long[] -->Line_6 $$ values = BufferedDataOutputStreamTest.enrich(values)[ FD ]
Line_7 $$ for (long v : values) daos.writeVInt(v)-->Line_10 $$ assertEquals(v, is.readVInt())[ FD ]
Line_2 $$ public void testReadVInt() throws Exception -->Line_5 $$ long[] values = new long[] [ CD ]
Line_4 $$ DataOutputStreamPlus daos = new WrappedDataOutputStreamPlus(baos)-->Line_7 $$ daos.writeVInt(v)[ FD ]
Line_2 $$ public void testReadVInt() throws Exception -->Line_17 $$ assertTrue(threw)[ CD ]
Line_2 $$ public void testReadVInt() throws Exception -->Line_4 $$ DataOutputStreamPlus daos = new WrappedDataOutputStreamPlus(baos)[ CD ]
Line_15 $$ threw = true-->Line_17 $$ assertTrue(threw)[ FD ]
