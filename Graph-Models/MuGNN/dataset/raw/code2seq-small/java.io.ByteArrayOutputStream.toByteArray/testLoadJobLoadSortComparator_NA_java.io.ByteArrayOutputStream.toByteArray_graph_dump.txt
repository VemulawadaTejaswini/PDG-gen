Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_17 $$ assertEquals(2, test.compare(b1, 0, 1, b2, 0, 1))[ CD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_9 $$ WritableUtils.writeVInt(dos, 7)[ CD ]
Line_5 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_7 $$ WritableUtils.writeVInt(dos, 1)[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_10 $$ WritableUtils.writeVInt(dos, 4)[ CD ]
Line_3 $$ LoadJob.LoadSortComparator test = new LoadJob.LoadSortComparator()-->Line_19 $$ assertEquals(1, test.compare(b1, 0, 1, b2, 1, 1))[ FD ]
Line_12 $$ byte[] b2 = data.toByteArray()-->Line_15 $$ assertEquals(-1, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_4 $$ ByteArrayOutputStream data = new ByteArrayOutputStream()-->Line_12 $$ byte[] b2 = data.toByteArray()[ FD ]
Line_3 $$ LoadJob.LoadSortComparator test = new LoadJob.LoadSortComparator()-->Line_17 $$ assertEquals(2, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_3 $$ LoadJob.LoadSortComparator test = new LoadJob.LoadSortComparator()[ CD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_8 $$ WritableUtils.writeVInt(dos, 4)[ CD ]
Line_12 $$ byte[] b2 = data.toByteArray()-->Line_13 $$ assertEquals(0, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_11 $$ byte[] b1 = data.toByteArray()[ CD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_6 $$ WritableUtils.writeVInt(dos, 2)[ CD ]
Line_5 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_10 $$ WritableUtils.writeVInt(dos, 4)[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_5 $$ DataOutputStream dos = new DataOutputStream(data)[ CD ]
Line_12 $$ byte[] b2 = data.toByteArray()-->Line_19 $$ assertEquals(1, test.compare(b1, 0, 1, b2, 1, 1))[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_13 $$ assertEquals(0, test.compare(b1, 0, 1, b2, 0, 1))[ CD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_14 $$ b2[2] = 5[ CD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_15 $$ assertEquals(-1, test.compare(b1, 0, 1, b2, 0, 1))[ CD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_7 $$ WritableUtils.writeVInt(dos, 1)[ CD ]
Line_11 $$ byte[] b1 = data.toByteArray()-->Line_17 $$ assertEquals(2, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_3 $$ LoadJob.LoadSortComparator test = new LoadJob.LoadSortComparator()-->Line_13 $$ assertEquals(0, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_19 $$ assertEquals(1, test.compare(b1, 0, 1, b2, 1, 1))[ CD ]
Line_5 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_9 $$ WritableUtils.writeVInt(dos, 7)[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_12 $$ byte[] b2 = data.toByteArray()[ CD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_18 $$ b2[2] = 4[ CD ]
Line_5 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_8 $$ WritableUtils.writeVInt(dos, 4)[ FD ]
Line_11 $$ byte[] b1 = data.toByteArray()-->Line_13 $$ assertEquals(0, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_5 $$ DataOutputStream dos = new DataOutputStream(data)-->Line_6 $$ WritableUtils.writeVInt(dos, 2)[ FD ]
Line_11 $$ byte[] b1 = data.toByteArray()-->Line_19 $$ assertEquals(1, test.compare(b1, 0, 1, b2, 1, 1))[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_16 $$ b2[2] = 2[ CD ]
Line_4 $$ ByteArrayOutputStream data = new ByteArrayOutputStream()-->Line_11 $$ byte[] b1 = data.toByteArray()[ FD ]
Line_3 $$ LoadJob.LoadSortComparator test = new LoadJob.LoadSortComparator()-->Line_15 $$ assertEquals(-1, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_11 $$ byte[] b1 = data.toByteArray()-->Line_15 $$ assertEquals(-1, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_12 $$ byte[] b2 = data.toByteArray()-->Line_17 $$ assertEquals(2, test.compare(b1, 0, 1, b2, 0, 1))[ FD ]
Line_2 $$ public void testLoadJobLoadSortComparator() throws Exception -->Line_4 $$ ByteArrayOutputStream data = new ByteArrayOutputStream()[ CD ]
