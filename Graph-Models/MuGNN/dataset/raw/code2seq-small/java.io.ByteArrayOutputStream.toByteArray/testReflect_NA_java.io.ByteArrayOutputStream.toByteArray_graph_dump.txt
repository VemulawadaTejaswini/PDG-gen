Line_9 $$ Object after = reader.read(null, DecoderFactory.get().binaryDecoder(out.toByteArray(), null))-->Line_10 $$ assertEquals(value, after)[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_7 $$ writer.write(value, EncoderFactory.get().directBinaryEncoder(out, null))[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_3 $$ Schema s = ReflectData.get().getSchema(type)[ CD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_4 $$ assertEquals(Schema.parse(schema), s)[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_7 $$ writer.write(value, EncoderFactory.get().directBinaryEncoder(out, null))[ CD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_3 $$ Schema s = ReflectData.get().getSchema(type)[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_5 $$ ReflectDatumWriter<Object> writer = new ReflectDatumWriter<Object>(s)[ CD ]
Line_6 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_7 $$ writer.write(value, EncoderFactory.get().directBinaryEncoder(out, null))[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_4 $$ assertEquals(Schema.parse(schema), s)[ CD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_8 $$ ReflectDatumReader<Object> reader = new ReflectDatumReader<Object>(s)[ CD ]
Line_8 $$ ReflectDatumReader<Object> reader = new ReflectDatumReader<Object>(s)-->Line_9 $$ Object after = reader.read(null, DecoderFactory.get().binaryDecoder(out.toByteArray(), null))[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_6 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_9 $$ Object after = reader.read(null, DecoderFactory.get().binaryDecoder(out.toByteArray(), null))[ CD ]
Line_6 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_9 $$ Object after = reader.read(null, DecoderFactory.get().binaryDecoder(out.toByteArray(), null))[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_10 $$ assertEquals(value, after)[ FD ]
Line_5 $$ ReflectDatumWriter<Object> writer = new ReflectDatumWriter<Object>(s)-->Line_7 $$ writer.write(value, EncoderFactory.get().directBinaryEncoder(out, null))[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_10 $$ assertEquals(value, after)[ CD ]
Line_3 $$ Schema s = ReflectData.get().getSchema(type)-->Line_4 $$ assertEquals(Schema.parse(schema), s)[ FD ]
