Line_10 $$ ReflectDatumReader<Object> reader = new ReflectDatumReader<Object>(s)-->Line_11 $$ Object after = reader.read(null, DecoderFactory.get().binaryDecoder(out.toByteArray(), null))[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_12 $$ assertEquals(value, after)[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_10 $$ ReflectDatumReader<Object> reader = new ReflectDatumReader<Object>(s)[ CD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_12 $$ assertEquals(value, after)[ CD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_9 $$ writer.write(value, EncoderFactory.get().directBinaryEncoder(out, null))[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_5 $$ assertEquals(Schema.parse(schema), s)[ CD ]
Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_9 $$ writer.write(value, EncoderFactory.get().directBinaryEncoder(out, null))[ FD ]
Line_11 $$ Object after = reader.read(null, DecoderFactory.get().binaryDecoder(out.toByteArray(), null))-->Line_12 $$ assertEquals(value, after)[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_9 $$ writer.write(value, EncoderFactory.get().directBinaryEncoder(out, null))[ CD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_11 $$ Object after = reader.read(null, DecoderFactory.get().binaryDecoder(out.toByteArray(), null))[ CD ]
Line_8 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_11 $$ Object after = reader.read(null, DecoderFactory.get().binaryDecoder(out.toByteArray(), null))[ FD ]
Line_2 $$ public static void testReflect(Object value, Type type, String schema) throws Exception -->Line_5 $$ assertEquals(Schema.parse(schema), s)[ FD ]
