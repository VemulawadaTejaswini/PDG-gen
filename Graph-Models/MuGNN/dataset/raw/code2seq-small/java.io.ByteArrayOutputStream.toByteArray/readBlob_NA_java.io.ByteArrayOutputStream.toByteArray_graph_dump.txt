Line_13 $$ BytesReference bytesReference = new BytesArray(bytes, (int) filePointer, (int) contentSize)-->Line_14 $$ return read(bytesReference)[ FD ]
Line_8 $$ try (ByteArrayIndexInput indexInput = new ByteArrayIndexInput(resourceDesc, bytes)) -->Line_12 $$ long contentSize = indexInput.length() - CodecUtil.footerLength() - filePointer[ FD ]
Line_3 $$ try (InputStream inputStream = blobContainer.readBlob(blobName)) -->Line_5 $$ Streams.copy(inputStream, out)[ FD ]
Line_8 $$ try (ByteArrayIndexInput indexInput = new ByteArrayIndexInput(resourceDesc, bytes)) -->Line_11 $$ long filePointer = indexInput.getFilePointer()[ FD ]
Line_8 $$ try (ByteArrayIndexInput indexInput = new ByteArrayIndexInput(resourceDesc, bytes)) -->Line_9 $$ CodecUtil.checksumEntireFile(indexInput)[ FD ]
Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_5 $$ Streams.copy(inputStream, out)[ FD ]
Line_2 $$ public T readBlob(BlobContainer blobContainer, String blobName) throws IOException -->Line_3 $$ try (InputStream inputStream = blobContainer.readBlob(blobName)) [ FD ]
Line_4 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_6 $$ final byte[] bytes = out.toByteArray()[ FD ]
Line_8 $$ try (ByteArrayIndexInput indexInput = new ByteArrayIndexInput(resourceDesc, bytes)) -->Line_10 $$ CodecUtil.checkHeader(indexInput, codec, VERSION, VERSION)[ FD ]
