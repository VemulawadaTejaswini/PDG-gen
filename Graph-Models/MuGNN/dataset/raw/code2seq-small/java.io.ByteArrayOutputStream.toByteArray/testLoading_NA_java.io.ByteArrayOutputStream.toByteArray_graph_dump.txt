Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_43 $$ cluster.shutdown()[ FD ]
Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()-->Line_5 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_30 $$ while (reader.next(key, value)) -->Line_32 $$ assertEquals(String.class, value.getValue().getClass())[ CD ]
Line_2 $$ public void testLoading() throws Exception -->Line_12 $$ InputStream isBackup = System.in[ CD ]
Line_2 $$ public void testLoading() throws Exception -->Line_7 $$ TypedBytesOutput tboutput = new TypedBytesOutput(new DataOutputStream(out))[ CD ]
Line_2 $$ public void testLoading() throws Exception -->Line_13 $$ ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray())[ CD ]
Line_2 $$ public void testLoading() throws Exception -->Line_4 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build()[ CD ]
Line_29 $$ TypedBytesWritable value = new TypedBytesWritable()-->Line_32 $$ assertEquals(String.class, value.getValue().getClass())[ FD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_39 $$ fs.close()[ FD ]
Line_30 $$ while (reader.next(key, value)) -->Line_31 $$ assertEquals(Long.class, key.getValue().getClass())[ CD ]
Line_6 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()-->Line_13 $$ ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray())[ FD ]
Line_7 $$ TypedBytesOutput tboutput = new TypedBytesOutput(new DataOutputStream(out))-->Line_10 $$ tboutput.write("" + (10 * i))[ FD ]
Line_17 $$ Path root = new Path("/typedbytestest")-->Line_18 $$ assertTrue(fs.mkdirs(root))[ FD ]
Line_24 $$ Path file = new Path(root, "test.seq")-->Line_25 $$ assertTrue(fs.exists(file))[ FD ]
Line_2 $$ public void testLoading() throws Exception -->Line_5 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_25 $$ assertTrue(fs.exists(file))[ FD ]
Line_20 $$ String[] args = new String[1]-->Line_22 $$ int ret = loadtb.run(args)[ FD ]
Line_22 $$ int ret = loadtb.run(args)-->Line_23 $$ assertEquals("Return value != 0.", 0, ret)[ FD ]
Line_15 $$ LoadTypedBytes loadtb = new LoadTypedBytes(conf)-->Line_22 $$ int ret = loadtb.run(args)[ FD ]
Line_12 $$ InputStream isBackup = System.in-->Line_42 $$ System.setIn(isBackup)[ FD ]
Line_17 $$ Path root = new Path("/typedbytestest")-->Line_19 $$ assertTrue(fs.exists(root))[ FD ]
Line_8 $$ for (int i = 0; i < 100; i++) -->Line_9 $$ tboutput.write(new Long(i))[ CD ]
Line_8 $$ for (int i = 0; i < 100; i++) -->Line_10 $$ tboutput.write("" + (10 * i))[ CD ]
Line_29 $$ TypedBytesWritable value = new TypedBytesWritable()-->Line_30 $$ while (reader.next(key, value)) [ FD ]
Line_29 $$ TypedBytesWritable value = new TypedBytesWritable()-->Line_33 $$ assertTrue("Invalid record.", Integer.parseInt(value.toString()) % 10 == 0)[ FD ]
Line_30 $$ while (reader.next(key, value)) -->Line_34 $$ counter++[ CD ]
Line_28 $$ TypedBytesWritable key = new TypedBytesWritable()-->Line_30 $$ while (reader.next(key, value)) [ FD ]
Line_30 $$ while (reader.next(key, value)) -->Line_33 $$ assertTrue("Invalid record.", Integer.parseInt(value.toString()) % 10 == 0)[ CD ]
Line_2 $$ public void testLoading() throws Exception -->Line_8 $$ for (int i = 0; i < 100; i++) [ CD ]
Line_7 $$ TypedBytesOutput tboutput = new TypedBytesOutput(new DataOutputStream(out))-->Line_9 $$ tboutput.write(new Long(i))[ FD ]
Line_28 $$ TypedBytesWritable key = new TypedBytesWritable()-->Line_31 $$ assertEquals(Long.class, key.getValue().getClass())[ FD ]
Line_27 $$ int counter = 0-->Line_34 $$ counter++[ FD ]
Line_2 $$ public void testLoading() throws Exception -->Line_14 $$ System.setIn(in)[ CD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_19 $$ assertTrue(fs.exists(root))[ FD ]
Line_27 $$ int counter = 0-->Line_36 $$ assertEquals("Wrong number of records.", 100, counter)[ FD ]
Line_2 $$ public void testLoading() throws Exception -->Line_6 $$ ByteArrayOutputStream out = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testLoading() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_26 $$ SequenceFile.Reader reader = new SequenceFile.Reader(fs, file, conf)-->Line_30 $$ while (reader.next(key, value)) [ FD ]
Line_5 $$ FileSystem fs = cluster.getFileSystem()-->Line_18 $$ assertTrue(fs.mkdirs(root))[ FD ]
Line_2 $$ public void testLoading() throws Exception -->Line_15 $$ LoadTypedBytes loadtb = new LoadTypedBytes(conf)[ CD ]
Line_13 $$ ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray())-->Line_14 $$ System.setIn(in)[ FD ]
