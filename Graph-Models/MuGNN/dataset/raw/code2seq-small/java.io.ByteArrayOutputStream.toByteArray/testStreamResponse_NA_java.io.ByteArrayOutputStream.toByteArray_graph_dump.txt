Line_11 $$ TermVectorsResponse inResponse = new TermVectorsResponse("a", "b", "c")-->Line_12 $$ inResponse.readFrom(esBuffer)[ FD ]
Line_11 $$ TermVectorsResponse inResponse = new TermVectorsResponse("a", "b", "c")-->Line_13 $$ checkIfStandardTermVector(inResponse)[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_13 $$ checkIfStandardTermVector(inResponse)[ CD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_20 $$ esBuffer = new InputStreamStreamInput(esInBuffer)[ CD ]
Line_6 $$ ByteArrayOutputStream outBuffer = new ByteArrayOutputStream()-->Line_9 $$ ByteArrayInputStream esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray())[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_10 $$ InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer)[ CD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_6 $$ ByteArrayOutputStream outBuffer = new ByteArrayOutputStream()[ CD ]
Line_11 $$ TermVectorsResponse inResponse = new TermVectorsResponse("a", "b", "c")-->Line_22 $$ inResponse.readFrom(esBuffer)[ FD ]
Line_7 $$ OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer)-->Line_8 $$ outResponse.writeTo(out)[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_11 $$ TermVectorsResponse inResponse = new TermVectorsResponse("a", "b", "c")[ CD ]
Line_7 $$ OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer)-->Line_18 $$ outResponse.writeTo(out)[ FD ]
Line_3 $$ TermVectorsResponse outResponse = new TermVectorsResponse("a", "b", "c")-->Line_8 $$ outResponse.writeTo(out)[ FD ]
Line_7 $$ OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer)-->Line_17 $$ out = new OutputStreamStreamOutput(outBuffer)[ FD ]
Line_14 $$ outResponse = new TermVectorsResponse("a", "b", "c")-->Line_18 $$ outResponse.writeTo(out)[ FD ]
Line_21 $$ inResponse = new TermVectorsResponse("a", "b", "c")-->Line_22 $$ inResponse.readFrom(esBuffer)[ FD ]
Line_10 $$ InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer)-->Line_22 $$ inResponse.readFrom(esBuffer)[ FD ]
Line_3 $$ TermVectorsResponse outResponse = new TermVectorsResponse("a", "b", "c")-->Line_4 $$ outResponse.setExists(true)[ FD ]
Line_11 $$ TermVectorsResponse inResponse = new TermVectorsResponse("a", "b", "c")-->Line_23 $$ assertTrue(inResponse.isExists())[ FD ]
Line_6 $$ ByteArrayOutputStream outBuffer = new ByteArrayOutputStream()-->Line_16 $$ outBuffer = new ByteArrayOutputStream()[ FD ]
Line_10 $$ InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer)-->Line_12 $$ inResponse.readFrom(esBuffer)[ FD ]
Line_20 $$ esBuffer = new InputStreamStreamInput(esInBuffer)-->Line_22 $$ inResponse.readFrom(esBuffer)[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_19 $$ esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray())[ CD ]
Line_3 $$ TermVectorsResponse outResponse = new TermVectorsResponse("a", "b", "c")-->Line_15 $$ writeEmptyTermVector(outResponse)[ FD ]
Line_9 $$ ByteArrayInputStream esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray())-->Line_19 $$ esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray())[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_8 $$ outResponse.writeTo(out)[ CD ]
Line_16 $$ outBuffer = new ByteArrayOutputStream()-->Line_19 $$ esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray())[ FD ]
Line_3 $$ TermVectorsResponse outResponse = new TermVectorsResponse("a", "b", "c")-->Line_18 $$ outResponse.writeTo(out)[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_9 $$ ByteArrayInputStream esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray())[ CD ]
Line_14 $$ outResponse = new TermVectorsResponse("a", "b", "c")-->Line_15 $$ writeEmptyTermVector(outResponse)[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_21 $$ inResponse = new TermVectorsResponse("a", "b", "c")[ CD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_5 $$ writeStandardTermVector(outResponse)[ CD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_4 $$ outResponse.setExists(true)[ CD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_17 $$ out = new OutputStreamStreamOutput(outBuffer)[ CD ]
Line_3 $$ TermVectorsResponse outResponse = new TermVectorsResponse("a", "b", "c")-->Line_5 $$ writeStandardTermVector(outResponse)[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_14 $$ outResponse = new TermVectorsResponse("a", "b", "c")[ CD ]
Line_3 $$ TermVectorsResponse outResponse = new TermVectorsResponse("a", "b", "c")-->Line_14 $$ outResponse = new TermVectorsResponse("a", "b", "c")[ FD ]
Line_11 $$ TermVectorsResponse inResponse = new TermVectorsResponse("a", "b", "c")-->Line_21 $$ inResponse = new TermVectorsResponse("a", "b", "c")[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_3 $$ TermVectorsResponse outResponse = new TermVectorsResponse("a", "b", "c")[ CD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_7 $$ OutputStreamStreamOutput out = new OutputStreamStreamOutput(outBuffer)[ CD ]
Line_21 $$ inResponse = new TermVectorsResponse("a", "b", "c")-->Line_23 $$ assertTrue(inResponse.isExists())[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_15 $$ writeEmptyTermVector(outResponse)[ CD ]
Line_17 $$ out = new OutputStreamStreamOutput(outBuffer)-->Line_18 $$ outResponse.writeTo(out)[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_22 $$ inResponse.readFrom(esBuffer)[ CD ]
Line_6 $$ ByteArrayOutputStream outBuffer = new ByteArrayOutputStream()-->Line_19 $$ esInBuffer = new ByteArrayInputStream(outBuffer.toByteArray())[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_16 $$ outBuffer = new ByteArrayOutputStream()[ CD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_18 $$ outResponse.writeTo(out)[ CD ]
Line_10 $$ InputStreamStreamInput esBuffer = new InputStreamStreamInput(esInBuffer)-->Line_20 $$ esBuffer = new InputStreamStreamInput(esInBuffer)[ FD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_23 $$ assertTrue(inResponse.isExists())[ CD ]
Line_2 $$ public void testStreamResponse() throws Exception -->Line_12 $$ inResponse.readFrom(esBuffer)[ CD ]
