Line_10 $$ if (contentType != null && contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) -->Line_25 $$ toThrow = new IOException(MessageFormat.format("HTTP status [[ CD ]
Line_20 $$ toThrow = (Exception) constr.newInstance(exMsg)-->Line_25 $$ toThrow = new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_10 $$ if (contentType != null && contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) -->Line_11 $$ es = conn.getErrorStream()[ CD ]
Line_8 $$ Exception toThrow-->Line_27 $$ throwEx(toThrow)[ FD ]
Line_18 $$ Class klass = cl.loadClass(exClass)-->Line_19 $$ Constructor constr = klass.getConstructor(String.class)[ FD ]
Line_6 $$ InputStream es = null-->Line_30 $$ es.close()[ FD ]
Line_8 $$ Exception toThrow-->Line_22 $$ toThrow = new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_13 $$ Map json = mapper.readValue(es, Map.class)-->Line_14 $$ String exClass = (String) json.get(KMSRESTConstants.ERROR_EXCEPTION_JSON)[ FD ]
Line_20 $$ toThrow = (Exception) constr.newInstance(exMsg)-->Line_27 $$ throwEx(toThrow)[ FD ]
Line_11 $$ es = conn.getErrorStream()-->Line_30 $$ es.close()[ FD ]
Line_10 $$ if (contentType != null && contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) -->Line_14 $$ String exClass = (String) json.get(KMSRESTConstants.ERROR_EXCEPTION_JSON)[ CD ]
Line_11 $$ es = conn.getErrorStream()-->Line_29 $$ if (es != null) [ FD ]
Line_12 $$ ObjectMapper mapper = new ObjectMapper()-->Line_13 $$ Map json = mapper.readValue(es, Map.class)[ FD ]
Line_4 $$ int status = conn.getResponseCode()-->Line_5 $$ if (status != expected) [ FD ]
Line_22 $$ toThrow = new IOException(MessageFormat.format("HTTP status [-->Line_25 $$ toThrow = new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_6 $$ InputStream es = null-->Line_11 $$ es = conn.getErrorStream()[ FD ]
Line_14 $$ String exClass = (String) json.get(KMSRESTConstants.ERROR_EXCEPTION_JSON)-->Line_18 $$ Class klass = cl.loadClass(exClass)[ FD ]
Line_10 $$ if (contentType != null && contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) -->Line_13 $$ Map json = mapper.readValue(es, Map.class)[ CD ]
Line_17 $$ ClassLoader cl = KMSClientProvider.class.getClassLoader()-->Line_18 $$ Class klass = cl.loadClass(exClass)[ FD ]
Line_8 $$ Exception toThrow-->Line_20 $$ toThrow = (Exception) constr.newInstance(exMsg)[ FD ]
Line_5 $$ if (status != expected) -->Line_6 $$ InputStream es = null[ CD ]
Line_22 $$ toThrow = new IOException(MessageFormat.format("HTTP status [-->Line_27 $$ throwEx(toThrow)[ FD ]
Line_15 $$ String exMsg = (String) json.get(KMSRESTConstants.ERROR_MESSAGE_JSON)-->Line_20 $$ toThrow = (Exception) constr.newInstance(exMsg)[ FD ]
Line_13 $$ Map json = mapper.readValue(es, Map.class)-->Line_15 $$ String exMsg = (String) json.get(KMSRESTConstants.ERROR_MESSAGE_JSON)[ FD ]
Line_10 $$ if (contentType != null && contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) -->Line_15 $$ String exMsg = (String) json.get(KMSRESTConstants.ERROR_MESSAGE_JSON)[ CD ]
Line_6 $$ InputStream es = null-->Line_13 $$ Map json = mapper.readValue(es, Map.class)[ FD ]
Line_19 $$ Constructor constr = klass.getConstructor(String.class)-->Line_20 $$ toThrow = (Exception) constr.newInstance(exMsg)[ FD ]
Line_4 $$ int status = conn.getResponseCode()-->Line_22 $$ toThrow = new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_8 $$ Exception toThrow-->Line_25 $$ toThrow = new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_4 $$ int status = conn.getResponseCode()-->Line_25 $$ toThrow = new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_10 $$ if (contentType != null && contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) -->Line_12 $$ ObjectMapper mapper = new ObjectMapper()[ CD ]
Line_6 $$ InputStream es = null-->Line_29 $$ if (es != null) [ FD ]
Line_29 $$ if (es != null) -->Line_30 $$ es.close()[ CD ]
Line_11 $$ es = conn.getErrorStream()-->Line_13 $$ Map json = mapper.readValue(es, Map.class)[ FD ]
Line_25 $$ toThrow = new IOException(MessageFormat.format("HTTP status [-->Line_27 $$ throwEx(toThrow)[ FD ]
Line_20 $$ toThrow = (Exception) constr.newInstance(exMsg)-->Line_22 $$ toThrow = new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_9 $$ String contentType = conn.getHeaderField(CONTENT_TYPE)-->Line_10 $$ if (contentType != null && contentType.toLowerCase().startsWith(APPLICATION_JSON_MIME)) [ FD ]
