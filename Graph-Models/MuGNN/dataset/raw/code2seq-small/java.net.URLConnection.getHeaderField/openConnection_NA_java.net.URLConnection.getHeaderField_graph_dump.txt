Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_7 $$ boolean isSecureProcotol = "https".equalsIgnoreCase(aSource.getProtocol())[ CD ]
Line_7 $$ boolean isSecureProcotol = "https".equalsIgnoreCase(aSource.getProtocol())-->Line_10 $$ if (!isSecureProcotol) [ FD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_24 $$ connection.connect()[ FD ]
Line_28 $$ if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_SEE_OTHER) -->Line_31 $$ if (!redirectionAllowed(aSource, newURL)) [ CD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_25 $$ if (connection instanceof HttpURLConnection) [ FD ]
Line_30 $$ URL newURL = new URL(newLocation)-->Line_34 $$ return openConnection(newURL)[ FD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_3 $$ URLConnection connection = aSource.openConnection()[ FD ]
Line_37 $$ if (responseCode == HttpURLConnection.HTTP_NOT_MODIFIED || (lastModified != 0 && hasTimestamp && timestamp >= lastModified)) -->Line_38 $$ return null[ CD ]
Line_16 $$ if (connection instanceof HttpURLConnection) -->Line_19 $$ connection.setConnectTimeout(5000)[ CD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_16 $$ if (connection instanceof HttpURLConnection) [ FD ]
Line_16 $$ if (connection instanceof HttpURLConnection) -->Line_18 $$ connection.setUseCaches(true)[ CD ]
Line_16 $$ if (connection instanceof HttpURLConnection) -->Line_17 $$ ((HttpURLConnection) connection).setInstanceFollowRedirects(false)[ CD ]
Line_26 $$ HttpURLConnection httpConnection = (HttpURLConnection) connection-->Line_36 $$ long lastModified = httpConnection.getLastModified()[ FD ]
Line_9 $$ if (isAuthInfoSet) -->Line_13 $$ String basicAuth = Base64.encodeBytes(aSource.getUserInfo().getBytes(StandardCharsets.UTF_8))[ CD ]
Line_9 $$ if (isAuthInfoSet) -->Line_10 $$ if (!isSecureProcotol) [ CD ]
Line_30 $$ URL newURL = new URL(newLocation)-->Line_31 $$ if (!redirectionAllowed(aSource, newURL)) [ FD ]
Line_25 $$ if (connection instanceof HttpURLConnection) -->Line_27 $$ int responseCode = httpConnection.getResponseCode()[ CD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_14 $$ connection.setRequestProperty("Authorization", "Basic " + basicAuth)[ FD ]
Line_25 $$ if (connection instanceof HttpURLConnection) -->Line_26 $$ HttpURLConnection httpConnection = (HttpURLConnection) connection[ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_8 $$ boolean isAuthInfoSet = !Strings.isNullOrEmpty(aSource.getUserInfo())[ FD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_21 $$ connection.setRequestProperty("ES-Version", Version.CURRENT.toString())[ CD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_5 $$ connection.setIfModifiedSince(timestamp)[ FD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_22 $$ connection.setRequestProperty("ES-Build-Hash", Build.CURRENT.shortHash())[ CD ]
Line_28 $$ if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_SEE_OTHER) -->Line_34 $$ return openConnection(newURL)[ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_13 $$ String basicAuth = Base64.encodeBytes(aSource.getUserInfo().getBytes(StandardCharsets.UTF_8))[ FD ]
Line_31 $$ if (!redirectionAllowed(aSource, newURL)) -->Line_32 $$ return null[ CD ]
Line_25 $$ if (connection instanceof HttpURLConnection) -->Line_40 $$ if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) [ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_16 $$ if (connection instanceof HttpURLConnection) [ CD ]
Line_9 $$ if (isAuthInfoSet) -->Line_14 $$ connection.setRequestProperty("Authorization", "Basic " + basicAuth)[ CD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_22 $$ connection.setRequestProperty("ES-Build-Hash", Build.CURRENT.shortHash())[ FD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_31 $$ if (!redirectionAllowed(aSource, newURL)) [ FD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_23 $$ connection.setRequestProperty("User-Agent", "elasticsearch-plugin-manager")[ FD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_4 $$ if (hasTimestamp) [ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_45 $$ return connection[ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_3 $$ URLConnection connection = aSource.openConnection()[ CD ]
Line_4 $$ if (hasTimestamp) -->Line_5 $$ connection.setIfModifiedSince(timestamp)[ CD ]
Line_28 $$ if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_SEE_OTHER) -->Line_29 $$ String newLocation = httpConnection.getHeaderField("Location")[ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_24 $$ connection.connect()[ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_23 $$ connection.setRequestProperty("User-Agent", "elasticsearch-plugin-manager")[ CD ]
Line_26 $$ HttpURLConnection httpConnection = (HttpURLConnection) connection-->Line_27 $$ int responseCode = httpConnection.getResponseCode()[ FD ]
Line_26 $$ HttpURLConnection httpConnection = (HttpURLConnection) connection-->Line_29 $$ String newLocation = httpConnection.getHeaderField("Location")[ FD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_9 $$ if (isAuthInfoSet) [ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_7 $$ boolean isSecureProcotol = "https".equalsIgnoreCase(aSource.getProtocol())[ FD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_25 $$ if (connection instanceof HttpURLConnection) [ CD ]
Line_25 $$ if (connection instanceof HttpURLConnection) -->Line_37 $$ if (responseCode == HttpURLConnection.HTTP_NOT_MODIFIED || (lastModified != 0 && hasTimestamp && timestamp >= lastModified)) [ CD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_21 $$ connection.setRequestProperty("ES-Version", Version.CURRENT.toString())[ FD ]
Line_25 $$ if (connection instanceof HttpURLConnection) -->Line_28 $$ if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_SEE_OTHER) [ CD ]
Line_40 $$ if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) -->Line_41 $$ String message = "HTTP Authorization failure"[ CD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_18 $$ connection.setUseCaches(true)[ FD ]
Line_25 $$ if (connection instanceof HttpURLConnection) -->Line_36 $$ long lastModified = httpConnection.getLastModified()[ CD ]
Line_3 $$ URLConnection connection = aSource.openConnection()-->Line_19 $$ connection.setConnectTimeout(5000)[ FD ]
Line_28 $$ if (responseCode == HttpURLConnection.HTTP_MOVED_PERM || responseCode == HttpURLConnection.HTTP_MOVED_TEMP || responseCode == HttpURLConnection.HTTP_SEE_OTHER) -->Line_30 $$ URL newURL = new URL(newLocation)[ CD ]
Line_2 $$ private URLConnection openConnection(URL aSource) throws IOException -->Line_8 $$ boolean isAuthInfoSet = !Strings.isNullOrEmpty(aSource.getUserInfo())[ CD ]
Line_27 $$ int responseCode = httpConnection.getResponseCode()-->Line_40 $$ if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) [ FD ]
