Line_20 $$ AuthenticatedURL aUrl = new AuthenticatedURL(this)-->Line_21 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_25 $$ String contentType = conn.getHeaderField(CONTENT_TYPE)-->Line_26 $$ contentType = (contentType != null) ? contentType.toLowerCase() : null[ FD ]
Line_21 $$ HttpURLConnection conn = aUrl.openConnection(url, token)-->Line_22 $$ conn.setRequestMethod(operation.getHttpMethod())[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_23 $$ validateResponse(conn, HttpURLConnection.HTTP_OK)[ CD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_32 $$ throw new AuthenticationException(String.format("'%s' did not handle the '%s' delegation token operation: %s", url.getAuthority(), operation, ex.getMessage()), ex)[ FD ]
Line_26 $$ contentType = (contentType != null) ? contentType.toLowerCase() : null-->Line_27 $$ if (contentType != null && contentType.contains(APPLICATION_JSON_MIME)) [ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_21 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_20 $$ AuthenticatedURL aUrl = new AuthenticatedURL(this)[ CD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_9 $$ if (dToken != null) [ CD ]
Line_6 $$ if (renewer != null) -->Line_7 $$ params.put(RENEWER_PARAM, renewer)[ CD ]
Line_9 $$ if (dToken != null) -->Line_10 $$ params.put(TOKEN_PARAM, dToken.encodeToUrlString())[ CD ]
Line_4 $$ Map<String, String> params = new HashMap<String, String>()-->Line_5 $$ params.put(OP_PARAM, operation.toString())[ FD ]
Line_14 $$ String separator = (urlStr.contains("?")) ? "&" : "?"-->Line_17 $$ separator = "&"[ FD ]
Line_21 $$ HttpURLConnection conn = aUrl.openConnection(url, token)-->Line_30 $$ ret = mapper.readValue(conn.getInputStream(), Map.class)[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_13 $$ StringBuilder sb = new StringBuilder(urlStr)[ CD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_21 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ CD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_6 $$ if (renewer != null) [ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_5 $$ params.put(OP_PARAM, operation.toString())[ CD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_19 $$ url = new URL(sb.toString())[ FD ]
Line_12 $$ String urlStr = url.toExternalForm()-->Line_14 $$ String separator = (urlStr.contains("?")) ? "&" : "?"[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder(urlStr)-->Line_19 $$ url = new URL(sb.toString())[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_3 $$ Map ret = null[ CD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_4 $$ Map<String, String> params = new HashMap<String, String>()[ CD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_9 $$ if (dToken != null) [ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_19 $$ url = new URL(sb.toString())[ CD ]
Line_4 $$ Map<String, String> params = new HashMap<String, String>()-->Line_7 $$ params.put(RENEWER_PARAM, renewer)[ FD ]
Line_14 $$ String separator = (urlStr.contains("?")) ? "&" : "?"-->Line_16 $$ sb.append(separator).append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), "UTF8"))[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_5 $$ params.put(OP_PARAM, operation.toString())[ FD ]
Line_4 $$ Map<String, String> params = new HashMap<String, String>()-->Line_10 $$ params.put(TOKEN_PARAM, dToken.encodeToUrlString())[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_22 $$ conn.setRequestMethod(operation.getHttpMethod())[ FD ]
Line_29 $$ ObjectMapper mapper = new ObjectMapper()-->Line_30 $$ ret = mapper.readValue(conn.getInputStream(), Map.class)[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_6 $$ if (renewer != null) [ CD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_38 $$ return ret[ CD ]
Line_19 $$ url = new URL(sb.toString())-->Line_35 $$ throw new AuthenticationException(String.format("'%s' did not " + "respond with JSON to the '%s' delegation token operation", url.getAuthority(), operation))[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_14 $$ String separator = (urlStr.contains("?")) ? "&" : "?"[ CD ]
Line_19 $$ url = new URL(sb.toString())-->Line_32 $$ throw new AuthenticationException(String.format("'%s' did not handle the '%s' delegation token operation: %s", url.getAuthority(), operation, ex.getMessage()), ex)[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_24 $$ if (hasResponse) [ CD ]
Line_3 $$ Map ret = null-->Line_30 $$ ret = mapper.readValue(conn.getInputStream(), Map.class)[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_10 $$ params.put(TOKEN_PARAM, dToken.encodeToUrlString())[ FD ]
Line_24 $$ if (hasResponse) -->Line_26 $$ contentType = (contentType != null) ? contentType.toLowerCase() : null[ CD ]
Line_4 $$ Map<String, String> params = new HashMap<String, String>()-->Line_15 $$ for (Map.Entry<String, String> entry : params.entrySet()) [ FD ]
Line_19 $$ url = new URL(sb.toString())-->Line_21 $$ HttpURLConnection conn = aUrl.openConnection(url, token)[ FD ]
Line_21 $$ HttpURLConnection conn = aUrl.openConnection(url, token)-->Line_25 $$ String contentType = conn.getHeaderField(CONTENT_TYPE)[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_22 $$ conn.setRequestMethod(operation.getHttpMethod())[ CD ]
Line_15 $$ for (Map.Entry<String, String> entry : params.entrySet()) -->Line_16 $$ sb.append(separator).append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), "UTF8"))[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_12 $$ String urlStr = url.toExternalForm()[ CD ]
Line_24 $$ if (hasResponse) -->Line_25 $$ String contentType = conn.getHeaderField(CONTENT_TYPE)[ CD ]
Line_24 $$ if (hasResponse) -->Line_27 $$ if (contentType != null && contentType.contains(APPLICATION_JSON_MIME)) [ CD ]
Line_25 $$ String contentType = conn.getHeaderField(CONTENT_TYPE)-->Line_27 $$ if (contentType != null && contentType.contains(APPLICATION_JSON_MIME)) [ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_35 $$ throw new AuthenticationException(String.format("'%s' did not " + "respond with JSON to the '%s' delegation token operation", url.getAuthority(), operation))[ FD ]
Line_21 $$ HttpURLConnection conn = aUrl.openConnection(url, token)-->Line_23 $$ validateResponse(conn, HttpURLConnection.HTTP_OK)[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_7 $$ params.put(RENEWER_PARAM, renewer)[ FD ]
Line_2 $$ private Map doDelegationTokenOperation(URL url, AuthenticatedURL.Token token, DelegationTokenOperation operation, String renewer, Token<?> dToken, boolean hasResponse) throws IOException, AuthenticationException -->Line_12 $$ String urlStr = url.toExternalForm()[ FD ]
Line_13 $$ StringBuilder sb = new StringBuilder(urlStr)-->Line_16 $$ sb.append(separator).append(entry.getKey()).append("=").append(URLEncoder.encode(entry.getValue(), "UTF8"))[ FD ]
