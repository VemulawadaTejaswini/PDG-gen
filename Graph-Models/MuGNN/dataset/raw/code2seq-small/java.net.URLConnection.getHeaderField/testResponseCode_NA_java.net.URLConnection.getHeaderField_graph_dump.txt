Line_2 $$ public void testResponseCode() throws IOException -->Line_24 $$ assertEquals(HttpServletResponse.SC_FORBIDDEN, conn.getResponseCode())[ CD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_115 $$ URL url = webhdfs.toUrl(op, path)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_81 $$ final String redirect = conn.getHeaderField("Location")[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_61 $$ conn.connect()[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_109 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_91 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_15 $$ final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, HttpServletResponse.SC_OK)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_61 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_33 $$ conn.disconnect()[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_64 $$ assertEquals(MediaType.APPLICATION_OCTET_STREAM, conn.getContentType())[ FD ]
Line_128 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_132 $$ conn.connect()[ FD ]
Line_86 $$ final int j = redirect.indexOf("&", i)-->Line_87 $$ String modified = redirect.substring(0, i - 1) + redirect.substring(j)[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_38 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_62 $$ assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_129 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_78 $$ conn.setDoOutput(false)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_17 $$ conn.disconnect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_52 $$ assertEquals(HttpServletResponse.SC_NOT_FOUND, conn.getResponseCode())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_102 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_63 $$ assertEquals(0, conn.getContentLength())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_130 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_119 $$ conn.setInstanceFollowRedirects(false)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_128 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()[ CD ]
Line_128 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_130 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_99 $$ final URL url = webhdfs.toUrl(op, file)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_53 $$ conn.disconnect()[ CD ]
Line_81 $$ final String redirect = conn.getHeaderField("Location")-->Line_87 $$ String modified = redirect.substring(0, i - 1) + redirect.substring(j)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_88 $$ WebHdfsFileSystem.LOG.info("modified = " + modified)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_132 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_93 $$ conn.connect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_44 $$ conn.disconnect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_87 $$ String modified = redirect.substring(0, i - 1) + redirect.substring(j)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_115 $$ URL url = webhdfs.toUrl(op, path)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_128 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_92 $$ conn.setDoOutput(op.getDoOutput())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_77 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_58 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_7 $$ final Path file = new Path("/test/file")-->Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_91 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_23 $$ conn.connect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_77 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_82 $$ conn.disconnect()[ FD ]
Line_81 $$ final String redirect = conn.getHeaderField("Location")-->Line_85 $$ final int i = redirect.indexOf(NamenodeAddressParam.NAME)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_10 $$ out.close()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_49 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETFILESTATUS, p)[ CD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_65 $$ assertEquals((short) 0755, webhdfs.getFileStatus(dir).getPermission().toShort())[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_75 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_24 $$ assertEquals(HttpServletResponse.SC_FORBIDDEN, conn.getResponseCode())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_16 $$ assertEquals(WebHdfsFileSystem.getHomeDirectoryString(ugi), m.get(Path.class.getSimpleName()))[ CD ]
Line_81 $$ final String redirect = conn.getHeaderField("Location")-->Line_86 $$ final int j = redirect.indexOf("&", i)[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_60 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_109 $$ conn.disconnect()[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_135 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_86 $$ final int j = redirect.indexOf("&", i)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_40 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_7 $$ final Path file = new Path("/test/file")[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_65 $$ assertEquals((short) 0755, webhdfs.getFileStatus(dir).getPermission().toShort())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_85 $$ final int i = redirect.indexOf(NamenodeAddressParam.NAME)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_80 $$ conn.connect()[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_126 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_102 $$ conn.connect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_41 $$ conn.connect()[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_101 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_38 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_114 $$ Path path = new Path("/test/path with spaces")[ CD ]
Line_128 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_133 $$ assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode())[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_41 $$ conn.connect()[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_31 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_42 $$ assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode())[ FD ]
Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)-->Line_10 $$ out.close()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_75 $$ final URL url = webhdfs.toUrl(op, dir)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_92 $$ conn.setDoOutput(op.getDoOutput())[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_104 $$ WebHdfsFileSystem.jsonParse(conn, false)[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_117 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_58 $$ final URL url = webhdfs.toUrl(op, dir)[ CD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_75 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_118 $$ conn.setDoOutput(false)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_129 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_15 $$ final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, HttpServletResponse.SC_OK)[ CD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)[ FD ]
Line_81 $$ final String redirect = conn.getHeaderField("Location")-->Line_124 $$ redirect = conn.getHeaderField("Location")[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_79 $$ conn.setInstanceFollowRedirects(false)[ FD ]
Line_128 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_135 $$ conn.disconnect()[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_33 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_60 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_42 $$ assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_4 $$ final Path root = new Path("/")[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_99 $$ final URL url = webhdfs.toUrl(op, file)[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_66 $$ conn.disconnect()[ CD ]
Line_114 $$ Path path = new Path("/test/path with spaces")-->Line_115 $$ URL url = webhdfs.toUrl(op, path)[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_49 $$ final URL url = webhdfs.toUrl(GetOpParam.Op.GETFILESTATUS, p)[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_6 $$ assertTrue(webhdfs.mkdirs(dir))[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_66 $$ conn.disconnect()[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_81 $$ final String redirect = conn.getHeaderField("Location")[ FD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_65 $$ assertEquals((short) 0755, webhdfs.getFileStatus(dir).getPermission().toShort())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_79 $$ conn.setInstanceFollowRedirects(false)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_62 $$ assertEquals(HttpServletResponse.SC_OK, conn.getResponseCode())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_78 $$ conn.setDoOutput(false)[ CD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_58 $$ final URL url = webhdfs.toUrl(op, dir)[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_40 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_43 $$ assertFalse(webhdfs.setReplication(dir, (short) 1))[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_25 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_31 $$ conn.connect()[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_93 $$ conn.connect()[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_63 $$ assertEquals(0, conn.getContentLength())[ FD ]
Line_7 $$ final Path file = new Path("/test/file")-->Line_99 $$ final URL url = webhdfs.toUrl(op, file)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_6 $$ assertTrue(webhdfs.mkdirs(dir))[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_94 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_9 $$ out.write(1)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_124 $$ redirect = conn.getHeaderField("Location")[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_53 $$ conn.disconnect()[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_118 $$ conn.setDoOutput(false)[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_51 $$ conn.connect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_32 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_94 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_51 $$ conn.connect()[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_122 $$ conn.connect()[ FD ]
Line_3 $$ final WebHdfsFileSystem webhdfs = (WebHdfsFileSystem) fs-->Line_43 $$ assertFalse(webhdfs.setReplication(dir, (short) 1))[ FD ]
Line_128 $$ conn = (HttpURLConnection) new URL(redirect).openConnection()-->Line_129 $$ conn.setRequestMethod(op.getType().toString())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_101 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_17 $$ conn.disconnect()[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_64 $$ assertEquals(MediaType.APPLICATION_OCTET_STREAM, conn.getContentType())[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_32 $$ assertEquals(HttpServletResponse.SC_BAD_REQUEST, conn.getResponseCode())[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_52 $$ assertEquals(HttpServletResponse.SC_NOT_FOUND, conn.getResponseCode())[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_123 $$ assertEquals(HttpServletResponse.SC_TEMPORARY_REDIRECT, conn.getResponseCode())[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_117 $$ conn.setRequestMethod(op.getType().toString())[ CD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_43 $$ assertFalse(webhdfs.setReplication(dir, (short) 1))[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_25 $$ conn.disconnect()[ CD ]
Line_5 $$ final Path dir = new Path("/test/testUrl")-->Line_6 $$ assertTrue(webhdfs.mkdirs(dir))[ FD ]
Line_85 $$ final int i = redirect.indexOf(NamenodeAddressParam.NAME)-->Line_86 $$ final int j = redirect.indexOf("&", i)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_130 $$ conn.setDoOutput(op.getDoOutput())[ CD ]
Line_8 $$ final FSDataOutputStream out = webhdfs.create(file)-->Line_9 $$ out.write(1)[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_23 $$ conn.connect()[ FD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_119 $$ conn.setInstanceFollowRedirects(false)[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_82 $$ conn.disconnect()[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_80 $$ conn.connect()[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_133 $$ assertEquals(HttpServletResponse.SC_CREATED, conn.getResponseCode())[ FD ]
Line_15 $$ final Map<?, ?> m = WebHdfsTestUtil.connectAndGetJson(conn, HttpServletResponse.SC_OK)-->Line_16 $$ assertEquals(WebHdfsFileSystem.getHomeDirectoryString(ugi), m.get(Path.class.getSimpleName()))[ FD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_5 $$ final Path dir = new Path("/test/testUrl")[ CD ]
Line_2 $$ public void testResponseCode() throws IOException -->Line_38 $$ final URL url = webhdfs.toUrl(op, dir)[ CD ]
Line_14 $$ final HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_44 $$ conn.disconnect()[ FD ]
