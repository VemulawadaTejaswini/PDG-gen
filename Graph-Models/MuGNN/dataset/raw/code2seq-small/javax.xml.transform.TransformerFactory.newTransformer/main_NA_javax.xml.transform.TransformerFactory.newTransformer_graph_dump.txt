Line_2 $$ public static void main(String[] args) throws Throwable -->Line_19 $$ if (isSmartErrorHandling) [ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_13 $$ if (uriResolverClass != null) [ CD ]
Line_29 $$ if (s.startsWith("xslt.param.")) -->Line_32 $$ transformer.setParameter(name, value)[ CD ]
Line_51 $$ final Socket socket = serverSocket.accept()-->Line_52 $$ final BufferedOutputStream socketStream = new BufferedOutputStream(socket.getOutputStream(), 16)[ FD ]
Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_75 $$ result = new StreamResult(System.out)-->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_28 $$ String s = (String) props.nextElement()-->Line_30 $$ final String name = s.substring("xslt.param.".length())[ FD ]
Line_44 $$ final StreamResult result-->Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ FD ]
Line_47 $$ if (port != -1) -->Line_63 $$ final String encoding = System.getProperty("file.encoding")[ CD ]
Line_12 $$ final String uriResolverClass = System.getProperty("xslt.uri-resolver")-->Line_13 $$ if (uriResolverClass != null) [ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_47 $$ if (port != -1) [ CD ]
Line_53 $$ if (out != null) -->Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))[ CD ]
Line_38 $$ if (out != null) -->Line_42 $$ fileStream = null[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_22 $$ final File xslt = new File(System.getProperty("xslt.file"))[ CD ]
Line_17 $$ final MyErrorListener listener = new MyErrorListener(trouble)-->Line_20 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_88 $$ result.getOutputStream().close()[ FD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_75 $$ result = new StreamResult(System.out)[ FD ]
Line_8 $$ transformerFactory = createTransformerFactoryStatic()-->Line_10 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_10 $$ transformerFactory = createTransformerFactoryStatic()-->Line_24 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))[ FD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_14 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_46 $$ final int port = _port.intValue()-->Line_47 $$ if (port != -1) [ FD ]
Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_75 $$ result = new StreamResult(System.out)[ FD ]
Line_36 $$ final String out = System.getProperty("xslt.output")-->Line_72 $$ if (out != null) [ FD ]
Line_44 $$ final StreamResult result-->Line_88 $$ result.getOutputStream().close()[ FD ]
Line_82 $$ final Writer out = result.getWriter()-->Line_84 $$ out.flush()[ FD ]
Line_24 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))-->Line_32 $$ transformer.setParameter(name, value)[ FD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_10 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_86 $$ if (result.getOutputStream() != null) [ FD ]
Line_8 $$ transformerFactory = createTransformerFactoryStatic()-->Line_24 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))[ FD ]
Line_44 $$ final StreamResult result-->Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_53 $$ if (out != null) -->Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ CD ]
Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_28 $$ String s = (String) props.nextElement()-->Line_29 $$ if (s.startsWith("xslt.param.")) [ FD ]
Line_66 $$ if (out != null) -->Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] [ CD ]
Line_44 $$ final StreamResult result-->Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_86 $$ if (result.getOutputStream() != null) [ FD ]
Line_86 $$ if (result.getOutputStream() != null) -->Line_87 $$ result.getOutputStream().flush()[ CD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_13 $$ if (uriResolverClass != null) -->Line_14 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ CD ]
Line_31 $$ final String value = System.getProperty(s)-->Line_32 $$ transformer.setParameter(name, value)[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_4 $$ TransformerFactory transformerFactory[ CD ]
Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_87 $$ result.getOutputStream().flush()[ FD ]
Line_24 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))-->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_47 $$ if (port != -1) -->Line_64 $$ if (encoding != null) [ CD ]
Line_12 $$ final String uriResolverClass = System.getProperty("xslt.uri-resolver")-->Line_14 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_18 $$ final boolean isSmartErrorHandling = System.getProperty("xslt.smart-error-handling", "false").equals("true")[ CD ]
Line_36 $$ final String out = System.getProperty("xslt.output")-->Line_38 $$ if (out != null) [ FD ]
Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_88 $$ result.getOutputStream().close()[ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_36 $$ final String out = System.getProperty("xslt.output")[ CD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_24 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))[ FD ]
Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_75 $$ result = new StreamResult(System.out)[ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_35 $$ final File input = new File(System.getProperty("xslt.input"))[ CD ]
Line_44 $$ final StreamResult result-->Line_75 $$ result = new StreamResult(System.out)[ FD ]
Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_36 $$ final String out = System.getProperty("xslt.output")-->Line_66 $$ if (out != null) [ FD ]
Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_87 $$ result.getOutputStream().flush()[ FD ]
Line_17 $$ final MyErrorListener listener = new MyErrorListener(trouble)-->Line_98 $$ listener.error(e)[ FD ]
Line_36 $$ final String out = System.getProperty("xslt.output")-->Line_85 $$ out.close()[ FD ]
Line_44 $$ final StreamResult result-->Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))[ FD ]
Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_86 $$ if (result.getOutputStream() != null) [ FD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_16 $$ final boolean[] trouble = new boolean[] [ CD ]
Line_8 $$ transformerFactory = createTransformerFactoryStatic()-->Line_20 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_26 $$ final Enumeration props = System.getProperties().keys()[ CD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_14 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_36 $$ final String out = System.getProperty("xslt.output")-->Line_83 $$ if (out != null) [ FD ]
Line_10 $$ transformerFactory = createTransformerFactoryStatic()-->Line_14 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_97 $$ if (isSmartErrorHandling) -->Line_98 $$ listener.error(e)[ CD ]
Line_82 $$ final Writer out = result.getWriter()-->Line_85 $$ out.close()[ FD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_44 $$ final StreamResult result-->Line_86 $$ if (result.getOutputStream() != null) [ FD ]
Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_82 $$ final Writer out = result.getWriter()[ FD ]
Line_82 $$ final Writer out = result.getWriter()-->Line_83 $$ if (out != null) [ FD ]
Line_38 $$ if (out != null) -->Line_40 $$ fileStream = new BufferedOutputStream(new FileOutputStream(output))[ CD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_87 $$ result.getOutputStream().flush()[ FD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_86 $$ if (result.getOutputStream() != null) [ FD ]
Line_83 $$ if (out != null) -->Line_84 $$ out.flush()[ CD ]
Line_44 $$ final StreamResult result-->Line_82 $$ final Writer out = result.getWriter()[ FD ]
Line_63 $$ final String encoding = System.getProperty("file.encoding")-->Line_65 $$ transformer.setOutputProperty("encoding", encoding)[ FD ]
Line_64 $$ if (encoding != null) -->Line_65 $$ transformer.setOutputProperty("encoding", encoding)[ CD ]
Line_8 $$ transformerFactory = createTransformerFactoryStatic()-->Line_14 $$ transformerFactory.setURIResolver((URIResolver) Class.forName(uriResolverClass).newInstance())[ FD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_8 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_6 $$ transformerFactory = main.createTransformerFactory()-->Line_20 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_20 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_88 $$ result.getOutputStream().close()[ FD ]
Line_64 $$ if (encoding != null) -->Line_72 $$ if (out != null) [ CD ]
Line_86 $$ if (result.getOutputStream() != null) -->Line_88 $$ result.getOutputStream().close()[ CD ]
Line_75 $$ result = new StreamResult(System.out)-->Line_82 $$ final Writer out = result.getWriter()[ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_38 $$ if (out != null) [ CD ]
Line_72 $$ if (out != null) -->Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ CD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_3 $$ final XSLTMain main = loadMain()-->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_88 $$ result.getOutputStream().close()[ FD ]
Line_49 $$ final ServerSocket serverSocket = new ServerSocket(port, 1, InetAddress.getByName("127.0.0.1"))-->Line_51 $$ final Socket socket = serverSocket.accept()[ FD ]
Line_44 $$ final StreamResult result-->Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_75 $$ result = new StreamResult(System.out)[ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_27 $$ while (props.hasMoreElements()) [ CD ]
Line_38 $$ if (out != null) -->Line_39 $$ final File output = new File(out)[ CD ]
Line_27 $$ while (props.hasMoreElements()) -->Line_28 $$ String s = (String) props.nextElement()[ CD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_82 $$ final Writer out = result.getWriter()[ FD ]
Line_44 $$ final StreamResult result-->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ FD ]
Line_19 $$ if (isSmartErrorHandling) -->Line_20 $$ transformerFactory.setErrorListener(listener)[ CD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_24 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))[ FD ]
Line_75 $$ result = new StreamResult(System.out)-->Line_88 $$ result.getOutputStream().close()[ FD ]
Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_88 $$ result.getOutputStream().close()[ FD ]
Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_87 $$ result.getOutputStream().flush()[ FD ]
Line_26 $$ final Enumeration props = System.getProperties().keys()-->Line_27 $$ while (props.hasMoreElements()) [ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_46 $$ final int port = _port.intValue()[ CD ]
Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))-->Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ FD ]
Line_40 $$ fileStream = new BufferedOutputStream(new FileOutputStream(output))-->Line_42 $$ fileStream = null[ FD ]
Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] -->Line_82 $$ final Writer out = result.getWriter()[ FD ]
Line_83 $$ if (out != null) -->Line_86 $$ if (result.getOutputStream() != null) [ CD ]
Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_86 $$ if (result.getOutputStream() != null) [ FD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_94 $$ main.start(transformer, new StreamSource(input), result)[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_3 $$ final XSLTMain main = loadMain()[ CD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_79 $$ Runtime.getRuntime().addShutdownHook(new Thread("XSLT runner") [ CD ]
Line_64 $$ if (encoding != null) -->Line_66 $$ if (out != null) [ CD ]
Line_29 $$ if (s.startsWith("xslt.param.")) -->Line_31 $$ final String value = System.getProperty(s)[ CD ]
Line_44 $$ final StreamResult result-->Line_87 $$ result.getOutputStream().flush()[ FD ]
Line_66 $$ if (out != null) -->Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ CD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_67 $$ result = new StreamResult(new OutputStreamWriter(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_75 $$ result = new StreamResult(System.out)-->Line_87 $$ result.getOutputStream().flush()[ FD ]
Line_36 $$ final String out = System.getProperty("xslt.output")-->Line_53 $$ if (out != null) [ FD ]
Line_29 $$ if (s.startsWith("xslt.param.")) -->Line_30 $$ final String name = s.substring("xslt.param.".length())[ CD ]
Line_10 $$ transformerFactory = createTransformerFactoryStatic()-->Line_20 $$ transformerFactory.setErrorListener(listener)[ FD ]
Line_45 $$ final Integer _port = Integer.getInteger("xslt.listen-port", -1)-->Line_46 $$ final int port = _port.intValue()[ FD ]
Line_26 $$ final Enumeration props = System.getProperties().keys()-->Line_28 $$ String s = (String) props.nextElement()[ FD ]
Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_75 $$ result = new StreamResult(System.out)[ FD ]
Line_83 $$ if (out != null) -->Line_85 $$ out.close()[ CD ]
Line_3 $$ final XSLTMain main = loadMain()-->Line_6 $$ transformerFactory = main.createTransformerFactory()[ FD ]
Line_63 $$ final String encoding = System.getProperty("file.encoding")-->Line_64 $$ if (encoding != null) [ FD ]
Line_30 $$ final String name = s.substring("xslt.param.".length())-->Line_32 $$ transformer.setParameter(name, value)[ FD ]
Line_28 $$ String s = (String) props.nextElement()-->Line_31 $$ final String value = System.getProperty(s)[ FD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_8 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_6 $$ transformerFactory = main.createTransformerFactory()[ FD ]
Line_4 $$ TransformerFactory transformerFactory-->Line_10 $$ transformerFactory = createTransformerFactoryStatic()[ FD ]
Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] [ FD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_82 $$ final Writer out = result.getWriter()[ FD ]
Line_49 $$ final ServerSocket serverSocket = new ServerSocket(port, 1, InetAddress.getByName("127.0.0.1"))-->Line_50 $$ serverSocket.setSoTimeout(Integer.getInteger("xslt.listen-timeout", 5000).intValue())[ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_45 $$ final Integer _port = Integer.getInteger("xslt.listen-port", -1)[ CD ]
Line_36 $$ final String out = System.getProperty("xslt.output")-->Line_84 $$ out.flush()[ FD ]
Line_27 $$ while (props.hasMoreElements()) -->Line_29 $$ if (s.startsWith("xslt.param.")) [ CD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))[ FD ]
Line_69 $$ result = new StreamResult(new OutputStreamWriter(System.out, encoding))-->Line_82 $$ final Writer out = result.getWriter()[ FD ]
Line_72 $$ if (out != null) -->Line_75 $$ result = new StreamResult(System.out)[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_17 $$ final MyErrorListener listener = new MyErrorListener(trouble)[ CD ]
Line_2 $$ public static void main(String[] args) throws Throwable -->Line_12 $$ final String uriResolverClass = System.getProperty("xslt.uri-resolver")[ CD ]
Line_54 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_56 $$ result = new StreamResult(new OutputStreamWriter(socketStream, "UTF-8"))[ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_37 $$ OutputStream fileStream[ CD ]
Line_24 $$ final Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt))-->Line_65 $$ transformer.setOutputProperty("encoding", encoding)[ FD ]
Line_37 $$ OutputStream fileStream-->Line_40 $$ fileStream = new BufferedOutputStream(new FileOutputStream(output))[ FD ]
Line_75 $$ result = new StreamResult(System.out)-->Line_86 $$ if (result.getOutputStream() != null) [ FD ]
Line_73 $$ result = new StreamResult(new ForkedOutputStream(new OutputStream[] -->Line_87 $$ result.getOutputStream().flush()[ FD ]
Line_37 $$ OutputStream fileStream-->Line_42 $$ fileStream = null[ FD ]
Line_25 $$ if (transformer != null && !trouble[0]) -->Line_44 $$ final StreamResult result[ CD ]
