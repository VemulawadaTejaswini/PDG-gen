Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_21 $$ Map<String, TaskFile> nextTaskFiles = nextTask.getTaskFiles()[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_31 $$ if (lessonDir == null) [ CD ]
Line_36 $$ if (taskDir == null) -->Line_37 $$ return[ CD ]
Line_5 $$ if (!studyState.isValid()) -->Line_6 $$ return[ CD ]
Line_43 $$ if (shouldBeActive != null) -->Line_44 $$ ProjectView.getInstance(project).select(shouldBeActive, shouldBeActive, false)[ CD ]
Line_47 $$ ToolWindow runToolWindow = ToolWindowManager.getInstance(project).getToolWindow(ToolWindowId.RUN)-->Line_48 $$ if (runToolWindow != null) [ FD ]
Line_22 $$ if (nextTaskFiles.isEmpty()) -->Line_23 $$ return[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_27 $$ if (projectDir == null) [ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_34 $$ String taskDirName = EduNames.TASK + String.valueOf(nextTaskIndex)[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_8 $$ Task nextTask = getTargetTask(studyState.getTask())[ CD ]
Line_8 $$ Task nextTask = getTargetTask(studyState.getTask())-->Line_19 $$ int nextTaskIndex = nextTask.getIndex()[ FD ]
Line_8 $$ Task nextTask = getTargetTask(studyState.getTask())-->Line_21 $$ Map<String, TaskFile> nextTaskFiles = nextTask.getTaskFiles()[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_39 $$ VirtualFile shouldBeActive = getFileToActivate(project, nextTaskFiles, taskDir)[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_40 $$ JTree tree = ProjectView.getInstance(project).getCurrentProjectViewPane().getTree()[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_47 $$ ToolWindow runToolWindow = ToolWindowManager.getInstance(project).getToolWindow(ToolWindowId.RUN)[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_22 $$ if (nextTaskFiles.isEmpty()) [ CD ]
Line_26 $$ String lessonDirName = EduNames.LESSON + String.valueOf(lessonIndex)-->Line_30 $$ VirtualFile lessonDir = projectDir.findChild(lessonDirName)[ FD ]
Line_39 $$ VirtualFile shouldBeActive = getFileToActivate(project, nextTaskFiles, taskDir)-->Line_45 $$ FileEditorManager.getInstance(project).openFile(shouldBeActive, true)[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_44 $$ ProjectView.getInstance(project).select(shouldBeActive, shouldBeActive, false)[ FD ]
Line_47 $$ ToolWindow runToolWindow = ToolWindowManager.getInstance(project).getToolWindow(ToolWindowId.RUN)-->Line_49 $$ runToolWindow.hide(null)[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_19 $$ int nextTaskIndex = nextTask.getIndex()[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_20 $$ int lessonIndex = nextTask.getLesson().getIndex()[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_39 $$ VirtualFile shouldBeActive = getFileToActivate(project, nextTaskFiles, taskDir)[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_47 $$ ToolWindow runToolWindow = ToolWindowManager.getInstance(project).getToolWindow(ToolWindowId.RUN)[ FD ]
Line_27 $$ if (projectDir == null) -->Line_28 $$ return[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_36 $$ if (taskDir == null) [ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_41 $$ TreePath path = TreeUtil.getFirstNodePath(tree)[ CD ]
Line_3 $$ StudyEditor studyEditor = StudyUtils.getSelectedStudyEditor(project)-->Line_13 $$ balloon.show(StudyUtils.computeLocation(studyEditor.getEditor()), Balloon.Position.above)[ FD ]
Line_21 $$ Map<String, TaskFile> nextTaskFiles = nextTask.getTaskFiles()-->Line_22 $$ if (nextTaskFiles.isEmpty()) [ FD ]
Line_8 $$ Task nextTask = getTargetTask(studyState.getTask())-->Line_9 $$ if (nextTask == null) [ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_3 $$ StudyEditor studyEditor = StudyUtils.getSelectedStudyEditor(project)[ FD ]
Line_4 $$ StudyState studyState = new StudyState(studyEditor)-->Line_5 $$ if (!studyState.isValid()) [ FD ]
Line_9 $$ if (nextTask == null) -->Line_10 $$ BalloonBuilder balloonBuilder = JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(getNavigationFinishedMessage(), MessageType.INFO, null)[ CD ]
Line_9 $$ if (nextTask == null) -->Line_13 $$ balloon.show(StudyUtils.computeLocation(studyEditor.getEditor()), Balloon.Position.above)[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_30 $$ VirtualFile lessonDir = projectDir.findChild(lessonDirName)[ CD ]
Line_40 $$ JTree tree = ProjectView.getInstance(project).getCurrentProjectViewPane().getTree()-->Line_41 $$ TreePath path = TreeUtil.getFirstNodePath(tree)[ FD ]
Line_41 $$ TreePath path = TreeUtil.getFirstNodePath(tree)-->Line_42 $$ tree.collapsePath(path)[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_48 $$ if (runToolWindow != null) [ CD ]
Line_9 $$ if (nextTask == null) -->Line_11 $$ Balloon balloon = balloonBuilder.createBalloon()[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_16 $$ for (VirtualFile file : FileEditorManager.getInstance(project).getOpenFiles()) [ FD ]
Line_4 $$ StudyState studyState = new StudyState(studyEditor)-->Line_8 $$ Task nextTask = getTargetTask(studyState.getTask())[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_25 $$ VirtualFile projectDir = project.getBaseDir()[ FD ]
Line_25 $$ VirtualFile projectDir = project.getBaseDir()-->Line_30 $$ VirtualFile lessonDir = projectDir.findChild(lessonDirName)[ FD ]
Line_11 $$ Balloon balloon = balloonBuilder.createBalloon()-->Line_13 $$ balloon.show(StudyUtils.computeLocation(studyEditor.getEditor()), Balloon.Position.above)[ FD ]
Line_35 $$ VirtualFile taskDir = lessonDir.findChild(taskDirName)-->Line_39 $$ VirtualFile shouldBeActive = getFileToActivate(project, nextTaskFiles, taskDir)[ FD ]
Line_35 $$ VirtualFile taskDir = lessonDir.findChild(taskDirName)-->Line_36 $$ if (taskDir == null) [ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_42 $$ tree.collapsePath(path)[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_25 $$ VirtualFile projectDir = project.getBaseDir()[ CD ]
Line_8 $$ Task nextTask = getTargetTask(studyState.getTask())-->Line_20 $$ int lessonIndex = nextTask.getLesson().getIndex()[ FD ]
Line_21 $$ Map<String, TaskFile> nextTaskFiles = nextTask.getTaskFiles()-->Line_39 $$ VirtualFile shouldBeActive = getFileToActivate(project, nextTaskFiles, taskDir)[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_4 $$ StudyState studyState = new StudyState(studyEditor)[ CD ]
Line_40 $$ JTree tree = ProjectView.getInstance(project).getCurrentProjectViewPane().getTree()-->Line_42 $$ tree.collapsePath(path)[ FD ]
Line_16 $$ for (VirtualFile file : FileEditorManager.getInstance(project).getOpenFiles()) -->Line_17 $$ FileEditorManager.getInstance(project).closeFile(file)[ FD ]
Line_31 $$ if (lessonDir == null) -->Line_32 $$ return[ CD ]
Line_43 $$ if (shouldBeActive != null) -->Line_45 $$ FileEditorManager.getInstance(project).openFile(shouldBeActive, true)[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_43 $$ if (shouldBeActive != null) [ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_9 $$ if (nextTask == null) [ CD ]
Line_9 $$ if (nextTask == null) -->Line_14 $$ return[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_3 $$ StudyEditor studyEditor = StudyUtils.getSelectedStudyEditor(project)[ CD ]
Line_20 $$ int lessonIndex = nextTask.getLesson().getIndex()-->Line_26 $$ String lessonDirName = EduNames.LESSON + String.valueOf(lessonIndex)[ FD ]
Line_10 $$ BalloonBuilder balloonBuilder = JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(getNavigationFinishedMessage(), MessageType.INFO, null)-->Line_11 $$ Balloon balloon = balloonBuilder.createBalloon()[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_35 $$ VirtualFile taskDir = lessonDir.findChild(taskDirName)[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_40 $$ JTree tree = ProjectView.getInstance(project).getCurrentProjectViewPane().getTree()[ CD ]
Line_34 $$ String taskDirName = EduNames.TASK + String.valueOf(nextTaskIndex)-->Line_35 $$ VirtualFile taskDir = lessonDir.findChild(taskDirName)[ FD ]
Line_25 $$ VirtualFile projectDir = project.getBaseDir()-->Line_27 $$ if (projectDir == null) [ FD ]
Line_30 $$ VirtualFile lessonDir = projectDir.findChild(lessonDirName)-->Line_31 $$ if (lessonDir == null) [ FD ]
Line_39 $$ VirtualFile shouldBeActive = getFileToActivate(project, nextTaskFiles, taskDir)-->Line_43 $$ if (shouldBeActive != null) [ FD ]
Line_48 $$ if (runToolWindow != null) -->Line_49 $$ runToolWindow.hide(null)[ CD ]
Line_19 $$ int nextTaskIndex = nextTask.getIndex()-->Line_34 $$ String taskDirName = EduNames.TASK + String.valueOf(nextTaskIndex)[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_17 $$ FileEditorManager.getInstance(project).closeFile(file)[ FD ]
Line_30 $$ VirtualFile lessonDir = projectDir.findChild(lessonDirName)-->Line_35 $$ VirtualFile taskDir = lessonDir.findChild(taskDirName)[ FD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_5 $$ if (!studyState.isValid()) [ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_26 $$ String lessonDirName = EduNames.LESSON + String.valueOf(lessonIndex)[ CD ]
Line_2 $$ public void navigateTask(@NotNull final Project project) -->Line_45 $$ FileEditorManager.getInstance(project).openFile(shouldBeActive, true)[ FD ]
Line_39 $$ VirtualFile shouldBeActive = getFileToActivate(project, nextTaskFiles, taskDir)-->Line_44 $$ ProjectView.getInstance(project).select(shouldBeActive, shouldBeActive, false)[ FD ]
