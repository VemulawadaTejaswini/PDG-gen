Line_64 $$ mode = UNICODE-->Line_92 $$ mode = NONE[ FD ]
Line_64 $$ mode = UNICODE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_105 $$ if (mode == KEY_DONE) -->Line_106 $$ keyLength = offset[ CD ]
Line_46 $$ mode = IGNORE-->Line_132 $$ mode = NONE[ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_9 $$ int offset = 0, keyLength = -1, intVal[ CD ]
Line_17 $$ nextChar = (char) intVal-->Line_78 $$ nextChar = (char) intVal[ FD ]
Line_114 $$ keyLength = offset-->Line_151 $$ String value = temp.substring(keyLength)[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_112 $$ if (keyLength == -1) [ FD ]
Line_102 $$ offset = 0-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_101 $$ keyLength = -1-->Line_150 $$ String key = temp.substring(0, keyLength)[ FD ]
Line_46 $$ mode = IGNORE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_12 $$ while (true) [ CD ]
Line_102 $$ offset = 0-->Line_20 $$ System.arraycopy(buf, 0, newBuf, 0, offset)[ FD ]
Line_17 $$ nextChar = (char) intVal-->Line_24 $$ int digit = Character.digit(nextChar, 16)[ FD ]
Line_40 $$ mode = NONE-->Line_132 $$ mode = NONE[ FD ]
Line_73 $$ while (true) -->Line_74 $$ intVal = br.read()[ CD ]
Line_121 $$ mode = IGNORE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_101 $$ keyLength = -1-->Line_126 $$ if (keyLength == -1) [ FD ]
Line_40 $$ mode = NONE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_88 $$ mode = IGNORE-->Line_113 $$ mode = NONE[ FD ]
Line_40 $$ mode = NONE-->Line_64 $$ mode = UNICODE[ FD ]
Line_137 $$ keyLength = offset-->Line_99 $$ properties.put(temp.substring(0, keyLength), temp.substring(keyLength))[ FD ]
Line_87 $$ if (mode == CONTINUE) -->Line_88 $$ mode = IGNORE[ CD ]
Line_101 $$ keyLength = -1-->Line_151 $$ String value = temp.substring(keyLength)[ FD ]
Line_23 $$ if (mode == UNICODE) -->Line_25 $$ if (digit >= 0) [ CD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_14 $$ if (intVal == -1) [ FD ]
Line_88 $$ mode = IGNORE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_12 $$ while (true) -->Line_23 $$ if (mode == UNICODE) [ CD ]
Line_52 $$ nextChar = '\f'-->Line_24 $$ int digit = Character.digit(nextChar, 16)[ FD ]
Line_113 $$ mode = NONE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_126 $$ if (keyLength == -1) -->Line_127 $$ mode = KEY_DONE[ CD ]
Line_108 $$ mode = SLASH-->Line_132 $$ mode = NONE[ FD ]
Line_101 $$ keyLength = -1-->Line_148 $$ if (keyLength >= 0) [ FD ]
Line_65 $$ unicode = count = 0-->Line_27 $$ if (++count < 4) [ FD ]
Line_23 $$ if (mode == UNICODE) -->Line_34 $$ buf[offset++] = (char) unicode[ CD ]
Line_96 $$ keyLength = offset-->Line_148 $$ if (keyLength >= 0) [ FD ]
Line_46 $$ mode = IGNORE-->Line_108 $$ mode = SLASH[ FD ]
Line_121 $$ mode = IGNORE-->Line_132 $$ mode = NONE[ FD ]
Line_64 $$ mode = UNICODE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_40 $$ mode = NONE-->Line_138 $$ mode = NONE[ FD ]
Line_46 $$ mode = IGNORE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_33 $$ mode = NONE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_5 $$ if (reader == null)[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_46 $$ mode = IGNORE[ FD ]
Line_96 $$ keyLength = offset-->Line_112 $$ if (keyLength == -1) [ FD ]
Line_55 $$ nextChar = '\n'-->Line_119 $$ if (Character.isSpace(nextChar)) [ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_137 $$ keyLength = offset[ FD ]
Line_136 $$ if (mode == KEY_DONE) -->Line_137 $$ keyLength = offset[ CD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_13 $$ intVal = br.read()[ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_99 $$ properties.put(temp.substring(0, keyLength), temp.substring(keyLength))[ FD ]
Line_132 $$ mode = NONE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_108 $$ mode = SLASH-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_108 $$ mode = SLASH-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_101 $$ keyLength = -1-->Line_106 $$ keyLength = offset[ FD ]
Line_119 $$ if (Character.isSpace(nextChar)) -->Line_123 $$ if (offset == 0 || offset == keyLength || mode == IGNORE) [ CD ]
Line_88 $$ mode = IGNORE-->Line_92 $$ mode = NONE[ FD ]
Line_137 $$ keyLength = offset-->Line_150 $$ String key = temp.substring(0, keyLength)[ FD ]
Line_43 $$ mode = CONTINUE-->Line_64 $$ mode = UNICODE[ FD ]
Line_43 $$ mode = CONTINUE-->Line_132 $$ mode = NONE[ FD ]
Line_150 $$ String key = temp.substring(0, keyLength)-->Line_155 $$ properties.put(key, value)[ FD ]
Line_127 $$ mode = KEY_DONE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_33 $$ mode = NONE-->Line_43 $$ mode = CONTINUE[ FD ]
Line_120 $$ if (mode == CONTINUE) -->Line_121 $$ mode = IGNORE[ CD ]
Line_121 $$ mode = IGNORE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_132 $$ mode = NONE[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_142 $$ if (mode == UNICODE && count <= 4) [ CD ]
Line_137 $$ keyLength = offset-->Line_151 $$ String value = temp.substring(keyLength)[ FD ]
Line_93 $$ firstChar = true-->Line_135 $$ firstChar = false[ FD ]
Line_23 $$ if (mode == UNICODE) -->Line_35 $$ if (nextChar != '\n') [ CD ]
Line_127 $$ mode = KEY_DONE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_106 $$ keyLength = offset-->Line_126 $$ if (keyLength == -1) [ FD ]
Line_121 $$ mode = IGNORE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_58 $$ nextChar = '\r'-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_33 $$ mode = NONE-->Line_92 $$ mode = NONE[ FD ]
Line_92 $$ mode = NONE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_121 $$ mode = IGNORE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_88 $$ mode = IGNORE-->Line_108 $$ mode = SLASH[ FD ]
Line_33 $$ mode = NONE-->Line_46 $$ mode = IGNORE[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_74 $$ intVal = br.read()[ FD ]
Line_88 $$ mode = IGNORE-->Line_132 $$ mode = NONE[ FD ]
Line_121 $$ mode = IGNORE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_102 $$ offset = 0[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_78 $$ nextChar = (char) intVal[ FD ]
Line_55 $$ nextChar = '\n'-->Line_35 $$ if (nextChar != '\n') [ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_99 $$ properties.put(temp.substring(0, keyLength), temp.substring(keyLength))[ FD ]
Line_58 $$ nextChar = '\r'-->Line_78 $$ nextChar = (char) intVal[ FD ]
Line_106 $$ keyLength = offset-->Line_137 $$ keyLength = offset[ FD ]
Line_92 $$ mode = NONE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_127 $$ mode = KEY_DONE-->Line_138 $$ mode = NONE[ FD ]
Line_33 $$ mode = NONE-->Line_88 $$ mode = IGNORE[ FD ]
Line_17 $$ nextChar = (char) intVal-->Line_55 $$ nextChar = '\n'[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_20 $$ System.arraycopy(buf, 0, newBuf, 0, offset)[ FD ]
Line_88 $$ mode = IGNORE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_33 $$ mode = NONE-->Line_108 $$ mode = SLASH[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_43 $$ mode = CONTINUE[ FD ]
Line_10 $$ boolean firstChar = true-->Line_93 $$ firstChar = true[ FD ]
Line_121 $$ mode = IGNORE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_49 $$ nextChar = '\b'-->Line_35 $$ if (nextChar != '\n') [ FD ]
Line_46 $$ mode = IGNORE-->Line_138 $$ mode = NONE[ FD ]
Line_19 $$ char[] newBuf = new char[buf.length * 2]-->Line_20 $$ System.arraycopy(buf, 0, newBuf, 0, offset)[ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_49 $$ nextChar = '\b'[ FD ]
Line_96 $$ keyLength = offset-->Line_146 $$ keyLength = offset[ FD ]
Line_108 $$ mode = SLASH-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_96 $$ keyLength = offset-->Line_126 $$ if (keyLength == -1) [ FD ]
Line_149 $$ String temp = new String(buf, 0, offset)-->Line_150 $$ String key = temp.substring(0, keyLength)[ FD ]
Line_40 $$ mode = NONE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_12 $$ while (true) -->Line_18 $$ if (offset == buf.length) [ CD ]
Line_113 $$ mode = NONE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_108 $$ mode = SLASH-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_102 $$ offset = 0-->Line_96 $$ keyLength = offset[ FD ]
Line_49 $$ nextChar = '\b'-->Line_61 $$ nextChar = '\t'[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_102 $$ offset = 0-->Line_18 $$ if (offset == buf.length) [ FD ]
Line_33 $$ mode = NONE-->Line_40 $$ mode = NONE[ FD ]
Line_96 $$ keyLength = offset-->Line_101 $$ keyLength = -1[ FD ]
Line_108 $$ mode = SLASH-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_113 $$ mode = NONE-->Line_132 $$ mode = NONE[ FD ]
Line_43 $$ mode = CONTINUE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_61 $$ nextChar = '\t'-->Line_35 $$ if (nextChar != '\n') [ FD ]
Line_132 $$ mode = NONE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_40 $$ mode = NONE-->Line_108 $$ mode = SLASH[ FD ]
Line_138 $$ mode = NONE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_138 $$ mode = NONE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_101 $$ keyLength = -1-->Line_112 $$ if (keyLength == -1) [ FD ]
Line_106 $$ keyLength = offset-->Line_146 $$ keyLength = offset[ FD ]
Line_61 $$ nextChar = '\t'-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_33 $$ mode = NONE-->Line_132 $$ mode = NONE[ FD ]
Line_127 $$ mode = KEY_DONE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_121 $$ mode = IGNORE[ FD ]
Line_95 $$ if (keyLength == -1) -->Line_96 $$ keyLength = offset[ CD ]
Line_102 $$ offset = 0-->Line_34 $$ buf[offset++] = (char) unicode[ FD ]
Line_33 $$ mode = NONE-->Line_113 $$ mode = NONE[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_148 $$ if (keyLength >= 0) [ FD ]
Line_49 $$ nextChar = '\b'-->Line_58 $$ nextChar = '\r'[ FD ]
Line_49 $$ nextChar = '\b'-->Line_78 $$ nextChar = (char) intVal[ FD ]
Line_148 $$ if (keyLength >= 0) -->Line_152 $$ if (mode == SLASH) [ CD ]
Line_46 $$ mode = IGNORE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_58 $$ nextChar = '\r'-->Line_24 $$ int digit = Character.digit(nextChar, 16)[ FD ]
Line_64 $$ mode = UNICODE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_148 $$ if (keyLength >= 0) -->Line_151 $$ String value = temp.substring(keyLength)[ CD ]
Line_113 $$ mode = NONE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_114 $$ keyLength = offset-->Line_99 $$ properties.put(temp.substring(0, keyLength), temp.substring(keyLength))[ FD ]
Line_132 $$ mode = NONE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_88 $$ mode = IGNORE-->Line_121 $$ mode = IGNORE[ FD ]
Line_138 $$ mode = NONE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_108 $$ mode = SLASH-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_137 $$ keyLength = offset-->Line_126 $$ if (keyLength == -1) [ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_40 $$ mode = NONE[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_101 $$ keyLength = -1[ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_58 $$ nextChar = '\r'[ FD ]
Line_145 $$ if (keyLength == -1 && offset > 0) -->Line_146 $$ keyLength = offset[ CD ]
Line_43 $$ mode = CONTINUE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_132 $$ mode = NONE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_102 $$ offset = 0-->Line_137 $$ keyLength = offset[ FD ]
Line_92 $$ mode = NONE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_18 $$ if (offset == buf.length) -->Line_19 $$ char[] newBuf = new char[buf.length * 2][ CD ]
Line_40 $$ mode = NONE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_7 $$ int mode = NONE, unicode = 0, count = 0[ CD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_113 $$ mode = NONE[ FD ]
Line_92 $$ mode = NONE-->Line_121 $$ mode = IGNORE[ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_114 $$ keyLength = offset-->Line_112 $$ if (keyLength == -1) [ FD ]
Line_33 $$ mode = NONE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_64 $$ mode = UNICODE-->Line_88 $$ mode = IGNORE[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_155 $$ properties.put(key, value)[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_146 $$ keyLength = offset[ FD ]
Line_52 $$ nextChar = '\f'-->Line_58 $$ nextChar = '\r'[ FD ]
Line_127 $$ mode = KEY_DONE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_40 $$ mode = NONE-->Line_43 $$ mode = CONTINUE[ FD ]
Line_72 $$ if (firstChar) -->Line_73 $$ while (true) [ CD ]
Line_58 $$ nextChar = '\r'-->Line_61 $$ nextChar = '\t'[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_33 $$ mode = NONE[ FD ]
Line_52 $$ nextChar = '\f'-->Line_78 $$ nextChar = (char) intVal[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_33 $$ mode = NONE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_114 $$ keyLength = offset-->Line_137 $$ keyLength = offset[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_64 $$ mode = UNICODE[ FD ]
Line_55 $$ nextChar = '\n'-->Line_58 $$ nextChar = '\r'[ FD ]
Line_43 $$ mode = CONTINUE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_43 $$ mode = CONTINUE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_92 $$ mode = NONE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_33 $$ mode = NONE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_74 $$ intVal = br.read()-->Line_75 $$ if (intVal == -1) [ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_119 $$ if (Character.isSpace(nextChar)) [ FD ]
Line_96 $$ keyLength = offset-->Line_137 $$ keyLength = offset[ FD ]
Line_148 $$ if (keyLength >= 0) -->Line_155 $$ properties.put(key, value)[ CD ]
Line_25 $$ if (digit >= 0) -->Line_27 $$ if (++count < 4) [ CD ]
Line_96 $$ keyLength = offset-->Line_114 $$ keyLength = offset[ FD ]
Line_94 $$ if (offset > 0 || (offset == 0 && keyLength == 0)) -->Line_99 $$ properties.put(temp.substring(0, keyLength), temp.substring(keyLength))[ CD ]
Line_12 $$ while (true) -->Line_136 $$ if (mode == KEY_DONE) [ CD ]
Line_17 $$ nextChar = (char) intVal-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_88 $$ mode = IGNORE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_11 $$ BufferedReader br = new BufferedReader(reader)[ CD ]
Line_132 $$ mode = NONE-->Line_138 $$ mode = NONE[ FD ]
Line_61 $$ nextChar = '\t'-->Line_24 $$ int digit = Character.digit(nextChar, 16)[ FD ]
Line_40 $$ mode = NONE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_61 $$ nextChar = '\t'[ FD ]
Line_43 $$ mode = CONTINUE-->Line_113 $$ mode = NONE[ FD ]
Line_121 $$ mode = IGNORE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_3 $$ if (properties == null)[ FD ]
Line_12 $$ while (true) -->Line_140 $$ buf[offset++] = nextChar[ CD ]
Line_88 $$ mode = IGNORE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_26 $$ unicode = (unicode << 4) + digit[ FD ]
Line_127 $$ mode = KEY_DONE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_55 $$ nextChar = '\n'-->Line_78 $$ nextChar = (char) intVal[ FD ]
Line_58 $$ nextChar = '\r'-->Line_35 $$ if (nextChar != '\n') [ FD ]
Line_106 $$ keyLength = offset-->Line_150 $$ String key = temp.substring(0, keyLength)[ FD ]
Line_78 $$ nextChar = (char) intVal-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_40 $$ mode = NONE-->Line_113 $$ mode = NONE[ FD ]
Line_88 $$ mode = IGNORE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_114 $$ keyLength = offset-->Line_95 $$ if (keyLength == -1) [ FD ]
Line_88 $$ mode = IGNORE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_96 $$ keyLength = offset-->Line_95 $$ if (keyLength == -1) [ FD ]
Line_12 $$ while (true) -->Line_135 $$ firstChar = false[ CD ]
Line_92 $$ mode = NONE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_92 $$ mode = NONE-->Line_138 $$ mode = NONE[ FD ]
Line_23 $$ if (mode == UNICODE) -->Line_24 $$ int digit = Character.digit(nextChar, 16)[ CD ]
Line_40 $$ mode = NONE-->Line_46 $$ mode = IGNORE[ FD ]
Line_113 $$ mode = NONE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_23 $$ if (mode == UNICODE) -->Line_33 $$ mode = NONE[ CD ]
Line_108 $$ mode = SLASH-->Line_121 $$ mode = IGNORE[ FD ]
Line_64 $$ mode = UNICODE-->Line_108 $$ mode = SLASH[ FD ]
Line_64 $$ mode = UNICODE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_95 $$ if (keyLength == -1) [ FD ]
Line_40 $$ mode = NONE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_11 $$ BufferedReader br = new BufferedReader(reader)-->Line_13 $$ intVal = br.read()[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_108 $$ mode = SLASH[ FD ]
Line_92 $$ mode = NONE-->Line_108 $$ mode = SLASH[ FD ]
Line_94 $$ if (offset > 0 || (offset == 0 && keyLength == 0)) -->Line_95 $$ if (keyLength == -1) [ CD ]
Line_151 $$ String value = temp.substring(keyLength)-->Line_153 $$ value += " "[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_150 $$ String key = temp.substring(0, keyLength)[ FD ]
Line_12 $$ while (true) -->Line_39 $$ if (mode == SLASH) [ CD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_55 $$ nextChar = '\n'[ FD ]
Line_64 $$ mode = UNICODE-->Line_132 $$ mode = NONE[ FD ]
Line_92 $$ mode = NONE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_18 $$ if (offset == buf.length) -->Line_20 $$ System.arraycopy(buf, 0, newBuf, 0, offset)[ CD ]
Line_58 $$ nextChar = '\r'-->Line_119 $$ if (Character.isSpace(nextChar)) [ FD ]
Line_43 $$ mode = CONTINUE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_88 $$ mode = IGNORE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_12 $$ while (true) -->Line_13 $$ intVal = br.read()[ CD ]
Line_17 $$ nextChar = (char) intVal-->Line_119 $$ if (Character.isSpace(nextChar)) [ FD ]
Line_64 $$ mode = UNICODE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_61 $$ nextChar = '\t'-->Line_119 $$ if (Character.isSpace(nextChar)) [ FD ]
Line_112 $$ if (keyLength == -1) -->Line_113 $$ mode = NONE[ CD ]
Line_101 $$ keyLength = -1-->Line_99 $$ properties.put(temp.substring(0, keyLength), temp.substring(keyLength))[ FD ]
Line_33 $$ mode = NONE-->Line_64 $$ mode = UNICODE[ FD ]
Line_96 $$ keyLength = offset-->Line_150 $$ String key = temp.substring(0, keyLength)[ FD ]
Line_40 $$ mode = NONE-->Line_92 $$ mode = NONE[ FD ]
Line_92 $$ mode = NONE-->Line_132 $$ mode = NONE[ FD ]
Line_55 $$ nextChar = '\n'-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_75 $$ if (intVal == -1) [ FD ]
Line_43 $$ mode = CONTINUE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_64 $$ mode = UNICODE-->Line_121 $$ mode = IGNORE[ FD ]
Line_92 $$ mode = NONE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_25 $$ if (digit >= 0) -->Line_26 $$ unicode = (unicode << 4) + digit[ CD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_35 $$ if (nextChar != '\n') [ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_145 $$ if (keyLength == -1 && offset > 0) [ CD ]
Line_13 $$ intVal = br.read()-->Line_14 $$ if (intVal == -1) [ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_88 $$ mode = IGNORE[ FD ]
Line_40 $$ mode = NONE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_43 $$ mode = CONTINUE-->Line_108 $$ mode = SLASH[ FD ]
Line_40 $$ mode = NONE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_119 $$ if (Character.isSpace(nextChar)) -->Line_126 $$ if (keyLength == -1) [ CD ]
Line_52 $$ nextChar = '\f'-->Line_119 $$ if (Character.isSpace(nextChar)) [ FD ]
Line_146 $$ keyLength = offset-->Line_150 $$ String key = temp.substring(0, keyLength)[ FD ]
Line_25 $$ if (digit >= 0) -->Line_30 $$ if (count <= 4) [ CD ]
Line_24 $$ int digit = Character.digit(nextChar, 16)-->Line_25 $$ if (digit >= 0) [ FD ]
Line_106 $$ keyLength = offset-->Line_148 $$ if (keyLength >= 0) [ FD ]
Line_148 $$ if (keyLength >= 0) -->Line_150 $$ String key = temp.substring(0, keyLength)[ CD ]
Line_73 $$ while (true) -->Line_79 $$ if (nextChar == '\r' || nextChar == '\n') [ CD ]
Line_43 $$ mode = CONTINUE-->Line_92 $$ mode = NONE[ FD ]
Line_146 $$ keyLength = offset-->Line_151 $$ String value = temp.substring(keyLength)[ FD ]
Line_106 $$ keyLength = offset-->Line_95 $$ if (keyLength == -1) [ FD ]
Line_33 $$ mode = NONE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_39 $$ if (mode == SLASH) -->Line_131 $$ if (mode == IGNORE || mode == CONTINUE) [ CD ]
Line_108 $$ mode = SLASH-->Line_138 $$ mode = NONE[ FD ]
Line_106 $$ keyLength = offset-->Line_99 $$ properties.put(temp.substring(0, keyLength), temp.substring(keyLength))[ FD ]
Line_73 $$ while (true) -->Line_75 $$ if (intVal == -1) [ CD ]
Line_114 $$ keyLength = offset-->Line_148 $$ if (keyLength >= 0) [ FD ]
Line_52 $$ nextChar = '\f'-->Line_61 $$ nextChar = '\t'[ FD ]
Line_137 $$ keyLength = offset-->Line_148 $$ if (keyLength >= 0) [ FD ]
Line_43 $$ mode = CONTINUE-->Line_46 $$ mode = IGNORE[ FD ]
Line_73 $$ while (true) -->Line_78 $$ nextChar = (char) intVal[ CD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_96 $$ keyLength = offset[ FD ]
Line_78 $$ nextChar = (char) intVal-->Line_119 $$ if (Character.isSpace(nextChar)) [ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_114 $$ keyLength = offset[ FD ]
Line_43 $$ mode = CONTINUE-->Line_88 $$ mode = IGNORE[ FD ]
Line_64 $$ mode = UNICODE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_17 $$ nextChar = (char) intVal-->Line_58 $$ nextChar = '\r'[ FD ]
Line_106 $$ keyLength = offset-->Line_112 $$ if (keyLength == -1) [ FD ]
Line_106 $$ keyLength = offset-->Line_114 $$ keyLength = offset[ FD ]
Line_113 $$ mode = NONE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_55 $$ nextChar = '\n'-->Line_61 $$ nextChar = '\t'[ FD ]
Line_152 $$ if (mode == SLASH) -->Line_153 $$ value += " "[ CD ]
Line_46 $$ mode = IGNORE-->Line_88 $$ mode = IGNORE[ FD ]
Line_52 $$ nextChar = '\f'-->Line_35 $$ if (nextChar != '\n') [ FD ]
Line_13 $$ intVal = br.read()-->Line_74 $$ intVal = br.read()[ FD ]
Line_64 $$ mode = UNICODE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_101 $$ keyLength = -1-->Line_146 $$ keyLength = offset[ FD ]
Line_108 $$ mode = SLASH-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_138 $$ mode = NONE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_106 $$ keyLength = offset-->Line_151 $$ String value = temp.substring(keyLength)[ FD ]
Line_113 $$ mode = NONE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_26 $$ unicode = (unicode << 4) + digit-->Line_65 $$ unicode = count = 0[ FD ]
Line_17 $$ nextChar = (char) intVal-->Line_49 $$ nextChar = '\b'[ FD ]
Line_49 $$ nextChar = '\b'-->Line_119 $$ if (Character.isSpace(nextChar)) [ FD ]
Line_39 $$ if (mode == SLASH) -->Line_40 $$ mode = NONE[ CD ]
Line_138 $$ mode = NONE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_88 $$ mode = IGNORE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_33 $$ mode = NONE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_102 $$ offset = 0-->Line_106 $$ keyLength = offset[ FD ]
Line_46 $$ mode = IGNORE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_33 $$ mode = NONE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_127 $$ mode = KEY_DONE-->Line_132 $$ mode = NONE[ FD ]
Line_96 $$ keyLength = offset-->Line_106 $$ keyLength = offset[ FD ]
Line_13 $$ intVal = br.read()-->Line_75 $$ if (intVal == -1) [ FD ]
Line_46 $$ mode = IGNORE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_108 $$ mode = SLASH-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_108 $$ mode = SLASH-->Line_113 $$ mode = NONE[ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_8 $$ char nextChar, buf[] = new char[40][ CD ]
Line_101 $$ keyLength = -1-->Line_114 $$ keyLength = offset[ FD ]
Line_113 $$ mode = NONE-->Line_138 $$ mode = NONE[ FD ]
Line_92 $$ mode = NONE-->Line_113 $$ mode = NONE[ FD ]
Line_49 $$ nextChar = '\b'-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_30 $$ if (count <= 4) [ FD ]
Line_17 $$ nextChar = (char) intVal-->Line_61 $$ nextChar = '\t'[ FD ]
Line_46 $$ mode = IGNORE-->Line_64 $$ mode = UNICODE[ FD ]
Line_40 $$ mode = NONE-->Line_88 $$ mode = IGNORE[ FD ]
Line_64 $$ mode = UNICODE-->Line_138 $$ mode = NONE[ FD ]
Line_138 $$ mode = NONE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_52 $$ nextChar = '\f'-->Line_55 $$ nextChar = '\n'[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_138 $$ mode = NONE[ FD ]
Line_127 $$ mode = KEY_DONE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_40 $$ mode = NONE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_113 $$ mode = NONE-->Line_121 $$ mode = IGNORE[ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_3 $$ if (properties == null)[ CD ]
Line_46 $$ mode = IGNORE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_146 $$ keyLength = offset-->Line_148 $$ if (keyLength >= 0) [ FD ]
Line_11 $$ BufferedReader br = new BufferedReader(reader)-->Line_74 $$ intVal = br.read()[ FD ]
Line_112 $$ if (keyLength == -1) -->Line_114 $$ keyLength = offset[ CD ]
Line_49 $$ nextChar = '\b'-->Line_24 $$ int digit = Character.digit(nextChar, 16)[ FD ]
Line_119 $$ if (Character.isSpace(nextChar)) -->Line_120 $$ if (mode == CONTINUE) [ CD ]
Line_43 $$ mode = CONTINUE-->Line_121 $$ mode = IGNORE[ FD ]
Line_96 $$ keyLength = offset-->Line_151 $$ String value = temp.substring(keyLength)[ FD ]
Line_102 $$ offset = 0-->Line_146 $$ keyLength = offset[ FD ]
Line_10 $$ boolean firstChar = true-->Line_135 $$ firstChar = false[ FD ]
Line_137 $$ keyLength = offset-->Line_146 $$ keyLength = offset[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_27 $$ if (++count < 4) [ FD ]
Line_12 $$ while (true) -->Line_14 $$ if (intVal == -1) [ CD ]
Line_46 $$ mode = IGNORE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_17 $$ nextChar = (char) intVal[ FD ]
Line_43 $$ mode = CONTINUE-->Line_138 $$ mode = NONE[ FD ]
Line_43 $$ mode = CONTINUE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_46 $$ mode = IGNORE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_49 $$ nextChar = '\b'-->Line_55 $$ nextChar = '\n'[ FD ]
Line_39 $$ if (mode == SLASH) -->Line_119 $$ if (Character.isSpace(nextChar)) [ CD ]
Line_131 $$ if (mode == IGNORE || mode == CONTINUE) -->Line_132 $$ mode = NONE[ CD ]
Line_136 $$ if (mode == KEY_DONE) -->Line_138 $$ mode = NONE[ CD ]
Line_24 $$ int digit = Character.digit(nextChar, 16)-->Line_26 $$ unicode = (unicode << 4) + digit[ FD ]
Line_33 $$ mode = NONE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_17 $$ nextChar = (char) intVal-->Line_35 $$ if (nextChar != '\n') [ FD ]
Line_151 $$ String value = temp.substring(keyLength)-->Line_155 $$ properties.put(key, value)[ FD ]
Line_65 $$ unicode = count = 0-->Line_30 $$ if (count <= 4) [ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_148 $$ if (keyLength >= 0) [ CD ]
Line_132 $$ mode = NONE-->Line_152 $$ if (mode == SLASH) [ FD ]
Line_114 $$ keyLength = offset-->Line_150 $$ String key = temp.substring(0, keyLength)[ FD ]
Line_114 $$ keyLength = offset-->Line_146 $$ keyLength = offset[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_65 $$ unicode = count = 0[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_151 $$ String value = temp.substring(keyLength)[ FD ]
Line_64 $$ mode = UNICODE-->Line_113 $$ mode = NONE[ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_24 $$ int digit = Character.digit(nextChar, 16)[ FD ]
Line_121 $$ mode = IGNORE-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_34 $$ buf[offset++] = (char) unicode[ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_106 $$ keyLength = offset[ FD ]
Line_46 $$ mode = IGNORE-->Line_92 $$ mode = NONE[ FD ]
Line_33 $$ mode = NONE-->Line_121 $$ mode = IGNORE[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_87 $$ if (mode == CONTINUE) [ FD ]
Line_132 $$ mode = NONE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_114 $$ keyLength = offset-->Line_126 $$ if (keyLength == -1) [ FD ]
Line_55 $$ nextChar = '\n'-->Line_24 $$ int digit = Character.digit(nextChar, 16)[ FD ]
Line_40 $$ mode = NONE-->Line_121 $$ mode = IGNORE[ FD ]
Line_101 $$ keyLength = -1-->Line_95 $$ if (keyLength == -1) [ FD ]
Line_137 $$ keyLength = offset-->Line_112 $$ if (keyLength == -1) [ FD ]
Line_61 $$ nextChar = '\t'-->Line_78 $$ nextChar = (char) intVal[ FD ]
Line_113 $$ mode = NONE-->Line_127 $$ mode = KEY_DONE[ FD ]
Line_96 $$ keyLength = offset-->Line_99 $$ properties.put(temp.substring(0, keyLength), temp.substring(keyLength))[ FD ]
Line_132 $$ mode = NONE-->Line_39 $$ if (mode == SLASH) [ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_10 $$ boolean firstChar = true[ CD ]
Line_33 $$ mode = NONE-->Line_138 $$ mode = NONE[ FD ]
Line_113 $$ mode = NONE-->Line_120 $$ if (mode == CONTINUE) [ FD ]
Line_137 $$ keyLength = offset-->Line_95 $$ if (keyLength == -1) [ FD ]
Line_153 $$ value += " "-->Line_155 $$ properties.put(key, value)[ FD ]
Line_121 $$ mode = IGNORE-->Line_138 $$ mode = NONE[ FD ]
Line_7 $$ int mode = NONE, unicode = 0, count = 0-->Line_92 $$ mode = NONE[ FD ]
Line_88 $$ mode = IGNORE-->Line_138 $$ mode = NONE[ FD ]
Line_127 $$ mode = KEY_DONE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_46 $$ mode = IGNORE-->Line_113 $$ mode = NONE[ FD ]
Line_102 $$ offset = 0-->Line_114 $$ keyLength = offset[ FD ]
Line_52 $$ nextChar = '\f'-->Line_140 $$ buf[offset++] = nextChar[ FD ]
Line_46 $$ mode = IGNORE-->Line_121 $$ mode = IGNORE[ FD ]
Line_43 $$ mode = CONTINUE-->Line_136 $$ if (mode == KEY_DONE) [ FD ]
Line_138 $$ mode = NONE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_49 $$ nextChar = '\b'-->Line_52 $$ nextChar = '\f'[ FD ]
Line_8 $$ char nextChar, buf[] = new char[40]-->Line_52 $$ nextChar = '\f'[ FD ]
Line_101 $$ keyLength = -1-->Line_137 $$ keyLength = offset[ FD ]
Line_148 $$ if (keyLength >= 0) -->Line_149 $$ String temp = new String(buf, 0, offset)[ CD ]
Line_92 $$ mode = NONE-->Line_23 $$ if (mode == UNICODE) [ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_18 $$ if (offset == buf.length) [ FD ]
Line_9 $$ int offset = 0, keyLength = -1, intVal-->Line_126 $$ if (keyLength == -1) [ FD ]
Line_12 $$ while (true) -->Line_17 $$ nextChar = (char) intVal[ CD ]
Line_149 $$ String temp = new String(buf, 0, offset)-->Line_151 $$ String value = temp.substring(keyLength)[ FD ]
Line_64 $$ mode = UNICODE-->Line_105 $$ if (mode == KEY_DONE) [ FD ]
Line_17 $$ nextChar = (char) intVal-->Line_52 $$ nextChar = '\f'[ FD ]
Line_2 $$ public static void load(ObjectMap<String, String> properties, Reader reader) throws IOException -->Line_5 $$ if (reader == null)[ CD ]
