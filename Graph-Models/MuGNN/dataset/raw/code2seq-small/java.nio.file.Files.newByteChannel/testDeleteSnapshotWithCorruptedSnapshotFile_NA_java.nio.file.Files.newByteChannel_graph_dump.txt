Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_16 $$ Path snapshotPath = repo.resolve("snap-test-snap-1.dat")[ CD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_25 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()[ CD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_14 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ FD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_25 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()[ FD ]
Line_17 $$ try (SeekableByteChannel outChan = Files.newByteChannel(snapshotPath, StandardOpenOption.WRITE)) -->Line_18 $$ outChan.truncate(randomInt(10))[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_23 $$ assertThrows(client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap-1"), SnapshotMissingException.class)[ CD ]
Line_3 $$ Client client = client()-->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", repo).put("compress", false).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ FD ]
Line_16 $$ Path snapshotPath = repo.resolve("snap-test-snap-1.dat")-->Line_17 $$ try (SeekableByteChannel outChan = Files.newByteChannel(snapshotPath, StandardOpenOption.WRITE)) [ FD ]
Line_3 $$ Client client = client()-->Line_25 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_27 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ CD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_7 $$ createIndex("test-idx-1", "test-idx-2")[ CD ]
Line_4 $$ Path repo = randomRepoPath()-->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", repo).put("compress", false).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_8 $$ ensureYellow()[ CD ]
Line_3 $$ Client client = client()-->Line_23 $$ assertThrows(client.admin().cluster().prepareGetSnapshots("test-repo").addSnapshots("test-snap-1"), SnapshotMissingException.class)[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_21 $$ client.admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap-1").get()[ CD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_27 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_26 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_26 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_13 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", repo).put("compress", false).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ CD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_3 $$ Client client = client()[ CD ]
Line_4 $$ Path repo = randomRepoPath()-->Line_16 $$ Path snapshotPath = repo.resolve("snap-test-snap-1.dat")[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_10 $$ indexRandom(true, client().prepareIndex("test-idx-1", "doc").setSource("foo", "bar"), client().prepareIndex("test-idx-2", "doc").setSource("foo", "bar"))[ CD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_13 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
Line_25 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_27 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()[ CD ]
Line_25 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_26 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_3 $$ Client client = client()-->Line_21 $$ client.admin().cluster().prepareDeleteSnapshot("test-repo", "test-snap-1").get()[ FD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_14 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ CD ]
Line_2 $$ public void testDeleteSnapshotWithCorruptedSnapshotFile() throws Exception -->Line_4 $$ Path repo = randomRepoPath()[ CD ]
Line_3 $$ Client client = client()-->Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()[ FD ]
