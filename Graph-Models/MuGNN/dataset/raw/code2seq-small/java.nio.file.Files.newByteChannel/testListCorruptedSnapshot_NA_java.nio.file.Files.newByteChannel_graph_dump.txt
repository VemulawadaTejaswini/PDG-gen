Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_26 $$ assertThat(snapshotInfos.get(0).state(), equalTo(SnapshotState.SUCCESS))[ CD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_7 $$ createIndex("test-idx-1", "test-idx-2", "test-idx-3")[ CD ]
Line_15 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-2").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_16 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_3 $$ Client client = client()-->Line_24 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setIgnoreUnavailable(true).get().getSnapshots()[ FD ]
Line_3 $$ Client client = client()-->Line_29 $$ client.admin().cluster().prepareGetSnapshots("test-repo").setIgnoreUnavailable(false).get().getSnapshots()[ FD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_14 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_27 $$ assertThat(snapshotInfos.get(0).name(), equalTo("test-snap-1"))[ CD ]
Line_24 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setIgnoreUnavailable(true).get().getSnapshots()-->Line_27 $$ assertThat(snapshotInfos.get(0).name(), equalTo("test-snap-1"))[ FD ]
Line_15 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-2").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_17 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()[ CD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", repo).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ CD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_16 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_24 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setIgnoreUnavailable(true).get().getSnapshots()[ CD ]
Line_24 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setIgnoreUnavailable(true).get().getSnapshots()-->Line_26 $$ assertThat(snapshotInfos.get(0).state(), equalTo(SnapshotState.SUCCESS))[ FD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_15 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-2").setWaitForCompletion(true).setIndices("test-idx-*").get()[ FD ]
Line_4 $$ Path repo = randomRepoPath()-->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", repo).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_15 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-2").setWaitForCompletion(true).setIndices("test-idx-*").get()[ CD ]
Line_19 $$ Path snapshotPath = repo.resolve("snap-test-snap-2.dat")-->Line_20 $$ try (SeekableByteChannel outChan = Files.newByteChannel(snapshotPath, StandardOpenOption.WRITE)) [ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_17 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ CD ]
Line_20 $$ try (SeekableByteChannel outChan = Files.newByteChannel(snapshotPath, StandardOpenOption.WRITE)) -->Line_21 $$ outChan.truncate(randomInt(10))[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_25 $$ assertThat(snapshotInfos.size(), equalTo(1))[ CD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_14 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ CD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_3 $$ Client client = client()[ CD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_19 $$ Path snapshotPath = repo.resolve("snap-test-snap-2.dat")[ CD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_13 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_24 $$ List<SnapshotInfo> snapshotInfos = client.admin().cluster().prepareGetSnapshots("test-repo").setIgnoreUnavailable(true).get().getSnapshots()-->Line_25 $$ assertThat(snapshotInfos.size(), equalTo(1))[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_8 $$ ensureYellow()[ CD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_16 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
Line_4 $$ Path repo = randomRepoPath()-->Line_19 $$ Path snapshotPath = repo.resolve("snap-test-snap-2.dat")[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_10 $$ indexRandom(true, client().prepareIndex("test-idx-1", "doc").setSource("foo", "bar"), client().prepareIndex("test-idx-2", "doc").setSource("foo", "bar"), client().prepareIndex("test-idx-3", "doc").setSource("foo", "bar"))[ CD ]
Line_3 $$ Client client = client()-->Line_15 $$ createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-2").setWaitForCompletion(true).setIndices("test-idx-*").get()[ FD ]
Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()-->Line_17 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_4 $$ Path repo = randomRepoPath()[ CD ]
Line_3 $$ Client client = client()-->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", repo).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ FD ]
Line_3 $$ Client client = client()-->Line_12 $$ CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-snap-1").setWaitForCompletion(true).setIndices("test-idx-*").get()[ FD ]
Line_2 $$ public void testListCorruptedSnapshot() throws Exception -->Line_13 $$ assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
