Line_2 $$ public void testShuffled() -->Line_3 $$ List<Integer> list = IntStream.range(0, INPUT_SIZE).collect(ArrayList::<>new, ArrayList::<>add, ArrayList::<>addAll)[ CD ]
Line_2 $$ public void testShuffled() -->Line_5 $$ test(list.stream().mapToInt(Integer::<>intValue), list.stream().mapToInt(Integer::<>intValue).mapToObj( key -> Integer.toString(key * 2)), MAX_ELEMENTS_COMPARATOR, IntStream.range(INPUT_SIZE - OUTPUT_SIZE, INPUT_SIZE).mapToObj( key -> Integer.toString(key * 2)).iterator())[ CD ]
Line_2 $$ public void testShuffled() -->Line_4 $$ Collections.shuffle(list)[ CD ]
Line_2 $$ public void testShuffled() -->Line_6 $$ test(list.stream().mapToInt(Integer::<>intValue), list.stream().mapToInt(Integer::<>intValue).mapToObj( key -> Integer.toString(key * 2)), MIN_ELEMENTS_COMPARATOR, IntStream.range(0, OUTPUT_SIZE).map( x -> OUTPUT_SIZE - 1 - x).mapToObj( key -> Integer.toString(key * 2)).iterator())[ CD ]
Line_3 $$ List<Integer> list = IntStream.range(0, INPUT_SIZE).collect(ArrayList::<>new, ArrayList::<>add, ArrayList::<>addAll)-->Line_4 $$ Collections.shuffle(list)[ FD ]
Line_3 $$ List<Integer> list = IntStream.range(0, INPUT_SIZE).collect(ArrayList::<>new, ArrayList::<>add, ArrayList::<>addAll)-->Line_6 $$ test(list.stream().mapToInt(Integer::<>intValue), list.stream().mapToInt(Integer::<>intValue).mapToObj( key -> Integer.toString(key * 2)), MIN_ELEMENTS_COMPARATOR, IntStream.range(0, OUTPUT_SIZE).map( x -> OUTPUT_SIZE - 1 - x).mapToObj( key -> Integer.toString(key * 2)).iterator())[ FD ]
Line_3 $$ List<Integer> list = IntStream.range(0, INPUT_SIZE).collect(ArrayList::<>new, ArrayList::<>add, ArrayList::<>addAll)-->Line_5 $$ test(list.stream().mapToInt(Integer::<>intValue), list.stream().mapToInt(Integer::<>intValue).mapToObj( key -> Integer.toString(key * 2)), MAX_ELEMENTS_COMPARATOR, IntStream.range(INPUT_SIZE - OUTPUT_SIZE, INPUT_SIZE).mapToObj( key -> Integer.toString(key * 2)).iterator())[ FD ]
