Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_20 $$ jarUrl = explodedPar.toURL()[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_24 $$ descriptor = StandardArchiveDescriptorFactory.INSTANCE.buildArchiveDescriptor(jarUrl)[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_27 $$ descriptor = StandardArchiveDescriptorFactory.INSTANCE.buildArchiveDescriptor(jarUrl)[ CD ]
Line_3 $$ final File explodedPar = buildExplodedPar()-->Line_26 $$ jarUrl = new URL(explodedPar.toURL().toExternalForm().replace("file:", "vfsfile:"))[ FD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_19 $$ assertEquals(JarFileBasedArchiveDescriptor.class.getName(), descriptor.getClass().getName())[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_3 $$ final File explodedPar = buildExplodedPar()[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_6 $$ URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory() [ CD ]
Line_6 $$ URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory() -->Line_8 $$ if ("vfszip".equals(protocol) || "vfsfile".equals(protocol))[ FD ]
Line_4 $$ final File defaultPar = buildDefaultPar()-->Line_23 $$ jarUrl = new URL(defaultPar.toURL().toExternalForm().replace("file:", "vfszip:"))[ FD ]
Line_3 $$ final File explodedPar = buildExplodedPar()-->Line_20 $$ jarUrl = explodedPar.toURL()[ FD ]
Line_4 $$ final File defaultPar = buildDefaultPar()-->Line_17 $$ URL jarUrl = defaultPar.toURL()[ FD ]
Line_6 $$ URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory() -->Line_8 $$ if ("vfszip".equals(protocol) || "vfsfile".equals(protocol))[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_18 $$ ArchiveDescriptor descriptor = StandardArchiveDescriptorFactory.INSTANCE.buildArchiveDescriptor(jarUrl)[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_25 $$ assertEquals(JarFileBasedArchiveDescriptor.class.getName(), descriptor.getClass().getName())[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_4 $$ final File defaultPar = buildDefaultPar()[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_28 $$ assertEquals(ExplodedArchiveDescriptor.class.getName(), descriptor.getClass().getName())[ CD ]
Line_4 $$ final File defaultPar = buildDefaultPar()-->Line_5 $$ addPackageToClasspath(explodedPar, defaultPar)[ FD ]
Line_3 $$ final File explodedPar = buildExplodedPar()-->Line_5 $$ addPackageToClasspath(explodedPar, defaultPar)[ FD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_17 $$ URL jarUrl = defaultPar.toURL()[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_5 $$ addPackageToClasspath(explodedPar, defaultPar)[ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_22 $$ assertEquals(ExplodedArchiveDescriptor.class.getName(), descriptor.getClass().getName())[ CD ]
Line_8 $$ if ("vfszip".equals(protocol) || "vfsfile".equals(protocol))-->Line_9 $$ return new URLStreamHandler() [ CD ]
Line_2 $$ public void testJarVisitorFactory() throws Exception -->Line_21 $$ descriptor = StandardArchiveDescriptorFactory.INSTANCE.buildArchiveDescriptor(jarUrl)[ CD ]
Line_6 $$ URL.setURLStreamHandlerFactory(new URLStreamHandlerFactory() -->Line_14 $$ return null[ CD ]
Line_9 $$ return new URLStreamHandler() -->Line_11 $$ return null[ CD ]
