Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_4 $$ paintTrackBasement(g, clip)[ CD ]
Line_7 $$ int endOffset = yPositionToOffset(clip.y + clip.height, false)-->Line_10 $$ drawMarkup(g, startOffset, endOffset, (MarkupModelEx) DocumentMarkupModel.forDocument(document, myEditor.getProject(), true), EditorMarkupModelImpl.this)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_11 $$ g.setClip(oldClip)[ CD ]
Line_6 $$ int startOffset = yPositionToOffset(clip.y - myMinMarkHeight, true)-->Line_10 $$ drawMarkup(g, startOffset, endOffset, (MarkupModelEx) DocumentMarkupModel.forDocument(document, myEditor.getProject(), true), EditorMarkupModelImpl.this)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_9 $$ g.clipRect(clip.x, clip.y, clip.width, clip.height)[ CD ]
Line_5 $$ Document document = myEditor.getDocument()-->Line_10 $$ drawMarkup(g, startOffset, endOffset, (MarkupModelEx) DocumentMarkupModel.forDocument(document, myEditor.getProject(), true), EditorMarkupModelImpl.this)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_10 $$ drawMarkup(g, startOffset, endOffset, (MarkupModelEx) DocumentMarkupModel.forDocument(document, myEditor.getProject(), true), EditorMarkupModelImpl.this)[ CD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_6 $$ int startOffset = yPositionToOffset(clip.y - myMinMarkHeight, true)[ CD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_8 $$ Shape oldClip = g.getClip()[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_5 $$ Document document = myEditor.getDocument()[ CD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_3 $$ final Rectangle clip = new Rectangle(0, yrange.getStartOffset(), gutterWidth, yrange.getLength() + myMinMarkHeight)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_8 $$ Shape oldClip = g.getClip()[ CD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_4 $$ paintTrackBasement(g, clip)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_9 $$ g.clipRect(clip.x, clip.y, clip.width, clip.height)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_7 $$ int endOffset = yPositionToOffset(clip.y + clip.height, false)[ CD ]
Line_8 $$ Shape oldClip = g.getClip()-->Line_11 $$ g.setClip(oldClip)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_10 $$ drawMarkup(g, startOffset, endOffset, (MarkupModelEx) DocumentMarkupModel.forDocument(document, myEditor.getProject(), true), EditorMarkupModelImpl.this)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_11 $$ g.setClip(oldClip)[ FD ]
Line_3 $$ final Rectangle clip = new Rectangle(0, yrange.getStartOffset(), gutterWidth, yrange.getLength() + myMinMarkHeight)-->Line_4 $$ paintTrackBasement(g, clip)[ FD ]
Line_2 $$ private void repaint(@NotNull final Graphics g, int gutterWidth, @NotNull ProperTextRange yrange) -->Line_3 $$ final Rectangle clip = new Rectangle(0, yrange.getStartOffset(), gutterWidth, yrange.getLength() + myMinMarkHeight)[ CD ]
