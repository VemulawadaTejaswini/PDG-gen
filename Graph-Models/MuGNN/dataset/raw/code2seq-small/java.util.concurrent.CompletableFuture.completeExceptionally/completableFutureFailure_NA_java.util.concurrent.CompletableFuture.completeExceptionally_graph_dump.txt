Line_2 $$ public void completableFutureFailure() -->Line_4 $$ given(this.channel.send(any(Message.class))).willReturn(true)[ CD ]
Line_2 $$ public void completableFutureFailure() -->Line_8 $$ this.messageHandler.setDestinationPrefixes(Arrays.asList("/app1", "/app2/"))[ CD ]
Line_2 $$ public void completableFutureFailure() -->Line_5 $$ given(this.converter.toMessage(anyObject(), any(MessageHeaders.class))).willReturn(emptyMessage)[ CD ]
Line_3 $$ Message emptyMessage = (Message) MessageBuilder.withPayload(new byte[0]).build()-->Line_5 $$ given(this.converter.toMessage(anyObject(), any(MessageHeaders.class))).willReturn(emptyMessage)[ FD ]
Line_2 $$ public void completableFutureFailure() -->Line_3 $$ Message emptyMessage = (Message) MessageBuilder.withPayload(new byte[0]).build()[ CD ]
Line_6 $$ CompletableFutureController controller = new CompletableFutureController()-->Line_7 $$ this.messageHandler.registerHandler(controller)[ FD ]
Line_2 $$ public void completableFutureFailure() -->Line_12 $$ assertTrue(controller.exceptionCaught)[ CD ]
Line_9 $$ Message<?> message = createMessage("/app1/completable-future")-->Line_10 $$ this.messageHandler.handleMessage(message)[ FD ]
Line_2 $$ public void completableFutureFailure() -->Line_7 $$ this.messageHandler.registerHandler(controller)[ CD ]
Line_2 $$ public void completableFutureFailure() -->Line_11 $$ controller.future.completeExceptionally(new IllegalStateException())[ CD ]
Line_2 $$ public void completableFutureFailure() -->Line_6 $$ CompletableFutureController controller = new CompletableFutureController()[ CD ]
Line_2 $$ public void completableFutureFailure() -->Line_10 $$ this.messageHandler.handleMessage(message)[ CD ]
Line_2 $$ public void completableFutureFailure() -->Line_9 $$ Message<?> message = createMessage("/app1/completable-future")[ CD ]
