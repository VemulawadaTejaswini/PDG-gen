Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_30 $$ entry.setCompressedSize(outputBytesLength)[ CD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_28 $$ outputBytes = bytes[ FD ]
Line_14 $$ final int outputBytesLength-->Line_27 $$ outputBytesLength = bytes.length[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_7 $$ if (entry.getMethod() == -1) [ CD ]
Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) -->Line_18 $$ final DeflaterOutputStream stream = new DeflaterOutputStream(compressedBytesStream, def)[ CD ]
Line_28 $$ outputBytes = bytes-->Line_32 $$ writeOut(outputBytes, 0, outputBytesLength)[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_5 $$ crc.update(bytes)[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_6 $$ entry.setCrc(crc.getValue())[ CD ]
Line_24 $$ outputBytesLength = compressedBytesStream.size()-->Line_30 $$ entry.setCompressedSize(outputBytesLength)[ FD ]
Line_7 $$ if (entry.getMethod() == -1) -->Line_8 $$ entry.setMethod(method)[ CD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_7 $$ if (entry.getMethod() == -1) [ FD ]
Line_10 $$ if (entry.getTime() == -1) -->Line_11 $$ entry.setTime(System.currentTimeMillis())[ CD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) [ CD ]
Line_18 $$ final DeflaterOutputStream stream = new DeflaterOutputStream(compressedBytesStream, def)-->Line_20 $$ stream.write(bytes)[ FD ]
Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) -->Line_24 $$ outputBytesLength = compressedBytesStream.size()[ CD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_30 $$ entry.setCompressedSize(outputBytesLength)[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_8 $$ entry.setMethod(method)[ FD ]
Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) -->Line_16 $$ def.setLevel(level)[ CD ]
Line_13 $$ final byte[] outputBytes-->Line_32 $$ writeOut(outputBytes, 0, outputBytesLength)[ FD ]
Line_27 $$ outputBytesLength = bytes.length-->Line_32 $$ writeOut(outputBytes, 0, outputBytesLength)[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_10 $$ if (entry.getTime() == -1) [ CD ]
Line_24 $$ outputBytesLength = compressedBytesStream.size()-->Line_27 $$ outputBytesLength = bytes.length[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_14 $$ final int outputBytesLength[ CD ]
Line_18 $$ final DeflaterOutputStream stream = new DeflaterOutputStream(compressedBytesStream, def)-->Line_22 $$ stream.close()[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_11 $$ entry.setTime(System.currentTimeMillis())[ FD ]
Line_13 $$ final byte[] outputBytes-->Line_28 $$ outputBytes = bytes[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_5 $$ crc.update(bytes)[ CD ]
Line_17 $$ final BufferExposingByteArrayOutputStream compressedBytesStream = new BufferExposingByteArrayOutputStream()-->Line_25 $$ outputBytes = compressedBytesStream.getInternalBuffer()[ FD ]
Line_27 $$ outputBytesLength = bytes.length-->Line_30 $$ entry.setCompressedSize(outputBytesLength)[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_4 $$ crc.reset()[ CD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_20 $$ stream.write(bytes)[ FD ]
Line_13 $$ final byte[] outputBytes-->Line_25 $$ outputBytes = compressedBytesStream.getInternalBuffer()[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_32 $$ writeOut(outputBytes, 0, outputBytesLength)[ CD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) [ FD ]
Line_25 $$ outputBytes = compressedBytesStream.getInternalBuffer()-->Line_32 $$ writeOut(outputBytes, 0, outputBytesLength)[ FD ]
Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) -->Line_25 $$ outputBytes = compressedBytesStream.getInternalBuffer()[ CD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_3 $$ entry.setSize(bytes.length)[ FD ]
Line_14 $$ final int outputBytesLength-->Line_32 $$ writeOut(outputBytes, 0, outputBytesLength)[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_10 $$ if (entry.getTime() == -1) [ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_6 $$ entry.setCrc(crc.getValue())[ FD ]
Line_24 $$ outputBytesLength = compressedBytesStream.size()-->Line_32 $$ writeOut(outputBytes, 0, outputBytesLength)[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_3 $$ entry.setSize(bytes.length)[ CD ]
Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) -->Line_17 $$ final BufferExposingByteArrayOutputStream compressedBytesStream = new BufferExposingByteArrayOutputStream()[ CD ]
Line_14 $$ final int outputBytesLength-->Line_30 $$ entry.setCompressedSize(outputBytesLength)[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_13 $$ final byte[] outputBytes[ CD ]
Line_17 $$ final BufferExposingByteArrayOutputStream compressedBytesStream = new BufferExposingByteArrayOutputStream()-->Line_24 $$ outputBytesLength = compressedBytesStream.size()[ FD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_31 $$ writeLocalFileHeader(entry)[ FD ]
Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) -->Line_27 $$ outputBytesLength = bytes.length[ CD ]
Line_25 $$ outputBytes = compressedBytesStream.getInternalBuffer()-->Line_28 $$ outputBytes = bytes[ FD ]
Line_15 $$ if (entry.getMethod() == ZipEntry.DEFLATED) -->Line_28 $$ outputBytes = bytes[ CD ]
Line_2 $$ public void putNextEntryBytes(JBZipEntry entry, byte[] bytes) throws IOException -->Line_31 $$ writeLocalFileHeader(entry)[ CD ]
Line_14 $$ final int outputBytesLength-->Line_24 $$ outputBytesLength = compressedBytesStream.size()[ FD ]
