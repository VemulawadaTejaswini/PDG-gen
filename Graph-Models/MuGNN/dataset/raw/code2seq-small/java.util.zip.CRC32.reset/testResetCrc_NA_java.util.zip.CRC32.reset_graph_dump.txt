Line_24 $$ buffer = out.buffer()-->Line_34 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_36 $$ reader.limit(buffer.remaining())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_22 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_29 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_30 $$ writer.write(buffer)[ FD ]
Line_4 $$ CRC32 crc = new CRC32()-->Line_14 $$ out.writeInt((int) crc.getValue())[ FD ]
Line_12 $$ buffer = out.buffer()-->Line_19 $$ buffer = out.buffer()[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_39 $$ assertEquals(false, reader.readBoolean())[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_44 $$ assertEquals(3.3, reader.readDouble())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_20 $$ buffer.position(bufferPos)[ FD ]
Line_19 $$ buffer = out.buffer()-->Line_24 $$ buffer = out.buffer()[ FD ]
Line_19 $$ buffer = out.buffer()-->Line_30 $$ writer.write(buffer)[ FD ]
Line_24 $$ buffer = out.buffer()-->Line_36 $$ reader.limit(buffer.remaining())[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_41 $$ assertEquals('t', reader.readChar())[ FD ]
Line_19 $$ buffer = out.buffer()-->Line_34 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_19 $$ buffer = out.buffer()[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_30 $$ writer.write(buffer)[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_40 $$ assertEquals(10, reader.readByte())[ FD ]
Line_15 $$ int bufferPos = out.getLength()-->Line_20 $$ buffer.position(bufferPos)[ FD ]
Line_12 $$ buffer = out.buffer()-->Line_20 $$ buffer.position(bufferPos)[ FD ]
Line_4 $$ CRC32 crc = new CRC32()-->Line_22 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_47 $$ assertTrue(reader.checkCrc())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_24 $$ buffer = out.buffer()[ FD ]
Line_4 $$ CRC32 crc = new CRC32()-->Line_13 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_19 $$ buffer = out.buffer()-->Line_36 $$ reader.limit(buffer.remaining())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_13 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_46 $$ assertEquals(42, reader.readInt())[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_42 $$ assertTrue(reader.checkCrc())[ FD ]
Line_19 $$ buffer = out.buffer()-->Line_20 $$ buffer.position(bufferPos)[ FD ]
Line_29 $$ try (SequentialWriter writer = SequentialWriter.open(file)) -->Line_31 $$ writer.finish()[ FD ]
Line_12 $$ buffer = out.buffer()-->Line_30 $$ writer.write(buffer)[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_36 $$ reader.limit(buffer.remaining())[ FD ]
Line_4 $$ CRC32 crc = new CRC32()-->Line_23 $$ out.writeInt((int) crc.getValue())[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_48 $$ assertEquals(0, reader.bytesRemaining())[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_43 $$ reader.resetCrc()[ FD ]
Line_12 $$ buffer = out.buffer()-->Line_36 $$ reader.limit(buffer.remaining())[ FD ]
Line_4 $$ CRC32 crc = new CRC32()-->Line_21 $$ crc.reset()[ FD ]
Line_12 $$ buffer = out.buffer()-->Line_13 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_12 $$ buffer = out.buffer()-->Line_24 $$ buffer = out.buffer()[ FD ]
Line_24 $$ buffer = out.buffer()-->Line_30 $$ writer.write(buffer)[ FD ]
Line_19 $$ buffer = out.buffer()-->Line_22 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_35 $$ try (ChecksummedDataInput reader = ChecksummedDataInput.open(file)) -->Line_45 $$ assertEquals(2.2f, reader.readFloat())[ FD ]
Line_12 $$ buffer = out.buffer()-->Line_22 $$ FBUtilities.updateChecksum(crc, buffer)[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_34 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_12 $$ buffer = out.buffer()-->Line_34 $$ assertEquals(buffer.remaining(), file.length())[ FD ]
Line_5 $$ ByteBuffer buffer-->Line_12 $$ buffer = out.buffer()[ FD ]
