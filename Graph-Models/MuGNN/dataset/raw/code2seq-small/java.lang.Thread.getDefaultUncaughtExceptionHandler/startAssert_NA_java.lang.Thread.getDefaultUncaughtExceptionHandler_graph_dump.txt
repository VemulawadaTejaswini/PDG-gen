Line_2 $$ public static List<CaptureAppender> startAssert(List<ExpectedLogs> expectedLogsList) -->Line_12 $$ installLog4jAppender()[ CD ]
Line_2 $$ public static List<CaptureAppender> startAssert(List<ExpectedLogs> expectedLogsList) -->Line_4 $$ _uncaughtExceptionHandler = Thread.getDefaultUncaughtExceptionHandler()[ CD ]
Line_2 $$ public static List<CaptureAppender> startAssert(List<ExpectedLogs> expectedLogsList) -->Line_5 $$ Thread.setDefaultUncaughtExceptionHandler(new LogAssertionUncaughtExceptionHandler(_uncaughtExceptionHandler))[ CD ]
Line_2 $$ public static List<CaptureAppender> startAssert(List<ExpectedLogs> expectedLogsList) -->Line_13 $$ return captureAppenders[ CD ]
Line_2 $$ public static List<CaptureAppender> startAssert(List<ExpectedLogs> expectedLogsList) -->Line_6 $$ List<CaptureAppender> captureAppenders = new ArrayList(expectedLogsList.size())[ FD ]
Line_8 $$ Class<?> clazz = expectedLogs.loggerClass()-->Line_9 $$ captureAppenders.add(Log4JLoggerTestUtil.configureLog4JLogger(clazz.getName(), Level.toLevel(expectedLogs.level())))[ FD ]
Line_2 $$ public static List<CaptureAppender> startAssert(List<ExpectedLogs> expectedLogsList) -->Line_11 $$ installJdk14Handler()[ CD ]
Line_7 $$ for (ExpectedLogs expectedLogs : expectedLogsList) -->Line_8 $$ Class<?> clazz = expectedLogs.loggerClass()[ FD ]
Line_7 $$ for (ExpectedLogs expectedLogs : expectedLogsList) -->Line_9 $$ captureAppenders.add(Log4JLoggerTestUtil.configureLog4JLogger(clazz.getName(), Level.toLevel(expectedLogs.level())))[ FD ]
Line_2 $$ public static List<CaptureAppender> startAssert(List<ExpectedLogs> expectedLogsList) -->Line_3 $$ _thread = Thread.currentThread()[ CD ]
Line_2 $$ public static List<CaptureAppender> startAssert(List<ExpectedLogs> expectedLogsList) -->Line_6 $$ List<CaptureAppender> captureAppenders = new ArrayList(expectedLogsList.size())[ CD ]
Line_6 $$ List<CaptureAppender> captureAppenders = new ArrayList(expectedLogsList.size())-->Line_9 $$ captureAppenders.add(Log4JLoggerTestUtil.configureLog4JLogger(clazz.getName(), Level.toLevel(expectedLogs.level())))[ FD ]
