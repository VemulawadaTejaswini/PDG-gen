Line_43 $$ int curEnd = fragment.isRtl() ? Math.max(it.getEndOffset(), end) : Math.min(it.getEndOffset(), end)-->Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)[ FD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_60 $$ if (x > clip.getMaxX())[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_39 $$ assert !it.atEnd()[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_37 $$ while (fragment.isRtl() ? start > end : start < end) [ FD ]
Line_7 $$ IterationState it = null-->Line_68 $$ it.advance()[ FD ]
Line_48 $$ x = xNew-->Line_56 $$ x = xNew[ FD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_26 $$ painter.paintBeforeLineStart(g, it.getStartOffset() == offset ? it.getBeforeLineStartBackgroundAttributes() : it.getMergedAttributes(), fragment.getStartVisualColumn(), x, y)[ FD ]
Line_15 $$ x = fragment.getStartX()-->Line_26 $$ painter.paintBeforeLineStart(g, it.getStartOffset() == offset ? it.getBeforeLineStartBackgroundAttributes() : it.getMergedAttributes(), fragment.getStartVisualColumn(), x, y)[ FD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ FD ]
Line_15 $$ x = fragment.getStartX()-->Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)[ FD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_26 $$ painter.paintBeforeLineStart(g, it.getStartOffset() == offset ? it.getBeforeLineStartBackgroundAttributes() : it.getMergedAttributes(), fragment.getStartVisualColumn(), x, y)[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ FD ]
Line_7 $$ IterationState it = null-->Line_22 $$ if (it.getEndOffset() <= offset) [ FD ]
Line_56 $$ x = xNew-->Line_60 $$ if (x > clip.getMaxX())[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_8 $$ int prevEndOffset = -1[ CD ]
Line_53 $$ if (xNew >= clip.getMinX()) -->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ CD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_68 $$ it.advance()[ FD ]
Line_20 $$ prevEndOffset = offset-->Line_32 $$ if (start != prevEndOffset) [ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_10 $$ int maxColumn = 0[ CD ]
Line_32 $$ if (start != prevEndOffset) -->Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())[ CD ]
Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)-->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ FD ]
Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)-->Line_45 $$ if (xNew >= clip.getMinX()) [ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_38 $$ if (fragment.isRtl() ? it.getEndOffset() >= start : it.getEndOffset() <= start) [ FD ]
Line_13 $$ int start = fragmentStartOffset-->Line_32 $$ if (start != prevEndOffset) [ FD ]
Line_58 $$ it = null-->Line_70 $$ assert it.atEnd()[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_12 $$ int fragmentStartOffset = fragment.getStartOffset()[ FD ]
Line_13 $$ int start = fragmentStartOffset-->Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)[ FD ]
Line_60 $$ if (x > clip.getMaxX())-->Line_61 $$ return[ CD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_43 $$ int curEnd = fragment.isRtl() ? Math.max(it.getEndOffset(), end) : Math.min(it.getEndOffset(), end)[ FD ]
Line_37 $$ while (fragment.isRtl() ? start > end : start < end) -->Line_49 $$ start = curEnd[ CD ]
Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_48 $$ x = xNew-->Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)[ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_31 $$ if (foldRegion == null) -->Line_52 $$ float xNew = fragment.getEndX()[ CD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_40 $$ it.advance()[ FD ]
Line_43 $$ int curEnd = fragment.isRtl() ? Math.max(it.getEndOffset(), end) : Math.min(it.getEndOffset(), end)-->Line_49 $$ start = curEnd[ FD ]
Line_31 $$ if (foldRegion == null) -->Line_53 $$ if (xNew >= clip.getMinX()) [ CD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_25 $$ if (x >= clip.getMinX()) [ FD ]
Line_52 $$ float xNew = fragment.getEndX()-->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ FD ]
Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)-->Line_56 $$ x = xNew[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)[ FD ]
Line_5 $$ int offset = visLineIterator.getVisualLineStartOffset()-->Line_20 $$ prevEndOffset = offset[ FD ]
Line_37 $$ while (fragment.isRtl() ? start > end : start < end) -->Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)[ CD ]
Line_31 $$ if (foldRegion == null) -->Line_57 $$ prevEndOffset = -1[ CD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_43 $$ int curEnd = fragment.isRtl() ? Math.max(it.getEndOffset(), end) : Math.min(it.getEndOffset(), end)[ FD ]
Line_10 $$ int maxColumn = 0-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_7 $$ IterationState it = null-->Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_30 $$ FoldRegion foldRegion = fragment.getCurrentFoldRegion()[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_45 $$ if (xNew >= clip.getMinX()) [ FD ]
Line_38 $$ if (fragment.isRtl() ? it.getEndOffset() >= start : it.getEndOffset() <= start) -->Line_40 $$ it.advance()[ CD ]
Line_45 $$ if (xNew >= clip.getMinX()) -->Line_46 $$ painter.paint(g, fragment, fragment.isRtl() ? fragmentStartOffset - start : start - fragmentStartOffset, fragment.isRtl() ? fragmentStartOffset - curEnd : curEnd - fragmentStartOffset, attributes, x, xNew, y)[ CD ]
Line_64 $$ if (it == null || it.getEndOffset() != visualLineEndOffset) -->Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)[ CD ]
Line_20 $$ prevEndOffset = offset-->Line_57 $$ prevEndOffset = -1[ FD ]
Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)-->Line_67 $$ if (!it.atEnd()) [ FD ]
Line_62 $$ maxColumn = fragment.getEndVisualColumn()-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_64 $$ if (it == null || it.getEndOffset() != visualLineEndOffset) [ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_9 $$ boolean firstFragment = true[ CD ]
Line_14 $$ int end = fragment.getEndOffset()-->Line_35 $$ prevEndOffset = end[ FD ]
Line_19 $$ if (softWrap != null) -->Line_20 $$ prevEndOffset = offset[ CD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_46 $$ painter.paint(g, fragment, fragment.isRtl() ? fragmentStartOffset - start : start - fragmentStartOffset, fragment.isRtl() ? fragmentStartOffset - curEnd : curEnd - fragmentStartOffset, attributes, x, xNew, y)[ FD ]
Line_20 $$ prevEndOffset = offset-->Line_35 $$ prevEndOffset = end[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_46 $$ painter.paint(g, fragment, fragment.isRtl() ? fragmentStartOffset - start : start - fragmentStartOffset, fragment.isRtl() ? fragmentStartOffset - curEnd : curEnd - fragmentStartOffset, attributes, x, xNew, y)[ FD ]
Line_13 $$ int start = fragmentStartOffset-->Line_49 $$ start = curEnd[ FD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_25 $$ if (x >= clip.getMinX()) [ FD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_48 $$ x = xNew[ FD ]
Line_19 $$ if (softWrap != null) -->Line_25 $$ if (x >= clip.getMinX()) [ CD ]
Line_7 $$ IterationState it = null-->Line_39 $$ assert !it.atEnd()[ FD ]
Line_19 $$ if (softWrap != null) -->Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)[ CD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ FD ]
Line_18 $$ SoftWrap softWrap = myEditor.getSoftWrapModel().getSoftWrap(offset)-->Line_19 $$ if (softWrap != null) [ FD ]
Line_25 $$ if (x >= clip.getMinX()) -->Line_26 $$ painter.paintBeforeLineStart(g, it.getStartOffset() == offset ? it.getBeforeLineStartBackgroundAttributes() : it.getMergedAttributes(), fragment.getStartVisualColumn(), x, y)[ CD ]
Line_8 $$ int prevEndOffset = -1-->Line_20 $$ prevEndOffset = offset[ FD ]
Line_16 $$ if (firstFragment) -->Line_17 $$ firstFragment = false[ CD ]
Line_19 $$ if (softWrap != null) -->Line_22 $$ if (it.getEndOffset() <= offset) [ CD ]
Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)-->Line_46 $$ painter.paint(g, fragment, fragment.isRtl() ? fragmentStartOffset - start : start - fragmentStartOffset, fragment.isRtl() ? fragmentStartOffset - curEnd : curEnd - fragmentStartOffset, attributes, x, xNew, y)[ FD ]
Line_7 $$ IterationState it = null-->Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())[ FD ]
Line_31 $$ if (foldRegion == null) -->Line_56 $$ x = xNew[ CD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ CD ]
Line_31 $$ if (foldRegion == null) -->Line_32 $$ if (start != prevEndOffset) [ CD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_43 $$ int curEnd = fragment.isRtl() ? Math.max(it.getEndOffset(), end) : Math.min(it.getEndOffset(), end)[ FD ]
Line_7 $$ IterationState it = null-->Line_70 $$ assert it.atEnd()[ FD ]
Line_15 $$ x = fragment.getStartX()-->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ FD ]
Line_8 $$ int prevEndOffset = -1-->Line_57 $$ prevEndOffset = -1[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_15 $$ x = fragment.getStartX()[ FD ]
Line_8 $$ int prevEndOffset = -1-->Line_35 $$ prevEndOffset = end[ FD ]
Line_15 $$ x = fragment.getStartX()-->Line_46 $$ painter.paint(g, fragment, fragment.isRtl() ? fragmentStartOffset - start : start - fragmentStartOffset, fragment.isRtl() ? fragmentStartOffset - curEnd : curEnd - fragmentStartOffset, attributes, x, xNew, y)[ FD ]
Line_7 $$ IterationState it = null-->Line_26 $$ painter.paintBeforeLineStart(g, it.getStartOffset() == offset ? it.getBeforeLineStartBackgroundAttributes() : it.getMergedAttributes(), fragment.getStartVisualColumn(), x, y)[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_62 $$ maxColumn = fragment.getEndVisualColumn()[ FD ]
Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)-->Line_48 $$ x = xNew[ FD ]
Line_7 $$ IterationState it = null-->Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)[ FD ]
Line_30 $$ FoldRegion foldRegion = fragment.getCurrentFoldRegion()-->Line_31 $$ if (foldRegion == null) [ FD ]
Line_10 $$ int maxColumn = 0-->Line_62 $$ maxColumn = fragment.getEndVisualColumn()[ FD ]
Line_37 $$ while (fragment.isRtl() ? start > end : start < end) -->Line_43 $$ int curEnd = fragment.isRtl() ? Math.max(it.getEndOffset(), end) : Math.min(it.getEndOffset(), end)[ CD ]
Line_15 $$ x = fragment.getStartX()-->Line_56 $$ x = xNew[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_68 $$ it.advance()[ FD ]
Line_9 $$ boolean firstFragment = true-->Line_17 $$ firstFragment = false[ FD ]
Line_42 $$ TextAttributes attributes = it.getMergedAttributes()-->Line_46 $$ painter.paint(g, fragment, fragment.isRtl() ? fragmentStartOffset - start : start - fragmentStartOffset, fragment.isRtl() ? fragmentStartOffset - curEnd : curEnd - fragmentStartOffset, attributes, x, xNew, y)[ FD ]
Line_58 $$ it = null-->Line_64 $$ if (it == null || it.getEndOffset() != visualLineEndOffset) [ FD ]
Line_7 $$ IterationState it = null-->Line_64 $$ if (it == null || it.getEndOffset() != visualLineEndOffset) [ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0[ CD ]
Line_7 $$ IterationState it = null-->Line_38 $$ if (fragment.isRtl() ? it.getEndOffset() >= start : it.getEndOffset() <= start) [ FD ]
Line_31 $$ if (foldRegion == null) -->Line_35 $$ prevEndOffset = end[ CD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_53 $$ if (xNew >= clip.getMinX()) [ FD ]
Line_48 $$ x = xNew-->Line_46 $$ painter.paint(g, fragment, fragment.isRtl() ? fragmentStartOffset - start : start - fragmentStartOffset, fragment.isRtl() ? fragmentStartOffset - curEnd : curEnd - fragmentStartOffset, attributes, x, xNew, y)[ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_70 $$ assert it.atEnd()[ FD ]
Line_15 $$ x = fragment.getStartX()-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_5 $$ int offset = visLineIterator.getVisualLineStartOffset()[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_46 $$ painter.paint(g, fragment, fragment.isRtl() ? fragmentStartOffset - start : start - fragmentStartOffset, fragment.isRtl() ? fragmentStartOffset - curEnd : curEnd - fragmentStartOffset, attributes, x, xNew, y)[ FD ]
Line_15 $$ x = fragment.getStartX()-->Line_48 $$ x = xNew[ FD ]
Line_58 $$ it = null-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_31 $$ if (foldRegion == null) -->Line_37 $$ while (fragment.isRtl() ? start > end : start < end) [ CD ]
Line_58 $$ it = null-->Line_68 $$ it.advance()[ FD ]
Line_15 $$ x = fragment.getStartX()-->Line_25 $$ if (x >= clip.getMinX()) [ FD ]
Line_5 $$ int offset = visLineIterator.getVisualLineStartOffset()-->Line_18 $$ SoftWrap softWrap = myEditor.getSoftWrapModel().getSoftWrap(offset)[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_38 $$ if (fragment.isRtl() ? it.getEndOffset() >= start : it.getEndOffset() <= start) [ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_40 $$ it.advance()[ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_39 $$ assert !it.atEnd()[ FD ]
Line_67 $$ if (!it.atEnd()) -->Line_68 $$ it.advance()[ CD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)[ FD ]
Line_7 $$ IterationState it = null-->Line_43 $$ int curEnd = fragment.isRtl() ? Math.max(it.getEndOffset(), end) : Math.min(it.getEndOffset(), end)[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_26 $$ painter.paintBeforeLineStart(g, it.getStartOffset() == offset ? it.getBeforeLineStartBackgroundAttributes() : it.getMergedAttributes(), fragment.getStartVisualColumn(), x, y)[ FD ]
Line_16 $$ if (firstFragment) -->Line_19 $$ if (softWrap != null) [ CD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_60 $$ if (x > clip.getMaxX())[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_14 $$ int end = fragment.getEndOffset()[ FD ]
Line_7 $$ IterationState it = null-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_7 $$ IterationState it = null-->Line_23 $$ it.advance()[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_64 $$ if (it == null || it.getEndOffset() != visualLineEndOffset) [ CD ]
Line_22 $$ if (it.getEndOffset() <= offset) -->Line_23 $$ it.advance()[ CD ]
Line_15 $$ x = fragment.getStartX()-->Line_60 $$ if (x > clip.getMaxX())[ FD ]
Line_52 $$ float xNew = fragment.getEndX()-->Line_56 $$ x = xNew[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_3 $$ int visualLine = visLineIterator.getVisualLine()[ CD ]
Line_31 $$ if (foldRegion == null) -->Line_58 $$ it = null[ CD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_64 $$ if (it == null || it.getEndOffset() != visualLineEndOffset) [ FD ]
Line_58 $$ it = null-->Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_42 $$ TextAttributes attributes = it.getMergedAttributes()[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_7 $$ IterationState it = null[ CD ]
Line_56 $$ x = xNew-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_5 $$ int offset = visLineIterator.getVisualLineStartOffset()[ CD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_56 $$ x = xNew[ FD ]
Line_48 $$ x = xNew-->Line_60 $$ if (x > clip.getMaxX())[ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_52 $$ float xNew = fragment.getEndX()[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_58 $$ it = null[ FD ]
Line_35 $$ prevEndOffset = end-->Line_57 $$ prevEndOffset = -1[ FD ]
Line_7 $$ IterationState it = null-->Line_40 $$ it.advance()[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_38 $$ if (fragment.isRtl() ? it.getEndOffset() >= start : it.getEndOffset() <= start) [ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_58 $$ it = null[ FD ]
Line_37 $$ while (fragment.isRtl() ? start > end : start < end) -->Line_45 $$ if (xNew >= clip.getMinX()) [ CD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) [ FD ]
Line_37 $$ while (fragment.isRtl() ? start > end : start < end) -->Line_38 $$ if (fragment.isRtl() ? it.getEndOffset() >= start : it.getEndOffset() <= start) [ CD ]
Line_37 $$ while (fragment.isRtl() ? start > end : start < end) -->Line_48 $$ x = xNew[ CD ]
Line_58 $$ it = null-->Line_67 $$ if (!it.atEnd()) [ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_42 $$ TextAttributes attributes = it.getMergedAttributes()[ FD ]
Line_14 $$ int end = fragment.getEndOffset()-->Line_43 $$ int curEnd = fragment.isRtl() ? Math.max(it.getEndOffset(), end) : Math.min(it.getEndOffset(), end)[ FD ]
Line_52 $$ float xNew = fragment.getEndX()-->Line_53 $$ if (xNew >= clip.getMinX()) [ FD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_15 $$ x = fragment.getStartX()[ FD ]
Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())-->Line_67 $$ if (!it.atEnd()) [ FD ]
Line_7 $$ IterationState it = null-->Line_58 $$ it = null[ FD ]
Line_48 $$ x = xNew-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_30 $$ FoldRegion foldRegion = fragment.getCurrentFoldRegion()-->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ FD ]
Line_49 $$ start = curEnd-->Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)[ FD ]
Line_7 $$ IterationState it = null-->Line_67 $$ if (!it.atEnd()) [ FD ]
Line_37 $$ while (fragment.isRtl() ? start > end : start < end) -->Line_42 $$ TextAttributes attributes = it.getMergedAttributes()[ CD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_67 $$ if (!it.atEnd()) [ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_67 $$ if (!it.atEnd()) [ CD ]
Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)-->Line_68 $$ it.advance()[ FD ]
Line_4 $$ float x = visualLine == 0 ? myView.getPrefixTextWidthInPixels() : 0-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_5 $$ int offset = visLineIterator.getVisualLineStartOffset()-->Line_22 $$ if (it.getEndOffset() <= offset) [ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_6 $$ int visualLineEndOffset = visLineIterator.getVisualLineEndOffset()[ CD ]
Line_44 $$ float xNew = fragment.offsetToX(x, start, curEnd)-->Line_53 $$ if (xNew >= clip.getMinX()) [ FD ]
Line_11 $$ for (VisualLineFragmentsIterator.Fragment fragment : VisualLineFragmentsIterator.create(myView, visLineIterator, null)) -->Line_26 $$ painter.paintBeforeLineStart(g, it.getStartOffset() == offset ? it.getBeforeLineStartBackgroundAttributes() : it.getMergedAttributes(), fragment.getStartVisualColumn(), x, y)[ FD ]
Line_48 $$ x = xNew-->Line_54 $$ painter.paint(g, fragment, 0, fragment.getEndVisualColumn() - fragment.getStartVisualColumn(), getFoldRegionAttributes(foldRegion), x, xNew, y)[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_70 $$ assert it.atEnd()[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_71 $$ painter.paintAfterLineEnd(g, clip, it, maxColumn, x, y)[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_3 $$ int visualLine = visLineIterator.getVisualLine()[ FD ]
Line_65 $$ it = new IterationState(myEditor, visualLineEndOffset == offset ? visualLineEndOffset : visualLineEndOffset - 1, visualLineEndOffset, true, false, false, false)-->Line_70 $$ assert it.atEnd()[ FD ]
Line_16 $$ if (firstFragment) -->Line_18 $$ SoftWrap softWrap = myEditor.getSoftWrapModel().getSoftWrap(offset)[ CD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_33 $$ it = new IterationState(myEditor, start, fragment.isRtl() ? offset : visualLineEndOffset, true, false, false, fragment.isRtl())[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_23 $$ it.advance()[ FD ]
Line_2 $$ private void paintLineFragments(Graphics2D g, Rectangle clip, VisualLinesIterator visLineIterator, int y, LineFragmentPainter painter) -->Line_6 $$ int visualLineEndOffset = visLineIterator.getVisualLineEndOffset()[ FD ]
Line_7 $$ IterationState it = null-->Line_42 $$ TextAttributes attributes = it.getMergedAttributes()[ FD ]
Line_21 $$ it = new IterationState(myEditor, offset == 0 ? 0 : offset - 1, visualLineEndOffset, true, false, false, false)-->Line_22 $$ if (it.getEndOffset() <= offset) [ FD ]
Line_8 $$ int prevEndOffset = -1-->Line_32 $$ if (start != prevEndOffset) [ FD ]
