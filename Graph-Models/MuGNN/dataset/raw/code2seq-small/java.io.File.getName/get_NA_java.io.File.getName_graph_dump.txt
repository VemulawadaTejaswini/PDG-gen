Line_2 $$ public void get(long index, byte[] dst, int offset, int length) -->Line_4 $$ int o = offset[ CD ]
Line_10 $$ final ByteBuffer buffer = getReadOnlyBuffer(page)-->Line_16 $$ buffer.get(dst, o, page_len)[ FD ]
Line_18 $$ o += page_len-->Line_16 $$ buffer.get(dst, o, page_len)[ FD ]
Line_6 $$ while (l > 0) -->Line_8 $$ int page_offset = (int) (i % myPageSize)[ CD ]
Line_9 $$ int page_len = Math.min(l, myPageSize - page_offset)-->Line_16 $$ buffer.get(dst, o, page_len)[ FD ]
Line_3 $$ long i = index-->Line_19 $$ i += page_len[ FD ]
Line_9 $$ int page_len = Math.min(l, myPageSize - page_offset)-->Line_19 $$ i += page_len[ FD ]
Line_6 $$ while (l > 0) -->Line_9 $$ int page_len = Math.min(l, myPageSize - page_offset)[ CD ]
Line_17 $$ l -= page_len-->Line_6 $$ while (l > 0) [ FD ]
Line_5 $$ int l = length-->Line_17 $$ l -= page_len[ FD ]
Line_8 $$ int page_offset = (int) (i % myPageSize)-->Line_12 $$ buffer.position(page_offset)[ FD ]
Line_6 $$ while (l > 0) -->Line_10 $$ final ByteBuffer buffer = getReadOnlyBuffer(page)[ CD ]
Line_6 $$ while (l > 0) -->Line_19 $$ i += page_len[ CD ]
Line_7 $$ long page = i / myPageSize-->Line_10 $$ final ByteBuffer buffer = getReadOnlyBuffer(page)[ FD ]
Line_6 $$ while (l > 0) -->Line_18 $$ o += page_len[ CD ]
Line_9 $$ int page_len = Math.min(l, myPageSize - page_offset)-->Line_17 $$ l -= page_len[ FD ]
Line_2 $$ public void get(long index, byte[] dst, int offset, int length) -->Line_3 $$ long i = index[ CD ]
Line_2 $$ public void get(long index, byte[] dst, int offset, int length) -->Line_6 $$ while (l > 0) [ CD ]
Line_4 $$ int o = offset-->Line_16 $$ buffer.get(dst, o, page_len)[ FD ]
Line_6 $$ while (l > 0) -->Line_7 $$ long page = i / myPageSize[ CD ]
Line_4 $$ int o = offset-->Line_18 $$ o += page_len[ FD ]
Line_5 $$ int l = length-->Line_6 $$ while (l > 0) [ FD ]
Line_6 $$ while (l > 0) -->Line_16 $$ buffer.get(dst, o, page_len)[ CD ]
Line_10 $$ final ByteBuffer buffer = getReadOnlyBuffer(page)-->Line_12 $$ buffer.position(page_offset)[ FD ]
Line_2 $$ public void get(long index, byte[] dst, int offset, int length) -->Line_16 $$ buffer.get(dst, o, page_len)[ FD ]
Line_10 $$ final ByteBuffer buffer = getReadOnlyBuffer(page)-->Line_14 $$ throw new IllegalArgumentException("can't position buffer to offset " + page_offset + ", " + "buffer.limit=" + buffer.limit() + ", " + "page=" + page + ", " + "file=" + myFile.getName() + ", " + "file.length=" + length())[ FD ]
Line_9 $$ int page_len = Math.min(l, myPageSize - page_offset)-->Line_18 $$ o += page_len[ FD ]
Line_6 $$ while (l > 0) -->Line_17 $$ l -= page_len[ CD ]
Line_2 $$ public void get(long index, byte[] dst, int offset, int length) -->Line_5 $$ int l = length[ CD ]
Line_5 $$ int l = length-->Line_9 $$ int page_len = Math.min(l, myPageSize - page_offset)[ FD ]
Line_17 $$ l -= page_len-->Line_9 $$ int page_len = Math.min(l, myPageSize - page_offset)[ FD ]
