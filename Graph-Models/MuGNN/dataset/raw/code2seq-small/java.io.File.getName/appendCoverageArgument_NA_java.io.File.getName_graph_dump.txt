Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_3 $$ StringBuilder argument = new StringBuilder("-javaagent:")[ CD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_25 $$ if (patterns != null) [ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_20 $$ write2file(tempFile, String.valueOf(isSampling))[ FD ]
Line_5 $$ final String parentPath = handleSpacesInPath(agentPath, new FileFilter() -->Line_8 $$ return fileName.startsWith("coverage-") || fileName.startsWith("asm-all") || fileName.startsWith("trove4j")[ CD ]
Line_5 $$ final String parentPath = handleSpacesInPath(agentPath, new FileFilter() -->Line_7 $$ final String fileName = file.getName()[ FD ]
Line_5 $$ final String parentPath = handleSpacesInPath(agentPath, new FileFilter() -->Line_7 $$ final String fileName = file.getName()[ CD ]
Line_21 $$ if (sourceMapPath != null) -->Line_23 $$ write2file(tempFile, sourceMapPath)[ CD ]
Line_21 $$ if (sourceMapPath != null) -->Line_22 $$ write2file(tempFile, Boolean.TRUE.toString())[ CD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_39 $$ javaParameters.getVMParametersList().add(argument.toString())[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_17 $$ write2file(tempFile, String.valueOf(collectLineInfo))[ FD ]
Line_3 $$ StringBuilder argument = new StringBuilder("-javaagent:")-->Line_11 $$ argument.append(parentPath).append(File.separator).append(new File(agentPath).getName())[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_21 $$ if (sourceMapPath != null) [ FD ]
Line_4 $$ final String agentPath = PathUtil.getJarPathForClass(ProjectData.class)-->Line_5 $$ final String parentPath = handleSpacesInPath(agentPath, new FileFilter() [ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_16 $$ write2file(tempFile, sessionDataFilePath)[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_5 $$ final String parentPath = handleSpacesInPath(agentPath, new FileFilter() [ CD ]
Line_3 $$ StringBuilder argument = new StringBuilder("-javaagent:")-->Line_34 $$ argument.append(tempFile.getCanonicalPath())[ FD ]
Line_3 $$ StringBuilder argument = new StringBuilder("-javaagent:")-->Line_39 $$ javaParameters.getVMParametersList().add(argument.toString())[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_39 $$ javaParameters.getVMParametersList().add(argument.toString())[ CD ]
Line_5 $$ final String parentPath = handleSpacesInPath(agentPath, new FileFilter() -->Line_11 $$ argument.append(parentPath).append(File.separator).append(new File(agentPath).getName())[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_11 $$ argument.append(parentPath).append(File.separator).append(new File(agentPath).getName())[ CD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_12 $$ argument.append("=")[ CD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_4 $$ final String agentPath = PathUtil.getJarPathForClass(ProjectData.class)[ CD ]
Line_3 $$ StringBuilder argument = new StringBuilder("-javaagent:")-->Line_12 $$ argument.append("=")[ FD ]
Line_7 $$ final String fileName = file.getName()-->Line_8 $$ return fileName.startsWith("coverage-") || fileName.startsWith("asm-all") || fileName.startsWith("trove4j")[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling, @Nullable String sourceMapPath) -->Line_23 $$ write2file(tempFile, sourceMapPath)[ FD ]
