Line_25 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_28 $$ assertEquals(column0.isNull(2), false)[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, VARBINARY, DOUBLE, BOOLEAN, arrayType, mapType, arrayOfArrayType)[ CD ]
Line_57 $$ Block column6 = reader.readBlock(mapType, 6)-->Line_58 $$ assertEquals(column6.getPositionCount(), 3)[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_61 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column6, 2), mapBlockOf(VARCHAR, BOOLEAN, "k3", false)))[ FD ]
Line_31 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_33 $$ assertEquals(VARCHAR.getSlice(column1, 1), utf8Slice("world"))[ FD ]
Line_31 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_34 $$ assertEquals(VARCHAR.getSlice(column1, 2), utf8Slice("bye ☃"))[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_3 $$ List<Long> columnIds = ImmutableList.of(1L, 2L, 4L, 6L, 7L, 8L, 9L, 10L)[ CD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_20 $$ assertEquals(reader.getFileRowCount(), reader.getReaderRowCount())[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_52 $$ Block column5 = reader.readBlock(arrayType, 5)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_62 $$ Block column7 = reader.readBlock(arrayOfArrayType, 7)[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_72 $$ assertFalse(crcFile.exists())[ CD ]
Line_16 $$ try (OrcDataSource dataSource = fileOrcDataSource(file)) -->Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_57 $$ Block column6 = reader.readBlock(mapType, 6)-->Line_60 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column6, 1), mapBlockOf(VARCHAR, BOOLEAN, "k2", null)))[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_64 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_55 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column5, 1), arrayBlockOf(BIGINT, 3, null)))[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_59 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column6, 0), mapBlockOf(VARCHAR, BOOLEAN, "k1", true)))[ FD ]
Line_39 $$ Block column3 = reader.readBlock(DOUBLE, 3)-->Line_42 $$ assertEquals(column3.isNull(2), false)[ FD ]
Line_62 $$ Block column7 = reader.readBlock(arrayOfArrayType, 7)-->Line_64 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, VARBINARY, DOUBLE, BOOLEAN, arrayType, mapType, arrayOfArrayType)-->Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_35 $$ Block column2 = reader.readBlock(VARBINARY, 2)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_31 $$ Block column1 = reader.readBlock(VARCHAR, 1)[ FD ]
Line_25 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_30 $$ assertEquals(BIGINT.getLong(column0, 2), 456L)[ FD ]
Line_11 $$ RowPagesBuilder rowPagesBuilder = RowPagesBuilder.rowPagesBuilder(columnTypes).row(123, "hello", wrappedBuffer(bytes1), 123.456, true, arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(null, "world", null, Double.POSITIVE_INFINITY, null, arrayBlockOf(BIGINT, 3, null), mapBlockOf(VARCHAR, BOOLEAN, "k2", null), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))).row(456, "bye ☃", wrappedBuffer(bytes3), Double.NaN, false, arrayBlockOf(BIGINT), mapBlockOf(VARCHAR, BOOLEAN, "k3", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT)))-->Line_14 $$ writer.appendPages(rowPagesBuilder.build())[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_54 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column5, 0), arrayBlockOf(BIGINT, 1, 2)))[ FD ]
Line_57 $$ Block column6 = reader.readBlock(mapType, 6)-->Line_61 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column6, 2), mapBlockOf(VARCHAR, BOOLEAN, "k3", false)))[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_11 $$ RowPagesBuilder rowPagesBuilder = RowPagesBuilder.rowPagesBuilder(columnTypes).row(123, "hello", wrappedBuffer(bytes1), 123.456, true, arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(null, "world", null, Double.POSITIVE_INFINITY, null, arrayBlockOf(BIGINT, 3, null), mapBlockOf(VARCHAR, BOOLEAN, "k2", null), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))).row(456, "bye ☃", wrappedBuffer(bytes3), Double.NaN, false, arrayBlockOf(BIGINT), mapBlockOf(VARCHAR, BOOLEAN, "k3", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT)))[ CD ]
Line_35 $$ Block column2 = reader.readBlock(VARBINARY, 2)-->Line_37 $$ assertEquals(column2.isNull(1), true)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_68 $$ assertEquals(reader.getReaderPosition(), 3)[ FD ]
Line_5 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_62 $$ Block column7 = reader.readBlock(arrayOfArrayType, 7)[ FD ]
Line_52 $$ Block column5 = reader.readBlock(arrayType, 5)-->Line_55 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column5, 1), arrayBlockOf(BIGINT, 3, null)))[ FD ]
Line_46 $$ Block column4 = reader.readBlock(BOOLEAN, 4)-->Line_51 $$ assertEquals(BOOLEAN.getBoolean(column4, 2), false)[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_60 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column6, 1), mapBlockOf(VARCHAR, BOOLEAN, "k2", null)))[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_69 $$ assertEquals(reader.getFilePosition(), reader.getFilePosition())[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_5 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)[ CD ]
Line_52 $$ Block column5 = reader.readBlock(arrayType, 5)-->Line_53 $$ assertEquals(column5.getPositionCount(), 3)[ FD ]
Line_71 $$ File crcFile = new File(file.getParentFile(), "." + file.getName() + ".crc")-->Line_72 $$ assertFalse(crcFile.exists())[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_18 $$ assertEquals(reader.getReaderRowCount(), 3)[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_10 $$ byte[] bytes3 = octets(0x01, 0x02, 0x19, 0x80)[ CD ]
Line_2 $$ public void testWriter() throws Exception -->Line_6 $$ MapType mapType = new MapType(VARCHAR, BOOLEAN)[ CD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_22 $$ assertEquals(reader.nextBatch(), 3)[ FD ]
Line_46 $$ Block column4 = reader.readBlock(BOOLEAN, 4)-->Line_47 $$ assertEquals(column4.isNull(0), false)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_46 $$ Block column4 = reader.readBlock(BOOLEAN, 4)[ FD ]
Line_39 $$ Block column3 = reader.readBlock(DOUBLE, 3)-->Line_44 $$ assertEquals(DOUBLE.getDouble(column3, 1), Double.POSITIVE_INFINITY)[ FD ]
Line_62 $$ Block column7 = reader.readBlock(arrayOfArrayType, 7)-->Line_66 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 2), arrayBlockOf(arrayType, arrayBlockOf(BIGINT))))[ FD ]
Line_31 $$ Block column1 = reader.readBlock(VARCHAR, 1)-->Line_32 $$ assertEquals(VARCHAR.getSlice(column1, 0), utf8Slice("hello"))[ FD ]
Line_46 $$ Block column4 = reader.readBlock(BOOLEAN, 4)-->Line_48 $$ assertEquals(column4.isNull(1), true)[ FD ]
Line_9 $$ byte[] bytes1 = octets(0x00, 0xFE, 0xFF)-->Line_36 $$ assertEquals(VARBINARY.getSlice(column2, 0), wrappedBuffer(bytes1))[ FD ]
Line_46 $$ Block column4 = reader.readBlock(BOOLEAN, 4)-->Line_49 $$ assertEquals(column4.isNull(2), false)[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_71 $$ File crcFile = new File(file.getParentFile(), "." + file.getName() + ".crc")[ CD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_56 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column5, 2), arrayBlockOf(BIGINT)))[ FD ]
Line_6 $$ MapType mapType = new MapType(VARCHAR, BOOLEAN)-->Line_57 $$ Block column6 = reader.readBlock(mapType, 6)[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_8 $$ File file = new File(directory, System.nanoTime() + ".orc")[ CD ]
Line_39 $$ Block column3 = reader.readBlock(DOUBLE, 3)-->Line_45 $$ assertEquals(DOUBLE.getDouble(column3, 2), Double.NaN)[ FD ]
Line_3 $$ List<Long> columnIds = ImmutableList.of(1L, 2L, 4L, 6L, 7L, 8L, 9L, 10L)-->Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)[ FD ]
Line_10 $$ byte[] bytes3 = octets(0x01, 0x02, 0x19, 0x80)-->Line_38 $$ assertEquals(VARBINARY.getSlice(column2, 2), wrappedBuffer(bytes3))[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_21 $$ assertEquals(reader.getFilePosition(), reader.getFilePosition())[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_19 $$ assertEquals(reader.getReaderPosition(), 0)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_39 $$ Block column3 = reader.readBlock(DOUBLE, 3)[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)[ CD ]
Line_8 $$ File file = new File(directory, System.nanoTime() + ".orc")-->Line_71 $$ File crcFile = new File(file.getParentFile(), "." + file.getName() + ".crc")[ FD ]
Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, VARBINARY, DOUBLE, BOOLEAN, arrayType, mapType, arrayOfArrayType)-->Line_11 $$ RowPagesBuilder rowPagesBuilder = RowPagesBuilder.rowPagesBuilder(columnTypes).row(123, "hello", wrappedBuffer(bytes1), 123.456, true, arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(null, "world", null, Double.POSITIVE_INFINITY, null, arrayBlockOf(BIGINT, 3, null), mapBlockOf(VARCHAR, BOOLEAN, "k2", null), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))).row(456, "bye ☃", wrappedBuffer(bytes3), Double.NaN, false, arrayBlockOf(BIGINT), mapBlockOf(VARCHAR, BOOLEAN, "k3", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT)))[ FD ]
Line_8 $$ File file = new File(directory, System.nanoTime() + ".orc")-->Line_16 $$ try (OrcDataSource dataSource = fileOrcDataSource(file)) [ FD ]
Line_46 $$ Block column4 = reader.readBlock(BOOLEAN, 4)-->Line_50 $$ assertEquals(BOOLEAN.getBoolean(column4, 0), true)[ FD ]
Line_12 $$ try (ThreadContextClassLoader ignored = new ThreadContextClassLoader(new EmptyClassLoader());-->Line_14 $$ writer.appendPages(rowPagesBuilder.build())[ FD ]
Line_35 $$ Block column2 = reader.readBlock(VARBINARY, 2)-->Line_36 $$ assertEquals(VARBINARY.getSlice(column2, 0), wrappedBuffer(bytes1))[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_65 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 1), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))))[ FD ]
Line_5 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, VARBINARY, DOUBLE, BOOLEAN, arrayType, mapType, arrayOfArrayType)[ FD ]
Line_35 $$ Block column2 = reader.readBlock(VARBINARY, 2)-->Line_38 $$ assertEquals(VARBINARY.getSlice(column2, 2), wrappedBuffer(bytes3))[ FD ]
Line_62 $$ Block column7 = reader.readBlock(arrayOfArrayType, 7)-->Line_65 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 1), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))))[ FD ]
Line_25 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_29 $$ assertEquals(BIGINT.getLong(column0, 0), 123L)[ FD ]
Line_2 $$ public void testWriter() throws Exception -->Line_9 $$ byte[] bytes1 = octets(0x00, 0xFE, 0xFF)[ CD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_57 $$ Block column6 = reader.readBlock(mapType, 6)[ FD ]
Line_5 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_65 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 1), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))))[ FD ]
Line_6 $$ MapType mapType = new MapType(VARCHAR, BOOLEAN)-->Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, VARBINARY, DOUBLE, BOOLEAN, arrayType, mapType, arrayOfArrayType)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_25 $$ Block column0 = reader.readBlock(BIGINT, 0)[ FD ]
Line_39 $$ Block column3 = reader.readBlock(DOUBLE, 3)-->Line_43 $$ assertEquals(DOUBLE.getDouble(column3, 0), 123.456)[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_11 $$ RowPagesBuilder rowPagesBuilder = RowPagesBuilder.rowPagesBuilder(columnTypes).row(123, "hello", wrappedBuffer(bytes1), 123.456, true, arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(null, "world", null, Double.POSITIVE_INFINITY, null, arrayBlockOf(BIGINT, 3, null), mapBlockOf(VARCHAR, BOOLEAN, "k2", null), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))).row(456, "bye ☃", wrappedBuffer(bytes3), Double.NaN, false, arrayBlockOf(BIGINT), mapBlockOf(VARCHAR, BOOLEAN, "k3", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT)))[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_23 $$ assertEquals(reader.getReaderPosition(), 0)[ FD ]
Line_62 $$ Block column7 = reader.readBlock(arrayOfArrayType, 7)-->Line_63 $$ assertEquals(column7.getPositionCount(), 3)[ FD ]
Line_52 $$ Block column5 = reader.readBlock(arrayType, 5)-->Line_54 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column5, 0), arrayBlockOf(BIGINT, 1, 2)))[ FD ]
Line_25 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_27 $$ assertEquals(column0.isNull(1), true)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_24 $$ assertEquals(reader.getFilePosition(), reader.getFilePosition())[ FD ]
Line_39 $$ Block column3 = reader.readBlock(DOUBLE, 3)-->Line_41 $$ assertEquals(column3.isNull(1), false)[ FD ]
Line_5 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_64 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 0), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))))[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_52 $$ Block column5 = reader.readBlock(arrayType, 5)[ FD ]
Line_10 $$ byte[] bytes3 = octets(0x01, 0x02, 0x19, 0x80)-->Line_11 $$ RowPagesBuilder rowPagesBuilder = RowPagesBuilder.rowPagesBuilder(columnTypes).row(123, "hello", wrappedBuffer(bytes1), 123.456, true, arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(null, "world", null, Double.POSITIVE_INFINITY, null, arrayBlockOf(BIGINT, 3, null), mapBlockOf(VARCHAR, BOOLEAN, "k2", null), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))).row(456, "bye ☃", wrappedBuffer(bytes3), Double.NaN, false, arrayBlockOf(BIGINT), mapBlockOf(VARCHAR, BOOLEAN, "k3", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT)))[ FD ]
Line_39 $$ Block column3 = reader.readBlock(DOUBLE, 3)-->Line_40 $$ assertEquals(column3.isNull(0), false)[ FD ]
Line_57 $$ Block column6 = reader.readBlock(mapType, 6)-->Line_59 $$ assertTrue(mapBlocksEqual(VARCHAR, BOOLEAN, arrayType.getObject(column6, 0), mapBlockOf(VARCHAR, BOOLEAN, "k1", true)))[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_66 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 2), arrayBlockOf(arrayType, arrayBlockOf(BIGINT))))[ FD ]
Line_52 $$ Block column5 = reader.readBlock(arrayType, 5)-->Line_56 $$ assertTrue(arrayBlocksEqual(BIGINT, arrayType.getObject(column5, 2), arrayBlockOf(BIGINT)))[ FD ]
Line_25 $$ Block column0 = reader.readBlock(BIGINT, 0)-->Line_26 $$ assertEquals(column0.isNull(0), false)[ FD ]
Line_9 $$ byte[] bytes1 = octets(0x00, 0xFE, 0xFF)-->Line_11 $$ RowPagesBuilder rowPagesBuilder = RowPagesBuilder.rowPagesBuilder(columnTypes).row(123, "hello", wrappedBuffer(bytes1), 123.456, true, arrayBlockOf(BIGINT, 1, 2), mapBlockOf(VARCHAR, BOOLEAN, "k1", true), arrayBlockOf(arrayType, arrayBlockOf(BIGINT, 5))).row(null, "world", null, Double.POSITIVE_INFINITY, null, arrayBlockOf(BIGINT, 3, null), mapBlockOf(VARCHAR, BOOLEAN, "k2", null), arrayBlockOf(arrayType, null, arrayBlockOf(BIGINT, 6, 7))).row(456, "bye ☃", wrappedBuffer(bytes3), Double.NaN, false, arrayBlockOf(BIGINT), mapBlockOf(VARCHAR, BOOLEAN, "k3", false), arrayBlockOf(arrayType, arrayBlockOf(BIGINT)))[ FD ]
Line_4 $$ ArrayType arrayType = new ArrayType(BIGINT)-->Line_7 $$ List<Type> columnTypes = ImmutableList.of(BIGINT, VARCHAR, VARBINARY, DOUBLE, BOOLEAN, arrayType, mapType, arrayOfArrayType)[ FD ]
Line_17 $$ OrcRecordReader reader = createReader(dataSource, columnIds, columnTypes)-->Line_67 $$ assertEquals(reader.nextBatch(), -1)[ FD ]
Line_5 $$ ArrayType arrayOfArrayType = new ArrayType(arrayType)-->Line_66 $$ assertTrue(arrayBlocksEqual(arrayType, arrayOfArrayType.getObject(column7, 2), arrayBlockOf(arrayType, arrayBlockOf(BIGINT))))[ FD ]
