Line_7 $$ File libDir = new File(file, "lib")-->Line_8 $$ if (!libDir.isDirectory()) [ FD ]
Line_56 $$ for (URL url : getClassLoaderUrls()) -->Line_57 $$ if ("file".equals(url.getProtocol())) [ FD ]
Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() -->Line_58 $$ optionalDescriptor = loadDescriptor(new File(decodeUrl(url.getFile())), optionalDescriptorName)[ FD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_36 $$ IdeaPluginDescriptorImpl descriptor1 = loadDescriptorFromDir(f, fileName)[ FD ]
Line_38 $$ if (descriptor != null) -->Line_40 $$ return null[ CD ]
Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() -->Line_54 $$ IdeaPluginDescriptorImpl optionalDescriptor = loadDescriptor(file, optionalDescriptorName)[ FD ]
Line_7 $$ File libDir = new File(file, "lib")-->Line_11 $$ final File[] files = libDir.listFiles()[ FD ]
Line_3 $$ IdeaPluginDescriptorImpl descriptor = null-->Line_6 $$ if (descriptor == null) [ FD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_23 $$ if (o1.getName().startsWith("resources"))[ CD ]
Line_23 $$ if (o1.getName().startsWith("resources"))-->Line_24 $$ return Integer.MAX_VALUE[ CD ]
Line_3 $$ IdeaPluginDescriptorImpl descriptor = null-->Line_32 $$ descriptor.setPath(file)[ FD ]
Line_6 $$ if (descriptor == null) -->Line_15 $$ Arrays.sort(files, new Comparator<File>() [ CD ]
Line_54 $$ IdeaPluginDescriptorImpl optionalDescriptor = loadDescriptor(file, optionalDescriptorName)-->Line_58 $$ optionalDescriptor = loadDescriptor(new File(decodeUrl(url.getFile())), optionalDescriptorName)[ FD ]
Line_3 $$ IdeaPluginDescriptorImpl descriptor = null-->Line_51 $$ if (descriptor != null) [ FD ]
Line_3 $$ IdeaPluginDescriptorImpl descriptor = null-->Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)[ FD ]
Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)-->Line_6 $$ if (descriptor == null) [ FD ]
Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() -->Line_55 $$ if (optionalDescriptor == null && !FileUtil.isJarOrZip(file)) [ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_3 $$ IdeaPluginDescriptorImpl descriptor = null[ CD ]
Line_57 $$ if ("file".equals(url.getProtocol())) -->Line_59 $$ if (optionalDescriptor != null) [ CD ]
Line_56 $$ for (URL url : getClassLoaderUrls()) -->Line_58 $$ optionalDescriptor = loadDescriptor(new File(decodeUrl(url.getFile())), optionalDescriptorName)[ FD ]
Line_6 $$ if (descriptor == null) -->Line_8 $$ if (!libDir.isDirectory()) [ CD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_19 $$ if (o1.getName().startsWith(file.getName()))[ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)[ FD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_17 $$ if (o2.getName().startsWith(file.getName()))[ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_4 $$ if (file.isDirectory()) [ CD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_17 $$ if (o2.getName().startsWith(file.getName()))[ FD ]
Line_51 $$ if (descriptor != null) -->Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() [ CD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_23 $$ if (o1.getName().startsWith("resources"))[ FD ]
Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() -->Line_65 $$ return optionalDescriptor[ CD ]
Line_29 $$ if (FileUtil.isJarOrZip(f)) -->Line_31 $$ if (descriptor != null) [ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_51 $$ if (descriptor != null) [ CD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_21 $$ if (o2.getName().startsWith("resources"))[ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_43 $$ descriptor.setPath(file)[ FD ]
Line_3 $$ IdeaPluginDescriptorImpl descriptor = null-->Line_38 $$ if (descriptor != null) [ FD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_19 $$ if (o1.getName().startsWith(file.getName()))[ FD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_30 $$ descriptor = loadDescriptorFromJar(f, fileName)[ FD ]
Line_35 $$ if (f.isDirectory()) -->Line_36 $$ IdeaPluginDescriptorImpl descriptor1 = loadDescriptorFromDir(f, fileName)[ CD ]
Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)-->Line_51 $$ if (descriptor != null) [ FD ]
Line_11 $$ final File[] files = libDir.listFiles()-->Line_15 $$ Arrays.sort(files, new Comparator<File>() [ FD ]
Line_3 $$ IdeaPluginDescriptorImpl descriptor = null-->Line_31 $$ if (descriptor != null) [ FD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_55 $$ if (optionalDescriptor == null && !FileUtil.isJarOrZip(file)) [ FD ]
Line_4 $$ if (file.isDirectory()) -->Line_48 $$ if (StringUtil.endsWithIgnoreCase(file.getName(), ".jar") && file.exists()) [ CD ]
Line_37 $$ if (descriptor1 != null) -->Line_43 $$ descriptor.setPath(file)[ CD ]
Line_37 $$ if (descriptor1 != null) -->Line_38 $$ if (descriptor != null) [ CD ]
Line_6 $$ if (descriptor == null) -->Line_12 $$ if (files == null || files.length == 0) [ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() [ FD ]
Line_8 $$ if (!libDir.isDirectory()) -->Line_9 $$ return null[ CD ]
Line_29 $$ if (FileUtil.isJarOrZip(f)) -->Line_30 $$ descriptor = loadDescriptorFromJar(f, fileName)[ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_54 $$ IdeaPluginDescriptorImpl optionalDescriptor = loadDescriptor(file, optionalDescriptorName)[ FD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_21 $$ if (o2.getName().startsWith("resources"))[ FD ]
Line_4 $$ if (file.isDirectory()) -->Line_6 $$ if (descriptor == null) [ CD ]
Line_3 $$ IdeaPluginDescriptorImpl descriptor = null-->Line_43 $$ descriptor.setPath(file)[ FD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_69 $$ return descriptor[ CD ]
Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)-->Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() [ FD ]
Line_3 $$ IdeaPluginDescriptorImpl descriptor = null-->Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() [ FD ]
Line_57 $$ if ("file".equals(url.getProtocol())) -->Line_58 $$ optionalDescriptor = loadDescriptor(new File(decodeUrl(url.getFile())), optionalDescriptorName)[ CD ]
Line_38 $$ if (descriptor != null) -->Line_39 $$ getLogger().info("Cannot load " + file + " because two or more plugin.xml's detected")[ CD ]
Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)-->Line_43 $$ descriptor.setPath(file)[ FD ]
Line_12 $$ if (files == null || files.length == 0) -->Line_13 $$ return null[ CD ]
Line_29 $$ if (FileUtil.isJarOrZip(f)) -->Line_35 $$ if (f.isDirectory()) [ CD ]
Line_52 $$ resolveOptionalDescriptors(fileName, descriptor, new Function<String, IdeaPluginDescriptorImpl>() -->Line_54 $$ IdeaPluginDescriptorImpl optionalDescriptor = loadDescriptor(file, optionalDescriptorName)[ CD ]
Line_21 $$ if (o2.getName().startsWith("resources"))-->Line_22 $$ return -Integer.MAX_VALUE[ CD ]
Line_35 $$ if (f.isDirectory()) -->Line_37 $$ if (descriptor1 != null) [ CD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_19 $$ if (o1.getName().startsWith(file.getName()))[ FD ]
Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)-->Line_32 $$ descriptor.setPath(file)[ FD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_17 $$ if (o2.getName().startsWith(file.getName()))[ FD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_32 $$ descriptor.setPath(file)[ FD ]
Line_6 $$ if (descriptor == null) -->Line_7 $$ File libDir = new File(file, "lib")[ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_49 $$ descriptor = loadDescriptorFromJar(file, fileName)[ FD ]
Line_58 $$ optionalDescriptor = loadDescriptor(new File(decodeUrl(url.getFile())), optionalDescriptorName)-->Line_59 $$ if (optionalDescriptor != null) [ FD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_4 $$ if (file.isDirectory()) [ FD ]
Line_6 $$ if (descriptor == null) -->Line_11 $$ final File[] files = libDir.listFiles()[ CD ]
Line_4 $$ if (file.isDirectory()) -->Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)[ CD ]
Line_31 $$ if (descriptor != null) -->Line_32 $$ descriptor.setPath(file)[ CD ]
Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)-->Line_31 $$ if (descriptor != null) [ FD ]
Line_5 $$ descriptor = loadDescriptorFromDir(file, fileName)-->Line_38 $$ if (descriptor != null) [ FD ]
Line_48 $$ if (StringUtil.endsWithIgnoreCase(file.getName(), ".jar") && file.exists()) -->Line_49 $$ descriptor = loadDescriptorFromJar(file, fileName)[ CD ]
Line_17 $$ if (o2.getName().startsWith(file.getName()))-->Line_18 $$ return Integer.MAX_VALUE[ CD ]
Line_54 $$ IdeaPluginDescriptorImpl optionalDescriptor = loadDescriptor(file, optionalDescriptorName)-->Line_59 $$ if (optionalDescriptor != null) [ FD ]
Line_15 $$ Arrays.sort(files, new Comparator<File>() -->Line_25 $$ return 0[ CD ]
Line_19 $$ if (o1.getName().startsWith(file.getName()))-->Line_20 $$ return -Integer.MAX_VALUE[ CD ]
Line_2 $$ public static IdeaPluginDescriptorImpl loadDescriptor(@NotNull final File file, @NotNull String fileName) -->Line_48 $$ if (StringUtil.endsWithIgnoreCase(file.getName(), ".jar") && file.exists()) [ FD ]
