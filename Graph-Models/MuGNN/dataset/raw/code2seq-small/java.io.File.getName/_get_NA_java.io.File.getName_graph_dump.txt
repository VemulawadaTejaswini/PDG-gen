Line_5 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_9 $$ args.put("ignoreerrors", ignoreErrors)[ CD ]
Line_5 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_11 $$ antBuilder.invokeMethod("get", args)[ CD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_4 $$ project.delete(destinationFile, tmpFile)[ FD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_4 $$ project.delete(destinationFile, tmpFile)[ CD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_15 $$ if (!tmpFile.renameTo(destinationFile)) [ FD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_3 $$ final File tmpFile = new File(destinationFile.getParentFile(), destinationFile.getName() + ".tmp")[ FD ]
Line_7 $$ Map<String, Object> args = new HashMap()-->Line_10 $$ args.put("src", url)[ FD ]
Line_5 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_14 $$ project.ant(closure)[ FD ]
Line_3 $$ final File tmpFile = new File(destinationFile.getParentFile(), destinationFile.getName() + ".tmp")-->Line_4 $$ project.delete(destinationFile, tmpFile)[ FD ]
Line_7 $$ Map<String, Object> args = new HashMap()-->Line_9 $$ args.put("ignoreerrors", ignoreErrors)[ FD ]
Line_5 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_11 $$ antBuilder.invokeMethod("get", args)[ FD ]
Line_5 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_7 $$ Map<String, Object> args = new HashMap()[ CD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_10 $$ args.put("src", url)[ FD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_14 $$ project.ant(closure)[ CD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_14 $$ project.ant(closure)[ FD ]
Line_5 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_8 $$ args.put("dest", tmpFile)[ CD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_5 $$ Closure<Void> closure = new Closure<Void>(null) [ CD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_3 $$ final File tmpFile = new File(destinationFile.getParentFile(), destinationFile.getName() + ".tmp")[ CD ]
Line_7 $$ Map<String, Object> args = new HashMap()-->Line_8 $$ args.put("dest", tmpFile)[ FD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_15 $$ if (!tmpFile.renameTo(destinationFile)) [ CD ]
Line_3 $$ final File tmpFile = new File(destinationFile.getParentFile(), destinationFile.getName() + ".tmp")-->Line_15 $$ if (!tmpFile.renameTo(destinationFile)) [ FD ]
Line_7 $$ Map<String, Object> args = new HashMap()-->Line_11 $$ antBuilder.invokeMethod("get", args)[ FD ]
Line_3 $$ final File tmpFile = new File(destinationFile.getParentFile(), destinationFile.getName() + ".tmp")-->Line_8 $$ args.put("dest", tmpFile)[ FD ]
Line_5 $$ Closure<Void> closure = new Closure<Void>(null) -->Line_10 $$ args.put("src", url)[ CD ]
Line_2 $$ private static void _get(Project project, final String url, File destinationFile, final boolean ignoreErrors) -->Line_9 $$ args.put("ignoreerrors", ignoreErrors)[ FD ]
