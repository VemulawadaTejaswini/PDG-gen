Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_48 $$ return changeList[ CD ]
Line_8 $$ final List<Change> textChanges = new ArrayList<Change>()-->Line_17 $$ textChanges.add(change)[ FD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_20 $$ final ShelvedChangeList changeList[ CD ]
Line_10 $$ for (Change change : changes) -->Line_17 $$ textChanges.add(change)[ FD ]
Line_3 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_41 $$ progressIndicator.startNonCancelableSection()[ FD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_4 $$ if (progressIndicator != null) [ CD ]
Line_20 $$ final ShelvedChangeList changeList-->Line_36 $$ mySchemeManager.addNewScheme(changeList, false)[ FD ]
Line_4 $$ if (progressIndicator != null) -->Line_5 $$ progressIndicator.setText(VcsBundle.message("shelve.changes.progress.title"))[ CD ]
Line_24 $$ final List<FilePatch> patches = IdeaTextPatchBuilder.buildPatch(myProject, textChanges, myProject.getBaseDir().getPresentableUrl(), false)-->Line_30 $$ UnifiedDiffWriter.write(myProject, patches, writer, "\n", commitContext)[ FD ]
Line_7 $$ File schemePatchDir = generateUniqueSchemePatchDir(commitMessage, true)-->Line_15 $$ binaryFiles.add(shelveBinaryFile(schemePatchDir, change))[ FD ]
Line_3 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_5 $$ progressIndicator.setText(VcsBundle.message("shelve.changes.progress.title"))[ FD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_9 $$ final List<ShelvedBinaryFile> binaryFiles = new ArrayList<ShelvedBinaryFile>()[ CD ]
Line_8 $$ final List<Change> textChanges = new ArrayList<Change>()-->Line_24 $$ final List<FilePatch> patches = IdeaTextPatchBuilder.buildPatch(myProject, textChanges, myProject.getBaseDir().getPresentableUrl(), false)[ FD ]
Line_10 $$ for (Change change : changes) -->Line_15 $$ binaryFiles.add(shelveBinaryFile(schemePatchDir, change))[ FD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_3 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_7 $$ File schemePatchDir = generateUniqueSchemePatchDir(commitMessage, true)[ CD ]
Line_26 $$ CommitContext commitContext = new CommitContext()-->Line_27 $$ baseRevisionsOfDvcsIntoContext(textChanges, commitContext)[ FD ]
Line_40 $$ if (progressIndicator != null) -->Line_41 $$ progressIndicator.startNonCancelableSection()[ CD ]
Line_22 $$ File patchPath = getPatchFileInConfigDir(schemePatchDir)-->Line_28 $$ myFileProcessor.savePathFile(new CompoundShelfFileProcessor.ContentProvider() [ FD ]
Line_20 $$ final ShelvedChangeList changeList-->Line_34 $$ changeList.setName(schemePatchDir.getName())[ FD ]
Line_9 $$ final List<ShelvedBinaryFile> binaryFiles = new ArrayList<ShelvedBinaryFile>()-->Line_15 $$ binaryFiles.add(shelveBinaryFile(schemePatchDir, change))[ FD ]
Line_14 $$ if (change.getBeforeRevision() instanceof BinaryContentRevision || change.getAfterRevision() instanceof BinaryContentRevision) -->Line_17 $$ textChanges.add(change)[ CD ]
Line_3 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_40 $$ if (progressIndicator != null) [ FD ]
Line_8 $$ final List<Change> textChanges = new ArrayList<Change>()-->Line_27 $$ baseRevisionsOfDvcsIntoContext(textChanges, commitContext)[ FD ]
Line_37 $$ if (rollback) -->Line_43 $$ new RollbackWorker(myProject, operationName, modalContext).doRollback(changes, true, null, VcsBundle.message("shelve.changes.action"))[ CD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_43 $$ new RollbackWorker(myProject, operationName, modalContext).doRollback(changes, true, null, VcsBundle.message("shelve.changes.action"))[ FD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_7 $$ File schemePatchDir = generateUniqueSchemePatchDir(commitMessage, true)[ FD ]
Line_37 $$ if (rollback) -->Line_38 $$ final String operationName = UIUtil.removeMnemonic(RollbackChangesDialog.operationNameByChanges(myProject, changes))[ CD ]
Line_28 $$ myFileProcessor.savePathFile(new CompoundShelfFileProcessor.ContentProvider() -->Line_30 $$ UnifiedDiffWriter.write(myProject, patches, writer, "\n", commitContext)[ FD ]
Line_7 $$ File schemePatchDir = generateUniqueSchemePatchDir(commitMessage, true)-->Line_22 $$ File patchPath = getPatchFileInConfigDir(schemePatchDir)[ FD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_38 $$ final String operationName = UIUtil.removeMnemonic(RollbackChangesDialog.operationNameByChanges(myProject, changes))[ FD ]
Line_26 $$ CommitContext commitContext = new CommitContext()-->Line_30 $$ UnifiedDiffWriter.write(myProject, patches, writer, "\n", commitContext)[ FD ]
Line_37 $$ if (rollback) -->Line_40 $$ if (progressIndicator != null) [ CD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_8 $$ final List<Change> textChanges = new ArrayList<Change>()[ CD ]
Line_3 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_4 $$ if (progressIndicator != null) [ FD ]
Line_7 $$ File schemePatchDir = generateUniqueSchemePatchDir(commitMessage, true)-->Line_34 $$ changeList.setName(schemePatchDir.getName())[ FD ]
Line_10 $$ for (Change change : changes) -->Line_14 $$ if (change.getBeforeRevision() instanceof BinaryContentRevision || change.getAfterRevision() instanceof BinaryContentRevision) [ FD ]
Line_26 $$ CommitContext commitContext = new CommitContext()-->Line_28 $$ myFileProcessor.savePathFile(new CompoundShelfFileProcessor.ContentProvider() [ FD ]
Line_10 $$ for (Change change : changes) -->Line_11 $$ if (ChangesUtil.getFilePath(change).isDirectory()) [ FD ]
Line_22 $$ File patchPath = getPatchFileInConfigDir(schemePatchDir)-->Line_33 $$ changeList = new ShelvedChangeList(patchPath.toString(), commitMessage.replace('\n', ' '), binaryFiles)[ FD ]
Line_28 $$ myFileProcessor.savePathFile(new CompoundShelfFileProcessor.ContentProvider() -->Line_30 $$ UnifiedDiffWriter.write(myProject, patches, writer, "\n", commitContext)[ CD ]
Line_14 $$ if (change.getBeforeRevision() instanceof BinaryContentRevision || change.getAfterRevision() instanceof BinaryContentRevision) -->Line_15 $$ binaryFiles.add(shelveBinaryFile(schemePatchDir, change))[ CD ]
Line_2 $$ public ShelvedChangeList shelveChanges(final Collection<Change> changes, final String commitMessage, final boolean rollback) throws IOException, VcsException -->Line_33 $$ changeList = new ShelvedChangeList(patchPath.toString(), commitMessage.replace('\n', ' '), binaryFiles)[ FD ]
