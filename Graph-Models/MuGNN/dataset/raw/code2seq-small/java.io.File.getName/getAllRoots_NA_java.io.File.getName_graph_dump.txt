Line_2 $$ private Pair<Set<String>, Set<String>> getAllRoots(boolean includeSourceRoots) -->Line_5 $$ final Set<String> recursive = new HashSet<String>()[ CD ]
Line_15 $$ for (WatchedRootsProvider extension : Extensions.getExtensions(WatchedRootsProvider.EP_NAME, myProject)) -->Line_16 $$ recursive.addAll(extension.getRootsToWatch())[ FD ]
Line_23 $$ if (includeSourceRoots) -->Line_24 $$ addRootsToTrack(moduleRootManager.getSourceRootUrls(), recursive, flat)[ CD ]
Line_6 $$ final Set<String> flat = new HashSet<String>()-->Line_36 $$ return Pair.create(recursive, flat)[ FD ]
Line_9 $$ if (projectDirFile != null && projectDirFile.getName().equals(Project.DIRECTORY_STORE_FOLDER)) -->Line_12 $$ flat.add(projectFilePath)[ CD ]
Line_6 $$ final Set<String> flat = new HashSet<String>()-->Line_22 $$ addRootsToTrack(moduleRootManager.getContentRootUrls(), recursive, flat)[ FD ]
Line_6 $$ final Set<String> flat = new HashSet<String>()-->Line_20 $$ flat.add(module.getModuleFilePath())[ FD ]
Line_5 $$ final Set<String> recursive = new HashSet<String>()-->Line_36 $$ return Pair.create(recursive, flat)[ FD ]
Line_3 $$ if (myProject.isDefault())-->Line_4 $$ return null[ CD ]
Line_21 $$ final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module)-->Line_24 $$ addRootsToTrack(moduleRootManager.getSourceRootUrls(), recursive, flat)[ FD ]
Line_2 $$ private Pair<Set<String>, Set<String>> getAllRoots(boolean includeSourceRoots) -->Line_6 $$ final Set<String> flat = new HashSet<String>()[ CD ]
Line_2 $$ private Pair<Set<String>, Set<String>> getAllRoots(boolean includeSourceRoots) -->Line_7 $$ final String projectFilePath = myProject.getProjectFilePath()[ CD ]
Line_6 $$ final Set<String> flat = new HashSet<String>()-->Line_13 $$ ContainerUtil.addIfNotNull(flat, ((IProjectStore) ServiceKt.getStateStore(myProject)).getWorkspaceFilePath())[ FD ]
Line_6 $$ final Set<String> flat = new HashSet<String>()-->Line_31 $$ addRootsToTrack(libSdkEntry.getRootUrls(orderRootType), recursive, flat)[ FD ]
Line_7 $$ final String projectFilePath = myProject.getProjectFilePath()-->Line_12 $$ flat.add(projectFilePath)[ FD ]
Line_21 $$ final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module)-->Line_22 $$ addRootsToTrack(moduleRootManager.getContentRootUrls(), recursive, flat)[ FD ]
Line_28 $$ if (entry instanceof LibraryOrSdkOrderEntry) -->Line_29 $$ final LibraryOrSdkOrderEntry libSdkEntry = (LibraryOrSdkOrderEntry) entry[ CD ]
Line_5 $$ final Set<String> recursive = new HashSet<String>()-->Line_22 $$ addRootsToTrack(moduleRootManager.getContentRootUrls(), recursive, flat)[ FD ]
Line_30 $$ for (OrderRootType orderRootType : OrderRootType.getAllTypes()) -->Line_31 $$ addRootsToTrack(libSdkEntry.getRootUrls(orderRootType), recursive, flat)[ FD ]
Line_9 $$ if (projectDirFile != null && projectDirFile.getName().equals(Project.DIRECTORY_STORE_FOLDER)) -->Line_13 $$ ContainerUtil.addIfNotNull(flat, ((IProjectStore) ServiceKt.getStateStore(myProject)).getWorkspaceFilePath())[ CD ]
Line_8 $$ final File projectDirFile = projectFilePath == null ? null : new File(projectFilePath).getParentFile()-->Line_10 $$ recursive.add(projectDirFile.getAbsolutePath())[ FD ]
Line_27 $$ for (OrderEntry entry : orderEntries) -->Line_28 $$ if (entry instanceof LibraryOrSdkOrderEntry) [ FD ]
Line_5 $$ final Set<String> recursive = new HashSet<String>()-->Line_24 $$ addRootsToTrack(moduleRootManager.getSourceRootUrls(), recursive, flat)[ FD ]
Line_2 $$ private Pair<Set<String>, Set<String>> getAllRoots(boolean includeSourceRoots) -->Line_9 $$ if (projectDirFile != null && projectDirFile.getName().equals(Project.DIRECTORY_STORE_FOLDER)) [ CD ]
Line_6 $$ final Set<String> flat = new HashSet<String>()-->Line_12 $$ flat.add(projectFilePath)[ FD ]
Line_2 $$ private Pair<Set<String>, Set<String>> getAllRoots(boolean includeSourceRoots) -->Line_18 $$ final Module[] modules = ModuleManager.getInstance(myProject).getModules()[ CD ]
Line_19 $$ for (Module module : modules) -->Line_20 $$ flat.add(module.getModuleFilePath())[ FD ]
Line_5 $$ final Set<String> recursive = new HashSet<String>()-->Line_31 $$ addRootsToTrack(libSdkEntry.getRootUrls(orderRootType), recursive, flat)[ FD ]
Line_2 $$ private Pair<Set<String>, Set<String>> getAllRoots(boolean includeSourceRoots) -->Line_36 $$ return Pair.create(recursive, flat)[ CD ]
Line_2 $$ private Pair<Set<String>, Set<String>> getAllRoots(boolean includeSourceRoots) -->Line_3 $$ if (myProject.isDefault())[ CD ]
Line_8 $$ final File projectDirFile = projectFilePath == null ? null : new File(projectFilePath).getParentFile()-->Line_9 $$ if (projectDirFile != null && projectDirFile.getName().equals(Project.DIRECTORY_STORE_FOLDER)) [ FD ]
Line_5 $$ final Set<String> recursive = new HashSet<String>()-->Line_16 $$ recursive.addAll(extension.getRootsToWatch())[ FD ]
Line_19 $$ for (Module module : modules) -->Line_21 $$ final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module)[ FD ]
Line_2 $$ private Pair<Set<String>, Set<String>> getAllRoots(boolean includeSourceRoots) -->Line_8 $$ final File projectDirFile = projectFilePath == null ? null : new File(projectFilePath).getParentFile()[ CD ]
Line_6 $$ final Set<String> flat = new HashSet<String>()-->Line_24 $$ addRootsToTrack(moduleRootManager.getSourceRootUrls(), recursive, flat)[ FD ]
Line_21 $$ final ModuleRootManager moduleRootManager = ModuleRootManager.getInstance(module)-->Line_26 $$ final OrderEntry[] orderEntries = moduleRootManager.getOrderEntries()[ FD ]
Line_29 $$ final LibraryOrSdkOrderEntry libSdkEntry = (LibraryOrSdkOrderEntry) entry-->Line_31 $$ addRootsToTrack(libSdkEntry.getRootUrls(orderRootType), recursive, flat)[ FD ]
Line_9 $$ if (projectDirFile != null && projectDirFile.getName().equals(Project.DIRECTORY_STORE_FOLDER)) -->Line_10 $$ recursive.add(projectDirFile.getAbsolutePath())[ CD ]
Line_5 $$ final Set<String> recursive = new HashSet<String>()-->Line_10 $$ recursive.add(projectDirFile.getAbsolutePath())[ FD ]
