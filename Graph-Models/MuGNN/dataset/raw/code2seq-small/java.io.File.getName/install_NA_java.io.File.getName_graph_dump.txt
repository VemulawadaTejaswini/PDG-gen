Line_16 $$ if (deleteFromFile) -->Line_17 $$ StartupActionScriptManager.ActionCommand deleteTemp = new StartupActionScriptManager.DeleteCommand(fromFile)[ CD ]
Line_2 $$ public static void install(final File fromFile, final String pluginName, boolean deleteFromFile) throws IOException -->Line_3 $$ if (fromFile.getName().endsWith(".jar")) [ CD ]
Line_2 $$ public static void install(final File fromFile, final String pluginName, boolean deleteFromFile) throws IOException -->Line_4 $$ StartupActionScriptManager.ActionCommand copyPlugin = new StartupActionScriptManager.CopyCommand(fromFile, new File(PathManager.getPluginsPath() + File.separator + fromFile.getName()))[ FD ]
Line_7 $$ String unzipPath-->Line_9 $$ unzipPath = PathManager.getPluginsPath()[ FD ]
Line_7 $$ String unzipPath-->Line_11 $$ unzipPath = PathManager.getPluginsPath() + File.separator + pluginName[ FD ]
Line_4 $$ StartupActionScriptManager.ActionCommand copyPlugin = new StartupActionScriptManager.CopyCommand(fromFile, new File(PathManager.getPluginsPath() + File.separator + fromFile.getName()))-->Line_5 $$ StartupActionScriptManager.addActionCommand(copyPlugin)[ FD ]
Line_3 $$ if (fromFile.getName().endsWith(".jar")) -->Line_4 $$ StartupActionScriptManager.ActionCommand copyPlugin = new StartupActionScriptManager.CopyCommand(fromFile, new File(PathManager.getPluginsPath() + File.separator + fromFile.getName()))[ CD ]
Line_2 $$ public static void install(final File fromFile, final String pluginName, boolean deleteFromFile) throws IOException -->Line_11 $$ unzipPath = PathManager.getPluginsPath() + File.separator + pluginName[ FD ]
Line_2 $$ public static void install(final File fromFile, final String pluginName, boolean deleteFromFile) throws IOException -->Line_8 $$ if (ZipUtil.isZipContainsFolder(fromFile)) [ FD ]
Line_16 $$ if (deleteFromFile) -->Line_18 $$ StartupActionScriptManager.addActionCommand(deleteTemp)[ CD ]
Line_2 $$ public static void install(final File fromFile, final String pluginName, boolean deleteFromFile) throws IOException -->Line_16 $$ if (deleteFromFile) [ CD ]
Line_8 $$ if (ZipUtil.isZipContainsFolder(fromFile)) -->Line_9 $$ unzipPath = PathManager.getPluginsPath()[ CD ]
Line_3 $$ if (fromFile.getName().endsWith(".jar")) -->Line_14 $$ StartupActionScriptManager.addActionCommand(unzip)[ CD ]
Line_3 $$ if (fromFile.getName().endsWith(".jar")) -->Line_8 $$ if (ZipUtil.isZipContainsFolder(fromFile)) [ CD ]
Line_9 $$ unzipPath = PathManager.getPluginsPath()-->Line_11 $$ unzipPath = PathManager.getPluginsPath() + File.separator + pluginName[ FD ]
Line_13 $$ StartupActionScriptManager.ActionCommand unzip = new StartupActionScriptManager.UnzipCommand(fromFile, new File(unzipPath))-->Line_14 $$ StartupActionScriptManager.addActionCommand(unzip)[ FD ]
Line_17 $$ StartupActionScriptManager.ActionCommand deleteTemp = new StartupActionScriptManager.DeleteCommand(fromFile)-->Line_18 $$ StartupActionScriptManager.addActionCommand(deleteTemp)[ FD ]
Line_2 $$ public static void install(final File fromFile, final String pluginName, boolean deleteFromFile) throws IOException -->Line_3 $$ if (fromFile.getName().endsWith(".jar")) [ FD ]
Line_3 $$ if (fromFile.getName().endsWith(".jar")) -->Line_5 $$ StartupActionScriptManager.addActionCommand(copyPlugin)[ CD ]
Line_3 $$ if (fromFile.getName().endsWith(".jar")) -->Line_7 $$ String unzipPath[ CD ]
Line_3 $$ if (fromFile.getName().endsWith(".jar")) -->Line_13 $$ StartupActionScriptManager.ActionCommand unzip = new StartupActionScriptManager.UnzipCommand(fromFile, new File(unzipPath))[ CD ]
Line_8 $$ if (ZipUtil.isZipContainsFolder(fromFile)) -->Line_11 $$ unzipPath = PathManager.getPluginsPath() + File.separator + pluginName[ CD ]
