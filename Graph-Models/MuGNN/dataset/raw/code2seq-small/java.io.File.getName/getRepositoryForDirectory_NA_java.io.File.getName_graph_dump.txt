Line_7 $$ while (true) -->Line_8 $$ if (dirFile == null || dirFile.getName().length() == 0 || !dirFile.exists()) [ CD ]
Line_4 $$ File repositoryFile-->Line_12 $$ if (repositoryFile.exists()) [ FD ]
Line_20 $$ fileRepository = ""-->Line_22 $$ fileRepository += repositoryDirs[ FD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_27 $$ return FileUtils.ensureTrailingSlash(repository) + fileRepository[ FD ]
Line_16 $$ dirFile = dirFile.getParentFile()-->Line_8 $$ if (dirFile == null || dirFile.getName().length() == 0 || !dirFile.exists()) [ FD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_18 $$ String fileRepository = FileUtils.readLineFromFile(repositoryFile)[ CD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_23 $$ fileRepository = fileRepository.replace(File.separatorChar, '/')[ CD ]
Line_20 $$ fileRepository = ""-->Line_23 $$ fileRepository = fileRepository.replace(File.separatorChar, '/')[ FD ]
Line_24 $$ if (fileRepository.startsWith(repository)) -->Line_27 $$ return FileUtils.ensureTrailingSlash(repository) + fileRepository[ CD ]
Line_15 $$ repositoryDirs = '/' + dirFile.getName() + repositoryDirs-->Line_22 $$ fileRepository += repositoryDirs[ FD ]
Line_23 $$ fileRepository = fileRepository.replace(File.separatorChar, '/')-->Line_24 $$ if (fileRepository.startsWith(repository)) [ FD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_3 $$ final File directory = cvsFileSystem.getAdminFileSystem().getFile(directoryObject)[ CD ]
Line_11 $$ repositoryFile = new File(dirFile, CVS_REPOSITORY_FILE_PATH)-->Line_12 $$ if (repositoryFile.exists()) [ FD ]
Line_5 $$ String repositoryDirs = ""-->Line_15 $$ repositoryDirs = '/' + dirFile.getName() + repositoryDirs[ FD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_22 $$ fileRepository += repositoryDirs[ CD ]
Line_24 $$ if (fileRepository.startsWith(repository)) -->Line_25 $$ return fileRepository[ CD ]
Line_18 $$ String fileRepository = FileUtils.readLineFromFile(repositoryFile)-->Line_20 $$ fileRepository = ""[ FD ]
Line_22 $$ fileRepository += repositoryDirs-->Line_24 $$ if (fileRepository.startsWith(repository)) [ FD ]
Line_6 $$ File dirFile = directory-->Line_15 $$ repositoryDirs = '/' + dirFile.getName() + repositoryDirs[ FD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_19 $$ if (fileRepository == null) [ CD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_24 $$ if (fileRepository.startsWith(repository)) [ CD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_7 $$ while (true) [ CD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_6 $$ File dirFile = directory[ CD ]
Line_18 $$ String fileRepository = FileUtils.readLineFromFile(repositoryFile)-->Line_19 $$ if (fileRepository == null) [ FD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_3 $$ final File directory = cvsFileSystem.getAdminFileSystem().getFile(directoryObject)[ FD ]
Line_20 $$ fileRepository = ""-->Line_24 $$ if (fileRepository.startsWith(repository)) [ FD ]
Line_7 $$ while (true) -->Line_16 $$ dirFile = dirFile.getParentFile()[ CD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_4 $$ File repositoryFile[ CD ]
Line_4 $$ File repositoryFile-->Line_18 $$ String fileRepository = FileUtils.readLineFromFile(repositoryFile)[ FD ]
Line_18 $$ String fileRepository = FileUtils.readLineFromFile(repositoryFile)-->Line_23 $$ fileRepository = fileRepository.replace(File.separatorChar, '/')[ FD ]
Line_16 $$ dirFile = dirFile.getParentFile()-->Line_15 $$ repositoryDirs = '/' + dirFile.getName() + repositoryDirs[ FD ]
Line_19 $$ if (fileRepository == null) -->Line_20 $$ fileRepository = ""[ CD ]
Line_6 $$ File dirFile = directory-->Line_16 $$ dirFile = dirFile.getParentFile()[ FD ]
Line_4 $$ File repositoryFile-->Line_11 $$ repositoryFile = new File(dirFile, CVS_REPOSITORY_FILE_PATH)[ FD ]
Line_6 $$ File dirFile = directory-->Line_8 $$ if (dirFile == null || dirFile.getName().length() == 0 || !dirFile.exists()) [ FD ]
Line_18 $$ String fileRepository = FileUtils.readLineFromFile(repositoryFile)-->Line_24 $$ if (fileRepository.startsWith(repository)) [ FD ]
Line_22 $$ fileRepository += repositoryDirs-->Line_23 $$ fileRepository = fileRepository.replace(File.separatorChar, '/')[ FD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_5 $$ String repositoryDirs = ""[ CD ]
Line_11 $$ repositoryFile = new File(dirFile, CVS_REPOSITORY_FILE_PATH)-->Line_18 $$ String fileRepository = FileUtils.readLineFromFile(repositoryFile)[ FD ]
Line_5 $$ String repositoryDirs = ""-->Line_22 $$ fileRepository += repositoryDirs[ FD ]
Line_2 $$ public String getRepositoryForDirectory(DirectoryObject directoryObject, String repository, ICvsFileSystem cvsFileSystem) throws IOException -->Line_24 $$ if (fileRepository.startsWith(repository)) [ FD ]
Line_18 $$ String fileRepository = FileUtils.readLineFromFile(repositoryFile)-->Line_22 $$ fileRepository += repositoryDirs[ FD ]
Line_7 $$ while (true) -->Line_12 $$ if (repositoryFile.exists()) [ CD ]
Line_3 $$ final File directory = cvsFileSystem.getAdminFileSystem().getFile(directoryObject)-->Line_9 $$ throw new FileNotFoundException(SmartCvsSrcBundle.message("repository.file.not.found.for.directory.error.message", directory))[ FD ]
Line_7 $$ while (true) -->Line_15 $$ repositoryDirs = '/' + dirFile.getName() + repositoryDirs[ CD ]
Line_7 $$ while (true) -->Line_11 $$ repositoryFile = new File(dirFile, CVS_REPOSITORY_FILE_PATH)[ CD ]
