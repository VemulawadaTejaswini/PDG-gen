Line_8 $$ final File baseFile = plugin.getPath()-->Line_11 $$ if (baseFile.isDirectory()) [ FD ]
Line_5 $$ final PluginId pluginId = serverPlugin.getPluginDescriptor().getPluginId()-->Line_7 $$ LOG.assertTrue(plugin != null, pluginId)[ FD ]
Line_8 $$ final File baseFile = plugin.getPath()-->Line_21 $$ File baseOutputDir = baseFile.getParentFile()[ FD ]
Line_22 $$ if (baseOutputDir.getName().equals("test")) -->Line_23 $$ baseOutputDir = new File(baseOutputDir.getParentFile(), "production")[ CD ]
Line_3 $$ final List<String> classpath = ContainerUtil.newArrayList()-->Line_33 $$ classpath.add(libraryFile.getPath())[ FD ]
Line_15 $$ if (jarFile.exists()) -->Line_16 $$ classpath.add(jarFile.getPath())[ CD ]
Line_5 $$ final PluginId pluginId = serverPlugin.getPluginDescriptor().getPluginId()-->Line_6 $$ final IdeaPluginDescriptor plugin = PluginManager.getPlugin(pluginId)[ FD ]
Line_3 $$ final List<String> classpath = ContainerUtil.newArrayList()-->Line_10 $$ classpath.add(baseFile.getPath())[ FD ]
Line_13 $$ final File jarFile = new File(new File(baseFile, "lib"), relativePath)-->Line_15 $$ if (jarFile.exists()) [ FD ]
Line_30 $$ if (pluginDir != null) -->Line_38 $$ LOG.error("Cannot add " + relativePath + " from plugin '" + plugin.getName() + "' to external compiler classpath: home directory of plugin not found")[ CD ]
Line_14 $$ File classesDir = new File(baseFile, "classes")-->Line_17 $$ if (classesDir.isDirectory()) [ FD ]
Line_21 $$ File baseOutputDir = baseFile.getParentFile()-->Line_23 $$ baseOutputDir = new File(baseOutputDir.getParentFile(), "production")[ FD ]
Line_15 $$ if (jarFile.exists()) -->Line_17 $$ if (classesDir.isDirectory()) [ CD ]
Line_31 $$ File libraryFile = new File(pluginDir, "lib" + File.separator + PathUtil.getFileName(relativePath))-->Line_33 $$ classpath.add(libraryFile.getPath())[ FD ]
Line_31 $$ File libraryFile = new File(pluginDir, "lib" + File.separator + PathUtil.getFileName(relativePath))-->Line_32 $$ if (libraryFile.exists()) [ FD ]
Line_12 $$ for (String relativePath : StringUtil.split(serverPlugin.getClasspath(), ";")) -->Line_20 $$ final String moduleName = FileUtil.getNameWithoutExtension(PathUtil.getFileName(relativePath))[ FD ]
Line_8 $$ final File baseFile = plugin.getPath()-->Line_10 $$ classpath.add(baseFile.getPath())[ FD ]
Line_14 $$ File classesDir = new File(baseFile, "classes")-->Line_18 $$ classpath.add(classesDir.getPath())[ FD ]
Line_13 $$ final File jarFile = new File(new File(baseFile, "lib"), relativePath)-->Line_16 $$ classpath.add(jarFile.getPath())[ FD ]
Line_30 $$ if (pluginDir != null) -->Line_32 $$ if (libraryFile.exists()) [ CD ]
Line_9 $$ if (baseFile.isFile()) -->Line_11 $$ if (baseFile.isDirectory()) [ CD ]
Line_6 $$ final IdeaPluginDescriptor plugin = PluginManager.getPlugin(pluginId)-->Line_29 $$ File pluginDir = getPluginDir(plugin)[ FD ]
Line_26 $$ if (dir.exists()) -->Line_29 $$ File pluginDir = getPluginDir(plugin)[ CD ]
Line_32 $$ if (libraryFile.exists()) -->Line_33 $$ classpath.add(libraryFile.getPath())[ CD ]
Line_6 $$ final IdeaPluginDescriptor plugin = PluginManager.getPlugin(pluginId)-->Line_38 $$ LOG.error("Cannot add " + relativePath + " from plugin '" + plugin.getName() + "' to external compiler classpath: home directory of plugin not found")[ FD ]
Line_17 $$ if (classesDir.isDirectory()) -->Line_25 $$ final File dir = new File(baseOutputDir, moduleName)[ CD ]
Line_17 $$ if (classesDir.isDirectory()) -->Line_21 $$ File baseOutputDir = baseFile.getParentFile()[ CD ]
Line_3 $$ final List<String> classpath = ContainerUtil.newArrayList()-->Line_27 $$ classpath.add(dir.getPath())[ FD ]
Line_32 $$ if (libraryFile.exists()) -->Line_35 $$ LOG.error("Cannot add " + relativePath + " from plugin '" + plugin.getName() + "' to external compiler classpath: " + "library " + libraryFile.getAbsolutePath() + " not found")[ CD ]
Line_4 $$ for (CompileServerPlugin serverPlugin : CompileServerPlugin.EP_NAME.getExtensions()) -->Line_12 $$ for (String relativePath : StringUtil.split(serverPlugin.getClasspath(), ";")) [ FD ]
Line_9 $$ if (baseFile.isFile()) -->Line_10 $$ classpath.add(baseFile.getPath())[ CD ]
Line_26 $$ if (dir.exists()) -->Line_27 $$ classpath.add(dir.getPath())[ CD ]
Line_12 $$ for (String relativePath : StringUtil.split(serverPlugin.getClasspath(), ";")) -->Line_31 $$ File libraryFile = new File(pluginDir, "lib" + File.separator + PathUtil.getFileName(relativePath))[ FD ]
Line_17 $$ if (classesDir.isDirectory()) -->Line_22 $$ if (baseOutputDir.getName().equals("test")) [ CD ]
Line_6 $$ final IdeaPluginDescriptor plugin = PluginManager.getPlugin(pluginId)-->Line_35 $$ LOG.error("Cannot add " + relativePath + " from plugin '" + plugin.getName() + "' to external compiler classpath: " + "library " + libraryFile.getAbsolutePath() + " not found")[ FD ]
Line_3 $$ final List<String> classpath = ContainerUtil.newArrayList()-->Line_18 $$ classpath.add(classesDir.getPath())[ FD ]
Line_25 $$ final File dir = new File(baseOutputDir, moduleName)-->Line_26 $$ if (dir.exists()) [ FD ]
Line_4 $$ for (CompileServerPlugin serverPlugin : CompileServerPlugin.EP_NAME.getExtensions()) -->Line_5 $$ final PluginId pluginId = serverPlugin.getPluginDescriptor().getPluginId()[ FD ]
Line_17 $$ if (classesDir.isDirectory()) -->Line_18 $$ classpath.add(classesDir.getPath())[ CD ]
Line_30 $$ if (pluginDir != null) -->Line_31 $$ File libraryFile = new File(pluginDir, "lib" + File.separator + PathUtil.getFileName(relativePath))[ CD ]
Line_26 $$ if (dir.exists()) -->Line_30 $$ if (pluginDir != null) [ CD ]
Line_17 $$ if (classesDir.isDirectory()) -->Line_20 $$ final String moduleName = FileUtil.getNameWithoutExtension(PathUtil.getFileName(relativePath))[ CD ]
Line_21 $$ File baseOutputDir = baseFile.getParentFile()-->Line_22 $$ if (baseOutputDir.getName().equals("test")) [ FD ]
Line_31 $$ File libraryFile = new File(pluginDir, "lib" + File.separator + PathUtil.getFileName(relativePath))-->Line_35 $$ LOG.error("Cannot add " + relativePath + " from plugin '" + plugin.getName() + "' to external compiler classpath: " + "library " + libraryFile.getAbsolutePath() + " not found")[ FD ]
Line_29 $$ File pluginDir = getPluginDir(plugin)-->Line_30 $$ if (pluginDir != null) [ FD ]
Line_2 $$ private static List<String> computeCompileServerPluginsClasspath() -->Line_45 $$ return classpath[ CD ]
Line_3 $$ final List<String> classpath = ContainerUtil.newArrayList()-->Line_16 $$ classpath.add(jarFile.getPath())[ FD ]
Line_2 $$ private static List<String> computeCompileServerPluginsClasspath() -->Line_3 $$ final List<String> classpath = ContainerUtil.newArrayList()[ CD ]
Line_8 $$ final File baseFile = plugin.getPath()-->Line_9 $$ if (baseFile.isFile()) [ FD ]
Line_25 $$ final File dir = new File(baseOutputDir, moduleName)-->Line_27 $$ classpath.add(dir.getPath())[ FD ]
Line_6 $$ final IdeaPluginDescriptor plugin = PluginManager.getPlugin(pluginId)-->Line_8 $$ final File baseFile = plugin.getPath()[ FD ]
Line_17 $$ if (classesDir.isDirectory()) -->Line_26 $$ if (dir.exists()) [ CD ]
