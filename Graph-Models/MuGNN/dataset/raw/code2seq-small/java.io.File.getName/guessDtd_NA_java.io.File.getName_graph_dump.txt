Line_18 $$ VirtualFile file = o1.getFile()-->Line_21 $$ if (!s.equals(file.getName())) [ FD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_11 $$ if (list.size() > 1) [ CD ]
Line_7 $$ if (list.isEmpty()) -->Line_8 $$ return null[ CD ]
Line_6 $$ List<IndexedRelevantResource<String, XsdNamespaceBuilder>> list = getResourcesByNamespace(dtdFileName, baseFile.getProject(), ModuleUtilCore.findModuleForPsiElement(baseFile))-->Line_30 $$ resource = list.get(0)[ FD ]
Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() -->Line_26 $$ return 0[ CD ]
Line_24 $$ file = file.getParent()-->Line_21 $$ if (!s.equals(file.getName())) [ FD ]
Line_19 $$ for (int i = split.length - 1; i >= 0 && file != null; i--) -->Line_21 $$ if (!s.equals(file.getName())) [ CD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_3 $$ if (!dtdUri.endsWith(".dtd") || DumbService.isDumb(baseFile.getProject()) || XmlUtil.isStubBuilding())[ CD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_6 $$ List<IndexedRelevantResource<String, XsdNamespaceBuilder>> list = getResourcesByNamespace(dtdFileName, baseFile.getProject(), ModuleUtilCore.findModuleForPsiElement(baseFile))[ FD ]
Line_21 $$ if (!s.equals(file.getName())) -->Line_22 $$ return split.length - i[ CD ]
Line_3 $$ if (!dtdUri.endsWith(".dtd") || DumbService.isDumb(baseFile.getProject()) || XmlUtil.isStubBuilding())-->Line_4 $$ return null[ CD ]
Line_11 $$ if (list.size() > 1) -->Line_12 $$ final String[] split = dtdUri.split("/")[ CD ]
Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() -->Line_32 $$ return findSchemaFile(resource.getFile(), baseFile)[ FD ]
Line_6 $$ List<IndexedRelevantResource<String, XsdNamespaceBuilder>> list = getResourcesByNamespace(dtdFileName, baseFile.getProject(), ModuleUtilCore.findModuleForPsiElement(baseFile))-->Line_11 $$ if (list.size() > 1) [ FD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_7 $$ if (list.isEmpty()) [ CD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_3 $$ if (!dtdUri.endsWith(".dtd") || DumbService.isDumb(baseFile.getProject()) || XmlUtil.isStubBuilding())[ FD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_32 $$ return findSchemaFile(resource.getFile(), baseFile)[ CD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_32 $$ return findSchemaFile(resource.getFile(), baseFile)[ FD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_6 $$ List<IndexedRelevantResource<String, XsdNamespaceBuilder>> list = getResourcesByNamespace(dtdFileName, baseFile.getProject(), ModuleUtilCore.findModuleForPsiElement(baseFile))[ CD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_12 $$ final String[] split = dtdUri.split("/")[ FD ]
Line_20 $$ String s = split[i]-->Line_21 $$ if (!s.equals(file.getName())) [ FD ]
Line_5 $$ String dtdFileName = new File(dtdUri).getName()-->Line_6 $$ List<IndexedRelevantResource<String, XsdNamespaceBuilder>> list = getResourcesByNamespace(dtdFileName, baseFile.getProject(), ModuleUtilCore.findModuleForPsiElement(baseFile))[ FD ]
Line_10 $$ IndexedRelevantResource<String, XsdNamespaceBuilder> resource-->Line_32 $$ return findSchemaFile(resource.getFile(), baseFile)[ FD ]
Line_6 $$ List<IndexedRelevantResource<String, XsdNamespaceBuilder>> list = getResourcesByNamespace(dtdFileName, baseFile.getProject(), ModuleUtilCore.findModuleForPsiElement(baseFile))-->Line_7 $$ if (list.isEmpty()) [ FD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_10 $$ IndexedRelevantResource<String, XsdNamespaceBuilder> resource[ CD ]
Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() -->Line_18 $$ VirtualFile file = o1.getFile()[ FD ]
Line_11 $$ if (list.size() > 1) -->Line_30 $$ resource = list.get(0)[ CD ]
Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() -->Line_18 $$ VirtualFile file = o1.getFile()[ CD ]
Line_18 $$ VirtualFile file = o1.getFile()-->Line_24 $$ file = file.getParent()[ FD ]
Line_6 $$ List<IndexedRelevantResource<String, XsdNamespaceBuilder>> list = getResourcesByNamespace(dtdFileName, baseFile.getProject(), ModuleUtilCore.findModuleForPsiElement(baseFile))-->Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() [ FD ]
Line_10 $$ IndexedRelevantResource<String, XsdNamespaceBuilder> resource-->Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() [ FD ]
Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() -->Line_19 $$ for (int i = split.length - 1; i >= 0 && file != null; i--) [ CD ]
Line_19 $$ for (int i = split.length - 1; i >= 0 && file != null; i--) -->Line_20 $$ String s = split[i][ CD ]
Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() -->Line_15 $$ return weight(o1) - weight(o2)[ CD ]
Line_19 $$ for (int i = split.length - 1; i >= 0 && file != null; i--) -->Line_24 $$ file = file.getParent()[ CD ]
Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() -->Line_15 $$ return weight(o1) - weight(o2)[ FD ]
Line_11 $$ if (list.size() > 1) -->Line_13 $$ resource = Collections.max(list, new Comparator<IndexedRelevantResource<String, XsdNamespaceBuilder>>() [ CD ]
Line_2 $$ public static XmlFile guessDtd(String dtdUri, @NotNull PsiFile baseFile) -->Line_5 $$ String dtdFileName = new File(dtdUri).getName()[ CD ]
