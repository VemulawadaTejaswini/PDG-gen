Line_2 $$ public <T extends JavaForkOptions & Task> void applyTo(T task) -->Line_17 $$ task.doFirst(new Action<Task>() [ FD ]
Line_17 $$ task.doFirst(new Action<Task>() -->Line_19 $$ WhipTaskExtension whipTaskExtension = GradleUtil.getExtension(task, WhipTaskExtension.class)[ FD ]
Line_2 $$ public <T extends JavaForkOptions & Task> void applyTo(T task) -->Line_5 $$ whipTaskExtension.setWhipJarFile(new Callable<File>() [ CD ]
Line_23 $$ JavaForkOptions javaForkOptions = (JavaForkOptions) task-->Line_24 $$ javaForkOptions.jvmArgs(whipTaskExtension.getAsJvmArgs())[ FD ]
Line_3 $$ WhipTaskExtension whipTaskExtension = GradleUtil.addExtension(task, TASK_EXTENSION_NAME, WhipTaskExtension.class)-->Line_20 $$ if (!whipTaskExtension.isEnabled()) [ FD ]
Line_20 $$ if (!whipTaskExtension.isEnabled()) -->Line_21 $$ return[ CD ]
Line_23 $$ JavaForkOptions javaForkOptions = (JavaForkOptions) task-->Line_25 $$ javaForkOptions.systemProperties(whipTaskExtension.getAsSystemProperties())[ FD ]
Line_17 $$ task.doFirst(new Action<Task>() -->Line_24 $$ javaForkOptions.jvmArgs(whipTaskExtension.getAsJvmArgs())[ CD ]
Line_2 $$ public <T extends JavaForkOptions & Task> void applyTo(T task) -->Line_4 $$ whipTaskExtension.setDataFile(_project.file("test-coverage/whip.dat"))[ CD ]
Line_17 $$ task.doFirst(new Action<Task>() -->Line_25 $$ javaForkOptions.systemProperties(whipTaskExtension.getAsSystemProperties())[ CD ]
Line_19 $$ WhipTaskExtension whipTaskExtension = GradleUtil.getExtension(task, WhipTaskExtension.class)-->Line_25 $$ javaForkOptions.systemProperties(whipTaskExtension.getAsSystemProperties())[ FD ]
Line_17 $$ task.doFirst(new Action<Task>() -->Line_23 $$ JavaForkOptions javaForkOptions = (JavaForkOptions) task[ CD ]
Line_2 $$ public <T extends JavaForkOptions & Task> void applyTo(T task) -->Line_3 $$ WhipTaskExtension whipTaskExtension = GradleUtil.addExtension(task, TASK_EXTENSION_NAME, WhipTaskExtension.class)[ FD ]
Line_2 $$ public <T extends JavaForkOptions & Task> void applyTo(T task) -->Line_17 $$ task.doFirst(new Action<Task>() [ CD ]
Line_19 $$ WhipTaskExtension whipTaskExtension = GradleUtil.getExtension(task, WhipTaskExtension.class)-->Line_24 $$ javaForkOptions.jvmArgs(whipTaskExtension.getAsJvmArgs())[ FD ]
Line_10 $$ if (fileName.startsWith("com.liferay.whip-")) -->Line_11 $$ return file[ CD ]
Line_2 $$ public <T extends JavaForkOptions & Task> void applyTo(T task) -->Line_3 $$ WhipTaskExtension whipTaskExtension = GradleUtil.addExtension(task, TASK_EXTENSION_NAME, WhipTaskExtension.class)[ CD ]
Line_3 $$ WhipTaskExtension whipTaskExtension = GradleUtil.addExtension(task, TASK_EXTENSION_NAME, WhipTaskExtension.class)-->Line_24 $$ javaForkOptions.jvmArgs(whipTaskExtension.getAsJvmArgs())[ FD ]
Line_17 $$ task.doFirst(new Action<Task>() -->Line_19 $$ WhipTaskExtension whipTaskExtension = GradleUtil.getExtension(task, WhipTaskExtension.class)[ CD ]
Line_3 $$ WhipTaskExtension whipTaskExtension = GradleUtil.addExtension(task, TASK_EXTENSION_NAME, WhipTaskExtension.class)-->Line_4 $$ whipTaskExtension.setDataFile(_project.file("test-coverage/whip.dat"))[ FD ]
Line_17 $$ task.doFirst(new Action<Task>() -->Line_20 $$ if (!whipTaskExtension.isEnabled()) [ CD ]
Line_5 $$ whipTaskExtension.setWhipJarFile(new Callable<File>() -->Line_14 $$ return null[ CD ]
Line_3 $$ WhipTaskExtension whipTaskExtension = GradleUtil.addExtension(task, TASK_EXTENSION_NAME, WhipTaskExtension.class)-->Line_5 $$ whipTaskExtension.setWhipJarFile(new Callable<File>() [ FD ]
Line_19 $$ WhipTaskExtension whipTaskExtension = GradleUtil.getExtension(task, WhipTaskExtension.class)-->Line_20 $$ if (!whipTaskExtension.isEnabled()) [ FD ]
Line_5 $$ whipTaskExtension.setWhipJarFile(new Callable<File>() -->Line_7 $$ Configuration configuration = GradleUtil.getConfiguration(_project, WhipPlugin.CONFIGURATION_NAME)[ CD ]
Line_2 $$ public <T extends JavaForkOptions & Task> void applyTo(T task) -->Line_19 $$ WhipTaskExtension whipTaskExtension = GradleUtil.getExtension(task, WhipTaskExtension.class)[ FD ]
Line_8 $$ for (File file : configuration.getFiles()) -->Line_9 $$ String fileName = file.getName()[ FD ]
Line_3 $$ WhipTaskExtension whipTaskExtension = GradleUtil.addExtension(task, TASK_EXTENSION_NAME, WhipTaskExtension.class)-->Line_25 $$ javaForkOptions.systemProperties(whipTaskExtension.getAsSystemProperties())[ FD ]
Line_7 $$ Configuration configuration = GradleUtil.getConfiguration(_project, WhipPlugin.CONFIGURATION_NAME)-->Line_8 $$ for (File file : configuration.getFiles()) [ FD ]
Line_9 $$ String fileName = file.getName()-->Line_10 $$ if (fileName.startsWith("com.liferay.whip-")) [ FD ]
