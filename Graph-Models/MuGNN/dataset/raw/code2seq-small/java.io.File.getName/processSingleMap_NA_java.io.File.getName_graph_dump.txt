Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_9 $$ boolean stripUnusedTiles = this.settings.stripUnusedTiles[ CD ]
Line_14 $$ String tilesetName = tileset.getName()-->Line_15 $$ if (!tilesetsToPack.containsKey(tilesetName)) [ FD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_25 $$ FileHandle tmxFile = new FileHandle(mapFile.getCanonicalPath())[ CD ]
Line_13 $$ for (TiledMapTileSet tileset : map.getTileSets()) -->Line_14 $$ String tilesetName = tileset.getName()[ FD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_4 $$ if (combineTilesets == false) [ CD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_8 $$ map = mapLoader.load(mapFile.getCanonicalPath())[ FD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_21 $$ FileHandle tmpHandle = new FileHandle(mapFile.getName())[ FD ]
Line_20 $$ if (combineTilesets == false) -->Line_21 $$ FileHandle tmpHandle = new FileHandle(mapFile.getName())[ CD ]
Line_10 $$ if (stripUnusedTiles) -->Line_11 $$ stripUnusedTiles()[ CD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_8 $$ map = mapLoader.load(mapFile.getCanonicalPath())[ CD ]
Line_3 $$ boolean combineTilesets = this.settings.combineTilesets-->Line_4 $$ if (combineTilesets == false) [ FD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_25 $$ FileHandle tmxFile = new FileHandle(mapFile.getCanonicalPath())[ FD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_26 $$ writeUpdatedTMX(map, tmxFile)[ CD ]
Line_15 $$ if (!tilesetsToPack.containsKey(tilesetName)) -->Line_16 $$ tilesetsToPack.put(tilesetName, tileset)[ CD ]
Line_13 $$ for (TiledMapTileSet tileset : map.getTileSets()) -->Line_16 $$ tilesetsToPack.put(tilesetName, tileset)[ FD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_20 $$ if (combineTilesets == false) [ CD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_3 $$ boolean combineTilesets = this.settings.combineTilesets[ CD ]
Line_3 $$ boolean combineTilesets = this.settings.combineTilesets-->Line_20 $$ if (combineTilesets == false) [ FD ]
Line_20 $$ if (combineTilesets == false) -->Line_23 $$ packTilesets(dirHandle, texturePackerSettings)[ CD ]
Line_21 $$ FileHandle tmpHandle = new FileHandle(mapFile.getName())-->Line_22 $$ this.settings.atlasOutputName = tmpHandle.nameWithoutExtension()[ FD ]
Line_20 $$ if (combineTilesets == false) -->Line_22 $$ this.settings.atlasOutputName = tmpHandle.nameWithoutExtension()[ CD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_23 $$ packTilesets(dirHandle, texturePackerSettings)[ FD ]
Line_2 $$ private void processSingleMap(File mapFile, FileHandle dirHandle, Settings texturePackerSettings) throws IOException -->Line_10 $$ if (stripUnusedTiles) [ CD ]
Line_25 $$ FileHandle tmxFile = new FileHandle(mapFile.getCanonicalPath())-->Line_26 $$ writeUpdatedTMX(map, tmxFile)[ FD ]
Line_14 $$ String tilesetName = tileset.getName()-->Line_16 $$ tilesetsToPack.put(tilesetName, tileset)[ FD ]
