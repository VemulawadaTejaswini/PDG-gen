Line_2 $$ public void testCircularLink() throws Exception -->Line_7 $$ assertTrue(upLinkVFile.is(VFileProperty.SYMLINK))[ CD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_11 $$ File repeatedLinksFile = new File(upDir.getPath() + StringUtil.repeat(File.separator + upLinkFile.getName(), 4))[ CD ]
Line_5 $$ VirtualFile upLinkVFile = refreshAndFind(upLinkFile)-->Line_18 $$ assertEquals(upLinkVFile.getCanonicalFile(), repeatedLinksVFile.getCanonicalFile())[ FD ]
Line_3 $$ File upDir = myTempDir.newFolder("sub")-->Line_11 $$ File repeatedLinksFile = new File(upDir.getPath() + StringUtil.repeat(File.separator + upLinkFile.getName(), 4))[ FD ]
Line_13 $$ VirtualFile repeatedLinksVFile = refreshAndFind(repeatedLinksFile)-->Line_18 $$ assertEquals(upLinkVFile.getCanonicalFile(), repeatedLinksVFile.getCanonicalFile())[ FD ]
Line_3 $$ File upDir = myTempDir.newFolder("sub")-->Line_9 $$ assertPathsEqual(upDir.getPath(), upLinkVFile.getCanonicalPath())[ FD ]
Line_3 $$ File upDir = myTempDir.newFolder("sub")-->Line_4 $$ File upLinkFile = createSymLink(upDir.getPath(), upDir.getPath() + "/up_link")[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_10 $$ assertVisitedPaths(upDir.getPath(), upLinkVFile.getPath())[ CD ]
Line_13 $$ VirtualFile repeatedLinksVFile = refreshAndFind(repeatedLinksFile)-->Line_17 $$ assertPathsEqual(upDir.getPath(), repeatedLinksVFile.getCanonicalPath())[ FD ]
Line_4 $$ File upLinkFile = createSymLink(upDir.getPath(), upDir.getPath() + "/up_link")-->Line_5 $$ VirtualFile upLinkVFile = refreshAndFind(upLinkFile)[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_6 $$ assertNotNull(upLinkVFile)[ CD ]
Line_5 $$ VirtualFile upLinkVFile = refreshAndFind(upLinkFile)-->Line_8 $$ assertTrue(upLinkVFile.isDirectory())[ FD ]
Line_5 $$ VirtualFile upLinkVFile = refreshAndFind(upLinkFile)-->Line_7 $$ assertTrue(upLinkVFile.is(VFileProperty.SYMLINK))[ FD ]
Line_13 $$ VirtualFile repeatedLinksVFile = refreshAndFind(repeatedLinksFile)-->Line_15 $$ assertTrue(repeatedLinksVFile.is(VFileProperty.SYMLINK))[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_9 $$ assertPathsEqual(upDir.getPath(), upLinkVFile.getCanonicalPath())[ CD ]
Line_11 $$ File repeatedLinksFile = new File(upDir.getPath() + StringUtil.repeat(File.separator + upLinkFile.getName(), 4))-->Line_14 $$ assertNotNull(repeatedLinksFile.getPath(), repeatedLinksVFile)[ FD ]
Line_5 $$ VirtualFile upLinkVFile = refreshAndFind(upLinkFile)-->Line_6 $$ assertNotNull(upLinkVFile)[ FD ]
Line_13 $$ VirtualFile repeatedLinksVFile = refreshAndFind(repeatedLinksFile)-->Line_16 $$ assertTrue(repeatedLinksVFile.isDirectory())[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_12 $$ assertTrue(repeatedLinksFile.getPath(), repeatedLinksFile.isDirectory())[ CD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_13 $$ VirtualFile repeatedLinksVFile = refreshAndFind(repeatedLinksFile)[ CD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_8 $$ assertTrue(upLinkVFile.isDirectory())[ CD ]
Line_5 $$ VirtualFile upLinkVFile = refreshAndFind(upLinkFile)-->Line_10 $$ assertVisitedPaths(upDir.getPath(), upLinkVFile.getPath())[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_5 $$ VirtualFile upLinkVFile = refreshAndFind(upLinkFile)[ CD ]
Line_13 $$ VirtualFile repeatedLinksVFile = refreshAndFind(repeatedLinksFile)-->Line_14 $$ assertNotNull(repeatedLinksFile.getPath(), repeatedLinksVFile)[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_18 $$ assertEquals(upLinkVFile.getCanonicalFile(), repeatedLinksVFile.getCanonicalFile())[ CD ]
Line_3 $$ File upDir = myTempDir.newFolder("sub")-->Line_10 $$ assertVisitedPaths(upDir.getPath(), upLinkVFile.getPath())[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_3 $$ File upDir = myTempDir.newFolder("sub")[ CD ]
Line_5 $$ VirtualFile upLinkVFile = refreshAndFind(upLinkFile)-->Line_9 $$ assertPathsEqual(upDir.getPath(), upLinkVFile.getCanonicalPath())[ FD ]
Line_4 $$ File upLinkFile = createSymLink(upDir.getPath(), upDir.getPath() + "/up_link")-->Line_11 $$ File repeatedLinksFile = new File(upDir.getPath() + StringUtil.repeat(File.separator + upLinkFile.getName(), 4))[ FD ]
Line_11 $$ File repeatedLinksFile = new File(upDir.getPath() + StringUtil.repeat(File.separator + upLinkFile.getName(), 4))-->Line_13 $$ VirtualFile repeatedLinksVFile = refreshAndFind(repeatedLinksFile)[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_15 $$ assertTrue(repeatedLinksVFile.is(VFileProperty.SYMLINK))[ CD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_17 $$ assertPathsEqual(upDir.getPath(), repeatedLinksVFile.getCanonicalPath())[ CD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_4 $$ File upLinkFile = createSymLink(upDir.getPath(), upDir.getPath() + "/up_link")[ CD ]
Line_3 $$ File upDir = myTempDir.newFolder("sub")-->Line_17 $$ assertPathsEqual(upDir.getPath(), repeatedLinksVFile.getCanonicalPath())[ FD ]
Line_11 $$ File repeatedLinksFile = new File(upDir.getPath() + StringUtil.repeat(File.separator + upLinkFile.getName(), 4))-->Line_12 $$ assertTrue(repeatedLinksFile.getPath(), repeatedLinksFile.isDirectory())[ FD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_14 $$ assertNotNull(repeatedLinksFile.getPath(), repeatedLinksVFile)[ CD ]
Line_2 $$ public void testCircularLink() throws Exception -->Line_16 $$ assertTrue(repeatedLinksVFile.isDirectory())[ CD ]
