Line_5 $$ String user = context.getApplications().get(applicationId).getUser()-->Line_7 $$ return SecureIOUtils.openForRead(logFile, user, null)[ FD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_10 $$ LOG.error("Exception reading log file " + logFile.getAbsolutePath(), e)[ FD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_5 $$ String user = context.getApplications().get(applicationId).getUser()[ CD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_4 $$ ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId()[ CD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_11 $$ throw new IOException("Exception reading log file. Application submitted by '" + user + "' doesn't own requested log file : " + logFile.getName(), e)[ FD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_13 $$ throw new IOException("Exception reading log file. It might be because log " + "file was aggregated : " + logFile.getName(), e)[ FD ]
Line_9 $$ if (e.getMessage().contains("did not match expected owner '" + user + "'")) -->Line_10 $$ LOG.error("Exception reading log file " + logFile.getAbsolutePath(), e)[ CD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_3 $$ ContainerId containerId = ConverterUtils.toContainerId(containerIdStr)[ CD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_3 $$ ContainerId containerId = ConverterUtils.toContainerId(containerIdStr)[ FD ]
Line_3 $$ ContainerId containerId = ConverterUtils.toContainerId(containerIdStr)-->Line_4 $$ ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId()[ FD ]
Line_4 $$ ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId()-->Line_5 $$ String user = context.getApplications().get(applicationId).getUser()[ FD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_5 $$ String user = context.getApplications().get(applicationId).getUser()[ FD ]
Line_2 $$ public static FileInputStream openLogFileForRead(String containerIdStr, File logFile, Context context) throws IOException -->Line_7 $$ return SecureIOUtils.openForRead(logFile, user, null)[ FD ]
