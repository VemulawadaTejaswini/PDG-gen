Line_2 $$ public static void doAllTests(QuickFixTestCase testCase) -->Line_11 $$ if (files == null || files.length == 0) [ CD ]
Line_5 $$ File testDir = new File(testDirPath)-->Line_6 $$ final File[] files = testDir.listFiles(new FilenameFilter() [ FD ]
Line_2 $$ public static void doAllTests(QuickFixTestCase testCase) -->Line_3 $$ assertNotNull("getBasePath() should not return null!", testCase.getBasePath())[ CD ]
Line_2 $$ public static void doAllTests(QuickFixTestCase testCase) -->Line_4 $$ final String testDirPath = testCase.getTestDataPath().replace(File.separatorChar, '/') + testCase.getBasePath()[ FD ]
Line_6 $$ final File[] files = testDir.listFiles(new FilenameFilter() -->Line_8 $$ return name.startsWith(BEFORE_PREFIX)[ CD ]
Line_2 $$ public static void doAllTests(QuickFixTestCase testCase) -->Line_5 $$ File testDir = new File(testDirPath)[ CD ]
Line_2 $$ public static void doAllTests(QuickFixTestCase testCase) -->Line_16 $$ doTestFor(testName, testCase)[ FD ]
Line_2 $$ public static void doAllTests(QuickFixTestCase testCase) -->Line_4 $$ final String testDirPath = testCase.getTestDataPath().replace(File.separatorChar, '/') + testCase.getBasePath()[ CD ]
Line_6 $$ final File[] files = testDir.listFiles(new FilenameFilter() -->Line_8 $$ return name.startsWith(BEFORE_PREFIX)[ FD ]
Line_11 $$ if (files == null || files.length == 0) -->Line_12 $$ fail("Test files not found in " + testDirPath)[ CD ]
Line_2 $$ public static void doAllTests(QuickFixTestCase testCase) -->Line_6 $$ final File[] files = testDir.listFiles(new FilenameFilter() [ CD ]
Line_2 $$ public static void doAllTests(QuickFixTestCase testCase) -->Line_3 $$ assertNotNull("getBasePath() should not return null!", testCase.getBasePath())[ FD ]
