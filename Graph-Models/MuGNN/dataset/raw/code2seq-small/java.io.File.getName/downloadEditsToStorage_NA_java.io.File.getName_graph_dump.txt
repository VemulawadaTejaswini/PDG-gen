Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_5 $$ String finalFileName = NNStorage.getFinalizedEditsFileName(log.getStartTxId(), log.getEndTxId())[ FD ]
Line_22 $$ for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) -->Line_23 $$ File tmpFile = NNStorage.getTemporaryEditsFile(sd, log.getStartTxId(), log.getEndTxId(), milliTime)[ FD ]
Line_18 $$ List<File> tmpFiles = dstStorage.getFiles(NameNodeDirType.EDITS, tmpFileName)-->Line_19 $$ getFileClient(fsName, fileid, tmpFiles, dstStorage, false)[ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_20 $$ LOG.info("Downloaded file " + tmpFiles.get(0).getName() + " size " + finalFiles.get(0).length() + " bytes.")[ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_19 $$ getFileClient(fsName, fileid, tmpFiles, dstStorage, false)[ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_5 $$ String finalFileName = NNStorage.getFinalizedEditsFileName(log.getStartTxId(), log.getEndTxId())[ CD ]
Line_28 $$ boolean success = tmpFile.renameTo(finalizedFile)-->Line_29 $$ if (!success) [ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_18 $$ List<File> tmpFiles = dstStorage.getFiles(NameNodeDirType.EDITS, tmpFileName)[ FD ]
Line_12 $$ if (LOG.isDebugEnabled()) -->Line_13 $$ LOG.debug("Dest file: " + f)[ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_4 $$ String fileid = ImageServlet.getParamStringForLog(log, dstStorage)[ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_22 $$ for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) [ FD ]
Line_8 $$ for (File f : finalFiles) -->Line_9 $$ if (f.exists() && FileUtil.canRead(f)) [ FD ]
Line_5 $$ String finalFileName = NNStorage.getFinalizedEditsFileName(log.getStartTxId(), log.getEndTxId())-->Line_6 $$ List<File> finalFiles = dstStorage.getFiles(NameNodeDirType.EDITS, finalFileName)[ FD ]
Line_6 $$ List<File> finalFiles = dstStorage.getFiles(NameNodeDirType.EDITS, finalFileName)-->Line_20 $$ LOG.info("Downloaded file " + tmpFiles.get(0).getName() + " size " + finalFiles.get(0).length() + " bytes.")[ FD ]
Line_17 $$ String tmpFileName = NNStorage.getTemporaryEditsFileName(log.getStartTxId(), log.getEndTxId(), milliTime)-->Line_18 $$ List<File> tmpFiles = dstStorage.getFiles(NameNodeDirType.EDITS, tmpFileName)[ FD ]
Line_22 $$ for (StorageDirectory sd : dstStorage.dirIterable(NameNodeDirType.EDITS)) -->Line_24 $$ File finalizedFile = NNStorage.getFinalizedEditsFile(sd, log.getStartTxId(), log.getEndTxId())[ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_24 $$ File finalizedFile = NNStorage.getFinalizedEditsFile(sd, log.getStartTxId(), log.getEndTxId())[ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_21 $$ CheckpointFaultInjector.getInstance().beforeEditsRename()[ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_23 $$ File tmpFile = NNStorage.getTemporaryEditsFile(sd, log.getStartTxId(), log.getEndTxId(), milliTime)[ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_19 $$ getFileClient(fsName, fileid, tmpFiles, dstStorage, false)[ CD ]
Line_9 $$ if (f.exists() && FileUtil.canRead(f)) -->Line_11 $$ return[ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_18 $$ List<File> tmpFiles = dstStorage.getFiles(NameNodeDirType.EDITS, tmpFileName)[ CD ]
Line_18 $$ List<File> tmpFiles = dstStorage.getFiles(NameNodeDirType.EDITS, tmpFileName)-->Line_20 $$ LOG.info("Downloaded file " + tmpFiles.get(0).getName() + " size " + finalFiles.get(0).length() + " bytes.")[ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_6 $$ List<File> finalFiles = dstStorage.getFiles(NameNodeDirType.EDITS, finalFileName)[ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_17 $$ String tmpFileName = NNStorage.getTemporaryEditsFileName(log.getStartTxId(), log.getEndTxId(), milliTime)[ CD ]
Line_4 $$ String fileid = ImageServlet.getParamStringForLog(log, dstStorage)-->Line_19 $$ getFileClient(fsName, fileid, tmpFiles, dstStorage, false)[ FD ]
Line_16 $$ final long milliTime = Time.monotonicNow()-->Line_23 $$ File tmpFile = NNStorage.getTemporaryEditsFile(sd, log.getStartTxId(), log.getEndTxId(), milliTime)[ FD ]
Line_24 $$ File finalizedFile = NNStorage.getFinalizedEditsFile(sd, log.getStartTxId(), log.getEndTxId())-->Line_28 $$ boolean success = tmpFile.renameTo(finalizedFile)[ FD ]
Line_9 $$ if (f.exists() && FileUtil.canRead(f)) -->Line_10 $$ LOG.info("Skipping download of remote edit log " + log + " since it already is stored locally at " + f)[ CD ]
Line_29 $$ if (!success) -->Line_30 $$ LOG.warn("Unable to rename edits file from " + tmpFile + " to " + finalizedFile)[ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_4 $$ String fileid = ImageServlet.getParamStringForLog(log, dstStorage)[ FD ]
Line_9 $$ if (f.exists() && FileUtil.canRead(f)) -->Line_12 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_3 $$ assert log.getStartTxId() > 0 && log.getEndTxId() > 0 : "bad log: " + log[ FD ]
Line_6 $$ List<File> finalFiles = dstStorage.getFiles(NameNodeDirType.EDITS, finalFileName)-->Line_7 $$ assert !finalFiles.isEmpty() : "No checkpoint targets."[ FD ]
Line_23 $$ File tmpFile = NNStorage.getTemporaryEditsFile(sd, log.getStartTxId(), log.getEndTxId(), milliTime)-->Line_28 $$ boolean success = tmpFile.renameTo(finalizedFile)[ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_17 $$ String tmpFileName = NNStorage.getTemporaryEditsFileName(log.getStartTxId(), log.getEndTxId(), milliTime)[ FD ]
Line_16 $$ final long milliTime = Time.monotonicNow()-->Line_17 $$ String tmpFileName = NNStorage.getTemporaryEditsFileName(log.getStartTxId(), log.getEndTxId(), milliTime)[ FD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_16 $$ final long milliTime = Time.monotonicNow()[ CD ]
Line_25 $$ if (LOG.isDebugEnabled()) -->Line_26 $$ LOG.debug("Renaming " + tmpFile + " to " + finalizedFile)[ CD ]
Line_2 $$ static void downloadEditsToStorage(URL fsName, RemoteEditLog log, NNStorage dstStorage) throws IOException -->Line_6 $$ List<File> finalFiles = dstStorage.getFiles(NameNodeDirType.EDITS, finalFileName)[ FD ]
