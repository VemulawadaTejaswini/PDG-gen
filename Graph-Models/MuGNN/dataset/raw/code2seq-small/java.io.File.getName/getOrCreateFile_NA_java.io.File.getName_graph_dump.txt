Line_4 $$ final PsiFile psi-->Line_19 $$ psi = PsiManager.getInstance(project).findFile(vfile)[ FD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_24 $$ return (PyFile) psi[ CD ]
Line_6 $$ final File file = new File(path)-->Line_12 $$ properties.setProperty("NAME", FileUtil.getNameWithoutExtension(file.getName()))[ FD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_9 $$ final FileTemplateManager fileTemplateManager = FileTemplateManager.getInstance(project)[ FD ]
Line_4 $$ final PsiFile psi-->Line_14 $$ psi = PyExtractSuperclassHelper.placeFile(project, StringUtil.notNullize(file.getParent(), baseDir != null ? baseDir.getPath() : "."), file.getName(), content)[ FD ]
Line_6 $$ final File file = new File(path)-->Line_14 $$ psi = PyExtractSuperclassHelper.placeFile(project, StringUtil.notNullize(file.getParent(), baseDir != null ? baseDir.getPath() : "."), file.getName(), content)[ FD ]
Line_13 $$ final String content = (template != null) ? template.getText(properties) : null-->Line_14 $$ psi = PyExtractSuperclassHelper.placeFile(project, StringUtil.notNullize(file.getParent(), baseDir != null ? baseDir.getPath() : "."), file.getName(), content)[ FD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_21 $$ if (!(psi instanceof PyFile)) [ CD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_8 $$ final VirtualFile baseDir = project.getBaseDir()[ FD ]
Line_11 $$ final Properties properties = fileTemplateManager.getDefaultProperties()-->Line_12 $$ properties.setProperty("NAME", FileUtil.getNameWithoutExtension(file.getName()))[ FD ]
Line_9 $$ final FileTemplateManager fileTemplateManager = FileTemplateManager.getInstance(project)-->Line_10 $$ final FileTemplate template = fileTemplateManager.getInternalTemplate("Python Script")[ FD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_5 $$ if (vfile == null) [ CD ]
Line_9 $$ final FileTemplateManager fileTemplateManager = FileTemplateManager.getInstance(project)-->Line_11 $$ final Properties properties = fileTemplateManager.getDefaultProperties()[ FD ]
Line_10 $$ final FileTemplate template = fileTemplateManager.getInternalTemplate("Python Script")-->Line_13 $$ final String content = (template != null) ? template.getText(properties) : null[ FD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_14 $$ psi = PyExtractSuperclassHelper.placeFile(project, StringUtil.notNullize(file.getParent(), baseDir != null ? baseDir.getPath() : "."), file.getName(), content)[ FD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_3 $$ final VirtualFile vfile = LocalFileSystem.getInstance().findFileByIoFile(new File(path))[ CD ]
Line_5 $$ if (vfile == null) -->Line_19 $$ psi = PsiManager.getInstance(project).findFile(vfile)[ CD ]
Line_3 $$ final VirtualFile vfile = LocalFileSystem.getInstance().findFileByIoFile(new File(path))-->Line_19 $$ psi = PsiManager.getInstance(project).findFile(vfile)[ FD ]
Line_14 $$ psi = PyExtractSuperclassHelper.placeFile(project, StringUtil.notNullize(file.getParent(), baseDir != null ? baseDir.getPath() : "."), file.getName(), content)-->Line_19 $$ psi = PsiManager.getInstance(project).findFile(vfile)[ FD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_16 $$ throw new IncorrectOperationException(String.format("Cannot create file '%s'", path))[ FD ]
Line_5 $$ if (vfile == null) -->Line_6 $$ final File file = new File(path)[ CD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_4 $$ final PsiFile psi[ CD ]
Line_2 $$ public static PyFile getOrCreateFile(String path, Project project) -->Line_19 $$ psi = PsiManager.getInstance(project).findFile(vfile)[ FD ]
Line_11 $$ final Properties properties = fileTemplateManager.getDefaultProperties()-->Line_13 $$ final String content = (template != null) ? template.getText(properties) : null[ FD ]
Line_3 $$ final VirtualFile vfile = LocalFileSystem.getInstance().findFileByIoFile(new File(path))-->Line_5 $$ if (vfile == null) [ FD ]
Line_8 $$ final VirtualFile baseDir = project.getBaseDir()-->Line_14 $$ psi = PyExtractSuperclassHelper.placeFile(project, StringUtil.notNullize(file.getParent(), baseDir != null ? baseDir.getPath() : "."), file.getName(), content)[ FD ]
