Line_9 $$ FSDataOutputStream create = fs.create(new Path("/test"))-->Line_12 $$ create.close()[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_40 $$ cluster.waitActive()[ FD ]
Line_18 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_20 $$ nonParticipatedNodeDirs.add(data_dir)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_39 $$ cluster.restartDataNodes()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_41 $$ cluster.triggerBlockReports()[ FD ]
Line_15 $$ for (int i = 0; i < cluster.getDataNodes().size(); i++) -->Line_18 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ CD ]
Line_13 $$ List<File> nonParticipatedNodeDirs = new ArrayList<File>()-->Line_20 $$ nonParticipatedNodeDirs.add(data_dir)[ FD ]
Line_28 $$ if (file.getName().startsWith("blk_") && !file.getName().endsWith("meta")) -->Line_29 $$ blockFile = file.getName()[ CD ]
Line_5 $$ Configuration conf = new HdfsConfiguration()-->Line_6 $$ conf.setLong(DFSConfigKeys.DFS_NAMENODE_REPLICATION_PENDING_TIMEOUT_SEC_KEY, 1)[ FD ]
Line_19 $$ if (data_dir.listFiles().length == 0) -->Line_22 $$ participatedNodeDirs = data_dir[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_15 $$ for (int i = 0; i < cluster.getDataNodes().size(); i++) [ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_44 $$ if (cluster != null) [ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_45 $$ cluster.shutdown()[ FD ]
Line_9 $$ FSDataOutputStream create = fs.create(new Path("/test"))-->Line_11 $$ create.write(new byte[1024])[ FD ]
Line_18 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_22 $$ participatedNodeDirs = data_dir[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_41 $$ cluster.triggerBlockReports()[ FD ]
Line_15 $$ for (int i = 0; i < cluster.getDataNodes().size(); i++) -->Line_16 $$ File storageDir = cluster.getInstanceStorageDir(i, 0)[ FD ]
Line_14 $$ File participatedNodeDirs = null-->Line_26 $$ File[] listFiles = participatedNodeDirs.listFiles()[ FD ]
Line_15 $$ for (int i = 0; i < cluster.getDataNodes().size(); i++) -->Line_19 $$ if (data_dir.listFiles().length == 0) [ CD ]
Line_27 $$ for (File file : listFiles) -->Line_28 $$ if (file.getName().startsWith("blk_") && !file.getName().endsWith("meta")) [ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_8 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_8 $$ FileSystem fs = cluster.getFileSystem()-->Line_38 $$ fs.setReplication(new Path("/test"), (short) 3)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_40 $$ cluster.waitActive()[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_15 $$ for (int i = 0; i < cluster.getDataNodes().size(); i++) [ FD ]
Line_19 $$ if (data_dir.listFiles().length == 0) -->Line_20 $$ nonParticipatedNodeDirs.add(data_dir)[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()[ FD ]
Line_14 $$ File participatedNodeDirs = null-->Line_22 $$ participatedNodeDirs = data_dir[ FD ]
Line_22 $$ participatedNodeDirs = data_dir-->Line_26 $$ File[] listFiles = participatedNodeDirs.listFiles()[ FD ]
Line_16 $$ File storageDir = cluster.getInstanceStorageDir(i, 0)-->Line_18 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_25 $$ String blockFile = null-->Line_29 $$ blockFile = file.getName()[ FD ]
Line_15 $$ for (int i = 0; i < cluster.getDataNodes().size(); i++) -->Line_17 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ CD ]
Line_15 $$ for (int i = 0; i < cluster.getDataNodes().size(); i++) -->Line_16 $$ File storageDir = cluster.getInstanceStorageDir(i, 0)[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_16 $$ File storageDir = cluster.getInstanceStorageDir(i, 0)[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_16 $$ File storageDir = cluster.getInstanceStorageDir(i, 0)[ FD ]
Line_27 $$ for (File file : listFiles) -->Line_29 $$ blockFile = file.getName()[ FD ]
Line_7 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(3).build()-->Line_17 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_44 $$ if (cluster != null) [ FD ]
Line_8 $$ FileSystem fs = cluster.getFileSystem()-->Line_42 $$ DFSTestUtil.waitReplication(fs, new Path("/test"), (short) 3)[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_39 $$ cluster.restartDataNodes()[ FD ]
Line_8 $$ FileSystem fs = cluster.getFileSystem()-->Line_10 $$ fs.setReplication(new Path("/test"), (short) 1)[ FD ]
Line_8 $$ FileSystem fs = cluster.getFileSystem()-->Line_9 $$ FSDataOutputStream create = fs.create(new Path("/test"))[ FD ]
Line_17 $$ String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_18 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_44 $$ if (cluster != null) -->Line_45 $$ cluster.shutdown()[ CD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_17 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_45 $$ cluster.shutdown()[ FD ]
Line_3 $$ MiniDFSCluster cluster = null-->Line_8 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_2 $$ public void testReplicationWhenBlockCorruption() throws Exception -->Line_3 $$ MiniDFSCluster cluster = null[ CD ]
Line_30 $$ for (File file1 : nonParticipatedNodeDirs) -->Line_31 $$ file1.mkdirs()[ FD ]
Line_18 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_19 $$ if (data_dir.listFiles().length == 0) [ FD ]
