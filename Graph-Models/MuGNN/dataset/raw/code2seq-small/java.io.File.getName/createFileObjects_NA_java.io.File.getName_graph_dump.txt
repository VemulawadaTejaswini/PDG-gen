Line_8 $$ if (!StringUtil.startsWithChar(relativeFileName, '/'))-->Line_9 $$ relativeFileName = "/" + relativeFileName[ CD ]
Line_6 $$ for (final File file : parents) -->Line_10 $$ parentsMap.put(file, DirectoryObject.createInstance(relativeFileName))[ FD ]
Line_3 $$ ArrayList<AbstractFileObject> result = new ArrayList<AbstractFileObject>()-->Line_13 $$ result.add(FileObject.createInstance(parentsMap.get(file.getParentFile()), "/" + file.getName()))[ FD ]
Line_7 $$ String relativeFileName = file.getPath().replace(File.separatorChar, '/')-->Line_9 $$ relativeFileName = "/" + relativeFileName[ FD ]
Line_9 $$ relativeFileName = "/" + relativeFileName-->Line_10 $$ parentsMap.put(file, DirectoryObject.createInstance(relativeFileName))[ FD ]
Line_5 $$ Map<File, DirectoryObject> parentsMap = new HashMap<File, DirectoryObject>()-->Line_13 $$ result.add(FileObject.createInstance(parentsMap.get(file.getParentFile()), "/" + file.getName()))[ FD ]
Line_2 $$ private AbstractFileObject[] createFileObjects() -->Line_3 $$ ArrayList<AbstractFileObject> result = new ArrayList<AbstractFileObject>()[ CD ]
Line_7 $$ String relativeFileName = file.getPath().replace(File.separatorChar, '/')-->Line_10 $$ parentsMap.put(file, DirectoryObject.createInstance(relativeFileName))[ FD ]
Line_2 $$ private AbstractFileObject[] createFileObjects() -->Line_15 $$ return result.toArray(new AbstractFileObject[result.size()])[ CD ]
Line_6 $$ for (final File file : parents) -->Line_7 $$ String relativeFileName = file.getPath().replace(File.separatorChar, '/')[ FD ]
Line_2 $$ private AbstractFileObject[] createFileObjects() -->Line_4 $$ Collection<File> parents = collectAllParents()[ CD ]
Line_6 $$ for (final File file : parents) -->Line_13 $$ result.add(FileObject.createInstance(parentsMap.get(file.getParentFile()), "/" + file.getName()))[ FD ]
Line_3 $$ ArrayList<AbstractFileObject> result = new ArrayList<AbstractFileObject>()-->Line_15 $$ return result.toArray(new AbstractFileObject[result.size()])[ FD ]
Line_7 $$ String relativeFileName = file.getPath().replace(File.separatorChar, '/')-->Line_8 $$ if (!StringUtil.startsWithChar(relativeFileName, '/'))[ FD ]
Line_5 $$ Map<File, DirectoryObject> parentsMap = new HashMap<File, DirectoryObject>()-->Line_10 $$ parentsMap.put(file, DirectoryObject.createInstance(relativeFileName))[ FD ]
Line_2 $$ private AbstractFileObject[] createFileObjects() -->Line_5 $$ Map<File, DirectoryObject> parentsMap = new HashMap<File, DirectoryObject>()[ CD ]
