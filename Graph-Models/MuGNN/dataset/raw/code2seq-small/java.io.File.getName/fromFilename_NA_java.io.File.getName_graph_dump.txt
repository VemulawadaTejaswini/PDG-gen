Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_17 $$ int generation = Integer.parseInt(nexttok)[ CD ]
Line_15 $$ nexttok = tokenStack.pop()-->Line_19 $$ Version version = fmt.info.getVersion(nexttok)[ FD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_32 $$ if (cfDirectory.getParentFile().getName().equals(Directories.SNAPSHOT_SUBDIR)) [ FD ]
Line_6 $$ Deque<String> tokenStack = new ArrayDeque()-->Line_38 $$ cfname = tokenStack.pop()[ FD ]
Line_11 $$ nexttok = tokenStack.pop()-->Line_18 $$ nexttok = tokenStack.pop()[ FD ]
Line_23 $$ if (version.hasNewFileName()) -->Line_24 $$ File cfDirectory = parentDirectory[ CD ]
Line_28 $$ cfDirectory = cfDirectory.getParentFile()-->Line_31 $$ cfDirectory = cfDirectory.getParentFile()[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_11 $$ nexttok = tokenStack.pop()[ CD ]
Line_23 $$ if (version.hasNewFileName()) -->Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName[ CD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_6 $$ Deque<String> tokenStack = new ArrayDeque()[ CD ]
Line_11 $$ nexttok = tokenStack.pop()-->Line_20 $$ if (!version.validate(nexttok))[ FD ]
Line_5 $$ String nexttok-->Line_17 $$ int generation = Integer.parseInt(nexttok)[ FD ]
Line_11 $$ nexttok = tokenStack.pop()-->Line_15 $$ nexttok = tokenStack.pop()[ FD ]
Line_4 $$ StringTokenizer st = new StringTokenizer(name, String.valueOf(separator))-->Line_7 $$ while (st.hasMoreTokens()) [ FD ]
Line_33 $$ cfDirectory = cfDirectory.getParentFile().getParentFile()-->Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName[ FD ]
Line_5 $$ String nexttok-->Line_14 $$ fmt = SSTableFormat.Type.validate(nexttok)[ FD ]
Line_5 $$ String nexttok-->Line_15 $$ nexttok = tokenStack.pop()[ FD ]
Line_28 $$ cfDirectory = cfDirectory.getParentFile()-->Line_32 $$ if (cfDirectory.getParentFile().getName().equals(Directories.SNAPSHOT_SUBDIR)) [ FD ]
Line_10 $$ String component = skipComponent ? null : tokenStack.pop()-->Line_42 $$ return Pair.create(new Descriptor(version, parentDirectory, ksname, cfname, generation, fmt, Component.digestFor(version.uncompressedChecksumType())), component)[ FD ]
Line_23 $$ if (version.hasNewFileName()) -->Line_30 $$ if (cfDirectory.getName().equals(Directories.BACKUPS_SUBDIR)) [ CD ]
Line_11 $$ nexttok = tokenStack.pop()-->Line_19 $$ Version version = fmt.info.getVersion(nexttok)[ FD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_33 $$ cfDirectory = cfDirectory.getParentFile().getParentFile()[ FD ]
Line_28 $$ cfDirectory = cfDirectory.getParentFile()-->Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName[ FD ]
Line_6 $$ Deque<String> tokenStack = new ArrayDeque()-->Line_15 $$ nexttok = tokenStack.pop()[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_23 $$ if (version.hasNewFileName()) [ CD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_30 $$ if (cfDirectory.getName().equals(Directories.BACKUPS_SUBDIR)) [ FD ]
Line_6 $$ Deque<String> tokenStack = new ArrayDeque()-->Line_8 $$ tokenStack.push(st.nextToken())[ FD ]
Line_27 $$ indexName = cfDirectory.getName()-->Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName[ FD ]
Line_11 $$ nexttok = tokenStack.pop()-->Line_17 $$ int generation = Integer.parseInt(nexttok)[ FD ]
Line_30 $$ if (cfDirectory.getName().equals(Directories.BACKUPS_SUBDIR)) -->Line_31 $$ cfDirectory = cfDirectory.getParentFile()[ CD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_18 $$ nexttok = tokenStack.pop()[ CD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_27 $$ indexName = cfDirectory.getName()[ FD ]
Line_19 $$ Version version = fmt.info.getVersion(nexttok)-->Line_42 $$ return Pair.create(new Descriptor(version, parentDirectory, ksname, cfname, generation, fmt, Component.digestFor(version.uncompressedChecksumType())), component)[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_7 $$ while (st.hasMoreTokens()) [ CD ]
Line_15 $$ nexttok = tokenStack.pop()-->Line_18 $$ nexttok = tokenStack.pop()[ FD ]
Line_28 $$ cfDirectory = cfDirectory.getParentFile()-->Line_30 $$ if (cfDirectory.getName().equals(Directories.BACKUPS_SUBDIR)) [ FD ]
Line_5 $$ String nexttok-->Line_20 $$ if (!version.validate(nexttok))[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_20 $$ if (!version.validate(nexttok))[ CD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_26 $$ if (cfDirectory.getName().startsWith(Directories.SECONDARY_INDEX_NAME_SEPARATOR)) [ FD ]
Line_23 $$ if (version.hasNewFileName()) -->Line_36 $$ ksname = cfDirectory.getParentFile().getName()[ CD ]
Line_25 $$ String indexName = ""-->Line_27 $$ indexName = cfDirectory.getName()[ FD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName[ FD ]
Line_6 $$ Deque<String> tokenStack = new ArrayDeque()-->Line_39 $$ ksname = tokenStack.pop()[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_3 $$ File parentDirectory = directory != null ? directory : new File(".")[ CD ]
Line_6 $$ Deque<String> tokenStack = new ArrayDeque()-->Line_18 $$ nexttok = tokenStack.pop()[ FD ]
Line_11 $$ nexttok = tokenStack.pop()-->Line_13 $$ if (!CharMatcher.DIGIT.matchesAllOf(nexttok)) [ FD ]
Line_5 $$ String nexttok-->Line_18 $$ nexttok = tokenStack.pop()[ FD ]
Line_23 $$ if (version.hasNewFileName()) -->Line_38 $$ cfname = tokenStack.pop()[ CD ]
Line_31 $$ cfDirectory = cfDirectory.getParentFile()-->Line_36 $$ ksname = cfDirectory.getParentFile().getName()[ FD ]
Line_6 $$ Deque<String> tokenStack = new ArrayDeque()-->Line_41 $$ assert tokenStack.isEmpty() : "Invalid file name " + name + " in " + directory[ FD ]
Line_13 $$ if (!CharMatcher.DIGIT.matchesAllOf(nexttok)) -->Line_15 $$ nexttok = tokenStack.pop()[ CD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_28 $$ cfDirectory = cfDirectory.getParentFile()[ FD ]
Line_33 $$ cfDirectory = cfDirectory.getParentFile().getParentFile()-->Line_36 $$ ksname = cfDirectory.getParentFile().getName()[ FD ]
Line_31 $$ cfDirectory = cfDirectory.getParentFile()-->Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName[ FD ]
Line_19 $$ Version version = fmt.info.getVersion(nexttok)-->Line_23 $$ if (version.hasNewFileName()) [ FD ]
Line_6 $$ Deque<String> tokenStack = new ArrayDeque()-->Line_10 $$ String component = skipComponent ? null : tokenStack.pop()[ FD ]
Line_5 $$ String nexttok-->Line_19 $$ Version version = fmt.info.getVersion(nexttok)[ FD ]
Line_32 $$ if (cfDirectory.getParentFile().getName().equals(Directories.SNAPSHOT_SUBDIR)) -->Line_33 $$ cfDirectory = cfDirectory.getParentFile().getParentFile()[ CD ]
Line_26 $$ if (cfDirectory.getName().startsWith(Directories.SECONDARY_INDEX_NAME_SEPARATOR)) -->Line_27 $$ indexName = cfDirectory.getName()[ CD ]
Line_22 $$ String ksname, cfname-->Line_36 $$ ksname = cfDirectory.getParentFile().getName()[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_4 $$ StringTokenizer st = new StringTokenizer(name, String.valueOf(separator))[ CD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_5 $$ String nexttok[ CD ]
Line_31 $$ cfDirectory = cfDirectory.getParentFile()-->Line_33 $$ cfDirectory = cfDirectory.getParentFile().getParentFile()[ FD ]
Line_25 $$ String indexName = ""-->Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName[ FD ]
Line_30 $$ if (cfDirectory.getName().equals(Directories.BACKUPS_SUBDIR)) -->Line_32 $$ if (cfDirectory.getParentFile().getName().equals(Directories.SNAPSHOT_SUBDIR)) [ CD ]
Line_13 $$ if (!CharMatcher.DIGIT.matchesAllOf(nexttok)) -->Line_14 $$ fmt = SSTableFormat.Type.validate(nexttok)[ CD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_12 $$ SSTableFormat.Type fmt = SSTableFormat.Type.LEGACY[ CD ]
Line_22 $$ String ksname, cfname-->Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName[ FD ]
Line_28 $$ cfDirectory = cfDirectory.getParentFile()-->Line_33 $$ cfDirectory = cfDirectory.getParentFile().getParentFile()[ FD ]
Line_7 $$ while (st.hasMoreTokens()) -->Line_8 $$ tokenStack.push(st.nextToken())[ CD ]
Line_5 $$ String nexttok-->Line_11 $$ nexttok = tokenStack.pop()[ FD ]
Line_18 $$ nexttok = tokenStack.pop()-->Line_19 $$ Version version = fmt.info.getVersion(nexttok)[ FD ]
Line_22 $$ String ksname, cfname-->Line_39 $$ ksname = tokenStack.pop()[ FD ]
Line_18 $$ nexttok = tokenStack.pop()-->Line_20 $$ if (!version.validate(nexttok))[ FD ]
Line_23 $$ if (version.hasNewFileName()) -->Line_26 $$ if (cfDirectory.getName().startsWith(Directories.SECONDARY_INDEX_NAME_SEPARATOR)) [ CD ]
Line_4 $$ StringTokenizer st = new StringTokenizer(name, String.valueOf(separator))-->Line_8 $$ tokenStack.push(st.nextToken())[ FD ]
Line_6 $$ Deque<String> tokenStack = new ArrayDeque()-->Line_11 $$ nexttok = tokenStack.pop()[ FD ]
Line_36 $$ ksname = cfDirectory.getParentFile().getName()-->Line_39 $$ ksname = tokenStack.pop()[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_42 $$ return Pair.create(new Descriptor(version, parentDirectory, ksname, cfname, generation, fmt, Component.digestFor(version.uncompressedChecksumType())), component)[ CD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_10 $$ String component = skipComponent ? null : tokenStack.pop()[ CD ]
Line_23 $$ if (version.hasNewFileName()) -->Line_25 $$ String indexName = ""[ CD ]
Line_19 $$ Version version = fmt.info.getVersion(nexttok)-->Line_20 $$ if (!version.validate(nexttok))[ FD ]
Line_15 $$ nexttok = tokenStack.pop()-->Line_20 $$ if (!version.validate(nexttok))[ FD ]
Line_22 $$ String ksname, cfname-->Line_38 $$ cfname = tokenStack.pop()[ FD ]
Line_26 $$ if (cfDirectory.getName().startsWith(Directories.SECONDARY_INDEX_NAME_SEPARATOR)) -->Line_28 $$ cfDirectory = cfDirectory.getParentFile()[ CD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_36 $$ ksname = cfDirectory.getParentFile().getName()[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_13 $$ if (!CharMatcher.DIGIT.matchesAllOf(nexttok)) [ CD ]
Line_15 $$ nexttok = tokenStack.pop()-->Line_17 $$ int generation = Integer.parseInt(nexttok)[ FD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_19 $$ Version version = fmt.info.getVersion(nexttok)[ CD ]
Line_23 $$ if (version.hasNewFileName()) -->Line_39 $$ ksname = tokenStack.pop()[ CD ]
Line_2 $$ public static Pair<Descriptor, String> fromFilename(File directory, String name, boolean skipComponent) -->Line_22 $$ String ksname, cfname[ CD ]
Line_5 $$ String nexttok-->Line_13 $$ if (!CharMatcher.DIGIT.matchesAllOf(nexttok)) [ FD ]
Line_31 $$ cfDirectory = cfDirectory.getParentFile()-->Line_32 $$ if (cfDirectory.getParentFile().getName().equals(Directories.SNAPSHOT_SUBDIR)) [ FD ]
Line_11 $$ nexttok = tokenStack.pop()-->Line_14 $$ fmt = SSTableFormat.Type.validate(nexttok)[ FD ]
Line_28 $$ cfDirectory = cfDirectory.getParentFile()-->Line_36 $$ ksname = cfDirectory.getParentFile().getName()[ FD ]
Line_35 $$ cfname = cfDirectory.getName().split("-")[0] + indexName-->Line_38 $$ cfname = tokenStack.pop()[ FD ]
Line_24 $$ File cfDirectory = parentDirectory-->Line_31 $$ cfDirectory = cfDirectory.getParentFile()[ FD ]
Line_12 $$ SSTableFormat.Type fmt = SSTableFormat.Type.LEGACY-->Line_14 $$ fmt = SSTableFormat.Type.validate(nexttok)[ FD ]
