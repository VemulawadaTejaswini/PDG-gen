Line_3 $$ List<String> allArgs = new ArrayList<String>(args)-->Line_7 $$ String output = transform(gccBinary, allArgs)[ FD ]
Line_7 $$ String output = transform(gccBinary, allArgs)-->Line_8 $$ if (output == null) [ FD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_5 $$ allArgs.add("-E")[ CD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_3 $$ List<String> allArgs = new ArrayList<String>(args)[ CD ]
Line_3 $$ List<String> allArgs = new ArrayList<String>(args)-->Line_4 $$ allArgs.add("-dM")[ FD ]
Line_3 $$ List<String> allArgs = new ArrayList<String>(args)-->Line_9 $$ return new BrokenResult(String.format("Could not determine %s version: failed to execute %s %s.", getDescription(), gccBinary.getName(), Joiner.on(' ').join(allArgs)))[ FD ]
Line_3 $$ List<String> allArgs = new ArrayList<String>(args)-->Line_6 $$ allArgs.add("-")[ FD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_7 $$ String output = transform(gccBinary, allArgs)[ FD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_11 $$ return transform(output, gccBinary)[ CD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_8 $$ if (output == null) [ CD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_6 $$ allArgs.add("-")[ CD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_7 $$ String output = transform(gccBinary, allArgs)[ CD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_9 $$ return new BrokenResult(String.format("Could not determine %s version: failed to execute %s %s.", getDescription(), gccBinary.getName(), Joiner.on(' ').join(allArgs)))[ FD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_4 $$ allArgs.add("-dM")[ CD ]
Line_7 $$ String output = transform(gccBinary, allArgs)-->Line_11 $$ return transform(output, gccBinary)[ FD ]
Line_8 $$ if (output == null) -->Line_9 $$ return new BrokenResult(String.format("Could not determine %s version: failed to execute %s %s.", getDescription(), gccBinary.getName(), Joiner.on(' ').join(allArgs)))[ CD ]
Line_2 $$ public GccVersionResult getGccMetaData(File gccBinary, List<String> args) -->Line_11 $$ return transform(output, gccBinary)[ FD ]
Line_3 $$ List<String> allArgs = new ArrayList<String>(args)-->Line_5 $$ allArgs.add("-E")[ FD ]
