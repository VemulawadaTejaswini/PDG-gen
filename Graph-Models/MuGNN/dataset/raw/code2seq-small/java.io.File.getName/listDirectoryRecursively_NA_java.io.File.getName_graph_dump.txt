Line_5 $$ if (children != null) -->Line_15 $$ if (isValidFile(fileName, fileKinds)) [ CD ]
Line_4 $$ final String fileName = file.getName()-->Line_6 $$ if (isRootCall || SourceVersion.isIdentifier(fileName)) [ FD ]
Line_3 $$ final File[] children = listChildren(file)-->Line_8 $$ Arrays.sort(children, sortFiles)[ FD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_3 $$ final File[] children = listChildren(file)[ CD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_3 $$ final File[] children = listChildren(file)[ FD ]
Line_10 $$ for (File child : children) -->Line_11 $$ listDirectoryRecursively(child, fileKinds, resultList, false)[ FD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_4 $$ final String fileName = file.getName()[ FD ]
Line_15 $$ if (isValidFile(fileName, fileKinds)) -->Line_16 $$ JavaFileObject fe = new InputFileObject(this, file)[ CD ]
Line_6 $$ if (isRootCall || SourceVersion.isIdentifier(fileName)) -->Line_7 $$ if (sortFiles != null) [ CD ]
Line_7 $$ if (sortFiles != null) -->Line_8 $$ Arrays.sort(children, sortFiles)[ CD ]
Line_5 $$ if (children != null) -->Line_6 $$ if (isRootCall || SourceVersion.isIdentifier(fileName)) [ CD ]
Line_15 $$ if (isValidFile(fileName, fileKinds)) -->Line_17 $$ resultList.append(fe)[ CD ]
Line_4 $$ final String fileName = file.getName()-->Line_15 $$ if (isValidFile(fileName, fileKinds)) [ FD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_15 $$ if (isValidFile(fileName, fileKinds)) [ FD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_17 $$ resultList.append(fe)[ FD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_5 $$ if (children != null) [ CD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_4 $$ final String fileName = file.getName()[ CD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_11 $$ listDirectoryRecursively(child, fileKinds, resultList, false)[ FD ]
Line_2 $$ private void listDirectoryRecursively(File file, Set<JavaFileObject.Kind> fileKinds, ListBuffer<JavaFileObject> resultList, boolean isRootCall) -->Line_6 $$ if (isRootCall || SourceVersion.isIdentifier(fileName)) [ FD ]
Line_3 $$ final File[] children = listChildren(file)-->Line_5 $$ if (children != null) [ FD ]
Line_16 $$ JavaFileObject fe = new InputFileObject(this, file)-->Line_17 $$ resultList.append(fe)[ FD ]
