Line_7 $$ final File localZipFile = localDistribution.getZipFile()-->Line_10 $$ final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".ok")[ FD ]
Line_3 $$ final URI distributionUrl = configuration.getDistribution()-->Line_19 $$ download.download(distributionUrl, tmpZipFile)[ FD ]
Line_7 $$ final File localZipFile = localDistribution.getZipFile()-->Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() [ FD ]
Line_6 $$ final File distDir = localDistribution.getDistributionDir()-->Line_11 $$ if (distDir.isDirectory() && markerFile.isFile()) [ FD ]
Line_5 $$ final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration)-->Line_6 $$ final File distDir = localDistribution.getDistributionDir()[ FD ]
Line_16 $$ File tmpZipFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".part")-->Line_19 $$ download.download(distributionUrl, tmpZipFile)[ FD ]
Line_7 $$ final File localZipFile = localDistribution.getZipFile()-->Line_28 $$ logger.log("Unzipping " + localZipFile.getAbsolutePath() + " to " + distDir.getAbsolutePath())[ FD ]
Line_6 $$ final File distDir = localDistribution.getDistributionDir()-->Line_22 $$ List<File> topLevelDirs = listDirs(distDir)[ FD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_5 $$ final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration)[ FD ]
Line_3 $$ final URI distributionUrl = configuration.getDistribution()-->Line_30 $$ File root = getAndVerifyDistributionRoot(distDir, distributionUrl.toString())[ FD ]
Line_7 $$ final File localZipFile = localDistribution.getZipFile()-->Line_20 $$ tmpZipFile.renameTo(localZipFile)[ FD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_7 $$ final File localZipFile = localDistribution.getZipFile()[ CD ]
Line_7 $$ final File localZipFile = localDistribution.getZipFile()-->Line_29 $$ unzip(localZipFile, distDir)[ FD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_30 $$ File root = getAndVerifyDistributionRoot(distDir, distributionUrl.toString())[ CD ]
Line_6 $$ final File distDir = localDistribution.getDistributionDir()-->Line_29 $$ unzip(localZipFile, distDir)[ FD ]
Line_7 $$ final File localZipFile = localDistribution.getZipFile()-->Line_14 $$ boolean needsDownload = !localZipFile.isFile()[ FD ]
Line_6 $$ final File distDir = localDistribution.getDistributionDir()-->Line_12 $$ return getAndVerifyDistributionRoot(distDir, distDir.getAbsolutePath())[ FD ]
Line_5 $$ final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration)-->Line_7 $$ final File localZipFile = localDistribution.getZipFile()[ FD ]
Line_11 $$ if (distDir.isDirectory() && markerFile.isFile()) -->Line_12 $$ return getAndVerifyDistributionRoot(distDir, distDir.getAbsolutePath())[ CD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_14 $$ boolean needsDownload = !localZipFile.isFile()[ CD ]
Line_15 $$ if (needsDownload) -->Line_18 $$ logger.log("Downloading " + distributionUrl)[ CD ]
Line_10 $$ final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".ok")-->Line_32 $$ markerFile.createNewFile()[ FD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() [ CD ]
Line_30 $$ File root = getAndVerifyDistributionRoot(distDir, distributionUrl.toString())-->Line_31 $$ setExecutablePermissions(root)[ FD ]
Line_15 $$ if (needsDownload) -->Line_20 $$ tmpZipFile.renameTo(localZipFile)[ CD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_5 $$ final PathAssembler.LocalDistribution localDistribution = pathAssembler.getDistribution(configuration)[ CD ]
Line_6 $$ final File distDir = localDistribution.getDistributionDir()-->Line_30 $$ File root = getAndVerifyDistributionRoot(distDir, distributionUrl.toString())[ FD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_15 $$ if (needsDownload) [ CD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_6 $$ final File distDir = localDistribution.getDistributionDir()[ CD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_31 $$ setExecutablePermissions(root)[ CD ]
Line_16 $$ File tmpZipFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".part")-->Line_20 $$ tmpZipFile.renameTo(localZipFile)[ FD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_11 $$ if (distDir.isDirectory() && markerFile.isFile()) [ CD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_32 $$ markerFile.createNewFile()[ CD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_3 $$ final URI distributionUrl = configuration.getDistribution()[ FD ]
Line_15 $$ if (needsDownload) -->Line_17 $$ tmpZipFile.delete()[ CD ]
Line_6 $$ final File distDir = localDistribution.getDistributionDir()-->Line_28 $$ logger.log("Unzipping " + localZipFile.getAbsolutePath() + " to " + distDir.getAbsolutePath())[ FD ]
Line_16 $$ File tmpZipFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".part")-->Line_17 $$ tmpZipFile.delete()[ FD ]
Line_15 $$ if (needsDownload) -->Line_19 $$ download.download(distributionUrl, tmpZipFile)[ CD ]
Line_10 $$ final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".ok")-->Line_11 $$ if (distDir.isDirectory() && markerFile.isFile()) [ FD ]
Line_15 $$ if (needsDownload) -->Line_16 $$ File tmpZipFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".part")[ CD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_22 $$ List<File> topLevelDirs = listDirs(distDir)[ CD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_27 $$ verifyDownloadChecksum(configuration.getDistribution().toString(), localZipFile, distributionSha256Sum)[ CD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_27 $$ verifyDownloadChecksum(configuration.getDistribution().toString(), localZipFile, distributionSha256Sum)[ FD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_29 $$ unzip(localZipFile, distDir)[ CD ]
Line_23 $$ for (File dir : topLevelDirs) -->Line_24 $$ logger.log("Deleting directory " + dir.getAbsolutePath())[ FD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_33 $$ return root[ CD ]
Line_7 $$ final File localZipFile = localDistribution.getZipFile()-->Line_27 $$ verifyDownloadChecksum(configuration.getDistribution().toString(), localZipFile, distributionSha256Sum)[ FD ]
Line_23 $$ for (File dir : topLevelDirs) -->Line_25 $$ deleteDir(dir)[ FD ]
Line_7 $$ final File localZipFile = localDistribution.getZipFile()-->Line_16 $$ File tmpZipFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".part")[ FD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_3 $$ final URI distributionUrl = configuration.getDistribution()[ CD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_4 $$ final String distributionSha256Sum = configuration.getDistributionSha256Sum()[ CD ]
Line_4 $$ final String distributionSha256Sum = configuration.getDistributionSha256Sum()-->Line_27 $$ verifyDownloadChecksum(configuration.getDistribution().toString(), localZipFile, distributionSha256Sum)[ FD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_28 $$ logger.log("Unzipping " + localZipFile.getAbsolutePath() + " to " + distDir.getAbsolutePath())[ CD ]
Line_8 $$ return exclusiveFileAccessManager.access(localZipFile, new Callable<File>() -->Line_10 $$ final File markerFile = new File(localZipFile.getParentFile(), localZipFile.getName() + ".ok")[ CD ]
Line_2 $$ public File createDist(final WrapperConfiguration configuration) throws Exception -->Line_4 $$ final String distributionSha256Sum = configuration.getDistributionSha256Sum()[ FD ]
