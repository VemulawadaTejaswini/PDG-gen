Line_3 $$ final File nodeDir = getNodeDir()-->Line_8 $$ project.delete(nodeDir)[ FD ]
Line_7 $$ if (nodeUrl.endsWith(".tar.gz")) -->Line_16 $$ String dirName = nodeFile.getName()[ CD ]
Line_9 $$ project.exec(new Action<ExecSpec>() -->Line_11 $$ execSpec.args("xfz", project.relativePath(nodeFile))[ CD ]
Line_3 $$ final File nodeDir = getNodeDir()-->Line_19 $$ dir.renameTo(nodeDir)[ FD ]
Line_21 $$ project.copy(new Action<CopySpec>() -->Line_24 $$ copySpec.into(nodeDir)[ CD ]
Line_5 $$ final Project project = getProject()-->Line_32 $$ copySpec.from(project.zipTree(npmFile))[ FD ]
Line_5 $$ final Project project = getProject()-->Line_9 $$ project.exec(new Action<ExecSpec>() [ FD ]
Line_30 $$ project.copy(new Action<CopySpec>() -->Line_32 $$ copySpec.from(project.zipTree(npmFile))[ CD ]
Line_3 $$ final File nodeDir = getNodeDir()-->Line_24 $$ copySpec.into(nodeDir)[ FD ]
Line_7 $$ if (nodeUrl.endsWith(".tar.gz")) -->Line_9 $$ project.exec(new Action<ExecSpec>() [ CD ]
Line_5 $$ final Project project = getProject()-->Line_11 $$ execSpec.args("xfz", project.relativePath(nodeFile))[ FD ]
Line_2 $$ public void downloadNode() throws IOException -->Line_6 $$ final File nodeFile = FileUtil.get(project, nodeUrl)[ CD ]
Line_21 $$ project.copy(new Action<CopySpec>() -->Line_23 $$ copySpec.from(nodeFile)[ CD ]
Line_7 $$ if (nodeUrl.endsWith(".tar.gz")) -->Line_17 $$ dirName = dirName.substring(0, dirName.lastIndexOf(".tar.gz"))[ CD ]
Line_21 $$ project.copy(new Action<CopySpec>() -->Line_32 $$ copySpec.from(project.zipTree(npmFile))[ FD ]
Line_28 $$ if (OSDetector.isWindows()) -->Line_29 $$ final File npmFile = FileUtil.get(project, getNpmUrl())[ CD ]
Line_21 $$ project.copy(new Action<CopySpec>() -->Line_33 $$ copySpec.into(nodeDir)[ FD ]
Line_3 $$ final File nodeDir = getNodeDir()-->Line_33 $$ copySpec.into(nodeDir)[ FD ]
Line_5 $$ final Project project = getProject()-->Line_30 $$ project.copy(new Action<CopySpec>() [ FD ]
Line_2 $$ public void downloadNode() throws IOException -->Line_28 $$ if (OSDetector.isWindows()) [ CD ]
Line_5 $$ final Project project = getProject()-->Line_6 $$ final File nodeFile = FileUtil.get(project, nodeUrl)[ FD ]
Line_7 $$ if (nodeUrl.endsWith(".tar.gz")) -->Line_19 $$ dir.renameTo(nodeDir)[ CD ]
Line_6 $$ final File nodeFile = FileUtil.get(project, nodeUrl)-->Line_11 $$ execSpec.args("xfz", project.relativePath(nodeFile))[ FD ]
Line_5 $$ final Project project = getProject()-->Line_8 $$ project.delete(nodeDir)[ FD ]
Line_5 $$ final Project project = getProject()-->Line_12 $$ execSpec.args("-C", project.relativePath(nodeDir.getParentFile()))[ FD ]
Line_28 $$ if (OSDetector.isWindows()) -->Line_30 $$ project.copy(new Action<CopySpec>() [ CD ]
Line_21 $$ project.copy(new Action<CopySpec>() -->Line_23 $$ copySpec.from(nodeFile)[ FD ]
Line_9 $$ project.exec(new Action<ExecSpec>() -->Line_12 $$ execSpec.args("-C", project.relativePath(nodeDir.getParentFile()))[ FD ]
Line_2 $$ public void downloadNode() throws IOException -->Line_5 $$ final Project project = getProject()[ CD ]
Line_30 $$ project.copy(new Action<CopySpec>() -->Line_33 $$ copySpec.into(nodeDir)[ FD ]
Line_5 $$ final Project project = getProject()-->Line_21 $$ project.copy(new Action<CopySpec>() [ FD ]
Line_5 $$ final Project project = getProject()-->Line_29 $$ final File npmFile = FileUtil.get(project, getNpmUrl())[ FD ]
Line_4 $$ final String nodeUrl = getNodeUrl()-->Line_6 $$ final File nodeFile = FileUtil.get(project, nodeUrl)[ FD ]
Line_2 $$ public void downloadNode() throws IOException -->Line_7 $$ if (nodeUrl.endsWith(".tar.gz")) [ CD ]
Line_7 $$ if (nodeUrl.endsWith(".tar.gz")) -->Line_8 $$ project.delete(nodeDir)[ CD ]
Line_6 $$ final File nodeFile = FileUtil.get(project, nodeUrl)-->Line_16 $$ String dirName = nodeFile.getName()[ FD ]
Line_3 $$ final File nodeDir = getNodeDir()-->Line_18 $$ File dir = new File(nodeDir.getParentFile(), dirName)[ FD ]
Line_6 $$ final File nodeFile = FileUtil.get(project, nodeUrl)-->Line_23 $$ copySpec.from(nodeFile)[ FD ]
Line_30 $$ project.copy(new Action<CopySpec>() -->Line_33 $$ copySpec.into(nodeDir)[ CD ]
Line_30 $$ project.copy(new Action<CopySpec>() -->Line_32 $$ copySpec.from(project.zipTree(npmFile))[ FD ]
Line_2 $$ public void downloadNode() throws IOException -->Line_4 $$ final String nodeUrl = getNodeUrl()[ CD ]
Line_9 $$ project.exec(new Action<ExecSpec>() -->Line_11 $$ execSpec.args("xfz", project.relativePath(nodeFile))[ FD ]
Line_2 $$ public void downloadNode() throws IOException -->Line_3 $$ final File nodeDir = getNodeDir()[ CD ]
Line_21 $$ project.copy(new Action<CopySpec>() -->Line_24 $$ copySpec.into(nodeDir)[ FD ]
Line_9 $$ project.exec(new Action<ExecSpec>() -->Line_12 $$ execSpec.args("-C", project.relativePath(nodeDir.getParentFile()))[ CD ]
Line_9 $$ project.exec(new Action<ExecSpec>() -->Line_13 $$ execSpec.setExecutable("tar")[ FD ]
Line_3 $$ final File nodeDir = getNodeDir()-->Line_12 $$ execSpec.args("-C", project.relativePath(nodeDir.getParentFile()))[ FD ]
Line_9 $$ project.exec(new Action<ExecSpec>() -->Line_13 $$ execSpec.setExecutable("tar")[ CD ]
Line_7 $$ if (nodeUrl.endsWith(".tar.gz")) -->Line_21 $$ project.copy(new Action<CopySpec>() [ CD ]
Line_4 $$ final String nodeUrl = getNodeUrl()-->Line_7 $$ if (nodeUrl.endsWith(".tar.gz")) [ FD ]
