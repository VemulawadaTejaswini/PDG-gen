Line_19 $$ int i = 0-->Line_29 $$ i += metadata.chunkLength()[ FD ]
Line_6 $$ File f = File.createTempFile("testMapForCompressionMetadata", "1")-->Line_8 $$ File cf = File.createTempFile(f.getName() + ".metadata", "1")[ FD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_22 $$ MmappedRegions.Region region = regions.floor(chunk.offset)[ CD ]
Line_22 $$ MmappedRegions.Region region = regions.floor(chunk.offset)-->Line_27 $$ assertEquals(chunk.offset, region.bottom())[ FD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_25 $$ assertNotNull(compressedChunk)[ CD ]
Line_3 $$ int OLD_MAX_SEGMENT_SIZE = MmappedRegions.MAX_SEGMENT_SIZE-->Line_32 $$ MmappedRegions.MAX_SEGMENT_SIZE = OLD_MAX_SEGMENT_SIZE[ FD ]
Line_22 $$ MmappedRegions.Region region = regions.floor(chunk.offset)-->Line_28 $$ assertEquals(chunk.offset + chunk.length + 4, region.top())[ FD ]
Line_24 $$ ByteBuffer compressedChunk = region.buffer.duplicate()-->Line_25 $$ assertNotNull(compressedChunk)[ FD ]
Line_6 $$ File f = File.createTempFile("testMapForCompressionMetadata", "1")-->Line_15 $$ CompressionMetadata metadata = new CompressionMetadata(cf.getAbsolutePath(), f.length(), ChecksumType.CRC32)[ FD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_4 $$ MmappedRegions.MAX_SEGMENT_SIZE = 1024[ CD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_3 $$ int OLD_MAX_SEGMENT_SIZE = MmappedRegions.MAX_SEGMENT_SIZE[ CD ]
Line_8 $$ File cf = File.createTempFile(f.getName() + ".metadata", "1")-->Line_11 $$ try (SequentialWriter writer = new CompressedSequentialWriter(f, cf.getAbsolutePath(), CompressionParams.snappy(), sstableMetadataCollector)) [ FD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_15 $$ CompressionMetadata metadata = new CompressionMetadata(cf.getAbsolutePath(), f.length(), ChecksumType.CRC32)[ CD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_24 $$ ByteBuffer compressedChunk = region.buffer.duplicate()[ CD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_27 $$ assertEquals(chunk.offset, region.bottom())[ CD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_6 $$ File f = File.createTempFile("testMapForCompressionMetadata", "1")[ CD ]
Line_11 $$ try (SequentialWriter writer = new CompressedSequentialWriter(f, cf.getAbsolutePath(), CompressionParams.snappy(), sstableMetadataCollector)) -->Line_12 $$ writer.write(buffer)[ FD ]
Line_5 $$ ByteBuffer buffer = allocateBuffer(128 * 1024)-->Line_12 $$ writer.write(buffer)[ FD ]
Line_15 $$ CompressionMetadata metadata = new CompressionMetadata(cf.getAbsolutePath(), f.length(), ChecksumType.CRC32)-->Line_16 $$ try (ChannelProxy channel = new ChannelProxy(f);[ FD ]
Line_16 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_22 $$ MmappedRegions.Region region = regions.floor(chunk.offset)[ FD ]
Line_22 $$ MmappedRegions.Region region = regions.floor(chunk.offset)-->Line_23 $$ assertNotNull(region)[ FD ]
Line_24 $$ ByteBuffer compressedChunk = region.buffer.duplicate()-->Line_26 $$ assertEquals(chunk.length + 4, compressedChunk.capacity())[ FD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_28 $$ assertEquals(chunk.offset + chunk.length + 4, region.top())[ CD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_23 $$ assertNotNull(region)[ CD ]
Line_8 $$ File cf = File.createTempFile(f.getName() + ".metadata", "1")-->Line_15 $$ CompressionMetadata metadata = new CompressionMetadata(cf.getAbsolutePath(), f.length(), ChecksumType.CRC32)[ FD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_10 $$ MetadataCollector sstableMetadataCollector = new MetadataCollector(new ClusteringComparator(BytesType.instance)).replayPosition(null)[ CD ]
Line_19 $$ int i = 0-->Line_21 $$ CompressionMetadata.Chunk chunk = metadata.chunkFor(i)[ FD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_8 $$ File cf = File.createTempFile(f.getName() + ".metadata", "1")[ CD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_21 $$ CompressionMetadata.Chunk chunk = metadata.chunkFor(i)[ CD ]
Line_11 $$ try (SequentialWriter writer = new CompressedSequentialWriter(f, cf.getAbsolutePath(), CompressionParams.snappy(), sstableMetadataCollector)) -->Line_13 $$ writer.finish()[ FD ]
Line_15 $$ CompressionMetadata metadata = new CompressionMetadata(cf.getAbsolutePath(), f.length(), ChecksumType.CRC32)-->Line_29 $$ i += metadata.chunkLength()[ FD ]
Line_5 $$ ByteBuffer buffer = allocateBuffer(128 * 1024)-->Line_20 $$ while (i < buffer.capacity()) [ FD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_5 $$ ByteBuffer buffer = allocateBuffer(128 * 1024)[ CD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_7 $$ f.deleteOnExit()[ CD ]
Line_2 $$ public void testMapForCompressionMetadata() throws Exception -->Line_9 $$ cf.deleteOnExit()[ CD ]
Line_19 $$ int i = 0-->Line_20 $$ while (i < buffer.capacity()) [ FD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_26 $$ assertEquals(chunk.length + 4, compressedChunk.capacity())[ CD ]
Line_15 $$ CompressionMetadata metadata = new CompressionMetadata(cf.getAbsolutePath(), f.length(), ChecksumType.CRC32)-->Line_21 $$ CompressionMetadata.Chunk chunk = metadata.chunkFor(i)[ FD ]
Line_8 $$ File cf = File.createTempFile(f.getName() + ".metadata", "1")-->Line_9 $$ cf.deleteOnExit()[ FD ]
Line_16 $$ try (ChannelProxy channel = new ChannelProxy(f);-->Line_18 $$ assertFalse(regions.isEmpty())[ FD ]
Line_20 $$ while (i < buffer.capacity()) -->Line_29 $$ i += metadata.chunkLength()[ CD ]
Line_29 $$ i += metadata.chunkLength()-->Line_20 $$ while (i < buffer.capacity()) [ FD ]
Line_6 $$ File f = File.createTempFile("testMapForCompressionMetadata", "1")-->Line_7 $$ f.deleteOnExit()[ FD ]
Line_15 $$ CompressionMetadata metadata = new CompressionMetadata(cf.getAbsolutePath(), f.length(), ChecksumType.CRC32)-->Line_33 $$ metadata.close()[ FD ]
Line_29 $$ i += metadata.chunkLength()-->Line_21 $$ CompressionMetadata.Chunk chunk = metadata.chunkFor(i)[ FD ]
