Line_24 $$ if ((entry != null && entry.isResultOfMerge()) || mergedFiles.isMerged(file)) -->Line_26 $$ if (mergedFiles.isCreatedBySecondParty(file)) [ CD ]
Line_3 $$ if (commitOperationType.equals(U_COMMIT_OPERATION_TYPE)) -->Line_10 $$ return UPDATING[ CD ]
Line_33 $$ if (commitOperationType.equals(Y_COMMIT_OPERATION_TYPE)) -->Line_34 $$ return REMOVED_FROM_REPOSITORY[ CD ]
Line_33 $$ if (commitOperationType.equals(Y_COMMIT_OPERATION_TYPE)) -->Line_35 $$ if (commitOperationType.equals("?")) [ CD ]
Line_26 $$ if (mergedFiles.isCreatedBySecondParty(file)) -->Line_27 $$ return CREATED_BY_SECOND_PARTY[ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_15 $$ if (commitOperationType.equals(R_COMMIT_OPERATION_TYPE)) [ FD ]
Line_18 $$ if (mergedFiles.isMerged(file)) -->Line_21 $$ return MODIFIED[ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_3 $$ if (commitOperationType.equals(U_COMMIT_OPERATION_TYPE)) [ CD ]
Line_5 $$ if (virtualParent == null)-->Line_6 $$ return CREATED[ CD ]
Line_17 $$ if (commitOperationType.equals(M_COMMIT_OPERATION_TYPE)) -->Line_18 $$ if (mergedFiles.isMerged(file)) [ CD ]
Line_13 $$ if (commitOperationType.equals(A_COMMIT_OPERATION_TYPE)) -->Line_14 $$ return LOCALLY_ADDED[ CD ]
Line_7 $$ if (updatedFilesManager.isNewlyCreatedEntryFor(virtualParent, file.getName())) -->Line_8 $$ return CREATED[ CD ]
Line_15 $$ if (commitOperationType.equals(R_COMMIT_OPERATION_TYPE)) -->Line_17 $$ if (commitOperationType.equals(M_COMMIT_OPERATION_TYPE)) [ CD ]
Line_13 $$ if (commitOperationType.equals(A_COMMIT_OPERATION_TYPE)) -->Line_15 $$ if (commitOperationType.equals(R_COMMIT_OPERATION_TYPE)) [ CD ]
Line_28 $$ if (CvsUtil.isLocallyRemoved(file)) -->Line_31 $$ return REMOVED_FROM_SERVER_CONFLICT[ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_3 $$ if (commitOperationType.equals(U_COMMIT_OPERATION_TYPE)) [ FD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_11 $$ if (commitOperationType.equals(P_COMMIT_OPERATION_TYPE)) [ FD ]
Line_23 $$ if (commitOperationType.equals(CONFLICT)) -->Line_24 $$ if ((entry != null && entry.isResultOfMerge()) || mergedFiles.isMerged(file)) [ CD ]
Line_11 $$ if (commitOperationType.equals(P_COMMIT_OPERATION_TYPE)) -->Line_12 $$ return PATCHED[ CD ]
Line_11 $$ if (commitOperationType.equals(P_COMMIT_OPERATION_TYPE)) -->Line_13 $$ if (commitOperationType.equals(A_COMMIT_OPERATION_TYPE)) [ CD ]
Line_4 $$ VirtualFile virtualParent = CvsVfsUtil.getParentFor(file)-->Line_7 $$ if (updatedFilesManager.isNewlyCreatedEntryFor(virtualParent, file.getName())) [ FD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_17 $$ if (commitOperationType.equals(M_COMMIT_OPERATION_TYPE)) [ FD ]
Line_35 $$ if (commitOperationType.equals("?")) -->Line_36 $$ return NOT_IN_REPOSITORY[ CD ]
Line_24 $$ if ((entry != null && entry.isResultOfMerge()) || mergedFiles.isMerged(file)) -->Line_25 $$ return MERGED_WITH_CONFLICTS[ CD ]
Line_3 $$ if (commitOperationType.equals(U_COMMIT_OPERATION_TYPE)) -->Line_7 $$ if (updatedFilesManager.isNewlyCreatedEntryFor(virtualParent, file.getName())) [ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_24 $$ if ((entry != null && entry.isResultOfMerge()) || mergedFiles.isMerged(file)) [ FD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_35 $$ if (commitOperationType.equals("?")) [ FD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_4 $$ VirtualFile virtualParent = CvsVfsUtil.getParentFor(file)[ FD ]
Line_4 $$ VirtualFile virtualParent = CvsVfsUtil.getParentFor(file)-->Line_5 $$ if (virtualParent == null)[ FD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_28 $$ if (CvsUtil.isLocallyRemoved(file)) [ FD ]
Line_3 $$ if (commitOperationType.equals(U_COMMIT_OPERATION_TYPE)) -->Line_11 $$ if (commitOperationType.equals(P_COMMIT_OPERATION_TYPE)) [ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_23 $$ if (commitOperationType.equals(CONFLICT)) [ FD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_33 $$ if (commitOperationType.equals(Y_COMMIT_OPERATION_TYPE)) [ FD ]
Line_35 $$ if (commitOperationType.equals("?")) -->Line_38 $$ return UNKNOWN[ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_13 $$ if (commitOperationType.equals(A_COMMIT_OPERATION_TYPE)) [ FD ]
Line_28 $$ if (CvsUtil.isLocallyRemoved(file)) -->Line_29 $$ return LOCALLY_REMOVED_CONFLICT[ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_26 $$ if (mergedFiles.isCreatedBySecondParty(file)) [ FD ]
Line_17 $$ if (commitOperationType.equals(M_COMMIT_OPERATION_TYPE)) -->Line_23 $$ if (commitOperationType.equals(CONFLICT)) [ CD ]
Line_3 $$ if (commitOperationType.equals(U_COMMIT_OPERATION_TYPE)) -->Line_5 $$ if (virtualParent == null)[ CD ]
Line_18 $$ if (mergedFiles.isMerged(file)) -->Line_19 $$ return MERGED[ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_18 $$ if (mergedFiles.isMerged(file)) [ FD ]
Line_3 $$ if (commitOperationType.equals(U_COMMIT_OPERATION_TYPE)) -->Line_4 $$ VirtualFile virtualParent = CvsVfsUtil.getParentFor(file)[ CD ]
Line_23 $$ if (commitOperationType.equals(CONFLICT)) -->Line_33 $$ if (commitOperationType.equals(Y_COMMIT_OPERATION_TYPE)) [ CD ]
Line_26 $$ if (mergedFiles.isCreatedBySecondParty(file)) -->Line_28 $$ if (CvsUtil.isLocallyRemoved(file)) [ CD ]
Line_15 $$ if (commitOperationType.equals(R_COMMIT_OPERATION_TYPE)) -->Line_16 $$ return LOCALLY_REMOVED[ CD ]
Line_2 $$ private static int getCommitOperationType(String commitOperationType, File file, Entry entry, UpdatedFilesManager mergedFiles, UpdatedFilesManager updatedFilesManager) -->Line_7 $$ if (updatedFilesManager.isNewlyCreatedEntryFor(virtualParent, file.getName())) [ FD ]
