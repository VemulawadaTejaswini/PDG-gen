Line_9 $$ final File sourceRoot = root.getDirectory()-->Line_18 $$ scanSources(sourceRoot, ProjectFromSourcesBuilderImpl.getPackagePrefix(root), usedPackages, selfPackages)[ FD ]
Line_9 $$ final File sourceRoot = root.getDirectory()-->Line_26 $$ final File srcRoot = sourceRoot.getDirectory()[ FD ]
Line_41 $$ final Set<String> moduleNames = new HashSet<String>(myExistingModuleNames)-->Line_43 $$ final String suggested = suggestUniqueName(moduleNames, module.getName())[ FD ]
Line_14 $$ final HashSet<String> usedPackages = new HashSet<String>()-->Line_15 $$ mySourceRootToReferencedPackagesMap.put(sourceRoot, usedPackages)[ FD ]
Line_43 $$ final String suggested = suggestUniqueName(moduleNames, module.getName())-->Line_45 $$ moduleNames.add(suggested)[ FD ]
Line_28 $$ ModuleDescriptor moduleDescriptor = contentRootToModules.get(moduleContentRoot)-->Line_32 $$ moduleDescriptor = createModuleDescriptor(moduleContentRoot, Collections.singletonList(sourceRoot))[ FD ]
Line_7 $$ List<DetectedSourceRoot> processedRoots = new ArrayList<DetectedSourceRoot>()-->Line_20 $$ processedRoots.add(root)[ FD ]
Line_14 $$ final HashSet<String> usedPackages = new HashSet<String>()-->Line_18 $$ scanSources(sourceRoot, ProjectFromSourcesBuilderImpl.getPackagePrefix(root), usedPackages, selfPackages)[ FD ]
Line_28 $$ ModuleDescriptor moduleDescriptor = contentRootToModules.get(moduleContentRoot)-->Line_30 $$ moduleDescriptor.addSourceRoot(moduleContentRoot, sourceRoot)[ FD ]
Line_28 $$ ModuleDescriptor moduleDescriptor = contentRootToModules.get(moduleContentRoot)-->Line_33 $$ contentRootToModules.put(moduleContentRoot, moduleDescriptor)[ FD ]
Line_29 $$ if (moduleDescriptor != null) -->Line_33 $$ contentRootToModules.put(moduleContentRoot, moduleDescriptor)[ CD ]
Line_16 $$ final HashSet<String> selfPackages = new HashSet<String>()-->Line_19 $$ usedPackages.removeAll(selfPackages)[ FD ]
Line_2 $$ public void scanModules() -->Line_3 $$ myProgress.setIndeterminate(true)[ CD ]
Line_9 $$ final File sourceRoot = root.getDirectory()-->Line_13 $$ myProgress.setText("Scanning " + sourceRoot.getPath())[ FD ]
Line_9 $$ final File sourceRoot = root.getDirectory()-->Line_32 $$ moduleDescriptor = createModuleDescriptor(moduleContentRoot, Collections.singletonList(sourceRoot))[ FD ]
Line_4 $$ final Map<File, ModuleDescriptor> contentRootToModules = new HashMap<File, ModuleDescriptor>()-->Line_40 $$ myModules = new ArrayList<ModuleDescriptor>(contentRootToModules.values())[ FD ]
Line_27 $$ final File moduleContentRoot = myEntryPointRoots.contains(srcRoot) ? srcRoot : srcRoot.getParentFile()-->Line_30 $$ moduleDescriptor.addSourceRoot(moduleContentRoot, sourceRoot)[ FD ]
Line_29 $$ if (moduleDescriptor != null) -->Line_32 $$ moduleDescriptor = createModuleDescriptor(moduleContentRoot, Collections.singletonList(sourceRoot))[ CD ]
Line_28 $$ ModuleDescriptor moduleDescriptor = contentRootToModules.get(moduleContentRoot)-->Line_29 $$ if (moduleDescriptor != null) [ FD ]
Line_8 $$ for (DetectedSourceRoot root : mySourceRoots) -->Line_18 $$ scanSources(sourceRoot, ProjectFromSourcesBuilderImpl.getPackagePrefix(root), usedPackages, selfPackages)[ FD ]
Line_32 $$ moduleDescriptor = createModuleDescriptor(moduleContentRoot, Collections.singletonList(sourceRoot))-->Line_33 $$ contentRootToModules.put(moduleContentRoot, moduleDescriptor)[ FD ]
Line_29 $$ if (moduleDescriptor != null) -->Line_30 $$ moduleDescriptor.addSourceRoot(moduleContentRoot, sourceRoot)[ CD ]
Line_9 $$ final File sourceRoot = root.getDirectory()-->Line_30 $$ moduleDescriptor.addSourceRoot(moduleContentRoot, sourceRoot)[ FD ]
Line_27 $$ final File moduleContentRoot = myEntryPointRoots.contains(srcRoot) ? srcRoot : srcRoot.getParentFile()-->Line_33 $$ contentRootToModules.put(moduleContentRoot, moduleDescriptor)[ FD ]
Line_8 $$ for (DetectedSourceRoot root : mySourceRoots) -->Line_9 $$ final File sourceRoot = root.getDirectory()[ FD ]
Line_2 $$ public void scanModules() -->Line_4 $$ final Map<File, ModuleDescriptor> contentRootToModules = new HashMap<File, ModuleDescriptor>()[ CD ]
Line_9 $$ final File sourceRoot = root.getDirectory()-->Line_17 $$ mySourceRootToPackagesMap.put(sourceRoot, selfPackages)[ FD ]
Line_4 $$ final Map<File, ModuleDescriptor> contentRootToModules = new HashMap<File, ModuleDescriptor>()-->Line_33 $$ contentRootToModules.put(moduleContentRoot, moduleDescriptor)[ FD ]
Line_27 $$ final File moduleContentRoot = myEntryPointRoots.contains(srcRoot) ? srcRoot : srcRoot.getParentFile()-->Line_32 $$ moduleDescriptor = createModuleDescriptor(moduleContentRoot, Collections.singletonList(sourceRoot))[ FD ]
Line_9 $$ final File sourceRoot = root.getDirectory()-->Line_10 $$ if (myIgnoredNames.contains(sourceRoot.getName())) [ FD ]
Line_9 $$ final File sourceRoot = root.getDirectory()-->Line_15 $$ mySourceRootToReferencedPackagesMap.put(sourceRoot, usedPackages)[ FD ]
Line_4 $$ final Map<File, ModuleDescriptor> contentRootToModules = new HashMap<File, ModuleDescriptor>()-->Line_36 $$ buildModuleDependencies(contentRootToModules)[ FD ]
Line_8 $$ for (DetectedSourceRoot root : mySourceRoots) -->Line_20 $$ processedRoots.add(root)[ FD ]
Line_26 $$ final File srcRoot = sourceRoot.getDirectory()-->Line_27 $$ final File moduleContentRoot = myEntryPointRoots.contains(srcRoot) ? srcRoot : srcRoot.getParentFile()[ FD ]
Line_42 $$ for (ModuleDescriptor module : myModules) -->Line_44 $$ module.setName(suggested)[ FD ]
Line_14 $$ final HashSet<String> usedPackages = new HashSet<String>()-->Line_19 $$ usedPackages.removeAll(selfPackages)[ FD ]
Line_41 $$ final Set<String> moduleNames = new HashSet<String>(myExistingModuleNames)-->Line_45 $$ moduleNames.add(suggested)[ FD ]
Line_27 $$ final File moduleContentRoot = myEntryPointRoots.contains(srcRoot) ? srcRoot : srcRoot.getParentFile()-->Line_28 $$ ModuleDescriptor moduleDescriptor = contentRootToModules.get(moduleContentRoot)[ FD ]
Line_2 $$ public void scanModules() -->Line_41 $$ final Set<String> moduleNames = new HashSet<String>(myExistingModuleNames)[ CD ]
Line_43 $$ final String suggested = suggestUniqueName(moduleNames, module.getName())-->Line_44 $$ module.setName(suggested)[ FD ]
Line_16 $$ final HashSet<String> selfPackages = new HashSet<String>()-->Line_18 $$ scanSources(sourceRoot, ProjectFromSourcesBuilderImpl.getPackagePrefix(root), usedPackages, selfPackages)[ FD ]
Line_4 $$ final Map<File, ModuleDescriptor> contentRootToModules = new HashMap<File, ModuleDescriptor>()-->Line_28 $$ ModuleDescriptor moduleDescriptor = contentRootToModules.get(moduleContentRoot)[ FD ]
Line_16 $$ final HashSet<String> selfPackages = new HashSet<String>()-->Line_17 $$ mySourceRootToPackagesMap.put(sourceRoot, selfPackages)[ FD ]
Line_42 $$ for (ModuleDescriptor module : myModules) -->Line_43 $$ final String suggested = suggestUniqueName(moduleNames, module.getName())[ FD ]
