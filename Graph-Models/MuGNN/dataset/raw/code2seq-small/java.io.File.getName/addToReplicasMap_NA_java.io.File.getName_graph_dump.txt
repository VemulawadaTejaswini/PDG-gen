Line_9 $$ file = recoverTempUnlinkedBlock(file)-->Line_20 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())[ FD ]
Line_9 $$ file = recoverTempUnlinkedBlock(file)-->Line_14 $$ if (!Block.isBlockFilename(file))[ FD ]
Line_9 $$ file = recoverTempUnlinkedBlock(file)-->Line_16 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)[ FD ]
Line_2 $$ void addToReplicasMap(ReplicaMap volumeMap, File dir, boolean isFinalized) throws IOException -->Line_8 $$ if (isFinalized && FsDatasetUtil.isUnlinkTmpFile(file)) [ FD ]
Line_27 $$ if (sc.hasNextLong() && (sc.nextLong() > Time.now())) -->Line_28 $$ newReplica = new ReplicaBeingWritten(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile(), null)[ CD ]
Line_24 $$ Scanner sc = null-->Line_37 $$ if (sc != null) [ FD ]
Line_4 $$ for (File file : files) -->Line_17 $$ long blockId = Block.filename2id(file.getName())[ FD ]
Line_18 $$ ReplicaInfo newReplica = null-->Line_42 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_28 $$ newReplica = new ReplicaBeingWritten(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile(), null)-->Line_45 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)[ FD ]
Line_26 $$ sc = new Scanner(restartMeta)-->Line_38 $$ sc.close()[ FD ]
Line_42 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())-->Line_45 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)[ FD ]
Line_45 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)-->Line_47 $$ FsDatasetImpl.LOG.warn("Two block files with the same block id exist " + "on disk: " + oldReplica.getBlockFile() + " and " + file)[ FD ]
Line_20 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())-->Line_42 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_46 $$ if (oldReplica != null) -->Line_47 $$ FsDatasetImpl.LOG.warn("Two block files with the same block id exist " + "on disk: " + oldReplica.getBlockFile() + " and " + file)[ CD ]
Line_4 $$ for (File file : files) -->Line_42 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_2 $$ void addToReplicasMap(ReplicaMap volumeMap, File dir, boolean isFinalized) throws IOException -->Line_45 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)[ FD ]
Line_26 $$ sc = new Scanner(restartMeta)-->Line_27 $$ if (sc.hasNextLong() && (sc.nextLong() > Time.now())) [ FD ]
Line_23 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")-->Line_33 $$ FsDatasetImpl.LOG.warn("Failed to delete restart meta file: " + restartMeta.getPath())[ FD ]
Line_19 $$ if (isFinalized) -->Line_24 $$ Scanner sc = null[ CD ]
Line_9 $$ file = recoverTempUnlinkedBlock(file)-->Line_42 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_18 $$ ReplicaInfo newReplica = null-->Line_20 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())[ FD ]
Line_20 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())-->Line_28 $$ newReplica = new ReplicaBeingWritten(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile(), null)[ FD ]
Line_20 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())-->Line_45 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)[ FD ]
Line_2 $$ void addToReplicasMap(ReplicaMap volumeMap, File dir, boolean isFinalized) throws IOException -->Line_3 $$ File[] files = FileUtil.listFiles(dir)[ CD ]
Line_4 $$ for (File file : files) -->Line_6 $$ addToReplicasMap(volumeMap, file, isFinalized)[ FD ]
Line_41 $$ if (loadRwr) -->Line_42 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ CD ]
Line_9 $$ file = recoverTempUnlinkedBlock(file)-->Line_28 $$ newReplica = new ReplicaBeingWritten(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile(), null)[ FD ]
Line_8 $$ if (isFinalized && FsDatasetUtil.isUnlinkTmpFile(file)) -->Line_10 $$ if (file == null) [ CD ]
Line_4 $$ for (File file : files) -->Line_10 $$ if (file == null) [ FD ]
Line_24 $$ Scanner sc = null-->Line_31 $$ sc.close()[ FD ]
Line_4 $$ for (File file : files) -->Line_23 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")[ FD ]
Line_37 $$ if (sc != null) -->Line_38 $$ sc.close()[ CD ]
Line_9 $$ file = recoverTempUnlinkedBlock(file)-->Line_23 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")[ FD ]
Line_3 $$ File[] files = FileUtil.listFiles(dir)-->Line_16 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)[ FD ]
Line_2 $$ void addToReplicasMap(ReplicaMap volumeMap, File dir, boolean isFinalized) throws IOException -->Line_6 $$ addToReplicasMap(volumeMap, file, isFinalized)[ FD ]
Line_18 $$ ReplicaInfo newReplica = null-->Line_28 $$ newReplica = new ReplicaBeingWritten(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile(), null)[ FD ]
Line_4 $$ for (File file : files) -->Line_8 $$ if (isFinalized && FsDatasetUtil.isUnlinkTmpFile(file)) [ FD ]
Line_4 $$ for (File file : files) -->Line_16 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)[ FD ]
Line_19 $$ if (isFinalized) -->Line_41 $$ if (loadRwr) [ CD ]
Line_26 $$ sc = new Scanner(restartMeta)-->Line_31 $$ sc.close()[ FD ]
Line_23 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")-->Line_32 $$ if (restartMeta.delete()) [ FD ]
Line_28 $$ newReplica = new ReplicaBeingWritten(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile(), null)-->Line_42 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_9 $$ file = recoverTempUnlinkedBlock(file)-->Line_10 $$ if (file == null) [ FD ]
Line_19 $$ if (isFinalized) -->Line_22 $$ boolean loadRwr = true[ CD ]
Line_22 $$ boolean loadRwr = true-->Line_29 $$ loadRwr = false[ FD ]
Line_5 $$ if (file.isDirectory()) -->Line_6 $$ addToReplicasMap(volumeMap, file, isFinalized)[ CD ]
Line_19 $$ if (isFinalized) -->Line_20 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())[ CD ]
Line_24 $$ Scanner sc = null-->Line_26 $$ sc = new Scanner(restartMeta)[ FD ]
Line_24 $$ Scanner sc = null-->Line_38 $$ sc.close()[ FD ]
Line_16 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)-->Line_42 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_9 $$ file = recoverTempUnlinkedBlock(file)-->Line_17 $$ long blockId = Block.filename2id(file.getName())[ FD ]
Line_26 $$ sc = new Scanner(restartMeta)-->Line_37 $$ if (sc != null) [ FD ]
Line_27 $$ if (sc.hasNextLong() && (sc.nextLong() > Time.now())) -->Line_29 $$ loadRwr = false[ CD ]
Line_4 $$ for (File file : files) -->Line_14 $$ if (!Block.isBlockFilename(file))[ FD ]
Line_2 $$ void addToReplicasMap(ReplicaMap volumeMap, File dir, boolean isFinalized) throws IOException -->Line_3 $$ File[] files = FileUtil.listFiles(dir)[ FD ]
Line_24 $$ Scanner sc = null-->Line_27 $$ if (sc.hasNextLong() && (sc.nextLong() > Time.now())) [ FD ]
Line_4 $$ for (File file : files) -->Line_20 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())[ FD ]
Line_18 $$ ReplicaInfo newReplica = null-->Line_45 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)[ FD ]
Line_45 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)-->Line_46 $$ if (oldReplica != null) [ FD ]
Line_4 $$ for (File file : files) -->Line_5 $$ if (file.isDirectory()) [ FD ]
Line_8 $$ if (isFinalized && FsDatasetUtil.isUnlinkTmpFile(file)) -->Line_9 $$ file = recoverTempUnlinkedBlock(file)[ CD ]
Line_4 $$ for (File file : files) -->Line_28 $$ newReplica = new ReplicaBeingWritten(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile(), null)[ FD ]
Line_16 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)-->Line_28 $$ newReplica = new ReplicaBeingWritten(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile(), null)[ FD ]
Line_19 $$ if (isFinalized) -->Line_23 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")[ CD ]
Line_4 $$ for (File file : files) -->Line_9 $$ file = recoverTempUnlinkedBlock(file)[ FD ]
Line_32 $$ if (restartMeta.delete()) -->Line_33 $$ FsDatasetImpl.LOG.warn("Failed to delete restart meta file: " + restartMeta.getPath())[ CD ]
