Line_12 $$ for (Map.Entry<Long, Long> entry : offsetToTxId.entrySet()) -->Line_14 $$ long txId = entry.getValue()[ FD ]
Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_11 $$ assertEquals(NUM_TXNS + 1, validation.getEndTxId())[ FD ]
Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_30 $$ assertTrue(!validation.hasCorruptHeader())[ FD ]
Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_29 $$ assertEquals("Failed when corrupting txid " + txId + " txn opcode " + "at " + txOffset, expectedEndTxId, validation.getEndTxId())[ FD ]
Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_27 $$ validation = EditLogFileInputStream.validateEditLog(logFile)[ FD ]
Line_17 $$ validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_30 $$ assertTrue(!validation.hasCorruptHeader())[ FD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_26 $$ truncateFile(logFile, txOffset)[ FD ]
Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_10 $$ assertTrue(!validation.hasCorruptHeader())[ FD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_17 $$ validation = EditLogFileInputStream.validateEditLog(logFile)[ FD ]
Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_20 $$ assertTrue(!validation.hasCorruptHeader())[ FD ]
Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_17 $$ validation = EditLogFileInputStream.validateEditLog(logFile)[ FD ]
Line_7 $$ File logFileBak = new File(testDir, logFile.getName() + ".bak")-->Line_25 $$ Files.copy(logFileBak, logFile)[ FD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_7 $$ File logFileBak = new File(testDir, logFile.getName() + ".bak")[ CD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_16 $$ corruptByteInFile(logFile, txOffset)[ FD ]
Line_12 $$ for (Map.Entry<Long, Long> entry : offsetToTxId.entrySet()) -->Line_13 $$ long txOffset = entry.getKey()[ FD ]
Line_7 $$ File logFileBak = new File(testDir, logFile.getName() + ".bak")-->Line_15 $$ Files.copy(logFileBak, logFile)[ FD ]
Line_27 $$ validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_30 $$ assertTrue(!validation.hasCorruptHeader())[ FD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_4 $$ SortedMap<Long, Long> offsetToTxId = Maps.newTreeMap()[ CD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)[ CD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)[ CD ]
Line_17 $$ validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_27 $$ validation = EditLogFileInputStream.validateEditLog(logFile)[ FD ]
Line_7 $$ File logFileBak = new File(testDir, logFile.getName() + ".bak")-->Line_8 $$ Files.copy(logFile, logFileBak)[ FD ]
Line_17 $$ validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_29 $$ assertEquals("Failed when corrupting txid " + txId + " txn opcode " + "at " + txOffset, expectedEndTxId, validation.getEndTxId())[ FD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_5 $$ final int NUM_TXNS = 20[ CD ]
Line_3 $$ File testDir = new File(TEST_DIR, "testValidateEditLogWithCorruptBody")-->Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)[ FD ]
Line_18 $$ long expectedEndTxId = (txId == (NUM_TXNS + 1)) ? NUM_TXNS : (NUM_TXNS + 1)-->Line_19 $$ assertEquals("Failed when corrupting txn opcode at " + txOffset, expectedEndTxId, validation.getEndTxId())[ FD ]
Line_17 $$ validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_20 $$ assertTrue(!validation.hasCorruptHeader())[ FD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_8 $$ Files.copy(logFile, logFileBak)[ CD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_3 $$ File testDir = new File(TEST_DIR, "testValidateEditLogWithCorruptBody")[ CD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_10 $$ assertTrue(!validation.hasCorruptHeader())[ CD ]
Line_13 $$ long txOffset = entry.getKey()-->Line_16 $$ corruptByteInFile(logFile, txOffset)[ FD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_25 $$ Files.copy(logFileBak, logFile)[ FD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)[ FD ]
Line_17 $$ validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_19 $$ assertEquals("Failed when corrupting txn opcode at " + txOffset, expectedEndTxId, validation.getEndTxId())[ FD ]
Line_4 $$ SortedMap<Long, Long> offsetToTxId = Maps.newTreeMap()-->Line_12 $$ for (Map.Entry<Long, Long> entry : offsetToTxId.entrySet()) [ FD ]
Line_2 $$ public void testValidateEditLogWithCorruptBody() throws IOException -->Line_11 $$ assertEquals(NUM_TXNS + 1, validation.getEndTxId())[ CD ]
Line_27 $$ validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_29 $$ assertEquals("Failed when corrupting txid " + txId + " txn opcode " + "at " + txOffset, expectedEndTxId, validation.getEndTxId())[ FD ]
Line_4 $$ SortedMap<Long, Long> offsetToTxId = Maps.newTreeMap()-->Line_22 $$ for (Map.Entry<Long, Long> entry : offsetToTxId.entrySet()) [ FD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_15 $$ Files.copy(logFileBak, logFile)[ FD ]
Line_12 $$ for (Map.Entry<Long, Long> entry : offsetToTxId.entrySet()) -->Line_24 $$ long txId = entry.getValue()[ FD ]
Line_4 $$ SortedMap<Long, Long> offsetToTxId = Maps.newTreeMap()-->Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)[ FD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_27 $$ validation = EditLogFileInputStream.validateEditLog(logFile)[ FD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_7 $$ File logFileBak = new File(testDir, logFile.getName() + ".bak")[ FD ]
Line_13 $$ long txOffset = entry.getKey()-->Line_26 $$ truncateFile(logFile, txOffset)[ FD ]
Line_5 $$ final int NUM_TXNS = 20-->Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)[ FD ]
Line_18 $$ long expectedEndTxId = (txId == (NUM_TXNS + 1)) ? NUM_TXNS : (NUM_TXNS + 1)-->Line_29 $$ assertEquals("Failed when corrupting txid " + txId + " txn opcode " + "at " + txOffset, expectedEndTxId, validation.getEndTxId())[ FD ]
Line_9 $$ EditLogValidation validation = EditLogFileInputStream.validateEditLog(logFile)-->Line_19 $$ assertEquals("Failed when corrupting txn opcode at " + txOffset, expectedEndTxId, validation.getEndTxId())[ FD ]
Line_6 $$ File logFile = prepareUnfinalizedTestEditLog(testDir, NUM_TXNS, offsetToTxId)-->Line_8 $$ Files.copy(logFile, logFileBak)[ FD ]
Line_12 $$ for (Map.Entry<Long, Long> entry : offsetToTxId.entrySet()) -->Line_23 $$ long txOffset = entry.getKey()[ FD ]
