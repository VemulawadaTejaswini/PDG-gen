Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_38 $$ Assert.assertTrue("Node script time out message not propogated", healthStatus.getHealthReport().equals(NodeHealthScriptRunner.NODE_HEALTH_SCRIPT_TIMED_OUT_MSG + NodeHealthCheckerService.SEPARATOR + nodeHealthChecker.getDiskHandler().getDisksHealthReport()))[ FD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_13 $$ nodeHealthChecker.init(conf)[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_20 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ CD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_17 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_35 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_3 $$ RecordFactory factory = RecordFactoryProvider.getRecordFactory(null)[ CD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_26 $$ Assert.assertTrue("Node health status reported healthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_34 $$ timerTask.run()[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_23 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_14 $$ NodeHealthScriptRunner nodeHealthScriptRunner = nodeHealthChecker.getNodeHealthScriptRunner()[ CD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_32 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ FD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_26 $$ Assert.assertTrue("Node health status reported healthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_37 $$ Assert.assertFalse("Node health status reported healthy even after timeout", healthStatus.getIsNodeHealthy())[ CD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_38 $$ Assert.assertTrue("Node script time out message not propogated", healthStatus.getHealthReport().equals(NodeHealthScriptRunner.NODE_HEALTH_SCRIPT_TIMED_OUT_MSG + NodeHealthCheckerService.SEPARATOR + nodeHealthChecker.getDiskHandler().getDisksHealthReport()))[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_6 $$ String normalScript = "echo \"I am all fine\""[ CD ]
Line_14 $$ NodeHealthScriptRunner nodeHealthScriptRunner = nodeHealthChecker.getNodeHealthScriptRunner()-->Line_15 $$ TimerTask timerTask = nodeHealthScriptRunner.getTimerTask()[ FD ]
Line_8 $$ Configuration conf = getConfForNodeHealthScript()-->Line_9 $$ conf.writeXml(new FileOutputStream(nodeHealthConfigFile))[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_28 $$ timerTask.run()[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_11 $$ writeNodeHealthScriptFile(normalScript, true)[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_5 $$ String errorScript = "echo ERROR\n echo \"Tracker not healthy\""[ CD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_25 $$ Assert.assertFalse("Node health status reported healthy", healthStatus.getIsNodeHealthy())[ FD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_32 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_10 $$ conf.addResource(nodeHealthConfigFile.getName())[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_18 $$ LOG.info("Checking initial healthy condition")[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_31 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getIsNodeHealthy())[ CD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_35 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ FD ]
Line_8 $$ Configuration conf = getConfForNodeHealthScript()-->Line_10 $$ conf.addResource(nodeHealthConfigFile.getName())[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_16 $$ timerTask.run()[ CD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_23 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ FD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_19 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getIsNodeHealthy())[ FD ]
Line_7 $$ String timeOutScript = Shell.WINDOWS ? "@echo off\nping -n 4 127.0.0.1 >nul\necho \"I am fine\"" : "sleep 4\necho \"I am fine\""-->Line_33 $$ writeNodeHealthScriptFile(timeOutScript, true)[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_25 $$ Assert.assertFalse("Node health status reported healthy", healthStatus.getIsNodeHealthy())[ CD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_20 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ FD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_14 $$ NodeHealthScriptRunner nodeHealthScriptRunner = nodeHealthChecker.getNodeHealthScriptRunner()[ FD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_17 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_19 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getIsNodeHealthy())[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_29 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_15 $$ TimerTask timerTask = nodeHealthScriptRunner.getTimerTask()[ CD ]
Line_15 $$ TimerTask timerTask = nodeHealthScriptRunner.getTimerTask()-->Line_16 $$ timerTask.run()[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_8 $$ Configuration conf = getConfForNodeHealthScript()[ CD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_35 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ FD ]
Line_15 $$ TimerTask timerTask = nodeHealthScriptRunner.getTimerTask()-->Line_22 $$ timerTask.run()[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_33 $$ writeNodeHealthScriptFile(timeOutScript, true)[ CD ]
Line_5 $$ String errorScript = "echo ERROR\n echo \"Tracker not healthy\""-->Line_21 $$ writeNodeHealthScriptFile(errorScript, true)[ FD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_31 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getIsNodeHealthy())[ FD ]
Line_3 $$ RecordFactory factory = RecordFactoryProvider.getRecordFactory(null)-->Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)[ FD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_29 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_13 $$ nodeHealthChecker.init(conf)[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_32 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ CD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_20 $$ Assert.assertTrue("Node health status reported unhealthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ FD ]
Line_6 $$ String normalScript = "echo \"I am all fine\""-->Line_11 $$ writeNodeHealthScriptFile(normalScript, true)[ FD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_29 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_7 $$ String timeOutScript = Shell.WINDOWS ? "@echo off\nping -n 4 127.0.0.1 >nul\necho \"I am fine\"" : "sleep 4\necho \"I am fine\""[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_22 $$ timerTask.run()[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_21 $$ writeNodeHealthScriptFile(errorScript, true)[ CD ]
Line_6 $$ String normalScript = "echo \"I am all fine\""-->Line_27 $$ writeNodeHealthScriptFile(normalScript, true)[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_38 $$ Assert.assertTrue("Node script time out message not propogated", healthStatus.getHealthReport().equals(NodeHealthScriptRunner.NODE_HEALTH_SCRIPT_TIMED_OUT_MSG + NodeHealthCheckerService.SEPARATOR + nodeHealthChecker.getDiskHandler().getDisksHealthReport()))[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()[ CD ]
Line_12 $$ NodeHealthCheckerService nodeHealthChecker = new NodeHealthCheckerService()-->Line_23 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_26 $$ Assert.assertTrue("Node health status reported healthy", healthStatus.getHealthReport().equals(nodeHealthChecker.getHealthReport()))[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)[ CD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_27 $$ writeNodeHealthScriptFile(normalScript, true)[ CD ]
Line_15 $$ TimerTask timerTask = nodeHealthScriptRunner.getTimerTask()-->Line_28 $$ timerTask.run()[ FD ]
Line_8 $$ Configuration conf = getConfForNodeHealthScript()-->Line_13 $$ nodeHealthChecker.init(conf)[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_17 $$ setHealthStatus(healthStatus, nodeHealthChecker.isHealthy(), nodeHealthChecker.getHealthReport(), nodeHealthChecker.getLastHealthReportTime())[ CD ]
Line_15 $$ TimerTask timerTask = nodeHealthScriptRunner.getTimerTask()-->Line_34 $$ timerTask.run()[ FD ]
Line_4 $$ NodeHealthStatus healthStatus = factory.newRecordInstance(NodeHealthStatus.class)-->Line_37 $$ Assert.assertFalse("Node health status reported healthy even after timeout", healthStatus.getIsNodeHealthy())[ FD ]
Line_2 $$ public void testNodeHealthScript() throws Exception -->Line_9 $$ conf.writeXml(new FileOutputStream(nodeHealthConfigFile))[ CD ]
