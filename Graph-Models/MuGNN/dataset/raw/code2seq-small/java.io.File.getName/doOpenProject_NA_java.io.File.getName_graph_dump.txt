Line_14 $$ if (baseDir == null) -->Line_25 $$ if (baseDir == null)[ CD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)[ FD ]
Line_102 $$ if (!projectManager.openProject(project)) -->Line_110 $$ return project[ CD ]
Line_51 $$ if (!ProjectUtil.closeAndDispose(projectToClose))-->Line_52 $$ return null[ CD ]
Line_31 $$ if (!forceOpenInNewFrame && openProjects.length > 0) -->Line_35 $$ if (ProjectAttachProcessor.canAttachToProject()) [ CD ]
Line_38 $$ if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE) -->Line_39 $$ return null[ CD ]
Line_18 $$ File directory = FileUtil.createTempDirectory(dummyProjectName, null, true)-->Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)[ FD ]
Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)-->Line_64 $$ processor.refreshProjectFiles(projectDir)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_61 $$ if (projectDir.exists()) [ CD ]
Line_60 $$ Project project = null-->Line_113 $$ callback.projectOpened(project, module)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_26 $$ baseDir = virtualFile.getParent()[ FD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_6 $$ if (!baseDir.isDirectory()) [ FD ]
Line_61 $$ if (projectDir.exists()) -->Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)[ CD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_7 $$ baseDir = virtualFile.getParent()[ FD ]
Line_89 $$ ModuleRootModificationUtil.updateModel(module, new Consumer<ModifiableRootModel>() -->Line_93 $$ model.removeContentEntry(entries[0])[ FD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_113 $$ callback.projectOpened(project, module)[ FD ]
Line_60 $$ Project project = null-->Line_102 $$ if (!projectManager.openProject(project)) [ FD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_26 $$ baseDir = virtualFile.getParent()[ FD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_99 $$ project.save()[ FD ]
Line_33 $$ projectToClose = openProjects[openProjects.length - 1]-->Line_51 $$ if (!ProjectUtil.closeAndDispose(projectToClose))[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_51 $$ if (!ProjectUtil.closeAndDispose(projectToClose))[ FD ]
Line_49 $$ int exitCode = ProjectUtil.confirmOpenNewProject(false)-->Line_50 $$ if (exitCode == GeneralSettings.OPEN_PROJECT_SAME_WINDOW) [ FD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_14 $$ if (baseDir == null) [ FD ]
Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)-->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ FD ]
Line_60 $$ Project project = null-->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_30 $$ Project[] openProjects = ProjectManager.getInstance().getOpenProjects()[ CD ]
Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)-->Line_61 $$ if (projectDir.exists()) [ FD ]
Line_89 $$ ModuleRootModificationUtil.updateModel(module, new Consumer<ModifiableRootModel>() -->Line_92 $$ if (entries.length == 1)[ CD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_12 $$ baseDir = baseDir.getParent()[ FD ]
Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)-->Line_78 $$ String projectName = dummyProject ? dummyProjectName : projectDir.getParentFile().getName()[ FD ]
Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)-->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ FD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_26 $$ baseDir = virtualFile.getParent()[ FD ]
Line_102 $$ if (!projectManager.openProject(project)) -->Line_103 $$ WelcomeFrame.showIfNoProjectOpened()[ CD ]
Line_32 $$ if (projectToClose == null) -->Line_33 $$ projectToClose = openProjects[openProjects.length - 1][ CD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ FD ]
Line_102 $$ if (!projectManager.openProject(project)) -->Line_105 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_9 $$ if (new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER).exists()) [ FD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_14 $$ if (baseDir == null) [ FD ]
Line_17 $$ dummyProjectName = virtualFile.getName()-->Line_18 $$ File directory = FileUtil.createTempDirectory(dummyProjectName, null, true)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_33 $$ projectToClose = openProjects[openProjects.length - 1][ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_112 $$ if (callback != null) [ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_31 $$ if (!forceOpenInNewFrame && openProjects.length > 0) [ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_31 $$ if (!forceOpenInNewFrame && openProjects.length > 0) [ CD ]
Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0]-->Line_89 $$ ModuleRootModificationUtil.updateModel(module, new Consumer<ModifiableRootModel>() [ FD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_17 $$ dummyProjectName = virtualFile.getName()[ FD ]
Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)-->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ FD ]
Line_35 $$ if (ProjectAttachProcessor.canAttachToProject()) -->Line_41 $$ if (dialog.isReplace()) [ CD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)[ FD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_26 $$ baseDir = virtualFile.getParent()[ FD ]
Line_26 $$ baseDir = virtualFile.getParent()-->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ FD ]
Line_60 $$ Project project = null-->Line_67 $$ if (project != null) [ FD ]
Line_89 $$ ModuleRootModificationUtil.updateModel(module, new Consumer<ModifiableRootModel>() -->Line_91 $$ ContentEntry[] entries = model.getContentEntries()[ FD ]
Line_88 $$ if (runConfigurators && dummyProject) -->Line_89 $$ ModuleRootModificationUtil.updateModel(module, new Consumer<ModifiableRootModel>() [ CD ]
Line_4 $$ boolean dummyProject = false-->Line_20 $$ dummyProject = true[ FD ]
Line_4 $$ boolean dummyProject = false-->Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)[ FD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_42 $$ if (!ProjectUtil.closeAndDispose(projectToClose))[ FD ]
Line_60 $$ Project project = null-->Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())[ FD ]
Line_58 $$ boolean runConfigurators = true, newProject = false-->Line_80 $$ newProject = true[ FD ]
Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)-->Line_101 $$ openFileFromCommandLine(project, virtualFile, line)[ FD ]
Line_42 $$ if (!ProjectUtil.closeAndDispose(projectToClose))-->Line_43 $$ return null[ CD ]
Line_26 $$ baseDir = virtualFile.getParent()-->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_59 $$ ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx()[ CD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())[ FD ]
Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)-->Line_102 $$ if (!projectManager.openProject(project)) [ FD ]
Line_5 $$ String dummyProjectName = null-->Line_18 $$ File directory = FileUtil.createTempDirectory(dummyProjectName, null, true)[ FD ]
Line_69 $$ if (modules.length > 0) -->Line_70 $$ runConfigurators = false[ CD ]
Line_59 $$ ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx()-->Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)[ FD ]
Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)-->Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)[ FD ]
Line_25 $$ if (baseDir == null)-->Line_26 $$ baseDir = virtualFile.getParent()[ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_6 $$ if (!baseDir.isDirectory()) [ CD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_25 $$ if (baseDir == null)[ FD ]
Line_14 $$ if (baseDir == null) -->Line_15 $$ if (Registry.is("ide.open.file.in.temp.project.dir")) [ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_3 $$ VirtualFile baseDir = virtualFile[ CD ]
Line_82 $$ if (project == null) -->Line_84 $$ return null[ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_115 $$ return project[ CD ]
Line_35 $$ if (ProjectAttachProcessor.canAttachToProject()) -->Line_37 $$ dialog.show()[ CD ]
Line_35 $$ if (ProjectAttachProcessor.canAttachToProject()) -->Line_50 $$ if (exitCode == GeneralSettings.OPEN_PROJECT_SAME_WINDOW) [ CD ]
Line_78 $$ String projectName = dummyProject ? dummyProjectName : projectDir.getParentFile().getName()-->Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)[ FD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ FD ]
Line_4 $$ boolean dummyProject = false-->Line_88 $$ if (runConfigurators && dummyProject) [ FD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_9 $$ if (new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER).exists()) [ FD ]
Line_45 $$ if (attachToProject(projectToClose, projectDir, callback))-->Line_46 $$ return null[ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_102 $$ if (!projectManager.openProject(project)) [ CD ]
Line_60 $$ Project project = null-->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ FD ]
Line_31 $$ if (!forceOpenInNewFrame && openProjects.length > 0) -->Line_32 $$ if (projectToClose == null) [ CD ]
Line_44 $$ if (dialog.isAttach()) -->Line_45 $$ if (attachToProject(projectToClose, projectDir, callback))[ CD ]
Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)-->Line_45 $$ if (attachToProject(projectToClose, projectDir, callback))[ FD ]
Line_67 $$ if (project != null) -->Line_68 $$ Module[] modules = ModuleManager.getInstance(project).getModules()[ CD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_101 $$ openFileFromCommandLine(project, virtualFile, line)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_32 $$ if (projectToClose == null) [ FD ]
Line_33 $$ projectToClose = openProjects[openProjects.length - 1]-->Line_42 $$ if (!ProjectUtil.closeAndDispose(projectToClose))[ FD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)[ FD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_8 $$ while (baseDir != null) [ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_88 $$ if (runConfigurators && dummyProject) [ CD ]
Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0]-->Line_113 $$ callback.projectOpened(project, module)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ CD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_8 $$ while (baseDir != null) [ FD ]
Line_36 $$ final OpenOrAttachDialog dialog = new OpenOrAttachDialog(projectToClose, isReopen, isReopen ? "Reopen Project" : "Open Project")-->Line_41 $$ if (dialog.isReplace()) [ FD ]
Line_105 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() -->Line_107 $$ Disposer.dispose(finalProject)[ CD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ FD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_14 $$ if (baseDir == null) [ FD ]
Line_89 $$ ModuleRootModificationUtil.updateModel(module, new Consumer<ModifiableRootModel>() -->Line_94 $$ model.addContentEntry(virtualFile)[ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_5 $$ String dummyProjectName = null[ CD ]
Line_58 $$ boolean runConfigurators = true, newProject = false-->Line_70 $$ runConfigurators = false[ FD ]
Line_36 $$ final OpenOrAttachDialog dialog = new OpenOrAttachDialog(projectToClose, isReopen, isReopen ? "Reopen Project" : "Open Project")-->Line_37 $$ dialog.show()[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_101 $$ openFileFromCommandLine(project, virtualFile, line)[ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_60 $$ Project project = null[ CD ]
Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)-->Line_26 $$ baseDir = virtualFile.getParent()[ FD ]
Line_61 $$ if (projectDir.exists()) -->Line_77 $$ projectDir.mkdirs()[ CD ]
Line_60 $$ Project project = null-->Line_68 $$ Module[] modules = ModuleManager.getInstance(project).getModules()[ FD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_25 $$ if (baseDir == null)[ FD ]
Line_60 $$ Project project = null-->Line_101 $$ openFileFromCommandLine(project, virtualFile, line)[ FD ]
Line_33 $$ projectToClose = openProjects[openProjects.length - 1]-->Line_45 $$ if (attachToProject(projectToClose, projectDir, callback))[ FD ]
Line_20 $$ dummyProject = true-->Line_88 $$ if (runConfigurators && dummyProject) [ FD ]
Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)-->Line_25 $$ if (baseDir == null)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_7 $$ baseDir = virtualFile.getParent()[ FD ]
Line_36 $$ final OpenOrAttachDialog dialog = new OpenOrAttachDialog(projectToClose, isReopen, isReopen ? "Reopen Project" : "Open Project")-->Line_38 $$ if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE) [ FD ]
Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)-->Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())[ FD ]
Line_26 $$ baseDir = virtualFile.getParent()-->Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())[ FD ]
Line_59 $$ ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx()-->Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())[ FD ]
Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)-->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_113 $$ callback.projectOpened(project, module)[ FD ]
Line_61 $$ if (projectDir.exists()) -->Line_80 $$ newProject = true[ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_98 $$ if (newProject) [ CD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_12 $$ baseDir = baseDir.getParent()[ FD ]
Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)-->Line_113 $$ callback.projectOpened(project, module)[ FD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_102 $$ if (!projectManager.openProject(project)) [ FD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ FD ]
Line_89 $$ ModuleRootModificationUtil.updateModel(module, new Consumer<ModifiableRootModel>() -->Line_94 $$ model.addContentEntry(virtualFile)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_58 $$ boolean runConfigurators = true, newProject = false[ CD ]
Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)-->Line_99 $$ project.save()[ FD ]
Line_82 $$ if (project == null) -->Line_83 $$ WelcomeFrame.showIfNoProjectOpened()[ CD ]
Line_50 $$ if (exitCode == GeneralSettings.OPEN_PROJECT_SAME_WINDOW) -->Line_51 $$ if (!ProjectUtil.closeAndDispose(projectToClose))[ CD ]
Line_5 $$ String dummyProjectName = null-->Line_17 $$ dummyProjectName = virtualFile.getName()[ FD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ FD ]
Line_35 $$ if (ProjectAttachProcessor.canAttachToProject()) -->Line_36 $$ final OpenOrAttachDialog dialog = new OpenOrAttachDialog(projectToClose, isReopen, isReopen ? "Reopen Project" : "Open Project")[ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_86 $$ ProjectBaseDirectory.getInstance(project).setBaseDir(baseDir)[ CD ]
Line_41 $$ if (dialog.isReplace()) -->Line_44 $$ if (dialog.isAttach()) [ CD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)[ FD ]
Line_49 $$ int exitCode = ProjectUtil.confirmOpenNewProject(false)-->Line_53 $$ if (exitCode != GeneralSettings.OPEN_PROJECT_NEW_WINDOW) [ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_101 $$ openFileFromCommandLine(project, virtualFile, line)[ FD ]
Line_60 $$ Project project = null-->Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)[ FD ]
Line_36 $$ final OpenOrAttachDialog dialog = new OpenOrAttachDialog(projectToClose, isReopen, isReopen ? "Reopen Project" : "Open Project")-->Line_44 $$ if (dialog.isAttach()) [ FD ]
Line_50 $$ if (exitCode == GeneralSettings.OPEN_PROJECT_SAME_WINDOW) -->Line_53 $$ if (exitCode != GeneralSettings.OPEN_PROJECT_NEW_WINDOW) [ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_112 $$ if (callback != null) [ FD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_9 $$ if (new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER).exists()) [ FD ]
Line_35 $$ if (ProjectAttachProcessor.canAttachToProject()) -->Line_38 $$ if (dialog.getExitCode() != DialogWrapper.OK_EXIT_CODE) [ CD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_8 $$ while (baseDir != null) [ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_82 $$ if (project == null) [ CD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_45 $$ if (attachToProject(projectToClose, projectDir, callback))[ FD ]
Line_89 $$ ModuleRootModificationUtil.updateModel(module, new Consumer<ModifiableRootModel>() -->Line_91 $$ ContentEntry[] entries = model.getContentEntries()[ CD ]
Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)-->Line_82 $$ if (project == null) [ FD ]
Line_6 $$ if (!baseDir.isDirectory()) -->Line_8 $$ while (baseDir != null) [ CD ]
Line_6 $$ if (!baseDir.isDirectory()) -->Line_7 $$ baseDir = virtualFile.getParent()[ CD ]
Line_59 $$ ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx()-->Line_102 $$ if (!projectManager.openProject(project)) [ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)[ CD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_68 $$ Module[] modules = ModuleManager.getInstance(project).getModules()[ FD ]
Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)-->Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)[ FD ]
Line_60 $$ Project project = null-->Line_82 $$ if (project == null) [ FD ]
Line_60 $$ Project project = null-->Line_99 $$ project.save()[ FD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ FD ]
Line_98 $$ if (newProject) -->Line_99 $$ project.save()[ CD ]
Line_6 $$ if (!baseDir.isDirectory()) -->Line_14 $$ if (baseDir == null) [ CD ]
Line_3 $$ VirtualFile baseDir = virtualFile-->Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)[ FD ]
Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)-->Line_77 $$ projectDir.mkdirs()[ FD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_87 $$ Module module = runConfigurators ? runDirectoryProjectConfigurators(baseDir, project) : ModuleManager.getInstance(project).getModules()[0][ FD ]
Line_112 $$ if (callback != null) -->Line_113 $$ callback.projectOpened(project, module)[ CD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_25 $$ if (baseDir == null)[ FD ]
Line_8 $$ while (baseDir != null) -->Line_12 $$ baseDir = baseDir.getParent()[ CD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_19 $$ baseDir = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(directory)[ FD ]
Line_20 $$ dummyProject = true-->Line_79 $$ project = projectManager.newProject(projectName, projectDir.getParent(), true, dummyProject)[ FD ]
Line_8 $$ while (baseDir != null) -->Line_9 $$ if (new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER).exists()) [ CD ]
Line_67 $$ if (project != null) -->Line_69 $$ if (modules.length > 0) [ CD ]
Line_63 $$ for (ProjectOpenProcessor processor : ProjectOpenProcessor.EXTENSION_POINT_NAME.getExtensions()) -->Line_64 $$ processor.refreshProjectFiles(projectDir)[ FD ]
Line_92 $$ if (entries.length == 1)-->Line_93 $$ model.removeContentEntry(entries[0])[ CD ]
Line_41 $$ if (dialog.isReplace()) -->Line_42 $$ if (!ProjectUtil.closeAndDispose(projectToClose))[ CD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_67 $$ if (project != null) [ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_94 $$ model.addContentEntry(virtualFile)[ FD ]
Line_70 $$ runConfigurators = false-->Line_88 $$ if (runConfigurators && dummyProject) [ FD ]
Line_35 $$ if (ProjectAttachProcessor.canAttachToProject()) -->Line_49 $$ int exitCode = ProjectUtil.confirmOpenNewProject(false)[ CD ]
Line_61 $$ if (projectDir.exists()) -->Line_78 $$ String projectName = dummyProject ? dummyProjectName : projectDir.getParentFile().getName()[ CD ]
Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())-->Line_82 $$ if (project == null) [ FD ]
Line_26 $$ baseDir = virtualFile.getParent()-->Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)[ FD ]
Line_53 $$ if (exitCode != GeneralSettings.OPEN_PROJECT_NEW_WINDOW) -->Line_54 $$ return null[ CD ]
Line_12 $$ baseDir = baseDir.getParent()-->Line_29 $$ final File projectDir = new File(FileUtil.toSystemDependentName(baseDir.getPath()), Project.DIRECTORY_STORE_FOLDER)[ FD ]
Line_2 $$ public static Project doOpenProject(@NotNull final VirtualFile virtualFile, Project projectToClose, final boolean forceOpenInNewFrame, final int line, @Nullable ProjectOpenedCallback callback, final boolean isReopen) -->Line_4 $$ boolean dummyProject = false[ CD ]
Line_58 $$ boolean runConfigurators = true, newProject = false-->Line_88 $$ if (runConfigurators && dummyProject) [ FD ]
Line_7 $$ baseDir = virtualFile.getParent()-->Line_66 $$ project = projectManager.convertAndLoadProject(baseDir.getPath())[ FD ]
