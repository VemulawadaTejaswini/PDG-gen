Line_11 $$ final Map<String, Set<OfflineProblemDescriptor>> descriptors = OfflineViewParseUtil.parse(problems)-->Line_12 $$ for (Set<OfflineProblemDescriptor> problemDescriptors : descriptors.values()) [ FD ]
Line_9 $$ final String name = file.getName()-->Line_17 $$ map.put(name.substring(0, name.lastIndexOf('.')), descriptors)[ FD ]
Line_2 $$ private Map<String, Map<String, Set<OfflineProblemDescriptor>>> parse() throws IOException -->Line_6 $$ final File[] files = res.listFiles()[ CD ]
Line_13 $$ for (OfflineProblemDescriptor descriptor : problemDescriptors) -->Line_14 $$ descriptor.setModule(moduleName)[ FD ]
Line_2 $$ private Map<String, Map<String, Set<OfflineProblemDescriptor>>> parse() throws IOException -->Line_5 $$ final File res = new File(PathManagerEx.getTestDataPath(), getTestPath() + File.separator + "res")[ CD ]
Line_2 $$ private Map<String, Map<String, Set<OfflineProblemDescriptor>>> parse() throws IOException -->Line_4 $$ final Map<String, Map<String, Set<OfflineProblemDescriptor>>> map = new HashMap<String, Map<String, Set<OfflineProblemDescriptor>>>()[ CD ]
Line_2 $$ private Map<String, Map<String, Set<OfflineProblemDescriptor>>> parse() throws IOException -->Line_19 $$ return map[ CD ]
Line_11 $$ final Map<String, Set<OfflineProblemDescriptor>> descriptors = OfflineViewParseUtil.parse(problems)-->Line_17 $$ map.put(name.substring(0, name.lastIndexOf('.')), descriptors)[ FD ]
Line_10 $$ final String problems = FileUtil.loadFile(file)-->Line_11 $$ final Map<String, Set<OfflineProblemDescriptor>> descriptors = OfflineViewParseUtil.parse(problems)[ FD ]
Line_3 $$ final String moduleName = getModule().getName()-->Line_14 $$ descriptor.setModule(moduleName)[ FD ]
Line_8 $$ for (File file : files) -->Line_10 $$ final String problems = FileUtil.loadFile(file)[ FD ]
Line_5 $$ final File res = new File(PathManagerEx.getTestDataPath(), getTestPath() + File.separator + "res")-->Line_6 $$ final File[] files = res.listFiles()[ FD ]
Line_8 $$ for (File file : files) -->Line_9 $$ final String name = file.getName()[ FD ]
Line_4 $$ final Map<String, Map<String, Set<OfflineProblemDescriptor>>> map = new HashMap<String, Map<String, Set<OfflineProblemDescriptor>>>()-->Line_17 $$ map.put(name.substring(0, name.lastIndexOf('.')), descriptors)[ FD ]
Line_2 $$ private Map<String, Map<String, Set<OfflineProblemDescriptor>>> parse() throws IOException -->Line_3 $$ final String moduleName = getModule().getName()[ CD ]
