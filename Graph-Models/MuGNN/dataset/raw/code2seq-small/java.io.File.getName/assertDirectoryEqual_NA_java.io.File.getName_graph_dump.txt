Line_3 $$ final File[] actualChildren = file.listFiles()-->Line_5 $$ if (actualChildren != null) [ FD ]
Line_2 $$ private void assertDirectoryEqual(File file, String relativePath) -->Line_14 $$ Assert.assertTrue("files " + notFound.toString() + " not found in " + relativePath, notFound.isEmpty())[ CD ]
Line_8 $$ final TestFileSystemItem item = myChildren.get(name)-->Line_10 $$ item.assertFileEqual(child, relativePath + name + "/")[ FD ]
Line_4 $$ Set<String> notFound = new HashSet<String>(myChildren.keySet())-->Line_11 $$ notFound.remove(name)[ FD ]
Line_2 $$ private void assertDirectoryEqual(File file, String relativePath) -->Line_5 $$ if (actualChildren != null) [ CD ]
Line_2 $$ private void assertDirectoryEqual(File file, String relativePath) -->Line_3 $$ final File[] actualChildren = file.listFiles()[ CD ]
Line_6 $$ for (File child : actualChildren) -->Line_7 $$ final String name = child.getName()[ FD ]
Line_2 $$ private void assertDirectoryEqual(File file, String relativePath) -->Line_4 $$ Set<String> notFound = new HashSet<String>(myChildren.keySet())[ CD ]
Line_6 $$ for (File child : actualChildren) -->Line_10 $$ item.assertFileEqual(child, relativePath + name + "/")[ FD ]
Line_8 $$ final TestFileSystemItem item = myChildren.get(name)-->Line_9 $$ Assert.assertNotNull("unexpected file: " + relativePath + name, item)[ FD ]
Line_7 $$ final String name = child.getName()-->Line_11 $$ notFound.remove(name)[ FD ]
Line_4 $$ Set<String> notFound = new HashSet<String>(myChildren.keySet())-->Line_14 $$ Assert.assertTrue("files " + notFound.toString() + " not found in " + relativePath, notFound.isEmpty())[ FD ]
Line_7 $$ final String name = child.getName()-->Line_8 $$ final TestFileSystemItem item = myChildren.get(name)[ FD ]
Line_2 $$ private void assertDirectoryEqual(File file, String relativePath) -->Line_3 $$ final File[] actualChildren = file.listFiles()[ FD ]
