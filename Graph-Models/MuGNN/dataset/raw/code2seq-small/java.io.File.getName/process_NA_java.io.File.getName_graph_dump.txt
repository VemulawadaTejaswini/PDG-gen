Line_2 $$ public JsHintResult process(JsHintSpec spec) -->Line_12 $$ return new JsHintResult(results)[ CD ]
Line_6 $$ for (File target : spec.getSource()) -->Line_8 $$ String source = readFile(target, encoding)[ FD ]
Line_2 $$ public JsHintResult process(JsHintSpec spec) -->Line_3 $$ Scriptable jsHintScope = RhinoWorkerUtils.parse(spec.getJsHint(), "UTF-8")[ FD ]
Line_2 $$ public JsHintResult process(JsHintSpec spec) -->Line_6 $$ for (File target : spec.getSource()) [ FD ]
Line_4 $$ String encoding = spec.getEncoding()-->Line_8 $$ String source = readFile(target, encoding)[ FD ]
Line_3 $$ Scriptable jsHintScope = RhinoWorkerUtils.parse(spec.getJsHint(), "UTF-8")-->Line_9 $$ Map<String, Object> result = jsHint(jsHintScope, source, target.getName())[ FD ]
Line_6 $$ for (File target : spec.getSource()) -->Line_10 $$ results.put(target, result)[ FD ]
Line_2 $$ public JsHintResult process(JsHintSpec spec) -->Line_3 $$ Scriptable jsHintScope = RhinoWorkerUtils.parse(spec.getJsHint(), "UTF-8")[ CD ]
Line_8 $$ String source = readFile(target, encoding)-->Line_9 $$ Map<String, Object> result = jsHint(jsHintScope, source, target.getName())[ FD ]
Line_2 $$ public JsHintResult process(JsHintSpec spec) -->Line_5 $$ Map<File, Map<String, Object>> results = new LinkedHashMap<File, Map<String, Object>>()[ CD ]
Line_9 $$ Map<String, Object> result = jsHint(jsHintScope, source, target.getName())-->Line_10 $$ results.put(target, result)[ FD ]
Line_5 $$ Map<File, Map<String, Object>> results = new LinkedHashMap<File, Map<String, Object>>()-->Line_10 $$ results.put(target, result)[ FD ]
Line_6 $$ for (File target : spec.getSource()) -->Line_7 $$ LOGGER.info("Reading file: [ FD ]
Line_2 $$ public JsHintResult process(JsHintSpec spec) -->Line_4 $$ String encoding = spec.getEncoding()[ CD ]
Line_6 $$ for (File target : spec.getSource()) -->Line_9 $$ Map<String, Object> result = jsHint(jsHintScope, source, target.getName())[ FD ]
Line_2 $$ public JsHintResult process(JsHintSpec spec) -->Line_4 $$ String encoding = spec.getEncoding()[ FD ]
