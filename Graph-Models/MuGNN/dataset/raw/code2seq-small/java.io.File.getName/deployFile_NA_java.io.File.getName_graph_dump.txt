Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_96 $$ if (pluginPackage != null) [ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_16 $$ String specifiedContext = autoDeploymentContext.getContext()-->Line_20 $$ if (Validator.isNull(specifiedContext) && srcFile.getName().startsWith(DEPLOY_TO_PREFIX)) [ FD ]
Line_43 $$ deployDir = displayName + ".war"-->Line_54 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ FD ]
Line_80 $$ if (srcFile.isDirectory()) -->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ CD ]
Line_32 $$ if (displayName == null) -->Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_3 $$ File srcFile = autoDeploymentContext.getFile()[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_9 $$ if (_log.isInfoEnabled()) [ CD ]
Line_64 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_77 $$ overwrite = true[ CD ]
Line_49 $$ deployDir = jbossPrefix + deployDir-->Line_54 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_51 $$ deployDir = wildflyPrefix + deployDir-->Line_91 $$ postDeploy(destDir, deployDir)[ FD ]
Line_45 $$ deployDir = srcFile.getName()-->Line_91 $$ postDeploy(destDir, deployDir)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_86 $$ if (pluginPackage != null) [ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)[ FD ]
Line_84 $$ if (!deployed) -->Line_89 $$ PluginPackageUtil.endPluginPackageInstallation(context)[ CD ]
Line_20 $$ if (Validator.isNull(specifiedContext) && srcFile.getName().startsWith(DEPLOY_TO_PREFIX)) -->Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)[ CD ]
Line_23 $$ preliminaryContext = displayName-->Line_25 $$ if (preliminaryContext == null) [ FD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_36 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_53 $$ if (unpackWar) -->Line_54 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_7 $$ autoDeploymentContext.setPluginPackage(pluginPackage)[ FD ]
Line_22 $$ overwrite = true-->Line_77 $$ overwrite = true[ FD ]
Line_71 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) -->Line_72 $$ if (_log.isInfoEnabled()) [ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_20 $$ if (Validator.isNull(specifiedContext) && srcFile.getName().startsWith(DEPLOY_TO_PREFIX)) [ CD ]
Line_46 $$ displayName = getDisplayName(srcFile)-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_18 $$ boolean overwrite = false[ CD ]
Line_45 $$ deployDir = srcFile.getName()-->Line_49 $$ deployDir = jbossPrefix + deployDir[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_13 $$ if (Validator.isNotNull(autoDeploymentContextAppServerType)) [ CD ]
Line_9 $$ if (_log.isInfoEnabled()) -->Line_10 $$ _log.info("Deploying " + srcFile.getName())[ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_84 $$ if (!deployed) -->Line_86 $$ if (pluginPackage != null) [ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_16 $$ String specifiedContext = autoDeploymentContext.getContext()[ CD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_28 $$ if (pluginPackage != null) [ FD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_32 $$ if (displayName == null) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_28 $$ if (pluginPackage != null) [ CD ]
Line_84 $$ if (!deployed) -->Line_85 $$ String context = preliminaryContext[ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_87 $$ context = pluginPackage.getContext()[ FD ]
Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_46 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_23 $$ preliminaryContext = displayName[ FD ]
Line_50 $$ if (appServerType.equals(ServerDetector.WILDFLY_ID)) -->Line_52 $$ if (appServerType.equals(ServerDetector.GLASSFISH_ID) || appServerType.equals(ServerDetector.JETTY_ID) || appServerType.equals(ServerDetector.JONAS_ID) || appServerType.equals(ServerDetector.OC4J_ID) || appServerType.equals(ServerDetector.RESIN_ID) || appServerType.equals(ServerDetector.TOMCAT_ID) || appServerType.equals(ServerDetector.WEBLOGIC_ID)) [ CD ]
Line_17 $$ String displayName = specifiedContext-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_22 $$ overwrite = true-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_48 $$ if (appServerType.equals(ServerDetector.JBOSS_ID)) -->Line_49 $$ deployDir = jbossPrefix + deployDir[ CD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_26 $$ preliminaryContext = getDisplayName(srcFile)[ FD ]
Line_41 $$ String deployDir = null-->Line_45 $$ deployDir = srcFile.getName()[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_30 $$ throw new AutoDeployException(srcFile.getName() + " does not support this version of Liferay")[ FD ]
Line_50 $$ if (appServerType.equals(ServerDetector.WILDFLY_ID)) -->Line_51 $$ deployDir = wildflyPrefix + deployDir[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_41 $$ String deployDir = null[ CD ]
Line_36 $$ displayName = getDisplayName(srcFile)-->Line_46 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_6 $$ pluginPackage = readPluginPackage(srcFile)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_79 $$ File mergeDirFile = new File(srcFile.getParent() + "/merge/" + srcFile.getName())[ FD ]
Line_63 $$ PluginPackage previousPluginPackage = readPluginPackage(deployDirFile)-->Line_66 $$ String previousVersion = previousPluginPackage.getVersion()[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_29 $$ if (!PluginPackageUtil.isCurrentVersionSupported(pluginPackage.getLiferayVersions())) [ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_46 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_61 $$ File deployDirFile = new File(destDir + "/" + deployDir)[ CD ]
Line_61 $$ File deployDirFile = new File(destDir + "/" + deployDir)-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_28 $$ if (pluginPackage != null) -->Line_32 $$ if (displayName == null) [ CD ]
Line_23 $$ preliminaryContext = displayName-->Line_39 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_49 $$ deployDir = jbossPrefix + deployDir-->Line_51 $$ deployDir = wildflyPrefix + deployDir[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_65 $$ String name = pluginPackage.getName()[ FD ]
Line_46 $$ displayName = getDisplayName(srcFile)-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_18 $$ boolean overwrite = false-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_42 $$ if (Validator.isNotNull(displayName)) -->Line_46 $$ displayName = getDisplayName(srcFile)[ CD ]
Line_71 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) -->Line_75 $$ return AutoDeployer.CODE_SKIP_NEWER_VERSION[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_57 $$ String destDir = this.destDir[ CD ]
Line_80 $$ if (srcFile.isDirectory()) -->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ CD ]
Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_38 $$ pluginPackage.setContext(displayName)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_7 $$ autoDeploymentContext.setPluginPackage(pluginPackage)[ FD ]
Line_85 $$ String context = preliminaryContext-->Line_89 $$ PluginPackageUtil.endPluginPackageInstallation(context)[ FD ]
Line_12 $$ String autoDeploymentContextAppServerType = autoDeploymentContext.getAppServerType()-->Line_13 $$ if (Validator.isNotNull(autoDeploymentContextAppServerType)) [ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_20 $$ if (Validator.isNull(specifiedContext) && srcFile.getName().startsWith(DEPLOY_TO_PREFIX)) [ FD ]
Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_36 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_38 $$ pluginPackage.setContext(displayName)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_46 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_87 $$ context = pluginPackage.getContext()-->Line_89 $$ PluginPackageUtil.endPluginPackageInstallation(context)[ FD ]
Line_25 $$ if (preliminaryContext == null) -->Line_26 $$ preliminaryContext = getDisplayName(srcFile)[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_3 $$ File srcFile = autoDeploymentContext.getFile()[ FD ]
Line_36 $$ displayName = getDisplayName(srcFile)-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_48 $$ if (appServerType.equals(ServerDetector.JBOSS_ID)) [ CD ]
Line_36 $$ displayName = getDisplayName(srcFile)-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_85 $$ String context = preliminaryContext-->Line_87 $$ context = pluginPackage.getContext()[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_35 $$ if (Validator.isNull(displayName)) [ FD ]
Line_61 $$ File deployDirFile = new File(destDir + "/" + deployDir)-->Line_63 $$ PluginPackage previousPluginPackage = readPluginPackage(deployDirFile)[ FD ]
Line_79 $$ File mergeDirFile = new File(srcFile.getParent() + "/merge/" + srcFile.getName())-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_20 $$ if (Validator.isNull(specifiedContext) && srcFile.getName().startsWith(DEPLOY_TO_PREFIX)) -->Line_22 $$ overwrite = true[ CD ]
Line_18 $$ boolean overwrite = false-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_45 $$ deployDir = srcFile.getName()[ FD ]
Line_86 $$ if (pluginPackage != null) -->Line_87 $$ context = pluginPackage.getContext()[ CD ]
Line_18 $$ boolean overwrite = false-->Line_77 $$ overwrite = true[ FD ]
Line_84 $$ if (!deployed) -->Line_91 $$ postDeploy(destDir, deployDir)[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_12 $$ String autoDeploymentContextAppServerType = autoDeploymentContext.getAppServerType()[ FD ]
Line_28 $$ if (pluginPackage != null) -->Line_35 $$ if (Validator.isNull(displayName)) [ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_12 $$ String autoDeploymentContextAppServerType = autoDeploymentContext.getAppServerType()[ CD ]
Line_64 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_68 $$ if (_log.isInfoEnabled()) [ CD ]
Line_79 $$ File mergeDirFile = new File(srcFile.getParent() + "/merge/" + srcFile.getName())-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_10 $$ _log.info("Deploying " + srcFile.getName())[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_5 $$ if (pluginPackage == null) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()[ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_38 $$ pluginPackage.setContext(displayName)[ FD ]
Line_41 $$ String deployDir = null-->Line_43 $$ deployDir = displayName + ".war"[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_42 $$ if (Validator.isNotNull(displayName)) [ CD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_46 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_26 $$ preliminaryContext = getDisplayName(srcFile)-->Line_39 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_54 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)-->Line_91 $$ postDeploy(destDir, deployDir)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_39 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_61 $$ File deployDirFile = new File(destDir + "/" + deployDir)-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_58 $$ if (autoDeploymentContext.getDestDir() != null) -->Line_59 $$ destDir = autoDeploymentContext.getDestDir()[ CD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_28 $$ if (pluginPackage != null) [ FD ]
Line_77 $$ overwrite = true-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_7 $$ autoDeploymentContext.setPluginPackage(pluginPackage)[ FD ]
Line_5 $$ if (pluginPackage == null) -->Line_6 $$ pluginPackage = readPluginPackage(srcFile)[ CD ]
Line_64 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_71 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) [ CD ]
Line_77 $$ overwrite = true-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_17 $$ String displayName = specifiedContext[ CD ]
Line_17 $$ String displayName = specifiedContext-->Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_5 $$ if (pluginPackage == null) [ CD ]
Line_17 $$ String displayName = specifiedContext-->Line_42 $$ if (Validator.isNotNull(displayName)) [ FD ]
Line_36 $$ displayName = getDisplayName(srcFile)-->Line_42 $$ if (Validator.isNotNull(displayName)) [ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_87 $$ context = pluginPackage.getContext()[ FD ]
Line_68 $$ if (_log.isInfoEnabled()) -->Line_69 $$ _log.info("Updating " + name + " from version " + previousVersion + " to version " + version)[ CD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_6 $$ pluginPackage = readPluginPackage(srcFile)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_97 $$ PluginPackageUtil.endPluginPackageInstallation(pluginPackage.getContext())[ FD ]
Line_41 $$ String deployDir = null-->Line_51 $$ deployDir = wildflyPrefix + deployDir[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_58 $$ if (autoDeploymentContext.getDestDir() != null) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()[ FD ]
Line_51 $$ deployDir = wildflyPrefix + deployDir-->Line_54 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_19 $$ String preliminaryContext = specifiedContext-->Line_23 $$ preliminaryContext = displayName[ FD ]
Line_36 $$ displayName = getDisplayName(srcFile)-->Line_38 $$ pluginPackage.setContext(displayName)[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_80 $$ if (srcFile.isDirectory()) [ FD ]
Line_41 $$ String deployDir = null-->Line_54 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ FD ]
Line_41 $$ String deployDir = null-->Line_91 $$ postDeploy(destDir, deployDir)[ FD ]
Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_43 $$ deployDir = displayName + ".war"[ FD ]
Line_19 $$ String preliminaryContext = specifiedContext-->Line_39 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_43 $$ deployDir = displayName + ".war"-->Line_91 $$ postDeploy(destDir, deployDir)[ FD ]
Line_57 $$ String destDir = this.destDir-->Line_59 $$ destDir = autoDeploymentContext.getDestDir()[ FD ]
Line_42 $$ if (Validator.isNotNull(displayName)) -->Line_43 $$ deployDir = displayName + ".war"[ CD ]
Line_41 $$ String deployDir = null-->Line_49 $$ deployDir = jbossPrefix + deployDir[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_38 $$ pluginPackage.setContext(displayName)[ FD ]
Line_59 $$ destDir = autoDeploymentContext.getDestDir()-->Line_91 $$ postDeploy(destDir, deployDir)[ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_96 $$ if (pluginPackage != null) [ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_43 $$ deployDir = displayName + ".war"[ FD ]
Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_35 $$ if (Validator.isNull(displayName)) [ FD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_38 $$ pluginPackage.setContext(displayName)[ FD ]
Line_45 $$ deployDir = srcFile.getName()-->Line_54 $$ deployDir = deployDir.substring(0, deployDir.length() - 4)[ FD ]
Line_36 $$ displayName = getDisplayName(srcFile)-->Line_43 $$ deployDir = displayName + ".war"[ FD ]
Line_28 $$ if (pluginPackage != null) -->Line_29 $$ if (!PluginPackageUtil.isCurrentVersionSupported(pluginPackage.getLiferayVersions())) [ CD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_35 $$ if (Validator.isNull(displayName)) [ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_58 $$ if (autoDeploymentContext.getDestDir() != null) [ CD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_19 $$ String preliminaryContext = specifiedContext[ CD ]
Line_22 $$ overwrite = true-->Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_64 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_66 $$ String previousVersion = previousPluginPackage.getVersion()[ CD ]
Line_19 $$ String preliminaryContext = specifiedContext-->Line_25 $$ if (preliminaryContext == null) [ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_97 $$ PluginPackageUtil.endPluginPackageInstallation(pluginPackage.getContext())[ FD ]
Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_36 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_71 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) [ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_39 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_29 $$ if (!PluginPackageUtil.isCurrentVersionSupported(pluginPackage.getLiferayVersions())) [ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_65 $$ String name = pluginPackage.getName()[ FD ]
Line_19 $$ String preliminaryContext = specifiedContext-->Line_26 $$ preliminaryContext = getDisplayName(srcFile)[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_23 $$ preliminaryContext = displayName[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_45 $$ deployDir = srcFile.getName()-->Line_51 $$ deployDir = wildflyPrefix + deployDir[ FD ]
Line_3 $$ File srcFile = autoDeploymentContext.getFile()-->Line_36 $$ displayName = getDisplayName(srcFile)[ FD ]
Line_80 $$ if (srcFile.isDirectory()) -->Line_84 $$ if (!deployed) [ CD ]
Line_83 $$ boolean deployed = deployFile(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)-->Line_84 $$ if (!deployed) [ FD ]
Line_23 $$ preliminaryContext = displayName-->Line_26 $$ preliminaryContext = getDisplayName(srcFile)[ FD ]
Line_5 $$ if (pluginPackage == null) -->Line_7 $$ autoDeploymentContext.setPluginPackage(pluginPackage)[ CD ]
Line_20 $$ if (Validator.isNull(specifiedContext) && srcFile.getName().startsWith(DEPLOY_TO_PREFIX)) -->Line_23 $$ preliminaryContext = displayName[ CD ]
Line_33 $$ displayName = pluginPackage.getRecommendedDeploymentContext()-->Line_42 $$ if (Validator.isNotNull(displayName)) [ FD ]
Line_52 $$ if (appServerType.equals(ServerDetector.GLASSFISH_ID) || appServerType.equals(ServerDetector.JETTY_ID) || appServerType.equals(ServerDetector.JONAS_ID) || appServerType.equals(ServerDetector.OC4J_ID) || appServerType.equals(ServerDetector.RESIN_ID) || appServerType.equals(ServerDetector.TOMCAT_ID) || appServerType.equals(ServerDetector.WEBLOGIC_ID)) -->Line_53 $$ if (unpackWar) [ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_59 $$ destDir = autoDeploymentContext.getDestDir()[ FD ]
Line_28 $$ if (pluginPackage != null) -->Line_38 $$ pluginPackage.setContext(displayName)[ CD ]
Line_17 $$ String displayName = specifiedContext-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_48 $$ if (appServerType.equals(ServerDetector.JBOSS_ID)) -->Line_50 $$ if (appServerType.equals(ServerDetector.WILDFLY_ID)) [ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_81 $$ deployDirectory(srcFile, mergeDirFile, deployDirFile, displayName, overwrite, pluginPackage)[ FD ]
Line_43 $$ deployDir = displayName + ".war"-->Line_51 $$ deployDir = wildflyPrefix + deployDir[ FD ]
Line_63 $$ PluginPackage previousPluginPackage = readPluginPackage(deployDirFile)-->Line_71 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) [ FD ]
Line_35 $$ if (Validator.isNull(displayName)) -->Line_36 $$ displayName = getDisplayName(srcFile)[ CD ]
Line_96 $$ if (pluginPackage != null) -->Line_97 $$ PluginPackageUtil.endPluginPackageInstallation(pluginPackage.getContext())[ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_71 $$ if (pluginPackage.isPreviousVersionThan(previousPluginPackage)) [ FD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_67 $$ String version = pluginPackage.getVersion()[ FD ]
Line_64 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_67 $$ String version = pluginPackage.getVersion()[ CD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_25 $$ if (preliminaryContext == null) [ CD ]
Line_72 $$ if (_log.isInfoEnabled()) -->Line_73 $$ _log.info("Not updating " + name + " because version " + previousVersion + " is newer than version " + version)[ CD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_42 $$ if (Validator.isNotNull(displayName)) [ FD ]
Line_49 $$ deployDir = jbossPrefix + deployDir-->Line_91 $$ postDeploy(destDir, deployDir)[ FD ]
Line_18 $$ boolean overwrite = false-->Line_22 $$ overwrite = true[ FD ]
Line_2 $$ public int deployFile(AutoDeploymentContext autoDeploymentContext) throws Exception -->Line_16 $$ String specifiedContext = autoDeploymentContext.getContext()[ FD ]
Line_17 $$ String displayName = specifiedContext-->Line_32 $$ if (displayName == null) [ FD ]
Line_43 $$ deployDir = displayName + ".war"-->Line_45 $$ deployDir = srcFile.getName()[ FD ]
Line_21 $$ displayName = srcFile.getName().substring(DEPLOY_TO_PREFIX.length(), srcFile.getName().length() - 4)-->Line_43 $$ deployDir = displayName + ".war"[ FD ]
Line_6 $$ pluginPackage = readPluginPackage(srcFile)-->Line_67 $$ String version = pluginPackage.getVersion()[ FD ]
Line_64 $$ if ((pluginPackage != null) && (previousPluginPackage != null)) -->Line_65 $$ String name = pluginPackage.getName()[ CD ]
Line_43 $$ deployDir = displayName + ".war"-->Line_49 $$ deployDir = jbossPrefix + deployDir[ FD ]
Line_57 $$ String destDir = this.destDir-->Line_91 $$ postDeploy(destDir, deployDir)[ FD ]
Line_42 $$ if (Validator.isNotNull(displayName)) -->Line_45 $$ deployDir = srcFile.getName()[ CD ]
Line_4 $$ PluginPackage pluginPackage = autoDeploymentContext.getPluginPackage()-->Line_86 $$ if (pluginPackage != null) [ FD ]
Line_28 $$ if (pluginPackage != null) -->Line_39 $$ PluginPackageUtil.updateInstallingPluginPackage(preliminaryContext, pluginPackage)[ CD ]
