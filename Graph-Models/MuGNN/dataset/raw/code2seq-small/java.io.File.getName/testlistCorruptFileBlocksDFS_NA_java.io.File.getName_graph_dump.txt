Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_11 $$ fs = cluster.getFileSystem()[ FD ]
Line_6 $$ FileSystem fs = null-->Line_46 $$ util.cleanup(fs, "/corruptData")[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 1000)[ FD ]
Line_49 $$ if (cluster != null) -->Line_50 $$ cluster.shutdown()[ CD ]
Line_2 $$ public void testlistCorruptFileBlocksDFS() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_33 $$ int count = 0-->Line_40 $$ count++[ FD ]
Line_34 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_38 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_11 $$ fs = cluster.getFileSystem()[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_50 $$ cluster.shutdown()[ FD ]
Line_38 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_39 $$ numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY, 1)[ FD ]
Line_2 $$ public void testlistCorruptFileBlocksDFS() throws Exception -->Line_6 $$ FileSystem fs = null[ CD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_49 $$ if (cluster != null) [ FD ]
Line_20 $$ File storageDir = cluster.getInstanceStorageDir(0, i)-->Line_21 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_15 $$ RemoteIterator<Path> corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_38 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))[ FD ]
Line_22 $$ List<File> metadataFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)-->Line_23 $$ if (metadataFiles == null)[ FD ]
Line_12 $$ DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_38 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))[ FD ]
Line_21 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)-->Line_22 $$ List<File> metadataFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)[ FD ]
Line_36 $$ while (numCorrupt < 3) -->Line_41 $$ if (count > 30)[ CD ]
Line_15 $$ RemoteIterator<Path> corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_39 $$ numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_18 $$ String bpid = cluster.getNamesystem().getBlockPoolId()-->Line_21 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ FD ]
Line_12 $$ DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_34 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))[ FD ]
Line_13 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("testGetCorruptFiles").setNumFiles(3).setMaxLevels(1).setMaxSize(1024).build()-->Line_46 $$ util.cleanup(fs, "/corruptData")[ FD ]
Line_19 $$ for (int i = 0; i < 2; i++) -->Line_20 $$ File storageDir = cluster.getInstanceStorageDir(0, i)[ CD ]
Line_11 $$ fs = cluster.getFileSystem()-->Line_47 $$ util.cleanup(fs, "/goodData")[ FD ]
Line_33 $$ int count = 0-->Line_41 $$ if (count > 30)[ FD ]
Line_15 $$ RemoteIterator<Path> corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_35 $$ numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_11 $$ fs = cluster.getFileSystem()-->Line_14 $$ util.createFiles(fs, "/corruptData")[ FD ]
Line_39 $$ numCorrupt = countPaths(corruptFileBlocks)-->Line_36 $$ while (numCorrupt < 3) [ FD ]
Line_13 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("testGetCorruptFiles").setNumFiles(3).setMaxLevels(1).setMaxSize(1024).build()-->Line_47 $$ util.cleanup(fs, "/goodData")[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_18 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ FD ]
Line_2 $$ public void testlistCorruptFileBlocksDFS() throws Exception -->Line_4 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 1000)[ CD ]
Line_19 $$ for (int i = 0; i < 2; i++) -->Line_20 $$ File storageDir = cluster.getInstanceStorageDir(0, i)[ FD ]
Line_25 $$ for (File metadataFile : metadataFiles) -->Line_29 $$ LOG.info("Deliberately removing file " + metadataFile.getName())[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).build()[ FD ]
Line_19 $$ for (int i = 0; i < 2; i++) -->Line_23 $$ if (metadataFiles == null)[ CD ]
Line_25 $$ for (File metadataFile : metadataFiles) -->Line_30 $$ assertTrue("Cannot remove file.", metadataFile.delete())[ FD ]
Line_15 $$ RemoteIterator<Path> corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_34 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))[ FD ]
Line_36 $$ while (numCorrupt < 3) -->Line_39 $$ numCorrupt = countPaths(corruptFileBlocks)[ CD ]
Line_25 $$ for (File metadataFile : metadataFiles) -->Line_26 $$ File blockFile = Block.metaToBlockFile(metadataFile)[ FD ]
Line_36 $$ while (numCorrupt < 3) -->Line_37 $$ Thread.sleep(1000)[ CD ]
Line_36 $$ while (numCorrupt < 3) -->Line_40 $$ count++[ CD ]
Line_6 $$ FileSystem fs = null-->Line_14 $$ util.createFiles(fs, "/corruptData")[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_10 $$ cluster.waitActive()[ FD ]
Line_12 $$ DistributedFileSystem dfs = (DistributedFileSystem) fs-->Line_15 $$ RemoteIterator<Path> corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_18 $$ String bpid = cluster.getNamesystem().getBlockPoolId()[ FD ]
Line_16 $$ int numCorrupt = countPaths(corruptFileBlocks)-->Line_35 $$ numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_49 $$ if (cluster != null) [ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_20 $$ File storageDir = cluster.getInstanceStorageDir(0, i)[ FD ]
Line_15 $$ RemoteIterator<Path> corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_16 $$ int numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_6 $$ FileSystem fs = null-->Line_47 $$ util.cleanup(fs, "/goodData")[ FD ]
Line_26 $$ File blockFile = Block.metaToBlockFile(metadataFile)-->Line_28 $$ assertTrue("Cannot remove file.", blockFile.delete())[ FD ]
Line_6 $$ FileSystem fs = null-->Line_11 $$ fs = cluster.getFileSystem()[ FD ]
Line_34 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_39 $$ numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_2 $$ public void testlistCorruptFileBlocksDFS() throws Exception -->Line_5 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_DIRECTORYSCAN_INTERVAL_KEY, 1)[ CD ]
Line_11 $$ fs = cluster.getFileSystem()-->Line_46 $$ util.cleanup(fs, "/corruptData")[ FD ]
Line_26 $$ File blockFile = Block.metaToBlockFile(metadataFile)-->Line_27 $$ LOG.info("Deliberately removing file " + blockFile.getName())[ FD ]
Line_35 $$ numCorrupt = countPaths(corruptFileBlocks)-->Line_39 $$ numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_10 $$ cluster.waitActive()[ FD ]
Line_35 $$ numCorrupt = countPaths(corruptFileBlocks)-->Line_36 $$ while (numCorrupt < 3) [ FD ]
Line_2 $$ public void testlistCorruptFileBlocksDFS() throws Exception -->Line_7 $$ MiniDFSCluster cluster = null[ CD ]
Line_16 $$ int numCorrupt = countPaths(corruptFileBlocks)-->Line_36 $$ while (numCorrupt < 3) [ FD ]
Line_16 $$ int numCorrupt = countPaths(corruptFileBlocks)-->Line_39 $$ numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_19 $$ for (int i = 0; i < 2; i++) -->Line_22 $$ List<File> metadataFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)[ CD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_20 $$ File storageDir = cluster.getInstanceStorageDir(0, i)[ FD ]
Line_9 $$ cluster = new MiniDFSCluster.Builder(conf).build()-->Line_50 $$ cluster.shutdown()[ FD ]
Line_34 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))-->Line_35 $$ numCorrupt = countPaths(corruptFileBlocks)[ FD ]
Line_13 $$ DFSTestUtil util = new DFSTestUtil.Builder().setName("testGetCorruptFiles").setNumFiles(3).setMaxLevels(1).setMaxSize(1024).build()-->Line_14 $$ util.createFiles(fs, "/corruptData")[ FD ]
Line_36 $$ while (numCorrupt < 3) -->Line_38 $$ corruptFileBlocks = dfs.listCorruptFileBlocks(new Path("/corruptData"))[ CD ]
Line_19 $$ for (int i = 0; i < 2; i++) -->Line_21 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, bpid)[ CD ]
