Line_28 $$ if (progress != null) -->Line_29 $$ progress.setText2(SvnBundle.message("progress.text2.processing.file", ioFile.getName()))[ CD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_47 $$ StatusBarUtil.setStatusBarInfo(project, SvnBundle.message("message.text.files.unlocked", count[0]))[ CD ]
Line_19 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_22 $$ progress.setText(SvnBundle.message("progress.text.unlocking.files"))[ FD ]
Line_7 $$ final ProgressTracker eventHandler = new ProgressTracker() -->Line_31 $$ activeVcs.getFactory(ioFile).createLockClient().unlock(ioFile, force, eventHandler)[ FD ]
Line_9 $$ if (event.getAction() == EventAction.UNLOCK_FAILED) -->Line_11 $$ count[0]--[ CD ]
Line_5 $$ final Collection<String> failedUnlocks = new ArrayList<String>()-->Line_39 $$ if (!failedUnlocks.isEmpty()) [ FD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_3 $$ final boolean force = true[ CD ]
Line_19 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_21 $$ if (progress != null) [ FD ]
Line_7 $$ final ProgressTracker eventHandler = new ProgressTracker() -->Line_9 $$ if (event.getAction() == EventAction.UNLOCK_FAILED) [ FD ]
Line_24 $$ for (File ioFile : ioFiles) -->Line_31 $$ activeVcs.getFactory(ioFile).createLockClient().unlock(ioFile, force, eventHandler)[ FD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_6 $$ final int[] count = new int[] [ CD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_4 $$ final VcsException[] exception = new VcsException[1][ CD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_38 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(command, SvnBundle.message("progress.title.unlock.files"), false, project)[ CD ]
Line_19 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_25 $$ if (progress != null) [ FD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_38 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(command, SvnBundle.message("progress.title.unlock.files"), false, project)[ FD ]
Line_21 $$ if (progress != null) -->Line_22 $$ progress.setText(SvnBundle.message("progress.text.unlocking.files"))[ CD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_7 $$ final ProgressTracker eventHandler = new ProgressTracker() [ CD ]
Line_19 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_28 $$ if (progress != null) [ FD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_45 $$ AbstractVcsHelper.getInstance(project).showErrors(exceptions, SvnBundle.message("message.title.unlock.failures"))[ FD ]
Line_9 $$ if (event.getAction() == EventAction.UNLOCK_FAILED) -->Line_10 $$ failedUnlocks.add(event.getErrorMessage() != null ? event.getErrorMessage().getFullMessage() : event.getFile().getAbsolutePath())[ CD ]
Line_25 $$ if (progress != null) -->Line_26 $$ progress.checkCanceled()[ CD ]
Line_17 $$ Runnable command = new Runnable() -->Line_19 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_24 $$ for (File ioFile : ioFiles) -->Line_29 $$ progress.setText2(SvnBundle.message("progress.text2.processing.file", ioFile.getName()))[ FD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_31 $$ activeVcs.getFactory(ioFile).createLockClient().unlock(ioFile, force, eventHandler)[ FD ]
Line_5 $$ final Collection<String> failedUnlocks = new ArrayList<String>()-->Line_10 $$ failedUnlocks.add(event.getErrorMessage() != null ? event.getErrorMessage().getFullMessage() : event.getFile().getAbsolutePath())[ FD ]
Line_7 $$ final ProgressTracker eventHandler = new ProgressTracker() -->Line_9 $$ if (event.getAction() == EventAction.UNLOCK_FAILED) [ CD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_47 $$ StatusBarUtil.setStatusBarInfo(project, SvnBundle.message("message.text.files.unlocked", count[0]))[ FD ]
Line_39 $$ if (!failedUnlocks.isEmpty()) -->Line_40 $$ String[] failedFiles = ArrayUtil.toStringArray(failedUnlocks)[ CD ]
Line_5 $$ final Collection<String> failedUnlocks = new ArrayList<String>()-->Line_40 $$ String[] failedFiles = ArrayUtil.toStringArray(failedUnlocks)[ FD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_39 $$ if (!failedUnlocks.isEmpty()) [ CD ]
Line_19 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_26 $$ progress.checkCanceled()[ FD ]
Line_3 $$ final boolean force = true-->Line_31 $$ activeVcs.getFactory(ioFile).createLockClient().unlock(ioFile, force, eventHandler)[ FD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_48 $$ if (exception[0] != null) [ CD ]
Line_2 $$ public static void doUnlockFiles(Project project, final SvnVcs activeVcs, final File[] ioFiles) throws VcsException -->Line_5 $$ final Collection<String> failedUnlocks = new ArrayList<String>()[ CD ]
Line_19 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_29 $$ progress.setText2(SvnBundle.message("progress.text2.processing.file", ioFile.getName()))[ FD ]
Line_7 $$ final ProgressTracker eventHandler = new ProgressTracker() -->Line_10 $$ failedUnlocks.add(event.getErrorMessage() != null ? event.getErrorMessage().getFullMessage() : event.getFile().getAbsolutePath())[ FD ]
Line_39 $$ if (!failedUnlocks.isEmpty()) -->Line_45 $$ AbstractVcsHelper.getInstance(project).showErrors(exceptions, SvnBundle.message("message.title.unlock.failures"))[ CD ]
