Line_13 $$ VirtualFile vSubChildRel-->Line_14 $$ vSubChildRel = vLink.findFileByRelativePath(relPath)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_17 $$ assertEquals(vSubChild, vSubChildRel)[ CD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_13 $$ VirtualFile vSubChildRel[ CD ]
Line_9 $$ File subChild = createTestFile(subDir2, "subChild.txt")-->Line_11 $$ assertNotNull(subChild.getPath(), vSubChild)[ FD ]
Line_3 $$ File topDir = myTempDir.newFolder("top")-->Line_4 $$ File subDir1 = createTestDir(topDir, "sub1")[ FD ]
Line_8 $$ File subDir2 = createTestDir(topDir, "sub2")-->Line_12 $$ String relPath = "../" + subDir2.getName() + "/" + subChild.getName()[ FD ]
Line_16 $$ vSubChildRel = LocalFileSystem.getInstance().findFileByPath(vLink.getPath() + "/" + relPath)-->Line_17 $$ assertEquals(vSubChild, vSubChildRel)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_4 $$ File subDir1 = createTestDir(topDir, "sub1")[ CD ]
Line_6 $$ VirtualFile vLink = refreshAndFind(link)-->Line_14 $$ vSubChildRel = vLink.findFileByRelativePath(relPath)[ FD ]
Line_10 $$ VirtualFile vSubChild = refreshAndFind(subChild)-->Line_11 $$ assertNotNull(subChild.getPath(), vSubChild)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_15 $$ assertEquals(vSubChild, vSubChildRel)[ CD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_6 $$ VirtualFile vLink = refreshAndFind(link)[ CD ]
Line_14 $$ vSubChildRel = vLink.findFileByRelativePath(relPath)-->Line_15 $$ assertEquals(vSubChild, vSubChildRel)[ FD ]
Line_9 $$ File subChild = createTestFile(subDir2, "subChild.txt")-->Line_10 $$ VirtualFile vSubChild = refreshAndFind(subChild)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_9 $$ File subChild = createTestFile(subDir2, "subChild.txt")[ CD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_5 $$ File link = createSymLink(subDir1.getPath(), myTempDir.getRoot() + "/link")[ CD ]
Line_14 $$ vSubChildRel = vLink.findFileByRelativePath(relPath)-->Line_16 $$ vSubChildRel = LocalFileSystem.getInstance().findFileByPath(vLink.getPath() + "/" + relPath)[ FD ]
Line_10 $$ VirtualFile vSubChild = refreshAndFind(subChild)-->Line_17 $$ assertEquals(vSubChild, vSubChildRel)[ FD ]
Line_6 $$ VirtualFile vLink = refreshAndFind(link)-->Line_16 $$ vSubChildRel = LocalFileSystem.getInstance().findFileByPath(vLink.getPath() + "/" + relPath)[ FD ]
Line_6 $$ VirtualFile vLink = refreshAndFind(link)-->Line_7 $$ assertNotNull(link.getPath(), vLink)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_12 $$ String relPath = "../" + subDir2.getName() + "/" + subChild.getName()[ CD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_16 $$ vSubChildRel = LocalFileSystem.getInstance().findFileByPath(vLink.getPath() + "/" + relPath)[ CD ]
Line_3 $$ File topDir = myTempDir.newFolder("top")-->Line_8 $$ File subDir2 = createTestDir(topDir, "sub2")[ FD ]
Line_5 $$ File link = createSymLink(subDir1.getPath(), myTempDir.getRoot() + "/link")-->Line_6 $$ VirtualFile vLink = refreshAndFind(link)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_8 $$ File subDir2 = createTestDir(topDir, "sub2")[ CD ]
Line_14 $$ vSubChildRel = vLink.findFileByRelativePath(relPath)-->Line_17 $$ assertEquals(vSubChild, vSubChildRel)[ FD ]
Line_10 $$ VirtualFile vSubChild = refreshAndFind(subChild)-->Line_15 $$ assertEquals(vSubChild, vSubChildRel)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_10 $$ VirtualFile vSubChild = refreshAndFind(subChild)[ CD ]
Line_9 $$ File subChild = createTestFile(subDir2, "subChild.txt")-->Line_12 $$ String relPath = "../" + subDir2.getName() + "/" + subChild.getName()[ FD ]
Line_12 $$ String relPath = "../" + subDir2.getName() + "/" + subChild.getName()-->Line_14 $$ vSubChildRel = vLink.findFileByRelativePath(relPath)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_7 $$ assertNotNull(link.getPath(), vLink)[ CD ]
Line_4 $$ File subDir1 = createTestDir(topDir, "sub1")-->Line_5 $$ File link = createSymLink(subDir1.getPath(), myTempDir.getRoot() + "/link")[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_3 $$ File topDir = myTempDir.newFolder("top")[ CD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_14 $$ vSubChildRel = vLink.findFileByRelativePath(relPath)[ CD ]
Line_8 $$ File subDir2 = createTestDir(topDir, "sub2")-->Line_9 $$ File subChild = createTestFile(subDir2, "subChild.txt")[ FD ]
Line_13 $$ VirtualFile vSubChildRel-->Line_17 $$ assertEquals(vSubChild, vSubChildRel)[ FD ]
Line_13 $$ VirtualFile vSubChildRel-->Line_16 $$ vSubChildRel = LocalFileSystem.getInstance().findFileByPath(vLink.getPath() + "/" + relPath)[ FD ]
Line_13 $$ VirtualFile vSubChildRel-->Line_15 $$ assertEquals(vSubChild, vSubChildRel)[ FD ]
Line_2 $$ public void testTraversePathBehindLink() throws Exception -->Line_11 $$ assertNotNull(subChild.getPath(), vSubChild)[ CD ]
Line_5 $$ File link = createSymLink(subDir1.getPath(), myTempDir.getRoot() + "/link")-->Line_7 $$ assertNotNull(link.getPath(), vLink)[ FD ]
