Line_8 $$ for (File item : files) -->Line_10 $$ cleanUpSkeletons(item)[ FD ]
Line_15 $$ File lastFile = remaining[0]-->Line_17 $$ boolean deleted = mySkeletonsGenerator.deleteOrLog(lastFile)[ FD ]
Line_8 $$ for (File item : files) -->Line_9 $$ if (item.isDirectory()) [ FD ]
Line_8 $$ for (File item : files) -->Line_22 $$ if (item.isFile()) [ FD ]
Line_23 $$ final String itemName = item.getName()-->Line_26 $$ if (BLACKLIST_FILE_NAME.equals(itemName))[ FD ]
Line_35 $$ canLive = SkeletonVersionChecker.BUILTIN_NAME.equals(binaryFile) || mySkeletonsGenerator.exists(binaryFile)-->Line_37 $$ if (!canLive) [ FD ]
Line_8 $$ for (File item : files) -->Line_24 $$ if (PyNames.INIT_DOT_PY.equals(itemName) && item.length() == 0)[ FD ]
Line_8 $$ for (File item : files) -->Line_13 $$ mySkeletonsGenerator.deleteOrLog(item)[ FD ]
Line_22 $$ if (item.isFile()) -->Line_37 $$ if (!canLive) [ CD ]
Line_4 $$ final File[] files = dir.listFiles()-->Line_5 $$ if (files == null) [ FD ]
Line_5 $$ if (files == null) -->Line_6 $$ return[ CD ]
Line_2 $$ private void cleanUpSkeletons(final File dir) -->Line_4 $$ final File[] files = dir.listFiles()[ CD ]
Line_14 $$ if (remaining != null && remaining.length == 1) -->Line_16 $$ if (PyNames.INIT_DOT_PY.equals(lastFile.getName()) && lastFile.length() == 0) [ CD ]
Line_22 $$ if (item.isFile()) -->Line_32 $$ boolean canLive = header != null[ CD ]
Line_34 $$ final String binaryFile = header.getBinaryFile()-->Line_35 $$ canLive = SkeletonVersionChecker.BUILTIN_NAME.equals(binaryFile) || mySkeletonsGenerator.exists(binaryFile)[ FD ]
Line_12 $$ if (remaining != null && remaining.length == 0) -->Line_13 $$ mySkeletonsGenerator.deleteOrLog(item)[ CD ]
Line_2 $$ private void cleanUpSkeletons(final File dir) -->Line_4 $$ final File[] files = dir.listFiles()[ FD ]
Line_32 $$ boolean canLive = header != null-->Line_37 $$ if (!canLive) [ FD ]
Line_37 $$ if (!canLive) -->Line_38 $$ mySkeletonsGenerator.deleteOrLog(item)[ CD ]
Line_2 $$ private void cleanUpSkeletons(final File dir) -->Line_5 $$ if (files == null) [ CD ]
Line_9 $$ if (item.isDirectory()) -->Line_22 $$ if (item.isFile()) [ CD ]
Line_18 $$ if (deleted)-->Line_19 $$ mySkeletonsGenerator.deleteOrLog(item)[ CD ]
Line_9 $$ if (item.isDirectory()) -->Line_10 $$ cleanUpSkeletons(item)[ CD ]
Line_22 $$ if (item.isFile()) -->Line_28 $$ if (PythonSdkType.getBuiltinsFileName(mySdk).equals(itemName)) [ CD ]
Line_16 $$ if (PyNames.INIT_DOT_PY.equals(lastFile.getName()) && lastFile.length() == 0) -->Line_17 $$ boolean deleted = mySkeletonsGenerator.deleteOrLog(lastFile)[ CD ]
Line_22 $$ if (item.isFile()) -->Line_26 $$ if (BLACKLIST_FILE_NAME.equals(itemName))[ CD ]
Line_8 $$ for (File item : files) -->Line_11 $$ File[] remaining = item.listFiles()[ FD ]
Line_33 $$ if (canLive) -->Line_35 $$ canLive = SkeletonVersionChecker.BUILTIN_NAME.equals(binaryFile) || mySkeletonsGenerator.exists(binaryFile)[ CD ]
Line_2 $$ private void cleanUpSkeletons(final File dir) -->Line_3 $$ indicateMinor(dir.getPath())[ CD ]
Line_31 $$ final SkeletonHeader header = readSkeletonHeader(item)-->Line_34 $$ final String binaryFile = header.getBinaryFile()[ FD ]
Line_22 $$ if (item.isFile()) -->Line_33 $$ if (canLive) [ CD ]
Line_8 $$ for (File item : files) -->Line_38 $$ mySkeletonsGenerator.deleteOrLog(item)[ FD ]
Line_9 $$ if (item.isDirectory()) -->Line_11 $$ File[] remaining = item.listFiles()[ CD ]
Line_16 $$ if (PyNames.INIT_DOT_PY.equals(lastFile.getName()) && lastFile.length() == 0) -->Line_18 $$ if (deleted)[ CD ]
Line_22 $$ if (item.isFile()) -->Line_24 $$ if (PyNames.INIT_DOT_PY.equals(itemName) && item.length() == 0)[ CD ]
Line_12 $$ if (remaining != null && remaining.length == 0) -->Line_14 $$ if (remaining != null && remaining.length == 1) [ CD ]
Line_23 $$ final String itemName = item.getName()-->Line_24 $$ if (PyNames.INIT_DOT_PY.equals(itemName) && item.length() == 0)[ FD ]
Line_8 $$ for (File item : files) -->Line_19 $$ mySkeletonsGenerator.deleteOrLog(item)[ FD ]
Line_22 $$ if (item.isFile()) -->Line_23 $$ final String itemName = item.getName()[ CD ]
Line_8 $$ for (File item : files) -->Line_31 $$ final SkeletonHeader header = readSkeletonHeader(item)[ FD ]
Line_2 $$ private void cleanUpSkeletons(final File dir) -->Line_3 $$ indicateMinor(dir.getPath())[ FD ]
Line_23 $$ final String itemName = item.getName()-->Line_28 $$ if (PythonSdkType.getBuiltinsFileName(mySdk).equals(itemName)) [ FD ]
Line_15 $$ File lastFile = remaining[0]-->Line_16 $$ if (PyNames.INIT_DOT_PY.equals(lastFile.getName()) && lastFile.length() == 0) [ FD ]
Line_8 $$ for (File item : files) -->Line_23 $$ final String itemName = item.getName()[ FD ]
Line_22 $$ if (item.isFile()) -->Line_31 $$ final SkeletonHeader header = readSkeletonHeader(item)[ CD ]
Line_9 $$ if (item.isDirectory()) -->Line_12 $$ if (remaining != null && remaining.length == 0) [ CD ]
Line_32 $$ boolean canLive = header != null-->Line_35 $$ canLive = SkeletonVersionChecker.BUILTIN_NAME.equals(binaryFile) || mySkeletonsGenerator.exists(binaryFile)[ FD ]
Line_14 $$ if (remaining != null && remaining.length == 1) -->Line_15 $$ File lastFile = remaining[0][ CD ]
Line_33 $$ if (canLive) -->Line_34 $$ final String binaryFile = header.getBinaryFile()[ CD ]
