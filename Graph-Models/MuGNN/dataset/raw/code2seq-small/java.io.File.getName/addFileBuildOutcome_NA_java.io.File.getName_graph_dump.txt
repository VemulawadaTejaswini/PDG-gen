Line_4 $$ File originalFile = outcome.getFile()-->Line_9 $$ resource = fileStore.move(filestoreDestination, originalFile)[ FD ]
Line_4 $$ File originalFile = outcome.getFile()-->Line_5 $$ String relativePath = GFileUtils.relativePath(rootProject.getProjectDirectory(), originalFile)[ FD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_7 $$ if (originalFile.exists()) [ CD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_4 $$ File originalFile = outcome.getFile()[ FD ]
Line_8 $$ String filestoreDestination = String.format("%s/%s/%s", fileStorePrefix, outcome.getTaskPath(), originalFile.getName())-->Line_9 $$ resource = fileStore.move(filestoreDestination, originalFile)[ FD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_11 $$ BuildOutcome buildOutcome = new GeneratedArchiveBuildOutcome(outcome.getTaskPath(), outcome.getDescription(), resource, relativePath)[ FD ]
Line_7 $$ if (originalFile.exists()) -->Line_9 $$ resource = fileStore.move(filestoreDestination, originalFile)[ CD ]
Line_7 $$ if (originalFile.exists()) -->Line_8 $$ String filestoreDestination = String.format("%s/%s/%s", fileStorePrefix, outcome.getTaskPath(), originalFile.getName())[ CD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_14 $$ String outcomeName = outcome.getTaskPath()[ CD ]
Line_15 $$ if (isEmpty(outcomeName)) -->Line_16 $$ outcomeName = GFileUtils.relativePath(rootProject.getProjectDirectory(), outcome.getFile())[ CD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_18 $$ translatedOutcomes.add(new UnknownBuildOutcome(outcomeName, outcome.getDescription()))[ FD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_6 $$ LocallyAvailableResource resource = null[ CD ]
Line_14 $$ String outcomeName = outcome.getTaskPath()-->Line_16 $$ outcomeName = GFileUtils.relativePath(rootProject.getProjectDirectory(), outcome.getFile())[ FD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_4 $$ File originalFile = outcome.getFile()[ CD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_15 $$ if (isEmpty(outcomeName)) [ CD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_8 $$ String filestoreDestination = String.format("%s/%s/%s", fileStorePrefix, outcome.getTaskPath(), originalFile.getName())[ FD ]
Line_11 $$ BuildOutcome buildOutcome = new GeneratedArchiveBuildOutcome(outcome.getTaskPath(), outcome.getDescription(), resource, relativePath)-->Line_12 $$ translatedOutcomes.add(buildOutcome)[ FD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_5 $$ String relativePath = GFileUtils.relativePath(rootProject.getProjectDirectory(), originalFile)[ CD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) [ FD ]
Line_14 $$ String outcomeName = outcome.getTaskPath()-->Line_15 $$ if (isEmpty(outcomeName)) [ FD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_16 $$ outcomeName = GFileUtils.relativePath(rootProject.getProjectDirectory(), outcome.getFile())[ FD ]
Line_6 $$ LocallyAvailableResource resource = null-->Line_9 $$ resource = fileStore.move(filestoreDestination, originalFile)[ FD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_12 $$ translatedOutcomes.add(buildOutcome)[ FD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_18 $$ translatedOutcomes.add(new UnknownBuildOutcome(outcomeName, outcome.getDescription()))[ CD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) [ CD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_12 $$ translatedOutcomes.add(buildOutcome)[ CD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_14 $$ String outcomeName = outcome.getTaskPath()[ FD ]
Line_4 $$ File originalFile = outcome.getFile()-->Line_7 $$ if (originalFile.exists()) [ FD ]
Line_2 $$ private void addFileBuildOutcome(GradleFileBuildOutcome outcome, ProjectOutcomes rootProject, Set<BuildOutcome> translatedOutcomes) -->Line_5 $$ String relativePath = GFileUtils.relativePath(rootProject.getProjectDirectory(), originalFile)[ FD ]
Line_3 $$ if (zipArchiveTypes.contains(outcome.getTypeIdentifier())) -->Line_11 $$ BuildOutcome buildOutcome = new GeneratedArchiveBuildOutcome(outcome.getTaskPath(), outcome.getDescription(), resource, relativePath)[ CD ]
Line_4 $$ File originalFile = outcome.getFile()-->Line_8 $$ String filestoreDestination = String.format("%s/%s/%s", fileStorePrefix, outcome.getTaskPath(), originalFile.getName())[ FD ]
