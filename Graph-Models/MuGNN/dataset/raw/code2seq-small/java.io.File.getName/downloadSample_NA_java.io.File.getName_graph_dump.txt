Line_2 $$ protected void downloadSample(File sampleDir, URL url) throws Exception -->Line_4 $$ int hostNameCount = LoadBalancerUtil.getHostNameCount(project, sampleDir.getName())[ FD ]
Line_2 $$ protected void downloadSample(File sampleDir, URL url) throws Exception -->Line_3 $$ Project project = getDownloadProject(sampleDir.getName())[ FD ]
Line_2 $$ protected void downloadSample(File sampleDir, URL url) throws Exception -->Line_7 $$ downloadSampleURL(new File(sampleDir, sampleDir.getName() + "-" + i), JenkinsResultsParserUtil.createURL(project.getProperty("jenkins.local.url[" + sampleDir.getName() + "-" + i + "]")), "/queue/api/json")[ FD ]
Line_3 $$ Project project = getDownloadProject(sampleDir.getName())-->Line_7 $$ downloadSampleURL(new File(sampleDir, sampleDir.getName() + "-" + i), JenkinsResultsParserUtil.createURL(project.getProperty("jenkins.local.url[" + sampleDir.getName() + "-" + i + "]")), "/queue/api/json")[ FD ]
Line_2 $$ protected void downloadSample(File sampleDir, URL url) throws Exception -->Line_4 $$ int hostNameCount = LoadBalancerUtil.getHostNameCount(project, sampleDir.getName())[ CD ]
Line_2 $$ protected void downloadSample(File sampleDir, URL url) throws Exception -->Line_5 $$ for (int i = 1; i <= hostNameCount; i++) [ CD ]
Line_4 $$ int hostNameCount = LoadBalancerUtil.getHostNameCount(project, sampleDir.getName())-->Line_5 $$ for (int i = 1; i <= hostNameCount; i++) [ FD ]
Line_2 $$ protected void downloadSample(File sampleDir, URL url) throws Exception -->Line_3 $$ Project project = getDownloadProject(sampleDir.getName())[ CD ]
Line_5 $$ for (int i = 1; i <= hostNameCount; i++) -->Line_6 $$ downloadSampleURL(new File(sampleDir, sampleDir.getName() + "-" + i), JenkinsResultsParserUtil.createURL(project.getProperty("jenkins.local.url[" + sampleDir.getName() + "-" + i + "]")), "/computer/api/json?pretty&tree=computer" + "[displayName,idle,offline]")[ CD ]
Line_3 $$ Project project = getDownloadProject(sampleDir.getName())-->Line_6 $$ downloadSampleURL(new File(sampleDir, sampleDir.getName() + "-" + i), JenkinsResultsParserUtil.createURL(project.getProperty("jenkins.local.url[" + sampleDir.getName() + "-" + i + "]")), "/computer/api/json?pretty&tree=computer" + "[displayName,idle,offline]")[ FD ]
Line_5 $$ for (int i = 1; i <= hostNameCount; i++) -->Line_7 $$ downloadSampleURL(new File(sampleDir, sampleDir.getName() + "-" + i), JenkinsResultsParserUtil.createURL(project.getProperty("jenkins.local.url[" + sampleDir.getName() + "-" + i + "]")), "/queue/api/json")[ CD ]
Line_2 $$ protected void downloadSample(File sampleDir, URL url) throws Exception -->Line_6 $$ downloadSampleURL(new File(sampleDir, sampleDir.getName() + "-" + i), JenkinsResultsParserUtil.createURL(project.getProperty("jenkins.local.url[" + sampleDir.getName() + "-" + i + "]")), "/computer/api/json?pretty&tree=computer" + "[displayName,idle,offline]")[ FD ]
Line_3 $$ Project project = getDownloadProject(sampleDir.getName())-->Line_4 $$ int hostNameCount = LoadBalancerUtil.getHostNameCount(project, sampleDir.getName())[ FD ]
