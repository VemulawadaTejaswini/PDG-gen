Line_10 $$ final VirtualFile parentVirtualFile = StringUtil.isEmpty(parentFile.getPath()) ? null : LocalFileSystem.getInstance().refreshAndFindFileByIoFile(parentFile)-->Line_19 $$ return parentVirtualFile.createChildData(requestor, file.getName())[ FD ]
Line_7 $$ File absoluteFile = file.getAbsoluteFile()-->Line_9 $$ File parentFile = absoluteFile.getParentFile()[ FD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_11 $$ if (parentVirtualFile == null) [ CD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_3 $$ VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ FD ]
Line_3 $$ VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)-->Line_4 $$ if (virtualFile != null) [ FD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_10 $$ final VirtualFile parentVirtualFile = StringUtil.isEmpty(parentFile.getPath()) ? null : LocalFileSystem.getInstance().refreshAndFindFileByIoFile(parentFile)[ CD ]
Line_9 $$ File parentFile = absoluteFile.getParentFile()-->Line_10 $$ final VirtualFile parentVirtualFile = StringUtil.isEmpty(parentFile.getPath()) ? null : LocalFileSystem.getInstance().refreshAndFindFileByIoFile(parentFile)[ FD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_19 $$ return parentVirtualFile.createChildData(requestor, file.getName())[ FD ]
Line_17 $$ AccessToken token = WriteAction.start()-->Line_21 $$ token.finish()[ FD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_9 $$ File parentFile = absoluteFile.getParentFile()[ CD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_8 $$ FileUtil.createParentDirs(absoluteFile)[ CD ]
Line_14 $$ if (ApplicationManager.getApplication().isWriteAccessAllowed()) -->Line_15 $$ return parentVirtualFile.createChildData(requestor, file.getName())[ CD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_14 $$ if (ApplicationManager.getApplication().isWriteAccessAllowed()) [ CD ]
Line_4 $$ if (virtualFile != null) -->Line_5 $$ return virtualFile[ CD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_3 $$ VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ CD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_17 $$ AccessToken token = WriteAction.start()[ CD ]
Line_10 $$ final VirtualFile parentVirtualFile = StringUtil.isEmpty(parentFile.getPath()) ? null : LocalFileSystem.getInstance().refreshAndFindFileByIoFile(parentFile)-->Line_11 $$ if (parentVirtualFile == null) [ FD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_4 $$ if (virtualFile != null) [ CD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_15 $$ return parentVirtualFile.createChildData(requestor, file.getName())[ FD ]
Line_10 $$ final VirtualFile parentVirtualFile = StringUtil.isEmpty(parentFile.getPath()) ? null : LocalFileSystem.getInstance().refreshAndFindFileByIoFile(parentFile)-->Line_15 $$ return parentVirtualFile.createChildData(requestor, file.getName())[ FD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_7 $$ File absoluteFile = file.getAbsoluteFile()[ CD ]
Line_7 $$ File absoluteFile = file.getAbsoluteFile()-->Line_8 $$ FileUtil.createParentDirs(absoluteFile)[ FD ]
Line_9 $$ File parentFile = absoluteFile.getParentFile()-->Line_12 $$ throw new IOException(ProjectBundle.message("project.configuration.save.file.not.found", parentFile))[ FD ]
Line_2 $$ public static VirtualFile getOrCreateVirtualFile(@Nullable final Object requestor, @NotNull final File file) throws IOException -->Line_7 $$ File absoluteFile = file.getAbsoluteFile()[ FD ]
