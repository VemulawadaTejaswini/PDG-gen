Line_15 $$ String chunkPrefix = "ModuleChunk("-->Line_16 $$ if (moduleName.startsWith(chunkPrefix)) [ FD ]
Line_15 $$ String chunkPrefix = "ModuleChunk("-->Line_17 $$ moduleName = StringUtil.trimStart(moduleName, chunkPrefix)[ FD ]
Line_7 $$ File root = new File(classRootPath)-->Line_8 $$ if (!root.exists()) [ FD ]
Line_11 $$ if (!root.isDirectory()) -->Line_12 $$ return FileSystemLocation.ULTIMATE[ CD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_3 $$ String classRootPath = PathManager.getJarPathForClass(clazz)[ FD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_7 $$ File root = new File(classRootPath)[ CD ]
Line_14 $$ String moduleName = root.getName()-->Line_17 $$ moduleName = StringUtil.trimStart(moduleName, chunkPrefix)[ FD ]
Line_7 $$ File root = new File(classRootPath)-->Line_11 $$ if (!root.isDirectory()) [ FD ]
Line_17 $$ moduleName = StringUtil.trimStart(moduleName, chunkPrefix)-->Line_20 $$ return getCommunityModules().contains(moduleName) ? FileSystemLocation.COMMUNITY : FileSystemLocation.ULTIMATE[ FD ]
Line_18 $$ moduleName = moduleName.substring(0, moduleName.indexOf(','))-->Line_20 $$ return getCommunityModules().contains(moduleName) ? FileSystemLocation.COMMUNITY : FileSystemLocation.ULTIMATE[ FD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_4 $$ if (classRootPath == null) [ CD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_3 $$ String classRootPath = PathManager.getJarPathForClass(clazz)[ CD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_20 $$ return getCommunityModules().contains(moduleName) ? FileSystemLocation.COMMUNITY : FileSystemLocation.ULTIMATE[ CD ]
Line_17 $$ moduleName = StringUtil.trimStart(moduleName, chunkPrefix)-->Line_18 $$ moduleName = moduleName.substring(0, moduleName.indexOf(','))[ FD ]
Line_14 $$ String moduleName = root.getName()-->Line_16 $$ if (moduleName.startsWith(chunkPrefix)) [ FD ]
Line_16 $$ if (moduleName.startsWith(chunkPrefix)) -->Line_17 $$ moduleName = StringUtil.trimStart(moduleName, chunkPrefix)[ CD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_16 $$ if (moduleName.startsWith(chunkPrefix)) [ CD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_8 $$ if (!root.exists()) [ CD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_11 $$ if (!root.isDirectory()) [ CD ]
Line_16 $$ if (moduleName.startsWith(chunkPrefix)) -->Line_18 $$ moduleName = moduleName.substring(0, moduleName.indexOf(','))[ CD ]
Line_7 $$ File root = new File(classRootPath)-->Line_14 $$ String moduleName = root.getName()[ FD ]
Line_3 $$ String classRootPath = PathManager.getJarPathForClass(clazz)-->Line_4 $$ if (classRootPath == null) [ FD ]
Line_14 $$ String moduleName = root.getName()-->Line_20 $$ return getCommunityModules().contains(moduleName) ? FileSystemLocation.COMMUNITY : FileSystemLocation.ULTIMATE[ FD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_15 $$ String chunkPrefix = "ModuleChunk("[ CD ]
Line_14 $$ String moduleName = root.getName()-->Line_18 $$ moduleName = moduleName.substring(0, moduleName.indexOf(','))[ FD ]
Line_2 $$ private static FileSystemLocation computeClassLocation(Class<?> clazz) -->Line_14 $$ String moduleName = root.getName()[ CD ]
