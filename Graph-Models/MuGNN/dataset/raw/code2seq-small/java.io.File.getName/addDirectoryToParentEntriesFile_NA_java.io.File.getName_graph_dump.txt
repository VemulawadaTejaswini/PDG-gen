Line_13 $$ String directoryName = directory.getName()-->Line_17 $$ setEntry(parentDirectoryObject, Entry.createDirectoryEntry(directoryName), cvsFileSystem)[ FD ]
Line_14 $$ Entry entry = myCvsEntriesManager.getEntryFor(virtualParent, directoryName)-->Line_15 $$ if (entry == null) [ FD ]
Line_11 $$ if (virtualParent == null)-->Line_12 $$ return[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_15 $$ if (entry == null) [ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_3 $$ DirectoryObject parentDirectoryObject = directoryObject.getParent()[ FD ]
Line_8 $$ if (parentDirectory == null)-->Line_9 $$ return[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_16 $$ if (CvsUtil.fileIsUnderCvs(virtualParent) && CvsEntriesManager.getInstance().getCvsConnectionSettingsFor(virtualParent).getCvsRootAsString().equals(cvsRoot)) [ FD ]
Line_3 $$ DirectoryObject parentDirectoryObject = directoryObject.getParent()-->Line_4 $$ if (parentDirectoryObject == null)[ FD ]
Line_10 $$ VirtualFile virtualParent = CvsVfsUtil.findFileByIoFile(parentDirectory)-->Line_16 $$ if (CvsUtil.fileIsUnderCvs(virtualParent) && CvsEntriesManager.getInstance().getCvsConnectionSettingsFor(virtualParent).getCvsRootAsString().equals(cvsRoot)) [ FD ]
Line_7 $$ final File parentDirectory = directory.getParentFile()-->Line_10 $$ VirtualFile virtualParent = CvsVfsUtil.findFileByIoFile(parentDirectory)[ FD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_17 $$ setEntry(parentDirectoryObject, Entry.createDirectoryEntry(directoryName), cvsFileSystem)[ FD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_10 $$ VirtualFile virtualParent = CvsVfsUtil.findFileByIoFile(parentDirectory)[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_11 $$ if (virtualParent == null)[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_3 $$ DirectoryObject parentDirectoryObject = directoryObject.getParent()[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_13 $$ String directoryName = directory.getName()[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_6 $$ File directory = cvsFileSystem.getAdminFileSystem().getFile(directoryObject)[ FD ]
Line_10 $$ VirtualFile virtualParent = CvsVfsUtil.findFileByIoFile(parentDirectory)-->Line_11 $$ if (virtualParent == null)[ FD ]
Line_13 $$ String directoryName = directory.getName()-->Line_14 $$ Entry entry = myCvsEntriesManager.getEntryFor(virtualParent, directoryName)[ FD ]
Line_4 $$ if (parentDirectoryObject == null)-->Line_5 $$ return[ CD ]
Line_15 $$ if (entry == null) -->Line_16 $$ if (CvsUtil.fileIsUnderCvs(virtualParent) && CvsEntriesManager.getInstance().getCvsConnectionSettingsFor(virtualParent).getCvsRootAsString().equals(cvsRoot)) [ CD ]
Line_6 $$ File directory = cvsFileSystem.getAdminFileSystem().getFile(directoryObject)-->Line_13 $$ String directoryName = directory.getName()[ FD ]
Line_7 $$ final File parentDirectory = directory.getParentFile()-->Line_8 $$ if (parentDirectory == null)[ FD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_7 $$ final File parentDirectory = directory.getParentFile()[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_6 $$ File directory = cvsFileSystem.getAdminFileSystem().getFile(directoryObject)[ CD ]
Line_10 $$ VirtualFile virtualParent = CvsVfsUtil.findFileByIoFile(parentDirectory)-->Line_14 $$ Entry entry = myCvsEntriesManager.getEntryFor(virtualParent, directoryName)[ FD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_4 $$ if (parentDirectoryObject == null)[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_8 $$ if (parentDirectory == null)[ CD ]
Line_6 $$ File directory = cvsFileSystem.getAdminFileSystem().getFile(directoryObject)-->Line_7 $$ final File parentDirectory = directory.getParentFile()[ FD ]
Line_3 $$ DirectoryObject parentDirectoryObject = directoryObject.getParent()-->Line_17 $$ setEntry(parentDirectoryObject, Entry.createDirectoryEntry(directoryName), cvsFileSystem)[ FD ]
Line_16 $$ if (CvsUtil.fileIsUnderCvs(virtualParent) && CvsEntriesManager.getInstance().getCvsConnectionSettingsFor(virtualParent).getCvsRootAsString().equals(cvsRoot)) -->Line_17 $$ setEntry(parentDirectoryObject, Entry.createDirectoryEntry(directoryName), cvsFileSystem)[ CD ]
Line_2 $$ private void addDirectoryToParentEntriesFile(DirectoryObject directoryObject, ICvsFileSystem cvsFileSystem, String cvsRoot) throws IOException -->Line_14 $$ Entry entry = myCvsEntriesManager.getEntryFor(virtualParent, directoryName)[ CD ]
