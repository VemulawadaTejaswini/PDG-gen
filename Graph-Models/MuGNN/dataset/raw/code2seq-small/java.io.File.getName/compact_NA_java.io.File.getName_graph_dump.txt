Line_22 $$ traverseAllRecords(new PersistentEnumerator.RecordsProcessor() -->Line_24 $$ final long record = readValueId(keyId)[ FD ]
Line_24 $$ final long record = readValueId(keyId)-->Line_25 $$ if (record != NULL_ADDR) [ FD ]
Line_9 $$ final String oldDataFileBaseName = oldDataFile.getName()-->Line_51 $$ String nameAfterRename = StringUtil.replace(f.getName(), newBaseName, oldDataFileBaseName)[ FD ]
Line_25 $$ if (record != NULL_ADDR) -->Line_28 $$ updateValueId(keyId, value, record, null, getCurrentKey())[ CD ]
Line_8 $$ final File oldDataFile = getDataFile(myEnumerator.myFile)-->Line_9 $$ final String oldDataFileBaseName = oldDataFile.getName()[ FD ]
Line_12 $$ final PersistentHashMapValueStorage newStorage = PersistentHashMapValueStorage.create(newPath)-->Line_36 $$ newStorage.dispose()[ FD ]
Line_59 $$ if (myDoTrace)-->Line_60 $$ LOG.assertTrue(myEnumerator.isDirty())[ CD ]
Line_9 $$ final String oldDataFileBaseName = oldDataFile.getName()-->Line_10 $$ final File[] oldFiles = getFilesInDirectoryWithNameStartingWith(oldDataFile, oldDataFileBaseName)[ FD ]
Line_8 $$ final File oldDataFile = getDataFile(myEnumerator.myFile)-->Line_55 $$ myValueStorage = PersistentHashMapValueStorage.create(oldDataFile.getPath())[ FD ]
Line_8 $$ final File oldDataFile = getDataFile(myEnumerator.myFile)-->Line_10 $$ final File[] oldFiles = getFilesInDirectoryWithNameStartingWith(oldDataFile, oldDataFileBaseName)[ FD ]
Line_22 $$ traverseAllRecords(new PersistentEnumerator.RecordsProcessor() -->Line_31 $$ return true[ CD ]
Line_25 $$ if (record != NULL_ADDR) -->Line_27 $$ long value = newStorage.appendBytes(readResult.buffer, 0, readResult.buffer.length, 0)[ CD ]
Line_12 $$ final PersistentHashMapValueStorage newStorage = PersistentHashMapValueStorage.create(newPath)-->Line_20 $$ newCompact(newStorage)[ FD ]
Line_22 $$ traverseAllRecords(new PersistentEnumerator.RecordsProcessor() -->Line_24 $$ final long record = readValueId(keyId)[ CD ]
Line_10 $$ final File[] oldFiles = getFilesInDirectoryWithNameStartingWith(oldDataFile, oldDataFileBaseName)-->Line_39 $$ if (oldFiles != null) [ FD ]
Line_12 $$ final PersistentHashMapValueStorage newStorage = PersistentHashMapValueStorage.create(newPath)-->Line_27 $$ long value = newStorage.appendBytes(readResult.buffer, 0, readResult.buffer.length, 0)[ FD ]
Line_19 $$ if (doNewCompact()) -->Line_22 $$ traverseAllRecords(new PersistentEnumerator.RecordsProcessor() [ CD ]
Line_22 $$ traverseAllRecords(new PersistentEnumerator.RecordsProcessor() -->Line_25 $$ if (record != NULL_ADDR) [ CD ]
Line_24 $$ final long record = readValueId(keyId)-->Line_28 $$ updateValueId(keyId, value, record, null, getCurrentKey())[ FD ]
Line_25 $$ if (record != NULL_ADDR) -->Line_26 $$ PersistentHashMapValueStorage.ReadResult readResult = myValueStorage.readBytes(record)[ CD ]
Line_22 $$ traverseAllRecords(new PersistentEnumerator.RecordsProcessor() -->Line_28 $$ updateValueId(keyId, value, record, null, getCurrentKey())[ FD ]
Line_48 $$ if (newFiles != null) -->Line_49 $$ File parentFile = newDataFile.getParentFile()[ CD ]
Line_19 $$ if (doNewCompact()) -->Line_20 $$ newCompact(newStorage)[ CD ]
Line_11 $$ final String newPath = getDataFile(myEnumerator.myFile).getPath() + ".new"-->Line_12 $$ final PersistentHashMapValueStorage newStorage = PersistentHashMapValueStorage.create(newPath)[ FD ]
Line_27 $$ long value = newStorage.appendBytes(readResult.buffer, 0, readResult.buffer.length, 0)-->Line_28 $$ updateValueId(keyId, value, record, null, getCurrentKey())[ FD ]
Line_12 $$ final PersistentHashMapValueStorage newStorage = PersistentHashMapValueStorage.create(newPath)-->Line_44 $$ final long newSize = newStorage.getSize()[ FD ]
Line_24 $$ final long record = readValueId(keyId)-->Line_26 $$ PersistentHashMapValueStorage.ReadResult readResult = myValueStorage.readBytes(record)[ FD ]
