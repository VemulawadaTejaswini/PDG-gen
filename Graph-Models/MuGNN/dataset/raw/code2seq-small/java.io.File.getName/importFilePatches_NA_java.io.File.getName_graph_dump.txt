Line_4 $$ File schemePatchDir = generateUniqueSchemePatchDir(fileName, true)-->Line_5 $$ File patchPath = getPatchFileInConfigDir(schemePatchDir)[ FD ]
Line_6 $$ myFileProcessor.savePathFile(new CompoundShelfFileProcessor.ContentProvider() -->Line_8 $$ UnifiedDiffWriter.write(myProject, patches, writer, "\n", patchTransitExtensions, commitContext)[ CD ]
Line_2 $$ public ShelvedChangeList importFilePatches(final String fileName, final List<FilePatch> patches, final PatchEP[] patchTransitExtensions) throws IOException -->Line_4 $$ File schemePatchDir = generateUniqueSchemePatchDir(fileName, true)[ FD ]
Line_5 $$ File patchPath = getPatchFileInConfigDir(schemePatchDir)-->Line_11 $$ final ShelvedChangeList changeList = new ShelvedChangeList(patchPath.toString(), fileName.replace('\n', ' '), new SmartList<ShelvedBinaryFile>())[ FD ]
Line_2 $$ public ShelvedChangeList importFilePatches(final String fileName, final List<FilePatch> patches, final PatchEP[] patchTransitExtensions) throws IOException -->Line_11 $$ final ShelvedChangeList changeList = new ShelvedChangeList(patchPath.toString(), fileName.replace('\n', ' '), new SmartList<ShelvedBinaryFile>())[ FD ]
Line_2 $$ public ShelvedChangeList importFilePatches(final String fileName, final List<FilePatch> patches, final PatchEP[] patchTransitExtensions) throws IOException -->Line_8 $$ UnifiedDiffWriter.write(myProject, patches, writer, "\n", patchTransitExtensions, commitContext)[ FD ]
Line_6 $$ myFileProcessor.savePathFile(new CompoundShelfFileProcessor.ContentProvider() -->Line_8 $$ UnifiedDiffWriter.write(myProject, patches, writer, "\n", patchTransitExtensions, commitContext)[ FD ]
Line_4 $$ File schemePatchDir = generateUniqueSchemePatchDir(fileName, true)-->Line_12 $$ changeList.setName(schemePatchDir.getName())[ FD ]
Line_5 $$ File patchPath = getPatchFileInConfigDir(schemePatchDir)-->Line_6 $$ myFileProcessor.savePathFile(new CompoundShelfFileProcessor.ContentProvider() [ FD ]
