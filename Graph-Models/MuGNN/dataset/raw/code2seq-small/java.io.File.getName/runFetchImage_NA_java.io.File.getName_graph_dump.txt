Line_2 $$ private static void runFetchImage(DFSAdmin dfsAdmin, MiniDFSCluster cluster) throws Exception -->Line_3 $$ int retVal = dfsAdmin.run(new String[] [ FD ]
Line_2 $$ private static void runFetchImage(DFSAdmin dfsAdmin, MiniDFSCluster cluster) throws Exception -->Line_8 $$ assertEquals(expected, actual)[ CD ]
Line_2 $$ private static void runFetchImage(DFSAdmin dfsAdmin, MiniDFSCluster cluster) throws Exception -->Line_3 $$ int retVal = dfsAdmin.run(new String[] [ CD ]
Line_2 $$ private static void runFetchImage(DFSAdmin dfsAdmin, MiniDFSCluster cluster) throws Exception -->Line_5 $$ File highestImageOnNn = getHighestFsImageOnCluster(cluster)[ CD ]
Line_6 $$ MD5Hash expected = MD5FileUtils.computeMd5ForFile(highestImageOnNn)-->Line_8 $$ assertEquals(expected, actual)[ FD ]
Line_2 $$ private static void runFetchImage(DFSAdmin dfsAdmin, MiniDFSCluster cluster) throws Exception -->Line_6 $$ MD5Hash expected = MD5FileUtils.computeMd5ForFile(highestImageOnNn)[ CD ]
Line_5 $$ File highestImageOnNn = getHighestFsImageOnCluster(cluster)-->Line_7 $$ MD5Hash actual = MD5FileUtils.computeMd5ForFile(new File(FETCHED_IMAGE_FILE, highestImageOnNn.getName()))[ FD ]
Line_5 $$ File highestImageOnNn = getHighestFsImageOnCluster(cluster)-->Line_6 $$ MD5Hash expected = MD5FileUtils.computeMd5ForFile(highestImageOnNn)[ FD ]
Line_3 $$ int retVal = dfsAdmin.run(new String[] -->Line_4 $$ assertEquals(0, retVal)[ FD ]
Line_2 $$ private static void runFetchImage(DFSAdmin dfsAdmin, MiniDFSCluster cluster) throws Exception -->Line_5 $$ File highestImageOnNn = getHighestFsImageOnCluster(cluster)[ FD ]
Line_2 $$ private static void runFetchImage(DFSAdmin dfsAdmin, MiniDFSCluster cluster) throws Exception -->Line_4 $$ assertEquals(0, retVal)[ CD ]
Line_7 $$ MD5Hash actual = MD5FileUtils.computeMd5ForFile(new File(FETCHED_IMAGE_FILE, highestImageOnNn.getName()))-->Line_8 $$ assertEquals(expected, actual)[ FD ]
Line_2 $$ private static void runFetchImage(DFSAdmin dfsAdmin, MiniDFSCluster cluster) throws Exception -->Line_7 $$ MD5Hash actual = MD5FileUtils.computeMd5ForFile(new File(FETCHED_IMAGE_FILE, highestImageOnNn.getName()))[ CD ]
