Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_8 $$ MD5Hash advertisedDigest = parseMD5Header(request)[ CD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_10 $$ LOG.info("Downloaded file " + dstFiles.get(0).getName() + " size " + dstFiles.get(0).length() + " bytes.")[ CD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_3 $$ String fileName = NNStorage.getCheckpointImageFileName(imageTxId)[ CD ]
Line_3 $$ String fileName = NNStorage.getCheckpointImageFileName(imageTxId)-->Line_9 $$ MD5Hash hash = receiveFile(fileName, dstFiles, dstStorage, true, advertisedSize, advertisedDigest, fileName, stream, throttler)[ FD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_11 $$ return hash[ CD ]
Line_4 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)-->Line_10 $$ LOG.info("Downloaded file " + dstFiles.get(0).getName() + " size " + dstFiles.get(0).length() + " bytes.")[ FD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_5 $$ if (dstFiles.isEmpty()) [ CD ]
Line_8 $$ MD5Hash advertisedDigest = parseMD5Header(request)-->Line_9 $$ MD5Hash hash = receiveFile(fileName, dstFiles, dstStorage, true, advertisedSize, advertisedDigest, fileName, stream, throttler)[ FD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_4 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)[ CD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_3 $$ String fileName = NNStorage.getCheckpointImageFileName(imageTxId)[ FD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_4 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)[ FD ]
Line_4 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)-->Line_5 $$ if (dstFiles.isEmpty()) [ FD ]
Line_3 $$ String fileName = NNStorage.getCheckpointImageFileName(imageTxId)-->Line_4 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)[ FD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_8 $$ MD5Hash advertisedDigest = parseMD5Header(request)[ FD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_9 $$ MD5Hash hash = receiveFile(fileName, dstFiles, dstStorage, true, advertisedSize, advertisedDigest, fileName, stream, throttler)[ FD ]
Line_2 $$ static MD5Hash handleUploadImageRequest(HttpServletRequest request, long imageTxId, Storage dstStorage, InputStream stream, long advertisedSize, DataTransferThrottler throttler) throws IOException -->Line_9 $$ MD5Hash hash = receiveFile(fileName, dstFiles, dstStorage, true, advertisedSize, advertisedDigest, fileName, stream, throttler)[ CD ]
Line_4 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)-->Line_9 $$ MD5Hash hash = receiveFile(fileName, dstFiles, dstStorage, true, advertisedSize, advertisedDigest, fileName, stream, throttler)[ FD ]
