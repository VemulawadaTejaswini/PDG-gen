Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_7 $$ jar.from(generateTask.getOutputs())[ FD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_10 $$ String wsdlName = FileUtil.stripExtension(inputFile.getName())[ CD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_4 $$ Jar jar = GradleUtil.addTask(buildWSDLTask.getProject(), taskName, Jar.class)[ FD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_12 $$ return jar[ CD ]
Line_4 $$ Jar jar = GradleUtil.addTask(buildWSDLTask.getProject(), taskName, Jar.class)-->Line_9 $$ jar.setDestinationDir(buildWSDLTask.getDestinationDir())[ FD ]
Line_4 $$ Jar jar = GradleUtil.addTask(buildWSDLTask.getProject(), taskName, Jar.class)-->Line_11 $$ jar.setArchiveName(wsdlName + "-ws.jar")[ FD ]
Line_4 $$ Jar jar = GradleUtil.addTask(buildWSDLTask.getProject(), taskName, Jar.class)-->Line_5 $$ jar.from(compileTask.getOutputs())[ FD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_5 $$ jar.from(compileTask.getOutputs())[ CD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_9 $$ jar.setDestinationDir(buildWSDLTask.getDestinationDir())[ FD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_5 $$ jar.from(compileTask.getOutputs())[ FD ]
Line_6 $$ if (buildWSDLTask.isIncludeSource()) -->Line_7 $$ jar.from(generateTask.getOutputs())[ CD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_9 $$ jar.setDestinationDir(buildWSDLTask.getDestinationDir())[ CD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_6 $$ if (buildWSDLTask.isIncludeSource()) [ FD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_10 $$ String wsdlName = FileUtil.stripExtension(inputFile.getName())[ FD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_11 $$ jar.setArchiveName(wsdlName + "-ws.jar")[ CD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_3 $$ String taskName = GradleUtil.getTaskName(buildWSDLTask.getName(), inputFile)[ FD ]
Line_3 $$ String taskName = GradleUtil.getTaskName(buildWSDLTask.getName(), inputFile)-->Line_4 $$ Jar jar = GradleUtil.addTask(buildWSDLTask.getProject(), taskName, Jar.class)[ FD ]
Line_4 $$ Jar jar = GradleUtil.addTask(buildWSDLTask.getProject(), taskName, Jar.class)-->Line_7 $$ jar.from(generateTask.getOutputs())[ FD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_4 $$ Jar jar = GradleUtil.addTask(buildWSDLTask.getProject(), taskName, Jar.class)[ CD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_3 $$ String taskName = GradleUtil.getTaskName(buildWSDLTask.getName(), inputFile)[ CD ]
Line_2 $$ protected Task addTaskBuildWSDLJar(BuildWSDLTask buildWSDLTask, File inputFile, Task compileTask, Task generateTask) -->Line_6 $$ if (buildWSDLTask.isIncludeSource()) [ CD ]
