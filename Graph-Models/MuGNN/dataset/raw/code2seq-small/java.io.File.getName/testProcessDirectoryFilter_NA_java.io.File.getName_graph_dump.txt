Line_2 $$ public void testProcessDirectoryFilter() -->Line_18 $$ assertEquals(1, result.get("2").intValue())[ CD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_17 $$ assertEquals(1, result.get("1").intValue())[ FD ]
Line_4 $$ FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() -->Line_12 $$ return !"dir2".equals(file.getName())[ FD ]
Line_2 $$ public void testProcessDirectoryFilter() -->Line_4 $$ FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() [ CD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_6 $$ Integer integer = result.get(file.getName())[ FD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_16 $$ assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue())[ FD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_21 $$ assertNull(result.get("dir21"))[ FD ]
Line_2 $$ public void testProcessDirectoryFilter() -->Line_20 $$ assertEquals(1, result.get("dir2").intValue())[ CD ]
Line_2 $$ public void testProcessDirectoryFilter() -->Line_21 $$ assertNull(result.get("dir21"))[ CD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_19 $$ assertEquals(1, result.get("dir1").intValue())[ FD ]
Line_2 $$ public void testProcessDirectoryFilter() -->Line_15 $$ assertEquals(5, result.size())[ CD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_18 $$ assertEquals(1, result.get("2").intValue())[ FD ]
Line_4 $$ FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() -->Line_6 $$ Integer integer = result.get(file.getName())[ CD ]
Line_2 $$ public void testProcessDirectoryFilter() -->Line_17 $$ assertEquals(1, result.get("1").intValue())[ CD ]
Line_2 $$ public void testProcessDirectoryFilter() -->Line_16 $$ assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue())[ CD ]
Line_4 $$ FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() -->Line_8 $$ return true[ CD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_7 $$ result.put(file.getName(), integer == null ? 1 : (integer + 1))[ FD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_20 $$ assertEquals(1, result.get("dir2").intValue())[ FD ]
Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()-->Line_15 $$ assertEquals(5, result.size())[ FD ]
Line_4 $$ FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() -->Line_7 $$ result.put(file.getName(), integer == null ? 1 : (integer + 1))[ CD ]
Line_4 $$ FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() -->Line_6 $$ Integer integer = result.get(file.getName())[ FD ]
Line_2 $$ public void testProcessDirectoryFilter() -->Line_3 $$ final Map<String, Integer> result = new HashMap<String, Integer>()[ CD ]
Line_4 $$ FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() -->Line_12 $$ return !"dir2".equals(file.getName())[ CD ]
Line_2 $$ public void testProcessDirectoryFilter() -->Line_19 $$ assertEquals(1, result.get("dir1").intValue())[ CD ]
Line_4 $$ FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() -->Line_7 $$ result.put(file.getName(), integer == null ? 1 : (integer + 1))[ FD ]
