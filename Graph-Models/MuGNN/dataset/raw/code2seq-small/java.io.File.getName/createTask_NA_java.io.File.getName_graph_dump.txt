Line_15 $$ String fileName = file.getName()-->Line_16 $$ if (!task.isTaskFile(fileName)) [ FD ]
Line_16 $$ if (!task.isTaskFile(fileName)) -->Line_17 $$ File resourceFile = new File(newResourceRoot, fileName)[ CD ]
Line_3 $$ VirtualFile taskDir = lessonDir.createChildDirectory(project, EduNames.TASK + Integer.toString(task.getIndex()))-->Line_18 $$ File fileInProject = new File(taskDir.getCanonicalPath(), fileName)[ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_6 $$ for (Map.Entry<String, TaskFile> taskFile : task.getTaskFiles().entrySet()) [ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_16 $$ if (!task.isTaskFile(fileName)) [ FD ]
Line_18 $$ File fileInProject = new File(taskDir.getCanonicalPath(), fileName)-->Line_21 $$ StudyTaskManager.getInstance(project).addInvisibleFiles(FileUtil.toSystemIndependentName(fileInProject.getPath()))[ FD ]
Line_17 $$ File resourceFile = new File(newResourceRoot, fileName)-->Line_19 $$ FileUtil.copy(resourceFile, fileInProject)[ FD ]
Line_3 $$ VirtualFile taskDir = lessonDir.createChildDirectory(project, EduNames.TASK + Integer.toString(task.getIndex()))-->Line_10 $$ createTaskFile(taskDir, newResourceRoot, taskFile.getKey())[ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_13 $$ if (filesInTask != null) [ CD ]
Line_4 $$ File newResourceRoot = new File(resourceRoot, taskDir.getName())-->Line_12 $$ File[] filesInTask = newResourceRoot.listFiles()[ FD ]
Line_20 $$ if (!StudyUtils.isTestsFile(project, fileName) && !EduNames.TASK_HTML.equals(fileName)) -->Line_21 $$ StudyTaskManager.getInstance(project).addInvisibleFiles(FileUtil.toSystemIndependentName(fileInProject.getPath()))[ CD ]
Line_16 $$ if (!task.isTaskFile(fileName)) -->Line_18 $$ File fileInProject = new File(taskDir.getCanonicalPath(), fileName)[ CD ]
Line_15 $$ String fileName = file.getName()-->Line_20 $$ if (!StudyUtils.isTestsFile(project, fileName) && !EduNames.TASK_HTML.equals(fileName)) [ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_12 $$ File[] filesInTask = newResourceRoot.listFiles()[ CD ]
Line_3 $$ VirtualFile taskDir = lessonDir.createChildDirectory(project, EduNames.TASK + Integer.toString(task.getIndex()))-->Line_4 $$ File newResourceRoot = new File(resourceRoot, taskDir.getName())[ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_20 $$ if (!StudyUtils.isTestsFile(project, fileName) && !EduNames.TASK_HTML.equals(fileName)) [ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_3 $$ VirtualFile taskDir = lessonDir.createChildDirectory(project, EduNames.TASK + Integer.toString(task.getIndex()))[ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_3 $$ VirtualFile taskDir = lessonDir.createChildDirectory(project, EduNames.TASK + Integer.toString(task.getIndex()))[ CD ]
Line_6 $$ for (Map.Entry<String, TaskFile> taskFile : task.getTaskFiles().entrySet()) -->Line_7 $$ TaskFile taskFileContent = taskFile.getValue()[ FD ]
Line_16 $$ if (!task.isTaskFile(fileName)) -->Line_19 $$ FileUtil.copy(resourceFile, fileInProject)[ CD ]
Line_12 $$ File[] filesInTask = newResourceRoot.listFiles()-->Line_13 $$ if (filesInTask != null) [ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_5 $$ int i = 0[ CD ]
Line_16 $$ if (!task.isTaskFile(fileName)) -->Line_20 $$ if (!StudyUtils.isTestsFile(project, fileName) && !EduNames.TASK_HTML.equals(fileName)) [ CD ]
Line_7 $$ TaskFile taskFileContent = taskFile.getValue()-->Line_8 $$ taskFileContent.setIndex(i)[ FD ]
Line_14 $$ for (File file : filesInTask) -->Line_15 $$ String fileName = file.getName()[ FD ]
Line_5 $$ int i = 0-->Line_8 $$ taskFileContent.setIndex(i)[ FD ]
Line_18 $$ File fileInProject = new File(taskDir.getCanonicalPath(), fileName)-->Line_19 $$ FileUtil.copy(resourceFile, fileInProject)[ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_21 $$ StudyTaskManager.getInstance(project).addInvisibleFiles(FileUtil.toSystemIndependentName(fileInProject.getPath()))[ FD ]
Line_6 $$ for (Map.Entry<String, TaskFile> taskFile : task.getTaskFiles().entrySet()) -->Line_10 $$ createTaskFile(taskDir, newResourceRoot, taskFile.getKey())[ FD ]
Line_2 $$ public static void createTask(@NotNull final Task task, @NotNull final VirtualFile lessonDir, @NotNull final File resourceRoot, @NotNull final Project project) throws IOException -->Line_4 $$ File newResourceRoot = new File(resourceRoot, taskDir.getName())[ CD ]
Line_5 $$ int i = 0-->Line_9 $$ i++[ FD ]
Line_4 $$ File newResourceRoot = new File(resourceRoot, taskDir.getName())-->Line_10 $$ createTaskFile(taskDir, newResourceRoot, taskFile.getKey())[ FD ]
