Line_18 $$ File decompiledFile = new File(fixture.getTargetDir(), testName + ".java")-->Line_19 $$ assertTrue(decompiledFile.isFile())[ FD ]
Line_3 $$ ConsoleDecompiler decompiler = fixture.getDecompiler()-->Line_7 $$ decompiler.addSpace(file, true)[ FD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_20 $$ File referenceFile = new File(fixture.getTestDataDir(), "results/" + testName + ".dec")[ CD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_21 $$ assertTrue(referenceFile.isFile())[ CD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_22 $$ assertFilesEqual(referenceFile, decompiledFile)[ CD ]
Line_4 $$ File classFile = new File(fixture.getTestDataDir(), "/classes/" + testFile + ".class")-->Line_5 $$ assertTrue(classFile.isFile())[ FD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_5 $$ assertTrue(classFile.isFile())[ CD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_17 $$ String testName = classFile.getName().substring(0, classFile.getName().length() - 6)[ CD ]
Line_6 $$ for (File file : collectClasses(classFile)) -->Line_13 $$ decompiler.addSpace(file, true)[ FD ]
Line_4 $$ File classFile = new File(fixture.getTestDataDir(), "/classes/" + testFile + ".class")-->Line_17 $$ String testName = classFile.getName().substring(0, classFile.getName().length() - 6)[ FD ]
Line_20 $$ File referenceFile = new File(fixture.getTestDataDir(), "results/" + testName + ".dec")-->Line_21 $$ assertTrue(referenceFile.isFile())[ FD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_4 $$ File classFile = new File(fixture.getTestDataDir(), "/classes/" + testFile + ".class")[ CD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_3 $$ ConsoleDecompiler decompiler = fixture.getDecompiler()[ CD ]
Line_10 $$ File companionClassFile = new File(fixture.getTestDataDir(), "/classes/" + companionFile + ".class")-->Line_11 $$ assertTrue(companionClassFile.isFile())[ FD ]
Line_3 $$ ConsoleDecompiler decompiler = fixture.getDecompiler()-->Line_16 $$ decompiler.decompileContext()[ FD ]
Line_6 $$ for (File file : collectClasses(classFile)) -->Line_7 $$ decompiler.addSpace(file, true)[ FD ]
Line_18 $$ File decompiledFile = new File(fixture.getTargetDir(), testName + ".java")-->Line_22 $$ assertFilesEqual(referenceFile, decompiledFile)[ FD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_19 $$ assertTrue(decompiledFile.isFile())[ CD ]
Line_4 $$ File classFile = new File(fixture.getTestDataDir(), "/classes/" + testFile + ".class")-->Line_6 $$ for (File file : collectClasses(classFile)) [ FD ]
Line_3 $$ ConsoleDecompiler decompiler = fixture.getDecompiler()-->Line_13 $$ decompiler.addSpace(file, true)[ FD ]
Line_20 $$ File referenceFile = new File(fixture.getTestDataDir(), "results/" + testName + ".dec")-->Line_22 $$ assertFilesEqual(referenceFile, decompiledFile)[ FD ]
Line_10 $$ File companionClassFile = new File(fixture.getTestDataDir(), "/classes/" + companionFile + ".class")-->Line_12 $$ for (File file : collectClasses(companionClassFile)) [ FD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_16 $$ decompiler.decompileContext()[ CD ]
Line_2 $$ protected void doTest(String testFile, String... companionFiles) -->Line_18 $$ File decompiledFile = new File(fixture.getTargetDir(), testName + ".java")[ CD ]
