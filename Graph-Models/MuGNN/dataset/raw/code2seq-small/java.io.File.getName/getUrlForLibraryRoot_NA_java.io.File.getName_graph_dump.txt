Line_3 $$ String path = FileUtil.toSystemIndependentName(libraryRoot.getAbsolutePath())-->Line_7 $$ return VirtualFileManager.constructUrl(LocalFileSystem.getInstance().getProtocol(), path)[ FD ]
Line_4 $$ if (FileTypeManager.getInstance().getFileTypeByFileName(libraryRoot.getName()) == FileTypes.ARCHIVE) -->Line_7 $$ return VirtualFileManager.constructUrl(LocalFileSystem.getInstance().getProtocol(), path)[ CD ]
Line_2 $$ public static String getUrlForLibraryRoot(@NotNull File libraryRoot) -->Line_4 $$ if (FileTypeManager.getInstance().getFileTypeByFileName(libraryRoot.getName()) == FileTypes.ARCHIVE) [ CD ]
Line_2 $$ public static String getUrlForLibraryRoot(@NotNull File libraryRoot) -->Line_4 $$ if (FileTypeManager.getInstance().getFileTypeByFileName(libraryRoot.getName()) == FileTypes.ARCHIVE) [ FD ]
Line_2 $$ public static String getUrlForLibraryRoot(@NotNull File libraryRoot) -->Line_3 $$ String path = FileUtil.toSystemIndependentName(libraryRoot.getAbsolutePath())[ CD ]
Line_4 $$ if (FileTypeManager.getInstance().getFileTypeByFileName(libraryRoot.getName()) == FileTypes.ARCHIVE) -->Line_5 $$ return VirtualFileManager.constructUrl(JarFileSystem.getInstance().getProtocol(), path + JarFileSystem.JAR_SEPARATOR)[ CD ]
Line_2 $$ public static String getUrlForLibraryRoot(@NotNull File libraryRoot) -->Line_3 $$ String path = FileUtil.toSystemIndependentName(libraryRoot.getAbsolutePath())[ FD ]
