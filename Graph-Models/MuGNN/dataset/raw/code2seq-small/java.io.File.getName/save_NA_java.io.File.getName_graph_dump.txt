Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_40 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_4 $$ String outputName = outputBMFontFile.getName()[ CD ]
Line_11 $$ Font font = unicodeFont.getFont()-->Line_59 $$ glyphCodeToCodePoint.put(new Integer(getGlyphCode(font, glyph.getCodePoint())), new Integer(glyph.getCodePoint()))[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))[ CD ]
Line_95 $$ String fileName-->Line_99 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_45 $$ String ttfFileRef = unicodeFont.getFontFile()[ CD ]
Line_21 $$ fileName = outputName + ".png"-->Line_23 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_96 $$ if (pageIndex == 0 && !pageIter.hasNext())-->Line_99 $$ fileName = outputName + (pageIndex + 1) + ".png"[ CD ]
Line_32 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_38 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) [ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_29 $$ pageIndex = 0[ CD ]
Line_23 $$ fileName = outputName + (pageIndex + 1) + ".png"-->Line_97 $$ fileName = outputName + ".png"[ FD ]
Line_97 $$ fileName = outputName + ".png"-->Line_99 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_42 $$ allGlyphs.addAll(page.getGlyphs())[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_9 $$ unicodeFont.loadGlyphs()[ CD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_103 $$ WritableRaster raster = pageImage.getRaster()[ CD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_96 $$ if (pageIndex == 0 && !pageIter.hasNext())[ FD ]
Line_57 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_59 $$ glyphCodeToCodePoint.put(new Integer(getGlyphCode(font, glyph.getCodePoint())), new Integer(glyph.getCodePoint()))[ CD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_104 $$ for (int y = 0; y < height; y++) [ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_14 $$ out.println("info face=\"" + font.getFontName() + "\" size=" + font.getSize() + " bold=" + (font.isBold() ? 1 : 0) + " italic=" + (font.isItalic() ? 1 : 0) + " charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=" + unicodeFont.getPaddingTop() + "," + unicodeFont.getPaddingLeft() + "," + unicodeFont.getPaddingBottom() + "," + unicodeFont.getPaddingRight() + " spacing=" + unicodeFont.getPaddingAdvanceX() + "," + unicodeFont.getPaddingAdvanceY())[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_4 $$ String outputName = outputBMFontFile.getName()[ FD ]
Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_28 $$ out.println("chars count=" + glyphCount)[ FD ]
Line_18 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_25 $$ glyphCount += page.getGlyphs().size()[ FD ]
Line_19 $$ String fileName-->Line_99 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_46 $$ if (ttfFileRef == null)-->Line_81 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) [ CD ]
Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_94 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_5 $$ if (outputName.endsWith(".fnt"))[ CD ]
Line_18 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_100 $$ page.getTexture().bind()[ FD ]
Line_19 $$ String fileName-->Line_21 $$ fileName = outputName + ".png"[ FD ]
Line_16 $$ int pageIndex = 0, glyphCount = 0-->Line_29 $$ pageIndex = 0[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ CD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_102 $$ GL11.glGetTexImage(GL11.GL_TEXTURE_2D, 0, GL12.GL_BGRA, GL11.GL_UNSIGNED_BYTE, buffer)[ CD ]
Line_20 $$ if (pageIndex == 0 && !pageIter.hasNext())-->Line_23 $$ fileName = outputName + (pageIndex + 1) + ".png"[ CD ]
Line_94 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_100 $$ page.getTexture().bind()[ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_20 $$ if (pageIndex == 0 && !pageIter.hasNext())[ FD ]
Line_16 $$ int pageIndex = 0, glyphCount = 0-->Line_40 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_32 $$ GlyphPage page = (GlyphPage) pageIter.next()[ CD ]
Line_20 $$ if (pageIndex == 0 && !pageIter.hasNext())-->Line_21 $$ fileName = outputName + ".png"[ CD ]
Line_38 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) -->Line_39 $$ Glyph glyph = (Glyph) glyphIter.next()[ FD ]
Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_33 $$ page.getGlyphs().sort(new Comparator<Glyph>() [ CD ]
Line_38 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) -->Line_39 $$ Glyph glyph = (Glyph) glyphIter.next()[ CD ]
Line_38 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) -->Line_40 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ CD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_100 $$ page.getTexture().bind()[ CD ]
Line_58 $$ Glyph glyph = (Glyph) iter.next()-->Line_59 $$ glyphCodeToCodePoint.put(new Integer(getGlyphCode(font, glyph.getCodePoint())), new Integer(glyph.getCodePoint()))[ FD ]
Line_33 $$ page.getGlyphs().sort(new Comparator<Glyph>() -->Line_35 $$ return o1.getCodePoint() - o2.getCodePoint()[ CD ]
Line_18 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_33 $$ page.getGlyphs().sort(new Comparator<Glyph>() [ FD ]
Line_23 $$ fileName = outputName + (pageIndex + 1) + ".png"-->Line_99 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_4 $$ String outputName = outputBMFontFile.getName()-->Line_6 $$ outputName = outputName.substring(0, outputName.length() - 4)[ FD ]
Line_81 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) -->Line_82 $$ KerningPair pair = (KerningPair) iter.next()[ CD ]
Line_33 $$ page.getGlyphs().sort(new Comparator<Glyph>() -->Line_35 $$ return o1.getCodePoint() - o2.getCodePoint()[ FD ]
Line_6 $$ outputName = outputName.substring(0, outputName.length() - 4)-->Line_21 $$ fileName = outputName + ".png"[ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_94 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_57 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_58 $$ Glyph glyph = (Glyph) iter.next()[ CD ]
Line_6 $$ outputName = outputName.substring(0, outputName.length() - 4)-->Line_97 $$ fileName = outputName + ".png"[ FD ]
Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_14 $$ out.println("info face=\"" + font.getFontName() + "\" size=" + font.getSize() + " bold=" + (font.isBold() ? 1 : 0) + " italic=" + (font.isItalic() ? 1 : 0) + " charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=" + unicodeFont.getPaddingTop() + "," + unicodeFont.getPaddingLeft() + "," + unicodeFont.getPaddingBottom() + "," + unicodeFont.getPaddingRight() + " spacing=" + unicodeFont.getPaddingAdvanceX() + "," + unicodeFont.getPaddingAdvanceY())[ FD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_94 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_12 $$ int pageWidth = unicodeFont.getGlyphPageWidth()-->Line_40 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_38 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) [ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_46 $$ if (ttfFileRef == null)[ CD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_18 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_46 $$ if (ttfFileRef == null)-->Line_80 $$ out.println("kernings count=" + kernings.size())[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_30 $$ List allGlyphs = new ArrayList(512)[ CD ]
Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_96 $$ if (pageIndex == 0 && !pageIter.hasNext())[ FD ]
Line_104 $$ for (int y = 0; y < height; y++) -->Line_105 $$ buffer.get(row)[ CD ]
Line_16 $$ int pageIndex = 0, glyphCount = 0-->Line_26 $$ pageIndex++[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_12 $$ int pageWidth = unicodeFont.getGlyphPageWidth()[ CD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_95 $$ String fileName[ CD ]
Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ FD ]
Line_39 $$ Glyph glyph = (Glyph) glyphIter.next()-->Line_59 $$ glyphCodeToCodePoint.put(new Integer(getGlyphCode(font, glyph.getCodePoint())), new Integer(glyph.getCodePoint()))[ FD ]
Line_32 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_33 $$ page.getGlyphs().sort(new Comparator<Glyph>() [ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_88 $$ int height = unicodeFont.getGlyphPageHeight()[ CD ]
Line_16 $$ int pageIndex = 0, glyphCount = 0-->Line_25 $$ glyphCount += page.getGlyphs().size()[ FD ]
Line_81 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) -->Line_82 $$ KerningPair pair = (KerningPair) iter.next()[ FD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_96 $$ if (pageIndex == 0 && !pageIter.hasNext())[ CD ]
Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_15 $$ out.println("common lineHeight=" + unicodeFont.getLineHeight() + " base=" + unicodeFont.getAscent() + " scaleW=" + pageWidth + " scaleH=" + pageHeight + " pages=" + unicodeFont.getGlyphPages().size() + " packed=0")[ FD ]
Line_19 $$ String fileName-->Line_23 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_103 $$ WritableRaster raster = pageImage.getRaster()-->Line_106 $$ raster.setDataElements(0, y, width, 1, row)[ FD ]
Line_4 $$ String outputName = outputBMFontFile.getName()-->Line_21 $$ fileName = outputName + ".png"[ FD ]
Line_30 $$ List allGlyphs = new ArrayList(512)-->Line_42 $$ allGlyphs.addAll(page.getGlyphs())[ FD ]
Line_29 $$ pageIndex = 0-->Line_40 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_89 $$ IntBuffer buffer = BufferUtils.createIntBuffer(width * height)[ CD ]
Line_18 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_38 $$ for (Iterator glyphIter = page.getGlyphs().iterator(); glyphIter.hasNext(); ) [ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_28 $$ out.println("chars count=" + glyphCount)[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_16 $$ int pageIndex = 0, glyphCount = 0[ CD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_19 $$ String fileName[ CD ]
Line_11 $$ Font font = unicodeFont.getFont()-->Line_51 $$ kerning.load(Gdx.files.internal(ttfFileRef).read(), font.getSize())[ FD ]
Line_19 $$ String fileName-->Line_97 $$ fileName = outputName + ".png"[ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_26 $$ pageIndex++[ CD ]
Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_83 $$ out.println("kerning first=" + pair.firstCodePoint + " second=" + pair.secondCodePoint + " amount=" + pair.offset)[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_15 $$ out.println("common lineHeight=" + unicodeFont.getLineHeight() + " base=" + unicodeFont.getAscent() + " scaleW=" + pageWidth + " scaleH=" + pageHeight + " pages=" + unicodeFont.getGlyphPages().size() + " packed=0")[ CD ]
Line_81 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) -->Line_83 $$ out.println("kerning first=" + pair.firstCodePoint + " second=" + pair.secondCodePoint + " amount=" + pair.offset)[ CD ]
Line_46 $$ if (ttfFileRef == null)-->Line_57 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) [ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_3 $$ File outputDir = outputBMFontFile.getParentFile()[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_11 $$ Font font = unicodeFont.getFont()[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_87 $$ int width = unicodeFont.getGlyphPageWidth()[ CD ]
Line_96 $$ if (pageIndex == 0 && !pageIter.hasNext())-->Line_97 $$ fileName = outputName + ".png"[ CD ]
Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_24 $$ out.println("page id=" + pageIndex + " file=\"" + fileName + "\"")[ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_32 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_104 $$ for (int y = 0; y < height; y++) -->Line_106 $$ raster.setDataElements(0, y, width, 1, row)[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ CD ]
Line_31 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_32 $$ GlyphPage page = (GlyphPage) pageIter.next()[ FD ]
Line_32 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_42 $$ allGlyphs.addAll(page.getGlyphs())[ FD ]
Line_39 $$ Glyph glyph = (Glyph) glyphIter.next()-->Line_40 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_18 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_42 $$ allGlyphs.addAll(page.getGlyphs())[ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_20 $$ if (pageIndex == 0 && !pageIter.hasNext())[ CD ]
Line_21 $$ fileName = outputName + ".png"-->Line_99 $$ fileName = outputName + (pageIndex + 1) + ".png"[ FD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_94 $$ GlyphPage page = (GlyphPage) pageIter.next()[ CD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_101 $$ buffer.clear()[ CD ]
Line_13 $$ int pageHeight = unicodeFont.getGlyphPageHeight()-->Line_40 $$ writeGlyph(out, pageWidth, pageHeight, pageIndex, glyph)[ FD ]
Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_80 $$ out.println("kernings count=" + kernings.size())[ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_96 $$ if (pageIndex == 0 && !pageIter.hasNext())[ FD ]
Line_5 $$ if (outputName.endsWith(".fnt"))-->Line_6 $$ outputName = outputName.substring(0, outputName.length() - 4)[ CD ]
Line_32 $$ GlyphPage page = (GlyphPage) pageIter.next()-->Line_100 $$ page.getTexture().bind()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_3 $$ File outputDir = outputBMFontFile.getParentFile()[ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) [ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_24 $$ out.println("page id=" + pageIndex + " file=\"" + fileName + "\"")[ CD ]
Line_104 $$ for (int y = 0; y < height; y++) -->Line_106 $$ raster.setDataElements(0, y, width, 1, row)[ CD ]
Line_10 $$ PrintStream out = new PrintStream(new FileOutputStream(new File(outputDir, outputName + ".fnt")))-->Line_86 $$ out.close()[ FD ]
Line_57 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_82 $$ KerningPair pair = (KerningPair) iter.next()[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_13 $$ int pageHeight = unicodeFont.getGlyphPageHeight()[ CD ]
Line_21 $$ fileName = outputName + ".png"-->Line_97 $$ fileName = outputName + ".png"[ FD ]
Line_57 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_81 $$ for (Iterator iter = kernings.iterator(); iter.hasNext(); ) [ FD ]
Line_93 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_109 $$ ImageIO.write(pageImage, "png", imageOutputFile)[ CD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_7 $$ getGlyph(' ')[ CD ]
Line_57 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) -->Line_58 $$ Glyph glyph = (Glyph) iter.next()[ FD ]
Line_4 $$ String outputName = outputBMFontFile.getName()-->Line_97 $$ fileName = outputName + ".png"[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_8 $$ getGlyph(' ')[ CD ]
Line_11 $$ Font font = unicodeFont.getFont()-->Line_14 $$ out.println("info face=\"" + font.getFontName() + "\" size=" + font.getSize() + " bold=" + (font.isBold() ? 1 : 0) + " italic=" + (font.isItalic() ? 1 : 0) + " charset=\"\" unicode=0 stretchH=100 smooth=1 aa=1 padding=" + unicodeFont.getPaddingTop() + "," + unicodeFont.getPaddingLeft() + "," + unicodeFont.getPaddingBottom() + "," + unicodeFont.getPaddingRight() + " spacing=" + unicodeFont.getPaddingAdvanceX() + "," + unicodeFont.getPaddingAdvanceY())[ FD ]
Line_30 $$ List allGlyphs = new ArrayList(512)-->Line_57 $$ for (Iterator iter = allGlyphs.iterator(); iter.hasNext(); ) [ FD ]
Line_95 $$ String fileName-->Line_97 $$ fileName = outputName + ".png"[ FD ]
Line_2 $$ public void save(File outputBMFontFile) throws IOException -->Line_86 $$ out.close()[ CD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_18 $$ GlyphPage page = (GlyphPage) pageIter.next()[ CD ]
Line_4 $$ String outputName = outputBMFontFile.getName()-->Line_5 $$ if (outputName.endsWith(".fnt"))[ FD ]
Line_17 $$ for (Iterator pageIter = unicodeFont.getGlyphPages().iterator(); pageIter.hasNext(); ) -->Line_25 $$ glyphCount += page.getGlyphs().size()[ CD ]
Line_46 $$ if (ttfFileRef == null)-->Line_47 $$ System.out.println("Kerning information could not be output because a TTF font file was not specified.")[ CD ]
