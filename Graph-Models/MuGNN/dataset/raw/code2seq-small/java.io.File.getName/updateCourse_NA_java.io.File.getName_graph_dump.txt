Line_12 $$ if (manager == null) -->Line_13 $$ LOG.info("Study Language Manager is null for " + course.getLanguageById().getDisplayName())[ CD ]
Line_37 $$ final Notification notification = new Notification("Update.course", "Course update", "Current course is synchronized", NotificationType.INFORMATION)-->Line_38 $$ notification.notify(myProject)[ FD ]
Line_19 $$ for (File file : files) -->Line_32 $$ copyFile(taskDescr, new File(new File(new File(myProject.getBasePath(), file.getName()), task.getName()), EduNames.TASK_HTML))[ FD ]
Line_2 $$ private void updateCourse() -->Line_3 $$ final Course course = StudyTaskManager.getInstance(myProject).getCourse()[ CD ]
Line_16 $$ final File[] files = resourceDirectory.listFiles()-->Line_17 $$ if (files == null)[ FD ]
Line_17 $$ if (files == null)-->Line_18 $$ return[ CD ]
Line_12 $$ if (manager == null) -->Line_14 $$ return[ CD ]
Line_19 $$ for (File file : files) -->Line_25 $$ final File[] tasks = file.listFiles()[ FD ]
Line_4 $$ if (course == null) -->Line_5 $$ return[ CD ]
Line_19 $$ for (File file : files) -->Line_21 $$ if (file.getName().equals(testHelper)) [ FD ]
Line_21 $$ if (file.getName().equals(testHelper)) -->Line_22 $$ copyFile(file, new File(myProject.getBasePath(), testHelper))[ CD ]
Line_19 $$ for (File file : files) -->Line_22 $$ copyFile(file, new File(myProject.getBasePath(), testHelper))[ FD ]
Line_2 $$ private void updateCourse() -->Line_11 $$ StudyLanguageManager manager = StudyUtils.getLanguageManager(course)[ CD ]
Line_2 $$ private void updateCourse() -->Line_4 $$ if (course == null) [ CD ]
Line_2 $$ private void updateCourse() -->Line_17 $$ if (files == null)[ CD ]
Line_24 $$ if (file.getName().startsWith(EduNames.LESSON)) -->Line_25 $$ final File[] tasks = file.listFiles()[ CD ]
Line_19 $$ for (File file : files) -->Line_24 $$ if (file.getName().startsWith(EduNames.LESSON)) [ FD ]
Line_28 $$ for (File task : tasks) -->Line_33 $$ copyFile(taskTests, new File(new File(new File(myProject.getBasePath(), file.getName()), task.getName()), testFileName))[ FD ]
Line_8 $$ if (!resourceDirectory.exists()) -->Line_9 $$ return[ CD ]
Line_2 $$ private void updateCourse() -->Line_37 $$ final Notification notification = new Notification("Update.course", "Course update", "Current course is synchronized", NotificationType.INFORMATION)[ CD ]
Line_3 $$ final Course course = StudyTaskManager.getInstance(myProject).getCourse()-->Line_11 $$ StudyLanguageManager manager = StudyUtils.getLanguageManager(course)[ FD ]
Line_11 $$ StudyLanguageManager manager = StudyUtils.getLanguageManager(course)-->Line_30 $$ String testFileName = manager.getTestFileName()[ FD ]
Line_19 $$ for (File file : files) -->Line_33 $$ copyFile(taskTests, new File(new File(new File(myProject.getBasePath(), file.getName()), task.getName()), testFileName))[ FD ]
Line_25 $$ final File[] tasks = file.listFiles()-->Line_26 $$ if (tasks == null)[ FD ]
Line_11 $$ StudyLanguageManager manager = StudyUtils.getLanguageManager(course)-->Line_12 $$ if (manager == null) [ FD ]
Line_3 $$ final Course course = StudyTaskManager.getInstance(myProject).getCourse()-->Line_7 $$ final File resourceDirectory = new File(course.getCourseDirectory())[ FD ]
Line_31 $$ final File taskTests = new File(task, testFileName)-->Line_33 $$ copyFile(taskTests, new File(new File(new File(myProject.getBasePath(), file.getName()), task.getName()), testFileName))[ FD ]
Line_11 $$ StudyLanguageManager manager = StudyUtils.getLanguageManager(course)-->Line_20 $$ String testHelper = manager.getTestHelperFileName()[ FD ]
Line_7 $$ final File resourceDirectory = new File(course.getCourseDirectory())-->Line_8 $$ if (!resourceDirectory.exists()) [ FD ]
Line_7 $$ final File resourceDirectory = new File(course.getCourseDirectory())-->Line_16 $$ final File[] files = resourceDirectory.listFiles()[ FD ]
Line_3 $$ final Course course = StudyTaskManager.getInstance(myProject).getCourse()-->Line_13 $$ LOG.info("Study Language Manager is null for " + course.getLanguageById().getDisplayName())[ FD ]
Line_28 $$ for (File task : tasks) -->Line_32 $$ copyFile(taskDescr, new File(new File(new File(myProject.getBasePath(), file.getName()), task.getName()), EduNames.TASK_HTML))[ FD ]
Line_29 $$ final File taskDescr = new File(task, EduNames.TASK_HTML)-->Line_32 $$ copyFile(taskDescr, new File(new File(new File(myProject.getBasePath(), file.getName()), task.getName()), EduNames.TASK_HTML))[ FD ]
Line_2 $$ private void updateCourse() -->Line_8 $$ if (!resourceDirectory.exists()) [ CD ]
Line_20 $$ String testHelper = manager.getTestHelperFileName()-->Line_21 $$ if (file.getName().equals(testHelper)) [ FD ]
Line_2 $$ private void updateCourse() -->Line_7 $$ final File resourceDirectory = new File(course.getCourseDirectory())[ CD ]
Line_2 $$ private void updateCourse() -->Line_12 $$ if (manager == null) [ CD ]
Line_3 $$ final Course course = StudyTaskManager.getInstance(myProject).getCourse()-->Line_4 $$ if (course == null) [ FD ]
Line_2 $$ private void updateCourse() -->Line_38 $$ notification.notify(myProject)[ CD ]
Line_2 $$ private void updateCourse() -->Line_16 $$ final File[] files = resourceDirectory.listFiles()[ CD ]
Line_24 $$ if (file.getName().startsWith(EduNames.LESSON)) -->Line_26 $$ if (tasks == null)[ CD ]
