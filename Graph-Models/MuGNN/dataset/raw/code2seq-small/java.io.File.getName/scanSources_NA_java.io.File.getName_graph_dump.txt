Line_6 $$ final File[] files = fromRoot.listFiles()-->Line_7 $$ if (files != null) [ FD ]
Line_11 $$ if (file.isDirectory()) -->Line_12 $$ final String subPackageName[ CD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_6 $$ final File[] files = fromRoot.listFiles()[ CD ]
Line_13 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_15 $$ builder.append(parentPackageName)[ FD ]
Line_13 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_22 $$ StringBuilderSpinAllocator.dispose(builder)[ FD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_3 $$ if (myIgnoredNames.contains(fromRoot.getName())) [ FD ]
Line_20 $$ subPackageName = builder.toString()-->Line_24 $$ scanSources(file, subPackageName, usedPackages, selfPackages)[ FD ]
Line_10 $$ for (File file : files) -->Line_24 $$ scanSources(file, subPackageName, usedPackages, selfPackages)[ FD ]
Line_13 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_17 $$ builder.append(".")[ FD ]
Line_13 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_20 $$ subPackageName = builder.toString()[ FD ]
Line_12 $$ final String subPackageName-->Line_20 $$ subPackageName = builder.toString()[ FD ]
Line_13 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_19 $$ builder.append(file.getName())[ FD ]
Line_3 $$ if (myIgnoredNames.contains(fromRoot.getName())) -->Line_4 $$ return[ CD ]
Line_11 $$ if (file.isDirectory()) -->Line_13 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()[ CD ]
Line_10 $$ for (File file : files) -->Line_19 $$ builder.append(file.getName())[ FD ]
Line_10 $$ for (File file : files) -->Line_28 $$ scanSourceFile(file, usedPackages)[ FD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_3 $$ if (myIgnoredNames.contains(fromRoot.getName())) [ CD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_24 $$ scanSources(file, subPackageName, usedPackages, selfPackages)[ FD ]
Line_10 $$ for (File file : files) -->Line_26 $$ if (isSourceFile(file)) [ FD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_28 $$ scanSourceFile(file, usedPackages)[ FD ]
Line_16 $$ if (builder.length() > 0) -->Line_17 $$ builder.append(".")[ CD ]
Line_9 $$ boolean includeParentName = false-->Line_27 $$ includeParentName = true[ FD ]
Line_26 $$ if (isSourceFile(file)) -->Line_27 $$ includeParentName = true[ CD ]
Line_11 $$ if (file.isDirectory()) -->Line_24 $$ scanSources(file, subPackageName, usedPackages, selfPackages)[ CD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_7 $$ if (files != null) [ CD ]
Line_12 $$ final String subPackageName-->Line_24 $$ scanSources(file, subPackageName, usedPackages, selfPackages)[ FD ]
Line_13 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_16 $$ if (builder.length() > 0) [ FD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_15 $$ builder.append(parentPackageName)[ FD ]
Line_10 $$ for (File file : files) -->Line_11 $$ if (file.isDirectory()) [ FD ]
Line_7 $$ if (files != null) -->Line_8 $$ myProgress.checkCanceled()[ CD ]
Line_7 $$ if (files != null) -->Line_9 $$ boolean includeParentName = false[ CD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_33 $$ selfPackages.add(myInterner.intern(parentPackageName))[ FD ]
Line_11 $$ if (file.isDirectory()) -->Line_26 $$ if (isSourceFile(file)) [ CD ]
Line_32 $$ if (includeParentName) -->Line_33 $$ selfPackages.add(myInterner.intern(parentPackageName))[ CD ]
Line_26 $$ if (isSourceFile(file)) -->Line_28 $$ scanSourceFile(file, usedPackages)[ CD ]
Line_2 $$ private void scanSources(final File fromRoot, final String parentPackageName, final Set<String> usedPackages, final Set<String> selfPackages) -->Line_6 $$ final File[] files = fromRoot.listFiles()[ FD ]
Line_7 $$ if (files != null) -->Line_32 $$ if (includeParentName) [ CD ]
