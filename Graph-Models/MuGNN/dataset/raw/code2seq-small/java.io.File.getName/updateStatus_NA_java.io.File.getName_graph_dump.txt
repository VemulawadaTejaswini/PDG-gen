Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_7 $$ final boolean exists = file.exists()[ CD ]
Line_5 $$ final File file = SvnUtil.resolvePath(myBase, path)-->Line_9 $$ status.setKind(exists, NodeKind.from(file.isDirectory()))[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_14 $$ status.setFile(myBase)[ FD ]
Line_7 $$ final boolean exists = file.exists()-->Line_18 $$ status.setKind(exists, NodeKind.UNKNOWN)[ FD ]
Line_11 $$ final StatusType ns = status.getNodeStatus()-->Line_12 $$ if (myBase.getName().equals(path) && !StatusType.MISSING.equals(ns) && !StatusType.STATUS_DELETED.equals(ns)) [ FD ]
Line_3 $$ final String path = attributes.getValue("path")-->Line_12 $$ if (myBase.getName().equals(path) && !StatusType.MISSING.equals(ns) && !StatusType.STATUS_DELETED.equals(ns)) [ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_20 $$ status.setPath(path)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_6 $$ status.setFile(file)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_3 $$ final String path = attributes.getValue("path")[ CD ]
Line_5 $$ final File file = SvnUtil.resolvePath(myBase, path)-->Line_6 $$ status.setFile(file)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_5 $$ final File file = SvnUtil.resolvePath(myBase, path)[ CD ]
Line_7 $$ final boolean exists = file.exists()-->Line_9 $$ status.setKind(exists, NodeKind.from(file.isDirectory()))[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_4 $$ assertSAX(path != null)[ CD ]
Line_8 $$ if (exists) -->Line_9 $$ status.setKind(exists, NodeKind.from(file.isDirectory()))[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_11 $$ final StatusType ns = status.getNodeStatus()[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_20 $$ status.setPath(path)[ CD ]
Line_12 $$ if (myBase.getName().equals(path) && !StatusType.MISSING.equals(ns) && !StatusType.STATUS_DELETED.equals(ns)) -->Line_14 $$ status.setFile(myBase)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_18 $$ status.setKind(exists, NodeKind.UNKNOWN)[ FD ]
Line_12 $$ if (myBase.getName().equals(path) && !StatusType.MISSING.equals(ns) && !StatusType.STATUS_DELETED.equals(ns)) -->Line_15 $$ status.setPath("")[ CD ]
Line_5 $$ final File file = SvnUtil.resolvePath(myBase, path)-->Line_7 $$ final boolean exists = file.exists()[ FD ]
Line_3 $$ final String path = attributes.getValue("path")-->Line_5 $$ final File file = SvnUtil.resolvePath(myBase, path)[ FD ]
Line_12 $$ if (myBase.getName().equals(path) && !StatusType.MISSING.equals(ns) && !StatusType.STATUS_DELETED.equals(ns)) -->Line_16 $$ return[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_6 $$ status.setFile(file)[ CD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_13 $$ status.setKind(true, NodeKind.DIR)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_8 $$ if (exists) [ CD ]
Line_8 $$ if (exists) -->Line_18 $$ status.setKind(exists, NodeKind.UNKNOWN)[ CD ]
Line_8 $$ if (exists) -->Line_11 $$ final StatusType ns = status.getNodeStatus()[ CD ]
Line_3 $$ final String path = attributes.getValue("path")-->Line_20 $$ status.setPath(path)[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_15 $$ status.setPath("")[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_3 $$ final String path = attributes.getValue("path")[ FD ]
Line_2 $$ protected void updateStatus(Attributes attributes, PortableStatus status, Lock.Builder lock) throws SAXException -->Line_9 $$ status.setKind(exists, NodeKind.from(file.isDirectory()))[ FD ]
Line_8 $$ if (exists) -->Line_12 $$ if (myBase.getName().equals(path) && !StatusType.MISSING.equals(ns) && !StatusType.STATUS_DELETED.equals(ns)) [ CD ]
Line_12 $$ if (myBase.getName().equals(path) && !StatusType.MISSING.equals(ns) && !StatusType.STATUS_DELETED.equals(ns)) -->Line_13 $$ status.setKind(true, NodeKind.DIR)[ CD ]
