Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_3 $$ Assert.assertTrue(wc1.isDirectory())[ CD ]
Line_5 $$ final UpdatedFiles files = UpdatedFiles.create()-->Line_9 $$ Assert.assertTrue(!files.getGroupById(FileGroup.CREATED_ID).getFiles().isEmpty())[ FD ]
Line_6 $$ final UpdateSession session = myVcs.getUpdateEnvironment().updateDirectories(new FilePath[] -->Line_7 $$ Assert.assertTrue(session.getExceptions() == null || session.getExceptions().isEmpty())[ FD ]
Line_10 $$ final String path = files.getGroupById(FileGroup.CREATED_ID).getFiles().iterator().next()-->Line_11 $$ final String name = path.substring(path.lastIndexOf(File.separator) + 1)[ FD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_12 $$ Assert.assertEquals(created.getName(), name)[ FD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_11 $$ final String name = path.substring(path.lastIndexOf(File.separator) + 1)[ CD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_6 $$ final UpdateSession session = myVcs.getUpdateEnvironment().updateDirectories(new FilePath[] [ CD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_10 $$ final String path = files.getGroupById(FileGroup.CREATED_ID).getFiles().iterator().next()[ CD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_4 $$ final VirtualFile vf = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wc1)[ FD ]
Line_5 $$ final UpdatedFiles files = UpdatedFiles.create()-->Line_10 $$ final String path = files.getGroupById(FileGroup.CREATED_ID).getFiles().iterator().next()[ FD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_5 $$ final UpdatedFiles files = UpdatedFiles.create()[ CD ]
Line_5 $$ final UpdatedFiles files = UpdatedFiles.create()-->Line_6 $$ final UpdateSession session = myVcs.getUpdateEnvironment().updateDirectories(new FilePath[] [ FD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_4 $$ final VirtualFile vf = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wc1)[ CD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_7 $$ Assert.assertTrue(session.getExceptions() == null || session.getExceptions().isEmpty())[ CD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_9 $$ Assert.assertTrue(!files.getGroupById(FileGroup.CREATED_ID).getFiles().isEmpty())[ CD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_8 $$ Assert.assertTrue(!session.isCanceled())[ CD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_3 $$ Assert.assertTrue(wc1.isDirectory())[ FD ]
Line_11 $$ final String name = path.substring(path.lastIndexOf(File.separator) + 1)-->Line_12 $$ Assert.assertEquals(created.getName(), name)[ FD ]
Line_4 $$ final VirtualFile vf = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(wc1)-->Line_6 $$ final UpdateSession session = myVcs.getUpdateEnvironment().updateDirectories(new FilePath[] [ FD ]
Line_6 $$ final UpdateSession session = myVcs.getUpdateEnvironment().updateDirectories(new FilePath[] -->Line_8 $$ Assert.assertTrue(!session.isCanceled())[ FD ]
Line_2 $$ private void testUpdateImpl(File wc1, final File created) -->Line_12 $$ Assert.assertEquals(created.getName(), name)[ CD ]
