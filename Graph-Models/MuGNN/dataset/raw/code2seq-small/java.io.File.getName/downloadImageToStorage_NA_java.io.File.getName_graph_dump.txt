Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_11 $$ return hash[ CD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_10 $$ LOG.info("Downloaded file " + dstFiles.get(0).getName() + " size " + dstFiles.get(0).length() + " bytes.")[ CD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_3 $$ String fileid = ImageServlet.getParamStringForImage(null, imageTxId, dstStorage)[ FD ]
Line_4 $$ String fileName = NNStorage.getCheckpointImageFileName(imageTxId)-->Line_5 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)[ FD ]
Line_5 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)-->Line_9 $$ MD5Hash hash = getFileClient(fsName, fileid, dstFiles, dstStorage, needDigest)[ FD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_4 $$ String fileName = NNStorage.getCheckpointImageFileName(imageTxId)[ FD ]
Line_5 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)-->Line_6 $$ if (dstFiles.isEmpty()) [ FD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_5 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)[ CD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_9 $$ MD5Hash hash = getFileClient(fsName, fileid, dstFiles, dstStorage, needDigest)[ CD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_5 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)[ FD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_3 $$ String fileid = ImageServlet.getParamStringForImage(null, imageTxId, dstStorage)[ CD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_4 $$ String fileName = NNStorage.getCheckpointImageFileName(imageTxId)[ CD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_6 $$ if (dstFiles.isEmpty()) [ CD ]
Line_2 $$ public static MD5Hash downloadImageToStorage(URL fsName, long imageTxId, Storage dstStorage, boolean needDigest) throws IOException -->Line_9 $$ MD5Hash hash = getFileClient(fsName, fileid, dstFiles, dstStorage, needDigest)[ FD ]
Line_5 $$ List<File> dstFiles = dstStorage.getFiles(NameNodeDirType.IMAGE, fileName)-->Line_10 $$ LOG.info("Downloaded file " + dstFiles.get(0).getName() + " size " + dstFiles.get(0).length() + " bytes.")[ FD ]
Line_3 $$ String fileid = ImageServlet.getParamStringForImage(null, imageTxId, dstStorage)-->Line_9 $$ MD5Hash hash = getFileClient(fsName, fileid, dstFiles, dstStorage, needDigest)[ FD ]
