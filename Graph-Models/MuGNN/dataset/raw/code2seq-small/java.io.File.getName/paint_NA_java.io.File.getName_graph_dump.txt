Line_11 $$ PsiReference ref = null-->Line_63 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_13 $$ refKeys = refMap.keySet().iterator()-->Line_14 $$ if (refKeys.hasNext()) [ FD ]
Line_15 $$ Integer key = (Integer) refKeys.next()-->Line_63 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_38 $$ haveNonWhiteSpace = true-->Line_42 $$ if (!haveNonWhiteSpace) [ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_58 $$ if (referenceEnd > 0 && hEnd >= referenceEnd) [ CD ]
Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_28 $$ while (!hIterator.atEnd()) [ FD ]
Line_26 $$ String closeTag = null-->Line_52 $$ writer.write(closeTag)[ FD ]
Line_15 $$ Integer key = (Integer) refKeys.next()-->Line_17 $$ refOffset = key.intValue()[ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_31 $$ int hEnd = hIterator.getEnd()[ CD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_57 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ FD ]
Line_26 $$ String closeTag = null-->Line_51 $$ if (closeTag != null) [ FD ]
Line_31 $$ int hEnd = hIterator.getEnd()-->Line_32 $$ if (hEnd > mySegmentEnd)[ FD ]
Line_58 $$ if (referenceEnd > 0 && hEnd >= referenceEnd) -->Line_61 $$ if (refKeys.hasNext()) [ CD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_8 $$ TextAttributes prevAttributes = null[ CD ]
Line_35 $$ for (int offset = hStart; offset < hEnd; offset++) -->Line_36 $$ char c = myText.charAt(offset)[ FD ]
Line_9 $$ Iterator refKeys = null-->Line_62 $$ Integer key = (Integer) refKeys.next()[ FD ]
Line_4 $$ if (hIterator.atEnd())-->Line_5 $$ return[ CD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_43 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ FD ]
Line_50 $$ if (!equals(prevAttributes, textAttributes) && referenceEnd < 0) -->Line_54 $$ closeTag = writeFontTag(writer, textAttributes)[ CD ]
Line_29 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_50 $$ if (!equals(prevAttributes, textAttributes) && referenceEnd < 0) [ FD ]
Line_34 $$ boolean haveNonWhiteSpace = false-->Line_42 $$ if (!haveNonWhiteSpace) [ FD ]
Line_54 $$ closeTag = writeFontTag(writer, textAttributes)-->Line_70 $$ writer.write(closeTag)[ FD ]
Line_10 $$ int refOffset = -1-->Line_17 $$ refOffset = key.intValue()[ FD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_20 $$ int referenceEnd = -1[ CD ]
Line_10 $$ int refOffset = -1-->Line_64 $$ refOffset = key.intValue()[ FD ]
Line_69 $$ if (closeTag != null) -->Line_70 $$ writer.write(closeTag)[ CD ]
Line_13 $$ refKeys = refMap.keySet().iterator()-->Line_62 $$ Integer key = (Integer) refKeys.next()[ FD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_72 $$ writeFooter(writer)[ FD ]
Line_30 $$ int hStart = hIterator.getStart()-->Line_43 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ FD ]
Line_58 $$ if (referenceEnd > 0 && hEnd >= referenceEnd) -->Line_59 $$ writer.write("</a>")[ CD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_77 $$ writer.close()[ FD ]
Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_27 $$ getMethodSeparator(hIterator.getStart())[ FD ]
Line_8 $$ TextAttributes prevAttributes = null-->Line_55 $$ prevAttributes = textAttributes[ FD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_43 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ FD ]
Line_26 $$ String closeTag = null-->Line_54 $$ closeTag = writeFontTag(writer, textAttributes)[ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_42 $$ if (!haveNonWhiteSpace) [ CD ]
Line_9 $$ Iterator refKeys = null-->Line_15 $$ Integer key = (Integer) refKeys.next()[ FD ]
Line_61 $$ if (refKeys.hasNext()) -->Line_64 $$ refOffset = key.intValue()[ CD ]
Line_13 $$ refKeys = refMap.keySet().iterator()-->Line_15 $$ Integer key = (Integer) refKeys.next()[ FD ]
Line_14 $$ if (refKeys.hasNext()) -->Line_16 $$ ref = (PsiReference) refMap.get(key)[ CD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_32 $$ if (hEnd > mySegmentEnd)[ CD ]
Line_17 $$ refOffset = key.intValue()-->Line_64 $$ refOffset = key.intValue()[ FD ]
Line_47 $$ if (refOffset > 0 && hStart <= refOffset && hEnd > refOffset) -->Line_48 $$ referenceEnd = writeReferenceTag(writer, ref)[ CD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_29 $$ TextAttributes textAttributes = hIterator.getTextAttributes()[ CD ]
Line_26 $$ String closeTag = null-->Line_69 $$ if (closeTag != null) [ FD ]
Line_63 $$ ref = (PsiReference) refMap.get(key)-->Line_48 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_14 $$ if (refKeys.hasNext()) -->Line_15 $$ Integer key = (Integer) refKeys.next()[ CD ]
Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_31 $$ int hEnd = hIterator.getEnd()[ FD ]
Line_35 $$ for (int offset = hStart; offset < hEnd; offset++) -->Line_36 $$ char c = myText.charAt(offset)[ CD ]
Line_58 $$ if (referenceEnd > 0 && hEnd >= referenceEnd) -->Line_60 $$ referenceEnd = -1[ CD ]
Line_54 $$ closeTag = writeFontTag(writer, textAttributes)-->Line_69 $$ if (closeTag != null) [ FD ]
Line_51 $$ if (closeTag != null) -->Line_52 $$ writer.write(closeTag)[ CD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_24 $$ writeLineNumber(writer)[ FD ]
Line_34 $$ boolean haveNonWhiteSpace = false-->Line_38 $$ haveNonWhiteSpace = true[ FD ]
Line_30 $$ int hStart = hIterator.getStart()-->Line_57 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ FD ]
Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_4 $$ if (hIterator.atEnd())[ FD ]
Line_20 $$ int referenceEnd = -1-->Line_60 $$ referenceEnd = -1[ FD ]
Line_48 $$ referenceEnd = writeReferenceTag(writer, ref)-->Line_60 $$ referenceEnd = -1[ FD ]
Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_29 $$ TextAttributes textAttributes = hIterator.getTextAttributes()[ FD ]
Line_14 $$ if (refKeys.hasNext()) -->Line_17 $$ refOffset = key.intValue()[ CD ]
Line_8 $$ TextAttributes prevAttributes = null-->Line_50 $$ if (!equals(prevAttributes, textAttributes) && referenceEnd < 0) [ FD ]
Line_42 $$ if (!haveNonWhiteSpace) -->Line_43 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ CD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_10 $$ int refOffset = -1[ CD ]
Line_55 $$ prevAttributes = textAttributes-->Line_50 $$ if (!equals(prevAttributes, textAttributes) && referenceEnd < 0) [ FD ]
Line_12 $$ if (refMap != null) -->Line_14 $$ if (refKeys.hasNext()) [ CD ]
Line_12 $$ if (refMap != null) -->Line_13 $$ refKeys = refMap.keySet().iterator()[ CD ]
Line_16 $$ ref = (PsiReference) refMap.get(key)-->Line_63 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_67 $$ hIterator.advance()[ CD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_12 $$ if (refMap != null) [ CD ]
Line_29 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_55 $$ prevAttributes = textAttributes[ FD ]
Line_16 $$ ref = (PsiReference) refMap.get(key)-->Line_48 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_11 $$ PsiReference ref = null[ CD ]
Line_61 $$ if (refKeys.hasNext()) -->Line_63 $$ ref = (PsiReference) refMap.get(key)[ CD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_50 $$ if (!equals(prevAttributes, textAttributes) && referenceEnd < 0) [ CD ]
Line_29 $$ TextAttributes textAttributes = hIterator.getTextAttributes()-->Line_54 $$ closeTag = writeFontTag(writer, textAttributes)[ FD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_70 $$ writer.write(closeTag)[ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_35 $$ for (int offset = hStart; offset < hEnd; offset++) [ CD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)[ CD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_57 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ FD ]
Line_37 $$ if (c != ' ' && c != '\t') -->Line_38 $$ haveNonWhiteSpace = true[ CD ]
Line_26 $$ String closeTag = null-->Line_70 $$ writer.write(closeTag)[ FD ]
Line_42 $$ if (!haveNonWhiteSpace) -->Line_44 $$ hIterator.advance()[ CD ]
Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_67 $$ hIterator.advance()[ FD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)[ CD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_16 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_15 $$ Integer key = (Integer) refKeys.next()-->Line_64 $$ refOffset = key.intValue()[ FD ]
Line_9 $$ Iterator refKeys = null-->Line_13 $$ refKeys = refMap.keySet().iterator()[ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_47 $$ if (refOffset > 0 && hStart <= refOffset && hEnd > refOffset) [ CD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_12 $$ if (refMap != null) [ FD ]
Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_44 $$ hIterator.advance()[ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_57 $$ writeString(writer, myText, hStart, hEnd - hStart, fileType)[ CD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_9 $$ Iterator refKeys = null[ CD ]
Line_54 $$ closeTag = writeFontTag(writer, textAttributes)-->Line_51 $$ if (closeTag != null) [ FD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_48 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_15 $$ Integer key = (Integer) refKeys.next()-->Line_16 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_50 $$ if (!equals(prevAttributes, textAttributes) && referenceEnd < 0) -->Line_51 $$ if (closeTag != null) [ CD ]
Line_11 $$ PsiReference ref = null-->Line_16 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_11 $$ PsiReference ref = null-->Line_48 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_34 $$ boolean haveNonWhiteSpace = false[ CD ]
Line_35 $$ for (int offset = hStart; offset < hEnd; offset++) -->Line_37 $$ if (c != ' ' && c != '\t') [ CD ]
Line_20 $$ int referenceEnd = -1-->Line_48 $$ referenceEnd = writeReferenceTag(writer, ref)[ FD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_52 $$ writer.write(closeTag)[ FD ]
Line_3 $$ HighlighterIterator hIterator = myHighlighter.createIterator(myOffset)-->Line_30 $$ int hStart = hIterator.getStart()[ FD ]
Line_23 $$ if (myFirstLineNumber == 0) -->Line_24 $$ writeLineNumber(writer)[ CD ]
Line_31 $$ int hEnd = hIterator.getEnd()-->Line_35 $$ for (int offset = hStart; offset < hEnd; offset++) [ FD ]
Line_50 $$ if (!equals(prevAttributes, textAttributes) && referenceEnd < 0) -->Line_55 $$ prevAttributes = textAttributes[ CD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_59 $$ writer.write("</a>")[ FD ]
Line_13 $$ refKeys = refMap.keySet().iterator()-->Line_61 $$ if (refKeys.hasNext()) [ FD ]
Line_54 $$ closeTag = writeFontTag(writer, textAttributes)-->Line_52 $$ writer.write(closeTag)[ FD ]
Line_9 $$ Iterator refKeys = null-->Line_61 $$ if (refKeys.hasNext()) [ FD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_13 $$ refKeys = refMap.keySet().iterator()[ FD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_22 $$ writeHeader(writer, new File(myFileName).getName())[ FD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_63 $$ ref = (PsiReference) refMap.get(key)[ FD ]
Line_2 $$ public void paint(TreeMap refMap, FileType fileType) throws FileNotFoundException -->Line_4 $$ if (hIterator.atEnd())[ CD ]
Line_6 $$ OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(myHTMLFileName), CharsetToolkit.UTF8_CHARSET)-->Line_54 $$ closeTag = writeFontTag(writer, textAttributes)[ FD ]
Line_9 $$ Iterator refKeys = null-->Line_14 $$ if (refKeys.hasNext()) [ FD ]
Line_28 $$ while (!hIterator.atEnd()) -->Line_30 $$ int hStart = hIterator.getStart()[ CD ]
