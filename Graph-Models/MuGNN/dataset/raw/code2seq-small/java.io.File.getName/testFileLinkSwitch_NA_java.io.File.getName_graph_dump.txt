Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_6 $$ FileUtil.writeToFile(target2, "some quite another text")[ CD ]
Line_5 $$ File target2 = myTempDir.newFile("target2.txt")-->Line_13 $$ createSymLink(target2.getPath(), myTempDir.getRoot() + "/" + link.getName())[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_17 $$ assertEquals(vLink1, vLink2)[ CD ]
Line_16 $$ VirtualFile vLink2 = LocalFileSystem.getInstance().findFileByIoFile(link)-->Line_19 $$ assertEquals(FileUtil.loadFile(target2), VfsUtilCore.loadText(vLink2))[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_8 $$ VirtualFile vLink1 = refreshAndFind(link)[ CD ]
Line_16 $$ VirtualFile vLink2 = LocalFileSystem.getInstance().findFileByIoFile(link)-->Line_17 $$ assertEquals(vLink1, vLink2)[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_12 $$ assertTrue(link.toString(), link.delete())[ CD ]
Line_5 $$ File target2 = myTempDir.newFile("target2.txt")-->Line_6 $$ FileUtil.writeToFile(target2, "some quite another text")[ FD ]
Line_7 $$ File link = createSymLink(target1.getPath(), myTempDir.getRoot() + "/link")-->Line_8 $$ VirtualFile vLink1 = refreshAndFind(link)[ FD ]
Line_8 $$ VirtualFile vLink1 = refreshAndFind(link)-->Line_9 $$ assertTrue("link=" + link + ", vLink=" + vLink1, vLink1 != null && !vLink1.isDirectory() && vLink1.is(VFileProperty.SYMLINK))[ FD ]
Line_8 $$ VirtualFile vLink1 = refreshAndFind(link)-->Line_15 $$ assertTrue(vLink1.isValid())[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_4 $$ FileUtil.writeToFile(target1, "some text")[ CD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_10 $$ assertEquals(FileUtil.loadFile(target1), VfsUtilCore.loadText(vLink1))[ CD ]
Line_7 $$ File link = createSymLink(target1.getPath(), myTempDir.getRoot() + "/link")-->Line_12 $$ assertTrue(link.toString(), link.delete())[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_16 $$ VirtualFile vLink2 = LocalFileSystem.getInstance().findFileByIoFile(link)[ CD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_11 $$ assertPathsEqual(target1.getPath(), vLink1.getCanonicalPath())[ CD ]
Line_5 $$ File target2 = myTempDir.newFile("target2.txt")-->Line_20 $$ assertPathsEqual(target2.getPath(), vLink1.getCanonicalPath())[ FD ]
Line_7 $$ File link = createSymLink(target1.getPath(), myTempDir.getRoot() + "/link")-->Line_16 $$ VirtualFile vLink2 = LocalFileSystem.getInstance().findFileByIoFile(link)[ FD ]
Line_8 $$ VirtualFile vLink1 = refreshAndFind(link)-->Line_11 $$ assertPathsEqual(target1.getPath(), vLink1.getCanonicalPath())[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_20 $$ assertPathsEqual(target2.getPath(), vLink1.getCanonicalPath())[ CD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_14 $$ refresh()[ CD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_9 $$ assertTrue("link=" + link + ", vLink=" + vLink1, vLink1 != null && !vLink1.isDirectory() && vLink1.is(VFileProperty.SYMLINK))[ CD ]
Line_3 $$ File target1 = myTempDir.newFile("target1.txt")-->Line_4 $$ FileUtil.writeToFile(target1, "some text")[ FD ]
Line_8 $$ VirtualFile vLink1 = refreshAndFind(link)-->Line_10 $$ assertEquals(FileUtil.loadFile(target1), VfsUtilCore.loadText(vLink1))[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_3 $$ File target1 = myTempDir.newFile("target1.txt")[ CD ]
Line_3 $$ File target1 = myTempDir.newFile("target1.txt")-->Line_11 $$ assertPathsEqual(target1.getPath(), vLink1.getCanonicalPath())[ FD ]
Line_16 $$ VirtualFile vLink2 = LocalFileSystem.getInstance().findFileByIoFile(link)-->Line_18 $$ assertTrue("link=" + link + ", vLink=" + vLink2, vLink2 != null && !vLink2.isDirectory() && vLink2.is(VFileProperty.SYMLINK))[ FD ]
Line_3 $$ File target1 = myTempDir.newFile("target1.txt")-->Line_7 $$ File link = createSymLink(target1.getPath(), myTempDir.getRoot() + "/link")[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_19 $$ assertEquals(FileUtil.loadFile(target2), VfsUtilCore.loadText(vLink2))[ CD ]
Line_5 $$ File target2 = myTempDir.newFile("target2.txt")-->Line_19 $$ assertEquals(FileUtil.loadFile(target2), VfsUtilCore.loadText(vLink2))[ FD ]
Line_8 $$ VirtualFile vLink1 = refreshAndFind(link)-->Line_17 $$ assertEquals(vLink1, vLink2)[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_18 $$ assertTrue("link=" + link + ", vLink=" + vLink2, vLink2 != null && !vLink2.isDirectory() && vLink2.is(VFileProperty.SYMLINK))[ CD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_13 $$ createSymLink(target2.getPath(), myTempDir.getRoot() + "/" + link.getName())[ CD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_5 $$ File target2 = myTempDir.newFile("target2.txt")[ CD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_7 $$ File link = createSymLink(target1.getPath(), myTempDir.getRoot() + "/link")[ CD ]
Line_8 $$ VirtualFile vLink1 = refreshAndFind(link)-->Line_20 $$ assertPathsEqual(target2.getPath(), vLink1.getCanonicalPath())[ FD ]
Line_3 $$ File target1 = myTempDir.newFile("target1.txt")-->Line_10 $$ assertEquals(FileUtil.loadFile(target1), VfsUtilCore.loadText(vLink1))[ FD ]
Line_2 $$ public void testFileLinkSwitch() throws Exception -->Line_15 $$ assertTrue(vLink1.isValid())[ CD ]
Line_7 $$ File link = createSymLink(target1.getPath(), myTempDir.getRoot() + "/link")-->Line_13 $$ createSymLink(target2.getPath(), myTempDir.getRoot() + "/" + link.getName())[ FD ]
