Line_10 $$ final List<File> fileNames = ContainerUtil.map(filePaths, new Function<String, File>() -->Line_20 $$ final int historySize = fileNames.size()[ FD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_10 $$ final List<File> fileNames = ContainerUtil.map(filePaths, new Function<String, File>() [ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_26 $$ actions[historySize + 1] = new ImportTestsFromFileAction(myProperties)[ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_5 $$ final Project project = e.getProject()[ FD ]
Line_15 $$ Collections.sort(fileNames, new Comparator<File>() -->Line_17 $$ return f1.lastModified() > f2.lastModified() ? -1 : 1[ FD ]
Line_3 $$ if (e == null)-->Line_4 $$ return EMPTY_ARRAY[ CD ]
Line_8 $$ final Collection<String> filePaths = TestHistoryConfiguration.getInstance(project).getFiles()-->Line_10 $$ final List<File> fileNames = ContainerUtil.map(filePaths, new Function<String, File>() [ FD ]
Line_22 $$ for (int i = 0; i < historySize; i++) -->Line_23 $$ actions[i] = new ImportTestsFromHistoryAction(myProperties, project, fileNames.get(i).getName())[ CD ]
Line_10 $$ final List<File> fileNames = ContainerUtil.map(filePaths, new Function<String, File>() -->Line_12 $$ return new File(testHistoryRoot, fileName)[ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_8 $$ final Collection<String> filePaths = TestHistoryConfiguration.getInstance(project).getFiles()[ CD ]
Line_5 $$ final Project project = e.getProject()-->Line_8 $$ final Collection<String> filePaths = TestHistoryConfiguration.getInstance(project).getFiles()[ FD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_27 $$ return actions[ CD ]
Line_15 $$ Collections.sort(fileNames, new Comparator<File>() -->Line_17 $$ return f1.lastModified() > f2.lastModified() ? -1 : 1[ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_3 $$ if (e == null)[ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_6 $$ if (project == null)[ CD ]
Line_10 $$ final List<File> fileNames = ContainerUtil.map(filePaths, new Function<String, File>() -->Line_15 $$ Collections.sort(fileNames, new Comparator<File>() [ FD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_9 $$ final File testHistoryRoot = TestStateStorage.getTestHistoryRoot(project)[ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_22 $$ for (int i = 0; i < historySize; i++) [ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_20 $$ final int historySize = fileNames.size()[ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_3 $$ if (e == null)[ FD ]
Line_10 $$ final List<File> fileNames = ContainerUtil.map(filePaths, new Function<String, File>() -->Line_23 $$ actions[i] = new ImportTestsFromHistoryAction(myProperties, project, fileNames.get(i).getName())[ FD ]
Line_5 $$ final Project project = e.getProject()-->Line_9 $$ final File testHistoryRoot = TestStateStorage.getTestHistoryRoot(project)[ FD ]
Line_5 $$ final Project project = e.getProject()-->Line_6 $$ if (project == null)[ FD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_25 $$ actions[historySize] = Separator.getInstance()[ CD ]
Line_6 $$ if (project == null)-->Line_7 $$ return EMPTY_ARRAY[ CD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_5 $$ final Project project = e.getProject()[ CD ]
Line_22 $$ for (int i = 0; i < historySize; i++) -->Line_23 $$ actions[i] = new ImportTestsFromHistoryAction(myProperties, project, fileNames.get(i).getName())[ FD ]
Line_2 $$ public AnAction[] getChildren(@Nullable AnActionEvent e) -->Line_15 $$ Collections.sort(fileNames, new Comparator<File>() [ CD ]
