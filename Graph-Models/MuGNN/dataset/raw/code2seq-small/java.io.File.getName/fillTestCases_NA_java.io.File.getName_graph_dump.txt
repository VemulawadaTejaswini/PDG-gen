Line_18 $$ String message = "Number of test classes found: " + testCaseLoader.getClasses().size() + " time to load: " + (after - before) / 1000 + "s."-->Line_20 $$ log(message)[ FD ]
Line_10 $$ if (newCount != oldCount) -->Line_11 $$ System.out.println("Loaded " + (newCount - oldCount) + " tests from class root " + classRoot)[ CD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_18 $$ String message = "Number of test classes found: " + testCaseLoader.getClasses().size() + " time to load: " + (after - before) / 1000 + "s."[ FD ]
Line_6 $$ File classRootFile = new File(FileUtil.toSystemDependentName(classRoot))-->Line_8 $$ testCaseLoader.loadTestCases(classRootFile.getName(), classFinder.getClasses())[ FD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_19 $$ System.out.println(message)[ CD ]
Line_7 $$ ClassFinder classFinder = new ClassFinder(classRootFile, packageRoot, INCLUDE_UNCONVENTIONALLY_NAMED_TESTS)-->Line_8 $$ testCaseLoader.loadTestCases(classRootFile.getName(), classFinder.getClasses())[ FD ]
Line_4 $$ for (String classRoot : classRoots) -->Line_6 $$ File classRootFile = new File(FileUtil.toSystemDependentName(classRoot))[ FD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_18 $$ String message = "Number of test classes found: " + testCaseLoader.getClasses().size() + " time to load: " + (after - before) / 1000 + "s."[ CD ]
Line_14 $$ if (testCaseLoader.getClasses().size() == 1) -->Line_15 $$ testCaseLoader.clearClasses()[ CD ]
Line_5 $$ int oldCount = testCaseLoader.getClasses().size()-->Line_10 $$ if (newCount != oldCount) [ FD ]
Line_9 $$ int newCount = testCaseLoader.getClasses().size()-->Line_10 $$ if (newCount != oldCount) [ FD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_15 $$ testCaseLoader.clearClasses()[ FD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_20 $$ log(message)[ CD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_14 $$ if (testCaseLoader.getClasses().size() == 1) [ FD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_17 $$ long after = System.currentTimeMillis()[ CD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_9 $$ int newCount = testCaseLoader.getClasses().size()[ FD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_8 $$ testCaseLoader.loadTestCases(classRootFile.getName(), classFinder.getClasses())[ FD ]
Line_18 $$ String message = "Number of test classes found: " + testCaseLoader.getClasses().size() + " time to load: " + (after - before) / 1000 + "s."-->Line_19 $$ System.out.println(message)[ FD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_5 $$ int oldCount = testCaseLoader.getClasses().size()[ FD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_14 $$ if (testCaseLoader.getClasses().size() == 1) [ CD ]
Line_2 $$ public static void fillTestCases(TestCaseLoader testCaseLoader, String packageRoot, String... classRoots) throws IOException -->Line_3 $$ long before = System.currentTimeMillis()[ CD ]
