Line_3 $$ Set<String> found = Sets.newTreeSet()-->Line_6 $$ found.add(f.getName())[ FD ]
Line_2 $$ public static void assertGlobEquals(File dir, String pattern, String... expectedMatches) throws IOException -->Line_9 $$ Set<String> expectedSet = Sets.newTreeSet(Arrays.asList(expectedMatches))[ CD ]
Line_2 $$ public static void assertGlobEquals(File dir, String pattern, String... expectedMatches) throws IOException -->Line_5 $$ if (f.getName().matches(pattern)) [ FD ]
Line_2 $$ public static void assertGlobEquals(File dir, String pattern, String... expectedMatches) throws IOException -->Line_4 $$ for (File f : FileUtil.listFiles(dir)) [ FD ]
Line_3 $$ Set<String> found = Sets.newTreeSet()-->Line_10 $$ Assert.assertEquals("Bad files matching " + pattern + " in " + dir, Joiner.on(",").join(expectedSet), Joiner.on(",").join(found))[ FD ]
Line_4 $$ for (File f : FileUtil.listFiles(dir)) -->Line_6 $$ found.add(f.getName())[ FD ]
Line_9 $$ Set<String> expectedSet = Sets.newTreeSet(Arrays.asList(expectedMatches))-->Line_10 $$ Assert.assertEquals("Bad files matching " + pattern + " in " + dir, Joiner.on(",").join(expectedSet), Joiner.on(",").join(found))[ FD ]
Line_4 $$ for (File f : FileUtil.listFiles(dir)) -->Line_5 $$ if (f.getName().matches(pattern)) [ FD ]
Line_2 $$ public static void assertGlobEquals(File dir, String pattern, String... expectedMatches) throws IOException -->Line_3 $$ Set<String> found = Sets.newTreeSet()[ CD ]
Line_2 $$ public static void assertGlobEquals(File dir, String pattern, String... expectedMatches) throws IOException -->Line_9 $$ Set<String> expectedSet = Sets.newTreeSet(Arrays.asList(expectedMatches))[ FD ]
Line_2 $$ public static void assertGlobEquals(File dir, String pattern, String... expectedMatches) throws IOException -->Line_10 $$ Assert.assertEquals("Bad files matching " + pattern + " in " + dir, Joiner.on(",").join(expectedSet), Joiner.on(",").join(found))[ CD ]
Line_5 $$ if (f.getName().matches(pattern)) -->Line_6 $$ found.add(f.getName())[ CD ]
