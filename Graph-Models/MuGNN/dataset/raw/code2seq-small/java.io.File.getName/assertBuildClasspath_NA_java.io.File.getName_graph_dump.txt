Line_8 $$ for (int i = 0, length = classpath.length; i < length; i++) -->Line_10 $$ final ClasspathEntryModel classpathEntryModel = classpathEntryModels.get(i)[ CD ]
Line_2 $$ protected void assertBuildClasspath(String projectPath, String... classpath) -->Line_5 $$ assertNotNull(classpathModel)[ CD ]
Line_8 $$ for (int i = 0, length = classpath.length; i < length; i++) -->Line_12 $$ assertEquals(1, classpathEntryModel.getClasses().size())[ CD ]
Line_2 $$ protected void assertBuildClasspath(String projectPath, String... classpath) -->Line_6 $$ final List<? extends ClasspathEntryModel> classpathEntryModels = classpathModel.getClasspath().getAll()[ CD ]
Line_4 $$ final BuildScriptClasspathModel classpathModel = classpathModelMap.get(projectPath)-->Line_6 $$ final List<? extends ClasspathEntryModel> classpathEntryModels = classpathModel.getClasspath().getAll()[ FD ]
Line_8 $$ for (int i = 0, length = classpath.length; i < length; i++) -->Line_10 $$ final ClasspathEntryModel classpathEntryModel = classpathEntryModels.get(i)[ FD ]
Line_8 $$ for (int i = 0, length = classpath.length; i < length; i++) -->Line_13 $$ final String path = classpathEntryModel.getClasses().iterator().next()[ CD ]
Line_8 $$ for (int i = 0, length = classpath.length; i < length; i++) -->Line_14 $$ assertEquals(classpathEntry, new File(path).getName())[ CD ]
Line_2 $$ protected void assertBuildClasspath(String projectPath, String... classpath) -->Line_4 $$ final BuildScriptClasspathModel classpathModel = classpathModelMap.get(projectPath)[ CD ]
Line_10 $$ final ClasspathEntryModel classpathEntryModel = classpathEntryModels.get(i)-->Line_12 $$ assertEquals(1, classpathEntryModel.getClasses().size())[ FD ]
Line_10 $$ final ClasspathEntryModel classpathEntryModel = classpathEntryModels.get(i)-->Line_13 $$ final String path = classpathEntryModel.getClasses().iterator().next()[ FD ]
Line_2 $$ protected void assertBuildClasspath(String projectPath, String... classpath) -->Line_3 $$ final Map<String, BuildScriptClasspathModel> classpathModelMap = getModulesMap(BuildScriptClasspathModel.class)[ CD ]
Line_6 $$ final List<? extends ClasspathEntryModel> classpathEntryModels = classpathModel.getClasspath().getAll()-->Line_10 $$ final ClasspathEntryModel classpathEntryModel = classpathEntryModels.get(i)[ FD ]
Line_8 $$ for (int i = 0, length = classpath.length; i < length; i++) -->Line_9 $$ String classpathEntry = classpath[i][ CD ]
Line_3 $$ final Map<String, BuildScriptClasspathModel> classpathModelMap = getModulesMap(BuildScriptClasspathModel.class)-->Line_4 $$ final BuildScriptClasspathModel classpathModel = classpathModelMap.get(projectPath)[ FD ]
Line_2 $$ protected void assertBuildClasspath(String projectPath, String... classpath) -->Line_7 $$ assertEquals(classpath.length, classpathEntryModels.size())[ CD ]
Line_4 $$ final BuildScriptClasspathModel classpathModel = classpathModelMap.get(projectPath)-->Line_5 $$ assertNotNull(classpathModel)[ FD ]
Line_8 $$ for (int i = 0, length = classpath.length; i < length; i++) -->Line_11 $$ assertNotNull(classpathEntryModel)[ CD ]
Line_9 $$ String classpathEntry = classpath[i]-->Line_14 $$ assertEquals(classpathEntry, new File(path).getName())[ FD ]
Line_10 $$ final ClasspathEntryModel classpathEntryModel = classpathEntryModels.get(i)-->Line_11 $$ assertNotNull(classpathEntryModel)[ FD ]
Line_2 $$ protected void assertBuildClasspath(String projectPath, String... classpath) -->Line_8 $$ for (int i = 0, length = classpath.length; i < length; i++) [ CD ]
Line_2 $$ protected void assertBuildClasspath(String projectPath, String... classpath) -->Line_4 $$ final BuildScriptClasspathModel classpathModel = classpathModelMap.get(projectPath)[ FD ]
Line_6 $$ final List<? extends ClasspathEntryModel> classpathEntryModels = classpathModel.getClasspath().getAll()-->Line_7 $$ assertEquals(classpath.length, classpathEntryModels.size())[ FD ]
