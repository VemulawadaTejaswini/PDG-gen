Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_16 $$ return doCreateDeploymentRuntime(artifactSource, artifactFile, serverRuntime, deploymentTask, logManager, repositoryRootFile)[ CD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_6 $$ if (StringUtil.isEmpty(repositoryPath)) [ CD ]
Line_8 $$ repositoryRootFile = FileUtil.findSequentNonexistentFile(repositoryParentFolder, artifactFile.getName(), "")-->Line_16 $$ return doCreateDeploymentRuntime(artifactSource, artifactFile, serverRuntime, deploymentTask, logManager, repositoryRootFile)[ FD ]
Line_3 $$ RepositoryDeploymentConfiguration config = (RepositoryDeploymentConfiguration) deploymentTask.getConfiguration()-->Line_4 $$ String repositoryPath = config.getRepositoryPath()[ FD ]
Line_5 $$ File repositoryRootFile-->Line_8 $$ repositoryRootFile = FileUtil.findSequentNonexistentFile(repositoryParentFolder, artifactFile.getName(), "")[ FD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_5 $$ File repositoryRootFile[ CD ]
Line_6 $$ if (StringUtil.isEmpty(repositoryPath)) -->Line_10 $$ repositoryRootFile = new File(repositoryPath)[ CD ]
Line_6 $$ if (StringUtil.isEmpty(repositoryPath)) -->Line_8 $$ repositoryRootFile = FileUtil.findSequentNonexistentFile(repositoryParentFolder, artifactFile.getName(), "")[ CD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_3 $$ RepositoryDeploymentConfiguration config = (RepositoryDeploymentConfiguration) deploymentTask.getConfiguration()[ FD ]
Line_5 $$ File repositoryRootFile-->Line_15 $$ config.setRepositoryPath(repositoryRootFile.getAbsolutePath())[ FD ]
Line_8 $$ repositoryRootFile = FileUtil.findSequentNonexistentFile(repositoryParentFolder, artifactFile.getName(), "")-->Line_12 $$ if (!FileUtil.createDirectory(repositoryRootFile)) [ FD ]
Line_8 $$ repositoryRootFile = FileUtil.findSequentNonexistentFile(repositoryParentFolder, artifactFile.getName(), "")-->Line_10 $$ repositoryRootFile = new File(repositoryPath)[ FD ]
Line_10 $$ repositoryRootFile = new File(repositoryPath)-->Line_12 $$ if (!FileUtil.createDirectory(repositoryRootFile)) [ FD ]
Line_10 $$ repositoryRootFile = new File(repositoryPath)-->Line_15 $$ config.setRepositoryPath(repositoryRootFile.getAbsolutePath())[ FD ]
Line_8 $$ repositoryRootFile = FileUtil.findSequentNonexistentFile(repositoryParentFolder, artifactFile.getName(), "")-->Line_15 $$ config.setRepositoryPath(repositoryRootFile.getAbsolutePath())[ FD ]
Line_4 $$ String repositoryPath = config.getRepositoryPath()-->Line_6 $$ if (StringUtil.isEmpty(repositoryPath)) [ FD ]
Line_10 $$ repositoryRootFile = new File(repositoryPath)-->Line_16 $$ return doCreateDeploymentRuntime(artifactSource, artifactFile, serverRuntime, deploymentTask, logManager, repositoryRootFile)[ FD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_16 $$ return doCreateDeploymentRuntime(artifactSource, artifactFile, serverRuntime, deploymentTask, logManager, repositoryRootFile)[ FD ]
Line_5 $$ File repositoryRootFile-->Line_16 $$ return doCreateDeploymentRuntime(artifactSource, artifactFile, serverRuntime, deploymentTask, logManager, repositoryRootFile)[ FD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_8 $$ repositoryRootFile = FileUtil.findSequentNonexistentFile(repositoryParentFolder, artifactFile.getName(), "")[ FD ]
Line_7 $$ File repositoryParentFolder = new File(PathManager.getSystemPath(), "cloud-git-artifact-deploy")-->Line_8 $$ repositoryRootFile = FileUtil.findSequentNonexistentFile(repositoryParentFolder, artifactFile.getName(), "")[ FD ]
Line_3 $$ RepositoryDeploymentConfiguration config = (RepositoryDeploymentConfiguration) deploymentTask.getConfiguration()-->Line_15 $$ config.setRepositoryPath(repositoryRootFile.getAbsolutePath())[ FD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_4 $$ String repositoryPath = config.getRepositoryPath()[ CD ]
Line_6 $$ if (StringUtil.isEmpty(repositoryPath)) -->Line_7 $$ File repositoryParentFolder = new File(PathManager.getSystemPath(), "cloud-git-artifact-deploy")[ CD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_15 $$ config.setRepositoryPath(repositoryRootFile.getAbsolutePath())[ CD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_12 $$ if (!FileUtil.createDirectory(repositoryRootFile)) [ CD ]
Line_2 $$ protected CloudDeploymentRuntime doCreateDeploymentRuntime(ArtifactDeploymentSource artifactSource, File artifactFile, CloudMultiSourceServerRuntimeInstance serverRuntime, DeploymentTask<? extends CloudDeploymentNameConfiguration> deploymentTask, DeploymentLogManager logManager) throws ServerRuntimeException -->Line_3 $$ RepositoryDeploymentConfiguration config = (RepositoryDeploymentConfiguration) deploymentTask.getConfiguration()[ CD ]
Line_5 $$ File repositoryRootFile-->Line_12 $$ if (!FileUtil.createDirectory(repositoryRootFile)) [ FD ]
Line_5 $$ File repositoryRootFile-->Line_10 $$ repositoryRootFile = new File(repositoryPath)[ FD ]
