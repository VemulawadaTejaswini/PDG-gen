Line_16 $$ file = new File(rootDir, pathInfo)-->Line_24 $$ long lastModified = file.lastModified()[ FD ]
Line_27 $$ if ((ifModifiedSince > 0) && (ifModifiedSince == lastModified)) -->Line_29 $$ return[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_3 $$ String servletPath = request.getServletPath()[ FD ]
Line_10 $$ File rootDir = _tempDir-->Line_15 $$ rootDir = new File(spriteRootDirName)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_10 $$ File rootDir = _tempDir[ CD ]
Line_25 $$ if (lastModified > 0) -->Line_26 $$ long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)[ CD ]
Line_36 $$ String contentType = MimeTypesUtil.getContentType(fileName)-->Line_40 $$ ServletResponseUtil.sendFile(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_3 $$ String servletPath = request.getServletPath()-->Line_5 $$ String path = servletPath.concat(pathInfo)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_4 $$ String pathInfo = URLDecoder.decode(request.getPathInfo(), StringPool.UTF8)[ FD ]
Line_11 $$ File file = new File(rootDir, path)-->Line_38 $$ ServletResponseUtil.sendFileWithRangeHeader(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_37 $$ if (isSupportsRangeHeader(contentType)) -->Line_40 $$ ServletResponseUtil.sendFile(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_19 $$ String canonicalPath = file.getCanonicalPath()[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_32 $$ if (lastModified > 0) [ CD ]
Line_11 $$ File file = new File(rootDir, path)-->Line_24 $$ long lastModified = file.lastModified()[ FD ]
Line_16 $$ file = new File(rootDir, pathInfo)-->Line_35 $$ String fileName = file.getName()[ FD ]
Line_14 $$ if (Validator.isNotNull(spriteRootDirName)) -->Line_15 $$ rootDir = new File(spriteRootDirName)[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_40 $$ ServletResponseUtil.sendFile(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_16 $$ file = new File(rootDir, pathInfo)-->Line_40 $$ ServletResponseUtil.sendFile(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_12 $$ if (servletPath.equals(SpriteProcessor.PATH)) -->Line_13 $$ String spriteRootDirName = PropsValues.SPRITE_ROOT_DIR[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_11 $$ File file = new File(rootDir, path)[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_37 $$ if (isSupportsRangeHeader(contentType)) [ CD ]
Line_35 $$ String fileName = file.getName()-->Line_38 $$ ServletResponseUtil.sendFileWithRangeHeader(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_26 $$ long ifModifiedSince = request.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE)[ FD ]
Line_3 $$ String servletPath = request.getServletPath()-->Line_12 $$ if (servletPath.equals(SpriteProcessor.PATH)) [ FD ]
Line_16 $$ file = new File(rootDir, pathInfo)-->Line_20 $$ if (!file.exists() || file.isDirectory() || !file.canRead() || file.isHidden() || !canonicalPath.startsWith(rootDir.getCanonicalPath())) [ FD ]
Line_20 $$ if (!file.exists() || file.isDirectory() || !file.canRead() || file.isHidden() || !canonicalPath.startsWith(rootDir.getCanonicalPath())) -->Line_22 $$ return[ CD ]
Line_14 $$ if (Validator.isNotNull(spriteRootDirName)) -->Line_16 $$ file = new File(rootDir, pathInfo)[ CD ]
Line_19 $$ String canonicalPath = file.getCanonicalPath()-->Line_20 $$ if (!file.exists() || file.isDirectory() || !file.canRead() || file.isHidden() || !canonicalPath.startsWith(rootDir.getCanonicalPath())) [ FD ]
Line_11 $$ File file = new File(rootDir, path)-->Line_35 $$ String fileName = file.getName()[ FD ]
Line_36 $$ String contentType = MimeTypesUtil.getContentType(fileName)-->Line_38 $$ ServletResponseUtil.sendFileWithRangeHeader(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_12 $$ if (servletPath.equals(SpriteProcessor.PATH)) -->Line_14 $$ if (Validator.isNotNull(spriteRootDirName)) [ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_3 $$ String servletPath = request.getServletPath()[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_12 $$ if (servletPath.equals(SpriteProcessor.PATH)) [ CD ]
Line_36 $$ String contentType = MimeTypesUtil.getContentType(fileName)-->Line_37 $$ if (isSupportsRangeHeader(contentType)) [ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_24 $$ long lastModified = file.lastModified()[ CD ]
Line_27 $$ if ((ifModifiedSince > 0) && (ifModifiedSince == lastModified)) -->Line_28 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED)[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_38 $$ ServletResponseUtil.sendFileWithRangeHeader(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_11 $$ File file = new File(rootDir, path)-->Line_16 $$ file = new File(rootDir, pathInfo)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_25 $$ if (lastModified > 0) [ CD ]
Line_16 $$ file = new File(rootDir, pathInfo)-->Line_19 $$ String canonicalPath = file.getCanonicalPath()[ FD ]
Line_10 $$ File rootDir = _tempDir-->Line_20 $$ if (!file.exists() || file.isDirectory() || !file.canRead() || file.isHidden() || !canonicalPath.startsWith(rootDir.getCanonicalPath())) [ FD ]
Line_6 $$ if (!isAllowedPath(path)) -->Line_8 $$ return[ CD ]
Line_15 $$ rootDir = new File(spriteRootDirName)-->Line_20 $$ if (!file.exists() || file.isDirectory() || !file.canRead() || file.isHidden() || !canonicalPath.startsWith(rootDir.getCanonicalPath())) [ FD ]
Line_37 $$ if (isSupportsRangeHeader(contentType)) -->Line_38 $$ ServletResponseUtil.sendFileWithRangeHeader(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ CD ]
Line_16 $$ file = new File(rootDir, pathInfo)-->Line_38 $$ ServletResponseUtil.sendFileWithRangeHeader(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_35 $$ String fileName = file.getName()-->Line_40 $$ ServletResponseUtil.sendFile(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_4 $$ String pathInfo = URLDecoder.decode(request.getPathInfo(), StringPool.UTF8)-->Line_5 $$ String path = servletPath.concat(pathInfo)[ FD ]
Line_6 $$ if (!isAllowedPath(path)) -->Line_7 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_7 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_6 $$ if (!isAllowedPath(path)) [ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_21 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ FD ]
Line_35 $$ String fileName = file.getName()-->Line_36 $$ String contentType = MimeTypesUtil.getContentType(fileName)[ FD ]
Line_24 $$ long lastModified = file.lastModified()-->Line_25 $$ if (lastModified > 0) [ FD ]
Line_11 $$ File file = new File(rootDir, path)-->Line_40 $$ ServletResponseUtil.sendFile(request, response, fileName, new FileInputStream(file), file.length(), contentType)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_4 $$ String pathInfo = URLDecoder.decode(request.getPathInfo(), StringPool.UTF8)[ CD ]
Line_5 $$ String path = servletPath.concat(pathInfo)-->Line_6 $$ if (!isAllowedPath(path)) [ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_28 $$ response.setStatus(HttpServletResponse.SC_NOT_MODIFIED)[ FD ]
Line_25 $$ if (lastModified > 0) -->Line_27 $$ if ((ifModifiedSince > 0) && (ifModifiedSince == lastModified)) [ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_35 $$ String fileName = file.getName()[ CD ]
Line_20 $$ if (!file.exists() || file.isDirectory() || !file.canRead() || file.isHidden() || !canonicalPath.startsWith(rootDir.getCanonicalPath())) -->Line_21 $$ response.setStatus(HttpServletResponse.SC_NOT_FOUND)[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_20 $$ if (!file.exists() || file.isDirectory() || !file.canRead() || file.isHidden() || !canonicalPath.startsWith(rootDir.getCanonicalPath())) [ CD ]
Line_24 $$ long lastModified = file.lastModified()-->Line_32 $$ if (lastModified > 0) [ FD ]
Line_24 $$ long lastModified = file.lastModified()-->Line_33 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModified)[ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_36 $$ String contentType = MimeTypesUtil.getContentType(fileName)[ CD ]
Line_32 $$ if (lastModified > 0) -->Line_33 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModified)[ CD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_5 $$ String path = servletPath.concat(pathInfo)[ CD ]
Line_13 $$ String spriteRootDirName = PropsValues.SPRITE_ROOT_DIR-->Line_14 $$ if (Validator.isNotNull(spriteRootDirName)) [ FD ]
Line_11 $$ File file = new File(rootDir, path)-->Line_19 $$ String canonicalPath = file.getCanonicalPath()[ FD ]
Line_11 $$ File file = new File(rootDir, path)-->Line_20 $$ if (!file.exists() || file.isDirectory() || !file.canRead() || file.isHidden() || !canonicalPath.startsWith(rootDir.getCanonicalPath())) [ FD ]
Line_2 $$ public void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_33 $$ response.setDateHeader(HttpHeaders.LAST_MODIFIED, lastModified)[ FD ]
