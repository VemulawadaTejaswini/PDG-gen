Line_27 $$ byte[] instrumented = writer.toByteArray()-->Line_29 $$ final Class aClass = classLoader.doDefineClass(className, instrumented)[ FD ]
Line_21 $$ for (File file : files) -->Line_22 $$ final String fileName = file.getName()[ FD ]
Line_10 $$ if (withDebugInfo) -->Line_11 $$ cmdLine.add("-g")[ CD ]
Line_2 $$ private Class prepareTest(boolean withDebugInfo) throws IOException -->Line_4 $$ final String baseClassName = getTestName(false)[ CD ]
Line_31 $$ mainClass = aClass-->Line_35 $$ assertNotNull("Class " + baseClassName + " not found!", mainClass)[ FD ]
Line_25 $$ ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_FRAMES)-->Line_26 $$ modified |= NotNullVerifyingInstrumenter.processClassFile(reader, writer)[ FD ]
Line_29 $$ final Class aClass = classLoader.doDefineClass(className, instrumented)-->Line_31 $$ mainClass = aClass[ FD ]
Line_16 $$ final File[] files = classesDir.listFiles()-->Line_18 $$ Arrays.sort(files, ( o1,  o2) -> o1.getName().compareToIgnoreCase(o2.getName()))[ FD ]
Line_9 $$ List<String> cmdLine = ContainerUtil.newArrayList("-classpath", base + "annotations.jar", "-d", classesDir.getAbsolutePath())-->Line_14 $$ com.sun.tools.javac.Main.compile(ArrayUtil.toStringArray(cmdLine))[ FD ]
Line_4 $$ final String baseClassName = getTestName(false)-->Line_30 $$ if (className.equals(baseClassName)) [ FD ]
Line_20 $$ MyClassLoader classLoader = new MyClassLoader(getClass().getClassLoader())-->Line_29 $$ final Class aClass = classLoader.doDefineClass(className, instrumented)[ FD ]
Line_2 $$ private Class prepareTest(boolean withDebugInfo) throws IOException -->Line_5 $$ String path = base + baseClassName[ CD ]
Line_22 $$ final String fileName = file.getName()-->Line_28 $$ final String className = FileUtil.getNameWithoutExtension(fileName)[ FD ]
Line_2 $$ private Class prepareTest(boolean withDebugInfo) throws IOException -->Line_6 $$ String javaPath = path + ".java"[ CD ]
Line_6 $$ String javaPath = path + ".java"-->Line_13 $$ cmdLine.add(javaPath)[ FD ]
Line_9 $$ List<String> cmdLine = ContainerUtil.newArrayList("-classpath", base + "annotations.jar", "-d", classesDir.getAbsolutePath())-->Line_11 $$ cmdLine.add("-g")[ FD ]
Line_26 $$ modified |= NotNullVerifyingInstrumenter.processClassFile(reader, writer)-->Line_34 $$ assertTrue(modified)[ FD ]
Line_7 $$ File classesDir = FileUtil.createTempDirectory(baseClassName, "output")-->Line_38 $$ FileUtil.delete(classesDir)[ FD ]
Line_19 $$ boolean modified = false-->Line_34 $$ assertTrue(modified)[ FD ]
Line_7 $$ File classesDir = FileUtil.createTempDirectory(baseClassName, "output")-->Line_16 $$ final File[] files = classesDir.listFiles()[ FD ]
Line_28 $$ final String className = FileUtil.getNameWithoutExtension(fileName)-->Line_30 $$ if (className.equals(baseClassName)) [ FD ]
Line_21 $$ for (File file : files) -->Line_23 $$ byte[] content = FileUtil.loadFileBytes(file)[ FD ]
Line_2 $$ private Class prepareTest(boolean withDebugInfo) throws IOException -->Line_7 $$ File classesDir = FileUtil.createTempDirectory(baseClassName, "output")[ CD ]
Line_25 $$ ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_FRAMES)-->Line_27 $$ byte[] instrumented = writer.toByteArray()[ FD ]
Line_9 $$ List<String> cmdLine = ContainerUtil.newArrayList("-classpath", base + "annotations.jar", "-d", classesDir.getAbsolutePath())-->Line_13 $$ cmdLine.add(javaPath)[ FD ]
Line_16 $$ final File[] files = classesDir.listFiles()-->Line_17 $$ assertNotNull(files)[ FD ]
Line_2 $$ private Class prepareTest(boolean withDebugInfo) throws IOException -->Line_3 $$ String base = JavaTestUtil.getJavaTestDataPath() + "/compiler/notNullVerification/"[ CD ]
Line_7 $$ File classesDir = FileUtil.createTempDirectory(baseClassName, "output")-->Line_9 $$ List<String> cmdLine = ContainerUtil.newArrayList("-classpath", base + "annotations.jar", "-d", classesDir.getAbsolutePath())[ FD ]
Line_4 $$ final String baseClassName = getTestName(false)-->Line_7 $$ File classesDir = FileUtil.createTempDirectory(baseClassName, "output")[ FD ]
Line_28 $$ final String className = FileUtil.getNameWithoutExtension(fileName)-->Line_29 $$ final Class aClass = classLoader.doDefineClass(className, instrumented)[ FD ]
Line_24 $$ FailSafeClassReader reader = new FailSafeClassReader(content, 0, content.length)-->Line_26 $$ modified |= NotNullVerifyingInstrumenter.processClassFile(reader, writer)[ FD ]
Line_15 $$ Class mainClass = null-->Line_31 $$ mainClass = aClass[ FD ]
Line_15 $$ Class mainClass = null-->Line_35 $$ assertNotNull("Class " + baseClassName + " not found!", mainClass)[ FD ]
Line_30 $$ if (className.equals(baseClassName)) -->Line_31 $$ mainClass = aClass[ CD ]
Line_19 $$ boolean modified = false-->Line_26 $$ modified |= NotNullVerifyingInstrumenter.processClassFile(reader, writer)[ FD ]
