Line_2 $$ public static void deletePycFiles(String pyFilePath) -->Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) [ FD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_4 $$ List<File> filesToDelete = new ArrayList<File>()[ CD ]
Line_15 $$ if (pycache.isDirectory()) -->Line_16 $$ final String shortName = FileUtil.getNameWithoutExtension(file)[ CD ]
Line_16 $$ final String shortName = FileUtil.getNameWithoutExtension(file)-->Line_22 $$ return FileUtil.getNameWithoutExtension(nameWithMagic).equals(shortName)[ FD ]
Line_4 $$ List<File> filesToDelete = new ArrayList<File>()-->Line_17 $$ Collections.addAll(filesToDelete, pycache.listFiles(new FileFilter() [ FD ]
Line_21 $$ String nameWithMagic = FileUtil.getNameWithoutExtension(pathname)-->Line_22 $$ return FileUtil.getNameWithoutExtension(nameWithMagic).equals(shortName)[ FD ]
Line_14 $$ File pycache = new File(file.getParentFile(), PyNames.PYCACHE)-->Line_17 $$ Collections.addAll(filesToDelete, pycache.listFiles(new FileFilter() [ FD ]
Line_13 $$ final File file = new File(pyFilePath)-->Line_16 $$ final String shortName = FileUtil.getNameWithoutExtension(file)[ FD ]
Line_6 $$ if (pyc.exists()) -->Line_7 $$ filesToDelete.add(pyc)[ CD ]
Line_4 $$ List<File> filesToDelete = new ArrayList<File>()-->Line_7 $$ filesToDelete.add(pyc)[ FD ]
Line_4 $$ List<File> filesToDelete = new ArrayList<File>()-->Line_26 $$ FileUtil.asyncDelete(filesToDelete)[ FD ]
Line_2 $$ public static void deletePycFiles(String pyFilePath) -->Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) [ CD ]
Line_9 $$ File pyo = new File(pyFilePath + "o")-->Line_10 $$ if (pyo.exists()) [ FD ]
Line_17 $$ Collections.addAll(filesToDelete, pycache.listFiles(new FileFilter() -->Line_21 $$ String nameWithMagic = FileUtil.getNameWithoutExtension(pathname)[ CD ]
Line_5 $$ File pyc = new File(pyFilePath + "c")-->Line_7 $$ filesToDelete.add(pyc)[ FD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_5 $$ File pyc = new File(pyFilePath + "c")[ CD ]
Line_10 $$ if (pyo.exists()) -->Line_11 $$ filesToDelete.add(pyo)[ CD ]
Line_19 $$ if (!FileUtilRt.extensionEquals(pathname.getName(), "pyc"))-->Line_20 $$ return false[ CD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_10 $$ if (pyo.exists()) [ CD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_14 $$ File pycache = new File(file.getParentFile(), PyNames.PYCACHE)[ CD ]
Line_17 $$ Collections.addAll(filesToDelete, pycache.listFiles(new FileFilter() -->Line_21 $$ String nameWithMagic = FileUtil.getNameWithoutExtension(pathname)[ FD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_9 $$ File pyo = new File(pyFilePath + "o")[ CD ]
Line_17 $$ Collections.addAll(filesToDelete, pycache.listFiles(new FileFilter() -->Line_22 $$ return FileUtil.getNameWithoutExtension(nameWithMagic).equals(shortName)[ CD ]
Line_13 $$ final File file = new File(pyFilePath)-->Line_14 $$ File pycache = new File(file.getParentFile(), PyNames.PYCACHE)[ FD ]
Line_15 $$ if (pycache.isDirectory()) -->Line_17 $$ Collections.addAll(filesToDelete, pycache.listFiles(new FileFilter() [ CD ]
Line_17 $$ Collections.addAll(filesToDelete, pycache.listFiles(new FileFilter() -->Line_19 $$ if (!FileUtilRt.extensionEquals(pathname.getName(), "pyc"))[ FD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_15 $$ if (pycache.isDirectory()) [ CD ]
Line_4 $$ List<File> filesToDelete = new ArrayList<File>()-->Line_11 $$ filesToDelete.add(pyo)[ FD ]
Line_14 $$ File pycache = new File(file.getParentFile(), PyNames.PYCACHE)-->Line_15 $$ if (pycache.isDirectory()) [ FD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_26 $$ FileUtil.asyncDelete(filesToDelete)[ CD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_13 $$ final File file = new File(pyFilePath)[ CD ]
Line_17 $$ Collections.addAll(filesToDelete, pycache.listFiles(new FileFilter() -->Line_19 $$ if (!FileUtilRt.extensionEquals(pathname.getName(), "pyc"))[ CD ]
Line_5 $$ File pyc = new File(pyFilePath + "c")-->Line_6 $$ if (pyc.exists()) [ FD ]
Line_3 $$ if (pyFilePath.endsWith(PY_EXTENSION)) -->Line_6 $$ if (pyc.exists()) [ CD ]
Line_9 $$ File pyo = new File(pyFilePath + "o")-->Line_11 $$ filesToDelete.add(pyo)[ FD ]
