Line_17 $$ if (jarFiles.contains(matcher.replaceAll("$1$2"))) -->Line_18 $$ file.delete()[ CD ]
Line_10 $$ while (iterator.hasNext()) -->Line_13 $$ if (protocol.equals("file")) [ CD ]
Line_24 $$ URLClassLoader urlClassLoader = new URLClassLoader(urls.toArray(new URL[urls.size()]), null)-->Line_27 $$ Class<Callable<Boolean>> clazz = (Class<Callable<Boolean>>) urlClassLoader.loadClass(IsNativeLibraryInstalledCallable.class.getName())[ FD ]
Line_7 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()-->Line_8 $$ Set<URL> urls = ClassPathUtil.getClassPathURLs(contextClassLoader)[ FD ]
Line_14 $$ File file = new File(url.getPath())-->Line_18 $$ file.delete()[ FD ]
Line_3 $$ Properties properties = PropsUtil.getProperties(PropsKeys.XUGGLER_JAR_FILE, false)-->Line_4 $$ Set<Object> jarFiles = SetUtil.fromCollection(properties.values())[ FD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_7 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()[ CD ]
Line_13 $$ if (protocol.equals("file")) -->Line_16 $$ if (matcher.matches()) [ CD ]
Line_12 $$ String protocol = url.getProtocol()-->Line_13 $$ if (protocol.equals("file")) [ FD ]
Line_6 $$ Thread currentThread = Thread.currentThread()-->Line_25 $$ currentThread.setContextClassLoader(urlClassLoader)[ FD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_8 $$ Set<URL> urls = ClassPathUtil.getClassPathURLs(contextClassLoader)[ CD ]
Line_13 $$ if (protocol.equals("file")) -->Line_14 $$ File file = new File(url.getPath())[ CD ]
Line_10 $$ while (iterator.hasNext()) -->Line_12 $$ String protocol = url.getProtocol()[ CD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_9 $$ Iterator<URL> iterator = urls.iterator()[ CD ]
Line_8 $$ Set<URL> urls = ClassPathUtil.getClassPathURLs(contextClassLoader)-->Line_9 $$ Iterator<URL> iterator = urls.iterator()[ FD ]
Line_16 $$ if (matcher.matches()) -->Line_17 $$ if (jarFiles.contains(matcher.replaceAll("$1$2"))) [ CD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_5 $$ jarFiles.remove(getXugglerJarFileName())[ CD ]
Line_28 $$ Callable<Boolean> callable = clazz.newInstance()-->Line_29 $$ return callable.call()[ FD ]
Line_11 $$ URL url = iterator.next()-->Line_14 $$ File file = new File(url.getPath())[ FD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_3 $$ Properties properties = PropsUtil.getProperties(PropsKeys.XUGGLER_JAR_FILE, false)[ CD ]
Line_10 $$ while (iterator.hasNext()) -->Line_11 $$ URL url = iterator.next()[ CD ]
Line_15 $$ Matcher matcher = _pattern.matcher(file.getName())-->Line_16 $$ if (matcher.matches()) [ FD ]
Line_13 $$ if (protocol.equals("file")) -->Line_15 $$ Matcher matcher = _pattern.matcher(file.getName())[ CD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_6 $$ Thread currentThread = Thread.currentThread()[ CD ]
Line_14 $$ File file = new File(url.getPath())-->Line_15 $$ Matcher matcher = _pattern.matcher(file.getName())[ FD ]
Line_8 $$ Set<URL> urls = ClassPathUtil.getClassPathURLs(contextClassLoader)-->Line_24 $$ URLClassLoader urlClassLoader = new URLClassLoader(urls.toArray(new URL[urls.size()]), null)[ FD ]
Line_6 $$ Thread currentThread = Thread.currentThread()-->Line_7 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()[ FD ]
Line_6 $$ Thread currentThread = Thread.currentThread()-->Line_33 $$ currentThread.setContextClassLoader(contextClassLoader)[ FD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_10 $$ while (iterator.hasNext()) [ CD ]
Line_7 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()-->Line_33 $$ currentThread.setContextClassLoader(contextClassLoader)[ FD ]
Line_9 $$ Iterator<URL> iterator = urls.iterator()-->Line_19 $$ iterator.remove()[ FD ]
Line_9 $$ Iterator<URL> iterator = urls.iterator()-->Line_11 $$ URL url = iterator.next()[ FD ]
Line_17 $$ if (jarFiles.contains(matcher.replaceAll("$1$2"))) -->Line_19 $$ iterator.remove()[ CD ]
Line_27 $$ Class<Callable<Boolean>> clazz = (Class<Callable<Boolean>>) urlClassLoader.loadClass(IsNativeLibraryInstalledCallable.class.getName())-->Line_28 $$ Callable<Boolean> callable = clazz.newInstance()[ FD ]
Line_24 $$ URLClassLoader urlClassLoader = new URLClassLoader(urls.toArray(new URL[urls.size()]), null)-->Line_25 $$ currentThread.setContextClassLoader(urlClassLoader)[ FD ]
Line_11 $$ URL url = iterator.next()-->Line_12 $$ String protocol = url.getProtocol()[ FD ]
Line_4 $$ Set<Object> jarFiles = SetUtil.fromCollection(properties.values())-->Line_5 $$ jarFiles.remove(getXugglerJarFileName())[ FD ]
Line_4 $$ Set<Object> jarFiles = SetUtil.fromCollection(properties.values())-->Line_17 $$ if (jarFiles.contains(matcher.replaceAll("$1$2"))) [ FD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_4 $$ Set<Object> jarFiles = SetUtil.fromCollection(properties.values())[ CD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_24 $$ URLClassLoader urlClassLoader = new URLClassLoader(urls.toArray(new URL[urls.size()]), null)[ CD ]
Line_9 $$ Iterator<URL> iterator = urls.iterator()-->Line_10 $$ while (iterator.hasNext()) [ FD ]
Line_2 $$ private static boolean isNativeLibraryInstalled() -->Line_25 $$ currentThread.setContextClassLoader(urlClassLoader)[ CD ]
Line_15 $$ Matcher matcher = _pattern.matcher(file.getName())-->Line_17 $$ if (jarFiles.contains(matcher.replaceAll("$1$2"))) [ FD ]
