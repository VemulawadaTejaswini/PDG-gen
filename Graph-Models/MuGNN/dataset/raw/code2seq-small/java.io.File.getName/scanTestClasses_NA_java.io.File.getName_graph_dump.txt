Line_4 $$ File folder = new File(url.getFile())-->Line_5 $$ File[] files = folder.listFiles(new FileFilter() [ FD ]
Line_11 $$ if (fileName.indexOf('$') != -1) -->Line_12 $$ return false[ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_23 $$ packageName = packageName.concat(".test.")[ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_21 $$ Package pkg = PACLAggregateTest.class.getPackage()[ CD ]
Line_3 $$ URL url = PACLAggregateTest.class.getResource("test")-->Line_4 $$ File folder = new File(url.getFile())[ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_5 $$ File[] files = folder.listFiles(new FileFilter() [ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_3 $$ URL url = PACLAggregateTest.class.getResource("test")[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_11 $$ if (fileName.indexOf('$') != -1) [ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_10 $$ String fileName = file.getName()[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_7 $$ if (!file.isFile()) [ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_4 $$ File folder = new File(url.getFile())[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_14 $$ return fileName.endsWith(".class")[ CD ]
Line_18 $$ if (isCIMode()) -->Line_19 $$ files = slice(files)[ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_22 $$ String packageName = pkg.getName()[ CD ]
Line_10 $$ String fileName = file.getName()-->Line_28 $$ classes.add(classLoader.loadClass(packageName.concat(fileName.substring(0, fileName.lastIndexOf('.')))))[ FD ]
Line_10 $$ String fileName = file.getName()-->Line_11 $$ if (fileName.indexOf('$') != -1) [ FD ]
Line_10 $$ String fileName = file.getName()-->Line_14 $$ return fileName.endsWith(".class")[ FD ]
Line_7 $$ if (!file.isFile()) -->Line_8 $$ return false[ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_17 $$ Arrays.sort(files)[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_17 $$ Arrays.sort(files)[ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_30 $$ return classes[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_10 $$ String fileName = file.getName()[ FD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_19 $$ files = slice(files)[ FD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_18 $$ if (isCIMode()) [ CD ]
Line_2 $$ protected List<Class<?>> scanTestClasses() throws ClassNotFoundException -->Line_24 $$ ClassLoader classLoader = PACLAggregateTest.class.getClassLoader()[ CD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_27 $$ String fileName = file.getName()[ FD ]
Line_5 $$ File[] files = folder.listFiles(new FileFilter() -->Line_7 $$ if (!file.isFile()) [ CD ]
