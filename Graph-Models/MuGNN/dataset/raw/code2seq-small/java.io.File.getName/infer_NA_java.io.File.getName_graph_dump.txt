Line_3 $$ if (outcome instanceof UnknownBuildOutcome) -->Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) [ CD ]
Line_7 $$ File file = new File(baseDir, archiveBuildOutcome.getRootRelativePath())-->Line_11 $$ if (file.exists()) [ FD ]
Line_10 $$ LocallyAvailableResource resource = null-->Line_13 $$ resource = fileStore.move(filestoreDestination, file)[ FD ]
Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) -->Line_15 $$ return new GeneratedArchiveBuildOutcome(outcome.getName(), outcome.getDescription(), resource, rootRelativePath)[ CD ]
Line_11 $$ if (file.exists()) -->Line_13 $$ resource = fileStore.move(filestoreDestination, file)[ CD ]
Line_2 $$ private BuildOutcome infer(BuildOutcome outcome) -->Line_17 $$ throw new IllegalStateException(String.format("Unhandled build outcome type: %s", outcome.getClass().getName()))[ FD ]
Line_2 $$ private BuildOutcome infer(BuildOutcome outcome) -->Line_3 $$ if (outcome instanceof UnknownBuildOutcome) [ FD ]
Line_11 $$ if (file.exists()) -->Line_12 $$ String filestoreDestination = String.format("%s/%s/%s", fileStorePrefix, taskPath, file.getName())[ CD ]
Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) -->Line_6 $$ GeneratedArchiveBuildOutcome archiveBuildOutcome = (GeneratedArchiveBuildOutcome) outcome[ CD ]
Line_9 $$ String taskPath = outcome.getName()-->Line_12 $$ String filestoreDestination = String.format("%s/%s/%s", fileStorePrefix, taskPath, file.getName())[ FD ]
Line_6 $$ GeneratedArchiveBuildOutcome archiveBuildOutcome = (GeneratedArchiveBuildOutcome) outcome-->Line_8 $$ String rootRelativePath = archiveBuildOutcome.getRootRelativePath()[ FD ]
Line_2 $$ private BuildOutcome infer(BuildOutcome outcome) -->Line_4 $$ return new UnknownBuildOutcome(outcome.getName(), outcome.getDescription())[ FD ]
Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) -->Line_7 $$ File file = new File(baseDir, archiveBuildOutcome.getRootRelativePath())[ CD ]
Line_6 $$ GeneratedArchiveBuildOutcome archiveBuildOutcome = (GeneratedArchiveBuildOutcome) outcome-->Line_7 $$ File file = new File(baseDir, archiveBuildOutcome.getRootRelativePath())[ FD ]
Line_7 $$ File file = new File(baseDir, archiveBuildOutcome.getRootRelativePath())-->Line_13 $$ resource = fileStore.move(filestoreDestination, file)[ FD ]
Line_12 $$ String filestoreDestination = String.format("%s/%s/%s", fileStorePrefix, taskPath, file.getName())-->Line_13 $$ resource = fileStore.move(filestoreDestination, file)[ FD ]
Line_3 $$ if (outcome instanceof UnknownBuildOutcome) -->Line_4 $$ return new UnknownBuildOutcome(outcome.getName(), outcome.getDescription())[ CD ]
Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) -->Line_8 $$ String rootRelativePath = archiveBuildOutcome.getRootRelativePath()[ CD ]
Line_2 $$ private BuildOutcome infer(BuildOutcome outcome) -->Line_15 $$ return new GeneratedArchiveBuildOutcome(outcome.getName(), outcome.getDescription(), resource, rootRelativePath)[ FD ]
Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) -->Line_9 $$ String taskPath = outcome.getName()[ CD ]
Line_2 $$ private BuildOutcome infer(BuildOutcome outcome) -->Line_3 $$ if (outcome instanceof UnknownBuildOutcome) [ CD ]
Line_2 $$ private BuildOutcome infer(BuildOutcome outcome) -->Line_9 $$ String taskPath = outcome.getName()[ FD ]
Line_7 $$ File file = new File(baseDir, archiveBuildOutcome.getRootRelativePath())-->Line_12 $$ String filestoreDestination = String.format("%s/%s/%s", fileStorePrefix, taskPath, file.getName())[ FD ]
Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) -->Line_10 $$ LocallyAvailableResource resource = null[ CD ]
Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) -->Line_11 $$ if (file.exists()) [ CD ]
Line_2 $$ private BuildOutcome infer(BuildOutcome outcome) -->Line_5 $$ if (outcome instanceof GeneratedArchiveBuildOutcome) [ FD ]
