Line_6 $$ LockDialog dialog = new LockDialog(project, true, ioFiles.length > 1)-->Line_10 $$ lockMessage = dialog.getComment()[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_50 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(command, SvnBundle.message("progress.title.lock.files"), false, project)[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_65 $$ StatusBarUtil.setStatusBarInfo(project, SvnBundle.message("message.text.files.locked", count[0]))[ CD ]
Line_31 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_33 $$ if (progress != null) [ FD ]
Line_11 $$ force = dialog.isForce()-->Line_14 $$ force = false[ FD ]
Line_6 $$ LockDialog dialog = new LockDialog(project, true, ioFiles.length > 1)-->Line_11 $$ force = dialog.isForce()[ FD ]
Line_33 $$ if (progress != null) -->Line_34 $$ progress.setText(SvnBundle.message("progress.text.locking.files"))[ CD ]
Line_3 $$ final String lockMessage-->Line_13 $$ lockMessage = ""[ FD ]
Line_3 $$ final String lockMessage-->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_31 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_41 $$ progress.setText2(SvnBundle.message("progress.text2.processing.file", ioFile.getName()))[ FD ]
Line_10 $$ lockMessage = dialog.getComment()-->Line_13 $$ lockMessage = ""[ FD ]
Line_36 $$ for (File ioFile : ioFiles) -->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_14 $$ force = false-->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_5 $$ if (activeVcs.getCheckoutOptions().getValue()) [ CD ]
Line_5 $$ if (activeVcs.getCheckoutOptions().getValue()) -->Line_14 $$ force = false[ CD ]
Line_17 $$ final Collection<String> failedLocks = new ArrayList<String>()-->Line_22 $$ failedLocks.add(event.getErrorMessage() != null ? event.getErrorMessage().getFullMessage() : event.getFile().getAbsolutePath())[ FD ]
Line_21 $$ if (event.getAction() == EventAction.LOCK_FAILED) -->Line_23 $$ count[0]--[ CD ]
Line_19 $$ final ProgressTracker eventHandler = new ProgressTracker() -->Line_21 $$ if (event.getAction() == EventAction.LOCK_FAILED) [ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_10 $$ lockMessage = dialog.getComment()-->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_37 $$ if (progress != null) -->Line_38 $$ progress.checkCanceled()[ CD ]
Line_5 $$ if (activeVcs.getCheckoutOptions().getValue()) -->Line_6 $$ LockDialog dialog = new LockDialog(project, true, ioFiles.length > 1)[ CD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_50 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(command, SvnBundle.message("progress.title.lock.files"), false, project)[ CD ]
Line_40 $$ if (progress != null) -->Line_41 $$ progress.setText2(SvnBundle.message("progress.text2.processing.file", ioFile.getName()))[ CD ]
Line_51 $$ if (!failedLocks.isEmpty()) -->Line_52 $$ String[] failedFiles = ArrayUtil.toStringArray(failedLocks)[ CD ]
Line_31 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_38 $$ progress.checkCanceled()[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_65 $$ StatusBarUtil.setStatusBarInfo(project, SvnBundle.message("message.text.files.locked", count[0]))[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_17 $$ final Collection<String> failedLocks = new ArrayList<String>()[ CD ]
Line_5 $$ if (activeVcs.getCheckoutOptions().getValue()) -->Line_11 $$ force = dialog.isForce()[ CD ]
Line_19 $$ final ProgressTracker eventHandler = new ProgressTracker() -->Line_21 $$ if (event.getAction() == EventAction.LOCK_FAILED) [ CD ]
Line_31 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_40 $$ if (progress != null) [ FD ]
Line_17 $$ final Collection<String> failedLocks = new ArrayList<String>()-->Line_51 $$ if (!failedLocks.isEmpty()) [ FD ]
Line_5 $$ if (activeVcs.getCheckoutOptions().getValue()) -->Line_10 $$ lockMessage = dialog.getComment()[ CD ]
Line_21 $$ if (event.getAction() == EventAction.LOCK_FAILED) -->Line_22 $$ failedLocks.add(event.getErrorMessage() != null ? event.getErrorMessage().getFullMessage() : event.getFile().getAbsolutePath())[ CD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_16 $$ final VcsException[] exception = new VcsException[1][ CD ]
Line_4 $$ final boolean force-->Line_11 $$ force = dialog.isForce()[ FD ]
Line_19 $$ final ProgressTracker eventHandler = new ProgressTracker() -->Line_22 $$ failedLocks.add(event.getErrorMessage() != null ? event.getErrorMessage().getFullMessage() : event.getFile().getAbsolutePath())[ FD ]
Line_59 $$ if (sb.length() > 0)-->Line_60 $$ sb.append('\n')[ CD ]
Line_11 $$ force = dialog.isForce()-->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_4 $$ final boolean force-->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_5 $$ if (activeVcs.getCheckoutOptions().getValue()) [ FD ]
Line_7 $$ if (!dialog.showAndGet()) -->Line_8 $$ return[ CD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_4 $$ final boolean force[ CD ]
Line_3 $$ final String lockMessage-->Line_10 $$ lockMessage = dialog.getComment()[ FD ]
Line_13 $$ lockMessage = ""-->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_36 $$ for (File ioFile : ioFiles) -->Line_41 $$ progress.setText2(SvnBundle.message("progress.text2.processing.file", ioFile.getName()))[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_3 $$ final String lockMessage[ CD ]
Line_5 $$ if (activeVcs.getCheckoutOptions().getValue()) -->Line_7 $$ if (!dialog.showAndGet()) [ CD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_51 $$ if (!failedLocks.isEmpty()) [ CD ]
Line_5 $$ if (activeVcs.getCheckoutOptions().getValue()) -->Line_13 $$ lockMessage = ""[ CD ]
Line_19 $$ final ProgressTracker eventHandler = new ProgressTracker() -->Line_43 $$ activeVcs.getFactory(ioFile).createLockClient().lock(ioFile, force, lockMessage, eventHandler)[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_66 $$ if (exception[0] != null) [ CD ]
Line_6 $$ LockDialog dialog = new LockDialog(project, true, ioFiles.length > 1)-->Line_7 $$ if (!dialog.showAndGet()) [ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_19 $$ final ProgressTracker eventHandler = new ProgressTracker() [ CD ]
Line_31 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_37 $$ if (progress != null) [ FD ]
Line_4 $$ final boolean force-->Line_14 $$ force = false[ FD ]
Line_31 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()-->Line_34 $$ progress.setText(SvnBundle.message("progress.text.locking.files"))[ FD ]
Line_29 $$ Runnable command = new Runnable() -->Line_31 $$ ProgressIndicator progress = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_17 $$ final Collection<String> failedLocks = new ArrayList<String>()-->Line_52 $$ String[] failedFiles = ArrayUtil.toStringArray(failedLocks)[ FD ]
Line_2 $$ public static void doLockFiles(Project project, final SvnVcs activeVcs, @NotNull final File[] ioFiles) throws VcsException -->Line_18 $$ final int[] count = new int[] [ CD ]
