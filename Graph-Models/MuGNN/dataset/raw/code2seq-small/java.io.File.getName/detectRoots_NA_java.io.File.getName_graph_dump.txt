Line_5 $$ final String name = child.getName()-->Line_6 $$ if (FileUtilRt.extensionEquals(name, "py")) [ FD ]
Line_4 $$ for (File child : children) -->Line_7 $$ LOG.info("Found Python file " + child.getPath())[ FD ]
Line_2 $$ public DirectoryProcessingResult detectRoots(@NotNull File dir, @NotNull File[] children, @NotNull File base, @NotNull List<DetectedProjectRoot> result) -->Line_15 $$ return DirectoryProcessingResult.PROCESS_CHILDREN[ CD ]
Line_2 $$ public DirectoryProcessingResult detectRoots(@NotNull File dir, @NotNull File[] children, @NotNull File base, @NotNull List<DetectedProjectRoot> result) -->Line_8 $$ result.add(new DetectedContentRoot(dir, "Python", PythonModuleTypeBase.getInstance(), WebModuleType.getInstance()))[ FD ]
Line_2 $$ public DirectoryProcessingResult detectRoots(@NotNull File dir, @NotNull File[] children, @NotNull File base, @NotNull List<DetectedProjectRoot> result) -->Line_3 $$ LOG.info("Detecting roots under " + dir)[ CD ]
Line_4 $$ for (File child : children) -->Line_5 $$ final String name = child.getName()[ FD ]
Line_11 $$ if ("node_modules".equals(name)) -->Line_12 $$ return DirectoryProcessingResult.SKIP_CHILDREN[ CD ]
Line_6 $$ if (FileUtilRt.extensionEquals(name, "py")) -->Line_7 $$ LOG.info("Found Python file " + child.getPath())[ CD ]
Line_5 $$ final String name = child.getName()-->Line_11 $$ if ("node_modules".equals(name)) [ FD ]
Line_6 $$ if (FileUtilRt.extensionEquals(name, "py")) -->Line_8 $$ result.add(new DetectedContentRoot(dir, "Python", PythonModuleTypeBase.getInstance(), WebModuleType.getInstance()))[ CD ]
Line_6 $$ if (FileUtilRt.extensionEquals(name, "py")) -->Line_9 $$ return DirectoryProcessingResult.SKIP_CHILDREN[ CD ]
