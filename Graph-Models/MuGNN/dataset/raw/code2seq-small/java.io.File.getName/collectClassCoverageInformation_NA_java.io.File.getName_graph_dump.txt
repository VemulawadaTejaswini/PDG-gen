Line_9 $$ final LineData lineData = (LineData) l-->Line_10 $$ if (lineData.getStatus() == LineCoverage.FULL) [ FD ]
Line_26 $$ if (covered != LineCoverage.NONE) -->Line_28 $$ touchedClass = true[ CD ]
Line_4 $$ final ClassData classData = projectInfo.getClassData(className)-->Line_6 $$ final Object[] lines = classData.getLines()[ FD ]
Line_10 $$ if (lineData.getStatus() == LineCoverage.FULL) -->Line_12 $$ if (lineData.getStatus() == LineCoverage.PARTIAL) [ CD ]
Line_25 $$ final int covered = classData.getStatus((String) nameAndSig)-->Line_26 $$ if (covered != LineCoverage.NONE) [ FD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_5 $$ if (classData != null && classData.getLines() != null) [ CD ]
Line_20 $$ final Collection methodSigs = classData.getMethodSigs()-->Line_32 $$ if (!methodSigs.isEmpty()) [ FD ]
Line_12 $$ if (lineData.getStatus() == LineCoverage.PARTIAL) -->Line_13 $$ toplevelClassCoverageInfo.partiallyCoveredLineCount++[ CD ]
Line_32 $$ if (!methodSigs.isEmpty()) -->Line_38 $$ packageCoverageInfo.coveredLineCount += toplevelClassCoverageInfo.partiallyCoveredLineCount[ CD ]
Line_26 $$ if (covered != LineCoverage.NONE) -->Line_27 $$ toplevelClassCoverageInfo.coveredMethodCount++[ CD ]
Line_5 $$ if (classData != null && classData.getLines() != null) -->Line_32 $$ if (!methodSigs.isEmpty()) [ CD ]
Line_8 $$ if (l instanceof LineData) -->Line_9 $$ final LineData lineData = (LineData) l[ CD ]
Line_4 $$ final ClassData classData = projectInfo.getClassData(className)-->Line_5 $$ if (classData != null && classData.getLines() != null) [ FD ]
Line_19 $$ boolean touchedClass = false-->Line_28 $$ touchedClass = true[ FD ]
Line_32 $$ if (!methodSigs.isEmpty()) -->Line_37 $$ packageCoverageInfo.coveredLineCount += toplevelClassCoverageInfo.fullyCoveredLineCount[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_52 $$ LOG.debug("Adding coverage of " + classFile.getName() + " to top-level class " + toplevelClassSrcFQName)[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_53 $$ classCoverageInfo.totalLineCount += toplevelClassCoverageInfo.totalLineCount[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_46 $$ if (!collectNonCoveredClassInfo(classFile, psiClass, toplevelClassCoverageInfo, packageCoverageInfo)) [ FD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_55 $$ classCoverageInfo.partiallyCoveredLineCount += toplevelClassCoverageInfo.partiallyCoveredLineCount[ CD ]
Line_5 $$ if (classData != null && classData.getLines() != null) -->Line_6 $$ final Object[] lines = classData.getLines()[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_22 $$ if (isGeneratedDefaultConstructor(psiClass, (String) nameAndSig)) [ FD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_4 $$ final ClassData classData = projectInfo.getClassData(className)[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_57 $$ classCoverageInfo.coveredMethodCount += toplevelClassCoverageInfo.coveredMethodCount[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_47 $$ LOG.debug("Did not collect non-covered class info for " + classFile.getName())[ FD ]
Line_58 $$ if (toplevelClassCoverageInfo.coveredMethodCount > 0) -->Line_59 $$ classCoverageInfo.coveredClassCount++[ CD ]
Line_32 $$ if (!methodSigs.isEmpty()) -->Line_33 $$ if (touchedClass) [ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_51 $$ ClassCoverageInfo classCoverageInfo = getOrCreateClassCoverageInfo(toplevelClassCoverage, toplevelClassSrcFQName)[ CD ]
Line_8 $$ if (l instanceof LineData) -->Line_16 $$ packageCoverageInfo.totalLineCount++[ CD ]
Line_3 $$ final ClassCoverageInfo toplevelClassCoverageInfo = new ClassCoverageInfo()-->Line_46 $$ if (!collectNonCoveredClassInfo(classFile, psiClass, toplevelClassCoverageInfo, packageCoverageInfo)) [ FD ]
Line_32 $$ if (!methodSigs.isEmpty()) -->Line_40 $$ packageCoverageInfo.totalMethodCount += toplevelClassCoverageInfo.totalMethodCount[ CD ]
Line_4 $$ final ClassData classData = projectInfo.getClassData(className)-->Line_20 $$ final Collection methodSigs = classData.getMethodSigs()[ FD ]
Line_32 $$ if (!methodSigs.isEmpty()) -->Line_43 $$ return[ CD ]
Line_10 $$ if (lineData.getStatus() == LineCoverage.FULL) -->Line_11 $$ toplevelClassCoverageInfo.fullyCoveredLineCount++[ CD ]
Line_32 $$ if (!methodSigs.isEmpty()) -->Line_39 $$ packageCoverageInfo.coveredMethodCount += toplevelClassCoverageInfo.coveredMethodCount[ CD ]
Line_4 $$ final ClassData classData = projectInfo.getClassData(className)-->Line_25 $$ final int covered = classData.getStatus((String) nameAndSig)[ FD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_58 $$ if (toplevelClassCoverageInfo.coveredMethodCount > 0) [ CD ]
Line_5 $$ if (classData != null && classData.getLines() != null) -->Line_19 $$ boolean touchedClass = false[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_52 $$ LOG.debug("Adding coverage of " + classFile.getName() + " to top-level class " + toplevelClassSrcFQName)[ FD ]
Line_32 $$ if (!methodSigs.isEmpty()) -->Line_36 $$ packageCoverageInfo.totalClassCount++[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_42 $$ LOG.debug("Did not find any method signatures in " + classFile.getName())[ FD ]
Line_46 $$ if (!collectNonCoveredClassInfo(classFile, psiClass, toplevelClassCoverageInfo, packageCoverageInfo)) -->Line_47 $$ LOG.debug("Did not collect non-covered class info for " + classFile.getName())[ CD ]
Line_32 $$ if (!methodSigs.isEmpty()) -->Line_42 $$ LOG.debug("Did not find any method signatures in " + classFile.getName())[ CD ]
Line_8 $$ if (l instanceof LineData) -->Line_15 $$ toplevelClassCoverageInfo.totalLineCount++[ CD ]
Line_9 $$ final LineData lineData = (LineData) l-->Line_12 $$ if (lineData.getStatus() == LineCoverage.PARTIAL) [ FD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_51 $$ ClassCoverageInfo classCoverageInfo = getOrCreateClassCoverageInfo(toplevelClassCoverage, toplevelClassSrcFQName)[ FD ]
Line_8 $$ if (l instanceof LineData) -->Line_10 $$ if (lineData.getStatus() == LineCoverage.FULL) [ CD ]
Line_5 $$ if (classData != null && classData.getLines() != null) -->Line_20 $$ final Collection methodSigs = classData.getMethodSigs()[ CD ]
Line_7 $$ for (Object l : lines) -->Line_8 $$ if (l instanceof LineData) [ FD ]
Line_33 $$ if (touchedClass) -->Line_34 $$ packageCoverageInfo.coveredClassCount++[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_4 $$ final ClassData classData = projectInfo.getClassData(className)[ FD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_3 $$ final ClassCoverageInfo toplevelClassCoverageInfo = new ClassCoverageInfo()[ CD ]
Line_5 $$ if (classData != null && classData.getLines() != null) -->Line_46 $$ if (!collectNonCoveredClassInfo(classFile, psiClass, toplevelClassCoverageInfo, packageCoverageInfo)) [ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_54 $$ classCoverageInfo.fullyCoveredLineCount += toplevelClassCoverageInfo.fullyCoveredLineCount[ CD ]
Line_2 $$ private void collectClassCoverageInformation(final File classFile, @Nullable final PsiClass psiClass, final PackageCoverageInfo packageCoverageInfo, final ProjectData projectInfo, final Map<String, ClassCoverageInfo> toplevelClassCoverage, final String className, final String toplevelClassSrcFQName) -->Line_56 $$ classCoverageInfo.totalMethodCount += toplevelClassCoverageInfo.totalMethodCount[ CD ]
Line_46 $$ if (!collectNonCoveredClassInfo(classFile, psiClass, toplevelClassCoverageInfo, packageCoverageInfo)) -->Line_48 $$ return[ CD ]
