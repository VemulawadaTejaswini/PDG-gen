Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)[ CD ]
Line_15 $$ hash += t.hash-->Line_28 $$ prop.setProperty(HASH_PROPERTY, Integer.toString(hash))[ FD ]
Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)-->Line_9 $$ scheduled.shutdown()[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_21 $$ if (dataDir.exists())[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_4 $$ System.out.format("\nUsing commit log size %dmb, compressor %s, sync %s%s\n", mb(DatabaseDescriptor.getCommitLogSegmentSize()), commitLog.compressor != null ? commitLog.compressor.getClass().getSimpleName() : "none", commitLog.executor.getClass().getSimpleName(), randomSize ? " random size" : "")[ CD ]
Line_13 $$ for (CommitlogExecutor t : threads) -->Line_14 $$ t.join()[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_7 $$ Thread.sleep(runTimeMs)[ CD ]
Line_19 $$ File dataDir = new File(CommitLogUpgradeTest.DATA_DIR + FBUtilities.getReleaseVersionString())-->Line_22 $$ FileUtils.deleteRecursive(dataDir)[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_30 $$ System.out.println("Done")[ CD ]
Line_3 $$ CommitLog commitLog = CommitLog.instance-->Line_18 $$ commitLog.shutdownBlocking()[ FD ]
Line_12 $$ int cells = 0-->Line_27 $$ prop.setProperty(CELLS_PROPERTY, Integer.toString(cells))[ FD ]
Line_5 $$ final List<CommitlogExecutor> threads = new ArrayList()-->Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)[ FD ]
Line_25 $$ Properties prop = new Properties()-->Line_26 $$ prop.setProperty(CFID_PROPERTY, Schema.instance.getId(KEYSPACE, TABLE).toString())[ FD ]
Line_21 $$ if (dataDir.exists())-->Line_22 $$ FileUtils.deleteRecursive(dataDir)[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_5 $$ final List<CommitlogExecutor> threads = new ArrayList()[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_20 $$ System.out.format("Data will be stored in %s\n", dataDir)[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_3 $$ CommitLog commitLog = CommitLog.instance[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_19 $$ File dataDir = new File(CommitLogUpgradeTest.DATA_DIR + FBUtilities.getReleaseVersionString())[ CD ]
Line_11 $$ int hash = 0-->Line_15 $$ hash += t.hash[ FD ]
Line_25 $$ Properties prop = new Properties()-->Line_27 $$ prop.setProperty(CELLS_PROPERTY, Integer.toString(cells))[ FD ]
Line_3 $$ CommitLog commitLog = CommitLog.instance-->Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)[ FD ]
Line_19 $$ File dataDir = new File(CommitLogUpgradeTest.DATA_DIR + FBUtilities.getReleaseVersionString())-->Line_23 $$ dataDir.mkdirs()[ FD ]
Line_19 $$ File dataDir = new File(CommitLogUpgradeTest.DATA_DIR + FBUtilities.getReleaseVersionString())-->Line_20 $$ System.out.format("Data will be stored in %s\n", dataDir)[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_23 $$ dataDir.mkdirs()[ CD ]
Line_12 $$ int cells = 0-->Line_16 $$ cells += t.cells[ FD ]
Line_19 $$ File dataDir = new File(CommitLogUpgradeTest.DATA_DIR + FBUtilities.getReleaseVersionString())-->Line_21 $$ if (dataDir.exists())[ FD ]
Line_25 $$ Properties prop = new Properties()-->Line_28 $$ prop.setProperty(HASH_PROPERTY, Integer.toString(hash))[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_26 $$ prop.setProperty(CFID_PROPERTY, Schema.instance.getId(KEYSPACE, TABLE).toString())[ CD ]
Line_25 $$ Properties prop = new Properties()-->Line_29 $$ prop.store(new FileOutputStream(new File(dataDir, PROPERTIES_FILE)), "CommitLog upgrade test, version " + FBUtilities.getReleaseVersionString())[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_9 $$ scheduled.shutdown()[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_10 $$ scheduled.awaitTermination(2, TimeUnit.SECONDS)[ CD ]
Line_11 $$ int hash = 0-->Line_28 $$ prop.setProperty(HASH_PROPERTY, Integer.toString(hash))[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_28 $$ prop.setProperty(HASH_PROPERTY, Integer.toString(hash))[ CD ]
Line_6 $$ ScheduledExecutorService scheduled = startThreads(commitLog, threads)-->Line_10 $$ scheduled.awaitTermination(2, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_12 $$ int cells = 0[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_18 $$ commitLog.shutdownBlocking()[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_27 $$ prop.setProperty(CELLS_PROPERTY, Integer.toString(cells))[ CD ]
Line_16 $$ cells += t.cells-->Line_27 $$ prop.setProperty(CELLS_PROPERTY, Integer.toString(cells))[ FD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_25 $$ Properties prop = new Properties()[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_29 $$ prop.store(new FileOutputStream(new File(dataDir, PROPERTIES_FILE)), "CommitLog upgrade test, version " + FBUtilities.getReleaseVersionString())[ CD ]
Line_2 $$ public void makeLog() throws IOException, InterruptedException -->Line_11 $$ int hash = 0[ CD ]
