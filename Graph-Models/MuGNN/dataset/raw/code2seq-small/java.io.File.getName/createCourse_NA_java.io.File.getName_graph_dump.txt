Line_5 $$ for (int i = 1; i <= lessons.size(); i++) -->Line_6 $$ Lesson lesson = lessons.get(i - 1)[ CD ]
Line_5 $$ for (int i = 1; i <= lessons.size(); i++) -->Line_7 $$ lesson.setIndex(i)[ CD ]
Line_2 $$ public static void createCourse(@NotNull final Course course, @NotNull final VirtualFile baseDir, @NotNull final File resourceRoot, @NotNull final Project project) -->Line_8 $$ createLesson(lesson, baseDir, resourceRoot, project)[ FD ]
Line_2 $$ public static void createCourse(@NotNull final Course course, @NotNull final VirtualFile baseDir, @NotNull final File resourceRoot, @NotNull final Project project) -->Line_17 $$ FileUtil.copy(file, new File(baseDir.getPath(), file.getName()))[ FD ]
Line_6 $$ Lesson lesson = lessons.get(i - 1)-->Line_7 $$ lesson.setIndex(i)[ FD ]
Line_6 $$ Lesson lesson = lessons.get(i - 1)-->Line_8 $$ createLesson(lesson, baseDir, resourceRoot, project)[ FD ]
Line_2 $$ public static void createCourse(@NotNull final Course course, @NotNull final VirtualFile baseDir, @NotNull final File resourceRoot, @NotNull final Project project) -->Line_10 $$ baseDir.createChildDirectory(project, EduNames.SANDBOX_DIR)[ FD ]
Line_2 $$ public static void createCourse(@NotNull final Course course, @NotNull final VirtualFile baseDir, @NotNull final File resourceRoot, @NotNull final Project project) -->Line_11 $$ File[] files = resourceRoot.listFiles(new FilenameFilter() [ FD ]
Line_4 $$ final List<Lesson> lessons = course.getLessons()-->Line_5 $$ for (int i = 1; i <= lessons.size(); i++) [ FD ]
Line_4 $$ final List<Lesson> lessons = course.getLessons()-->Line_6 $$ Lesson lesson = lessons.get(i - 1)[ FD ]
Line_11 $$ File[] files = resourceRoot.listFiles(new FilenameFilter() -->Line_13 $$ return !name.contains(EduNames.LESSON) && !name.equals(EduNames.COURSE_META_FILE) && !name.equals(EduNames.HINTS)[ FD ]
Line_5 $$ for (int i = 1; i <= lessons.size(); i++) -->Line_7 $$ lesson.setIndex(i)[ FD ]
Line_5 $$ for (int i = 1; i <= lessons.size(); i++) -->Line_8 $$ createLesson(lesson, baseDir, resourceRoot, project)[ CD ]
Line_11 $$ File[] files = resourceRoot.listFiles(new FilenameFilter() -->Line_13 $$ return !name.contains(EduNames.LESSON) && !name.equals(EduNames.COURSE_META_FILE) && !name.equals(EduNames.HINTS)[ CD ]
Line_2 $$ public static void createCourse(@NotNull final Course course, @NotNull final VirtualFile baseDir, @NotNull final File resourceRoot, @NotNull final Project project) -->Line_4 $$ final List<Lesson> lessons = course.getLessons()[ FD ]
