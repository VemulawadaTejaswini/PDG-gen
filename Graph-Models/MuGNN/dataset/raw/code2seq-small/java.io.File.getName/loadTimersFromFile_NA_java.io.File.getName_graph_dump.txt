Line_13 $$ if (marker.exists()) -->Line_14 $$ return timers[ CD ]
Line_12 $$ File marker = new File(file, MIGRATION_MARKER)-->Line_13 $$ if (marker.exists()) [ FD ]
Line_8 $$ if (!file.isDirectory()) -->Line_10 $$ return timers[ CD ]
Line_23 $$ in = new FileInputStream(timerFile)-->Line_41 $$ in.close()[ FD ]
Line_3 $$ final Map<String, TimerImpl> timers = new HashMap<String, TimerImpl>()-->Line_48 $$ if (!timers.isEmpty()) [ FD ]
Line_5 $$ final File file = new File(directory)-->Line_9 $$ ROOT_LOGGER.failToRestoreTimers(file)[ FD ]
Line_31 $$ builder = TimerImpl.builder()-->Line_33 $$ builder.setId(entity.getId()).setTimedObjectId(entity.getTimedObjectId()).setInitialDate(entity.getInitialDate()).setRepeatInterval(entity.getInterval()).setNextDate(entity.getNextDate()).setPreviousRun(entity.getPreviousRun()).setInfo(entity.getInfo()).setPrimaryKey(entity.getPrimaryKey()).setTimerState(entity.getTimerState()).setPersistent(true)[ FD ]
Line_25 $$ final TimerEntity entity = unmarshaller.readObject(TimerEntity.class)-->Line_33 $$ builder.setId(entity.getId()).setTimedObjectId(entity.getTimedObjectId()).setInitialDate(entity.getInitialDate()).setRepeatInterval(entity.getInterval()).setNextDate(entity.getNextDate()).setPreviousRun(entity.getPreviousRun()).setInfo(entity.getInfo()).setPrimaryKey(entity.getPrimaryKey()).setTimerState(entity.getTimerState()).setPersistent(true)[ FD ]
Line_28 $$ CalendarTimerEntity c = (CalendarTimerEntity) entity-->Line_29 $$ builder = CalendarTimer.builder().setScheduleExprSecond(c.getSecond()).setScheduleExprMinute(c.getMinute()).setScheduleExprHour(c.getHour()).setScheduleExprDayOfWeek(c.getDayOfWeek()).setScheduleExprDayOfMonth(c.getDayOfMonth()).setScheduleExprMonth(c.getMonth()).setScheduleExprYear(c.getYear()).setScheduleExprStartDate(c.getStartDate()).setScheduleExprEndDate(c.getEndDate()).setScheduleExprTimezone(c.getTimezone()).setAutoTimer(c.isAutoTimer()).setTimeoutMethod(CalendarTimer.getTimeoutMethod(c.getTimeoutMethod(), timerService.getTimedObjectInvoker().getValue().getClassLoader()))[ FD ]
Line_17 $$ for (File timerFile : file.listFiles()) -->Line_37 $$ ROOT_LOGGER.failToRestoreTimersFromFile(timerFile, e)[ FD ]
Line_5 $$ final File file = new File(directory)-->Line_8 $$ if (!file.isDirectory()) [ FD ]
Line_17 $$ for (File timerFile : file.listFiles()) -->Line_18 $$ if (timerFile.getName().endsWith(".xml")) [ FD ]
Line_2 $$ static Map<String, TimerImpl> loadTimersFromFile(final String timedObjectId, final TimerServiceImpl timerService, String directory, MarshallerFactory factory, MarshallingConfiguration configuration) -->Line_34 $$ timers.put(entity.getId(), builder.build(timerService))[ FD ]
Line_29 $$ builder = CalendarTimer.builder().setScheduleExprSecond(c.getSecond()).setScheduleExprMinute(c.getMinute()).setScheduleExprHour(c.getHour()).setScheduleExprDayOfWeek(c.getDayOfWeek()).setScheduleExprDayOfMonth(c.getDayOfMonth()).setScheduleExprMonth(c.getMonth()).setScheduleExprYear(c.getYear()).setScheduleExprStartDate(c.getStartDate()).setScheduleExprEndDate(c.getEndDate()).setScheduleExprTimezone(c.getTimezone()).setAutoTimer(c.isAutoTimer()).setTimeoutMethod(CalendarTimer.getTimeoutMethod(c.getTimeoutMethod(), timerService.getTimedObjectInvoker().getValue().getClassLoader()))-->Line_34 $$ timers.put(entity.getId(), builder.build(timerService))[ FD ]
Line_2 $$ static Map<String, TimerImpl> loadTimersFromFile(final String timedObjectId, final TimerServiceImpl timerService, String directory, MarshallerFactory factory, MarshallingConfiguration configuration) -->Line_57 $$ ROOT_LOGGER.failToRestoreTimersForObjectId(timedObjectId, e)[ FD ]
Line_2 $$ static Map<String, TimerImpl> loadTimersFromFile(final String timedObjectId, final TimerServiceImpl timerService, String directory, MarshallerFactory factory, MarshallingConfiguration configuration) -->Line_16 $$ Unmarshaller unmarshaller = factory.createUnmarshaller(configuration)[ FD ]
Line_2 $$ static Map<String, TimerImpl> loadTimersFromFile(final String timedObjectId, final TimerServiceImpl timerService, String directory, MarshallerFactory factory, MarshallingConfiguration configuration) -->Line_29 $$ builder = CalendarTimer.builder().setScheduleExprSecond(c.getSecond()).setScheduleExprMinute(c.getMinute()).setScheduleExprHour(c.getHour()).setScheduleExprDayOfWeek(c.getDayOfWeek()).setScheduleExprDayOfMonth(c.getDayOfMonth()).setScheduleExprMonth(c.getMonth()).setScheduleExprYear(c.getYear()).setScheduleExprStartDate(c.getStartDate()).setScheduleExprEndDate(c.getEndDate()).setScheduleExprTimezone(c.getTimezone()).setAutoTimer(c.isAutoTimer()).setTimeoutMethod(CalendarTimer.getTimeoutMethod(c.getTimeoutMethod(), timerService.getTimedObjectInvoker().getValue().getClassLoader()))[ FD ]
Line_21 $$ FileInputStream in = null-->Line_23 $$ in = new FileInputStream(timerFile)[ FD ]
Line_16 $$ Unmarshaller unmarshaller = factory.createUnmarshaller(configuration)-->Line_35 $$ unmarshaller.finish()[ FD ]
Line_21 $$ FileInputStream in = null-->Line_39 $$ if (in != null) [ FD ]
Line_21 $$ FileInputStream in = null-->Line_41 $$ in.close()[ FD ]
Line_27 $$ if (entity instanceof CalendarTimerEntity) -->Line_28 $$ CalendarTimerEntity c = (CalendarTimerEntity) entity[ CD ]
Line_29 $$ builder = CalendarTimer.builder().setScheduleExprSecond(c.getSecond()).setScheduleExprMinute(c.getMinute()).setScheduleExprHour(c.getHour()).setScheduleExprDayOfWeek(c.getDayOfWeek()).setScheduleExprDayOfMonth(c.getDayOfMonth()).setScheduleExprMonth(c.getMonth()).setScheduleExprYear(c.getYear()).setScheduleExprStartDate(c.getStartDate()).setScheduleExprEndDate(c.getEndDate()).setScheduleExprTimezone(c.getTimezone()).setAutoTimer(c.isAutoTimer()).setTimeoutMethod(CalendarTimer.getTimeoutMethod(c.getTimeoutMethod(), timerService.getTimedObjectInvoker().getValue().getClassLoader()))-->Line_33 $$ builder.setId(entity.getId()).setTimedObjectId(entity.getTimedObjectId()).setInitialDate(entity.getInitialDate()).setRepeatInterval(entity.getInterval()).setNextDate(entity.getNextDate()).setPreviousRun(entity.getPreviousRun()).setInfo(entity.getInfo()).setPrimaryKey(entity.getPrimaryKey()).setTimerState(entity.getTimerState()).setPersistent(true)[ FD ]
Line_2 $$ static Map<String, TimerImpl> loadTimersFromFile(final String timedObjectId, final TimerServiceImpl timerService, String directory, MarshallerFactory factory, MarshallingConfiguration configuration) -->Line_3 $$ final Map<String, TimerImpl> timers = new HashMap<String, TimerImpl>()[ CD ]
Line_25 $$ final TimerEntity entity = unmarshaller.readObject(TimerEntity.class)-->Line_34 $$ timers.put(entity.getId(), builder.build(timerService))[ FD ]
Line_6 $$ if (!file.exists()) -->Line_8 $$ if (!file.isDirectory()) [ CD ]
Line_5 $$ final File file = new File(directory)-->Line_17 $$ for (File timerFile : file.listFiles()) [ FD ]
Line_26 $$ TimerImpl.Builder builder-->Line_33 $$ builder.setId(entity.getId()).setTimedObjectId(entity.getTimedObjectId()).setInitialDate(entity.getInitialDate()).setRepeatInterval(entity.getInterval()).setNextDate(entity.getNextDate()).setPreviousRun(entity.getPreviousRun()).setInfo(entity.getInfo()).setPrimaryKey(entity.getPrimaryKey()).setTimerState(entity.getTimerState()).setPersistent(true)[ FD ]
Line_6 $$ if (!file.exists()) -->Line_7 $$ return timers[ CD ]
Line_2 $$ static Map<String, TimerImpl> loadTimersFromFile(final String timedObjectId, final TimerServiceImpl timerService, String directory, MarshallerFactory factory, MarshallingConfiguration configuration) -->Line_59 $$ return timers[ CD ]
Line_5 $$ final File file = new File(directory)-->Line_6 $$ if (!file.exists()) [ FD ]
Line_49 $$ FileOutputStream out = new FileOutputStream(marker)-->Line_51 $$ out.write(new Date().toString().getBytes())[ FD ]
Line_3 $$ final Map<String, TimerImpl> timers = new HashMap<String, TimerImpl>()-->Line_34 $$ timers.put(entity.getId(), builder.build(timerService))[ FD ]
Line_29 $$ builder = CalendarTimer.builder().setScheduleExprSecond(c.getSecond()).setScheduleExprMinute(c.getMinute()).setScheduleExprHour(c.getHour()).setScheduleExprDayOfWeek(c.getDayOfWeek()).setScheduleExprDayOfMonth(c.getDayOfMonth()).setScheduleExprMonth(c.getMonth()).setScheduleExprYear(c.getYear()).setScheduleExprStartDate(c.getStartDate()).setScheduleExprEndDate(c.getEndDate()).setScheduleExprTimezone(c.getTimezone()).setAutoTimer(c.isAutoTimer()).setTimeoutMethod(CalendarTimer.getTimeoutMethod(c.getTimeoutMethod(), timerService.getTimedObjectInvoker().getValue().getClassLoader()))-->Line_31 $$ builder = TimerImpl.builder()[ FD ]
Line_26 $$ TimerImpl.Builder builder-->Line_29 $$ builder = CalendarTimer.builder().setScheduleExprSecond(c.getSecond()).setScheduleExprMinute(c.getMinute()).setScheduleExprHour(c.getHour()).setScheduleExprDayOfWeek(c.getDayOfWeek()).setScheduleExprDayOfMonth(c.getDayOfMonth()).setScheduleExprMonth(c.getMonth()).setScheduleExprYear(c.getYear()).setScheduleExprStartDate(c.getStartDate()).setScheduleExprEndDate(c.getEndDate()).setScheduleExprTimezone(c.getTimezone()).setAutoTimer(c.isAutoTimer()).setTimeoutMethod(CalendarTimer.getTimeoutMethod(c.getTimeoutMethod(), timerService.getTimedObjectInvoker().getValue().getClassLoader()))[ FD ]
Line_26 $$ TimerImpl.Builder builder-->Line_31 $$ builder = TimerImpl.builder()[ FD ]
Line_16 $$ Unmarshaller unmarshaller = factory.createUnmarshaller(configuration)-->Line_25 $$ final TimerEntity entity = unmarshaller.readObject(TimerEntity.class)[ FD ]
Line_23 $$ in = new FileInputStream(timerFile)-->Line_39 $$ if (in != null) [ FD ]
Line_48 $$ if (!timers.isEmpty()) -->Line_49 $$ FileOutputStream out = new FileOutputStream(marker)[ CD ]
Line_27 $$ if (entity instanceof CalendarTimerEntity) -->Line_29 $$ builder = CalendarTimer.builder().setScheduleExprSecond(c.getSecond()).setScheduleExprMinute(c.getMinute()).setScheduleExprHour(c.getHour()).setScheduleExprDayOfWeek(c.getDayOfWeek()).setScheduleExprDayOfMonth(c.getDayOfMonth()).setScheduleExprMonth(c.getMonth()).setScheduleExprYear(c.getYear()).setScheduleExprStartDate(c.getStartDate()).setScheduleExprEndDate(c.getEndDate()).setScheduleExprTimezone(c.getTimezone()).setAutoTimer(c.isAutoTimer()).setTimeoutMethod(CalendarTimer.getTimeoutMethod(c.getTimeoutMethod(), timerService.getTimedObjectInvoker().getValue().getClassLoader()))[ CD ]
Line_27 $$ if (entity instanceof CalendarTimerEntity) -->Line_31 $$ builder = TimerImpl.builder()[ CD ]
Line_31 $$ builder = TimerImpl.builder()-->Line_34 $$ timers.put(entity.getId(), builder.build(timerService))[ FD ]
Line_16 $$ Unmarshaller unmarshaller = factory.createUnmarshaller(configuration)-->Line_24 $$ unmarshaller.start(new InputStreamByteInput(in))[ FD ]
Line_49 $$ FileOutputStream out = new FileOutputStream(marker)-->Line_53 $$ out.close()[ FD ]
Line_26 $$ TimerImpl.Builder builder-->Line_34 $$ timers.put(entity.getId(), builder.build(timerService))[ FD ]
Line_8 $$ if (!file.isDirectory()) -->Line_9 $$ ROOT_LOGGER.failToRestoreTimers(file)[ CD ]
Line_25 $$ final TimerEntity entity = unmarshaller.readObject(TimerEntity.class)-->Line_27 $$ if (entity instanceof CalendarTimerEntity) [ FD ]
