Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_13 $$ op.get("name").set(snapshotFile.getName())[ CD ]
Line_12 $$ op = ModelUtil.createOpNode(null, "delete-snapshot")-->Line_14 $$ executeOperation(client, op)[ FD ]
Line_3 $$ DomainClient client = domainMasterLifecycleUtil.getDomainClient()-->Line_5 $$ ModelNode result = executeOperation(client, op)[ FD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_10 $$ long lastHash = FileUtils.checksumCRC32(domainLastCfgFile)[ CD ]
Line_3 $$ DomainClient client = domainMasterLifecycleUtil.getDomainClient()-->Line_14 $$ executeOperation(client, op)[ FD ]
Line_7 $$ File snapshotFile = new File(snapshotFileName)-->Line_13 $$ op.get("name").set(snapshotFile.getName())[ FD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_5 $$ ModelNode result = executeOperation(client, op)[ CD ]
Line_7 $$ File snapshotFile = new File(snapshotFileName)-->Line_15 $$ Assert.assertFalse("Snapshot file still exists.", snapshotFile.exists())[ FD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_11 $$ Assert.assertTrue(snapshotHash == lastHash)[ CD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_7 $$ File snapshotFile = new File(snapshotFileName)[ CD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_6 $$ String snapshotFileName = result.asString()[ CD ]
Line_4 $$ ModelNode op = ModelUtil.createOpNode(null, "take-snapshot")-->Line_5 $$ ModelNode result = executeOperation(client, op)[ FD ]
Line_7 $$ File snapshotFile = new File(snapshotFileName)-->Line_9 $$ long snapshotHash = FileUtils.checksumCRC32(snapshotFile)[ FD ]
Line_4 $$ ModelNode op = ModelUtil.createOpNode(null, "take-snapshot")-->Line_13 $$ op.get("name").set(snapshotFile.getName())[ FD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_4 $$ ModelNode op = ModelUtil.createOpNode(null, "take-snapshot")[ CD ]
Line_5 $$ ModelNode result = executeOperation(client, op)-->Line_6 $$ String snapshotFileName = result.asString()[ FD ]
Line_12 $$ op = ModelUtil.createOpNode(null, "delete-snapshot")-->Line_13 $$ op.get("name").set(snapshotFile.getName())[ FD ]
Line_7 $$ File snapshotFile = new File(snapshotFileName)-->Line_8 $$ Assert.assertTrue(snapshotFile.exists())[ FD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_3 $$ DomainClient client = domainMasterLifecycleUtil.getDomainClient()[ CD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_8 $$ Assert.assertTrue(snapshotFile.exists())[ CD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_15 $$ Assert.assertFalse("Snapshot file still exists.", snapshotFile.exists())[ CD ]
Line_4 $$ ModelNode op = ModelUtil.createOpNode(null, "take-snapshot")-->Line_14 $$ executeOperation(client, op)[ FD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_14 $$ executeOperation(client, op)[ CD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_12 $$ op = ModelUtil.createOpNode(null, "delete-snapshot")[ CD ]
Line_4 $$ ModelNode op = ModelUtil.createOpNode(null, "take-snapshot")-->Line_12 $$ op = ModelUtil.createOpNode(null, "delete-snapshot")[ FD ]
Line_2 $$ public void testTakeAndDeleteSnapshot() throws Exception -->Line_9 $$ long snapshotHash = FileUtils.checksumCRC32(snapshotFile)[ CD ]
