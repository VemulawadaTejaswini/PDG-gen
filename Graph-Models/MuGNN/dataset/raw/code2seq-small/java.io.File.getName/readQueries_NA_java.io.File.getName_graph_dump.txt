Line_11 $$ if (fileName.endsWith(".sql")) -->Line_12 $$ queries.add(new BenchmarkQuery(file))[ CD ]
Line_10 $$ String fileName = file.getName()-->Line_11 $$ if (fileName.endsWith(".sql")) [ FD ]
Line_2 $$ private static List<BenchmarkQuery> readQueries(File queriesDir) throws IOException -->Line_3 $$ File[] files = queriesDir.listFiles()[ CD ]
Line_3 $$ File[] files = queriesDir.listFiles()-->Line_4 $$ if (files == null) [ FD ]
Line_2 $$ private static List<BenchmarkQuery> readQueries(File queriesDir) throws IOException -->Line_7 $$ Arrays.sort(files)[ CD ]
Line_3 $$ File[] files = queriesDir.listFiles()-->Line_7 $$ Arrays.sort(files)[ FD ]
Line_9 $$ for (File file : files) -->Line_10 $$ String fileName = file.getName()[ FD ]
Line_2 $$ private static List<BenchmarkQuery> readQueries(File queriesDir) throws IOException -->Line_4 $$ if (files == null) [ CD ]
Line_4 $$ if (files == null) -->Line_5 $$ return ImmutableList.of()[ CD ]
Line_2 $$ private static List<BenchmarkQuery> readQueries(File queriesDir) throws IOException -->Line_8 $$ ImmutableList.Builder<BenchmarkQuery> queries = ImmutableList.builder()[ CD ]
Line_2 $$ private static List<BenchmarkQuery> readQueries(File queriesDir) throws IOException -->Line_15 $$ return queries.build()[ CD ]
Line_2 $$ private static List<BenchmarkQuery> readQueries(File queriesDir) throws IOException -->Line_3 $$ File[] files = queriesDir.listFiles()[ FD ]
Line_8 $$ ImmutableList.Builder<BenchmarkQuery> queries = ImmutableList.builder()-->Line_15 $$ return queries.build()[ FD ]
Line_8 $$ ImmutableList.Builder<BenchmarkQuery> queries = ImmutableList.builder()-->Line_12 $$ queries.add(new BenchmarkQuery(file))[ FD ]
