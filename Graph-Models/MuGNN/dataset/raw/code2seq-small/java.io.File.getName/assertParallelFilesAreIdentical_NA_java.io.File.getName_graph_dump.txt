Line_17 $$ for (List<File> sameNameList : groupedByName.values()) -->Line_19 $$ assertParallelFilesAreIdentical(sameNameList, ignoredFileNames)[ FD ]
Line_10 $$ if (fileList == null) -->Line_12 $$ groupedByName.put(f.getName(), fileList)[ CD ]
Line_3 $$ HashMap<String, List<File>> groupedByName = new HashMap<String, List<File>>()-->Line_17 $$ for (List<File> sameNameList : groupedByName.values()) [ FD ]
Line_3 $$ HashMap<String, List<File>> groupedByName = new HashMap<String, List<File>>()-->Line_9 $$ List<File> fileList = groupedByName.get(f.getName())[ FD ]
Line_5 $$ for (File f : dir.listFiles()) -->Line_12 $$ groupedByName.put(f.getName(), fileList)[ FD ]
Line_21 $$ if ("VERSION".equals(sameNameList.get(0).getName())) -->Line_24 $$ assertFileContentsSame(sameNameList.toArray(new File[0]))[ CD ]
Line_4 $$ for (File dir : dirs) -->Line_5 $$ for (File f : dir.listFiles()) [ FD ]
Line_18 $$ if (sameNameList.get(0).isDirectory()) -->Line_21 $$ if ("VERSION".equals(sameNameList.get(0).getName())) [ CD ]
Line_5 $$ for (File f : dir.listFiles()) -->Line_14 $$ fileList.add(f)[ FD ]
Line_2 $$ public static void assertParallelFilesAreIdentical(List<File> dirs, Set<String> ignoredFileNames) throws Exception -->Line_19 $$ assertParallelFilesAreIdentical(sameNameList, ignoredFileNames)[ FD ]
Line_9 $$ List<File> fileList = groupedByName.get(f.getName())-->Line_10 $$ if (fileList == null) [ FD ]
Line_9 $$ List<File> fileList = groupedByName.get(f.getName())-->Line_11 $$ fileList = new ArrayList<File>()[ FD ]
Line_9 $$ List<File> fileList = groupedByName.get(f.getName())-->Line_14 $$ fileList.add(f)[ FD ]
Line_17 $$ for (List<File> sameNameList : groupedByName.values()) -->Line_18 $$ if (sameNameList.get(0).isDirectory()) [ FD ]
Line_5 $$ for (File f : dir.listFiles()) -->Line_6 $$ if (ignoredFileNames.contains(f.getName())) [ FD ]
Line_17 $$ for (List<File> sameNameList : groupedByName.values()) -->Line_21 $$ if ("VERSION".equals(sameNameList.get(0).getName())) [ FD ]
Line_2 $$ public static void assertParallelFilesAreIdentical(List<File> dirs, Set<String> ignoredFileNames) throws Exception -->Line_6 $$ if (ignoredFileNames.contains(f.getName())) [ FD ]
Line_21 $$ if ("VERSION".equals(sameNameList.get(0).getName())) -->Line_22 $$ assertPropertiesFilesSame(sameNameList.toArray(new File[0]))[ CD ]
Line_11 $$ fileList = new ArrayList<File>()-->Line_14 $$ fileList.add(f)[ FD ]
Line_5 $$ for (File f : dir.listFiles()) -->Line_9 $$ List<File> fileList = groupedByName.get(f.getName())[ FD ]
Line_18 $$ if (sameNameList.get(0).isDirectory()) -->Line_19 $$ assertParallelFilesAreIdentical(sameNameList, ignoredFileNames)[ CD ]
Line_2 $$ public static void assertParallelFilesAreIdentical(List<File> dirs, Set<String> ignoredFileNames) throws Exception -->Line_3 $$ HashMap<String, List<File>> groupedByName = new HashMap<String, List<File>>()[ CD ]
Line_3 $$ HashMap<String, List<File>> groupedByName = new HashMap<String, List<File>>()-->Line_12 $$ groupedByName.put(f.getName(), fileList)[ FD ]
Line_17 $$ for (List<File> sameNameList : groupedByName.values()) -->Line_22 $$ assertPropertiesFilesSame(sameNameList.toArray(new File[0]))[ FD ]
Line_9 $$ List<File> fileList = groupedByName.get(f.getName())-->Line_12 $$ groupedByName.put(f.getName(), fileList)[ FD ]
Line_10 $$ if (fileList == null) -->Line_11 $$ fileList = new ArrayList<File>()[ CD ]
Line_11 $$ fileList = new ArrayList<File>()-->Line_12 $$ groupedByName.put(f.getName(), fileList)[ FD ]
Line_17 $$ for (List<File> sameNameList : groupedByName.values()) -->Line_24 $$ assertFileContentsSame(sameNameList.toArray(new File[0]))[ FD ]
