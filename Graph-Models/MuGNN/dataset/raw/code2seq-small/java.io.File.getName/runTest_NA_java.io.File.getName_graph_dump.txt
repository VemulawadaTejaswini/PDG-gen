Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) -->Line_9 $$ input.add(content.substring(0, separatorIndex))[ CD ]
Line_7 $$ content = StringUtil.replace(content, "\r", "")-->Line_11 $$ content = content.substring(1)[ FD ]
Line_7 $$ content = StringUtil.replace(content, "\r", "")-->Line_10 $$ content = content.substring(separatorIndex)[ FD ]
Line_20 $$ String testName = myTestFile.getName()-->Line_25 $$ transformed = StringUtil.replace(transform(testName, ArrayUtil.toStringArray(input)), "\r", "")[ FD ]
Line_23 $$ testName = testName.substring(0, dotIdx)-->Line_25 $$ transformed = StringUtil.replace(transform(testName, ArrayUtil.toStringArray(input)), "\r", "")[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_18 $$ final String transformed[ CD ]
Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) -->Line_10 $$ content = content.substring(separatorIndex)[ FD ]
Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) -->Line_11 $$ while (StringUtil.startsWithChar(content, '-') || StringUtil.startsWithChar(content, '\n')) content = content.substring(1)[ CD ]
Line_20 $$ String testName = myTestFile.getName()-->Line_23 $$ testName = testName.substring(0, dotIdx)[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_25 $$ transformed = StringUtil.replace(transform(testName, ArrayUtil.toStringArray(input)), "\r", "")[ CD ]
Line_13 $$ String result = content-->Line_15 $$ while (StringUtil.startsWithChar(result, '-') || StringUtil.startsWithChar(result, '\n') || StringUtil.startsWithChar(result, '\r')) [ FD ]
Line_7 $$ content = StringUtil.replace(content, "\r", "")-->Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) [ FD ]
Line_7 $$ content = StringUtil.replace(content, "\r", "")-->Line_11 $$ while (StringUtil.startsWithChar(content, '-') || StringUtil.startsWithChar(content, '\n')) content = content.substring(1)[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_27 $$ assertEquals(result.trim(), transformed.trim())[ CD ]
Line_10 $$ content = content.substring(separatorIndex)-->Line_11 $$ while (StringUtil.startsWithChar(content, '-') || StringUtil.startsWithChar(content, '\n')) content = content.substring(1)[ FD ]
Line_13 $$ String result = content-->Line_27 $$ assertEquals(result.trim(), transformed.trim())[ FD ]
Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) -->Line_10 $$ content = content.substring(separatorIndex)[ CD ]
Line_22 $$ if (dotIdx >= 0) -->Line_23 $$ testName = testName.substring(0, dotIdx)[ CD ]
Line_25 $$ transformed = StringUtil.replace(transform(testName, ArrayUtil.toStringArray(input)), "\r", "")-->Line_27 $$ assertEquals(result.trim(), transformed.trim())[ FD ]
Line_18 $$ final String transformed-->Line_25 $$ transformed = StringUtil.replace(transform(testName, ArrayUtil.toStringArray(input)), "\r", "")[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_13 $$ String result = content[ CD ]
Line_10 $$ content = content.substring(separatorIndex)-->Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) [ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_21 $$ final int dotIdx = testName.indexOf('.')[ CD ]
Line_3 $$ String content = loadFile(myTestFile)-->Line_7 $$ content = StringUtil.replace(content, "\r", "")[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_15 $$ while (StringUtil.startsWithChar(result, '-') || StringUtil.startsWithChar(result, '\n') || StringUtil.startsWithChar(result, '\r')) [ CD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_26 $$ result = StringUtil.replace(result, "\r", "")[ CD ]
Line_3 $$ String content = loadFile(myTestFile)-->Line_11 $$ content = content.substring(1)[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_22 $$ if (dotIdx >= 0) [ CD ]
Line_26 $$ result = StringUtil.replace(result, "\r", "")-->Line_27 $$ assertEquals(result.trim(), transformed.trim())[ FD ]
Line_5 $$ List<String> input = new ArrayList<String>()-->Line_25 $$ transformed = StringUtil.replace(transform(testName, ArrayUtil.toStringArray(input)), "\r", "")[ FD ]
Line_10 $$ content = content.substring(separatorIndex)-->Line_9 $$ input.add(content.substring(0, separatorIndex))[ FD ]
Line_7 $$ content = StringUtil.replace(content, "\r", "")-->Line_9 $$ input.add(content.substring(0, separatorIndex))[ FD ]
Line_3 $$ String content = loadFile(myTestFile)-->Line_10 $$ content = content.substring(separatorIndex)[ FD ]
Line_5 $$ List<String> input = new ArrayList<String>()-->Line_14 $$ assertTrue("No data found in source file", input.size() > 0)[ FD ]
Line_16 $$ result = result.substring(1)-->Line_26 $$ result = StringUtil.replace(result, "\r", "")[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_19 $$ FileSetTestCase.this.myProject = getProject()[ CD ]
Line_16 $$ result = result.substring(1)-->Line_27 $$ assertEquals(result.trim(), transformed.trim())[ FD ]
Line_5 $$ List<String> input = new ArrayList<String>()-->Line_9 $$ input.add(content.substring(0, separatorIndex))[ FD ]
Line_13 $$ String result = content-->Line_26 $$ result = StringUtil.replace(result, "\r", "")[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_6 $$ int separatorIndex[ CD ]
Line_16 $$ result = result.substring(1)-->Line_15 $$ while (StringUtil.startsWithChar(result, '-') || StringUtil.startsWithChar(result, '\n') || StringUtil.startsWithChar(result, '\r')) [ FD ]
Line_21 $$ final int dotIdx = testName.indexOf('.')-->Line_22 $$ if (dotIdx >= 0) [ FD ]
Line_3 $$ String content = loadFile(myTestFile)-->Line_9 $$ input.add(content.substring(0, separatorIndex))[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_5 $$ List<String> input = new ArrayList<String>()[ CD ]
Line_3 $$ String content = loadFile(myTestFile)-->Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) [ FD ]
Line_10 $$ content = content.substring(separatorIndex)-->Line_11 $$ content = content.substring(1)[ FD ]
Line_13 $$ String result = content-->Line_16 $$ result = result.substring(1)[ FD ]
Line_18 $$ final String transformed-->Line_27 $$ assertEquals(result.trim(), transformed.trim())[ FD ]
Line_3 $$ String content = loadFile(myTestFile)-->Line_11 $$ while (StringUtil.startsWithChar(content, '-') || StringUtil.startsWithChar(content, '\n')) content = content.substring(1)[ FD ]
Line_20 $$ String testName = myTestFile.getName()-->Line_21 $$ final int dotIdx = testName.indexOf('.')[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_7 $$ content = StringUtil.replace(content, "\r", "")[ CD ]
Line_6 $$ int separatorIndex-->Line_10 $$ content = content.substring(separatorIndex)[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_20 $$ String testName = myTestFile.getName()[ CD ]
Line_3 $$ String content = loadFile(myTestFile)-->Line_4 $$ assertNotNull(content)[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_4 $$ assertNotNull(content)[ CD ]
Line_21 $$ final int dotIdx = testName.indexOf('.')-->Line_23 $$ testName = testName.substring(0, dotIdx)[ FD ]
Line_15 $$ while (StringUtil.startsWithChar(result, '-') || StringUtil.startsWithChar(result, '\n') || StringUtil.startsWithChar(result, '\r')) -->Line_16 $$ result = result.substring(1)[ CD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_14 $$ assertTrue("No data found in source file", input.size() > 0)[ CD ]
Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) -->Line_9 $$ input.add(content.substring(0, separatorIndex))[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) [ CD ]
Line_6 $$ int separatorIndex-->Line_8 $$ while ((separatorIndex = content.indexOf(getDelimiter())) >= 0) [ FD ]
Line_6 $$ int separatorIndex-->Line_9 $$ input.add(content.substring(0, separatorIndex))[ FD ]
Line_2 $$ protected void runTest() throws Throwable -->Line_3 $$ String content = loadFile(myTestFile)[ CD ]
