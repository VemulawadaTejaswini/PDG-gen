Line_9 $$ if (files != null) -->Line_10 $$ for (int i = files.length - 1; i >= 0; i--) [ CD ]
Line_32 $$ ContextUnit unit = units.get(path)-->Line_53 $$ unit.addOtherEntry(file.getAbsolutePath(), filename)[ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_33 $$ if (unit == null) [ CD ]
Line_16 $$ boolean isArchive = false-->Line_22 $$ isArchive = true[ FD ]
Line_21 $$ if (filename.endsWith(".zip")) -->Line_23 $$ addArchive(path, file, ContextUnit.TYPE_ZIP, isOwn)[ CD ]
Line_41 $$ StructClass cl = new StructClass(in, isOwn, loader)-->Line_42 $$ classes.put(cl.qualifiedName, cl)[ FD ]
Line_18 $$ if (filename.endsWith(".jar")) -->Line_20 $$ addArchive(path, file, ContextUnit.TYPE_JAR, isOwn)[ CD ]
Line_26 $$ String message = "Corrupted archive file: " + file-->Line_27 $$ DecompilerContext.getLogger().writeMessage(message, ex)[ FD ]
Line_21 $$ if (filename.endsWith(".zip")) -->Line_22 $$ isArchive = true[ CD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_7 $$ path += "/" + file.getName()[ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_5 $$ path += file.getName()[ FD ]
Line_4 $$ if (level == 1)-->Line_6 $$ if (level > 1)[ CD ]
Line_10 $$ for (int i = files.length - 1; i >= 0; i--) -->Line_11 $$ addSpace(path, files[i], isOwn, level + 1)[ CD ]
Line_5 $$ path += file.getName()-->Line_23 $$ addArchive(path, file, ContextUnit.TYPE_ZIP, isOwn)[ FD ]
Line_29 $$ if (isArchive) -->Line_30 $$ return[ CD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_4 $$ if (level == 1)[ FD ]
Line_7 $$ path += "/" + file.getName()-->Line_11 $$ addSpace(path, files[i], isOwn, level + 1)[ FD ]
Line_7 $$ path += "/" + file.getName()-->Line_32 $$ ContextUnit unit = units.get(path)[ FD ]
Line_5 $$ path += file.getName()-->Line_35 $$ units.put(path, unit)[ FD ]
Line_5 $$ path += file.getName()-->Line_32 $$ ContextUnit unit = units.get(path)[ FD ]
Line_15 $$ String filename = file.getName()-->Line_43 $$ unit.addClass(cl, filename)[ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_53 $$ unit.addOtherEntry(file.getAbsolutePath(), filename)[ FD ]
Line_5 $$ path += file.getName()-->Line_7 $$ path += "/" + file.getName()[ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_11 $$ addSpace(path, files[i], isOwn, level + 1)[ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_20 $$ addArchive(path, file, ContextUnit.TYPE_JAR, isOwn)[ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_16 $$ boolean isArchive = false[ CD ]
Line_15 $$ String filename = file.getName()-->Line_18 $$ if (filename.endsWith(".jar")) [ FD ]
Line_7 $$ path += "/" + file.getName()-->Line_35 $$ units.put(path, unit)[ FD ]
Line_5 $$ path += file.getName()-->Line_20 $$ addArchive(path, file, ContextUnit.TYPE_JAR, isOwn)[ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_29 $$ if (isArchive) [ CD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_3 $$ if (file.isDirectory()) [ CD ]
Line_16 $$ boolean isArchive = false-->Line_19 $$ isArchive = true[ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_8 $$ File[] files = file.listFiles()[ CD ]
Line_3 $$ if (file.isDirectory()) -->Line_4 $$ if (level == 1)[ CD ]
Line_19 $$ isArchive = true-->Line_22 $$ isArchive = true[ FD ]
Line_34 $$ unit = new ContextUnit(ContextUnit.TYPE_FOLDER, null, path, isOwn, saver, decompiledData)-->Line_53 $$ unit.addOtherEntry(file.getAbsolutePath(), filename)[ FD ]
Line_26 $$ String message = "Corrupted archive file: " + file-->Line_50 $$ DecompilerContext.getLogger().writeMessage(message, ex)[ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_3 $$ if (file.isDirectory()) [ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_9 $$ if (files != null) [ CD ]
Line_32 $$ ContextUnit unit = units.get(path)-->Line_34 $$ unit = new ContextUnit(ContextUnit.TYPE_FOLDER, null, path, isOwn, saver, decompiledData)[ FD ]
Line_4 $$ if (level == 1)-->Line_5 $$ path += file.getName()[ CD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_6 $$ if (level > 1)[ FD ]
Line_7 $$ path += "/" + file.getName()-->Line_23 $$ addArchive(path, file, ContextUnit.TYPE_ZIP, isOwn)[ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_44 $$ loader.addClassLink(cl.qualifiedName, new LazyLoader.Link(LazyLoader.Link.CLASS, file.getAbsolutePath(), null))[ FD ]
Line_39 $$ DataInputFullStream in = loader.getClassStream(file.getAbsolutePath(), null)-->Line_46 $$ in.close()[ FD ]
Line_15 $$ String filename = file.getName()-->Line_21 $$ if (filename.endsWith(".zip")) [ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_15 $$ String filename = file.getName()[ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_32 $$ ContextUnit unit = units.get(path)[ CD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_23 $$ addArchive(path, file, ContextUnit.TYPE_ZIP, isOwn)[ FD ]
Line_15 $$ String filename = file.getName()-->Line_53 $$ unit.addOtherEntry(file.getAbsolutePath(), filename)[ FD ]
Line_34 $$ unit = new ContextUnit(ContextUnit.TYPE_FOLDER, null, path, isOwn, saver, decompiledData)-->Line_35 $$ units.put(path, unit)[ FD ]
Line_7 $$ path += "/" + file.getName()-->Line_20 $$ addArchive(path, file, ContextUnit.TYPE_JAR, isOwn)[ FD ]
Line_18 $$ if (filename.endsWith(".jar")) -->Line_19 $$ isArchive = true[ CD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_39 $$ DataInputFullStream in = loader.getClassStream(file.getAbsolutePath(), null)[ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_35 $$ units.put(path, unit)[ FD ]
Line_8 $$ File[] files = file.listFiles()-->Line_9 $$ if (files != null) [ FD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_8 $$ File[] files = file.listFiles()[ FD ]
Line_18 $$ if (filename.endsWith(".jar")) -->Line_21 $$ if (filename.endsWith(".zip")) [ CD ]
Line_32 $$ ContextUnit unit = units.get(path)-->Line_35 $$ units.put(path, unit)[ FD ]
Line_15 $$ String filename = file.getName()-->Line_37 $$ if (filename.endsWith(".class")) [ FD ]
Line_41 $$ StructClass cl = new StructClass(in, isOwn, loader)-->Line_43 $$ unit.addClass(cl, filename)[ FD ]
Line_3 $$ if (file.isDirectory()) -->Line_37 $$ if (filename.endsWith(".class")) [ CD ]
Line_3 $$ if (file.isDirectory()) -->Line_15 $$ String filename = file.getName()[ CD ]
Line_34 $$ unit = new ContextUnit(ContextUnit.TYPE_FOLDER, null, path, isOwn, saver, decompiledData)-->Line_43 $$ unit.addClass(cl, filename)[ FD ]
Line_33 $$ if (unit == null) -->Line_35 $$ units.put(path, unit)[ CD ]
Line_5 $$ path += file.getName()-->Line_11 $$ addSpace(path, files[i], isOwn, level + 1)[ FD ]
Line_32 $$ ContextUnit unit = units.get(path)-->Line_33 $$ if (unit == null) [ FD ]
Line_32 $$ ContextUnit unit = units.get(path)-->Line_43 $$ unit.addClass(cl, filename)[ FD ]
Line_37 $$ if (filename.endsWith(".class")) -->Line_53 $$ unit.addOtherEntry(file.getAbsolutePath(), filename)[ CD ]
Line_33 $$ if (unit == null) -->Line_34 $$ unit = new ContextUnit(ContextUnit.TYPE_FOLDER, null, path, isOwn, saver, decompiledData)[ CD ]
Line_2 $$ private void addSpace(String path, File file, boolean isOwn, int level) -->Line_32 $$ ContextUnit unit = units.get(path)[ FD ]
Line_6 $$ if (level > 1)-->Line_7 $$ path += "/" + file.getName()[ CD ]
