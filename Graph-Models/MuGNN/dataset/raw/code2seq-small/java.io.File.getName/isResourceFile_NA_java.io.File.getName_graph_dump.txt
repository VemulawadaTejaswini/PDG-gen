Line_12 $$ if (matches(name, relativePathToParent, srcRoot, pair)) -->Line_13 $$ return true[ CD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_20 $$ if (matches(name, relativePathToParent, srcRoot, myNegatedCompiledPatterns.get(i))) [ FD ]
Line_4 $$ final String relativePathToParent-->Line_20 $$ if (matches(name, relativePathToParent, srcRoot, myNegatedCompiledPatterns.get(i))) [ FD ]
Line_5 $$ final String parentPath = file.getParent()-->Line_6 $$ if (parentPath != null) [ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_3 $$ final String name = file.getName()[ CD ]
Line_11 $$ for (CompiledPattern pair : myCompiledPatterns) -->Line_12 $$ if (matches(name, relativePathToParent, srcRoot, pair)) [ FD ]
Line_4 $$ final String relativePathToParent-->Line_7 $$ relativePathToParent = "/" + FileUtilRt.getRelativePath(FileUtilRt.toSystemIndependentName(srcRoot.getAbsolutePath()), FileUtilRt.toSystemIndependentName(parentPath), '/', SystemInfo.isFileSystemCaseSensitive)[ FD ]
Line_3 $$ final String name = file.getName()-->Line_20 $$ if (matches(name, relativePathToParent, srcRoot, myNegatedCompiledPatterns.get(i))) [ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_3 $$ final String name = file.getName()[ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_5 $$ final String parentPath = file.getParent()[ FD ]
Line_3 $$ final String name = file.getName()-->Line_12 $$ if (matches(name, relativePathToParent, srcRoot, pair)) [ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_7 $$ relativePathToParent = "/" + FileUtilRt.getRelativePath(FileUtilRt.toSystemIndependentName(srcRoot.getAbsolutePath()), FileUtilRt.toSystemIndependentName(parentPath), '/', SystemInfo.isFileSystemCaseSensitive)[ FD ]
Line_9 $$ relativePathToParent = null-->Line_12 $$ if (matches(name, relativePathToParent, srcRoot, pair)) [ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_19 $$ for (int i = 0; i < myNegatedCompiledPatterns.size(); i++) [ CD ]
Line_9 $$ relativePathToParent = null-->Line_20 $$ if (matches(name, relativePathToParent, srcRoot, myNegatedCompiledPatterns.get(i))) [ FD ]
Line_7 $$ relativePathToParent = "/" + FileUtilRt.getRelativePath(FileUtilRt.toSystemIndependentName(srcRoot.getAbsolutePath()), FileUtilRt.toSystemIndependentName(parentPath), '/', SystemInfo.isFileSystemCaseSensitive)-->Line_12 $$ if (matches(name, relativePathToParent, srcRoot, pair)) [ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_16 $$ if (myNegatedCompiledPatterns.isEmpty()) [ CD ]
Line_4 $$ final String relativePathToParent-->Line_9 $$ relativePathToParent = null[ FD ]
Line_20 $$ if (matches(name, relativePathToParent, srcRoot, myNegatedCompiledPatterns.get(i))) -->Line_21 $$ return false[ CD ]
Line_6 $$ if (parentPath != null) -->Line_7 $$ relativePathToParent = "/" + FileUtilRt.getRelativePath(FileUtilRt.toSystemIndependentName(srcRoot.getAbsolutePath()), FileUtilRt.toSystemIndependentName(parentPath), '/', SystemInfo.isFileSystemCaseSensitive)[ CD ]
Line_4 $$ final String relativePathToParent-->Line_12 $$ if (matches(name, relativePathToParent, srcRoot, pair)) [ FD ]
Line_7 $$ relativePathToParent = "/" + FileUtilRt.getRelativePath(FileUtilRt.toSystemIndependentName(srcRoot.getAbsolutePath()), FileUtilRt.toSystemIndependentName(parentPath), '/', SystemInfo.isFileSystemCaseSensitive)-->Line_20 $$ if (matches(name, relativePathToParent, srcRoot, myNegatedCompiledPatterns.get(i))) [ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_12 $$ if (matches(name, relativePathToParent, srcRoot, pair)) [ FD ]
Line_19 $$ for (int i = 0; i < myNegatedCompiledPatterns.size(); i++) -->Line_20 $$ if (matches(name, relativePathToParent, srcRoot, myNegatedCompiledPatterns.get(i))) [ CD ]
Line_6 $$ if (parentPath != null) -->Line_9 $$ relativePathToParent = null[ CD ]
Line_16 $$ if (myNegatedCompiledPatterns.isEmpty()) -->Line_17 $$ return false[ CD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_24 $$ return true[ CD ]
Line_7 $$ relativePathToParent = "/" + FileUtilRt.getRelativePath(FileUtilRt.toSystemIndependentName(srcRoot.getAbsolutePath()), FileUtilRt.toSystemIndependentName(parentPath), '/', SystemInfo.isFileSystemCaseSensitive)-->Line_9 $$ relativePathToParent = null[ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_5 $$ final String parentPath = file.getParent()[ CD ]
Line_5 $$ final String parentPath = file.getParent()-->Line_7 $$ relativePathToParent = "/" + FileUtilRt.getRelativePath(FileUtilRt.toSystemIndependentName(srcRoot.getAbsolutePath()), FileUtilRt.toSystemIndependentName(parentPath), '/', SystemInfo.isFileSystemCaseSensitive)[ FD ]
Line_19 $$ for (int i = 0; i < myNegatedCompiledPatterns.size(); i++) -->Line_20 $$ if (matches(name, relativePathToParent, srcRoot, myNegatedCompiledPatterns.get(i))) [ FD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_4 $$ final String relativePathToParent[ CD ]
Line_2 $$ public boolean isResourceFile(File file, @NotNull final File srcRoot) -->Line_6 $$ if (parentPath != null) [ CD ]
