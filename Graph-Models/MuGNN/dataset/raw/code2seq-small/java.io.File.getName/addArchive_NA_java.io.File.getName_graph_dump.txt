Line_20 $$ StructClass cl = new StructClass(bytes, isOwn, loader)-->Line_22 $$ unit.addClass(cl, name)[ FD ]
Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())-->Line_25 $$ unit.addOtherEntry(file.getAbsolutePath(), name)[ FD ]
Line_16 $$ String name = entry.getName()-->Line_18 $$ if (name.endsWith(".class")) [ FD ]
Line_18 $$ if (name.endsWith(".class")) -->Line_22 $$ unit.addClass(cl, name)[ CD ]
Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)-->Line_12 $$ unit.setManifest(((JarFile) archive).getManifest())[ FD ]
Line_2 $$ private void addArchive(String path, File file, int type, boolean isOwn) throws IOException -->Line_25 $$ unit.addOtherEntry(file.getAbsolutePath(), name)[ FD ]
Line_2 $$ private void addArchive(String path, File file, int type, boolean isOwn) throws IOException -->Line_14 $$ units.put(path + "/" + file.getName(), unit)[ FD ]
Line_6 $$ while (entries.hasMoreElements()) -->Line_9 $$ if (unit == null) [ CD ]
Line_7 $$ ZipEntry entry = entries.nextElement()-->Line_17 $$ if (!entry.isDirectory()) [ FD ]
Line_3 $$ ZipFile archive = type == ContextUnit.TYPE_JAR ? new JarFile(file) : new ZipFile(file)-->Line_5 $$ Enumeration<? extends ZipEntry> entries = archive.entries()[ FD ]
Line_18 $$ if (name.endsWith(".class")) -->Line_25 $$ unit.addOtherEntry(file.getAbsolutePath(), name)[ CD ]
Line_6 $$ while (entries.hasMoreElements()) -->Line_16 $$ String name = entry.getName()[ CD ]
Line_20 $$ StructClass cl = new StructClass(bytes, isOwn, loader)-->Line_21 $$ classes.put(cl.qualifiedName, cl)[ FD ]
Line_2 $$ private void addArchive(String path, File file, int type, boolean isOwn) throws IOException -->Line_11 $$ if (type == ContextUnit.TYPE_JAR) [ FD ]
Line_6 $$ while (entries.hasMoreElements()) -->Line_17 $$ if (!entry.isDirectory()) [ CD ]
Line_2 $$ private void addArchive(String path, File file, int type, boolean isOwn) throws IOException -->Line_23 $$ loader.addClassLink(cl.qualifiedName, new LazyLoader.Link(LazyLoader.Link.ENTRY, file.getAbsolutePath(), name))[ FD ]
Line_3 $$ ZipFile archive = type == ContextUnit.TYPE_JAR ? new JarFile(file) : new ZipFile(file)-->Line_32 $$ archive.close()[ FD ]
Line_7 $$ ZipEntry entry = entries.nextElement()-->Line_19 $$ byte[] bytes = InterpreterUtil.getBytes(archive, entry)[ FD ]
Line_9 $$ if (unit == null) -->Line_11 $$ if (type == ContextUnit.TYPE_JAR) [ CD ]
Line_18 $$ if (name.endsWith(".class")) -->Line_23 $$ loader.addClassLink(cl.qualifiedName, new LazyLoader.Link(LazyLoader.Link.ENTRY, file.getAbsolutePath(), name))[ CD ]
Line_5 $$ Enumeration<? extends ZipEntry> entries = archive.entries()-->Line_7 $$ ZipEntry entry = entries.nextElement()[ FD ]
Line_17 $$ if (!entry.isDirectory()) -->Line_18 $$ if (name.endsWith(".class")) [ CD ]
Line_7 $$ ZipEntry entry = entries.nextElement()-->Line_16 $$ String name = entry.getName()[ FD ]
Line_6 $$ while (entries.hasMoreElements()) -->Line_7 $$ ZipEntry entry = entries.nextElement()[ CD ]
Line_18 $$ if (name.endsWith(".class")) -->Line_19 $$ byte[] bytes = InterpreterUtil.getBytes(archive, entry)[ CD ]
Line_5 $$ Enumeration<? extends ZipEntry> entries = archive.entries()-->Line_6 $$ while (entries.hasMoreElements()) [ FD ]
Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())-->Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)[ FD ]
Line_9 $$ if (unit == null) -->Line_14 $$ units.put(path + "/" + file.getName(), unit)[ CD ]
Line_17 $$ if (!entry.isDirectory()) -->Line_28 $$ unit.addDirEntry(name)[ CD ]
Line_16 $$ String name = entry.getName()-->Line_28 $$ unit.addDirEntry(name)[ FD ]
Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())-->Line_9 $$ if (unit == null) [ FD ]
Line_16 $$ String name = entry.getName()-->Line_25 $$ unit.addOtherEntry(file.getAbsolutePath(), name)[ FD ]
Line_9 $$ if (unit == null) -->Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)[ CD ]
Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())-->Line_22 $$ unit.addClass(cl, name)[ FD ]
Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)-->Line_22 $$ unit.addClass(cl, name)[ FD ]
Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())-->Line_28 $$ unit.addDirEntry(name)[ FD ]
Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)-->Line_25 $$ unit.addOtherEntry(file.getAbsolutePath(), name)[ FD ]
Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)-->Line_14 $$ units.put(path + "/" + file.getName(), unit)[ FD ]
Line_11 $$ if (type == ContextUnit.TYPE_JAR) -->Line_12 $$ unit.setManifest(((JarFile) archive).getManifest())[ CD ]
Line_6 $$ while (entries.hasMoreElements()) -->Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())[ CD ]
Line_2 $$ private void addArchive(String path, File file, int type, boolean isOwn) throws IOException -->Line_3 $$ ZipFile archive = type == ContextUnit.TYPE_JAR ? new JarFile(file) : new ZipFile(file)[ CD ]
Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())-->Line_14 $$ units.put(path + "/" + file.getName(), unit)[ FD ]
Line_18 $$ if (name.endsWith(".class")) -->Line_20 $$ StructClass cl = new StructClass(bytes, isOwn, loader)[ CD ]
Line_2 $$ private void addArchive(String path, File file, int type, boolean isOwn) throws IOException -->Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())[ FD ]
Line_18 $$ if (name.endsWith(".class")) -->Line_21 $$ classes.put(cl.qualifiedName, cl)[ CD ]
Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)-->Line_28 $$ unit.addDirEntry(name)[ FD ]
Line_8 $$ ContextUnit unit = units.get(path + "/" + file.getName())-->Line_12 $$ unit.setManifest(((JarFile) archive).getManifest())[ FD ]
Line_3 $$ ZipFile archive = type == ContextUnit.TYPE_JAR ? new JarFile(file) : new ZipFile(file)-->Line_19 $$ byte[] bytes = InterpreterUtil.getBytes(archive, entry)[ FD ]
Line_2 $$ private void addArchive(String path, File file, int type, boolean isOwn) throws IOException -->Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)[ FD ]
Line_10 $$ unit = new ContextUnit(type, path, file.getName(), isOwn, saver, decompiledData)-->Line_9 $$ if (unit == null) [ FD ]
Line_16 $$ String name = entry.getName()-->Line_22 $$ unit.addClass(cl, name)[ FD ]
