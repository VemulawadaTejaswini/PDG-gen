Line_2 $$ private String computeClassName(final File file) -->Line_3 $$ String absPath = file.getAbsolutePath()[ CD ]
Line_18 $$ if (words.contains("Test") || words.contains("Tests") || words.contains("Suite")) -->Line_20 $$ if (!Arrays.asList("com.intellij.tests.BootstrapTests", "com.intellij.AllTests").contains(fqn)) [ CD ]
Line_9 $$ String className = file.getName()-->Line_13 $$ className = className.substring(dollar + 1)[ FD ]
Line_12 $$ if (dollar != -1) -->Line_13 $$ className = className.substring(dollar + 1)[ CD ]
Line_10 $$ if (className.endsWith(".class")) -->Line_18 $$ if (words.contains("Test") || words.contains("Tests") || words.contains("Suite")) [ CD ]
Line_4 $$ if (!includeUnconventionallyNamedTests) -->Line_9 $$ String className = file.getName()[ CD ]
Line_2 $$ private String computeClassName(final File file) -->Line_26 $$ return null[ CD ]
Line_19 $$ String fqn = StringUtil.trimEnd(absPath.substring(startPackageName), ".class").replace(File.separatorChar, '.')-->Line_20 $$ if (!Arrays.asList("com.intellij.tests.BootstrapTests", "com.intellij.AllTests").contains(fqn)) [ FD ]
Line_11 $$ int dollar = className.lastIndexOf("$")-->Line_12 $$ if (dollar != -1) [ FD ]
Line_5 $$ if (absPath.endsWith("Test.class")) -->Line_6 $$ return StringUtil.trimEnd(absPath.substring(startPackageName), ".class").replace(File.separatorChar, '.')[ CD ]
Line_17 $$ List<String> words = Arrays.asList(NameUtil.nameToWords(className))-->Line_18 $$ if (words.contains("Test") || words.contains("Tests") || words.contains("Suite")) [ FD ]
Line_9 $$ String className = file.getName()-->Line_10 $$ if (className.endsWith(".class")) [ FD ]
Line_2 $$ private String computeClassName(final File file) -->Line_3 $$ String absPath = file.getAbsolutePath()[ FD ]
Line_2 $$ private String computeClassName(final File file) -->Line_4 $$ if (!includeUnconventionallyNamedTests) [ CD ]
Line_10 $$ if (className.endsWith(".class")) -->Line_11 $$ int dollar = className.lastIndexOf("$")[ CD ]
Line_3 $$ String absPath = file.getAbsolutePath()-->Line_5 $$ if (absPath.endsWith("Test.class")) [ FD ]
Line_9 $$ String className = file.getName()-->Line_14 $$ if (!Character.isUpperCase(className.charAt(0)))[ FD ]
Line_3 $$ String absPath = file.getAbsolutePath()-->Line_6 $$ return StringUtil.trimEnd(absPath.substring(startPackageName), ".class").replace(File.separatorChar, '.')[ FD ]
Line_12 $$ if (dollar != -1) -->Line_14 $$ if (!Character.isUpperCase(className.charAt(0)))[ CD ]
Line_4 $$ if (!includeUnconventionallyNamedTests) -->Line_5 $$ if (absPath.endsWith("Test.class")) [ CD ]
Line_9 $$ String className = file.getName()-->Line_17 $$ List<String> words = Arrays.asList(NameUtil.nameToWords(className))[ FD ]
Line_10 $$ if (className.endsWith(".class")) -->Line_17 $$ List<String> words = Arrays.asList(NameUtil.nameToWords(className))[ CD ]
Line_9 $$ String className = file.getName()-->Line_11 $$ int dollar = className.lastIndexOf("$")[ FD ]
Line_3 $$ String absPath = file.getAbsolutePath()-->Line_19 $$ String fqn = StringUtil.trimEnd(absPath.substring(startPackageName), ".class").replace(File.separatorChar, '.')[ FD ]
Line_18 $$ if (words.contains("Test") || words.contains("Tests") || words.contains("Suite")) -->Line_19 $$ String fqn = StringUtil.trimEnd(absPath.substring(startPackageName), ".class").replace(File.separatorChar, '.')[ CD ]
Line_10 $$ if (className.endsWith(".class")) -->Line_12 $$ if (dollar != -1) [ CD ]
Line_13 $$ className = className.substring(dollar + 1)-->Line_14 $$ if (!Character.isUpperCase(className.charAt(0)))[ FD ]
Line_13 $$ className = className.substring(dollar + 1)-->Line_17 $$ List<String> words = Arrays.asList(NameUtil.nameToWords(className))[ FD ]
Line_4 $$ if (!includeUnconventionallyNamedTests) -->Line_10 $$ if (className.endsWith(".class")) [ CD ]
Line_20 $$ if (!Arrays.asList("com.intellij.tests.BootstrapTests", "com.intellij.AllTests").contains(fqn)) -->Line_21 $$ return fqn[ CD ]
Line_2 $$ private String computeClassName(final File file) -->Line_9 $$ String className = file.getName()[ FD ]
Line_14 $$ if (!Character.isUpperCase(className.charAt(0)))-->Line_15 $$ return null[ CD ]
