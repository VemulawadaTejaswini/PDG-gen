Line_17 $$ File file = new File(desc.filenameFor(component))-->Line_26 $$ if (tmpCacheFilePattern.matcher(file.getName()).matches())[ FD ]
Line_17 $$ File file = new File(desc.filenameFor(component))-->Line_28 $$ logger.warn("could not delete [ FD ]
Line_3 $$ Directories directories = new Directories(metadata)-->Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> sstableFiles : directories.sstableLister(Directories.OnTxnErr.IGNORE).list().entrySet()) [ FD ]
Line_22 $$ Pattern tmpCacheFilePattern = Pattern.compile(metadata.ksName + "-" + metadata.cfName + "-(Key|Row)Cache.*\\.tmp$")-->Line_26 $$ if (tmpCacheFilePattern.matcher(file.getName()).matches())[ FD ]
Line_30 $$ for (IndexMetadata index : metadata.getIndexes()) if (!index.isCustom()) -->Line_31 $$ CFMetaData indexMetadata = CassandraIndex.indexCfsMetadata(metadata, index)[ FD ]
Line_18 $$ if (file.exists())-->Line_19 $$ FileUtils.deleteWithConfirm(desc.filenameFor(component))[ CD ]
Line_26 $$ if (tmpCacheFilePattern.matcher(file.getName()).matches())-->Line_27 $$ if (!file.delete())[ CD ]
Line_23 $$ File dir = new File(DatabaseDescriptor.getSavedCachesLocation())-->Line_26 $$ for (File file : dir.listFiles()) if (tmpCacheFilePattern.matcher(file.getName()).matches())[ FD ]
Line_30 $$ if (!index.isCustom()) -->Line_31 $$ CFMetaData indexMetadata = CassandraIndex.indexCfsMetadata(metadata, index)[ CD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_5 $$ logger.trace("Removing temporary or obsoleted files from unfinished operations for table [ CD ]
Line_17 $$ File file = new File(desc.filenameFor(component))-->Line_18 $$ if (file.exists())[ FD ]
Line_9 $$ Descriptor desc = sstableFiles.getKey()-->Line_11 $$ for (File tmpFile : desc.getTemporaryFiles()) tmpFile.delete()[ FD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_6 $$ LifecycleTransaction.removeUnfinishedLeftovers(metadata)[ FD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_4 $$ clearEphemeralSnapshots(directories)[ CD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_22 $$ Pattern tmpCacheFilePattern = Pattern.compile(metadata.ksName + "-" + metadata.cfName + "-(Key|Row)Cache.*\\.tmp$")[ CD ]
Line_16 $$ for (Component component : components) -->Line_17 $$ File file = new File(desc.filenameFor(component))[ FD ]
Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> sstableFiles : directories.sstableLister(Directories.OnTxnErr.IGNORE).list().entrySet()) -->Line_9 $$ Descriptor desc = sstableFiles.getKey()[ FD ]
Line_9 $$ Descriptor desc = sstableFiles.getKey()-->Line_12 $$ File dataFile = new File(desc.filenameFor(Component.DATA))[ FD ]
Line_9 $$ Descriptor desc = sstableFiles.getKey()-->Line_15 $$ logger.warn("Removing orphans for [ FD ]
Line_16 $$ for (Component component : components) -->Line_19 $$ FileUtils.deleteWithConfirm(desc.filenameFor(component))[ FD ]
Line_27 $$ if (!file.delete())-->Line_28 $$ logger.warn("could not delete [ CD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_30 $$ for (IndexMetadata index : metadata.getIndexes()) if (!index.isCustom()) [ FD ]
Line_17 $$ File file = new File(desc.filenameFor(component))-->Line_27 $$ if (!file.delete())[ FD ]
Line_10 $$ Set<Component> components = sstableFiles.getValue()-->Line_15 $$ logger.warn("Removing orphans for [ FD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_7 $$ logger.trace("Further extra check for orphan sstable files for [ CD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_24 $$ if (dir.exists()) [ CD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_6 $$ LifecycleTransaction.removeUnfinishedLeftovers(metadata)[ CD ]
Line_31 $$ CFMetaData indexMetadata = CassandraIndex.indexCfsMetadata(metadata, index)-->Line_32 $$ scrubDataDirectories(indexMetadata)[ FD ]
Line_12 $$ File dataFile = new File(desc.filenameFor(Component.DATA))-->Line_13 $$ if (components.contains(Component.DATA) && dataFile.length() > 0)[ FD ]
Line_23 $$ File dir = new File(DatabaseDescriptor.getSavedCachesLocation())-->Line_25 $$ assert dir.isDirectory()[ FD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_3 $$ Directories directories = new Directories(metadata)[ CD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_31 $$ CFMetaData indexMetadata = CassandraIndex.indexCfsMetadata(metadata, index)[ FD ]
Line_30 $$ if (!index.isCustom()) -->Line_32 $$ scrubDataDirectories(indexMetadata)[ CD ]
Line_2 $$ public static void scrubDataDirectories(CFMetaData metadata) -->Line_23 $$ File dir = new File(DatabaseDescriptor.getSavedCachesLocation())[ CD ]
Line_23 $$ File dir = new File(DatabaseDescriptor.getSavedCachesLocation())-->Line_24 $$ if (dir.exists()) [ FD ]
Line_3 $$ Directories directories = new Directories(metadata)-->Line_4 $$ clearEphemeralSnapshots(directories)[ FD ]
Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> sstableFiles : directories.sstableLister(Directories.OnTxnErr.IGNORE).list().entrySet()) -->Line_10 $$ Set<Component> components = sstableFiles.getValue()[ FD ]
Line_10 $$ Set<Component> components = sstableFiles.getValue()-->Line_13 $$ if (components.contains(Component.DATA) && dataFile.length() > 0)[ FD ]
Line_9 $$ Descriptor desc = sstableFiles.getKey()-->Line_19 $$ FileUtils.deleteWithConfirm(desc.filenameFor(component))[ FD ]
Line_9 $$ Descriptor desc = sstableFiles.getKey()-->Line_17 $$ File file = new File(desc.filenameFor(component))[ FD ]
