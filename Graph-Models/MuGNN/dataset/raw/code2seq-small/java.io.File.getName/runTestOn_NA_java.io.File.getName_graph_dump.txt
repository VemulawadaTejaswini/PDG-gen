Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_17 $$ myFixture.copyFileToProject("dotNet/SingleNameSpace.dll", "SingleNameSpace.dll")[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_33 $$ FileUtil.copy(skeletonFile, new File(myFixture.getTempDirPath(), skeletonFile.getName()))[ CD ]
Line_11 $$ final File skeletonFile = skeletonFileOrDirectory-->Line_41 $$ myGeneratedSkeleton = (PyFile) myFixture.configureByFile(skeletonFile.getName())[ FD ]
Line_5 $$ File skeletonFileOrDirectory = new File(skeletonsPath, myModuleNameToBeGenerated)-->Line_7 $$ skeletonFileOrDirectory = new File(skeletonFileOrDirectory, PyNames.INIT_DOT_PY)[ FD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_15 $$ myFixture.copyFileToProject("dotNet/" + mySourceFileToRunGenerationOn, mySourceFileToRunGenerationOn)[ CD ]
Line_5 $$ File skeletonFileOrDirectory = new File(skeletonsPath, myModuleNameToBeGenerated)-->Line_6 $$ if (skeletonFileOrDirectory.isDirectory()) [ FD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_23 $$ final String intentionName = PyBundle.message("sdk.gen.stubs.for.binary.modules", myUseQuickFixWithThisModuleOnly)[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_3 $$ final Sdk sdk = createTempSdk(sdkHome, SdkCreationType.SDK_PACKAGES_ONLY)[ FD ]
Line_11 $$ final File skeletonFile = skeletonFileOrDirectory-->Line_38 $$ throw new FileComparisonFailure("asd", skeletonText, actual, skeletonFile.getAbsolutePath())[ FD ]
Line_24 $$ final IntentionAction intention = myFixture.findSingleIntention(intentionName)-->Line_26 $$ Assert.assertThat("Intention should be quick fix to run", intention, Matchers.instanceOf(QuickFixWrapper.class))[ FD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_24 $$ final IntentionAction intention = myFixture.findSingleIntention(intentionName)[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_19 $$ myFixture.enableInspections(PyUnresolvedReferencesInspection.class)[ CD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_26 $$ Assert.assertThat("Intention should be quick fix to run", intention, Matchers.instanceOf(QuickFixWrapper.class))[ CD ]
Line_34 $$ if (myExpectedSkeletonFile != null) -->Line_36 $$ final String skeletonText = StreamUtil.readText(new FileInputStream(new File(getTestDataPath(), myExpectedSkeletonFile)), Charset.defaultCharset())[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_18 $$ myFixture.configureByFile(mySourceFileToRunGenerationOn)[ CD ]
Line_11 $$ final File skeletonFile = skeletonFileOrDirectory-->Line_12 $$ if (skeletonFile.exists()) [ FD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_28 $$ Assert.assertThat("Quick fix should be 'generate binary skeletons' fix to run", quickFix, Matchers.instanceOf(GenerateBinaryStubsFix.class))[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_5 $$ File skeletonFileOrDirectory = new File(skeletonsPath, myModuleNameToBeGenerated)[ CD ]
Line_6 $$ if (skeletonFileOrDirectory.isDirectory()) -->Line_9 $$ skeletonFileOrDirectory = new File(skeletonFileOrDirectory.getAbsolutePath() + PyNames.DOT_PY)[ CD ]
Line_11 $$ final File skeletonFile = skeletonFileOrDirectory-->Line_13 $$ assert skeletonFile.delete() : "Failed to delete file " + skeletonFile[ FD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_30 $$ fixTask.run(new AbstractProgressIndicatorBase())[ CD ]
Line_5 $$ File skeletonFileOrDirectory = new File(skeletonsPath, myModuleNameToBeGenerated)-->Line_9 $$ skeletonFileOrDirectory = new File(skeletonFileOrDirectory.getAbsolutePath() + PyNames.DOT_PY)[ FD ]
Line_29 $$ final Task fixTask = ((GenerateBinaryStubsFix) quickFix).getFixTask(myFixture.getFile())-->Line_30 $$ fixTask.run(new AbstractProgressIndicatorBase())[ FD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_16 $$ myFixture.copyFileToProject("dotNet/PythonLibs.dll", "PythonLibs.dll")[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_4 $$ final File skeletonsPath = new File(PythonSdkType.getSkeletonsPath(PathManager.getSystemPath(), sdk.getHomePath()))[ CD ]
Line_34 $$ if (myExpectedSkeletonFile != null) -->Line_37 $$ if (!Matchers.equalToIgnoringWhiteSpace(removeGeneratorVersion(skeletonText)).matches(removeGeneratorVersion(actual))) [ CD ]
Line_27 $$ final LocalQuickFix quickFix = ((QuickFixWrapper) intention).getFix()-->Line_28 $$ Assert.assertThat("Quick fix should be 'generate binary skeletons' fix to run", quickFix, Matchers.instanceOf(GenerateBinaryStubsFix.class))[ FD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_34 $$ if (myExpectedSkeletonFile != null) [ CD ]
Line_11 $$ final File skeletonFile = skeletonFileOrDirectory-->Line_33 $$ FileUtil.copy(skeletonFile, new File(myFixture.getTempDirPath(), skeletonFile.getName()))[ FD ]
Line_7 $$ skeletonFileOrDirectory = new File(skeletonFileOrDirectory, PyNames.INIT_DOT_PY)-->Line_9 $$ skeletonFileOrDirectory = new File(skeletonFileOrDirectory.getAbsolutePath() + PyNames.DOT_PY)[ FD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_11 $$ final File skeletonFile = skeletonFileOrDirectory[ CD ]
Line_34 $$ if (myExpectedSkeletonFile != null) -->Line_35 $$ final String actual = StreamUtil.readText(new FileInputStream(skeletonFile), Charset.defaultCharset())[ CD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_27 $$ final LocalQuickFix quickFix = ((QuickFixWrapper) intention).getFix()[ CD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_22 $$ PsiDocumentManager.getInstance(myFixture.getProject()).commitAllDocuments()[ CD ]
Line_6 $$ if (skeletonFileOrDirectory.isDirectory()) -->Line_7 $$ skeletonFileOrDirectory = new File(skeletonFileOrDirectory, PyNames.INIT_DOT_PY)[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() [ CD ]
Line_24 $$ final IntentionAction intention = myFixture.findSingleIntention(intentionName)-->Line_25 $$ Assert.assertNotNull("No intention found to generate skeletons!", intention)[ FD ]
Line_23 $$ final String intentionName = PyBundle.message("sdk.gen.stubs.for.binary.modules", myUseQuickFixWithThisModuleOnly)-->Line_24 $$ final IntentionAction intention = myFixture.findSingleIntention(intentionName)[ FD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_29 $$ final Task fixTask = ((GenerateBinaryStubsFix) quickFix).getFixTask(myFixture.getFile())[ CD ]
Line_20 $$ UIUtil.invokeAndWaitIfNeeded(new Runnable() -->Line_25 $$ Assert.assertNotNull("No intention found to generate skeletons!", intention)[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_3 $$ final Sdk sdk = createTempSdk(sdkHome, SdkCreationType.SDK_PACKAGES_ONLY)[ CD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_6 $$ if (skeletonFileOrDirectory.isDirectory()) [ CD ]
Line_3 $$ final Sdk sdk = createTempSdk(sdkHome, SdkCreationType.SDK_PACKAGES_ONLY)-->Line_4 $$ final File skeletonsPath = new File(PythonSdkType.getSkeletonsPath(PathManager.getSystemPath(), sdk.getHomePath()))[ FD ]
Line_2 $$ public void runTestOn(@NotNull final String sdkHome) throws IOException, InvalidSdkException -->Line_12 $$ if (skeletonFile.exists()) [ CD ]
