Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_4 $$ File circularDir2 = myTempDir.newFolder("dir2")[ CD ]
Line_8 $$ VirtualFile circularLink2VFile = refreshAndFind(circularLink2)-->Line_10 $$ assertNotNull(circularLink2VFile)[ FD ]
Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_10 $$ assertNotNull(circularLink2VFile)[ CD ]
Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_11 $$ assertVisitedPaths(circularDir1.getPath(), circularLink1.getPath(), circularLink1.getPath() + "/" + circularLink2.getName(), circularDir2.getPath(), circularLink2.getPath(), circularLink2.getPath() + "/" + circularLink1.getName())[ CD ]
Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_6 $$ File circularLink2 = createSymLink(circularDir1.getPath(), circularDir2 + "/link2")[ CD ]
Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_8 $$ VirtualFile circularLink2VFile = refreshAndFind(circularLink2)[ CD ]
Line_5 $$ File circularLink1 = createSymLink(circularDir2.getPath(), circularDir1 + "/link1")-->Line_7 $$ VirtualFile circularLink1VFile = refreshAndFind(circularLink1)[ FD ]
Line_6 $$ File circularLink2 = createSymLink(circularDir1.getPath(), circularDir2 + "/link2")-->Line_8 $$ VirtualFile circularLink2VFile = refreshAndFind(circularLink2)[ FD ]
Line_5 $$ File circularLink1 = createSymLink(circularDir2.getPath(), circularDir1 + "/link1")-->Line_11 $$ assertVisitedPaths(circularDir1.getPath(), circularLink1.getPath(), circularLink1.getPath() + "/" + circularLink2.getName(), circularDir2.getPath(), circularLink2.getPath(), circularLink2.getPath() + "/" + circularLink1.getName())[ FD ]
Line_4 $$ File circularDir2 = myTempDir.newFolder("dir2")-->Line_11 $$ assertVisitedPaths(circularDir1.getPath(), circularLink1.getPath(), circularLink1.getPath() + "/" + circularLink2.getName(), circularDir2.getPath(), circularLink2.getPath(), circularLink2.getPath() + "/" + circularLink1.getName())[ FD ]
Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_3 $$ File circularDir1 = myTempDir.newFolder("dir1")[ CD ]
Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_9 $$ assertNotNull(circularLink1VFile)[ CD ]
Line_3 $$ File circularDir1 = myTempDir.newFolder("dir1")-->Line_6 $$ File circularLink2 = createSymLink(circularDir1.getPath(), circularDir2 + "/link2")[ FD ]
Line_4 $$ File circularDir2 = myTempDir.newFolder("dir2")-->Line_5 $$ File circularLink1 = createSymLink(circularDir2.getPath(), circularDir1 + "/link1")[ FD ]
Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_5 $$ File circularLink1 = createSymLink(circularDir2.getPath(), circularDir1 + "/link1")[ CD ]
Line_3 $$ File circularDir1 = myTempDir.newFolder("dir1")-->Line_11 $$ assertVisitedPaths(circularDir1.getPath(), circularLink1.getPath(), circularLink1.getPath() + "/" + circularLink2.getName(), circularDir2.getPath(), circularLink2.getPath(), circularLink2.getPath() + "/" + circularLink1.getName())[ FD ]
Line_7 $$ VirtualFile circularLink1VFile = refreshAndFind(circularLink1)-->Line_9 $$ assertNotNull(circularLink1VFile)[ FD ]
Line_6 $$ File circularLink2 = createSymLink(circularDir1.getPath(), circularDir2 + "/link2")-->Line_11 $$ assertVisitedPaths(circularDir1.getPath(), circularLink1.getPath(), circularLink1.getPath() + "/" + circularLink2.getName(), circularDir2.getPath(), circularLink2.getPath(), circularLink2.getPath() + "/" + circularLink1.getName())[ FD ]
Line_2 $$ public void testMutualRecursiveLinks() throws Exception -->Line_7 $$ VirtualFile circularLink1VFile = refreshAndFind(circularLink1)[ CD ]
