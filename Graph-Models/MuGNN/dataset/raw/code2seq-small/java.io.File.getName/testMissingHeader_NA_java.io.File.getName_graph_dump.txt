Line_11 $$ if (file.getName().endsWith(".header"))-->Line_12 $$ FileUtils.deleteWithConfirm(file)[ CD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_5 $$ DecoratedKey dk = Util.dk("keymulti")[ CD ]
Line_6 $$ UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())-->Line_15 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
Line_10 $$ for (File file : new File(DatabaseDescriptor.getCommitLogLocation()).listFiles()) -->Line_12 $$ FileUtils.deleteWithConfirm(file)[ FD ]
Line_4 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_9 $$ keyspace2.getColumnFamilyStore("Standard3").clearUnsafe()[ FD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_7 $$ UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())[ CD ]
Line_3 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_6 $$ UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())[ FD ]
Line_3 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_8 $$ keyspace1.getColumnFamilyStore("Standard1").clearUnsafe()[ FD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_15 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ CD ]
Line_10 $$ for (File file : new File(DatabaseDescriptor.getCommitLogLocation()).listFiles()) -->Line_11 $$ if (file.getName().endsWith(".header"))[ FD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_3 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)[ CD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_6 $$ UnfilteredRowIterator upd1 = Util.apply(new RowUpdateBuilder(keyspace1.getColumnFamilyStore(CF_STANDARD1).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())[ CD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_4 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)[ CD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_14 $$ CommitLog.instance.resetUnsafe(false)[ CD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_9 $$ keyspace2.getColumnFamilyStore("Standard3").clearUnsafe()[ CD ]
Line_5 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_15 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_8 $$ keyspace1.getColumnFamilyStore("Standard1").clearUnsafe()[ CD ]
Line_4 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_16 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
Line_3 $$ Keyspace keyspace1 = Keyspace.open(KEYSPACE1)-->Line_15 $$ Assert.assertTrue(Util.equal(upd1, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace1.getColumnFamilyStore(CF_STANDARD1), dk).build()).unfilteredIterator()))[ FD ]
Line_2 $$ public void testMissingHeader() throws IOException -->Line_16 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ CD ]
Line_5 $$ DecoratedKey dk = Util.dk("keymulti")-->Line_16 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
Line_7 $$ UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())-->Line_16 $$ Assert.assertTrue(Util.equal(upd2, Util.getOnlyPartitionUnfiltered(Util.cmd(keyspace2.getColumnFamilyStore(CF_STANDARD3), dk).build()).unfilteredIterator()))[ FD ]
Line_4 $$ Keyspace keyspace2 = Keyspace.open(KEYSPACE2)-->Line_7 $$ UnfilteredRowIterator upd2 = Util.apply(new RowUpdateBuilder(keyspace2.getColumnFamilyStore(CF_STANDARD3).metadata, 1L, 0, "keymulti").clustering("col1").add("val", "1").build())[ FD ]
