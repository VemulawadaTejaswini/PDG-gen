Line_2 $$ public static TypeDescriptor map(Class<?> mapType, TypeDescriptor keyTypeDescriptor, TypeDescriptor valueTypeDescriptor) -->Line_8 $$ return new TypeDescriptor(ResolvableType.forClassWithGenerics(mapType, key, value), null, null)[ CD ]
Line_2 $$ public static TypeDescriptor map(Class<?> mapType, TypeDescriptor keyTypeDescriptor, TypeDescriptor valueTypeDescriptor) -->Line_6 $$ ResolvableType key = (keyTypeDescriptor != null ? keyTypeDescriptor.resolvableType : null)[ CD ]
Line_2 $$ public static TypeDescriptor map(Class<?> mapType, TypeDescriptor keyTypeDescriptor, TypeDescriptor valueTypeDescriptor) -->Line_7 $$ ResolvableType value = (valueTypeDescriptor != null ? valueTypeDescriptor.resolvableType : null)[ CD ]
Line_2 $$ public static TypeDescriptor map(Class<?> mapType, TypeDescriptor keyTypeDescriptor, TypeDescriptor valueTypeDescriptor) -->Line_8 $$ return new TypeDescriptor(ResolvableType.forClassWithGenerics(mapType, key, value), null, null)[ FD ]
Line_2 $$ public static TypeDescriptor map(Class<?> mapType, TypeDescriptor keyTypeDescriptor, TypeDescriptor valueTypeDescriptor) -->Line_3 $$ if (!Map.class.isAssignableFrom(mapType)) [ FD ]
Line_7 $$ ResolvableType value = (valueTypeDescriptor != null ? valueTypeDescriptor.resolvableType : null)-->Line_8 $$ return new TypeDescriptor(ResolvableType.forClassWithGenerics(mapType, key, value), null, null)[ FD ]
Line_2 $$ public static TypeDescriptor map(Class<?> mapType, TypeDescriptor keyTypeDescriptor, TypeDescriptor valueTypeDescriptor) -->Line_3 $$ if (!Map.class.isAssignableFrom(mapType)) [ CD ]
Line_6 $$ ResolvableType key = (keyTypeDescriptor != null ? keyTypeDescriptor.resolvableType : null)-->Line_8 $$ return new TypeDescriptor(ResolvableType.forClassWithGenerics(mapType, key, value), null, null)[ FD ]
