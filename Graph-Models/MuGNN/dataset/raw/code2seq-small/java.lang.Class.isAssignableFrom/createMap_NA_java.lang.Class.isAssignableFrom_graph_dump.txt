Line_7 $$ if (SortedMap.class == mapType || NavigableMap.class == mapType) -->Line_8 $$ return new TreeMap<K, V>()[ CD ]
Line_4 $$ if (mapType.isInterface()) -->Line_14 $$ if (EnumMap.class == mapType) [ CD ]
Line_5 $$ if (Map.class == mapType) -->Line_6 $$ return new LinkedHashMap<K, V>(capacity)[ CD ]
Line_14 $$ if (EnumMap.class == mapType) -->Line_16 $$ return new EnumMap(asEnumType(keyType))[ CD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_4 $$ if (mapType.isInterface()) [ FD ]
Line_7 $$ if (SortedMap.class == mapType || NavigableMap.class == mapType) -->Line_9 $$ if (MultiValueMap.class == mapType) [ CD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_15 $$ Assert.notNull(keyType, "Cannot create EnumMap for unknown key type")[ FD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_3 $$ Assert.notNull(mapType, "Map type must not be null")[ FD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_4 $$ if (mapType.isInterface()) [ CD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_3 $$ Assert.notNull(mapType, "Map type must not be null")[ CD ]
Line_4 $$ if (mapType.isInterface()) -->Line_5 $$ if (Map.class == mapType) [ CD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_22 $$ return (Map<K, V>) mapType.newInstance()[ FD ]
Line_14 $$ if (EnumMap.class == mapType) -->Line_18 $$ if (!Map.class.isAssignableFrom(mapType)) [ CD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_14 $$ if (EnumMap.class == mapType) [ FD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_24 $$ throw new IllegalArgumentException("Could not instantiate Map type: " + mapType.getName(), ex)[ FD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_5 $$ if (Map.class == mapType) [ FD ]
Line_5 $$ if (Map.class == mapType) -->Line_7 $$ if (SortedMap.class == mapType || NavigableMap.class == mapType) [ CD ]
Line_14 $$ if (EnumMap.class == mapType) -->Line_15 $$ Assert.notNull(keyType, "Cannot create EnumMap for unknown key type")[ CD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_9 $$ if (MultiValueMap.class == mapType) [ FD ]
Line_9 $$ if (MultiValueMap.class == mapType) -->Line_10 $$ return new LinkedMultiValueMap()[ CD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_16 $$ return new EnumMap(asEnumType(keyType))[ FD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_12 $$ throw new IllegalArgumentException("Unsupported Map interface: " + mapType.getName())[ FD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_19 $$ throw new IllegalArgumentException("Unsupported Map type: " + mapType.getName())[ FD ]
Line_2 $$ public static <K, V> Map<K, V> createMap(Class<?> mapType, Class<?> keyType, int capacity) -->Line_18 $$ if (!Map.class.isAssignableFrom(mapType)) [ FD ]
