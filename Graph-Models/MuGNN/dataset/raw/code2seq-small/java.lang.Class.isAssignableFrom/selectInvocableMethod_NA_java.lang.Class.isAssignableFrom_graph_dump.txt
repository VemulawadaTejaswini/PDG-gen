Line_9 $$ for (Class<?> ifc : targetType.getInterfaces()) -->Line_11 $$ return ifc.getMethod(methodName, parameterTypes)[ FD ]
Line_2 $$ public static Method selectInvocableMethod(Method method, Class<?> targetType) -->Line_3 $$ if (method.getDeclaringClass().isAssignableFrom(targetType)) [ CD ]
Line_7 $$ String methodName = method.getName()-->Line_15 $$ return targetType.getMethod(methodName, parameterTypes)[ FD ]
Line_2 $$ public static Method selectInvocableMethod(Method method, Class<?> targetType) -->Line_8 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_8 $$ Class<?>[] parameterTypes = method.getParameterTypes()-->Line_11 $$ return ifc.getMethod(methodName, parameterTypes)[ FD ]
Line_2 $$ public static Method selectInvocableMethod(Method method, Class<?> targetType) -->Line_3 $$ if (method.getDeclaringClass().isAssignableFrom(targetType)) [ FD ]
Line_2 $$ public static Method selectInvocableMethod(Method method, Class<?> targetType) -->Line_9 $$ for (Class<?> ifc : targetType.getInterfaces()) [ FD ]
Line_2 $$ public static Method selectInvocableMethod(Method method, Class<?> targetType) -->Line_17 $$ throw new IllegalStateException(String.format("Need to invoke method '%s' declared on target class '%s', " + "but not found in any interface(s) of the exposed proxy type. " + "Either pull the method up to an interface or switch to CGLIB " + "proxies by enforcing proxy-target-class mode in your configuration.", method.getName(), method.getDeclaringClass().getSimpleName()))[ FD ]
Line_7 $$ String methodName = method.getName()-->Line_11 $$ return ifc.getMethod(methodName, parameterTypes)[ FD ]
Line_3 $$ if (method.getDeclaringClass().isAssignableFrom(targetType)) -->Line_4 $$ return method[ CD ]
Line_2 $$ public static Method selectInvocableMethod(Method method, Class<?> targetType) -->Line_7 $$ String methodName = method.getName()[ FD ]
Line_2 $$ public static Method selectInvocableMethod(Method method, Class<?> targetType) -->Line_15 $$ return targetType.getMethod(methodName, parameterTypes)[ FD ]
Line_8 $$ Class<?>[] parameterTypes = method.getParameterTypes()-->Line_15 $$ return targetType.getMethod(methodName, parameterTypes)[ FD ]
