Line_16 $$ if (targetClass.isArray()) -->Line_18 $$ if (Collection.class.isAssignableFrom(targetClass)) [ CD ]
Line_8 $$ if (ClassUtils.isAssignableValue(targetClass, result)) -->Line_9 $$ return result[ CD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_8 $$ if (ClassUtils.isAssignableValue(targetClass, result)) [ FD ]
Line_27 $$ if (result instanceof TabularData[]) -->Line_29 $$ if (targetClass.isArray()) [ CD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_30 $$ return convertDataArrayToTargetArray(array, targetClass)[ FD ]
Line_19 $$ Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)-->Line_33 $$ if (elementType != null) [ FD ]
Line_18 $$ if (Collection.class.isAssignableFrom(targetClass)) -->Line_20 $$ if (elementType != null) [ CD ]
Line_19 $$ Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)-->Line_21 $$ return convertDataArrayToTargetCollection(array, targetClass, elementType)[ FD ]
Line_31 $$ if (Collection.class.isAssignableFrom(targetClass)) -->Line_33 $$ if (elementType != null) [ CD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_17 $$ return convertDataArrayToTargetArray(array, targetClass)[ FD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_19 $$ Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)[ FD ]
Line_15 $$ CompositeData[] array = (CompositeData[]) result-->Line_21 $$ return convertDataArrayToTargetCollection(array, targetClass, elementType)[ FD ]
Line_12 $$ Method fromMethod = targetClass.getMethod("from", CompositeData.class)-->Line_13 $$ return ReflectionUtils.invokeMethod(fromMethod, null, result)[ FD ]
Line_29 $$ if (targetClass.isArray()) -->Line_31 $$ if (Collection.class.isAssignableFrom(targetClass)) [ CD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_11 $$ if (result instanceof CompositeData) [ FD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_16 $$ if (targetClass.isArray()) [ FD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_18 $$ if (Collection.class.isAssignableFrom(targetClass)) [ FD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_3 $$ Class<?> targetClass = parameter.getParameterType()[ FD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_3 $$ Class<?> targetClass = parameter.getParameterType()[ CD ]
Line_15 $$ CompositeData[] array = (CompositeData[]) result-->Line_17 $$ return convertDataArrayToTargetArray(array, targetClass)[ FD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_34 $$ return convertDataArrayToTargetCollection(array, targetClass, elementType)[ FD ]
Line_24 $$ if (result instanceof TabularData) -->Line_25 $$ Method fromMethod = targetClass.getMethod("from", TabularData.class)[ CD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_25 $$ Method fromMethod = targetClass.getMethod("from", TabularData.class)[ FD ]
Line_20 $$ if (elementType != null) -->Line_21 $$ return convertDataArrayToTargetCollection(array, targetClass, elementType)[ CD ]
Line_11 $$ if (result instanceof CompositeData) -->Line_12 $$ Method fromMethod = targetClass.getMethod("from", CompositeData.class)[ CD ]
Line_14 $$ if (result instanceof CompositeData[]) -->Line_15 $$ CompositeData[] array = (CompositeData[]) result[ CD ]
Line_12 $$ Method fromMethod = targetClass.getMethod("from", CompositeData.class)-->Line_26 $$ return ReflectionUtils.invokeMethod(fromMethod, null, result)[ FD ]
Line_19 $$ Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)-->Line_34 $$ return convertDataArrayToTargetCollection(array, targetClass, elementType)[ FD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_8 $$ if (ClassUtils.isAssignableValue(targetClass, result)) [ FD ]
Line_29 $$ if (targetClass.isArray()) -->Line_30 $$ return convertDataArrayToTargetArray(array, targetClass)[ CD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_5 $$ if (result == null) [ FD ]
Line_16 $$ if (targetClass.isArray()) -->Line_17 $$ return convertDataArrayToTargetArray(array, targetClass)[ CD ]
Line_5 $$ if (result == null) -->Line_6 $$ return null[ CD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_24 $$ if (result instanceof TabularData) [ FD ]
Line_31 $$ if (Collection.class.isAssignableFrom(targetClass)) -->Line_32 $$ Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)[ CD ]
Line_24 $$ if (result instanceof TabularData) -->Line_27 $$ if (result instanceof TabularData[]) [ CD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_40 $$ throw new InvocationFailureException("Could not obtain 'from(CompositeData)' / 'from(TabularData)' method on target type [" + targetClass.getName() + "] for conversion of MXBean data structure [" + result + "]")[ FD ]
Line_11 $$ if (result instanceof CompositeData) -->Line_13 $$ return ReflectionUtils.invokeMethod(fromMethod, null, result)[ CD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_31 $$ if (Collection.class.isAssignableFrom(targetClass)) [ FD ]
Line_14 $$ if (result instanceof CompositeData[]) -->Line_16 $$ if (targetClass.isArray()) [ CD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_27 $$ if (result instanceof TabularData[]) [ FD ]
Line_24 $$ if (result instanceof TabularData) -->Line_26 $$ return ReflectionUtils.invokeMethod(fromMethod, null, result)[ CD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_29 $$ if (targetClass.isArray()) [ FD ]
Line_14 $$ if (result instanceof CompositeData[]) -->Line_24 $$ if (result instanceof TabularData) [ CD ]
Line_33 $$ if (elementType != null) -->Line_34 $$ return convertDataArrayToTargetCollection(array, targetClass, elementType)[ CD ]
Line_18 $$ if (Collection.class.isAssignableFrom(targetClass)) -->Line_19 $$ Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)[ CD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_12 $$ Method fromMethod = targetClass.getMethod("from", CompositeData.class)[ FD ]
Line_15 $$ CompositeData[] array = (CompositeData[]) result-->Line_34 $$ return convertDataArrayToTargetCollection(array, targetClass, elementType)[ FD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_13 $$ return ReflectionUtils.invokeMethod(fromMethod, null, result)[ FD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_14 $$ if (result instanceof CompositeData[]) [ FD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_21 $$ return convertDataArrayToTargetCollection(array, targetClass, elementType)[ FD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_26 $$ return ReflectionUtils.invokeMethod(fromMethod, null, result)[ FD ]
Line_2 $$ protected Object convertResultValueIfNecessary(Object result, MethodParameter parameter) -->Line_32 $$ Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)[ FD ]
Line_15 $$ CompositeData[] array = (CompositeData[]) result-->Line_30 $$ return convertDataArrayToTargetArray(array, targetClass)[ FD ]
Line_3 $$ Class<?> targetClass = parameter.getParameterType()-->Line_38 $$ throw new InvocationFailureException("Incompatible result value [" + result + "] for target type [" + targetClass.getName() + "]")[ FD ]
Line_11 $$ if (result instanceof CompositeData) -->Line_14 $$ if (result instanceof CompositeData[]) [ CD ]
Line_19 $$ Class<?> elementType = GenericCollectionTypeResolver.getCollectionParameterType(parameter)-->Line_20 $$ if (elementType != null) [ FD ]
