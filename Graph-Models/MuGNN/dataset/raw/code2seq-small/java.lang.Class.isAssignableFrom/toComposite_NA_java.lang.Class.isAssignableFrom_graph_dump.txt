Line_2 $$ public <T> NotationParser<CharSequence, T> toComposite(Class<T> targetType) throws OptionValidationException -->Line_4 $$ if (targetType == Void.TYPE) [ FD ]
Line_7 $$ if (targetType.isAssignableFrom(String.class)) -->Line_8 $$ return Cast.uncheckedCast(new NoDescriptionValuesJustReturningParser())[ CD ]
Line_2 $$ public <T> NotationParser<CharSequence, T> toComposite(Class<T> targetType) throws OptionValidationException -->Line_10 $$ if (targetType.isEnum()) [ CD ]
Line_2 $$ public <T> NotationParser<CharSequence, T> toComposite(Class<T> targetType) throws OptionValidationException -->Line_7 $$ if (targetType.isAssignableFrom(String.class)) [ FD ]
Line_10 $$ if (targetType.isEnum()) -->Line_12 $$ return new NotationConverterToNotationParserAdapter<CharSequence, T>(converter)[ CD ]
Line_2 $$ public <T> NotationParser<CharSequence, T> toComposite(Class<T> targetType) throws OptionValidationException -->Line_11 $$ NotationConverter<CharSequence, T> converter = Cast.uncheckedCast(new EnumFromCharSequenceNotationParser<Enum>(targetType.asSubclass(Enum.class)))[ FD ]
Line_2 $$ public <T> NotationParser<CharSequence, T> toComposite(Class<T> targetType) throws OptionValidationException -->Line_4 $$ if (targetType == Void.TYPE) [ CD ]
Line_2 $$ public <T> NotationParser<CharSequence, T> toComposite(Class<T> targetType) throws OptionValidationException -->Line_10 $$ if (targetType.isEnum()) [ FD ]
Line_10 $$ if (targetType.isEnum()) -->Line_11 $$ NotationConverter<CharSequence, T> converter = Cast.uncheckedCast(new EnumFromCharSequenceNotationParser<Enum>(targetType.asSubclass(Enum.class)))[ CD ]
Line_2 $$ public <T> NotationParser<CharSequence, T> toComposite(Class<T> targetType) throws OptionValidationException -->Line_7 $$ if (targetType.isAssignableFrom(String.class)) [ CD ]
Line_2 $$ public <T> NotationParser<CharSequence, T> toComposite(Class<T> targetType) throws OptionValidationException -->Line_14 $$ throw new OptionValidationException(String.format("Don't know how to convert strings to type '%s'.", targetType.getName()))[ FD ]
Line_4 $$ if (targetType == Void.TYPE) -->Line_5 $$ return new UnsupportedNotationParser<T>()[ CD ]
