Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_3 $$ final ArrayList<T> nodes = new ArrayList<T>()[ CD ]
Line_8 $$ new Object() -->Line_12 $$ if (node.isChecked() && userObject != null && nodeType.isAssignableFrom(userObject.getClass())) [ FD ]
Line_12 $$ if (node.isChecked() && userObject != null && nodeType.isAssignableFrom(userObject.getClass())) -->Line_13 $$ final T value = (T) userObject[ CD ]
Line_19 $$ for (int i = 0; i < node.getChildCount(); i++) -->Line_20 $$ final TreeNode child = node.getChildAt(i)[ CD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_5 $$ if (!(root instanceof CheckedTreeNode)) [ CD ]
Line_3 $$ final ArrayList<T> nodes = new ArrayList<T>()-->Line_16 $$ nodes.add(value)[ FD ]
Line_20 $$ final TreeNode child = node.getChildAt(i)-->Line_21 $$ if (child instanceof CheckedTreeNode) [ FD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_4 $$ final Object root = model.getRoot()[ CD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_12 $$ if (node.isChecked() && userObject != null && nodeType.isAssignableFrom(userObject.getClass())) [ FD ]
Line_3 $$ final ArrayList<T> nodes = new ArrayList<T>()-->Line_29 $$ nodes.toArray(result)[ FD ]
Line_10 $$ if (node.isLeaf()) -->Line_19 $$ for (int i = 0; i < node.getChildCount(); i++) [ CD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_14 $$ if (filter != null && !filter.accept(value))[ FD ]
Line_11 $$ Object userObject = node.getUserObject()-->Line_12 $$ if (node.isChecked() && userObject != null && nodeType.isAssignableFrom(userObject.getClass())) [ FD ]
Line_10 $$ if (node.isLeaf()) -->Line_11 $$ Object userObject = node.getUserObject()[ CD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_4 $$ final Object root = model.getRoot()[ FD ]
Line_3 $$ final ArrayList<T> nodes = new ArrayList<T>()-->Line_28 $$ T[] result = (T[]) Array.newInstance(nodeType, nodes.size())[ FD ]
Line_21 $$ if (child instanceof CheckedTreeNode) -->Line_22 $$ collect((CheckedTreeNode) child)[ CD ]
Line_13 $$ final T value = (T) userObject-->Line_16 $$ nodes.add(value)[ FD ]
Line_19 $$ for (int i = 0; i < node.getChildCount(); i++) -->Line_21 $$ if (child instanceof CheckedTreeNode) [ CD ]
Line_10 $$ if (node.isLeaf()) -->Line_12 $$ if (node.isChecked() && userObject != null && nodeType.isAssignableFrom(userObject.getClass())) [ CD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_28 $$ T[] result = (T[]) Array.newInstance(nodeType, nodes.size())[ FD ]
Line_12 $$ if (node.isChecked() && userObject != null && nodeType.isAssignableFrom(userObject.getClass())) -->Line_16 $$ nodes.add(value)[ CD ]
Line_13 $$ final T value = (T) userObject-->Line_14 $$ if (filter != null && !filter.accept(value))[ FD ]
Line_4 $$ final Object root = model.getRoot()-->Line_6 $$ throw new IllegalStateException("The root must be instance of the " + CheckedTreeNode.class.getName() + ": " + root.getClass().getName())[ FD ]
Line_8 $$ new Object() -->Line_10 $$ if (node.isLeaf()) [ FD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_8 $$ new Object() [ CD ]
Line_8 $$ new Object() -->Line_19 $$ for (int i = 0; i < node.getChildCount(); i++) [ FD ]
Line_8 $$ new Object() -->Line_10 $$ if (node.isLeaf()) [ CD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_30 $$ return result[ CD ]
Line_8 $$ new Object() -->Line_20 $$ final TreeNode child = node.getChildAt(i)[ FD ]
Line_2 $$ public static <T> T[] getCheckedNodes(final Class<T> nodeType, @Nullable final Tree.NodeFilter<T> filter, final TreeModel model) -->Line_29 $$ nodes.toArray(result)[ CD ]
Line_12 $$ if (node.isChecked() && userObject != null && nodeType.isAssignableFrom(userObject.getClass())) -->Line_14 $$ if (filter != null && !filter.accept(value))[ CD ]
Line_8 $$ new Object() -->Line_11 $$ Object userObject = node.getUserObject()[ FD ]
Line_19 $$ for (int i = 0; i < node.getChildCount(); i++) -->Line_20 $$ final TreeNode child = node.getChildAt(i)[ FD ]
Line_14 $$ if (filter != null && !filter.accept(value))-->Line_15 $$ return[ CD ]
