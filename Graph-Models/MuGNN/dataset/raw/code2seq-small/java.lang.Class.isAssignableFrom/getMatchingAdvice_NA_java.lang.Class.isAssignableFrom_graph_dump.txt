Line_2 $$ private <A> List<A> getMatchingAdvice(MethodParameter parameter, Class<? extends A> adviceType) -->Line_4 $$ if (CollectionUtils.isEmpty(availableAdvice)) [ CD ]
Line_3 $$ List<Object> availableAdvice = getAdvice(adviceType)-->Line_7 $$ List<A> result = new ArrayList<A>(availableAdvice.size())[ FD ]
Line_8 $$ for (Object advice : availableAdvice) -->Line_14 $$ advice = adviceBean.resolveBean()[ FD ]
Line_2 $$ private <A> List<A> getMatchingAdvice(MethodParameter parameter, Class<? extends A> adviceType) -->Line_7 $$ List<A> result = new ArrayList<A>(availableAdvice.size())[ CD ]
Line_2 $$ private <A> List<A> getMatchingAdvice(MethodParameter parameter, Class<? extends A> adviceType) -->Line_16 $$ if (adviceType.isAssignableFrom(advice.getClass())) [ FD ]
Line_9 $$ if (advice instanceof ControllerAdviceBean) -->Line_14 $$ advice = adviceBean.resolveBean()[ CD ]
Line_7 $$ List<A> result = new ArrayList<A>(availableAdvice.size())-->Line_17 $$ result.add((A) advice)[ FD ]
Line_2 $$ private <A> List<A> getMatchingAdvice(MethodParameter parameter, Class<? extends A> adviceType) -->Line_3 $$ List<Object> availableAdvice = getAdvice(adviceType)[ FD ]
Line_10 $$ ControllerAdviceBean adviceBean = (ControllerAdviceBean) advice-->Line_11 $$ if (!adviceBean.isApplicableToBeanType(parameter.getContainingClass())) [ FD ]
Line_16 $$ if (adviceType.isAssignableFrom(advice.getClass())) -->Line_17 $$ result.add((A) advice)[ CD ]
Line_8 $$ for (Object advice : availableAdvice) -->Line_16 $$ if (adviceType.isAssignableFrom(advice.getClass())) [ FD ]
Line_2 $$ private <A> List<A> getMatchingAdvice(MethodParameter parameter, Class<? extends A> adviceType) -->Line_20 $$ return result[ CD ]
Line_4 $$ if (CollectionUtils.isEmpty(availableAdvice)) -->Line_5 $$ return Collections.emptyList()[ CD ]
Line_14 $$ advice = adviceBean.resolveBean()-->Line_16 $$ if (adviceType.isAssignableFrom(advice.getClass())) [ FD ]
Line_9 $$ if (advice instanceof ControllerAdviceBean) -->Line_11 $$ if (!adviceBean.isApplicableToBeanType(parameter.getContainingClass())) [ CD ]
Line_9 $$ if (advice instanceof ControllerAdviceBean) -->Line_10 $$ ControllerAdviceBean adviceBean = (ControllerAdviceBean) advice[ CD ]
Line_3 $$ List<Object> availableAdvice = getAdvice(adviceType)-->Line_4 $$ if (CollectionUtils.isEmpty(availableAdvice)) [ FD ]
Line_10 $$ ControllerAdviceBean adviceBean = (ControllerAdviceBean) advice-->Line_14 $$ advice = adviceBean.resolveBean()[ FD ]
Line_2 $$ private <A> List<A> getMatchingAdvice(MethodParameter parameter, Class<? extends A> adviceType) -->Line_3 $$ List<Object> availableAdvice = getAdvice(adviceType)[ CD ]
Line_2 $$ private <A> List<A> getMatchingAdvice(MethodParameter parameter, Class<? extends A> adviceType) -->Line_11 $$ if (!adviceBean.isApplicableToBeanType(parameter.getContainingClass())) [ FD ]
Line_8 $$ for (Object advice : availableAdvice) -->Line_9 $$ if (advice instanceof ControllerAdviceBean) [ FD ]
