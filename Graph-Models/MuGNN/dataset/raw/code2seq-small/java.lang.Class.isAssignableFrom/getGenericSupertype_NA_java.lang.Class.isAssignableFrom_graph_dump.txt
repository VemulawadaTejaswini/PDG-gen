Line_8 $$ for (int i = 0, length = interfaces.length; i < length; i++) -->Line_9 $$ if (interfaces[i] == toResolve) [ CD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_16 $$ if (!rawType.isInterface()) [ CD ]
Line_18 $$ Class<?> rawSupertype = rawType.getSuperclass()-->Line_21 $$ if (toResolve.isAssignableFrom(rawSupertype)) [ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_21 $$ if (toResolve.isAssignableFrom(rawSupertype)) [ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_24 $$ rawType = rawSupertype[ FD ]
Line_9 $$ if (interfaces[i] == toResolve) -->Line_10 $$ return rawType.getGenericInterfaces()[i][ CD ]
Line_24 $$ rawType = rawSupertype-->Line_20 $$ return rawType.getGenericSuperclass()[ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_20 $$ return rawType.getGenericSuperclass()[ FD ]
Line_6 $$ if (toResolve.isInterface()) -->Line_8 $$ for (int i = 0, length = interfaces.length; i < length; i++) [ CD ]
Line_17 $$ while (rawType != Object.class) -->Line_19 $$ if (rawSupertype == toResolve) [ CD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_6 $$ if (toResolve.isInterface()) [ CD ]
Line_16 $$ if (!rawType.isInterface()) -->Line_17 $$ while (rawType != Object.class) [ CD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_6 $$ if (toResolve.isInterface()) [ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_7 $$ Class[] interfaces = rawType.getInterfaces()[ FD ]
Line_18 $$ Class<?> rawSupertype = rawType.getSuperclass()-->Line_19 $$ if (rawSupertype == toResolve) [ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_3 $$ if (toResolve == rawType) [ CD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_10 $$ return rawType.getGenericInterfaces()[i][ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_17 $$ while (rawType != Object.class) [ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_11 $$ if (toResolve.isAssignableFrom(interfaces[i])) [ FD ]
Line_17 $$ while (rawType != Object.class) -->Line_18 $$ Class<?> rawSupertype = rawType.getSuperclass()[ CD ]
Line_3 $$ if (toResolve == rawType) -->Line_4 $$ return type[ CD ]
Line_19 $$ if (rawSupertype == toResolve) -->Line_21 $$ if (toResolve.isAssignableFrom(rawSupertype)) [ CD ]
Line_24 $$ rawType = rawSupertype-->Line_17 $$ while (rawType != Object.class) [ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_18 $$ Class<?> rawSupertype = rawType.getSuperclass()[ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_27 $$ return toResolve[ CD ]
Line_6 $$ if (toResolve.isInterface()) -->Line_7 $$ Class[] interfaces = rawType.getInterfaces()[ CD ]
Line_19 $$ if (rawSupertype == toResolve) -->Line_20 $$ return rawType.getGenericSuperclass()[ CD ]
Line_11 $$ if (toResolve.isAssignableFrom(interfaces[i])) -->Line_12 $$ return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve)[ CD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_22 $$ return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve)[ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_3 $$ if (toResolve == rawType) [ FD ]
Line_24 $$ rawType = rawSupertype-->Line_22 $$ return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve)[ FD ]
Line_21 $$ if (toResolve.isAssignableFrom(rawSupertype)) -->Line_22 $$ return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve)[ CD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_19 $$ if (rawSupertype == toResolve) [ FD ]
Line_17 $$ while (rawType != Object.class) -->Line_24 $$ rawType = rawSupertype[ CD ]
Line_9 $$ if (interfaces[i] == toResolve) -->Line_11 $$ if (toResolve.isAssignableFrom(interfaces[i])) [ CD ]
Line_18 $$ Class<?> rawSupertype = rawType.getSuperclass()-->Line_22 $$ return getGenericSupertype(rawType.getGenericSuperclass(), rawSupertype, toResolve)[ FD ]
Line_18 $$ Class<?> rawSupertype = rawType.getSuperclass()-->Line_24 $$ rawType = rawSupertype[ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_12 $$ return getGenericSupertype(rawType.getGenericInterfaces()[i], interfaces[i], toResolve)[ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_9 $$ if (interfaces[i] == toResolve) [ FD ]
Line_2 $$ public static Type getGenericSupertype(Type type, Class<?> rawType, Class<?> toResolve) -->Line_16 $$ if (!rawType.isInterface()) [ FD ]
Line_24 $$ rawType = rawSupertype-->Line_18 $$ Class<?> rawSupertype = rawType.getSuperclass()[ FD ]
