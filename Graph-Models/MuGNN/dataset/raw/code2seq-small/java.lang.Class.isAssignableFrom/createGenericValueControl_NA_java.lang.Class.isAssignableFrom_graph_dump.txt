Line_4 $$ final Class rawType = ReflectionUtil.getRawType(type)-->Line_5 $$ if (type instanceof Class && Enum.class.isAssignableFrom(rawType)) [ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_3 $$ final DomStringWrapper stringWrapper = new DomStringWrapper(element)[ CD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_26 $$ return getDomUIFactory().createTextControl(stringWrapper, commitOnEveryChange)[ CD ]
Line_23 $$ final BaseControl customControl = getDomUIFactory().createCustomControl(type, stringWrapper, commitOnEveryChange)-->Line_24 $$ if (customControl != null)[ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_23 $$ final BaseControl customControl = getDomUIFactory().createCustomControl(type, stringWrapper, commitOnEveryChange)[ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_8 $$ if (DomElement.class.isAssignableFrom(rawType)) [ CD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_17 $$ if (type.equals(boolean.class) || type.equals(Boolean.class)) [ CD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_10 $$ final Required annotation = element.getAnnotation(Required.class)[ FD ]
Line_3 $$ final DomStringWrapper stringWrapper = new DomStringWrapper(element)-->Line_23 $$ final BaseControl customControl = getDomUIFactory().createCustomControl(type, stringWrapper, commitOnEveryChange)[ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_4 $$ final Class rawType = ReflectionUtil.getRawType(type)[ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_21 $$ return getDomUIFactory().createTextControl(wrapper, commitOnEveryChange)[ FD ]
Line_10 $$ final Required annotation = element.getAnnotation(Required.class)-->Line_11 $$ if (annotation == null || !annotation.value() || !annotation.nonEmpty()) [ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_26 $$ return getDomUIFactory().createTextControl(stringWrapper, commitOnEveryChange)[ FD ]
Line_4 $$ final Class rawType = ReflectionUtil.getRawType(type)-->Line_8 $$ if (DomElement.class.isAssignableFrom(rawType)) [ FD ]
Line_8 $$ if (DomElement.class.isAssignableFrom(rawType)) -->Line_14 $$ return control[ CD ]
Line_8 $$ if (DomElement.class.isAssignableFrom(rawType)) -->Line_11 $$ if (annotation == null || !annotation.value() || !annotation.nonEmpty()) [ CD ]
Line_16 $$ final DomFixedWrapper wrapper = new DomFixedWrapper(element)-->Line_21 $$ return getDomUIFactory().createTextControl(wrapper, commitOnEveryChange)[ FD ]
Line_9 $$ final ComboControl control = new ComboControl(element)-->Line_12 $$ control.setNullable(true)[ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_24 $$ if (customControl != null)[ CD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_16 $$ final DomFixedWrapper wrapper = new DomFixedWrapper(element)[ CD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_20 $$ if (type.equals(String.class)) [ CD ]
Line_5 $$ if (type instanceof Class && Enum.class.isAssignableFrom(rawType)) -->Line_6 $$ return new ComboControl(stringWrapper, rawType)[ CD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_4 $$ final Class rawType = ReflectionUtil.getRawType(type)[ CD ]
Line_24 $$ if (customControl != null)-->Line_25 $$ return customControl[ CD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_20 $$ if (type.equals(String.class)) [ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_17 $$ if (type.equals(boolean.class) || type.equals(Boolean.class)) [ FD ]
Line_8 $$ if (DomElement.class.isAssignableFrom(rawType)) -->Line_10 $$ final Required annotation = element.getAnnotation(Required.class)[ CD ]
Line_3 $$ final DomStringWrapper stringWrapper = new DomStringWrapper(element)-->Line_26 $$ return getDomUIFactory().createTextControl(stringWrapper, commitOnEveryChange)[ FD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_23 $$ final BaseControl customControl = getDomUIFactory().createCustomControl(type, stringWrapper, commitOnEveryChange)[ CD ]
Line_20 $$ if (type.equals(String.class)) -->Line_21 $$ return getDomUIFactory().createTextControl(wrapper, commitOnEveryChange)[ CD ]
Line_2 $$ private static BaseControl createGenericValueControl(final Type type, final GenericDomValue<?> element, boolean commitOnEveryChange) -->Line_5 $$ if (type instanceof Class && Enum.class.isAssignableFrom(rawType)) [ CD ]
Line_8 $$ if (DomElement.class.isAssignableFrom(rawType)) -->Line_9 $$ final ComboControl control = new ComboControl(element)[ CD ]
Line_17 $$ if (type.equals(boolean.class) || type.equals(Boolean.class)) -->Line_18 $$ return new BooleanControl(wrapper)[ CD ]
Line_11 $$ if (annotation == null || !annotation.value() || !annotation.nonEmpty()) -->Line_12 $$ control.setNullable(true)[ CD ]
