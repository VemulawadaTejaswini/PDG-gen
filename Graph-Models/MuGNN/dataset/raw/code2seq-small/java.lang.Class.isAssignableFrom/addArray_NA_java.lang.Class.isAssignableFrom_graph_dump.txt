Line_23 $$ typeName = "wchar"-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_20 $$ typeName = "boolean"-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_16 $$ String moduleName-->Line_46 $$ moduleName = "org.omg.boxedRMI"[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_10 $$ Class compType = cls[ CD ]
Line_10 $$ Class compType = cls-->Line_55 $$ if (compType == java.io.Serializable.class)[ FD ]
Line_26 $$ typeName = "octet"-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_70 $$ types[dimensions - 1] = cls[ FD ]
Line_73 $$ Class type = types[i]-->Line_77 $$ String id = Util.getIRIdentifierOfClass(type)[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_10 $$ Class compType = cls-->Line_66 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ FD ]
Line_17 $$ TypeCode typeCode-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_32 $$ typeName = "long"-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_16 $$ String moduleName[ CD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_76 $$ if (vbDef == null) -->Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)[ CD ]
Line_11 $$ do -->Line_12 $$ compType = compType.getComponentType()[ CD ]
Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_5 $$ ValueBoxDefImpl vbDef[ CD ]
Line_29 $$ typeName = "short"-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_31 $$ if (compType == Integer.TYPE) -->Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ CD ]
Line_10 $$ Class compType = cls-->Line_37 $$ if (compType == Float.TYPE) [ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_23 $$ typeName = "wchar"-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_69 $$ Class[] types = new Class[dimensions][ CD ]
Line_10 $$ Class compType = cls-->Line_59 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))[ FD ]
Line_15 $$ String typeName-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_61 $$ if (Exception.class.isAssignableFrom(compType))[ FD ]
Line_10 $$ Class compType = cls-->Line_40 $$ if (compType == Double.TYPE) [ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_76 $$ if (vbDef == null) -->Line_82 $$ addTypeCode(type, vbDef.type())[ CD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_20 $$ typeName = "boolean"-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_10 $$ Class compType = cls-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_10 $$ Class compType = cls-->Line_61 $$ if (Exception.class.isAssignableFrom(compType))[ FD ]
Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_20 $$ typeName = "boolean"-->Line_38 $$ typeName = "float"[ FD ]
Line_23 $$ typeName = "wchar"-->Line_35 $$ typeName = "long_long"[ FD ]
Line_17 $$ TypeCode typeCode-->Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)[ FD ]
Line_17 $$ TypeCode typeCode-->Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_29 $$ typeName = "short"-->Line_41 $$ typeName = "double"[ FD ]
Line_48 $$ typeCode = getTypeCode(compType)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_57 $$ if (compType == java.io.Externalizable.class)-->Line_59 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))[ CD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_7 $$ if (vbDef != null)[ FD ]
Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_88 $$ typeCode = vbDef.type()-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_37 $$ if (compType == Float.TYPE) -->Line_40 $$ if (compType == Double.TYPE) [ CD ]
Line_23 $$ typeName = "wchar"-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_56 $$ typeName = getJavaIoSerializable().name()-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_15 $$ String typeName-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_38 $$ typeName = "float"-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_76 $$ if (vbDef == null) -->Line_85 $$ arrayMap.put(type, vbDef)[ CD ]
Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_10 $$ Class compType = cls-->Line_28 $$ if (compType == Short.TYPE) [ FD ]
Line_23 $$ typeName = "wchar"-->Line_41 $$ typeName = "double"[ FD ]
Line_35 $$ typeName = "long_long"-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_23 $$ typeName = "wchar"-->Line_32 $$ typeName = "long"[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_53 $$ if (compType == java.lang.Class.class)[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_4 $$ throw IIOPLogger.ROOT_LOGGER.classIsNotArray(cls.getName())[ FD ]
Line_77 $$ String id = Util.getIRIdentifierOfClass(type)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_10 $$ Class compType = cls-->Line_12 $$ compType = compType.getComponentType()[ FD ]
Line_38 $$ typeName = "float"-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_44 $$ throw IIOPLogger.ROOT_LOGGER.unknownPrimitiveType(compType.getName())[ FD ]
Line_32 $$ typeName = "long"-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_35 $$ typeName = "long_long"-->Line_41 $$ typeName = "double"[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_18 $$ if (compType.isPrimitive()) [ FD ]
Line_10 $$ Class compType = cls-->Line_44 $$ throw IIOPLogger.ROOT_LOGGER.unknownPrimitiveType(compType.getName())[ FD ]
Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_26 $$ typeName = "octet"-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_10 $$ Class compType = cls-->Line_31 $$ if (compType == Integer.TYPE) [ FD ]
Line_20 $$ typeName = "boolean"-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_78 $$ SequenceDefImpl sdi = new SequenceDefImpl(typeCode, impl)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_38 $$ typeName = "float"-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_9 $$ int dimensions = 0-->Line_13 $$ ++dimensions[ FD ]
Line_26 $$ typeName = "octet"-->Line_29 $$ typeName = "short"[ FD ]
Line_15 $$ String typeName-->Line_41 $$ typeName = "double"[ FD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_76 $$ if (vbDef == null) -->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ CD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_76 $$ if (vbDef == null) [ FD ]
Line_29 $$ typeName = "short"-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_17 $$ TypeCode typeCode-->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_29 $$ typeName = "short"-->Line_32 $$ typeName = "long"[ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_10 $$ Class compType = cls-->Line_19 $$ if (compType == Boolean.TYPE) [ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_23 $$ typeName = "wchar"-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_88 $$ typeCode = vbDef.type()-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_34 $$ if (compType == Long.TYPE) -->Line_35 $$ typeName = "long_long"[ CD ]
Line_17 $$ TypeCode typeCode-->Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_25 $$ if (compType == Byte.TYPE) -->Line_26 $$ typeName = "octet"[ CD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_85 $$ arrayMap.put(type, vbDef)[ FD ]
Line_41 $$ typeName = "double"-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_56 $$ typeName = getJavaIoSerializable().name()-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_49 $$ if (compType == java.lang.String.class)-->Line_51 $$ if (compType == java.lang.Object.class)[ CD ]
Line_79 $$ String name = "seq" + (i + 1) + "_" + typeName-->Line_83 $$ m.add(name, vbDef)[ FD ]
Line_20 $$ typeName = "boolean"-->Line_29 $$ typeName = "short"[ FD ]
Line_29 $$ typeName = "short"-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_17 $$ TypeCode typeCode[ CD ]
Line_12 $$ compType = compType.getComponentType()-->Line_51 $$ if (compType == java.lang.Object.class)[ FD ]
Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_82 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_23 $$ typeName = "wchar"-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_50 $$ typeName = getJavaLangString().name()-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_38 $$ typeName = "float"-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_15 $$ String typeName-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ FD ]
Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_34 $$ if (compType == Long.TYPE) [ FD ]
Line_15 $$ String typeName-->Line_23 $$ typeName = "wchar"[ FD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)[ FD ]
Line_16 $$ String moduleName-->Line_68 $$ ModuleDefImpl m = ensurePackageExists(moduleName)[ FD ]
Line_20 $$ typeName = "boolean"-->Line_32 $$ typeName = "long"[ FD ]
Line_71 $$ for (int i = dimensions - 2; i >= 0; --i) types[i] = types[i + 1].getComponentType()-->Line_72 $$ for (int i = 0; i < dimensions; ++i) [ FD ]
Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_25 $$ if (compType == Byte.TYPE) -->Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)[ CD ]
Line_23 $$ typeName = "wchar"-->Line_38 $$ typeName = "float"[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)[ CD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)[ FD ]
Line_31 $$ if (compType == Integer.TYPE) -->Line_32 $$ typeName = "long"[ CD ]
Line_57 $$ if (compType == java.io.Externalizable.class)-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ CD ]
Line_50 $$ typeName = getJavaLangString().name()-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)[ FD ]
Line_25 $$ if (compType == Byte.TYPE) -->Line_28 $$ if (compType == Short.TYPE) [ CD ]
Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)[ FD ]
Line_50 $$ typeName = getJavaLangString().name()-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_50 $$ typeName = getJavaLangString().name()-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_18 $$ if (compType.isPrimitive()) -->Line_19 $$ if (compType == Boolean.TYPE) [ CD ]
Line_32 $$ typeName = "long"-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_32 $$ typeName = "long"-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_56 $$ typeName = getJavaIoSerializable().name()-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_32 $$ typeName = "long"-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_55 $$ if (compType == java.io.Serializable.class)[ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_37 $$ if (compType == Float.TYPE) [ FD ]
Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_7 $$ if (vbDef != null)[ CD ]
Line_15 $$ String typeName-->Line_32 $$ typeName = "long"[ FD ]
Line_46 $$ moduleName = "org.omg.boxedRMI"-->Line_68 $$ ModuleDefImpl m = ensurePackageExists(moduleName)[ FD ]
Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_83 $$ m.add(name, vbDef)[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_10 $$ Class compType = cls-->Line_22 $$ if (compType == Character.TYPE) [ FD ]
Line_26 $$ typeName = "octet"-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_58 $$ typeName = getJavaIoExternalizable().name()-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_15 $$ String typeName-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_35 $$ typeName = "long_long"-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_23 $$ typeName = "wchar"-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_26 $$ typeName = "octet"-->Line_35 $$ typeName = "long_long"[ FD ]
Line_18 $$ if (compType.isPrimitive()) -->Line_66 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ CD ]
Line_10 $$ Class compType = cls-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_26 $$ typeName = "octet"-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_52 $$ typeName = getJavaLang_Object().name()-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_83 $$ m.add(name, vbDef)[ FD ]
Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_77 $$ String id = Util.getIRIdentifierOfClass(type)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_83 $$ m.add(name, vbDef)[ FD ]
Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_59 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))-->Line_61 $$ if (Exception.class.isAssignableFrom(compType))[ CD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_11 $$ do [ CD ]
Line_72 $$ for (int i = 0; i < dimensions; ++i) -->Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)[ CD ]
Line_12 $$ compType = compType.getComponentType()-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_31 $$ if (compType == Integer.TYPE) -->Line_34 $$ if (compType == Long.TYPE) [ CD ]
Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_20 $$ typeName = "boolean"-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_29 $$ typeName = "short"-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_86 $$ typeCode = boxTypeCode-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_26 $$ typeName = "octet"-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_26 $$ typeName = "octet"-->Line_38 $$ typeName = "float"[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_68 $$ ModuleDefImpl m = ensurePackageExists(moduleName)[ CD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_82 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_76 $$ if (vbDef == null) [ FD ]
Line_38 $$ typeName = "float"-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_48 $$ typeCode = getTypeCode(compType)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_82 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_58 $$ typeName = getJavaIoExternalizable().name()-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_59 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ CD ]
Line_10 $$ Class compType = cls-->Line_57 $$ if (compType == java.io.Externalizable.class)[ FD ]
Line_56 $$ typeName = getJavaIoSerializable().name()-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_52 $$ typeName = getJavaLang_Object().name()-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_10 $$ Class compType = cls-->Line_49 $$ if (compType == java.lang.String.class)[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_32 $$ typeName = "long"-->Line_41 $$ typeName = "double"[ FD ]
Line_35 $$ typeName = "long_long"-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_32 $$ typeName = "long"-->Line_38 $$ typeName = "float"[ FD ]
Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_29 $$ typeName = "short"-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_3 $$ if (!cls.isArray())[ FD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_76 $$ if (vbDef == null) [ FD ]
Line_17 $$ TypeCode typeCode-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_10 $$ Class compType = cls-->Line_25 $$ if (compType == Byte.TYPE) [ FD ]
Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_73 $$ Class type = types[i]-->Line_82 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_29 $$ typeName = "short"-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_83 $$ m.add(name, vbDef)[ FD ]
Line_17 $$ TypeCode typeCode-->Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ FD ]
Line_20 $$ typeName = "boolean"-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_50 $$ typeName = getJavaLangString().name()-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_82 $$ addTypeCode(type, vbDef.type())[ FD ]
Line_61 $$ if (Exception.class.isAssignableFrom(compType))-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ CD ]
Line_37 $$ if (compType == Float.TYPE) -->Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ CD ]
Line_26 $$ typeName = "octet"-->Line_32 $$ typeName = "long"[ FD ]
Line_29 $$ typeName = "short"-->Line_35 $$ typeName = "long_long"[ FD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_7 $$ if (vbDef != null)[ FD ]
Line_52 $$ typeName = getJavaLang_Object().name()-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_22 $$ if (compType == Character.TYPE) -->Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)[ CD ]
Line_48 $$ typeCode = getTypeCode(compType)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_52 $$ typeName = getJavaLang_Object().name()-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_76 $$ if (vbDef == null) [ FD ]
Line_76 $$ if (vbDef == null) -->Line_79 $$ String name = "seq" + (i + 1) + "_" + typeName[ CD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_50 $$ typeName = getJavaLangString().name()-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_15 $$ String typeName-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_17 $$ TypeCode typeCode-->Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_53 $$ if (compType == java.lang.Class.class)-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ CD ]
Line_41 $$ typeName = "double"-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_26 $$ typeName = "octet"-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_88 $$ typeCode = vbDef.type()-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_28 $$ if (compType == Short.TYPE) [ FD ]
Line_40 $$ if (compType == Double.TYPE) -->Line_41 $$ typeName = "double"[ CD ]
Line_20 $$ typeName = "boolean"-->Line_35 $$ typeName = "long_long"[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_31 $$ if (compType == Integer.TYPE) [ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_10 $$ Class compType = cls-->Line_18 $$ if (compType.isPrimitive()) [ FD ]
Line_37 $$ if (compType == Float.TYPE) -->Line_38 $$ typeName = "float"[ CD ]
Line_26 $$ typeName = "octet"-->Line_41 $$ typeName = "double"[ FD ]
Line_17 $$ TypeCode typeCode-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_40 $$ if (compType == Double.TYPE) [ FD ]
Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_35 $$ typeName = "long_long"-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)[ FD ]
Line_28 $$ if (compType == Short.TYPE) -->Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ CD ]
Line_18 $$ if (compType.isPrimitive()) -->Line_49 $$ if (compType == java.lang.String.class)[ CD ]
Line_51 $$ if (compType == java.lang.Object.class)-->Line_52 $$ typeName = getJavaLang_Object().name()[ CD ]
Line_28 $$ if (compType == Short.TYPE) -->Line_31 $$ if (compType == Integer.TYPE) [ CD ]
Line_15 $$ String typeName-->Line_29 $$ typeName = "short"[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_20 $$ typeName = "boolean"-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_41 $$ typeName = "double"-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_50 $$ typeName = getJavaLangString().name()-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_29 $$ typeName = "short"-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_40 $$ if (compType == Double.TYPE) -->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ CD ]
Line_20 $$ typeName = "boolean"-->Line_23 $$ typeName = "wchar"[ FD ]
Line_32 $$ typeName = "long"-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_15 $$ String typeName-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_29 $$ typeName = "short"-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_35 $$ typeName = "long_long"-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_76 $$ if (vbDef == null) -->Line_88 $$ typeCode = vbDef.type()[ CD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_86 $$ typeCode = boxTypeCode-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_32 $$ typeName = "long"-->Line_35 $$ typeName = "long_long"[ FD ]
Line_32 $$ typeName = "long"-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_41 $$ typeName = "double"-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_11 $$ do -->Line_13 $$ ++dimensions[ CD ]
Line_16 $$ String moduleName-->Line_66 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ FD ]
Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_76 $$ if (vbDef == null) -->Line_83 $$ m.add(name, vbDef)[ CD ]
Line_9 $$ int dimensions = 0-->Line_72 $$ for (int i = 0; i < dimensions; ++i) [ FD ]
Line_10 $$ Class compType = cls-->Line_53 $$ if (compType == java.lang.Class.class)[ FD ]
Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_23 $$ typeName = "wchar"-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_10 $$ Class compType = cls-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_19 $$ if (compType == Boolean.TYPE) -->Line_20 $$ typeName = "boolean"[ CD ]
Line_19 $$ if (compType == Boolean.TYPE) -->Line_22 $$ if (compType == Character.TYPE) [ CD ]
Line_10 $$ Class compType = cls-->Line_51 $$ if (compType == java.lang.Object.class)[ FD ]
Line_35 $$ typeName = "long_long"-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_51 $$ if (compType == java.lang.Object.class)-->Line_53 $$ if (compType == java.lang.Class.class)[ CD ]
Line_18 $$ if (compType.isPrimitive()) -->Line_46 $$ moduleName = "org.omg.boxedRMI"[ CD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_26 $$ typeName = "octet"-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_10 $$ Class compType = cls-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_52 $$ typeName = getJavaLang_Object().name()-->Line_58 $$ typeName = getJavaIoExternalizable().name()[ FD ]
Line_18 $$ if (compType.isPrimitive()) -->Line_48 $$ typeCode = getTypeCode(compType)[ CD ]
Line_10 $$ Class compType = cls-->Line_34 $$ if (compType == Long.TYPE) [ FD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_85 $$ arrayMap.put(type, vbDef)[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)-->Line_85 $$ arrayMap.put(type, vbDef)[ FD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_15 $$ String typeName-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_35 $$ typeName = "long_long"-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_76 $$ if (vbDef == null) -->Line_77 $$ String id = Util.getIRIdentifierOfClass(type)[ CD ]
Line_73 $$ Class type = types[i]-->Line_85 $$ arrayMap.put(type, vbDef)[ FD ]
Line_41 $$ typeName = "double"-->Line_52 $$ typeName = getJavaLang_Object().name()[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_25 $$ if (compType == Byte.TYPE) [ FD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_18 $$ if (compType.isPrimitive()) [ CD ]
Line_12 $$ compType = compType.getComponentType()-->Line_49 $$ if (compType == java.lang.String.class)[ FD ]
Line_41 $$ typeName = "double"-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)[ FD ]
Line_23 $$ typeName = "wchar"-->Line_26 $$ typeName = "octet"[ FD ]
Line_29 $$ typeName = "short"-->Line_38 $$ typeName = "float"[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_23 $$ typeName = "wchar"-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_41 $$ typeName = "double"-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_38 $$ typeName = "float"-->Line_41 $$ typeName = "double"[ FD ]
Line_76 $$ if (vbDef == null) -->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ CD ]
Line_17 $$ TypeCode typeCode-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_55 $$ if (compType == java.io.Serializable.class)-->Line_56 $$ typeName = getJavaIoSerializable().name()[ CD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_15 $$ String typeName-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_34 $$ if (compType == Long.TYPE) -->Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ CD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_58 $$ typeName = getJavaIoExternalizable().name()-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_55 $$ if (compType == java.io.Serializable.class)-->Line_57 $$ if (compType == java.io.Externalizable.class)[ CD ]
Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)-->Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_15 $$ String typeName-->Line_38 $$ typeName = "float"[ FD ]
Line_26 $$ typeName = "octet"-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_9 $$ int dimensions = 0[ CD ]
Line_19 $$ if (compType == Boolean.TYPE) -->Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)[ CD ]
Line_17 $$ TypeCode typeCode-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_72 $$ for (int i = 0; i < dimensions; ++i) [ CD ]
Line_28 $$ if (compType == Short.TYPE) -->Line_29 $$ typeName = "short"[ CD ]
Line_76 $$ if (vbDef == null) -->Line_78 $$ SequenceDefImpl sdi = new SequenceDefImpl(typeCode, impl)[ CD ]
Line_61 $$ if (Exception.class.isAssignableFrom(compType))-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ CD ]
Line_32 $$ typeName = "long"-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_79 $$ String name = "seq" + (i + 1) + "_" + typeName-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_81 $$ vbDef = new ValueBoxDefImpl(id, name, "1.0", m, boxTypeCode, impl)-->Line_85 $$ arrayMap.put(type, vbDef)[ FD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_76 $$ if (vbDef == null) -->Line_86 $$ typeCode = boxTypeCode[ CD ]
Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_90 $$ return vbDef[ CD ]
Line_15 $$ String typeName-->Line_20 $$ typeName = "boolean"[ FD ]
Line_15 $$ String typeName-->Line_26 $$ typeName = "octet"[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_15 $$ String typeName[ CD ]
Line_52 $$ typeName = getJavaLang_Object().name()-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_10 $$ Class compType = cls-->Line_11 $$ do [ FD ]
Line_49 $$ if (compType == java.lang.String.class)-->Line_50 $$ typeName = getJavaLangString().name()[ CD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_35 $$ typeName = "long_long"-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_72 $$ for (int i = 0; i < dimensions; ++i) -->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ CD ]
Line_66 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()-->Line_68 $$ ModuleDefImpl m = ensurePackageExists(moduleName)[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_11 $$ do [ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_72 $$ for (int i = 0; i < dimensions; ++i) -->Line_73 $$ Class type = types[i][ CD ]
Line_21 $$ typeCode = orb.get_primitive_tc(TCKind.tk_boolean)-->Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)[ FD ]
Line_15 $$ String typeName-->Line_35 $$ typeName = "long_long"[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)[ FD ]
Line_72 $$ for (int i = 0; i < dimensions; ++i) -->Line_76 $$ if (vbDef == null) [ CD ]
Line_12 $$ compType = compType.getComponentType()-->Line_66 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ FD ]
Line_22 $$ if (compType == Character.TYPE) -->Line_23 $$ typeName = "wchar"[ CD ]
Line_12 $$ compType = compType.getComponentType()-->Line_59 $$ if (compType.isInterface() && !RmiIdlUtil.isAbstractValueType(compType))[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_22 $$ if (compType == Character.TYPE) [ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_3 $$ if (!cls.isArray())[ CD ]
Line_22 $$ if (compType == Character.TYPE) -->Line_25 $$ if (compType == Byte.TYPE) [ CD ]
Line_12 $$ compType = compType.getComponentType()-->Line_19 $$ if (compType == Boolean.TYPE) [ FD ]
Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()-->Line_65 $$ typeName = ((ValueDefImpl) valueMap.get(compType)).name()[ FD ]
Line_17 $$ TypeCode typeCode-->Line_48 $$ typeCode = getTypeCode(compType)[ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_6 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(cls)-->Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)[ FD ]
Line_73 $$ Class type = types[i]-->Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)[ FD ]
Line_48 $$ typeCode = getTypeCode(compType)-->Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)[ FD ]
Line_17 $$ TypeCode typeCode-->Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)[ FD ]
Line_30 $$ typeCode = orb.get_primitive_tc(TCKind.tk_short)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_53 $$ if (compType == java.lang.Class.class)-->Line_55 $$ if (compType == java.io.Serializable.class)[ CD ]
Line_34 $$ if (compType == Long.TYPE) -->Line_37 $$ if (compType == Float.TYPE) [ CD ]
Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_38 $$ typeName = "float"-->Line_63 $$ typeName = ((ExceptionDefImpl) exceptionMap.get(compType)).name()[ FD ]
Line_20 $$ typeName = "boolean"-->Line_26 $$ typeName = "octet"[ FD ]
Line_7 $$ if (vbDef != null)-->Line_8 $$ return vbDef[ CD ]
Line_35 $$ typeName = "long_long"-->Line_38 $$ typeName = "float"[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_70 $$ types[dimensions - 1] = cls[ CD ]
Line_86 $$ typeCode = boxTypeCode-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_12 $$ compType = compType.getComponentType()-->Line_57 $$ if (compType == java.io.Externalizable.class)[ FD ]
Line_2 $$ private ValueBoxDefImpl addArray(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_71 $$ for (int i = dimensions - 2; i >= 0; --i) types[i] = types[i + 1].getComponentType()[ CD ]
Line_68 $$ ModuleDefImpl m = ensurePackageExists(moduleName)-->Line_83 $$ m.add(name, vbDef)[ FD ]
Line_17 $$ TypeCode typeCode-->Line_24 $$ typeCode = orb.get_primitive_tc(TCKind.tk_wchar)[ FD ]
Line_23 $$ typeName = "wchar"-->Line_29 $$ typeName = "short"[ FD ]
Line_86 $$ typeCode = boxTypeCode-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)-->Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)[ FD ]
Line_20 $$ typeName = "boolean"-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_80 $$ TypeCode boxTypeCode = orb.create_value_box_tc(id, name, typeCode)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_48 $$ typeCode = getTypeCode(compType)-->Line_88 $$ typeCode = vbDef.type()[ FD ]
Line_38 $$ typeName = "float"-->Line_56 $$ typeName = getJavaIoSerializable().name()[ FD ]
Line_27 $$ typeCode = orb.get_primitive_tc(TCKind.tk_octet)-->Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)[ FD ]
Line_41 $$ typeName = "double"-->Line_50 $$ typeName = getJavaLangString().name()[ FD ]
Line_38 $$ typeName = "float"-->Line_54 $$ typeName = getJavaxRmiCORBAClassDesc().name()[ FD ]
Line_5 $$ ValueBoxDefImpl vbDef-->Line_75 $$ vbDef = (ValueBoxDefImpl) arrayMap.get(type)[ FD ]
Line_20 $$ typeName = "boolean"-->Line_41 $$ typeName = "double"[ FD ]
Line_20 $$ typeName = "boolean"-->Line_60 $$ typeName = ((InterfaceDefImpl) interfaceMap.get(compType)).name()[ FD ]
Line_39 $$ typeCode = orb.get_primitive_tc(TCKind.tk_float)-->Line_74 $$ typeCode = orb.create_sequence_tc(0, typeCode)[ FD ]
Line_33 $$ typeCode = orb.get_primitive_tc(TCKind.tk_long)-->Line_36 $$ typeCode = orb.get_primitive_tc(TCKind.tk_longlong)[ FD ]
Line_46 $$ moduleName = "org.omg.boxedRMI"-->Line_66 $$ moduleName = "org.omg.boxedRMI." + compType.getPackage().getName()[ FD ]
Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_86 $$ typeCode = boxTypeCode[ FD ]
Line_42 $$ typeCode = orb.get_primitive_tc(TCKind.tk_double)-->Line_84 $$ impl.putSequenceImpl(id, typeCode, sdi, vbDef)[ FD ]
