Line_3 $$ Object result = requiredUniqueResult(results)-->Line_6 $$ result = result.toString()[ FD ]
Line_2 $$ public static <T> T objectResult(Collection<?> results, Class<T> requiredType) throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException -->Line_5 $$ if (String.class == requiredType) [ FD ]
Line_6 $$ result = result.toString()-->Line_14 $$ throw new TypeMismatchDataAccessException("Result object is of type [" + result.getClass().getName() + "] and could not be converted to required type [" + requiredType.getName() + "]")[ FD ]
Line_2 $$ public static <T> T objectResult(Collection<?> results, Class<T> requiredType) throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException -->Line_14 $$ throw new TypeMismatchDataAccessException("Result object is of type [" + result.getClass().getName() + "] and could not be converted to required type [" + requiredType.getName() + "]")[ FD ]
Line_6 $$ result = result.toString()-->Line_9 $$ result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)[ FD ]
Line_2 $$ public static <T> T objectResult(Collection<?> results, Class<T> requiredType) throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException -->Line_3 $$ Object result = requiredUniqueResult(results)[ FD ]
Line_5 $$ if (String.class == requiredType) -->Line_7 $$ if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) [ CD ]
Line_3 $$ Object result = requiredUniqueResult(results)-->Line_14 $$ throw new TypeMismatchDataAccessException("Result object is of type [" + result.getClass().getName() + "] and could not be converted to required type [" + requiredType.getName() + "]")[ FD ]
Line_5 $$ if (String.class == requiredType) -->Line_6 $$ result = result.toString()[ CD ]
Line_2 $$ public static <T> T objectResult(Collection<?> results, Class<T> requiredType) throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException -->Line_4 $$ if (requiredType != null && !requiredType.isInstance(result)) [ FD ]
Line_2 $$ public static <T> T objectResult(Collection<?> results, Class<T> requiredType) throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException -->Line_3 $$ Object result = requiredUniqueResult(results)[ CD ]
Line_2 $$ public static <T> T objectResult(Collection<?> results, Class<T> requiredType) throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException -->Line_17 $$ return (T) result[ CD ]
Line_3 $$ Object result = requiredUniqueResult(results)-->Line_7 $$ if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) [ FD ]
Line_6 $$ result = result.toString()-->Line_7 $$ if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) [ FD ]
Line_2 $$ public static <T> T objectResult(Collection<?> results, Class<T> requiredType) throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException -->Line_4 $$ if (requiredType != null && !requiredType.isInstance(result)) [ CD ]
Line_3 $$ Object result = requiredUniqueResult(results)-->Line_4 $$ if (requiredType != null && !requiredType.isInstance(result)) [ FD ]
Line_2 $$ public static <T> T objectResult(Collection<?> results, Class<T> requiredType) throws IncorrectResultSizeDataAccessException, TypeMismatchDataAccessException -->Line_7 $$ if (Number.class.isAssignableFrom(requiredType) && Number.class.isInstance(result)) [ FD ]
Line_3 $$ Object result = requiredUniqueResult(results)-->Line_9 $$ result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)[ FD ]
Line_4 $$ if (requiredType != null && !requiredType.isInstance(result)) -->Line_5 $$ if (String.class == requiredType) [ CD ]
Line_9 $$ result = NumberUtils.convertNumberToTargetClass(((Number) result), (Class<? extends Number>) requiredType)-->Line_14 $$ throw new TypeMismatchDataAccessException("Result object is of type [" + result.getClass().getName() + "] and could not be converted to required type [" + requiredType.getName() + "]")[ FD ]
