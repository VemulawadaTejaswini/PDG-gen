Line_15 $$ boolean required = false-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_16 $$ String defaultValue = null-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_25 $$ required = requestParam.required()-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_40 $$ required = cookieValue.required()-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_14 $$ String attrName = null-->Line_87 $$ attrName = ""[ FD ]
Line_16 $$ String defaultValue = null-->Line_70 $$ args[i] = resolveDefaultValue(defaultValue)[ FD ]
Line_31 $$ required = requestHeader.required()-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_45 $$ pathVarName = pathVar.value()-->Line_100 $$ args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler)[ FD ]
Line_51 $$ if (Value.class.isInstance(paramAnn)) -->Line_54 $$ Validated validatedAnn = AnnotationUtils.getAnnotation(paramAnn, Validated.class)[ CD ]
Line_93 $$ if (headerName != null) -->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ CD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_15 $$ boolean required = false[ CD ]
Line_43 $$ if (PathVariable.class.isInstance(paramAnn)) -->Line_45 $$ pathVarName = pathVar.value()[ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_81 $$ args[i] = resolveHttpEntityRequest(methodParam, webRequest)[ FD ]
Line_28 $$ if (RequestHeader.class.isInstance(paramAnn)) -->Line_29 $$ RequestHeader requestHeader = (RequestHeader) paramAnn[ CD ]
Line_43 $$ if (PathVariable.class.isInstance(paramAnn)) -->Line_47 $$ if (ModelAttribute.class.isInstance(paramAnn)) [ CD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_19 $$ int annotationsFound = 0[ CD ]
Line_25 $$ required = requestParam.required()-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_101 $$ if (attrName != null) -->Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)[ CD ]
Line_34 $$ if (RequestBody.class.isInstance(paramAnn)) -->Line_35 $$ requestBodyFound = true[ CD ]
Line_12 $$ String cookieName = null-->Line_97 $$ if (cookieName != null) [ FD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_47 $$ if (ModelAttribute.class.isInstance(paramAnn)) [ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_74 $$ if (!paramType.isAssignableFrom(implicitModel.getClass())) [ FD ]
Line_38 $$ CookieValue cookieValue = (CookieValue) paramAnn-->Line_39 $$ cookieName = cookieValue.name()[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_20 $$ Annotation[] paramAnns = methodParam.getParameterAnnotations()[ CD ]
Line_73 $$ if (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) -->Line_78 $$ if (SessionStatus.class.isAssignableFrom(paramType)) [ CD ]
Line_87 $$ attrName = ""-->Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)[ FD ]
Line_101 $$ if (attrName != null) -->Line_108 $$ if (assignBindingResult) [ CD ]
Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_47 $$ if (ModelAttribute.class.isInstance(paramAnn)) -->Line_51 $$ if (Value.class.isInstance(paramAnn)) [ CD ]
Line_35 $$ requestBodyFound = true-->Line_93 $$ if (headerName != null) [ FD ]
Line_101 $$ if (attrName != null) -->Line_112 $$ implicitModel.putAll(binder.getBindingResult().getModel())[ CD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_57 $$ Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(paramAnn))[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_96 $$ args[i] = resolveRequestBody(methodParam, webRequest, handler)[ FD ]
Line_19 $$ int annotationsFound = 0-->Line_46 $$ annotationsFound++[ FD ]
Line_69 $$ if (defaultValue != null) -->Line_73 $$ if (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) [ CD ]
Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())-->Line_70 $$ args[i] = resolveDefaultValue(defaultValue)[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_4 $$ Object[] args = new Object[paramTypes.length][ CD ]
Line_55 $$ if (validatedAnn != null || paramAnn.annotationType().getSimpleName().startsWith("Valid")) -->Line_56 $$ validate = true[ CD ]
Line_37 $$ if (CookieValue.class.isInstance(paramAnn)) -->Line_39 $$ cookieName = cookieValue.name()[ CD ]
Line_30 $$ headerName = requestHeader.name()-->Line_93 $$ if (headerName != null) [ FD ]
Line_72 $$ Class<?> paramType = methodParam.getParameterType()-->Line_75 $$ throw new IllegalStateException("Argument [" + paramType.getSimpleName() + "] is of type " + "Model or Map but is not assignable from the actual model. You may need to switch " + "newer MVC infrastructure classes to use this argument.")[ FD ]
Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_110 $$ i++[ FD ]
Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())-->Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_7 $$ methodParam.initParameterNameDiscovery(this.parameterNameDiscoverer)[ FD ]
Line_65 $$ if (annotationsFound == 0) -->Line_66 $$ Object argValue = resolveCommonArgument(methodParam, webRequest)[ CD ]
Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_25 $$ required = requestParam.required()-->Line_40 $$ required = cookieValue.required()[ FD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_51 $$ if (Value.class.isInstance(paramAnn)) [ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_77 $$ args[i] = implicitModel[ FD ]
Line_22 $$ if (RequestParam.class.isInstance(paramAnn)) -->Line_25 $$ required = requestParam.required()[ CD ]
Line_101 $$ if (attrName != null) -->Line_104 $$ if (binder.getTarget() != null) [ CD ]
Line_14 $$ String attrName = null-->Line_101 $$ if (attrName != null) [ FD ]
Line_29 $$ RequestHeader requestHeader = (RequestHeader) paramAnn-->Line_30 $$ headerName = requestHeader.name()[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_66 $$ Object argValue = resolveCommonArgument(methodParam, webRequest)[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_72 $$ Class<?> paramType = methodParam.getParameterType()[ FD ]
Line_103 $$ boolean assignBindingResult = (args.length > i + 1 && Errors.class.isAssignableFrom(paramTypes[i + 1]))-->Line_105 $$ doBind(binder, webRequest, validate, validationHints, !assignBindingResult)[ FD ]
Line_34 $$ if (RequestBody.class.isInstance(paramAnn)) -->Line_37 $$ if (CookieValue.class.isInstance(paramAnn)) [ CD ]
Line_56 $$ validate = true-->Line_105 $$ doBind(binder, webRequest, validate, validationHints, !assignBindingResult)[ FD ]
Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())-->Line_69 $$ if (defaultValue != null) [ FD ]
Line_13 $$ String pathVarName = null-->Line_99 $$ if (pathVarName != null) [ FD ]
Line_17 $$ boolean validate = false-->Line_56 $$ validate = true[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_12 $$ String cookieName = null[ CD ]
Line_15 $$ boolean required = false-->Line_31 $$ required = requestHeader.required()[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_37 $$ if (CookieValue.class.isInstance(paramAnn)) -->Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())[ CD ]
Line_39 $$ cookieName = cookieValue.name()-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_16 $$ String defaultValue = null-->Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())[ FD ]
Line_91 $$ if (paramName != null) -->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ CD ]
Line_80 $$ if (HttpEntity.class.isAssignableFrom(paramType)) -->Line_81 $$ args[i] = resolveHttpEntityRequest(methodParam, webRequest)[ CD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_34 $$ if (RequestBody.class.isInstance(paramAnn)) [ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_66 $$ Object argValue = resolveCommonArgument(methodParam, webRequest)[ FD ]
Line_72 $$ Class<?> paramType = methodParam.getParameterType()-->Line_82 $$ if (Errors.class.isAssignableFrom(paramType)) [ FD ]
Line_25 $$ required = requestParam.required()-->Line_31 $$ required = requestHeader.required()[ FD ]
Line_39 $$ cookieName = cookieValue.name()-->Line_97 $$ if (cookieName != null) [ FD ]
Line_16 $$ String defaultValue = null-->Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())[ FD ]
Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_31 $$ required = requestHeader.required()-->Line_40 $$ required = cookieValue.required()[ FD ]
Line_84 $$ if (BeanUtils.isSimpleProperty(paramType)) -->Line_85 $$ paramName = ""[ CD ]
Line_24 $$ paramName = requestParam.name()-->Line_85 $$ paramName = ""[ FD ]
Line_40 $$ required = cookieValue.required()-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_14 $$ String attrName = null[ CD ]
Line_22 $$ if (RequestParam.class.isInstance(paramAnn)) -->Line_24 $$ paramName = requestParam.name()[ CD ]
Line_10 $$ String headerName = null-->Line_30 $$ headerName = requestHeader.name()[ FD ]
Line_65 $$ if (annotationsFound == 0) -->Line_67 $$ if (argValue != WebArgumentResolver.UNRESOLVED) [ CD ]
Line_16 $$ String defaultValue = null-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_95 $$ if (requestBodyFound) -->Line_96 $$ args[i] = resolveRequestBody(methodParam, webRequest, handler)[ CD ]
Line_91 $$ if (paramName != null) -->Line_93 $$ if (headerName != null) [ CD ]
Line_19 $$ int annotationsFound = 0-->Line_50 $$ annotationsFound++[ FD ]
Line_51 $$ if (Value.class.isInstance(paramAnn)) -->Line_55 $$ if (validatedAnn != null || paramAnn.annotationType().getSimpleName().startsWith("Valid")) [ CD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_54 $$ Validated validatedAnn = AnnotationUtils.getAnnotation(paramAnn, Validated.class)[ FD ]
Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())-->Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())[ FD ]
Line_78 $$ if (SessionStatus.class.isAssignableFrom(paramType)) -->Line_79 $$ args[i] = this.sessionStatus[ CD ]
Line_52 $$ defaultValue = ((Value) paramAnn).value()-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_18 $$ Object[] validationHints = null-->Line_105 $$ doBind(binder, webRequest, validate, validationHints, !assignBindingResult)[ FD ]
Line_52 $$ defaultValue = ((Value) paramAnn).value()-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_37 $$ if (CookieValue.class.isInstance(paramAnn)) -->Line_40 $$ required = cookieValue.required()[ CD ]
Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)-->Line_105 $$ doBind(binder, webRequest, validate, validationHints, !assignBindingResult)[ FD ]
Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)-->Line_112 $$ implicitModel.putAll(binder.getBindingResult().getModel())[ FD ]
Line_17 $$ boolean validate = false-->Line_105 $$ doBind(binder, webRequest, validate, validationHints, !assignBindingResult)[ FD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_43 $$ if (PathVariable.class.isInstance(paramAnn)) [ FD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_55 $$ if (validatedAnn != null || paramAnn.annotationType().getSimpleName().startsWith("Valid")) [ FD ]
Line_52 $$ defaultValue = ((Value) paramAnn).value()-->Line_69 $$ if (defaultValue != null) [ FD ]
Line_9 $$ String paramName = null-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_101 $$ if (attrName != null) -->Line_107 $$ args[i] = binder.getTarget()[ CD ]
Line_9 $$ String paramName = null-->Line_24 $$ paramName = requestParam.name()[ FD ]
Line_10 $$ String headerName = null-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_96 $$ args[i] = resolveRequestBody(methodParam, webRequest, handler)[ FD ]
Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())-->Line_70 $$ args[i] = resolveDefaultValue(defaultValue)[ FD ]
Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)-->Line_107 $$ args[i] = binder.getTarget()[ FD ]
Line_85 $$ paramName = ""-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())-->Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())[ FD ]
Line_67 $$ if (argValue != WebArgumentResolver.UNRESOLVED) -->Line_68 $$ args[i] = argValue[ CD ]
Line_10 $$ String headerName = null-->Line_93 $$ if (headerName != null) [ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_47 $$ if (ModelAttribute.class.isInstance(paramAnn)) -->Line_48 $$ ModelAttribute attr = (ModelAttribute) paramAnn[ CD ]
Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_85 $$ paramName = ""-->Line_91 $$ if (paramName != null) [ FD ]
Line_73 $$ if (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) -->Line_77 $$ args[i] = implicitModel[ CD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_16 $$ String defaultValue = null[ CD ]
Line_22 $$ if (RequestParam.class.isInstance(paramAnn)) -->Line_28 $$ if (RequestHeader.class.isInstance(paramAnn)) [ CD ]
Line_87 $$ attrName = ""-->Line_101 $$ if (attrName != null) [ FD ]
Line_43 $$ if (PathVariable.class.isInstance(paramAnn)) -->Line_46 $$ annotationsFound++[ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_45 $$ pathVarName = pathVar.value()-->Line_99 $$ if (pathVarName != null) [ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_100 $$ args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler)[ FD ]
Line_72 $$ Class<?> paramType = methodParam.getParameterType()-->Line_78 $$ if (SessionStatus.class.isAssignableFrom(paramType)) [ FD ]
Line_37 $$ if (CookieValue.class.isInstance(paramAnn)) -->Line_42 $$ annotationsFound++[ CD ]
Line_24 $$ paramName = requestParam.name()-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_108 $$ if (assignBindingResult) -->Line_109 $$ args[i + 1] = binder.getBindingResult()[ CD ]
Line_14 $$ String attrName = null-->Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_20 $$ Annotation[] paramAnns = methodParam.getParameterAnnotations()[ FD ]
Line_13 $$ String pathVarName = null-->Line_100 $$ args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler)[ FD ]
Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())-->Line_52 $$ defaultValue = ((Value) paramAnn).value()[ FD ]
Line_66 $$ Object argValue = resolveCommonArgument(methodParam, webRequest)-->Line_67 $$ if (argValue != WebArgumentResolver.UNRESOLVED) [ FD ]
Line_108 $$ if (assignBindingResult) -->Line_110 $$ i++[ CD ]
Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_14 $$ String attrName = null-->Line_49 $$ attrName = attr.value()[ FD ]
Line_29 $$ RequestHeader requestHeader = (RequestHeader) paramAnn-->Line_31 $$ required = requestHeader.required()[ FD ]
Line_78 $$ if (SessionStatus.class.isAssignableFrom(paramType)) -->Line_80 $$ if (HttpEntity.class.isAssignableFrom(paramType)) [ CD ]
Line_25 $$ required = requestParam.required()-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_23 $$ RequestParam requestParam = (RequestParam) paramAnn-->Line_24 $$ paramName = requestParam.name()[ FD ]
Line_44 $$ PathVariable pathVar = (PathVariable) paramAnn-->Line_45 $$ pathVarName = pathVar.value()[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_13 $$ String pathVarName = null[ CD ]
Line_15 $$ boolean required = false-->Line_40 $$ required = cookieValue.required()[ FD ]
Line_16 $$ String defaultValue = null-->Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())[ FD ]
Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)-->Line_104 $$ if (binder.getTarget() != null) [ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_18 $$ Object[] validationHints = null[ CD ]
Line_19 $$ int annotationsFound = 0-->Line_42 $$ annotationsFound++[ FD ]
Line_19 $$ int annotationsFound = 0-->Line_27 $$ annotationsFound++[ FD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_22 $$ if (RequestParam.class.isInstance(paramAnn)) [ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_91 $$ if (paramName != null) [ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_5 $$ for (int i = 0; i < args.length; i++) [ CD ]
Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())-->Line_52 $$ defaultValue = ((Value) paramAnn).value()[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_8 $$ GenericTypeResolver.resolveParameterType(methodParam, handler.getClass())[ FD ]
Line_49 $$ attrName = attr.value()-->Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)[ FD ]
Line_58 $$ validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] -->Line_105 $$ doBind(binder, webRequest, validate, validationHints, !assignBindingResult)[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)[ CD ]
Line_19 $$ int annotationsFound = 0-->Line_65 $$ if (annotationsFound == 0) [ FD ]
Line_28 $$ if (RequestHeader.class.isInstance(paramAnn)) -->Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())[ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_3 $$ Class<?>[] paramTypes = handlerMethod.getParameterTypes()[ FD ]
Line_16 $$ String defaultValue = null-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_48 $$ ModelAttribute attr = (ModelAttribute) paramAnn-->Line_49 $$ attrName = attr.value()[ FD ]
Line_47 $$ if (ModelAttribute.class.isInstance(paramAnn)) -->Line_49 $$ attrName = attr.value()[ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_112 $$ implicitModel.putAll(binder.getBindingResult().getModel())[ FD ]
Line_72 $$ Class<?> paramType = methodParam.getParameterType()-->Line_74 $$ if (!paramType.isAssignableFrom(implicitModel.getClass())) [ FD ]
Line_49 $$ attrName = attr.value()-->Line_101 $$ if (attrName != null) [ FD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_37 $$ if (CookieValue.class.isInstance(paramAnn)) [ FD ]
Line_38 $$ CookieValue cookieValue = (CookieValue) paramAnn-->Line_40 $$ required = cookieValue.required()[ FD ]
Line_84 $$ if (BeanUtils.isSimpleProperty(paramType)) -->Line_87 $$ attrName = ""[ CD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_11 $$ boolean requestBodyFound = false[ CD ]
Line_28 $$ if (RequestHeader.class.isInstance(paramAnn)) -->Line_30 $$ headerName = requestHeader.name()[ CD ]
Line_22 $$ if (RequestParam.class.isInstance(paramAnn)) -->Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())[ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_115 $$ return args[ CD ]
Line_37 $$ if (CookieValue.class.isInstance(paramAnn)) -->Line_43 $$ if (PathVariable.class.isInstance(paramAnn)) [ CD ]
Line_43 $$ if (PathVariable.class.isInstance(paramAnn)) -->Line_44 $$ PathVariable pathVar = (PathVariable) paramAnn[ CD ]
Line_104 $$ if (binder.getTarget() != null) -->Line_105 $$ doBind(binder, webRequest, validate, validationHints, !assignBindingResult)[ CD ]
Line_52 $$ defaultValue = ((Value) paramAnn).value()-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_81 $$ args[i] = resolveHttpEntityRequest(methodParam, webRequest)[ FD ]
Line_15 $$ boolean required = false-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_54 $$ Validated validatedAnn = AnnotationUtils.getAnnotation(paramAnn, Validated.class)-->Line_57 $$ Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(paramAnn))[ FD ]
Line_15 $$ boolean required = false-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_12 $$ String cookieName = null-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_105 $$ doBind(binder, webRequest, validate, validationHints, !assignBindingResult)[ FD ]
Line_34 $$ if (RequestBody.class.isInstance(paramAnn)) -->Line_36 $$ annotationsFound++[ CD ]
Line_31 $$ required = requestHeader.required()-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_82 $$ if (Errors.class.isAssignableFrom(paramType)) -->Line_84 $$ if (BeanUtils.isSimpleProperty(paramType)) [ CD ]
Line_38 $$ CookieValue cookieValue = (CookieValue) paramAnn-->Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_62 $$ if (annotationsFound > 1) [ CD ]
Line_11 $$ boolean requestBodyFound = false-->Line_93 $$ if (headerName != null) [ FD ]
Line_97 $$ if (cookieName != null) -->Line_99 $$ if (pathVarName != null) [ CD ]
Line_101 $$ if (attrName != null) -->Line_103 $$ boolean assignBindingResult = (args.length > i + 1 && Errors.class.isAssignableFrom(paramTypes[i + 1]))[ CD ]
Line_15 $$ boolean required = false-->Line_25 $$ required = requestParam.required()[ FD ]
Line_13 $$ String pathVarName = null-->Line_45 $$ pathVarName = pathVar.value()[ FD ]
Line_11 $$ boolean requestBodyFound = false-->Line_35 $$ requestBodyFound = true[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_8 $$ GenericTypeResolver.resolveParameterType(methodParam, handler.getClass())[ CD ]
Line_23 $$ RequestParam requestParam = (RequestParam) paramAnn-->Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())[ FD ]
Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())-->Line_70 $$ args[i] = resolveDefaultValue(defaultValue)[ FD ]
Line_12 $$ String cookieName = null-->Line_39 $$ cookieName = cookieValue.name()[ FD ]
Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())-->Line_52 $$ defaultValue = ((Value) paramAnn).value()[ FD ]
Line_80 $$ if (HttpEntity.class.isAssignableFrom(paramType)) -->Line_82 $$ if (Errors.class.isAssignableFrom(paramType)) [ CD ]
Line_26 $$ defaultValue = parseDefaultValueAttribute(requestParam.defaultValue())-->Line_69 $$ if (defaultValue != null) [ FD ]
Line_99 $$ if (pathVarName != null) -->Line_101 $$ if (attrName != null) [ CD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_9 $$ String paramName = null[ CD ]
Line_31 $$ required = requestHeader.required()-->Line_92 $$ args[i] = resolveRequestParam(paramName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_9 $$ String paramName = null-->Line_91 $$ if (paramName != null) [ FD ]
Line_28 $$ if (RequestHeader.class.isInstance(paramAnn)) -->Line_31 $$ required = requestHeader.required()[ CD ]
Line_24 $$ paramName = requestParam.name()-->Line_91 $$ if (paramName != null) [ FD ]
Line_51 $$ if (Value.class.isInstance(paramAnn)) -->Line_52 $$ defaultValue = ((Value) paramAnn).value()[ CD ]
Line_55 $$ if (validatedAnn != null || paramAnn.annotationType().getSimpleName().startsWith("Valid")) -->Line_57 $$ Object hints = (validatedAnn != null ? validatedAnn.value() : AnnotationUtils.getValue(paramAnn))[ CD ]
Line_22 $$ if (RequestParam.class.isInstance(paramAnn)) -->Line_27 $$ annotationsFound++[ CD ]
Line_93 $$ if (headerName != null) -->Line_95 $$ if (requestBodyFound) [ CD ]
Line_95 $$ if (requestBodyFound) -->Line_97 $$ if (cookieName != null) [ CD ]
Line_97 $$ if (cookieName != null) -->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ CD ]
Line_47 $$ if (ModelAttribute.class.isInstance(paramAnn)) -->Line_50 $$ annotationsFound++[ CD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_17 $$ boolean validate = false[ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_100 $$ args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler)[ FD ]
Line_99 $$ if (pathVarName != null) -->Line_100 $$ args[i] = resolvePathVariable(pathVarName, methodParam, webRequest, handler)[ CD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_7 $$ methodParam.initParameterNameDiscovery(this.parameterNameDiscoverer)[ CD ]
Line_28 $$ if (RequestHeader.class.isInstance(paramAnn)) -->Line_34 $$ if (RequestBody.class.isInstance(paramAnn)) [ CD ]
Line_30 $$ headerName = requestHeader.name()-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_41 $$ defaultValue = parseDefaultValueAttribute(cookieValue.defaultValue())-->Line_69 $$ if (defaultValue != null) [ FD ]
Line_69 $$ if (defaultValue != null) -->Line_72 $$ Class<?> paramType = methodParam.getParameterType()[ CD ]
Line_16 $$ String defaultValue = null-->Line_69 $$ if (defaultValue != null) [ FD ]
Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())-->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_66 $$ Object argValue = resolveCommonArgument(methodParam, webRequest)-->Line_68 $$ args[i] = argValue[ FD ]
Line_29 $$ RequestHeader requestHeader = (RequestHeader) paramAnn-->Line_32 $$ defaultValue = parseDefaultValueAttribute(requestHeader.defaultValue())[ FD ]
Line_19 $$ int annotationsFound = 0-->Line_62 $$ if (annotationsFound > 1) [ FD ]
Line_52 $$ defaultValue = ((Value) paramAnn).value()-->Line_70 $$ args[i] = resolveDefaultValue(defaultValue)[ FD ]
Line_6 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_8 $$ GenericTypeResolver.resolveParameterType(methodParam, handler.getClass())[ FD ]
Line_28 $$ if (RequestHeader.class.isInstance(paramAnn)) -->Line_33 $$ annotationsFound++[ CD ]
Line_72 $$ Class<?> paramType = methodParam.getParameterType()-->Line_80 $$ if (HttpEntity.class.isAssignableFrom(paramType)) [ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)[ FD ]
Line_19 $$ int annotationsFound = 0-->Line_36 $$ annotationsFound++[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_98 $$ args[i] = resolveCookieValue(cookieName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_65 $$ if (annotationsFound == 0) [ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, ExtendedModelMap implicitModel) throws Exception -->Line_3 $$ Class<?>[] paramTypes = handlerMethod.getParameterTypes()[ CD ]
Line_19 $$ int annotationsFound = 0-->Line_33 $$ annotationsFound++[ FD ]
Line_69 $$ if (defaultValue != null) -->Line_70 $$ args[i] = resolveDefaultValue(defaultValue)[ CD ]
Line_72 $$ Class<?> paramType = methodParam.getParameterType()-->Line_73 $$ if (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) [ FD ]
Line_9 $$ String paramName = null-->Line_85 $$ paramName = ""[ FD ]
Line_23 $$ RequestParam requestParam = (RequestParam) paramAnn-->Line_25 $$ required = requestParam.required()[ FD ]
Line_16 $$ String defaultValue = null-->Line_52 $$ defaultValue = ((Value) paramAnn).value()[ FD ]
Line_67 $$ if (argValue != WebArgumentResolver.UNRESOLVED) -->Line_69 $$ if (defaultValue != null) [ CD ]
Line_72 $$ Class<?> paramType = methodParam.getParameterType()-->Line_84 $$ if (BeanUtils.isSimpleProperty(paramType)) [ FD ]
Line_5 $$ for (int i = 0; i < args.length; i++) -->Line_10 $$ String headerName = null[ CD ]
Line_21 $$ for (Annotation paramAnn : paramAnns) -->Line_28 $$ if (RequestHeader.class.isInstance(paramAnn)) [ FD ]
Line_18 $$ Object[] validationHints = null-->Line_58 $$ validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] [ FD ]
Line_55 $$ if (validatedAnn != null || paramAnn.annotationType().getSimpleName().startsWith("Valid")) -->Line_58 $$ validationHints = (hints instanceof Object[] ? (Object[]) hints : new Object[] [ CD ]
Line_22 $$ if (RequestParam.class.isInstance(paramAnn)) -->Line_23 $$ RequestParam requestParam = (RequestParam) paramAnn[ CD ]
Line_37 $$ if (CookieValue.class.isInstance(paramAnn)) -->Line_38 $$ CookieValue cookieValue = (CookieValue) paramAnn[ CD ]
Line_73 $$ if (Model.class.isAssignableFrom(paramType) || Map.class.isAssignableFrom(paramType)) -->Line_74 $$ if (!paramType.isAssignableFrom(implicitModel.getClass())) [ CD ]
Line_102 $$ WebDataBinder binder = resolveModelAttribute(attrName, methodParam, implicitModel, webRequest, handler)-->Line_109 $$ args[i + 1] = binder.getBindingResult()[ FD ]
Line_49 $$ attrName = attr.value()-->Line_87 $$ attrName = ""[ FD ]
Line_40 $$ required = cookieValue.required()-->Line_94 $$ args[i] = resolveRequestHeader(headerName, required, defaultValue, methodParam, webRequest, handler)[ FD ]
