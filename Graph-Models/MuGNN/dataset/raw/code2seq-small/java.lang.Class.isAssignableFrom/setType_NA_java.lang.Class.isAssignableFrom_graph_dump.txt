Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_76 $$ typeParameters.setProperty(SerializableToBlobType.CLASS_NAME, returnedClassOrElement.getName())[ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_44 $$ type = "time"-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_10 $$ isArray = true-->Line_72 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, byte.class) && isArray) [ FD ]
Line_28 $$ type = explicitType-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_63 $$ type = "blob"-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_94 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_44 $$ type = "time"-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_26 $$ if (annType != null) [ CD ]
Line_28 $$ type = explicitType-->Line_78 $$ type = "blob"[ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_78 $$ type = "blob"-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_75 $$ type = SerializableToBlobType.class.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_64 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) -->Line_66 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class) && isArray) [ CD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_16 $$ isNationalized = property.isAnnotationPresent(Nationalized.class) || buildingContext.getBuildingOptions().useNationalizedCharacterData()[ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_63 $$ type = "blob"-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_101 $$ if (columns == null) [ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_56 $$ if (!key && property.isAnnotationPresent(Lob.class)) [ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_92 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class)) [ FD ]
Line_26 $$ if (annType != null) -->Line_28 $$ type = explicitType[ CD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_50 $$ type = isDate ? "timestamp" : "calendar"[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_30 $$ boolean isDate-->Line_32 $$ isDate = true[ FD ]
Line_44 $$ type = "time"-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_60 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.NClob.class)) -->Line_62 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Blob.class)) [ CD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_44 $$ type = "time"[ FD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_96 $$ type = CharacterNCharType.INSTANCE.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_56 $$ if (!key && property.isAnnotationPresent(Lob.class)) -->Line_81 $$ if ((!key && property.isAnnotationPresent(Enumerated.class)) || (key && property.isAnnotationPresent(MapKeyEnumerated.class))) [ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_23 $$ annType = property.getAnnotation(Type.class)[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_74 $$ if (buildingContext.getBuildingOptions().getReflectionManager().toXClass(Serializable.class).isAssignableFrom(returnedClassOrElement)) [ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()[ FD ]
Line_63 $$ type = "blob"-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_29 $$ if ((!key && property.isAnnotationPresent(Temporal.class)) || (key && property.isAnnotationPresent(MapKeyTemporal.class))) -->Line_30 $$ boolean isDate[ CD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_63 $$ type = "blob"-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_50 $$ type = isDate ? "timestamp" : "calendar"[ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_70 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Byte.class) && isArray) [ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_86 $$ type = EnumType.class.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_78 $$ type = "blob"-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_90 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_90 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_88 $$ if (isNationalized) -->Line_89 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) [ CD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()[ FD ]
Line_78 $$ type = "blob"-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_44 $$ type = "time"-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_78 $$ type = "blob"[ FD ]
Line_75 $$ type = SerializableToBlobType.class.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_78 $$ type = "blob"[ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_44 $$ type = "time"-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_94 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_66 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class) && isArray) [ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_89 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) [ FD ]
Line_7 $$ boolean isArray = false-->Line_10 $$ isArray = true[ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_44 $$ type = "time"-->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_78 $$ type = "blob"-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_86 $$ type = EnumType.class.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_9 $$ returnedClassOrElement = property.getElementClass()[ FD ]
Line_86 $$ type = EnumType.class.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_7 $$ boolean isArray = false-->Line_72 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, byte.class) && isArray) [ FD ]
Line_90 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_44 $$ type = "time"-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_61 $$ type = StandardBasicTypes.NCLOB.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ FD ]
Line_20 $$ MapKeyType ann = property.getAnnotation(MapKeyType.class)-->Line_21 $$ annType = ann.value()[ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_3 $$ if (returnedClass == null) [ CD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_96 $$ type = CharacterNCharType.INSTANCE.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_28 $$ type = explicitType-->Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_44 $$ type = "time"[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_50 $$ type = isDate ? "timestamp" : "calendar"[ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_78 $$ type = "blob"[ FD ]
Line_72 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, byte.class) && isArray) -->Line_74 $$ if (buildingContext.getBuildingOptions().getReflectionManager().toXClass(Serializable.class).isAssignableFrom(returnedClassOrElement)) [ CD ]
Line_63 $$ type = "blob"-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_56 $$ if (!key && property.isAnnotationPresent(Lob.class)) -->Line_58 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Clob.class)) [ CD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_78 $$ type = "blob"[ FD ]
Line_23 $$ annType = property.getAnnotation(Type.class)-->Line_27 $$ setExplicitType(annType)[ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_33 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Calendar.class)) [ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_81 $$ if ((!key && property.isAnnotationPresent(Enumerated.class)) || (key && property.isAnnotationPresent(MapKeyEnumerated.class))) -->Line_86 $$ type = EnumType.class.getName()[ CD ]
Line_29 $$ if ((!key && property.isAnnotationPresent(Temporal.class)) || (key && property.isAnnotationPresent(MapKeyTemporal.class))) -->Line_31 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Date.class)) [ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_18 $$ if ((!key && property.isAnnotationPresent(Type.class)) || (key && property.isAnnotationPresent(MapKeyType.class))) [ FD ]
Line_63 $$ type = "blob"-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_75 $$ type = SerializableToBlobType.class.getName()-->Line_78 $$ type = "blob"[ FD ]
Line_58 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Clob.class)) -->Line_60 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.NClob.class)) [ CD ]
Line_78 $$ type = "blob"-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_60 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.NClob.class)) [ FD ]
Line_44 $$ type = "time"-->Line_50 $$ type = isDate ? "timestamp" : "calendar"[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_62 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Blob.class)) [ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_70 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Byte.class) && isArray) [ FD ]
Line_10 $$ isArray = true-->Line_66 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class) && isArray) [ FD ]
Line_63 $$ type = "blob"-->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_44 $$ type = "time"-->Line_61 $$ type = StandardBasicTypes.NCLOB.getName()[ FD ]
Line_26 $$ if (annType != null) -->Line_27 $$ setExplicitType(annType)[ CD ]
Line_34 $$ isDate = false-->Line_45 $$ if (!isDate) [ FD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_29 $$ if ((!key && property.isAnnotationPresent(Temporal.class)) || (key && property.isAnnotationPresent(MapKeyTemporal.class))) -->Line_56 $$ if (!key && property.isAnnotationPresent(Lob.class)) [ CD ]
Line_70 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Byte.class) && isArray) -->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ CD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_61 $$ type = StandardBasicTypes.NCLOB.getName()[ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_81 $$ if ((!key && property.isAnnotationPresent(Enumerated.class)) || (key && property.isAnnotationPresent(MapKeyEnumerated.class))) -->Line_88 $$ if (isNationalized) [ CD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_63 $$ type = "blob"-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_63 $$ type = "blob"-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_28 $$ type = explicitType[ FD ]
Line_63 $$ type = "blob"-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_20 $$ MapKeyType ann = property.getAnnotation(MapKeyType.class)[ FD ]
Line_29 $$ if ((!key && property.isAnnotationPresent(Temporal.class)) || (key && property.isAnnotationPresent(MapKeyTemporal.class))) -->Line_38 $$ final TemporalType temporalType = getTemporalType(property)[ CD ]
Line_93 $$ if (isArray) -->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ CD ]
Line_17 $$ Type annType = null-->Line_26 $$ if (annType != null) [ FD ]
Line_90 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_81 $$ if ((!key && property.isAnnotationPresent(Enumerated.class)) || (key && property.isAnnotationPresent(MapKeyEnumerated.class))) [ FD ]
Line_28 $$ type = explicitType-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_86 $$ type = EnumType.class.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_63 $$ type = "blob"-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_61 $$ type = StandardBasicTypes.NCLOB.getName()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_76 $$ typeParameters.setProperty(SerializableToBlobType.CLASS_NAME, returnedClassOrElement.getName())[ FD ]
Line_68 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, char.class) && isArray) -->Line_70 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Byte.class) && isArray) [ CD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_58 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Clob.class)) [ FD ]
Line_82 $$ final Class attributeJavaType = buildingContext.getBuildingOptions().getReflectionManager().toClass(returnedClassOrElement)-->Line_84 $$ throw new AnnotationException(String.format("Attribute [%s.%s] was annotated as enumerated, but its java type is not an enum [%s]", declaringClassName, xproperty.getName(), attributeJavaType.getName()))[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_111 $$ applyAttributeConverter(property, attributeConverterDescriptor)[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_31 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Date.class)) -->Line_33 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Calendar.class)) [ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_8 $$ if (property.isArray()) [ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_12 $$ this.xproperty = property[ FD ]
Line_74 $$ if (buildingContext.getBuildingOptions().getReflectionManager().toXClass(Serializable.class).isAssignableFrom(returnedClassOrElement)) -->Line_76 $$ typeParameters.setProperty(SerializableToBlobType.CLASS_NAME, returnedClassOrElement.getName())[ CD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ CD ]
Line_90 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_58 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Clob.class)) [ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_7 $$ boolean isArray = false[ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_18 $$ if ((!key && property.isAnnotationPresent(Type.class)) || (key && property.isAnnotationPresent(MapKeyType.class))) [ CD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_78 $$ type = "blob"[ FD ]
Line_21 $$ annType = ann.value()-->Line_23 $$ annType = property.getAnnotation(Type.class)[ FD ]
Line_13 $$ Properties typeParameters = this.typeParameters-->Line_76 $$ typeParameters.setProperty(SerializableToBlobType.CLASS_NAME, returnedClassOrElement.getName())[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_64 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) [ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_96 $$ type = CharacterNCharType.INSTANCE.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_17 $$ Type annType = null-->Line_21 $$ annType = ann.value()[ FD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_26 $$ if (annType != null) -->Line_29 $$ if ((!key && property.isAnnotationPresent(Temporal.class)) || (key && property.isAnnotationPresent(MapKeyTemporal.class))) [ CD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_72 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, byte.class) && isArray) -->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ CD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_72 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, byte.class) && isArray) [ FD ]
Line_82 $$ final Class attributeJavaType = buildingContext.getBuildingOptions().getReflectionManager().toClass(returnedClassOrElement)-->Line_83 $$ if (!Enum.class.isAssignableFrom(attributeJavaType)) [ FD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_68 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, char.class) && isArray) [ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_78 $$ type = "blob"-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_105 $$ if (returnedClassOrElement.isEnum()) -->Line_106 $$ type = EnumType.class.getName()[ CD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_61 $$ type = StandardBasicTypes.NCLOB.getName()[ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_44 $$ type = "time"[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_78 $$ type = "blob"-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_58 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Clob.class)) -->Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()[ CD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_74 $$ if (buildingContext.getBuildingOptions().getReflectionManager().toXClass(Serializable.class).isAssignableFrom(returnedClassOrElement)) [ FD ]
Line_18 $$ if ((!key && property.isAnnotationPresent(Type.class)) || (key && property.isAnnotationPresent(MapKeyType.class))) -->Line_19 $$ if (key) [ CD ]
Line_21 $$ annType = ann.value()-->Line_27 $$ setExplicitType(annType)[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_63 $$ type = "blob"[ FD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT[ CD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_78 $$ type = "blob"[ FD ]
Line_86 $$ type = EnumType.class.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_64 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) [ FD ]
Line_63 $$ type = "blob"-->Line_78 $$ type = "blob"[ FD ]
Line_3 $$ if (returnedClass == null) -->Line_4 $$ return[ CD ]
Line_8 $$ if (property.isArray()) -->Line_9 $$ returnedClassOrElement = property.getElementClass()[ CD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_13 $$ Properties typeParameters = this.typeParameters-->Line_14 $$ typeParameters.clear()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_105 $$ if (returnedClassOrElement.isEnum()) [ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_9 $$ returnedClassOrElement = property.getElementClass()[ FD ]
Line_19 $$ if (key) -->Line_23 $$ annType = property.getAnnotation(Type.class)[ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_8 $$ if (property.isArray()) [ FD ]
Line_74 $$ if (buildingContext.getBuildingOptions().getReflectionManager().toXClass(Serializable.class).isAssignableFrom(returnedClassOrElement)) -->Line_75 $$ type = SerializableToBlobType.class.getName()[ CD ]
Line_33 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Calendar.class)) -->Line_34 $$ isDate = false[ CD ]
Line_44 $$ type = "time"-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_44 $$ type = "time"-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_94 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_78 $$ type = "blob"[ FD ]
Line_19 $$ if (key) -->Line_21 $$ annType = ann.value()[ CD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_94 $$ type = StringNVarcharType.INSTANCE.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_78 $$ type = "blob"[ FD ]
Line_19 $$ if (key) -->Line_20 $$ MapKeyType ann = property.getAnnotation(MapKeyType.class)[ CD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_78 $$ type = "blob"[ FD ]
Line_75 $$ type = SerializableToBlobType.class.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_32 $$ isDate = true-->Line_45 $$ if (!isDate) [ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_62 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Blob.class)) [ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_93 $$ if (isArray) -->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_12 $$ this.xproperty = property[ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_14 $$ typeParameters.clear()[ CD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_41 $$ type = isDate ? "date" : "calendar_date"[ FD ]
Line_66 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class) && isArray) -->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ CD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_75 $$ type = SerializableToBlobType.class.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_82 $$ final Class attributeJavaType = buildingContext.getBuildingOptions().getReflectionManager().toClass(returnedClassOrElement)[ FD ]
Line_10 $$ isArray = true-->Line_68 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, char.class) && isArray) [ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_63 $$ type = "blob"[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_68 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, char.class) && isArray) -->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ CD ]
Line_63 $$ type = "blob"-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_7 $$ boolean isArray = false-->Line_68 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, char.class) && isArray) [ FD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_38 $$ final TemporalType temporalType = getTemporalType(property)[ FD ]
Line_70 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Byte.class) && isArray) -->Line_72 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, byte.class) && isArray) [ CD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ FD ]
Line_44 $$ type = "time"-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_72 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, byte.class) && isArray) [ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_94 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_7 $$ boolean isArray = false-->Line_70 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Byte.class) && isArray) [ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_63 $$ type = "blob"[ FD ]
Line_28 $$ type = explicitType-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_44 $$ type = "time"-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_33 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Calendar.class)) [ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_89 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) [ FD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_66 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class) && isArray) [ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_29 $$ if ((!key && property.isAnnotationPresent(Temporal.class)) || (key && property.isAnnotationPresent(MapKeyTemporal.class))) [ FD ]
Line_44 $$ type = "time"-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_3 $$ if (returnedClass == null) [ FD ]
Line_75 $$ type = SerializableToBlobType.class.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_111 $$ applyAttributeConverter(property, attributeConverterDescriptor)[ CD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_78 $$ type = "blob"[ FD ]
Line_23 $$ annType = property.getAnnotation(Type.class)-->Line_26 $$ if (annType != null) [ FD ]
Line_28 $$ type = explicitType-->Line_63 $$ type = "blob"[ FD ]
Line_63 $$ type = "blob"-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_60 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.NClob.class)) -->Line_61 $$ type = StandardBasicTypes.NCLOB.getName()[ CD ]
Line_89 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) -->Line_92 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class)) [ CD ]
Line_44 $$ type = "time"-->Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()[ FD ]
Line_81 $$ if ((!key && property.isAnnotationPresent(Enumerated.class)) || (key && property.isAnnotationPresent(MapKeyEnumerated.class))) -->Line_82 $$ final Class attributeJavaType = buildingContext.getBuildingOptions().getReflectionManager().toClass(returnedClassOrElement)[ CD ]
Line_86 $$ type = EnumType.class.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_13 $$ Properties typeParameters = this.typeParameters[ CD ]
Line_21 $$ annType = ann.value()-->Line_26 $$ if (annType != null) [ FD ]
Line_62 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Blob.class)) -->Line_64 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) [ CD ]
Line_64 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) -->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ CD ]
Line_9 $$ returnedClassOrElement = property.getElementClass()-->Line_31 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Date.class)) [ FD ]
Line_31 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Date.class)) -->Line_32 $$ isDate = true[ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_17 $$ Type annType = null[ CD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_63 $$ type = "blob"[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_60 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.NClob.class)) [ FD ]
Line_28 $$ type = explicitType-->Line_41 $$ type = isDate ? "date" : "calendar_date"[ FD ]
Line_28 $$ type = explicitType-->Line_61 $$ type = StandardBasicTypes.NCLOB.getName()[ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_92 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class)) [ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_30 $$ boolean isDate-->Line_45 $$ if (!isDate) [ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_110 $$ this.typeParameters = typeParameters[ CD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_71 $$ type = WrappedMaterializedBlobType.class.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_32 $$ isDate = true-->Line_34 $$ isDate = false[ FD ]
Line_44 $$ type = "time"-->Line_78 $$ type = "blob"[ FD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_15 $$ String type = BinderHelper.ANNOTATION_STRING_DEFAULT-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_62 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, java.sql.Blob.class)) -->Line_63 $$ type = "blob"[ CD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_31 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Date.class)) [ FD ]
Line_44 $$ type = "time"-->Line_67 $$ type = isNationalized ? CharacterArrayNClobType.class.getName() : CharacterArrayClobType.class.getName()[ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_30 $$ boolean isDate-->Line_34 $$ isDate = false[ FD ]
Line_73 $$ type = StandardBasicTypes.MATERIALIZED_BLOB.getName()-->Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) [ FD ]
Line_28 $$ type = explicitType-->Line_71 $$ type = WrappedMaterializedBlobType.class.getName()[ FD ]
Line_59 $$ type = isNationalized ? StandardBasicTypes.NCLOB.getName() : StandardBasicTypes.CLOB.getName()-->Line_96 $$ type = CharacterNCharType.INSTANCE.getName()[ FD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_75 $$ type = SerializableToBlobType.class.getName()-->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ FD ]
Line_17 $$ Type annType = null-->Line_23 $$ annType = property.getAnnotation(Type.class)[ FD ]
Line_66 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class) && isArray) -->Line_68 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, char.class) && isArray) [ CD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ FD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_6 $$ XClass returnedClassOrElement = returnedClass[ CD ]
Line_61 $$ type = StandardBasicTypes.NCLOB.getName()-->Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()[ FD ]
Line_8 $$ if (property.isArray()) -->Line_10 $$ isArray = true[ CD ]
Line_106 $$ type = EnumType.class.getName()-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_89 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, String.class)) -->Line_90 $$ type = StringNVarcharType.INSTANCE.getName()[ CD ]
Line_17 $$ Type annType = null-->Line_27 $$ setExplicitType(annType)[ FD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_63 $$ type = "blob"[ FD ]
Line_81 $$ if ((!key && property.isAnnotationPresent(Enumerated.class)) || (key && property.isAnnotationPresent(MapKeyEnumerated.class))) -->Line_83 $$ if (!Enum.class.isAssignableFrom(attributeJavaType)) [ CD ]
Line_2 $$ public void setType(XProperty property, XClass returnedClass, String declaringClassName, AttributeConverterDescriptor attributeConverterDescriptor) -->Line_84 $$ throw new AnnotationException(String.format("Attribute [%s.%s] was annotated as enumerated, but its java type is not an enum [%s]", declaringClassName, xproperty.getName(), attributeJavaType.getName()))[ FD ]
Line_92 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class)) -->Line_93 $$ if (isArray) [ CD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_68 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, char.class) && isArray) [ FD ]
Line_50 $$ type = isDate ? "timestamp" : "calendar"-->Line_106 $$ type = EnumType.class.getName()[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_82 $$ final Class attributeJavaType = buildingContext.getBuildingOptions().getReflectionManager().toClass(returnedClassOrElement)[ FD ]
Line_75 $$ type = SerializableToBlobType.class.getName()-->Line_86 $$ type = EnumType.class.getName()[ FD ]
Line_44 $$ type = "time"-->Line_63 $$ type = "blob"[ FD ]
Line_10 $$ isArray = true-->Line_70 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Byte.class) && isArray) [ FD ]
Line_74 $$ if (buildingContext.getBuildingOptions().getReflectionManager().toXClass(Serializable.class).isAssignableFrom(returnedClassOrElement)) -->Line_78 $$ type = "blob"[ CD ]
Line_65 $$ type = isNationalized ? StandardBasicTypes.MATERIALIZED_NCLOB.getName() : StandardBasicTypes.MATERIALIZED_CLOB.getName()-->Line_69 $$ type = isNationalized ? PrimitiveCharacterArrayNClobType.class.getName() : PrimitiveCharacterArrayClobType.class.getName()[ FD ]
Line_28 $$ type = explicitType-->Line_109 $$ defaultType = BinderHelper.isEmptyAnnotationValue(type) ? returnedClassName : type[ FD ]
Line_104 $$ if (BinderHelper.ANNOTATION_STRING_DEFAULT.equals(type)) -->Line_105 $$ if (returnedClassOrElement.isEnum()) [ CD ]
Line_41 $$ type = isDate ? "date" : "calendar_date"-->Line_75 $$ type = SerializableToBlobType.class.getName()[ FD ]
Line_13 $$ Properties typeParameters = this.typeParameters-->Line_110 $$ this.typeParameters = typeParameters[ FD ]
Line_6 $$ XClass returnedClassOrElement = returnedClass-->Line_105 $$ if (returnedClassOrElement.isEnum()) [ FD ]
Line_7 $$ boolean isArray = false-->Line_66 $$ if (buildingContext.getBuildingOptions().getReflectionManager().equals(returnedClassOrElement, Character.class) && isArray) [ FD ]
