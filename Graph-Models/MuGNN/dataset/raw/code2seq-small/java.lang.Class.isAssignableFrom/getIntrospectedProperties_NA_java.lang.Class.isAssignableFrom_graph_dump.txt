Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)[ FD ]
Line_31 $$ if (JLabel.class.isAssignableFrom(aClass)) -->Line_37 $$ if (AbstractButton.class.isAssignableFrom(aClass)) [ CD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_73 $$ if (Component.class.isAssignableFrom(propertyType)) -->Line_83 $$ Condition<RadComponent> filter = null[ CD ]
Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)[ FD ]
Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)-->Line_106 $$ result.add(property)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_26 $$ final Properties properties = (myProject == null) ? new Properties() : Properties.getInstance()-->Line_112 $$ myClass2Properties.put(aClass, properties)[ FD ]
Line_32 $$ if (JLabel.class.isAssignableFrom(aClass) && ("displayedMnemonic".equals(name) || "displayedMnemonicIndex".equals(name))) -->Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)[ FD ]
Line_65 $$ if (String.class.equals(propertyType)) -->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ CD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_106 $$ result.add(property)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_24 $$ final String name = descriptor.getName()-->Line_84 $$ if (name.equals(SwingProperties.LABEL_FOR)) [ FD ]
Line_59 $$ if (byte.class.equals(propertyType)) -->Line_61 $$ if (short.class.equals(propertyType)) [ CD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_3 $$ if (myClass2Properties.containsKey(aClass)) [ CD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_24 $$ final String name = descriptor.getName()-->Line_32 $$ if (JLabel.class.isAssignableFrom(aClass) && ("displayedMnemonic".equals(name) || "displayedMnemonicIndex".equals(name))) [ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_101 $$ if (Enum.class.isAssignableFrom(propertyType)) [ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_43 $$ if (JTabbedPane.class.isAssignableFrom(aClass)) [ FD ]
Line_73 $$ if (Component.class.isAssignableFrom(propertyType)) -->Line_93 $$ if (Color.class.equals(propertyType)) [ CD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_3 $$ if (myClass2Properties.containsKey(aClass)) [ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)[ FD ]
Line_25 $$ final IntrospectedProperty property-->Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_99 $$ if (ListModel.class.isAssignableFrom(propertyType)) -->Line_101 $$ if (Enum.class.isAssignableFrom(propertyType)) [ CD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_37 $$ if (AbstractButton.class.isAssignableFrom(aClass)) [ FD ]
Line_55 $$ if (float.class.equals(propertyType)) -->Line_57 $$ if (long.class.equals(propertyType)) [ CD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_24 $$ final String name = descriptor.getName()-->Line_77 $$ if (JTabbedPane.class.isAssignableFrom(aClass) && name.equals(SwingProperties.SELECTED_COMPONENT)) [ FD ]
Line_12 $$ Method writeMethod = descriptor.getWriteMethod()-->Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_10 $$ for (final PropertyDescriptor descriptor : descriptors) -->Line_24 $$ final String name = descriptor.getName()[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_97 $$ if (Icon.class.equals(propertyType)) [ FD ]
Line_27 $$ if (int.class.equals(propertyType)) -->Line_29 $$ if (enumPairs != null) [ CD ]
Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_28 $$ IntEnumEditor.Pair[] enumPairs = properties.getEnumPairs(aClass, name)[ FD ]
Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_8 $$ final BeanInfo beanInfo = Introspector.getBeanInfo(aClass)[ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_85 $$ filter = new Condition<RadComponent>() -->Line_87 $$ ComponentItem item = getItem(t.getComponentClassName())[ FD ]
Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_57 $$ if (long.class.equals(propertyType)) -->Line_59 $$ if (byte.class.equals(propertyType)) [ CD ]
Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_69 $$ if (Dimension.class.equals(propertyType)) -->Line_71 $$ if (Rectangle.class.equals(propertyType)) [ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_83 $$ Condition<RadComponent> filter = null-->Line_85 $$ filter = new Condition<RadComponent>() [ FD ]
Line_43 $$ if (JTabbedPane.class.isAssignableFrom(aClass)) -->Line_44 $$ if (SwingProperties.SELECTED_INDEX.equals(name)) [ CD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_57 $$ if (long.class.equals(propertyType)) -->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ CD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_74 $$ if (JSplitPane.class.isAssignableFrom(aClass) && (name.equals("leftComponent") || name.equals("rightComponent") || name.equals("topComponent") || name.equals("bottomComponent"))) [ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_24 $$ final String name = descriptor.getName()-->Line_38 $$ if ("mnemonic".equals(name) || "displayedMnemonicIndex".equals(name)) [ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_55 $$ if (float.class.equals(propertyType)) [ FD ]
Line_25 $$ final IntrospectedProperty property-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_73 $$ if (Component.class.isAssignableFrom(propertyType)) -->Line_80 $$ if (JMenuBar.class.isAssignableFrom(propertyType) || JPopupMenu.class.isAssignableFrom(propertyType)) [ CD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_84 $$ if (name.equals(SwingProperties.LABEL_FOR)) -->Line_85 $$ filter = new Condition<RadComponent>() [ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_3 $$ if (myClass2Properties.containsKey(aClass)) -->Line_4 $$ return myClass2Properties.get(aClass)[ CD ]
Line_10 $$ for (final PropertyDescriptor descriptor : descriptors) -->Line_13 $$ Class propertyType = descriptor.getPropertyType()[ FD ]
Line_29 $$ if (enumPairs != null) -->Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)[ CD ]
Line_27 $$ if (int.class.equals(propertyType)) -->Line_51 $$ if (boolean.class.equals(propertyType)) [ CD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_53 $$ if (double.class.equals(propertyType)) [ FD ]
Line_28 $$ IntEnumEditor.Pair[] enumPairs = properties.getEnumPairs(aClass, name)-->Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)[ FD ]
Line_55 $$ if (float.class.equals(propertyType)) -->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ CD ]
Line_28 $$ IntEnumEditor.Pair[] enumPairs = properties.getEnumPairs(aClass, name)-->Line_29 $$ if (enumPairs != null) [ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_65 $$ if (String.class.equals(propertyType)) [ FD ]
Line_25 $$ final IntrospectedProperty property-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)[ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_106 $$ result.add(property)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_20 $$ delegeeClass.getMethod(writeMethod.getName(), writeMethod.getParameterTypes())[ FD ]
Line_51 $$ if (boolean.class.equals(propertyType)) -->Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_59 $$ if (byte.class.equals(propertyType)) -->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ CD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_69 $$ if (Dimension.class.equals(propertyType)) [ FD ]
Line_61 $$ if (short.class.equals(propertyType)) -->Line_63 $$ if (char.class.equals(propertyType)) [ CD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_24 $$ final String name = descriptor.getName()-->Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_19 $$ delegeeClass.getMethod(readMethod.getName(), readMethod.getParameterTypes())[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_57 $$ if (long.class.equals(propertyType)) [ FD ]
Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_73 $$ if (Component.class.isAssignableFrom(propertyType)) -->Line_77 $$ if (JTabbedPane.class.isAssignableFrom(aClass) && name.equals(SwingProperties.SELECTED_COMPONENT)) [ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_10 $$ for (final PropertyDescriptor descriptor : descriptors) -->Line_12 $$ Method writeMethod = descriptor.getWriteMethod()[ FD ]
Line_67 $$ if (Insets.class.equals(propertyType)) -->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_25 $$ final IntrospectedProperty property-->Line_106 $$ result.add(property)[ FD ]
Line_37 $$ if (AbstractButton.class.isAssignableFrom(aClass)) -->Line_43 $$ if (JTabbedPane.class.isAssignableFrom(aClass)) [ CD ]
Line_17 $$ boolean storeAsClient = false-->Line_22 $$ storeAsClient = true[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_85 $$ filter = new Condition<RadComponent>() -->Line_88 $$ return item != null && item.isCanAttachLabel()[ CD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_32 $$ if (JLabel.class.isAssignableFrom(aClass) && ("displayedMnemonic".equals(name) || "displayedMnemonicIndex".equals(name))) [ FD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ FD ]
Line_51 $$ if (boolean.class.equals(propertyType)) -->Line_53 $$ if (double.class.equals(propertyType)) [ CD ]
Line_24 $$ final String name = descriptor.getName()-->Line_44 $$ if (SwingProperties.SELECTED_INDEX.equals(name)) [ FD ]
Line_31 $$ if (JLabel.class.isAssignableFrom(aClass)) -->Line_32 $$ if (JLabel.class.isAssignableFrom(aClass) && ("displayedMnemonic".equals(name) || "displayedMnemonicIndex".equals(name))) [ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_8 $$ final BeanInfo beanInfo = Introspector.getBeanInfo(aClass)-->Line_9 $$ final PropertyDescriptor[] descriptors = beanInfo.getPropertyDescriptors()[ FD ]
Line_43 $$ if (JTabbedPane.class.isAssignableFrom(aClass)) -->Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_24 $$ final String name = descriptor.getName()-->Line_28 $$ IntEnumEditor.Pair[] enumPairs = properties.getEnumPairs(aClass, name)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_67 $$ if (Insets.class.equals(propertyType)) [ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_27 $$ if (int.class.equals(propertyType)) [ FD ]
Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_63 $$ if (char.class.equals(propertyType)) -->Line_65 $$ if (String.class.equals(propertyType)) [ CD ]
Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_31 $$ if (JLabel.class.isAssignableFrom(aClass)) [ FD ]
Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_53 $$ if (double.class.equals(propertyType)) -->Line_55 $$ if (float.class.equals(propertyType)) [ CD ]
Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_24 $$ final String name = descriptor.getName()-->Line_74 $$ if (JSplitPane.class.isAssignableFrom(aClass) && (name.equals("leftComponent") || name.equals("rightComponent") || name.equals("topComponent") || name.equals("bottomComponent"))) [ FD ]
Line_73 $$ if (Component.class.isAssignableFrom(propertyType)) -->Line_84 $$ if (name.equals(SwingProperties.LABEL_FOR)) [ CD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_11 $$ Method readMethod = descriptor.getReadMethod()-->Line_19 $$ delegeeClass.getMethod(readMethod.getName(), readMethod.getParameterTypes())[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_61 $$ if (short.class.equals(propertyType)) -->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ CD ]
Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_95 $$ if (Font.class.equals(propertyType)) [ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_99 $$ if (ListModel.class.isAssignableFrom(propertyType)) [ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_113 $$ return properties[ CD ]
Line_95 $$ if (Font.class.equals(propertyType)) -->Line_97 $$ if (Icon.class.equals(propertyType)) [ CD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_71 $$ if (Rectangle.class.equals(propertyType)) [ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)[ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_11 $$ Method readMethod = descriptor.getReadMethod()-->Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_27 $$ if (int.class.equals(propertyType)) -->Line_28 $$ IntEnumEditor.Pair[] enumPairs = properties.getEnumPairs(aClass, name)[ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_80 $$ if (JMenuBar.class.isAssignableFrom(propertyType) || JPopupMenu.class.isAssignableFrom(propertyType)) [ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_10 $$ for (final PropertyDescriptor descriptor : descriptors) -->Line_11 $$ Method readMethod = descriptor.getReadMethod()[ FD ]
Line_85 $$ filter = new Condition<RadComponent>() -->Line_87 $$ ComponentItem item = getItem(t.getComponentClassName())[ CD ]
Line_53 $$ if (double.class.equals(propertyType)) -->Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)[ CD ]
Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_25 $$ final IntrospectedProperty property-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)-->Line_106 $$ result.add(property)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_58 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Long.class)[ FD ]
Line_71 $$ if (Rectangle.class.equals(propertyType)) -->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_6 $$ final ArrayList<IntrospectedProperty> result = new ArrayList<IntrospectedProperty>()[ CD ]
Line_12 $$ Method writeMethod = descriptor.getWriteMethod()-->Line_20 $$ delegeeClass.getMethod(writeMethod.getName(), writeMethod.getParameterTypes())[ FD ]
Line_43 $$ if (JTabbedPane.class.isAssignableFrom(aClass)) -->Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_67 $$ if (Insets.class.equals(propertyType)) -->Line_69 $$ if (Dimension.class.equals(propertyType)) [ CD ]
Line_71 $$ if (Rectangle.class.equals(propertyType)) -->Line_73 $$ if (Component.class.isAssignableFrom(propertyType)) [ CD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_68 $$ property = new IntroInsetsProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_38 $$ if ("mnemonic".equals(name) || "displayedMnemonicIndex".equals(name)) -->Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_51 $$ if (boolean.class.equals(propertyType)) [ FD ]
Line_97 $$ if (Icon.class.equals(propertyType)) -->Line_99 $$ if (ListModel.class.isAssignableFrom(propertyType)) [ CD ]
Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_25 $$ final IntrospectedProperty property-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_93 $$ if (Color.class.equals(propertyType)) [ FD ]
Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)-->Line_106 $$ result.add(property)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_111 $$ final IntrospectedProperty[] properties = result.toArray(new IntrospectedProperty[result.size()])[ CD ]
Line_6 $$ final ArrayList<IntrospectedProperty> result = new ArrayList<IntrospectedProperty>()-->Line_106 $$ result.add(property)[ FD ]
Line_87 $$ ComponentItem item = getItem(t.getComponentClassName())-->Line_88 $$ return item != null && item.isCanAttachLabel()[ FD ]
Line_25 $$ final IntrospectedProperty property-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_26 $$ final Properties properties = (myProject == null) ? new Properties() : Properties.getInstance()-->Line_28 $$ IntEnumEditor.Pair[] enumPairs = properties.getEnumPairs(aClass, name)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_112 $$ myClass2Properties.put(aClass, properties)[ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ FD ]
Line_54 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Double.class)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)-->Line_106 $$ result.add(property)[ FD ]
Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_63 $$ if (char.class.equals(propertyType)) [ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_73 $$ if (Component.class.isAssignableFrom(propertyType)) [ FD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)-->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_63 $$ if (char.class.equals(propertyType)) -->Line_64 $$ property = new IntroCharProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_6 $$ final ArrayList<IntrospectedProperty> result = new ArrayList<IntrospectedProperty>()-->Line_111 $$ final IntrospectedProperty[] properties = result.toArray(new IntrospectedProperty[result.size()])[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_59 $$ if (byte.class.equals(propertyType)) [ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_4 $$ return myClass2Properties.get(aClass)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_73 $$ if (Component.class.isAssignableFrom(propertyType)) -->Line_74 $$ if (JSplitPane.class.isAssignableFrom(aClass) && (name.equals("leftComponent") || name.equals("rightComponent") || name.equals("topComponent") || name.equals("bottomComponent"))) [ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_72 $$ property = new IntroRectangleProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_37 $$ if (AbstractButton.class.isAssignableFrom(aClass)) -->Line_38 $$ if ("mnemonic".equals(name) || "displayedMnemonicIndex".equals(name)) [ CD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_77 $$ if (JTabbedPane.class.isAssignableFrom(aClass) && name.equals(SwingProperties.SELECTED_COMPONENT)) [ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_29 $$ if (enumPairs != null) -->Line_31 $$ if (JLabel.class.isAssignableFrom(aClass)) [ CD ]
Line_47 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_52 $$ property = new IntroBooleanProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_106 $$ result.add(property)[ FD ]
Line_2 $$ public IntrospectedProperty[] getIntrospectedProperties(@NotNull final Class aClass, @NotNull final Class delegeeClass) -->Line_112 $$ myClass2Properties.put(aClass, properties)[ CD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_60 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Byte.class)[ FD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_66 $$ property = new IntroStringProperty(name, readMethod, writeMethod, myProject, storeAsClient)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_56 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Float.class)[ FD ]
Line_13 $$ Class propertyType = descriptor.getPropertyType()-->Line_61 $$ if (short.class.equals(propertyType)) [ FD ]
Line_69 $$ if (Dimension.class.equals(propertyType)) -->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ CD ]
Line_25 $$ final IntrospectedProperty property-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_30 $$ property = createIntEnumProperty(name, readMethod, writeMethod, enumPairs)-->Line_70 $$ property = new IntroDimensionProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_65 $$ if (String.class.equals(propertyType)) -->Line_67 $$ if (Insets.class.equals(propertyType)) [ CD ]
Line_41 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_62 $$ property = new IntroPrimitiveTypeProperty(name, readMethod, writeMethod, storeAsClient, Short.class)[ FD ]
Line_35 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)-->Line_49 $$ property = new IntroIntProperty(name, readMethod, writeMethod, storeAsClient)[ FD ]
Line_93 $$ if (Color.class.equals(propertyType)) -->Line_95 $$ if (Font.class.equals(propertyType)) [ CD ]
