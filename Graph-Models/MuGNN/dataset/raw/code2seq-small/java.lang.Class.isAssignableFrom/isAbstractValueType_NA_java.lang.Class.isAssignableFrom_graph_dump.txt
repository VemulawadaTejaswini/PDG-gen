Line_12 $$ cannotBeRemote = true-->Line_31 $$ if (!cannotBeRemote) [ FD ]
Line_12 $$ cannotBeRemote = true-->Line_39 $$ cannotBeRemote = true[ FD ]
Line_12 $$ cannotBeRemote = true-->Line_26 $$ cannotBeRemote = true[ FD ]
Line_32 $$ Iterator fieldIterator = Arrays.asList(type.getFields()).iterator()-->Line_33 $$ while (fieldIterator.hasNext()) [ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_3 $$ if (!type.isInterface())[ FD ]
Line_31 $$ if (!cannotBeRemote) -->Line_32 $$ Iterator fieldIterator = Arrays.asList(type.getFields()).iterator()[ CD ]
Line_14 $$ Iterator methodIterator = Arrays.asList(type.getMethods()).iterator()-->Line_15 $$ while (methodIterator.hasNext()) [ FD ]
Line_16 $$ Method m = (Method) methodIterator.next()-->Line_17 $$ if (!throwsRemoteException(m)) [ FD ]
Line_8 $$ boolean cannotBeAbstractInterface = false-->Line_18 $$ cannotBeAbstractInterface = true[ FD ]
Line_25 $$ if (!isRMIIDLExceptionType(exception)) -->Line_26 $$ cannotBeRemote = true[ CD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_8 $$ boolean cannotBeAbstractInterface = false[ CD ]
Line_17 $$ if (!throwsRemoteException(m)) -->Line_19 $$ cannotBeRemote = true[ CD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_3 $$ if (!type.isInterface())[ CD ]
Line_33 $$ while (fieldIterator.hasNext()) -->Line_39 $$ cannotBeRemote = true[ CD ]
Line_32 $$ Iterator fieldIterator = Arrays.asList(type.getFields()).iterator()-->Line_34 $$ Field f = (Field) fieldIterator.next()[ FD ]
Line_15 $$ while (methodIterator.hasNext()) -->Line_17 $$ if (!throwsRemoteException(m)) [ CD ]
Line_22 $$ Iterator it = Arrays.asList(m.getExceptionTypes()).iterator()-->Line_23 $$ while (it.hasNext()) [ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_9 $$ if (java.rmi.Remote.class.isAssignableFrom(type)) [ FD ]
Line_15 $$ while (methodIterator.hasNext()) -->Line_16 $$ Method m = (Method) methodIterator.next()[ CD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_9 $$ if (java.rmi.Remote.class.isAssignableFrom(type)) [ CD ]
Line_12 $$ cannotBeRemote = true-->Line_19 $$ cannotBeRemote = true[ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_5 $$ if (org.omg.CORBA.Object.class.isAssignableFrom(type))[ CD ]
Line_33 $$ while (fieldIterator.hasNext()) -->Line_37 $$ if (f.getType().equals(java.lang.String.class))[ CD ]
Line_34 $$ Field f = (Field) fieldIterator.next()-->Line_37 $$ if (f.getType().equals(java.lang.String.class))[ FD ]
Line_8 $$ boolean cannotBeAbstractInterface = false-->Line_10 $$ cannotBeAbstractInterface = true[ FD ]
Line_23 $$ while (it.hasNext()) -->Line_24 $$ Class exception = (Class) it.next()[ CD ]
Line_5 $$ if (org.omg.CORBA.Object.class.isAssignableFrom(type))-->Line_6 $$ return false[ CD ]
Line_15 $$ while (methodIterator.hasNext()) -->Line_22 $$ Iterator it = Arrays.asList(m.getExceptionTypes()).iterator()[ CD ]
Line_19 $$ cannotBeRemote = true-->Line_26 $$ cannotBeRemote = true[ FD ]
Line_7 $$ boolean cannotBeRemote = false-->Line_12 $$ cannotBeRemote = true[ FD ]
Line_31 $$ if (!cannotBeRemote) -->Line_33 $$ while (fieldIterator.hasNext()) [ CD ]
Line_9 $$ if (java.rmi.Remote.class.isAssignableFrom(type)) -->Line_10 $$ cannotBeAbstractInterface = true[ CD ]
Line_19 $$ cannotBeRemote = true-->Line_39 $$ cannotBeRemote = true[ FD ]
Line_7 $$ boolean cannotBeRemote = false-->Line_26 $$ cannotBeRemote = true[ FD ]
Line_15 $$ while (methodIterator.hasNext()) -->Line_23 $$ while (it.hasNext()) [ CD ]
Line_26 $$ cannotBeRemote = true-->Line_31 $$ if (!cannotBeRemote) [ FD ]
Line_19 $$ cannotBeRemote = true-->Line_31 $$ if (!cannotBeRemote) [ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_14 $$ Iterator methodIterator = Arrays.asList(type.getMethods()).iterator()[ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_43 $$ return cannotBeRemote && cannotBeAbstractInterface[ CD ]
Line_33 $$ while (fieldIterator.hasNext()) -->Line_35 $$ if (f.getType().isPrimitive())[ CD ]
Line_24 $$ Class exception = (Class) it.next()-->Line_25 $$ if (!isRMIIDLExceptionType(exception)) [ FD ]
Line_16 $$ Method m = (Method) methodIterator.next()-->Line_22 $$ Iterator it = Arrays.asList(m.getExceptionTypes()).iterator()[ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_31 $$ if (!cannotBeRemote) [ CD ]
Line_7 $$ boolean cannotBeRemote = false-->Line_39 $$ cannotBeRemote = true[ FD ]
Line_22 $$ Iterator it = Arrays.asList(m.getExceptionTypes()).iterator()-->Line_24 $$ Class exception = (Class) it.next()[ FD ]
Line_33 $$ while (fieldIterator.hasNext()) -->Line_34 $$ Field f = (Field) fieldIterator.next()[ CD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_7 $$ boolean cannotBeRemote = false[ CD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_5 $$ if (org.omg.CORBA.Object.class.isAssignableFrom(type))[ FD ]
Line_10 $$ cannotBeAbstractInterface = true-->Line_18 $$ cannotBeAbstractInterface = true[ FD ]
Line_3 $$ if (!type.isInterface())-->Line_4 $$ return false[ CD ]
Line_34 $$ Field f = (Field) fieldIterator.next()-->Line_35 $$ if (f.getType().isPrimitive())[ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_15 $$ while (methodIterator.hasNext()) [ CD ]
Line_23 $$ while (it.hasNext()) -->Line_25 $$ if (!isRMIIDLExceptionType(exception)) [ CD ]
Line_7 $$ boolean cannotBeRemote = false-->Line_31 $$ if (!cannotBeRemote) [ FD ]
Line_7 $$ boolean cannotBeRemote = false-->Line_19 $$ cannotBeRemote = true[ FD ]
Line_26 $$ cannotBeRemote = true-->Line_39 $$ cannotBeRemote = true[ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_32 $$ Iterator fieldIterator = Arrays.asList(type.getFields()).iterator()[ FD ]
Line_2 $$ public static boolean isAbstractValueType(Class type) -->Line_14 $$ Iterator methodIterator = Arrays.asList(type.getMethods()).iterator()[ CD ]
Line_14 $$ Iterator methodIterator = Arrays.asList(type.getMethods()).iterator()-->Line_16 $$ Method m = (Method) methodIterator.next()[ FD ]
Line_9 $$ if (java.rmi.Remote.class.isAssignableFrom(type)) -->Line_12 $$ cannotBeRemote = true[ CD ]
Line_17 $$ if (!throwsRemoteException(m)) -->Line_18 $$ cannotBeAbstractInterface = true[ CD ]
