Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_19 $$ return new LinkedBindingImpl(this, key, rawType, Scopes.<T>scope(key, this, internalFactory, scoping), scoping, targetKey)[ CD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_14 $$ InternalFactory<T> internalFactory = new InternalFactory<T>() [ CD ]
Line_4 $$ Class<?> implementationType = implementedBy.value()-->Line_8 $$ if (!rawType.isAssignableFrom(implementationType)) [ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_8 $$ if (!rawType.isAssignableFrom(implementationType)) [ CD ]
Line_3 $$ Class<?> rawType = key.getTypeLiteral().getRawType()-->Line_9 $$ throw errors.notASubtype(implementationType, rawType).toException()[ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_19 $$ return new LinkedBindingImpl(this, key, rawType, Scopes.<T>scope(key, this, internalFactory, scoping), scoping, targetKey)[ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_4 $$ Class<?> implementationType = implementedBy.value()[ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_13 $$ final BindingImpl<? extends T> targetBinding = getBindingOrThrow(targetKey, errors)[ CD ]
Line_14 $$ InternalFactory<T> internalFactory = new InternalFactory<T>() -->Line_19 $$ return new LinkedBindingImpl(this, key, rawType, Scopes.<T>scope(key, this, internalFactory, scoping), scoping, targetKey)[ FD ]
Line_3 $$ Class<?> rawType = key.getTypeLiteral().getRawType()-->Line_5 $$ if (implementationType == rawType) [ FD ]
Line_14 $$ InternalFactory<T> internalFactory = new InternalFactory<T>() -->Line_16 $$ return targetBinding.getInternalFactory().get(errors.withSource(targetKey), context, dependency)[ CD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_16 $$ return targetBinding.getInternalFactory().get(errors.withSource(targetKey), context, dependency)[ FD ]
Line_12 $$ final Key<? extends T> targetKey = Key.get(subclass)-->Line_13 $$ final BindingImpl<? extends T> targetBinding = getBindingOrThrow(targetKey, errors)[ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_12 $$ final Key<? extends T> targetKey = Key.get(subclass)[ CD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_6 $$ throw errors.recursiveImplementationType().toException()[ FD ]
Line_11 $$ Class<? extends T> subclass = (Class<? extends T>) implementationType-->Line_12 $$ final Key<? extends T> targetKey = Key.get(subclass)[ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_9 $$ throw errors.notASubtype(implementationType, rawType).toException()[ FD ]
Line_13 $$ final BindingImpl<? extends T> targetBinding = getBindingOrThrow(targetKey, errors)-->Line_16 $$ return targetBinding.getInternalFactory().get(errors.withSource(targetKey), context, dependency)[ FD ]
Line_14 $$ InternalFactory<T> internalFactory = new InternalFactory<T>() -->Line_16 $$ return targetBinding.getInternalFactory().get(errors.withSource(targetKey), context, dependency)[ FD ]
Line_12 $$ final Key<? extends T> targetKey = Key.get(subclass)-->Line_16 $$ return targetBinding.getInternalFactory().get(errors.withSource(targetKey), context, dependency)[ FD ]
Line_4 $$ Class<?> implementationType = implementedBy.value()-->Line_9 $$ throw errors.notASubtype(implementationType, rawType).toException()[ FD ]
Line_4 $$ Class<?> implementationType = implementedBy.value()-->Line_5 $$ if (implementationType == rawType) [ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_3 $$ Class<?> rawType = key.getTypeLiteral().getRawType()[ CD ]
Line_3 $$ Class<?> rawType = key.getTypeLiteral().getRawType()-->Line_8 $$ if (!rawType.isAssignableFrom(implementationType)) [ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_13 $$ final BindingImpl<? extends T> targetBinding = getBindingOrThrow(targetKey, errors)[ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_5 $$ if (implementationType == rawType) [ CD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_3 $$ Class<?> rawType = key.getTypeLiteral().getRawType()[ FD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_4 $$ Class<?> implementationType = implementedBy.value()[ CD ]
Line_2 $$ <T> BindingImpl<T> createImplementedByBinding(Key<T> key, Scoping scoping, ImplementedBy implementedBy, Errors errors) throws ErrorsException -->Line_11 $$ Class<? extends T> subclass = (Class<? extends T>) implementationType[ CD ]
