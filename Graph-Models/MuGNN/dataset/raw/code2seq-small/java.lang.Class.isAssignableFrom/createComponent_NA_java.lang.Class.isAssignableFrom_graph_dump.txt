Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_46 $$ component = component1-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_85 $$ container.setLayoutManager(layoutManager)[ CD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_5 $$ Class componentClass = null-->Line_64 $$ if (componentClass == null) [ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_97 $$ if (stringDescriptorLocale != null) [ CD ]
Line_8 $$ boolean recursiveNesting = false-->Line_12 $$ recursiveNesting = true[ FD ]
Line_69 $$ if (stringDescriptorLocale != null) -->Line_70 $$ ((RadRootContainer) component).setStringDescriptorLocale(stringDescriptorLocale)[ CD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_49 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_101 $$ if (componentClass != null) [ CD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_118 $$ value = ((StringDescriptor) value).getValue()-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_34 $$ component1 = new RadTable(module, componentClass, id)-->Line_44 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_59 $$ if (layout instanceof XYLayoutManager) -->Line_62 $$ xyLayoutManager.setPreferredSize(lwComponent.getBounds().getSize())[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_3 $$ final String id = lwComponent.getId()[ CD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_27 $$ if (lwComponent instanceof LwAtomicComponent) -->Line_48 $$ if (lwComponent instanceof LwScrollPane) [ CD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_4 $$ final RadComponent component-->Line_46 $$ component = component1[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_50 $$ if (lwComponent instanceof LwTabbedPane) [ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_4 $$ final RadComponent component-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ CD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_122 $$ if (component instanceof RadContainer) -->Line_126 $$ for (int i = 0; i < lwContainer.getComponentCount(); i++) [ CD ]
Line_79 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_INTELLIJ-->Line_82 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)[ FD ]
Line_4 $$ final RadComponent component-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_46 $$ component = component1-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_141 $$ return component[ CD ]
Line_21 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)-->Line_64 $$ if (componentClass == null) [ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_7 $$ LwNestedForm nestedForm = (LwNestedForm) lwComponent-->Line_10 $$ Utils.validateNestedFormLoop(nestedForm.getFormFileName(), new PsiNestedFormLoader(module.getModule()))[ FD ]
Line_57 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_84 $$ layoutManager.readLayout(lwContainer, container)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_3 $$ final String id = lwComponent.getId()[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_130 $$ if (component instanceof RadRootContainer) -->Line_136 $$ radRootContainer.setInspectionSuppressions(lwRootContainer.getInspectionSuppressions())[ CD ]
Line_131 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_133 $$ radRootContainer.setClassToBind(lwRootContainer.getClassToBind())[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_58 $$ LayoutManager layout = lwContainer.getLayout()-->Line_76 $$ if (layout instanceof XYLayoutManager) [ FD ]
Line_82 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)-->Line_85 $$ container.setLayoutManager(layoutManager)[ FD ]
Line_57 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_67 $$ if (lwContainer instanceof LwRootContainer) [ FD ]
Line_46 $$ component = component1-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_115 $$ Map.Entry entry = (Map.Entry) o-->Line_116 $$ Object value = entry.getValue()[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_3 $$ final String id = lwComponent.getId()-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_31 $$ RadComponent component1-->Line_46 $$ component = component1[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_44 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_64 $$ if (componentClass == null) -->Line_87 $$ ((RadContainer) component).setLayout(layout)[ CD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))[ FD ]
Line_4 $$ final RadComponent component-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_4 $$ final RadComponent component-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_40 $$ final String message = FormEditingUtil.getExceptionMessage(exc)-->Line_42 $$ errorDescription += ": " + message[ FD ]
Line_4 $$ final RadComponent component-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_23 $$ if (lwComponent instanceof LwHSpacer) -->Line_24 $$ component = new RadHSpacer(module, id)[ CD ]
Line_130 $$ if (component instanceof RadRootContainer) -->Line_133 $$ radRootContainer.setClassToBind(lwRootContainer.getClassToBind())[ CD ]
Line_4 $$ final RadComponent component-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_46 $$ component = component1-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_6 $$ if (lwComponent instanceof LwNestedForm) [ FD ]
Line_74 $$ String layoutManagerName = lwContainer.getLayoutManager()-->Line_82 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)[ FD ]
Line_132 $$ final LwRootContainer lwRootContainer = (LwRootContainer) lwComponent-->Line_133 $$ radRootContainer.setClassToBind(lwRootContainer.getClassToBind())[ FD ]
Line_4 $$ final RadComponent component-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_46 $$ component = component1-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_27 $$ if (lwComponent instanceof LwAtomicComponent) -->Line_28 $$ if (componentClass == null) [ CD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_4 $$ final RadComponent component-->Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_4 $$ final RadComponent component-->Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_23 $$ if (lwComponent instanceof LwHSpacer) [ FD ]
Line_77 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_XY-->Line_79 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_INTELLIJ[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_103 $$ for (final LwIntrospectedProperty lwProperty : properties) -->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_6 $$ if (lwComponent instanceof LwNestedForm) -->Line_8 $$ boolean recursiveNesting = false[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_113 $$ HashMap clientProps = lwComponent.getDelegeeClientProperties()[ CD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_57 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_58 $$ LayoutManager layout = lwContainer.getLayout()[ FD ]
Line_132 $$ final LwRootContainer lwRootContainer = (LwRootContainer) lwComponent-->Line_136 $$ radRootContainer.setInspectionSuppressions(lwRootContainer.getInspectionSuppressions())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ CD ]
Line_28 $$ if (componentClass == null) -->Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)[ CD ]
Line_130 $$ if (component instanceof RadRootContainer) -->Line_131 $$ final RadRootContainer radRootContainer = (RadRootContainer) component[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_96 $$ component.setBounds(lwComponent.getBounds())[ CD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_3 $$ final String id = lwComponent.getId()-->Line_44 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_57 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_127 $$ container.addComponent(createComponent(module, (LwComponent) lwContainer.getComponent(i), loader, stringDescriptorLocale))[ FD ]
Line_21 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)-->Line_101 $$ if (componentClass != null) [ FD ]
Line_115 $$ Map.Entry entry = (Map.Entry) o-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_4 $$ final RadComponent component-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_4 $$ final RadComponent component-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_3 $$ final String id = lwComponent.getId()-->Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_74 $$ String layoutManagerName = lwContainer.getLayoutManager()-->Line_75 $$ if (layoutManagerName == null || layoutManagerName.length() == 0) [ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_131 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_136 $$ radRootContainer.setInspectionSuppressions(lwRootContainer.getInspectionSuppressions())[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_5 $$ Class componentClass = null[ CD ]
Line_50 $$ if (lwComponent instanceof LwTabbedPane) -->Line_52 $$ if (lwComponent instanceof LwSplitPane) [ CD ]
Line_82 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)-->Line_84 $$ layoutManager.readLayout(lwContainer, container)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_39 $$ String errorDescription = MessageFormat.format(UIDesignerBundle.message("error.class.cannot.be.instantiated"), lwComponent.getComponentClassName())-->Line_42 $$ errorDescription += ": " + message[ FD ]
Line_113 $$ HashMap clientProps = lwComponent.getDelegeeClientProperties()-->Line_114 $$ for (Object o : clientProps.entrySet()) [ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_52 $$ if (lwComponent instanceof LwSplitPane) [ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_130 $$ if (component instanceof RadRootContainer) [ CD ]
Line_34 $$ component1 = new RadTable(module, componentClass, id)-->Line_36 $$ component1 = new RadAtomicComponent(module, componentClass, id)[ FD ]
Line_131 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_134 $$ radRootContainer.setMainComponentBinding(lwRootContainer.getMainComponentBinding())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_100 $$ final LwIntrospectedProperty[] properties = lwComponent.getAssignedIntrospectedProperties()[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_39 $$ String errorDescription = MessageFormat.format(UIDesignerBundle.message("error.class.cannot.be.instantiated"), lwComponent.getComponentClassName())[ FD ]
Line_44 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)-->Line_46 $$ component = component1[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_58 $$ LayoutManager layout = lwContainer.getLayout()-->Line_87 $$ ((RadContainer) component).setLayout(layout)[ FD ]
Line_21 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)-->Line_28 $$ if (componentClass == null) [ FD ]
Line_52 $$ if (lwComponent instanceof LwSplitPane) -->Line_54 $$ if (lwComponent instanceof LwToolBar) [ CD ]
Line_74 $$ String layoutManagerName = lwContainer.getLayoutManager()-->Line_77 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_XY[ FD ]
Line_57 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_126 $$ for (int i = 0; i < lwContainer.getComponentCount(); i++) [ FD ]
Line_54 $$ if (lwComponent instanceof LwToolBar) -->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ CD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_131 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_137 $$ radRootContainer.getDelegee().setBackground(new JBColor(Color.WHITE, UIUtil.getListBackground()))[ FD ]
Line_77 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_XY-->Line_82 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_20 $$ if (lwComponent.getErrorComponentProperties() == null) [ FD ]
Line_5 $$ Class componentClass = null-->Line_21 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_14 $$ if (recursiveNesting) -->Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)[ CD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_42 $$ errorDescription += ": " + message-->Line_44 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_46 $$ component = component1-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_122 $$ if (component instanceof RadContainer) [ CD ]
Line_14 $$ if (recursiveNesting) -->Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_56 $$ if (lwComponent instanceof LwContainer) [ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ CD ]
Line_83 $$ RadContainer container = (RadContainer) component-->Line_125 $$ copyBorder(container, lwContainer)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ CD ]
Line_21 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)-->Line_33 $$ if (JTable.class.isAssignableFrom(componentClass)) [ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_46 $$ component = component1-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_61 $$ layout = xyLayoutManager-->Line_87 $$ ((RadContainer) component).setLayout(layout)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_4 $$ final RadComponent component-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_76 $$ if (layout instanceof XYLayoutManager) -->Line_79 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_INTELLIJ[ CD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_59 $$ if (layout instanceof XYLayoutManager) -->Line_60 $$ final XYLayoutManagerImpl xyLayoutManager = new XYLayoutManagerImpl()[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_69 $$ if (stringDescriptorLocale != null) [ FD ]
Line_61 $$ layout = xyLayoutManager-->Line_76 $$ if (layout instanceof XYLayoutManager) [ FD ]
Line_116 $$ Object value = entry.getValue()-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_49 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_116 $$ Object value = entry.getValue()-->Line_117 $$ if (value instanceof StringDescriptor) [ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_5 $$ Class componentClass = null-->Line_28 $$ if (componentClass == null) [ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_4 $$ final RadComponent component[ CD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_40 $$ final String message = FormEditingUtil.getExceptionMessage(exc)-->Line_41 $$ if (message != null) [ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_46 $$ component = component1[ FD ]
Line_116 $$ Object value = entry.getValue()-->Line_118 $$ value = ((StringDescriptor) value).getValue()[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_49 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_102 $$ final Palette palette = Palette.getInstance(module.getProject())-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_82 $$ RadLayoutManager layoutManager = LayoutManagerRegistry.createLayoutManager(layoutManagerName)[ CD ]
Line_46 $$ component = component1-->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_83 $$ RadContainer container = (RadContainer) component[ CD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_75 $$ if (layoutManagerName == null || layoutManagerName.length() == 0) [ CD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_28 $$ if (componentClass == null) -->Line_31 $$ RadComponent component1[ CD ]
Line_46 $$ component = component1-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_4 $$ final RadComponent component-->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_4 $$ final RadComponent component-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_25 $$ if (lwComponent instanceof LwVSpacer) [ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_102 $$ final Palette palette = Palette.getInstance(module.getProject())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_70 $$ ((RadRootContainer) component).setStringDescriptorLocale(stringDescriptorLocale)[ FD ]
Line_31 $$ RadComponent component1-->Line_36 $$ component1 = new RadAtomicComponent(module, componentClass, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_49 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_46 $$ component = component1-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_113 $$ HashMap clientProps = lwComponent.getDelegeeClientProperties()[ FD ]
Line_36 $$ component1 = new RadAtomicComponent(module, componentClass, id)-->Line_44 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_7 $$ LwNestedForm nestedForm = (LwNestedForm) lwComponent-->Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_64 $$ if (componentClass == null) -->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ CD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_84 $$ layoutManager.readLayout(lwContainer, container)[ CD ]
Line_60 $$ final XYLayoutManagerImpl xyLayoutManager = new XYLayoutManagerImpl()-->Line_62 $$ xyLayoutManager.setPreferredSize(lwComponent.getBounds().getSize())[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_58 $$ LayoutManager layout = lwContainer.getLayout()-->Line_61 $$ layout = xyLayoutManager[ FD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_73 $$ component = new RadContainer(module, componentClass, id)[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_27 $$ if (lwComponent instanceof LwAtomicComponent) [ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_46 $$ component = component1-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_64 $$ if (componentClass == null) -->Line_67 $$ if (lwContainer instanceof LwRootContainer) [ CD ]
Line_5 $$ Class componentClass = null-->Line_101 $$ if (componentClass != null) [ FD ]
Line_36 $$ component1 = new RadAtomicComponent(module, componentClass, id)-->Line_46 $$ component = component1[ FD ]
Line_6 $$ if (lwComponent instanceof LwNestedForm) -->Line_23 $$ if (lwComponent instanceof LwHSpacer) [ CD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_4 $$ final RadComponent component-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_122 $$ if (component instanceof RadContainer) -->Line_125 $$ copyBorder(container, lwContainer)[ CD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_25 $$ if (lwComponent instanceof LwVSpacer) -->Line_26 $$ component = new RadVSpacer(module, id)[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_62 $$ xyLayoutManager.setPreferredSize(lwComponent.getBounds().getSize())[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_83 $$ RadContainer container = (RadContainer) component-->Line_127 $$ container.addComponent(createComponent(module, (LwComponent) lwContainer.getComponent(i), loader, stringDescriptorLocale))[ FD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_68 $$ component = new RadRootContainer(module, id)[ CD ]
Line_4 $$ final RadComponent component-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_69 $$ if (stringDescriptorLocale != null) [ CD ]
Line_28 $$ if (componentClass == null) -->Line_46 $$ component = component1[ CD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_26 $$ component = new RadVSpacer(module, id)[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_56 $$ if (lwComponent instanceof LwContainer) -->Line_59 $$ if (layout instanceof XYLayoutManager) [ CD ]
Line_56 $$ if (lwComponent instanceof LwContainer) -->Line_57 $$ final LwContainer lwContainer = (LwContainer) lwComponent[ CD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_101 $$ if (componentClass != null) -->Line_102 $$ final Palette palette = Palette.getInstance(module.getProject())[ CD ]
Line_46 $$ component = component1-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_3 $$ final String id = lwComponent.getId()-->Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_26 $$ component = new RadVSpacer(module, id)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_56 $$ if (lwComponent instanceof LwContainer) -->Line_58 $$ LayoutManager layout = lwContainer.getLayout()[ CD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_21 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)[ FD ]
Line_31 $$ RadComponent component1-->Line_44 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_54 $$ if (lwComponent instanceof LwToolBar) [ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_6 $$ if (lwComponent instanceof LwNestedForm) -->Line_7 $$ LwNestedForm nestedForm = (LwNestedForm) lwComponent[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_100 $$ final LwIntrospectedProperty[] properties = lwComponent.getAssignedIntrospectedProperties()[ CD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_127 $$ container.addComponent(createComponent(module, (LwComponent) lwContainer.getComponent(i), loader, stringDescriptorLocale))[ FD ]
Line_117 $$ if (value instanceof StringDescriptor) -->Line_118 $$ value = ((StringDescriptor) value).getValue()[ CD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_93 $$ component.setBinding(lwComponent.getBinding())[ CD ]
Line_130 $$ if (component instanceof RadRootContainer) -->Line_135 $$ radRootContainer.setButtonGroups(lwRootContainer.getButtonGroups())[ CD ]
Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())-->Line_105 $$ if (property == null) [ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_49 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_46 $$ component = component1-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_50 $$ if (lwComponent instanceof LwTabbedPane) -->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ CD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_24 $$ component = new RadHSpacer(module, id)[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_131 $$ final RadRootContainer radRootContainer = (RadRootContainer) component-->Line_135 $$ radRootContainer.setButtonGroups(lwRootContainer.getButtonGroups())[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_46 $$ component = component1-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_33 $$ if (JTable.class.isAssignableFrom(componentClass)) -->Line_34 $$ component1 = new RadTable(module, componentClass, id)[ CD ]
Line_57 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_125 $$ copyBorder(container, lwContainer)[ FD ]
Line_4 $$ final RadComponent component-->Line_26 $$ component = new RadVSpacer(module, id)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_46 $$ component = component1[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_46 $$ component = component1-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_4 $$ final RadComponent component-->Line_49 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_26 $$ component = new RadVSpacer(module, id)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_51 $$ component = new RadTabbedPane(module, componentClass, id)[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_83 $$ RadContainer container = (RadContainer) component-->Line_85 $$ container.setLayoutManager(layoutManager)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_4 $$ final RadComponent component-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_46 $$ component = component1-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_4 $$ final RadComponent component-->Line_24 $$ component = new RadHSpacer(module, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_23 $$ if (lwComponent instanceof LwHSpacer) -->Line_25 $$ if (lwComponent instanceof LwVSpacer) [ CD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_132 $$ final LwRootContainer lwRootContainer = (LwRootContainer) lwComponent-->Line_134 $$ radRootContainer.setMainComponentBinding(lwRootContainer.getMainComponentBinding())[ FD ]
Line_130 $$ if (component instanceof RadRootContainer) -->Line_132 $$ final LwRootContainer lwRootContainer = (LwRootContainer) lwComponent[ CD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_4 $$ final RadComponent component-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_46 $$ component = component1[ FD ]
Line_33 $$ if (JTable.class.isAssignableFrom(componentClass)) -->Line_36 $$ component1 = new RadAtomicComponent(module, componentClass, id)[ CD ]
Line_126 $$ for (int i = 0; i < lwContainer.getComponentCount(); i++) -->Line_127 $$ container.addComponent(createComponent(module, (LwComponent) lwContainer.getComponent(i), loader, stringDescriptorLocale))[ CD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_5 $$ Class componentClass = null-->Line_33 $$ if (JTable.class.isAssignableFrom(componentClass)) [ FD ]
Line_56 $$ if (lwComponent instanceof LwContainer) -->Line_64 $$ if (componentClass == null) [ CD ]
Line_41 $$ if (message != null) -->Line_42 $$ errorDescription += ": " + message[ CD ]
Line_59 $$ if (layout instanceof XYLayoutManager) -->Line_61 $$ layout = xyLayoutManager[ CD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ CD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_46 $$ component = component1[ FD ]
Line_25 $$ if (lwComponent instanceof LwVSpacer) -->Line_27 $$ if (lwComponent instanceof LwAtomicComponent) [ CD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_6 $$ if (lwComponent instanceof LwNestedForm) -->Line_20 $$ if (lwComponent.getErrorComponentProperties() == null) [ CD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_6 $$ if (lwComponent instanceof LwNestedForm) -->Line_14 $$ if (recursiveNesting) [ CD ]
Line_46 $$ component = component1-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_95 $$ component.setDefaultBinding(lwComponent.isDefaultBinding())[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_48 $$ if (lwComponent instanceof LwScrollPane) [ FD ]
Line_130 $$ if (component instanceof RadRootContainer) -->Line_137 $$ radRootContainer.getDelegee().setBackground(new JBColor(Color.WHITE, UIUtil.getListBackground()))[ CD ]
Line_4 $$ final RadComponent component-->Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_60 $$ final XYLayoutManagerImpl xyLayoutManager = new XYLayoutManagerImpl()-->Line_61 $$ layout = xyLayoutManager[ FD ]
Line_46 $$ component = component1-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_4 $$ final RadComponent component-->Line_130 $$ if (component instanceof RadRootContainer) [ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_122 $$ if (component instanceof RadContainer) [ FD ]
Line_48 $$ if (lwComponent instanceof LwScrollPane) -->Line_50 $$ if (lwComponent instanceof LwTabbedPane) [ CD ]
Line_39 $$ String errorDescription = MessageFormat.format(UIDesignerBundle.message("error.class.cannot.be.instantiated"), lwComponent.getComponentClassName())-->Line_44 $$ component1 = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), errorDescription)[ FD ]
Line_4 $$ final RadComponent component-->Line_111 $$ component.getConstraints().restore(lwComponent.getConstraints())[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_54 $$ if (lwComponent instanceof LwToolBar) -->Line_56 $$ if (lwComponent instanceof LwContainer) [ CD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_126 $$ for (int i = 0; i < lwContainer.getComponentCount(); i++) -->Line_127 $$ container.addComponent(createComponent(module, (LwComponent) lwContainer.getComponent(i), loader, stringDescriptorLocale))[ FD ]
Line_97 $$ if (stringDescriptorLocale != null) -->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ CD ]
Line_58 $$ LayoutManager layout = lwContainer.getLayout()-->Line_59 $$ if (layout instanceof XYLayoutManager) [ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_10 $$ Utils.validateNestedFormLoop(nestedForm.getFormFileName(), new PsiNestedFormLoader(module.getModule()))[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_6 $$ if (lwComponent instanceof LwNestedForm) [ CD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
Line_46 $$ component = component1-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_20 $$ if (lwComponent.getErrorComponentProperties() == null) -->Line_21 $$ componentClass = Class.forName(lwComponent.getComponentClassName(), true, loader)[ CD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_4 $$ final RadComponent component-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_75 $$ if (layoutManagerName == null || layoutManagerName.length() == 0) -->Line_76 $$ if (layout instanceof XYLayoutManager) [ CD ]
Line_46 $$ component = component1-->Line_49 $$ component = new RadScrollPane(module, componentClass, id)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_46 $$ component = component1[ FD ]
Line_103 $$ for (final LwIntrospectedProperty lwProperty : properties) -->Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())[ FD ]
Line_57 $$ final LwContainer lwContainer = (LwContainer) lwComponent-->Line_74 $$ String layoutManagerName = lwContainer.getLayoutManager()[ FD ]
Line_83 $$ RadContainer container = (RadContainer) component-->Line_84 $$ layoutManager.readLayout(lwContainer, container)[ FD ]
Line_73 $$ component = new RadContainer(module, componentClass, id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_130 $$ if (component instanceof RadRootContainer) -->Line_134 $$ radRootContainer.setMainComponentBinding(lwRootContainer.getMainComponentBinding())[ CD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_24 $$ component = new RadHSpacer(module, id)[ FD ]
Line_31 $$ RadComponent component1-->Line_34 $$ component1 = new RadTable(module, componentClass, id)[ FD ]
Line_49 $$ component = new RadScrollPane(module, componentClass, id)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_76 $$ if (layout instanceof XYLayoutManager) -->Line_77 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_XY[ CD ]
Line_132 $$ final LwRootContainer lwRootContainer = (LwRootContainer) lwComponent-->Line_135 $$ radRootContainer.setButtonGroups(lwRootContainer.getButtonGroups())[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ FD ]
Line_15 $$ component = RadErrorComponent.create(module, id, lwComponent.getComponentClassName(), lwComponent.getErrorComponentProperties(), UIDesignerBundle.message("error.recursive.form.nesting"))-->Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_29 $$ component = createErrorComponent(module, id, lwComponent, loader)-->Line_73 $$ component = new RadContainer(module, componentClass, id)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_97 $$ if (stringDescriptorLocale != null) [ FD ]
Line_4 $$ final RadComponent component-->Line_98 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, stringDescriptorLocale)[ FD ]
Line_46 $$ component = component1-->Line_120 $$ component.getDelegee().putClientProperty(entry.getKey(), value)[ FD ]
Line_53 $$ component = new RadSplitPane(module, componentClass, id)-->Line_139 $$ component.doneLoadingFromLw()[ FD ]
Line_34 $$ component1 = new RadTable(module, componentClass, id)-->Line_46 $$ component = component1[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_139 $$ component.doneLoadingFromLw()[ CD ]
Line_104 $$ final IntrospectedProperty property = palette.getIntrospectedProperty(component, lwProperty.getName())-->Line_108 $$ component.loadLwProperty(lwComponent, lwProperty, property)[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_26 $$ component = new RadVSpacer(module, id)-->Line_55 $$ component = new RadToolBar(module, componentClass, id)[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_74 $$ String layoutManagerName = lwContainer.getLayoutManager()-->Line_79 $$ layoutManagerName = UIFormXmlConstants.LAYOUT_INTELLIJ[ FD ]
Line_51 $$ component = new RadTabbedPane(module, componentClass, id)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_48 $$ if (lwComponent instanceof LwScrollPane) -->Line_49 $$ component = new RadScrollPane(module, componentClass, id)[ CD ]
Line_52 $$ if (lwComponent instanceof LwSplitPane) -->Line_53 $$ component = new RadSplitPane(module, componentClass, id)[ CD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_140 $$ component.putClientProperty(RadComponent.CLIENT_PROP_LOAD_TIME_LOCALE, null)[ FD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_68 $$ component = new RadRootContainer(module, id)[ FD ]
Line_68 $$ component = new RadRootContainer(module, id)-->Line_94 $$ component.setCustomCreate(lwComponent.isCustomCreate())[ FD ]
Line_67 $$ if (lwContainer instanceof LwRootContainer) -->Line_74 $$ String layoutManagerName = lwContainer.getLayoutManager()[ CD ]
Line_17 $$ component = new RadNestedForm(module, nestedForm.getFormFileName(), id)-->Line_112 $$ component.setCustomLayoutConstraints(lwComponent.getCustomLayoutConstraints())[ FD ]
Line_24 $$ component = new RadHSpacer(module, id)-->Line_96 $$ component.setBounds(lwComponent.getBounds())[ FD ]
Line_55 $$ component = new RadToolBar(module, componentClass, id)-->Line_65 $$ component = createErrorComponent(module, id, lwComponent, loader)[ FD ]
Line_2 $$ public static RadComponent createComponent(@NotNull final ModuleProvider module, @NotNull final LwComponent lwComponent, @NotNull final ClassLoader loader, final Locale stringDescriptorLocale) throws Exception -->Line_93 $$ component.setBinding(lwComponent.getBinding())[ FD ]
