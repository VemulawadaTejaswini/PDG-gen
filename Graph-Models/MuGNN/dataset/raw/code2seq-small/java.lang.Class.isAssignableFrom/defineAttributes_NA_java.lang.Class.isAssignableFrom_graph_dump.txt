Line_6 $$ final String attribName = introspectedAttributes.next()-->Line_8 $$ final String _attribName = attribName.toLowerCase(Locale.US)[ FD ]
Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)[ CD ]
Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_10 $$ Type type = types != null ? types.getFirst() : null[ CD ]
Line_37 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))-->Line_38 $$ if (pair != null) [ FD ]
Line_5 $$ while (introspectedAttributes.hasNext()) -->Line_6 $$ final String attribName = introspectedAttributes.next()[ CD ]
Line_14 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)-->Line_16 $$ if (File.class.isAssignableFrom(attributeType)) [ FD ]
Line_22 $$ if (isAssignableFrom(Reference.class.getName(), attributeType)) -->Line_23 $$ converterClass = AntDomRefIdConverter.class[ CD ]
Line_18 $$ converterClass = AntPathConverter.class-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_10 $$ Type type = types != null ? types.getFirst() : null-->Line_20 $$ type = Boolean.class[ FD ]
Line_18 $$ converterClass = AntPathConverter.class-->Line_23 $$ converterClass = AntDomRefIdConverter.class[ FD ]
Line_16 $$ if (File.class.isAssignableFrom(attributeType)) -->Line_19 $$ if (Boolean.class.isAssignableFrom(attributeType)) [ CD ]
Line_35 $$ final String existingAttribName = xmlAttribute.getName()-->Line_36 $$ if (genericInfo.getAttributeChildDescription(existingAttribName) == null) [ FD ]
Line_4 $$ final Iterator<String> introspectedAttributes = parentIntrospector.getAttributesIterator()-->Line_6 $$ final String attribName = introspectedAttributes.next()[ FD ]
Line_17 $$ type = PsiFileSystemItem.class-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_21 $$ converterClass = AntBooleanConverter.class-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_39 $$ registerAttribute(registrar, existingAttribName, pair.getFirst(), pair.getSecond())[ FD ]
Line_10 $$ Type type = types != null ? types.getFirst() : null-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_13 $$ type = String.class-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_29 $$ if (types == null) -->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ CD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_4 $$ final Iterator<String> introspectedAttributes = parentIntrospector.getAttributesIterator()[ CD ]
Line_36 $$ if (genericInfo.getAttributeChildDescription(existingAttribName) == null) -->Line_37 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))[ CD ]
Line_11 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_19 $$ if (Boolean.class.isAssignableFrom(attributeType)) -->Line_21 $$ converterClass = AntBooleanConverter.class[ CD ]
Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_29 $$ if (types == null) [ CD ]
Line_13 $$ type = String.class-->Line_20 $$ type = Boolean.class[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_34 $$ for (XmlAttribute xmlAttribute : xmlTag.getAttributes()) [ FD ]
Line_19 $$ if (Boolean.class.isAssignableFrom(attributeType)) -->Line_22 $$ if (isAssignableFrom(Reference.class.getName(), attributeType)) [ CD ]
Line_10 $$ Type type = types != null ? types.getFirst() : null-->Line_17 $$ type = PsiFileSystemItem.class[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) [ FD ]
Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_11 $$ Class converterClass = types != null ? types.getSecond() : null[ CD ]
Line_10 $$ Type type = types != null ? types.getFirst() : null-->Line_12 $$ if (type == null) [ FD ]
Line_23 $$ converterClass = AntDomRefIdConverter.class-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_35 $$ final String existingAttribName = xmlAttribute.getName()-->Line_37 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))[ FD ]
Line_21 $$ converterClass = AntBooleanConverter.class-->Line_23 $$ converterClass = AntDomRefIdConverter.class[ FD ]
Line_14 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)-->Line_19 $$ if (Boolean.class.isAssignableFrom(attributeType)) [ FD ]
Line_11 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_21 $$ converterClass = AntBooleanConverter.class[ FD ]
Line_10 $$ Type type = types != null ? types.getFirst() : null-->Line_13 $$ type = String.class[ FD ]
Line_11 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_23 $$ converterClass = AntDomRefIdConverter.class[ FD ]
Line_37 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))-->Line_39 $$ registerAttribute(registrar, existingAttribName, pair.getFirst(), pair.getSecond())[ FD ]
Line_35 $$ final String existingAttribName = xmlAttribute.getName()-->Line_39 $$ registerAttribute(registrar, existingAttribName, pair.getFirst(), pair.getSecond())[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_18 $$ converterClass = AntPathConverter.class-->Line_21 $$ converterClass = AntBooleanConverter.class[ FD ]
Line_11 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_14 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)-->Line_15 $$ if (attributeType != null) [ FD ]
Line_23 $$ converterClass = AntDomRefIdConverter.class-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_38 $$ if (pair != null) -->Line_39 $$ registerAttribute(registrar, existingAttribName, pair.getFirst(), pair.getSecond())[ CD ]
Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ CD ]
Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_8 $$ final String _attribName = attribName.toLowerCase(Locale.US)[ CD ]
Line_6 $$ final String attribName = introspectedAttributes.next()-->Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) [ FD ]
Line_14 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)-->Line_22 $$ if (isAssignableFrom(Reference.class.getName(), attributeType)) [ FD ]
Line_13 $$ type = String.class-->Line_12 $$ if (type == null) [ FD ]
Line_20 $$ type = Boolean.class-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_27 $$ LOG.assertTrue(type != null)[ CD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_5 $$ while (introspectedAttributes.hasNext()) [ CD ]
Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_12 $$ if (type == null) [ CD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_4 $$ final Iterator<String> introspectedAttributes = parentIntrospector.getAttributesIterator()[ FD ]
Line_11 $$ Class converterClass = types != null ? types.getSecond() : null-->Line_18 $$ converterClass = AntPathConverter.class[ FD ]
Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)-->Line_9 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_36 $$ if (genericInfo.getAttributeChildDescription(existingAttribName) == null) [ FD ]
Line_10 $$ Type type = types != null ? types.getFirst() : null-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_9 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)-->Line_29 $$ if (types == null) [ FD ]
Line_5 $$ while (introspectedAttributes.hasNext()) -->Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) [ CD ]
Line_8 $$ final String _attribName = attribName.toLowerCase(Locale.US)-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_20 $$ type = Boolean.class-->Line_12 $$ if (type == null) [ FD ]
Line_13 $$ type = String.class-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_15 $$ if (attributeType != null) -->Line_16 $$ if (File.class.isAssignableFrom(attributeType)) [ CD ]
Line_12 $$ if (type == null) -->Line_14 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)[ CD ]
Line_20 $$ type = Boolean.class-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_17 $$ type = PsiFileSystemItem.class-->Line_20 $$ type = Boolean.class[ FD ]
Line_9 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)-->Line_11 $$ Class converterClass = types != null ? types.getSecond() : null[ FD ]
Line_16 $$ if (File.class.isAssignableFrom(attributeType)) -->Line_18 $$ converterClass = AntPathConverter.class[ CD ]
Line_18 $$ converterClass = AntPathConverter.class-->Line_30 $$ registeredAttribs.put(_attribName, Pair.create(type, converterClass))[ FD ]
Line_9 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)-->Line_10 $$ Type type = types != null ? types.getFirst() : null[ FD ]
Line_3 $$ final Map<String, Pair<Type, Class>> registeredAttribs = getStaticallyRegisteredAttributes(genericInfo)-->Line_37 $$ final Pair<Type, Class> pair = registeredAttribs.get(existingAttribName.toLowerCase(Locale.US))[ FD ]
Line_6 $$ final String attribName = introspectedAttributes.next()-->Line_14 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)[ FD ]
Line_17 $$ type = PsiFileSystemItem.class-->Line_12 $$ if (type == null) [ FD ]
Line_8 $$ final String _attribName = attribName.toLowerCase(Locale.US)-->Line_9 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)[ FD ]
Line_12 $$ if (type == null) -->Line_15 $$ if (attributeType != null) [ CD ]
Line_34 $$ for (XmlAttribute xmlAttribute : xmlTag.getAttributes()) -->Line_35 $$ final String existingAttribName = xmlAttribute.getName()[ FD ]
Line_4 $$ final Iterator<String> introspectedAttributes = parentIntrospector.getAttributesIterator()-->Line_5 $$ while (introspectedAttributes.hasNext()) [ FD ]
Line_16 $$ if (File.class.isAssignableFrom(attributeType)) -->Line_17 $$ type = PsiFileSystemItem.class[ CD ]
Line_17 $$ type = PsiFileSystemItem.class-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_7 $$ if (genericInfo.getAttributeChildDescription(attribName) == null) -->Line_9 $$ final Pair<Type, Class> types = registeredAttribs.get(_attribName)[ CD ]
Line_36 $$ if (genericInfo.getAttributeChildDescription(existingAttribName) == null) -->Line_38 $$ if (pair != null) [ CD ]
Line_13 $$ type = String.class-->Line_17 $$ type = PsiFileSystemItem.class[ FD ]
Line_12 $$ if (type == null) -->Line_13 $$ type = String.class[ CD ]
Line_19 $$ if (Boolean.class.isAssignableFrom(attributeType)) -->Line_20 $$ type = Boolean.class[ CD ]
Line_21 $$ converterClass = AntBooleanConverter.class-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
Line_2 $$ private static void defineAttributes(XmlTag xmlTag, DomExtensionsRegistrar registrar, DomGenericInfo genericInfo, AbstractIntrospector parentIntrospector) -->Line_14 $$ final Class attributeType = parentIntrospector.getAttributeType(attribName)[ FD ]
Line_6 $$ final String attribName = introspectedAttributes.next()-->Line_28 $$ registerAttribute(registrar, attribName, type, converterClass)[ FD ]
