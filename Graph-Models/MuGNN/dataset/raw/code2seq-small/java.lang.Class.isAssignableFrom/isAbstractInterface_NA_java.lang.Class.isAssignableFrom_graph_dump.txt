Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_16 $$ return true[ CD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_7 $$ if (java.rmi.Remote.class.isAssignableFrom(type))[ CD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_9 $$ Iterator methodIterator = Arrays.asList(type.getMethods()).iterator()[ FD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_5 $$ if (org.omg.CORBA.Object.class.isAssignableFrom(type))[ FD ]
Line_7 $$ if (java.rmi.Remote.class.isAssignableFrom(type))-->Line_8 $$ return false[ CD ]
Line_9 $$ Iterator methodIterator = Arrays.asList(type.getMethods()).iterator()-->Line_11 $$ Method m = (Method) methodIterator.next()[ FD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_7 $$ if (java.rmi.Remote.class.isAssignableFrom(type))[ FD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_3 $$ if (!type.isInterface())[ FD ]
Line_11 $$ Method m = (Method) methodIterator.next()-->Line_12 $$ if (!throwsRemoteException(m)) [ FD ]
Line_5 $$ if (org.omg.CORBA.Object.class.isAssignableFrom(type))-->Line_6 $$ return false[ CD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_10 $$ while (methodIterator.hasNext()) [ CD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_5 $$ if (org.omg.CORBA.Object.class.isAssignableFrom(type))[ CD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_9 $$ Iterator methodIterator = Arrays.asList(type.getMethods()).iterator()[ CD ]
Line_9 $$ Iterator methodIterator = Arrays.asList(type.getMethods()).iterator()-->Line_10 $$ while (methodIterator.hasNext()) [ FD ]
Line_3 $$ if (!type.isInterface())-->Line_4 $$ return false[ CD ]
Line_10 $$ while (methodIterator.hasNext()) -->Line_12 $$ if (!throwsRemoteException(m)) [ CD ]
Line_2 $$ public static boolean isAbstractInterface(Class type) -->Line_3 $$ if (!type.isInterface())[ CD ]
Line_10 $$ while (methodIterator.hasNext()) -->Line_11 $$ Method m = (Method) methodIterator.next()[ CD ]
Line_12 $$ if (!throwsRemoteException(m)) -->Line_13 $$ return false[ CD ]
