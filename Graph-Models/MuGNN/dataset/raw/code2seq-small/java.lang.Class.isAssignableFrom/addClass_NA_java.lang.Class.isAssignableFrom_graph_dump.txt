Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_3 $$ if (cls.isPrimitive())[ CD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_15 $$ if (Exception.class.isAssignableFrom(cls)) [ FD ]
Line_12 $$ ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls)-->Line_20 $$ addValue(va)[ FD ]
Line_7 $$ if (cls.isInterface()) -->Line_8 $$ if (!RmiIdlUtil.isAbstractValueType(cls)) [ CD ]
Line_15 $$ if (Exception.class.isAssignableFrom(cls)) -->Line_17 $$ addException(ea)[ CD ]
Line_7 $$ if (cls.isInterface()) -->Line_15 $$ if (Exception.class.isAssignableFrom(cls)) [ CD ]
Line_5 $$ if (cls.isArray()) -->Line_6 $$ addArray(cls)[ CD ]
Line_5 $$ if (cls.isArray()) -->Line_7 $$ if (cls.isInterface()) [ CD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_16 $$ ExceptionAnalysis ea = ExceptionAnalysis.getExceptionAnalysis(cls)[ FD ]
Line_15 $$ if (Exception.class.isAssignableFrom(cls)) -->Line_20 $$ addValue(va)[ CD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_19 $$ ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls)[ FD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_8 $$ if (!RmiIdlUtil.isAbstractValueType(cls)) [ FD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_3 $$ if (cls.isPrimitive())[ FD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_12 $$ ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls)[ FD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_7 $$ if (cls.isInterface()) [ FD ]
Line_15 $$ if (Exception.class.isAssignableFrom(cls)) -->Line_19 $$ ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls)[ CD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_5 $$ if (cls.isArray()) [ FD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_9 $$ InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls)[ FD ]
Line_15 $$ if (Exception.class.isAssignableFrom(cls)) -->Line_16 $$ ExceptionAnalysis ea = ExceptionAnalysis.getExceptionAnalysis(cls)[ CD ]
Line_16 $$ ExceptionAnalysis ea = ExceptionAnalysis.getExceptionAnalysis(cls)-->Line_17 $$ addException(ea)[ FD ]
Line_8 $$ if (!RmiIdlUtil.isAbstractValueType(cls)) -->Line_10 $$ addInterface(ia)[ CD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_5 $$ if (cls.isArray()) [ CD ]
Line_9 $$ InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls)-->Line_10 $$ addInterface(ia)[ FD ]
Line_2 $$ private void addClass(Class cls) throws RMIIIOPViolationException, IRConstructionException -->Line_6 $$ addArray(cls)[ FD ]
Line_8 $$ if (!RmiIdlUtil.isAbstractValueType(cls)) -->Line_12 $$ ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls)[ CD ]
Line_8 $$ if (!RmiIdlUtil.isAbstractValueType(cls)) -->Line_9 $$ InterfaceAnalysis ia = InterfaceAnalysis.getInterfaceAnalysis(cls)[ CD ]
Line_12 $$ ValueAnalysis va = ValueAnalysis.getValueAnalysis(cls)-->Line_13 $$ addValue(va)[ FD ]
Line_3 $$ if (cls.isPrimitive())-->Line_4 $$ return[ CD ]
Line_8 $$ if (!RmiIdlUtil.isAbstractValueType(cls)) -->Line_13 $$ addValue(va)[ CD ]
