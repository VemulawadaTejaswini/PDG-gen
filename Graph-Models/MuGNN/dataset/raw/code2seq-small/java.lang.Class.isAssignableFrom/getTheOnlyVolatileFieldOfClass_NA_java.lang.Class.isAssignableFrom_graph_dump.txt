Line_2 $$ private static <T, V> Field getTheOnlyVolatileFieldOfClass(@NotNull Class<T> ownerClass, @NotNull Class<V> fieldType) -->Line_4 $$ Field found = null[ CD ]
Line_9 $$ if (fieldType.isAssignableFrom(field.getType())) -->Line_10 $$ if (found == null) [ CD ]
Line_4 $$ Field found = null-->Line_20 $$ found.setAccessible(true)[ FD ]
Line_11 $$ found = field-->Line_17 $$ if (found == null) [ FD ]
Line_2 $$ private static <T, V> Field getTheOnlyVolatileFieldOfClass(@NotNull Class<T> ownerClass, @NotNull Class<V> fieldType) -->Line_3 $$ Field[] declaredFields = ownerClass.getDeclaredFields()[ FD ]
Line_2 $$ private static <T, V> Field getTheOnlyVolatileFieldOfClass(@NotNull Class<T> ownerClass, @NotNull Class<V> fieldType) -->Line_24 $$ return found[ CD ]
Line_4 $$ Field found = null-->Line_10 $$ if (found == null) [ FD ]
Line_4 $$ Field found = null-->Line_17 $$ if (found == null) [ FD ]
Line_4 $$ Field found = null-->Line_13 $$ throw new IllegalArgumentException("Two fields of " + fieldType + " found in the " + ownerClass + ": " + found.getName() + " and " + field.getName())[ FD ]
Line_11 $$ found = field-->Line_13 $$ throw new IllegalArgumentException("Two fields of " + fieldType + " found in the " + ownerClass + ": " + found.getName() + " and " + field.getName())[ FD ]
Line_2 $$ private static <T, V> Field getTheOnlyVolatileFieldOfClass(@NotNull Class<T> ownerClass, @NotNull Class<V> fieldType) -->Line_3 $$ Field[] declaredFields = ownerClass.getDeclaredFields()[ CD ]
Line_4 $$ Field found = null-->Line_21 $$ if ((found.getModifiers() & Modifier.VOLATILE) == 0) [ FD ]
Line_2 $$ private static <T, V> Field getTheOnlyVolatileFieldOfClass(@NotNull Class<T> ownerClass, @NotNull Class<V> fieldType) -->Line_9 $$ if (fieldType.isAssignableFrom(field.getType())) [ FD ]
Line_10 $$ if (found == null) -->Line_11 $$ found = field[ CD ]
Line_2 $$ private static <T, V> Field getTheOnlyVolatileFieldOfClass(@NotNull Class<T> ownerClass, @NotNull Class<V> fieldType) -->Line_21 $$ if ((found.getModifiers() & Modifier.VOLATILE) == 0) [ CD ]
Line_5 $$ for (Field field : declaredFields) -->Line_11 $$ found = field[ FD ]
Line_4 $$ Field found = null-->Line_11 $$ found = field[ FD ]
Line_11 $$ found = field-->Line_20 $$ found.setAccessible(true)[ FD ]
Line_5 $$ for (Field field : declaredFields) -->Line_9 $$ if (fieldType.isAssignableFrom(field.getType())) [ FD ]
Line_11 $$ found = field-->Line_21 $$ if ((found.getModifiers() & Modifier.VOLATILE) == 0) [ FD ]
Line_5 $$ for (Field field : declaredFields) -->Line_6 $$ if ((field.getModifiers() & (Modifier.STATIC | Modifier.FINAL)) != 0) [ FD ]
Line_2 $$ private static <T, V> Field getTheOnlyVolatileFieldOfClass(@NotNull Class<T> ownerClass, @NotNull Class<V> fieldType) -->Line_17 $$ if (found == null) [ CD ]
Line_5 $$ for (Field field : declaredFields) -->Line_13 $$ throw new IllegalArgumentException("Two fields of " + fieldType + " found in the " + ownerClass + ": " + found.getName() + " and " + field.getName())[ FD ]
Line_2 $$ private static <T, V> Field getTheOnlyVolatileFieldOfClass(@NotNull Class<T> ownerClass, @NotNull Class<V> fieldType) -->Line_20 $$ found.setAccessible(true)[ CD ]
