Line_2 $$ private List<Class<? extends Throwable>> detectExceptionMappings(Method method) -->Line_4 $$ detectAnnotationExceptionMappings(method, result)[ FD ]
Line_7 $$ if (Throwable.class.isAssignableFrom(paramType)) -->Line_8 $$ result.add((Class<? extends Throwable>) paramType)[ CD ]
Line_2 $$ private List<Class<? extends Throwable>> detectExceptionMappings(Method method) -->Line_3 $$ List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()[ CD ]
Line_2 $$ private List<Class<? extends Throwable>> detectExceptionMappings(Method method) -->Line_6 $$ for (Class<?> paramType : method.getParameterTypes()) [ FD ]
Line_2 $$ private List<Class<? extends Throwable>> detectExceptionMappings(Method method) -->Line_12 $$ Assert.notEmpty(result, "No exception types mapped to [ CD ]
Line_3 $$ List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()-->Line_5 $$ if (result.isEmpty()) [ FD ]
Line_6 $$ for (Class<?> paramType : method.getParameterTypes()) -->Line_7 $$ if (Throwable.class.isAssignableFrom(paramType)) [ FD ]
Line_2 $$ private List<Class<? extends Throwable>> detectExceptionMappings(Method method) -->Line_5 $$ if (result.isEmpty()) [ CD ]
Line_2 $$ private List<Class<? extends Throwable>> detectExceptionMappings(Method method) -->Line_13 $$ return result[ CD ]
Line_3 $$ List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()-->Line_8 $$ result.add((Class<? extends Throwable>) paramType)[ FD ]
Line_2 $$ private List<Class<? extends Throwable>> detectExceptionMappings(Method method) -->Line_4 $$ detectAnnotationExceptionMappings(method, result)[ CD ]
Line_3 $$ List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()-->Line_12 $$ Assert.notEmpty(result, "No exception types mapped to [ FD ]
Line_3 $$ List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()-->Line_4 $$ detectAnnotationExceptionMappings(method, result)[ FD ]
