Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_10 $$ while (nextType != Object.class) [ CD ]
Line_18 $$ if (nextInterface.isAssignableFrom(oldType)) -->Line_19 $$ return nextInterface[ CD ]
Line_17 $$ for (Class<?> nextInterface : interfaces) -->Line_18 $$ if (nextInterface.isAssignableFrom(oldType)) [ FD ]
Line_6 $$ if (oldType.isAssignableFrom(newType)) -->Line_7 $$ return oldType[ CD ]
Line_9 $$ Class<?> nextType = newType-->Line_11 $$ if (nextType.isAssignableFrom(oldType)) [ FD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_9 $$ Class<?> nextType = newType[ CD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_11 $$ if (nextType.isAssignableFrom(oldType)) [ FD ]
Line_10 $$ while (nextType != Object.class) -->Line_14 $$ nextType = nextType.getSuperclass()[ CD ]
Line_14 $$ nextType = nextType.getSuperclass()-->Line_10 $$ while (nextType != Object.class) [ FD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_6 $$ if (oldType.isAssignableFrom(newType)) [ CD ]
Line_9 $$ Class<?> nextType = newType-->Line_14 $$ nextType = nextType.getSuperclass()[ FD ]
Line_11 $$ if (nextType.isAssignableFrom(oldType)) -->Line_12 $$ return nextType[ CD ]
Line_9 $$ Class<?> nextType = newType-->Line_10 $$ while (nextType != Object.class) [ FD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_16 $$ Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(newType)[ FD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_22 $$ return Object.class[ CD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_16 $$ Class<?>[] interfaces = ClassUtils.getAllInterfacesForClass(newType)[ CD ]
Line_14 $$ nextType = nextType.getSuperclass()-->Line_11 $$ if (nextType.isAssignableFrom(oldType)) [ FD ]
Line_10 $$ while (nextType != Object.class) -->Line_11 $$ if (nextType.isAssignableFrom(oldType)) [ CD ]
Line_3 $$ if (oldType == null) -->Line_4 $$ return newType[ CD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_6 $$ if (oldType.isAssignableFrom(newType)) [ FD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_3 $$ if (oldType == null) [ FD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_18 $$ if (nextInterface.isAssignableFrom(oldType)) [ FD ]
Line_2 $$ private Class<?> determineCommonType(Class<?> oldType, Class<?> newType) -->Line_3 $$ if (oldType == null) [ CD ]
