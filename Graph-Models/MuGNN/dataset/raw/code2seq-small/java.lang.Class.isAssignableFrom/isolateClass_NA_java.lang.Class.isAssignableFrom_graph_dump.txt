Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_13 $$ return isolatedClass.asSubclass(publicBaseClass)[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_10 $$ checkArgument(isolatedClass != null, "Could load class %s", implementationClass.getName())[ FD ]
Line_3 $$ ImmutableMap.Builder<String, byte[]> builder = ImmutableMap.builder()-->Line_6 $$ builder.put(additionalClass.getName(), getByteCode(additionalClass))[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_9 $$ Class<?> isolatedClass = isolatedClasses.get(implementationClass.getName())[ CD ]
Line_5 $$ for (Class<?> additionalClass : additionalClasses) -->Line_6 $$ builder.put(additionalClass.getName(), getByteCode(additionalClass))[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_9 $$ Class<?> isolatedClass = isolatedClasses.get(implementationClass.getName())[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_11 $$ checkArgument(publicBaseClass.isAssignableFrom(isolatedClass), "Error isolating class %s, newly loaded class is not a sub type of %s", implementationClass.getName(), publicBaseClass.getName())[ CD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_4 $$ builder.put(implementationClass.getName(), getByteCode(implementationClass))[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_12 $$ checkState(isolatedClass != implementationClass, "Isolation failed")[ CD ]
Line_9 $$ Class<?> isolatedClass = isolatedClasses.get(implementationClass.getName())-->Line_11 $$ checkArgument(publicBaseClass.isAssignableFrom(isolatedClass), "Error isolating class %s, newly loaded class is not a sub type of %s", implementationClass.getName(), publicBaseClass.getName())[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_13 $$ return isolatedClass.asSubclass(publicBaseClass)[ CD ]
Line_9 $$ Class<?> isolatedClass = isolatedClasses.get(implementationClass.getName())-->Line_13 $$ return isolatedClass.asSubclass(publicBaseClass)[ FD ]
Line_3 $$ ImmutableMap.Builder<String, byte[]> builder = ImmutableMap.builder()-->Line_8 $$ Map<String, Class<?>> isolatedClasses = dynamicClassLoader.defineClasses(builder.build())[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_11 $$ checkArgument(publicBaseClass.isAssignableFrom(isolatedClass), "Error isolating class %s, newly loaded class is not a sub type of %s", implementationClass.getName(), publicBaseClass.getName())[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_8 $$ Map<String, Class<?>> isolatedClasses = dynamicClassLoader.defineClasses(builder.build())[ CD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_10 $$ checkArgument(isolatedClass != null, "Could load class %s", implementationClass.getName())[ CD ]
Line_8 $$ Map<String, Class<?>> isolatedClasses = dynamicClassLoader.defineClasses(builder.build())-->Line_9 $$ Class<?> isolatedClass = isolatedClasses.get(implementationClass.getName())[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_8 $$ Map<String, Class<?>> isolatedClasses = dynamicClassLoader.defineClasses(builder.build())[ FD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_3 $$ ImmutableMap.Builder<String, byte[]> builder = ImmutableMap.builder()[ CD ]
Line_2 $$ public static <T> Class<? extends T> isolateClass(DynamicClassLoader dynamicClassLoader, Class<T> publicBaseClass, Class<? extends T> implementationClass, Class<?>... additionalClasses) -->Line_4 $$ builder.put(implementationClass.getName(), getByteCode(implementationClass))[ CD ]
Line_3 $$ ImmutableMap.Builder<String, byte[]> builder = ImmutableMap.builder()-->Line_4 $$ builder.put(implementationClass.getName(), getByteCode(implementationClass))[ FD ]
