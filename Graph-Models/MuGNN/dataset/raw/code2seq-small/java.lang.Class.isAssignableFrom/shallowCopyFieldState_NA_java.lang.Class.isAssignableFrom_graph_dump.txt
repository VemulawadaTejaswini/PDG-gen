Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_9 $$ if (!src.getClass().isAssignableFrom(dest.getClass())) [ CD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_12 $$ doWithFields(src.getClass(), new FieldCallback() [ CD ]
Line_12 $$ doWithFields(src.getClass(), new FieldCallback() -->Line_14 $$ makeAccessible(field)[ FD ]
Line_12 $$ doWithFields(src.getClass(), new FieldCallback() -->Line_15 $$ Object srcValue = field.get(src)[ FD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_10 $$ throw new IllegalArgumentException("Destination class [" + dest.getClass().getName() + "] must be same or subclass as source class [" + src.getClass().getName() + "]")[ FD ]
Line_12 $$ doWithFields(src.getClass(), new FieldCallback() -->Line_16 $$ field.set(dest, srcValue)[ CD ]
Line_15 $$ Object srcValue = field.get(src)-->Line_16 $$ field.set(dest, srcValue)[ FD ]
Line_12 $$ doWithFields(src.getClass(), new FieldCallback() -->Line_15 $$ Object srcValue = field.get(src)[ CD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_6 $$ if (dest == null) [ CD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_9 $$ if (!src.getClass().isAssignableFrom(dest.getClass())) [ FD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_3 $$ if (src == null) [ FD ]
Line_12 $$ doWithFields(src.getClass(), new FieldCallback() -->Line_16 $$ field.set(dest, srcValue)[ FD ]
Line_12 $$ doWithFields(src.getClass(), new FieldCallback() -->Line_14 $$ makeAccessible(field)[ CD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_16 $$ field.set(dest, srcValue)[ FD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_3 $$ if (src == null) [ CD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_12 $$ doWithFields(src.getClass(), new FieldCallback() [ FD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_15 $$ Object srcValue = field.get(src)[ FD ]
Line_2 $$ public static void shallowCopyFieldState(final Object src, final Object dest) -->Line_6 $$ if (dest == null) [ FD ]
