Line_13 $$ if (classType.isPrimitive()) -->Line_14 $$ if (BOXED_TYPES.get(classType).equals(injectionTargetType)) [ CD ]
Line_12 $$ boolean ok = false-->Line_22 $$ if (!ok) [ FD ]
Line_12 $$ boolean ok = false-->Line_19 $$ ok = true[ FD ]
Line_25 $$ classType = injectionTargetType-->Line_30 $$ final InjectionTarget injectionTargetDescription = fieldOrMethod instanceof Field ? new FieldInjectionTarget(injectionTargetClassName, memberName, classType.getName()) : new MethodInjectionTarget(injectionTargetClassName, memberName, classType.getName())[ FD ]
Line_8 $$ final Class<?> injectionTargetType = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getType() : ((Method) fieldOrMethod).getParameterTypes()[0]-->Line_18 $$ if (BOXED_TYPES.get(injectionTargetType).equals(classType)) [ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_3 $$ if (entry.getInjectionTargets() != null) [ FD ]
Line_18 $$ if (BOXED_TYPES.get(injectionTargetType).equals(classType)) -->Line_19 $$ ok = true[ CD ]
Line_8 $$ final Class<?> injectionTargetType = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getType() : ((Method) fieldOrMethod).getParameterTypes()[0]-->Line_14 $$ if (BOXED_TYPES.get(classType).equals(injectionTargetType)) [ FD ]
Line_11 $$ if (!injectionTargetType.isAssignableFrom(classType)) -->Line_25 $$ classType = injectionTargetType[ CD ]
Line_4 $$ for (ResourceInjectionTargetMetaData injectionTarget : entry.getInjectionTargets()) -->Line_23 $$ throw EeLogger.ROOT_LOGGER.invalidInjectionTarget(injectionTarget.getInjectionTargetName(), injectionTarget.getInjectionTargetClass(), classType)[ FD ]
Line_11 $$ if (!injectionTargetType.isAssignableFrom(classType)) -->Line_13 $$ if (classType.isPrimitive()) [ CD ]
Line_28 $$ classType = injectionTargetType-->Line_30 $$ final InjectionTarget injectionTargetDescription = fieldOrMethod instanceof Field ? new FieldInjectionTarget(injectionTargetClassName, memberName, classType.getName()) : new MethodInjectionTarget(injectionTargetClassName, memberName, classType.getName())[ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_35 $$ return classType[ CD ]
Line_11 $$ if (!injectionTargetType.isAssignableFrom(classType)) -->Line_12 $$ boolean ok = false[ CD ]
Line_15 $$ ok = true-->Line_19 $$ ok = true[ FD ]
Line_15 $$ ok = true-->Line_22 $$ if (!ok) [ FD ]
Line_14 $$ if (BOXED_TYPES.get(classType).equals(injectionTargetType)) -->Line_15 $$ ok = true[ CD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_11 $$ if (!injectionTargetType.isAssignableFrom(classType)) [ FD ]
Line_11 $$ if (!injectionTargetType.isAssignableFrom(classType)) -->Line_22 $$ if (!ok) [ CD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_23 $$ throw EeLogger.ROOT_LOGGER.invalidInjectionTarget(injectionTarget.getInjectionTargetName(), injectionTarget.getInjectionTargetClass(), classType)[ FD ]
Line_25 $$ classType = injectionTargetType-->Line_28 $$ classType = injectionTargetType[ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_10 $$ if (classType != null) [ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_4 $$ for (ResourceInjectionTargetMetaData injectionTarget : entry.getInjectionTargets()) [ FD ]
Line_4 $$ for (ResourceInjectionTargetMetaData injectionTarget : entry.getInjectionTargets()) -->Line_6 $$ final String injectionTargetName = injectionTarget.getInjectionTargetName()[ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_18 $$ if (BOXED_TYPES.get(injectionTargetType).equals(classType)) [ FD ]
Line_19 $$ ok = true-->Line_22 $$ if (!ok) [ FD ]
Line_10 $$ if (classType != null) -->Line_11 $$ if (!injectionTargetType.isAssignableFrom(classType)) [ CD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_13 $$ if (classType.isPrimitive()) [ FD ]
Line_12 $$ boolean ok = false-->Line_15 $$ ok = true[ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_25 $$ classType = injectionTargetType[ FD ]
Line_8 $$ final Class<?> injectionTargetType = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getType() : ((Method) fieldOrMethod).getParameterTypes()[0]-->Line_25 $$ classType = injectionTargetType[ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_32 $$ resourceInjectionTarget.addResourceInjection(injectionConfiguration)[ FD ]
Line_8 $$ final Class<?> injectionTargetType = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getType() : ((Method) fieldOrMethod).getParameterTypes()[0]-->Line_11 $$ if (!injectionTargetType.isAssignableFrom(classType)) [ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_30 $$ final InjectionTarget injectionTargetDescription = fieldOrMethod instanceof Field ? new FieldInjectionTarget(injectionTargetClassName, memberName, classType.getName()) : new MethodInjectionTarget(injectionTargetClassName, memberName, classType.getName())[ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_7 $$ final AccessibleObject fieldOrMethod = getInjectionTarget(injectionTargetClassName, injectionTargetName, classLoader, deploymentReflectionIndex)[ FD ]
Line_17 $$ if (injectionTargetType.isPrimitive()) -->Line_18 $$ if (BOXED_TYPES.get(injectionTargetType).equals(classType)) [ CD ]
Line_10 $$ if (classType != null) -->Line_28 $$ classType = injectionTargetType[ CD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_28 $$ classType = injectionTargetType[ FD ]
Line_6 $$ final String injectionTargetName = injectionTarget.getInjectionTargetName()-->Line_7 $$ final AccessibleObject fieldOrMethod = getInjectionTarget(injectionTargetClassName, injectionTargetName, classLoader, deploymentReflectionIndex)[ FD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_3 $$ if (entry.getInjectionTargets() != null) [ CD ]
Line_2 $$ protected Class<?> processInjectionTargets(final ResourceInjectionTarget resourceInjectionTarget, InjectionSource injectionSource, ClassLoader classLoader, DeploymentReflectionIndex deploymentReflectionIndex, ResourceInjectionMetaData entry, Class<?> classType) throws DeploymentUnitProcessingException -->Line_14 $$ if (BOXED_TYPES.get(classType).equals(injectionTargetType)) [ FD ]
Line_5 $$ final String injectionTargetClassName = injectionTarget.getInjectionTargetClass()-->Line_7 $$ final AccessibleObject fieldOrMethod = getInjectionTarget(injectionTargetClassName, injectionTargetName, classLoader, deploymentReflectionIndex)[ FD ]
Line_4 $$ for (ResourceInjectionTargetMetaData injectionTarget : entry.getInjectionTargets()) -->Line_5 $$ final String injectionTargetClassName = injectionTarget.getInjectionTargetClass()[ FD ]
Line_8 $$ final Class<?> injectionTargetType = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getType() : ((Method) fieldOrMethod).getParameterTypes()[0]-->Line_28 $$ classType = injectionTargetType[ FD ]
Line_31 $$ final ResourceInjectionConfiguration injectionConfiguration = new ResourceInjectionConfiguration(injectionTargetDescription, injectionSource)-->Line_32 $$ resourceInjectionTarget.addResourceInjection(injectionConfiguration)[ FD ]
Line_13 $$ if (classType.isPrimitive()) -->Line_17 $$ if (injectionTargetType.isPrimitive()) [ CD ]
Line_8 $$ final Class<?> injectionTargetType = fieldOrMethod instanceof Field ? ((Field) fieldOrMethod).getType() : ((Method) fieldOrMethod).getParameterTypes()[0]-->Line_17 $$ if (injectionTargetType.isPrimitive()) [ FD ]
