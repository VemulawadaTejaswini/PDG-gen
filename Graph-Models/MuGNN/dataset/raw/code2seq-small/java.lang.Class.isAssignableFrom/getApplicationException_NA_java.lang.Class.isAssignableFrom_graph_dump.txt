Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_3 $$ ApplicationExceptionDetails applicationException = this.applicationExceptions.get(exceptionClass)[ CD ]
Line_7 $$ Class<?> superClass = exceptionClass.getSuperclass()-->Line_16 $$ superClass = superClass.getSuperclass()[ FD ]
Line_7 $$ Class<?> superClass = exceptionClass.getSuperclass()-->Line_9 $$ applicationException = this.applicationExceptions.get(superClass)[ FD ]
Line_16 $$ superClass = superClass.getSuperclass()-->Line_9 $$ applicationException = this.applicationExceptions.get(superClass)[ FD ]
Line_9 $$ applicationException = this.applicationExceptions.get(superClass)-->Line_11 $$ if (applicationException.isInherited()) [ FD ]
Line_18 $$ if (RuntimeException.class.isAssignableFrom(exceptionClass) || Error.class.isAssignableFrom(exceptionClass))-->Line_19 $$ return null[ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_3 $$ ApplicationExceptionDetails applicationException = this.applicationExceptions.get(exceptionClass)[ FD ]
Line_16 $$ superClass = superClass.getSuperclass()-->Line_8 $$ while (superClass != null && !(superClass.equals(Exception.class) || superClass.equals(Object.class))) [ FD ]
Line_3 $$ ApplicationExceptionDetails applicationException = this.applicationExceptions.get(exceptionClass)-->Line_9 $$ applicationException = this.applicationExceptions.get(superClass)[ FD ]
Line_20 $$ if (invokedMethod != null) -->Line_21 $$ final Class<?>[] exceptionTypes = invokedMethod.getExceptionTypes()[ CD ]
Line_3 $$ ApplicationExceptionDetails applicationException = this.applicationExceptions.get(exceptionClass)-->Line_11 $$ if (applicationException.isInherited()) [ FD ]
Line_9 $$ applicationException = this.applicationExceptions.get(superClass)-->Line_10 $$ if (applicationException != null) [ FD ]
Line_23 $$ if (type.isAssignableFrom(exceptionClass))-->Line_24 $$ return APPLICATION_EXCEPTION[ CD ]
Line_8 $$ while (superClass != null && !(superClass.equals(Exception.class) || superClass.equals(Object.class))) -->Line_16 $$ superClass = superClass.getSuperclass()[ CD ]
Line_10 $$ if (applicationException != null) -->Line_14 $$ return null[ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_20 $$ if (invokedMethod != null) [ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_20 $$ if (invokedMethod != null) [ FD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_8 $$ while (superClass != null && !(superClass.equals(Exception.class) || superClass.equals(Object.class))) [ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_7 $$ Class<?> superClass = exceptionClass.getSuperclass()[ FD ]
Line_3 $$ ApplicationExceptionDetails applicationException = this.applicationExceptions.get(exceptionClass)-->Line_10 $$ if (applicationException != null) [ FD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_4 $$ if (applicationException != null) [ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_21 $$ final Class<?>[] exceptionTypes = invokedMethod.getExceptionTypes()[ FD ]
Line_8 $$ while (superClass != null && !(superClass.equals(Exception.class) || superClass.equals(Object.class))) -->Line_10 $$ if (applicationException != null) [ CD ]
Line_22 $$ for (Class<?> type : exceptionTypes) -->Line_23 $$ if (type.isAssignableFrom(exceptionClass))[ FD ]
Line_4 $$ if (applicationException != null) -->Line_5 $$ return applicationException[ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_7 $$ Class<?> superClass = exceptionClass.getSuperclass()[ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_23 $$ if (type.isAssignableFrom(exceptionClass))[ FD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_27 $$ return null[ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_18 $$ if (RuntimeException.class.isAssignableFrom(exceptionClass) || Error.class.isAssignableFrom(exceptionClass))[ CD ]
Line_10 $$ if (applicationException != null) -->Line_11 $$ if (applicationException.isInherited()) [ CD ]
Line_2 $$ public ApplicationExceptionDetails getApplicationException(Class<?> exceptionClass, Method invokedMethod) -->Line_18 $$ if (RuntimeException.class.isAssignableFrom(exceptionClass) || Error.class.isAssignableFrom(exceptionClass))[ FD ]
Line_8 $$ while (superClass != null && !(superClass.equals(Exception.class) || superClass.equals(Object.class))) -->Line_9 $$ applicationException = this.applicationExceptions.get(superClass)[ CD ]
Line_7 $$ Class<?> superClass = exceptionClass.getSuperclass()-->Line_8 $$ while (superClass != null && !(superClass.equals(Exception.class) || superClass.equals(Object.class))) [ FD ]
Line_3 $$ ApplicationExceptionDetails applicationException = this.applicationExceptions.get(exceptionClass)-->Line_4 $$ if (applicationException != null) [ FD ]
Line_11 $$ if (applicationException.isInherited()) -->Line_12 $$ return applicationException[ CD ]
