Line_4 $$ if (Object.class == resolvedType) -->Line_8 $$ return getVariableName(value)[ CD ]
Line_26 $$ valueClass = getClassForValue(valueToCheck)-->Line_32 $$ String name = ClassUtils.getShortNameAsProperty(valueClass)[ FD ]
Line_16 $$ valueClass = GenericCollectionTypeResolver.getCollectionReturnType(method)-->Line_26 $$ valueClass = getClassForValue(valueToCheck)[ FD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_12 $$ if (resolvedType.isArray()) [ CD ]
Line_10 $$ Class<?> valueClass-->Line_32 $$ String name = ClassUtils.getShortNameAsProperty(valueClass)[ FD ]
Line_13 $$ valueClass = resolvedType.getComponentType()-->Line_16 $$ valueClass = GenericCollectionTypeResolver.getCollectionReturnType(method)[ FD ]
Line_16 $$ valueClass = GenericCollectionTypeResolver.getCollectionReturnType(method)-->Line_30 $$ valueClass = resolvedType[ FD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_4 $$ if (Object.class == resolvedType) [ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_5 $$ if (value == null) [ FD ]
Line_26 $$ valueClass = getClassForValue(valueToCheck)-->Line_30 $$ valueClass = resolvedType[ FD ]
Line_12 $$ if (resolvedType.isArray()) -->Line_13 $$ valueClass = resolvedType.getComponentType()[ CD ]
Line_12 $$ if (resolvedType.isArray()) -->Line_14 $$ pluralize = true[ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_8 $$ return getVariableName(value)[ FD ]
Line_15 $$ if (Collection.class.isAssignableFrom(resolvedType)) -->Line_30 $$ valueClass = resolvedType[ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_30 $$ valueClass = resolvedType[ FD ]
Line_15 $$ if (Collection.class.isAssignableFrom(resolvedType)) -->Line_28 $$ pluralize = true[ CD ]
Line_15 $$ if (Collection.class.isAssignableFrom(resolvedType)) -->Line_16 $$ valueClass = GenericCollectionTypeResolver.getCollectionReturnType(method)[ CD ]
Line_21 $$ Collection<?> collection = (Collection<?>) value-->Line_25 $$ Object valueToCheck = peekAhead(collection)[ FD ]
Line_17 $$ if (valueClass == null) -->Line_25 $$ Object valueToCheck = peekAhead(collection)[ CD ]
Line_13 $$ valueClass = resolvedType.getComponentType()-->Line_26 $$ valueClass = getClassForValue(valueToCheck)[ FD ]
Line_13 $$ valueClass = resolvedType.getComponentType()-->Line_17 $$ if (valueClass == null) [ FD ]
Line_14 $$ pluralize = true-->Line_28 $$ pluralize = true[ FD ]
Line_13 $$ valueClass = resolvedType.getComponentType()-->Line_30 $$ valueClass = resolvedType[ FD ]
Line_10 $$ Class<?> valueClass-->Line_16 $$ valueClass = GenericCollectionTypeResolver.getCollectionReturnType(method)[ FD ]
Line_15 $$ if (Collection.class.isAssignableFrom(resolvedType)) -->Line_17 $$ if (valueClass == null) [ CD ]
Line_4 $$ if (Object.class == resolvedType) -->Line_5 $$ if (value == null) [ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_16 $$ valueClass = GenericCollectionTypeResolver.getCollectionReturnType(method)[ FD ]
Line_11 $$ boolean pluralize = false-->Line_14 $$ pluralize = true[ FD ]
Line_32 $$ String name = ClassUtils.getShortNameAsProperty(valueClass)-->Line_33 $$ return (pluralize ? pluralize(name) : name)[ FD ]
Line_10 $$ Class<?> valueClass-->Line_30 $$ valueClass = resolvedType[ FD ]
Line_10 $$ Class<?> valueClass-->Line_26 $$ valueClass = getClassForValue(valueToCheck)[ FD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_3 $$ Assert.notNull(method, "Method must not be null")[ FD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_13 $$ valueClass = resolvedType.getComponentType()[ FD ]
Line_12 $$ if (resolvedType.isArray()) -->Line_15 $$ if (Collection.class.isAssignableFrom(resolvedType)) [ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_10 $$ Class<?> valueClass[ CD ]
Line_13 $$ valueClass = resolvedType.getComponentType()-->Line_32 $$ String name = ClassUtils.getShortNameAsProperty(valueClass)[ FD ]
Line_17 $$ if (valueClass == null) -->Line_18 $$ if (!(value instanceof Collection)) [ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_32 $$ String name = ClassUtils.getShortNameAsProperty(valueClass)[ CD ]
Line_16 $$ valueClass = GenericCollectionTypeResolver.getCollectionReturnType(method)-->Line_17 $$ if (valueClass == null) [ FD ]
Line_25 $$ Object valueToCheck = peekAhead(collection)-->Line_26 $$ valueClass = getClassForValue(valueToCheck)[ FD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_33 $$ return (pluralize ? pluralize(name) : name)[ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_3 $$ Assert.notNull(method, "Method must not be null")[ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_11 $$ boolean pluralize = false[ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_12 $$ if (resolvedType.isArray()) [ FD ]
Line_11 $$ boolean pluralize = false-->Line_28 $$ pluralize = true[ FD ]
Line_16 $$ valueClass = GenericCollectionTypeResolver.getCollectionReturnType(method)-->Line_32 $$ String name = ClassUtils.getShortNameAsProperty(valueClass)[ FD ]
Line_10 $$ Class<?> valueClass-->Line_17 $$ if (valueClass == null) [ FD ]
Line_17 $$ if (valueClass == null) -->Line_21 $$ Collection<?> collection = (Collection<?>) value[ CD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_4 $$ if (Object.class == resolvedType) [ FD ]
Line_30 $$ valueClass = resolvedType-->Line_32 $$ String name = ClassUtils.getShortNameAsProperty(valueClass)[ FD ]
Line_21 $$ Collection<?> collection = (Collection<?>) value-->Line_22 $$ if (collection.isEmpty()) [ FD ]
Line_17 $$ if (valueClass == null) -->Line_22 $$ if (collection.isEmpty()) [ CD ]
Line_17 $$ if (valueClass == null) -->Line_26 $$ valueClass = getClassForValue(valueToCheck)[ CD ]
Line_10 $$ Class<?> valueClass-->Line_13 $$ valueClass = resolvedType.getComponentType()[ FD ]
Line_2 $$ public static String getVariableNameForReturnType(Method method, Class<?> resolvedType, Object value) -->Line_15 $$ if (Collection.class.isAssignableFrom(resolvedType)) [ FD ]
