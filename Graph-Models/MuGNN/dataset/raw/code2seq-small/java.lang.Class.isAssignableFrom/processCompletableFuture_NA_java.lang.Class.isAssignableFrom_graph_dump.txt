Line_3 $$ if (!CompletableFuture.class.isAssignableFrom(returnType)) -->Line_4 $$ return null[ CD ]
Line_2 $$ public static <T> Future<T> processCompletableFuture(Class<?> returnType, final Callable<T> task, Executor executor) -->Line_6 $$ return CompletableFuture.supplyAsync(new Supplier<T>() [ FD ]
Line_2 $$ public static <T> Future<T> processCompletableFuture(Class<?> returnType, final Callable<T> task, Executor executor) -->Line_3 $$ if (!CompletableFuture.class.isAssignableFrom(returnType)) [ FD ]
Line_2 $$ public static <T> Future<T> processCompletableFuture(Class<?> returnType, final Callable<T> task, Executor executor) -->Line_9 $$ return task.call()[ FD ]
Line_2 $$ public static <T> Future<T> processCompletableFuture(Class<?> returnType, final Callable<T> task, Executor executor) -->Line_3 $$ if (!CompletableFuture.class.isAssignableFrom(returnType)) [ CD ]
Line_2 $$ public static <T> Future<T> processCompletableFuture(Class<?> returnType, final Callable<T> task, Executor executor) -->Line_6 $$ return CompletableFuture.supplyAsync(new Supplier<T>() [ CD ]
