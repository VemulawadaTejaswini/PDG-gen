Line_8 $$ Method method = methods[i]-->Line_14 $$ int messageOperType = checkMessageMethod(method)[ FD ]
Line_68 $$ if (possibleMatch != null) -->Line_72 $$ if (returnType == null) [ CD ]
Line_48 $$ if (paramClass != null && paramClass != Object.class) -->Line_52 $$ if (!actualType.isAssignableFrom(paramClass)) [ CD ]
Line_43 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_84 $$ if (oper.getMethod() == null) [ CD ]
Line_31 $$ Class actualType = type-->Line_52 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_37 $$ if (typeQName == null) -->Line_45 $$ if (paramClass == null) [ CD ]
Line_7 $$ for (int i = 0; i < methods.length; i++) -->Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) [ CD ]
Line_37 $$ if (typeQName == null) -->Line_42 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) [ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_81 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ CD ]
Line_21 $$ possibleMatch = method-->Line_68 $$ if (possibleMatch != null) [ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_84 $$ if (oper.getMethod() == null) [ FD ]
Line_62 $$ possibleMatch = method-->Line_75 $$ createFaultMetadata(possibleMatch, oper)[ FD ]
Line_6 $$ Method possibleMatch = null-->Line_76 $$ oper.setMethod(possibleMatch)[ FD ]
Line_68 $$ if (possibleMatch != null) -->Line_76 $$ oper.setMethod(possibleMatch)[ CD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_28 $$ boolean conversionNecessary = false[ CD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_57 $$ param.setJavaType(type)[ CD ]
Line_8 $$ Method method = methods[i]-->Line_24 $$ Class[] paramTypes = method.getParameterTypes()[ FD ]
Line_13 $$ if (style == Style.MESSAGE) -->Line_20 $$ oper.setMessageOperationStyle(messageOperType)[ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_73 $$ oper.setReturnType(getTypeMapping().getTypeQName(returnClass))[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_25 $$ if (paramTypes.length != oper.getNumParams())[ FD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_37 $$ if (typeQName == null) [ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_5 $$ Method[] methods = getMethods(implClass)[ FD ]
Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_49 $$ if (!JavaUtils.isConvertable(paramClass, actualType)) [ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_5 $$ Method[] methods = getMethods(implClass)[ CD ]
Line_30 $$ Class type = paramTypes[j]-->Line_32 $$ if (Holder.class.isAssignableFrom(type)) [ FD ]
Line_7 $$ for (int i = 0; i < methods.length; i++) -->Line_8 $$ Method method = methods[i][ CD ]
Line_28 $$ boolean conversionNecessary = false-->Line_53 $$ conversionNecessary = true[ FD ]
Line_33 $$ actualType = JavaUtils.getHolderValueType(type)-->Line_49 $$ if (!JavaUtils.isConvertable(paramClass, actualType)) [ FD ]
Line_37 $$ if (typeQName == null) -->Line_39 $$ param.setTypeQName(typeQName)[ CD ]
Line_6 $$ Method possibleMatch = null-->Line_21 $$ possibleMatch = method[ FD ]
Line_62 $$ possibleMatch = method-->Line_76 $$ oper.setMethod(possibleMatch)[ FD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_29 $$ for (j = 0; j < paramTypes.length; j++) [ CD ]
Line_62 $$ possibleMatch = method-->Line_68 $$ if (possibleMatch != null) [ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_77 $$ method2OperationMap.put(possibleMatch, oper)[ FD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_62 $$ possibleMatch = method[ CD ]
Line_21 $$ possibleMatch = method-->Line_69 $$ Class returnClass = possibleMatch.getReturnType()[ FD ]
Line_27 $$ int j-->Line_59 $$ if (j != paramTypes.length) [ FD ]
Line_48 $$ if (paramClass != null && paramClass != Object.class) -->Line_49 $$ if (!JavaUtils.isConvertable(paramClass, actualType)) [ CD ]
Line_38 $$ typeQName = getTypeMapping().getTypeQName(actualType)-->Line_39 $$ param.setTypeQName(typeQName)[ FD ]
Line_33 $$ actualType = JavaUtils.getHolderValueType(type)-->Line_38 $$ typeQName = getTypeMapping().getTypeQName(actualType)[ FD ]
Line_35 $$ ParameterDesc param = oper.getParameter(j)-->Line_36 $$ QName typeQName = param.getTypeQName()[ FD ]
Line_21 $$ possibleMatch = method-->Line_62 $$ possibleMatch = method[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_80 $$ Class superClass = implClass.getSuperclass()[ FD ]
Line_68 $$ if (possibleMatch != null) -->Line_78 $$ return[ CD ]
Line_37 $$ if (typeQName == null) -->Line_38 $$ typeQName = getTypeMapping().getTypeQName(actualType)[ CD ]
Line_14 $$ int messageOperType = checkMessageMethod(method)-->Line_20 $$ oper.setMessageOperationStyle(messageOperType)[ FD ]
Line_8 $$ Method method = methods[i]-->Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) [ FD ]
Line_7 $$ for (int i = 0; i < methods.length; i++) -->Line_9 $$ if (method2OperationMap == null) [ CD ]
Line_13 $$ if (style == Style.MESSAGE) -->Line_15 $$ if (messageOperType == OperationDesc.MSG_METHOD_NONCONFORMING)[ CD ]
Line_62 $$ possibleMatch = method-->Line_77 $$ method2OperationMap.put(possibleMatch, oper)[ FD ]
Line_35 $$ ParameterDesc param = oper.getParameter(j)-->Line_39 $$ param.setTypeQName(typeQName)[ FD ]
Line_30 $$ Class type = paramTypes[j]-->Line_33 $$ actualType = JavaUtils.getHolderValueType(type)[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_3 $$ if (oper.getMethod() != null)[ CD ]
Line_3 $$ if (oper.getMethod() != null)-->Line_4 $$ return[ CD ]
Line_31 $$ Class actualType = type-->Line_38 $$ typeQName = getTypeMapping().getTypeQName(actualType)[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_35 $$ ParameterDesc param = oper.getParameter(j)[ FD ]
Line_37 $$ if (typeQName == null) -->Line_48 $$ if (paramClass != null && paramClass != Object.class) [ CD ]
Line_31 $$ Class actualType = type-->Line_33 $$ actualType = JavaUtils.getHolderValueType(type)[ FD ]
Line_6 $$ Method possibleMatch = null-->Line_77 $$ method2OperationMap.put(possibleMatch, oper)[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_76 $$ oper.setMethod(possibleMatch)[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_75 $$ createFaultMetadata(possibleMatch, oper)[ FD ]
Line_21 $$ possibleMatch = method-->Line_76 $$ oper.setMethod(possibleMatch)[ FD ]
Line_80 $$ Class superClass = implClass.getSuperclass()-->Line_81 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) [ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_82 $$ syncOperationToClass(oper, superClass)[ FD ]
Line_21 $$ possibleMatch = method-->Line_77 $$ method2OperationMap.put(possibleMatch, oper)[ FD ]
Line_62 $$ possibleMatch = method-->Line_69 $$ Class returnClass = possibleMatch.getReturnType()[ FD ]
Line_41 $$ Class paramClass = param.getJavaType()-->Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)[ FD ]
Line_71 $$ QName returnType = oper.getReturnType()-->Line_72 $$ if (returnType == null) [ FD ]
Line_8 $$ Method method = methods[i]-->Line_62 $$ possibleMatch = method[ FD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_63 $$ if (!conversionNecessary) [ CD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_30 $$ Class type = paramTypes[j][ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_6 $$ Method possibleMatch = null[ CD ]
Line_14 $$ int messageOperType = checkMessageMethod(method)-->Line_15 $$ if (messageOperType == OperationDesc.MSG_METHOD_NONCONFORMING)[ FD ]
Line_6 $$ Method possibleMatch = null-->Line_68 $$ if (possibleMatch != null) [ FD ]
Line_41 $$ Class paramClass = param.getJavaType()-->Line_49 $$ if (!JavaUtils.isConvertable(paramClass, actualType)) [ FD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_25 $$ if (paramTypes.length != oper.getNumParams())[ CD ]
Line_36 $$ QName typeQName = param.getTypeQName()-->Line_37 $$ if (typeQName == null) [ FD ]
Line_27 $$ int j-->Line_29 $$ for (j = 0; j < paramTypes.length; j++) [ FD ]
Line_42 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) -->Line_43 $$ paramClass = JavaUtils.getHolderValueType(paramClass)[ CD ]
Line_45 $$ if (paramClass == null) -->Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)[ CD ]
Line_41 $$ Class paramClass = param.getJavaType()-->Line_43 $$ paramClass = JavaUtils.getHolderValueType(paramClass)[ FD ]
Line_35 $$ ParameterDesc param = oper.getParameter(j)-->Line_41 $$ Class paramClass = param.getJavaType()[ FD ]
Line_36 $$ QName typeQName = param.getTypeQName()-->Line_39 $$ param.setTypeQName(typeQName)[ FD ]
Line_8 $$ Method method = methods[i]-->Line_21 $$ possibleMatch = method[ FD ]
Line_80 $$ Class superClass = implClass.getSuperclass()-->Line_82 $$ syncOperationToClass(oper, superClass)[ FD ]
Line_21 $$ possibleMatch = method-->Line_75 $$ createFaultMetadata(possibleMatch, oper)[ FD ]
Line_68 $$ if (possibleMatch != null) -->Line_71 $$ QName returnType = oper.getReturnType()[ CD ]
Line_28 $$ boolean conversionNecessary = false-->Line_63 $$ if (!conversionNecessary) [ FD ]
Line_41 $$ Class paramClass = param.getJavaType()-->Line_42 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) [ FD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_36 $$ QName typeQName = param.getTypeQName()[ CD ]
Line_69 $$ Class returnClass = possibleMatch.getReturnType()-->Line_70 $$ oper.setReturnClass(returnClass)[ FD ]
Line_68 $$ if (possibleMatch != null) -->Line_77 $$ method2OperationMap.put(possibleMatch, oper)[ CD ]
Line_38 $$ typeQName = getTypeMapping().getTypeQName(actualType)-->Line_37 $$ if (typeQName == null) [ FD ]
Line_30 $$ Class type = paramTypes[j]-->Line_57 $$ param.setJavaType(type)[ FD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_27 $$ int j[ CD ]
Line_69 $$ Class returnClass = possibleMatch.getReturnType()-->Line_73 $$ oper.setReturnType(getTypeMapping().getTypeQName(returnClass))[ FD ]
Line_13 $$ if (style == Style.MESSAGE) -->Line_14 $$ int messageOperType = checkMessageMethod(method)[ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_85 $$ InternalException ie = new InternalException(Messages.getMessage("serviceDescOperSync00", oper.getName(), implClass.getName()))[ FD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_35 $$ ParameterDesc param = oper.getParameter(j)[ CD ]
Line_43 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_49 $$ if (!JavaUtils.isConvertable(paramClass, actualType)) [ FD ]
Line_37 $$ if (typeQName == null) -->Line_41 $$ Class paramClass = param.getJavaType()[ CD ]
Line_35 $$ ParameterDesc param = oper.getParameter(j)-->Line_57 $$ param.setJavaType(type)[ FD ]
Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_42 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) [ FD ]
Line_53 $$ conversionNecessary = true-->Line_63 $$ if (!conversionNecessary) [ FD ]
Line_36 $$ QName typeQName = param.getTypeQName()-->Line_38 $$ typeQName = getTypeMapping().getTypeQName(actualType)[ FD ]
Line_68 $$ if (possibleMatch != null) -->Line_75 $$ createFaultMetadata(possibleMatch, oper)[ CD ]
Line_43 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_42 $$ if (paramClass != null && JavaUtils.getHolderValueType(paramClass) != null) [ FD ]
Line_32 $$ if (Holder.class.isAssignableFrom(type)) -->Line_33 $$ actualType = JavaUtils.getHolderValueType(type)[ CD ]
Line_14 $$ int messageOperType = checkMessageMethod(method)-->Line_17 $$ if (messageOperType == -1) [ FD ]
Line_27 $$ int j-->Line_35 $$ ParameterDesc param = oper.getParameter(j)[ FD ]
Line_84 $$ if (oper.getMethod() == null) -->Line_85 $$ InternalException ie = new InternalException(Messages.getMessage("serviceDescOperSync00", oper.getName(), implClass.getName()))[ CD ]
Line_43 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_52 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_31 $$ Class actualType = type-->Line_49 $$ if (!JavaUtils.isConvertable(paramClass, actualType)) [ FD ]
Line_6 $$ Method possibleMatch = null-->Line_62 $$ possibleMatch = method[ FD ]
Line_13 $$ if (style == Style.MESSAGE) -->Line_17 $$ if (messageOperType == -1) [ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_20 $$ oper.setMessageOperationStyle(messageOperType)[ FD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_24 $$ Class[] paramTypes = method.getParameterTypes()[ CD ]
Line_43 $$ paramClass = JavaUtils.getHolderValueType(paramClass)-->Line_45 $$ if (paramClass == null) [ FD ]
Line_41 $$ Class paramClass = param.getJavaType()-->Line_52 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_71 $$ QName returnType = oper.getReturnType()[ FD ]
Line_35 $$ ParameterDesc param = oper.getParameter(j)-->Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)[ FD ]
Line_68 $$ if (possibleMatch != null) -->Line_69 $$ Class returnClass = possibleMatch.getReturnType()[ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_3 $$ if (oper.getMethod() != null)[ FD ]
Line_72 $$ if (returnType == null) -->Line_73 $$ oper.setReturnType(getTypeMapping().getTypeQName(returnClass))[ CD ]
Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_43 $$ paramClass = JavaUtils.getHolderValueType(paramClass)[ FD ]
Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_52 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_52 $$ if (!actualType.isAssignableFrom(paramClass)) -->Line_53 $$ conversionNecessary = true[ CD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_59 $$ if (j != paramTypes.length) [ FD ]
Line_13 $$ if (style == Style.MESSAGE) -->Line_21 $$ possibleMatch = method[ CD ]
Line_33 $$ actualType = JavaUtils.getHolderValueType(type)-->Line_52 $$ if (!actualType.isAssignableFrom(paramClass)) [ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) [ FD ]
Line_41 $$ Class paramClass = param.getJavaType()-->Line_45 $$ if (paramClass == null) [ FD ]
Line_68 $$ if (possibleMatch != null) -->Line_70 $$ oper.setReturnClass(returnClass)[ CD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_59 $$ if (j != paramTypes.length) [ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_80 $$ Class superClass = implClass.getSuperclass()[ CD ]
Line_6 $$ Method possibleMatch = null-->Line_69 $$ Class returnClass = possibleMatch.getReturnType()[ FD ]
Line_12 $$ if (Modifier.isPublic(method.getModifiers()) && method.getName().equals(oper.getName()) && method2OperationMap.get(method) == null) -->Line_13 $$ if (style == Style.MESSAGE) [ CD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_35 $$ ParameterDesc param = oper.getParameter(j)[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_70 $$ oper.setReturnClass(returnClass)[ FD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_31 $$ Class actualType = type[ CD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_68 $$ if (possibleMatch != null) [ CD ]
Line_6 $$ Method possibleMatch = null-->Line_75 $$ createFaultMetadata(possibleMatch, oper)[ FD ]
Line_2 $$ private void syncOperationToClass(OperationDesc oper, Class implClass) -->Line_7 $$ for (int i = 0; i < methods.length; i++) [ CD ]
Line_29 $$ for (j = 0; j < paramTypes.length; j++) -->Line_32 $$ if (Holder.class.isAssignableFrom(type)) [ CD ]
Line_46 $$ paramClass = getTypeMapping().getClassForQName(param.getTypeQName(), null)-->Line_45 $$ if (paramClass == null) [ FD ]
Line_81 $$ if (superClass != null && !superClass.getName().startsWith("java.") && !superClass.getName().startsWith("javax.") && (stopClasses == null || !stopClasses.contains(superClass.getName()))) -->Line_82 $$ syncOperationToClass(oper, superClass)[ CD ]
