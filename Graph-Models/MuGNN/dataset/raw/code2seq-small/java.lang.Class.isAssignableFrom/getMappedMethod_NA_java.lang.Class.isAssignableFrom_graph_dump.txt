Line_2 $$ private Method getMappedMethod(Class<? extends Exception> exceptionType) -->Line_9 $$ if (!matches.isEmpty()) [ CD ]
Line_3 $$ List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()-->Line_11 $$ return this.mappedMethods.get(matches.get(0))[ FD ]
Line_3 $$ List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()-->Line_9 $$ if (!matches.isEmpty()) [ FD ]
Line_4 $$ for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) -->Line_5 $$ if (mappedException.isAssignableFrom(exceptionType)) [ FD ]
Line_2 $$ private Method getMappedMethod(Class<? extends Exception> exceptionType) -->Line_5 $$ if (mappedException.isAssignableFrom(exceptionType)) [ FD ]
Line_4 $$ for (Class<? extends Throwable> mappedException : this.mappedMethods.keySet()) -->Line_6 $$ matches.add(mappedException)[ FD ]
Line_3 $$ List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()-->Line_10 $$ Collections.sort(matches, new ExceptionDepthComparator(exceptionType))[ FD ]
Line_9 $$ if (!matches.isEmpty()) -->Line_11 $$ return this.mappedMethods.get(matches.get(0))[ CD ]
Line_9 $$ if (!matches.isEmpty()) -->Line_10 $$ Collections.sort(matches, new ExceptionDepthComparator(exceptionType))[ CD ]
Line_9 $$ if (!matches.isEmpty()) -->Line_13 $$ return null[ CD ]
Line_2 $$ private Method getMappedMethod(Class<? extends Exception> exceptionType) -->Line_3 $$ List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()[ CD ]
Line_3 $$ List<Class<? extends Throwable>> matches = new ArrayList<Class<? extends Throwable>>()-->Line_6 $$ matches.add(mappedException)[ FD ]
Line_5 $$ if (mappedException.isAssignableFrom(exceptionType)) -->Line_6 $$ matches.add(mappedException)[ CD ]
