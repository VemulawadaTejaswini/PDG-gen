Line_56 $$ int i-->Line_93 $$ for (i = 0; i < len; i++) [ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_15 $$ ca.iconst(paramTypes.length)[ FD ]
Line_3 $$ Class<?> returnType = m.getReturnType()-->Line_46 $$ String typeName = returnType.getName()[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_44 $$ String ret = "Ljava/lang/Object;"[ CD ]
Line_61 $$ for (i = 0; i < len; i++) -->Line_65 $$ init.aastore()[ CD ]
Line_32 $$ if (type.equals(float.class)) -->Line_36 $$ ca.iload(index)[ CD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_8 $$ ca.aload(0)[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_90 $$ init.iconst(n)[ FD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_40 $$ ca.aastore()[ CD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_21 $$ ca.iconst(j)[ FD ]
Line_3 $$ Class<?> returnType = m.getReturnType()-->Line_51 $$ if (!returnType.isPrimitive() && returnType != Object.class) [ FD ]
Line_17 $$ int index = 1-->Line_36 $$ ca.iload(index)[ FD ]
Line_19 $$ Class<?> type = paramTypes[j]-->Line_24 $$ if (type.equals(double.class)) [ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_25 $$ ca.dload(index)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_59 $$ init.iconst(len)[ CD ]
Line_17 $$ int index = 1-->Line_39 $$ index++[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_5 $$ Class<?>[] exceptions = m.getExceptionTypes()[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_54 $$ ca.returnInstruction()[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_58 $$ len = paramTypes.length[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_50 $$ ca.invokevirtual(superclass.getName(), invoke, "(Ljava/lang/String;Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;[Ljava/lang/Object;)" + ret)[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_29 $$ ca.lload(index)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_61 $$ for (i = 0; i < len; i++) [ CD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_13 $$ ca.anewarray(Object.class.getName())[ FD ]
Line_56 $$ int i-->Line_63 $$ init.iconst(i)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_4 $$ Class<?>[] paramTypes = m.getParameterTypes()[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_34 $$ Boxing.boxFloat(ca)[ FD ]
Line_94 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_95 $$ init.dup()[ CD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_104 $$ init.invokestatic(StubStrategy.class.getName(), "forMethod", "([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;")[ FD ]
Line_67 $$ len = exceptions.length-->Line_93 $$ for (i = 0; i < len; i++) [ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_10 $$ ca.getstatic(asm.getName(), strategyField, StubStrategy.class)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_9 $$ ca.ldc(idlName)[ CD ]
Line_32 $$ if (type.equals(float.class)) -->Line_33 $$ ca.fload(index)[ CD ]
Line_22 $$ if (!type.isPrimitive()) -->Line_24 $$ if (type.equals(double.class)) [ CD ]
Line_11 $$ if (paramTypes.length == 0) -->Line_15 $$ ca.iconst(paramTypes.length)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_43 $$ String invoke = "invoke"[ CD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_21 $$ ca.iconst(j)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_50 $$ ca.invokevirtual(superclass.getName(), invoke, "(Ljava/lang/String;Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;[Ljava/lang/Object;)" + ret)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_10 $$ ca.getstatic(asm.getName(), strategyField, StubStrategy.class)[ FD ]
Line_57 $$ int len-->Line_93 $$ for (i = 0; i < len; i++) [ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_98 $$ init.aastore()[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_102 $$ init.ldc(CDRStream.abbrevFor(returnType))[ CD ]
Line_58 $$ len = paramTypes.length-->Line_78 $$ for (i = 0; i < len; i++) [ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_10 $$ ca.getstatic(asm.getName(), strategyField, StubStrategy.class)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_69 $$ for (i = 0; i < len; i++) [ CD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_33 $$ ca.fload(index)[ FD ]
Line_28 $$ if (type.equals(long.class)) -->Line_32 $$ if (type.equals(float.class)) [ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_103 $$ init.aconstNull()[ CD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_63 $$ init.iconst(i)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_74 $$ init.iconst(n)[ CD ]
Line_19 $$ Class<?> type = paramTypes[j]-->Line_37 $$ Boxing.boxIfNessesary(ca, DescriptorUtils.makeDescriptor(type))[ FD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_99 $$ j++[ FD ]
Line_11 $$ if (paramTypes.length == 0) -->Line_16 $$ ca.anewarray(Object.class.getName())[ CD ]
Line_3 $$ Class<?> returnType = m.getReturnType()-->Line_102 $$ init.ldc(CDRStream.abbrevFor(returnType))[ FD ]
Line_17 $$ int index = 1-->Line_23 $$ ca.aload(index)[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_40 $$ ca.aastore()[ FD ]
Line_77 $$ int j = 0-->Line_81 $$ init.iconst(j)[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_82 $$ init.ldc(ExceptionAnalysis.getExceptionAnalysis(exceptions[i]).getExceptionRepositoryId())[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()[ FD ]
Line_70 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_71 $$ n++[ CD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_39 $$ index++[ CD ]
Line_17 $$ int index = 1-->Line_29 $$ ca.lload(index)[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_23 $$ ca.aload(index)[ FD ]
Line_51 $$ if (!returnType.isPrimitive() && returnType != Object.class) -->Line_52 $$ ca.checkcast(returnType)[ CD ]
Line_57 $$ int len-->Line_78 $$ for (i = 0; i < len; i++) [ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_67 $$ len = exceptions.length[ CD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_106 $$ init.returnInstruction()[ FD ]
Line_17 $$ int index = 1-->Line_31 $$ index++[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_102 $$ init.ldc(CDRStream.abbrevFor(returnType))[ FD ]
Line_17 $$ int index = 1-->Line_33 $$ ca.fload(index)[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_74 $$ init.iconst(n)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_6 $$ asm.addField(Modifier.PRIVATE + Modifier.STATIC, strategyField, StubStrategy.class)[ CD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_81 $$ init.iconst(j)[ FD ]
Line_94 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_97 $$ init.ldc(exceptions[i].getName())[ CD ]
Line_94 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_99 $$ j++[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_57 $$ int len[ CD ]
Line_11 $$ if (paramTypes.length == 0) -->Line_13 $$ ca.anewarray(Object.class.getName())[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_8 $$ ca.aload(0)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_3 $$ Class<?> returnType = m.getReturnType()[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()[ CD ]
Line_24 $$ if (type.equals(double.class)) -->Line_27 $$ index++[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_5 $$ Class<?>[] exceptions = m.getExceptionTypes()[ CD ]
Line_28 $$ if (type.equals(long.class)) -->Line_30 $$ Boxing.boxLong(ca)[ CD ]
Line_3 $$ Class<?> returnType = m.getReturnType()-->Line_45 $$ if (returnType.isPrimitive() && returnType != Void.TYPE) [ FD ]
Line_19 $$ Class<?> type = paramTypes[j]-->Line_22 $$ if (!type.isPrimitive()) [ FD ]
Line_11 $$ if (paramTypes.length == 0) -->Line_17 $$ int index = 1[ CD ]
Line_77 $$ int j = 0-->Line_96 $$ init.iconst(j)[ FD ]
Line_57 $$ int len-->Line_58 $$ len = paramTypes.length[ FD ]
Line_24 $$ if (type.equals(double.class)) -->Line_26 $$ Boxing.boxDouble(ca)[ CD ]
Line_68 $$ int n = 0-->Line_71 $$ n++[ FD ]
Line_24 $$ if (type.equals(double.class)) -->Line_28 $$ if (type.equals(long.class)) [ CD ]
Line_57 $$ int len-->Line_67 $$ len = exceptions.length[ FD ]
Line_32 $$ if (type.equals(float.class)) -->Line_34 $$ Boxing.boxFloat(ca)[ CD ]
Line_45 $$ if (returnType.isPrimitive() && returnType != Void.TYPE) -->Line_48 $$ ret = DescriptorUtils.makeDescriptor(returnType)[ CD ]
Line_57 $$ int len-->Line_69 $$ for (i = 0; i < len; i++) [ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_56 $$ int i[ CD ]
Line_22 $$ if (!type.isPrimitive()) -->Line_23 $$ ca.aload(index)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_105 $$ init.putstatic(asm.getName(), strategyField, StubStrategy.class)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_90 $$ init.iconst(n)[ CD ]
Line_57 $$ int len-->Line_59 $$ init.iconst(len)[ FD ]
Line_78 $$ for (i = 0; i < len; i++) -->Line_79 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) [ CD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_9 $$ ca.ldc(idlName)[ FD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_19 $$ Class<?> type = paramTypes[j][ CD ]
Line_58 $$ len = paramTypes.length-->Line_59 $$ init.iconst(len)[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_30 $$ Boxing.boxLong(ca)[ FD ]
Line_61 $$ for (i = 0; i < len; i++) -->Line_63 $$ init.iconst(i)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_9 $$ ca.ldc(idlName)[ FD ]
Line_56 $$ int i-->Line_61 $$ for (i = 0; i < len; i++) [ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_68 $$ int n = 0[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_105 $$ init.putstatic(asm.getName(), strategyField, StubStrategy.class)[ CD ]
Line_61 $$ for (i = 0; i < len; i++) -->Line_69 $$ for (i = 0; i < len; i++) [ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_59 $$ init.iconst(len)[ FD ]
Line_93 $$ for (i = 0; i < len; i++) -->Line_94 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) [ CD ]
Line_69 $$ for (i = 0; i < len; i++) -->Line_78 $$ for (i = 0; i < len; i++) [ FD ]
Line_24 $$ if (type.equals(double.class)) -->Line_25 $$ ca.dload(index)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()[ FD ]
Line_57 $$ int len-->Line_61 $$ for (i = 0; i < len; i++) [ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_52 $$ ca.checkcast(returnType)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_45 $$ if (returnType.isPrimitive() && returnType != Void.TYPE) [ CD ]
Line_28 $$ if (type.equals(long.class)) -->Line_31 $$ index++[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()[ CD ]
Line_3 $$ Class<?> returnType = m.getReturnType()-->Line_48 $$ ret = DescriptorUtils.makeDescriptor(returnType)[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_62 $$ init.dup()[ FD ]
Line_94 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_98 $$ init.aastore()[ CD ]
Line_94 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_96 $$ init.iconst(j)[ CD ]
Line_67 $$ len = exceptions.length-->Line_69 $$ for (i = 0; i < len; i++) [ FD ]
Line_56 $$ int i-->Line_78 $$ for (i = 0; i < len; i++) [ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_16 $$ ca.anewarray(Object.class.getName())[ FD ]
Line_32 $$ if (type.equals(float.class)) -->Line_37 $$ Boxing.boxIfNessesary(ca, DescriptorUtils.makeDescriptor(type))[ CD ]
Line_78 $$ for (i = 0; i < len; i++) -->Line_93 $$ for (i = 0; i < len; i++) [ FD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_20 $$ ca.dup()[ CD ]
Line_61 $$ for (i = 0; i < len; i++) -->Line_62 $$ init.dup()[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_51 $$ if (!returnType.isPrimitive() && returnType != Object.class) [ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_11 $$ if (paramTypes.length == 0) [ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_104 $$ init.invokestatic(StubStrategy.class.getName(), "forMethod", "([Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;Ljava/lang/ClassLoader;)Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;")[ CD ]
Line_58 $$ len = paramTypes.length-->Line_69 $$ for (i = 0; i < len; i++) [ FD ]
Line_43 $$ String invoke = "invoke"-->Line_47 $$ invoke += (Character.toUpperCase(typeName.charAt(0)) + typeName.substring(1))[ FD ]
Line_3 $$ Class<?> returnType = m.getReturnType()-->Line_52 $$ ca.checkcast(returnType)[ FD ]
Line_61 $$ for (i = 0; i < len; i++) -->Line_93 $$ for (i = 0; i < len; i++) [ FD ]
Line_56 $$ int i-->Line_69 $$ for (i = 0; i < len; i++) [ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_91 $$ init.anewarray(String.class.getName())[ FD ]
Line_47 $$ invoke += (Character.toUpperCase(typeName.charAt(0)) + typeName.substring(1))-->Line_50 $$ ca.invokevirtual(superclass.getName(), invoke, "(Ljava/lang/String;Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;[Ljava/lang/Object;)" + ret)[ FD ]
Line_68 $$ int n = 0-->Line_90 $$ init.iconst(n)[ FD ]
Line_79 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_84 $$ j++[ CD ]
Line_17 $$ int index = 1-->Line_25 $$ ca.dload(index)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_60 $$ init.anewarray(String.class.getName())[ CD ]
Line_19 $$ Class<?> type = paramTypes[j]-->Line_28 $$ if (type.equals(long.class)) [ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_20 $$ ca.dup()[ FD ]
Line_77 $$ int j = 0-->Line_99 $$ j++[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_83 $$ init.aastore()[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_6 $$ asm.addField(Modifier.PRIVATE + Modifier.STATIC, strategyField, StubStrategy.class)[ FD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_84 $$ j++[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_50 $$ ca.invokevirtual(superclass.getName(), invoke, "(Ljava/lang/String;Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;[Ljava/lang/Object;)" + ret)[ FD ]
Line_46 $$ String typeName = returnType.getName()-->Line_47 $$ invoke += (Character.toUpperCase(typeName.charAt(0)) + typeName.substring(1))[ FD ]
Line_69 $$ for (i = 0; i < len; i++) -->Line_93 $$ for (i = 0; i < len; i++) [ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_4 $$ Class<?>[] paramTypes = m.getParameterTypes()[ CD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_37 $$ Boxing.boxIfNessesary(ca, DescriptorUtils.makeDescriptor(type))[ FD ]
Line_44 $$ String ret = "Ljava/lang/Object;"-->Line_48 $$ ret = DescriptorUtils.makeDescriptor(returnType)[ FD ]
Line_58 $$ len = paramTypes.length-->Line_67 $$ len = exceptions.length[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_60 $$ init.anewarray(String.class.getName())[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_3 $$ Class<?> returnType = m.getReturnType()[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_75 $$ init.anewarray(String.class.getName())[ FD ]
Line_61 $$ for (i = 0; i < len; i++) -->Line_78 $$ for (i = 0; i < len; i++) [ FD ]
Line_67 $$ len = exceptions.length-->Line_78 $$ for (i = 0; i < len; i++) [ FD ]
Line_43 $$ String invoke = "invoke"-->Line_50 $$ ca.invokevirtual(superclass.getName(), invoke, "(Ljava/lang/String;Lorg/wildfly/iiop/openjdk/rmi/marshal/strategy/StubStrategy;[Ljava/lang/Object;)" + ret)[ FD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_22 $$ if (!type.isPrimitive()) [ CD ]
Line_19 $$ Class<?> type = paramTypes[j]-->Line_32 $$ if (type.equals(float.class)) [ FD ]
Line_79 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_83 $$ init.aastore()[ CD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_103 $$ init.aconstNull()[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_26 $$ Boxing.boxDouble(ca)[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_105 $$ init.putstatic(asm.getName(), strategyField, StubStrategy.class)[ FD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_21 $$ ca.iconst(j)[ FD ]
Line_11 $$ if (paramTypes.length == 0) -->Line_12 $$ ca.iconst(0)[ CD ]
Line_58 $$ len = paramTypes.length-->Line_61 $$ for (i = 0; i < len; i++) [ FD ]
Line_79 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_80 $$ init.dup()[ CD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_12 $$ ca.iconst(0)[ FD ]
Line_28 $$ if (type.equals(long.class)) -->Line_29 $$ ca.lload(index)[ CD ]
Line_45 $$ if (returnType.isPrimitive() && returnType != Void.TYPE) -->Line_47 $$ invoke += (Character.toUpperCase(typeName.charAt(0)) + typeName.substring(1))[ CD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_64 $$ init.ldc(CDRStream.abbrevFor(paramTypes[i]))[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_80 $$ init.dup()[ FD ]
Line_68 $$ int n = 0-->Line_74 $$ init.iconst(n)[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_91 $$ init.anewarray(String.class.getName())[ CD ]
Line_45 $$ if (returnType.isPrimitive() && returnType != Void.TYPE) -->Line_46 $$ String typeName = returnType.getName()[ CD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_81 $$ init.iconst(j)[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_95 $$ init.dup()[ FD ]
Line_69 $$ for (i = 0; i < len; i++) -->Line_70 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) [ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_54 $$ ca.returnInstruction()[ CD ]
Line_17 $$ int index = 1-->Line_27 $$ index++[ FD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_93 $$ for (i = 0; i < len; i++) [ CD ]
Line_7 $$ final CodeAttribute ca = asm.addMethod(m).getCodeAttribute()-->Line_36 $$ ca.iload(index)[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_96 $$ init.iconst(j)[ FD ]
Line_18 $$ for (int j = 0; j < paramTypes.length; j++) -->Line_96 $$ init.iconst(j)[ FD ]
Line_61 $$ for (i = 0; i < len; i++) -->Line_64 $$ init.ldc(CDRStream.abbrevFor(paramTypes[i]))[ CD ]
Line_79 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_82 $$ init.ldc(ExceptionAnalysis.getExceptionAnalysis(exceptions[i]).getExceptionRepositoryId())[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_75 $$ init.anewarray(String.class.getName())[ CD ]
Line_77 $$ int j = 0-->Line_84 $$ j++[ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_97 $$ init.ldc(exceptions[i].getName())[ FD ]
Line_58 $$ len = paramTypes.length-->Line_93 $$ for (i = 0; i < len; i++) [ FD ]
Line_55 $$ final CodeAttribute init = asm.addMethod(Modifier.PRIVATE + Modifier.STATIC, initMethod, "V").getCodeAttribute()-->Line_65 $$ init.aastore()[ FD ]
Line_61 $$ for (i = 0; i < len; i++) -->Line_63 $$ init.iconst(i)[ FD ]
Line_11 $$ if (paramTypes.length == 0) -->Line_18 $$ for (int j = 0; j < paramTypes.length; j++) [ CD ]
Line_79 $$ if (!RemoteException.class.isAssignableFrom(exceptions[i])) -->Line_81 $$ init.iconst(j)[ CD ]
Line_2 $$ private static void generateMethodCode(ClassFile asm, Class<?> superclass, Method m, String idlName, String strategyField, String initMethod) -->Line_106 $$ init.returnInstruction()[ CD ]
