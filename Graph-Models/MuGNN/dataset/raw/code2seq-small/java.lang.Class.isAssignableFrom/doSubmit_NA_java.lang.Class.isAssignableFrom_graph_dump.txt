Line_2 $$ protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) -->Line_11 $$ if (Future.class.isAssignableFrom(returnType)) [ FD ]
Line_2 $$ protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) -->Line_9 $$ if (ListenableFuture.class.isAssignableFrom(returnType)) [ FD ]
Line_9 $$ if (ListenableFuture.class.isAssignableFrom(returnType)) -->Line_10 $$ return ((AsyncListenableTaskExecutor) executor).submitListenable(task)[ CD ]
Line_2 $$ protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) -->Line_10 $$ return ((AsyncListenableTaskExecutor) executor).submitListenable(task)[ FD ]
Line_3 $$ if (completableFuturePresent) -->Line_4 $$ Future<Object> result = CompletableFutureDelegate.processCompletableFuture(returnType, task, executor)[ CD ]
Line_2 $$ protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) -->Line_9 $$ if (ListenableFuture.class.isAssignableFrom(returnType)) [ CD ]
Line_11 $$ if (Future.class.isAssignableFrom(returnType)) -->Line_14 $$ executor.submit(task)[ CD ]
Line_5 $$ if (result != null) -->Line_6 $$ return result[ CD ]
Line_2 $$ protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) -->Line_3 $$ if (completableFuturePresent) [ CD ]
Line_11 $$ if (Future.class.isAssignableFrom(returnType)) -->Line_12 $$ return executor.submit(task)[ CD ]
Line_2 $$ protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) -->Line_12 $$ return executor.submit(task)[ FD ]
Line_2 $$ protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) -->Line_14 $$ executor.submit(task)[ FD ]
Line_11 $$ if (Future.class.isAssignableFrom(returnType)) -->Line_15 $$ return null[ CD ]
Line_4 $$ Future<Object> result = CompletableFutureDelegate.processCompletableFuture(returnType, task, executor)-->Line_5 $$ if (result != null) [ FD ]
Line_3 $$ if (completableFuturePresent) -->Line_5 $$ if (result != null) [ CD ]
Line_2 $$ protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) -->Line_4 $$ Future<Object> result = CompletableFutureDelegate.processCompletableFuture(returnType, task, executor)[ FD ]
Line_9 $$ if (ListenableFuture.class.isAssignableFrom(returnType)) -->Line_11 $$ if (Future.class.isAssignableFrom(returnType)) [ CD ]
