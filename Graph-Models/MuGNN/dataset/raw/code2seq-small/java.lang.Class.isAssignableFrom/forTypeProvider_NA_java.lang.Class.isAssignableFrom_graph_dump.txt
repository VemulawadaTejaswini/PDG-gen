Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_7 $$ Type cached = cache.get(provider.getType())[ CD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_3 $$ Assert.notNull(provider, "Provider must not be null")[ CD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_3 $$ Assert.notNull(provider, "Provider must not be null")[ FD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_5 $$ return provider.getType()[ FD ]
Line_8 $$ if (cached != null) -->Line_9 $$ return cached[ CD ]
Line_12 $$ if (type.isAssignableFrom(provider.getType().getClass())) -->Line_18 $$ return cached[ CD ]
Line_4 $$ if (provider.getType() instanceof Serializable || provider.getType() == null) -->Line_5 $$ return provider.getType()[ CD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_12 $$ if (type.isAssignableFrom(provider.getType().getClass())) [ FD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_13 $$ ClassLoader classLoader = provider.getClass().getClassLoader()[ FD ]
Line_12 $$ if (type.isAssignableFrom(provider.getType().getClass())) -->Line_17 $$ cache.put(provider.getType(), cached)[ CD ]
Line_11 $$ for (Class<?> type : SUPPORTED_SERIALIZABLE_TYPES) -->Line_12 $$ if (type.isAssignableFrom(provider.getType().getClass())) [ FD ]
Line_12 $$ if (type.isAssignableFrom(provider.getType().getClass())) -->Line_13 $$ ClassLoader classLoader = provider.getClass().getClassLoader()[ CD ]
Line_14 $$ Class<?>[] interfaces = new Class<?>[] -->Line_16 $$ cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler)[ FD ]
Line_12 $$ if (type.isAssignableFrom(provider.getType().getClass())) -->Line_14 $$ Class<?>[] interfaces = new Class<?>[] [ CD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_8 $$ if (cached != null) [ CD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_7 $$ Type cached = cache.get(provider.getType())[ FD ]
Line_15 $$ InvocationHandler handler = new TypeProxyInvocationHandler(provider)-->Line_16 $$ cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler)[ FD ]
Line_13 $$ ClassLoader classLoader = provider.getClass().getClassLoader()-->Line_16 $$ cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler)[ FD ]
Line_7 $$ Type cached = cache.get(provider.getType())-->Line_17 $$ cache.put(provider.getType(), cached)[ FD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_4 $$ if (provider.getType() instanceof Serializable || provider.getType() == null) [ FD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_17 $$ cache.put(provider.getType(), cached)[ FD ]
Line_12 $$ if (type.isAssignableFrom(provider.getType().getClass())) -->Line_15 $$ InvocationHandler handler = new TypeProxyInvocationHandler(provider)[ CD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_4 $$ if (provider.getType() instanceof Serializable || provider.getType() == null) [ CD ]
Line_2 $$ static Type forTypeProvider(final TypeProvider provider) -->Line_21 $$ throw new IllegalArgumentException("Unsupported Type class: " + provider.getType().getClass().getName())[ FD ]
Line_12 $$ if (type.isAssignableFrom(provider.getType().getClass())) -->Line_16 $$ cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler)[ CD ]
Line_16 $$ cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler)-->Line_17 $$ cache.put(provider.getType(), cached)[ FD ]
Line_7 $$ Type cached = cache.get(provider.getType())-->Line_16 $$ cached = (Type) Proxy.newProxyInstance(classLoader, interfaces, handler)[ FD ]
Line_7 $$ Type cached = cache.get(provider.getType())-->Line_8 $$ if (cached != null) [ FD ]
