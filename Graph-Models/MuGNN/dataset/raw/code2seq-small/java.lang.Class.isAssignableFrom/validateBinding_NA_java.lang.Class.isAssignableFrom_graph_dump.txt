Line_8 $$ if (bind.getClass().isArray()) -->Line_11 $$ if (!isValidBindValue(parameterType, bind, temporalType)) [ CD ]
Line_2 $$ protected static void validateBinding(Class parameterType, Object bind, TemporalType temporalType) -->Line_7 $$ validateCollectionValuedParameterBinding(parameterType, (Collection) bind, temporalType)[ FD ]
Line_2 $$ protected static void validateBinding(Class parameterType, Object bind, TemporalType temporalType) -->Line_11 $$ if (!isValidBindValue(parameterType, bind, temporalType)) [ FD ]
Line_2 $$ protected static void validateBinding(Class parameterType, Object bind, TemporalType temporalType) -->Line_3 $$ if (bind == null || parameterType == null) [ CD ]
Line_2 $$ protected static void validateBinding(Class parameterType, Object bind, TemporalType temporalType) -->Line_6 $$ if (Collection.class.isInstance(bind) && !Collection.class.isAssignableFrom(parameterType)) [ FD ]
Line_2 $$ protected static void validateBinding(Class parameterType, Object bind, TemporalType temporalType) -->Line_9 $$ validateArrayValuedParameterBinding(parameterType, bind, temporalType)[ FD ]
Line_2 $$ protected static void validateBinding(Class parameterType, Object bind, TemporalType temporalType) -->Line_8 $$ if (bind.getClass().isArray()) [ FD ]
Line_8 $$ if (bind.getClass().isArray()) -->Line_9 $$ validateArrayValuedParameterBinding(parameterType, bind, temporalType)[ CD ]
Line_2 $$ protected static void validateBinding(Class parameterType, Object bind, TemporalType temporalType) -->Line_6 $$ if (Collection.class.isInstance(bind) && !Collection.class.isAssignableFrom(parameterType)) [ CD ]
Line_6 $$ if (Collection.class.isInstance(bind) && !Collection.class.isAssignableFrom(parameterType)) -->Line_7 $$ validateCollectionValuedParameterBinding(parameterType, (Collection) bind, temporalType)[ CD ]
Line_6 $$ if (Collection.class.isInstance(bind) && !Collection.class.isAssignableFrom(parameterType)) -->Line_8 $$ if (bind.getClass().isArray()) [ CD ]
Line_2 $$ protected static void validateBinding(Class parameterType, Object bind, TemporalType temporalType) -->Line_12 $$ throw new IllegalArgumentException(String.format("Parameter value [%s] did not match expected type [%s (%s)]", bind, parameterType.getName(), extractName(temporalType)))[ FD ]
Line_3 $$ if (bind == null || parameterType == null) -->Line_4 $$ return[ CD ]
