Line_2 $$ private void _checkRMISignature(Class<? extends Remote> rmiClass, boolean serializable) -->Line_7 $$ Method[] methods = rmiClass.getDeclaredMethods()[ FD ]
Line_2 $$ private void _checkRMISignature(Class<? extends Remote> rmiClass, boolean serializable) -->Line_5 $$ Assert.assertTrue(rmiClass + " does not implement " + Serializable.class, Serializable.class.isAssignableFrom(rmiClass))[ FD ]
Line_2 $$ private void _checkRMISignature(Class<? extends Remote> rmiClass, boolean serializable) -->Line_7 $$ Method[] methods = rmiClass.getDeclaredMethods()[ CD ]
Line_2 $$ private void _checkRMISignature(Class<? extends Remote> rmiClass, boolean serializable) -->Line_3 $$ Assert.assertTrue(rmiClass + " does not implement " + Remote.class, Remote.class.isAssignableFrom(rmiClass))[ CD ]
Line_9 $$ boolean exists = false-->Line_13 $$ exists = true[ FD ]
Line_12 $$ if (RemoteException.class.isAssignableFrom(exceptionType)) -->Line_13 $$ exists = true[ CD ]
Line_13 $$ exists = true-->Line_17 $$ Assert.assertTrue(method + " does not throw " + RemoteException.class, exists)[ FD ]
Line_8 $$ for (Method method : methods) -->Line_10 $$ Class<?>[] exceptionTypes = method.getExceptionTypes()[ FD ]
Line_11 $$ for (Class<?> exceptionType : exceptionTypes) -->Line_12 $$ if (RemoteException.class.isAssignableFrom(exceptionType)) [ FD ]
Line_4 $$ if (serializable) -->Line_5 $$ Assert.assertTrue(rmiClass + " does not implement " + Serializable.class, Serializable.class.isAssignableFrom(rmiClass))[ CD ]
Line_2 $$ private void _checkRMISignature(Class<? extends Remote> rmiClass, boolean serializable) -->Line_4 $$ if (serializable) [ CD ]
Line_2 $$ private void _checkRMISignature(Class<? extends Remote> rmiClass, boolean serializable) -->Line_3 $$ Assert.assertTrue(rmiClass + " does not implement " + Remote.class, Remote.class.isAssignableFrom(rmiClass))[ FD ]
Line_9 $$ boolean exists = false-->Line_17 $$ Assert.assertTrue(method + " does not throw " + RemoteException.class, exists)[ FD ]
