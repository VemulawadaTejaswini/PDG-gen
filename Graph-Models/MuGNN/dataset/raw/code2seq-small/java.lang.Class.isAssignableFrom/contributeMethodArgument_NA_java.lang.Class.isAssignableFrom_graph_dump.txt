Line_12 $$ for (Object element : (Collection<?>) value) -->Line_13 $$ element = formatUriValue(conversionService, TypeDescriptor.nested(parameter, 1), element)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_7 $$ RequestParam requestParam = parameter.getParameterAnnotation(RequestParam.class)[ FD ]
Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_4 $$ if (Map.class.isAssignableFrom(paramType) || MultipartFile.class == paramType || "javax.servlet.http.Part".equals(paramType.getName())) [ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_13 $$ element = formatUriValue(conversionService, TypeDescriptor.nested(parameter, 1), element)[ FD ]
Line_9 $$ if (value == null) -->Line_11 $$ if (value instanceof Collection) [ CD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_3 $$ Class<?> paramType = parameter.getParameterType()[ FD ]
Line_4 $$ if (Map.class.isAssignableFrom(paramType) || MultipartFile.class == paramType || "javax.servlet.http.Part".equals(paramType.getName())) -->Line_5 $$ return[ CD ]
Line_7 $$ RequestParam requestParam = parameter.getParameterAnnotation(RequestParam.class)-->Line_8 $$ String name = (requestParam == null || StringUtils.isEmpty(requestParam.name()) ? parameter.getParameterName() : requestParam.name())[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_14 $$ builder.queryParam(name, element)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_17 $$ builder.queryParam(name, formatUriValue(conversionService, new TypeDescriptor(parameter), value))[ FD ]
Line_13 $$ element = formatUriValue(conversionService, TypeDescriptor.nested(parameter, 1), element)-->Line_14 $$ builder.queryParam(name, element)[ FD ]
Line_9 $$ if (value == null) -->Line_10 $$ builder.queryParam(name)[ CD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_4 $$ if (Map.class.isAssignableFrom(paramType) || MultipartFile.class == paramType || "javax.servlet.http.Part".equals(paramType.getName())) [ CD ]
Line_8 $$ String name = (requestParam == null || StringUtils.isEmpty(requestParam.name()) ? parameter.getParameterName() : requestParam.name())-->Line_10 $$ builder.queryParam(name)[ FD ]
Line_12 $$ for (Object element : (Collection<?>) value) -->Line_14 $$ builder.queryParam(name, element)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_9 $$ if (value == null) [ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_8 $$ String name = (requestParam == null || StringUtils.isEmpty(requestParam.name()) ? parameter.getParameterName() : requestParam.name())[ CD ]
Line_8 $$ String name = (requestParam == null || StringUtils.isEmpty(requestParam.name()) ? parameter.getParameterName() : requestParam.name())-->Line_14 $$ builder.queryParam(name, element)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_10 $$ builder.queryParam(name)[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_9 $$ if (value == null) [ CD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_8 $$ String name = (requestParam == null || StringUtils.isEmpty(requestParam.name()) ? parameter.getParameterName() : requestParam.name())[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_3 $$ Class<?> paramType = parameter.getParameterType()[ CD ]
Line_11 $$ if (value instanceof Collection) -->Line_17 $$ builder.queryParam(name, formatUriValue(conversionService, new TypeDescriptor(parameter), value))[ CD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_7 $$ RequestParam requestParam = parameter.getParameterAnnotation(RequestParam.class)[ CD ]
Line_8 $$ String name = (requestParam == null || StringUtils.isEmpty(requestParam.name()) ? parameter.getParameterName() : requestParam.name())-->Line_17 $$ builder.queryParam(name, formatUriValue(conversionService, new TypeDescriptor(parameter), value))[ FD ]
Line_2 $$ public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) -->Line_11 $$ if (value instanceof Collection) [ FD ]
