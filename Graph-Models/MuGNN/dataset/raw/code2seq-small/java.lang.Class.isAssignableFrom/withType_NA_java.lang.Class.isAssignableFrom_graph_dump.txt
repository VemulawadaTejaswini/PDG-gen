Line_2 $$ public <S> ModelMap<S> withType(final Class<S> type) -->Line_11 $$ return toNonSubtypeMap(type)[ CD ]
Line_6 $$ if (elementType.isAssignableFrom(type)) -->Line_7 $$ Class<? extends T> castType = uncheckedCast(type)[ CD ]
Line_6 $$ if (elementType.isAssignableFrom(type)) -->Line_8 $$ ModelMap<? extends T> subType = toSubtypeMap(castType)[ CD ]
Line_8 $$ ModelMap<? extends T> subType = toSubtypeMap(castType)-->Line_9 $$ return uncheckedCast(subType)[ FD ]
Line_2 $$ public <S> ModelMap<S> withType(final Class<S> type) -->Line_6 $$ if (elementType.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <S> ModelMap<S> withType(final Class<S> type) -->Line_7 $$ Class<? extends T> castType = uncheckedCast(type)[ FD ]
Line_2 $$ public <S> ModelMap<S> withType(final Class<S> type) -->Line_3 $$ if (type.equals(elementType)) [ FD ]
Line_2 $$ public <S> ModelMap<S> withType(final Class<S> type) -->Line_6 $$ if (elementType.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <S> ModelMap<S> withType(final Class<S> type) -->Line_3 $$ if (type.equals(elementType)) [ CD ]
Line_3 $$ if (type.equals(elementType)) -->Line_4 $$ return uncheckedCast(this)[ CD ]
Line_6 $$ if (elementType.isAssignableFrom(type)) -->Line_9 $$ return uncheckedCast(subType)[ CD ]
Line_2 $$ public <S> ModelMap<S> withType(final Class<S> type) -->Line_11 $$ return toNonSubtypeMap(type)[ FD ]
Line_7 $$ Class<? extends T> castType = uncheckedCast(type)-->Line_8 $$ ModelMap<? extends T> subType = toSubtypeMap(castType)[ FD ]
