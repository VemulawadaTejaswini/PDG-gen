Line_6 $$ if (autowiringType.isAssignableFrom(requiredType)) -->Line_9 $$ if (requiredType.isInstance(autowiringValue)) [ CD ]
Line_8 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)-->Line_9 $$ if (requiredType.isInstance(autowiringValue)) [ FD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_3 $$ String[] candidateNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this, requiredType, true, descriptor.isEager())[ CD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_16 $$ if (!isSelfReference(beanName, candidateName) && isAutowireCandidate(candidateName, descriptor)) [ FD ]
Line_4 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)-->Line_17 $$ result.put(candidateName, getBean(candidateName))[ FD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_21 $$ DependencyDescriptor fallbackDescriptor = descriptor.forFallbackMatch()[ FD ]
Line_15 $$ for (String candidateName : candidateNames) -->Line_24 $$ result.put(candidateName, getBean(candidateName))[ FD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_3 $$ String[] candidateNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(this, requiredType, true, descriptor.isEager())[ FD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_6 $$ if (autowiringType.isAssignableFrom(requiredType)) [ FD ]
Line_4 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)-->Line_24 $$ result.put(candidateName, getBean(candidateName))[ FD ]
Line_15 $$ for (String candidateName : candidateNames) -->Line_16 $$ if (!isSelfReference(beanName, candidateName) && isAutowireCandidate(candidateName, descriptor)) [ FD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_4 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)[ CD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_28 $$ return result[ CD ]
Line_7 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)-->Line_10 $$ result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue)[ FD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_9 $$ if (requiredType.isInstance(autowiringValue)) [ FD ]
Line_7 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)-->Line_8 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)[ FD ]
Line_4 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)-->Line_10 $$ result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue)[ FD ]
Line_20 $$ if (result.isEmpty()) -->Line_21 $$ DependencyDescriptor fallbackDescriptor = descriptor.forFallbackMatch()[ CD ]
Line_5 $$ for (Class<?> autowiringType : this.resolvableDependencies.keySet()) -->Line_6 $$ if (autowiringType.isAssignableFrom(requiredType)) [ FD ]
Line_9 $$ if (requiredType.isInstance(autowiringValue)) -->Line_10 $$ result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue)[ CD ]
Line_16 $$ if (!isSelfReference(beanName, candidateName) && isAutowireCandidate(candidateName, descriptor)) -->Line_17 $$ result.put(candidateName, getBean(candidateName))[ CD ]
Line_6 $$ if (autowiringType.isAssignableFrom(requiredType)) -->Line_7 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)[ CD ]
Line_8 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)-->Line_10 $$ result.put(ObjectUtils.identityToString(autowiringValue), autowiringValue)[ FD ]
Line_4 $$ Map<String, Object> result = new LinkedHashMap<String, Object>(candidateNames.length)-->Line_20 $$ if (result.isEmpty()) [ FD ]
Line_5 $$ for (Class<?> autowiringType : this.resolvableDependencies.keySet()) -->Line_7 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)[ FD ]
Line_23 $$ if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) -->Line_24 $$ result.put(candidateName, getBean(candidateName))[ CD ]
Line_21 $$ DependencyDescriptor fallbackDescriptor = descriptor.forFallbackMatch()-->Line_23 $$ if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) [ FD ]
Line_7 $$ Object autowiringValue = this.resolvableDependencies.get(autowiringType)-->Line_9 $$ if (requiredType.isInstance(autowiringValue)) [ FD ]
Line_15 $$ for (String candidateName : candidateNames) -->Line_23 $$ if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) [ FD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_23 $$ if (!candidateName.equals(beanName) && isAutowireCandidate(candidateName, fallbackDescriptor)) [ FD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_20 $$ if (result.isEmpty()) [ CD ]
Line_15 $$ for (String candidateName : candidateNames) -->Line_17 $$ result.put(candidateName, getBean(candidateName))[ FD ]
Line_6 $$ if (autowiringType.isAssignableFrom(requiredType)) -->Line_8 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)[ CD ]
Line_2 $$ protected Map<String, Object> findAutowireCandidates(String beanName, Class<?> requiredType, DependencyDescriptor descriptor) -->Line_8 $$ autowiringValue = AutowireUtils.resolveAutowiringValue(autowiringValue, requiredType)[ FD ]
