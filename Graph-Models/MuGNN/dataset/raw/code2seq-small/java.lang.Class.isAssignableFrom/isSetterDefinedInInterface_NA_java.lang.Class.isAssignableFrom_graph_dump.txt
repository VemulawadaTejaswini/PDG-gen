Line_5 $$ Class<?> targetClass = setter.getDeclaringClass()-->Line_7 $$ if (ifc.isAssignableFrom(targetClass) && ClassUtils.hasMethod(ifc, setter.getName(), setter.getParameterTypes())) [ FD ]
Line_2 $$ public static boolean isSetterDefinedInInterface(PropertyDescriptor pd, Set<Class<?>> interfaces) -->Line_12 $$ return false[ CD ]
Line_2 $$ public static boolean isSetterDefinedInInterface(PropertyDescriptor pd, Set<Class<?>> interfaces) -->Line_3 $$ Method setter = pd.getWriteMethod()[ CD ]
Line_2 $$ public static boolean isSetterDefinedInInterface(PropertyDescriptor pd, Set<Class<?>> interfaces) -->Line_3 $$ Method setter = pd.getWriteMethod()[ FD ]
Line_7 $$ if (ifc.isAssignableFrom(targetClass) && ClassUtils.hasMethod(ifc, setter.getName(), setter.getParameterTypes())) -->Line_8 $$ return true[ CD ]
Line_2 $$ public static boolean isSetterDefinedInInterface(PropertyDescriptor pd, Set<Class<?>> interfaces) -->Line_4 $$ if (setter != null) [ CD ]
Line_3 $$ Method setter = pd.getWriteMethod()-->Line_5 $$ Class<?> targetClass = setter.getDeclaringClass()[ FD ]
Line_6 $$ for (Class<?> ifc : interfaces) -->Line_7 $$ if (ifc.isAssignableFrom(targetClass) && ClassUtils.hasMethod(ifc, setter.getName(), setter.getParameterTypes())) [ FD ]
Line_3 $$ Method setter = pd.getWriteMethod()-->Line_7 $$ if (ifc.isAssignableFrom(targetClass) && ClassUtils.hasMethod(ifc, setter.getName(), setter.getParameterTypes())) [ FD ]
Line_3 $$ Method setter = pd.getWriteMethod()-->Line_4 $$ if (setter != null) [ FD ]
Line_4 $$ if (setter != null) -->Line_5 $$ Class<?> targetClass = setter.getDeclaringClass()[ CD ]
