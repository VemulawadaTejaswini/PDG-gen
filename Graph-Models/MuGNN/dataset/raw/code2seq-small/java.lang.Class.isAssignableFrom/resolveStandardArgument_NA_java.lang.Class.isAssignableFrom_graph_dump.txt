Line_31 $$ if (Writer.class.isAssignableFrom(parameterType)) -->Line_33 $$ return response.getWriter()[ CD ]
Line_5 $$ if (ServletRequest.class.isAssignableFrom(parameterType) || MultipartRequest.class.isAssignableFrom(parameterType)) -->Line_6 $$ Object nativeRequest = webRequest.getNativeRequest(parameterType)[ CD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_22 $$ if (Locale.class == parameterType) [ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_20 $$ if (Principal.class.isAssignableFrom(parameterType)) [ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_3 $$ HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class)[ CD ]
Line_4 $$ HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)-->Line_33 $$ return response.getWriter()[ FD ]
Line_3 $$ HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class)-->Line_23 $$ return RequestContextUtils.getLocale(request)[ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_28 $$ if (OutputStream.class.isAssignableFrom(parameterType)) [ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_13 $$ Object nativeResponse = webRequest.getNativeResponse(parameterType)[ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_26 $$ if (Reader.class.isAssignableFrom(parameterType)) [ FD ]
Line_4 $$ HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)-->Line_30 $$ return response.getOutputStream()[ FD ]
Line_11 $$ if (ServletResponse.class.isAssignableFrom(parameterType)) -->Line_12 $$ this.responseArgumentUsed = true[ CD ]
Line_18 $$ if (HttpSession.class.isAssignableFrom(parameterType)) -->Line_20 $$ if (Principal.class.isAssignableFrom(parameterType)) [ CD ]
Line_28 $$ if (OutputStream.class.isAssignableFrom(parameterType)) -->Line_29 $$ this.responseArgumentUsed = true[ CD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_35 $$ return super.resolveStandardArgument(parameterType, webRequest)[ FD ]
Line_11 $$ if (ServletResponse.class.isAssignableFrom(parameterType)) -->Line_14 $$ if (nativeResponse == null) [ CD ]
Line_28 $$ if (OutputStream.class.isAssignableFrom(parameterType)) -->Line_30 $$ return response.getOutputStream()[ CD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_5 $$ if (ServletRequest.class.isAssignableFrom(parameterType) || MultipartRequest.class.isAssignableFrom(parameterType)) [ CD ]
Line_20 $$ if (Principal.class.isAssignableFrom(parameterType)) -->Line_22 $$ if (Locale.class == parameterType) [ CD ]
Line_3 $$ HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class)-->Line_21 $$ return request.getUserPrincipal()[ FD ]
Line_3 $$ HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class)-->Line_27 $$ return request.getReader()[ FD ]
Line_26 $$ if (Reader.class.isAssignableFrom(parameterType)) -->Line_27 $$ return request.getReader()[ CD ]
Line_3 $$ HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class)-->Line_25 $$ return request.getInputStream()[ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_8 $$ throw new IllegalStateException("Current request is not of type [" + parameterType.getName() + "]: " + request)[ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_11 $$ if (ServletResponse.class.isAssignableFrom(parameterType)) [ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_3 $$ HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class)[ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_18 $$ if (HttpSession.class.isAssignableFrom(parameterType)) [ FD ]
Line_31 $$ if (Writer.class.isAssignableFrom(parameterType)) -->Line_32 $$ this.responseArgumentUsed = true[ CD ]
Line_11 $$ if (ServletResponse.class.isAssignableFrom(parameterType)) -->Line_13 $$ Object nativeResponse = webRequest.getNativeResponse(parameterType)[ CD ]
Line_5 $$ if (ServletRequest.class.isAssignableFrom(parameterType) || MultipartRequest.class.isAssignableFrom(parameterType)) -->Line_10 $$ return nativeRequest[ CD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_31 $$ if (Writer.class.isAssignableFrom(parameterType)) [ FD ]
Line_3 $$ HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class)-->Line_19 $$ return request.getSession()[ FD ]
Line_6 $$ Object nativeRequest = webRequest.getNativeRequest(parameterType)-->Line_7 $$ if (nativeRequest == null) [ FD ]
Line_13 $$ Object nativeResponse = webRequest.getNativeResponse(parameterType)-->Line_14 $$ if (nativeResponse == null) [ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_4 $$ HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)[ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_5 $$ if (ServletRequest.class.isAssignableFrom(parameterType) || MultipartRequest.class.isAssignableFrom(parameterType)) [ FD ]
Line_24 $$ if (InputStream.class.isAssignableFrom(parameterType)) -->Line_26 $$ if (Reader.class.isAssignableFrom(parameterType)) [ CD ]
Line_5 $$ if (ServletRequest.class.isAssignableFrom(parameterType) || MultipartRequest.class.isAssignableFrom(parameterType)) -->Line_7 $$ if (nativeRequest == null) [ CD ]
Line_5 $$ if (ServletRequest.class.isAssignableFrom(parameterType) || MultipartRequest.class.isAssignableFrom(parameterType)) -->Line_11 $$ if (ServletResponse.class.isAssignableFrom(parameterType)) [ CD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_35 $$ return super.resolveStandardArgument(parameterType, webRequest)[ CD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_6 $$ Object nativeRequest = webRequest.getNativeRequest(parameterType)[ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_4 $$ HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)[ CD ]
Line_28 $$ if (OutputStream.class.isAssignableFrom(parameterType)) -->Line_31 $$ if (Writer.class.isAssignableFrom(parameterType)) [ CD ]
Line_24 $$ if (InputStream.class.isAssignableFrom(parameterType)) -->Line_25 $$ return request.getInputStream()[ CD ]
Line_11 $$ if (ServletResponse.class.isAssignableFrom(parameterType)) -->Line_18 $$ if (HttpSession.class.isAssignableFrom(parameterType)) [ CD ]
Line_26 $$ if (Reader.class.isAssignableFrom(parameterType)) -->Line_28 $$ if (OutputStream.class.isAssignableFrom(parameterType)) [ CD ]
Line_18 $$ if (HttpSession.class.isAssignableFrom(parameterType)) -->Line_19 $$ return request.getSession()[ CD ]
Line_20 $$ if (Principal.class.isAssignableFrom(parameterType)) -->Line_21 $$ return request.getUserPrincipal()[ CD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_15 $$ throw new IllegalStateException("Current response is not of type [" + parameterType.getName() + "]: " + response)[ FD ]
Line_2 $$ protected Object resolveStandardArgument(Class<?> parameterType, NativeWebRequest webRequest) throws Exception -->Line_24 $$ if (InputStream.class.isAssignableFrom(parameterType)) [ FD ]
Line_11 $$ if (ServletResponse.class.isAssignableFrom(parameterType)) -->Line_17 $$ return nativeResponse[ CD ]
Line_22 $$ if (Locale.class == parameterType) -->Line_23 $$ return RequestContextUtils.getLocale(request)[ CD ]
Line_22 $$ if (Locale.class == parameterType) -->Line_24 $$ if (InputStream.class.isAssignableFrom(parameterType)) [ CD ]
