Line_6 $$ ClassLoader cl = targetType.getClassLoader()-->Line_7 $$ if (cl == null) [ FD ]
Line_3 $$ if (targetType == null || targetType.isArray() || unknownEditorTypes.contains(targetType)) -->Line_4 $$ return null[ CD ]
Line_6 $$ ClassLoader cl = targetType.getClassLoader()-->Line_9 $$ cl = ClassLoader.getSystemClassLoader()[ FD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_20 $$ String editorName = targetType.getName() + "Editor"[ FD ]
Line_9 $$ cl = ClassLoader.getSystemClassLoader()-->Line_22 $$ Class<?> editorClass = cl.loadClass(editorName)[ FD ]
Line_14 $$ if (logger.isDebugEnabled()) -->Line_15 $$ logger.debug("Could not access system ClassLoader: " + ex)[ CD ]
Line_23 $$ if (!PropertyEditor.class.isAssignableFrom(editorClass)) -->Line_27 $$ unknownEditorTypes.add(targetType)[ CD ]
Line_10 $$ if (cl == null) -->Line_11 $$ return null[ CD ]
Line_23 $$ if (!PropertyEditor.class.isAssignableFrom(editorClass)) -->Line_28 $$ return null[ CD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_35 $$ unknownEditorTypes.add(targetType)[ FD ]
Line_23 $$ if (!PropertyEditor.class.isAssignableFrom(editorClass)) -->Line_24 $$ if (logger.isWarnEnabled()) [ CD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_3 $$ if (targetType == null || targetType.isArray() || unknownEditorTypes.contains(targetType)) [ FD ]
Line_32 $$ if (logger.isDebugEnabled()) -->Line_33 $$ logger.debug("No property editor [" + editorName + "] found for type " + targetType.getName() + " according to 'Editor' suffix convention")[ CD ]
Line_9 $$ cl = ClassLoader.getSystemClassLoader()-->Line_10 $$ if (cl == null) [ FD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_3 $$ if (targetType == null || targetType.isArray() || unknownEditorTypes.contains(targetType)) [ CD ]
Line_22 $$ Class<?> editorClass = cl.loadClass(editorName)-->Line_30 $$ return (PropertyEditor) instantiateClass(editorClass)[ FD ]
Line_24 $$ if (logger.isWarnEnabled()) -->Line_25 $$ logger.warn("Editor class [" + editorName + "] does not implement [java.beans.PropertyEditor] interface")[ CD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_33 $$ logger.debug("No property editor [" + editorName + "] found for type " + targetType.getName() + " according to 'Editor' suffix convention")[ FD ]
Line_22 $$ Class<?> editorClass = cl.loadClass(editorName)-->Line_23 $$ if (!PropertyEditor.class.isAssignableFrom(editorClass)) [ FD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_7 $$ if (cl == null) [ CD ]
Line_6 $$ ClassLoader cl = targetType.getClassLoader()-->Line_10 $$ if (cl == null) [ FD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_6 $$ ClassLoader cl = targetType.getClassLoader()[ FD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_6 $$ ClassLoader cl = targetType.getClassLoader()[ CD ]
Line_20 $$ String editorName = targetType.getName() + "Editor"-->Line_22 $$ Class<?> editorClass = cl.loadClass(editorName)[ FD ]
Line_6 $$ ClassLoader cl = targetType.getClassLoader()-->Line_22 $$ Class<?> editorClass = cl.loadClass(editorName)[ FD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_20 $$ String editorName = targetType.getName() + "Editor"[ CD ]
Line_2 $$ public static PropertyEditor findEditorByConvention(Class<?> targetType) -->Line_27 $$ unknownEditorTypes.add(targetType)[ FD ]
