Line_3 $$ for (Class<?> internalView : builder.getInternalViews()) -->Line_5 $$ throw new InvalidModelException(String.format("Internal view %s must be an interface.", internalView.getName()))[ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_8 $$ Class<? extends T> implementation = builder.getDefaultImplementation()[ FD ]
Line_12 $$ ModelType<? extends T> implementationType = ModelType.of(implementation)-->Line_13 $$ if (!baseImplementation.isAssignableFrom(implementationType)) [ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_12 $$ ModelType<? extends T> implementationType = ModelType.of(implementation)[ CD ]
Line_16 $$ ModelType<? extends U> asSubclass = implementationType.asSubtype(baseImplementation)-->Line_17 $$ if (!type.isAssignableFrom(asSubclass)) [ FD ]
Line_9 $$ if (implementation == null) -->Line_10 $$ return null[ CD ]
Line_16 $$ ModelType<? extends U> asSubclass = implementationType.asSubtype(baseImplementation)-->Line_22 $$ throw new InvalidModelException(String.format("%s implementation %s must implement internal view %s.", StringUtils.capitalize(modelName), asSubclass, internalView.getName()))[ FD ]
Line_16 $$ ModelType<? extends U> asSubclass = implementationType.asSubtype(baseImplementation)-->Line_26 $$ asSubclass.getRawClass().getConstructor()[ FD ]
Line_16 $$ ModelType<? extends U> asSubclass = implementationType.asSubtype(baseImplementation)-->Line_28 $$ throw new InvalidModelException(String.format("%s implementation %s must have public default constructor.", StringUtils.capitalize(modelName), asSubclass))[ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_13 $$ if (!baseImplementation.isAssignableFrom(implementationType)) [ CD ]
Line_8 $$ Class<? extends T> implementation = builder.getDefaultImplementation()-->Line_9 $$ if (implementation == null) [ FD ]
Line_12 $$ ModelType<? extends T> implementationType = ModelType.of(implementation)-->Line_14 $$ throw new InvalidModelException(String.format("%s implementation %s must extend %s.", StringUtils.capitalize(modelName), implementationType, baseImplementation))[ FD ]
Line_12 $$ ModelType<? extends T> implementationType = ModelType.of(implementation)-->Line_16 $$ ModelType<? extends U> asSubclass = implementationType.asSubtype(baseImplementation)[ FD ]
Line_16 $$ ModelType<? extends U> asSubclass = implementationType.asSubtype(baseImplementation)-->Line_18 $$ throw new InvalidModelException(String.format("%s implementation %s must implement %s.", StringUtils.capitalize(modelName), asSubclass, type))[ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_3 $$ for (Class<?> internalView : builder.getInternalViews()) [ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_18 $$ throw new InvalidModelException(String.format("%s implementation %s must implement %s.", StringUtils.capitalize(modelName), asSubclass, type))[ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_30 $$ return asSubclass[ CD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_17 $$ if (!type.isAssignableFrom(asSubclass)) [ FD ]
Line_8 $$ Class<? extends T> implementation = builder.getDefaultImplementation()-->Line_21 $$ if (!internalView.isAssignableFrom(implementation)) [ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_8 $$ Class<? extends T> implementation = builder.getDefaultImplementation()[ CD ]
Line_8 $$ Class<? extends T> implementation = builder.getDefaultImplementation()-->Line_12 $$ ModelType<? extends T> implementationType = ModelType.of(implementation)[ FD ]
Line_3 $$ for (Class<?> internalView : builder.getInternalViews()) -->Line_4 $$ if (!internalView.isInterface()) [ FD ]
Line_3 $$ for (Class<?> internalView : builder.getInternalViews()) -->Line_21 $$ if (!internalView.isAssignableFrom(implementation)) [ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_17 $$ if (!type.isAssignableFrom(asSubclass)) [ CD ]
Line_3 $$ for (Class<?> internalView : builder.getInternalViews()) -->Line_22 $$ throw new InvalidModelException(String.format("%s implementation %s must implement internal view %s.", StringUtils.capitalize(modelName), asSubclass, internalView.getName()))[ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_16 $$ ModelType<? extends U> asSubclass = implementationType.asSubtype(baseImplementation)[ CD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_20 $$ for (Class<?> internalView : builder.getInternalViews()) [ FD ]
Line_2 $$ protected ModelType<? extends U> determineImplementationType(ModelType<? extends T> type, TypeBuilderInternal<T> builder) -->Line_9 $$ if (implementation == null) [ CD ]
