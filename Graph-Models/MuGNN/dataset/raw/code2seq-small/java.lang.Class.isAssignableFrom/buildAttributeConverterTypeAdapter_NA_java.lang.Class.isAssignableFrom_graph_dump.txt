Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_25 $$ final String description = String.format("BasicType adapter for AttributeConverter<%s,%s>", entityAttributeJavaType.getSimpleName(), databaseColumnJavaType.getSimpleName())[ CD ]
Line_6 $$ int jdbcTypeCode = JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType)-->Line_9 $$ jdbcTypeCode = LobTypeMappings.INSTANCE.getCorrespondingLobCode(jdbcTypeCode)[ FD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_26 $$ return new AttributeConverterTypeAdapter(name, description, attributeConverterDescriptor.getAttributeConverter(), sqlTypeDescriptorAdapter, entityAttributeJavaType, databaseColumnJavaType, entityAttributeJavaTypeDescriptor)[ CD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_22 $$ final JavaTypeDescriptor intermediateJavaTypeDescriptor = JavaTypeDescriptorRegistry.INSTANCE.getDescriptor(databaseColumnJavaType)[ CD ]
Line_7 $$ if (isLob()) -->Line_8 $$ if (LobTypeMappings.INSTANCE.hasCorrespondingLobCode(jdbcTypeCode)) [ CD ]
Line_11 $$ if (Serializable.class.isAssignableFrom(entityAttributeJavaType)) -->Line_12 $$ jdbcTypeCode = Types.BLOB[ CD ]
Line_18 $$ if (isNationalized()) -->Line_19 $$ jdbcTypeCode = NationalizedTypeMappings.INSTANCE.getCorrespondingNationalizedCode(jdbcTypeCode)[ CD ]
Line_4 $$ final Class databaseColumnJavaType = attributeConverterDescriptor.getJdbcType()-->Line_22 $$ final JavaTypeDescriptor intermediateJavaTypeDescriptor = JavaTypeDescriptorRegistry.INSTANCE.getDescriptor(databaseColumnJavaType)[ FD ]
Line_9 $$ jdbcTypeCode = LobTypeMappings.INSTANCE.getCorrespondingLobCode(jdbcTypeCode)-->Line_14 $$ throw new IllegalArgumentException(String.format(Locale.ROOT, "JDBC type-code [%s (%s)] not known to have a corresponding LOB equivalent, and Java type is not Serializable (to use BLOB)", jdbcTypeCode, JdbcTypeNameMapper.getTypeName(jdbcTypeCode)))[ FD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_4 $$ final Class databaseColumnJavaType = attributeConverterDescriptor.getJdbcType()[ CD ]
Line_6 $$ int jdbcTypeCode = JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType)-->Line_21 $$ final SqlTypeDescriptor sqlTypeDescriptor = SqlTypeDescriptorRegistry.INSTANCE.getDescriptor(jdbcTypeCode)[ FD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_7 $$ if (isLob()) [ CD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_5 $$ final JavaTypeDescriptor entityAttributeJavaTypeDescriptor = JavaTypeDescriptorRegistry.INSTANCE.getDescriptor(entityAttributeJavaType)[ CD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_21 $$ final SqlTypeDescriptor sqlTypeDescriptor = SqlTypeDescriptorRegistry.INSTANCE.getDescriptor(jdbcTypeCode)[ CD ]
Line_3 $$ final Class entityAttributeJavaType = attributeConverterDescriptor.getDomainType()-->Line_11 $$ if (Serializable.class.isAssignableFrom(entityAttributeJavaType)) [ FD ]
Line_4 $$ final Class databaseColumnJavaType = attributeConverterDescriptor.getJdbcType()-->Line_6 $$ int jdbcTypeCode = JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType)[ FD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_23 $$ final SqlTypeDescriptor sqlTypeDescriptorAdapter = new AttributeConverterSqlTypeDescriptorAdapter(attributeConverterDescriptor.getAttributeConverter(), sqlTypeDescriptor, intermediateJavaTypeDescriptor)[ CD ]
Line_9 $$ jdbcTypeCode = LobTypeMappings.INSTANCE.getCorrespondingLobCode(jdbcTypeCode)-->Line_12 $$ jdbcTypeCode = Types.BLOB[ FD ]
Line_9 $$ jdbcTypeCode = LobTypeMappings.INSTANCE.getCorrespondingLobCode(jdbcTypeCode)-->Line_21 $$ final SqlTypeDescriptor sqlTypeDescriptor = SqlTypeDescriptorRegistry.INSTANCE.getDescriptor(jdbcTypeCode)[ FD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_6 $$ int jdbcTypeCode = JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType)[ CD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_3 $$ final Class entityAttributeJavaType = attributeConverterDescriptor.getDomainType()[ CD ]
Line_8 $$ if (LobTypeMappings.INSTANCE.hasCorrespondingLobCode(jdbcTypeCode)) -->Line_11 $$ if (Serializable.class.isAssignableFrom(entityAttributeJavaType)) [ CD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_18 $$ if (isNationalized()) [ CD ]
Line_6 $$ int jdbcTypeCode = JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType)-->Line_14 $$ throw new IllegalArgumentException(String.format(Locale.ROOT, "JDBC type-code [%s (%s)] not known to have a corresponding LOB equivalent, and Java type is not Serializable (to use BLOB)", jdbcTypeCode, JdbcTypeNameMapper.getTypeName(jdbcTypeCode)))[ FD ]
Line_19 $$ jdbcTypeCode = NationalizedTypeMappings.INSTANCE.getCorrespondingNationalizedCode(jdbcTypeCode)-->Line_21 $$ final SqlTypeDescriptor sqlTypeDescriptor = SqlTypeDescriptorRegistry.INSTANCE.getDescriptor(jdbcTypeCode)[ FD ]
Line_3 $$ final Class entityAttributeJavaType = attributeConverterDescriptor.getDomainType()-->Line_25 $$ final String description = String.format("BasicType adapter for AttributeConverter<%s,%s>", entityAttributeJavaType.getSimpleName(), databaseColumnJavaType.getSimpleName())[ FD ]
Line_6 $$ int jdbcTypeCode = JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType)-->Line_8 $$ if (LobTypeMappings.INSTANCE.hasCorrespondingLobCode(jdbcTypeCode)) [ FD ]
Line_12 $$ jdbcTypeCode = Types.BLOB-->Line_19 $$ jdbcTypeCode = NationalizedTypeMappings.INSTANCE.getCorrespondingNationalizedCode(jdbcTypeCode)[ FD ]
Line_9 $$ jdbcTypeCode = LobTypeMappings.INSTANCE.getCorrespondingLobCode(jdbcTypeCode)-->Line_19 $$ jdbcTypeCode = NationalizedTypeMappings.INSTANCE.getCorrespondingNationalizedCode(jdbcTypeCode)[ FD ]
Line_4 $$ final Class databaseColumnJavaType = attributeConverterDescriptor.getJdbcType()-->Line_25 $$ final String description = String.format("BasicType adapter for AttributeConverter<%s,%s>", entityAttributeJavaType.getSimpleName(), databaseColumnJavaType.getSimpleName())[ FD ]
Line_8 $$ if (LobTypeMappings.INSTANCE.hasCorrespondingLobCode(jdbcTypeCode)) -->Line_9 $$ jdbcTypeCode = LobTypeMappings.INSTANCE.getCorrespondingLobCode(jdbcTypeCode)[ CD ]
Line_6 $$ int jdbcTypeCode = JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType)-->Line_19 $$ jdbcTypeCode = NationalizedTypeMappings.INSTANCE.getCorrespondingNationalizedCode(jdbcTypeCode)[ FD ]
Line_2 $$ private Type buildAttributeConverterTypeAdapter() -->Line_24 $$ final String name = AttributeConverterTypeAdapter.NAME_PREFIX + attributeConverterDescriptor.getAttributeConverter().getClass().getName()[ CD ]
Line_3 $$ final Class entityAttributeJavaType = attributeConverterDescriptor.getDomainType()-->Line_5 $$ final JavaTypeDescriptor entityAttributeJavaTypeDescriptor = JavaTypeDescriptorRegistry.INSTANCE.getDescriptor(entityAttributeJavaType)[ FD ]
Line_6 $$ int jdbcTypeCode = JdbcTypeJavaClassMappings.INSTANCE.determineJdbcTypeCodeForJavaClass(databaseColumnJavaType)-->Line_12 $$ jdbcTypeCode = Types.BLOB[ FD ]
Line_12 $$ jdbcTypeCode = Types.BLOB-->Line_21 $$ final SqlTypeDescriptor sqlTypeDescriptor = SqlTypeDescriptorRegistry.INSTANCE.getDescriptor(jdbcTypeCode)[ FD ]
Line_12 $$ jdbcTypeCode = Types.BLOB-->Line_14 $$ throw new IllegalArgumentException(String.format(Locale.ROOT, "JDBC type-code [%s (%s)] not known to have a corresponding LOB equivalent, and Java type is not Serializable (to use BLOB)", jdbcTypeCode, JdbcTypeNameMapper.getTypeName(jdbcTypeCode)))[ FD ]
