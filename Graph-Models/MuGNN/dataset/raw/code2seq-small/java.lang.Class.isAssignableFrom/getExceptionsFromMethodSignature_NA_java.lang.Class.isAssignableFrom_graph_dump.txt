Line_2 $$ protected static List<Class<? extends Throwable>> getExceptionsFromMethodSignature(Method method) -->Line_3 $$ List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()[ CD ]
Line_4 $$ for (Class<?> paramType : method.getParameterTypes()) -->Line_5 $$ if (Throwable.class.isAssignableFrom(paramType)) [ FD ]
Line_2 $$ protected static List<Class<? extends Throwable>> getExceptionsFromMethodSignature(Method method) -->Line_4 $$ for (Class<?> paramType : method.getParameterTypes()) [ FD ]
Line_2 $$ protected static List<Class<? extends Throwable>> getExceptionsFromMethodSignature(Method method) -->Line_10 $$ return result[ CD ]
Line_2 $$ protected static List<Class<? extends Throwable>> getExceptionsFromMethodSignature(Method method) -->Line_9 $$ Assert.notEmpty(result, "No exception types mapped to [ CD ]
Line_3 $$ List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()-->Line_6 $$ result.add((Class<? extends Throwable>) paramType)[ FD ]
Line_5 $$ if (Throwable.class.isAssignableFrom(paramType)) -->Line_6 $$ result.add((Class<? extends Throwable>) paramType)[ CD ]
Line_3 $$ List<Class<? extends Throwable>> result = new ArrayList<Class<? extends Throwable>>()-->Line_9 $$ Assert.notEmpty(result, "No exception types mapped to [ FD ]
