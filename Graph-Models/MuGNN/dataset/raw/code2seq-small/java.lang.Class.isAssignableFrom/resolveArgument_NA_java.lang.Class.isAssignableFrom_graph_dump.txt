Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_9 $$ if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) [ FD ]
Line_11 $$ if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) -->Line_16 $$ return ReflectionUtils.invokeMethod(method, null, message)[ CD ]
Line_4 $$ if (Map.class.isAssignableFrom(paramType)) -->Line_6 $$ if (MessageHeaderAccessor.class == paramType) [ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_19 $$ throw new IllegalStateException("Unexpected method parameter type " + paramType + "in method " + parameter.getMethod() + ". " + "@Headers method arguments must be assignable to java.util.Map.")[ FD ]
Line_4 $$ if (Map.class.isAssignableFrom(paramType)) -->Line_5 $$ return message.getHeaders()[ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_3 $$ Class<?> paramType = parameter.getParameterType()[ FD ]
Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_6 $$ if (MessageHeaderAccessor.class == paramType) [ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_7 $$ MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class)[ FD ]
Line_14 $$ Method method = ReflectionUtils.findMethod(paramType, "wrap", Message.class)-->Line_15 $$ Assert.notNull(method, "Cannot create accessor of type " + paramType + " for message " + message)[ FD ]
Line_6 $$ if (MessageHeaderAccessor.class == paramType) -->Line_7 $$ MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class)[ CD ]
Line_6 $$ if (MessageHeaderAccessor.class == paramType) -->Line_8 $$ return (accessor != null ? accessor : new MessageHeaderAccessor(message))[ CD ]
Line_9 $$ if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) -->Line_11 $$ if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) [ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_10 $$ MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class)[ FD ]
Line_11 $$ if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) -->Line_15 $$ Assert.notNull(method, "Cannot create accessor of type " + paramType + " for message " + message)[ CD ]
Line_9 $$ if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) -->Line_10 $$ MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class)[ CD ]
Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_11 $$ if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) [ FD ]
Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_14 $$ Method method = ReflectionUtils.findMethod(paramType, "wrap", Message.class)[ FD ]
Line_6 $$ if (MessageHeaderAccessor.class == paramType) -->Line_9 $$ if (MessageHeaderAccessor.class.isAssignableFrom(paramType)) [ CD ]
Line_11 $$ if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) -->Line_12 $$ return accessor[ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_5 $$ return message.getHeaders()[ FD ]
Line_14 $$ Method method = ReflectionUtils.findMethod(paramType, "wrap", Message.class)-->Line_16 $$ return ReflectionUtils.invokeMethod(method, null, message)[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_4 $$ if (Map.class.isAssignableFrom(paramType)) [ CD ]
Line_7 $$ MessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, MessageHeaderAccessor.class)-->Line_11 $$ if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) [ FD ]
Line_11 $$ if (accessor != null && paramType.isAssignableFrom(accessor.getClass())) -->Line_14 $$ Method method = ReflectionUtils.findMethod(paramType, "wrap", Message.class)[ CD ]
Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_4 $$ if (Map.class.isAssignableFrom(paramType)) [ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_3 $$ Class<?> paramType = parameter.getParameterType()[ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_16 $$ return ReflectionUtils.invokeMethod(method, null, message)[ FD ]
