Line_8 $$ R origRecord = emptyConstructor.newInstance()-->Line_10 $$ gsp.setMethod.invoke(origRecord, gsp.testValue)[ FD ]
Line_4 $$ Constructor<R> emptyConstructor = recordClass.getConstructor()-->Line_8 $$ R origRecord = emptyConstructor.newInstance()[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_7 $$ Map<String, GetSetPair> getSetPairs = getGetSetPairs(recordClass)[ CD ]
Line_5 $$ Constructor<R> pbConstructor = recordClass.getConstructor(protoClass)-->Line_17 $$ R deserRecord = pbConstructor.newInstance(ret)[ FD ]
Line_7 $$ Map<String, GetSetPair> getSetPairs = getGetSetPairs(recordClass)-->Line_9 $$ for (GetSetPair gsp : getSetPairs.values()) [ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_13 $$ Assert.assertNotNull(recordClass.getName() + "#getProto returns null", ret)[ FD ]
Line_12 $$ Object ret = getProto.invoke(origRecord)-->Line_17 $$ R deserRecord = pbConstructor.newInstance(ret)[ FD ]
Line_7 $$ Map<String, GetSetPair> getSetPairs = getGetSetPairs(recordClass)-->Line_19 $$ for (GetSetPair gsp : getSetPairs.values()) [ FD ]
Line_8 $$ R origRecord = emptyConstructor.newInstance()-->Line_12 $$ Object ret = getProto.invoke(origRecord)[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_17 $$ R deserRecord = pbConstructor.newInstance(ret)[ CD ]
Line_12 $$ Object ret = getProto.invoke(origRecord)-->Line_15 $$ Assert.fail("Illegal getProto method return type: " + ret.getClass())[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_6 $$ Method getProto = recordClass.getDeclaredMethod("getProto")[ CD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_4 $$ Constructor<R> emptyConstructor = recordClass.getConstructor()[ CD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_8 $$ R origRecord = emptyConstructor.newInstance()[ CD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_3 $$ LOG.info(String.format("Validate %s %s\n", recordClass.getName(), protoClass.getName()))[ CD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_7 $$ Map<String, GetSetPair> getSetPairs = getGetSetPairs(recordClass)[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_3 $$ LOG.info(String.format("Validate %s %s\n", recordClass.getName(), protoClass.getName()))[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_14 $$ if (!(protoClass.isAssignableFrom(ret.getClass()))) [ CD ]
Line_6 $$ Method getProto = recordClass.getDeclaredMethod("getProto")-->Line_12 $$ Object ret = getProto.invoke(origRecord)[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_14 $$ if (!(protoClass.isAssignableFrom(ret.getClass()))) [ FD ]
Line_21 $$ Object deserValue = gsp.getMethod.invoke(deserRecord)-->Line_22 $$ Assert.assertEquals("property " + recordClass.getName() + "#" + gsp.propertyName + " should be equal", origValue, deserValue)[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_5 $$ Constructor<R> pbConstructor = recordClass.getConstructor(protoClass)[ FD ]
Line_17 $$ R deserRecord = pbConstructor.newInstance(ret)-->Line_18 $$ Assert.assertEquals("whole " + recordClass + " records should be equal", origRecord, deserRecord)[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_5 $$ Constructor<R> pbConstructor = recordClass.getConstructor(protoClass)[ CD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_22 $$ Assert.assertEquals("property " + recordClass.getName() + "#" + gsp.propertyName + " should be equal", origValue, deserValue)[ FD ]
Line_12 $$ Object ret = getProto.invoke(origRecord)-->Line_13 $$ Assert.assertNotNull(recordClass.getName() + "#getProto returns null", ret)[ FD ]
Line_12 $$ Object ret = getProto.invoke(origRecord)-->Line_14 $$ if (!(protoClass.isAssignableFrom(ret.getClass()))) [ FD ]
Line_8 $$ R origRecord = emptyConstructor.newInstance()-->Line_20 $$ Object origValue = gsp.getMethod.invoke(origRecord)[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_18 $$ Assert.assertEquals("whole " + recordClass + " records should be equal", origRecord, deserRecord)[ CD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_12 $$ Object ret = getProto.invoke(origRecord)[ CD ]
Line_20 $$ Object origValue = gsp.getMethod.invoke(origRecord)-->Line_22 $$ Assert.assertEquals("property " + recordClass.getName() + "#" + gsp.propertyName + " should be equal", origValue, deserValue)[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_4 $$ Constructor<R> emptyConstructor = recordClass.getConstructor()[ FD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_13 $$ Assert.assertNotNull(recordClass.getName() + "#getProto returns null", ret)[ CD ]
Line_8 $$ R origRecord = emptyConstructor.newInstance()-->Line_18 $$ Assert.assertEquals("whole " + recordClass + " records should be equal", origRecord, deserRecord)[ FD ]
Line_17 $$ R deserRecord = pbConstructor.newInstance(ret)-->Line_21 $$ Object deserValue = gsp.getMethod.invoke(deserRecord)[ FD ]
Line_14 $$ if (!(protoClass.isAssignableFrom(ret.getClass()))) -->Line_15 $$ Assert.fail("Illegal getProto method return type: " + ret.getClass())[ CD ]
Line_2 $$ private <R, P> void validatePBImplRecord(Class<R> recordClass, Class<P> protoClass) throws Exception -->Line_6 $$ Method getProto = recordClass.getDeclaredMethod("getProto")[ FD ]
