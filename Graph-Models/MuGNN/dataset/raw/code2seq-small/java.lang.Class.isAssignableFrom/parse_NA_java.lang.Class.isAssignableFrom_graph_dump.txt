Line_2 $$ public static SchedulingPolicy parse(String policy) throws AllocationConfigurationException -->Line_4 $$ String text = policy.toLowerCase()[ FD ]
Line_5 $$ if (text.equalsIgnoreCase(FairSharePolicy.NAME)) -->Line_6 $$ clazz = FairSharePolicy.class[ CD ]
Line_4 $$ String text = policy.toLowerCase()-->Line_5 $$ if (text.equalsIgnoreCase(FairSharePolicy.NAME)) [ FD ]
Line_4 $$ String text = policy.toLowerCase()-->Line_7 $$ if (text.equalsIgnoreCase(FifoPolicy.NAME)) [ FD ]
Line_6 $$ clazz = FairSharePolicy.class-->Line_8 $$ clazz = FifoPolicy.class[ FD ]
Line_3 $$ Class clazz-->Line_21 $$ return getInstance(clazz)[ FD ]
Line_8 $$ clazz = FifoPolicy.class-->Line_13 $$ clazz = Class.forName(policy)[ FD ]
Line_7 $$ if (text.equalsIgnoreCase(FifoPolicy.NAME)) -->Line_8 $$ clazz = FifoPolicy.class[ CD ]
Line_8 $$ clazz = FifoPolicy.class-->Line_21 $$ return getInstance(clazz)[ FD ]
Line_2 $$ public static SchedulingPolicy parse(String policy) throws AllocationConfigurationException -->Line_21 $$ return getInstance(clazz)[ CD ]
Line_6 $$ clazz = FairSharePolicy.class-->Line_18 $$ if (!SchedulingPolicy.class.isAssignableFrom(clazz)) [ FD ]
Line_10 $$ clazz = DominantResourceFairnessPolicy.class-->Line_21 $$ return getInstance(clazz)[ FD ]
Line_13 $$ clazz = Class.forName(policy)-->Line_18 $$ if (!SchedulingPolicy.class.isAssignableFrom(clazz)) [ FD ]
Line_8 $$ clazz = FifoPolicy.class-->Line_18 $$ if (!SchedulingPolicy.class.isAssignableFrom(clazz)) [ FD ]
Line_9 $$ if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) -->Line_10 $$ clazz = DominantResourceFairnessPolicy.class[ CD ]
Line_2 $$ public static SchedulingPolicy parse(String policy) throws AllocationConfigurationException -->Line_4 $$ String text = policy.toLowerCase()[ CD ]
Line_6 $$ clazz = FairSharePolicy.class-->Line_21 $$ return getInstance(clazz)[ FD ]
Line_3 $$ Class clazz-->Line_18 $$ if (!SchedulingPolicy.class.isAssignableFrom(clazz)) [ FD ]
Line_3 $$ Class clazz-->Line_8 $$ clazz = FifoPolicy.class[ FD ]
Line_2 $$ public static SchedulingPolicy parse(String policy) throws AllocationConfigurationException -->Line_18 $$ if (!SchedulingPolicy.class.isAssignableFrom(clazz)) [ CD ]
Line_3 $$ Class clazz-->Line_13 $$ clazz = Class.forName(policy)[ FD ]
Line_8 $$ clazz = FifoPolicy.class-->Line_10 $$ clazz = DominantResourceFairnessPolicy.class[ FD ]
Line_4 $$ String text = policy.toLowerCase()-->Line_9 $$ if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) [ FD ]
Line_3 $$ Class clazz-->Line_10 $$ clazz = DominantResourceFairnessPolicy.class[ FD ]
Line_3 $$ Class clazz-->Line_6 $$ clazz = FairSharePolicy.class[ FD ]
Line_2 $$ public static SchedulingPolicy parse(String policy) throws AllocationConfigurationException -->Line_13 $$ clazz = Class.forName(policy)[ FD ]
Line_10 $$ clazz = DominantResourceFairnessPolicy.class-->Line_13 $$ clazz = Class.forName(policy)[ FD ]
Line_13 $$ clazz = Class.forName(policy)-->Line_21 $$ return getInstance(clazz)[ FD ]
Line_5 $$ if (text.equalsIgnoreCase(FairSharePolicy.NAME)) -->Line_7 $$ if (text.equalsIgnoreCase(FifoPolicy.NAME)) [ CD ]
Line_2 $$ public static SchedulingPolicy parse(String policy) throws AllocationConfigurationException -->Line_5 $$ if (text.equalsIgnoreCase(FairSharePolicy.NAME)) [ CD ]
Line_10 $$ clazz = DominantResourceFairnessPolicy.class-->Line_18 $$ if (!SchedulingPolicy.class.isAssignableFrom(clazz)) [ FD ]
Line_6 $$ clazz = FairSharePolicy.class-->Line_13 $$ clazz = Class.forName(policy)[ FD ]
Line_7 $$ if (text.equalsIgnoreCase(FifoPolicy.NAME)) -->Line_9 $$ if (text.equalsIgnoreCase(DominantResourceFairnessPolicy.NAME)) [ CD ]
Line_2 $$ public static SchedulingPolicy parse(String policy) throws AllocationConfigurationException -->Line_3 $$ Class clazz[ CD ]
Line_6 $$ clazz = FairSharePolicy.class-->Line_10 $$ clazz = DominantResourceFairnessPolicy.class[ FD ]
