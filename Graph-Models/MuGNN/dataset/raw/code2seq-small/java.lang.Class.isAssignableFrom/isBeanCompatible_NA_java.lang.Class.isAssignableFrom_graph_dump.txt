Line_10 $$ if (javaType.getName().startsWith("java.") || javaType.getName().startsWith("javax.")) -->Line_11 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) [ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_12 $$ log.warn(Messages.getMessage("beanCompatPkg00", javaType.getName()))[ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_10 $$ if (javaType.getName().startsWith("java.") || javaType.getName().startsWith("javax.")) [ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_25 $$ log.warn(Messages.getMessage("beanCompatConstructor00", javaType.getName()))[ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_31 $$ Class superClass = javaType.getSuperclass()[ FD ]
Line_10 $$ if (javaType.getName().startsWith("java.") || javaType.getName().startsWith("javax.")) -->Line_15 $$ return false[ CD ]
Line_32 $$ if ((superClass != null) && (superClass != java.lang.Object.class) && (superClass != java.lang.Exception.class) && (superClass != java.lang.Throwable.class) && (superClass != java.rmi.RemoteException.class) && (superClass != org.apache.axis.AxisFault.class) && ((stopClasses == null) || !(stopClasses.contains(superClass.getName())))) -->Line_33 $$ if (!isBeanCompatible(superClass, false)) [ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_26 $$ beanCompatErrs.add(javaType)[ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_24 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) [ FD ]
Line_3 $$ if (javaType.isArray() || javaType.isPrimitive()) -->Line_4 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) [ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_31 $$ Class superClass = javaType.getSuperclass()[ CD ]
Line_31 $$ Class superClass = javaType.getSuperclass()-->Line_32 $$ if ((superClass != null) && (superClass != java.lang.Object.class) && (superClass != java.lang.Exception.class) && (superClass != java.lang.Throwable.class) && (superClass != java.rmi.RemoteException.class) && (superClass != org.apache.axis.AxisFault.class) && ((stopClasses == null) || !(stopClasses.contains(superClass.getName())))) [ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_11 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) [ FD ]
Line_31 $$ Class superClass = javaType.getSuperclass()-->Line_35 $$ log.warn(Messages.getMessage("beanCompatExtends00", javaType.getName(), superClass.getName(), javaType.getName()))[ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_17 $$ if (JavaUtils.isEnumClass(javaType)) [ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_10 $$ if (javaType.getName().startsWith("java.") || javaType.getName().startsWith("javax.")) [ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_6 $$ beanCompatErrs.add(javaType)[ FD ]
Line_11 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) -->Line_12 $$ log.warn(Messages.getMessage("beanCompatPkg00", javaType.getName()))[ CD ]
Line_17 $$ if (JavaUtils.isEnumClass(javaType)) -->Line_18 $$ return true[ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_32 $$ if ((superClass != null) && (superClass != java.lang.Object.class) && (superClass != java.lang.Exception.class) && (superClass != java.lang.Throwable.class) && (superClass != java.rmi.RemoteException.class) && (superClass != org.apache.axis.AxisFault.class) && ((stopClasses == null) || !(stopClasses.contains(superClass.getName())))) [ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_35 $$ log.warn(Messages.getMessage("beanCompatExtends00", javaType.getName(), superClass.getName(), javaType.getName()))[ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_41 $$ return true[ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_4 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) [ FD ]
Line_11 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) -->Line_13 $$ beanCompatErrs.add(javaType)[ CD ]
Line_24 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) -->Line_25 $$ log.warn(Messages.getMessage("beanCompatConstructor00", javaType.getName()))[ CD ]
Line_33 $$ if (!isBeanCompatible(superClass, false)) -->Line_38 $$ return false[ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_34 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) [ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_3 $$ if (javaType.isArray() || javaType.isPrimitive()) [ CD ]
Line_31 $$ Class superClass = javaType.getSuperclass()-->Line_33 $$ if (!isBeanCompatible(superClass, false)) [ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_20 $$ if (!java.lang.Throwable.class.isAssignableFrom(javaType)) [ FD ]
Line_24 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) -->Line_26 $$ beanCompatErrs.add(javaType)[ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_5 $$ log.warn(Messages.getMessage("beanCompatType00", javaType.getName()))[ FD ]
Line_34 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) -->Line_36 $$ beanCompatErrs.add(javaType)[ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_36 $$ beanCompatErrs.add(javaType)[ FD ]
Line_33 $$ if (!isBeanCompatible(superClass, false)) -->Line_34 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) [ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_17 $$ if (JavaUtils.isEnumClass(javaType)) [ CD ]
Line_4 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) -->Line_5 $$ log.warn(Messages.getMessage("beanCompatType00", javaType.getName()))[ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_20 $$ if (!java.lang.Throwable.class.isAssignableFrom(javaType)) [ CD ]
Line_3 $$ if (javaType.isArray() || javaType.isPrimitive()) -->Line_8 $$ return false[ CD ]
Line_34 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) -->Line_35 $$ log.warn(Messages.getMessage("beanCompatExtends00", javaType.getName(), superClass.getName(), javaType.getName()))[ CD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_3 $$ if (javaType.isArray() || javaType.isPrimitive()) [ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_13 $$ beanCompatErrs.add(javaType)[ FD ]
Line_2 $$ protected boolean isBeanCompatible(Class javaType, boolean issueErrors) -->Line_22 $$ javaType.getConstructor(new Class[] [ FD ]
Line_4 $$ if (issueErrors && !beanCompatErrs.contains(javaType)) -->Line_6 $$ beanCompatErrs.add(javaType)[ CD ]
