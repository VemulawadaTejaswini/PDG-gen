Line_11 $$ aClass = ReflectionUtil.getRawType(extractCollectionElementType(getter.getGenericReturnType()))-->Line_10 $$ if (List.class.isAssignableFrom(aClass)) [ FD ]
Line_4 $$ Class aClass = startClass-->Line_11 $$ aClass = ReflectionUtil.getRawType(extractCollectionElementType(getter.getGenericReturnType()))[ FD ]
Line_9 $$ aClass = getter.getReturnType()-->Line_11 $$ aClass = ReflectionUtil.getRawType(extractCollectionElementType(getter.getGenericReturnType()))[ FD ]
Line_6 $$ final JavaMethod getter = findGetter(aClass, path[i])-->Line_11 $$ aClass = ReflectionUtil.getRawType(extractCollectionElementType(getter.getGenericReturnType()))[ FD ]
Line_5 $$ for (int i = 0; i < path.length; i++) -->Line_9 $$ aClass = getter.getReturnType()[ CD ]
Line_9 $$ aClass = getter.getReturnType()-->Line_6 $$ final JavaMethod getter = findGetter(aClass, path[i])[ FD ]
Line_10 $$ if (List.class.isAssignableFrom(aClass)) -->Line_11 $$ aClass = ReflectionUtil.getRawType(extractCollectionElementType(getter.getGenericReturnType()))[ CD ]
Line_5 $$ for (int i = 0; i < path.length; i++) -->Line_8 $$ methods[i] = getter[ CD ]
Line_4 $$ Class aClass = startClass-->Line_9 $$ aClass = getter.getReturnType()[ FD ]
Line_2 $$ public static JavaMethod[] getGetterMethods(final String[] path, final Class<? extends DomElement> startClass) -->Line_4 $$ Class aClass = startClass[ CD ]
Line_2 $$ public static JavaMethod[] getGetterMethods(final String[] path, final Class<? extends DomElement> startClass) -->Line_14 $$ return methods[ CD ]
Line_6 $$ final JavaMethod getter = findGetter(aClass, path[i])-->Line_9 $$ aClass = getter.getReturnType()[ FD ]
Line_4 $$ Class aClass = startClass-->Line_6 $$ final JavaMethod getter = findGetter(aClass, path[i])[ FD ]
Line_11 $$ aClass = ReflectionUtil.getRawType(extractCollectionElementType(getter.getGenericReturnType()))-->Line_6 $$ final JavaMethod getter = findGetter(aClass, path[i])[ FD ]
Line_2 $$ public static JavaMethod[] getGetterMethods(final String[] path, final Class<? extends DomElement> startClass) -->Line_3 $$ final JavaMethod[] methods = new JavaMethod[path.length][ CD ]
Line_5 $$ for (int i = 0; i < path.length; i++) -->Line_6 $$ final JavaMethod getter = findGetter(aClass, path[i])[ CD ]
Line_2 $$ public static JavaMethod[] getGetterMethods(final String[] path, final Class<? extends DomElement> startClass) -->Line_5 $$ for (int i = 0; i < path.length; i++) [ CD ]
Line_4 $$ Class aClass = startClass-->Line_10 $$ if (List.class.isAssignableFrom(aClass)) [ FD ]
Line_9 $$ aClass = getter.getReturnType()-->Line_10 $$ if (List.class.isAssignableFrom(aClass)) [ FD ]
Line_6 $$ final JavaMethod getter = findGetter(aClass, path[i])-->Line_8 $$ methods[i] = getter[ FD ]
Line_5 $$ for (int i = 0; i < path.length; i++) -->Line_10 $$ if (List.class.isAssignableFrom(aClass)) [ CD ]
