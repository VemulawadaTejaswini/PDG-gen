Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_6 $$ JavaTypeDescriptor<T> descriptor = descriptorsByClass.get(cls)[ FD ]
Line_6 $$ JavaTypeDescriptor<T> descriptor = descriptorsByClass.get(cls)-->Line_7 $$ if (descriptor != null) [ FD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_10 $$ if (cls.isEnum()) [ CD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_24 $$ log.warnf("Could not find matching type descriptor for requested Java class [%s]; using fallback", cls.getName())[ FD ]
Line_19 $$ if (entry.getKey().isAssignableFrom(cls)) -->Line_20 $$ log.debugf("Using  cached JavaTypeDescriptor instance for Java class [%s]", cls.getName())[ CD ]
Line_10 $$ if (cls.isEnum()) -->Line_11 $$ descriptor = new EnumJavaTypeDescriptor(cls)[ CD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_19 $$ if (entry.getKey().isAssignableFrom(cls)) [ FD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_3 $$ if (cls == null) [ CD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_24 $$ log.warnf("Could not find matching type descriptor for requested Java class [%s]; using fallback", cls.getName())[ CD ]
Line_15 $$ if (Serializable.class.isAssignableFrom(cls)) -->Line_16 $$ return new SerializableTypeDescriptor(cls)[ CD ]
Line_19 $$ if (entry.getKey().isAssignableFrom(cls)) -->Line_21 $$ return entry.getValue()[ CD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_7 $$ if (descriptor != null) [ CD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_3 $$ if (cls == null) [ FD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_15 $$ if (Serializable.class.isAssignableFrom(cls)) [ FD ]
Line_10 $$ if (cls.isEnum()) -->Line_12 $$ descriptorsByClass.put(cls, descriptor)[ CD ]
Line_18 $$ for (Map.Entry<Class, JavaTypeDescriptor> entry : descriptorsByClass.entrySet()) -->Line_21 $$ return entry.getValue()[ FD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_15 $$ if (Serializable.class.isAssignableFrom(cls)) [ CD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_20 $$ log.debugf("Using  cached JavaTypeDescriptor instance for Java class [%s]", cls.getName())[ FD ]
Line_6 $$ JavaTypeDescriptor<T> descriptor = descriptorsByClass.get(cls)-->Line_12 $$ descriptorsByClass.put(cls, descriptor)[ FD ]
Line_11 $$ descriptor = new EnumJavaTypeDescriptor(cls)-->Line_12 $$ descriptorsByClass.put(cls, descriptor)[ FD ]
Line_10 $$ if (cls.isEnum()) -->Line_13 $$ return descriptor[ CD ]
Line_7 $$ if (descriptor != null) -->Line_8 $$ return descriptor[ CD ]
Line_6 $$ JavaTypeDescriptor<T> descriptor = descriptorsByClass.get(cls)-->Line_11 $$ descriptor = new EnumJavaTypeDescriptor(cls)[ FD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_25 $$ return new FallbackJavaTypeDescriptor<T>(cls)[ CD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_12 $$ descriptorsByClass.put(cls, descriptor)[ FD ]
Line_18 $$ for (Map.Entry<Class, JavaTypeDescriptor> entry : descriptorsByClass.entrySet()) -->Line_19 $$ if (entry.getKey().isAssignableFrom(cls)) [ FD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_6 $$ JavaTypeDescriptor<T> descriptor = descriptorsByClass.get(cls)[ CD ]
Line_2 $$ public <T> JavaTypeDescriptor<T> getDescriptor(Class<T> cls) -->Line_10 $$ if (cls.isEnum()) [ FD ]
