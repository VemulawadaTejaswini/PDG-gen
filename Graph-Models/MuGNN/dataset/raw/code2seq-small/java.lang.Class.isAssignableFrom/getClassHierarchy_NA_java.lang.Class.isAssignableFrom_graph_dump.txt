Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_5 $$ addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)[ FD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_5 $$ addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)[ CD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_19 $$ addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)[ FD ]
Line_8 $$ while (i < hierarchy.size()) -->Line_9 $$ Class<?> candidate = hierarchy.get(i)[ CD ]
Line_6 $$ boolean array = type.isArray()-->Line_13 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_9 $$ Class<?> candidate = hierarchy.get(i)-->Line_13 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_9 $$ Class<?> candidate = hierarchy.get(i)[ FD ]
Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_23 $$ addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)[ FD ]
Line_6 $$ boolean array = type.isArray()-->Line_21 $$ addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)[ FD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_24 $$ addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)[ FD ]
Line_9 $$ Class<?> candidate = hierarchy.get(i)-->Line_11 $$ Class<?> superclass = candidate.getSuperclass()[ FD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_8 $$ while (i < hierarchy.size()) [ CD ]
Line_9 $$ Class<?> candidate = hierarchy.get(i)-->Line_10 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))[ FD ]
Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_19 $$ addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)[ FD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_20 $$ addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)[ FD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)[ CD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_18 $$ if (Enum.class.isAssignableFrom(type)) [ CD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_23 $$ addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)[ FD ]
Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_13 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_23 $$ addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)[ CD ]
Line_10 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))-->Line_15 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_18 $$ if (Enum.class.isAssignableFrom(type)) -->Line_20 $$ addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)[ CD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_25 $$ return hierarchy[ CD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_15 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_7 $$ int i = 0-->Line_8 $$ while (i < hierarchy.size()) [ FD ]
Line_10 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))-->Line_11 $$ Class<?> superclass = candidate.getSuperclass()[ FD ]
Line_12 $$ if (superclass != null && superclass != Object.class && superclass != Enum.class) -->Line_13 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ CD ]
Line_10 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))-->Line_13 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_8 $$ while (i < hierarchy.size()) -->Line_15 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ CD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_5 $$ addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)[ FD ]
Line_6 $$ boolean array = type.isArray()-->Line_19 $$ addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)[ FD ]
Line_6 $$ boolean array = type.isArray()-->Line_15 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_8 $$ while (i < hierarchy.size()) -->Line_16 $$ i++[ CD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_8 $$ while (i < hierarchy.size()) [ FD ]
Line_9 $$ Class<?> candidate = hierarchy.get(i)-->Line_15 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_7 $$ int i = 0-->Line_16 $$ i++[ FD ]
Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_20 $$ addToClassHierarchy(hierarchy.size(), Enum.class, false, hierarchy, visited)[ FD ]
Line_7 $$ int i = 0-->Line_9 $$ Class<?> candidate = hierarchy.get(i)[ FD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_21 $$ addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)[ FD ]
Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_24 $$ addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)[ FD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_6 $$ boolean array = type.isArray()[ FD ]
Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_15 $$ addInterfacesToClassHierarchy(candidate, array, hierarchy, visited)[ FD ]
Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_21 $$ addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)[ FD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_6 $$ boolean array = type.isArray()[ CD ]
Line_3 $$ List<Class<?>> hierarchy = new ArrayList<Class<?>>(20)-->Line_13 $$ addToClassHierarchy(i + 1, candidate.getSuperclass(), array, hierarchy, visited)[ FD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_18 $$ if (Enum.class.isAssignableFrom(type)) [ FD ]
Line_8 $$ while (i < hierarchy.size()) -->Line_12 $$ if (superclass != null && superclass != Object.class && superclass != Enum.class) [ CD ]
Line_6 $$ boolean array = type.isArray()-->Line_23 $$ addToClassHierarchy(hierarchy.size(), Object.class, array, hierarchy, visited)[ FD ]
Line_8 $$ while (i < hierarchy.size()) -->Line_11 $$ Class<?> superclass = candidate.getSuperclass()[ CD ]
Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)-->Line_5 $$ addToClassHierarchy(0, ClassUtils.resolvePrimitiveIfNecessary(type), false, hierarchy, visited)[ FD ]
Line_18 $$ if (Enum.class.isAssignableFrom(type)) -->Line_19 $$ addToClassHierarchy(hierarchy.size(), Enum.class, array, hierarchy, visited)[ CD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_4 $$ Set<Class<?>> visited = new HashSet<Class<?>>(20)[ CD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_7 $$ int i = 0[ CD ]
Line_8 $$ while (i < hierarchy.size()) -->Line_10 $$ candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate))[ CD ]
Line_2 $$ private List<Class<?>> getClassHierarchy(Class<?> type) -->Line_24 $$ addToClassHierarchy(hierarchy.size(), Object.class, false, hierarchy, visited)[ CD ]
Line_18 $$ if (Enum.class.isAssignableFrom(type)) -->Line_21 $$ addInterfacesToClassHierarchy(Enum.class, array, hierarchy, visited)[ CD ]
