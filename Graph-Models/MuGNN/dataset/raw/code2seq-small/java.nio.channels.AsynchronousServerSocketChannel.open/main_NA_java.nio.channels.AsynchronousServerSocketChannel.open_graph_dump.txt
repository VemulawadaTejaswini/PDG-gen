Line_16 $$ if (bound.getAddress() instanceof Inet6Address) -->Line_19 $$ Files.write(tmp, Collections.singleton(bound.getHostString() + ":" + bound.getPort()))[ CD ]
Line_28 $$ try (AsynchronousSocketChannel ch = socket) -->Line_29 $$ ch.write(ByteBuffer.wrap("TEST\n".getBytes(StandardCharsets.UTF_8))).get()[ FD ]
Line_7 $$ AsynchronousServerSocketChannel server = AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0))-->Line_15 $$ InetSocketAddress bound = (InetSocketAddress) server.getLocalAddress()[ FD ]
Line_15 $$ InetSocketAddress bound = (InetSocketAddress) server.getLocalAddress()-->Line_17 $$ Files.write(tmp, Collections.singleton("[" + bound.getHostString() + "]:" + bound.getPort()))[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_3 $$ if (args.length != 1) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_15 $$ InetSocketAddress bound = (InetSocketAddress) server.getLocalAddress()[ CD ]
Line_6 $$ Path dir = Paths.get(args[0])-->Line_12 $$ Files.move(tmp, dir.resolve("pid"), StandardCopyOption.ATOMIC_MOVE)[ FD ]
Line_7 $$ AsynchronousServerSocketChannel server = AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0))-->Line_27 $$ server.accept(null, this)[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_21 $$ Files.move(tmp, dir.resolve("ports"), StandardCopyOption.ATOMIC_MOVE)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_6 $$ Path dir = Paths.get(args[0])[ CD ]
Line_6 $$ Path dir = Paths.get(args[0])-->Line_21 $$ Files.move(tmp, dir.resolve("ports"), StandardCopyOption.ATOMIC_MOVE)[ FD ]
Line_15 $$ InetSocketAddress bound = (InetSocketAddress) server.getLocalAddress()-->Line_16 $$ if (bound.getAddress() instanceof Inet6Address) [ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_11 $$ Files.write(tmp, Collections.singleton(pid))[ CD ]
Line_16 $$ if (bound.getAddress() instanceof Inet6Address) -->Line_17 $$ Files.write(tmp, Collections.singleton("[" + bound.getHostString() + "]:" + bound.getPort()))[ CD ]
Line_15 $$ InetSocketAddress bound = (InetSocketAddress) server.getLocalAddress()-->Line_19 $$ Files.write(tmp, Collections.singleton(bound.getHostString() + ":" + bound.getPort()))[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_12 $$ Files.move(tmp, dir.resolve("pid"), StandardCopyOption.ATOMIC_MOVE)[ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_7 $$ AsynchronousServerSocketChannel server = AsynchronousServerSocketChannel.open().bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0))[ CD ]
Line_10 $$ String pid = ManagementFactory.getRuntimeMXBean().getName().split("@")[0]-->Line_11 $$ Files.write(tmp, Collections.singleton(pid))[ FD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_16 $$ if (bound.getAddress() instanceof Inet6Address) [ CD ]
Line_2 $$ public static void main(String[] args) throws Exception -->Line_10 $$ String pid = ManagementFactory.getRuntimeMXBean().getName().split("@")[0][ CD ]
