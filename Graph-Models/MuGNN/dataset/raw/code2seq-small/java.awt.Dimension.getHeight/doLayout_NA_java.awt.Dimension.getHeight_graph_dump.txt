Line_26 $$ double mSize2 = isVertical() ? mySecondComponent.getMinimumSize().getHeight() : mySecondComponent.getMinimumSize().getWidth()-->Line_34 $$ size2 = mSize2[ FD ]
Line_2 $$ public void doLayout() -->Line_3 $$ if (mySkipNextLayouting) [ CD ]
Line_7 $$ int width = getWidth()-->Line_65 $$ mySecondComponent.setBounds(0, 0, width, height)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_52 $$ myFirstComponent.setBounds(firstRect)[ CD ]
Line_8 $$ int height = getHeight()-->Line_47 $$ firstRect.setBounds(0, 0, iSize1, height)[ FD ]
Line_29 $$ size1 = proportion * total-->Line_35 $$ size1 = total - size2 - d[ FD ]
Line_14 $$ Rectangle dividerRect = new Rectangle()-->Line_53 $$ myDivider.setBounds(dividerRect)[ FD ]
Line_25 $$ double mSize1 = isVertical() ? myFirstComponent.getMinimumSize().getHeight() : myFirstComponent.getMinimumSize().getWidth()-->Line_31 $$ if (size1 < mSize1) [ FD ]
Line_26 $$ double mSize2 = isVertical() ? mySecondComponent.getMinimumSize().getHeight() : mySecondComponent.getMinimumSize().getWidth()-->Line_33 $$ if (size2 < mSize2) [ FD ]
Line_24 $$ if (isHonorMinimumSize()) -->Line_26 $$ double mSize2 = isVertical() ? mySecondComponent.getMinimumSize().getHeight() : mySecondComponent.getMinimumSize().getWidth()[ CD ]
Line_20 $$ d = total-->Line_48 $$ dividerRect.setBounds(iSize1, 0, d, height)[ FD ]
Line_15 $$ Rectangle secondRect = new Rectangle()-->Line_45 $$ secondRect.setBounds(0, iSize1 + d, width, iSize2)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_42 $$ if (isVertical()) [ CD ]
Line_42 $$ if (isVertical()) -->Line_45 $$ secondRect.setBounds(0, iSize1 + d, width, iSize2)[ CD ]
Line_16 $$ int d = getDividerWidth()-->Line_35 $$ size1 = total - size2 - d[ FD ]
Line_25 $$ double mSize1 = isVertical() ? myFirstComponent.getMinimumSize().getHeight() : myFirstComponent.getMinimumSize().getWidth()-->Line_32 $$ size1 = mSize1[ FD ]
Line_17 $$ double size1-->Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))[ FD ]
Line_41 $$ int iSize2 = total - iSize1 - d-->Line_49 $$ secondRect.setBounds((iSize1 + d), 0, iSize2, height)[ FD ]
Line_2 $$ public void doLayout() -->Line_8 $$ int height = getHeight()[ CD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_51 $$ myDivider.setVisible(true)[ CD ]
Line_57 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible()) -->Line_59 $$ myDivider.setVisible(false)[ CD ]
Line_8 $$ int height = getHeight()-->Line_60 $$ myFirstComponent.setBounds(0, 0, width, height)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_16 $$ int d = getDividerWidth()[ CD ]
Line_19 $$ size1 = 0-->Line_22 $$ size1 = myProportion * (total - d)[ FD ]
Line_18 $$ if (total <= d) -->Line_20 $$ d = total[ CD ]
Line_13 $$ Rectangle firstRect = new Rectangle()-->Line_47 $$ firstRect.setBounds(0, 0, iSize1, height)[ FD ]
Line_16 $$ int d = getDividerWidth()-->Line_20 $$ d = total[ FD ]
Line_17 $$ double size1-->Line_31 $$ if (size1 < mSize1) [ FD ]
Line_27 $$ if (size1 + size2 < mSize1 + mSize2) -->Line_29 $$ size1 = proportion * total[ CD ]
Line_22 $$ size1 = myProportion * (total - d)-->Line_35 $$ size1 = total - size2 - d[ FD ]
Line_2 $$ public void doLayout() -->Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) [ CD ]
Line_62 $$ if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_68 $$ myDivider.setVisible(false)[ CD ]
Line_24 $$ if (isHonorMinimumSize()) -->Line_27 $$ if (size1 + size2 < mSize1 + mSize2) [ CD ]
Line_9 $$ int total = isVertical() ? height : width-->Line_18 $$ if (total <= d) [ FD ]
Line_29 $$ size1 = proportion * total-->Line_32 $$ size1 = mSize1[ FD ]
Line_9 $$ int total = isVertical() ? height : width-->Line_10 $$ if (total <= 0)[ FD ]
Line_57 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible()) -->Line_60 $$ myFirstComponent.setBounds(0, 0, width, height)[ CD ]
Line_20 $$ d = total-->Line_44 $$ dividerRect.setBounds(0, iSize1, width, d)[ FD ]
Line_32 $$ size1 = mSize1-->Line_35 $$ size1 = total - size2 - d[ FD ]
Line_69 $$ if (myFirstComponent != null) -->Line_71 $$ myFirstComponent.revalidate()[ CD ]
Line_75 $$ if (mySecondComponent != null) -->Line_79 $$ hideNull(mySecondComponent)[ CD ]
Line_27 $$ if (size1 + size2 < mSize1 + mSize2) -->Line_28 $$ double proportion = mSize1 / (mSize1 + mSize2)[ CD ]
Line_13 $$ Rectangle firstRect = new Rectangle()-->Line_52 $$ myFirstComponent.setBounds(firstRect)[ FD ]
Line_18 $$ if (total <= d) -->Line_19 $$ size1 = 0[ CD ]
Line_10 $$ if (total <= 0)-->Line_11 $$ return[ CD ]
Line_31 $$ if (size1 < mSize1) -->Line_32 $$ size1 = mSize1[ CD ]
Line_42 $$ if (isVertical()) -->Line_47 $$ firstRect.setBounds(0, 0, iSize1, height)[ CD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))[ CD ]
Line_62 $$ if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_65 $$ mySecondComponent.setBounds(0, 0, width, height)[ CD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_41 $$ int iSize2 = total - iSize1 - d[ CD ]
Line_7 $$ int width = getWidth()-->Line_43 $$ firstRect.setBounds(0, 0, width, iSize1)[ FD ]
Line_35 $$ size1 = total - size2 - d-->Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))[ FD ]
Line_17 $$ double size1-->Line_22 $$ size1 = myProportion * (total - d)[ FD ]
Line_62 $$ if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_63 $$ hideNull(myFirstComponent)[ CD ]
Line_62 $$ if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_66 $$ mySecondComponent.revalidate()[ CD ]
Line_14 $$ Rectangle dividerRect = new Rectangle()-->Line_44 $$ dividerRect.setBounds(0, iSize1, width, d)[ FD ]
Line_41 $$ int iSize2 = total - iSize1 - d-->Line_45 $$ secondRect.setBounds(0, iSize1 + d, width, iSize2)[ FD ]
Line_9 $$ int total = isVertical() ? height : width-->Line_29 $$ size1 = proportion * total[ FD ]
Line_9 $$ int total = isVertical() ? height : width-->Line_20 $$ d = total[ FD ]
Line_33 $$ if (size2 < mSize2) -->Line_35 $$ size1 = total - size2 - d[ CD ]
Line_75 $$ if (mySecondComponent != null) -->Line_76 $$ mySecondComponent.setBounds(0, 0, 0, 0)[ CD ]
Line_15 $$ Rectangle secondRect = new Rectangle()-->Line_54 $$ mySecondComponent.setBounds(secondRect)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_57 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible()) [ CD ]
Line_22 $$ size1 = myProportion * (total - d)-->Line_29 $$ size1 = proportion * total[ FD ]
Line_69 $$ if (myFirstComponent != null) -->Line_70 $$ myFirstComponent.setBounds(0, 0, 0, 0)[ CD ]
Line_16 $$ int d = getDividerWidth()-->Line_44 $$ dividerRect.setBounds(0, iSize1, width, d)[ FD ]
Line_32 $$ size1 = mSize1-->Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))[ FD ]
Line_18 $$ if (total <= d) -->Line_22 $$ size1 = myProportion * (total - d)[ CD ]
Line_27 $$ if (size1 + size2 < mSize1 + mSize2) -->Line_31 $$ if (size1 < mSize1) [ CD ]
Line_42 $$ if (isVertical()) -->Line_43 $$ firstRect.setBounds(0, 0, width, iSize1)[ CD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_56 $$ mySecondComponent.revalidate()[ CD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_17 $$ double size1[ CD ]
Line_8 $$ int height = getHeight()-->Line_48 $$ dividerRect.setBounds(iSize1, 0, d, height)[ FD ]
Line_18 $$ if (total <= d) -->Line_23 $$ double size2 = total - size1 - d[ CD ]
Line_28 $$ double proportion = mSize1 / (mSize1 + mSize2)-->Line_29 $$ size1 = proportion * total[ FD ]
Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))-->Line_48 $$ dividerRect.setBounds(iSize1, 0, d, height)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_13 $$ Rectangle firstRect = new Rectangle()[ CD ]
Line_62 $$ if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_64 $$ myDivider.setVisible(false)[ CD ]
Line_42 $$ if (isVertical()) -->Line_44 $$ dividerRect.setBounds(0, iSize1, width, d)[ CD ]
Line_62 $$ if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_69 $$ if (myFirstComponent != null) [ CD ]
Line_2 $$ public void doLayout() -->Line_9 $$ int total = isVertical() ? height : width[ CD ]
Line_18 $$ if (total <= d) -->Line_24 $$ if (isHonorMinimumSize()) [ CD ]
Line_14 $$ Rectangle dividerRect = new Rectangle()-->Line_48 $$ dividerRect.setBounds(iSize1, 0, d, height)[ FD ]
Line_24 $$ if (isHonorMinimumSize()) -->Line_25 $$ double mSize1 = isVertical() ? myFirstComponent.getMinimumSize().getHeight() : myFirstComponent.getMinimumSize().getWidth()[ CD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_15 $$ Rectangle secondRect = new Rectangle()[ CD ]
Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))-->Line_43 $$ firstRect.setBounds(0, 0, width, iSize1)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_54 $$ mySecondComponent.setBounds(secondRect)[ CD ]
Line_42 $$ if (isVertical()) -->Line_49 $$ secondRect.setBounds((iSize1 + d), 0, iSize2, height)[ CD ]
Line_57 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible()) -->Line_58 $$ hideNull(mySecondComponent)[ CD ]
Line_15 $$ Rectangle secondRect = new Rectangle()-->Line_49 $$ secondRect.setBounds((iSize1 + d), 0, iSize2, height)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_14 $$ Rectangle dividerRect = new Rectangle()[ CD ]
Line_22 $$ size1 = myProportion * (total - d)-->Line_31 $$ if (size1 < mSize1) [ FD ]
Line_19 $$ size1 = 0-->Line_32 $$ size1 = mSize1[ FD ]
Line_19 $$ size1 = 0-->Line_31 $$ if (size1 < mSize1) [ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_18 $$ if (total <= d) [ CD ]
Line_17 $$ double size1-->Line_32 $$ size1 = mSize1[ FD ]
Line_19 $$ size1 = 0-->Line_35 $$ size1 = total - size2 - d[ FD ]
Line_19 $$ size1 = 0-->Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))[ FD ]
Line_17 $$ double size1-->Line_29 $$ size1 = proportion * total[ FD ]
Line_29 $$ size1 = proportion * total-->Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))[ FD ]
Line_69 $$ if (myFirstComponent != null) -->Line_73 $$ hideNull(myFirstComponent)[ CD ]
Line_7 $$ int width = getWidth()-->Line_44 $$ dividerRect.setBounds(0, iSize1, width, d)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_53 $$ myDivider.setBounds(dividerRect)[ CD ]
Line_23 $$ double size2 = total - size1 - d-->Line_33 $$ if (size2 < mSize2) [ FD ]
Line_2 $$ public void doLayout() -->Line_82 $$ myDivider.revalidate()[ CD ]
Line_62 $$ if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_75 $$ if (mySecondComponent != null) [ CD ]
Line_13 $$ Rectangle firstRect = new Rectangle()-->Line_43 $$ firstRect.setBounds(0, 0, width, iSize1)[ FD ]
Line_8 $$ int height = getHeight()-->Line_49 $$ secondRect.setBounds((iSize1 + d), 0, iSize2, height)[ FD ]
Line_12 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible() && !isNull(mySecondComponent) && mySecondComponent.isVisible()) -->Line_55 $$ myFirstComponent.revalidate()[ CD ]
Line_3 $$ if (mySkipNextLayouting) -->Line_5 $$ return[ CD ]
Line_2 $$ public void doLayout() -->Line_10 $$ if (total <= 0)[ CD ]
Line_2 $$ public void doLayout() -->Line_7 $$ int width = getWidth()[ CD ]
Line_23 $$ double size2 = total - size1 - d-->Line_34 $$ size2 = mSize2[ FD ]
Line_42 $$ if (isVertical()) -->Line_48 $$ dividerRect.setBounds(iSize1, 0, d, height)[ CD ]
Line_7 $$ int width = getWidth()-->Line_45 $$ secondRect.setBounds(0, iSize1 + d, width, iSize2)[ FD ]
Line_57 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible()) -->Line_61 $$ myFirstComponent.revalidate()[ CD ]
Line_22 $$ size1 = myProportion * (total - d)-->Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))[ FD ]
Line_29 $$ size1 = proportion * total-->Line_31 $$ if (size1 < mSize1) [ FD ]
Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))-->Line_47 $$ firstRect.setBounds(0, 0, iSize1, height)[ FD ]
Line_16 $$ int d = getDividerWidth()-->Line_48 $$ dividerRect.setBounds(iSize1, 0, d, height)[ FD ]
Line_7 $$ int width = getWidth()-->Line_60 $$ myFirstComponent.setBounds(0, 0, width, height)[ FD ]
Line_8 $$ int height = getHeight()-->Line_65 $$ mySecondComponent.setBounds(0, 0, width, height)[ FD ]
Line_17 $$ double size1-->Line_19 $$ size1 = 0[ FD ]
Line_75 $$ if (mySecondComponent != null) -->Line_77 $$ mySecondComponent.revalidate()[ CD ]
Line_19 $$ size1 = 0-->Line_29 $$ size1 = proportion * total[ FD ]
Line_57 $$ if (!isNull(myFirstComponent) && myFirstComponent.isVisible()) -->Line_62 $$ if (!isNull(mySecondComponent) && mySecondComponent.isVisible()) [ CD ]
Line_31 $$ if (size1 < mSize1) -->Line_33 $$ if (size2 < mSize2) [ CD ]
Line_20 $$ d = total-->Line_35 $$ size1 = total - size2 - d[ FD ]
Line_22 $$ size1 = myProportion * (total - d)-->Line_32 $$ size1 = mSize1[ FD ]
Line_40 $$ int iSize1 = (int) Math.round(Math.floor(size1))-->Line_44 $$ dividerRect.setBounds(0, iSize1, width, d)[ FD ]
Line_16 $$ int d = getDividerWidth()-->Line_18 $$ if (total <= d) [ FD ]
Line_33 $$ if (size2 < mSize2) -->Line_34 $$ size2 = mSize2[ CD ]
Line_17 $$ double size1-->Line_35 $$ size1 = total - size2 - d[ FD ]
