Line_270 $$ if (conf.max_mutation_size_in_kb == null)-->Line_272 $$ if (conf.commitlog_segment_size_in_mb * 1024 < 2 * conf.max_mutation_size_in_kb)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_210 $$ if (conf.memtable_flush_writers < 1)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_4 $$ if (conf.commitlog_sync == null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_274 $$ if (conf.native_transport_port_ssl != null && conf.native_transport_port_ssl.intValue() != conf.native_transport_port.intValue() && !conf.client_encryption_options.enabled) [ CD ]
Line_220 $$ if (conf.concurrent_compactors == null)-->Line_221 $$ conf.concurrent_compactors = Math.min(8, Math.max(2, Math.min(FBUtilities.getAvailableProcessors(), conf.data_file_directories.length)))[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_82 $$ if (conf.file_cache_size_in_mb == null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_220 $$ if (conf.concurrent_compactors == null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_222 $$ if (conf.concurrent_compactors <= 0)[ CD ]
Line_93 $$ if (conf.memtable_offheap_space_in_mb == 0)-->Line_96 $$ logger.info("Global memtable off-heap threshold is enabled at [ CD ]
Line_112 $$ localComparator = new Comparator<InetAddress>() -->Line_114 $$ boolean local1 = localDC.equals(snitch.getDatacenter(endpoint1))[ CD ]
Line_115 $$ boolean local2 = localDC.equals(snitch.getDatacenter(endpoint2))-->Line_116 $$ if (local1 && !local2)[ FD ]
Line_8 $$ if (conf.commitlog_sync_batch_window_in_ms == null) -->Line_10 $$ if (conf.commitlog_sync_period_in_ms != null) [ CD ]
Line_112 $$ localComparator = new Comparator<InetAddress>() -->Line_120 $$ return 0[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_124 $$ if (conf.request_scheduler != null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_156 $$ if (conf.commitlog_total_space_in_mb == null) [ CD ]
Line_26 $$ if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only) -->Line_29 $$ logger.info("DiskAccessMode is [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_172 $$ if (conf.saved_caches_directory == null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_88 $$ if (conf.memtable_heap_space_in_mb == null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_218 $$ if (conf.memtable_cleanup_threshold < 0.1f)[ CD ]
Line_104 $$ if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads > (FBUtilities.getAvailableProcessors() * 2 + 1024))-->Line_105 $$ logger.warn("rpc_max_threads setting of [ CD ]
Line_112 $$ localComparator = new Comparator<InetAddress>() -->Line_115 $$ boolean local2 = localDC.equals(snitch.getDatacenter(endpoint2))[ CD ]
Line_178 $$ if (conf.data_file_directories == null || conf.data_file_directories.length == 0) -->Line_180 $$ if (defaultDataDir == null)[ CD ]
Line_218 $$ if (conf.memtable_cleanup_threshold < 0.1f)-->Line_219 $$ logger.warn("memtable_cleanup_threshold is set very low [[ CD ]
Line_7 $$ if (conf.commitlog_sync == Config.CommitLogSync.batch) -->Line_20 $$ logger.debug("Syncing log with a period of [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_202 $$ if (conf.commitlog_directory.equals(conf.saved_caches_directory))[ CD ]
Line_172 $$ if (conf.saved_caches_directory == null) -->Line_173 $$ conf.saved_caches_directory = System.getProperty("cassandra.storagedir", null)[ CD ]
Line_270 $$ if (conf.max_mutation_size_in_kb == null)-->Line_271 $$ conf.max_mutation_size_in_kb = conf.commitlog_segment_size_in_mb * 1024 / 2[ CD ]
Line_22 $$ if (conf.disk_access_mode == Config.DiskAccessMode.auto) -->Line_23 $$ conf.disk_access_mode = hasLargeAddressSpace() ? Config.DiskAccessMode.mmap : Config.DiskAccessMode.standard[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_80 $$ if (conf.concurrent_replicates != null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_270 $$ if (conf.max_mutation_size_in_kb == null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_199 $$ if (dataFreeBytes < 64L * 1024 * 1048576)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_224 $$ if (conf.initial_token != null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_206 $$ if (conf.hints_directory.equals(conf.saved_caches_directory))[ CD ]
Line_156 $$ if (conf.commitlog_total_space_in_mb == null) -->Line_165 $$ if (minSize < preferredSize) [ CD ]
Line_80 $$ if (conf.concurrent_replicates != null)-->Line_81 $$ logger.warn("concurrent_replicates has been deprecated and should be removed from cassandra.yaml")[ CD ]
Line_150 $$ if (conf.hints_directory == null) -->Line_152 $$ if (conf.hints_directory == null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_212 $$ if (conf.memtable_cleanup_threshold == null)[ CD ]
Line_144 $$ if (conf.commitlog_directory == null) -->Line_146 $$ if (conf.commitlog_directory == null)[ CD ]
Line_46 $$ if (conf.internode_authenticator != null)-->Line_47 $$ internodeAuthenticator = FBUtilities.construct(conf.internode_authenticator, "internode_authenticator")[ CD ]
Line_178 $$ if (conf.data_file_directories == null || conf.data_file_directories.length == 0) -->Line_182 $$ conf.data_file_directories = new String[] [ CD ]
Line_165 $$ if (minSize < preferredSize) -->Line_166 $$ logger.warn("Small commitlog volume detected at [ CD ]
Line_144 $$ if (conf.commitlog_directory == null) -->Line_148 $$ conf.commitlog_directory += File.separator + "commitlog"[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_245 $$ if (indexSummaryCapacityInMB < 0)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_214 $$ if (conf.memtable_cleanup_threshold < 0.01f)[ CD ]
Line_226 $$ if (conf.num_tokens == null)-->Line_227 $$ conf.num_tokens = 1[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_54 $$ if (conf.partitioner == null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_251 $$ if (conf.seed_provider == null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_34 $$ if (conf.authenticator != null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_84 $$ if (conf.memtable_offheap_space_in_mb == null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_97 $$ applyAddressConfig(config)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_226 $$ if (conf.num_tokens == null)[ CD ]
Line_178 $$ if (conf.data_file_directories == null || conf.data_file_directories.length == 0) -->Line_179 $$ String defaultDataDir = System.getProperty("cassandra.storagedir", null)[ CD ]
Line_7 $$ if (conf.commitlog_sync == Config.CommitLogSync.batch) -->Line_8 $$ if (conf.commitlog_sync_batch_window_in_ms == null) [ CD ]
Line_84 $$ if (conf.memtable_offheap_space_in_mb == null)-->Line_85 $$ conf.memtable_offheap_space_in_mb = (int) (Runtime.getRuntime().maxMemory() / (4 * 1048576))[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_62 $$ paritionerName = partitioner.getClass().getCanonicalName()[ CD ]
Line_40 $$ if (conf.role_manager != null)-->Line_41 $$ roleManager = FBUtilities.newRoleManager(conf.role_manager)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_86 $$ if (conf.memtable_offheap_space_in_mb < 0)[ CD ]
Line_7 $$ if (conf.commitlog_sync == Config.CommitLogSync.batch) -->Line_13 $$ logger.debug("Syncing log with a batch window of [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_50 $$ authenticator.validateConfiguration()[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_63 $$ if (conf.gc_warn_threshold_in_ms < 0) [ CD ]
Line_22 $$ if (conf.disk_access_mode == Config.DiskAccessMode.auto) -->Line_25 $$ logger.info("DiskAccessMode 'auto' determined to be [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_69 $$ if (conf.phi_convict_threshold < 5 || conf.phi_convict_threshold > 16) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_100 $$ if (conf.native_transport_max_frame_size_in_mb <= 0)[ CD ]
Line_112 $$ localComparator = new Comparator<InetAddress>() -->Line_116 $$ if (local1 && !local2)[ CD ]
Line_26 $$ if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only) -->Line_32 $$ logger.info("DiskAccessMode is [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_178 $$ if (conf.data_file_directories == null || conf.data_file_directories.length == 0) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_53 $$ internodeAuthenticator.validateConfiguration()[ CD ]
Line_247 $$ if (conf.encryption_options != null) -->Line_249 $$ conf.server_encryption_options = conf.encryption_options[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_90 $$ if (conf.memtable_heap_space_in_mb <= 0)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_261 $$ if (seedProvider.getSeeds().size() == 0)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_93 $$ if (conf.memtable_offheap_space_in_mb == 0)[ CD ]
Line_172 $$ if (conf.saved_caches_directory == null) -->Line_176 $$ conf.saved_caches_directory += File.separator + "saved_caches"[ CD ]
Line_22 $$ if (conf.disk_access_mode == Config.DiskAccessMode.auto) -->Line_26 $$ if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_265 $$ if (conf.user_defined_function_warn_timeout < 0)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_38 $$ if (authenticator instanceof AllowAllAuthenticator && !(authorizer instanceof AllowAllAuthorizer))[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_46 $$ if (conf.internode_authenticator != null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_102 $$ if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads == Integer.MAX_VALUE)[ CD ]
Line_7 $$ if (conf.commitlog_sync == Config.CommitLogSync.batch) -->Line_15 $$ if (conf.commitlog_sync_period_in_ms == null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_78 $$ if (conf.concurrent_counter_writes != null && conf.concurrent_counter_writes < 2)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_204 $$ if (conf.commitlog_directory.equals(conf.hints_directory))[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_109 $$ snitch = createEndpointSnitch(conf.endpoint_snitch)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_267 $$ if (conf.user_defined_function_fail_timeout < conf.user_defined_function_warn_timeout)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_44 $$ if (authenticator instanceof PasswordAuthenticator && !(roleManager instanceof CassandraRoleManager))[ CD ]
Line_112 $$ localComparator = new Comparator<InetAddress>() -->Line_114 $$ boolean local1 = localDC.equals(snitch.getDatacenter(endpoint1))[ FD ]
Line_15 $$ if (conf.commitlog_sync_period_in_ms == null) -->Line_17 $$ if (conf.commitlog_sync_batch_window_in_ms != null) [ CD ]
Line_212 $$ if (conf.memtable_cleanup_threshold == null)-->Line_213 $$ conf.memtable_cleanup_threshold = (float) (1.0 / (1 + conf.memtable_flush_writers))[ CD ]
Line_34 $$ if (conf.authenticator != null)-->Line_35 $$ authenticator = FBUtilities.newAuthenticator(conf.authenticator)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_75 $$ if (conf.concurrent_writes != null && conf.concurrent_writes < 2) [ CD ]
Line_247 $$ if (conf.encryption_options != null) -->Line_248 $$ logger.warn("Please rename encryption_options as server_encryption_options in the yaml")[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_263 $$ if (conf.user_defined_function_fail_timeout < 0)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_104 $$ if (ThriftServer.HSHA.equals(conf.rpc_server_type) && conf.rpc_max_threads > (FBUtilities.getAvailableProcessors() * 2 + 1024))[ CD ]
Line_118 $$ if (local2 && !local1)-->Line_119 $$ return 1[ CD ]
Line_112 $$ localComparator = new Comparator<InetAddress>() -->Line_118 $$ if (local2 && !local1)[ CD ]
Line_150 $$ if (conf.hints_directory == null) -->Line_151 $$ conf.hints_directory = System.getProperty("cassandra.storagedir", null)[ CD ]
Line_199 $$ if (dataFreeBytes < 64L * 1024 * 1048576)-->Line_201 $$ logger.warn("Only [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_150 $$ if (conf.hints_directory == null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_208 $$ if (conf.memtable_flush_writers == null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_139 $$ if (conf.request_scheduler_id == RequestSchedulerId.keyspace) [ CD ]
Line_115 $$ boolean local2 = localDC.equals(snitch.getDatacenter(endpoint2))-->Line_118 $$ if (local2 && !local1)[ FD ]
Line_88 $$ if (conf.memtable_heap_space_in_mb == null)-->Line_89 $$ conf.memtable_heap_space_in_mb = (int) (Runtime.getRuntime().maxMemory() / (4 * 1048576))[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_106 $$ if (conf.endpoint_snitch == null) [ CD ]
Line_144 $$ if (conf.commitlog_directory == null) -->Line_145 $$ conf.commitlog_directory = System.getProperty("cassandra.storagedir", null)[ CD ]
Line_208 $$ if (conf.memtable_flush_writers == null)-->Line_209 $$ conf.memtable_flush_writers = Math.min(8, Math.max(2, Math.min(FBUtilities.getAvailableProcessors(), conf.data_file_directories.length)))[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_22 $$ if (conf.disk_access_mode == Config.DiskAccessMode.auto) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_72 $$ if (conf.concurrent_reads != null && conf.concurrent_reads < 2) [ CD ]
Line_112 $$ localComparator = new Comparator<InetAddress>() -->Line_115 $$ boolean local2 = localDC.equals(snitch.getDatacenter(endpoint2))[ FD ]
Line_150 $$ if (conf.hints_directory == null) -->Line_154 $$ conf.hints_directory += File.separator + "hints"[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_7 $$ if (conf.commitlog_sync == Config.CommitLogSync.batch) [ CD ]
Line_82 $$ if (conf.file_cache_size_in_mb == null)-->Line_83 $$ conf.file_cache_size_in_mb = Math.min(512, (int) (Runtime.getRuntime().maxMemory() / (4 * 1048576)))[ CD ]
Line_93 $$ if (conf.memtable_offheap_space_in_mb == 0)-->Line_94 $$ logger.info("Global memtable off-heap threshold is disabled, HeapAllocator will be used instead")[ CD ]
Line_114 $$ boolean local1 = localDC.equals(snitch.getDatacenter(endpoint1))-->Line_118 $$ if (local2 && !local1)[ FD ]
Line_116 $$ if (local1 && !local2)-->Line_117 $$ return -1[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_36 $$ if (conf.authorizer != null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_111 $$ localDC = snitch.getDatacenter(FBUtilities.getBroadcastAddress())[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_110 $$ EndpointSnitchInfo.create()[ CD ]
Line_226 $$ if (conf.num_tokens == null)-->Line_228 $$ if (conf.num_tokens > MAX_NUM_TOKENS)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_52 $$ roleManager.validateConfiguration()[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_66 $$ if (conf.max_hint_window_in_ms == null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_247 $$ if (conf.encryption_options != null) [ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_40 $$ if (conf.role_manager != null)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_51 $$ authorizer.validateConfiguration()[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_216 $$ if (conf.memtable_cleanup_threshold > 0.99f)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_97 $$ applyAddressConfig(config)[ FD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_144 $$ if (conf.commitlog_directory == null) [ CD ]
Line_26 $$ if (conf.disk_access_mode == Config.DiskAccessMode.mmap_index_only) -->Line_27 $$ conf.disk_access_mode = Config.DiskAccessMode.standard[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_92 $$ logger.info("Global memtable on-heap threshold is enabled at [ CD ]
Line_114 $$ boolean local1 = localDC.equals(snitch.getDatacenter(endpoint1))-->Line_116 $$ if (local1 && !local2)[ FD ]
Line_36 $$ if (conf.authorizer != null)-->Line_37 $$ authorizer = FBUtilities.newAuthorizer(conf.authorizer)[ CD ]
Line_2 $$ public static void applyConfig(Config config) throws ConfigurationException -->Line_98 $$ if (conf.thrift_framed_transport_size_in_mb <= 0)[ CD ]
Line_172 $$ if (conf.saved_caches_directory == null) -->Line_174 $$ if (conf.saved_caches_directory == null)[ CD ]
