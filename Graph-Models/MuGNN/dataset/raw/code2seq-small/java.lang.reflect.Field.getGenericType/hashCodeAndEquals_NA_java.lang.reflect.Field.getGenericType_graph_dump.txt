Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_6 $$ ResolvableType forFieldWithImplementation = ResolvableType.forField(Fields.class.getDeclaredField("stringList"), TypedFields.class)[ CD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_8 $$ assertThat(forClass.hashCode(), equalTo(forClass.hashCode()))[ CD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_4 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))[ CD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_7 $$ assertThat(forClass, equalTo(forClass))[ CD ]
Line_4 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))-->Line_12 $$ assertThat(forFieldDirect, not(equalTo(forFieldViaType)))[ FD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_11 $$ assertThat(forFieldDirect, equalTo(forFieldDirect))[ CD ]
Line_4 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))-->Line_9 $$ assertThat(forClass, not(equalTo(forFieldDirect)))[ FD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_12 $$ assertThat(forFieldDirect, not(equalTo(forFieldViaType)))[ CD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_5 $$ ResolvableType forFieldViaType = ResolvableType.forType(Fields.class.getDeclaredField("stringList").getGenericType(), (VariableResolver) null)[ CD ]
Line_4 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))-->Line_13 $$ assertThat(forFieldDirect, not(equalTo(forFieldWithImplementation)))[ FD ]
Line_3 $$ ResolvableType forClass = ResolvableType.forClass(List.class)-->Line_8 $$ assertThat(forClass.hashCode(), equalTo(forClass.hashCode()))[ FD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_10 $$ assertThat(forClass, not(equalTo(forFieldWithImplementation)))[ CD ]
Line_3 $$ ResolvableType forClass = ResolvableType.forClass(List.class)-->Line_9 $$ assertThat(forClass, not(equalTo(forFieldDirect)))[ FD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_13 $$ assertThat(forFieldDirect, not(equalTo(forFieldWithImplementation)))[ CD ]
Line_5 $$ ResolvableType forFieldViaType = ResolvableType.forType(Fields.class.getDeclaredField("stringList").getGenericType(), (VariableResolver) null)-->Line_12 $$ assertThat(forFieldDirect, not(equalTo(forFieldViaType)))[ FD ]
Line_3 $$ ResolvableType forClass = ResolvableType.forClass(List.class)-->Line_10 $$ assertThat(forClass, not(equalTo(forFieldWithImplementation)))[ FD ]
Line_6 $$ ResolvableType forFieldWithImplementation = ResolvableType.forField(Fields.class.getDeclaredField("stringList"), TypedFields.class)-->Line_13 $$ assertThat(forFieldDirect, not(equalTo(forFieldWithImplementation)))[ FD ]
Line_4 $$ ResolvableType forFieldDirect = ResolvableType.forField(Fields.class.getDeclaredField("stringList"))-->Line_11 $$ assertThat(forFieldDirect, equalTo(forFieldDirect))[ FD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_9 $$ assertThat(forClass, not(equalTo(forFieldDirect)))[ CD ]
Line_6 $$ ResolvableType forFieldWithImplementation = ResolvableType.forField(Fields.class.getDeclaredField("stringList"), TypedFields.class)-->Line_10 $$ assertThat(forClass, not(equalTo(forFieldWithImplementation)))[ FD ]
Line_2 $$ public void hashCodeAndEquals() throws Exception -->Line_3 $$ ResolvableType forClass = ResolvableType.forClass(List.class)[ CD ]
Line_3 $$ ResolvableType forClass = ResolvableType.forClass(List.class)-->Line_7 $$ assertThat(forClass, equalTo(forClass))[ FD ]
