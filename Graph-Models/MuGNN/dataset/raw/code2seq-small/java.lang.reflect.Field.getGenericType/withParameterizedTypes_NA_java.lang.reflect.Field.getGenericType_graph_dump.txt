Line_4 $$ Type openObjectsType = getClass().getField("openObjects").getGenericType()-->Line_16 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, openObjectsType))[ FD ]
Line_4 $$ Type openObjectsType = getClass().getField("openObjects").getGenericType()-->Line_19 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, stringsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_16 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, openObjectsType))[ CD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_5 $$ Type stringsType = getClass().getField("strings").getGenericType()[ CD ]
Line_3 $$ Type objectsType = getClass().getField("objects").getGenericType()-->Line_12 $$ assertTrue(TypeUtils.isAssignable(objectsType, List.class))[ FD ]
Line_3 $$ Type objectsType = getClass().getField("objects").getGenericType()-->Line_18 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, objectsType))[ FD ]
Line_3 $$ Type objectsType = getClass().getField("objects").getGenericType()-->Line_21 $$ assertFalse(TypeUtils.isAssignable(objectsType, stringsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_11 $$ assertTrue(TypeUtils.isAssignable(List.class, stringsType))[ CD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_3 $$ Type objectsType = getClass().getField("objects").getGenericType()[ CD ]
Line_4 $$ Type openObjectsType = getClass().getField("openObjects").getGenericType()-->Line_18 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, objectsType))[ FD ]
Line_5 $$ Type stringsType = getClass().getField("strings").getGenericType()-->Line_20 $$ assertFalse(TypeUtils.isAssignable(stringsType, objectsType))[ FD ]
Line_5 $$ Type stringsType = getClass().getField("strings").getGenericType()-->Line_21 $$ assertFalse(TypeUtils.isAssignable(objectsType, stringsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_9 $$ assertTrue(TypeUtils.isAssignable(List.class, objectsType))[ CD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_6 $$ assertTrue(TypeUtils.isAssignable(Object.class, objectsType))[ CD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_14 $$ assertTrue(TypeUtils.isAssignable(stringsType, List.class))[ CD ]
Line_5 $$ Type stringsType = getClass().getField("strings").getGenericType()-->Line_17 $$ assertTrue(TypeUtils.isAssignable(stringsType, stringsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_20 $$ assertFalse(TypeUtils.isAssignable(stringsType, objectsType))[ CD ]
Line_5 $$ Type stringsType = getClass().getField("strings").getGenericType()-->Line_14 $$ assertTrue(TypeUtils.isAssignable(stringsType, List.class))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_4 $$ Type openObjectsType = getClass().getField("openObjects").getGenericType()[ CD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_12 $$ assertTrue(TypeUtils.isAssignable(objectsType, List.class))[ CD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_19 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, stringsType))[ CD ]
Line_4 $$ Type openObjectsType = getClass().getField("openObjects").getGenericType()-->Line_7 $$ assertTrue(TypeUtils.isAssignable(Object.class, openObjectsType))[ FD ]
Line_4 $$ Type openObjectsType = getClass().getField("openObjects").getGenericType()-->Line_13 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, List.class))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_15 $$ assertTrue(TypeUtils.isAssignable(objectsType, objectsType))[ CD ]
Line_5 $$ Type stringsType = getClass().getField("strings").getGenericType()-->Line_8 $$ assertTrue(TypeUtils.isAssignable(Object.class, stringsType))[ FD ]
Line_5 $$ Type stringsType = getClass().getField("strings").getGenericType()-->Line_19 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, stringsType))[ FD ]
Line_3 $$ Type objectsType = getClass().getField("objects").getGenericType()-->Line_15 $$ assertTrue(TypeUtils.isAssignable(objectsType, objectsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_8 $$ assertTrue(TypeUtils.isAssignable(Object.class, stringsType))[ CD ]
Line_5 $$ Type stringsType = getClass().getField("strings").getGenericType()-->Line_11 $$ assertTrue(TypeUtils.isAssignable(List.class, stringsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_10 $$ assertTrue(TypeUtils.isAssignable(List.class, openObjectsType))[ CD ]
Line_4 $$ Type openObjectsType = getClass().getField("openObjects").getGenericType()-->Line_10 $$ assertTrue(TypeUtils.isAssignable(List.class, openObjectsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_17 $$ assertTrue(TypeUtils.isAssignable(stringsType, stringsType))[ CD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_21 $$ assertFalse(TypeUtils.isAssignable(objectsType, stringsType))[ CD ]
Line_3 $$ Type objectsType = getClass().getField("objects").getGenericType()-->Line_20 $$ assertFalse(TypeUtils.isAssignable(stringsType, objectsType))[ FD ]
Line_3 $$ Type objectsType = getClass().getField("objects").getGenericType()-->Line_6 $$ assertTrue(TypeUtils.isAssignable(Object.class, objectsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_18 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, objectsType))[ CD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_13 $$ assertTrue(TypeUtils.isAssignable(openObjectsType, List.class))[ CD ]
Line_3 $$ Type objectsType = getClass().getField("objects").getGenericType()-->Line_9 $$ assertTrue(TypeUtils.isAssignable(List.class, objectsType))[ FD ]
Line_2 $$ public void withParameterizedTypes() throws Exception -->Line_7 $$ assertTrue(TypeUtils.isAssignable(Object.class, openObjectsType))[ CD ]
