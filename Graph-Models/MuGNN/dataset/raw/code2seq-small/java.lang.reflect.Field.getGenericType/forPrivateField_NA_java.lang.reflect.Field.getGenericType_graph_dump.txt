Line_3 $$ Field field = Fields.class.getDeclaredField("privateField")-->Line_5 $$ assertThat(type.getType(), equalTo(field.getGenericType()))[ FD ]
Line_2 $$ public void forPrivateField() throws Exception -->Line_6 $$ assertThat(type.resolve(), equalTo((Class) List.class))[ CD ]
Line_4 $$ ResolvableType type = ResolvableType.forField(field)-->Line_6 $$ assertThat(type.resolve(), equalTo((Class) List.class))[ FD ]
Line_2 $$ public void forPrivateField() throws Exception -->Line_3 $$ Field field = Fields.class.getDeclaredField("privateField")[ CD ]
Line_4 $$ ResolvableType type = ResolvableType.forField(field)-->Line_5 $$ assertThat(type.getType(), equalTo(field.getGenericType()))[ FD ]
Line_2 $$ public void forPrivateField() throws Exception -->Line_4 $$ ResolvableType type = ResolvableType.forField(field)[ CD ]
Line_3 $$ Field field = Fields.class.getDeclaredField("privateField")-->Line_4 $$ ResolvableType type = ResolvableType.forField(field)[ FD ]
Line_2 $$ public void forPrivateField() throws Exception -->Line_5 $$ assertThat(type.getType(), equalTo(field.getGenericType()))[ CD ]
