Line_34 $$ Package aPackage = aClass.getPackage()-->Line_36 $$ aPackage.getAnnotations()[ FD ]
Line_6 $$ for (Method method : aClass.getDeclaredMethods()) -->Line_7 $$ loadTypeDependencies(method.getGenericReturnType())[ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_34 $$ Package aPackage = aClass.getPackage()[ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_3 $$ String name = aClass.getName()[ CD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_4 $$ if (myVisited.add(aClass)) [ CD ]
Line_27 $$ if (superclass != null) -->Line_28 $$ loadClassDependencies(aClass)[ CD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_45 $$ myVisited.remove(aClass)[ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_39 $$ myVisited.remove(aClass)[ FD ]
Line_30 $$ for (Type intf : aClass.getGenericInterfaces()) -->Line_31 $$ loadTypeDependencies(intf)[ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_6 $$ for (Method method : aClass.getDeclaredMethods()) [ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_4 $$ if (myVisited.add(aClass)) [ FD ]
Line_34 $$ Package aPackage = aClass.getPackage()-->Line_35 $$ if (aPackage != null) [ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_33 $$ aClass.getAnnotations()[ FD ]
Line_6 $$ for (Method method : aClass.getDeclaredMethods()) -->Line_16 $$ for (Type type : method.getGenericExceptionTypes()) [ FD ]
Line_6 $$ for (Method method : aClass.getDeclaredMethods()) -->Line_19 $$ for (Type type : method.getGenericParameterTypes()) [ FD ]
Line_23 $$ for (Field field : aClass.getDeclaredFields()) -->Line_24 $$ loadTypeDependencies(field.getGenericType())[ FD ]
Line_8 $$ for (Type type : method.getGenericExceptionTypes()) -->Line_17 $$ loadTypeDependencies(type)[ FD ]
Line_6 $$ for (Method method : aClass.getDeclaredMethods()) -->Line_8 $$ for (Type type : method.getGenericExceptionTypes()) [ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_23 $$ for (Field field : aClass.getDeclaredFields()) [ FD ]
Line_26 $$ Type superclass = aClass.getGenericSuperclass()-->Line_27 $$ if (superclass != null) [ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_30 $$ for (Type intf : aClass.getGenericInterfaces()) [ FD ]
Line_6 $$ for (Method method : aClass.getDeclaredMethods()) -->Line_11 $$ for (Type type : method.getGenericParameterTypes()) [ FD ]
Line_8 $$ for (Type type : method.getGenericExceptionTypes()) -->Line_9 $$ loadTypeDependencies(type)[ FD ]
Line_8 $$ for (Type type : method.getGenericExceptionTypes()) -->Line_20 $$ loadTypeDependencies(type)[ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_26 $$ Type superclass = aClass.getGenericSuperclass()[ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_3 $$ String name = aClass.getName()[ FD ]
Line_8 $$ for (Type type : method.getGenericExceptionTypes()) -->Line_12 $$ loadTypeDependencies(type)[ FD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_28 $$ loadClassDependencies(aClass)[ FD ]
Line_35 $$ if (aPackage != null) -->Line_36 $$ aPackage.getAnnotations()[ CD ]
Line_2 $$ protected void loadClassDependencies(Class aClass) throws ClassNotFoundException -->Line_15 $$ for (Constructor method : aClass.getDeclaredConstructors()) [ FD ]
