Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_9 $$ assertThat(variable.resolve(), equalTo((Class) Long.class))[ CD ]
Line_3 $$ VariableResolver variableResolver = mock(VariableResolver.class)-->Line_6 $$ given(variableResolver.resolveVariable((TypeVariable<?>) anyObject())).willReturn(longType)[ FD ]
Line_3 $$ VariableResolver variableResolver = mock(VariableResolver.class)-->Line_8 $$ ResolvableType parameterized = ResolvableType.forType(Fields.class.getField("parameterizedType").getGenericType(), variableResolver)[ FD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_11 $$ assertThat(parameterized.resolveGeneric(), equalTo((Class) Long.class))[ CD ]
Line_8 $$ ResolvableType parameterized = ResolvableType.forType(Fields.class.getField("parameterizedType").getGenericType(), variableResolver)-->Line_11 $$ assertThat(parameterized.resolveGeneric(), equalTo((Class) Long.class))[ FD ]
Line_3 $$ VariableResolver variableResolver = mock(VariableResolver.class)-->Line_7 $$ ResolvableType variable = ResolvableType.forType(Fields.class.getField("typeVariableType").getGenericType(), variableResolver)[ FD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_7 $$ ResolvableType variable = ResolvableType.forType(Fields.class.getField("typeVariableType").getGenericType(), variableResolver)[ CD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_3 $$ VariableResolver variableResolver = mock(VariableResolver.class)[ CD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_4 $$ given(variableResolver.getSource()).willReturn(this)[ CD ]
Line_5 $$ ResolvableType longType = ResolvableType.forClass(Long.class)-->Line_6 $$ given(variableResolver.resolveVariable((TypeVariable<?>) anyObject())).willReturn(longType)[ FD ]
Line_3 $$ VariableResolver variableResolver = mock(VariableResolver.class)-->Line_4 $$ given(variableResolver.getSource()).willReturn(this)[ FD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_5 $$ ResolvableType longType = ResolvableType.forClass(Long.class)[ CD ]
Line_3 $$ VariableResolver variableResolver = mock(VariableResolver.class)-->Line_12 $$ verify(variableResolver, atLeastOnce()).resolveVariable(this.typeVariableCaptor.capture())[ FD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_10 $$ assertThat(parameterized.resolve(), equalTo((Class) List.class))[ CD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_8 $$ ResolvableType parameterized = ResolvableType.forType(Fields.class.getField("parameterizedType").getGenericType(), variableResolver)[ CD ]
Line_7 $$ ResolvableType variable = ResolvableType.forType(Fields.class.getField("typeVariableType").getGenericType(), variableResolver)-->Line_9 $$ assertThat(variable.resolve(), equalTo((Class) Long.class))[ FD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_12 $$ verify(variableResolver, atLeastOnce()).resolveVariable(this.typeVariableCaptor.capture())[ CD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_6 $$ given(variableResolver.resolveVariable((TypeVariable<?>) anyObject())).willReturn(longType)[ CD ]
Line_2 $$ public void resolveTypeWithCustomVariableResolver() throws Exception -->Line_13 $$ assertThat(this.typeVariableCaptor.getValue().getName(), equalTo("T"))[ CD ]
Line_8 $$ ResolvableType parameterized = ResolvableType.forType(Fields.class.getField("parameterizedType").getGenericType(), variableResolver)-->Line_10 $$ assertThat(parameterized.resolve(), equalTo((Class) List.class))[ FD ]
