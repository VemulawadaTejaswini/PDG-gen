Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_3 $$ final SinkQueue<Integer> q = new SinkQueue<Integer>(capacity)[ CD ]
Line_3 $$ final SinkQueue<Integer> q = new SinkQueue<Integer>(capacity)-->Line_12 $$ q.consume(new Consumer<Integer>() [ FD ]
Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_28 $$ LOG.debug("Returning new sleeping consumer queue")[ CD ]
Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_7 $$ final CountDownLatch barrier = new CountDownLatch(1)[ CD ]
Line_7 $$ final CountDownLatch barrier = new CountDownLatch(1)-->Line_15 $$ barrier.countDown()[ FD ]
Line_12 $$ q.consume(new Consumer<Integer>() -->Line_14 $$ LOG.info("sleeping")[ CD ]
Line_3 $$ final SinkQueue<Integer> q = new SinkQueue<Integer>(capacity)-->Line_5 $$ q.enqueue(i)[ FD ]
Line_7 $$ final CountDownLatch barrier = new CountDownLatch(1)-->Line_27 $$ barrier.await()[ FD ]
Line_12 $$ q.consume(new Consumer<Integer>() -->Line_15 $$ barrier.countDown()[ CD ]
Line_8 $$ Thread t = new Thread() -->Line_25 $$ t.setDaemon(true)[ FD ]
Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_27 $$ barrier.await()[ CD ]
Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_25 $$ t.setDaemon(true)[ CD ]
Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_29 $$ return q[ CD ]
Line_4 $$ for (int i : values) -->Line_5 $$ q.enqueue(i)[ FD ]
Line_8 $$ Thread t = new Thread() -->Line_26 $$ t.start()[ FD ]
Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_24 $$ t.setName("Sleeping consumer")[ CD ]
Line_8 $$ Thread t = new Thread() -->Line_24 $$ t.setName("Sleeping consumer")[ FD ]
Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_8 $$ Thread t = new Thread() [ CD ]
Line_12 $$ q.consume(new Consumer<Integer>() -->Line_16 $$ Thread.sleep(1000 * 86400)[ CD ]
Line_2 $$ private SinkQueue<Integer> newSleepingConsumerQueue(int capacity, int... values) throws Exception -->Line_26 $$ t.start()[ CD ]
