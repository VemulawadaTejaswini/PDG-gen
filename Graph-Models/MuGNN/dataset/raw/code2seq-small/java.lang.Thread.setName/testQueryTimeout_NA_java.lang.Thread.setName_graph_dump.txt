Line_2 $$ public void testQueryTimeout() throws Exception -->Line_3 $$ EntityManager em = getOrCreateEntityManager()[ CD ]
Line_2 $$ public void testQueryTimeout() throws Exception -->Line_6 $$ Thread t = null[ CD ]
Line_2 $$ public void testQueryTimeout() throws Exception -->Line_4 $$ final EntityManager em2 = createIsolatedEntityManager()[ CD ]
Line_31 $$ Query query = em2.createQuery("select L from Lock_ L where L.id < 10000 ")-->Line_34 $$ List<Lock> resultList = query.getResultList()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_11 $$ em.getTransaction().begin()[ FD ]
Line_4 $$ final EntityManager em2 = createIsolatedEntityManager()-->Line_31 $$ Query query = em2.createQuery("select L from Lock_ L where L.id < 10000 ")[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_57 $$ em.getTransaction().commit()[ FD ]
Line_5 $$ Lock lock = new Lock()-->Line_66 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_4 $$ final EntityManager em2 = createIsolatedEntityManager()-->Line_70 $$ em2.close()[ FD ]
Line_31 $$ Query query = em2.createQuery("select L from Lock_ L where L.id < 10000 ")-->Line_33 $$ query.setHint(QueryHints.SPEC_HINT_TIMEOUT, 500)[ FD ]
Line_4 $$ final EntityManager em2 = createIsolatedEntityManager()-->Line_25 $$ em2.getTransaction().begin()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_59 $$ if (em.getTransaction().isActive()) [ FD ]
Line_5 $$ Lock lock = new Lock()-->Line_19 $$ lock.getName()[ FD ]
Line_2 $$ public void testQueryTimeout() throws Exception -->Line_8 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_4 $$ final EntityManager em2 = createIsolatedEntityManager()-->Line_27 $$ Lock lock2 = em2.getReference(Lock.class, id)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_69 $$ em.close()[ FD ]
Line_6 $$ Thread t = null-->Line_52 $$ t.setName("testQueryTimeout (bg)")[ FD ]
Line_6 $$ Thread t = null-->Line_53 $$ t.start()[ FD ]
Line_5 $$ Lock lock = new Lock()-->Line_17 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_8 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_54 $$ boolean latchSet = latch.await(10, TimeUnit.SECONDS)[ FD ]
Line_16 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_17 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_2 $$ public void testQueryTimeout() throws Exception -->Line_5 $$ Lock lock = new Lock()[ CD ]
Line_6 $$ Thread t = null-->Line_51 $$ t.setDaemon(true)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_68 $$ em.getTransaction().commit()[ FD ]
Line_5 $$ Lock lock = new Lock()-->Line_12 $$ em.persist(lock)[ FD ]
Line_7 $$ FutureTask<Boolean> bgTask-->Line_21 $$ bgTask = new FutureTask<Boolean>(new Callable<Boolean>() [ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_17 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_6 $$ Thread t = null-->Line_62 $$ if (t != null) [ FD ]
Line_31 $$ Query query = em2.createQuery("select L from Lock_ L where L.id < 10000 ")-->Line_32 $$ query.setLockMode(LockModeType.PESSIMISTIC_READ)[ FD ]
Line_7 $$ FutureTask<Boolean> bgTask-->Line_56 $$ assertTrue("background test thread timed out on lock attempt", bgTask.get())[ FD ]
Line_6 $$ Thread t = null-->Line_63 $$ t.join()[ FD ]
Line_21 $$ bgTask = new FutureTask<Boolean>(new Callable<Boolean>() -->Line_56 $$ assertTrue("background test thread timed out on lock attempt", bgTask.get())[ FD ]
Line_5 $$ Lock lock = new Lock()-->Line_10 $$ lock.setName("testQueryTimeout")[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_12 $$ em.persist(lock)[ FD ]
Line_5 $$ Lock lock = new Lock()-->Line_18 $$ final Integer id = lock.getId()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_65 $$ em.getTransaction().begin()[ FD ]
Line_16 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_66 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_5 $$ Lock lock = new Lock()-->Line_16 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_16 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_19 $$ lock.getName()[ FD ]
Line_27 $$ Lock lock2 = em2.getReference(Lock.class, id)-->Line_28 $$ lock2.getName()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_67 $$ em.remove(lock)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_16 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_60 $$ em.getTransaction().rollback()[ FD ]
Line_4 $$ final EntityManager em2 = createIsolatedEntityManager()-->Line_43 $$ em2.getTransaction().commit()[ FD ]
Line_62 $$ if (t != null) -->Line_63 $$ t.join()[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_66 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_34 $$ List<Lock> resultList = query.getResultList()-->Line_35 $$ String name = resultList.get(0).getName()[ FD ]
Line_16 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_67 $$ em.remove(lock)[ FD ]
Line_24 $$ boolean timedOut = false-->Line_39 $$ timedOut = true[ FD ]
Line_18 $$ final Integer id = lock.getId()-->Line_27 $$ Lock lock2 = em2.getReference(Lock.class, id)[ FD ]
Line_59 $$ if (em.getTransaction().isActive()) -->Line_60 $$ em.getTransaction().rollback()[ CD ]
Line_8 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_46 $$ latch.countDown()[ FD ]
Line_5 $$ Lock lock = new Lock()-->Line_67 $$ em.remove(lock)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_14 $$ em.clear()[ FD ]
Line_16 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_18 $$ final Integer id = lock.getId()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_15 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testQueryTimeout() throws Exception -->Line_7 $$ FutureTask<Boolean> bgTask[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_13 $$ em.getTransaction().commit()[ FD ]
