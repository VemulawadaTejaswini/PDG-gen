Line_22 $$ if (threadPoolSize != maxThreadPoolSize) -->Line_25 $$ if (threadPoolSize < idealThreadPoolSize) [ CD ]
Line_26 $$ int newThreadPoolSize = Math.min(maxThreadPoolSize, idealThreadPoolSize + INITIAL_THREAD_POOL_SIZE)-->Line_28 $$ threadPool.setCorePoolSize(newThreadPoolSize)[ FD ]
Line_2 $$ protected void serviceStart() throws Exception -->Line_3 $$ client.start()[ CD ]
Line_11 $$ while (!stopped.get() && !Thread.currentThread().isInterrupted()) -->Line_31 $$ threadPool.execute(getContainerEventProcessor(event))[ CD ]
Line_2 $$ protected void serviceStart() throws Exception -->Line_35 $$ eventDispatcherThread.setName("Container  Event Dispatcher")[ CD ]
Line_11 $$ while (!stopped.get() && !Thread.currentThread().isInterrupted()) -->Line_20 $$ allNodes.add(event.getNodeId().toString())[ CD ]
Line_2 $$ protected void serviceStart() throws Exception -->Line_4 $$ ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(this.getClass().getName() + " #%d").setDaemon(true).build()[ CD ]
Line_7 $$ eventDispatcherThread = new Thread() -->Line_11 $$ while (!stopped.get() && !Thread.currentThread().isInterrupted()) [ CD ]
Line_21 $$ int threadPoolSize = threadPool.getCorePoolSize()-->Line_22 $$ if (threadPoolSize != maxThreadPoolSize) [ FD ]
Line_11 $$ while (!stopped.get() && !Thread.currentThread().isInterrupted()) -->Line_22 $$ if (threadPoolSize != maxThreadPoolSize) [ CD ]
Line_15 $$ if (!stopped.get()) -->Line_16 $$ LOG.error("Returning, thread interrupted", e)[ CD ]
Line_24 $$ int idealThreadPoolSize = Math.min(maxThreadPoolSize, nodeNum)-->Line_25 $$ if (threadPoolSize < idealThreadPoolSize) [ FD ]
Line_25 $$ if (threadPoolSize < idealThreadPoolSize) -->Line_27 $$ LOG.info("Set NMClientAsync thread pool size to " + newThreadPoolSize + " as the number of nodes to talk to is " + nodeNum)[ CD ]
Line_2 $$ protected void serviceStart() throws Exception -->Line_37 $$ eventDispatcherThread.start()[ CD ]
Line_22 $$ if (threadPoolSize != maxThreadPoolSize) -->Line_23 $$ int nodeNum = allNodes.size()[ CD ]
Line_13 $$ event = events.take()-->Line_31 $$ threadPool.execute(getContainerEventProcessor(event))[ FD ]
Line_9 $$ ContainerEvent event = null-->Line_13 $$ event = events.take()[ FD ]
Line_2 $$ protected void serviceStart() throws Exception -->Line_38 $$ super.serviceStart()[ CD ]
Line_11 $$ while (!stopped.get() && !Thread.currentThread().isInterrupted()) -->Line_21 $$ int threadPoolSize = threadPool.getCorePoolSize()[ CD ]
Line_2 $$ protected void serviceStart() throws Exception -->Line_5 $$ int initSize = Math.min(INITIAL_THREAD_POOL_SIZE, maxThreadPoolSize)[ CD ]
Line_25 $$ if (threadPoolSize < idealThreadPoolSize) -->Line_26 $$ int newThreadPoolSize = Math.min(maxThreadPoolSize, idealThreadPoolSize + INITIAL_THREAD_POOL_SIZE)[ CD ]
Line_2 $$ protected void serviceStart() throws Exception -->Line_36 $$ eventDispatcherThread.setDaemon(false)[ CD ]
Line_9 $$ ContainerEvent event = null-->Line_20 $$ allNodes.add(event.getNodeId().toString())[ FD ]
Line_7 $$ eventDispatcherThread = new Thread() -->Line_10 $$ Set<String> allNodes = new HashSet<String>()[ CD ]
Line_22 $$ if (threadPoolSize != maxThreadPoolSize) -->Line_24 $$ int idealThreadPoolSize = Math.min(maxThreadPoolSize, nodeNum)[ CD ]
Line_25 $$ if (threadPoolSize < idealThreadPoolSize) -->Line_28 $$ threadPool.setCorePoolSize(newThreadPoolSize)[ CD ]
Line_10 $$ Set<String> allNodes = new HashSet<String>()-->Line_20 $$ allNodes.add(event.getNodeId().toString())[ FD ]
Line_7 $$ eventDispatcherThread = new Thread() -->Line_9 $$ ContainerEvent event = null[ CD ]
Line_21 $$ int threadPoolSize = threadPool.getCorePoolSize()-->Line_25 $$ if (threadPoolSize < idealThreadPoolSize) [ FD ]
Line_9 $$ ContainerEvent event = null-->Line_31 $$ threadPool.execute(getContainerEventProcessor(event))[ FD ]
Line_13 $$ event = events.take()-->Line_20 $$ allNodes.add(event.getNodeId().toString())[ FD ]
Line_10 $$ Set<String> allNodes = new HashSet<String>()-->Line_23 $$ int nodeNum = allNodes.size()[ FD ]
Line_23 $$ int nodeNum = allNodes.size()-->Line_24 $$ int idealThreadPoolSize = Math.min(maxThreadPoolSize, nodeNum)[ FD ]
