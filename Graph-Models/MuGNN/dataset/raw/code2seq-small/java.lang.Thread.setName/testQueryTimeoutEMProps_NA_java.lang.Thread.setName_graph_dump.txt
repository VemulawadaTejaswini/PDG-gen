Line_9 $$ FutureTask<Boolean> bgTask-->Line_23 $$ bgTask = new FutureTask<Boolean>(new Callable<Boolean>() [ FD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_67 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_60 $$ if (em.getTransaction().isActive()) -->Line_61 $$ em.getTransaction().rollback()[ CD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_58 $$ em.getTransaction().commit()[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_21 $$ lock.getName()[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_67 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_15 $$ em.getTransaction().commit()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_19 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_8 $$ Thread t = null-->Line_53 $$ t.setName("testQueryTimeout (bg)")[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_70 $$ em.close()[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(queryTimeoutProps)-->Line_44 $$ em2.getTransaction().commit()[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_18 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(queryTimeoutProps)-->Line_27 $$ em2.getTransaction().begin()[ FD ]
Line_29 $$ Lock lock2 = em2.getReference(Lock.class, id)-->Line_30 $$ lock2.getName()[ FD ]
Line_8 $$ Thread t = null-->Line_52 $$ t.setDaemon(true)[ FD ]
Line_9 $$ FutureTask<Boolean> bgTask-->Line_57 $$ assertTrue("background test thread timed out on lock attempt", bgTask.get())[ FD ]
Line_4 $$ Map<String, Object> queryTimeoutProps = new HashMap<String, Object>()-->Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(queryTimeoutProps)[ FD ]
Line_35 $$ List<Lock> resultList = query.getResultList()-->Line_36 $$ String name = resultList.get(0).getName()[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_19 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_8 $$ Thread t = null-->Line_63 $$ if (t != null) [ FD ]
Line_33 $$ Query query = em2.createQuery("select L from Lock_ L where L.id < 10000 ")-->Line_34 $$ query.setLockMode(LockModeType.PESSIMISTIC_READ)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_60 $$ if (em.getTransaction().isActive()) [ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_18 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_14 $$ em.persist(lock)[ FD ]
Line_2 $$ public void testQueryTimeoutEMProps() throws Exception -->Line_8 $$ Thread t = null[ CD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_20 $$ final Integer id = lock.getId()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_17 $$ em.getTransaction().begin()[ FD ]
Line_20 $$ final Integer id = lock.getId()-->Line_29 $$ Lock lock2 = em2.getReference(Lock.class, id)[ FD ]
Line_8 $$ Thread t = null-->Line_64 $$ t.join()[ FD ]
Line_2 $$ public void testQueryTimeoutEMProps() throws Exception -->Line_9 $$ FutureTask<Boolean> bgTask[ CD ]
Line_2 $$ public void testQueryTimeoutEMProps() throws Exception -->Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(queryTimeoutProps)[ CD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_68 $$ em.remove(lock)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_69 $$ em.getTransaction().commit()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_66 $$ em.getTransaction().begin()[ FD ]
Line_2 $$ public void testQueryTimeoutEMProps() throws Exception -->Line_3 $$ EntityManager em = getOrCreateEntityManager()[ CD ]
Line_33 $$ Query query = em2.createQuery("select L from Lock_ L where L.id < 10000 ")-->Line_35 $$ List<Lock> resultList = query.getResultList()[ FD ]
Line_26 $$ boolean timedOut = false-->Line_40 $$ timedOut = true[ FD ]
Line_63 $$ if (t != null) -->Line_64 $$ t.join()[ CD ]
Line_7 $$ Lock lock = new Lock()-->Line_12 $$ lock.setName("testQueryTimeout")[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(queryTimeoutProps)-->Line_33 $$ Query query = em2.createQuery("select L from Lock_ L where L.id < 10000 ")[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_68 $$ em.remove(lock)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_13 $$ em.getTransaction().begin()[ FD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_19 $$ em.lock(lock, LockModeType.PESSIMISTIC_WRITE)[ FD ]
Line_2 $$ public void testQueryTimeoutEMProps() throws Exception -->Line_7 $$ Lock lock = new Lock()[ CD ]
Line_2 $$ public void testQueryTimeoutEMProps() throws Exception -->Line_4 $$ Map<String, Object> queryTimeoutProps = new HashMap<String, Object>()[ CD ]
Line_2 $$ public void testQueryTimeoutEMProps() throws Exception -->Line_5 $$ queryTimeoutProps.put(QueryHints.SPEC_HINT_TIMEOUT, 500)[ CD ]
Line_2 $$ public void testQueryTimeoutEMProps() throws Exception -->Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_18 $$ lock = em.getReference(Lock.class, lock.getId())-->Line_21 $$ lock.getName()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_67 $$ lock = em.getReference(Lock.class, lock.getId())[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_68 $$ em.remove(lock)[ FD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_55 $$ boolean latchSet = latch.await(10, TimeUnit.SECONDS)[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_16 $$ em.clear()[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_14 $$ em.persist(lock)[ FD ]
Line_4 $$ Map<String, Object> queryTimeoutProps = new HashMap<String, Object>()-->Line_5 $$ queryTimeoutProps.put(QueryHints.SPEC_HINT_TIMEOUT, 500)[ FD ]
Line_8 $$ Thread t = null-->Line_54 $$ t.start()[ FD ]
Line_23 $$ bgTask = new FutureTask<Boolean>(new Callable<Boolean>() -->Line_57 $$ assertTrue("background test thread timed out on lock attempt", bgTask.get())[ FD ]
Line_7 $$ Lock lock = new Lock()-->Line_20 $$ final Integer id = lock.getId()[ FD ]
Line_3 $$ EntityManager em = getOrCreateEntityManager()-->Line_61 $$ em.getTransaction().rollback()[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(queryTimeoutProps)-->Line_71 $$ em2.close()[ FD ]
Line_10 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_47 $$ latch.countDown()[ FD ]
Line_6 $$ final EntityManager em2 = createIsolatedEntityManager(queryTimeoutProps)-->Line_29 $$ Lock lock2 = em2.getReference(Lock.class, id)[ FD ]
