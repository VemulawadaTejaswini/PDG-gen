Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_4 $$ reporter = context.getReporter()[ FD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_12 $$ final int sortmb = job.getInt(JobContext.IO_SORT_MB, 100)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_44 $$ mapOutputByteCounter = reporter.getCounter(TaskCounter.MAP_OUTPUT_BYTES)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_62 $$ minSpillsForCombine = job.getInt(JobContext.MAP_COMBINE_MIN_SPILLS, 3)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_22 $$ maxMemUsage -= maxMemUsage % METASIZE[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_14 $$ if (spillper > (float) 1.0 || spillper <= (float) 0.0) [ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_33 $$ LOG.info("soft limit at " + softLimit)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_45 $$ mapOutputRecordCounter = reporter.getCounter(TaskCounter.MAP_OUTPUT_RECORDS)[ CD ]
Line_68 $$ while (!spillThreadRunning) -->Line_69 $$ spillDone.await()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_11 $$ final float spillper = job.getFloat(JobContext.MAP_SORT_SPILL_PERCENT, (float) 0.8)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_10 $$ rfs = ((LocalFileSystem) FileSystem.getLocal(job)).getRaw()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_26 $$ setEquator(0)[ CD ]
Line_21 $$ int maxMemUsage = sortmb << 20-->Line_22 $$ maxMemUsage -= maxMemUsage % METASIZE[ FD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_6 $$ mapOutputFile = mapTask.getMapOutputFile()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_8 $$ spilledRecordsCounter = reporter.getCounter(TaskCounter.SPILLED_RECORDS)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_42 $$ valSerializer = serializationFactory.getSerializer(valClass)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_53 $$ final Counters.Counter combineInputCounter = reporter.getCounter(TaskCounter.COMBINE_INPUT_RECORDS)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_41 $$ keySerializer.open(bb)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_46 $$ fileOutputByteCounter = reporter.getCounter(TaskCounter.MAP_OUTPUT_MATERIALIZED_BYTES)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_40 $$ keySerializer = serializationFactory.getSerializer(keyClass)[ CD ]
Line_48 $$ Class<? extends CompressionCodec> codecClass = job.getMapOutputCompressorClass(DefaultCodec.class)-->Line_49 $$ codec = ReflectionUtils.newInstance(codecClass, job)[ FD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_64 $$ spillThread.setName("SpillThread")[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_76 $$ if (sortSpillException != null) [ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_32 $$ LOG.info(JobContext.IO_SORT_MB + ": " + sortmb)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_34 $$ LOG.info("bufstart = " + bufstart + "; bufvoid = " + bufvoid)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_3 $$ job = context.getJobConf()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_17 $$ if ((sortmb & 0x7FF) != sortmb) [ CD ]
Line_47 $$ if (job.getCompressMapOutput()) -->Line_48 $$ Class<? extends CompressionCodec> codecClass = job.getMapOutputCompressorClass(DefaultCodec.class)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_4 $$ reporter = context.getReporter()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_63 $$ spillThread.setDaemon(true)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_35 $$ LOG.info("kvstart = " + kvstart + "; length = " + maxRec)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_43 $$ valSerializer.open(bb)[ CD ]
Line_55 $$ if (combinerRunner != null) -->Line_56 $$ final Counters.Counter combineOutputCounter = reporter.getCounter(TaskCounter.COMBINE_OUTPUT_RECORDS)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_3 $$ job = context.getJobConf()[ FD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_7 $$ sortPhase = mapTask.getSortPhase()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_29 $$ maxRec = kvmeta.capacity() / NMETA[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_5 $$ mapTask = context.getMapTask()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_36 $$ comparator = job.getOutputKeyComparator()[ CD ]
Line_47 $$ if (job.getCompressMapOutput()) -->Line_49 $$ codec = ReflectionUtils.newInstance(codecClass, job)[ CD ]
Line_53 $$ final Counters.Counter combineInputCounter = reporter.getCounter(TaskCounter.COMBINE_INPUT_RECORDS)-->Line_54 $$ combinerRunner = CombinerRunner.create(job, getTaskID(), combineInputCounter, reporter, null)[ FD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_65 $$ spillLock.lock()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_25 $$ kvmeta = ByteBuffer.wrap(kvbuffer).order(ByteOrder.nativeOrder()).asIntBuffer()[ CD ]
Line_12 $$ final int sortmb = job.getInt(JobContext.IO_SORT_MB, 100)-->Line_17 $$ if ((sortmb & 0x7FF) != sortmb) [ FD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_20 $$ sorter = ReflectionUtils.newInstance(job.getClass("map.sort.class", QuickSort.class, IndexedSorter.class), job)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_54 $$ combinerRunner = CombinerRunner.create(job, getTaskID(), combineInputCounter, reporter, null)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_5 $$ mapTask = context.getMapTask()[ FD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_47 $$ if (job.getCompressMapOutput()) [ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_9 $$ partitions = job.getNumReduceTasks()[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_13 $$ indexCacheMemoryLimit = job.getInt(JobContext.INDEX_CACHE_MEMORY_LIMIT, INDEX_CACHE_MEMORY_LIMIT_DEFAULT)[ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_55 $$ if (combinerRunner != null) [ CD ]
Line_2 $$ public void init(MapOutputCollector.Context context) throws IOException, ClassNotFoundException -->Line_21 $$ int maxMemUsage = sortmb << 20[ CD ]
