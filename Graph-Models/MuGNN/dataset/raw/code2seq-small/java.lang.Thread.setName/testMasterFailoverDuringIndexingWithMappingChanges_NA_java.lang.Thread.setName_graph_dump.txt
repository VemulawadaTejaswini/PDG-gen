Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_34 $$ indexingThread.start()[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_35 $$ barrier.await()[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_50 $$ refresh()[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_16 $$ Thread indexingThread = new Thread(new Runnable() [ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_14 $$ ensureGreen("myindex")[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_49 $$ ensureGreen("myindex")[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_42 $$ partition.startDisrupting()[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_12 $$ ensureStableCluster(4)[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_38 $$ otherNodes.remove(master)[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_40 $$ internalCluster().setDisruptionScheme(partition)[ CD ]
Line_10 $$ String dataNode = internalCluster().startDataOnlyNode(sharedSettings)-->Line_44 $$ ensureStableCluster(3, dataNode)[ FD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_15 $$ final CyclicBarrier barrier = new CyclicBarrier(2)[ CD ]
Line_15 $$ final CyclicBarrier barrier = new CyclicBarrier(2)-->Line_35 $$ barrier.await()[ FD ]
Line_4 $$ final Settings sharedSettings = Settings.builder().put(FaultDetection.SETTING_PING_TIMEOUT, "1s").put(FaultDetection.SETTING_PING_RETRIES, "1").put("discovery.zen.join_timeout", "10s").put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "1s").put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2).build()-->Line_9 $$ internalCluster().startMasterOnlyNodesAsync(3, sharedSettings).get()[ FD ]
Line_27 $$ for (int i = 0; i < 10; i++) -->Line_29 $$ assertThat(response.isCreated(), equalTo(true))[ CD ]
Line_16 $$ Thread indexingThread = new Thread(new Runnable() -->Line_48 $$ indexingThread.join()[ FD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_45 $$ partition.stopDisrupting()[ CD ]
Line_16 $$ Thread indexingThread = new Thread(new Runnable() -->Line_33 $$ indexingThread.setName("indexingThread")[ FD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_33 $$ indexingThread.setName("indexingThread")[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_51 $$ assertThat(client().prepareSearch("myindex").get().getHits().getTotalHits(), equalTo(10L))[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_44 $$ ensureStableCluster(3, dataNode)[ CD ]
Line_15 $$ final CyclicBarrier barrier = new CyclicBarrier(2)-->Line_19 $$ barrier.await()[ FD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_48 $$ indexingThread.join()[ CD ]
Line_28 $$ IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()-->Line_29 $$ assertThat(response.isCreated(), equalTo(true))[ FD ]
Line_4 $$ final Settings sharedSettings = Settings.builder().put(FaultDetection.SETTING_PING_TIMEOUT, "1s").put(FaultDetection.SETTING_PING_RETRIES, "1").put("discovery.zen.join_timeout", "10s").put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "1s").put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2).build()-->Line_10 $$ String dataNode = internalCluster().startDataOnlyNode(sharedSettings)[ FD ]
Line_16 $$ Thread indexingThread = new Thread(new Runnable() -->Line_27 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_4 $$ final Settings sharedSettings = Settings.builder().put(FaultDetection.SETTING_PING_TIMEOUT, "1s").put(FaultDetection.SETTING_PING_RETRIES, "1").put("discovery.zen.join_timeout", "10s").put(DiscoverySettings.PUBLISH_TIMEOUT_SETTING.getKey(), "1s").put(ElectMasterService.DISCOVERY_ZEN_MINIMUM_MASTER_NODES_SETTING.getKey(), 2).build()[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_47 $$ ensureStableCluster(4)[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_36 $$ String master = internalCluster().getMasterName()[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_9 $$ internalCluster().startMasterOnlyNodesAsync(3, sharedSettings).get()[ CD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_13 $$ client().admin().indices().prepareCreate("myindex").setSettings(Settings.builder().put("index.number_of_shards", 1).put("index.number_of_replicas", 0)).get()[ CD ]
Line_10 $$ String dataNode = internalCluster().startDataOnlyNode(sharedSettings)-->Line_28 $$ IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()[ FD ]
Line_2 $$ public void testMasterFailoverDuringIndexingWithMappingChanges() throws Throwable -->Line_10 $$ String dataNode = internalCluster().startDataOnlyNode(sharedSettings)[ CD ]
Line_16 $$ Thread indexingThread = new Thread(new Runnable() -->Line_34 $$ indexingThread.start()[ FD ]
Line_27 $$ for (int i = 0; i < 10; i++) -->Line_28 $$ IndexResponse response = client(dataNode).prepareIndex("myindex", "mytype").setSource("field_" + i, "val").get()[ CD ]
