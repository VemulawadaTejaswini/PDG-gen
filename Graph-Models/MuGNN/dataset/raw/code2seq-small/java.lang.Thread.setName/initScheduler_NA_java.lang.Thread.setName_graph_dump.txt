Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_29 $$ this.applications = new ConcurrentHashMap<ApplicationId, SchedulerApplication<FSAppAttempt>>()[ CD ]
Line_41 $$ if (continuousSchedulingEnabled) -->Line_44 $$ schedulingThread.setDaemon(true)[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_17 $$ maxAssign = this.conf.getMaxAssign()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_3 $$ this.conf = new FairSchedulerConfiguration(conf)[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_11 $$ rackLocalityThreshold = this.conf.getLocalityThresholdRack()[ CD ]
Line_41 $$ if (continuousSchedulingEnabled) -->Line_43 $$ schedulingThread.setName("FairSchedulerContinuousScheduling")[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_18 $$ sizeBasedWeight = this.conf.getSizeBasedWeight()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_46 $$ allocsLoader.init(conf)[ FD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_28 $$ fsOpDurations = FSOpDurations.getInstance(true)[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_27 $$ rootMetrics = FSQueueMetrics.forQueue("root", null, true, conf)[ CD ]
Line_23 $$ if (updateInterval < 0) -->Line_25 $$ LOG.warn(FairSchedulerConfiguration.UPDATE_INTERVAL_MS + " is invalid, so using default value " + +FairSchedulerConfiguration.DEFAULT_UPDATE_INTERVAL_MS + " ms instead")[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_46 $$ allocsLoader.init(conf)[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_19 $$ preemptionInterval = this.conf.getPreemptionInterval()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_6 $$ maximumAllocation = this.conf.getMaximumAllocation()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_4 $$ validateConf(this.conf)[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_47 $$ allocsLoader.setReloadListener(new AllocationReloadListener())[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_39 $$ updateThread.setName("FairSchedulerUpdateThread")[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_16 $$ assignMultiple = this.conf.getAssignMultiple()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_14 $$ preemptionEnabled = this.conf.getPreemptionEnabled()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_7 $$ incrAllocation = this.conf.getIncrementAllocation()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_12 $$ nodeLocalityDelayMs = this.conf.getLocalityDelayNodeMs()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_41 $$ if (continuousSchedulingEnabled) [ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_31 $$ eventLog.init(this.conf)[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_20 $$ waitTimeBeforeKill = this.conf.getWaitTimeBeforeKill()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_40 $$ updateThread.setDaemon(true)[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_27 $$ rootMetrics = FSQueueMetrics.forQueue("root", null, true, conf)[ FD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_13 $$ rackLocalityDelayMs = this.conf.getLocalityDelayRackMs()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_5 $$ minimumAllocation = this.conf.getMinimumAllocation()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_10 $$ nodeLocalityThreshold = this.conf.getLocalityThresholdNode()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_15 $$ preemptionUtilizationThreshold = this.conf.getPreemptionUtilizationThreshold()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_22 $$ updateInterval = this.conf.getUpdateInterval()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_23 $$ if (updateInterval < 0) [ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_30 $$ this.eventLog = new FairSchedulerEventLog()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_9 $$ continuousSchedulingSleepMs = this.conf.getContinuousSchedulingSleepMs()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_8 $$ continuousSchedulingEnabled = this.conf.isContinuousSchedulingEnabled()[ CD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_34 $$ queueMgr.initialize(conf)[ FD ]
Line_2 $$ private synchronized void initScheduler(Configuration conf) throws IOException -->Line_21 $$ usePortForNodeName = this.conf.getUsePortForNodeName()[ CD ]
