Line_19 $$ if (stop.get()) -->Line_20 $$ return[ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_23 $$ Client client2 = clientArray.get((i + 1) % clientArray.size())[ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_30 $$ ImmutableOpenMap<String, MappingMetaData> mappings = getMappingResponse.getMappings().get(indexName)[ CD ]
Line_25 $$ String typeName = "type" + (i % 10)-->Line_31 $$ assertThat(mappings.containsKey(typeName), equalTo(true))[ FD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_19 $$ if (stop.get()) [ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_26 $$ String fieldName = Thread.currentThread().getName() + "_" + i[ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_25 $$ String typeName = "type" + (i % 10)[ CD ]
Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(threads.length)-->Line_17 $$ barrier.await()[ FD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_44 $$ if (threadException[0] != null) [ CD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_5 $$ final Throwable[] threadException = new Throwable[1][ CD ]
Line_26 $$ String fieldName = Thread.currentThread().getName() + "_" + i-->Line_27 $$ PutMappingResponse response = client1.admin().indices().preparePutMapping(indexName).setType(typeName).setSource(JsonXContent.contentBuilder().startObject().startObject(typeName).startObject("properties").startObject(fieldName).field("type", "string").endObject().endObject().endObject().endObject()).get()[ FD ]
Line_6 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_19 $$ if (stop.get()) [ FD ]
Line_29 $$ GetMappingsResponse getMappingResponse = client2.admin().indices().prepareGetMappings(indexName).get()-->Line_30 $$ ImmutableOpenMap<String, MappingMetaData> mappings = getMappingResponse.getMappings().get(indexName)[ FD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_13 $$ for (int j = 0; j < threads.length; j++) [ CD ]
Line_24 $$ String indexName = i % 2 == 0 ? "test2" : "test1"-->Line_29 $$ GetMappingsResponse getMappingResponse = client2.admin().indices().prepareGetMappings(indexName).get()[ FD ]
Line_13 $$ for (int j = 0; j < threads.length; j++) -->Line_41 $$ threads[j].start()[ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_22 $$ Client client1 = clientArray.get(i % clientArray.size())[ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_29 $$ GetMappingsResponse getMappingResponse = client2.admin().indices().prepareGetMappings(indexName).get()[ CD ]
Line_30 $$ ImmutableOpenMap<String, MappingMetaData> mappings = getMappingResponse.getMappings().get(indexName)-->Line_31 $$ assertThat(mappings.containsKey(typeName), equalTo(true))[ FD ]
Line_9 $$ final ArrayList<Client> clientArray = new ArrayList()-->Line_22 $$ Client client1 = clientArray.get(i % clientArray.size())[ FD ]
Line_6 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_36 $$ stop.set(true)[ FD ]
Line_10 $$ for (Client c : clients()) -->Line_11 $$ clientArray.add(c)[ FD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_8 $$ final CyclicBarrier barrier = new CyclicBarrier(threads.length)[ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_24 $$ String indexName = i % 2 == 0 ? "test2" : "test1"[ CD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_7 $$ Thread[] threads = new Thread[3][ CD ]
Line_24 $$ String indexName = i % 2 == 0 ? "test2" : "test1"-->Line_30 $$ ImmutableOpenMap<String, MappingMetaData> mappings = getMappingResponse.getMappings().get(indexName)[ FD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_6 $$ final AtomicBoolean stop = new AtomicBoolean(false)[ CD ]
Line_25 $$ String typeName = "type" + (i % 10)-->Line_27 $$ PutMappingResponse response = client1.admin().indices().preparePutMapping(indexName).setType(typeName).setSource(JsonXContent.contentBuilder().startObject().startObject(typeName).startObject("properties").startObject(fieldName).field("type", "string").endObject().endObject().endObject().endObject()).get()[ FD ]
Line_25 $$ String typeName = "type" + (i % 10)-->Line_32 $$ assertThat(((Map<String, Object>) mappings.get(typeName).getSourceAsMap().get("properties")).keySet(), Matchers.hasItem(fieldName))[ FD ]
Line_13 $$ for (int j = 0; j < threads.length; j++) -->Line_40 $$ threads[j].setName("t_" + j)[ CD ]
Line_9 $$ final ArrayList<Client> clientArray = new ArrayList()-->Line_11 $$ clientArray.add(c)[ FD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_4 $$ ensureYellow()[ CD ]
Line_27 $$ PutMappingResponse response = client1.admin().indices().preparePutMapping(indexName).setType(typeName).setSource(JsonXContent.contentBuilder().startObject().startObject(typeName).startObject("properties").startObject(fieldName).field("type", "string").endObject().endObject().endObject().endObject()).get()-->Line_28 $$ assertThat(response.isAcknowledged(), equalTo(true))[ FD ]
Line_13 $$ for (int j = 0; j < threads.length; j++) -->Line_14 $$ threads[j] = new Thread(new Runnable() [ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_31 $$ assertThat(mappings.containsKey(typeName), equalTo(true))[ CD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_32 $$ assertThat(((Map<String, Object>) mappings.get(typeName).getSourceAsMap().get("properties")).keySet(), Matchers.hasItem(fieldName))[ CD ]
Line_9 $$ final ArrayList<Client> clientArray = new ArrayList()-->Line_23 $$ Client client2 = clientArray.get((i + 1) % clientArray.size())[ FD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_27 $$ PutMappingResponse response = client1.admin().indices().preparePutMapping(indexName).setType(typeName).setSource(JsonXContent.contentBuilder().startObject().startObject(typeName).startObject("properties").startObject(fieldName).field("type", "string").endObject().endObject().endObject().endObject()).get()[ CD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_3 $$ createIndex("test1", "test2")[ CD ]
Line_2 $$ public void testUpdateMappingConcurrently() throws Throwable -->Line_9 $$ final ArrayList<Client> clientArray = new ArrayList()[ CD ]
Line_22 $$ Client client1 = clientArray.get(i % clientArray.size())-->Line_27 $$ PutMappingResponse response = client1.admin().indices().preparePutMapping(indexName).setType(typeName).setSource(JsonXContent.contentBuilder().startObject().startObject(typeName).startObject("properties").startObject(fieldName).field("type", "string").endObject().endObject().endObject().endObject()).get()[ FD ]
Line_23 $$ Client client2 = clientArray.get((i + 1) % clientArray.size())-->Line_29 $$ GetMappingsResponse getMappingResponse = client2.admin().indices().prepareGetMappings(indexName).get()[ FD ]
Line_30 $$ ImmutableOpenMap<String, MappingMetaData> mappings = getMappingResponse.getMappings().get(indexName)-->Line_32 $$ assertThat(((Map<String, Object>) mappings.get(typeName).getSourceAsMap().get("properties")).keySet(), Matchers.hasItem(fieldName))[ FD ]
Line_18 $$ for (int i = 0; i < 100; i++) -->Line_28 $$ assertThat(response.isAcknowledged(), equalTo(true))[ CD ]
Line_24 $$ String indexName = i % 2 == 0 ? "test2" : "test1"-->Line_27 $$ PutMappingResponse response = client1.admin().indices().preparePutMapping(indexName).setType(typeName).setSource(JsonXContent.contentBuilder().startObject().startObject(typeName).startObject("properties").startObject(fieldName).field("type", "string").endObject().endObject().endObject().endObject()).get()[ FD ]
Line_26 $$ String fieldName = Thread.currentThread().getName() + "_" + i-->Line_32 $$ assertThat(((Map<String, Object>) mappings.get(typeName).getSourceAsMap().get("properties")).keySet(), Matchers.hasItem(fieldName))[ FD ]
