Line_9 $$ for (URL jsConfigURL : jsConfigURLs) -->Line_10 $$ try (InputStream inputStream = jsConfigURL.openStream()) [ FD ]
Line_4 $$ ServletOutputStream servletOutputStream = response.getOutputStream()-->Line_14 $$ servletOutputStream.println("console.error(error);")[ FD ]
Line_4 $$ ServletOutputStream servletOutputStream = response.getOutputStream()-->Line_12 $$ StreamUtil.transfer(inputStream, servletOutputStream, false)[ FD ]
Line_5 $$ PrintWriter printWriter = new PrintWriter(servletOutputStream, true)-->Line_22 $$ printWriter.close()[ FD ]
Line_2 $$ protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_4 $$ ServletOutputStream servletOutputStream = response.getOutputStream()[ CD ]
Line_7 $$ if (!jsConfigURLs.isEmpty()) -->Line_20 $$ printWriter.println("}());")[ CD ]
Line_2 $$ protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_5 $$ PrintWriter printWriter = new PrintWriter(servletOutputStream, true)[ CD ]
Line_2 $$ protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_3 $$ response.setContentType(Details.CONTENT_TYPE)[ CD ]
Line_2 $$ protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_4 $$ ServletOutputStream servletOutputStream = response.getOutputStream()[ FD ]
Line_4 $$ ServletOutputStream servletOutputStream = response.getOutputStream()-->Line_13 $$ servletOutputStream.println("} catch (error) [ FD ]
Line_4 $$ ServletOutputStream servletOutputStream = response.getOutputStream()-->Line_11 $$ servletOutputStream.println("try [ FD ]
Line_2 $$ protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_6 $$ Collection<URL> jsConfigURLs = _jsBundleConfigTracker.getJSConfigURLs()[ CD ]
Line_4 $$ ServletOutputStream servletOutputStream = response.getOutputStream()-->Line_15 $$ servletOutputStream.println("}")[ FD ]
Line_2 $$ protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_22 $$ printWriter.close()[ CD ]
Line_2 $$ protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_3 $$ response.setContentType(Details.CONTENT_TYPE)[ FD ]
Line_5 $$ PrintWriter printWriter = new PrintWriter(servletOutputStream, true)-->Line_8 $$ printWriter.println("(function() [ FD ]
Line_6 $$ Collection<URL> jsConfigURLs = _jsBundleConfigTracker.getJSConfigURLs()-->Line_7 $$ if (!jsConfigURLs.isEmpty()) [ FD ]
Line_2 $$ protected void service(HttpServletRequest request, HttpServletResponse response) throws IOException -->Line_7 $$ if (!jsConfigURLs.isEmpty()) [ CD ]
Line_5 $$ PrintWriter printWriter = new PrintWriter(servletOutputStream, true)-->Line_20 $$ printWriter.println("}());")[ FD ]
Line_10 $$ try (InputStream inputStream = jsConfigURL.openStream()) -->Line_12 $$ StreamUtil.transfer(inputStream, servletOutputStream, false)[ FD ]
Line_7 $$ if (!jsConfigURLs.isEmpty()) -->Line_8 $$ printWriter.println("(function() [ CD ]
