Line_3 $$ List<TextDescriptor> urls = new ArrayList<TextDescriptor>()-->Line_36 $$ return urls.toArray(new TextDescriptor[urls.size()])[ FD ]
Line_5 $$ for (FileType fileType : fileTypes) -->Line_6 $$ final String[] extensions = FileTypeManager.getInstance().getAssociatedExtensions(fileType)[ FD ]
Line_8 $$ for (int i = 0; ; i++) -->Line_9 $$ URL url = new URL(descriptionDirectory.toExternalForm() + "/" + prefix + "." + extension + (i == 0 ? "" : Integer.toString(i)) + suffix)[ CD ]
Line_2 $$ private static TextDescriptor[] retrieveURLs(@NotNull URL descriptionDirectory, @NotNull String prefix, @NotNull String suffix) throws MalformedURLException -->Line_4 $$ final FileType[] fileTypes = FileTypeManager.getInstance().getRegisteredFileTypes()[ CD ]
Line_20 $$ if (urls.isEmpty()) -->Line_34 $$ return EMPTY_EXAMPLE[ CD ]
Line_25 $$ children = uri.isOpaque() ? null : ObjectUtils.notNull(new File(uri).list(), ArrayUtil.EMPTY_STRING_ARRAY)-->Line_33 $$ LOG.error("URLs not found for available file types and prefix: '" + prefix + "', suffix: '" + suffix + "';" + " in directory: '" + descriptionDirectory + "'" + (children == null ? "" : "; directory contents: " + Arrays.asList(children)), cause)[ FD ]
Line_3 $$ List<TextDescriptor> urls = new ArrayList<TextDescriptor>()-->Line_13 $$ urls.add(new ResourceTextDescriptor(url))[ FD ]
Line_30 $$ cause = e-->Line_33 $$ LOG.error("URLs not found for available file types and prefix: '" + prefix + "', suffix: '" + suffix + "';" + " in directory: '" + descriptionDirectory + "'" + (children == null ? "" : "; directory contents: " + Arrays.asList(children)), cause)[ FD ]
Line_24 $$ URI uri = descriptionDirectory.toURI()-->Line_25 $$ children = uri.isOpaque() ? null : ObjectUtils.notNull(new File(uri).list(), ArrayUtil.EMPTY_STRING_ARRAY)[ FD ]
Line_21 $$ String[] children-->Line_25 $$ children = uri.isOpaque() ? null : ObjectUtils.notNull(new File(uri).list(), ArrayUtil.EMPTY_STRING_ARRAY)[ FD ]
Line_27 $$ cause = e-->Line_33 $$ LOG.error("URLs not found for available file types and prefix: '" + prefix + "', suffix: '" + suffix + "';" + " in directory: '" + descriptionDirectory + "'" + (children == null ? "" : "; directory contents: " + Arrays.asList(children)), cause)[ FD ]
Line_20 $$ if (urls.isEmpty()) -->Line_22 $$ Exception cause = null[ CD ]
Line_21 $$ String[] children-->Line_33 $$ LOG.error("URLs not found for available file types and prefix: '" + prefix + "', suffix: '" + suffix + "';" + " in directory: '" + descriptionDirectory + "'" + (children == null ? "" : "; directory contents: " + Arrays.asList(children)), cause)[ FD ]
Line_2 $$ private static TextDescriptor[] retrieveURLs(@NotNull URL descriptionDirectory, @NotNull String prefix, @NotNull String suffix) throws MalformedURLException -->Line_24 $$ URI uri = descriptionDirectory.toURI()[ FD ]
Line_28 $$ children = null-->Line_31 $$ children = null[ FD ]
Line_2 $$ private static TextDescriptor[] retrieveURLs(@NotNull URL descriptionDirectory, @NotNull String prefix, @NotNull String suffix) throws MalformedURLException -->Line_9 $$ URL url = new URL(descriptionDirectory.toExternalForm() + "/" + prefix + "." + extension + (i == 0 ? "" : Integer.toString(i)) + suffix)[ FD ]
Line_22 $$ Exception cause = null-->Line_27 $$ cause = e[ FD ]
Line_25 $$ children = uri.isOpaque() ? null : ObjectUtils.notNull(new File(uri).list(), ArrayUtil.EMPTY_STRING_ARRAY)-->Line_31 $$ children = null[ FD ]
Line_2 $$ private static TextDescriptor[] retrieveURLs(@NotNull URL descriptionDirectory, @NotNull String prefix, @NotNull String suffix) throws MalformedURLException -->Line_36 $$ return urls.toArray(new TextDescriptor[urls.size()])[ CD ]
Line_21 $$ String[] children-->Line_31 $$ children = null[ FD ]
Line_9 $$ URL url = new URL(descriptionDirectory.toExternalForm() + "/" + prefix + "." + extension + (i == 0 ? "" : Integer.toString(i)) + suffix)-->Line_11 $$ InputStream inputStream = url.openStream()[ FD ]
Line_31 $$ children = null-->Line_33 $$ LOG.error("URLs not found for available file types and prefix: '" + prefix + "', suffix: '" + suffix + "';" + " in directory: '" + descriptionDirectory + "'" + (children == null ? "" : "; directory contents: " + Arrays.asList(children)), cause)[ FD ]
Line_8 $$ for (int i = 0; ; i++) -->Line_9 $$ URL url = new URL(descriptionDirectory.toExternalForm() + "/" + prefix + "." + extension + (i == 0 ? "" : Integer.toString(i)) + suffix)[ FD ]
Line_2 $$ private static TextDescriptor[] retrieveURLs(@NotNull URL descriptionDirectory, @NotNull String prefix, @NotNull String suffix) throws MalformedURLException -->Line_3 $$ List<TextDescriptor> urls = new ArrayList<TextDescriptor>()[ CD ]
Line_20 $$ if (urls.isEmpty()) -->Line_21 $$ String[] children[ CD ]
Line_11 $$ InputStream inputStream = url.openStream()-->Line_12 $$ inputStream.close()[ FD ]
Line_28 $$ children = null-->Line_33 $$ LOG.error("URLs not found for available file types and prefix: '" + prefix + "', suffix: '" + suffix + "';" + " in directory: '" + descriptionDirectory + "'" + (children == null ? "" : "; directory contents: " + Arrays.asList(children)), cause)[ FD ]
Line_22 $$ Exception cause = null-->Line_30 $$ cause = e[ FD ]
Line_25 $$ children = uri.isOpaque() ? null : ObjectUtils.notNull(new File(uri).list(), ArrayUtil.EMPTY_STRING_ARRAY)-->Line_28 $$ children = null[ FD ]
Line_22 $$ Exception cause = null-->Line_33 $$ LOG.error("URLs not found for available file types and prefix: '" + prefix + "', suffix: '" + suffix + "';" + " in directory: '" + descriptionDirectory + "'" + (children == null ? "" : "; directory contents: " + Arrays.asList(children)), cause)[ FD ]
Line_27 $$ cause = e-->Line_30 $$ cause = e[ FD ]
Line_20 $$ if (urls.isEmpty()) -->Line_33 $$ LOG.error("URLs not found for available file types and prefix: '" + prefix + "', suffix: '" + suffix + "';" + " in directory: '" + descriptionDirectory + "'" + (children == null ? "" : "; directory contents: " + Arrays.asList(children)), cause)[ CD ]
Line_3 $$ List<TextDescriptor> urls = new ArrayList<TextDescriptor>()-->Line_20 $$ if (urls.isEmpty()) [ FD ]
Line_21 $$ String[] children-->Line_28 $$ children = null[ FD ]
Line_2 $$ private static TextDescriptor[] retrieveURLs(@NotNull URL descriptionDirectory, @NotNull String prefix, @NotNull String suffix) throws MalformedURLException -->Line_20 $$ if (urls.isEmpty()) [ CD ]
