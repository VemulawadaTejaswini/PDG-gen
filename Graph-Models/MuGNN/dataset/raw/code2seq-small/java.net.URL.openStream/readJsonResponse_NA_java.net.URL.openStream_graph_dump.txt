Line_3 $$ String mockFileName = Strings.replace(url, urlRoot, "")-->Line_5 $$ URL resource = GceComputeServiceMock.class.getResource(mockFileName)[ FD ]
Line_11 $$ Streams.readAllLines(is, new Callback<String>() -->Line_13 $$ sb.append(s)[ CD ]
Line_2 $$ private String readJsonResponse(String url, String urlRoot) throws IOException -->Line_3 $$ String mockFileName = Strings.replace(url, urlRoot, "")[ FD ]
Line_2 $$ private String readJsonResponse(String url, String urlRoot) throws IOException -->Line_6 $$ if (resource == null) [ CD ]
Line_11 $$ Streams.readAllLines(is, new Callback<String>() -->Line_13 $$ sb.append(s)[ FD ]
Line_2 $$ private String readJsonResponse(String url, String urlRoot) throws IOException -->Line_5 $$ URL resource = GceComputeServiceMock.class.getResource(mockFileName)[ CD ]
Line_10 $$ final StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(s)[ FD ]
Line_5 $$ URL resource = GceComputeServiceMock.class.getResource(mockFileName)-->Line_6 $$ if (resource == null) [ FD ]
Line_5 $$ URL resource = GceComputeServiceMock.class.getResource(mockFileName)-->Line_9 $$ try (InputStream is = resource.openStream()) [ FD ]
Line_2 $$ private String readJsonResponse(String url, String urlRoot) throws IOException -->Line_3 $$ String mockFileName = Strings.replace(url, urlRoot, "")[ CD ]
Line_10 $$ final StringBuilder sb = new StringBuilder()-->Line_16 $$ String response = sb.toString()[ FD ]
Line_9 $$ try (InputStream is = resource.openStream()) -->Line_11 $$ Streams.readAllLines(is, new Callback<String>() [ FD ]
