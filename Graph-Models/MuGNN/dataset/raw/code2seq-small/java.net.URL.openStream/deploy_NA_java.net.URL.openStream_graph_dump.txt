Line_5 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)-->Line_9 $$ if (appClientData != null && appClientData.getCallbackHandler() != null && !appClientData.getCallbackHandler().isEmpty()) [ FD ]
Line_56 $$ InputStream stream = null-->Line_63 $$ stream.close()[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_30 $$ Method mainMethod = null[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_41 $$ throw AppClientLogger.ROOT_LOGGER.cannotStartAppClient(deploymentUnit.getName(), mainClass)[ FD ]
Line_11 $$ final Class<?> callbackClass = ClassLoadingUtils.loadClass(appClientData.getCallbackHandler(), module)-->Line_12 $$ callbackHandler = new RealmCallbackWrapper((CallbackHandler) callbackClass.newInstance())[ FD ]
Line_58 $$ stream = url.openStream()-->Line_63 $$ stream.close()[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_31 $$ Class<?> klass = mainClass[ CD ]
Line_31 $$ Class<?> klass = mainClass-->Line_32 $$ while (klass != Object.class) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_6 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_45 $$ if (connectionPropertiesUrl != null) [ CD ]
Line_56 $$ InputStream stream = null-->Line_61 $$ if (stream != null) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_9 $$ if (appClientData != null && appClientData.getCallbackHandler() != null && !appClientData.getCallbackHandler().isEmpty()) [ CD ]
Line_32 $$ while (klass != Object.class) -->Line_33 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)[ CD ]
Line_43 $$ final ApplicationClientStartService startService-->Line_89 $$ phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(), Component.class, startService.getApplicationClientComponent()).install()[ FD ]
Line_30 $$ Method mainMethod = null-->Line_35 $$ if (mainMethod != null) [ FD ]
Line_5 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)-->Line_11 $$ final Class<?> callbackClass = ClassLoadingUtils.loadClass(appClientData.getCallbackHandler(), module)[ FD ]
Line_7 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_11 $$ final Class<?> callbackClass = ClassLoadingUtils.loadClass(appClientData.getCallbackHandler(), module)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ FD ]
Line_32 $$ while (klass != Object.class) -->Line_34 $$ mainMethod = index.getMethod(void.class, "main", String[].class)[ CD ]
Line_5 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)-->Line_14 $$ throw AppClientLogger.ROOT_LOGGER.couldNotLoadCallbackClass(appClientData.getCallbackHandler())[ FD ]
Line_21 $$ Boolean activate = deploymentUnit.getAttachment(AppClientAttachments.START_APP_CLIENT)-->Line_22 $$ if (activate == null || !activate) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_29 $$ final ApplicationClientComponentDescription component = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_COMPONENT)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_22 $$ if (activate == null || !activate) [ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_21 $$ Boolean activate = deploymentUnit.getAttachment(AppClientAttachments.START_APP_CLIENT)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_26 $$ if (mainClass == null) [ CD ]
Line_58 $$ stream = url.openStream()-->Line_61 $$ if (stream != null) [ FD ]
Line_7 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_87 $$ startService = new ApplicationClientStartService(mainMethod, parameters, moduleDescription.getNamespaceContextSelector(), module.getClassLoader(), setupActions, hostUrl, callbackHandler)[ FD ]
Line_55 $$ Properties properties = new Properties()-->Line_72 $$ if (!properties.contains("username") && !properties.contains("callback.handler.class")) [ FD ]
Line_71 $$ configuration = new PropertiesBasedEJBClientConfiguration(properties)-->Line_73 $$ configuration = new ForwardingEjbClientConfiguration(configuration) [ FD ]
Line_49 $$ final URL url-->Line_58 $$ stream = url.openStream()[ FD ]
Line_6 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX)-->Line_33 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)[ FD ]
Line_68 $$ final ClassLoader oldTccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_81 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_43 $$ final ApplicationClientStartService startService[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_29 $$ final ApplicationClientComponentDescription component = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_COMPONENT)[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_89 $$ phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(), Component.class, startService.getApplicationClientComponent()).install()[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_89 $$ phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(), Component.class, startService.getApplicationClientComponent()).install()[ CD ]
Line_34 $$ mainMethod = index.getMethod(void.class, "main", String[].class)-->Line_35 $$ if (mainMethod != null) [ FD ]
Line_46 $$ EJBClientConfiguration configuration-->Line_71 $$ configuration = new PropertiesBasedEJBClientConfiguration(properties)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_7 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ CD ]
Line_38 $$ klass = klass.getSuperclass()-->Line_33 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)[ FD ]
Line_73 $$ configuration = new ForwardingEjbClientConfiguration(configuration) -->Line_75 $$ return callbackHandler[ CD ]
Line_46 $$ EJBClientConfiguration configuration-->Line_73 $$ configuration = new ForwardingEjbClientConfiguration(configuration) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_25 $$ final Class<?> mainClass = deploymentUnit.getAttachment(AppClientAttachments.MAIN_CLASS)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_44 $$ final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.OTHER_EE_SETUP_ACTIONS)[ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_4 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ CD ]
Line_45 $$ if (connectionPropertiesUrl != null) -->Line_46 $$ EJBClientConfiguration configuration[ CD ]
Line_48 $$ final File file = new File(connectionPropertiesUrl)-->Line_51 $$ url = file.toURI().toURL()[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_5 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)[ CD ]
Line_25 $$ final Class<?> mainClass = deploymentUnit.getAttachment(AppClientAttachments.MAIN_CLASS)-->Line_26 $$ if (mainClass == null) [ FD ]
Line_50 $$ if (file.exists()) -->Line_53 $$ url = new URL(connectionPropertiesUrl)[ CD ]
Line_55 $$ Properties properties = new Properties()-->Line_59 $$ properties.load(stream)[ FD ]
Line_31 $$ Class<?> klass = mainClass-->Line_33 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)[ FD ]
Line_32 $$ while (klass != Object.class) -->Line_35 $$ if (mainMethod != null) [ CD ]
Line_38 $$ klass = klass.getSuperclass()-->Line_32 $$ while (klass != Object.class) [ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_40 $$ if (mainMethod == null) [ CD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_25 $$ final Class<?> mainClass = deploymentUnit.getAttachment(AppClientAttachments.MAIN_CLASS)[ CD ]
Line_4 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_87 $$ startService = new ApplicationClientStartService(mainMethod, parameters, moduleDescription.getNamespaceContextSelector(), module.getClassLoader(), setupActions, hostUrl, callbackHandler)[ FD ]
Line_56 $$ InputStream stream = null-->Line_59 $$ properties.load(stream)[ FD ]
Line_31 $$ Class<?> klass = mainClass-->Line_38 $$ klass = klass.getSuperclass()[ FD ]
Line_50 $$ if (file.exists()) -->Line_51 $$ url = file.toURI().toURL()[ CD ]
Line_49 $$ final URL url-->Line_53 $$ url = new URL(connectionPropertiesUrl)[ FD ]
Line_8 $$ final CallbackHandler callbackHandler-->Line_12 $$ callbackHandler = new RealmCallbackWrapper((CallbackHandler) callbackClass.newInstance())[ FD ]
Line_33 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)-->Line_34 $$ mainMethod = index.getMethod(void.class, "main", String[].class)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_8 $$ final CallbackHandler callbackHandler[ CD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_6 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX)[ FD ]
Line_51 $$ url = file.toURI().toURL()-->Line_58 $$ stream = url.openStream()[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_44 $$ final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.OTHER_EE_SETUP_ACTIONS)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_27 $$ throw AppClientLogger.ROOT_LOGGER.cannotStartAppClient(deploymentUnit.getName())[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_5 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)[ FD ]
Line_34 $$ mainMethod = index.getMethod(void.class, "main", String[].class)-->Line_40 $$ if (mainMethod == null) [ FD ]
Line_30 $$ Method mainMethod = null-->Line_34 $$ mainMethod = index.getMethod(void.class, "main", String[].class)[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_89 $$ phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(), Component.class, startService.getApplicationClientComponent()).install()[ FD ]
Line_56 $$ InputStream stream = null-->Line_58 $$ stream = url.openStream()[ FD ]
Line_5 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)-->Line_16 $$ throw AppClientLogger.ROOT_LOGGER.couldNotCreateCallbackHandler(appClientData.getCallbackHandler())[ FD ]
Line_51 $$ url = file.toURI().toURL()-->Line_53 $$ url = new URL(connectionPropertiesUrl)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_21 $$ Boolean activate = deploymentUnit.getAttachment(AppClientAttachments.START_APP_CLIENT)[ FD ]
Line_22 $$ if (activate == null || !activate) -->Line_23 $$ return[ CD ]
Line_8 $$ final CallbackHandler callbackHandler-->Line_19 $$ callbackHandler = new DefaultApplicationClientCallbackHandler()[ FD ]
Line_25 $$ final Class<?> mainClass = deploymentUnit.getAttachment(AppClientAttachments.MAIN_CLASS)-->Line_41 $$ throw AppClientLogger.ROOT_LOGGER.cannotStartAppClient(deploymentUnit.getName(), mainClass)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_7 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ FD ]
Line_53 $$ url = new URL(connectionPropertiesUrl)-->Line_58 $$ stream = url.openStream()[ FD ]
Line_48 $$ final File file = new File(connectionPropertiesUrl)-->Line_50 $$ if (file.exists()) [ FD ]
Line_7 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_70 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader())[ FD ]
Line_12 $$ callbackHandler = new RealmCallbackWrapper((CallbackHandler) callbackClass.newInstance())-->Line_19 $$ callbackHandler = new DefaultApplicationClientCallbackHandler()[ FD ]
Line_2 $$ public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException -->Line_32 $$ while (klass != Object.class) [ CD ]
Line_4 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_79 $$ startService = new ApplicationClientStartService(mainMethod, parameters, moduleDescription.getNamespaceContextSelector(), module.getClassLoader(), setupActions, configuration)[ FD ]
Line_7 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_79 $$ startService = new ApplicationClientStartService(mainMethod, parameters, moduleDescription.getNamespaceContextSelector(), module.getClassLoader(), setupActions, configuration)[ FD ]
Line_58 $$ stream = url.openStream()-->Line_59 $$ properties.load(stream)[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_4 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_29 $$ final ApplicationClientComponentDescription component = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_COMPONENT)-->Line_89 $$ phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(), Component.class, startService.getApplicationClientComponent()).install()[ FD ]
Line_32 $$ while (klass != Object.class) -->Line_38 $$ klass = klass.getSuperclass()[ CD ]
Line_72 $$ if (!properties.contains("username") && !properties.contains("callback.handler.class")) -->Line_73 $$ configuration = new ForwardingEjbClientConfiguration(configuration) [ CD ]
Line_9 $$ if (appClientData != null && appClientData.getCallbackHandler() != null && !appClientData.getCallbackHandler().isEmpty()) -->Line_19 $$ callbackHandler = new DefaultApplicationClientCallbackHandler()[ CD ]
Line_49 $$ final URL url-->Line_51 $$ url = file.toURI().toURL()[ FD ]
Line_30 $$ Method mainMethod = null-->Line_40 $$ if (mainMethod == null) [ FD ]
