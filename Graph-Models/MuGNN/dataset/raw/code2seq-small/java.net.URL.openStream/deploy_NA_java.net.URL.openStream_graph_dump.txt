Line_58 $$ InputStream stream = null-->Line_63 $$ if (stream != null) [ FD ]
Line_60 $$ stream = url.openStream()-->Line_63 $$ if (stream != null) [ FD ]
Line_5 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_95 $$ startService = new ApplicationClientStartService(mainMethod, parameters, moduleDescription.getNamespaceContextSelector(), module.getClassLoader(), setupActions, hostUrl, callbackHandler)[ FD ]
Line_24 $$ if (activate == null || !activate) -->Line_25 $$ return[ CD ]
Line_48 $$ EJBClientConfiguration configuration-->Line_74 $$ configuration = new PropertiesBasedEJBClientConfiguration(properties)[ FD ]
Line_40 $$ klass = klass.getSuperclass()-->Line_35 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)[ FD ]
Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_95 $$ startService = new ApplicationClientStartService(mainMethod, parameters, moduleDescription.getNamespaceContextSelector(), module.getClassLoader(), setupActions, hostUrl, callbackHandler)[ FD ]
Line_32 $$ Method mainMethod = null-->Line_37 $$ if (mainMethod != null) [ FD ]
Line_60 $$ stream = url.openStream()-->Line_61 $$ properties.load(stream)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_97 $$ phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(), Component.class, startService.getApplicationClientComponent()).install()[ FD ]
Line_40 $$ klass = klass.getSuperclass()-->Line_34 $$ while (klass != Object.class) [ FD ]
Line_55 $$ url = new URL(connectionPropertiesUrl)-->Line_60 $$ stream = url.openStream()[ FD ]
Line_58 $$ InputStream stream = null-->Line_65 $$ stream.close()[ FD ]
Line_36 $$ mainMethod = index.getMethod(void.class, "main", String[].class)-->Line_42 $$ if (mainMethod == null) [ FD ]
Line_58 $$ InputStream stream = null-->Line_61 $$ properties.load(stream)[ FD ]
Line_6 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)-->Line_16 $$ throw AppClientLogger.ROOT_LOGGER.couldNotLoadCallbackClass(appClientData.getCallbackHandler())[ FD ]
Line_45 $$ final ApplicationClientStartService startService-->Line_97 $$ phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(), Component.class, startService.getApplicationClientComponent()).install()[ FD ]
Line_33 $$ Class<?> klass = mainClass-->Line_35 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)[ FD ]
Line_34 $$ while (klass != Object.class) -->Line_40 $$ klass = klass.getSuperclass()[ CD ]
Line_33 $$ Class<?> klass = mainClass-->Line_40 $$ klass = klass.getSuperclass()[ FD ]
Line_32 $$ Method mainMethod = null-->Line_42 $$ if (mainMethod == null) [ FD ]
Line_50 $$ final File file = new File(connectionPropertiesUrl)-->Line_52 $$ if (file.exists()) [ FD ]
Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_87 $$ startService = new ApplicationClientStartService(mainMethod, parameters, moduleDescription.getNamespaceContextSelector(), module.getClassLoader(), setupActions, configuration)[ FD ]
Line_36 $$ mainMethod = index.getMethod(void.class, "main", String[].class)-->Line_37 $$ if (mainMethod != null) [ FD ]
Line_51 $$ final URL url-->Line_55 $$ url = new URL(connectionPropertiesUrl)[ FD ]
Line_13 $$ final Class<?> callbackClass = ClassLoadingUtils.loadClass(appClientData.getCallbackHandler(), module)-->Line_14 $$ callbackHandler = new RealmCallbackWrapper((CallbackHandler) callbackClass.newInstance())[ FD ]
Line_58 $$ InputStream stream = null-->Line_60 $$ stream = url.openStream()[ FD ]
Line_5 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)-->Line_87 $$ startService = new ApplicationClientStartService(mainMethod, parameters, moduleDescription.getNamespaceContextSelector(), module.getClassLoader(), setupActions, configuration)[ FD ]
Line_53 $$ url = file.toURI().toURL()-->Line_60 $$ stream = url.openStream()[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_7 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX)[ FD ]
Line_34 $$ while (klass != Object.class) -->Line_36 $$ mainMethod = index.getMethod(void.class, "main", String[].class)[ CD ]
Line_27 $$ final Class<?> mainClass = deploymentUnit.getAttachment(AppClientAttachments.MAIN_CLASS)-->Line_28 $$ if (mainClass == null) [ FD ]
Line_52 $$ if (file.exists()) -->Line_53 $$ url = file.toURI().toURL()[ CD ]
Line_31 $$ final ApplicationClientComponentDescription component = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_COMPONENT)-->Line_97 $$ phaseContext.getServiceTarget().addService(deploymentUnit.getServiceName().append(ApplicationClientStartService.SERVICE_NAME), startService).addDependency(ApplicationClientDeploymentService.SERVICE_NAME, ApplicationClientDeploymentService.class, startService.getApplicationClientDeploymentServiceInjectedValue()).addDependency(component.getCreateServiceName(), Component.class, startService.getApplicationClientComponent()).install()[ FD ]
Line_35 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)-->Line_36 $$ mainMethod = index.getMethod(void.class, "main", String[].class)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_46 $$ final List<SetupAction> setupActions = deploymentUnit.getAttachmentList(org.jboss.as.ee.component.Attachments.OTHER_EE_SETUP_ACTIONS)[ FD ]
Line_7 $$ final DeploymentReflectionIndex deploymentReflectionIndex = deploymentUnit.getAttachment(Attachments.REFLECTION_INDEX)-->Line_35 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)[ FD ]
Line_71 $$ final ClassLoader oldTccl = WildFlySecurityManager.getCurrentContextClassLoaderPrivileged()-->Line_89 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl)[ FD ]
Line_11 $$ if (appClientData != null && appClientData.getCallbackHandler() != null && !appClientData.getCallbackHandler().isEmpty()) -->Line_21 $$ callbackHandler = new DefaultApplicationClientCallbackHandler()[ CD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)[ FD ]
Line_6 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)-->Line_11 $$ if (appClientData != null && appClientData.getCallbackHandler() != null && !appClientData.getCallbackHandler().isEmpty()) [ FD ]
Line_14 $$ callbackHandler = new RealmCallbackWrapper((CallbackHandler) callbackClass.newInstance())-->Line_21 $$ callbackHandler = new DefaultApplicationClientCallbackHandler()[ FD ]
Line_50 $$ final File file = new File(connectionPropertiesUrl)-->Line_53 $$ url = file.toURI().toURL()[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_5 $$ final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_23 $$ Boolean activate = deploymentUnit.getAttachment(AppClientAttachments.START_APP_CLIENT)[ FD ]
Line_51 $$ final URL url-->Line_60 $$ stream = url.openStream()[ FD ]
Line_52 $$ if (file.exists()) -->Line_55 $$ url = new URL(connectionPropertiesUrl)[ CD ]
Line_53 $$ url = file.toURI().toURL()-->Line_55 $$ url = new URL(connectionPropertiesUrl)[ FD ]
Line_34 $$ while (klass != Object.class) -->Line_35 $$ final ClassReflectionIndex index = deploymentReflectionIndex.getClassIndex(klass)[ CD ]
Line_34 $$ while (klass != Object.class) -->Line_37 $$ if (mainMethod != null) [ CD ]
Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_13 $$ final Class<?> callbackClass = ClassLoadingUtils.loadClass(appClientData.getCallbackHandler(), module)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_31 $$ final ApplicationClientComponentDescription component = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_COMPONENT)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_27 $$ final Class<?> mainClass = deploymentUnit.getAttachment(AppClientAttachments.MAIN_CLASS)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_29 $$ throw AppClientLogger.ROOT_LOGGER.cannotStartAppClient(deploymentUnit.getName())[ FD ]
Line_33 $$ Class<?> klass = mainClass-->Line_34 $$ while (klass != Object.class) [ FD ]
Line_23 $$ Boolean activate = deploymentUnit.getAttachment(AppClientAttachments.START_APP_CLIENT)-->Line_24 $$ if (activate == null || !activate) [ FD ]
Line_47 $$ if (connectionPropertiesUrl != null) -->Line_48 $$ EJBClientConfiguration configuration[ CD ]
Line_60 $$ stream = url.openStream()-->Line_65 $$ stream.close()[ FD ]
Line_27 $$ final Class<?> mainClass = deploymentUnit.getAttachment(AppClientAttachments.MAIN_CLASS)-->Line_43 $$ throw AppClientLogger.ROOT_LOGGER.cannotStartAppClient(deploymentUnit.getName(), mainClass)[ FD ]
Line_8 $$ final Module module = deploymentUnit.getAttachment(Attachments.MODULE)-->Line_73 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(module.getClassLoader())[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_43 $$ throw AppClientLogger.ROOT_LOGGER.cannotStartAppClient(deploymentUnit.getName(), mainClass)[ FD ]
Line_6 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)-->Line_13 $$ final Class<?> callbackClass = ClassLoadingUtils.loadClass(appClientData.getCallbackHandler(), module)[ FD ]
Line_57 $$ Properties properties = new Properties()-->Line_61 $$ properties.load(stream)[ FD ]
Line_32 $$ Method mainMethod = null-->Line_36 $$ mainMethod = index.getMethod(void.class, "main", String[].class)[ FD ]
Line_4 $$ final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit()-->Line_6 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)[ FD ]
Line_51 $$ final URL url-->Line_53 $$ url = file.toURI().toURL()[ FD ]
Line_6 $$ final ApplicationClientMetaData appClientData = deploymentUnit.getAttachment(AppClientAttachments.APPLICATION_CLIENT_META_DATA)-->Line_18 $$ throw AppClientLogger.ROOT_LOGGER.couldNotCreateCallbackHandler(appClientData.getCallbackHandler())[ FD ]
