Line_4 $$ if (resource == null) -->Line_5 $$ Logger.getInstance(Java15APIUsageInspectionBase.class).warn("not found: " + fileName)[ CD ]
Line_2 $$ private static void loadForbiddenApi(String fileName, Set<String> set) -->Line_11 $$ set.addAll(FileUtil.loadLines(reader))[ FD ]
Line_9 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(resource.openStream(), CharsetToolkit.UTF8_CHARSET))-->Line_11 $$ set.addAll(FileUtil.loadLines(reader))[ FD ]
Line_9 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(resource.openStream(), CharsetToolkit.UTF8_CHARSET))-->Line_13 $$ reader.close()[ FD ]
Line_3 $$ URL resource = Java15APIUsageInspectionBase.class.getResource(fileName)-->Line_4 $$ if (resource == null) [ FD ]
Line_3 $$ URL resource = Java15APIUsageInspectionBase.class.getResource(fileName)-->Line_9 $$ BufferedReader reader = new BufferedReader(new InputStreamReader(resource.openStream(), CharsetToolkit.UTF8_CHARSET))[ FD ]
Line_2 $$ private static void loadForbiddenApi(String fileName, Set<String> set) -->Line_3 $$ URL resource = Java15APIUsageInspectionBase.class.getResource(fileName)[ FD ]
Line_2 $$ private static void loadForbiddenApi(String fileName, Set<String> set) -->Line_4 $$ if (resource == null) [ CD ]
Line_2 $$ private static void loadForbiddenApi(String fileName, Set<String> set) -->Line_3 $$ URL resource = Java15APIUsageInspectionBase.class.getResource(fileName)[ CD ]
Line_4 $$ if (resource == null) -->Line_6 $$ return[ CD ]
