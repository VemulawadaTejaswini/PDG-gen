Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_4 $$ if (!NameNodeLayoutVersion.supports(LayoutVersion.Feature.OPTIMIZE_SNAPSHOT_INODES, layoutVersion)) [ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_8 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ FD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_12 $$ final long preferredBlockSize = in.readLong()[ FD ]
Line_3 $$ final int layoutVersion = getLayoutVersion()-->Line_4 $$ if (!NameNodeLayoutVersion.supports(LayoutVersion.Feature.OPTIMIZE_SNAPSHOT_INODES, layoutVersion)) [ FD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_5 $$ return loadINodeWithLocalName(true, in, false).asFile()[ FD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_8 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_7 $$ final byte[] name = FSImageSerialization.readLocalName(in)[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_10 $$ final long accessTime = in.readLong()[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_10 $$ final long accessTime = in.readLong()[ FD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_11 $$ final short replication = namesystem.getBlockManager().adjustReplication(in.readShort())[ FD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_11 $$ final short replication = namesystem.getBlockManager().adjustReplication(in.readShort())[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_3 $$ final int layoutVersion = getLayoutVersion()[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_7 $$ final byte[] name = FSImageSerialization.readLocalName(in)[ FD ]
Line_4 $$ if (!NameNodeLayoutVersion.supports(LayoutVersion.Feature.OPTIMIZE_SNAPSHOT_INODES, layoutVersion)) -->Line_5 $$ return loadINodeWithLocalName(true, in, false).asFile()[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_12 $$ final long preferredBlockSize = in.readLong()[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_13 $$ return new INodeFileAttributes.SnapshotCopy(name, permissions, null, modificationTime, accessTime, replication, preferredBlockSize, null)[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_9 $$ final long modificationTime = in.readLong()[ CD ]
Line_2 $$ public INodeFileAttributes loadINodeFileAttributes(DataInput in) throws IOException -->Line_9 $$ final long modificationTime = in.readLong()[ FD ]
