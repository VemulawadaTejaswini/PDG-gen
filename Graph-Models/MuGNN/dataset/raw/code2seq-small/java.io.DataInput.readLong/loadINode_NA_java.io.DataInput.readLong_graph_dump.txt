Line_41 $$ clientName = FSImageSerialization.readString(in)-->Line_58 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_27 $$ for (int j = 0; j < numBlocks; j++) -->Line_28 $$ blocks[j] = new BlockInfo(replication)[ CD ]
Line_94 $$ if (numBlocks == -2) -->Line_101 $$ return new INodeSymlink(inodeId, localName, permissions, modificationTime, atime, symlink)[ CD ]
Line_40 $$ if (underConstruction) -->Line_41 $$ clientName = FSImageSerialization.readString(in)[ CD ]
Line_23 $$ if (numBlocks >= 0) -->Line_33 $$ boolean underConstruction = false[ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_94 $$ if (numBlocks == -2) [ CD ]
Line_23 $$ if (numBlocks >= 0) -->Line_57 $$ if (underConstruction) [ CD ]
Line_22 $$ final int numBlocks = in.readInt()-->Line_94 $$ if (numBlocks == -2) [ FD ]
Line_23 $$ if (numBlocks >= 0) -->Line_34 $$ FileDiffList fileDiffs = null[ CD ]
Line_111 $$ if (isWithName) -->Line_112 $$ return new INodeReference.WithName(null, withCount, localName, snapshotId)[ CD ]
Line_23 $$ if (numBlocks >= 0) -->Line_31 $$ String clientName = ""[ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_84 $$ if (nsQuota >= 0 || dsQuota >= 0) [ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_71 $$ boolean withSnapshot = false[ CD ]
Line_40 $$ if (underConstruction) -->Line_42 $$ clientMachine = FSImageSerialization.readString(in)[ CD ]
Line_23 $$ if (numBlocks >= 0) -->Line_32 $$ String clientMachine = ""[ CD ]
Line_90 $$ if (snapshottable) -->Line_91 $$ dir.addSnapshottableFeature()[ CD ]
Line_10 $$ final int imgVersion = getLayoutVersion()-->Line_66 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.DISKSPACE_QUOTA, imgVersion)) [ FD ]
Line_83 $$ final INodeDirectory dir = new INodeDirectory(inodeId, localName, permissions, modificationTime)-->Line_91 $$ dir.addSnapshottableFeature()[ FD ]
Line_23 $$ if (numBlocks >= 0) -->Line_61 $$ if (numBlocks == -1) [ CD ]
Line_35 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_38 $$ if (isSnapshotINode) [ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_93 $$ return dir[ CD ]
Line_72 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_73 $$ snapshottable = in.readBoolean()[ CD ]
Line_65 $$ long dsQuota = -1L-->Line_67 $$ dsQuota = in.readLong()[ FD ]
Line_10 $$ final int imgVersion = getLayoutVersion()-->Line_72 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ FD ]
Line_61 $$ if (numBlocks == -1) -->Line_72 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ CD ]
Line_74 $$ if (!snapshottable) -->Line_75 $$ withSnapshot = in.readBoolean()[ CD ]
Line_94 $$ if (numBlocks == -2) -->Line_98 $$ if (counter != null) [ CD ]
Line_22 $$ final int numBlocks = in.readInt()-->Line_61 $$ if (numBlocks == -1) [ FD ]
Line_57 $$ if (underConstruction) -->Line_58 $$ file.toUnderConstruction(clientName, clientMachine)[ CD ]
Line_83 $$ final INodeDirectory dir = new INodeDirectory(inodeId, localName, permissions, modificationTime)-->Line_88 $$ dir.addSnapshotFeature(null)[ FD ]
Line_22 $$ final int numBlocks = in.readInt()-->Line_27 $$ for (int j = 0; j < numBlocks; j++) [ FD ]
Line_18 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.FILE_ACCESS_TIME, imgVersion)) -->Line_19 $$ atime = in.readLong()[ CD ]
Line_23 $$ if (numBlocks >= 0) -->Line_56 $$ final INodeFile file = new INodeFile(inodeId, localName, permissions, modificationTime, atime, blocks, replication, blockSize)[ CD ]
Line_22 $$ final int numBlocks = in.readInt()-->Line_23 $$ if (numBlocks >= 0) [ FD ]
Line_22 $$ final int numBlocks = in.readInt()-->Line_102 $$ if (numBlocks == -3) [ FD ]
Line_102 $$ if (numBlocks == -3) -->Line_111 $$ if (isWithName) [ CD ]
Line_71 $$ boolean withSnapshot = false-->Line_75 $$ withSnapshot = in.readBoolean()[ FD ]
Line_32 $$ String clientMachine = ""-->Line_42 $$ clientMachine = FSImageSerialization.readString(in)[ FD ]
Line_87 $$ if (withSnapshot) -->Line_88 $$ dir.addSnapshotFeature(null)[ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_90 $$ if (snapshottable) [ CD ]
Line_10 $$ final int imgVersion = getLayoutVersion()-->Line_14 $$ long inodeId = NameNodeLayoutVersion.supports(LayoutVersion.Feature.ADD_INODE_ID, imgVersion) ? in.readLong() : namesystem.allocateNewInodeId()[ FD ]
Line_94 $$ if (numBlocks == -2) -->Line_97 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_87 $$ if (withSnapshot) [ CD ]
Line_73 $$ snapshottable = in.readBoolean()-->Line_74 $$ if (!snapshottable) [ FD ]
Line_84 $$ if (nsQuota >= 0 || dsQuota >= 0) -->Line_85 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ CD ]
Line_38 $$ if (isSnapshotINode) -->Line_39 $$ underConstruction = in.readBoolean()[ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_66 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.DISKSPACE_QUOTA, imgVersion)) [ CD ]
Line_10 $$ final int imgVersion = getLayoutVersion()-->Line_11 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ FD ]
Line_11 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_12 $$ namesystem.getFSDirectory().verifyINodeName(localName)[ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_83 $$ final INodeDirectory dir = new INodeDirectory(inodeId, localName, permissions, modificationTime)[ CD ]
Line_23 $$ if (numBlocks >= 0) -->Line_35 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ CD ]
Line_31 $$ String clientName = ""-->Line_58 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_67 $$ dsQuota = in.readLong()-->Line_85 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ FD ]
Line_66 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.DISKSPACE_QUOTA, imgVersion)) -->Line_67 $$ dsQuota = in.readLong()[ CD ]
Line_111 $$ if (isWithName) -->Line_114 $$ final INodeReference ref = new INodeReference.DstReference(null, withCount, snapshotId)[ CD ]
Line_31 $$ String clientName = ""-->Line_41 $$ clientName = FSImageSerialization.readString(in)[ FD ]
Line_38 $$ if (isSnapshotINode) -->Line_40 $$ if (underConstruction) [ CD ]
Line_23 $$ if (numBlocks >= 0) -->Line_27 $$ for (int j = 0; j < numBlocks; j++) [ CD ]
Line_56 $$ final INodeFile file = new INodeFile(inodeId, localName, permissions, modificationTime, atime, blocks, replication, blockSize)-->Line_58 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_72 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_74 $$ if (!snapshottable) [ CD ]
Line_17 $$ long atime = 0-->Line_19 $$ atime = in.readLong()[ FD ]
Line_65 $$ long dsQuota = -1L-->Line_85 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ FD ]
Line_98 $$ if (counter != null) -->Line_99 $$ counter.increment()[ CD ]
Line_23 $$ if (numBlocks >= 0) -->Line_51 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ CD ]
Line_111 $$ if (isWithName) -->Line_115 $$ return ref[ CD ]
Line_10 $$ final int imgVersion = getLayoutVersion()-->Line_18 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.FILE_ACCESS_TIME, imgVersion)) [ FD ]
Line_94 $$ if (numBlocks == -2) -->Line_102 $$ if (numBlocks == -3) [ CD ]
Line_32 $$ String clientMachine = ""-->Line_58 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_10 $$ final int imgVersion = getLayoutVersion()-->Line_35 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ FD ]
Line_23 $$ if (numBlocks >= 0) -->Line_60 $$ return fileDiffs == null ? file : new INodeFile(file, fileDiffs)[ CD ]
Line_33 $$ boolean underConstruction = false-->Line_39 $$ underConstruction = in.readBoolean()[ FD ]
Line_27 $$ for (int j = 0; j < numBlocks; j++) -->Line_29 $$ blocks[j].readFields(in)[ CD ]
Line_61 $$ if (numBlocks == -1) -->Line_78 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ CD ]
Line_102 $$ if (numBlocks == -3) -->Line_110 $$ final INodeReference.WithCount withCount = referenceMap.loadINodeReferenceWithCount(isSnapshotINode, in, this)[ CD ]
Line_83 $$ final INodeDirectory dir = new INodeDirectory(inodeId, localName, permissions, modificationTime)-->Line_85 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ FD ]
Line_42 $$ clientMachine = FSImageSerialization.readString(in)-->Line_58 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_61 $$ if (numBlocks == -1) -->Line_65 $$ long dsQuota = -1L[ CD ]
