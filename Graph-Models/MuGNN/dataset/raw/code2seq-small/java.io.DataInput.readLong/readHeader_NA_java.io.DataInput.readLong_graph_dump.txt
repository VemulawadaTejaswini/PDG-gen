Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_17 $$ input.readFully(parametersBytes)[ FD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_8 $$ updateChecksumInt(checkcrc, (int) (id >>> 32))[ CD ]
Line_3 $$ CRC32 checkcrc = new CRC32()-->Line_20 $$ if (crc == (int) checkcrc.getValue())[ FD ]
Line_3 $$ CRC32 checkcrc = new CRC32()-->Line_8 $$ updateChecksumInt(checkcrc, (int) (id >>> 32))[ FD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_17 $$ input.readFully(parametersBytes)[ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_6 $$ long id = input.readLong()[ FD ]
Line_9 $$ int parametersLength = 0-->Line_12 $$ updateChecksumInt(checkcrc, parametersLength)[ FD ]
Line_3 $$ CRC32 checkcrc = new CRC32()-->Line_18 $$ checkcrc.update(parametersBytes, 0, parametersBytes.length)[ FD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_22 $$ return null[ CD ]
Line_19 $$ int crc = input.readInt()-->Line_20 $$ if (crc == (int) checkcrc.getValue())[ FD ]
Line_11 $$ parametersLength = input.readShort() & 0xFFFF-->Line_12 $$ updateChecksumInt(checkcrc, parametersLength)[ FD ]
Line_4 $$ int version = input.readInt()-->Line_10 $$ if (version >= VERSION_22) [ FD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_9 $$ int parametersLength = 0[ CD ]
Line_3 $$ CRC32 checkcrc = new CRC32()-->Line_5 $$ updateChecksumInt(checkcrc, version)[ FD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_7 $$ updateChecksumInt(checkcrc, (int) (id & 0xFFFFFFFFL))[ CD ]
Line_4 $$ int version = input.readInt()-->Line_5 $$ updateChecksumInt(checkcrc, version)[ FD ]
Line_3 $$ CRC32 checkcrc = new CRC32()-->Line_12 $$ updateChecksumInt(checkcrc, parametersLength)[ FD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_6 $$ long id = input.readLong()[ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_3 $$ CRC32 checkcrc = new CRC32()[ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_4 $$ int version = input.readInt()[ FD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_18 $$ checkcrc.update(parametersBytes, 0, parametersBytes.length)[ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_19 $$ int crc = input.readInt()[ FD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_19 $$ int crc = input.readInt()[ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_10 $$ if (version >= VERSION_22) [ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_11 $$ parametersLength = input.readShort() & 0xFFFF[ FD ]
Line_3 $$ CRC32 checkcrc = new CRC32()-->Line_7 $$ updateChecksumInt(checkcrc, (int) (id & 0xFFFFFFFFL))[ FD ]
Line_9 $$ int parametersLength = 0-->Line_11 $$ parametersLength = input.readShort() & 0xFFFF[ FD ]
Line_10 $$ if (version >= VERSION_22) -->Line_12 $$ updateChecksumInt(checkcrc, parametersLength)[ CD ]
Line_20 $$ if (crc == (int) checkcrc.getValue())-->Line_21 $$ return new CommitLogDescriptor(version, id, parseCompression((Map<?, ?>) JSONValue.parse(new String(parametersBytes, StandardCharsets.UTF_8))))[ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_20 $$ if (crc == (int) checkcrc.getValue())[ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_5 $$ updateChecksumInt(checkcrc, version)[ CD ]
Line_2 $$ public static CommitLogDescriptor readHeader(DataInput input) throws IOException -->Line_4 $$ int version = input.readInt()[ CD ]
Line_10 $$ if (version >= VERSION_22) -->Line_11 $$ parametersLength = input.readShort() & 0xFFFF[ CD ]
