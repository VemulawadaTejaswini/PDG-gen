Line_3 $$ StringBuilder sb = new StringBuilder(source)-->Line_6 $$ for (int i = 0; i < chars.length && sb.length() > 0; i++) [ FD ]
Line_5 $$ boolean atLeastOneCharWasChopped = false-->Line_9 $$ atLeastOneCharWasChopped = true[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(source)-->Line_7 $$ if (sb.charAt(sb.length() - 1) == chars[i]) [ FD ]
Line_4 $$ while (true) -->Line_5 $$ boolean atLeastOneCharWasChopped = false[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder(source)-->Line_16 $$ return sb.toString()[ FD ]
Line_9 $$ atLeastOneCharWasChopped = true-->Line_12 $$ if (!atLeastOneCharWasChopped) [ FD ]
Line_7 $$ if (sb.charAt(sb.length() - 1) == chars[i]) -->Line_8 $$ sb.deleteCharAt(sb.length() - 1)[ CD ]
Line_2 $$ public static String chopTrailingChars(String source, char[] chars) -->Line_4 $$ while (true) [ CD ]
Line_7 $$ if (sb.charAt(sb.length() - 1) == chars[i]) -->Line_9 $$ atLeastOneCharWasChopped = true[ CD ]
Line_4 $$ while (true) -->Line_6 $$ for (int i = 0; i < chars.length && sb.length() > 0; i++) [ CD ]
Line_5 $$ boolean atLeastOneCharWasChopped = false-->Line_12 $$ if (!atLeastOneCharWasChopped) [ FD ]
Line_6 $$ for (int i = 0; i < chars.length && sb.length() > 0; i++) -->Line_7 $$ if (sb.charAt(sb.length() - 1) == chars[i]) [ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder(source)-->Line_8 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_2 $$ public static String chopTrailingChars(String source, char[] chars) -->Line_3 $$ StringBuilder sb = new StringBuilder(source)[ CD ]
Line_2 $$ public static String chopTrailingChars(String source, char[] chars) -->Line_16 $$ return sb.toString()[ CD ]
Line_4 $$ while (true) -->Line_12 $$ if (!atLeastOneCharWasChopped) [ CD ]
