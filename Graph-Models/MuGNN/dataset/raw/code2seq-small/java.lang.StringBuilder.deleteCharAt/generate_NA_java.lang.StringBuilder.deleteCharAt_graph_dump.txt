Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_54 $$ if (sb.substring(nlen, sb.length()).equals(prefix + "\n")) [ FD ]
Line_6 $$ prefix = indent + " * "-->Line_45 $$ sb.append(prefix)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_57 $$ if (// If comment has become multiline after formatting - it must be shown as multiline.[ FD ]
Line_8 $$ prefix = indent-->Line_45 $$ sb.append(prefix)[ FD ]
Line_28 $$ JDTag tag = JDTag.SEE-->Line_40 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_8 $$ prefix = indent[ FD ]
Line_4 $$ final String prefix-->Line_24 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_32 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())-->Line_48 $$ sb.append(tagDescription)[ FD ]
Line_32 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())-->Line_33 $$ sb.append(tagDescription)[ FD ]
Line_32 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())-->Line_41 $$ sb.append(tagDescription)[ FD ]
Line_36 $$ if (!isNull(mySince)) -->Line_38 $$ sb.append(prefix)[ CD ]
Line_8 $$ prefix = indent-->Line_38 $$ sb.append(prefix)[ FD ]
Line_28 $$ JDTag tag = JDTag.SEE-->Line_39 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_43 $$ if (myDeprecated != null) -->Line_48 $$ sb.append(tagDescription)[ CD ]
Line_57 $$ if (// If comment has become multiline after formatting - it must be shown as multiline.-->Line_61 $$ sb.append(indent)[ CD ]
Line_54 $$ if (sb.substring(nlen, sb.length()).equals(prefix + "\n")) -->Line_55 $$ sb.delete(nlen, sb.length())[ CD ]
Line_4 $$ final String prefix-->Line_38 $$ sb.append(prefix)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_31 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append(prefix)[ FD ]
Line_43 $$ if (myDeprecated != null) -->Line_45 $$ sb.append(prefix)[ CD ]
Line_15 $$ if (myFormatter.getSettings().JD_ADD_BLANK_AFTER_DESCRIPTION) -->Line_16 $$ sb.append(prefix)[ CD ]
Line_6 $$ prefix = indent + " * "-->Line_16 $$ sb.append(prefix)[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_63 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_61 $$ sb.append(indent)[ FD ]
Line_8 $$ prefix = indent-->Line_32 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_67 $$ return sb.toString()[ FD ]
Line_8 $$ prefix = indent-->Line_20 $$ generateSpecial(prefix, sb)[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_24 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_4 $$ final String prefix-->Line_14 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ FD ]
Line_12 $$ if (!isNull(myDescription)) -->Line_14 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ CD ]
Line_57 $$ if (// If comment has become multiline after formatting - it must be shown as multiline.-->Line_63 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_46 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_8 $$ prefix = indent-->Line_14 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_30 $$ sb.append(prefix)[ FD ]
Line_4 $$ final String prefix-->Line_20 $$ generateSpecial(prefix, sb)[ FD ]
Line_36 $$ if (!isNull(mySince)) -->Line_39 $$ sb.append(tag.getWithEndWhitespace())[ CD ]
Line_11 $$ int start = sb.length()-->Line_50 $$ if (sb.length() == start)[ FD ]
Line_43 $$ if (myDeprecated != null) -->Line_46 $$ sb.append(tag.getWithEndWhitespace())[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_41 $$ sb.append(tagDescription)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_45 $$ sb.append(prefix)[ FD ]
Line_22 $$ for (String aUnknownList : myUnknownList) -->Line_24 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_8 $$ prefix = indent-->Line_24 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_4 $$ final String prefix-->Line_45 $$ sb.append(prefix)[ FD ]
Line_4 $$ final String prefix-->Line_13 $$ sb.append(prefix)[ FD ]
Line_4 $$ final String prefix-->Line_16 $$ sb.append(prefix)[ FD ]
Line_43 $$ if (myDeprecated != null) -->Line_47 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.append(prefix)[ FD ]
Line_28 $$ JDTag tag = JDTag.SEE-->Line_47 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_4 $$ final String prefix-->Line_63 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append('\n')[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_11 $$ int start = sb.length()[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.append(myFormatter.getParser().formatJDTagDescription(aUnknownList, prefix))[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_38 $$ sb.append(prefix)[ FD ]
Line_4 $$ final String prefix-->Line_32 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_28 $$ JDTag tag = JDTag.SEE-->Line_32 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_63 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ FD ]
Line_5 $$ if (myFormatter.getSettings().JD_LEADING_ASTERISKS_ARE_ENABLED) -->Line_6 $$ prefix = indent + " * "[ CD ]
Line_6 $$ prefix = indent + " * "-->Line_47 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_55 $$ sb.delete(nlen, sb.length())[ FD ]
Line_8 $$ prefix = indent-->Line_63 $$ sb.replace(0, prefix.length(), myFirstLine + " ")[ FD ]
Line_5 $$ if (myFormatter.getSettings().JD_LEADING_ASTERISKS_ARE_ENABLED) -->Line_8 $$ prefix = indent[ CD ]
Line_28 $$ JDTag tag = JDTag.SEE-->Line_46 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_48 $$ sb.append(tagDescription)[ FD ]
Line_8 $$ prefix = indent-->Line_13 $$ sb.append(prefix)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ generateSpecial(prefix, sb)[ FD ]
Line_57 $$ if (// If comment has become multiline after formatting - it must be shown as multiline.-->Line_60 $$ sb.insert(0, myFirstLine + '\n')[ CD ]
Line_4 $$ final String prefix-->Line_40 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_4 $$ final String prefix-->Line_30 $$ sb.append(prefix)[ FD ]
Line_8 $$ prefix = indent-->Line_16 $$ sb.append(prefix)[ FD ]
Line_8 $$ prefix = indent-->Line_30 $$ sb.append(prefix)[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_13 $$ sb.append(prefix)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(prefix)[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_23 $$ sb.append(prefix)[ FD ]
Line_15 $$ if (myFormatter.getSettings().JD_ADD_BLANK_AFTER_DESCRIPTION) -->Line_17 $$ sb.append('\n')[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_33 $$ sb.append(tagDescription)[ FD ]
Line_36 $$ if (!isNull(mySince)) -->Line_40 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_14 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ FD ]
Line_4 $$ final String prefix-->Line_23 $$ sb.append(prefix)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_39 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_4 $$ final String prefix-->Line_6 $$ prefix = indent + " * "[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_20 $$ generateSpecial(prefix, sb)[ FD ]
Line_4 $$ final String prefix-->Line_47 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_64 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_66 $$ sb.append(' ').append(myEndLine)[ FD ]
Line_29 $$ for (String aSeeAlsoList : mySeeAlsoList) -->Line_32 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_12 $$ if (!isNull(myDescription)) -->Line_15 $$ if (myFormatter.getSettings().JD_ADD_BLANK_AFTER_DESCRIPTION) [ CD ]
Line_6 $$ prefix = indent + " * "-->Line_32 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(aSeeAlsoList, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_12 $$ if (!isNull(myDescription)) -->Line_13 $$ sb.append(prefix)[ CD ]
Line_8 $$ prefix = indent-->Line_40 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_50 $$ if (sb.length() == start)-->Line_51 $$ return null[ CD ]
Line_4 $$ final String prefix-->Line_8 $$ prefix = indent[ FD ]
Line_8 $$ prefix = indent-->Line_23 $$ sb.append(prefix)[ FD ]
Line_27 $$ if (!isNull(mySeeAlsoList)) -->Line_28 $$ JDTag tag = JDTag.SEE[ CD ]
Line_36 $$ if (!isNull(mySince)) -->Line_41 $$ sb.append(tagDescription)[ CD ]
Line_8 $$ prefix = indent-->Line_47 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(myDeprecated, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_57 $$ if (// If comment has become multiline after formatting - it must be shown as multiline.-->Line_64 $$ sb.deleteCharAt(sb.length() - 1)[ CD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(prefix)[ FD ]
Line_28 $$ JDTag tag = JDTag.SEE-->Line_31 $$ sb.append(tag.getWithEndWhitespace())[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_40 $$ StringBuilder tagDescription = myFormatter.getParser().formatJDTagDescription(mySince, prefix, true, tag.getDescriptionPrefix(prefix).length())[ FD ]
Line_6 $$ prefix = indent + " * "-->Line_14 $$ sb.append(myFormatter.getParser().formatJDTagDescription(myDescription, prefix))[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_50 $$ if (sb.length() == start)[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_60 $$ sb.insert(0, myFirstLine + '\n')[ FD ]
Line_10 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ sb.append(prefix)[ FD ]
