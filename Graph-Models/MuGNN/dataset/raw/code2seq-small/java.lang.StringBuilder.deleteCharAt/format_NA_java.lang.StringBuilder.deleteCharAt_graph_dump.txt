Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_13 $$ append(sb, content, pos, start)[ FD ]
Line_12 $$ if (start > pos) -->Line_13 $$ append(sb, content, pos, start)[ CD ]
Line_9 $$ for (int i = 0; i < passage.numMatches; i++) -->Line_11 $$ int end = passage.matchEnds[i][ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_15 $$ if (end > pos) -->Line_16 $$ sb.append(preTag)[ CD ]
Line_9 $$ for (int i = 0; i < passage.numMatches; i++) -->Line_10 $$ int start = passage.matchStarts[i][ CD ]
Line_2 $$ public Snippet[] format(Passage[] passages, String content) -->Line_3 $$ Snippet[] snippets = new Snippet[passages.length][ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR) [ FD ]
Line_2 $$ public Snippet[] format(Passage[] passages, String content) -->Line_17 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_24 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_9 $$ for (int i = 0; i < passage.numMatches; i++) -->Line_15 $$ if (end > pos) [ CD ]
Line_10 $$ int start = passage.matchStarts[i]-->Line_17 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_5 $$ for (int j = 0; j < passages.length; j++) -->Line_8 $$ pos = passage.startOffset[ CD ]
Line_4 $$ int pos-->Line_13 $$ append(sb, content, pos, start)[ FD ]
Line_4 $$ int pos-->Line_19 $$ pos = end[ FD ]
Line_4 $$ int pos-->Line_22 $$ append(sb, content, pos, Math.max(pos, passage.endOffset))[ FD ]
Line_11 $$ int end = passage.matchEnds[i]-->Line_19 $$ pos = end[ FD ]
Line_4 $$ int pos-->Line_17 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_25 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR) -->Line_26 $$ sb.deleteCharAt(sb.length() - 1)[ CD ]
Line_19 $$ pos = end-->Line_13 $$ append(sb, content, pos, start)[ FD ]
Line_11 $$ int end = passage.matchEnds[i]-->Line_17 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ snippets[j] = new Snippet(sb.toString().trim(), passage.score, passage.numMatches > 0)[ FD ]
Line_15 $$ if (end > pos) -->Line_17 $$ append(sb, content, Math.max(pos, start), end)[ CD ]
Line_2 $$ public Snippet[] format(Passage[] passages, String content) -->Line_4 $$ int pos[ CD ]
Line_19 $$ pos = end-->Line_22 $$ append(sb, content, pos, Math.max(pos, passage.endOffset))[ FD ]
Line_8 $$ pos = passage.startOffset-->Line_15 $$ if (end > pos) [ FD ]
Line_10 $$ int start = passage.matchStarts[i]-->Line_13 $$ append(sb, content, pos, start)[ FD ]
Line_2 $$ public Snippet[] format(Passage[] passages, String content) -->Line_5 $$ for (int j = 0; j < passages.length; j++) [ CD ]
Line_8 $$ pos = passage.startOffset-->Line_12 $$ if (start > pos) [ FD ]
Line_8 $$ pos = passage.startOffset-->Line_13 $$ append(sb, content, pos, start)[ FD ]
Line_8 $$ pos = passage.startOffset-->Line_17 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_5 $$ for (int j = 0; j < passages.length; j++) -->Line_28 $$ snippets[j] = new Snippet(sb.toString().trim(), passage.score, passage.numMatches > 0)[ CD ]
Line_11 $$ int end = passage.matchEnds[i]-->Line_15 $$ if (end > pos) [ FD ]
Line_5 $$ for (int j = 0; j < passages.length; j++) -->Line_23 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.PARAGRAPH_SEPARATOR) [ CD ]
Line_5 $$ for (int j = 0; j < passages.length; j++) -->Line_6 $$ Passage passage = passages[j][ CD ]
Line_4 $$ int pos-->Line_15 $$ if (end > pos) [ FD ]
Line_9 $$ for (int i = 0; i < passage.numMatches; i++) -->Line_12 $$ if (start > pos) [ CD ]
Line_19 $$ pos = end-->Line_12 $$ if (start > pos) [ FD ]
Line_19 $$ pos = end-->Line_15 $$ if (end > pos) [ FD ]
Line_2 $$ public Snippet[] format(Passage[] passages, String content) -->Line_30 $$ return snippets[ CD ]
Line_19 $$ pos = end-->Line_17 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ append(sb, content, pos, Math.max(pos, passage.endOffset))[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_16 $$ sb.append(preTag)[ FD ]
Line_5 $$ for (int j = 0; j < passages.length; j++) -->Line_9 $$ for (int i = 0; i < passage.numMatches; i++) [ CD ]
Line_23 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.PARAGRAPH_SEPARATOR) -->Line_25 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR) [ CD ]
Line_8 $$ pos = passage.startOffset-->Line_22 $$ append(sb, content, pos, Math.max(pos, passage.endOffset))[ FD ]
Line_15 $$ if (end > pos) -->Line_18 $$ sb.append(postTag)[ CD ]
Line_2 $$ public Snippet[] format(Passage[] passages, String content) -->Line_22 $$ append(sb, content, pos, Math.max(pos, passage.endOffset))[ FD ]
Line_8 $$ pos = passage.startOffset-->Line_19 $$ pos = end[ FD ]
Line_2 $$ public Snippet[] format(Passage[] passages, String content) -->Line_13 $$ append(sb, content, pos, start)[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append(postTag)[ FD ]
Line_10 $$ int start = passage.matchStarts[i]-->Line_12 $$ if (start > pos) [ FD ]
Line_4 $$ int pos-->Line_12 $$ if (start > pos) [ FD ]
Line_23 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.PARAGRAPH_SEPARATOR) -->Line_24 $$ sb.deleteCharAt(sb.length() - 1)[ CD ]
Line_5 $$ for (int j = 0; j < passages.length; j++) -->Line_7 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_5 $$ for (int j = 0; j < passages.length; j++) -->Line_22 $$ append(sb, content, pos, Math.max(pos, passage.endOffset))[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_26 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_4 $$ int pos-->Line_8 $$ pos = passage.startOffset[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.PARAGRAPH_SEPARATOR) [ FD ]
Line_15 $$ if (end > pos) -->Line_19 $$ pos = end[ CD ]
