Line_5 $$ int pos-->Line_21 $$ pos = end[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_30 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_17 $$ if (end > pos) -->Line_19 $$ append(sb, content, Math.max(pos, start), end)[ CD ]
Line_12 $$ int end = passage.matchEnds[i]-->Line_21 $$ pos = end[ FD ]
Line_6 $$ for (int j = 0; j < passages.length; j++) -->Line_10 $$ for (int i = 0; i < passage.numMatches; i++) [ CD ]
Line_5 $$ int pos-->Line_15 $$ append(sb, content, pos, start)[ FD ]
Line_12 $$ int end = passage.matchEnds[i]-->Line_17 $$ if (end > pos) [ FD ]
Line_9 $$ pos = passage.startOffset-->Line_19 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_9 $$ pos = passage.startOffset-->Line_15 $$ append(sb, content, pos, start)[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_18 $$ sb.append(preTag)[ FD ]
Line_17 $$ if (end > pos) -->Line_20 $$ sb.append(postTag)[ CD ]
Line_9 $$ pos = passage.startOffset-->Line_17 $$ if (end > pos) [ FD ]
Line_5 $$ int pos-->Line_9 $$ pos = passage.startOffset[ FD ]
Line_17 $$ if (end > pos) -->Line_18 $$ sb.append(preTag)[ CD ]
Line_12 $$ int end = passage.matchEnds[i]-->Line_19 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_17 $$ if (end > pos) -->Line_21 $$ pos = end[ CD ]
Line_10 $$ for (int i = 0; i < passage.numMatches; i++) -->Line_17 $$ if (end > pos) [ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_20 $$ sb.append(postTag)[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR) [ FD ]
Line_5 $$ int pos-->Line_17 $$ if (end > pos) [ FD ]
Line_21 $$ pos = end-->Line_17 $$ if (end > pos) [ FD ]
Line_11 $$ int start = passage.matchStarts[i]-->Line_15 $$ append(sb, content, pos, start)[ FD ]
Line_6 $$ for (int j = 0; j < passages.length; j++) -->Line_9 $$ pos = passage.startOffset[ CD ]
Line_10 $$ for (int i = 0; i < passage.numMatches; i++) -->Line_12 $$ int end = passage.matchEnds[i][ CD ]
Line_6 $$ for (int j = 0; j < passages.length; j++) -->Line_7 $$ Passage passage = passages[j][ CD ]
Line_5 $$ int pos-->Line_19 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_9 $$ pos = passage.startOffset-->Line_21 $$ pos = end[ FD ]
Line_6 $$ for (int j = 0; j < passages.length; j++) -->Line_8 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_28 $$ sb.deleteCharAt(sb.length() - 1)[ FD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ append(sb, content, pos, start)[ FD ]
Line_11 $$ int start = passage.matchStarts[i]-->Line_19 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_21 $$ pos = end-->Line_19 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
Line_10 $$ for (int i = 0; i < passage.numMatches; i++) -->Line_11 $$ int start = passage.matchStarts[i][ CD ]
Line_21 $$ pos = end-->Line_15 $$ append(sb, content, pos, start)[ FD ]
Line_29 $$ if (sb.charAt(sb.length() - 1) == HighlightUtils.NULL_SEPARATOR) -->Line_30 $$ sb.deleteCharAt(sb.length() - 1)[ CD ]
Line_8 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ append(sb, content, Math.max(pos, start), end)[ FD ]
