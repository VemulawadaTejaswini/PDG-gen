Line_12 $$ KeyStroke stroke = null-->Line_19 $$ stroke = KeyStroke.getKeyStroke(first.getKeyCode(), first.getModifiers(), false)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_76 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_52 $$ context.message("Performed action: " + actionName, context.getCurrentLine())[ FD ]
Line_6 $$ if (targetAction == null) -->Line_8 $$ return ActionCallback.REJECTED[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_4 $$ final ActionManager am = ActionManager.getInstance()[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_7 $$ dumpError(context, "Unknown action: " + actionName)[ FD ]
Line_14 $$ if (each instanceof KeyboardShortcut) -->Line_18 $$ if (second == null) [ CD ]
Line_61 $$ context.runPooledThread(new Runnable() -->Line_65 $$ type(context.getRobot(), finalStroke)[ CD ]
Line_51 $$ if (targetAction.equals(action)) -->Line_53 $$ am.removeAnActionListener(listener.get())[ CD ]
Line_13 $$ for (Shortcut each : sc) -->Line_14 $$ if (each instanceof KeyboardShortcut) [ FD ]
Line_34 $$ IdeFocusManager.getGlobalInstance().doWhenFocusSettlesDown(new Runnable() -->Line_38 $$ final Ref<AnActionListener> listener = new Ref<AnActionListener>()[ CD ]
Line_6 $$ if (targetAction == null) -->Line_7 $$ dumpError(context, "Unknown action: " + actionName)[ CD ]
Line_34 $$ IdeFocusManager.getGlobalInstance().doWhenFocusSettlesDown(new Runnable() -->Line_39 $$ listener.set(new AnActionListener.Adapter() [ CD ]
Line_4 $$ final ActionManager am = ActionManager.getInstance()-->Line_79 $$ am.tryToExecute(targetAction, input, null, null, false).doWhenProcessed(result.createSetDoneRunnable())[ FD ]
Line_38 $$ final Ref<AnActionListener> listener = new Ref<AnActionListener>()-->Line_53 $$ am.removeAnActionListener(listener.get())[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_5 $$ final AnAction targetAction = am.getAction(actionName)[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_3 $$ final String actionName = getText().substring(PREFIX.length()).trim()[ CD ]
Line_51 $$ if (targetAction.equals(action)) -->Line_54 $$ result.setDone()[ CD ]
Line_15 $$ final KeyboardShortcut ks = (KeyboardShortcut) each-->Line_16 $$ final KeyStroke first = ks.getFirstKeyStroke()[ FD ]
Line_4 $$ final ActionManager am = ActionManager.getInstance()-->Line_48 $$ am.removeAnActionListener(listener.get())[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_65 $$ type(context.getRobot(), finalStroke)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_10 $$ if (!context.isUseDirectActionCall()) [ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_82 $$ return result[ CD ]
Line_15 $$ final KeyboardShortcut ks = (KeyboardShortcut) each-->Line_17 $$ final KeyStroke second = ks.getSecondKeyStroke()[ FD ]
Line_18 $$ if (second == null) -->Line_19 $$ stroke = KeyStroke.getKeyStroke(first.getKeyCode(), first.getModifiers(), false)[ CD ]
Line_25 $$ final ActionCallback result = new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Timed out calling action id=" + actionName, new Throwable(), true) -->Line_79 $$ am.tryToExecute(targetAction, input, null, null, false).doWhenProcessed(result.createSetDoneRunnable())[ FD ]
Line_3 $$ final String actionName = getText().substring(PREFIX.length()).trim()-->Line_73 $$ final InputEvent input = getInputEvent(actionName)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_29 $$ context.error(getMessage(), getLine())[ FD ]
Line_38 $$ final Ref<AnActionListener> listener = new Ref<AnActionListener>()-->Line_39 $$ listener.set(new AnActionListener.Adapter() [ FD ]
Line_4 $$ final ActionManager am = ActionManager.getInstance()-->Line_60 $$ am.addAnActionListener(listener.get())[ FD ]
Line_24 $$ if (stroke != null) -->Line_25 $$ final ActionCallback result = new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Timed out calling action id=" + actionName, new Throwable(), true) [ CD ]
Line_25 $$ final ActionCallback result = new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Timed out calling action id=" + actionName, new Throwable(), true) -->Line_54 $$ result.setDone()[ FD ]
Line_76 $$ SwingUtilities.invokeLater(new Runnable() -->Line_79 $$ am.tryToExecute(targetAction, input, null, null, false).doWhenProcessed(result.createSetDoneRunnable())[ CD ]
Line_14 $$ if (each instanceof KeyboardShortcut) -->Line_17 $$ final KeyStroke second = ks.getSecondKeyStroke()[ CD ]
Line_47 $$ if (context.isDisposed()) -->Line_48 $$ am.removeAnActionListener(listener.get())[ CD ]
Line_10 $$ if (!context.isUseDirectActionCall()) -->Line_12 $$ KeyStroke stroke = null[ CD ]
Line_24 $$ if (stroke != null) -->Line_70 $$ return result[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_10 $$ if (!context.isUseDirectActionCall()) [ FD ]
Line_24 $$ if (stroke != null) -->Line_34 $$ IdeFocusManager.getGlobalInstance().doWhenFocusSettlesDown(new Runnable() [ CD ]
Line_4 $$ final ActionManager am = ActionManager.getInstance()-->Line_5 $$ final AnAction targetAction = am.getAction(actionName)[ FD ]
Line_43 $$ SwingUtilities.invokeLater(new Runnable() -->Line_51 $$ if (targetAction.equals(action)) [ CD ]
Line_17 $$ final KeyStroke second = ks.getSecondKeyStroke()-->Line_18 $$ if (second == null) [ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_75 $$ context.getRobot().delay(Registry.intValue("actionSystem.playback.delay"))[ CD ]
Line_12 $$ KeyStroke stroke = null-->Line_32 $$ context.message("Invoking action via shortcut: " + stroke.toString(), getLine())[ FD ]
Line_16 $$ final KeyStroke first = ks.getFirstKeyStroke()-->Line_19 $$ stroke = KeyStroke.getKeyStroke(first.getKeyCode(), first.getModifiers(), false)[ FD ]
Line_12 $$ KeyStroke stroke = null-->Line_24 $$ if (stroke != null) [ FD ]
Line_3 $$ final String actionName = getText().substring(PREFIX.length()).trim()-->Line_5 $$ final AnAction targetAction = am.getAction(actionName)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_73 $$ final InputEvent input = getInputEvent(actionName)[ CD ]
Line_10 $$ if (!context.isUseDirectActionCall()) -->Line_11 $$ final Shortcut[] sc = KeymapManager.getInstance().getActiveKeymap().getShortcuts(actionName)[ CD ]
Line_19 $$ stroke = KeyStroke.getKeyStroke(first.getKeyCode(), first.getModifiers(), false)-->Line_32 $$ context.message("Invoking action via shortcut: " + stroke.toString(), getLine())[ FD ]
Line_38 $$ final Ref<AnActionListener> listener = new Ref<AnActionListener>()-->Line_60 $$ am.addAnActionListener(listener.get())[ FD ]
Line_38 $$ final Ref<AnActionListener> listener = new Ref<AnActionListener>()-->Line_48 $$ am.removeAnActionListener(listener.get())[ FD ]
Line_4 $$ final ActionManager am = ActionManager.getInstance()-->Line_53 $$ am.removeAnActionListener(listener.get())[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_75 $$ context.getRobot().delay(Registry.intValue("actionSystem.playback.delay"))[ FD ]
Line_43 $$ SwingUtilities.invokeLater(new Runnable() -->Line_47 $$ if (context.isDisposed()) [ CD ]
Line_14 $$ if (each instanceof KeyboardShortcut) -->Line_16 $$ final KeyStroke first = ks.getFirstKeyStroke()[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_47 $$ if (context.isDisposed()) [ FD ]
Line_14 $$ if (each instanceof KeyboardShortcut) -->Line_15 $$ final KeyboardShortcut ks = (KeyboardShortcut) each[ CD ]
Line_5 $$ final AnAction targetAction = am.getAction(actionName)-->Line_51 $$ if (targetAction.equals(action)) [ FD ]
Line_39 $$ listener.set(new AnActionListener.Adapter() -->Line_51 $$ if (targetAction.equals(action)) [ FD ]
Line_5 $$ final AnAction targetAction = am.getAction(actionName)-->Line_6 $$ if (targetAction == null) [ FD ]
Line_25 $$ final ActionCallback result = new TimedOutCallback(Registry.intValue("actionSystem.commandProcessingTimeout"), "Timed out calling action id=" + actionName, new Throwable(), true) -->Line_29 $$ context.error(getMessage(), getLine())[ CD ]
Line_5 $$ final AnAction targetAction = am.getAction(actionName)-->Line_79 $$ am.tryToExecute(targetAction, input, null, null, false).doWhenProcessed(result.createSetDoneRunnable())[ FD ]
Line_24 $$ if (stroke != null) -->Line_32 $$ context.message("Invoking action via shortcut: " + stroke.toString(), getLine())[ CD ]
Line_10 $$ if (!context.isUseDirectActionCall()) -->Line_24 $$ if (stroke != null) [ CD ]
Line_51 $$ if (targetAction.equals(action)) -->Line_52 $$ context.message("Performed action: " + actionName, context.getCurrentLine())[ CD ]
Line_39 $$ listener.set(new AnActionListener.Adapter() -->Line_43 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_47 $$ if (context.isDisposed()) -->Line_49 $$ return[ CD ]
Line_34 $$ IdeFocusManager.getGlobalInstance().doWhenFocusSettlesDown(new Runnable() -->Line_60 $$ am.addAnActionListener(listener.get())[ CD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_32 $$ context.message("Invoking action via shortcut: " + stroke.toString(), getLine())[ FD ]
Line_3 $$ final String actionName = getText().substring(PREFIX.length()).trim()-->Line_11 $$ final Shortcut[] sc = KeymapManager.getInstance().getActiveKeymap().getShortcuts(actionName)[ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_61 $$ context.runPooledThread(new Runnable() [ FD ]
Line_19 $$ stroke = KeyStroke.getKeyStroke(first.getKeyCode(), first.getModifiers(), false)-->Line_24 $$ if (stroke != null) [ FD ]
Line_2 $$ protected ActionCallback _execute(final PlaybackContext context) -->Line_6 $$ if (targetAction == null) [ CD ]
Line_34 $$ IdeFocusManager.getGlobalInstance().doWhenFocusSettlesDown(new Runnable() -->Line_61 $$ context.runPooledThread(new Runnable() [ CD ]
