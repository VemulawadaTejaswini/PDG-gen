Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_4 $$ Class<?> element = TestComponentScanClass.class[ CD ]
Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_9 $$ assertNotNull(excludeFilters)[ CD ]
Line_3 $$ String[] expected = asArray("com.example.app.test")-->Line_7 $$ assertArrayEquals("basePackages for " + element, expected, attributes.getStringArray("basePackages"))[ FD ]
Line_8 $$ Filter[] excludeFilters = attributes.getAnnotationArray("excludeFilters", Filter.class)-->Line_10 $$ List<String> patterns = stream(excludeFilters).map(Filter::<>pattern).collect(toList())[ FD ]
Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_8 $$ Filter[] excludeFilters = attributes.getAnnotationArray("excludeFilters", Filter.class)[ CD ]
Line_5 $$ AnnotationAttributes attributes = findMergedAnnotationAttributes(element, ComponentScan.class)-->Line_7 $$ assertArrayEquals("basePackages for " + element, expected, attributes.getStringArray("basePackages"))[ FD ]
Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_5 $$ AnnotationAttributes attributes = findMergedAnnotationAttributes(element, ComponentScan.class)[ CD ]
Line_5 $$ AnnotationAttributes attributes = findMergedAnnotationAttributes(element, ComponentScan.class)-->Line_8 $$ Filter[] excludeFilters = attributes.getAnnotationArray("excludeFilters", Filter.class)[ FD ]
Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_6 $$ assertNotNull("Should find @ComponentScan on " + element, attributes)[ CD ]
Line_5 $$ AnnotationAttributes attributes = findMergedAnnotationAttributes(element, ComponentScan.class)-->Line_6 $$ assertNotNull("Should find @ComponentScan on " + element, attributes)[ FD ]
Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_10 $$ List<String> patterns = stream(excludeFilters).map(Filter::<>pattern).collect(toList())[ CD ]
Line_10 $$ List<String> patterns = stream(excludeFilters).map(Filter::<>pattern).collect(toList())-->Line_11 $$ assertEquals(asList("*Test", "*Tests"), patterns)[ FD ]
Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_11 $$ assertEquals(asList("*Test", "*Tests"), patterns)[ CD ]
Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_7 $$ assertArrayEquals("basePackages for " + element, expected, attributes.getStringArray("basePackages"))[ CD ]
Line_8 $$ Filter[] excludeFilters = attributes.getAnnotationArray("excludeFilters", Filter.class)-->Line_9 $$ assertNotNull(excludeFilters)[ FD ]
Line_4 $$ Class<?> element = TestComponentScanClass.class-->Line_5 $$ AnnotationAttributes attributes = findMergedAnnotationAttributes(element, ComponentScan.class)[ FD ]
Line_2 $$ public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() -->Line_3 $$ String[] expected = asArray("com.example.app.test")[ CD ]
