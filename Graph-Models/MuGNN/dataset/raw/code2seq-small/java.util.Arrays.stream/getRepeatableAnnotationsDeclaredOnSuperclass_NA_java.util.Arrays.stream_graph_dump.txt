Line_12 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())-->Line_17 $$ assertThat(values, is(expectedValuesSpring))[ FD ]
Line_10 $$ Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class)-->Line_12 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_13 $$ assertThat(values, is(expectedValuesSpring))[ CD ]
Line_5 $$ final List<String> expectedValuesSpring = asList("A", "B", "C", "meta1")-->Line_13 $$ assertThat(values, is(expectedValuesSpring))[ FD ]
Line_14 $$ set = getRepeatableAnnotations(clazz, MyRepeatable.class)-->Line_16 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())[ FD ]
Line_8 $$ List<String> values = stream(array).map(MyRepeatable::<>value).collect(toList())-->Line_17 $$ assertThat(values, is(expectedValuesSpring))[ FD ]
Line_4 $$ final List<String> expectedValuesJava = asList("A", "B", "C")-->Line_9 $$ assertThat(values, is(expectedValuesJava))[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_5 $$ final List<String> expectedValuesSpring = asList("A", "B", "C", "meta1")[ CD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_3 $$ final Class<?> clazz = SubMyRepeatableClass.class[ CD ]
Line_3 $$ final Class<?> clazz = SubMyRepeatableClass.class-->Line_14 $$ set = getRepeatableAnnotations(clazz, MyRepeatable.class)[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_4 $$ final List<String> expectedValuesJava = asList("A", "B", "C")[ CD ]
Line_8 $$ List<String> values = stream(array).map(MyRepeatable::<>value).collect(toList())-->Line_12 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())[ FD ]
Line_8 $$ List<String> values = stream(array).map(MyRepeatable::<>value).collect(toList())-->Line_16 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_6 $$ MyRepeatable[] array = clazz.getAnnotationsByType(MyRepeatable.class)[ CD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_10 $$ Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class)[ CD ]
Line_12 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())-->Line_16 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())[ FD ]
Line_10 $$ Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class)-->Line_11 $$ assertNotNull(set)[ FD ]
Line_10 $$ Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class)-->Line_16 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_9 $$ assertThat(values, is(expectedValuesJava))[ CD ]
Line_16 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())-->Line_17 $$ assertThat(values, is(expectedValuesSpring))[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_17 $$ assertThat(values, is(expectedValuesSpring))[ CD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_11 $$ assertNotNull(set)[ CD ]
Line_6 $$ MyRepeatable[] array = clazz.getAnnotationsByType(MyRepeatable.class)-->Line_8 $$ List<String> values = stream(array).map(MyRepeatable::<>value).collect(toList())[ FD ]
Line_8 $$ List<String> values = stream(array).map(MyRepeatable::<>value).collect(toList())-->Line_13 $$ assertThat(values, is(expectedValuesSpring))[ FD ]
Line_6 $$ MyRepeatable[] array = clazz.getAnnotationsByType(MyRepeatable.class)-->Line_7 $$ assertNotNull(array)[ FD ]
Line_8 $$ List<String> values = stream(array).map(MyRepeatable::<>value).collect(toList())-->Line_9 $$ assertThat(values, is(expectedValuesJava))[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_8 $$ List<String> values = stream(array).map(MyRepeatable::<>value).collect(toList())[ CD ]
Line_3 $$ final Class<?> clazz = SubMyRepeatableClass.class-->Line_10 $$ Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class)[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_15 $$ assertNotNull(set)[ CD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_7 $$ assertNotNull(array)[ CD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_14 $$ set = getRepeatableAnnotations(clazz, MyRepeatable.class)[ CD ]
Line_10 $$ Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class)-->Line_15 $$ assertNotNull(set)[ FD ]
Line_14 $$ set = getRepeatableAnnotations(clazz, MyRepeatable.class)-->Line_15 $$ assertNotNull(set)[ FD ]
Line_10 $$ Set<MyRepeatable> set = getRepeatableAnnotations(clazz, MyRepeatable.class, MyRepeatableContainer.class)-->Line_14 $$ set = getRepeatableAnnotations(clazz, MyRepeatable.class)[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_12 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())[ CD ]
Line_5 $$ final List<String> expectedValuesSpring = asList("A", "B", "C", "meta1")-->Line_17 $$ assertThat(values, is(expectedValuesSpring))[ FD ]
Line_12 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())-->Line_13 $$ assertThat(values, is(expectedValuesSpring))[ FD ]
Line_3 $$ final Class<?> clazz = SubMyRepeatableClass.class-->Line_6 $$ MyRepeatable[] array = clazz.getAnnotationsByType(MyRepeatable.class)[ FD ]
Line_2 $$ public void getRepeatableAnnotationsDeclaredOnSuperclass() -->Line_16 $$ values = set.stream().map(MyRepeatable::<>value).collect(toList())[ CD ]
