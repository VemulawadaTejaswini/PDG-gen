Line_2 $$ void replayMutation(byte[] inputBuffer, int size, final long entryLocation, final CommitLogDescriptor desc) throws IOException -->Line_26 $$ if (logger.isTraceEnabled())[ CD ]
Line_11 $$ if (i == null) -->Line_13 $$ invalidMutations.put(ex.cfId, i)[ CD ]
Line_5 $$ mutation = Mutation.serializer.deserialize(bufIn, desc.getMessagingVersion(), SerializationHelper.Flag.LOCAL)-->Line_6 $$ for (PartitionUpdate upd : mutation.getPartitionUpdates()) upd.validate()[ FD ]
Line_10 $$ AtomicInteger i = invalidMutations.get(ex.cfId)-->Line_11 $$ if (i == null) [ FD ]
Line_3 $$ final Mutation mutation-->Line_5 $$ mutation = Mutation.serializer.deserialize(bufIn, desc.getMessagingVersion(), SerializationHelper.Flag.LOCAL)[ FD ]
Line_3 $$ final Mutation mutation-->Line_29 $$ futures.offer(mutationInitiator.initiateMutation(mutation, desc.id, size, entryLocation, this))[ FD ]
Line_2 $$ void replayMutation(byte[] inputBuffer, int size, final long entryLocation, final CommitLogDescriptor desc) throws IOException -->Line_30 $$ while (futures.size() > MAX_OUTSTANDING_REPLAY_COUNT || pendingMutationBytes > MAX_OUTSTANDING_REPLAY_BYTES || (!futures.isEmpty() && futures.peek().isDone())) [ CD ]
Line_30 $$ while (futures.size() > MAX_OUTSTANDING_REPLAY_COUNT || pendingMutationBytes > MAX_OUTSTANDING_REPLAY_BYTES || (!futures.isEmpty() && futures.peek().isDone())) -->Line_31 $$ pendingMutationBytes -= FBUtilities.waitOnFuture(futures.poll())[ CD ]
Line_2 $$ void replayMutation(byte[] inputBuffer, int size, final long entryLocation, final CommitLogDescriptor desc) throws IOException -->Line_3 $$ final Mutation mutation[ CD ]
Line_2 $$ void replayMutation(byte[] inputBuffer, int size, final long entryLocation, final CommitLogDescriptor desc) throws IOException -->Line_21 $$ out.write(inputBuffer, 0, size)[ FD ]
Line_8 $$ if (ex.cfId == null)-->Line_9 $$ return[ CD ]
Line_11 $$ if (i == null) -->Line_15 $$ i.incrementAndGet()[ CD ]
Line_3 $$ final Mutation mutation-->Line_6 $$ for (PartitionUpdate upd : mutation.getPartitionUpdates()) upd.validate()[ FD ]
Line_2 $$ void replayMutation(byte[] inputBuffer, int size, final long entryLocation, final CommitLogDescriptor desc) throws IOException -->Line_5 $$ mutation = Mutation.serializer.deserialize(bufIn, desc.getMessagingVersion(), SerializationHelper.Flag.LOCAL)[ FD ]
Line_26 $$ if (logger.isTraceEnabled())-->Line_27 $$ logger.trace("replaying mutation for [ CD ]
Line_3 $$ final Mutation mutation-->Line_27 $$ logger.trace("replaying mutation for [ FD ]
Line_4 $$ try (RebufferingInputStream bufIn = new DataInputBuffer(inputBuffer, 0, size)) -->Line_5 $$ mutation = Mutation.serializer.deserialize(bufIn, desc.getMessagingVersion(), SerializationHelper.Flag.LOCAL)[ FD ]
Line_5 $$ mutation = Mutation.serializer.deserialize(bufIn, desc.getMessagingVersion(), SerializationHelper.Flag.LOCAL)-->Line_27 $$ logger.trace("replaying mutation for [ FD ]
Line_2 $$ void replayMutation(byte[] inputBuffer, int size, final long entryLocation, final CommitLogDescriptor desc) throws IOException -->Line_29 $$ futures.offer(mutationInitiator.initiateMutation(mutation, desc.id, size, entryLocation, this))[ CD ]
Line_2 $$ void replayMutation(byte[] inputBuffer, int size, final long entryLocation, final CommitLogDescriptor desc) throws IOException -->Line_29 $$ futures.offer(mutationInitiator.initiateMutation(mutation, desc.id, size, entryLocation, this))[ FD ]
Line_5 $$ mutation = Mutation.serializer.deserialize(bufIn, desc.getMessagingVersion(), SerializationHelper.Flag.LOCAL)-->Line_29 $$ futures.offer(mutationInitiator.initiateMutation(mutation, desc.id, size, entryLocation, this))[ FD ]
Line_19 $$ File f = File.createTempFile("mutation", "dat")-->Line_23 $$ handleReplayError(false, "Unexpected error deserializing mutation; saved to %s.  " + "This may be caused by replaying a mutation against a table with the same name but incompatible schema.  " + "Exception follows: %s", f.getAbsolutePath(), t)[ FD ]
Line_12 $$ i = new AtomicInteger(1)-->Line_13 $$ invalidMutations.put(ex.cfId, i)[ FD ]
Line_10 $$ AtomicInteger i = invalidMutations.get(ex.cfId)-->Line_13 $$ invalidMutations.put(ex.cfId, i)[ FD ]
Line_11 $$ if (i == null) -->Line_12 $$ i = new AtomicInteger(1)[ CD ]
Line_10 $$ AtomicInteger i = invalidMutations.get(ex.cfId)-->Line_12 $$ i = new AtomicInteger(1)[ FD ]
Line_10 $$ AtomicInteger i = invalidMutations.get(ex.cfId)-->Line_15 $$ i.incrementAndGet()[ FD ]
Line_20 $$ try (DataOutputStream out = new DataOutputStream(new FileOutputStream(f))) -->Line_21 $$ out.write(inputBuffer, 0, size)[ FD ]
Line_12 $$ i = new AtomicInteger(1)-->Line_15 $$ i.incrementAndGet()[ FD ]
