Line_6 $$ final EndpointState state = new EndpointState(hb)-->Line_18 $$ for (Map.Entry<ApplicationState, VersionedValue> entry : state.states()) values.put(entry.getKey(), entry.getValue())[ FD ]
Line_16 $$ for (int i = 0; i < 50; i++) -->Line_19 $$ if (values.containsKey(ApplicationState.STATUS) && !values.containsKey(ApplicationState.TOKENS)) [ CD ]
Line_16 $$ for (int i = 0; i < 50; i++) -->Line_17 $$ Map<ApplicationState, VersionedValue> values = new EnumMap(ApplicationState.class)[ CD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_4 $$ final List<Token> tokens = Collections.singletonList(token)[ CD ]
Line_4 $$ final List<Token> tokens = Collections.singletonList(token)-->Line_10 $$ state.addApplicationState(ApplicationState.TOKENS, valueFactory.tokens(tokens))[ FD ]
Line_19 $$ if (values.containsKey(ApplicationState.STATUS) && !values.containsKey(ApplicationState.TOKENS)) -->Line_20 $$ numFailures.incrementAndGet()[ CD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_30 $$ assertTrue(numFailures.get() == 0)[ CD ]
Line_17 $$ Map<ApplicationState, VersionedValue> values = new EnumMap(ApplicationState.class)-->Line_18 $$ values.put(entry.getKey(), entry.getValue())[ FD ]
Line_8 $$ Thread t1 = new Thread(new Runnable() -->Line_10 $$ state.addApplicationState(ApplicationState.TOKENS, valueFactory.tokens(tokens))[ CD ]
Line_19 $$ if (values.containsKey(ApplicationState.STATUS) && !values.containsKey(ApplicationState.TOKENS)) -->Line_21 $$ System.out.println(String.format("Failed: %s", values))[ CD ]
Line_6 $$ final EndpointState state = new EndpointState(hb)-->Line_11 $$ state.addApplicationState(ApplicationState.STATUS, valueFactory.normal(tokens))[ FD ]
Line_3 $$ final Token token = DatabaseDescriptor.getPartitioner().getRandomToken()-->Line_4 $$ final List<Token> tokens = Collections.singletonList(token)[ FD ]
Line_8 $$ Thread t1 = new Thread(new Runnable() -->Line_26 $$ t1.start()[ FD ]
Line_8 $$ Thread t1 = new Thread(new Runnable() -->Line_11 $$ state.addApplicationState(ApplicationState.STATUS, valueFactory.normal(tokens))[ CD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_5 $$ final HeartBeatState hb = new HeartBeatState(0)[ CD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_3 $$ final Token token = DatabaseDescriptor.getPartitioner().getRandomToken()[ CD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_29 $$ t2.join()[ CD ]
Line_7 $$ final AtomicInteger numFailures = new AtomicInteger()-->Line_20 $$ numFailures.incrementAndGet()[ FD ]
Line_4 $$ final List<Token> tokens = Collections.singletonList(token)-->Line_11 $$ state.addApplicationState(ApplicationState.STATUS, valueFactory.normal(tokens))[ FD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_26 $$ t1.start()[ CD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_27 $$ t2.start()[ CD ]
Line_6 $$ final EndpointState state = new EndpointState(hb)-->Line_10 $$ state.addApplicationState(ApplicationState.TOKENS, valueFactory.tokens(tokens))[ FD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_6 $$ final EndpointState state = new EndpointState(hb)[ CD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_8 $$ Thread t1 = new Thread(new Runnable() [ CD ]
Line_7 $$ final AtomicInteger numFailures = new AtomicInteger()-->Line_30 $$ assertTrue(numFailures.get() == 0)[ FD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_7 $$ final AtomicInteger numFailures = new AtomicInteger()[ CD ]
Line_14 $$ Thread t2 = new Thread(new Runnable() -->Line_16 $$ for (int i = 0; i < 50; i++) [ CD ]
Line_8 $$ Thread t1 = new Thread(new Runnable() -->Line_28 $$ t1.join()[ FD ]
Line_2 $$ private void innerTestMultiThreadedReadConsistency() throws InterruptedException -->Line_28 $$ t1.join()[ CD ]
Line_17 $$ Map<ApplicationState, VersionedValue> values = new EnumMap(ApplicationState.class)-->Line_19 $$ if (values.containsKey(ApplicationState.STATUS) && !values.containsKey(ApplicationState.TOKENS)) [ FD ]
Line_17 $$ Map<ApplicationState, VersionedValue> values = new EnumMap(ApplicationState.class)-->Line_21 $$ System.out.println(String.format("Failed: %s", values))[ FD ]
