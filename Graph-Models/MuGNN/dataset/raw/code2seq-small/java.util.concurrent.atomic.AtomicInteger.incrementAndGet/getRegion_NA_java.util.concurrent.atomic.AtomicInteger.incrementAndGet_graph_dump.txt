Line_3 $$ while (true) -->Line_10 $$ if (currentRegion.compareAndSet(null, region)) [ CD ]
Line_3 $$ while (true) -->Line_7 $$ region = RACE_ALLOCATED.poll()[ CD ]
Line_5 $$ if (region != null)-->Line_6 $$ return region[ CD ]
Line_3 $$ while (true) -->Line_8 $$ if (region == null)[ CD ]
Line_4 $$ Region region = currentRegion.get()-->Line_9 $$ region = new Region(allocateOnHeapOnly ? ByteBuffer.allocate(REGION_SIZE) : ByteBuffer.allocateDirect(REGION_SIZE))[ FD ]
Line_10 $$ if (currentRegion.compareAndSet(null, region)) -->Line_15 $$ return region[ CD ]
Line_9 $$ region = new Region(allocateOnHeapOnly ? ByteBuffer.allocate(REGION_SIZE) : ByteBuffer.allocateDirect(REGION_SIZE))-->Line_8 $$ if (region == null)[ FD ]
Line_3 $$ while (true) -->Line_17 $$ RACE_ALLOCATED.add(region)[ CD ]
Line_7 $$ region = RACE_ALLOCATED.poll()-->Line_5 $$ if (region != null)[ FD ]
Line_9 $$ region = new Region(allocateOnHeapOnly ? ByteBuffer.allocate(REGION_SIZE) : ByteBuffer.allocateDirect(REGION_SIZE))-->Line_10 $$ if (currentRegion.compareAndSet(null, region)) [ FD ]
Line_4 $$ Region region = currentRegion.get()-->Line_12 $$ offHeapRegions.add(region)[ FD ]
Line_10 $$ if (currentRegion.compareAndSet(null, region)) -->Line_13 $$ regionCount.incrementAndGet()[ CD ]
Line_9 $$ region = new Region(allocateOnHeapOnly ? ByteBuffer.allocate(REGION_SIZE) : ByteBuffer.allocateDirect(REGION_SIZE))-->Line_5 $$ if (region != null)[ FD ]
Line_8 $$ if (region == null)-->Line_9 $$ region = new Region(allocateOnHeapOnly ? ByteBuffer.allocate(REGION_SIZE) : ByteBuffer.allocateDirect(REGION_SIZE))[ CD ]
Line_10 $$ if (currentRegion.compareAndSet(null, region)) -->Line_14 $$ logger.trace("[ CD ]
Line_7 $$ region = RACE_ALLOCATED.poll()-->Line_17 $$ RACE_ALLOCATED.add(region)[ FD ]
Line_10 $$ if (currentRegion.compareAndSet(null, region)) -->Line_11 $$ if (!allocateOnHeapOnly)[ CD ]
Line_9 $$ region = new Region(allocateOnHeapOnly ? ByteBuffer.allocate(REGION_SIZE) : ByteBuffer.allocateDirect(REGION_SIZE))-->Line_17 $$ RACE_ALLOCATED.add(region)[ FD ]
Line_4 $$ Region region = currentRegion.get()-->Line_8 $$ if (region == null)[ FD ]
Line_4 $$ Region region = currentRegion.get()-->Line_5 $$ if (region != null)[ FD ]
Line_7 $$ region = RACE_ALLOCATED.poll()-->Line_9 $$ region = new Region(allocateOnHeapOnly ? ByteBuffer.allocate(REGION_SIZE) : ByteBuffer.allocateDirect(REGION_SIZE))[ FD ]
Line_4 $$ Region region = currentRegion.get()-->Line_17 $$ RACE_ALLOCATED.add(region)[ FD ]
Line_7 $$ region = RACE_ALLOCATED.poll()-->Line_8 $$ if (region == null)[ FD ]
Line_4 $$ Region region = currentRegion.get()-->Line_10 $$ if (currentRegion.compareAndSet(null, region)) [ FD ]
Line_11 $$ if (!allocateOnHeapOnly)-->Line_12 $$ offHeapRegions.add(region)[ CD ]
Line_9 $$ region = new Region(allocateOnHeapOnly ? ByteBuffer.allocate(REGION_SIZE) : ByteBuffer.allocateDirect(REGION_SIZE))-->Line_12 $$ offHeapRegions.add(region)[ FD ]
Line_2 $$ private Region getRegion() -->Line_3 $$ while (true) [ CD ]
Line_7 $$ region = RACE_ALLOCATED.poll()-->Line_10 $$ if (currentRegion.compareAndSet(null, region)) [ FD ]
Line_3 $$ while (true) -->Line_5 $$ if (region != null)[ CD ]
Line_7 $$ region = RACE_ALLOCATED.poll()-->Line_12 $$ offHeapRegions.add(region)[ FD ]
Line_3 $$ while (true) -->Line_4 $$ Region region = currentRegion.get()[ CD ]
Line_4 $$ Region region = currentRegion.get()-->Line_7 $$ region = RACE_ALLOCATED.poll()[ FD ]
