Line_24 $$ for (final PsiFile psiRoot : psiRoots) -->Line_27 $$ if (!processed.add(psiRoot))[ FD ]
Line_17 $$ final Project project = myManager.getProject()-->Line_18 $$ if (project.isDisposed())[ FD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_5 $$ return vfile.isValid() ? myManager.findFile(vfile) : null[ FD ]
Line_15 $$ ApplicationUtil.tryRunReadAction(new Computable<Void>() -->Line_20 $$ if (DumbService.isDumb(project))[ CD ]
Line_17 $$ final Project project = myManager.getProject()-->Line_20 $$ if (DumbService.isDumb(project))[ FD ]
Line_3 $$ final PsiFile file = ApplicationUtil.tryRunReadAction(new Computable<PsiFile>() -->Line_26 $$ assert psiRoot != null : "One of the roots of file " + file + " is null. All roots: " + psiRoots + "; ViewProvider: " + file.getViewProvider() + "; Virtual file: " + file.getViewProvider().getVirtualFile()[ FD ]
Line_24 $$ for (final PsiFile psiRoot : psiRoots) -->Line_32 $$ if (!localProcessor.process(psiRoot)) [ FD ]
Line_3 $$ final PsiFile file = ApplicationUtil.tryRunReadAction(new Computable<PsiFile>() -->Line_22 $$ List<PsiFile> psiRoots = file.getViewProvider().getAllFiles()[ FD ]
Line_8 $$ if (file != null && !(file instanceof PsiBinaryFile)) -->Line_15 $$ ApplicationUtil.tryRunReadAction(new Computable<Void>() [ CD ]
Line_23 $$ Set<PsiFile> processed = new THashSet<PsiFile>(psiRoots.size() * 2, (float) 0.5)-->Line_27 $$ if (!processed.add(psiRoot))[ FD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_41 $$ if (progress.isRunning()) [ CD ]
Line_15 $$ ApplicationUtil.tryRunReadAction(new Computable<Void>() -->Line_22 $$ List<PsiFile> psiRoots = file.getViewProvider().getAllFiles()[ CD ]
Line_22 $$ List<PsiFile> psiRoots = file.getViewProvider().getAllFiles()-->Line_23 $$ Set<PsiFile> processed = new THashSet<PsiFile>(psiRoots.size() * 2, (float) 0.5)[ FD ]
Line_3 $$ final PsiFile file = ApplicationUtil.tryRunReadAction(new Computable<PsiFile>() -->Line_5 $$ return vfile.isValid() ? myManager.findFile(vfile) : null[ CD ]
Line_15 $$ ApplicationUtil.tryRunReadAction(new Computable<Void>() -->Line_23 $$ Set<PsiFile> processed = new THashSet<PsiFile>(psiRoots.size() * 2, (float) 0.5)[ CD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_25 $$ progress.checkCanceled()[ FD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_11 $$ vfile.contentsToByteArray()[ FD ]
Line_15 $$ ApplicationUtil.tryRunReadAction(new Computable<Void>() -->Line_17 $$ final Project project = myManager.getProject()[ CD ]
Line_41 $$ if (progress.isRunning()) -->Line_43 $$ progress.setFraction(fraction)[ CD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_42 $$ double fraction = (double) counter.incrementAndGet() / totalSize[ FD ]
Line_15 $$ ApplicationUtil.tryRunReadAction(new Computable<Void>() -->Line_37 $$ return null[ CD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_9 $$ if (FileDocumentManager.getInstance().getCachedDocument(vfile) == null) [ FD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_33 $$ canceled.set(true)[ FD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_43 $$ progress.setFraction(fraction)[ FD ]
Line_8 $$ if (file != null && !(file instanceof PsiBinaryFile)) -->Line_9 $$ if (FileDocumentManager.getInstance().getCachedDocument(vfile) == null) [ CD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_3 $$ final PsiFile file = ApplicationUtil.tryRunReadAction(new Computable<PsiFile>() [ CD ]
Line_24 $$ for (final PsiFile psiRoot : psiRoots) -->Line_29 $$ if (!psiRoot.isValid()) [ FD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_32 $$ if (!localProcessor.process(psiRoot)) [ FD ]
Line_32 $$ if (!localProcessor.process(psiRoot)) -->Line_33 $$ canceled.set(true)[ CD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_41 $$ if (progress.isRunning()) [ FD ]
Line_2 $$ private void processVirtualFile(@NotNull final VirtualFile vfile, @NotNull final ProgressIndicator progress, @NotNull final Processor<? super PsiFile> localProcessor, @NotNull final AtomicBoolean canceled, @NotNull AtomicInteger counter, int totalSize) throws ApplicationUtil.CannotRunReadActionException -->Line_8 $$ if (file != null && !(file instanceof PsiBinaryFile)) [ CD ]
Line_15 $$ ApplicationUtil.tryRunReadAction(new Computable<Void>() -->Line_18 $$ if (project.isDisposed())[ CD ]
