Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)-->Line_36 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs + numPhase3Docs)) [ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_50 $$ thread.start()[ CD ]
Line_7 $$ Settings idxSettings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_DATA_PATH, dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS, true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM, true).build()-->Line_8 $$ prepareCreate(IDX).setSettings(idxSettings).addMapping("doc", "foo", "type=string").get()[ FD ]
Line_20 $$ final CountDownLatch phase2finished = new CountDownLatch(1)-->Line_43 $$ phase2finished.countDown()[ FD ]
Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)-->Line_64 $$ assertHitCount(resp, counter.get())[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_7 $$ Settings idxSettings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_DATA_PATH, dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS, true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM, true).build()[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_64 $$ assertHitCount(resp, counter.get())[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_11 $$ ensureGreen(IDX)[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_23 $$ MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, node1))[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_55 $$ client().admin().indices().prepareUpdateSettings(IDX).setSettings(build).execute().actionGet()[ CD ]
Line_39 $$ final int docCount = counter.get()-->Line_42 $$ if (docCount == (numPhase1Docs + numPhase2Docs)) [ FD ]
Line_4 $$ Settings nodeSettings = Settings.builder().put("node.add_id_to_custom_path", false).put("path.shared_data", dataPath).build()-->Line_5 $$ String node1 = internalCluster().startNode(nodeSettings)[ FD ]
Line_36 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs + numPhase3Docs)) -->Line_39 $$ final int docCount = counter.get()[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_56 $$ phase2finished.await()[ CD ]
Line_21 $$ final CountDownLatch phase3finished = new CountDownLatch(1)-->Line_47 $$ phase3finished.countDown()[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_58 $$ phase3finished.await()[ CD ]
Line_22 $$ final AtomicBoolean keepFailing = new AtomicBoolean(true)-->Line_26 $$ if (keepFailing.get() && action.equals(RecoveryTarget.Actions.TRANSLOG_OPS)) [ FD ]
Line_4 $$ Settings nodeSettings = Settings.builder().put("node.add_id_to_custom_path", false).put("path.shared_data", dataPath).build()-->Line_10 $$ String node2 = internalCluster().startNode(nodeSettings)[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_5 $$ String node1 = internalCluster().startNode(nodeSettings)[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_3 $$ Path dataPath = createTempDir()[ CD ]
Line_36 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs + numPhase3Docs)) -->Line_37 $$ final IndexResponse indexResponse = client().prepareIndex(IDX, "doc", Integer.toString(counter.incrementAndGet())).setSource("foo", "bar").get()[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_24 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, node3), new MockTransportService.DelegateTransport(mockTransportService.original()) [ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_12 $$ flushAndRefresh(IDX)[ CD ]
Line_24 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, node3), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_30 $$ super.sendRequest(node, requestId, action, request, options)[ CD ]
Line_6 $$ final String IDX = "test"-->Line_12 $$ flushAndRefresh(IDX)[ FD ]
Line_6 $$ final String IDX = "test"-->Line_37 $$ final IndexResponse indexResponse = client().prepareIndex(IDX, "doc", Integer.toString(counter.incrementAndGet())).setSource("foo", "bar").get()[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_54 $$ Settings build = Settings.builder().put("index.routing.allocation.exclude._name", node1).build()[ CD ]
Line_22 $$ final AtomicBoolean keepFailing = new AtomicBoolean(true)-->Line_57 $$ keepFailing.set(false)[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)[ CD ]
Line_5 $$ String node1 = internalCluster().startNode(nodeSettings)-->Line_54 $$ Settings build = Settings.builder().put("index.routing.allocation.exclude._name", node1).build()[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_4 $$ Settings nodeSettings = Settings.builder().put("node.add_id_to_custom_path", false).put("path.shared_data", dataPath).build()[ CD ]
Line_6 $$ final String IDX = "test"-->Line_59 $$ ensureGreen(IDX)[ FD ]
Line_6 $$ final String IDX = "test"-->Line_55 $$ client().admin().indices().prepareUpdateSettings(IDX).setSettings(build).execute().actionGet()[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_8 $$ prepareCreate(IDX).setSettings(idxSettings).addMapping("doc", "foo", "type=string").get()[ CD ]
Line_42 $$ if (docCount == (numPhase1Docs + numPhase2Docs)) -->Line_43 $$ phase2finished.countDown()[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_60 $$ thread.join()[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_17 $$ final int numPhase2Docs = scaledRandomIntBetween(25, 200)[ CD ]
Line_21 $$ final CountDownLatch phase3finished = new CountDownLatch(1)-->Line_58 $$ phase3finished.await()[ FD ]
Line_19 $$ final CountDownLatch phase1finished = new CountDownLatch(1)-->Line_41 $$ phase1finished.countDown()[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_52 $$ phase1finished.await()[ CD ]
Line_20 $$ final CountDownLatch phase2finished = new CountDownLatch(1)-->Line_56 $$ phase2finished.await()[ FD ]
Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)-->Line_39 $$ final int docCount = counter.get()[ FD ]
Line_40 $$ if (docCount == numPhase1Docs) -->Line_41 $$ phase1finished.countDown()[ CD ]
Line_6 $$ final String IDX = "test"-->Line_8 $$ prepareCreate(IDX).setSettings(idxSettings).addMapping("doc", "foo", "type=string").get()[ FD ]
Line_15 $$ final CountDownLatch started = new CountDownLatch(1)-->Line_51 $$ started.await()[ FD ]
Line_3 $$ Path dataPath = createTempDir()-->Line_7 $$ Settings idxSettings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_DATA_PATH, dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS, true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM, true).build()[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_62 $$ flushAndRefresh()[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_57 $$ keepFailing.set(false)[ CD ]
Line_4 $$ Settings nodeSettings = Settings.builder().put("node.add_id_to_custom_path", false).put("path.shared_data", dataPath).build()-->Line_13 $$ String node3 = internalCluster().startNode(nodeSettings)[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_59 $$ ensureGreen(IDX)[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_22 $$ final AtomicBoolean keepFailing = new AtomicBoolean(true)[ CD ]
Line_19 $$ final CountDownLatch phase1finished = new CountDownLatch(1)-->Line_52 $$ phase1finished.await()[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_18 $$ final int numPhase3Docs = scaledRandomIntBetween(25, 200)[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_51 $$ started.await()[ CD ]
Line_23 $$ MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, node1))-->Line_24 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, node3), new MockTransportService.DelegateTransport(mockTransportService.original()) [ FD ]
Line_39 $$ final int docCount = counter.get()-->Line_40 $$ if (docCount == numPhase1Docs) [ FD ]
Line_6 $$ final String IDX = "test"-->Line_9 $$ ensureYellow(IDX)[ FD ]
Line_33 $$ Thread thread = new Thread() -->Line_47 $$ phase3finished.countDown()[ CD ]
Line_40 $$ if (docCount == numPhase1Docs) -->Line_42 $$ if (docCount == (numPhase1Docs + numPhase2Docs)) [ CD ]
Line_33 $$ Thread thread = new Thread() -->Line_35 $$ started.countDown()[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_6 $$ final String IDX = "test"[ CD ]
Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)-->Line_37 $$ final IndexResponse indexResponse = client().prepareIndex(IDX, "doc", Integer.toString(counter.incrementAndGet())).setSource("foo", "bar").get()[ FD ]
Line_24 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, node3), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_26 $$ if (keepFailing.get() && action.equals(RecoveryTarget.Actions.TRANSLOG_OPS)) [ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_9 $$ ensureYellow(IDX)[ CD ]
Line_5 $$ String node1 = internalCluster().startNode(nodeSettings)-->Line_23 $$ MockTransportService mockTransportService = ((MockTransportService) internalCluster().getInstance(TransportService.class, node1))[ FD ]
Line_37 $$ final IndexResponse indexResponse = client().prepareIndex(IDX, "doc", Integer.toString(counter.incrementAndGet())).setSource("foo", "bar").get()-->Line_38 $$ assertTrue(indexResponse.isCreated())[ FD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_21 $$ final CountDownLatch phase3finished = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_10 $$ String node2 = internalCluster().startNode(nodeSettings)[ CD ]
Line_24 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, node3), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_26 $$ if (keepFailing.get() && action.equals(RecoveryTarget.Actions.TRANSLOG_OPS)) [ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_20 $$ final CountDownLatch phase2finished = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_19 $$ final CountDownLatch phase1finished = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_63 $$ SearchResponse resp = client().prepareSearch(IDX).setQuery(matchAllQuery()).get()[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_13 $$ String node3 = internalCluster().startNode(nodeSettings)[ CD ]
Line_6 $$ final String IDX = "test"-->Line_11 $$ ensureGreen(IDX)[ FD ]
Line_36 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs + numPhase3Docs)) -->Line_38 $$ assertTrue(indexResponse.isCreated())[ CD ]
Line_16 $$ final int numPhase1Docs = scaledRandomIntBetween(25, 200)-->Line_40 $$ if (docCount == numPhase1Docs) [ FD ]
Line_33 $$ Thread thread = new Thread() -->Line_36 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs + numPhase3Docs)) [ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_16 $$ final int numPhase1Docs = scaledRandomIntBetween(25, 200)[ CD ]
Line_2 $$ public void testPrimaryRelocationWhereRecoveryFails() throws Exception -->Line_15 $$ final CountDownLatch started = new CountDownLatch(1)[ CD ]
Line_24 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, node3), new MockTransportService.DelegateTransport(mockTransportService.original()) -->Line_30 $$ super.sendRequest(node, requestId, action, request, options)[ FD ]
Line_6 $$ final String IDX = "test"-->Line_63 $$ SearchResponse resp = client().prepareSearch(IDX).setQuery(matchAllQuery()).get()[ FD ]
Line_13 $$ String node3 = internalCluster().startNode(nodeSettings)-->Line_24 $$ mockTransportService.addDelegate(internalCluster().getInstance(TransportService.class, node3), new MockTransportService.DelegateTransport(mockTransportService.original()) [ FD ]
Line_15 $$ final CountDownLatch started = new CountDownLatch(1)-->Line_35 $$ started.countDown()[ FD ]
Line_36 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs + numPhase3Docs)) -->Line_40 $$ if (docCount == numPhase1Docs) [ CD ]
Line_3 $$ Path dataPath = createTempDir()-->Line_4 $$ Settings nodeSettings = Settings.builder().put("node.add_id_to_custom_path", false).put("path.shared_data", dataPath).build()[ FD ]
