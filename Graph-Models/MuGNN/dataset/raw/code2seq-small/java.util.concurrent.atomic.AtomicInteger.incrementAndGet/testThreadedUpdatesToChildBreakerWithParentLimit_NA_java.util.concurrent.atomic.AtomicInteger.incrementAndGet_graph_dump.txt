Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_26 $$ breakerRef.set(breaker)[ CD ]
Line_12 $$ final CircuitBreakerService service = new HierarchyCircuitBreakerService(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)) -->Line_17 $$ if (getBreaker(CircuitBreaker.REQUEST).getUsed() > parentLimit) [ CD ]
Line_5 $$ final int parentLimit = (BYTES_PER_THREAD * NUM_THREADS) - 2-->Line_17 $$ if (getBreaker(CircuitBreaker.REQUEST).getUsed() > parentLimit) [ FD ]
Line_27 $$ for (int i = 0; i < NUM_THREADS; i++) -->Line_28 $$ threads[i] = new Thread(new Runnable() [ CD ]
Line_28 $$ threads[i] = new Thread(new Runnable() -->Line_30 $$ for (int j = 0; j < BYTES_PER_THREAD; j++) [ CD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_6 $$ final int childLimit = parentLimit + 10[ CD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_8 $$ final AtomicInteger tripped = new AtomicInteger(0)[ CD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_12 $$ final CircuitBreakerService service = new HierarchyCircuitBreakerService(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)) [ CD ]
Line_4 $$ final int BYTES_PER_THREAD = scaledRandomIntBetween(500, 4500)-->Line_30 $$ for (int j = 0; j < BYTES_PER_THREAD; j++) [ FD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_3 $$ final int NUM_THREADS = scaledRandomIntBetween(3, 15)[ CD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_53 $$ assertThat("breaker should be reset back to the parent limit after parent breaker trips", breaker.getUsed(), greaterThanOrEqualTo((long) parentLimit - NUM_THREADS))[ CD ]
Line_8 $$ final AtomicInteger tripped = new AtomicInteger(0)-->Line_34 $$ tripped.incrementAndGet()[ FD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_9 $$ final AtomicReference<Throwable> lastException = new AtomicReference(null)[ CD ]
Line_3 $$ final int NUM_THREADS = scaledRandomIntBetween(3, 15)-->Line_27 $$ for (int i = 0; i < NUM_THREADS; i++) [ FD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_11 $$ final AtomicReference<ChildMemoryCircuitBreaker> breakerRef = new AtomicReference(null)[ CD ]
Line_11 $$ final AtomicReference<ChildMemoryCircuitBreaker> breakerRef = new AtomicReference(null)-->Line_14 $$ return breakerRef.get()[ FD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_5 $$ final int parentLimit = (BYTES_PER_THREAD * NUM_THREADS) - 2[ CD ]
Line_17 $$ if (getBreaker(CircuitBreaker.REQUEST).getUsed() > parentLimit) -->Line_18 $$ parentTripped.incrementAndGet()[ CD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_7 $$ final Thread[] threads = new Thread[NUM_THREADS][ CD ]
Line_9 $$ final AtomicReference<Throwable> lastException = new AtomicReference(null)-->Line_52 $$ assertThat("no other exceptions were thrown", lastException.get(), equalTo(null))[ FD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_55 $$ assertThat("total breaker was tripped at least once", tripped.get(), greaterThanOrEqualTo(1))[ CD ]
Line_8 $$ final AtomicInteger tripped = new AtomicInteger(0)-->Line_55 $$ assertThat("total breaker was tripped at least once", tripped.get(), greaterThanOrEqualTo(1))[ FD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_54 $$ assertThat("parent breaker was tripped at least once", parentTripped.get(), greaterThanOrEqualTo(1))[ CD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_52 $$ assertThat("no other exceptions were thrown", lastException.get(), equalTo(null))[ CD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_4 $$ final int BYTES_PER_THREAD = scaledRandomIntBetween(500, 4500)[ CD ]
Line_12 $$ final CircuitBreakerService service = new HierarchyCircuitBreakerService(Settings.EMPTY, new ClusterSettings(Settings.EMPTY, ClusterSettings.BUILT_IN_CLUSTER_SETTINGS)) -->Line_14 $$ return breakerRef.get()[ CD ]
Line_10 $$ final AtomicInteger parentTripped = new AtomicInteger(0)-->Line_18 $$ parentTripped.incrementAndGet()[ FD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_10 $$ final AtomicInteger parentTripped = new AtomicInteger(0)[ CD ]
Line_9 $$ final AtomicReference<Throwable> lastException = new AtomicReference(null)-->Line_36 $$ lastException.set(e2)[ FD ]
Line_11 $$ final AtomicReference<ChildMemoryCircuitBreaker> breakerRef = new AtomicReference(null)-->Line_26 $$ breakerRef.set(breaker)[ FD ]
Line_2 $$ public void testThreadedUpdatesToChildBreakerWithParentLimit() throws Exception -->Line_27 $$ for (int i = 0; i < NUM_THREADS; i++) [ CD ]
Line_10 $$ final AtomicInteger parentTripped = new AtomicInteger(0)-->Line_54 $$ assertThat("parent breaker was tripped at least once", parentTripped.get(), greaterThanOrEqualTo(1))[ FD ]
