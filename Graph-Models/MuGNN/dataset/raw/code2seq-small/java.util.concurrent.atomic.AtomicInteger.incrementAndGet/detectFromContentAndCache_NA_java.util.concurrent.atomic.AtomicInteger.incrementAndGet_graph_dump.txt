Line_5 $$ final InputStream inputStream = ((FileSystemInterface) file.getFileSystem()).getInputStream(file)-->Line_58 $$ inputStream.close()[ FD ]
Line_40 $$ if (detected == null) -->Line_42 $$ if (toLog()) [ CD ]
Line_5 $$ final InputStream inputStream = ((FileSystemInterface) file.getFileSystem()).getInputStream(file)-->Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() [ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_29 $$ detected = detector.detect(file, byteSequence, text)[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_40 $$ if (detected == null) [ CD ]
Line_51 $$ if (toLog()) -->Line_56 $$ newStream.close()[ CD ]
Line_26 $$ FileType detected = null-->Line_43 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "no detector was able to detect. assigned " + detected.getName())[ FD ]
Line_41 $$ detected = isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE-->Line_46 $$ result.set(detected)[ FD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_53 $$ InputStream newStream = ((FileSystemInterface) file.getFileSystem()).getInputStream(file)[ FD ]
Line_42 $$ if (toLog()) -->Line_43 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "no detector was able to detect. assigned " + detected.getName())[ CD ]
Line_15 $$ CharSequence text-->Line_18 $$ text = LoadTextUtil.getTextByBinaryPresentation(bytes, file, true, true, UnknownFileType.INSTANCE)[ FD ]
Line_20 $$ text = null-->Line_24 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "byteSequence.length=" + byteSequence.getLength() + "; isText=" + isText + "; text='" + (text == null ? null : StringUtil.first(text, 100, true)) + "', detectors=" + Arrays.toString(detectors))[ FD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_35 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "detector " + detector + " type as " + detected.getName())[ FD ]
Line_16 $$ if (isText) -->Line_18 $$ text = LoadTextUtil.getTextByBinaryPresentation(bytes, file, true, true, UnknownFileType.INSTANCE)[ CD ]
Line_40 $$ if (detected == null) -->Line_41 $$ detected = isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE[ CD ]
Line_51 $$ if (toLog()) -->Line_53 $$ InputStream newStream = ((FileSystemInterface) file.getFileSystem()).getInputStream(file)[ CD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_46 $$ result.set(detected)[ CD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_14 $$ boolean isText = guessIfText(file, byteSequence)[ CD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_7 $$ log("F: detectFromContentAndCache(" + file.getName() + "):" + " inputStream=" + streamInfo(inputStream))[ FD ]
Line_9 $$ final Ref<FileType> result = new Ref<FileType>(UnknownFileType.INSTANCE)-->Line_60 $$ FileType fileType = result.get()[ FD ]
Line_26 $$ FileType detected = null-->Line_33 $$ if (detected != null) [ FD ]
Line_16 $$ if (isText) -->Line_20 $$ text = null[ CD ]
Line_29 $$ detected = detector.detect(file, byteSequence, text)-->Line_43 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "no detector was able to detect. assigned " + detected.getName())[ FD ]
Line_26 $$ FileType detected = null-->Line_29 $$ detected = detector.detect(file, byteSequence, text)[ FD ]
Line_9 $$ final Ref<FileType> result = new Ref<FileType>(UnknownFileType.INSTANCE)-->Line_55 $$ log("F: detectFromContentAndCache(" + file.getName() + "): " + "; result: " + result.get().getName() + "; processor ret: " + r + "; stream: " + streamInfo(inputStream) + "; newStream: " + streamInfo(newStream) + "; read: " + n + "; buffer: " + Arrays.toString(buffer))[ FD ]
Line_20 $$ text = null-->Line_29 $$ detected = detector.detect(file, byteSequence, text)[ FD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_24 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "byteSequence.length=" + byteSequence.getLength() + "; isText=" + isText + "; text='" + (text == null ? null : StringUtil.first(text, 100, true)) + "', detectors=" + Arrays.toString(detectors))[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_16 $$ if (isText) [ CD ]
Line_29 $$ detected = detector.detect(file, byteSequence, text)-->Line_35 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "detector " + detector + " type as " + detected.getName())[ FD ]
Line_5 $$ final InputStream inputStream = ((FileSystemInterface) file.getFileSystem()).getInputStream(file)-->Line_55 $$ log("F: detectFromContentAndCache(" + file.getName() + "): " + "; result: " + result.get().getName() + "; processor ret: " + r + "; stream: " + streamInfo(inputStream) + "; newStream: " + streamInfo(newStream) + "; read: " + n + "; buffer: " + Arrays.toString(buffer))[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_24 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "byteSequence.length=" + byteSequence.getLength() + "; isText=" + isText + "; text='" + (text == null ? null : StringUtil.first(text, 100, true)) + "', detectors=" + Arrays.toString(detectors))[ FD ]
Line_5 $$ final InputStream inputStream = ((FileSystemInterface) file.getFileSystem()).getInputStream(file)-->Line_7 $$ log("F: detectFromContentAndCache(" + file.getName() + "):" + " inputStream=" + streamInfo(inputStream))[ FD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_18 $$ text = LoadTextUtil.getTextByBinaryPresentation(bytes, file, true, true, UnknownFileType.INSTANCE)[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_23 $$ if (toLog()) [ CD ]
Line_26 $$ FileType detected = null-->Line_35 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "detector " + detector + " type as " + detected.getName())[ FD ]
Line_29 $$ detected = detector.detect(file, byteSequence, text)-->Line_46 $$ result.set(detected)[ FD ]
Line_10 $$ boolean r = false-->Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() [ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_22 $$ FileTypeDetector[] detectors = Extensions.getExtensions(FileTypeDetector.EP_NAME)[ CD ]
Line_17 $$ byte[] bytes = Arrays.copyOf(byteSequence.getBytes(), byteSequence.getLength())-->Line_18 $$ text = LoadTextUtil.getTextByBinaryPresentation(bytes, file, true, true, UnknownFileType.INSTANCE)[ FD ]
Line_61 $$ if (LOG.isDebugEnabled()) -->Line_62 $$ LOG.debug(file + "; type=" + fileType.getDescription() + "; " + counterAutoDetect)[ CD ]
Line_33 $$ if (detected != null) -->Line_34 $$ if (toLog()) [ CD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_55 $$ log("F: detectFromContentAndCache(" + file.getName() + "): " + "; result: " + result.get().getName() + "; processor ret: " + r + "; stream: " + streamInfo(inputStream) + "; newStream: " + streamInfo(newStream) + "; read: " + n + "; buffer: " + Arrays.toString(buffer))[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_15 $$ CharSequence text[ CD ]
Line_51 $$ if (toLog()) -->Line_55 $$ log("F: detectFromContentAndCache(" + file.getName() + "): " + "; result: " + result.get().getName() + "; processor ret: " + r + "; stream: " + streamInfo(inputStream) + "; newStream: " + streamInfo(newStream) + "; read: " + n + "; buffer: " + Arrays.toString(buffer))[ CD ]
Line_26 $$ FileType detected = null-->Line_40 $$ if (detected == null) [ FD ]
Line_15 $$ CharSequence text-->Line_20 $$ text = null[ FD ]
Line_27 $$ for (FileTypeDetector detector : detectors) -->Line_31 $$ LOG.error("Detector " + detector + " (" + detector.getClass() + ") exception occurred:", e)[ FD ]
Line_27 $$ for (FileTypeDetector detector : detectors) -->Line_29 $$ detected = detector.detect(file, byteSequence, text)[ FD ]
Line_16 $$ if (isText) -->Line_17 $$ byte[] bytes = Arrays.copyOf(byteSequence.getBytes(), byteSequence.getLength())[ CD ]
Line_29 $$ detected = detector.detect(file, byteSequence, text)-->Line_40 $$ if (detected == null) [ FD ]
Line_23 $$ if (toLog()) -->Line_24 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "byteSequence.length=" + byteSequence.getLength() + "; isText=" + isText + "; text='" + (text == null ? null : StringUtil.first(text, 100, true)) + "', detectors=" + Arrays.toString(detectors))[ CD ]
Line_26 $$ FileType detected = null-->Line_41 $$ detected = isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE[ FD ]
Line_6 $$ if (toLog()) -->Line_7 $$ log("F: detectFromContentAndCache(" + file.getName() + "):" + " inputStream=" + streamInfo(inputStream))[ CD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_14 $$ boolean isText = guessIfText(file, byteSequence)[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_26 $$ FileType detected = null[ CD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_29 $$ detected = detector.detect(file, byteSequence, text)[ FD ]
Line_15 $$ CharSequence text-->Line_29 $$ detected = detector.detect(file, byteSequence, text)[ FD ]
Line_29 $$ detected = detector.detect(file, byteSequence, text)-->Line_41 $$ detected = isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE[ FD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_5 $$ final InputStream inputStream = ((FileSystemInterface) file.getFileSystem()).getInputStream(file)[ FD ]
Line_9 $$ final Ref<FileType> result = new Ref<FileType>(UnknownFileType.INSTANCE)-->Line_46 $$ result.set(detected)[ FD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_3 $$ long start = System.currentTimeMillis()[ CD ]
Line_51 $$ if (toLog()) -->Line_54 $$ int n = newStream.read(buffer, 0, buffer.length)[ CD ]
Line_34 $$ if (toLog()) -->Line_35 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "detector " + detector + " type as " + detected.getName())[ CD ]
Line_29 $$ detected = detector.detect(file, byteSequence, text)-->Line_33 $$ if (detected != null) [ FD ]
Line_26 $$ FileType detected = null-->Line_46 $$ result.set(detected)[ FD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_43 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "no detector was able to detect. assigned " + detected.getName())[ FD ]
Line_18 $$ text = LoadTextUtil.getTextByBinaryPresentation(bytes, file, true, true, UnknownFileType.INSTANCE)-->Line_24 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "byteSequence.length=" + byteSequence.getLength() + "; isText=" + isText + "; text='" + (text == null ? null : StringUtil.first(text, 100, true)) + "', detectors=" + Arrays.toString(detectors))[ FD ]
Line_18 $$ text = LoadTextUtil.getTextByBinaryPresentation(bytes, file, true, true, UnknownFileType.INSTANCE)-->Line_29 $$ detected = detector.detect(file, byteSequence, text)[ FD ]
Line_18 $$ text = LoadTextUtil.getTextByBinaryPresentation(bytes, file, true, true, UnknownFileType.INSTANCE)-->Line_20 $$ text = null[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_17 $$ byte[] bytes = Arrays.copyOf(byteSequence.getBytes(), byteSequence.getLength())[ FD ]
Line_22 $$ FileTypeDetector[] detectors = Extensions.getExtensions(FileTypeDetector.EP_NAME)-->Line_24 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "byteSequence.length=" + byteSequence.getLength() + "; isText=" + isText + "; text='" + (text == null ? null : StringUtil.first(text, 100, true)) + "', detectors=" + Arrays.toString(detectors))[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_47 $$ return true[ CD ]
Line_2 $$ private FileType detectFromContentAndCache(@NotNull final VirtualFile file) -->Line_64 $$ cacheAutoDetectedFileType(file, fileType)[ FD ]
Line_41 $$ detected = isText ? PlainTextFileType.INSTANCE : UnknownFileType.INSTANCE-->Line_43 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "no detector was able to detect. assigned " + detected.getName())[ FD ]
Line_15 $$ CharSequence text-->Line_24 $$ log("F: detectFromContentAndCache.processFirstBytes(" + file.getName() + "): " + "byteSequence.length=" + byteSequence.getLength() + "; isText=" + isText + "; text='" + (text == null ? null : StringUtil.first(text, 100, true)) + "', detectors=" + Arrays.toString(detectors))[ FD ]
Line_12 $$ r = processFirstBytes(inputStream, DETECT_BUFFER_SIZE, new Processor<ByteSequence>() -->Line_14 $$ boolean isText = guessIfText(file, byteSequence)[ FD ]
