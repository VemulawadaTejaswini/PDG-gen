Line_2 $$ private void setWatchRoots(List<String> recursive, List<String> flat, boolean restart) -->Line_5 $$ if (ApplicationManager.getApplication().isDisposeInProgress()) [ CD ]
Line_3 $$ if (myProcessHandler == null || myProcessHandler.isProcessTerminated())-->Line_4 $$ return[ CD ]
Line_5 $$ if (ApplicationManager.getApplication().isDisposeInProgress()) -->Line_6 $$ recursive = flat = Collections.emptyList()[ CD ]
Line_2 $$ private void setWatchRoots(List<String> recursive, List<String> flat, boolean restart) -->Line_8 $$ if (!restart && myRecursiveWatchRoots.equals(recursive) && myFlatWatchRoots.equals(flat)) [ CD ]
Line_6 $$ recursive = flat = Collections.emptyList()-->Line_8 $$ if (!restart && myRecursiveWatchRoots.equals(recursive) && myFlatWatchRoots.equals(flat)) [ FD ]
Line_8 $$ if (!restart && myRecursiveWatchRoots.equals(recursive) && myFlatWatchRoots.equals(flat)) -->Line_9 $$ return[ CD ]
Line_2 $$ private void setWatchRoots(List<String> recursive, List<String> flat, boolean restart) -->Line_11 $$ mySettingRoots.incrementAndGet()[ CD ]
Line_16 $$ for (String path : recursive) -->Line_17 $$ writeLine(path)[ FD ]
Line_2 $$ private void setWatchRoots(List<String> recursive, List<String> flat, boolean restart) -->Line_6 $$ recursive = flat = Collections.emptyList()[ FD ]
Line_2 $$ private void setWatchRoots(List<String> recursive, List<String> flat, boolean restart) -->Line_3 $$ if (myProcessHandler == null || myProcessHandler.isProcessTerminated())[ CD ]
Line_2 $$ private void setWatchRoots(List<String> recursive, List<String> flat, boolean restart) -->Line_8 $$ if (!restart && myRecursiveWatchRoots.equals(recursive) && myFlatWatchRoots.equals(flat)) [ FD ]
