Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_14 $$ DataInputOutputUtil.writeINT(out, compressedSize)[ FD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_7 $$ mySizeAfterCompression.addAndGet(compressedSize)[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_9 $$ int requests = myCompressionRequests.incrementAndGet()[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_6 $$ final long time = (DUMP_COMPRESSION_STATS ? System.nanoTime() : 0) - started[ CD ]
Line_6 $$ final long time = (DUMP_COMPRESSION_STATS ? System.nanoTime() : 0) - started-->Line_10 $$ long l = myCompressionTime.addAndGet(time)[ FD ]
Line_4 $$ final byte[] compressedOutputBuffer = spareBufferLocal.getBuffer(Snappy.maxCompressedLength(length))-->Line_5 $$ int compressedSize = Snappy.compress(bytes, 0, length, compressedOutputBuffer, 0)[ FD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_8 $$ mySizeBeforeCompression.addAndGet(length)[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_11 $$ if (DUMP_COMPRESSION_STATS && requests % 1000 == 0) [ CD ]
Line_5 $$ int compressedSize = Snappy.compress(bytes, 0, length, compressedOutputBuffer, 0)-->Line_14 $$ DataInputOutputUtil.writeINT(out, compressedSize)[ FD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_3 $$ long started = DUMP_COMPRESSION_STATS ? System.nanoTime() : 0[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_14 $$ DataInputOutputUtil.writeINT(out, compressedSize)[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_16 $$ return compressedSize[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_8 $$ mySizeBeforeCompression.addAndGet(length)[ FD ]
Line_11 $$ if (DUMP_COMPRESSION_STATS && requests % 1000 == 0) -->Line_12 $$ System.out.println("Compressed " + requests + " times, size:" + mySizeBeforeCompression + "->" + mySizeAfterCompression + " for " + (l / 1000000) + "ms")[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_4 $$ final byte[] compressedOutputBuffer = spareBufferLocal.getBuffer(Snappy.maxCompressedLength(length))[ FD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_10 $$ long l = myCompressionTime.addAndGet(time)[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_15 $$ out.write(compressedOutputBuffer, 0, compressedSize)[ FD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_5 $$ int compressedSize = Snappy.compress(bytes, 0, length, compressedOutputBuffer, 0)[ FD ]
Line_5 $$ int compressedSize = Snappy.compress(bytes, 0, length, compressedOutputBuffer, 0)-->Line_15 $$ out.write(compressedOutputBuffer, 0, compressedSize)[ FD ]
Line_5 $$ int compressedSize = Snappy.compress(bytes, 0, length, compressedOutputBuffer, 0)-->Line_7 $$ mySizeAfterCompression.addAndGet(compressedSize)[ FD ]
Line_4 $$ final byte[] compressedOutputBuffer = spareBufferLocal.getBuffer(Snappy.maxCompressedLength(length))-->Line_15 $$ out.write(compressedOutputBuffer, 0, compressedSize)[ FD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_5 $$ int compressedSize = Snappy.compress(bytes, 0, length, compressedOutputBuffer, 0)[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_4 $$ final byte[] compressedOutputBuffer = spareBufferLocal.getBuffer(Snappy.maxCompressedLength(length))[ CD ]
Line_2 $$ public static int writeCompressedWithoutOriginalBufferLength(@NotNull DataOutput out, @NotNull byte[] bytes, int length) throws IOException -->Line_15 $$ out.write(compressedOutputBuffer, 0, compressedSize)[ CD ]
