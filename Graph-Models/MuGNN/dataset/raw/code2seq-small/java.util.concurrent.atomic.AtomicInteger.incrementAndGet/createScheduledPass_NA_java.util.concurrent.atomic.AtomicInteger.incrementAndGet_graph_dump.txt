Line_23 $$ if (scheduledPass.myRunningPredecessorsCount.get() == 0 && !freePasses.contains(scheduledPass)) -->Line_24 $$ freePasses.add(scheduledPass)[ CD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_10 $$ toBeSubmitted.put(key, scheduledPass)[ FD ]
Line_30 $$ ShowIntentionsPass ip = new ShowIntentionsPass(myProject, editor, -1)-->Line_31 $$ ip.setId(nextPassId.incrementAndGet())[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_28 $$ if (pass.isRunIntentionPassAfter() && fileEditor instanceof TextEditor) [ CD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_9 $$ threadsToStartCountdown.incrementAndGet()[ CD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_12 $$ ScheduledPass predecessor = findOrCreatePredecessorPass(fileEditor, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown, predecessorId)[ FD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_14 $$ predecessor.addSuccessorOnCompletion(scheduledPass)[ FD ]
Line_23 $$ if (scheduledPass.myRunningPredecessorsCount.get() == 0 && !freePasses.contains(scheduledPass)) -->Line_25 $$ if (!dependentPasses.contains(scheduledPass)) [ CD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_23 $$ if (scheduledPass.myRunningPredecessorsCount.get() == 0 && !freePasses.contains(scheduledPass)) [ FD ]
Line_11 $$ for (int predecessorId : pass.getCompletionPredecessorIds()) -->Line_12 $$ ScheduledPass predecessor = findOrCreatePredecessorPass(fileEditor, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown, predecessorId)[ FD ]
Line_28 $$ if (pass.isRunIntentionPassAfter() && fileEditor instanceof TextEditor) -->Line_29 $$ Editor editor = ((TextEditor) fileEditor).getEditor()[ CD ]
Line_19 $$ if (predecessor != null) -->Line_20 $$ predecessor.addSuccessorOnSubmit(scheduledPass)[ CD ]
Line_4 $$ Pair<FileEditor, Integer> key = Pair.create(fileEditor, passId)-->Line_10 $$ toBeSubmitted.put(key, scheduledPass)[ FD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_25 $$ if (!dependentPasses.contains(scheduledPass)) [ FD ]
Line_12 $$ ScheduledPass predecessor = findOrCreatePredecessorPass(fileEditor, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown, predecessorId)-->Line_20 $$ predecessor.addSuccessorOnSubmit(scheduledPass)[ FD ]
Line_11 $$ for (int predecessorId : pass.getCompletionPredecessorIds()) -->Line_18 $$ ScheduledPass predecessor = findOrCreatePredecessorPass(fileEditor, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown, predecessorId)[ FD ]
Line_25 $$ if (!dependentPasses.contains(scheduledPass)) -->Line_26 $$ dependentPasses.add(scheduledPass)[ CD ]
Line_6 $$ if (scheduledPass != null)-->Line_7 $$ return scheduledPass[ CD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_10 $$ toBeSubmitted.put(key, scheduledPass)[ FD ]
Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)-->Line_14 $$ predecessor.addSuccessorOnCompletion(scheduledPass)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_18 $$ ScheduledPass predecessor = findOrCreatePredecessorPass(fileEditor, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown, predecessorId)[ FD ]
Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)-->Line_20 $$ predecessor.addSuccessorOnSubmit(scheduledPass)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_24 $$ freePasses.add(scheduledPass)[ FD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_26 $$ dependentPasses.add(scheduledPass)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)[ CD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_20 $$ predecessor.addSuccessorOnSubmit(scheduledPass)[ FD ]
Line_28 $$ if (pass.isRunIntentionPassAfter() && fileEditor instanceof TextEditor) -->Line_30 $$ ShowIntentionsPass ip = new ShowIntentionsPass(myProject, editor, -1)[ CD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_33 $$ createScheduledPass(fileEditor, ip, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_12 $$ ScheduledPass predecessor = findOrCreatePredecessorPass(fileEditor, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown, predecessorId)-->Line_14 $$ predecessor.addSuccessorOnCompletion(scheduledPass)[ FD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_24 $$ freePasses.add(scheduledPass)[ FD ]
Line_28 $$ if (pass.isRunIntentionPassAfter() && fileEditor instanceof TextEditor) -->Line_33 $$ createScheduledPass(fileEditor, ip, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ CD ]
Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)-->Line_26 $$ dependentPasses.add(scheduledPass)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_9 $$ threadsToStartCountdown.incrementAndGet()[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_17 $$ for (int predecessorId : pass.getStartingPredecessorIds()) [ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_23 $$ if (scheduledPass.myRunningPredecessorsCount.get() == 0 && !freePasses.contains(scheduledPass)) [ CD ]
Line_28 $$ if (pass.isRunIntentionPassAfter() && fileEditor instanceof TextEditor) -->Line_31 $$ ip.setId(nextPassId.incrementAndGet())[ CD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_4 $$ Pair<FileEditor, Integer> key = Pair.create(fileEditor, passId)[ CD ]
Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)-->Line_25 $$ if (!dependentPasses.contains(scheduledPass)) [ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_10 $$ toBeSubmitted.put(key, scheduledPass)[ CD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_4 $$ Pair<FileEditor, Integer> key = Pair.create(fileEditor, passId)[ FD ]
Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)-->Line_10 $$ toBeSubmitted.put(key, scheduledPass)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_3 $$ int passId = pass.getId()[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_23 $$ if (scheduledPass.myRunningPredecessorsCount.get() == 0 && !freePasses.contains(scheduledPass)) [ FD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)[ FD ]
Line_13 $$ if (predecessor != null) -->Line_14 $$ predecessor.addSuccessorOnCompletion(scheduledPass)[ CD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_25 $$ if (!dependentPasses.contains(scheduledPass)) [ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)[ CD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_35 $$ return scheduledPass[ CD ]
Line_12 $$ ScheduledPass predecessor = findOrCreatePredecessorPass(fileEditor, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown, predecessorId)-->Line_13 $$ if (predecessor != null) [ FD ]
Line_30 $$ ShowIntentionsPass ip = new ShowIntentionsPass(myProject, editor, -1)-->Line_32 $$ ip.setCompletionPredecessorIds(new int[] [ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_6 $$ if (scheduledPass != null)[ CD ]
Line_4 $$ Pair<FileEditor, Integer> key = Pair.create(fileEditor, passId)-->Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)[ FD ]
Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)-->Line_23 $$ if (scheduledPass.myRunningPredecessorsCount.get() == 0 && !freePasses.contains(scheduledPass)) [ FD ]
Line_5 $$ ScheduledPass scheduledPass = toBeSubmitted.get(key)-->Line_6 $$ if (scheduledPass != null)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_28 $$ if (pass.isRunIntentionPassAfter() && fileEditor instanceof TextEditor) [ FD ]
Line_30 $$ ShowIntentionsPass ip = new ShowIntentionsPass(myProject, editor, -1)-->Line_33 $$ createScheduledPass(fileEditor, ip, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_8 $$ scheduledPass = new ScheduledPass(fileEditor, pass, updateProgress, threadsToStartCountdown)-->Line_24 $$ freePasses.add(scheduledPass)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_11 $$ for (int predecessorId : pass.getCompletionPredecessorIds()) [ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_26 $$ dependentPasses.add(scheduledPass)[ FD ]
Line_2 $$ private ScheduledPass createScheduledPass(@NotNull FileEditor fileEditor, @NotNull TextEditorHighlightingPass pass, @NotNull Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted, @NotNull List<TextEditorHighlightingPass> textEditorHighlightingPasses, @NotNull List<ScheduledPass> freePasses, @NotNull List<ScheduledPass> dependentPasses, @NotNull DaemonProgressIndicator updateProgress, @NotNull AtomicInteger threadsToStartCountdown) -->Line_3 $$ int passId = pass.getId()[ CD ]
Line_12 $$ ScheduledPass predecessor = findOrCreatePredecessorPass(fileEditor, toBeSubmitted, textEditorHighlightingPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown, predecessorId)-->Line_19 $$ if (predecessor != null) [ FD ]
Line_28 $$ if (pass.isRunIntentionPassAfter() && fileEditor instanceof TextEditor) -->Line_32 $$ ip.setCompletionPredecessorIds(new int[] [ CD ]
Line_3 $$ int passId = pass.getId()-->Line_4 $$ Pair<FileEditor, Integer> key = Pair.create(fileEditor, passId)[ FD ]
