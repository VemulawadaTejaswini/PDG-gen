Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_26 $$ int size = myTimestampUpdates.size()[ CD ]
Line_16 $$ if (currentTasksCount > myLimit) -->Line_17 $$ Runnable runnable = myPendingWriteRequestsQueue.poll()[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_7 $$ Boolean result = update.compute()[ FD ]
Line_19 $$ while (runnable != null) -->Line_20 $$ runnable.run()[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_16 $$ if (currentTasksCount > myLimit) [ CD ]
Line_8 $$ if (result == Boolean.TRUE) -->Line_9 $$ myTimestampUpdates.add(successRunnable)[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_9 $$ myTimestampUpdates.add(successRunnable)[ FD ]
Line_7 $$ Boolean result = update.compute()-->Line_8 $$ if (result == Boolean.TRUE) [ FD ]
Line_19 $$ while (runnable != null) -->Line_21 $$ if (++processed == myStealLimit)[ CD ]
Line_19 $$ while (runnable != null) -->Line_23 $$ runnable = myPendingWriteRequestsQueue.poll()[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_27 $$ if (size > myTimeStampUpdateSizeLimit) [ CD ]
Line_27 $$ if (size > myTimeStampUpdateSizeLimit) -->Line_28 $$ applyTimeStamps(size)[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_3 $$ int currentTasksCount = myUpdatesCount.incrementAndGet()[ CD ]
Line_2 $$ void submit(@NotNull final Computable<Boolean> update, @NotNull final Runnable successRunnable) -->Line_4 $$ myPendingWriteRequestsQueue.add(new Runnable() [ CD ]
Line_3 $$ int currentTasksCount = myUpdatesCount.incrementAndGet()-->Line_16 $$ if (currentTasksCount > myLimit) [ FD ]
Line_16 $$ if (currentTasksCount > myLimit) -->Line_19 $$ while (runnable != null) [ CD ]
