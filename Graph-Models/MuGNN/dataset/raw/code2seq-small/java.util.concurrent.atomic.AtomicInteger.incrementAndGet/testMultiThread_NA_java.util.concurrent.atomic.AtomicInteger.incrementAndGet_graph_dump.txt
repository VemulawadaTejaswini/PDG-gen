Line_2 $$ public void testMultiThread() throws Exception -->Line_3 $$ StatelessObjectFactory<MockBean> factory = new MockFactory()[ CD ]
Line_4 $$ final Pool<MockBean> pool = new StrictMaxPool<MockBean>(factory, 10, 60, TimeUnit.SECONDS)-->Line_13 $$ pool.release(bean)[ FD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_30 $$ pool.stop()[ CD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_33 $$ assertEquals(10, MockBean.getPreDestroys())[ CD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_31 $$ assertEquals(20, used.intValue())[ CD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_6 $$ final CountDownLatch in = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_24 $$ ready.await(120, TimeUnit.SECONDS)[ CD ]
Line_8 $$ Callable<Void> task = new Callable<Void>() -->Line_10 $$ MockBean bean = pool.get()[ CD ]
Line_8 $$ Callable<Void> task = new Callable<Void>() -->Line_13 $$ pool.release(bean)[ CD ]
Line_10 $$ MockBean bean = pool.get()-->Line_13 $$ pool.release(bean)[ FD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_32 $$ assertEquals(10, MockBean.getPostConstructs())[ CD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_8 $$ Callable<Void> task = new Callable<Void>() [ CD ]
Line_8 $$ Callable<Void> task = new Callable<Void>() -->Line_11 $$ ready.countDown()[ CD ]
Line_4 $$ final Pool<MockBean> pool = new StrictMaxPool<MockBean>(factory, 10, 60, TimeUnit.SECONDS)-->Line_30 $$ pool.stop()[ FD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_4 $$ final Pool<MockBean> pool = new StrictMaxPool<MockBean>(factory, 10, 60, TimeUnit.SECONDS)[ CD ]
Line_21 $$ for (int i = 0; i < results.length; i++) -->Line_22 $$ results[i] = service.submit(task)[ CD ]
Line_8 $$ Callable<Void> task = new Callable<Void>() -->Line_16 $$ return null[ CD ]
Line_10 $$ MockBean bean = pool.get()-->Line_14 $$ bean = null[ FD ]
Line_8 $$ Callable<Void> task = new Callable<Void>() -->Line_22 $$ results[i] = service.submit(task)[ FD ]
Line_7 $$ final CountDownLatch ready = new CountDownLatch(10)-->Line_11 $$ ready.countDown()[ FD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_5 $$ pool.start()[ CD ]
Line_8 $$ Callable<Void> task = new Callable<Void>() -->Line_15 $$ used.incrementAndGet()[ CD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_29 $$ service.shutdown()[ CD ]
Line_4 $$ final Pool<MockBean> pool = new StrictMaxPool<MockBean>(factory, 10, 60, TimeUnit.SECONDS)-->Line_10 $$ MockBean bean = pool.get()[ FD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_21 $$ for (int i = 0; i < results.length; i++) [ CD ]
Line_7 $$ final CountDownLatch ready = new CountDownLatch(10)-->Line_24 $$ ready.await(120, TimeUnit.SECONDS)[ FD ]
Line_8 $$ Callable<Void> task = new Callable<Void>() -->Line_14 $$ bean = null[ CD ]
Line_6 $$ final CountDownLatch in = new CountDownLatch(1)-->Line_25 $$ in.countDown()[ FD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_19 $$ ExecutorService service = Executors.newFixedThreadPool(20)[ CD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_7 $$ final CountDownLatch ready = new CountDownLatch(10)[ CD ]
Line_2 $$ public void testMultiThread() throws Exception -->Line_25 $$ in.countDown()[ CD ]
Line_4 $$ final Pool<MockBean> pool = new StrictMaxPool<MockBean>(factory, 10, 60, TimeUnit.SECONDS)-->Line_5 $$ pool.start()[ FD ]
Line_8 $$ Callable<Void> task = new Callable<Void>() -->Line_12 $$ in.await()[ CD ]
Line_6 $$ final CountDownLatch in = new CountDownLatch(1)-->Line_12 $$ in.await()[ FD ]
