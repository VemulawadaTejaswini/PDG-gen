Line_12 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_44 $$ latch.await()[ FD ]
Line_8 $$ String target = bean.increment().getNode()-->Line_21 $$ deploy(this.findDeployment(target))[ FD ]
Line_8 $$ String target = bean.increment().getNode()-->Line_31 $$ start(this.findContainer(target))[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_26 $$ future.cancel(false)[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_18 $$ future.get()[ FD ]
Line_32 $$ latch = new CountDownLatch(1)-->Line_44 $$ latch.await()[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_33 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_12 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_24 $$ latch.await()[ FD ]
Line_8 $$ String target = bean.increment().getNode()-->Line_41 $$ deploy(this.findDeployment(target))[ FD ]
Line_22 $$ latch = new CountDownLatch(1)-->Line_24 $$ latch.await()[ FD ]
Line_22 $$ latch = new CountDownLatch(1)-->Line_42 $$ latch = new CountDownLatch(1)[ FD ]
Line_33 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_46 $$ future.cancel(false)[ FD ]
Line_33 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_43 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_8 $$ String target = bean.increment().getNode()-->Line_15 $$ undeploy(this.findDeployment(target))[ FD ]
Line_33 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_38 $$ future.get()[ FD ]
Line_8 $$ String target = bean.increment().getNode()-->Line_35 $$ undeploy(this.findDeployment(target))[ FD ]
Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_38 $$ future.get()[ FD ]
Line_43 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_46 $$ future.cancel(false)[ FD ]
Line_32 $$ latch = new CountDownLatch(1)-->Line_42 $$ latch = new CountDownLatch(1)[ FD ]
Line_3 $$ ContextSelector<EJBClientContext> selector = EJBClientContextSelector.setup(CLIENT_PROPERTIES)-->Line_56 $$ EJBClientContext.setSelector(selector)[ FD ]
Line_5 $$ Incrementor bean = directory.lookupStateful(SlowToDestroyStatefulIncrementorBean.class, Incrementor.class)-->Line_8 $$ String target = bean.increment().getNode()[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_16 $$ future.cancel(false)[ FD ]
Line_6 $$ AtomicInteger count = new AtomicInteger()-->Line_9 $$ count.incrementAndGet()[ FD ]
Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_46 $$ future.cancel(false)[ FD ]
Line_33 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_48 $$ future.get()[ FD ]
Line_8 $$ String target = bean.increment().getNode()-->Line_25 $$ stop(this.findContainer(target))[ FD ]
Line_12 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_32 $$ latch = new CountDownLatch(1)[ FD ]
Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_26 $$ future.cancel(false)[ FD ]
Line_10 $$ ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()-->Line_33 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_36 $$ future.cancel(false)[ FD ]
Line_8 $$ String target = bean.increment().getNode()-->Line_45 $$ stop(this.findContainer(target))[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_36 $$ future.cancel(false)[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_46 $$ future.cancel(false)[ FD ]
Line_12 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_34 $$ latch.await()[ FD ]
Line_12 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_14 $$ latch.await()[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_28 $$ future.get()[ FD ]
Line_33 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_36 $$ future.cancel(false)[ FD ]
Line_4 $$ try (EJBDirectory directory = new RemoteEJBDirectory(MODULE_NAME)) -->Line_5 $$ Incrementor bean = directory.lookupStateful(SlowToDestroyStatefulIncrementorBean.class, Incrementor.class)[ FD ]
Line_10 $$ ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()-->Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_28 $$ future.get()[ FD ]
Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_33 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_8 $$ String target = bean.increment().getNode()-->Line_51 $$ start(this.findContainer(target))[ FD ]
Line_10 $$ ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()-->Line_53 $$ executor.shutdownNow()[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_2 $$ public void testConcurrentFailover() throws Exception -->Line_3 $$ ContextSelector<EJBClientContext> selector = EJBClientContextSelector.setup(CLIENT_PROPERTIES)[ CD ]
Line_42 $$ latch = new CountDownLatch(1)-->Line_44 $$ latch.await()[ FD ]
Line_12 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_22 $$ latch = new CountDownLatch(1)[ FD ]
Line_22 $$ latch = new CountDownLatch(1)-->Line_34 $$ latch.await()[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_48 $$ future.get()[ FD ]
Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_48 $$ future.get()[ FD ]
Line_22 $$ latch = new CountDownLatch(1)-->Line_32 $$ latch = new CountDownLatch(1)[ FD ]
Line_32 $$ latch = new CountDownLatch(1)-->Line_34 $$ latch.await()[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_38 $$ future.get()[ FD ]
Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_43 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_13 $$ Future<?> future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_43 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_22 $$ latch = new CountDownLatch(1)-->Line_44 $$ latch.await()[ FD ]
Line_12 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_42 $$ latch = new CountDownLatch(1)[ FD ]
Line_10 $$ ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()-->Line_23 $$ future = executor.scheduleWithFixedDelay(new IncrementTask(bean, count, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_10 $$ ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor()-->Line_43 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)[ FD ]
Line_43 $$ future = executor.scheduleWithFixedDelay(new LookupTask(directory, SlowToDestroyStatefulIncrementorBean.class, latch), 0, INVOCATION_WAIT, TimeUnit.MILLISECONDS)-->Line_48 $$ future.get()[ FD ]
