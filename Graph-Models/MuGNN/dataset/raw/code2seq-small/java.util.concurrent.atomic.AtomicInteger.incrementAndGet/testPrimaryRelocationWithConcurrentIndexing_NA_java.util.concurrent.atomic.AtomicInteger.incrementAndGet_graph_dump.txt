Line_19 $$ final CountDownLatch phase2finished = new CountDownLatch(1)-->Line_46 $$ phase2finished.await()[ FD ]
Line_18 $$ final CountDownLatch phase1finished = new CountDownLatch(1)-->Line_33 $$ phase1finished.countDown()[ FD ]
Line_6 $$ final String IDX = "test"-->Line_12 $$ flushAndRefresh(IDX)[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_13 $$ String node3 = internalCluster().startNode(nodeSettings)[ CD ]
Line_16 $$ final int numPhase1Docs = scaledRandomIntBetween(25, 200)-->Line_32 $$ if (docCount == numPhase1Docs) [ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_54 $$ assertHitCount(resp, numPhase1Docs + numPhase2Docs)[ CD ]
Line_7 $$ Settings idxSettings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_DATA_PATH, dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS, true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM, true).build()-->Line_8 $$ prepareCreate(IDX).setSettings(idxSettings).addMapping("doc", "foo", "type=string").get()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_41 $$ started.await()[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_5 $$ String node1 = internalCluster().startNode(nodeSettings)[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_7 $$ Settings idxSettings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_DATA_PATH, dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS, true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM, true).build()[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_51 $$ flushAndRefresh()[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_42 $$ phase1finished.await()[ CD ]
Line_18 $$ final CountDownLatch phase1finished = new CountDownLatch(1)-->Line_42 $$ phase1finished.await()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_48 $$ ensureGreen(IDX)[ CD ]
Line_3 $$ Path dataPath = createTempDir()-->Line_7 $$ Settings idxSettings = Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1).put(IndexMetaData.SETTING_DATA_PATH, dataPath.toAbsolutePath().toString()).put(IndexMetaData.SETTING_SHADOW_REPLICAS, true).put(IndexMetaData.SETTING_SHARED_FILESYSTEM, true).build()[ FD ]
Line_31 $$ final int docCount = counter.get()-->Line_32 $$ if (docCount == numPhase1Docs) [ FD ]
Line_6 $$ final String IDX = "test"-->Line_52 $$ SearchResponse resp = client().prepareSearch(IDX).setQuery(matchAllQuery()).get()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_18 $$ final CountDownLatch phase1finished = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_3 $$ Path dataPath = createTempDir()[ CD ]
Line_6 $$ final String IDX = "test"-->Line_45 $$ client().admin().indices().prepareUpdateSettings(IDX).setSettings(build).execute().actionGet()[ FD ]
Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)-->Line_53 $$ assertHitCount(resp, counter.get())[ FD ]
Line_4 $$ Settings nodeSettings = nodeSettings(dataPath)-->Line_5 $$ String node1 = internalCluster().startNode(nodeSettings)[ FD ]
Line_6 $$ final String IDX = "test"-->Line_26 $$ final IndexResponse indexResponse = client().prepareIndex(IDX, "doc", Integer.toString(counter.incrementAndGet())).setSource("foo", "bar").get()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_17 $$ final int numPhase2Docs = scaledRandomIntBetween(25, 200)[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_45 $$ client().admin().indices().prepareUpdateSettings(IDX).setSettings(build).execute().actionGet()[ CD ]
Line_19 $$ final CountDownLatch phase2finished = new CountDownLatch(1)-->Line_37 $$ phase2finished.countDown()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_12 $$ flushAndRefresh(IDX)[ CD ]
Line_21 $$ Thread thread = new Thread() -->Line_24 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs)) [ CD ]
Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)-->Line_24 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs)) [ FD ]
Line_20 $$ final CopyOnWriteArrayList<Throwable> exceptions = new CopyOnWriteArrayList()-->Line_29 $$ exceptions.add(t)[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_53 $$ assertHitCount(resp, counter.get())[ CD ]
Line_15 $$ final CountDownLatch started = new CountDownLatch(1)-->Line_23 $$ started.countDown()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_16 $$ final int numPhase1Docs = scaledRandomIntBetween(25, 200)[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_52 $$ SearchResponse resp = client().prepareSearch(IDX).setQuery(matchAllQuery()).get()[ CD ]
Line_21 $$ Thread thread = new Thread() -->Line_23 $$ started.countDown()[ CD ]
Line_21 $$ Thread thread = new Thread() -->Line_37 $$ phase2finished.countDown()[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_15 $$ final CountDownLatch started = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_47 $$ ExceptionsHelper.rethrowAndSuppress(exceptions)[ CD ]
Line_6 $$ final String IDX = "test"-->Line_11 $$ ensureGreen(IDX)[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_19 $$ final CountDownLatch phase2finished = new CountDownLatch(1)[ CD ]
Line_3 $$ Path dataPath = createTempDir()-->Line_4 $$ Settings nodeSettings = nodeSettings(dataPath)[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_9 $$ ensureYellow(IDX)[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_21 $$ Thread thread = new Thread() [ CD ]
Line_15 $$ final CountDownLatch started = new CountDownLatch(1)-->Line_41 $$ started.await()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_11 $$ ensureGreen(IDX)[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_6 $$ final String IDX = "test"[ CD ]
Line_4 $$ Settings nodeSettings = nodeSettings(dataPath)-->Line_13 $$ String node3 = internalCluster().startNode(nodeSettings)[ FD ]
Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)-->Line_26 $$ final IndexResponse indexResponse = client().prepareIndex(IDX, "doc", Integer.toString(counter.incrementAndGet())).setSource("foo", "bar").get()[ FD ]
Line_26 $$ final IndexResponse indexResponse = client().prepareIndex(IDX, "doc", Integer.toString(counter.incrementAndGet())).setSource("foo", "bar").get()-->Line_27 $$ assertTrue(indexResponse.isCreated())[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_44 $$ Settings build = Settings.builder().put("index.routing.allocation.exclude._name", node1).build()[ CD ]
Line_6 $$ final String IDX = "test"-->Line_48 $$ ensureGreen(IDX)[ FD ]
Line_21 $$ Thread thread = new Thread() -->Line_49 $$ thread.join()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_10 $$ String node2 = internalCluster().startNode(nodeSettings)[ CD ]
Line_5 $$ String node1 = internalCluster().startNode(nodeSettings)-->Line_44 $$ Settings build = Settings.builder().put("index.routing.allocation.exclude._name", node1).build()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_8 $$ prepareCreate(IDX).setSettings(idxSettings).addMapping("doc", "foo", "type=string").get()[ CD ]
Line_6 $$ final String IDX = "test"-->Line_9 $$ ensureYellow(IDX)[ FD ]
Line_32 $$ if (docCount == numPhase1Docs) -->Line_33 $$ phase1finished.countDown()[ CD ]
Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)-->Line_31 $$ final int docCount = counter.get()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_49 $$ thread.join()[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_4 $$ Settings nodeSettings = nodeSettings(dataPath)[ CD ]
Line_24 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs)) -->Line_32 $$ if (docCount == numPhase1Docs) [ CD ]
Line_24 $$ while (counter.get() < (numPhase1Docs + numPhase2Docs)) -->Line_31 $$ final int docCount = counter.get()[ CD ]
Line_4 $$ Settings nodeSettings = nodeSettings(dataPath)-->Line_10 $$ String node2 = internalCluster().startNode(nodeSettings)[ FD ]
Line_20 $$ final CopyOnWriteArrayList<Throwable> exceptions = new CopyOnWriteArrayList()-->Line_47 $$ ExceptionsHelper.rethrowAndSuppress(exceptions)[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_20 $$ final CopyOnWriteArrayList<Throwable> exceptions = new CopyOnWriteArrayList()[ CD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_46 $$ phase2finished.await()[ CD ]
Line_6 $$ final String IDX = "test"-->Line_8 $$ prepareCreate(IDX).setSettings(idxSettings).addMapping("doc", "foo", "type=string").get()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_14 $$ final AtomicInteger counter = new AtomicInteger(0)[ CD ]
Line_21 $$ Thread thread = new Thread() -->Line_40 $$ thread.start()[ FD ]
Line_2 $$ public void testPrimaryRelocationWithConcurrentIndexing() throws Throwable -->Line_40 $$ thread.start()[ CD ]
