Line_21 $$ Descriptor newDescriptor-->Line_29 $$ reader = SSTableReader.open(newDescriptor, entry.getValue(), metadata)[ FD ]
Line_23 $$ newDescriptor = new Descriptor(descriptor.version, descriptor.directory, descriptor.ksname, descriptor.cfname, fileIndexGenerator.incrementAndGet(), descriptor.formatType, descriptor.digestComponent)-->Line_22 $$ do [ FD ]
Line_21 $$ Descriptor newDescriptor-->Line_22 $$ do [ FD ]
Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet()) -->Line_26 $$ SSTableWriter.rename(descriptor, newDescriptor, entry.getValue())[ FD ]
Line_21 $$ Descriptor newDescriptor-->Line_26 $$ SSTableWriter.rename(descriptor, newDescriptor, entry.getValue())[ FD ]
Line_29 $$ reader = SSTableReader.open(newDescriptor, entry.getValue(), metadata)-->Line_34 $$ newSSTables.add(reader)[ FD ]
Line_6 $$ Set<SSTableReader> newSSTables = new HashSet()-->Line_36 $$ if (newSSTables.isEmpty()) [ FD ]
Line_4 $$ Set<Descriptor> currentDescriptors = new HashSet()-->Line_10 $$ if (currentDescriptors.contains(descriptor))[ FD ]
Line_27 $$ SSTableReader reader-->Line_34 $$ newSSTables.add(reader)[ FD ]
Line_6 $$ Set<SSTableReader> newSSTables = new HashSet()-->Line_42 $$ data.addSSTables(newSSTables)[ FD ]
Line_23 $$ newDescriptor = new Descriptor(descriptor.version, descriptor.directory, descriptor.ksname, descriptor.cfname, fileIndexGenerator.incrementAndGet(), descriptor.formatType, descriptor.digestComponent)-->Line_29 $$ reader = SSTableReader.open(newDescriptor, entry.getValue(), metadata)[ FD ]
Line_9 $$ Descriptor descriptor = entry.getKey()-->Line_26 $$ SSTableWriter.rename(descriptor, newDescriptor, entry.getValue())[ FD ]
Line_23 $$ newDescriptor = new Descriptor(descriptor.version, descriptor.directory, descriptor.ksname, descriptor.cfname, fileIndexGenerator.incrementAndGet(), descriptor.formatType, descriptor.digestComponent)-->Line_26 $$ SSTableWriter.rename(descriptor, newDescriptor, entry.getValue())[ FD ]
Line_7 $$ Directories.SSTableLister lister = getDirectories().sstableLister(Directories.OnTxnErr.IGNORE).skipTemporary(true)-->Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet()) [ FD ]
Line_6 $$ Set<SSTableReader> newSSTables = new HashSet()-->Line_40 $$ logger.info("Loading new SSTables and building secondary indexes for [ FD ]
Line_9 $$ Descriptor descriptor = entry.getKey()-->Line_13 $$ throw new RuntimeException(String.format("Can't open incompatible SSTable! Current version %s, found file: %s", descriptor.getFormat().getLatestVersion(), descriptor))[ FD ]
Line_21 $$ Descriptor newDescriptor-->Line_25 $$ logger.info("Renaming new SSTable [ FD ]
Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet()) -->Line_31 $$ SSTableReader.logOpenException(entry.getKey(), e)[ FD ]
Line_2 $$ public synchronized void loadNewSSTables() -->Line_40 $$ logger.info("Loading new SSTables and building secondary indexes for [ CD ]
Line_36 $$ if (newSSTables.isEmpty()) -->Line_38 $$ return[ CD ]
Line_6 $$ Set<SSTableReader> newSSTables = new HashSet()-->Line_41 $$ try (Refs<SSTableReader> refs = Refs.ref(newSSTables)) [ FD ]
Line_27 $$ SSTableReader reader-->Line_29 $$ reader = SSTableReader.open(newDescriptor, entry.getValue(), metadata)[ FD ]
Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet()) -->Line_18 $$ SSTableReader.logOpenException(entry.getKey(), e)[ FD ]
Line_2 $$ public synchronized void loadNewSSTables() -->Line_36 $$ if (newSSTables.isEmpty()) [ CD ]
Line_9 $$ Descriptor descriptor = entry.getKey()-->Line_10 $$ if (currentDescriptors.contains(descriptor))[ FD ]
Line_23 $$ newDescriptor = new Descriptor(descriptor.version, descriptor.directory, descriptor.ksname, descriptor.cfname, fileIndexGenerator.incrementAndGet(), descriptor.formatType, descriptor.digestComponent)-->Line_25 $$ logger.info("Renaming new SSTable [ FD ]
Line_9 $$ Descriptor descriptor = entry.getKey()-->Line_25 $$ logger.info("Renaming new SSTable [ FD ]
Line_4 $$ Set<Descriptor> currentDescriptors = new HashSet()-->Line_5 $$ currentDescriptors.add(sstable.descriptor)[ FD ]
Line_22 $$ do -->Line_23 $$ newDescriptor = new Descriptor(descriptor.version, descriptor.directory, descriptor.ksname, descriptor.cfname, fileIndexGenerator.incrementAndGet(), descriptor.formatType, descriptor.digestComponent)[ CD ]
Line_2 $$ public synchronized void loadNewSSTables() -->Line_6 $$ Set<SSTableReader> newSSTables = new HashSet()[ CD ]
Line_9 $$ Descriptor descriptor = entry.getKey()-->Line_16 $$ descriptor.getMetadataSerializer().mutateLevel(descriptor, 0)[ FD ]
Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet()) -->Line_9 $$ Descriptor descriptor = entry.getKey()[ FD ]
Line_2 $$ public synchronized void loadNewSSTables() -->Line_4 $$ Set<Descriptor> currentDescriptors = new HashSet()[ CD ]
Line_36 $$ if (newSSTables.isEmpty()) -->Line_37 $$ logger.info("No new SSTables were found for [ CD ]
Line_9 $$ Descriptor descriptor = entry.getKey()-->Line_15 $$ if (new File(descriptor.filenameFor(Component.STATS)).exists())[ FD ]
Line_6 $$ Set<SSTableReader> newSSTables = new HashSet()-->Line_34 $$ newSSTables.add(reader)[ FD ]
Line_8 $$ for (Map.Entry<Descriptor, Set<Component>> entry : lister.list().entrySet()) -->Line_29 $$ reader = SSTableReader.open(newDescriptor, entry.getValue(), metadata)[ FD ]
Line_15 $$ if (new File(descriptor.filenameFor(Component.STATS)).exists())-->Line_16 $$ descriptor.getMetadataSerializer().mutateLevel(descriptor, 0)[ CD ]
Line_2 $$ public synchronized void loadNewSSTables() -->Line_3 $$ logger.info("Loading new SSTables for [ CD ]
Line_6 $$ Set<SSTableReader> newSSTables = new HashSet()-->Line_43 $$ indexManager.buildAllIndexesBlocking(newSSTables)[ FD ]
Line_2 $$ public synchronized void loadNewSSTables() -->Line_7 $$ Directories.SSTableLister lister = getDirectories().sstableLister(Directories.OnTxnErr.IGNORE).skipTemporary(true)[ CD ]
Line_9 $$ Descriptor descriptor = entry.getKey()-->Line_12 $$ if (!descriptor.isCompatible())[ FD ]
Line_2 $$ public synchronized void loadNewSSTables() -->Line_45 $$ logger.info("Done loading load new SSTables for [ CD ]
Line_21 $$ Descriptor newDescriptor-->Line_23 $$ newDescriptor = new Descriptor(descriptor.version, descriptor.directory, descriptor.ksname, descriptor.cfname, fileIndexGenerator.incrementAndGet(), descriptor.formatType, descriptor.digestComponent)[ FD ]
