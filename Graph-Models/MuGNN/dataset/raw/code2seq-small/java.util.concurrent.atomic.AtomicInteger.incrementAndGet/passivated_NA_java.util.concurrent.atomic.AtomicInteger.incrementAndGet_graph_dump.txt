Line_2 $$ public void passivated(CacheEntryPassivatedEvent<BeanKey<I>, BeanEntry<G>> event) -->Line_3 $$ if (event.isPre()) [ CD ]
Line_2 $$ public void passivated(CacheEntryPassivatedEvent<BeanKey<I>, BeanEntry<G>> event) -->Line_7 $$ G groupId = event.getValue().getGroupId()[ FD ]
Line_2 $$ public void passivated(CacheEntryPassivatedEvent<BeanKey<I>, BeanEntry<G>> event) -->Line_11 $$ group.prePassivate(event.getKey().getId(), this.passivation.getPassivationListener())[ FD ]
Line_3 $$ if (event.isPre()) -->Line_4 $$ this.passiveCount.incrementAndGet()[ CD ]
Line_3 $$ if (event.isPre()) -->Line_5 $$ if (!this.passivation.isPersistent()) [ CD ]
Line_7 $$ G groupId = event.getValue().getGroupId()-->Line_10 $$ try (BeanGroup<G, I, T> group = this.groupFactory.createGroup(groupId, entry)) [ FD ]
Line_2 $$ public void passivated(CacheEntryPassivatedEvent<BeanKey<I>, BeanEntry<G>> event) -->Line_3 $$ if (event.isPre()) [ FD ]
Line_7 $$ G groupId = event.getValue().getGroupId()-->Line_8 $$ BeanGroupEntry<I, T> entry = this.groupFactory.findValue(groupId)[ FD ]
Line_8 $$ BeanGroupEntry<I, T> entry = this.groupFactory.findValue(groupId)-->Line_9 $$ if (entry != null) [ FD ]
Line_8 $$ BeanGroupEntry<I, T> entry = this.groupFactory.findValue(groupId)-->Line_10 $$ try (BeanGroup<G, I, T> group = this.groupFactory.createGroup(groupId, entry)) [ FD ]
Line_5 $$ if (!this.passivation.isPersistent()) -->Line_6 $$ this.executor.execute(() -> [ CD ]
Line_10 $$ try (BeanGroup<G, I, T> group = this.groupFactory.createGroup(groupId, entry)) -->Line_11 $$ group.prePassivate(event.getKey().getId(), this.passivation.getPassivationListener())[ FD ]
