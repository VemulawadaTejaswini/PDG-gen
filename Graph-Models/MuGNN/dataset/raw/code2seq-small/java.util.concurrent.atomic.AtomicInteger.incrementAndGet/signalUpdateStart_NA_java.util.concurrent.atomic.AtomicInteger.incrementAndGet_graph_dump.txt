Line_11 $$ while (true) -->Line_12 $$ Runnable runnable = myPendingWriteRequestsQueue.poll(2000, TimeUnit.MILLISECONDS)[ CD ]
Line_12 $$ Runnable runnable = myPendingWriteRequestsQueue.poll(2000, TimeUnit.MILLISECONDS)-->Line_14 $$ runnable.run()[ FD ]
Line_5 $$ if (Registry.is("idea.concurrent.scanning.files.to.index"))-->Line_6 $$ return[ CD ]
Line_3 $$ int workRequests = myDoWorkRequest.getAndIncrement()-->Line_4 $$ if (workRequests == 0) [ FD ]
Line_2 $$ public void signalUpdateStart() -->Line_4 $$ if (workRequests == 0) [ CD ]
Line_4 $$ if (workRequests == 0) -->Line_7 $$ myDoWorkRequest.incrementAndGet()[ CD ]
Line_13 $$ if (runnable != null) -->Line_16 $$ if (myDoWorkRequest.compareAndSet(1, 0)) [ CD ]
Line_13 $$ if (runnable != null) -->Line_14 $$ runnable.run()[ CD ]
Line_4 $$ if (workRequests == 0) -->Line_5 $$ if (Registry.is("idea.concurrent.scanning.files.to.index"))[ CD ]
Line_4 $$ if (workRequests == 0) -->Line_8 $$ ApplicationManager.getApplication().executeOnPooledThread(new Runnable() [ CD ]
Line_11 $$ while (true) -->Line_13 $$ if (runnable != null) [ CD ]
Line_12 $$ Runnable runnable = myPendingWriteRequestsQueue.poll(2000, TimeUnit.MILLISECONDS)-->Line_13 $$ if (runnable != null) [ FD ]
Line_2 $$ public void signalUpdateStart() -->Line_3 $$ int workRequests = myDoWorkRequest.getAndIncrement()[ CD ]
