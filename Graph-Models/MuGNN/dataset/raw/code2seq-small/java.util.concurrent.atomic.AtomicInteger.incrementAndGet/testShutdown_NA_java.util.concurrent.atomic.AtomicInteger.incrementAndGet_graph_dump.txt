Line_4 $$ final AtomicInteger value = new AtomicInteger(0)-->Line_11 $$ assert value.get() == 1[ FD ]
Line_5 $$ ScheduledFuture future = testPool.schedule(new Runnable() -->Line_27 $$ future.get(2, TimeUnit.SECONDS)[ FD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_10 $$ future.get()[ CD ]
Line_5 $$ ScheduledFuture future = testPool.schedule(new Runnable() -->Line_19 $$ future.get()[ FD ]
Line_5 $$ ScheduledFuture future = testPool.schedule(new Runnable() -->Line_33 $$ assert future.isCancelled()[ FD ]
Line_4 $$ final AtomicInteger value = new AtomicInteger(0)-->Line_7 $$ value.incrementAndGet()[ FD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_12 $$ future = testPool.schedule(new Runnable() [ CD ]
Line_21 $$ future = testPool.schedule(new Runnable() -->Line_23 $$ value.incrementAndGet()[ CD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_17 $$ StorageService.instance.drain()[ CD ]
Line_5 $$ ScheduledFuture future = testPool.schedule(new Runnable() -->Line_7 $$ value.incrementAndGet()[ CD ]
Line_4 $$ final AtomicInteger value = new AtomicInteger(0)-->Line_34 $$ assert value.get() == 2[ FD ]
Line_12 $$ future = testPool.schedule(new Runnable() -->Line_14 $$ value.incrementAndGet()[ CD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_19 $$ future.get()[ CD ]
Line_3 $$ DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor("testpool")-->Line_18 $$ testPool.shutdown()[ FD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_4 $$ final AtomicInteger value = new AtomicInteger(0)[ CD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_21 $$ future = testPool.schedule(new Runnable() [ CD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_3 $$ DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor("testpool")[ CD ]
Line_3 $$ DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor("testpool")-->Line_21 $$ future = testPool.schedule(new Runnable() [ FD ]
Line_5 $$ ScheduledFuture future = testPool.schedule(new Runnable() -->Line_10 $$ future.get()[ FD ]
Line_3 $$ DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor("testpool")-->Line_5 $$ ScheduledFuture future = testPool.schedule(new Runnable() [ FD ]
Line_3 $$ DebuggableScheduledThreadPoolExecutor testPool = new DebuggableScheduledThreadPoolExecutor("testpool")-->Line_12 $$ future = testPool.schedule(new Runnable() [ FD ]
Line_4 $$ final AtomicInteger value = new AtomicInteger(0)-->Line_23 $$ value.incrementAndGet()[ FD ]
Line_4 $$ final AtomicInteger value = new AtomicInteger(0)-->Line_20 $$ assert value.get() == 2[ FD ]
Line_4 $$ final AtomicInteger value = new AtomicInteger(0)-->Line_14 $$ value.incrementAndGet()[ FD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_5 $$ ScheduledFuture future = testPool.schedule(new Runnable() [ CD ]
Line_2 $$ public void testShutdown() throws ExecutionException, InterruptedException, IOException -->Line_18 $$ testPool.shutdown()[ CD ]
