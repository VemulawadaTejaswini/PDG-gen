Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_4 $$ if (requirements instanceof VcsLogProviderRequirementsEx && ((VcsLogProviderRequirementsEx) requirements).isRefresh()) [ CD ]
Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_14 $$ List<VcsCommitMetadata> metadatas = ContainerUtil.map(myCommits.subList(0, requirements.getCommitCount()), myCommitToMetadataConvertor)[ FD ]
Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_14 $$ List<VcsCommitMetadata> metadatas = ContainerUtil.map(myCommits.subList(0, requirements.getCommitCount()), myCommitToMetadataConvertor)[ CD ]
Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_12 $$ LOG.debug("readFirstBlock passed the semaphore: " + readFirstBlockCounter)[ CD ]
Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_3 $$ LOG.debug("readFirstBlock began")[ CD ]
Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_11 $$ int readFirstBlockCounter = myReadFirstBlockCounter.incrementAndGet()[ CD ]
Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_13 $$ assertRoot(root)[ CD ]
Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_15 $$ return new LogDataImpl(Collections.<VcsRef>emptySet(), metadatas)[ CD ]
Line_2 $$ public DetailedLogData readFirstBlock(@NotNull final VirtualFile root, @NotNull Requirements requirements) throws VcsException -->Line_13 $$ assertRoot(root)[ FD ]
