Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_5 $$ CountDownLatch startLatch = new CountDownLatch(1)[ CD ]
Line_6 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)-->Line_23 $$ awaitUninterruptibly(completeLatch, 1, TimeUnit.MINUTES)[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_23 $$ awaitUninterruptibly(completeLatch, 1, TimeUnit.MINUTES)[ CD ]
Line_5 $$ CountDownLatch startLatch = new CountDownLatch(1)-->Line_11 $$ awaitUninterruptibly(startLatch)[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_4 $$ AtomicInteger activeThreadCount = new AtomicInteger()[ CD ]
Line_8 $$ for (int i = 0; i < totalTasks; i++) -->Line_9 $$ boundedExecutor.submit(() -> [ CD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_3 $$ PrioritizedFifoExecutor<Runnable> boundedExecutor = new PrioritizedFifoExecutor(executor, maxThreads, DUMMY_COMPARATOR)[ CD ]
Line_13 $$ if (count < 1 || count > maxThreads) -->Line_14 $$ failed.set(true)[ CD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_7 $$ AtomicBoolean failed = new AtomicBoolean()[ CD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_8 $$ for (int i = 0; i < totalTasks; i++) [ CD ]
Line_7 $$ AtomicBoolean failed = new AtomicBoolean()-->Line_24 $$ assertFalse(failed.get())[ FD ]
Line_4 $$ AtomicInteger activeThreadCount = new AtomicInteger()-->Line_12 $$ int count = activeThreadCount.incrementAndGet()[ FD ]
Line_4 $$ AtomicInteger activeThreadCount = new AtomicInteger()-->Line_16 $$ activeThreadCount.decrementAndGet()[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_8 $$ for (int i = 0; i < totalTasks; i++) [ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_6 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)[ CD ]
Line_3 $$ PrioritizedFifoExecutor<Runnable> boundedExecutor = new PrioritizedFifoExecutor(executor, maxThreads, DUMMY_COMPARATOR)-->Line_9 $$ boundedExecutor.submit(() -> [ FD ]
Line_7 $$ AtomicBoolean failed = new AtomicBoolean()-->Line_14 $$ failed.set(true)[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_22 $$ startLatch.countDown()[ CD ]
Line_5 $$ CountDownLatch startLatch = new CountDownLatch(1)-->Line_22 $$ startLatch.countDown()[ FD ]
Line_2 $$ private void testBound(int maxThreads, int totalTasks) -->Line_24 $$ assertFalse(failed.get())[ CD ]
Line_6 $$ CountDownLatch completeLatch = new CountDownLatch(totalTasks)-->Line_18 $$ completeLatch.countDown()[ FD ]
