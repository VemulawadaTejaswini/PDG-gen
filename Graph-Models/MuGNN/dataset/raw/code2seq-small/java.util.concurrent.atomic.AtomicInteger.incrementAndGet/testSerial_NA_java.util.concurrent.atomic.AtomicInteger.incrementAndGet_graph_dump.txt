Line_2 $$ public void testSerial(final WaitQueue queue) throws InterruptedException -->Line_18 $$ while (ready.get() < ts.length) random.nextLong()[ CD ]
Line_3 $$ final AtomicInteger ready = new AtomicInteger()-->Line_8 $$ ready.incrementAndGet()[ FD ]
Line_2 $$ public void testSerial(final WaitQueue queue) throws InterruptedException -->Line_4 $$ Thread[] ts = new Thread[4][ CD ]
Line_5 $$ ts[i] = new Thread(new Runnable() -->Line_8 $$ ready.incrementAndGet()[ CD ]
Line_2 $$ public void testSerial(final WaitQueue queue) throws InterruptedException -->Line_19 $$ queue.signal()[ FD ]
Line_5 $$ ts[i] = new Thread(new Runnable() -->Line_7 $$ WaitQueue.Signal wait = queue.register()[ CD ]
Line_3 $$ final AtomicInteger ready = new AtomicInteger()-->Line_18 $$ while (ready.get() < ts.length) random.nextLong()[ FD ]
Line_2 $$ public void testSerial(final WaitQueue queue) throws InterruptedException -->Line_3 $$ final AtomicInteger ready = new AtomicInteger()[ CD ]
Line_2 $$ public void testSerial(final WaitQueue queue) throws InterruptedException -->Line_7 $$ WaitQueue.Signal wait = queue.register()[ FD ]
Line_7 $$ WaitQueue.Signal wait = queue.register()-->Line_10 $$ wait.await()[ FD ]
Line_2 $$ public void testSerial(final WaitQueue queue) throws InterruptedException -->Line_17 $$ final ThreadLocalRandom random = ThreadLocalRandom.current()[ CD ]
Line_2 $$ public void testSerial(final WaitQueue queue) throws InterruptedException -->Line_22 $$ assertFalse(queue.getClass().getName(), t.isAlive())[ FD ]
Line_2 $$ public void testSerial(final WaitQueue queue) throws InterruptedException -->Line_5 $$ for (int i = 0; i < ts.length; i++) ts[i] = new Thread(new Runnable() [ CD ]
