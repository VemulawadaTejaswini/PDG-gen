Line_29 $$ if (viewClass.isInterface()) -->Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ CD ]
Line_29 $$ if (viewClass.isInterface()) -->Line_34 $$ proxyConfiguration.setSuperClass(viewClass)[ CD ]
Line_13 $$ final ViewConfiguration viewConfiguration-->Line_38 $$ configurator.configure(context, configuration, view, viewConfiguration)[ FD ]
Line_14 $$ final ProxyConfiguration proxyConfiguration = new ProxyConfiguration()-->Line_30 $$ proxyConfiguration.setSuperClass(Object.class)[ FD ]
Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())-->Line_29 $$ if (viewClass.isInterface()) [ FD ]
Line_6 $$ for (ViewDescription view : description.getViews()) -->Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_14 $$ final ProxyConfiguration proxyConfiguration = new ProxyConfiguration()-->Line_26 $$ proxyConfiguration.addAdditionalInterface(WriteReplaceInterface.class)[ FD ]
Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())-->Line_34 $$ proxyConfiguration.setSuperClass(viewClass)[ FD ]
Line_25 $$ if (view.isUseWriteReplace()) -->Line_26 $$ proxyConfiguration.addAdditionalInterface(WriteReplaceInterface.class)[ CD ]
Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))-->Line_40 $$ configuration.getViews().add(viewConfiguration)[ FD ]
Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))-->Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())-->Line_21 $$ proxyConfiguration.setProtectionDomain(viewClass.getProtectionDomain())[ FD ]
Line_29 $$ if (viewClass.isInterface()) -->Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())-->Line_31 $$ proxyConfiguration.addAdditionalInterface(viewClass)[ FD ]
Line_6 $$ for (ViewDescription view : description.getViews()) -->Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_6 $$ for (ViewDescription view : description.getViews()) -->Line_37 $$ for (final ViewConfigurator configurator : view.getConfigurators()) [ FD ]
Line_6 $$ for (ViewDescription view : description.getViews()) -->Line_23 $$ if (view.isSerializable()) [ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_6 $$ for (ViewDescription view : description.getViews()) [ FD ]
Line_14 $$ final ProxyConfiguration proxyConfiguration = new ProxyConfiguration()-->Line_24 $$ proxyConfiguration.addAdditionalInterface(Serializable.class)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_5 $$ final ProxyMetadataSource proxyReflectionIndex = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.PROXY_REFLECTION_INDEX)[ CD ]
Line_14 $$ final ProxyConfiguration proxyConfiguration = new ProxyConfiguration()-->Line_34 $$ proxyConfiguration.setSuperClass(viewClass)[ FD ]
Line_13 $$ final ViewConfiguration viewConfiguration-->Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_14 $$ final ProxyConfiguration proxyConfiguration = new ProxyConfiguration()-->Line_31 $$ proxyConfiguration.addAdditionalInterface(viewClass)[ FD ]
Line_6 $$ for (ViewDescription view : description.getViews()) -->Line_38 $$ configurator.configure(context, configuration, view, viewConfiguration)[ FD ]
Line_14 $$ final ProxyConfiguration proxyConfiguration = new ProxyConfiguration()-->Line_20 $$ proxyConfiguration.setClassLoader(module.getClassLoader())[ FD ]
Line_7 $$ Class<?> viewClass-->Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())[ FD ]
Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))-->Line_40 $$ configuration.getViews().add(viewConfiguration)[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)-->Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())[ FD ]
Line_14 $$ final ProxyConfiguration proxyConfiguration = new ProxyConfiguration()-->Line_22 $$ proxyConfiguration.setMetadataSource(proxyReflectionIndex)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()[ CD ]
Line_5 $$ final ProxyMetadataSource proxyReflectionIndex = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.PROXY_REFLECTION_INDEX)-->Line_22 $$ proxyConfiguration.setMetadataSource(proxyReflectionIndex)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_38 $$ configurator.configure(context, configuration, view, viewConfiguration)[ FD ]
Line_44 $$ for (final Map.Entry<ServiceName, ServiceBuilder.DependencyType> entry : description.getDependencies().entrySet()) -->Line_45 $$ serviceBuilder.addDependency(entry.getValue(), entry.getKey())[ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_4 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ FD ]
Line_23 $$ if (view.isSerializable()) -->Line_25 $$ if (view.isUseWriteReplace()) [ CD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_11 $$ throw EeLogger.ROOT_LOGGER.cannotLoadViewClass(e, view.getViewClassName(), configuration)[ FD ]
Line_7 $$ Class<?> viewClass-->Line_29 $$ if (viewClass.isInterface()) [ FD ]
Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))-->Line_38 $$ configurator.configure(context, configuration, view, viewConfiguration)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_44 $$ for (final Map.Entry<ServiceName, ServiceBuilder.DependencyType> entry : description.getDependencies().entrySet()) [ FD ]
Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())-->Line_15 $$ if (viewClass.getName().startsWith("java.")) [ FD ]
Line_6 $$ for (ViewDescription view : description.getViews()) -->Line_11 $$ throw EeLogger.ROOT_LOGGER.cannotLoadViewClass(e, view.getViewClassName(), configuration)[ FD ]
Line_6 $$ for (ViewDescription view : description.getViews()) -->Line_25 $$ if (view.isUseWriteReplace()) [ FD ]
Line_37 $$ for (final ViewConfigurator configurator : view.getConfigurators()) -->Line_38 $$ configurator.configure(context, configuration, view, viewConfiguration)[ FD ]
Line_23 $$ if (view.isSerializable()) -->Line_24 $$ proxyConfiguration.addAdditionalInterface(Serializable.class)[ CD ]
Line_13 $$ final ViewConfiguration viewConfiguration-->Line_40 $$ configuration.getViews().add(viewConfiguration)[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_40 $$ configuration.getViews().add(viewConfiguration)[ FD ]
Line_6 $$ for (ViewDescription view : description.getViews()) -->Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_4 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)[ CD ]
Line_42 $$ configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>() -->Line_45 $$ serviceBuilder.addDependency(entry.getValue(), entry.getKey())[ FD ]
Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())-->Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))-->Line_38 $$ configurator.configure(context, configuration, view, viewConfiguration)[ FD ]
Line_4 $$ final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE)-->Line_20 $$ proxyConfiguration.setClassLoader(module.getClassLoader())[ FD ]
Line_7 $$ Class<?> viewClass-->Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_42 $$ configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>() [ FD ]
Line_13 $$ final ViewConfiguration viewConfiguration-->Line_32 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_7 $$ Class<?> viewClass-->Line_31 $$ proxyConfiguration.addAdditionalInterface(viewClass)[ FD ]
Line_7 $$ Class<?> viewClass-->Line_21 $$ proxyConfiguration.setProtectionDomain(viewClass.getProtectionDomain())[ FD ]
Line_7 $$ Class<?> viewClass-->Line_34 $$ proxyConfiguration.setSuperClass(viewClass)[ FD ]
Line_7 $$ Class<?> viewClass-->Line_15 $$ if (viewClass.getName().startsWith("java.")) [ FD ]
Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()-->Line_5 $$ final ProxyMetadataSource proxyReflectionIndex = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.PROXY_REFLECTION_INDEX)[ FD ]
Line_7 $$ Class<?> viewClass-->Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_42 $$ configuration.getStartDependencies().add(new DependencyConfigurator<ComponentStartService>() [ CD ]
Line_29 $$ if (viewClass.isInterface()) -->Line_30 $$ proxyConfiguration.setSuperClass(Object.class)[ CD ]
Line_9 $$ viewClass = module.getClassLoader().loadClass(view.getViewClassName())-->Line_35 $$ viewConfiguration = view.createViewConfiguration(viewClass, configuration, new ProxyFactory(proxyConfiguration))[ FD ]
Line_2 $$ public void configure(final DeploymentPhaseContext context, final ComponentDescription description, final ComponentConfiguration configuration) throws DeploymentUnitProcessingException -->Line_3 $$ final DeploymentUnit deploymentUnit = context.getDeploymentUnit()[ FD ]
Line_29 $$ if (viewClass.isInterface()) -->Line_31 $$ proxyConfiguration.addAdditionalInterface(viewClass)[ CD ]
Line_14 $$ final ProxyConfiguration proxyConfiguration = new ProxyConfiguration()-->Line_21 $$ proxyConfiguration.setProtectionDomain(viewClass.getProtectionDomain())[ FD ]
