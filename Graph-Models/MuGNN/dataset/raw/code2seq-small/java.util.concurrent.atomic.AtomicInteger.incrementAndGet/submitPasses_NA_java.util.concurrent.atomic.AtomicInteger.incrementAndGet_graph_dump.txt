Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)-->Line_22 $$ vFiles.add(FileDocumentManager.getInstance().getFile(document))[ FD ]
Line_10 $$ FileEditor fileEditor = entry.getKey()-->Line_65 $$ createScheduledPass(fileEditor, pass, toBeSubmitted, allCreatedPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_16 $$ document = editor.getDocument()-->Line_21 $$ if (document != null) [ FD ]
Line_10 $$ FileEditor fileEditor = entry.getKey()-->Line_33 $$ documentBoundPasses.putValue(fileEditor, textEditorHighlightingPass)[ FD ]
Line_27 $$ EditorBoundHighlightingPass editorPass = (EditorBoundHighlightingPass) pass-->Line_29 $$ editorBoundPasses.putValue(fileEditor, editorPass)[ FD ]
Line_5 $$ MultiMap<Document, FileEditor> documentToEditors = MultiMap.createSet()-->Line_45 $$ for (Map.Entry<Document, Collection<FileEditor>> entry : documentToEditors.entrySet()) [ FD ]
Line_11 $$ HighlightingPass[] passes = entry.getValue()-->Line_50 $$ if (passes.isEmpty()) [ FD ]
Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) -->Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)[ CD ]
Line_9 $$ for (Map.Entry<FileEditor, HighlightingPass[]> entry : passesMap.entrySet()) -->Line_60 $$ Collection<EditorBoundHighlightingPass> createdEditorBoundPasses = entry.getValue()[ FD ]
Line_41 $$ List<ScheduledPass> freePasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 5)-->Line_65 $$ createScheduledPass(fileEditor, pass, toBeSubmitted, allCreatedPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_12 $$ Document document-->Line_21 $$ if (document != null) [ FD ]
Line_11 $$ HighlightingPass[] passes = entry.getValue()-->Line_55 $$ createScheduledPass(preferredFileEditor, currentPass, toBeSubmitted, passes, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_12 $$ Document document-->Line_32 $$ document = textEditorHighlightingPass.getDocument()[ FD ]
Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) -->Line_33 $$ documentBoundPasses.putValue(fileEditor, textEditorHighlightingPass)[ CD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_68 $$ if (CHECK_CONSISTENCY && !ApplicationInfoImpl.isInPerformanceTest()) [ CD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_5 $$ MultiMap<Document, FileEditor> documentToEditors = MultiMap.createSet()[ CD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_6 $$ MultiMap<FileEditor, TextEditorHighlightingPass> documentBoundPasses = MultiMap.createSmart()[ CD ]
Line_16 $$ document = editor.getDocument()-->Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)[ FD ]
Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)-->Line_32 $$ document = textEditorHighlightingPass.getDocument()[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_71 $$ log(updateProgress, null, vFiles + " ----- starting " + threadsToStartCountdown.get(), freePasses)[ FD ]
Line_9 $$ for (Map.Entry<FileEditor, HighlightingPass[]> entry : passesMap.entrySet()) -->Line_11 $$ HighlightingPass[] passes = entry.getValue()[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_3 $$ if (isDisposed())[ CD ]
Line_5 $$ MultiMap<Document, FileEditor> documentToEditors = MultiMap.createSet()-->Line_41 $$ List<ScheduledPass> freePasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 5)[ FD ]
Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)-->Line_35 $$ documentToEditors.putValue(document, fileEditor)[ FD ]
Line_16 $$ document = editor.getDocument()-->Line_32 $$ document = textEditorHighlightingPass.getDocument()[ FD ]
Line_10 $$ FileEditor fileEditor = entry.getKey()-->Line_29 $$ editorBoundPasses.putValue(fileEditor, editorPass)[ FD ]
Line_12 $$ Document document-->Line_35 $$ documentToEditors.putValue(document, fileEditor)[ FD ]
Line_5 $$ MultiMap<Document, FileEditor> documentToEditors = MultiMap.createSet()-->Line_42 $$ List<ScheduledPass> dependentPasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 10)[ FD ]
Line_9 $$ for (Map.Entry<FileEditor, HighlightingPass[]> entry : passesMap.entrySet()) -->Line_59 $$ FileEditor fileEditor = entry.getKey()[ FD ]
Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) -->Line_29 $$ editorBoundPasses.putValue(fileEditor, editorPass)[ CD ]
Line_44 $$ final AtomicInteger threadsToStartCountdown = new AtomicInteger(0)-->Line_65 $$ createScheduledPass(fileEditor, pass, toBeSubmitted, allCreatedPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_18 $$ VirtualFile virtualFile = ((FileEditorManagerEx) FileEditorManager.getInstance(myProject)).getFile(fileEditor)-->Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_9 $$ for (Map.Entry<FileEditor, HighlightingPass[]> entry : passesMap.entrySet()) [ FD ]
Line_42 $$ List<ScheduledPass> dependentPasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 10)-->Line_55 $$ createScheduledPass(preferredFileEditor, currentPass, toBeSubmitted, passes, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_12 $$ Document document-->Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)[ FD ]
Line_12 $$ Document document-->Line_34 $$ if (document != null) [ FD ]
Line_44 $$ final AtomicInteger threadsToStartCountdown = new AtomicInteger(0)-->Line_55 $$ createScheduledPass(preferredFileEditor, currentPass, toBeSubmitted, passes, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_48 $$ FileEditor preferredFileEditor = getPreferredFileEditor(document, fileEditors)-->Line_49 $$ List<TextEditorHighlightingPass> passes = (List<TextEditorHighlightingPass>) documentBoundPasses.get(preferredFileEditor)[ FD ]
Line_54 $$ for (TextEditorHighlightingPass currentPass : passes) -->Line_55 $$ createScheduledPass(preferredFileEditor, currentPass, toBeSubmitted, passes, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_9 $$ for (Map.Entry<FileEditor, HighlightingPass[]> entry : passesMap.entrySet()) -->Line_47 $$ Document document = entry.getKey()[ FD ]
Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)-->Line_21 $$ if (document != null) [ FD ]
Line_41 $$ List<ScheduledPass> freePasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 5)-->Line_55 $$ createScheduledPass(preferredFileEditor, currentPass, toBeSubmitted, passes, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_32 $$ document = textEditorHighlightingPass.getDocument()-->Line_35 $$ documentToEditors.putValue(document, fileEditor)[ FD ]
Line_25 $$ for (final HighlightingPass pass : passes) -->Line_65 $$ createScheduledPass(fileEditor, pass, toBeSubmitted, allCreatedPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_21 $$ if (document != null) -->Line_22 $$ vFiles.add(FileDocumentManager.getInstance().getFile(document))[ CD ]
Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) -->Line_34 $$ if (document != null) [ CD ]
Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)-->Line_32 $$ document = textEditorHighlightingPass.getDocument()[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_8 $$ Set<VirtualFile> vFiles = new HashSet<VirtualFile>()[ CD ]
Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)-->Line_37 $$ prevId = textEditorHighlightingPass.getId()[ FD ]
Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) -->Line_28 $$ editorPass.setId(nextPassId.incrementAndGet())[ CD ]
Line_16 $$ document = editor.getDocument()-->Line_34 $$ if (document != null) [ FD ]
Line_68 $$ if (CHECK_CONSISTENCY && !ApplicationInfoImpl.isInPerformanceTest()) -->Line_69 $$ assertConsistency(freePasses, toBeSubmitted, threadsToStartCountdown)[ CD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_55 $$ createScheduledPass(preferredFileEditor, currentPass, toBeSubmitted, passes, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_13 $$ if (fileEditor instanceof TextEditor) -->Line_16 $$ document = editor.getDocument()[ CD ]
Line_24 $$ int prevId = 0-->Line_37 $$ prevId = textEditorHighlightingPass.getId()[ FD ]
Line_12 $$ Document document-->Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)[ FD ]
Line_12 $$ Document document-->Line_22 $$ vFiles.add(FileDocumentManager.getInstance().getFile(document))[ FD ]
Line_5 $$ MultiMap<Document, FileEditor> documentToEditors = MultiMap.createSet()-->Line_35 $$ documentToEditors.putValue(document, fileEditor)[ FD ]
Line_13 $$ if (fileEditor instanceof TextEditor) -->Line_18 $$ VirtualFile virtualFile = ((FileEditorManagerEx) FileEditorManager.getInstance(myProject)).getFile(fileEditor)[ CD ]
Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)-->Line_34 $$ if (document != null) [ FD ]
Line_13 $$ if (fileEditor instanceof TextEditor) -->Line_14 $$ Editor editor = ((TextEditor) fileEditor).getEditor()[ CD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_41 $$ List<ScheduledPass> freePasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 5)[ CD ]
Line_43 $$ Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted = new THashMap<Pair<FileEditor, Integer>, ScheduledPass>(passesMap.size())-->Line_55 $$ createScheduledPass(preferredFileEditor, currentPass, toBeSubmitted, passes, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_44 $$ final AtomicInteger threadsToStartCountdown = new AtomicInteger(0)-->Line_69 $$ assertConsistency(freePasses, toBeSubmitted, threadsToStartCountdown)[ FD ]
Line_16 $$ document = editor.getDocument()-->Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)[ FD ]
Line_9 $$ for (Map.Entry<FileEditor, HighlightingPass[]> entry : passesMap.entrySet()) -->Line_46 $$ Collection<FileEditor> fileEditors = entry.getValue()[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_65 $$ createScheduledPass(fileEditor, pass, toBeSubmitted, allCreatedPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_10 $$ FileEditor fileEditor = entry.getKey()-->Line_13 $$ if (fileEditor instanceof TextEditor) [ FD ]
Line_10 $$ FileEditor fileEditor = entry.getKey()-->Line_61 $$ List<TextEditorHighlightingPass> createdDocumentBoundPasses = (List<TextEditorHighlightingPass>) documentBoundPasses.get(fileEditor)[ FD ]
Line_25 $$ for (final HighlightingPass pass : passes) -->Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_43 $$ Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted = new THashMap<Pair<FileEditor, Integer>, ScheduledPass>(passesMap.size())[ CD ]
Line_6 $$ MultiMap<FileEditor, TextEditorHighlightingPass> documentBoundPasses = MultiMap.createSmart()-->Line_61 $$ List<TextEditorHighlightingPass> createdDocumentBoundPasses = (List<TextEditorHighlightingPass>) documentBoundPasses.get(fileEditor)[ FD ]
Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) -->Line_27 $$ EditorBoundHighlightingPass editorPass = (EditorBoundHighlightingPass) pass[ CD ]
Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)-->Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)[ FD ]
Line_48 $$ FileEditor preferredFileEditor = getPreferredFileEditor(document, fileEditors)-->Line_55 $$ createScheduledPass(preferredFileEditor, currentPass, toBeSubmitted, passes, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_34 $$ if (document != null) -->Line_35 $$ documentToEditors.putValue(document, fileEditor)[ CD ]
Line_9 $$ for (Map.Entry<FileEditor, HighlightingPass[]> entry : passesMap.entrySet()) -->Line_10 $$ FileEditor fileEditor = entry.getKey()[ FD ]
Line_62 $$ List<TextEditorHighlightingPass> allCreatedPasses = new ArrayList<TextEditorHighlightingPass>(createdDocumentBoundPasses)-->Line_63 $$ allCreatedPasses.addAll(createdEditorBoundPasses)[ FD ]
Line_72 $$ for (ScheduledPass dependentPass : dependentPasses) -->Line_73 $$ mySubmittedPasses.put(dependentPass, Job.NULL_JOB)[ FD ]
Line_10 $$ FileEditor fileEditor = entry.getKey()-->Line_18 $$ VirtualFile virtualFile = ((FileEditorManagerEx) FileEditorManager.getInstance(myProject)).getFile(fileEditor)[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_42 $$ List<ScheduledPass> dependentPasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 10)[ CD ]
Line_62 $$ List<TextEditorHighlightingPass> allCreatedPasses = new ArrayList<TextEditorHighlightingPass>(createdDocumentBoundPasses)-->Line_65 $$ createScheduledPass(fileEditor, pass, toBeSubmitted, allCreatedPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_7 $$ MultiMap<FileEditor, EditorBoundHighlightingPass> editorBoundPasses = MultiMap.createSmart()[ CD ]
Line_42 $$ List<ScheduledPass> dependentPasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 10)-->Line_65 $$ createScheduledPass(fileEditor, pass, toBeSubmitted, allCreatedPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_3 $$ if (isDisposed())-->Line_4 $$ return[ CD ]
Line_13 $$ if (fileEditor instanceof TextEditor) -->Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)[ CD ]
Line_32 $$ document = textEditorHighlightingPass.getDocument()-->Line_34 $$ if (document != null) [ FD ]
Line_60 $$ Collection<EditorBoundHighlightingPass> createdEditorBoundPasses = entry.getValue()-->Line_63 $$ allCreatedPasses.addAll(createdEditorBoundPasses)[ FD ]
Line_10 $$ FileEditor fileEditor = entry.getKey()-->Line_35 $$ documentToEditors.putValue(document, fileEditor)[ FD ]
Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) -->Line_37 $$ prevId = textEditorHighlightingPass.getId()[ CD ]
Line_16 $$ document = editor.getDocument()-->Line_35 $$ documentToEditors.putValue(document, fileEditor)[ FD ]
Line_7 $$ MultiMap<FileEditor, EditorBoundHighlightingPass> editorBoundPasses = MultiMap.createSmart()-->Line_29 $$ editorBoundPasses.putValue(fileEditor, editorPass)[ FD ]
Line_41 $$ List<ScheduledPass> freePasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 5)-->Line_69 $$ assertConsistency(freePasses, toBeSubmitted, threadsToStartCountdown)[ FD ]
Line_16 $$ document = editor.getDocument()-->Line_22 $$ vFiles.add(FileDocumentManager.getInstance().getFile(document))[ FD ]
Line_6 $$ MultiMap<FileEditor, TextEditorHighlightingPass> documentBoundPasses = MultiMap.createSmart()-->Line_49 $$ List<TextEditorHighlightingPass> passes = (List<TextEditorHighlightingPass>) documentBoundPasses.get(preferredFileEditor)[ FD ]
Line_14 $$ Editor editor = ((TextEditor) fileEditor).getEditor()-->Line_16 $$ document = editor.getDocument()[ FD ]
Line_7 $$ MultiMap<FileEditor, EditorBoundHighlightingPass> editorBoundPasses = MultiMap.createSmart()-->Line_58 $$ for (Map.Entry<FileEditor, Collection<EditorBoundHighlightingPass>> entry : editorBoundPasses.entrySet()) [ FD ]
Line_8 $$ Set<VirtualFile> vFiles = new HashSet<VirtualFile>()-->Line_22 $$ vFiles.add(FileDocumentManager.getInstance().getFile(document))[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_44 $$ final AtomicInteger threadsToStartCountdown = new AtomicInteger(0)[ CD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_71 $$ log(updateProgress, null, vFiles + " ----- starting " + threadsToStartCountdown.get(), freePasses)[ CD ]
Line_24 $$ int prevId = 0-->Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)[ FD ]
Line_16 $$ document = editor.getDocument()-->Line_48 $$ FileEditor preferredFileEditor = getPreferredFileEditor(document, fileEditors)[ FD ]
Line_2 $$ void submitPasses(@NotNull Map<FileEditor, HighlightingPass[]> passesMap, @NotNull DaemonProgressIndicator updateProgress) -->Line_43 $$ Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted = new THashMap<Pair<FileEditor, Integer>, ScheduledPass>(passesMap.size())[ FD ]
Line_46 $$ Collection<FileEditor> fileEditors = entry.getValue()-->Line_48 $$ FileEditor preferredFileEditor = getPreferredFileEditor(document, fileEditors)[ FD ]
Line_6 $$ MultiMap<FileEditor, TextEditorHighlightingPass> documentBoundPasses = MultiMap.createSmart()-->Line_33 $$ documentBoundPasses.putValue(fileEditor, textEditorHighlightingPass)[ FD ]
Line_11 $$ HighlightingPass[] passes = entry.getValue()-->Line_53 $$ sortById(passes)[ FD ]
Line_43 $$ Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted = new THashMap<Pair<FileEditor, Integer>, ScheduledPass>(passesMap.size())-->Line_69 $$ assertConsistency(freePasses, toBeSubmitted, threadsToStartCountdown)[ FD ]
Line_75 $$ for (ScheduledPass freePass : freePasses) -->Line_76 $$ submit(freePass)[ FD ]
Line_43 $$ Map<Pair<FileEditor, Integer>, ScheduledPass> toBeSubmitted = new THashMap<Pair<FileEditor, Integer>, ScheduledPass>(passesMap.size())-->Line_65 $$ createScheduledPass(fileEditor, pass, toBeSubmitted, allCreatedPasses, freePasses, dependentPasses, updateProgress, threadsToStartCountdown)[ FD ]
Line_41 $$ List<ScheduledPass> freePasses = new ArrayList<ScheduledPass>(documentToEditors.size() * 5)-->Line_71 $$ log(updateProgress, null, vFiles + " ----- starting " + threadsToStartCountdown.get(), freePasses)[ FD ]
Line_19 $$ document = virtualFile == null ? null : FileDocumentManager.getInstance().getDocument(virtualFile)-->Line_48 $$ FileEditor preferredFileEditor = getPreferredFileEditor(document, fileEditors)[ FD ]
Line_27 $$ EditorBoundHighlightingPass editorPass = (EditorBoundHighlightingPass) pass-->Line_28 $$ editorPass.setId(nextPassId.incrementAndGet())[ FD ]
Line_13 $$ if (fileEditor instanceof TextEditor) -->Line_15 $$ LOG.assertTrue(!(editor instanceof EditorWindow))[ CD ]
Line_44 $$ final AtomicInteger threadsToStartCountdown = new AtomicInteger(0)-->Line_71 $$ log(updateProgress, null, vFiles + " ----- starting " + threadsToStartCountdown.get(), freePasses)[ FD ]
Line_12 $$ Document document-->Line_48 $$ FileEditor preferredFileEditor = getPreferredFileEditor(document, fileEditors)[ FD ]
Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) -->Line_32 $$ document = textEditorHighlightingPass.getDocument()[ CD ]
Line_31 $$ TextEditorHighlightingPass textEditorHighlightingPass = convertToTextHighlightingPass(pass, document, nextPassId, prevId)-->Line_33 $$ documentBoundPasses.putValue(fileEditor, textEditorHighlightingPass)[ FD ]
Line_12 $$ Document document-->Line_16 $$ document = editor.getDocument()[ FD ]
Line_32 $$ document = textEditorHighlightingPass.getDocument()-->Line_48 $$ FileEditor preferredFileEditor = getPreferredFileEditor(document, fileEditors)[ FD ]
Line_25 $$ for (final HighlightingPass pass : passes) -->Line_26 $$ if (pass instanceof EditorBoundHighlightingPass) [ FD ]
