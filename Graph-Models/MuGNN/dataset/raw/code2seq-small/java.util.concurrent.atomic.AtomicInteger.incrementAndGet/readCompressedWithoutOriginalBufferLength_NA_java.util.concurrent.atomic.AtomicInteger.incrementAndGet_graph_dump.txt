Line_9 $$ long doneTime = (DUMP_COMPRESSION_STATS ? System.nanoTime() : 0) - started-->Line_11 $$ long decompressedTime = myDecompressionTime.addAndGet(doneTime)[ FD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_6 $$ int decompressedRequests = myDecompressionRequests.incrementAndGet()[ CD ]
Line_3 $$ int size = DataInputOutputUtil.readINT(in)-->Line_5 $$ in.readFully(bytes, 0, size)[ FD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_5 $$ in.readFully(bytes, 0, size)[ FD ]
Line_12 $$ if (DUMP_COMPRESSION_STATS && decompressedRequests % 1000 == 0) -->Line_13 $$ System.out.println("Decompressed " + decompressedRequests + " times, size: " + decompressedSize + " for " + (decompressedTime / 1000000) + "ms")[ CD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_8 $$ byte[] decompressedResult = Snappy.uncompress(bytes, 0, size)[ CD ]
Line_3 $$ int size = DataInputOutputUtil.readINT(in)-->Line_8 $$ byte[] decompressedResult = Snappy.uncompress(bytes, 0, size)[ FD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_12 $$ if (DUMP_COMPRESSION_STATS && decompressedRequests % 1000 == 0) [ CD ]
Line_3 $$ int size = DataInputOutputUtil.readINT(in)-->Line_4 $$ byte[] bytes = spareBufferLocal.getBuffer(size)[ FD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_5 $$ in.readFully(bytes, 0, size)[ CD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_4 $$ byte[] bytes = spareBufferLocal.getBuffer(size)[ CD ]
Line_3 $$ int size = DataInputOutputUtil.readINT(in)-->Line_10 $$ long decompressedSize = myDecompressedSize.addAndGet(size)[ FD ]
Line_4 $$ byte[] bytes = spareBufferLocal.getBuffer(size)-->Line_8 $$ byte[] decompressedResult = Snappy.uncompress(bytes, 0, size)[ FD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_3 $$ int size = DataInputOutputUtil.readINT(in)[ CD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_9 $$ long doneTime = (DUMP_COMPRESSION_STATS ? System.nanoTime() : 0) - started[ CD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_11 $$ long decompressedTime = myDecompressionTime.addAndGet(doneTime)[ CD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_3 $$ int size = DataInputOutputUtil.readINT(in)[ FD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_7 $$ long started = DUMP_COMPRESSION_STATS ? System.nanoTime() : 0[ CD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_10 $$ long decompressedSize = myDecompressedSize.addAndGet(size)[ CD ]
Line_2 $$ public static byte[] readCompressedWithoutOriginalBufferLength(@NotNull DataInput in) throws IOException -->Line_15 $$ return decompressedResult[ CD ]
Line_4 $$ byte[] bytes = spareBufferLocal.getBuffer(size)-->Line_5 $$ in.readFully(bytes, 0, size)[ FD ]
