Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_31 $$ logger.info("indexed [ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_30 $$ assertThat(client().prepareSearch().setSize(0).get().getHits().totalHits(), equalTo((long) numDocs.get()))[ CD ]
Line_11 $$ while (stop.get() == false) -->Line_12 $$ client().prepareIndex().setIndex("test").setType("doc").setSource("[ CD ]
Line_9 $$ Thread indexingThread = new Thread() -->Line_26 $$ indexingThread.join()[ FD ]
Line_11 $$ while (stop.get() == false) -->Line_13 $$ numDocs.incrementAndGet()[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_35 $$ assertThat(client().prepareSearch().setSize(0).get().getHits().totalHits(), equalTo((long) numDocs.get()))[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_6 $$ ensureGreen()[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_4 $$ createIndex("test")[ CD ]
Line_8 $$ final AtomicInteger numDocs = new AtomicInteger(0)-->Line_13 $$ numDocs.incrementAndGet()[ FD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_8 $$ final AtomicInteger numDocs = new AtomicInteger(0)[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_28 $$ assertFlushResponseEqualsShardStats(indexStats.getShards(), syncedFlushResult.getShardsResultPerIndex().get("test"))[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_17 $$ indexingThread.start()[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_32 $$ logClusterState()[ CD ]
Line_9 $$ Thread indexingThread = new Thread() -->Line_17 $$ indexingThread.start()[ FD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_34 $$ ensureGreen()[ CD ]
Line_7 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_11 $$ while (stop.get() == false) [ FD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_7 $$ final AtomicBoolean stop = new AtomicBoolean(false)[ CD ]
Line_7 $$ final AtomicBoolean stop = new AtomicBoolean(false)-->Line_25 $$ stop.set(true)[ FD ]
Line_8 $$ final AtomicInteger numDocs = new AtomicInteger(0)-->Line_30 $$ assertThat(client().prepareSearch().setSize(0).get().getHits().totalHits(), equalTo((long) numDocs.get()))[ FD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_9 $$ Thread indexingThread = new Thread() [ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_25 $$ stop.set(true)[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_23 $$ SyncedFlushResponse syncedFlushResult = client().admin().indices().prepareSyncedFlush("test").get()[ CD ]
Line_8 $$ final AtomicInteger numDocs = new AtomicInteger(0)-->Line_35 $$ assertThat(client().prepareSearch().setSize(0).get().getHits().totalHits(), equalTo((long) numDocs.get()))[ FD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_29 $$ refresh()[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_33 $$ internalCluster().fullRestart()[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_5 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(IndexShard.INDEX_TRANSLOG_FLUSH_THRESHOLD_SIZE, new ByteSizeValue(1, ByteSizeUnit.PB)).put("index.refresh_interval", -1).put("index.number_of_replicas", internalCluster().numDataNodes() - 1)).get()[ CD ]
Line_9 $$ Thread indexingThread = new Thread() -->Line_11 $$ while (stop.get() == false) [ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_3 $$ internalCluster().ensureAtLeastNumDataNodes(3)[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_27 $$ indexStats = client().admin().indices().prepareStats("test").get().getIndex("test")[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_26 $$ indexingThread.join()[ CD ]
Line_2 $$ public void testSyncedFlushWithConcurrentIndexing() throws Exception -->Line_18 $$ IndexStats indexStats = client().admin().indices().prepareStats("test").get().getIndex("test")[ CD ]
