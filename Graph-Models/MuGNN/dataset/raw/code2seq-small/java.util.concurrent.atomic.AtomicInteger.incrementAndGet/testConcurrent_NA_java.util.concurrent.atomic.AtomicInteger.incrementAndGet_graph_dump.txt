Line_3 $$ final AtomicInteger count = new AtomicInteger(0)-->Line_34 $$ count.incrementAndGet()[ FD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_42 $$ assertThat(countDown.isCountedDown(), equalTo(true))[ CD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_43 $$ assertThat(count.get(), Matchers.equalTo(1))[ CD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_3 $$ final AtomicInteger count = new AtomicInteger(0)[ CD ]
Line_4 $$ final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000))-->Line_36 $$ assertThat(countDown.isCountedDown(), equalTo(true))[ FD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_11 $$ latch.await()[ FD ]
Line_7 $$ for (int i = 0; i < threads.length; i++) -->Line_8 $$ threads[i] = new Thread() [ CD ]
Line_32 $$ if (rarely()) -->Line_36 $$ assertThat(countDown.isCountedDown(), equalTo(true))[ CD ]
Line_7 $$ for (int i = 0; i < threads.length; i++) -->Line_28 $$ threads[i].start()[ CD ]
Line_4 $$ final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000))-->Line_37 $$ assertThat(countDown.fastForward(), equalTo(false))[ FD ]
Line_16 $$ if (frequently()) -->Line_17 $$ if (countDown.isCountedDown()) [ CD ]
Line_4 $$ final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000))-->Line_21 $$ if (countDown.countDown()) [ FD ]
Line_4 $$ final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000))-->Line_42 $$ assertThat(countDown.isCountedDown(), equalTo(true))[ FD ]
Line_8 $$ threads[i] = new Thread() -->Line_15 $$ while (true) [ CD ]
Line_4 $$ final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000))-->Line_33 $$ if (countDown.fastForward()) [ FD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_31 $$ Thread.yield()[ CD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_4 $$ final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000))[ CD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_32 $$ if (rarely()) [ CD ]
Line_32 $$ if (rarely()) -->Line_37 $$ assertThat(countDown.fastForward(), equalTo(false))[ CD ]
Line_3 $$ final AtomicInteger count = new AtomicInteger(0)-->Line_22 $$ count.incrementAndGet()[ FD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_5 $$ Thread[] threads = new Thread[between(3, 10)][ CD ]
Line_15 $$ while (true) -->Line_21 $$ if (countDown.countDown()) [ CD ]
Line_6 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_30 $$ latch.countDown()[ FD ]
Line_15 $$ while (true) -->Line_16 $$ if (frequently()) [ CD ]
Line_21 $$ if (countDown.countDown()) -->Line_22 $$ count.incrementAndGet()[ CD ]
Line_32 $$ if (rarely()) -->Line_33 $$ if (countDown.fastForward()) [ CD ]
Line_4 $$ final CountDown countDown = new CountDown(scaledRandomIntBetween(10, 1000))-->Line_17 $$ if (countDown.isCountedDown()) [ FD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_7 $$ for (int i = 0; i < threads.length; i++) [ CD ]
Line_33 $$ if (countDown.fastForward()) -->Line_34 $$ count.incrementAndGet()[ CD ]
Line_2 $$ public void testConcurrent() throws InterruptedException -->Line_30 $$ latch.countDown()[ CD ]
Line_3 $$ final AtomicInteger count = new AtomicInteger(0)-->Line_43 $$ assertThat(count.get(), Matchers.equalTo(1))[ FD ]
