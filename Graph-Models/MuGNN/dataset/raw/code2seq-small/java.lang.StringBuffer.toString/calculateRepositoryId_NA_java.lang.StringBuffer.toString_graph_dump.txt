Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_7 $$ b.append(cls.getPackage().getName().replace('.', '/'))[ CD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_10 $$ base = base.substring(base.lastIndexOf('.') + 1)[ CD ]
Line_9 $$ String base = cls.getName()-->Line_10 $$ base = base.substring(base.lastIndexOf('.') + 1)[ FD ]
Line_21 $$ long serialVersionUID = osClass.getSerialVersionUID()-->Line_22 $$ String SVUID = toHexString(serialVersionUID)[ FD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_20 $$ if (osClass != null) [ CD ]
Line_19 $$ ObjectStreamClass osClass = ObjectStreamClass.lookup(cls)-->Line_20 $$ if (osClass != null) [ FD ]
Line_2 $$ protected void calculateRepositoryId() -->Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) [ CD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_28 $$ repositoryId = b.toString()[ FD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_8 $$ b.append('/')[ CD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_11 $$ b.append(base).append(":1.0")[ FD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_7 $$ b.append(cls.getPackage().getName().replace('.', '/'))[ FD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_16 $$ memberPrefix = b.toString() + "."[ FD ]
Line_17 $$ String hashStr = toHexString(classHashCode)-->Line_18 $$ b.append(':').append(hashStr)[ FD ]
Line_9 $$ String base = cls.getName()-->Line_11 $$ b.append(base).append(":1.0")[ FD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_12 $$ repositoryId = b.toString()[ CD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_12 $$ repositoryId = b.toString()[ FD ]
Line_2 $$ protected void calculateRepositoryId() -->Line_3 $$ if (cls.isArray() || cls.isPrimitive())[ CD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_18 $$ b.append(':').append(hashStr)[ CD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_24 $$ b.append(':').append(SVUID)[ FD ]
Line_22 $$ String SVUID = toHexString(serialVersionUID)-->Line_24 $$ b.append(':').append(SVUID)[ FD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_15 $$ b.append(escapeIRName(cls.getName()))[ FD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_28 $$ repositoryId = b.toString()[ CD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_8 $$ b.append('/')[ FD ]
Line_10 $$ base = base.substring(base.lastIndexOf('.') + 1)-->Line_11 $$ b.append(base).append(":1.0")[ FD ]
Line_20 $$ if (osClass != null) -->Line_23 $$ if (classHashCode != serialVersionUID)[ CD ]
Line_20 $$ if (osClass != null) -->Line_22 $$ String SVUID = toHexString(serialVersionUID)[ CD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_15 $$ b.append(escapeIRName(cls.getName()))[ CD ]
Line_20 $$ if (osClass != null) -->Line_21 $$ long serialVersionUID = osClass.getSerialVersionUID()[ CD ]
Line_21 $$ long serialVersionUID = osClass.getSerialVersionUID()-->Line_23 $$ if (classHashCode != serialVersionUID)[ FD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_6 $$ StringBuffer b = new StringBuffer("IDL:")[ CD ]
Line_23 $$ if (classHashCode != serialVersionUID)-->Line_24 $$ b.append(':').append(SVUID)[ CD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_9 $$ String base = cls.getName()[ CD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_17 $$ String hashStr = toHexString(classHashCode)[ CD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_19 $$ ObjectStreamClass osClass = ObjectStreamClass.lookup(cls)[ CD ]
Line_6 $$ StringBuffer b = new StringBuffer("IDL:")-->Line_18 $$ b.append(':').append(hashStr)[ FD ]
Line_19 $$ ObjectStreamClass osClass = ObjectStreamClass.lookup(cls)-->Line_21 $$ long serialVersionUID = osClass.getSerialVersionUID()[ FD ]
Line_5 $$ if (cls.isInterface() && org.omg.CORBA.Object.class.isAssignableFrom(cls) && org.omg.CORBA.portable.IDLEntity.class.isAssignableFrom(cls)) -->Line_11 $$ b.append(base).append(":1.0")[ CD ]
