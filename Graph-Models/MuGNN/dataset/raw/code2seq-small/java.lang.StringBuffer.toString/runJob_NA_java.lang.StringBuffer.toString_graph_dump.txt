Line_27 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, inFile, Text.class, Text.class)-->Line_36 $$ writer.close()[ FD ]
Line_6 $$ Path inDir = new Path(testdir, "in")-->Line_12 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_18 $$ conf.setOutputFormat(SequenceFileOutputFormat.class)[ FD ]
Line_29 $$ for (int i = 0; i < 1000; i++) -->Line_30 $$ content.append(i).append(": This is one more line of content\n")[ FD ]
Line_26 $$ Path inFile = new Path(inDir, "part0")-->Line_27 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, inFile, Text.class, Text.class)[ FD ]
Line_8 $$ FileSystem fs = FileSystem.get(conf)-->Line_27 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, inFile, Text.class, Text.class)[ FD ]
Line_32 $$ Text text = new Text(content.toString())-->Line_34 $$ writer.append(new Text("rec:" + i), text)[ FD ]
Line_29 $$ for (int i = 0; i < 1000; i++) -->Line_30 $$ content.append(i).append(": This is one more line of content\n")[ CD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_11 $$ conf.setInputFormat(SequenceFileInputFormat.class)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_10 $$ conf.setInt(JobContext.IO_SORT_MB, 1)[ FD ]
Line_28 $$ StringBuffer content = new StringBuffer()-->Line_32 $$ Text text = new Text(content.toString())[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_12 $$ FileInputFormat.setInputPaths(conf, inDir)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_15 $$ conf.setReducerClass(IdentityReducer.class)[ FD ]
Line_28 $$ StringBuffer content = new StringBuffer()-->Line_30 $$ content.append(i).append(": This is one more line of content\n")[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_14 $$ conf.setMapperClass(IdentityMapper.class)[ FD ]
Line_29 $$ for (int i = 0; i < 1000; i++) -->Line_33 $$ for (int i = 0; i < items; i++) [ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_27 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, inFile, Text.class, Text.class)[ FD ]
Line_27 $$ SequenceFile.Writer writer = SequenceFile.createWriter(fs, conf, inFile, Text.class, Text.class)-->Line_34 $$ writer.append(new Text("rec:" + i), text)[ FD ]
Line_5 $$ Path testdir = new Path("build/test/test.mapred.spill")-->Line_21 $$ throw new IOException("Mkdirs failed to create " + testdir.toString())[ FD ]
Line_8 $$ FileSystem fs = FileSystem.get(conf)-->Line_20 $$ if (!fs.mkdirs(testdir)) [ FD ]
Line_5 $$ Path testdir = new Path("build/test/test.mapred.spill")-->Line_9 $$ fs.delete(testdir, true)[ FD ]
Line_7 $$ Path outDir = new Path(testdir, "out")-->Line_13 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_17 $$ conf.setOutputValueClass(Text.class)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_37 $$ JobClient.runJob(conf)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_19 $$ conf.set(MRConfig.FRAMEWORK_NAME, MRConfig.LOCAL_FRAMEWORK_NAME)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_16 $$ conf.setOutputKeyClass(Text.class)[ FD ]
Line_6 $$ Path inDir = new Path(testdir, "in")-->Line_23 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_33 $$ for (int i = 0; i < items; i++) -->Line_34 $$ writer.append(new Text("rec:" + i), text)[ CD ]
Line_8 $$ FileSystem fs = FileSystem.get(conf)-->Line_9 $$ fs.delete(testdir, true)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_13 $$ FileOutputFormat.setOutputPath(conf, outDir)[ FD ]
Line_4 $$ JobConf conf = new JobConf(TestMapRed.class)-->Line_8 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_8 $$ FileSystem fs = FileSystem.get(conf)-->Line_23 $$ if (!fs.mkdirs(inDir)) [ FD ]
Line_6 $$ Path inDir = new Path(testdir, "in")-->Line_24 $$ throw new IOException("Mkdirs failed to create " + inDir.toString())[ FD ]
Line_2 $$ public void runJob(int items) -->Line_33 $$ for (int i = 0; i < items; i++) [ FD ]
Line_5 $$ Path testdir = new Path("build/test/test.mapred.spill")-->Line_20 $$ if (!fs.mkdirs(testdir)) [ FD ]
