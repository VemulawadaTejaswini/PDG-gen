Line_19 $$ if (element instanceof PsiMethod) -->Line_22 $$ StringBuffer buffer = new StringBuffer()[ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_10 $$ if (element instanceof PsiField) [ FD ]
Line_10 $$ if (element instanceof PsiField) -->Line_11 $$ PsiField field = (PsiField) element[ CD ]
Line_10 $$ if (element instanceof PsiField) -->Line_14 $$ if (aClass != null) [ CD ]
Line_20 $$ PsiMethod method = (PsiMethod) element-->Line_23 $$ PsiClass aClass = method.getContainingClass()[ FD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_20 $$ PsiMethod method = (PsiMethod) element[ CD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_21 $$ String name = method.getName()[ CD ]
Line_7 $$ if (refText != null)-->Line_8 $$ return refText[ CD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_43 $$ buffer.append(" ")[ FD ]
Line_37 $$ if (i < parms.length - 1) -->Line_42 $$ if (spaceAfterComma) [ CD ]
Line_11 $$ PsiField field = (PsiField) element-->Line_13 $$ PsiClass aClass = field.getContainingClass()[ FD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_52 $$ return getReferenceText(project, method) + "#" + ((PsiParameterList) element.getParent()).getParameterIndex((PsiParameter) element)[ FD ]
Line_3 $$ if (element instanceof PsiPackage) -->Line_4 $$ return ((PsiPackage) element).getQualifiedName()[ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_31 $$ boolean spaceBeforeComma = JavaDocCodeStyle.getInstance(project).spaceBeforeComma()[ FD ]
Line_20 $$ PsiMethod method = (PsiMethod) element-->Line_21 $$ String name = method.getName()[ FD ]
Line_13 $$ PsiClass aClass = field.getContainingClass()-->Line_15 $$ return getReferenceText(project, aClass) + "#" + name[ FD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_48 $$ return buffer.toString()[ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_49 $$ if (element instanceof PsiParameter) [ FD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_27 $$ buffer.append("#")[ FD ]
Line_20 $$ PsiMethod method = (PsiMethod) element-->Line_52 $$ return getReferenceText(project, method) + "#" + ((PsiParameterList) element.getParent()).getParameterIndex((PsiParameter) element)[ FD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_49 $$ if (element instanceof PsiParameter) [ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_55 $$ return null[ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_25 $$ buffer.append(getReferenceText(project, aClass))[ FD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_33 $$ for (int i = 0; i < parms.length; i++) [ CD ]
Line_13 $$ PsiClass aClass = field.getContainingClass()-->Line_24 $$ if (aClass != null) [ FD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_5 $$ if (element instanceof PsiClass) [ FD ]
Line_20 $$ PsiMethod method = (PsiMethod) element-->Line_51 $$ if (method instanceof PsiMethod) [ FD ]
Line_5 $$ if (element instanceof PsiClass) -->Line_7 $$ if (refText != null)[ CD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_32 $$ boolean spaceAfterComma = JavaDocCodeStyle.getInstance(project).spaceAfterComma()[ CD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_31 $$ boolean spaceBeforeComma = JavaDocCodeStyle.getInstance(project).spaceBeforeComma()[ CD ]
Line_37 $$ if (i < parms.length - 1) -->Line_38 $$ if (spaceBeforeComma) [ CD ]
Line_10 $$ if (element instanceof PsiField) -->Line_19 $$ if (element instanceof PsiMethod) [ CD ]
Line_33 $$ for (int i = 0; i < parms.length; i++) -->Line_36 $$ buffer.append(typeText)[ CD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_41 $$ buffer.append(",")[ FD ]
Line_49 $$ if (element instanceof PsiParameter) -->Line_50 $$ final PsiElement method = ((PsiParameter) element).getDeclarationScope()[ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_32 $$ boolean spaceAfterComma = JavaDocCodeStyle.getInstance(project).spaceAfterComma()[ FD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_3 $$ if (element instanceof PsiPackage) [ FD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_39 $$ buffer.append(" ")[ FD ]
Line_10 $$ if (element instanceof PsiField) -->Line_13 $$ PsiClass aClass = field.getContainingClass()[ CD ]
Line_20 $$ PsiMethod method = (PsiMethod) element-->Line_30 $$ PsiParameter[] parms = method.getParameterList().getParameters()[ FD ]
Line_5 $$ if (element instanceof PsiClass) -->Line_10 $$ if (element instanceof PsiField) [ CD ]
Line_14 $$ if (aClass != null) -->Line_15 $$ return getReferenceText(project, aClass) + "#" + name[ CD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_29 $$ buffer.append("(")[ CD ]
Line_5 $$ if (element instanceof PsiClass) -->Line_6 $$ final String refText = ((PsiClass) element).getQualifiedName()[ CD ]
Line_13 $$ PsiClass aClass = field.getContainingClass()-->Line_14 $$ if (aClass != null) [ FD ]
Line_33 $$ for (int i = 0; i < parms.length; i++) -->Line_37 $$ if (i < parms.length - 1) [ CD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_48 $$ return buffer.toString()[ FD ]
Line_38 $$ if (spaceBeforeComma) -->Line_39 $$ buffer.append(" ")[ CD ]
Line_34 $$ PsiParameter parm = parms[i]-->Line_35 $$ String typeText = TypeConversionUtil.erasure(parm.getType()).getCanonicalText()[ FD ]
Line_33 $$ for (int i = 0; i < parms.length; i++) -->Line_34 $$ PsiParameter parm = parms[i][ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_19 $$ if (element instanceof PsiMethod) [ FD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_28 $$ buffer.append(name)[ FD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_30 $$ PsiParameter[] parms = method.getParameterList().getParameters()[ CD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_24 $$ if (aClass != null) [ CD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_47 $$ buffer.append(")")[ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_3 $$ if (element instanceof PsiPackage) [ CD ]
Line_37 $$ if (i < parms.length - 1) -->Line_41 $$ buffer.append(",")[ CD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_36 $$ buffer.append(typeText)[ FD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_27 $$ buffer.append("#")[ CD ]
Line_10 $$ if (element instanceof PsiField) -->Line_12 $$ String name = field.getName()[ CD ]
Line_13 $$ PsiClass aClass = field.getContainingClass()-->Line_25 $$ buffer.append(getReferenceText(project, aClass))[ FD ]
Line_5 $$ if (element instanceof PsiClass) -->Line_9 $$ return ((PsiClass) element).getName()[ CD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_25 $$ buffer.append(getReferenceText(project, aClass))[ FD ]
Line_24 $$ if (aClass != null) -->Line_25 $$ buffer.append(getReferenceText(project, aClass))[ CD ]
Line_11 $$ PsiField field = (PsiField) element-->Line_12 $$ String name = field.getName()[ FD ]
Line_6 $$ final String refText = ((PsiClass) element).getQualifiedName()-->Line_7 $$ if (refText != null)[ FD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_28 $$ buffer.append(name)[ CD ]
Line_12 $$ String name = field.getName()-->Line_28 $$ buffer.append(name)[ FD ]
Line_14 $$ if (aClass != null) -->Line_17 $$ return "#" + name[ CD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_29 $$ buffer.append("(")[ FD ]
Line_19 $$ if (element instanceof PsiMethod) -->Line_23 $$ PsiClass aClass = method.getContainingClass()[ CD ]
Line_51 $$ if (method instanceof PsiMethod) -->Line_52 $$ return getReferenceText(project, method) + "#" + ((PsiParameterList) element.getParent()).getParameterIndex((PsiParameter) element)[ CD ]
Line_3 $$ if (element instanceof PsiPackage) -->Line_5 $$ if (element instanceof PsiClass) [ CD ]
Line_22 $$ StringBuffer buffer = new StringBuffer()-->Line_47 $$ buffer.append(")")[ FD ]
Line_42 $$ if (spaceAfterComma) -->Line_43 $$ buffer.append(" ")[ CD ]
Line_2 $$ public static String getReferenceText(Project project, PsiElement element) -->Line_15 $$ return getReferenceText(project, aClass) + "#" + name[ FD ]
Line_35 $$ String typeText = TypeConversionUtil.erasure(parm.getType()).getCanonicalText()-->Line_36 $$ buffer.append(typeText)[ FD ]
Line_33 $$ for (int i = 0; i < parms.length; i++) -->Line_35 $$ String typeText = TypeConversionUtil.erasure(parm.getType()).getCanonicalText()[ CD ]
Line_33 $$ for (int i = 0; i < parms.length; i++) -->Line_37 $$ if (i < parms.length - 1) [ FD ]
Line_49 $$ if (element instanceof PsiParameter) -->Line_51 $$ if (method instanceof PsiMethod) [ CD ]
