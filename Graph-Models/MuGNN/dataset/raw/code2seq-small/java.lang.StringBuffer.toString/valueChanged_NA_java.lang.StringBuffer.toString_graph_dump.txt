Line_14 $$ if (denyRules.length() + allowRules.length() > 0) -->Line_15 $$ StatusBar.Info.set(AnalysisScopeBundle.message("status.bar.rule.violation.message", ((denyRules.length() == 0 || allowRules.length() == 0) ? 1 : 2), (denyRules.length() > 0 ? denyRules.toString() + (allowRules.length() > 0 ? "; " : "") : " ") + (allowRules.length() > 0 ? allowRules.toString() : " ")), myProject)[ CD ]
Line_11 $$ PackageDependenciesNode selectedNode = (PackageDependenciesNode) path.getLastPathComponent()-->Line_12 $$ traverseToLeaves(selectedNode, denyRules, allowRules)[ FD ]
Line_14 $$ if (denyRules.length() + allowRules.length() > 0) -->Line_17 $$ StatusBar.Info.set(AnalysisScopeBundle.message("status.bar.no.rule.violation.message"), myProject)[ CD ]
Line_2 $$ public void valueChanged(TreeSelectionEvent e) -->Line_5 $$ final StringBuffer allowRules = new StringBuffer()[ CD ]
Line_4 $$ final StringBuffer denyRules = new StringBuffer()-->Line_14 $$ if (denyRules.length() + allowRules.length() > 0) [ FD ]
Line_5 $$ final StringBuffer allowRules = new StringBuffer()-->Line_12 $$ traverseToLeaves(selectedNode, denyRules, allowRules)[ FD ]
Line_10 $$ for (TreePath path : paths) -->Line_11 $$ PackageDependenciesNode selectedNode = (PackageDependenciesNode) path.getLastPathComponent()[ FD ]
Line_4 $$ final StringBuffer denyRules = new StringBuffer()-->Line_15 $$ StatusBar.Info.set(AnalysisScopeBundle.message("status.bar.rule.violation.message", ((denyRules.length() == 0 || allowRules.length() == 0) ? 1 : 2), (denyRules.length() > 0 ? denyRules.toString() + (allowRules.length() > 0 ? "; " : "") : " ") + (allowRules.length() > 0 ? allowRules.toString() : " ")), myProject)[ FD ]
Line_5 $$ final StringBuffer allowRules = new StringBuffer()-->Line_15 $$ StatusBar.Info.set(AnalysisScopeBundle.message("status.bar.rule.violation.message", ((denyRules.length() == 0 || allowRules.length() == 0) ? 1 : 2), (denyRules.length() > 0 ? denyRules.toString() + (allowRules.length() > 0 ? "; " : "") : " ") + (allowRules.length() > 0 ? allowRules.toString() : " ")), myProject)[ FD ]
Line_2 $$ public void valueChanged(TreeSelectionEvent e) -->Line_6 $$ final TreePath[] paths = myLeftTree.getSelectionPaths()[ CD ]
Line_2 $$ public void valueChanged(TreeSelectionEvent e) -->Line_7 $$ if (paths == null) [ CD ]
Line_4 $$ final StringBuffer denyRules = new StringBuffer()-->Line_12 $$ traverseToLeaves(selectedNode, denyRules, allowRules)[ FD ]
Line_2 $$ public void valueChanged(TreeSelectionEvent e) -->Line_14 $$ if (denyRules.length() + allowRules.length() > 0) [ CD ]
Line_5 $$ final StringBuffer allowRules = new StringBuffer()-->Line_14 $$ if (denyRules.length() + allowRules.length() > 0) [ FD ]
Line_7 $$ if (paths == null) -->Line_8 $$ return[ CD ]
Line_2 $$ public void valueChanged(TreeSelectionEvent e) -->Line_3 $$ updateRightTreeModel()[ CD ]
Line_2 $$ public void valueChanged(TreeSelectionEvent e) -->Line_4 $$ final StringBuffer denyRules = new StringBuffer()[ CD ]
Line_6 $$ final TreePath[] paths = myLeftTree.getSelectionPaths()-->Line_7 $$ if (paths == null) [ FD ]
