Line_2 $$ private String parseModulePattern() throws ParsingException -->Line_30 $$ if (pattern.length() == 0) [ CD ]
Line_7 $$ while (true) -->Line_8 $$ if (myLexer.getTokenType() == ScopeTokenTypes.RBRACKET || myLexer.getTokenType() == null) [ CD ]
Line_2 $$ private String parseModulePattern() throws ParsingException -->Line_6 $$ StringBuffer pattern = new StringBuffer()[ CD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_16 $$ pattern.append(".")[ FD ]
Line_2 $$ private String parseModulePattern() throws ParsingException -->Line_5 $$ myLexer.advance()[ CD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_12 $$ pattern.append("*")[ FD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_18 $$ pattern.append("-")[ FD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_14 $$ pattern.append(getTokenText())[ FD ]
Line_17 $$ if (myLexer.getTokenType() == ScopeTokenTypes.MINUS) -->Line_18 $$ pattern.append("-")[ CD ]
Line_2 $$ private String parseModulePattern() throws ParsingException -->Line_3 $$ if (myLexer.getTokenType() != ScopeTokenTypes.LBRACKET)[ CD ]
Line_30 $$ if (pattern.length() == 0) -->Line_31 $$ error(AnalysisScopeBundle.message("error.packageset.pattern.expectations"))[ CD ]
Line_7 $$ while (true) -->Line_28 $$ myLexer.advance()[ CD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_33 $$ return pattern.toString()[ FD ]
Line_2 $$ private String parseModulePattern() throws ParsingException -->Line_7 $$ while (true) [ CD ]
Line_19 $$ if (myLexer.getTokenType() == ScopeTokenTypes.TILDE) -->Line_21 $$ if (myLexer.getTokenType() == ScopeTokenTypes.SHARP) [ CD ]
Line_8 $$ if (myLexer.getTokenType() == ScopeTokenTypes.RBRACKET || myLexer.getTokenType() == null) -->Line_11 $$ if (myLexer.getTokenType() == ScopeTokenTypes.ASTERISK) [ CD ]
Line_15 $$ if (myLexer.getTokenType() == ScopeTokenTypes.DOT) -->Line_17 $$ if (myLexer.getTokenType() == ScopeTokenTypes.MINUS) [ CD ]
Line_13 $$ if (myLexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || myLexer.getTokenType() == TokenType.WHITE_SPACE || myLexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) -->Line_14 $$ pattern.append(getTokenText())[ CD ]
Line_15 $$ if (myLexer.getTokenType() == ScopeTokenTypes.DOT) -->Line_16 $$ pattern.append(".")[ CD ]
Line_23 $$ if (myLexer.getTokenType() == ScopeTokenTypes.COLON) -->Line_26 $$ pattern.append(getTokenText())[ CD ]
Line_19 $$ if (myLexer.getTokenType() == ScopeTokenTypes.TILDE) -->Line_20 $$ pattern.append("~")[ CD ]
Line_2 $$ private String parseModulePattern() throws ParsingException -->Line_33 $$ return pattern.toString()[ CD ]
Line_3 $$ if (myLexer.getTokenType() != ScopeTokenTypes.LBRACKET)-->Line_4 $$ return null[ CD ]
Line_21 $$ if (myLexer.getTokenType() == ScopeTokenTypes.SHARP) -->Line_22 $$ pattern.append("#")[ CD ]
Line_23 $$ if (myLexer.getTokenType() == ScopeTokenTypes.COLON) -->Line_24 $$ pattern.append(":")[ CD ]
Line_21 $$ if (myLexer.getTokenType() == ScopeTokenTypes.SHARP) -->Line_23 $$ if (myLexer.getTokenType() == ScopeTokenTypes.COLON) [ CD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_26 $$ pattern.append(getTokenText())[ FD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_30 $$ if (pattern.length() == 0) [ FD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_20 $$ pattern.append("~")[ FD ]
Line_11 $$ if (myLexer.getTokenType() == ScopeTokenTypes.ASTERISK) -->Line_13 $$ if (myLexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || myLexer.getTokenType() == TokenType.WHITE_SPACE || myLexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) [ CD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_22 $$ pattern.append("#")[ FD ]
Line_6 $$ StringBuffer pattern = new StringBuffer()-->Line_24 $$ pattern.append(":")[ FD ]
Line_13 $$ if (myLexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || myLexer.getTokenType() == TokenType.WHITE_SPACE || myLexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) -->Line_15 $$ if (myLexer.getTokenType() == ScopeTokenTypes.DOT) [ CD ]
Line_17 $$ if (myLexer.getTokenType() == ScopeTokenTypes.MINUS) -->Line_19 $$ if (myLexer.getTokenType() == ScopeTokenTypes.TILDE) [ CD ]
Line_8 $$ if (myLexer.getTokenType() == ScopeTokenTypes.RBRACKET || myLexer.getTokenType() == null) -->Line_9 $$ myLexer.advance()[ CD ]
Line_11 $$ if (myLexer.getTokenType() == ScopeTokenTypes.ASTERISK) -->Line_12 $$ pattern.append("*")[ CD ]
