Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build()-->Line_11 $$ final DistributedFileSystem dfs = cluster.getFileSystem()[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_36 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.OPEN, 0, blocksize, sb.toString())[ CD ]
Line_2 $$ public void testExcludeDataNodes() throws Exception -->Line_3 $$ final Configuration conf = WebHdfsTestUtil.createConf()[ CD ]
Line_4 $$ final String[] racks = -->Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build()[ FD ]
Line_2 $$ public void testExcludeDataNodes() throws Exception -->Line_5 $$ final String[] hosts = [ CD ]
Line_12 $$ final NameNode namenode = cluster.getNameNode()-->Line_13 $$ final DatanodeManager dm = namenode.getNamesystem().getBlockManager().getDatanodeManager()[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_28 $$ sb.append(locations[i].getXferAddr())[ CD ]
Line_16 $$ final String f = "/foo"-->Line_30 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.GETFILECHECKSUM, -1L, blocksize, sb.toString())[ FD ]
Line_2 $$ public void testExcludeDataNodes() throws Exception -->Line_4 $$ final String[] racks = [ CD ]
Line_37 $$ for (int j = 0; j <= i; j++) -->Line_38 $$ Assert.assertNotEquals(locations[j].getHostName(), chosen.getHostName())[ CD ]
Line_26 $$ StringBuffer sb = new StringBuffer()-->Line_36 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.OPEN, 0, blocksize, sb.toString())[ FD ]
Line_22 $$ final List<LocatedBlock> lb = locatedblocks.getLocatedBlocks()-->Line_23 $$ Assert.assertEquals(1, lb.size())[ FD ]
Line_12 $$ final NameNode namenode = cluster.getNameNode()-->Line_30 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.GETFILECHECKSUM, -1L, blocksize, sb.toString())[ FD ]
Line_22 $$ final List<LocatedBlock> lb = locatedblocks.getLocatedBlocks()-->Line_24 $$ final DatanodeInfo[] locations = lb.get(0).getLocations()[ FD ]
Line_31 $$ for (int j = 0; j <= i; j++) -->Line_43 $$ for (int j = 0; j <= i; j++) [ FD ]
Line_16 $$ final String f = "/foo"-->Line_36 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.OPEN, 0, blocksize, sb.toString())[ FD ]
Line_5 $$ final String[] hosts = -->Line_7 $$ LOG.info("nDataNodes=" + nDataNodes + ", racks=" + Arrays.asList(racks) + ", hosts=" + Arrays.asList(hosts))[ FD ]
Line_21 $$ final LocatedBlocks locatedblocks = NameNodeAdapter.getBlockLocations(namenode, f, 0, 1)-->Line_22 $$ final List<LocatedBlock> lb = locatedblocks.getLocatedBlocks()[ FD ]
Line_30 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.GETFILECHECKSUM, -1L, blocksize, sb.toString())-->Line_32 $$ Assert.assertNotEquals(locations[j].getHostName(), chosen.getHostName())[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_37 $$ for (int j = 0; j <= i; j++) [ CD ]
Line_4 $$ final String[] racks = -->Line_7 $$ LOG.info("nDataNodes=" + nDataNodes + ", racks=" + Arrays.asList(racks) + ", hosts=" + Arrays.asList(hosts))[ FD ]
Line_6 $$ final int nDataNodes = hosts.length-->Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build()[ FD ]
Line_26 $$ StringBuffer sb = new StringBuffer()-->Line_47 $$ sb.append(",")[ FD ]
Line_37 $$ for (int j = 0; j <= i; j++) -->Line_43 $$ for (int j = 0; j <= i; j++) [ FD ]
Line_2 $$ public void testExcludeDataNodes() throws Exception -->Line_6 $$ final int nDataNodes = hosts.length[ CD ]
Line_2 $$ public void testExcludeDataNodes() throws Exception -->Line_7 $$ LOG.info("nDataNodes=" + nDataNodes + ", racks=" + Arrays.asList(racks) + ", hosts=" + Arrays.asList(hosts))[ CD ]
Line_17 $$ final Path p = new Path(f)-->Line_18 $$ final FSDataOutputStream out = dfs.create(p, (short) 3)[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_37 $$ for (int j = 0; j <= i; j++) [ FD ]
Line_15 $$ final long blocksize = DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT-->Line_36 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.OPEN, 0, blocksize, sb.toString())[ FD ]
Line_43 $$ for (int j = 0; j <= i; j++) -->Line_44 $$ Assert.assertNotEquals(locations[j].getHostName(), chosen.getHostName())[ CD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_31 $$ for (int j = 0; j <= i; j++) [ CD ]
Line_5 $$ final String[] hosts = -->Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build()[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_31 $$ for (int j = 0; j <= i; j++) [ FD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build()-->Line_50 $$ cluster.shutdown()[ FD ]
Line_15 $$ final long blocksize = DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT-->Line_30 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.GETFILECHECKSUM, -1L, blocksize, sb.toString())[ FD ]
Line_30 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.GETFILECHECKSUM, -1L, blocksize, sb.toString())-->Line_44 $$ Assert.assertNotEquals(locations[j].getHostName(), chosen.getHostName())[ FD ]
Line_30 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.GETFILECHECKSUM, -1L, blocksize, sb.toString())-->Line_38 $$ Assert.assertNotEquals(locations[j].getHostName(), chosen.getHostName())[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_47 $$ sb.append(",")[ CD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build()-->Line_12 $$ final NameNode namenode = cluster.getNameNode()[ FD ]
Line_12 $$ final NameNode namenode = cluster.getNameNode()-->Line_36 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.OPEN, 0, blocksize, sb.toString())[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_43 $$ for (int j = 0; j <= i; j++) [ CD ]
Line_18 $$ final FSDataOutputStream out = dfs.create(p, (short) 3)-->Line_20 $$ out.close()[ FD ]
Line_31 $$ for (int j = 0; j <= i; j++) -->Line_37 $$ for (int j = 0; j <= i; j++) [ FD ]
Line_26 $$ StringBuffer sb = new StringBuffer()-->Line_42 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, PostOpParam.Op.APPEND, -1L, blocksize, sb.toString())[ FD ]
Line_15 $$ final long blocksize = DFSConfigKeys.DFS_BLOCK_SIZE_DEFAULT-->Line_42 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, PostOpParam.Op.APPEND, -1L, blocksize, sb.toString())[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_43 $$ for (int j = 0; j <= i; j++) [ FD ]
Line_18 $$ final FSDataOutputStream out = dfs.create(p, (short) 3)-->Line_19 $$ out.write(1)[ FD ]
Line_16 $$ final String f = "/foo"-->Line_21 $$ final LocatedBlocks locatedblocks = NameNodeAdapter.getBlockLocations(namenode, f, 0, 1)[ FD ]
Line_12 $$ final NameNode namenode = cluster.getNameNode()-->Line_42 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, PostOpParam.Op.APPEND, -1L, blocksize, sb.toString())[ FD ]
Line_11 $$ final DistributedFileSystem dfs = cluster.getFileSystem()-->Line_18 $$ final FSDataOutputStream out = dfs.create(p, (short) 3)[ FD ]
Line_12 $$ final NameNode namenode = cluster.getNameNode()-->Line_21 $$ final LocatedBlocks locatedblocks = NameNodeAdapter.getBlockLocations(namenode, f, 0, 1)[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_30 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.GETFILECHECKSUM, -1L, blocksize, sb.toString())[ CD ]
Line_2 $$ public void testExcludeDataNodes() throws Exception -->Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build()[ CD ]
Line_26 $$ StringBuffer sb = new StringBuffer()-->Line_30 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, GetOpParam.Op.GETFILECHECKSUM, -1L, blocksize, sb.toString())[ FD ]
Line_27 $$ for (int i = 0; i < 2; i++) -->Line_42 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, PostOpParam.Op.APPEND, -1L, blocksize, sb.toString())[ CD ]
Line_16 $$ final String f = "/foo"-->Line_42 $$ final DatanodeInfo chosen = NamenodeWebHdfsMethods.chooseDatanode(namenode, f, PostOpParam.Op.APPEND, -1L, blocksize, sb.toString())[ FD ]
Line_8 $$ final MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).hosts(hosts).numDataNodes(nDataNodes).racks(racks).build()-->Line_10 $$ cluster.waitActive()[ FD ]
Line_26 $$ StringBuffer sb = new StringBuffer()-->Line_28 $$ sb.append(locations[i].getXferAddr())[ FD ]
Line_31 $$ for (int j = 0; j <= i; j++) -->Line_32 $$ Assert.assertNotEquals(locations[j].getHostName(), chosen.getHostName())[ CD ]
