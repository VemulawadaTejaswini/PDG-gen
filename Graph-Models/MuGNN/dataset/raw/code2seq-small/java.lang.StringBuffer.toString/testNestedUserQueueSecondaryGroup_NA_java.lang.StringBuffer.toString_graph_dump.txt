Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_8 $$ sb.append("  <rule name='default' />")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())[ FD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_14 $$ assertEquals("root.user1subgroup1.user1", policy.assignAppToQueue("root.default", "user1"))[ CD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_8 $$ sb.append("  <rule name='default' />")[ CD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_11 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user1"))[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_5 $$ sb.append("  <rule name='nestedUserQueue'>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_4 $$ sb.append("<queuePlacementPolicy>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_7 $$ sb.append("  </rule>")[ FD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_9 $$ sb.append("</queuePlacementPolicy>")[ CD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_12 $$ configuredQueues.get(FSQueueType.PARENT).add("root.user1subgroup1")[ CD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_6 $$ sb.append("       <rule name='secondaryGroupExistingQueue'/>")[ FD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_13 $$ policy = parse(sb.toString())[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_13 $$ policy = parse(sb.toString())[ FD ]
Line_13 $$ policy = parse(sb.toString())-->Line_14 $$ assertEquals("root.user1subgroup1.user1", policy.assignAppToQueue("root.default", "user1"))[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_9 $$ sb.append("</queuePlacementPolicy>")[ FD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_13 $$ policy = parse(sb.toString())[ FD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_3 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_11 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user1"))[ CD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_7 $$ sb.append("  </rule>")[ CD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_14 $$ assertEquals("root.user1subgroup1.user1", policy.assignAppToQueue("root.default", "user1"))[ FD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_5 $$ sb.append("  <rule name='nestedUserQueue'>")[ CD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_4 $$ sb.append("<queuePlacementPolicy>")[ CD ]
Line_2 $$ public void testNestedUserQueueSecondaryGroup() throws Exception -->Line_6 $$ sb.append("       <rule name='secondaryGroupExistingQueue'/>")[ CD ]
