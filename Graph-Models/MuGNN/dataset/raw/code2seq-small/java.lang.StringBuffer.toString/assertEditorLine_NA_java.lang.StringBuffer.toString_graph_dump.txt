Line_2 $$ public static AsyncResult<String> assertEditorLine(final PlaybackContext context, final String expected) -->Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() [ FD ]
Line_20 $$ if (expected.equals(actualText.toString())) -->Line_23 $$ result.setRejected("Expected:" + expected + " but was:" + actualText)[ CD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_7 $$ if (editor == null) [ CD ]
Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_10 $$ if (editor == null) [ FD ]
Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_18 $$ final StringBuffer actualText = new StringBuffer(editor.getDocument().getText(new TextRange(start, caret)))[ FD ]
Line_18 $$ final StringBuffer actualText = new StringBuffer(editor.getDocument().getText(new TextRange(start, caret)))-->Line_19 $$ actualText.append("<caret>").append(editor.getDocument().getText(new TextRange(caret, end)))[ FD ]
Line_10 $$ if (editor == null) -->Line_12 $$ return[ CD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_15 $$ final int caret = editor.getCaretModel().getOffset()[ CD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_18 $$ final StringBuffer actualText = new StringBuffer(editor.getDocument().getText(new TextRange(start, caret)))[ FD ]
Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_15 $$ final int caret = editor.getCaretModel().getOffset()[ FD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_16 $$ final int start = editor.getDocument().getLineStartOffset(line)[ CD ]
Line_10 $$ if (editor == null) -->Line_11 $$ result.setRejected("Cannot find editor")[ CD ]
Line_14 $$ final int line = editor.getCaretModel().getLogicalPosition().line-->Line_17 $$ final int end = editor.getDocument().getLineEndOffset(line)[ FD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_10 $$ if (editor == null) [ FD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())[ FD ]
Line_2 $$ public static AsyncResult<String> assertEditorLine(final PlaybackContext context, final String expected) -->Line_20 $$ if (expected.equals(actualText.toString())) [ FD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())[ CD ]
Line_2 $$ public static AsyncResult<String> assertEditorLine(final PlaybackContext context, final String expected) -->Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() [ CD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_16 $$ final int start = editor.getDocument().getLineStartOffset(line)[ FD ]
Line_3 $$ final AsyncResult<String> result = new AsyncResult<String>()-->Line_23 $$ result.setRejected("Expected:" + expected + " but was:" + actualText)[ FD ]
Line_7 $$ if (editor == null) -->Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())[ CD ]
Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_14 $$ final int line = editor.getCaretModel().getLogicalPosition().line[ FD ]
Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_17 $$ final int end = editor.getDocument().getLineEndOffset(line)[ FD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_18 $$ final StringBuffer actualText = new StringBuffer(editor.getDocument().getText(new TextRange(start, caret)))[ CD ]
Line_3 $$ final AsyncResult<String> result = new AsyncResult<String>()-->Line_21 $$ result.setDone()[ FD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_19 $$ actualText.append("<caret>").append(editor.getDocument().getText(new TextRange(caret, end)))[ CD ]
Line_2 $$ public static AsyncResult<String> assertEditorLine(final PlaybackContext context, final String expected) -->Line_27 $$ return result[ CD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_14 $$ final int line = editor.getCaretModel().getLogicalPosition().line[ FD ]
Line_2 $$ public static AsyncResult<String> assertEditorLine(final PlaybackContext context, final String expected) -->Line_3 $$ final AsyncResult<String> result = new AsyncResult<String>()[ CD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_10 $$ if (editor == null) [ CD ]
Line_20 $$ if (expected.equals(actualText.toString())) -->Line_21 $$ result.setDone()[ CD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_19 $$ actualText.append("<caret>").append(editor.getDocument().getText(new TextRange(caret, end)))[ FD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_7 $$ if (editor == null) [ FD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_14 $$ final int line = editor.getCaretModel().getLogicalPosition().line[ CD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_17 $$ final int end = editor.getDocument().getLineEndOffset(line)[ CD ]
Line_3 $$ final AsyncResult<String> result = new AsyncResult<String>()-->Line_11 $$ result.setRejected("Cannot find editor")[ FD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_17 $$ final int end = editor.getDocument().getLineEndOffset(line)[ FD ]
Line_18 $$ final StringBuffer actualText = new StringBuffer(editor.getDocument().getText(new TextRange(start, caret)))-->Line_20 $$ if (expected.equals(actualText.toString())) [ FD ]
Line_6 $$ Editor editor = CommonDataKeys.EDITOR.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_15 $$ final int caret = editor.getCaretModel().getOffset()[ FD ]
Line_4 $$ WindowSystemPlaybackCall.getUiReady(context).doWhenDone(new Runnable() -->Line_20 $$ if (expected.equals(actualText.toString())) [ CD ]
Line_14 $$ final int line = editor.getCaretModel().getLogicalPosition().line-->Line_16 $$ final int start = editor.getDocument().getLineStartOffset(line)[ FD ]
Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_16 $$ final int start = editor.getDocument().getLineStartOffset(line)[ FD ]
Line_8 $$ editor = CommonDataKeys.EDITOR_EVEN_IF_INACTIVE.getData(DataManager.getInstance().getDataContextFromFocus().getResult())-->Line_19 $$ actualText.append("<caret>").append(editor.getDocument().getText(new TextRange(caret, end)))[ FD ]
