Line_18 $$ wasIdentifier = false-->Line_27 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_4 $$ boolean wasIdentifier = false[ CD ]
Line_26 $$ if (lexer.getTokenType() == ScopeTokenTypes.TILDE) -->Line_27 $$ wasIdentifier = false[ CD ]
Line_4 $$ boolean wasIdentifier = false-->Line_27 $$ wasIdentifier = false[ FD ]
Line_27 $$ wasIdentifier = false-->Line_30 $$ wasIdentifier = false[ FD ]
Line_20 $$ if (lexer.getTokenType() == TokenType.WHITE_SPACE) -->Line_22 $$ pattern.append(" ")[ CD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_5 $$ while (true) [ CD ]
Line_17 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) -->Line_20 $$ if (lexer.getTokenType() == TokenType.WHITE_SPACE) [ CD ]
Line_18 $$ wasIdentifier = false-->Line_30 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_23 $$ if (lexer.getTokenType() == ScopeTokenTypes.MINUS) [ FD ]
Line_4 $$ boolean wasIdentifier = false-->Line_21 $$ wasIdentifier = false[ FD ]
Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DIV) -->Line_8 $$ pattern.append("/")[ CD ]
Line_23 $$ if (lexer.getTokenType() == ScopeTokenTypes.MINUS) -->Line_24 $$ wasIdentifier = false[ CD ]
Line_15 $$ wasIdentifier = false-->Line_24 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_14 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) [ FD ]
Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DIV) -->Line_7 $$ wasIdentifier = false[ CD ]
Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || lexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) -->Line_14 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) [ CD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_19 $$ pattern.append(".")[ FD ]
Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || lexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) -->Line_10 $$ if (wasIdentifier)[ CD ]
Line_4 $$ boolean wasIdentifier = false-->Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER[ FD ]
Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER-->Line_24 $$ wasIdentifier = false[ FD ]
Line_26 $$ if (lexer.getTokenType() == ScopeTokenTypes.TILDE) -->Line_28 $$ pattern.append("~")[ CD ]
Line_15 $$ wasIdentifier = false-->Line_21 $$ wasIdentifier = false[ FD ]
Line_37 $$ if (pattern.length() == 0) -->Line_38 $$ error(lexer, AnalysisScopeBundle.message("error.packageset.pattern.expectations"))[ CD ]
Line_17 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) -->Line_18 $$ wasIdentifier = false[ CD ]
Line_21 $$ wasIdentifier = false-->Line_24 $$ wasIdentifier = false[ FD ]
Line_5 $$ while (true) -->Line_35 $$ lexer.advance()[ CD ]
Line_4 $$ boolean wasIdentifier = false-->Line_15 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_38 $$ error(lexer, AnalysisScopeBundle.message("error.packageset.pattern.expectations"))[ FD ]
Line_26 $$ if (lexer.getTokenType() == ScopeTokenTypes.TILDE) -->Line_29 $$ if (lexer.getTokenType() == ScopeTokenTypes.SHARP) [ CD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_17 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) [ FD ]
Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || lexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) -->Line_13 $$ pattern.append(getTokenText(lexer))[ CD ]
Line_21 $$ wasIdentifier = false-->Line_30 $$ wasIdentifier = false[ FD ]
Line_20 $$ if (lexer.getTokenType() == TokenType.WHITE_SPACE) -->Line_21 $$ wasIdentifier = false[ CD ]
Line_24 $$ wasIdentifier = false-->Line_30 $$ wasIdentifier = false[ FD ]
Line_23 $$ if (lexer.getTokenType() == ScopeTokenTypes.MINUS) -->Line_26 $$ if (lexer.getTokenType() == ScopeTokenTypes.TILDE) [ CD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_37 $$ if (pattern.length() == 0) [ CD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_3 $$ StringBuffer pattern = new StringBuffer()[ CD ]
Line_29 $$ if (lexer.getTokenType() == ScopeTokenTypes.SHARP) -->Line_30 $$ wasIdentifier = false[ CD ]
Line_17 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) -->Line_19 $$ pattern.append(".")[ CD ]
Line_7 $$ wasIdentifier = false-->Line_24 $$ wasIdentifier = false[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_13 $$ pattern.append(getTokenText(lexer))[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_20 $$ if (lexer.getTokenType() == TokenType.WHITE_SPACE) [ FD ]
Line_4 $$ boolean wasIdentifier = false-->Line_24 $$ wasIdentifier = false[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_37 $$ if (pattern.length() == 0) [ FD ]
Line_18 $$ wasIdentifier = false-->Line_24 $$ wasIdentifier = false[ FD ]
Line_15 $$ wasIdentifier = false-->Line_27 $$ wasIdentifier = false[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_22 $$ pattern.append(" ")[ FD ]
Line_18 $$ wasIdentifier = false-->Line_21 $$ wasIdentifier = false[ FD ]
Line_4 $$ boolean wasIdentifier = false-->Line_7 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_29 $$ if (lexer.getTokenType() == ScopeTokenTypes.SHARP) [ FD ]
Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || lexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) -->Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER[ CD ]
Line_4 $$ boolean wasIdentifier = false-->Line_18 $$ wasIdentifier = false[ FD ]
Line_24 $$ wasIdentifier = false-->Line_27 $$ wasIdentifier = false[ FD ]
Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER-->Line_27 $$ wasIdentifier = false[ FD ]
Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER-->Line_21 $$ wasIdentifier = false[ FD ]
Line_10 $$ if (wasIdentifier)-->Line_11 $$ error(lexer, AnalysisScopeBundle.message("error.packageset.token.expectations", getTokenText(lexer)))[ CD ]
Line_14 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) -->Line_16 $$ pattern.append("*")[ CD ]
Line_29 $$ if (lexer.getTokenType() == ScopeTokenTypes.SHARP) -->Line_31 $$ pattern.append("#")[ CD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_11 $$ error(lexer, AnalysisScopeBundle.message("error.packageset.token.expectations", getTokenText(lexer)))[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_40 $$ return pattern.toString()[ CD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_8 $$ pattern.append("/")[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_25 $$ pattern.append("-")[ FD ]
Line_7 $$ wasIdentifier = false-->Line_18 $$ wasIdentifier = false[ FD ]
Line_20 $$ if (lexer.getTokenType() == TokenType.WHITE_SPACE) -->Line_23 $$ if (lexer.getTokenType() == ScopeTokenTypes.MINUS) [ CD ]
Line_23 $$ if (lexer.getTokenType() == ScopeTokenTypes.MINUS) -->Line_25 $$ pattern.append("-")[ CD ]
Line_7 $$ wasIdentifier = false-->Line_27 $$ wasIdentifier = false[ FD ]
Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER-->Line_15 $$ wasIdentifier = false[ FD ]
Line_21 $$ wasIdentifier = false-->Line_27 $$ wasIdentifier = false[ FD ]
Line_4 $$ boolean wasIdentifier = false-->Line_30 $$ wasIdentifier = false[ FD ]
Line_7 $$ wasIdentifier = false-->Line_30 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DIV) [ FD ]
Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER-->Line_30 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || lexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) [ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_40 $$ return pattern.toString()[ FD ]
Line_15 $$ wasIdentifier = false-->Line_18 $$ wasIdentifier = false[ FD ]
Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER-->Line_18 $$ wasIdentifier = false[ FD ]
Line_7 $$ wasIdentifier = false-->Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_12 $$ wasIdentifier = lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER[ FD ]
Line_7 $$ wasIdentifier = false-->Line_21 $$ wasIdentifier = false[ FD ]
Line_5 $$ while (true) -->Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DIV) [ CD ]
Line_14 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) -->Line_15 $$ wasIdentifier = false[ CD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_16 $$ pattern.append("*")[ FD ]
Line_7 $$ wasIdentifier = false-->Line_15 $$ wasIdentifier = false[ FD ]
Line_15 $$ wasIdentifier = false-->Line_30 $$ wasIdentifier = false[ FD ]
Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DIV) -->Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER || lexer.getTokenType() == ScopeTokenTypes.INTEGER_LITERAL) [ CD ]
Line_14 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) -->Line_17 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) [ CD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_35 $$ lexer.advance()[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_13 $$ pattern.append(getTokenText(lexer))[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_31 $$ pattern.append("#")[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_28 $$ pattern.append("~")[ FD ]
Line_2 $$ private static String parseFilePattern(Lexer lexer) throws ParsingException -->Line_26 $$ if (lexer.getTokenType() == ScopeTokenTypes.TILDE) [ FD ]
