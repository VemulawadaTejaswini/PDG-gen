Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_8 $$ Element element = refEntity.getRefManager().export(refEntity, parentNode, -1)[ CD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_9 $$ if (element == null)[ CD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_15 $$ problemClassElement.setAttribute("severity", severity.myName)[ CD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_25 $$ element.addContent(hintsElement)[ CD ]
Line_12 $$ final RefElement refElement = (RefElement) refEntity-->Line_13 $$ final HighlightSeverity severity = getSeverity(refElement)[ FD ]
Line_2 $$ public void exportResults(@NotNull final Element parentNode, @NotNull RefEntity refEntity) -->Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) [ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_7 $$ refEntity = getRefManager().getRefinedElement(refEntity)[ CD ]
Line_21 $$ Element hintElement = new Element("hint")-->Line_23 $$ hintsElement.addContent(hintElement)[ FD ]
Line_3 $$ if (!(refEntity instanceof RefJavaElement))-->Line_4 $$ return[ CD ]
Line_2 $$ public void exportResults(@NotNull final Element parentNode, @NotNull RefEntity refEntity) -->Line_7 $$ refEntity = getRefManager().getRefinedElement(refEntity)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_19 $$ Element hintsElement = new Element("hints")[ CD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_14 $$ final String attributeKey = getTextAttributeKey(refElement.getRefManager().getProject(), severity, ProblemHighlightType.LIKE_UNUSED_SYMBOL)[ CD ]
Line_9 $$ if (element == null)-->Line_10 $$ return[ CD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_16 $$ problemClassElement.setAttribute("attribute_key", attributeKey)[ CD ]
Line_19 $$ Element hintsElement = new Element("hints")-->Line_23 $$ hintsElement.addContent(hintElement)[ FD ]
Line_27 $$ StringBuffer buf = new StringBuffer()-->Line_29 $$ descriptionElement.addContent(buf.toString())[ FD ]
Line_11 $$ Element problemClassElement = new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"))-->Line_15 $$ problemClassElement.setAttribute("severity", severity.myName)[ FD ]
Line_8 $$ Element element = refEntity.getRefManager().export(refEntity, parentNode, -1)-->Line_9 $$ if (element == null)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_27 $$ StringBuffer buf = new StringBuffer()[ CD ]
Line_11 $$ Element problemClassElement = new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"))-->Line_16 $$ problemClassElement.setAttribute("attribute_key", attributeKey)[ FD ]
Line_2 $$ public void exportResults(@NotNull final Element parentNode, @NotNull RefEntity refEntity) -->Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) [ CD ]
Line_14 $$ final String attributeKey = getTextAttributeKey(refElement.getRefManager().getProject(), severity, ProblemHighlightType.LIKE_UNUSED_SYMBOL)-->Line_16 $$ problemClassElement.setAttribute("attribute_key", attributeKey)[ FD ]
Line_8 $$ Element element = refEntity.getRefManager().export(refEntity, parentNode, -1)-->Line_25 $$ element.addContent(hintsElement)[ FD ]
Line_20 $$ for (String hint : HINTS) -->Line_22 $$ hintElement.setAttribute("value", hint)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_12 $$ final RefElement refElement = (RefElement) refEntity[ CD ]
Line_13 $$ final HighlightSeverity severity = getSeverity(refElement)-->Line_14 $$ final String attributeKey = getTextAttributeKey(refElement.getRefManager().getProject(), severity, ProblemHighlightType.LIKE_UNUSED_SYMBOL)[ FD ]
Line_27 $$ StringBuffer buf = new StringBuffer()-->Line_28 $$ DeadHTMLComposer.appendProblemSynopsis((RefElement) refEntity, buf)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_29 $$ descriptionElement.addContent(buf.toString())[ CD ]
Line_8 $$ Element element = refEntity.getRefManager().export(refEntity, parentNode, -1)-->Line_30 $$ element.addContent(descriptionElement)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_26 $$ Element descriptionElement = new Element(InspectionsBundle.message("inspection.export.results.description.tag"))[ CD ]
Line_11 $$ Element problemClassElement = new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"))-->Line_17 $$ problemClassElement.addContent(InspectionsBundle.message("inspection.export.results.dead.code"))[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_11 $$ Element problemClassElement = new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"))[ CD ]
Line_26 $$ Element descriptionElement = new Element(InspectionsBundle.message("inspection.export.results.description.tag"))-->Line_29 $$ descriptionElement.addContent(buf.toString())[ FD ]
Line_26 $$ Element descriptionElement = new Element(InspectionsBundle.message("inspection.export.results.description.tag"))-->Line_30 $$ element.addContent(descriptionElement)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_30 $$ element.addContent(descriptionElement)[ CD ]
Line_11 $$ Element problemClassElement = new Element(InspectionsBundle.message("inspection.export.results.problem.element.tag"))-->Line_18 $$ element.addContent(problemClassElement)[ FD ]
Line_5 $$ final RefFilter filter = getFilter()-->Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) [ FD ]
Line_2 $$ public void exportResults(@NotNull final Element parentNode, @NotNull RefEntity refEntity) -->Line_8 $$ Element element = refEntity.getRefManager().export(refEntity, parentNode, -1)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_28 $$ DeadHTMLComposer.appendProblemSynopsis((RefElement) refEntity, buf)[ CD ]
Line_8 $$ Element element = refEntity.getRefManager().export(refEntity, parentNode, -1)-->Line_18 $$ element.addContent(problemClassElement)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_18 $$ element.addContent(problemClassElement)[ CD ]
Line_2 $$ public void exportResults(@NotNull final Element parentNode, @NotNull RefEntity refEntity) -->Line_5 $$ final RefFilter filter = getFilter()[ CD ]
Line_2 $$ public void exportResults(@NotNull final Element parentNode, @NotNull RefEntity refEntity) -->Line_3 $$ if (!(refEntity instanceof RefJavaElement))[ CD ]
Line_19 $$ Element hintsElement = new Element("hints")-->Line_25 $$ element.addContent(hintsElement)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_13 $$ final HighlightSeverity severity = getSeverity(refElement)[ CD ]
Line_21 $$ Element hintElement = new Element("hint")-->Line_22 $$ hintElement.setAttribute("value", hint)[ FD ]
Line_12 $$ final RefElement refElement = (RefElement) refEntity-->Line_14 $$ final String attributeKey = getTextAttributeKey(refElement.getRefManager().getProject(), severity, ProblemHighlightType.LIKE_UNUSED_SYMBOL)[ FD ]
Line_6 $$ if (!getIgnoredRefElements().contains(refEntity) && filter.accepts((RefJavaElement) refEntity)) -->Line_17 $$ problemClassElement.addContent(InspectionsBundle.message("inspection.export.results.dead.code"))[ CD ]
