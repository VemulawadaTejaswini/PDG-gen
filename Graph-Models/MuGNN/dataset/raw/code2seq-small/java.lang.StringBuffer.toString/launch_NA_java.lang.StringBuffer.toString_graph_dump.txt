Line_2 $$ public static void launch() throws Exception -->Line_12 $$ conf.set(FieldSelectionHelper.MAP_OUTPUT_KEY_VALUE_SPEC, "6,5,1-3:0-")[ CD ]
Line_6 $$ Path outDir = new Path(testDir, "output_for_field_selection_test")-->Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_22 $$ String outdata = MapReduceTestUtil.readOutput(outDir, conf)[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_21 $$ assertTrue("Job Failed!", job.isSuccessful())[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_18 $$ job.setOutputValueClass(Text.class)[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_22 $$ String outdata = MapReduceTestUtil.readOutput(outDir, conf)[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_11 $$ conf.set(FieldSelectionHelper.DATA_FIELD_SEPERATOR, "-")[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_19 $$ job.setNumReduceTasks(1)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ FileSystem fs = FileSystem.get(conf)[ FD ]
Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())-->Line_20 $$ job.waitForCompletion(true)[ FD ]
Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())-->Line_21 $$ assertTrue("Job Failed!", job.isSuccessful())[ FD ]
Line_22 $$ String outdata = MapReduceTestUtil.readOutput(outDir, conf)-->Line_23 $$ assertEquals("Outputs doesnt match.", expectedOutput.toString(), outdata)[ FD ]
Line_9 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_23 $$ assertEquals("Outputs doesnt match.", expectedOutput.toString(), outdata)[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_24 $$ fs.delete(outDir, true)[ CD ]
Line_6 $$ Path outDir = new Path(testDir, "output_for_field_selection_test")-->Line_22 $$ String outdata = MapReduceTestUtil.readOutput(outDir, conf)[ FD ]
Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())-->Line_15 $$ job.setMapperClass(FieldSelectionMapper.class)[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())[ CD ]
Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())-->Line_18 $$ job.setOutputValueClass(Text.class)[ FD ]
Line_8 $$ StringBuffer inputData = new StringBuffer()-->Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_13 $$ conf.set(FieldSelectionHelper.REDUCE_OUTPUT_KEY_VALUE_SPEC, ":4,3,2,1,0,0-")[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_13 $$ conf.set(FieldSelectionHelper.REDUCE_OUTPUT_KEY_VALUE_SPEC, ":4,3,2,1,0,0-")[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_15 $$ job.setMapperClass(FieldSelectionMapper.class)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ conf.set(FieldSelectionHelper.MAP_OUTPUT_KEY_VALUE_SPEC, "6,5,1-3:0-")[ FD ]
Line_5 $$ int numOfInputLines = 10-->Line_10 $$ constructInputOutputData(inputData, expectedOutput, numOfInputLines)[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_10 $$ constructInputOutputData(inputData, expectedOutput, numOfInputLines)[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_7 $$ Path inDir = new Path(testDir, "input_for_field_selection_test")[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_17 $$ job.setOutputKeyClass(Text.class)[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_23 $$ assertEquals("Outputs doesnt match.", expectedOutput.toString(), outdata)[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_16 $$ job.setReducerClass(FieldSelectionReducer.class)[ CD ]
Line_4 $$ FileSystem fs = FileSystem.get(conf)-->Line_24 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_20 $$ job.waitForCompletion(true)[ CD ]
Line_6 $$ Path outDir = new Path(testDir, "output_for_field_selection_test")-->Line_24 $$ fs.delete(outDir, true)[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_5 $$ int numOfInputLines = 10[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_8 $$ StringBuffer inputData = new StringBuffer()[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public static void launch() throws Exception -->Line_4 $$ FileSystem fs = FileSystem.get(conf)[ CD ]
Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())-->Line_16 $$ job.setReducerClass(FieldSelectionReducer.class)[ FD ]
Line_9 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_10 $$ constructInputOutputData(inputData, expectedOutput, numOfInputLines)[ FD ]
Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())-->Line_19 $$ job.setNumReduceTasks(1)[ FD ]
Line_8 $$ StringBuffer inputData = new StringBuffer()-->Line_10 $$ constructInputOutputData(inputData, expectedOutput, numOfInputLines)[ FD ]
Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())-->Line_17 $$ job.setOutputKeyClass(Text.class)[ FD ]
Line_7 $$ Path inDir = new Path(testDir, "input_for_field_selection_test")-->Line_14 $$ Job job = MapReduceTestUtil.createJob(conf, inDir, outDir, 1, 1, inputData.toString())[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_6 $$ Path outDir = new Path(testDir, "output_for_field_selection_test")[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_11 $$ conf.set(FieldSelectionHelper.DATA_FIELD_SEPERATOR, "-")[ FD ]
Line_2 $$ public static void launch() throws Exception -->Line_9 $$ StringBuffer expectedOutput = new StringBuffer()[ CD ]
