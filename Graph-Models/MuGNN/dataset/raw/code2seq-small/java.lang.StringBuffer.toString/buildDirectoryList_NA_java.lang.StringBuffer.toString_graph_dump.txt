Line_27 $$ for (int k = j; k < shortNames.length; k++) -->Line_28 $$ String name = shortNames[k][ CD ]
Line_24 $$ if (subdirectory == null) -->Line_35 $$ currentDirectory = subdirectory[ CD ]
Line_21 $$ for (int j = 0; j < shortNames.length; j++) -->Line_24 $$ if (subdirectory == null) [ CD ]
Line_17 $$ PsiDirectory currentDirectory = aPackage.getManager().findDirectory(root)-->Line_23 $$ final PsiDirectory subdirectory = currentDirectory.findSubdirectory(shortName)[ FD ]
Line_23 $$ final PsiDirectory subdirectory = currentDirectory.findSubdirectory(shortName)-->Line_35 $$ currentDirectory = subdirectory[ FD ]
Line_3 $$ for (VirtualFile root : contentSourceRoots) -->Line_13 $$ qNameToCreate = RefactoringUtil.qNameToCreateInSourceRoot(aPackage, root)[ FD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_39 $$ LOG.assertTrue(targetDirectories.size() <= contentSourceRoots.size())[ FD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_39 $$ LOG.assertTrue(targetDirectories.size() <= contentSourceRoots.size())[ CD ]
Line_17 $$ PsiDirectory currentDirectory = aPackage.getManager().findDirectory(root)-->Line_18 $$ if (currentDirectory == null)[ FD ]
Line_3 $$ for (VirtualFile root : contentSourceRoots) -->Line_6 $$ if (VfsUtil.isAncestor(root, directory.getVirtualFile(), false)) [ FD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_40 $$ LOG.assertTrue(relativePathsToCreate.size() <= contentSourceRoots.size())[ CD ]
Line_5 $$ for (PsiDirectory directory : directories) -->Line_6 $$ if (VfsUtil.isAncestor(root, directory.getVirtualFile(), false)) [ FD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_13 $$ qNameToCreate = RefactoringUtil.qNameToCreateInSourceRoot(aPackage, root)[ FD ]
Line_23 $$ final PsiDirectory subdirectory = currentDirectory.findSubdirectory(shortName)-->Line_24 $$ if (subdirectory == null) [ FD ]
Line_28 $$ String name = shortNames[k]-->Line_30 $$ postfix.append(name)[ FD ]
Line_35 $$ currentDirectory = subdirectory-->Line_23 $$ final PsiDirectory subdirectory = currentDirectory.findSubdirectory(shortName)[ FD ]
Line_13 $$ qNameToCreate = RefactoringUtil.qNameToCreateInSourceRoot(aPackage, root)-->Line_20 $$ final String[] shortNames = qNameToCreate.split("\\.")[ FD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_25 $$ targetDirectories.add(currentDirectory)[ FD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_4 $$ final PsiDirectory[] directories = aPackage.getDirectories()[ FD ]
Line_17 $$ PsiDirectory currentDirectory = aPackage.getManager().findDirectory(root)-->Line_32 $$ relativePathsToCreate.put(currentDirectory, postfix.toString())[ FD ]
Line_11 $$ String qNameToCreate-->Line_20 $$ final String[] shortNames = qNameToCreate.split("\\.")[ FD ]
Line_21 $$ for (int j = 0; j < shortNames.length; j++) -->Line_22 $$ String shortName = shortNames[j][ CD ]
Line_26 $$ final StringBuffer postfix = new StringBuffer()-->Line_29 $$ postfix.append(File.separatorChar)[ FD ]
Line_5 $$ for (PsiDirectory directory : directories) -->Line_7 $$ targetDirectories.add(directory)[ FD ]
Line_24 $$ if (subdirectory == null) -->Line_32 $$ relativePathsToCreate.put(currentDirectory, postfix.toString())[ CD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_17 $$ PsiDirectory currentDirectory = aPackage.getManager().findDirectory(root)[ FD ]
Line_17 $$ PsiDirectory currentDirectory = aPackage.getManager().findDirectory(root)-->Line_25 $$ targetDirectories.add(currentDirectory)[ FD ]
Line_6 $$ if (VfsUtil.isAncestor(root, directory.getVirtualFile(), false)) -->Line_7 $$ targetDirectories.add(directory)[ CD ]
Line_11 $$ String qNameToCreate-->Line_13 $$ qNameToCreate = RefactoringUtil.qNameToCreateInSourceRoot(aPackage, root)[ FD ]
Line_35 $$ currentDirectory = subdirectory-->Line_32 $$ relativePathsToCreate.put(currentDirectory, postfix.toString())[ FD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_32 $$ relativePathsToCreate.put(currentDirectory, postfix.toString())[ FD ]
Line_27 $$ for (int k = j; k < shortNames.length; k++) -->Line_30 $$ postfix.append(name)[ CD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_7 $$ targetDirectories.add(directory)[ FD ]
Line_26 $$ final StringBuffer postfix = new StringBuffer()-->Line_32 $$ relativePathsToCreate.put(currentDirectory, postfix.toString())[ FD ]
Line_3 $$ for (VirtualFile root : contentSourceRoots) -->Line_17 $$ PsiDirectory currentDirectory = aPackage.getManager().findDirectory(root)[ FD ]
Line_21 $$ for (int j = 0; j < shortNames.length; j++) -->Line_23 $$ final PsiDirectory subdirectory = currentDirectory.findSubdirectory(shortName)[ CD ]
Line_27 $$ for (int k = j; k < shortNames.length; k++) -->Line_29 $$ postfix.append(File.separatorChar)[ CD ]
Line_22 $$ String shortName = shortNames[j]-->Line_23 $$ final PsiDirectory subdirectory = currentDirectory.findSubdirectory(shortName)[ FD ]
Line_26 $$ final StringBuffer postfix = new StringBuffer()-->Line_30 $$ postfix.append(name)[ FD ]
Line_2 $$ public static void buildDirectoryList(PackageWrapper aPackage, List<VirtualFile> contentSourceRoots, LinkedHashSet<PsiDirectory> targetDirectories, Map<PsiDirectory, String> relativePathsToCreate) -->Line_40 $$ LOG.assertTrue(relativePathsToCreate.size() <= contentSourceRoots.size())[ FD ]
Line_35 $$ currentDirectory = subdirectory-->Line_25 $$ targetDirectories.add(currentDirectory)[ FD ]
Line_17 $$ PsiDirectory currentDirectory = aPackage.getManager().findDirectory(root)-->Line_35 $$ currentDirectory = subdirectory[ FD ]
Line_24 $$ if (subdirectory == null) -->Line_26 $$ final StringBuffer postfix = new StringBuffer()[ CD ]
Line_24 $$ if (subdirectory == null) -->Line_25 $$ targetDirectories.add(currentDirectory)[ CD ]
Line_24 $$ if (subdirectory == null) -->Line_27 $$ for (int k = j; k < shortNames.length; k++) [ CD ]
