Line_6 $$ final CharSequence spaces = myDocumentModel.getText(new TextRange(lineStartOffset, emptyLineEnd))-->Line_8 $$ result.append(spaces.toString())[ FD ]
Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_11 $$ return result.toString()[ FD ]
Line_6 $$ final CharSequence spaces = myDocumentModel.getText(new TextRange(lineStartOffset, emptyLineEnd))-->Line_7 $$ if (spaces != null) [ FD ]
Line_2 $$ private String calcOffset(final int startOffset) -->Line_6 $$ final CharSequence spaces = myDocumentModel.getText(new TextRange(lineStartOffset, emptyLineEnd))[ CD ]
Line_2 $$ private String calcOffset(final int startOffset) -->Line_4 $$ final int lineStartOffset = myDocumentModel.getLineStartOffset(myDocumentModel.getLineNumber(startOffset))[ FD ]
Line_2 $$ private String calcOffset(final int startOffset) -->Line_4 $$ final int lineStartOffset = myDocumentModel.getLineStartOffset(myDocumentModel.getLineNumber(startOffset))[ CD ]
Line_2 $$ private String calcOffset(final int startOffset) -->Line_10 $$ appendSpaces(result, startOffset - emptyLineEnd)[ CD ]
Line_2 $$ private String calcOffset(final int startOffset) -->Line_7 $$ if (spaces != null) [ CD ]
Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_8 $$ result.append(spaces.toString())[ FD ]
Line_7 $$ if (spaces != null) -->Line_8 $$ result.append(spaces.toString())[ CD ]
Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_10 $$ appendSpaces(result, startOffset - emptyLineEnd)[ FD ]
Line_2 $$ private String calcOffset(final int startOffset) -->Line_11 $$ return result.toString()[ CD ]
Line_4 $$ final int lineStartOffset = myDocumentModel.getLineStartOffset(myDocumentModel.getLineNumber(startOffset))-->Line_5 $$ final int emptyLineEnd = CharArrayUtil.shiftForward(myDocumentModel.getDocument().getCharsSequence(), lineStartOffset, " \t")[ FD ]
Line_2 $$ private String calcOffset(final int startOffset) -->Line_5 $$ final int emptyLineEnd = CharArrayUtil.shiftForward(myDocumentModel.getDocument().getCharsSequence(), lineStartOffset, " \t")[ CD ]
Line_2 $$ private String calcOffset(final int startOffset) -->Line_3 $$ final StringBuffer result = new StringBuffer()[ CD ]
