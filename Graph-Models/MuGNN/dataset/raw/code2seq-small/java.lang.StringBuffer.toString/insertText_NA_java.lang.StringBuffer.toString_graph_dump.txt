Line_12 $$ final PomModel model = PomManager.getModel(getProject())-->Line_23 $$ return XmlTextChangedImpl.createXmlTextChanged(model, XmlTextImpl.this, oldText)[ FD ]
Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) -->Line_12 $$ final PomModel model = PomManager.getModel(getProject())[ CD ]
Line_12 $$ final PomModel model = PomManager.getModel(getProject())-->Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) [ FD ]
Line_11 $$ final String newElementText = oldElementText.substring(0, insertOffset) + text + oldElementText.substring(insertOffset)-->Line_17 $$ final ASTNode e = getPolicy().encodeXmlTextContents(newElementText, XmlTextImpl.this)[ FD ]
Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) -->Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) [ CD ]
Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) -->Line_21 $$ deleteChildInternal(node)[ CD ]
Line_16 $$ final String oldText = getText()-->Line_23 $$ return XmlTextChangedImpl.createXmlTextChanged(model, XmlTextImpl.this, oldText)[ FD ]
Line_2 $$ public void insertText(String text, int displayOffset) throws IncorrectOperationException -->Line_7 $$ final IElementType elementType = psiElement != null ? psiElement.getNode().getElementType() : null[ CD ]
Line_3 $$ if (text == null || text.isEmpty())-->Line_4 $$ return[ CD ]
Line_2 $$ public void insertText(String text, int displayOffset) throws IncorrectOperationException -->Line_5 $$ final int physicalOffset = displayToPhysical(displayOffset)[ FD ]
Line_18 $$ final ASTNode node = psiElement.getNode()-->Line_21 $$ deleteChildInternal(node)[ FD ]
Line_6 $$ final PsiElement psiElement = findElementAt(physicalOffset)-->Line_10 $$ final String oldElementText = psiElement.getText()[ FD ]
Line_17 $$ final ASTNode e = getPolicy().encodeXmlTextContents(newElementText, XmlTextImpl.this)-->Line_20 $$ addChildren(e, null, treeNext)[ FD ]
Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) -->Line_11 $$ final String newElementText = oldElementText.substring(0, insertOffset) + text + oldElementText.substring(insertOffset)[ CD ]
Line_2 $$ public void insertText(String text, int displayOffset) throws IncorrectOperationException -->Line_3 $$ if (text == null || text.isEmpty())[ CD ]
Line_6 $$ final PsiElement psiElement = findElementAt(physicalOffset)-->Line_7 $$ final IElementType elementType = psiElement != null ? psiElement.getNode().getElementType() : null[ FD ]
Line_7 $$ final IElementType elementType = psiElement != null ? psiElement.getNode().getElementType() : null-->Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) [ FD ]
Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) -->Line_23 $$ return XmlTextChangedImpl.createXmlTextChanged(model, XmlTextImpl.this, oldText)[ CD ]
Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) -->Line_16 $$ final String oldText = getText()[ CD ]
Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) -->Line_9 $$ int insertOffset = physicalOffset - psiElement.getStartOffsetInParent()[ CD ]
Line_2 $$ public void insertText(String text, int displayOffset) throws IncorrectOperationException -->Line_5 $$ final int physicalOffset = displayToPhysical(displayOffset)[ CD ]
Line_2 $$ public void insertText(String text, int displayOffset) throws IncorrectOperationException -->Line_3 $$ if (text == null || text.isEmpty())[ FD ]
Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) -->Line_22 $$ clearCaches()[ CD ]
Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) -->Line_27 $$ setValue(new StringBuffer(getValue()).insert(displayOffset, text).toString())[ CD ]
Line_2 $$ public void insertText(String text, int displayOffset) throws IncorrectOperationException -->Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) [ CD ]
Line_18 $$ final ASTNode node = psiElement.getNode()-->Line_19 $$ final ASTNode treeNext = node.getTreeNext()[ FD ]
Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) -->Line_13 $$ final XmlAspect aspect = model.getModelAspect(XmlAspect.class)[ CD ]
Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) -->Line_18 $$ final ASTNode node = psiElement.getNode()[ CD ]
Line_12 $$ final PomModel model = PomManager.getModel(getProject())-->Line_13 $$ final XmlAspect aspect = model.getModelAspect(XmlAspect.class)[ FD ]
Line_6 $$ final PsiElement psiElement = findElementAt(physicalOffset)-->Line_18 $$ final ASTNode node = psiElement.getNode()[ FD ]
Line_19 $$ final ASTNode treeNext = node.getTreeNext()-->Line_20 $$ addChildren(e, null, treeNext)[ FD ]
Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) -->Line_20 $$ addChildren(e, null, treeNext)[ CD ]
Line_10 $$ final String oldElementText = psiElement.getText()-->Line_11 $$ final String newElementText = oldElementText.substring(0, insertOffset) + text + oldElementText.substring(insertOffset)[ FD ]
Line_2 $$ public void insertText(String text, int displayOffset) throws IncorrectOperationException -->Line_27 $$ setValue(new StringBuffer(getValue()).insert(displayOffset, text).toString())[ FD ]
Line_5 $$ final int physicalOffset = displayToPhysical(displayOffset)-->Line_6 $$ final PsiElement psiElement = findElementAt(physicalOffset)[ FD ]
Line_6 $$ final PsiElement psiElement = findElementAt(physicalOffset)-->Line_9 $$ int insertOffset = physicalOffset - psiElement.getStartOffsetInParent()[ FD ]
Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) -->Line_19 $$ final ASTNode treeNext = node.getTreeNext()[ CD ]
Line_8 $$ if (elementType == XmlTokenType.XML_DATA_CHARACTERS) -->Line_10 $$ final String oldElementText = psiElement.getText()[ CD ]
Line_9 $$ int insertOffset = physicalOffset - psiElement.getStartOffsetInParent()-->Line_11 $$ final String newElementText = oldElementText.substring(0, insertOffset) + text + oldElementText.substring(insertOffset)[ FD ]
Line_2 $$ public void insertText(String text, int displayOffset) throws IncorrectOperationException -->Line_6 $$ final PsiElement psiElement = findElementAt(physicalOffset)[ CD ]
Line_14 $$ model.runTransaction(new PomTransactionBase(this, aspect) -->Line_17 $$ final ASTNode e = getPolicy().encodeXmlTextContents(newElementText, XmlTextImpl.this)[ CD ]
