Line_5 $$ final String parentPath = handleSpacesInPath(agentPath)-->Line_6 $$ argument.append(parentPath).append(File.separator).append(new File(agentPath).getName())[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_4 $$ final String agentPath = PathUtil.getJarPathForClass(org.jacoco.agent.rt.RT.class)[ CD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_5 $$ final String parentPath = handleSpacesInPath(agentPath)[ CD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_7 $$ argument.append("=")[ CD ]
Line_3 $$ StringBuffer argument = new StringBuffer("-javaagent:")-->Line_8 $$ argument.append("destfile=").append(sessionDataFilePath)[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_9 $$ argument.append(",append=false")[ CD ]
Line_3 $$ StringBuffer argument = new StringBuffer("-javaagent:")-->Line_9 $$ argument.append(",append=false")[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_10 $$ javaParameters.getVMParametersList().add(argument.toString())[ FD ]
Line_3 $$ StringBuffer argument = new StringBuffer("-javaagent:")-->Line_10 $$ javaParameters.getVMParametersList().add(argument.toString())[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_3 $$ StringBuffer argument = new StringBuffer("-javaagent:")[ CD ]
Line_3 $$ StringBuffer argument = new StringBuffer("-javaagent:")-->Line_6 $$ argument.append(parentPath).append(File.separator).append(new File(agentPath).getName())[ FD ]
Line_3 $$ StringBuffer argument = new StringBuffer("-javaagent:")-->Line_7 $$ argument.append("=")[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_8 $$ argument.append("destfile=").append(sessionDataFilePath)[ CD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_8 $$ argument.append("destfile=").append(sessionDataFilePath)[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_10 $$ javaParameters.getVMParametersList().add(argument.toString())[ CD ]
Line_4 $$ final String agentPath = PathUtil.getJarPathForClass(org.jacoco.agent.rt.RT.class)-->Line_5 $$ final String parentPath = handleSpacesInPath(agentPath)[ FD ]
Line_2 $$ public void appendCoverageArgument(final String sessionDataFilePath, final String[] patterns, final SimpleJavaParameters javaParameters, final boolean collectLineInfo, final boolean isSampling) -->Line_6 $$ argument.append(parentPath).append(File.separator).append(new File(agentPath).getName())[ CD ]
