Line_5 $$ TypesReader tr = new TypesReader(msg, 0, msglen)-->Line_7 $$ int id = tr.readUINT32()[ FD ]
Line_13 $$ String reasonCodeSymbolicName = null-->Line_28 $$ reasonCodeSymbolicName = "UNKNOWN REASON CODE (" + reasonCode + ")"[ FD ]
Line_13 $$ String reasonCodeSymbolicName = null-->Line_22 $$ reasonCodeSymbolicName = "SSH_OPEN_UNKNOWN_CHANNEL_TYPE"[ FD ]
Line_8 $$ Channel c = getChannel(id)-->Line_41 $$ c.setReasonClosed("The server refused to open the channel (" + reasonCodeSymbolicName + ", '" + descriptionBuffer.toString() + "')")[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_5 $$ TypesReader tr = new TypesReader(msg, 0, msglen)[ CD ]
Line_32 $$ for (int i = 0; i < descriptionBuffer.length(); i++) -->Line_34 $$ if ((cc >= 32) && (cc <= 126))[ CD ]
Line_22 $$ reasonCodeSymbolicName = "SSH_OPEN_UNKNOWN_CHANNEL_TYPE"-->Line_28 $$ reasonCodeSymbolicName = "UNKNOWN REASON CODE (" + reasonCode + ")"[ FD ]
Line_30 $$ StringBuffer descriptionBuffer = new StringBuffer()-->Line_31 $$ descriptionBuffer.append(description)[ FD ]
Line_5 $$ TypesReader tr = new TypesReader(msg, 0, msglen)-->Line_11 $$ int reasonCode = tr.readUINT32()[ FD ]
Line_30 $$ StringBuffer descriptionBuffer = new StringBuffer()-->Line_33 $$ char cc = descriptionBuffer.charAt(i)[ FD ]
Line_25 $$ reasonCodeSymbolicName = "SSH_OPEN_RESOURCE_SHORTAGE"-->Line_28 $$ reasonCodeSymbolicName = "UNKNOWN REASON CODE (" + reasonCode + ")"[ FD ]
Line_5 $$ TypesReader tr = new TypesReader(msg, 0, msglen)-->Line_6 $$ tr.readByte()[ FD ]
Line_13 $$ String reasonCodeSymbolicName = null-->Line_16 $$ reasonCodeSymbolicName = "SSH_OPEN_ADMINISTRATIVELY_PROHIBITED"[ FD ]
Line_16 $$ reasonCodeSymbolicName = "SSH_OPEN_ADMINISTRATIVELY_PROHIBITED"-->Line_19 $$ reasonCodeSymbolicName = "SSH_OPEN_CONNECT_FAILED"[ FD ]
Line_22 $$ reasonCodeSymbolicName = "SSH_OPEN_UNKNOWN_CHANNEL_TYPE"-->Line_25 $$ reasonCodeSymbolicName = "SSH_OPEN_RESOURCE_SHORTAGE"[ FD ]
Line_32 $$ for (int i = 0; i < descriptionBuffer.length(); i++) -->Line_36 $$ descriptionBuffer.setCharAt(i, '�')[ FD ]
Line_32 $$ for (int i = 0; i < descriptionBuffer.length(); i++) -->Line_33 $$ char cc = descriptionBuffer.charAt(i)[ CD ]
Line_19 $$ reasonCodeSymbolicName = "SSH_OPEN_CONNECT_FAILED"-->Line_25 $$ reasonCodeSymbolicName = "SSH_OPEN_RESOURCE_SHORTAGE"[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_32 $$ for (int i = 0; i < descriptionBuffer.length(); i++) [ CD ]
Line_13 $$ String reasonCodeSymbolicName = null-->Line_25 $$ reasonCodeSymbolicName = "SSH_OPEN_RESOURCE_SHORTAGE"[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_13 $$ String reasonCodeSymbolicName = null[ CD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_12 $$ String description = tr.readString("UTF-8")[ CD ]
Line_44 $$ if (log.isEnabled())-->Line_45 $$ log.log(50, "Got SSH_MSG_CHANNEL_OPEN_FAILURE (channel " + id + ")")[ CD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_11 $$ int reasonCode = tr.readUINT32()[ CD ]
Line_5 $$ TypesReader tr = new TypesReader(msg, 0, msglen)-->Line_12 $$ String description = tr.readString("UTF-8")[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_9 $$ if (c == null)[ CD ]
Line_16 $$ reasonCodeSymbolicName = "SSH_OPEN_ADMINISTRATIVELY_PROHIBITED"-->Line_22 $$ reasonCodeSymbolicName = "SSH_OPEN_UNKNOWN_CHANNEL_TYPE"[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_3 $$ if (msglen < 5)[ FD ]
Line_19 $$ reasonCodeSymbolicName = "SSH_OPEN_CONNECT_FAILED"-->Line_22 $$ reasonCodeSymbolicName = "SSH_OPEN_UNKNOWN_CHANNEL_TYPE"[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_7 $$ int id = tr.readUINT32()[ CD ]
Line_13 $$ String reasonCodeSymbolicName = null-->Line_19 $$ reasonCodeSymbolicName = "SSH_OPEN_CONNECT_FAILED"[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_44 $$ if (log.isEnabled())[ CD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_8 $$ Channel c = getChannel(id)[ CD ]
Line_19 $$ reasonCodeSymbolicName = "SSH_OPEN_CONNECT_FAILED"-->Line_28 $$ reasonCodeSymbolicName = "UNKNOWN REASON CODE (" + reasonCode + ")"[ FD ]
Line_30 $$ StringBuffer descriptionBuffer = new StringBuffer()-->Line_32 $$ for (int i = 0; i < descriptionBuffer.length(); i++) [ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_3 $$ if (msglen < 5)[ CD ]
Line_32 $$ for (int i = 0; i < descriptionBuffer.length(); i++) -->Line_36 $$ descriptionBuffer.setCharAt(i, '�')[ CD ]
Line_30 $$ StringBuffer descriptionBuffer = new StringBuffer()-->Line_36 $$ descriptionBuffer.setCharAt(i, '�')[ FD ]
Line_16 $$ reasonCodeSymbolicName = "SSH_OPEN_ADMINISTRATIVELY_PROHIBITED"-->Line_28 $$ reasonCodeSymbolicName = "UNKNOWN REASON CODE (" + reasonCode + ")"[ FD ]
Line_12 $$ String description = tr.readString("UTF-8")-->Line_31 $$ descriptionBuffer.append(description)[ FD ]
Line_8 $$ Channel c = getChannel(id)-->Line_9 $$ if (c == null)[ FD ]
Line_7 $$ int id = tr.readUINT32()-->Line_8 $$ Channel c = getChannel(id)[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_30 $$ StringBuffer descriptionBuffer = new StringBuffer()[ CD ]
Line_8 $$ Channel c = getChannel(id)-->Line_42 $$ c.notifyAll()[ FD ]
Line_16 $$ reasonCodeSymbolicName = "SSH_OPEN_ADMINISTRATIVELY_PROHIBITED"-->Line_25 $$ reasonCodeSymbolicName = "SSH_OPEN_RESOURCE_SHORTAGE"[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_31 $$ descriptionBuffer.append(description)[ CD ]
Line_30 $$ StringBuffer descriptionBuffer = new StringBuffer()-->Line_41 $$ c.setReasonClosed("The server refused to open the channel (" + reasonCodeSymbolicName + ", '" + descriptionBuffer.toString() + "')")[ FD ]
Line_2 $$ public void msgChannelOpenFailure(byte[] msg, int msglen) throws IOException -->Line_6 $$ tr.readByte()[ CD ]
Line_32 $$ for (int i = 0; i < descriptionBuffer.length(); i++) -->Line_33 $$ char cc = descriptionBuffer.charAt(i)[ FD ]
