Line_4 $$ final StringTokenizer t = new StringTokenizer(lines, "\n")-->Line_7 $$ String s = t.nextToken()[ FD ]
Line_2 $$ private static String removePrefix(String lines, String prefix) -->Line_10 $$ return results.toString()[ CD ]
Line_2 $$ private static String removePrefix(String lines, String prefix) -->Line_6 $$ for (; t.hasMoreTokens(); ) [ CD ]
Line_5 $$ final StringBuffer results = new StringBuffer()-->Line_8 $$ results.append(s.substring(s.indexOf(prefix) + prefixlen) + "\n")[ FD ]
Line_2 $$ private static String removePrefix(String lines, String prefix) -->Line_3 $$ final int prefixlen = prefix.length()[ FD ]
Line_6 $$ for (; t.hasMoreTokens(); ) -->Line_7 $$ String s = t.nextToken()[ CD ]
Line_2 $$ private static String removePrefix(String lines, String prefix) -->Line_5 $$ final StringBuffer results = new StringBuffer()[ CD ]
Line_4 $$ final StringTokenizer t = new StringTokenizer(lines, "\n")-->Line_6 $$ for (; t.hasMoreTokens(); ) [ FD ]
Line_2 $$ private static String removePrefix(String lines, String prefix) -->Line_4 $$ final StringTokenizer t = new StringTokenizer(lines, "\n")[ CD ]
Line_6 $$ for (; t.hasMoreTokens(); ) -->Line_8 $$ results.append(s.substring(s.indexOf(prefix) + prefixlen) + "\n")[ CD ]
Line_5 $$ final StringBuffer results = new StringBuffer()-->Line_10 $$ return results.toString()[ FD ]
Line_2 $$ private static String removePrefix(String lines, String prefix) -->Line_8 $$ results.append(s.substring(s.indexOf(prefix) + prefixlen) + "\n")[ FD ]
Line_7 $$ String s = t.nextToken()-->Line_8 $$ results.append(s.substring(s.indexOf(prefix) + prefixlen) + "\n")[ FD ]
Line_2 $$ private static String removePrefix(String lines, String prefix) -->Line_3 $$ final int prefixlen = prefix.length()[ CD ]
