Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_11 $$ QueuePlacementPolicy policy = parse(sb.toString())[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_15 $$ configuredQueues.get(FSQueueType.LEAF).add("root.user3group")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_6 $$ sb.append("  <rule name='nestedUserQueue'>")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_9 $$ sb.append("  <rule name='default' />")[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_6 $$ sb.append("  <rule name='nestedUserQueue'>")[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_10 $$ sb.append("</queuePlacementPolicy>")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_13 $$ configuredQueues.get(FSQueueType.LEAF).add("root.specifiedq")[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_4 $$ sb.append("<queuePlacementPolicy>")[ FD ]
Line_11 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_12 $$ assertEquals("root.user1group.user1", policy.assignAppToQueue("root.default", "user1"))[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_5 $$ sb.append("  <rule name='specified' create='false' />")[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_11 $$ QueuePlacementPolicy policy = parse(sb.toString())[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_7 $$ sb.append("       <rule name='primaryGroup'/>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_9 $$ sb.append("  <rule name='default' />")[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_14 $$ assertEquals("root.specifiedq", policy.assignAppToQueue("root.specifiedq", "user2"))[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_7 $$ sb.append("       <rule name='primaryGroup'/>")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_12 $$ assertEquals("root.user1group.user1", policy.assignAppToQueue("root.default", "user1"))[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_8 $$ sb.append("  </rule>")[ CD ]
Line_11 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_14 $$ assertEquals("root.specifiedq", policy.assignAppToQueue("root.specifiedq", "user2"))[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_3 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_4 $$ sb.append("<queuePlacementPolicy>")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_16 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user3"))[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroup() throws Exception -->Line_5 $$ sb.append("  <rule name='specified' create='false' />")[ CD ]
Line_11 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_16 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user3"))[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_10 $$ sb.append("</queuePlacementPolicy>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_8 $$ sb.append("  </rule>")[ FD ]
