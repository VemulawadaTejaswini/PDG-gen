Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_10 $$ myClassInstanceName = getUniqueLocalVarName(instanceBaseName, myEqualsFields)[ CD ]
Line_24 $$ if (type instanceof PsiPrimitiveType) -->Line_38 $$ addFieldComparison(buffer, field)[ CD ]
Line_14 $$ if (myEqualsFields.length > 0) -->Line_18 $$ Collections.sort(equalsFields, EqualsFieldsComparator.INSTANCE)[ CD ]
Line_19 $$ for (PsiField field : equalsFields) -->Line_38 $$ addFieldComparison(buffer, field)[ FD ]
Line_4 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, PsiType.getJavaLangObject(myClass.getManager(), myClass.getResolveScope())).names-->Line_8 $$ nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, classType).names[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_14 $$ if (myEqualsFields.length > 0) [ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_5 $$ final String objectBaseName = nameSuggestions.length > 0 ? nameSuggestions[0] : BASE_OBJECT_PARAMETER_NAME[ CD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_15 $$ addClassInstance(buffer)[ FD ]
Line_25 $$ if (PsiType.DOUBLE.equals(type) || PsiType.FLOAT.equals(type)) -->Line_26 $$ addDoubleFieldComparison(buffer, field)[ CD ]
Line_24 $$ if (type instanceof PsiPrimitiveType) -->Line_31 $$ if (type instanceof PsiClassType) [ CD ]
Line_3 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myProject)-->Line_8 $$ nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, classType).names[ FD ]
Line_9 $$ String instanceBaseName = nameSuggestions.length > 0 && nameSuggestions[0].length() < 10 ? nameSuggestions[0] : BASE_OBJECT_LOCAL_NAME-->Line_10 $$ myClassInstanceName = getUniqueLocalVarName(instanceBaseName, myEqualsFields)[ FD ]
Line_19 $$ for (PsiField field : equalsFields) -->Line_21 $$ final PsiType type = field.getType()[ FD ]
Line_21 $$ final PsiType type = field.getType()-->Line_31 $$ if (type instanceof PsiClassType) [ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_44 $$ GrMethod result = myFactory.createMethodFromText(buffer.toString())[ CD ]
Line_45 $$ final PsiParameter parameter = result.getParameterList().getParameters()[0]-->Line_46 $$ PsiUtil.setModifierProperty(parameter, PsiModifier.FINAL, CodeStyleSettingsManager.getSettings(myProject).GENERATE_FINAL_PARAMETERS)[ FD ]
Line_19 $$ for (PsiField field : equalsFields) -->Line_34 $$ addFieldComparison(buffer, field)[ FD ]
Line_7 $$ final PsiType classType = TypesUtil.createType(myClass.getQualifiedName(), myClass.getContext())-->Line_8 $$ nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, classType).names[ FD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_28 $$ addFieldComparison(buffer, field)[ FD ]
Line_31 $$ if (type instanceof PsiClassType) -->Line_32 $$ final PsiClass aClass = ((PsiClassType) type).resolve()[ CD ]
Line_14 $$ if (myEqualsFields.length > 0) -->Line_15 $$ addClassInstance(buffer)[ CD ]
Line_16 $$ ArrayList<PsiField> equalsFields = new ArrayList<PsiField>()-->Line_17 $$ ContainerUtil.addAll(equalsFields, myEqualsFields)[ FD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_38 $$ addFieldComparison(buffer, field)[ FD ]
Line_19 $$ for (PsiField field : equalsFields) -->Line_23 $$ addArrayEquals(buffer, field)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_45 $$ final PsiParameter parameter = result.getParameterList().getParameters()[0][ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_6 $$ myParameterName = getUniqueLocalVarName(objectBaseName, myEqualsFields)[ CD ]
Line_21 $$ final PsiType type = field.getType()-->Line_24 $$ if (type instanceof PsiPrimitiveType) [ FD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_44 $$ GrMethod result = myFactory.createMethodFromText(buffer.toString())[ FD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_43 $$ buffer.append("\nreturn true\n}")[ FD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_13 $$ addEqualsPrologue(buffer)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_13 $$ addEqualsPrologue(buffer)[ CD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_12 $$ buffer.append("boolean equals(").append(myParameterName).append(") [ FD ]
Line_16 $$ ArrayList<PsiField> equalsFields = new ArrayList<PsiField>()-->Line_18 $$ Collections.sort(equalsFields, EqualsFieldsComparator.INSTANCE)[ FD ]
Line_21 $$ final PsiType type = field.getType()-->Line_25 $$ if (PsiType.DOUBLE.equals(type) || PsiType.FLOAT.equals(type)) [ FD ]
Line_14 $$ if (myEqualsFields.length > 0) -->Line_16 $$ ArrayList<PsiField> equalsFields = new ArrayList<PsiField>()[ CD ]
Line_19 $$ for (PsiField field : equalsFields) -->Line_20 $$ if (!field.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_52 $$ return result[ CD ]
Line_5 $$ final String objectBaseName = nameSuggestions.length > 0 ? nameSuggestions[0] : BASE_OBJECT_PARAMETER_NAME-->Line_6 $$ myParameterName = getUniqueLocalVarName(objectBaseName, myEqualsFields)[ FD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_26 $$ addDoubleFieldComparison(buffer, field)[ FD ]
Line_32 $$ final PsiClass aClass = ((PsiClassType) type).resolve()-->Line_33 $$ if (aClass != null && aClass.isEnum()) [ FD ]
Line_33 $$ if (aClass != null && aClass.isEnum()) -->Line_34 $$ addFieldComparison(buffer, field)[ CD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_34 $$ addFieldComparison(buffer, field)[ FD ]
Line_24 $$ if (type instanceof PsiPrimitiveType) -->Line_25 $$ if (PsiType.DOUBLE.equals(type) || PsiType.FLOAT.equals(type)) [ CD ]
Line_20 $$ if (!field.hasModifierProperty(PsiModifier.STATIC)) -->Line_22 $$ if (type instanceof PsiArrayType) [ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_8 $$ nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, classType).names[ CD ]
Line_22 $$ if (type instanceof PsiArrayType) -->Line_24 $$ if (type instanceof PsiPrimitiveType) [ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_46 $$ PsiUtil.setModifierProperty(parameter, PsiModifier.FINAL, CodeStyleSettingsManager.getSettings(myProject).GENERATE_FINAL_PARAMETERS)[ CD ]
Line_14 $$ if (myEqualsFields.length > 0) -->Line_17 $$ ContainerUtil.addAll(equalsFields, myEqualsFields)[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_7 $$ final PsiType classType = TypesUtil.createType(myClass.getQualifiedName(), myClass.getContext())[ CD ]
Line_44 $$ GrMethod result = myFactory.createMethodFromText(buffer.toString())-->Line_48 $$ result = ((GrMethod) CodeStyleManager.getInstance(myProject).reformat(result))[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_4 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, PsiType.getJavaLangObject(myClass.getManager(), myClass.getResolveScope())).names[ CD ]
Line_25 $$ if (PsiType.DOUBLE.equals(type) || PsiType.FLOAT.equals(type)) -->Line_28 $$ addFieldComparison(buffer, field)[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_9 $$ String instanceBaseName = nameSuggestions.length > 0 && nameSuggestions[0].length() < 10 ? nameSuggestions[0] : BASE_OBJECT_LOCAL_NAME[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_12 $$ buffer.append("boolean equals(").append(myParameterName).append(") [ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_43 $$ buffer.append("\nreturn true\n}")[ CD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_3 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myProject)[ CD ]
Line_20 $$ if (!field.hasModifierProperty(PsiModifier.STATIC)) -->Line_21 $$ final PsiType type = field.getType()[ CD ]
Line_19 $$ for (PsiField field : equalsFields) -->Line_28 $$ addFieldComparison(buffer, field)[ FD ]
Line_21 $$ final PsiType type = field.getType()-->Line_22 $$ if (type instanceof PsiArrayType) [ FD ]
Line_44 $$ GrMethod result = myFactory.createMethodFromText(buffer.toString())-->Line_45 $$ final PsiParameter parameter = result.getParameterList().getParameters()[0][ FD ]
Line_31 $$ if (type instanceof PsiClassType) -->Line_33 $$ if (aClass != null && aClass.isEnum()) [ CD ]
Line_22 $$ if (type instanceof PsiArrayType) -->Line_23 $$ addArrayEquals(buffer, field)[ CD ]
Line_11 $$ StringBuffer buffer = new StringBuffer()-->Line_23 $$ addArrayEquals(buffer, field)[ FD ]
Line_19 $$ for (PsiField field : equalsFields) -->Line_26 $$ addDoubleFieldComparison(buffer, field)[ FD ]
Line_2 $$ private PsiMethod createEquals() throws IncorrectOperationException -->Line_11 $$ StringBuffer buffer = new StringBuffer()[ CD ]
Line_3 $$ final JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(myProject)-->Line_4 $$ String[] nameSuggestions = codeStyleManager.suggestVariableName(VariableKind.PARAMETER, null, null, PsiType.getJavaLangObject(myClass.getManager(), myClass.getResolveScope())).names[ FD ]
