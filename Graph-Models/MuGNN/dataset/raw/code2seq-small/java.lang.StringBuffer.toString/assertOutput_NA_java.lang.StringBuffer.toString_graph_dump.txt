Line_4 $$ ProcessHandler process = runProcess(className, module, DefaultRunExecutor.class, new ProcessAdapter() -->Line_11 $$ process.waitFor()[ FD ]
Line_4 $$ ProcessHandler process = runProcess(className, module, DefaultRunExecutor.class, new ProcessAdapter() -->Line_6 $$ if (ProcessOutputTypes.SYSTEM != outputType) [ FD ]
Line_2 $$ protected void assertOutput(String className, String expected, final Module module) throws ExecutionException -->Line_11 $$ process.waitFor()[ CD ]
Line_6 $$ if (ProcessOutputTypes.SYSTEM != outputType) -->Line_7 $$ sb.append(event.getText())[ CD ]
Line_2 $$ protected void assertOutput(String className, String expected, final Module module) throws ExecutionException -->Line_4 $$ ProcessHandler process = runProcess(className, module, DefaultRunExecutor.class, new ProcessAdapter() [ FD ]
Line_4 $$ ProcessHandler process = runProcess(className, module, DefaultRunExecutor.class, new ProcessAdapter() -->Line_6 $$ if (ProcessOutputTypes.SYSTEM != outputType) [ CD ]
Line_3 $$ final StringBuffer sb = new StringBuffer()-->Line_12 $$ assertEquals(expected.trim(), StringUtil.convertLineSeparators(sb.toString().trim()))[ FD ]
Line_2 $$ protected void assertOutput(String className, String expected, final Module module) throws ExecutionException -->Line_12 $$ assertEquals(expected.trim(), StringUtil.convertLineSeparators(sb.toString().trim()))[ FD ]
Line_2 $$ protected void assertOutput(String className, String expected, final Module module) throws ExecutionException -->Line_4 $$ ProcessHandler process = runProcess(className, module, DefaultRunExecutor.class, new ProcessAdapter() [ CD ]
Line_4 $$ ProcessHandler process = runProcess(className, module, DefaultRunExecutor.class, new ProcessAdapter() -->Line_7 $$ sb.append(event.getText())[ FD ]
Line_3 $$ final StringBuffer sb = new StringBuffer()-->Line_7 $$ sb.append(event.getText())[ FD ]
Line_2 $$ protected void assertOutput(String className, String expected, final Module module) throws ExecutionException -->Line_3 $$ final StringBuffer sb = new StringBuffer()[ CD ]
Line_2 $$ protected void assertOutput(String className, String expected, final Module module) throws ExecutionException -->Line_12 $$ assertEquals(expected.trim(), StringUtil.convertLineSeparators(sb.toString().trim()))[ CD ]
