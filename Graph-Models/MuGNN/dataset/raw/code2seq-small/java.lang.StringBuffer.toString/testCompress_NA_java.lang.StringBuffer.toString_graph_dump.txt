Line_20 $$ NullWritable nullWritable = NullWritable.get()-->Line_26 $$ theRecordWriter.write(key2, nullWritable)[ FD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_28 $$ theRecordWriter.write(null, null)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_39 $$ expectedOutput.append(key2).append("\t").append(val2).append("\n")[ CD ]
Line_17 $$ Text key2 = new Text("key2")-->Line_39 $$ expectedOutput.append(key2).append("\t").append(val2).append("\n")[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_18 $$ Text val1 = new Text("val1")[ CD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_27 $$ theRecordWriter.write(key1, null)[ FD ]
Line_18 $$ Text val1 = new Text("val1")-->Line_34 $$ expectedOutput.append(key1).append("\t").append(val1).append("\n")[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_12 $$ String file = "test_compress.txt"[ CD ]
Line_16 $$ Text key1 = new Text("key1")-->Line_34 $$ expectedOutput.append(key1).append("\t").append(val1).append("\n")[ FD ]
Line_12 $$ String file = "test_compress.txt"-->Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_18 $$ Text val1 = new Text("val1")-->Line_24 $$ theRecordWriter.write(null, val1)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_36 $$ expectedOutput.append(val2).append("\n")[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_9 $$ if (!fs.mkdirs(workDir)) [ CD ]
Line_20 $$ NullWritable nullWritable = NullWritable.get()-->Line_25 $$ theRecordWriter.write(nullWritable, val2)[ FD ]
Line_16 $$ Text key1 = new Text("key1")-->Line_22 $$ theRecordWriter.write(key1, val1)[ FD ]
Line_16 $$ Text key1 = new Text("key1")-->Line_27 $$ theRecordWriter.write(key1, null)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_34 $$ expectedOutput.append(key1).append("\t").append(val1).append("\n")[ CD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_31 $$ theRecordWriter.close(reporter)[ FD ]
Line_13 $$ Reporter reporter = Reporter.NULL-->Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_33 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_39 $$ expectedOutput.append(key2).append("\t").append(val2).append("\n")[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_8 $$ FileSystem fs = workDir.getFileSystem(job)[ FD ]
Line_19 $$ Text val2 = new Text("val2")-->Line_29 $$ theRecordWriter.write(key2, val2)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_46 $$ String output = ""[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_53 $$ assertEquals(expectedOutput.toString(), output)[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_16 $$ Text key1 = new Text("key1")[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_42 $$ Path expectedFile = new Path(workDir, file + codec.getDefaultExtension())[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_45 $$ LineReader reader = new LineReader(cistream)[ CD ]
Line_33 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_36 $$ expectedOutput.append(val2).append("\n")[ FD ]
Line_33 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_34 $$ expectedOutput.append(key1).append("\t").append(val1).append("\n")[ FD ]
Line_42 $$ Path expectedFile = new Path(workDir, file + codec.getDefaultExtension())-->Line_43 $$ final FileInputStream istream = new FileInputStream(expectedFile.toString())[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_19 $$ Text val2 = new Text("val2")[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ CD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_22 $$ theRecordWriter.write(key1, val1)[ FD ]
Line_49 $$ output += out-->Line_53 $$ assertEquals(expectedOutput.toString(), output)[ FD ]
Line_48 $$ while (reader.readLine(out) > 0) -->Line_50 $$ output += "\n"[ CD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_29 $$ theRecordWriter.write(key2, val2)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_5 $$ job.set(org.apache.hadoop.mapreduce.lib.output.FileOutputFormat.COMPRESS, "true")[ FD ]
Line_13 $$ Reporter reporter = Reporter.NULL-->Line_31 $$ theRecordWriter.close(reporter)[ FD ]
Line_48 $$ while (reader.readLine(out) > 0) -->Line_49 $$ output += out[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_17 $$ Text key2 = new Text("key2")[ CD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_25 $$ theRecordWriter.write(nullWritable, val2)[ FD ]
Line_33 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_35 $$ expectedOutput.append(val1).append("\n")[ FD ]
Line_19 $$ Text val2 = new Text("val2")-->Line_25 $$ theRecordWriter.write(nullWritable, val2)[ FD ]
Line_17 $$ Text key2 = new Text("key2")-->Line_37 $$ expectedOutput.append(key2).append("\n")[ FD ]
Line_47 $$ Text out = new Text()-->Line_48 $$ while (reader.readLine(out) > 0) [ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_38 $$ expectedOutput.append(key1).append("\n")[ CD ]
Line_46 $$ String output = ""-->Line_49 $$ output += out[ FD ]
Line_45 $$ LineReader reader = new LineReader(cistream)-->Line_52 $$ reader.close()[ FD ]
Line_20 $$ NullWritable nullWritable = NullWritable.get()-->Line_23 $$ theRecordWriter.write(null, nullWritable)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_4 $$ job.set(JobContext.TASK_ATTEMPT_ID, attempt)[ FD ]
Line_19 $$ Text val2 = new Text("val2")-->Line_36 $$ expectedOutput.append(val2).append("\n")[ FD ]
Line_17 $$ Text key2 = new Text("key2")-->Line_26 $$ theRecordWriter.write(key2, nullWritable)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_6 $$ FileOutputFormat.setOutputPath(job, workDir.getParent().getParent())[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_8 $$ FileSystem fs = workDir.getFileSystem(job)[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_5 $$ job.set(org.apache.hadoop.mapreduce.lib.output.FileOutputFormat.COMPRESS, "true")[ CD ]
Line_18 $$ Text val1 = new Text("val1")-->Line_35 $$ expectedOutput.append(val1).append("\n")[ FD ]
Line_33 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_53 $$ assertEquals(expectedOutput.toString(), output)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_47 $$ Text out = new Text()[ CD ]
Line_49 $$ output += out-->Line_50 $$ output += "\n"[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_13 $$ Reporter reporter = Reporter.NULL[ CD ]
Line_14 $$ TextOutputFormat<Object, Object> theOutputFormat = new TextOutputFormat<Object, Object>()-->Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_33 $$ StringBuffer expectedOutput = new StringBuffer()[ CD ]
Line_18 $$ Text val1 = new Text("val1")-->Line_22 $$ theRecordWriter.write(key1, val1)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_20 $$ NullWritable nullWritable = NullWritable.get()[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_3 $$ JobConf job = new JobConf()[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_40 $$ DefaultCodec codec = new DefaultCodec()[ CD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_23 $$ theRecordWriter.write(null, nullWritable)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_41 $$ codec.setConf(job)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_6 $$ FileOutputFormat.setOutputPath(job, workDir.getParent().getParent())[ FD ]
Line_17 $$ Text key2 = new Text("key2")-->Line_29 $$ theRecordWriter.write(key2, val2)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_7 $$ FileOutputFormat.setWorkOutputPath(job, workDir)[ CD ]
Line_19 $$ Text val2 = new Text("val2")-->Line_39 $$ expectedOutput.append(key2).append("\t").append(val2).append("\n")[ FD ]
Line_16 $$ Text key1 = new Text("key1")-->Line_38 $$ expectedOutput.append(key1).append("\n")[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_14 $$ TextOutputFormat<Object, Object> theOutputFormat = new TextOutputFormat<Object, Object>()[ CD ]
Line_9 $$ if (!fs.mkdirs(workDir)) -->Line_10 $$ fail("Failed to create output directory")[ CD ]
Line_46 $$ String output = ""-->Line_53 $$ assertEquals(expectedOutput.toString(), output)[ FD ]
Line_45 $$ LineReader reader = new LineReader(cistream)-->Line_48 $$ while (reader.readLine(out) > 0) [ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_48 $$ while (reader.readLine(out) > 0) [ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_41 $$ codec.setConf(job)[ CD ]
Line_47 $$ Text out = new Text()-->Line_49 $$ output += out[ FD ]
Line_43 $$ final FileInputStream istream = new FileInputStream(expectedFile.toString())-->Line_44 $$ CompressionInputStream cistream = codec.createInputStream(istream)[ FD ]
Line_40 $$ DefaultCodec codec = new DefaultCodec()-->Line_44 $$ CompressionInputStream cistream = codec.createInputStream(istream)[ FD ]
Line_8 $$ FileSystem fs = workDir.getFileSystem(job)-->Line_9 $$ if (!fs.mkdirs(workDir)) [ FD ]
Line_33 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_37 $$ expectedOutput.append(key2).append("\n")[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_7 $$ FileOutputFormat.setWorkOutputPath(job, workDir)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_46 $$ String output = ""-->Line_50 $$ output += "\n"[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_35 $$ expectedOutput.append(val1).append("\n")[ CD ]
Line_40 $$ DefaultCodec codec = new DefaultCodec()-->Line_42 $$ Path expectedFile = new Path(workDir, file + codec.getDefaultExtension())[ FD ]
Line_33 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_38 $$ expectedOutput.append(key1).append("\n")[ FD ]
Line_50 $$ output += "\n"-->Line_53 $$ assertEquals(expectedOutput.toString(), output)[ FD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_26 $$ theRecordWriter.write(key2, nullWritable)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_4 $$ job.set(JobContext.TASK_ATTEMPT_ID, attempt)[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_52 $$ reader.close()[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_37 $$ expectedOutput.append(key2).append("\n")[ CD ]
Line_15 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_24 $$ theRecordWriter.write(null, val1)[ FD ]
Line_2 $$ public void testCompress() throws IOException -->Line_44 $$ CompressionInputStream cistream = codec.createInputStream(istream)[ CD ]
Line_2 $$ public void testCompress() throws IOException -->Line_43 $$ final FileInputStream istream = new FileInputStream(expectedFile.toString())[ CD ]
Line_40 $$ DefaultCodec codec = new DefaultCodec()-->Line_41 $$ codec.setConf(job)[ FD ]
