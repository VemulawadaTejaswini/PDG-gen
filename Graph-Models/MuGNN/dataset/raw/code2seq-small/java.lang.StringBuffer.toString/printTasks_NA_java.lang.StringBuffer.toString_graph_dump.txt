Line_12 $$ StringBuffer taskList = new StringBuffer()-->Line_19 $$ taskList.append("\t").append(task.getError())[ FD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_5 $$ header.append("\n").append(status).append(" ")[ FD ]
Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) -->Line_20 $$ if (TaskType.MAP.equals(taskType)) [ CD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_6 $$ header.append(taskType).append(" task list for ").append(jobId)[ CD ]
Line_13 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) -->Line_19 $$ taskList.append("\t").append(task.getError())[ FD ]
Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) -->Line_15 $$ taskList.setLength(0)[ CD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_20 $$ if (TaskType.MAP.equals(taskType)) [ FD ]
Line_13 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) -->Line_21 $$ taskList.append("\t").append(task.getSplitLocations())[ FD ]
Line_23 $$ if (taskList != null) -->Line_25 $$ System.out.println(taskList.toString())[ CD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_8 $$ if (TaskType.MAP.equals(taskType)) [ FD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) [ FD ]
Line_12 $$ StringBuffer taskList = new StringBuffer()-->Line_18 $$ taskList.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, task.getFinishTime(), task.getStartTime()))[ FD ]
Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) -->Line_19 $$ taskList.append("\t").append(task.getError())[ CD ]
Line_3 $$ Map<TaskID, JobHistoryParser.TaskInfo> tasks = job.getAllTasks()-->Line_13 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) [ FD ]
Line_4 $$ StringBuffer header = new StringBuffer()-->Line_5 $$ header.append("\n").append(status).append(" ")[ FD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_11 $$ header.append("\n====================================================")[ CD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_4 $$ StringBuffer header = new StringBuffer()[ CD ]
Line_13 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) -->Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) [ FD ]
Line_13 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) -->Line_16 $$ taskList.append(task.getTaskId())[ FD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_8 $$ if (TaskType.MAP.equals(taskType)) [ CD ]
Line_12 $$ StringBuffer taskList = new StringBuffer()-->Line_15 $$ taskList.setLength(0)[ FD ]
Line_4 $$ StringBuffer header = new StringBuffer()-->Line_6 $$ header.append(taskType).append(" task list for ").append(jobId)[ FD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_7 $$ header.append("\nTaskId\t\tStartTime\tFinishTime\tError")[ CD ]
Line_4 $$ StringBuffer header = new StringBuffer()-->Line_11 $$ header.append("\n====================================================")[ FD ]
Line_12 $$ StringBuffer taskList = new StringBuffer()-->Line_23 $$ if (taskList != null) [ FD ]
Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) -->Line_18 $$ taskList.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, task.getFinishTime(), task.getStartTime()))[ CD ]
Line_13 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) -->Line_17 $$ taskList.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, task.getStartTime(), 0))[ FD ]
Line_8 $$ if (TaskType.MAP.equals(taskType)) -->Line_9 $$ header.append("\tInputSplits")[ CD ]
Line_20 $$ if (TaskType.MAP.equals(taskType)) -->Line_21 $$ taskList.append("\t").append(task.getSplitLocations())[ CD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_6 $$ header.append(taskType).append(" task list for ").append(jobId)[ FD ]
Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) -->Line_16 $$ taskList.append(task.getTaskId())[ CD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_5 $$ header.append("\n").append(status).append(" ")[ CD ]
Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) -->Line_17 $$ taskList.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, task.getStartTime(), 0))[ CD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_12 $$ StringBuffer taskList = new StringBuffer()[ CD ]
Line_12 $$ StringBuffer taskList = new StringBuffer()-->Line_16 $$ taskList.append(task.getTaskId())[ FD ]
Line_12 $$ StringBuffer taskList = new StringBuffer()-->Line_17 $$ taskList.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, task.getStartTime(), 0))[ FD ]
Line_2 $$ private void printTasks(TaskType taskType, String status) -->Line_3 $$ Map<TaskID, JobHistoryParser.TaskInfo> tasks = job.getAllTasks()[ CD ]
Line_4 $$ StringBuffer header = new StringBuffer()-->Line_9 $$ header.append("\tInputSplits")[ FD ]
Line_14 $$ if (taskType.equals(task.getTaskType()) && (status.equals(task.getTaskStatus()) || status.equalsIgnoreCase("ALL"))) -->Line_23 $$ if (taskList != null) [ CD ]
Line_12 $$ StringBuffer taskList = new StringBuffer()-->Line_21 $$ taskList.append("\t").append(task.getSplitLocations())[ FD ]
Line_12 $$ StringBuffer taskList = new StringBuffer()-->Line_25 $$ System.out.println(taskList.toString())[ FD ]
Line_4 $$ StringBuffer header = new StringBuffer()-->Line_7 $$ header.append("\nTaskId\t\tStartTime\tFinishTime\tError")[ FD ]
Line_13 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) -->Line_18 $$ taskList.append("\t").append(StringUtils.getFormattedTimeWithDiff(dateFormat, task.getFinishTime(), task.getStartTime()))[ FD ]
Line_23 $$ if (taskList != null) -->Line_24 $$ System.out.println(header.toString())[ CD ]
Line_4 $$ StringBuffer header = new StringBuffer()-->Line_24 $$ System.out.println(header.toString())[ FD ]
