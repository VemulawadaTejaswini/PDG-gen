Line_2 $$ public void testCommitter() throws Exception -->Line_5 $$ JobContext jContext = new JobContextImpl(job, taskID.getJobID())[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_24 $$ expectedOutput.append(key2).append("\n")[ CD ]
Line_20 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_22 $$ expectedOutput.append(val1).append("\n")[ FD ]
Line_7 $$ FileOutputCommitter committer = new FileOutputCommitter()-->Line_8 $$ FileOutputFormat.setWorkOutputPath(job, committer.getTaskAttemptPath(tContext))[ FD ]
Line_20 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_24 $$ expectedOutput.append(key2).append("\n")[ FD ]
Line_20 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_28 $$ assertEquals(output, expectedOutput.toString())[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_19 $$ File expectedFile = new File(new Path(outDir, file).toString())[ CD ]
Line_20 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_25 $$ expectedOutput.append(key1).append("\n")[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_13 $$ FileSystem localFs = FileSystem.getLocal(job)[ FD ]
Line_20 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_21 $$ expectedOutput.append(key1).append('\t').append(val1).append("\n")[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_26 $$ expectedOutput.append(key2).append('\t').append(val2).append("\n")[ CD ]
Line_5 $$ JobContext jContext = new JobContextImpl(job, taskID.getJobID())-->Line_9 $$ committer.setupJob(jContext)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_28 $$ assertEquals(output, expectedOutput.toString())[ CD ]
Line_27 $$ String output = UtilsForTests.slurp(expectedFile)-->Line_28 $$ assertEquals(output, expectedOutput.toString())[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_14 $$ TextOutputFormat theOutputFormat = new TextOutputFormat()[ CD ]
Line_7 $$ FileOutputCommitter committer = new FileOutputCommitter()-->Line_18 $$ committer.commitJob(jContext)[ FD ]
Line_5 $$ JobContext jContext = new JobContextImpl(job, taskID.getJobID())-->Line_18 $$ committer.commitJob(jContext)[ FD ]
Line_20 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_26 $$ expectedOutput.append(key2).append('\t').append(val2).append("\n")[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_10 $$ committer.setupTask(tContext)[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_11 $$ String file = "test.txt"[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_8 $$ FileOutputFormat.setWorkOutputPath(job, committer.getTaskAttemptPath(tContext))[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_6 $$ TaskAttemptContext tContext = new TaskAttemptContextImpl(job, taskID)[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_12 $$ Reporter reporter = Reporter.NULL[ CD ]
Line_7 $$ FileOutputCommitter committer = new FileOutputCommitter()-->Line_17 $$ committer.commitTask(tContext)[ FD ]
Line_6 $$ TaskAttemptContext tContext = new TaskAttemptContextImpl(job, taskID)-->Line_17 $$ committer.commitTask(tContext)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_9 $$ committer.setupJob(jContext)[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_16 $$ writeOutput(theRecordWriter, reporter)[ CD ]
Line_12 $$ Reporter reporter = Reporter.NULL-->Line_15 $$ RecordWriter theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_15 $$ RecordWriter theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ CD ]
Line_7 $$ FileOutputCommitter committer = new FileOutputCommitter()-->Line_10 $$ committer.setupTask(tContext)[ FD ]
Line_12 $$ Reporter reporter = Reporter.NULL-->Line_16 $$ writeOutput(theRecordWriter, reporter)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_29 $$ FileUtil.fullyDelete(new File(outDir.toString()))[ CD ]
Line_6 $$ TaskAttemptContext tContext = new TaskAttemptContextImpl(job, taskID)-->Line_10 $$ committer.setupTask(tContext)[ FD ]
Line_7 $$ FileOutputCommitter committer = new FileOutputCommitter()-->Line_9 $$ committer.setupJob(jContext)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_13 $$ FileSystem localFs = FileSystem.getLocal(job)[ CD ]
Line_14 $$ TextOutputFormat theOutputFormat = new TextOutputFormat()-->Line_15 $$ RecordWriter theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_15 $$ RecordWriter theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_16 $$ writeOutput(theRecordWriter, reporter)[ FD ]
Line_11 $$ String file = "test.txt"-->Line_15 $$ RecordWriter theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_6 $$ TaskAttemptContext tContext = new TaskAttemptContextImpl(job, taskID)-->Line_8 $$ FileOutputFormat.setWorkOutputPath(job, committer.getTaskAttemptPath(tContext))[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_20 $$ StringBuffer expectedOutput = new StringBuffer()[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_25 $$ expectedOutput.append(key1).append("\n")[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_27 $$ String output = UtilsForTests.slurp(expectedFile)[ CD ]
Line_20 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_23 $$ expectedOutput.append(val2).append("\n")[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_4 $$ setConfForFileOutputCommitter(job)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_22 $$ expectedOutput.append(val1).append("\n")[ CD ]
Line_19 $$ File expectedFile = new File(new Path(outDir, file).toString())-->Line_27 $$ String output = UtilsForTests.slurp(expectedFile)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_17 $$ committer.commitTask(tContext)[ CD ]
Line_13 $$ FileSystem localFs = FileSystem.getLocal(job)-->Line_15 $$ RecordWriter theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_18 $$ committer.commitJob(jContext)[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_15 $$ RecordWriter theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_4 $$ setConfForFileOutputCommitter(job)[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_3 $$ JobConf job = new JobConf()[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_8 $$ FileOutputFormat.setWorkOutputPath(job, committer.getTaskAttemptPath(tContext))[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_21 $$ expectedOutput.append(key1).append('\t').append(val1).append("\n")[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_23 $$ expectedOutput.append(val2).append("\n")[ CD ]
Line_2 $$ public void testCommitter() throws Exception -->Line_7 $$ FileOutputCommitter committer = new FileOutputCommitter()[ CD ]
