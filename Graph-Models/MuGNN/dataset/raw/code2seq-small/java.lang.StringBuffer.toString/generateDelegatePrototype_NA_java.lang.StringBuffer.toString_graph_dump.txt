Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_62 $$ final PsiClass targetClass = ((PsiMember) target).getContainingClass()[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_68 $$ return new PsiGenerationInfo<PsiMethod>(method)[ CD ]
Line_18 $$ final String name = field.getName()-->Line_26 $$ call.append(name)[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_39 $$ call.append(method.getName())[ CD ]
Line_15 $$ if (isMethodStatic) -->Line_26 $$ call.append(name)[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_12 $$ if (target instanceof PsiField) [ FD ]
Line_12 $$ if (target instanceof PsiField) -->Line_28 $$ call.append(".")[ CD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_40 $$ call.append("(")[ FD ]
Line_32 $$ if (isMethodStatic) -->Line_33 $$ call.append(methodCandidate.getContainingClass().getQualifiedName()).append(".")[ CD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_49 $$ final PsiManager psiManager = method.getManager()[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_41 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_48 $$ call.append(");")[ CD ]
Line_8 $$ if (!PsiType.VOID.equals(method.getReturnType())) -->Line_9 $$ call.append("return ")[ CD ]
Line_58 $$ if (isMethodStatic || modifierList != null && modifierList.hasModifierProperty(PsiModifier.STATIC)) -->Line_59 $$ PsiUtil.setModifierProperty(method, PsiModifier.STATIC, true)[ CD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_33 $$ call.append(methodCandidate.getContainingClass().getQualifiedName()).append(".")[ FD ]
Line_20 $$ for (PsiParameter parameter : parameters) -->Line_46 $$ call.append(parameter.getName())[ FD ]
Line_50 $$ PsiStatement stmt = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createStatementFromText(call.toString(), method)-->Line_52 $$ method.getBody().add(stmt)[ FD ]
Line_29 $$ if (target instanceof PsiMethod) -->Line_30 $$ PsiMethod m = (PsiMethod) target[ CD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_66 $$ OverrideImplementUtil.annotateOnOverrideImplement(method, targetClass, overridden)[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_40 $$ call.append("(")[ CD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_16 $$ call.append(methodCandidate.getContainingClass().getQualifiedName())[ FD ]
Line_53 $$ for (PsiAnnotation annotation : methodCandidate.getElement().getModifierList().getAnnotations()) -->Line_56 $$ method.getModifierList().add(annotation.copy())[ FD ]
Line_42 $$ for (int j = 0; j < parameters.length; j++) -->Line_43 $$ PsiParameter parameter = parameters[j][ CD ]
Line_65 $$ if (overridden != null && overridden.getContainingClass() != targetClass) -->Line_66 $$ OverrideImplementUtil.annotateOnOverrideImplement(method, targetClass, overridden)[ CD ]
Line_32 $$ if (isMethodStatic) -->Line_36 $$ call.append("().")[ CD ]
Line_62 $$ final PsiClass targetClass = ((PsiMember) target).getContainingClass()-->Line_64 $$ PsiMethod overridden = targetClass.findMethodBySignature(method, true)[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_11 $$ boolean isMethodStatic = methodCandidate.getElement().hasModifierProperty(PsiModifier.STATIC)[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_64 $$ PsiMethod overridden = targetClass.findMethodBySignature(method, true)[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_11 $$ boolean isMethodStatic = methodCandidate.getElement().hasModifierProperty(PsiModifier.STATIC)[ CD ]
Line_64 $$ PsiMethod overridden = targetClass.findMethodBySignature(method, true)-->Line_65 $$ if (overridden != null && overridden.getContainingClass() != targetClass) [ FD ]
Line_15 $$ if (isMethodStatic) -->Line_19 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ CD ]
Line_12 $$ if (target instanceof PsiField) -->Line_13 $$ PsiField field = (PsiField) target[ CD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_39 $$ call.append(method.getName())[ FD ]
Line_13 $$ PsiField field = (PsiField) target-->Line_18 $$ final String name = field.getName()[ FD ]
Line_21 $$ if (name.equals(parameter.getName())) -->Line_22 $$ call.append("this.")[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_7 $$ PsiModifierList modifierList = null[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_29 $$ if (target instanceof PsiMethod) [ FD ]
Line_7 $$ PsiModifierList modifierList = null-->Line_14 $$ modifierList = field.getModifierList()[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_6 $$ StringBuffer call = new StringBuffer()[ CD ]
Line_31 $$ modifierList = m.getModifierList()-->Line_58 $$ if (isMethodStatic || modifierList != null && modifierList.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_50 $$ PsiStatement stmt = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createStatementFromText(call.toString(), method)[ CD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_61 $$ PsiUtil.setModifierProperty(method, PsiModifier.PUBLIC, true)[ FD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_50 $$ PsiStatement stmt = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createStatementFromText(call.toString(), method)[ FD ]
Line_30 $$ PsiMethod m = (PsiMethod) target-->Line_31 $$ modifierList = m.getModifierList()[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_61 $$ PsiUtil.setModifierProperty(method, PsiModifier.PUBLIC, true)[ CD ]
Line_49 $$ final PsiManager psiManager = method.getManager()-->Line_51 $$ stmt = (PsiStatement) CodeStyleManager.getInstance(psiManager.getProject()).reformat(stmt)[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_35 $$ call.append(m.getName())[ FD ]
Line_7 $$ PsiModifierList modifierList = null-->Line_31 $$ modifierList = m.getModifierList()[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_52 $$ method.getBody().add(stmt)[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_8 $$ if (!PsiType.VOID.equals(method.getReturnType())) [ CD ]
Line_42 $$ for (int j = 0; j < parameters.length; j++) -->Line_44 $$ if (j > 0)[ CD ]
Line_53 $$ for (PsiAnnotation annotation : methodCandidate.getElement().getModifierList().getAnnotations()) -->Line_54 $$ if (SuppressWarnings.class.getName().equals(annotation.getQualifiedName()))[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_49 $$ final PsiManager psiManager = method.getManager()[ CD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_9 $$ call.append("return ")[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_46 $$ call.append(parameter.getName())[ FD ]
Line_7 $$ PsiModifierList modifierList = null-->Line_58 $$ if (isMethodStatic || modifierList != null && modifierList.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_32 $$ if (isMethodStatic) -->Line_35 $$ call.append(m.getName())[ CD ]
Line_18 $$ final String name = field.getName()-->Line_21 $$ if (name.equals(parameter.getName())) [ FD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_56 $$ method.getModifierList().add(annotation.copy())[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_65 $$ if (overridden != null && overridden.getContainingClass() != targetClass) [ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_33 $$ call.append(methodCandidate.getContainingClass().getQualifiedName()).append(".")[ FD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_4 $$ clearMethod(method)[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_48 $$ call.append(");")[ FD ]
Line_49 $$ final PsiManager psiManager = method.getManager()-->Line_50 $$ PsiStatement stmt = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createStatementFromText(call.toString(), method)[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_39 $$ call.append(method.getName())[ FD ]
Line_12 $$ if (target instanceof PsiField) -->Line_29 $$ if (target instanceof PsiMethod) [ CD ]
Line_20 $$ for (PsiParameter parameter : parameters) -->Line_21 $$ if (name.equals(parameter.getName())) [ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_58 $$ if (isMethodStatic || modifierList != null && modifierList.hasModifierProperty(PsiModifier.STATIC)) [ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)[ CD ]
Line_29 $$ if (target instanceof PsiMethod) -->Line_31 $$ modifierList = m.getModifierList()[ CD ]
Line_62 $$ final PsiClass targetClass = ((PsiMember) target).getContainingClass()-->Line_66 $$ OverrideImplementUtil.annotateOnOverrideImplement(method, targetClass, overridden)[ FD ]
Line_50 $$ PsiStatement stmt = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createStatementFromText(call.toString(), method)-->Line_51 $$ stmt = (PsiStatement) CodeStyleManager.getInstance(psiManager.getProject()).reformat(stmt)[ FD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_8 $$ if (!PsiType.VOID.equals(method.getReturnType())) [ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_4 $$ clearMethod(method)[ CD ]
Line_42 $$ for (int j = 0; j < parameters.length; j++) -->Line_46 $$ call.append(parameter.getName())[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_53 $$ for (PsiAnnotation annotation : methodCandidate.getElement().getModifierList().getAnnotations()) [ FD ]
Line_30 $$ PsiMethod m = (PsiMethod) target-->Line_35 $$ call.append(m.getName())[ FD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_59 $$ PsiUtil.setModifierProperty(method, PsiModifier.STATIC, true)[ FD ]
Line_42 $$ for (int j = 0; j < parameters.length; j++) -->Line_44 $$ if (j > 0)[ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_63 $$ LOG.assertTrue(targetClass != null)[ CD ]
Line_29 $$ if (target instanceof PsiMethod) -->Line_32 $$ if (isMethodStatic) [ CD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_41 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ FD ]
Line_43 $$ PsiParameter parameter = parameters[j]-->Line_46 $$ call.append(parameter.getName())[ FD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_64 $$ PsiMethod overridden = targetClass.findMethodBySignature(method, true)[ FD ]
Line_51 $$ stmt = (PsiStatement) CodeStyleManager.getInstance(psiManager.getProject()).reformat(stmt)-->Line_52 $$ method.getBody().add(stmt)[ FD ]
Line_13 $$ PsiField field = (PsiField) target-->Line_14 $$ modifierList = field.getModifierList()[ FD ]
Line_11 $$ boolean isMethodStatic = methodCandidate.getElement().hasModifierProperty(PsiModifier.STATIC)-->Line_58 $$ if (isMethodStatic || modifierList != null && modifierList.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_64 $$ PsiMethod overridden = targetClass.findMethodBySignature(method, true)-->Line_66 $$ OverrideImplementUtil.annotateOnOverrideImplement(method, targetClass, overridden)[ FD ]
Line_15 $$ if (isMethodStatic) -->Line_16 $$ call.append(methodCandidate.getContainingClass().getQualifiedName())[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_12 $$ if (target instanceof PsiField) [ CD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_5 $$ clearModifiers(method)[ FD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_19 $$ final PsiParameter[] parameters = method.getParameterList().getParameters()[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_36 $$ call.append("().")[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_22 $$ call.append("this.")[ FD ]
Line_14 $$ modifierList = field.getModifierList()-->Line_31 $$ modifierList = m.getModifierList()[ FD ]
Line_3 $$ PsiMethod method = GenerateMembersUtil.substituteGenericMethod(methodCandidate.getElement(), methodCandidate.getSubstitutor(), target)-->Line_52 $$ method.getBody().add(stmt)[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_45 $$ call.append(",")[ FD ]
Line_14 $$ modifierList = field.getModifierList()-->Line_58 $$ if (isMethodStatic || modifierList != null && modifierList.hasModifierProperty(PsiModifier.STATIC)) [ FD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_5 $$ clearModifiers(method)[ CD ]
Line_12 $$ if (target instanceof PsiField) -->Line_14 $$ modifierList = field.getModifierList()[ CD ]
Line_12 $$ if (target instanceof PsiField) -->Line_15 $$ if (isMethodStatic) [ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_42 $$ for (int j = 0; j < parameters.length; j++) [ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_16 $$ call.append(methodCandidate.getContainingClass().getQualifiedName())[ FD ]
Line_15 $$ if (isMethodStatic) -->Line_18 $$ final String name = field.getName()[ CD ]
Line_2 $$ private PsiGenerationInfo<PsiMethod> generateDelegatePrototype(PsiMethodMember methodCandidate, PsiElement target) throws IncorrectOperationException -->Line_51 $$ stmt = (PsiStatement) CodeStyleManager.getInstance(psiManager.getProject()).reformat(stmt)[ CD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_26 $$ call.append(name)[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_50 $$ PsiStatement stmt = JavaPsiFacade.getInstance(psiManager.getProject()).getElementFactory().createStatementFromText(call.toString(), method)[ FD ]
Line_6 $$ StringBuffer call = new StringBuffer()-->Line_28 $$ call.append(".")[ FD ]
Line_44 $$ if (j > 0)-->Line_45 $$ call.append(",")[ CD ]
