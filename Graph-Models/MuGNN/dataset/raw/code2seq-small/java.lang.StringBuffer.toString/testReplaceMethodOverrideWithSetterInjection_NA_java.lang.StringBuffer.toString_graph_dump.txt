Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_19 $$ String str = "woierowijeiowiej"[ CD ]
Line_12 $$ TestBean notJenny = oom.getPrototypeDependency("someParam")-->Line_13 $$ assertTrue(!"Jenny".equals(notJenny.getName()))[ FD ]
Line_22 $$ String reverse = new StringBuffer(s).reverse().toString()-->Line_23 $$ assertEquals("Should have overridden to reverse, not echo", reverse, oom.replaceMe(s))[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_26 $$ DoSomethingReplacer dos = (DoSomethingReplacer) xbf.getBean("doSomethingReplacer")[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_14 $$ TestBean dave1 = oom.protectedOverrideSingleton()[ CD ]
Line_25 $$ OverrideOneMethodSubclass ooms = (OverrideOneMethodSubclass) xbf.getBean("replaceVoidMethod")-->Line_30 $$ ooms.doSomething(s1)[ FD ]
Line_25 $$ OverrideOneMethodSubclass ooms = (OverrideOneMethodSubclass) xbf.getBean("replaceVoidMethod")-->Line_32 $$ ooms.doSomething(s2)[ FD ]
Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")-->Line_9 $$ TestBean jenny2 = oom.getPrototypeDependency()[ FD ]
Line_29 $$ String s2 = "foo bar black sheep"-->Line_32 $$ ooms.doSomething(s2)[ FD ]
Line_28 $$ String s1 = ""-->Line_31 $$ assertEquals(s1, dos.lastArg)[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_25 $$ OverrideOneMethodSubclass ooms = (OverrideOneMethodSubclass) xbf.getBean("replaceVoidMethod")[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_16 $$ TestBean dave2 = oom.protectedOverrideSingleton()[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_11 $$ assertNotSame(jenny1, jenny2)[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_9 $$ TestBean jenny2 = oom.getPrototypeDependency()[ CD ]
Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")-->Line_24 $$ assertEquals("Should have overridden no-arg overloaded replaceMe method to return fixed value", FixedMethodReplacer.VALUE, oom.replaceMe())[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_29 $$ String s2 = "foo bar black sheep"[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_33 $$ assertEquals(s2, dos.lastArg)[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_5 $$ reader.loadBeanDefinitions(DELEGATION_OVERRIDES_CONTEXT)[ CD ]
Line_7 $$ TestBean jenny1 = oom.getPrototypeDependency()-->Line_8 $$ assertEquals("Jenny", jenny1.getName())[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_24 $$ assertEquals("Should have overridden no-arg overloaded replaceMe method to return fixed value", FixedMethodReplacer.VALUE, oom.replaceMe())[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_7 $$ TestBean jenny1 = oom.getPrototypeDependency()[ CD ]
Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")-->Line_23 $$ assertEquals("Should have overridden to reverse, not echo", reverse, oom.replaceMe(s))[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_22 $$ String reverse = new StringBuffer(s).reverse().toString()[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_21 $$ String s = "this is not a palindrome"[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_31 $$ assertEquals(s1, dos.lastArg)[ CD ]
Line_14 $$ TestBean dave1 = oom.protectedOverrideSingleton()-->Line_15 $$ assertEquals("David", dave1.getName())[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_26 $$ DoSomethingReplacer dos = (DoSomethingReplacer) xbf.getBean("doSomethingReplacer")[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_18 $$ assertSame(dave1, dave2)[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_28 $$ String s1 = ""[ CD ]
Line_7 $$ TestBean jenny1 = oom.getPrototypeDependency()-->Line_11 $$ assertNotSame(jenny1, jenny2)[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_20 $$ assertEquals(str, oom.echo(str))[ CD ]
Line_14 $$ TestBean dave1 = oom.protectedOverrideSingleton()-->Line_18 $$ assertSame(dave1, dave2)[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_12 $$ TestBean notJenny = oom.getPrototypeDependency("someParam")[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_13 $$ assertTrue(!"Jenny".equals(notJenny.getName()))[ CD ]
Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")-->Line_20 $$ assertEquals(str, oom.echo(str))[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_23 $$ assertEquals("Should have overridden to reverse, not echo", reverse, oom.replaceMe(s))[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_27 $$ assertEquals(null, dos.lastArg)[ CD ]
Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")-->Line_12 $$ TestBean notJenny = oom.getPrototypeDependency("someParam")[ FD ]
Line_9 $$ TestBean jenny2 = oom.getPrototypeDependency()-->Line_11 $$ assertNotSame(jenny1, jenny2)[ FD ]
Line_21 $$ String s = "this is not a palindrome"-->Line_23 $$ assertEquals("Should have overridden to reverse, not echo", reverse, oom.replaceMe(s))[ FD ]
Line_16 $$ TestBean dave2 = oom.protectedOverrideSingleton()-->Line_17 $$ assertEquals("David", dave2.getName())[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")[ FD ]
Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")-->Line_7 $$ TestBean jenny1 = oom.getPrototypeDependency()[ FD ]
Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")-->Line_16 $$ TestBean dave2 = oom.protectedOverrideSingleton()[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_25 $$ OverrideOneMethodSubclass ooms = (OverrideOneMethodSubclass) xbf.getBean("replaceVoidMethod")[ FD ]
Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)-->Line_5 $$ reader.loadBeanDefinitions(DELEGATION_OVERRIDES_CONTEXT)[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_8 $$ assertEquals("Jenny", jenny1.getName())[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_17 $$ assertEquals("David", dave2.getName())[ CD ]
Line_28 $$ String s1 = ""-->Line_30 $$ ooms.doSomething(s1)[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_15 $$ assertEquals("David", dave1.getName())[ CD ]
Line_9 $$ TestBean jenny2 = oom.getPrototypeDependency()-->Line_10 $$ assertEquals("Jenny", jenny2.getName())[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")[ CD ]
Line_19 $$ String str = "woierowijeiowiej"-->Line_20 $$ assertEquals(str, oom.echo(str))[ FD ]
Line_16 $$ TestBean dave2 = oom.protectedOverrideSingleton()-->Line_18 $$ assertSame(dave1, dave2)[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_32 $$ ooms.doSomething(s2)[ CD ]
Line_29 $$ String s2 = "foo bar black sheep"-->Line_33 $$ assertEquals(s2, dos.lastArg)[ FD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_30 $$ ooms.doSomething(s1)[ CD ]
Line_2 $$ public void testReplaceMethodOverrideWithSetterInjection() -->Line_10 $$ assertEquals("Jenny", jenny2.getName())[ CD ]
Line_6 $$ OverrideOneMethod oom = (OverrideOneMethod) xbf.getBean("overrideOneMethod")-->Line_14 $$ TestBean dave1 = oom.protectedOverrideSingleton()[ FD ]
