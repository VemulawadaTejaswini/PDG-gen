Line_41 $$ value = next.substring(1, next.length()).trim()-->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_62 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(inserted)[ FD ]
Line_22 $$ for (PsiMethod attribute : annotationClass.getMethods()) -->Line_33 $$ if (!key.equals(attribute.getName()))[ FD ]
Line_41 $$ value = next.substring(1, next.length()).trim()-->Line_53 $$ annotationText.append(value)[ FD ]
Line_32 $$ final String key = equals == -1 ? text : text.substring(0, equals).trim()-->Line_35 $$ annotationText.append(key).append(" = ")[ FD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_33 $$ if (!key.equals(attribute.getName()))[ CD ]
Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()-->Line_63 $$ final PsiDocComment docComment = PsiTreeUtil.getParentOfType(tag, PsiDocComment.class)[ FD ]
Line_72 $$ if (docToken.getTokenType() == JavaDocTokenType.DOC_COMMENT_DATA && docToken.getText().trim().length() > 0) -->Line_73 $$ return[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_4 $$ if (!TestNGUtil.checkTestNGInClasspath(tag))[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_10 $$ if (dash > -1) [ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_18 $$ if (dataElements.length > 1) [ CD ]
Line_31 $$ String value-->Line_39 $$ value = dataElements[++i].getText().trim()[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_13 $$ annotationName = "org.testng.annotations." + annotationName[ CD ]
Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()-->Line_8 $$ String annotationName = StringUtil.capitalize(tag.getName().substring(TESTNG_PREFIX.length()))[ FD ]
Line_36 $$ if (equals == -1) -->Line_37 $$ String next = dataElements[++i].getText().trim()[ CD ]
Line_14 $$ final StringBuffer annotationText = new StringBuffer("@")-->Line_35 $$ annotationText.append(key).append(" = ")[ FD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_32 $$ final String key = equals == -1 ? text : text.substring(0, equals).trim()[ CD ]
Line_41 $$ value = next.substring(1, next.length()).trim()-->Line_47 $$ value = dataElements[++i].getText().trim()[ FD ]
Line_39 $$ value = dataElements[++i].getText().trim()-->Line_47 $$ value = dataElements[++i].getText().trim()[ FD ]
Line_29 $$ String text = dataElements[i].getText()-->Line_30 $$ int equals = text.indexOf('=')[ FD ]
Line_39 $$ value = dataElements[++i].getText().trim()-->Line_51 $$ value = value.substring(1, value.length() - 1)[ FD ]
Line_30 $$ int equals = text.indexOf('=')-->Line_36 $$ if (equals == -1) [ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_16 $$ final PsiClass annotationClass = JavaPsiFacade.getInstance(member.getProject()).findClass(annotationName, member.getResolveScope())[ CD ]
Line_14 $$ final StringBuffer annotationText = new StringBuffer("@")-->Line_15 $$ annotationText.append(annotationName)[ FD ]
Line_31 $$ String value-->Line_47 $$ value = dataElements[++i].getText().trim()[ FD ]
Line_39 $$ value = dataElements[++i].getText().trim()-->Line_41 $$ value = next.substring(1, next.length()).trim()[ FD ]
Line_26 $$ stripQuotes = true-->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ FD ]
Line_38 $$ if (next.length() == 1) -->Line_39 $$ value = dataElements[++i].getText().trim()[ CD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_29 $$ String text = dataElements[i].getText()[ CD ]
Line_25 $$ if (returnType instanceof PsiPrimitiveType) -->Line_26 $$ stripQuotes = true[ CD ]
Line_8 $$ String annotationName = StringUtil.capitalize(tag.getName().substring(TESTNG_PREFIX.length()))-->Line_16 $$ final PsiClass annotationClass = JavaPsiFacade.getInstance(member.getProject()).findClass(annotationName, member.getResolveScope())[ FD ]
Line_8 $$ String annotationName = StringUtil.capitalize(tag.getName().substring(TESTNG_PREFIX.length()))-->Line_9 $$ int dash = annotationName.indexOf('-')[ FD ]
Line_38 $$ if (next.length() == 1) -->Line_41 $$ value = next.substring(1, next.length()).trim()[ CD ]
Line_30 $$ int equals = text.indexOf('=')-->Line_32 $$ final String key = equals == -1 ? text : text.substring(0, equals).trim()[ FD ]
Line_32 $$ final String key = equals == -1 ? text : text.substring(0, equals).trim()-->Line_33 $$ if (!key.equals(attribute.getName()))[ FD ]
Line_41 $$ value = next.substring(1, next.length()).trim()-->Line_45 $$ value = text.substring(equals + 1, text.length()).trim()[ FD ]
Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()-->Line_61 $$ final PsiElement inserted = member.getModifierList().addBefore(JavaPsiFacade.getInstance(tag.getProject()).getElementFactory().createAnnotationFromText(annotationText.toString(), member), member.getModifierList().getFirstChild())[ FD ]
Line_36 $$ if (equals == -1) -->Line_38 $$ if (next.length() == 1) [ CD ]
Line_14 $$ final StringBuffer annotationText = new StringBuffer("@")-->Line_61 $$ final PsiElement inserted = member.getModifierList().addBefore(JavaPsiFacade.getInstance(tag.getProject()).getElementFactory().createAnnotationFromText(annotationText.toString(), member), member.getModifierList().getFirstChild())[ FD ]
Line_45 $$ value = text.substring(equals + 1, text.length()).trim()-->Line_53 $$ annotationText.append(value)[ FD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_53 $$ annotationText.append(value)[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_21 $$ if (annotationClass != null) [ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_14 $$ final StringBuffer annotationText = new StringBuffer("@")[ CD ]
Line_29 $$ String text = dataElements[i].getText()-->Line_44 $$ if (equals < text.length() - 1) [ FD ]
Line_71 $$ PsiDocToken docToken = (PsiDocToken) element-->Line_72 $$ if (docToken.getTokenType() == JavaDocTokenType.DOC_COMMENT_DATA && docToken.getText().trim().length() > 0) [ FD ]
Line_45 $$ value = text.substring(equals + 1, text.length()).trim()-->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ FD ]
Line_69 $$ if (!(element instanceof PsiDocToken))-->Line_70 $$ return[ CD ]
Line_22 $$ for (PsiMethod attribute : annotationClass.getMethods()) -->Line_24 $$ PsiType returnType = attribute.getReturnType()[ FD ]
Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()-->Line_6 $$ final PsiMember member = PsiTreeUtil.getParentOfType(tag, PsiMember.class)[ FD ]
Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') -->Line_51 $$ value = value.substring(1, value.length() - 1)[ CD ]
Line_4 $$ if (!TestNGUtil.checkTestNGInClasspath(tag))-->Line_5 $$ return[ CD ]
Line_23 $$ boolean stripQuotes = false-->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ FD ]
Line_8 $$ String annotationName = StringUtil.capitalize(tag.getName().substring(TESTNG_PREFIX.length()))-->Line_13 $$ annotationName = "org.testng.annotations." + annotationName[ FD ]
Line_39 $$ value = dataElements[++i].getText().trim()-->Line_53 $$ annotationText.append(value)[ FD ]
Line_6 $$ final PsiMember member = PsiTreeUtil.getParentOfType(tag, PsiMember.class)-->Line_16 $$ final PsiClass annotationClass = JavaPsiFacade.getInstance(member.getProject()).findClass(annotationName, member.getResolveScope())[ FD ]
Line_51 $$ value = value.substring(1, value.length() - 1)-->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ FD ]
Line_45 $$ value = text.substring(equals + 1, text.length()).trim()-->Line_47 $$ value = dataElements[++i].getText().trim()[ FD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_47 $$ value = dataElements[++i].getText().trim()[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_15 $$ annotationText.append(annotationName)[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_8 $$ String annotationName = StringUtil.capitalize(tag.getName().substring(TESTNG_PREFIX.length()))[ CD ]
Line_11 $$ annotationName = annotationName.substring(0, dash) + Character.toUpperCase(annotationName.charAt(dash + 1)) + annotationName.substring(dash + 2)-->Line_13 $$ annotationName = "org.testng.annotations." + annotationName[ FD ]
Line_9 $$ int dash = annotationName.indexOf('-')-->Line_11 $$ annotationName = annotationName.substring(0, dash) + Character.toUpperCase(annotationName.charAt(dash + 1)) + annotationName.substring(dash + 2)[ FD ]
Line_39 $$ value = dataElements[++i].getText().trim()-->Line_45 $$ value = text.substring(equals + 1, text.length()).trim()[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_9 $$ int dash = annotationName.indexOf('-')[ CD ]
Line_45 $$ value = text.substring(equals + 1, text.length()).trim()-->Line_51 $$ value = value.substring(1, value.length() - 1)[ FD ]
Line_51 $$ value = value.substring(1, value.length() - 1)-->Line_53 $$ annotationText.append(value)[ FD ]
Line_30 $$ int equals = text.indexOf('=')-->Line_44 $$ if (equals < text.length() - 1) [ FD ]
Line_31 $$ String value-->Line_41 $$ value = next.substring(1, next.length()).trim()[ FD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_30 $$ int equals = text.indexOf('=')[ CD ]
Line_44 $$ if (equals < text.length() - 1) -->Line_47 $$ value = dataElements[++i].getText().trim()[ CD ]
Line_37 $$ String next = dataElements[++i].getText().trim()-->Line_41 $$ value = next.substring(1, next.length()).trim()[ FD ]
Line_37 $$ String next = dataElements[++i].getText().trim()-->Line_38 $$ if (next.length() == 1) [ FD ]
Line_66 $$ for (PsiElement element : docComment.getChildren()) -->Line_67 $$ if (element instanceof PsiWhiteSpace)[ FD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ CD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_39 $$ value = dataElements[++i].getText().trim()[ FD ]
Line_11 $$ annotationName = annotationName.substring(0, dash) + Character.toUpperCase(annotationName.charAt(dash + 1)) + annotationName.substring(dash + 2)-->Line_15 $$ annotationText.append(annotationName)[ FD ]
Line_36 $$ if (equals == -1) -->Line_44 $$ if (equals < text.length() - 1) [ CD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_36 $$ if (equals == -1) [ CD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_31 $$ String value[ CD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_7 $$ LOG.assertTrue(member != null)[ CD ]
Line_14 $$ final StringBuffer annotationText = new StringBuffer("@")-->Line_19 $$ annotationText.append('(')[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_78 $$ Messages.showErrorDialog(project, e.getMessage(), CommonBundle.getErrorTitle())[ FD ]
Line_16 $$ final PsiClass annotationClass = JavaPsiFacade.getInstance(member.getProject()).findClass(annotationName, member.getResolveScope())-->Line_21 $$ if (annotationClass != null) [ FD ]
Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()-->Line_4 $$ if (!TestNGUtil.checkTestNGInClasspath(tag))[ FD ]
Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()-->Line_17 $$ PsiElement[] dataElements = tag.getDataElements()[ FD ]
Line_14 $$ final StringBuffer annotationText = new StringBuffer("@")-->Line_53 $$ annotationText.append(value)[ FD ]
Line_16 $$ final PsiClass annotationClass = JavaPsiFacade.getInstance(member.getProject()).findClass(annotationName, member.getResolveScope())-->Line_22 $$ for (PsiMethod attribute : annotationClass.getMethods()) [ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()[ CD ]
Line_31 $$ String value-->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ FD ]
Line_44 $$ if (equals < text.length() - 1) -->Line_45 $$ value = text.substring(equals + 1, text.length()).trim()[ CD ]
Line_63 $$ final PsiDocComment docComment = PsiTreeUtil.getParentOfType(tag, PsiDocComment.class)-->Line_66 $$ for (PsiElement element : docComment.getChildren()) [ FD ]
Line_47 $$ value = dataElements[++i].getText().trim()-->Line_51 $$ value = value.substring(1, value.length() - 1)[ FD ]
Line_31 $$ String value-->Line_51 $$ value = value.substring(1, value.length() - 1)[ FD ]
Line_41 $$ value = next.substring(1, next.length()).trim()-->Line_51 $$ value = value.substring(1, value.length() - 1)[ FD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_35 $$ annotationText.append(key).append(" = ")[ CD ]
Line_18 $$ if (dataElements.length > 1) -->Line_19 $$ annotationText.append('(')[ CD ]
Line_14 $$ final StringBuffer annotationText = new StringBuffer("@")-->Line_58 $$ annotationText.append(')')[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_17 $$ PsiElement[] dataElements = tag.getDataElements()[ CD ]
Line_31 $$ String value-->Line_45 $$ value = text.substring(equals + 1, text.length()).trim()[ FD ]
Line_10 $$ if (dash > -1) -->Line_11 $$ annotationName = annotationName.substring(0, dash) + Character.toUpperCase(annotationName.charAt(dash + 1)) + annotationName.substring(dash + 2)[ CD ]
Line_29 $$ String text = dataElements[i].getText()-->Line_45 $$ value = text.substring(equals + 1, text.length()).trim()[ FD ]
Line_29 $$ String text = dataElements[i].getText()-->Line_32 $$ final String key = equals == -1 ? text : text.substring(0, equals).trim()[ FD ]
Line_39 $$ value = dataElements[++i].getText().trim()-->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ FD ]
Line_11 $$ annotationName = annotationName.substring(0, dash) + Character.toUpperCase(annotationName.charAt(dash + 1)) + annotationName.substring(dash + 2)-->Line_16 $$ final PsiClass annotationClass = JavaPsiFacade.getInstance(member.getProject()).findClass(annotationName, member.getResolveScope())[ FD ]
Line_31 $$ String value-->Line_53 $$ annotationText.append(value)[ FD ]
Line_47 $$ value = dataElements[++i].getText().trim()-->Line_53 $$ annotationText.append(value)[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_6 $$ final PsiMember member = PsiTreeUtil.getParentOfType(tag, PsiMember.class)[ CD ]
Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()-->Line_65 $$ tag.delete()[ FD ]
Line_47 $$ value = dataElements[++i].getText().trim()-->Line_50 $$ if (stripQuotes && value.charAt(0) == '\"') [ FD ]
Line_13 $$ annotationName = "org.testng.annotations." + annotationName-->Line_15 $$ annotationText.append(annotationName)[ FD ]
Line_13 $$ annotationName = "org.testng.annotations." + annotationName-->Line_16 $$ final PsiClass annotationClass = JavaPsiFacade.getInstance(member.getProject()).findClass(annotationName, member.getResolveScope())[ FD ]
Line_24 $$ PsiType returnType = attribute.getReturnType()-->Line_25 $$ if (returnType instanceof PsiPrimitiveType) [ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_3 $$ final PsiDocTag tag = (PsiDocTag) descriptor.getPsiElement()[ FD ]
Line_8 $$ String annotationName = StringUtil.capitalize(tag.getName().substring(TESTNG_PREFIX.length()))-->Line_11 $$ annotationName = annotationName.substring(0, dash) + Character.toUpperCase(annotationName.charAt(dash + 1)) + annotationName.substring(dash + 2)[ FD ]
Line_9 $$ int dash = annotationName.indexOf('-')-->Line_10 $$ if (dash > -1) [ FD ]
Line_61 $$ final PsiElement inserted = member.getModifierList().addBefore(JavaPsiFacade.getInstance(tag.getProject()).getElementFactory().createAnnotationFromText(annotationText.toString(), member), member.getModifierList().getFirstChild())-->Line_62 $$ JavaCodeStyleManager.getInstance(project).shortenClassReferences(inserted)[ FD ]
Line_2 $$ public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_57 $$ if (dataElements.length > 1) [ CD ]
Line_63 $$ final PsiDocComment docComment = PsiTreeUtil.getParentOfType(tag, PsiDocComment.class)-->Line_76 $$ docComment.delete()[ FD ]
Line_23 $$ boolean stripQuotes = false-->Line_26 $$ stripQuotes = true[ FD ]
Line_6 $$ final PsiMember member = PsiTreeUtil.getParentOfType(tag, PsiMember.class)-->Line_61 $$ final PsiElement inserted = member.getModifierList().addBefore(JavaPsiFacade.getInstance(tag.getProject()).getElementFactory().createAnnotationFromText(annotationText.toString(), member), member.getModifierList().getFirstChild())[ FD ]
Line_57 $$ if (dataElements.length > 1) -->Line_58 $$ annotationText.append(')')[ CD ]
Line_8 $$ String annotationName = StringUtil.capitalize(tag.getName().substring(TESTNG_PREFIX.length()))-->Line_15 $$ annotationText.append(annotationName)[ FD ]
Line_28 $$ for (int i = 0; i < dataElements.length; i++) -->Line_37 $$ String next = dataElements[++i].getText().trim()[ FD ]
