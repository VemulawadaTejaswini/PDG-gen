Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_22 $$ resultingWords.append(calculateBetween(wordIndicies, propertyWords.length, propertyName))[ FD ]
Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_10 $$ resultingWords.append(calculateBetween(wordIndicies, i, propertyName))[ FD ]
Line_4 $$ int currentWord = 0-->Line_16 $$ currentWord = last + 1[ FD ]
Line_18 $$ for (; currentWord < propertyWords.length; currentWord++) -->Line_19 $$ resultingWords.append(calculateBetween(wordIndicies, currentWord, propertyName))[ CD ]
Line_9 $$ for (int i = currentWord; i < first; i++) -->Line_12 $$ appendWord(resultingWords, propertyWord)[ CD ]
Line_8 $$ final int last = entry.getKey().getSecond().intValue()-->Line_16 $$ currentWord = last + 1[ FD ]
Line_6 $$ for (final Map.Entry<Pair<Integer, Integer>, String> entry : replacements.entrySet()) -->Line_15 $$ appendWord(resultingWords, entry.getValue())[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_19 $$ resultingWords.append(calculateBetween(wordIndicies, currentWord, propertyName))[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_5 $$ final Pair<int[], int[]> wordIndicies = calculateWordPositions(propertyName, propertyWords)[ FD ]
Line_4 $$ int currentWord = 0-->Line_19 $$ resultingWords.append(calculateBetween(wordIndicies, currentWord, propertyName))[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_4 $$ int currentWord = 0[ CD ]
Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_20 $$ appendWord(resultingWords, propertyWords[currentWord])[ FD ]
Line_7 $$ final int first = entry.getKey().getFirst().intValue()-->Line_14 $$ resultingWords.append(calculateBetween(wordIndicies, first, propertyName))[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_5 $$ final Pair<int[], int[]> wordIndicies = calculateWordPositions(propertyName, propertyWords)[ CD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_18 $$ for (; currentWord < propertyWords.length; currentWord++) [ CD ]
Line_5 $$ final Pair<int[], int[]> wordIndicies = calculateWordPositions(propertyName, propertyWords)-->Line_19 $$ resultingWords.append(calculateBetween(wordIndicies, currentWord, propertyName))[ FD ]
Line_9 $$ for (int i = currentWord; i < first; i++) -->Line_11 $$ final String propertyWord = propertyWords[i][ CD ]
Line_9 $$ for (int i = currentWord; i < first; i++) -->Line_10 $$ resultingWords.append(calculateBetween(wordIndicies, i, propertyName))[ FD ]
Line_4 $$ int currentWord = 0-->Line_18 $$ for (; currentWord < propertyWords.length; currentWord++) [ FD ]
Line_9 $$ for (int i = currentWord; i < first; i++) -->Line_10 $$ resultingWords.append(calculateBetween(wordIndicies, i, propertyName))[ CD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_22 $$ resultingWords.append(calculateBetween(wordIndicies, propertyWords.length, propertyName))[ FD ]
Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_12 $$ appendWord(resultingWords, propertyWord)[ FD ]
Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_23 $$ if (resultingWords.length() == 0)[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_14 $$ resultingWords.append(calculateBetween(wordIndicies, first, propertyName))[ FD ]
Line_16 $$ currentWord = last + 1-->Line_19 $$ resultingWords.append(calculateBetween(wordIndicies, currentWord, propertyName))[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_3 $$ StringBuffer resultingWords = new StringBuffer()[ CD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_22 $$ resultingWords.append(calculateBetween(wordIndicies, propertyWords.length, propertyName))[ CD ]
Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_15 $$ appendWord(resultingWords, entry.getValue())[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_25 $$ return decapitalizeProbably(resultingWords.toString(), propertyName)[ CD ]
Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_19 $$ resultingWords.append(calculateBetween(wordIndicies, currentWord, propertyName))[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_25 $$ return decapitalizeProbably(resultingWords.toString(), propertyName)[ FD ]
Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_14 $$ resultingWords.append(calculateBetween(wordIndicies, first, propertyName))[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_23 $$ if (resultingWords.length() == 0)[ CD ]
Line_7 $$ final int first = entry.getKey().getFirst().intValue()-->Line_9 $$ for (int i = currentWord; i < first; i++) [ FD ]
Line_5 $$ final Pair<int[], int[]> wordIndicies = calculateWordPositions(propertyName, propertyWords)-->Line_10 $$ resultingWords.append(calculateBetween(wordIndicies, i, propertyName))[ FD ]
Line_6 $$ for (final Map.Entry<Pair<Integer, Integer>, String> entry : replacements.entrySet()) -->Line_7 $$ final int first = entry.getKey().getFirst().intValue()[ FD ]
Line_5 $$ final Pair<int[], int[]> wordIndicies = calculateWordPositions(propertyName, propertyWords)-->Line_14 $$ resultingWords.append(calculateBetween(wordIndicies, first, propertyName))[ FD ]
Line_3 $$ StringBuffer resultingWords = new StringBuffer()-->Line_25 $$ return decapitalizeProbably(resultingWords.toString(), propertyName)[ FD ]
Line_11 $$ final String propertyWord = propertyWords[i]-->Line_12 $$ appendWord(resultingWords, propertyWord)[ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_10 $$ resultingWords.append(calculateBetween(wordIndicies, i, propertyName))[ FD ]
Line_23 $$ if (resultingWords.length() == 0)-->Line_24 $$ return propertyName[ CD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_6 $$ for (final Map.Entry<Pair<Integer, Integer>, String> entry : replacements.entrySet()) [ FD ]
Line_5 $$ final Pair<int[], int[]> wordIndicies = calculateWordPositions(propertyName, propertyWords)-->Line_22 $$ resultingWords.append(calculateBetween(wordIndicies, propertyWords.length, propertyName))[ FD ]
Line_16 $$ currentWord = last + 1-->Line_18 $$ for (; currentWord < propertyWords.length; currentWord++) [ FD ]
Line_2 $$ private static String calculateNewName(TreeMap<Pair<Integer, Integer>, String> replacements, final String[] propertyWords, String propertyName) -->Line_23 $$ if (resultingWords.length() == 0)[ FD ]
Line_6 $$ for (final Map.Entry<Pair<Integer, Integer>, String> entry : replacements.entrySet()) -->Line_8 $$ final int last = entry.getKey().getSecond().intValue()[ FD ]
Line_18 $$ for (; currentWord < propertyWords.length; currentWord++) -->Line_20 $$ appendWord(resultingWords, propertyWords[currentWord])[ CD ]
