Line_2 $$ public static void main(String[] args) -->Line_73 $$ south.add(hide)[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_147 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 5").setActions(new DefaultActionGroup(), null)[ FD ]
Line_105 $$ hide1.addActionListener(new ActionListener() -->Line_107 $$ toAnimate1.setHidden(!toAnimate1.isHidden())[ CD ]
Line_96 $$ if (attract1.isSelected()) -->Line_97 $$ toAnimate1.fireAlert()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_126 $$ refire.addActionListener(new ActionListener() [ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_13 $$ south.setBackground(Color.white)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_31 $$ south.add(bb)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_155 $$ tabs.setGhostsAlwaysVisible(true)[ CD ]
Line_5 $$ final JFrame frame = new JFrame()-->Line_10 $$ frame.getContentPane().add(tabs.getComponent(), BorderLayout.CENTER)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_33 $$ f.addItemListener(new ItemListener() [ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_70 $$ tabs.setHideTabs(hide.isSelected())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_47 $$ row.addItemListener(new ItemListener() [ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_131 $$ south.add(refire)[ FD ]
Line_5 $$ final JFrame frame = new JFrame()-->Line_74 $$ frame.getContentPane().add(south, BorderLayout.SOUTH)[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_154 $$ tabs.getPresentation().setActiveTabFillIn(Color.white)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_142 $$ tabs.addTab(toAnimate1).append("Tree2", new SimpleTextAttributes(SimpleTextAttributes.STYLE_WAVED, Color.black, Color.red))[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_35 $$ tabs.setFocused(f.isSelected())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_26 $$ bb.addItemListener(new ItemListener() [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_16 $$ south.add(pos)[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_145 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 3").setActions(new DefaultActionGroup(), null)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_124 $$ south.add(fill)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_94 $$ attract1.addActionListener(new ActionListener() [ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_56 $$ tabs.setGhostsAlwaysVisible(ghosts.isSelected())[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_21 $$ tabs.getPresentation().setTabsPosition(p)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_9 $$ tabs.setTestMode(true)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_61 $$ stealth.addItemListener(new ItemListener() [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())[ CD ]
Line_80 $$ final JTree someTree = new Tree() -->Line_87 $$ super.removeNotify()[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_152 $$ tabs.setTabSidePaintBorder(5)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_52 $$ south.add(row)[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_10 $$ frame.getContentPane().add(tabs.getComponent(), BorderLayout.CENTER)[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_49 $$ tabs.setSingleRow(row.isSelected())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_59 $$ south.add(ghosts)[ CD ]
Line_80 $$ final JTree someTree = new Tree() -->Line_83 $$ System.out.println("JBTabs.addNotify")[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_66 $$ south.add(stealth)[ FD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_110 $$ south.add(hide1)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_164 $$ frame.show()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_141 $$ tabs.addTab(new TabInfo(ScrollPaneFactory.createScrollPane(text)).setSideComponent(tb)).setText("Text text text")[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_146 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 4").setActions(new DefaultActionGroup(), null)[ FD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_117 $$ south.add(block)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_117 $$ south.add(block)[ CD ]
Line_75 $$ tabs.addListener(new TabsListener.Adapter() -->Line_77 $$ System.out.println("TabsWithActions.selectionChanged old=" + oldSelection + " new=" + newSelection)[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_155 $$ tabs.setGhostsAlwaysVisible(true)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_90 $$ tabs.addTab(new TabInfo(someTree)).setText("Tree1").setActions(new DefaultActionGroup(), null).setIcon(AllIcons.Debugger.Frame)[ CD ]
Line_19 $$ final JBTabsPosition p = (JBTabsPosition) pos.getSelectedItem()-->Line_20 $$ if (p != null) [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_7 $$ final int[] count = new int[1][ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_162 $$ tabs.setStealthTabMode(true)[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_75 $$ tabs.addListener(new TabsListener.Adapter() [ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_42 $$ tabs.setSideComponentVertical(v.isSelected())[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_150 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 8").setActions(new DefaultActionGroup(), null)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_133 $$ text.setEditorKit(new HTMLEditorKit())[ CD ]
Line_26 $$ bb.addItemListener(new ItemListener() -->Line_28 $$ tabs.setUseBufferedPaint(bb.isSelected())[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_45 $$ south.add(v)[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_60 $$ final JCheckBox stealth = new JCheckBox("Stealth tab", tabs.isStealthTabMode())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_112 $$ block.addActionListener(new ActionListener() [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_54 $$ ghosts.addItemListener(new ItemListener() [ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_90 $$ tabs.addTab(new TabInfo(someTree)).setText("Tree1").setActions(new DefaultActionGroup(), null).setIcon(AllIcons.Debugger.Frame)[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_157 $$ tabs.setUiDecorator(new UiDecorator() [ FD ]
Line_19 $$ final JBTabsPosition p = (JBTabsPosition) pos.getSelectedItem()-->Line_21 $$ tabs.getPresentation().setTabsPosition(p)[ FD ]
Line_17 $$ pos.addActionListener(new ActionListener() -->Line_20 $$ if (p != null) [ CD ]
Line_17 $$ pos.addActionListener(new ActionListener() -->Line_19 $$ final JBTabsPosition p = (JBTabsPosition) pos.getSelectedItem()[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_121 $$ tabs.getPresentation().setActiveTabFillIn(fill.isSelected() ? Color.white : null)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_45 $$ south.add(v)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_40 $$ v.addItemListener(new ItemListener() [ CD ]
Line_80 $$ final JTree someTree = new Tree() -->Line_82 $$ super.addNotify()[ CD ]
Line_54 $$ ghosts.addItemListener(new ItemListener() -->Line_56 $$ tabs.setGhostsAlwaysVisible(ghosts.isSelected())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_147 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 5").setActions(new DefaultActionGroup(), null)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_156 $$ tabs.setBorder(new EmptyBorder(30, 30, 30, 30))[ CD ]
Line_40 $$ v.addItemListener(new ItemListener() -->Line_42 $$ tabs.setSideComponentVertical(v.isSelected())[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_149 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 7").setActions(new DefaultActionGroup(), null)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_163 $$ frame.setBounds(1400, 200, 1000, 800)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_162 $$ tabs.setStealthTabMode(true)[ CD ]
Line_61 $$ stealth.addItemListener(new ItemListener() -->Line_63 $$ tabs.setStealthTabMode(stealth.isSelected())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_135 $$ for (int i = 0; i < 50; i++) [ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_143 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 1").setActions(new DefaultActionGroup(), null)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_75 $$ tabs.addListener(new TabsListener.Adapter() [ CD ]
Line_5 $$ final JFrame frame = new JFrame()-->Line_163 $$ frame.setBounds(1400, 200, 1000, 800)[ FD ]
Line_157 $$ tabs.setUiDecorator(new UiDecorator() -->Line_159 $$ return new UiDecoration(null, new Insets(0, -1, 0, -1))[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_151 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 9").setActions(new DefaultActionGroup(), null)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_119 $$ fill.addActionListener(new ActionListener() [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_66 $$ south.add(stealth)[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_142 $$ tabs.addTab(toAnimate1).append("Tree2", new SimpleTextAttributes(SimpleTextAttributes.STYLE_WAVED, Color.black, Color.red))[ FD ]
Line_135 $$ for (int i = 0; i < 50; i++) -->Line_136 $$ buffer.append("1234567890abcdefghijklmnopqrstv1234567890abcdefghijklmnopqrstv1234567890abcdefghijklmnopqrstv<br>")[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_16 $$ south.add(pos)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_11 $$ JPanel south = new JPanel(new FlowLayout())[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_153 $$ tabs.setPaintBorder(1, 1, 1, 1)[ FD ]
Line_112 $$ block.addActionListener(new ActionListener() -->Line_114 $$ tabs.setPaintBlocked(!block.isSelected(), true)[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_28 $$ tabs.setUseBufferedPaint(bb.isSelected())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_146 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 4").setActions(new DefaultActionGroup(), null)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_148 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 6").setActions(new DefaultActionGroup(), null)[ CD ]
Line_68 $$ hide.addItemListener(new ItemListener() -->Line_70 $$ tabs.setHideTabs(hide.isSelected())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_38 $$ south.add(f)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_74 $$ frame.getContentPane().add(south, BorderLayout.SOUTH)[ CD ]
Line_94 $$ attract1.addActionListener(new ActionListener() -->Line_96 $$ if (attract1.isSelected()) [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_144 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 2").setActions(new DefaultActionGroup(), null)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_154 $$ tabs.getPresentation().setActiveTabFillIn(Color.white)[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_12 $$ south.setOpaque(true)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_14 $$ final JComboBox pos = new JComboBox(new Object[] [ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_124 $$ south.add(fill)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_152 $$ tabs.setTabSidePaintBorder(5)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_17 $$ pos.addActionListener(new ActionListener() [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_140 $$ tb.setBorder(new LineBorder(Color.red))[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_9 $$ tabs.setTestMode(true)[ FD ]
Line_20 $$ if (p != null) -->Line_21 $$ tabs.getPresentation().setTabsPosition(p)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_105 $$ hide1.addActionListener(new ActionListener() [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_10 $$ frame.getContentPane().add(tabs.getComponent(), BorderLayout.CENTER)[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_38 $$ south.add(f)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_6 $$ frame.getContentPane().setLayout(new BorderLayout(0, 0))[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_156 $$ tabs.setBorder(new EmptyBorder(30, 30, 30, 30))[ FD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_52 $$ south.add(row)[ FD ]
Line_80 $$ final JTree someTree = new Tree() -->Line_86 $$ System.out.println("JBTabs.removeNotify")[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_103 $$ south.add(attract1)[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_114 $$ tabs.setPaintBlocked(!block.isSelected(), true)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_4 $$ IconLoader.activate()[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_31 $$ south.add(bb)[ FD ]
Line_14 $$ final JComboBox pos = new JComboBox(new Object[] -->Line_17 $$ pos.addActionListener(new ActionListener() [ FD ]
Line_2 $$ public static void main(String[] args) -->Line_13 $$ south.setBackground(Color.white)[ CD ]
Line_14 $$ final JComboBox pos = new JComboBox(new Object[] -->Line_15 $$ pos.setSelectedIndex(0)[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_141 $$ tabs.addTab(new TabInfo(ScrollPaneFactory.createScrollPane(text)).setSideComponent(tb)).setText("Text text text")[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_67 $$ final JCheckBox hide = new JCheckBox("Hide tabs", tabs.isHideTabs())[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_138 $$ text.setText(buffer.toString())[ CD ]
Line_5 $$ final JFrame frame = new JFrame()-->Line_164 $$ frame.show()[ FD ]
Line_96 $$ if (attract1.isSelected()) -->Line_99 $$ toAnimate1.stopAlerting()[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_74 $$ frame.getContentPane().add(south, BorderLayout.SOUTH)[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_151 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 9").setActions(new DefaultActionGroup(), null)[ FD ]
Line_126 $$ refire.addActionListener(new ActionListener() -->Line_128 $$ toAnimate1.fireAlert()[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_73 $$ south.add(hide)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_157 $$ tabs.setUiDecorator(new UiDecorator() [ CD ]
Line_2 $$ public static void main(String[] args) -->Line_3 $$ System.out.println("JBTabs.main")[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_144 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 2").setActions(new DefaultActionGroup(), null)[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_149 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 7").setActions(new DefaultActionGroup(), null)[ CD ]
Line_14 $$ final JComboBox pos = new JComboBox(new Object[] -->Line_19 $$ final JBTabsPosition p = (JBTabsPosition) pos.getSelectedItem()[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_143 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 1").setActions(new DefaultActionGroup(), null)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_12 $$ south.setOpaque(true)[ CD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_63 $$ tabs.setStealthTabMode(stealth.isSelected())[ FD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_103 $$ south.add(attract1)[ FD ]
Line_14 $$ final JComboBox pos = new JComboBox(new Object[] -->Line_16 $$ south.add(pos)[ FD ]
Line_119 $$ fill.addActionListener(new ActionListener() -->Line_121 $$ tabs.getPresentation().setActiveTabFillIn(fill.isSelected() ? Color.white : null)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_153 $$ tabs.setPaintBorder(1, 1, 1, 1)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_110 $$ south.add(hide1)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_5 $$ final JFrame frame = new JFrame()[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_150 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 8").setActions(new DefaultActionGroup(), null)[ CD ]
Line_33 $$ f.addItemListener(new ItemListener() -->Line_35 $$ tabs.setFocused(f.isSelected())[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_131 $$ south.add(refire)[ CD ]
Line_47 $$ row.addItemListener(new ItemListener() -->Line_49 $$ tabs.setSingleRow(row.isSelected())[ CD ]
Line_11 $$ JPanel south = new JPanel(new FlowLayout())-->Line_59 $$ south.add(ghosts)[ FD ]
Line_8 $$ final JBTabsImpl tabs = new JBTabsImpl(null, ActionManager.getInstance(), null, Disposer.newDisposable())-->Line_148 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 6").setActions(new DefaultActionGroup(), null)[ FD ]
Line_5 $$ final JFrame frame = new JFrame()-->Line_6 $$ frame.getContentPane().setLayout(new BorderLayout(0, 0))[ FD ]
Line_2 $$ public static void main(String[] args) -->Line_145 $$ tabs.addTab(new TabInfo(new JTable())).setText("Table 3").setActions(new DefaultActionGroup(), null)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_15 $$ pos.setSelectedIndex(0)[ CD ]
Line_2 $$ public static void main(String[] args) -->Line_68 $$ hide.addItemListener(new ItemListener() [ CD ]
