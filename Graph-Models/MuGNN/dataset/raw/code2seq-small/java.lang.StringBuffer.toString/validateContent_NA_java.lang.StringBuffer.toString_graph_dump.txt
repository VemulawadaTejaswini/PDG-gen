Line_5 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_13 $$ assertEquals(output, expectedOutput.toString())[ FD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_9 $$ expectedOutput.append(key2).append("\n")[ CD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_6 $$ expectedOutput.append(key1).append('\t').append(val1).append("\n")[ CD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_8 $$ expectedOutput.append(val2).append("\n")[ CD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_11 $$ expectedOutput.append(key2).append('\t').append(val2).append("\n")[ CD ]
Line_5 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_6 $$ expectedOutput.append(key1).append('\t').append(val1).append("\n")[ FD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_10 $$ expectedOutput.append(key1).append("\n")[ CD ]
Line_5 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_11 $$ expectedOutput.append(key2).append('\t').append(val2).append("\n")[ FD ]
Line_5 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_7 $$ expectedOutput.append(val1).append("\n")[ FD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_13 $$ assertEquals(output, expectedOutput.toString())[ CD ]
Line_5 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_8 $$ expectedOutput.append(val2).append("\n")[ FD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_7 $$ expectedOutput.append(val1).append("\n")[ CD ]
Line_3 $$ File expectedFile = new File(dir, partFile)-->Line_12 $$ String output = slurp(expectedFile)[ FD ]
Line_3 $$ File expectedFile = new File(dir, partFile)-->Line_4 $$ assertTrue("Could not find " + expectedFile, expectedFile.exists())[ FD ]
Line_12 $$ String output = slurp(expectedFile)-->Line_13 $$ assertEquals(output, expectedOutput.toString())[ FD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_3 $$ File expectedFile = new File(dir, partFile)[ CD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_5 $$ StringBuffer expectedOutput = new StringBuffer()[ CD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_12 $$ String output = slurp(expectedFile)[ CD ]
Line_2 $$ private void validateContent(File dir) throws IOException -->Line_4 $$ assertTrue("Could not find " + expectedFile, expectedFile.exists())[ CD ]
Line_5 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_10 $$ expectedOutput.append(key1).append("\n")[ FD ]
Line_5 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_9 $$ expectedOutput.append(key2).append("\n")[ FD ]
