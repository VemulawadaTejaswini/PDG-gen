Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_10 $$ return sb.toString()[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_7 $$ sb.append(i == 0 ? StringUtil.decapitalize(word.trim()) : StringUtil.capitalize(word.trim()))[ FD ]
Line_2 $$ private static String joinWords(@NotNull List<String> stringList) -->Line_4 $$ for (int i = 0; i < stringList.size(); i++) [ CD ]
Line_4 $$ for (int i = 0; i < stringList.size(); i++) -->Line_6 $$ if (!StringUtil.isEmptyOrSpaces(word)) [ CD ]
Line_2 $$ private static String joinWords(@NotNull List<String> stringList) -->Line_5 $$ String word = stringList.get(i)[ FD ]
Line_2 $$ private static String joinWords(@NotNull List<String> stringList) -->Line_3 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_2 $$ private static String joinWords(@NotNull List<String> stringList) -->Line_4 $$ for (int i = 0; i < stringList.size(); i++) [ FD ]
Line_6 $$ if (!StringUtil.isEmptyOrSpaces(word)) -->Line_7 $$ sb.append(i == 0 ? StringUtil.decapitalize(word.trim()) : StringUtil.capitalize(word.trim()))[ CD ]
Line_5 $$ String word = stringList.get(i)-->Line_7 $$ sb.append(i == 0 ? StringUtil.decapitalize(word.trim()) : StringUtil.capitalize(word.trim()))[ FD ]
Line_4 $$ for (int i = 0; i < stringList.size(); i++) -->Line_5 $$ String word = stringList.get(i)[ FD ]
Line_5 $$ String word = stringList.get(i)-->Line_6 $$ if (!StringUtil.isEmptyOrSpaces(word)) [ FD ]
Line_4 $$ for (int i = 0; i < stringList.size(); i++) -->Line_5 $$ String word = stringList.get(i)[ CD ]
Line_2 $$ private static String joinWords(@NotNull List<String> stringList) -->Line_10 $$ return sb.toString()[ CD ]
