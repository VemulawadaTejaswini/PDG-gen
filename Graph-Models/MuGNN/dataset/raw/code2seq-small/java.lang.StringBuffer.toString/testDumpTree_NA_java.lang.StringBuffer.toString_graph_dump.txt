Line_2 $$ public void testDumpTree() throws Exception -->Line_4 $$ LOG.info("Original tree")[ CD ]
Line_10 $$ for (; (line = in.readLine()) != null; ) -->Line_14 $$ checkClassName(line)[ FD ]
Line_11 $$ line = line.trim()-->Line_13 $$ assertTrue("line=" + line, line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM) || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM))[ FD ]
Line_8 $$ String line = in.readLine()-->Line_10 $$ for (; (line = in.readLine()) != null; ) [ FD ]
Line_8 $$ String line = in.readLine()-->Line_14 $$ checkClassName(line)[ FD ]
Line_2 $$ public void testDumpTree() throws Exception -->Line_9 $$ checkClassName(line)[ CD ]
Line_10 $$ for (; (line = in.readLine()) != null; ) -->Line_12 $$ if (!line.isEmpty() && !line.contains("snapshot")) [ FD ]
Line_10 $$ for (; (line = in.readLine()) != null; ) -->Line_13 $$ assertTrue("line=" + line, line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM) || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM))[ FD ]
Line_2 $$ public void testDumpTree() throws Exception -->Line_10 $$ for (; (line = in.readLine()) != null; ) [ CD ]
Line_11 $$ line = line.trim()-->Line_14 $$ checkClassName(line)[ FD ]
Line_12 $$ if (!line.isEmpty() && !line.contains("snapshot")) -->Line_14 $$ checkClassName(line)[ CD ]
Line_5 $$ final StringBuffer b1 = root.dumpTreeRecursively()-->Line_7 $$ final BufferedReader in = new BufferedReader(new StringReader(b1.toString()))[ FD ]
Line_10 $$ for (; (line = in.readLine()) != null; ) -->Line_11 $$ line = line.trim()[ FD ]
Line_8 $$ String line = in.readLine()-->Line_9 $$ checkClassName(line)[ FD ]
Line_2 $$ public void testDumpTree() throws Exception -->Line_6 $$ System.out.println("b1=" + b1)[ CD ]
Line_8 $$ String line = in.readLine()-->Line_11 $$ line = line.trim()[ FD ]
Line_2 $$ public void testDumpTree() throws Exception -->Line_3 $$ final INode root = fsdir.getINode("/")[ CD ]
Line_12 $$ if (!line.isEmpty() && !line.contains("snapshot")) -->Line_13 $$ assertTrue("line=" + line, line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM) || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM))[ CD ]
Line_2 $$ public void testDumpTree() throws Exception -->Line_8 $$ String line = in.readLine()[ CD ]
Line_8 $$ String line = in.readLine()-->Line_12 $$ if (!line.isEmpty() && !line.contains("snapshot")) [ FD ]
Line_11 $$ line = line.trim()-->Line_12 $$ if (!line.isEmpty() && !line.contains("snapshot")) [ FD ]
Line_10 $$ for (; (line = in.readLine()) != null; ) -->Line_11 $$ line = line.trim()[ CD ]
Line_10 $$ for (; (line = in.readLine()) != null; ) -->Line_12 $$ if (!line.isEmpty() && !line.contains("snapshot")) [ CD ]
Line_8 $$ String line = in.readLine()-->Line_13 $$ assertTrue("line=" + line, line.startsWith(INodeDirectory.DUMPTREE_LAST_ITEM) || line.startsWith(INodeDirectory.DUMPTREE_EXCEPT_LAST_ITEM))[ FD ]
Line_2 $$ public void testDumpTree() throws Exception -->Line_5 $$ final StringBuffer b1 = root.dumpTreeRecursively()[ CD ]
Line_7 $$ final BufferedReader in = new BufferedReader(new StringReader(b1.toString()))-->Line_8 $$ String line = in.readLine()[ FD ]
Line_7 $$ final BufferedReader in = new BufferedReader(new StringReader(b1.toString()))-->Line_10 $$ for (; (line = in.readLine()) != null; ) [ FD ]
Line_3 $$ final INode root = fsdir.getINode("/")-->Line_5 $$ final StringBuffer b1 = root.dumpTreeRecursively()[ FD ]
Line_2 $$ public void testDumpTree() throws Exception -->Line_7 $$ final BufferedReader in = new BufferedReader(new StringReader(b1.toString()))[ CD ]
