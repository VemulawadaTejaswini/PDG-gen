Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_22 $$ assertEquals("finishTime wrong", ta.getFinishTime(), finishTime)[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_9 $$ WebServicesTestUtils.checkStringMatch("nodeHttpAddress", ta.getNodeHttpAddress(), nodeHttpAddress)[ CD ]
Line_14 $$ for (String diag : diagnosticsList) -->Line_15 $$ b.append(diag)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_6 $$ WebServicesTestUtils.checkStringMatch("type", ttype.toString(), type)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_10 $$ String expectDiag = ""[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_21 $$ assertEquals("startTime wrong", ta.getLaunchTime(), startTime)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_5 $$ WebServicesTestUtils.checkStringMatch("id", attemptId, id)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_6 $$ WebServicesTestUtils.checkStringMatch("type", ttype.toString(), type)[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_8 $$ WebServicesTestUtils.checkStringMatch("rack", ta.getNodeRackName(), rack)[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_7 $$ WebServicesTestUtils.checkStringMatch("state", ta.getState().toString(), state)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_4 $$ String attemptId = MRApps.toString(attid)[ CD ]
Line_12 $$ if (diagnosticsList != null && !diagnostics.isEmpty()) -->Line_13 $$ StringBuffer b = new StringBuffer()[ CD ]
Line_17 $$ expectDiag = b.toString()-->Line_19 $$ WebServicesTestUtils.checkStringMatch("diagnostics", expectDiag, diagnostics)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_7 $$ WebServicesTestUtils.checkStringMatch("state", ta.getState().toString(), state)[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_23 $$ assertEquals("elapsedTime wrong", finishTime - startTime, elapsedTime)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_20 $$ WebServicesTestUtils.checkStringMatch("assignedContainerId", ConverterUtils.toString(ta.getAssignedContainerID()), assignedContainerId)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_19 $$ WebServicesTestUtils.checkStringMatch("diagnostics", expectDiag, diagnostics)[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_9 $$ WebServicesTestUtils.checkStringMatch("nodeHttpAddress", ta.getNodeHttpAddress(), nodeHttpAddress)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_12 $$ if (diagnosticsList != null && !diagnostics.isEmpty()) [ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_24 $$ assertEquals("progress wrong", ta.getProgress() * 100, progress, 1e-3f)[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_20 $$ WebServicesTestUtils.checkStringMatch("assignedContainerId", ConverterUtils.toString(ta.getAssignedContainerID()), assignedContainerId)[ CD ]
Line_3 $$ TaskAttemptId attid = ta.getID()-->Line_4 $$ String attemptId = MRApps.toString(attid)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_3 $$ TaskAttemptId attid = ta.getID()[ FD ]
Line_12 $$ if (diagnosticsList != null && !diagnostics.isEmpty()) -->Line_17 $$ expectDiag = b.toString()[ CD ]
Line_4 $$ String attemptId = MRApps.toString(attid)-->Line_5 $$ WebServicesTestUtils.checkStringMatch("id", attemptId, id)[ FD ]
Line_10 $$ String expectDiag = ""-->Line_19 $$ WebServicesTestUtils.checkStringMatch("diagnostics", expectDiag, diagnostics)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_21 $$ assertEquals("startTime wrong", ta.getLaunchTime(), startTime)[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_24 $$ assertEquals("progress wrong", ta.getProgress() * 100, progress, 1e-3f)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_11 $$ List<String> diagnosticsList = ta.getDiagnostics()[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_19 $$ WebServicesTestUtils.checkStringMatch("diagnostics", expectDiag, diagnostics)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_8 $$ WebServicesTestUtils.checkStringMatch("rack", ta.getNodeRackName(), rack)[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_3 $$ TaskAttemptId attid = ta.getID()[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_5 $$ WebServicesTestUtils.checkStringMatch("id", attemptId, id)[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_12 $$ if (diagnosticsList != null && !diagnostics.isEmpty()) [ CD ]
Line_13 $$ StringBuffer b = new StringBuffer()-->Line_15 $$ b.append(diag)[ FD ]
Line_10 $$ String expectDiag = ""-->Line_17 $$ expectDiag = b.toString()[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_22 $$ assertEquals("finishTime wrong", ta.getFinishTime(), finishTime)[ FD ]
Line_13 $$ StringBuffer b = new StringBuffer()-->Line_17 $$ expectDiag = b.toString()[ FD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_11 $$ List<String> diagnosticsList = ta.getDiagnostics()[ CD ]
Line_2 $$ public void verifyTaskAttemptGeneric(TaskAttempt ta, TaskType ttype, String id, String state, String type, String rack, String nodeHttpAddress, String diagnostics, String assignedContainerId, long startTime, long finishTime, long elapsedTime, float progress) -->Line_23 $$ assertEquals("elapsedTime wrong", finishTime - startTime, elapsedTime)[ CD ]
