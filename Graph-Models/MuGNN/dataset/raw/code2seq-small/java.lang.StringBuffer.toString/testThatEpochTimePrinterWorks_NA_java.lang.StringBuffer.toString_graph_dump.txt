Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_8 $$ assertThat(buffer.toString(), endsWith(String.valueOf(now.getSecondOfMinute() % 10)))[ CD ]
Line_5 $$ Joda.EpochTimePrinter epochTimePrinter = new Joda.EpochTimePrinter(false)-->Line_6 $$ epochTimePrinter.printTo(buffer, now, Locale.ROOT)[ FD ]
Line_4 $$ LocalDateTime now = LocalDateTime.now()-->Line_11 $$ epochMilliSecondTimePrinter.printTo(buffer, now, Locale.ROOT)[ FD ]
Line_10 $$ Joda.EpochTimePrinter epochMilliSecondTimePrinter = new Joda.EpochTimePrinter(true)-->Line_11 $$ epochMilliSecondTimePrinter.printTo(buffer, now, Locale.ROOT)[ FD ]
Line_4 $$ LocalDateTime now = LocalDateTime.now()-->Line_6 $$ epochTimePrinter.printTo(buffer, now, Locale.ROOT)[ FD ]
Line_3 $$ StringBuffer buffer = new StringBuffer()-->Line_11 $$ epochMilliSecondTimePrinter.printTo(buffer, now, Locale.ROOT)[ FD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_3 $$ StringBuffer buffer = new StringBuffer()[ CD ]
Line_9 $$ buffer = new StringBuffer()-->Line_13 $$ assertThat(buffer.toString(), endsWith(String.valueOf(now.getMillisOfSecond())))[ FD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_6 $$ epochTimePrinter.printTo(buffer, now, Locale.ROOT)[ CD ]
Line_3 $$ StringBuffer buffer = new StringBuffer()-->Line_8 $$ assertThat(buffer.toString(), endsWith(String.valueOf(now.getSecondOfMinute() % 10)))[ FD ]
Line_3 $$ StringBuffer buffer = new StringBuffer()-->Line_6 $$ epochTimePrinter.printTo(buffer, now, Locale.ROOT)[ FD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_12 $$ assertThat(buffer.length(), is(13))[ CD ]
Line_3 $$ StringBuffer buffer = new StringBuffer()-->Line_7 $$ assertThat(buffer.length(), is(10))[ FD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_9 $$ buffer = new StringBuffer()[ CD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_4 $$ LocalDateTime now = LocalDateTime.now()[ CD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_10 $$ Joda.EpochTimePrinter epochMilliSecondTimePrinter = new Joda.EpochTimePrinter(true)[ CD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_7 $$ assertThat(buffer.length(), is(10))[ CD ]
Line_3 $$ StringBuffer buffer = new StringBuffer()-->Line_9 $$ buffer = new StringBuffer()[ FD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_13 $$ assertThat(buffer.toString(), endsWith(String.valueOf(now.getMillisOfSecond())))[ CD ]
Line_3 $$ StringBuffer buffer = new StringBuffer()-->Line_13 $$ assertThat(buffer.toString(), endsWith(String.valueOf(now.getMillisOfSecond())))[ FD ]
Line_4 $$ LocalDateTime now = LocalDateTime.now()-->Line_13 $$ assertThat(buffer.toString(), endsWith(String.valueOf(now.getMillisOfSecond())))[ FD ]
Line_9 $$ buffer = new StringBuffer()-->Line_12 $$ assertThat(buffer.length(), is(13))[ FD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_11 $$ epochMilliSecondTimePrinter.printTo(buffer, now, Locale.ROOT)[ CD ]
Line_9 $$ buffer = new StringBuffer()-->Line_11 $$ epochMilliSecondTimePrinter.printTo(buffer, now, Locale.ROOT)[ FD ]
Line_3 $$ StringBuffer buffer = new StringBuffer()-->Line_12 $$ assertThat(buffer.length(), is(13))[ FD ]
Line_4 $$ LocalDateTime now = LocalDateTime.now()-->Line_8 $$ assertThat(buffer.toString(), endsWith(String.valueOf(now.getSecondOfMinute() % 10)))[ FD ]
Line_2 $$ public void testThatEpochTimePrinterWorks() -->Line_5 $$ Joda.EpochTimePrinter epochTimePrinter = new Joda.EpochTimePrinter(false)[ CD ]
