Line_35 $$ if (values != null && values.length > 0) -->Line_59 $$ validate(packageFiles_)[ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_68 $$ outputFormatSpec_ = cmdLine.getOptionValue("outputformat")[ FD ]
Line_41 $$ Path path = new Path(file)-->Line_43 $$ String finalPath = path.makeQualified(localFs).toString()[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_23 $$ String[] values = cmdLine.getOptionValues("input")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_31 $$ comCmd_ = cmdLine.getOptionValue("combiner")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_34 $$ values = cmdLine.getOptionValues("file")[ FD ]
Line_37 $$ StringBuffer fileList = new StringBuffer()-->Line_44 $$ if (fileList.length() > 0) [ FD ]
Line_37 $$ StringBuffer fileList = new StringBuffer()-->Line_56 $$ tmpFiles = tmpFiles + "," + fileList[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_23 $$ String[] values = cmdLine.getOptionValues("input")[ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_29 $$ output_ = cmdLine.getOptionValue("output")[ FD ]
Line_61 $$ String fsName = cmdLine.getOptionValue("dfs")-->Line_64 $$ config_.set("fs.default.name", fsName)[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_32 $$ redCmd_ = cmdLine.getOptionValue("reducer")[ FD ]
Line_83 $$ if (null != caf && caf.length > 0) -->Line_84 $$ LOG.warn("-cacheFile option is deprecated, please use -files instead.")[ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_73 $$ reduceDebugSpec_ = cmdLine.getOptionValue("reducedebug")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_89 $$ String[] jobconf = cmdLine.getOptionValues("jobconf")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_97 $$ String[] cmd = cmdLine.getOptionValues("cmdenv")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_20 $$ verbose_ = cmdLine.hasOption("verbose")[ CD ]
Line_42 $$ FileSystem localFs = FileSystem.getLocal(config_)-->Line_43 $$ String finalPath = path.makeQualified(localFs).toString()[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_97 $$ String[] cmd = cmdLine.getOptionValues("cmdenv")[ FD ]
Line_37 $$ StringBuffer fileList = new StringBuffer()-->Line_47 $$ fileList.append(finalPath)[ FD ]
Line_62 $$ if (null != fsName) -->Line_64 $$ config_.set("fs.default.name", fsName)[ CD ]
Line_52 $$ String tmpFiles = config_.get("tmpfiles", "")-->Line_58 $$ config_.set("tmpfiles", tmpFiles)[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_21 $$ background_ = cmdLine.hasOption("background")[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_61 $$ String fsName = cmdLine.getOptionValue("dfs")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_16 $$ if (cmdLine.hasOption("help") || detailedUsage_) [ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_61 $$ String fsName = cmdLine.getOptionValue("dfs")[ FD ]
Line_35 $$ if (values != null && values.length > 0) -->Line_37 $$ StringBuffer fileList = new StringBuffer()[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_61 $$ String fsName = cmdLine.getOptionValue("dfs")[ CD ]
Line_37 $$ StringBuffer fileList = new StringBuffer()-->Line_54 $$ tmpFiles = fileList.toString()[ FD ]
Line_16 $$ if (cmdLine.hasOption("help") || detailedUsage_) -->Line_18 $$ return[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_11 $$ List<String> args = cmdLine.getArgList()[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_20 $$ verbose_ = cmdLine.hasOption("verbose")[ FD ]
Line_61 $$ String fsName = cmdLine.getOptionValue("dfs")-->Line_62 $$ if (null != fsName) [ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_70 $$ partitionerSpec_ = cmdLine.getOptionValue("partitioner")[ FD ]
Line_2 $$ void parseArgv() -->Line_3 $$ CommandLine cmdLine = null[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_10 $$ if (cmdLine != null) [ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_20 $$ verbose_ = cmdLine.hasOption("verbose")[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_75 $$ String[] car = cmdLine.getOptionValues("cacheArchive")[ FD ]
Line_43 $$ String finalPath = path.makeQualified(localFs).toString()-->Line_47 $$ fileList.append(finalPath)[ FD ]
Line_35 $$ if (values != null && values.length > 0) -->Line_36 $$ LOG.warn("-file option is deprecated, please use generic option" + " -files instead.")[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_5 $$ cmdLine = parser.parse(allOptions, argv_)[ FD ]
Line_90 $$ if (null != jobconf && jobconf.length > 0) -->Line_91 $$ LOG.warn("-jobconf option is deprecated, please use -D instead.")[ CD ]
Line_37 $$ StringBuffer fileList = new StringBuffer()-->Line_45 $$ fileList.append(',')[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_10 $$ if (cmdLine != null) [ FD ]
Line_10 $$ if (cmdLine != null) -->Line_76 $$ if (null != car && car.length > 0) [ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_68 $$ outputFormatSpec_ = cmdLine.getOptionValue("outputformat")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_16 $$ if (cmdLine.hasOption("help") || detailedUsage_) [ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_66 $$ additionalConfSpec_ = cmdLine.getOptionValue("additionalconfspec")[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_82 $$ String[] caf = cmdLine.getOptionValues("cacheFile")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_21 $$ background_ = cmdLine.hasOption("background")[ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_32 $$ redCmd_ = cmdLine.getOptionValue("reducer")[ FD ]
Line_11 $$ List<String> args = cmdLine.getArgList()-->Line_12 $$ if (args != null && args.size() > 0) [ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_66 $$ additionalConfSpec_ = cmdLine.getOptionValue("additionalconfspec")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_72 $$ mapDebugSpec_ = cmdLine.getOptionValue("mapdebug")[ CD ]
Line_54 $$ tmpFiles = fileList.toString()-->Line_56 $$ tmpFiles = tmpFiles + "," + fileList[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_74 $$ ioSpec_ = cmdLine.getOptionValue("io")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_98 $$ if (null != cmd && cmd.length > 0) [ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_69 $$ numReduceTasksSpec_ = cmdLine.getOptionValue("numReduceTasks")[ FD ]
Line_38 $$ for (String file : values) -->Line_39 $$ packageFiles_.add(file)[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_69 $$ numReduceTasksSpec_ = cmdLine.getOptionValue("numReduceTasks")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_24 $$ if (values != null && values.length > 0) [ CD ]
Line_78 $$ for (String s : car) -->Line_93 $$ String[] parts = s.split("=", 2)[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_73 $$ reduceDebugSpec_ = cmdLine.getOptionValue("reducedebug")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_11 $$ List<String> args = cmdLine.getArgList()[ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_31 $$ comCmd_ = cmdLine.getOptionValue("combiner")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_67 $$ inputFormatSpec_ = cmdLine.getOptionValue("inputformat")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_74 $$ ioSpec_ = cmdLine.getOptionValue("io")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_31 $$ comCmd_ = cmdLine.getOptionValue("combiner")[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_22 $$ debug_ = cmdLine.hasOption("debug") ? debug_ + 1 : debug_[ FD ]
Line_23 $$ String[] values = cmdLine.getOptionValues("input")-->Line_34 $$ values = cmdLine.getOptionValues("file")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_107 $$ exitUsage(argv_.length > 0 && "-info".equals(argv_[0]))[ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_71 $$ inReaderSpec_ = cmdLine.getOptionValue("inputreader")[ FD ]
Line_56 $$ tmpFiles = tmpFiles + "," + fileList-->Line_58 $$ config_.set("tmpfiles", tmpFiles)[ FD ]
Line_11 $$ List<String> args = cmdLine.getArgList()-->Line_13 $$ fail("Found " + args.size() + " unexpected arguments on the " + "command line " + args)[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_62 $$ if (null != fsName) [ CD ]
Line_35 $$ if (values != null && values.length > 0) -->Line_58 $$ config_.set("tmpfiles", tmpFiles)[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_68 $$ outputFormatSpec_ = cmdLine.getOptionValue("outputformat")[ CD ]
Line_62 $$ if (null != fsName) -->Line_63 $$ LOG.warn("-dfs option is deprecated, please use -fs instead.")[ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_72 $$ mapDebugSpec_ = cmdLine.getOptionValue("mapdebug")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_66 $$ additionalConfSpec_ = cmdLine.getOptionValue("additionalconfspec")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_34 $$ values = cmdLine.getOptionValues("file")[ CD ]
Line_2 $$ void parseArgv() -->Line_10 $$ if (cmdLine != null) [ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_89 $$ String[] jobconf = cmdLine.getOptionValues("jobconf")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_23 $$ String[] values = cmdLine.getOptionValues("input")[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_97 $$ String[] cmd = cmdLine.getOptionValues("cmdenv")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_74 $$ ioSpec_ = cmdLine.getOptionValue("io")[ FD ]
Line_12 $$ if (args != null && args.size() > 0) -->Line_13 $$ fail("Found " + args.size() + " unexpected arguments on the " + "command line " + args)[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_21 $$ background_ = cmdLine.hasOption("background")[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_16 $$ if (cmdLine.hasOption("help") || detailedUsage_) [ FD ]
Line_10 $$ if (cmdLine != null) -->Line_33 $$ lazyOutput_ = cmdLine.hasOption("lazyOutput")[ CD ]
Line_53 $$ if (tmpFiles.isEmpty()) -->Line_56 $$ tmpFiles = tmpFiles + "," + fileList[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_30 $$ mapCmd_ = cmdLine.getOptionValue("mapper")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_29 $$ output_ = cmdLine.getOptionValue("output")[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_22 $$ debug_ = cmdLine.hasOption("debug") ? debug_ + 1 : debug_[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_12 $$ if (args != null && args.size() > 0) [ CD ]
Line_35 $$ if (values != null && values.length > 0) -->Line_52 $$ String tmpFiles = config_.get("tmpfiles", "")[ CD ]
Line_53 $$ if (tmpFiles.isEmpty()) -->Line_54 $$ tmpFiles = fileList.toString()[ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_34 $$ values = cmdLine.getOptionValues("file")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_67 $$ inputFormatSpec_ = cmdLine.getOptionValue("inputformat")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_69 $$ numReduceTasksSpec_ = cmdLine.getOptionValue("numReduceTasks")[ CD ]
Line_25 $$ for (String input : values) -->Line_26 $$ inputSpecs_.add(input)[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_83 $$ if (null != caf && caf.length > 0) [ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_15 $$ detailedUsage_ = cmdLine.hasOption("info")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_73 $$ reduceDebugSpec_ = cmdLine.getOptionValue("reducedebug")[ FD ]
Line_54 $$ tmpFiles = fileList.toString()-->Line_58 $$ config_.set("tmpfiles", tmpFiles)[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_33 $$ lazyOutput_ = cmdLine.hasOption("lazyOutput")[ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_72 $$ mapDebugSpec_ = cmdLine.getOptionValue("mapdebug")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_30 $$ mapCmd_ = cmdLine.getOptionValue("mapper")[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_82 $$ String[] caf = cmdLine.getOptionValues("cacheFile")[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_11 $$ List<String> args = cmdLine.getArgList()[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_15 $$ detailedUsage_ = cmdLine.hasOption("info")[ FD ]
Line_52 $$ String tmpFiles = config_.get("tmpfiles", "")-->Line_54 $$ tmpFiles = fileList.toString()[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_82 $$ String[] caf = cmdLine.getOptionValues("cacheFile")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_15 $$ detailedUsage_ = cmdLine.hasOption("info")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_32 $$ redCmd_ = cmdLine.getOptionValue("reducer")[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_70 $$ partitionerSpec_ = cmdLine.getOptionValue("partitioner")[ FD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_30 $$ mapCmd_ = cmdLine.getOptionValue("mapper")[ FD ]
Line_52 $$ String tmpFiles = config_.get("tmpfiles", "")-->Line_56 $$ tmpFiles = tmpFiles + "," + fileList[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_90 $$ if (null != jobconf && jobconf.length > 0) [ CD ]
Line_44 $$ if (fileList.length() > 0) -->Line_45 $$ fileList.append(',')[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_33 $$ lazyOutput_ = cmdLine.hasOption("lazyOutput")[ FD ]
Line_52 $$ String tmpFiles = config_.get("tmpfiles", "")-->Line_53 $$ if (tmpFiles.isEmpty()) [ FD ]
Line_3 $$ CommandLine cmdLine = null-->Line_71 $$ inReaderSpec_ = cmdLine.getOptionValue("inputreader")[ FD ]
Line_35 $$ if (values != null && values.length > 0) -->Line_53 $$ if (tmpFiles.isEmpty()) [ CD ]
Line_5 $$ cmdLine = parser.parse(allOptions, argv_)-->Line_67 $$ inputFormatSpec_ = cmdLine.getOptionValue("inputformat")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_29 $$ output_ = cmdLine.getOptionValue("output")[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_75 $$ String[] car = cmdLine.getOptionValues("cacheArchive")[ FD ]
Line_10 $$ if (cmdLine != null) -->Line_35 $$ if (values != null && values.length > 0) [ CD ]
Line_76 $$ if (null != car && car.length > 0) -->Line_77 $$ LOG.warn("-cacheArchive option is deprecated, please use -archives instead.")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_71 $$ inReaderSpec_ = cmdLine.getOptionValue("inputreader")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_75 $$ String[] car = cmdLine.getOptionValues("cacheArchive")[ CD ]
Line_10 $$ if (cmdLine != null) -->Line_70 $$ partitionerSpec_ = cmdLine.getOptionValue("partitioner")[ CD ]
Line_3 $$ CommandLine cmdLine = null-->Line_89 $$ String[] jobconf = cmdLine.getOptionValues("jobconf")[ FD ]
