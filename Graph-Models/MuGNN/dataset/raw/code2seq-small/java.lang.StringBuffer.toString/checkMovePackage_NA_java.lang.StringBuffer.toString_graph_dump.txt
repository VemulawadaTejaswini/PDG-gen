Line_6 $$ final StringBuffer message = new StringBuffer()-->Line_14 $$ message.append("\n")[ FD ]
Line_6 $$ final StringBuffer message = new StringBuffer()-->Line_9 $$ DirectoryAsPackageRenameHandlerBase.buildMultipleDirectoriesInPackageMessage(message, aPackage.getQualifiedName(), directories)[ FD ]
Line_5 $$ if (directories.length > 1 || virtualFiles.length > 0) -->Line_17 $$ if (ret != Messages.YES) [ CD ]
Line_11 $$ String report = RefactoringBundle.message("all.these.directories.will.be.moved.and.all.references.to.0.will.be.changed", aPackage.getQualifiedName())-->Line_12 $$ message.append(report)[ FD ]
Line_16 $$ int ret = Messages.showYesNoDialog(project, message.toString(), RefactoringBundle.message("warning.title"), Messages.getWarningIcon())-->Line_17 $$ if (ret != Messages.YES) [ FD ]
Line_8 $$ if (directories.length > 1) -->Line_12 $$ message.append(report)[ CD ]
Line_6 $$ final StringBuffer message = new StringBuffer()-->Line_7 $$ RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, aPackage.getQualifiedName())[ FD ]
Line_5 $$ if (directories.length > 1 || virtualFiles.length > 0) -->Line_7 $$ RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, aPackage.getQualifiedName())[ CD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_11 $$ String report = RefactoringBundle.message("all.these.directories.will.be.moved.and.all.references.to.0.will.be.changed", aPackage.getQualifiedName())[ FD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_4 $$ final VirtualFile[] virtualFiles = aPackage.occursInPackagePrefixes()[ FD ]
Line_5 $$ if (directories.length > 1 || virtualFiles.length > 0) -->Line_15 $$ message.append(RefactoringBundle.message("do.you.wish.to.continue"))[ CD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_3 $$ final PsiDirectory[] directories = aPackage.getDirectories()[ CD ]
Line_6 $$ final StringBuffer message = new StringBuffer()-->Line_10 $$ message.append("\n\n")[ FD ]
Line_5 $$ if (directories.length > 1 || virtualFiles.length > 0) -->Line_14 $$ message.append("\n")[ CD ]
Line_4 $$ final VirtualFile[] virtualFiles = aPackage.occursInPackagePrefixes()-->Line_7 $$ RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, aPackage.getQualifiedName())[ FD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_9 $$ DirectoryAsPackageRenameHandlerBase.buildMultipleDirectoriesInPackageMessage(message, aPackage.getQualifiedName(), directories)[ FD ]
Line_5 $$ if (directories.length > 1 || virtualFiles.length > 0) -->Line_16 $$ int ret = Messages.showYesNoDialog(project, message.toString(), RefactoringBundle.message("warning.title"), Messages.getWarningIcon())[ CD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_3 $$ final PsiDirectory[] directories = aPackage.getDirectories()[ FD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_7 $$ RenameUtil.buildPackagePrefixChangedMessage(virtualFiles, message, aPackage.getQualifiedName())[ FD ]
Line_5 $$ if (directories.length > 1 || virtualFiles.length > 0) -->Line_8 $$ if (directories.length > 1) [ CD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_16 $$ int ret = Messages.showYesNoDialog(project, message.toString(), RefactoringBundle.message("warning.title"), Messages.getWarningIcon())[ FD ]
Line_6 $$ final StringBuffer message = new StringBuffer()-->Line_15 $$ message.append(RefactoringBundle.message("do.you.wish.to.continue"))[ FD ]
Line_8 $$ if (directories.length > 1) -->Line_11 $$ String report = RefactoringBundle.message("all.these.directories.will.be.moved.and.all.references.to.0.will.be.changed", aPackage.getQualifiedName())[ CD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_4 $$ final VirtualFile[] virtualFiles = aPackage.occursInPackagePrefixes()[ CD ]
Line_6 $$ final StringBuffer message = new StringBuffer()-->Line_16 $$ int ret = Messages.showYesNoDialog(project, message.toString(), RefactoringBundle.message("warning.title"), Messages.getWarningIcon())[ FD ]
Line_3 $$ final PsiDirectory[] directories = aPackage.getDirectories()-->Line_9 $$ DirectoryAsPackageRenameHandlerBase.buildMultipleDirectoriesInPackageMessage(message, aPackage.getQualifiedName(), directories)[ FD ]
Line_5 $$ if (directories.length > 1 || virtualFiles.length > 0) -->Line_6 $$ final StringBuffer message = new StringBuffer()[ CD ]
Line_8 $$ if (directories.length > 1) -->Line_9 $$ DirectoryAsPackageRenameHandlerBase.buildMultipleDirectoriesInPackageMessage(message, aPackage.getQualifiedName(), directories)[ CD ]
Line_8 $$ if (directories.length > 1) -->Line_10 $$ message.append("\n\n")[ CD ]
Line_6 $$ final StringBuffer message = new StringBuffer()-->Line_12 $$ message.append(report)[ FD ]
Line_17 $$ if (ret != Messages.YES) -->Line_18 $$ return false[ CD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_5 $$ if (directories.length > 1 || virtualFiles.length > 0) [ CD ]
Line_2 $$ private static boolean checkMovePackage(Project project, PsiPackage aPackage) -->Line_21 $$ return true[ CD ]
