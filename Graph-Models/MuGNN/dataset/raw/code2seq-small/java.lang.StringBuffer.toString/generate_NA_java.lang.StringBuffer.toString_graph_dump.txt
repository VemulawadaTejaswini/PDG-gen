Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_8 $$ if (genOptions.generateSingleFile) [ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_4 $$ final List<File> filesToRefresh = new ArrayList<File>()[ CD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_60 $$ if (filesToRefresh.size() > 0) [ CD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_10 $$ final File destFile = new File(projectBuildFileDestDir, genOptions.getBuildFileName())[ FD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_11 $$ final File propertiesFile = new File(projectBuildFileDestDir, genOptions.getPropertiesFileName())[ CD ]
Line_25 $$ new Task.Modal(project, CompilerBundle.message("generate.ant.build.title"), false) -->Line_27 $$ indicator.setIndeterminate(true)[ CD ]
Line_51 $$ for (int idx = 0; idx < _generated.size(); idx++) -->Line_52 $$ final File file = _generated.get(idx)[ CD ]
Line_4 $$ final List<File> filesToRefresh = new ArrayList<File>()-->Line_32 $$ generated = generateSingleFileBuild(project, genOptions, filesToRefresh)[ FD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_10 $$ final File destFile = new File(projectBuildFileDestDir, genOptions.getBuildFileName())[ CD ]
Line_14 $$ final List<File> allFiles = new ArrayList<File>()-->Line_16 $$ allFiles.add(new File(projectBuildFileDestDir, genOptions.getBuildFileName()))[ FD ]
Line_30 $$ final File[] generated-->Line_37 $$ ContainerUtil.addAll(_generated, generated)[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_18 $$ final ModuleChunk[] chunks = genOptions.getModuleChunks()[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_12 $$ ensureFilesWritable(project, new File[] [ FD ]
Line_25 $$ new Task.Modal(project, CompilerBundle.message("generate.ant.build.title"), false) -->Line_28 $$ indicator.setText(CompilerBundle.message("generate.ant.build.progress.message"))[ CD ]
Line_6 $$ final List<File> _generated = new ArrayList<File>()-->Line_51 $$ for (int idx = 0; idx < _generated.size(); idx++) [ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_58 $$ Messages.showInfoMessage(project, CompilerBundle.message("message.ant.files.generated.ok", filesString.toString()), CompilerBundle.message("generate.ant.build.title"))[ FD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_18 $$ final ModuleChunk[] chunks = genOptions.getModuleChunks()[ CD ]
Line_4 $$ final List<File> filesToRefresh = new ArrayList<File>()-->Line_61 $$ CompilerUtil.refreshIOFiles(filesToRefresh)[ FD ]
Line_51 $$ for (int idx = 0; idx < _generated.size(); idx++) -->Line_52 $$ final File file = _generated.get(idx)[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_23 $$ ensureFilesWritable(project, allFiles.toArray(new File[allFiles.size()]))[ FD ]
Line_25 $$ new Task.Modal(project, CompilerBundle.message("generate.ant.build.title"), false) -->Line_28 $$ indicator.setText(CompilerBundle.message("generate.ant.build.progress.message"))[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_32 $$ generated = generateSingleFileBuild(project, genOptions, filesToRefresh)[ FD ]
Line_36 $$ if (generated != null) -->Line_37 $$ ContainerUtil.addAll(_generated, generated)[ CD ]
Line_4 $$ final List<File> filesToRefresh = new ArrayList<File>()-->Line_34 $$ generated = generateMultipleFileBuild(project, genOptions, filesToRefresh)[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_3 $$ ApplicationManager.getApplication().saveAll()[ CD ]
Line_4 $$ final List<File> filesToRefresh = new ArrayList<File>()-->Line_60 $$ if (filesToRefresh.size() > 0) [ FD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_9 $$ final File projectBuildFileDestDir = VfsUtil.virtualToIoFile(project.getBaseDir())[ CD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_9 $$ final File projectBuildFileDestDir = VfsUtil.virtualToIoFile(project.getBaseDir())[ FD ]
Line_14 $$ final List<File> allFiles = new ArrayList<File>()-->Line_17 $$ allFiles.add(new File(projectBuildFileDestDir, genOptions.getPropertiesFileName()))[ FD ]
Line_19 $$ for (final ModuleChunk chunk : chunks) -->Line_21 $$ allFiles.add(new File(chunkBaseDir, BuildProperties.getModuleChunkBuildFileName(chunk) + XML_EXTENSION))[ FD ]
Line_31 $$ if (genOptions.generateSingleFile) -->Line_32 $$ generated = generateSingleFileBuild(project, genOptions, filesToRefresh)[ CD ]
Line_30 $$ final File[] generated-->Line_34 $$ generated = generateMultipleFileBuild(project, genOptions, filesToRefresh)[ FD ]
Line_47 $$ if (_ex[0] != null) -->Line_51 $$ for (int idx = 0; idx < _generated.size(); idx++) [ CD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_16 $$ allFiles.add(new File(projectBuildFileDestDir, genOptions.getBuildFileName()))[ CD ]
Line_19 $$ for (final ModuleChunk chunk : chunks) -->Line_20 $$ final File chunkBaseDir = BuildProperties.getModuleChunkBaseDir(chunk)[ FD ]
Line_30 $$ final File[] generated-->Line_36 $$ if (generated != null) [ FD ]
Line_32 $$ generated = generateSingleFileBuild(project, genOptions, filesToRefresh)-->Line_37 $$ ContainerUtil.addAll(_generated, generated)[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_47 $$ if (_ex[0] != null) [ CD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_17 $$ allFiles.add(new File(projectBuildFileDestDir, genOptions.getPropertiesFileName()))[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_16 $$ allFiles.add(new File(projectBuildFileDestDir, genOptions.getBuildFileName()))[ FD ]
Line_14 $$ final List<File> allFiles = new ArrayList<File>()-->Line_21 $$ allFiles.add(new File(chunkBaseDir, BuildProperties.getModuleChunkBuildFileName(chunk) + XML_EXTENSION))[ FD ]
Line_31 $$ if (genOptions.generateSingleFile) -->Line_34 $$ generated = generateMultipleFileBuild(project, genOptions, filesToRefresh)[ CD ]
Line_51 $$ for (int idx = 0; idx < _generated.size(); idx++) -->Line_53 $$ if (idx > 0) [ FD ]
Line_52 $$ final File file = _generated.get(idx)-->Line_56 $$ filesString.append(file.getPath())[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_31 $$ if (genOptions.generateSingleFile) [ FD ]
Line_51 $$ for (int idx = 0; idx < _generated.size(); idx++) -->Line_56 $$ filesString.append(file.getPath())[ CD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_11 $$ final File propertiesFile = new File(projectBuildFileDestDir, genOptions.getPropertiesFileName())[ FD ]
Line_60 $$ if (filesToRefresh.size() > 0) -->Line_61 $$ CompilerUtil.refreshIOFiles(filesToRefresh)[ CD ]
Line_32 $$ generated = generateSingleFileBuild(project, genOptions, filesToRefresh)-->Line_36 $$ if (generated != null) [ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_5 $$ final IOException[] _ex = new IOException[] [ CD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_15 $$ final File projectBuildFileDestDir = VfsUtil.virtualToIoFile(project.getBaseDir())[ FD ]
Line_6 $$ final List<File> _generated = new ArrayList<File>()-->Line_52 $$ final File file = _generated.get(idx)[ FD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_48 $$ Messages.showErrorDialog(project, CompilerBundle.message("error.ant.files.generate.failed", _ex[0].getMessage()), CompilerBundle.message("generate.ant.build.title"))[ FD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_15 $$ final File projectBuildFileDestDir = VfsUtil.virtualToIoFile(project.getBaseDir())[ CD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_14 $$ final List<File> allFiles = new ArrayList<File>()[ CD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_6 $$ final List<File> _generated = new ArrayList<File>()[ CD ]
Line_6 $$ final List<File> _generated = new ArrayList<File>()-->Line_37 $$ ContainerUtil.addAll(_generated, generated)[ FD ]
Line_30 $$ final File[] generated-->Line_32 $$ generated = generateSingleFileBuild(project, genOptions, filesToRefresh)[ FD ]
Line_53 $$ if (idx > 0) -->Line_54 $$ filesString.append(",\n")[ CD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_17 $$ allFiles.add(new File(projectBuildFileDestDir, genOptions.getPropertiesFileName()))[ CD ]
Line_25 $$ new Task.Modal(project, CompilerBundle.message("generate.ant.build.title"), false) -->Line_27 $$ indicator.setIndeterminate(true)[ FD ]
Line_34 $$ generated = generateMultipleFileBuild(project, genOptions, filesToRefresh)-->Line_36 $$ if (generated != null) [ FD ]
Line_51 $$ for (int idx = 0; idx < _generated.size(); idx++) -->Line_53 $$ if (idx > 0) [ CD ]
Line_47 $$ if (_ex[0] != null) -->Line_58 $$ Messages.showInfoMessage(project, CompilerBundle.message("message.ant.files.generated.ok", filesString.toString()), CompilerBundle.message("generate.ant.build.title"))[ CD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_23 $$ ensureFilesWritable(project, allFiles.toArray(new File[allFiles.size()]))[ CD ]
Line_34 $$ generated = generateMultipleFileBuild(project, genOptions, filesToRefresh)-->Line_37 $$ ContainerUtil.addAll(_generated, generated)[ FD ]
Line_14 $$ final List<File> allFiles = new ArrayList<File>()-->Line_23 $$ ensureFilesWritable(project, allFiles.toArray(new File[allFiles.size()]))[ FD ]
Line_32 $$ generated = generateSingleFileBuild(project, genOptions, filesToRefresh)-->Line_34 $$ generated = generateMultipleFileBuild(project, genOptions, filesToRefresh)[ FD ]
Line_47 $$ if (_ex[0] != null) -->Line_48 $$ Messages.showErrorDialog(project, CompilerBundle.message("error.ant.files.generate.failed", _ex[0].getMessage()), CompilerBundle.message("generate.ant.build.title"))[ CD ]
Line_2 $$ private void generate(final Project project, final GenerationOptions genOptions) -->Line_34 $$ generated = generateMultipleFileBuild(project, genOptions, filesToRefresh)[ FD ]
Line_8 $$ if (genOptions.generateSingleFile) -->Line_12 $$ ensureFilesWritable(project, new File[] [ CD ]
