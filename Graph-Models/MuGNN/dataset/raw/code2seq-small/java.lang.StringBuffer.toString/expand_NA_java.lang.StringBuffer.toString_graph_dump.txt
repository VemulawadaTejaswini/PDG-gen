Line_26 $$ String path = paths[idx]-->Line_30 $$ outputPath.append(path)[ FD ]
Line_11 $$ if (module != null) -->Line_14 $$ if (outputPathUrl == null)[ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_4 $$ if (project == null) [ FD ]
Line_8 $$ if (file != null) -->Line_9 $$ ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ CD ]
Line_7 $$ VirtualFile file = CommonDataKeys.VIRTUAL_FILE.getData(dataContext)-->Line_12 $$ boolean isTest = projectFileIndex.isInTestSourceContent(file)[ FD ]
Line_11 $$ if (module != null) -->Line_12 $$ boolean isTest = projectFileIndex.isInTestSourceContent(file)[ CD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_19 $$ Module[] allModules = ModuleManager.getInstance(project).getSortedModules()[ CD ]
Line_24 $$ final StringBuffer outputPath = new StringBuffer()-->Line_28 $$ outputPath.append(File.pathSeparator)[ FD ]
Line_9 $$ ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_10 $$ Module module = projectFileIndex.getModuleForFile(file)[ FD ]
Line_8 $$ if (file != null) -->Line_11 $$ if (module != null) [ CD ]
Line_10 $$ Module module = projectFileIndex.getModuleForFile(file)-->Line_11 $$ if (module != null) [ FD ]
Line_25 $$ for (int idx = 0; idx < paths.length; idx++) -->Line_26 $$ String path = paths[idx][ CD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)[ FD ]
Line_10 $$ Module module = projectFileIndex.getModuleForFile(file)-->Line_13 $$ String outputPathUrl = isTest ? CompilerModuleExtension.getInstance(module).getCompilerOutputUrlForTests() : CompilerModuleExtension.getInstance(module).getCompilerOutputUrl()[ FD ]
Line_14 $$ if (outputPathUrl == null)-->Line_15 $$ return null[ CD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_32 $$ return outputPath.toString()[ CD ]
Line_7 $$ VirtualFile file = CommonDataKeys.VIRTUAL_FILE.getData(dataContext)-->Line_10 $$ Module module = projectFileIndex.getModuleForFile(file)[ FD ]
Line_11 $$ if (module != null) -->Line_13 $$ String outputPathUrl = isTest ? CompilerModuleExtension.getInstance(module).getCompilerOutputUrlForTests() : CompilerModuleExtension.getInstance(module).getCompilerOutputUrl()[ CD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_23 $$ String[] paths = CompilerPathsEx.getOutputPaths(allModules)[ CD ]
Line_27 $$ if (idx > 0) -->Line_28 $$ outputPath.append(File.pathSeparator)[ CD ]
Line_20 $$ if (allModules.length == 0) -->Line_21 $$ return null[ CD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_8 $$ if (file != null) [ CD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_20 $$ if (allModules.length == 0) [ CD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_19 $$ Module[] allModules = ModuleManager.getInstance(project).getSortedModules()[ FD ]
Line_24 $$ final StringBuffer outputPath = new StringBuffer()-->Line_32 $$ return outputPath.toString()[ FD ]
Line_25 $$ for (int idx = 0; idx < paths.length; idx++) -->Line_30 $$ outputPath.append(path)[ CD ]
Line_24 $$ final StringBuffer outputPath = new StringBuffer()-->Line_30 $$ outputPath.append(path)[ FD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_4 $$ if (project == null) [ CD ]
Line_9 $$ ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()-->Line_12 $$ boolean isTest = projectFileIndex.isInTestSourceContent(file)[ FD ]
Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)-->Line_9 $$ ProjectFileIndex projectFileIndex = ProjectRootManager.getInstance(project).getFileIndex()[ FD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_7 $$ VirtualFile file = CommonDataKeys.VIRTUAL_FILE.getData(dataContext)[ FD ]
Line_8 $$ if (file != null) -->Line_10 $$ Module module = projectFileIndex.getModuleForFile(file)[ CD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_3 $$ Project project = CommonDataKeys.PROJECT.getData(dataContext)[ CD ]
Line_7 $$ VirtualFile file = CommonDataKeys.VIRTUAL_FILE.getData(dataContext)-->Line_8 $$ if (file != null) [ FD ]
Line_13 $$ String outputPathUrl = isTest ? CompilerModuleExtension.getInstance(module).getCompilerOutputUrlForTests() : CompilerModuleExtension.getInstance(module).getCompilerOutputUrl()-->Line_14 $$ if (outputPathUrl == null)[ FD ]
Line_25 $$ for (int idx = 0; idx < paths.length; idx++) -->Line_27 $$ if (idx > 0) [ CD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_24 $$ final StringBuffer outputPath = new StringBuffer()[ CD ]
Line_11 $$ if (module != null) -->Line_16 $$ return VirtualFileManager.extractPath(outputPathUrl).replace('/', File.separatorChar)[ CD ]
Line_4 $$ if (project == null) -->Line_5 $$ return null[ CD ]
Line_19 $$ Module[] allModules = ModuleManager.getInstance(project).getSortedModules()-->Line_23 $$ String[] paths = CompilerPathsEx.getOutputPaths(allModules)[ FD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_25 $$ for (int idx = 0; idx < paths.length; idx++) [ CD ]
Line_25 $$ for (int idx = 0; idx < paths.length; idx++) -->Line_27 $$ if (idx > 0) [ FD ]
Line_2 $$ public String expand(DataContext dataContext) -->Line_7 $$ VirtualFile file = CommonDataKeys.VIRTUAL_FILE.getData(dataContext)[ CD ]
Line_13 $$ String outputPathUrl = isTest ? CompilerModuleExtension.getInstance(module).getCompilerOutputUrlForTests() : CompilerModuleExtension.getInstance(module).getCompilerOutputUrl()-->Line_16 $$ return VirtualFileManager.extractPath(outputPathUrl).replace('/', File.separatorChar)[ FD ]
