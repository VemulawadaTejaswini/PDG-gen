Line_2 $$ protected void doUnregistration() throws YarnException, IOException, InterruptedException -->Line_3 $$ FinalApplicationStatus finishState = FinalApplicationStatus.UNDEFINED[ CD ]
Line_21 $$ while (true) -->Line_28 $$ LOG.info("Waiting for application to be successfully unregistered.")[ CD ]
Line_2 $$ protected void doUnregistration() throws YarnException, IOException, InterruptedException -->Line_19 $$ FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(finishState, sb.toString(), historyUrl)[ CD ]
Line_3 $$ FinalApplicationStatus finishState = FinalApplicationStatus.UNDEFINED-->Line_19 $$ FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(finishState, sb.toString(), historyUrl)[ FD ]
Line_2 $$ protected void doUnregistration() throws YarnException, IOException, InterruptedException -->Line_17 $$ String historyUrl = MRWebAppUtil.getApplicationWebURLOnJHSWithScheme(getConfig(), context.getApplicationID())[ CD ]
Line_10 $$ finishState = FinalApplicationStatus.FAILED-->Line_19 $$ FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(finishState, sb.toString(), historyUrl)[ FD ]
Line_12 $$ StringBuffer sb = new StringBuffer()-->Line_14 $$ sb.append(s).append("\n")[ FD ]
Line_6 $$ finishState = FinalApplicationStatus.SUCCEEDED-->Line_8 $$ finishState = FinalApplicationStatus.KILLED[ FD ]
Line_3 $$ FinalApplicationStatus finishState = FinalApplicationStatus.UNDEFINED-->Line_6 $$ finishState = FinalApplicationStatus.SUCCEEDED[ FD ]
Line_19 $$ FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(finishState, sb.toString(), historyUrl)-->Line_22 $$ FinishApplicationMasterResponse response = scheduler.finishApplicationMaster(request)[ FD ]
Line_12 $$ StringBuffer sb = new StringBuffer()-->Line_19 $$ FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(finishState, sb.toString(), historyUrl)[ FD ]
Line_5 $$ if (jobImpl.getInternalState() == JobStateInternal.SUCCEEDED) -->Line_6 $$ finishState = FinalApplicationStatus.SUCCEEDED[ CD ]
Line_2 $$ protected void doUnregistration() throws YarnException, IOException, InterruptedException -->Line_18 $$ LOG.info("History url is " + historyUrl)[ CD ]
Line_9 $$ if (jobImpl.getInternalState() == JobStateInternal.FAILED || jobImpl.getInternalState() == JobStateInternal.ERROR) -->Line_10 $$ finishState = FinalApplicationStatus.FAILED[ CD ]
Line_2 $$ protected void doUnregistration() throws YarnException, IOException, InterruptedException -->Line_16 $$ LOG.info("Setting job diagnostics to " + sb.toString())[ CD ]
Line_6 $$ finishState = FinalApplicationStatus.SUCCEEDED-->Line_10 $$ finishState = FinalApplicationStatus.FAILED[ FD ]
Line_13 $$ for (String s : job.getDiagnostics()) -->Line_14 $$ sb.append(s).append("\n")[ FD ]
Line_8 $$ finishState = FinalApplicationStatus.KILLED-->Line_10 $$ finishState = FinalApplicationStatus.FAILED[ FD ]
Line_7 $$ if (jobImpl.getInternalState() == JobStateInternal.KILLED || (jobImpl.getInternalState() == JobStateInternal.RUNNING && isSignalled)) -->Line_9 $$ if (jobImpl.getInternalState() == JobStateInternal.FAILED || jobImpl.getInternalState() == JobStateInternal.ERROR) [ CD ]
Line_21 $$ while (true) -->Line_23 $$ if (response.getIsUnregistered()) [ CD ]
Line_5 $$ if (jobImpl.getInternalState() == JobStateInternal.SUCCEEDED) -->Line_7 $$ if (jobImpl.getInternalState() == JobStateInternal.KILLED || (jobImpl.getInternalState() == JobStateInternal.RUNNING && isSignalled)) [ CD ]
Line_2 $$ protected void doUnregistration() throws YarnException, IOException, InterruptedException -->Line_12 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_22 $$ FinishApplicationMasterResponse response = scheduler.finishApplicationMaster(request)-->Line_23 $$ if (response.getIsUnregistered()) [ FD ]
Line_2 $$ protected void doUnregistration() throws YarnException, IOException, InterruptedException -->Line_5 $$ if (jobImpl.getInternalState() == JobStateInternal.SUCCEEDED) [ CD ]
Line_23 $$ if (response.getIsUnregistered()) -->Line_25 $$ raContext.markSuccessfulUnregistration()[ CD ]
Line_21 $$ while (true) -->Line_29 $$ Thread.sleep(rmPollInterval)[ CD ]
Line_12 $$ StringBuffer sb = new StringBuffer()-->Line_16 $$ LOG.info("Setting job diagnostics to " + sb.toString())[ FD ]
Line_23 $$ if (response.getIsUnregistered()) -->Line_24 $$ RunningAppContext raContext = (RunningAppContext) context[ CD ]
Line_4 $$ JobImpl jobImpl = (JobImpl) job-->Line_7 $$ if (jobImpl.getInternalState() == JobStateInternal.KILLED || (jobImpl.getInternalState() == JobStateInternal.RUNNING && isSignalled)) [ FD ]
Line_6 $$ finishState = FinalApplicationStatus.SUCCEEDED-->Line_19 $$ FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(finishState, sb.toString(), historyUrl)[ FD ]
Line_8 $$ finishState = FinalApplicationStatus.KILLED-->Line_19 $$ FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(finishState, sb.toString(), historyUrl)[ FD ]
Line_3 $$ FinalApplicationStatus finishState = FinalApplicationStatus.UNDEFINED-->Line_10 $$ finishState = FinalApplicationStatus.FAILED[ FD ]
Line_2 $$ protected void doUnregistration() throws YarnException, IOException, InterruptedException -->Line_4 $$ JobImpl jobImpl = (JobImpl) job[ CD ]
Line_21 $$ while (true) -->Line_22 $$ FinishApplicationMasterResponse response = scheduler.finishApplicationMaster(request)[ CD ]
Line_17 $$ String historyUrl = MRWebAppUtil.getApplicationWebURLOnJHSWithScheme(getConfig(), context.getApplicationID())-->Line_19 $$ FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(finishState, sb.toString(), historyUrl)[ FD ]
Line_7 $$ if (jobImpl.getInternalState() == JobStateInternal.KILLED || (jobImpl.getInternalState() == JobStateInternal.RUNNING && isSignalled)) -->Line_8 $$ finishState = FinalApplicationStatus.KILLED[ CD ]
Line_4 $$ JobImpl jobImpl = (JobImpl) job-->Line_9 $$ if (jobImpl.getInternalState() == JobStateInternal.FAILED || jobImpl.getInternalState() == JobStateInternal.ERROR) [ FD ]
Line_3 $$ FinalApplicationStatus finishState = FinalApplicationStatus.UNDEFINED-->Line_8 $$ finishState = FinalApplicationStatus.KILLED[ FD ]
Line_4 $$ JobImpl jobImpl = (JobImpl) job-->Line_5 $$ if (jobImpl.getInternalState() == JobStateInternal.SUCCEEDED) [ FD ]
Line_24 $$ RunningAppContext raContext = (RunningAppContext) context-->Line_25 $$ raContext.markSuccessfulUnregistration()[ FD ]
