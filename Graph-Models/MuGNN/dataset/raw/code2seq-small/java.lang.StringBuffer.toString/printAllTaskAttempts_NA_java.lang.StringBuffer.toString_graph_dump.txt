Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_8 $$ if (TaskType.REDUCE.equals(taskType)) [ CD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_3 $$ Map<TaskID, TaskInfo> tasks = job.getAllTasks()[ CD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_4 $$ StringBuffer taskList = new StringBuffer()[ CD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_5 $$ taskList.append("\n").append(taskType)[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_18 $$ taskList.append(attempt.getAttemptId()).append("\t")[ FD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_6 $$ taskList.append(" task list for ").append(job.getJobId())[ CD ]
Line_14 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) -->Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) [ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_13 $$ System.out.println(taskList.toString())[ FD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_19 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getStartTime(), 0)).append("\t")[ CD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_19 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getStartTime(), 0)).append("\t")[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_28 $$ taskList.append(attempt.getError())[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_21 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getShuffleFinishTime(), attempt.getStartTime()))[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_23 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getSortFinishTime(), attempt.getShuffleFinishTime()))[ FD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_12 $$ taskList.append("\n====================================================")[ CD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_16 $$ if (taskType.equals(task.getTaskType())) [ FD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_5 $$ taskList.append("\n").append(taskType)[ FD ]
Line_20 $$ if (TaskType.REDUCE.equals(taskType)) -->Line_23 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getSortFinishTime(), attempt.getShuffleFinishTime()))[ CD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_5 $$ taskList.append("\n").append(taskType)[ CD ]
Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) -->Line_23 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getSortFinishTime(), attempt.getShuffleFinishTime()))[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_25 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getFinishTime(), attempt.getStartTime()))[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_30 $$ taskList.append(taskLogsUrl != null ? taskLogsUrl : "n/a")[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_11 $$ taskList.append("\tFinishTime\tHostName\tError\tTaskLogs")[ FD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_11 $$ taskList.append("\tFinishTime\tHostName\tError\tTaskLogs")[ CD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_13 $$ System.out.println(taskList.toString())[ CD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_9 $$ taskList.append("\tShuffleFinished\tSortFinished")[ FD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_18 $$ taskList.append(attempt.getAttemptId()).append("\t")[ CD ]
Line_20 $$ if (TaskType.REDUCE.equals(taskType)) -->Line_21 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getShuffleFinishTime(), attempt.getStartTime()))[ CD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_28 $$ taskList.append(attempt.getError())[ CD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_29 $$ String taskLogsUrl = getTaskLogsUrl(WebAppUtils.getHttpSchemePrefix(fs.getConf()), attempt)[ CD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_22 $$ taskList.append("\t")[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_31 $$ System.out.println(taskList.toString())[ FD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_30 $$ taskList.append(taskLogsUrl != null ? taskLogsUrl : "n/a")[ CD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_26 $$ taskList.append("\t")[ CD ]
Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) -->Line_21 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getShuffleFinishTime(), attempt.getStartTime()))[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_27 $$ taskList.append(attempt.getHostname()).append("\t")[ FD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_8 $$ if (TaskType.REDUCE.equals(taskType)) [ FD ]
Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) -->Line_27 $$ taskList.append(attempt.getHostname()).append("\t")[ FD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_7 $$ taskList.append("\nTaskId\t\tStartTime")[ CD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_20 $$ if (TaskType.REDUCE.equals(taskType)) [ CD ]
Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) -->Line_29 $$ String taskLogsUrl = getTaskLogsUrl(WebAppUtils.getHttpSchemePrefix(fs.getConf()), attempt)[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_6 $$ taskList.append(" task list for ").append(job.getJobId())[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_12 $$ taskList.append("\n====================================================")[ FD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_31 $$ System.out.println(taskList.toString())[ CD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_27 $$ taskList.append(attempt.getHostname()).append("\t")[ CD ]
Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) -->Line_18 $$ taskList.append(attempt.getAttemptId()).append("\t")[ FD ]
Line_3 $$ Map<TaskID, TaskInfo> tasks = job.getAllTasks()-->Line_14 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) [ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_7 $$ taskList.append("\nTaskId\t\tStartTime")[ FD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_25 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getFinishTime(), attempt.getStartTime()))[ CD ]
Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) -->Line_25 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getFinishTime(), attempt.getStartTime()))[ FD ]
Line_20 $$ if (TaskType.REDUCE.equals(taskType)) -->Line_22 $$ taskList.append("\t")[ CD ]
Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) -->Line_19 $$ taskList.append(StringUtils.getFormattedTimeWithDiff(dateFormat, attempt.getStartTime(), 0)).append("\t")[ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_17 $$ taskList.setLength(0)[ FD ]
Line_14 $$ for (JobHistoryParser.TaskInfo task : tasks.values()) -->Line_16 $$ if (taskType.equals(task.getTaskType())) [ FD ]
Line_15 $$ for (JobHistoryParser.TaskAttemptInfo attempt : task.getAllTaskAttempts().values()) -->Line_28 $$ taskList.append(attempt.getError())[ FD ]
Line_8 $$ if (TaskType.REDUCE.equals(taskType)) -->Line_9 $$ taskList.append("\tShuffleFinished\tSortFinished")[ CD ]
Line_16 $$ if (taskType.equals(task.getTaskType())) -->Line_17 $$ taskList.setLength(0)[ CD ]
Line_2 $$ private void printAllTaskAttempts(TaskType taskType) -->Line_20 $$ if (TaskType.REDUCE.equals(taskType)) [ FD ]
Line_4 $$ StringBuffer taskList = new StringBuffer()-->Line_26 $$ taskList.append("\t")[ FD ]
