Line_18 $$ PsiElement element = file.findElementAt(offset)-->Line_20 $$ final Property property = (Property) element.getParent()[ FD ]
Line_2 $$ private static void prepareDuplicateValuesByFile(final Map<String, Set<PsiFile>> valueToFiles, final InspectionManager manager, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.value.progress.indicator.text", value))[ FD ]
Line_16 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_18 $$ PsiElement element = file.findElementAt(offset)[ CD ]
Line_3 $$ for (final String value : valueToFiles.keySet()) -->Line_21 $$ if (Comparing.equal(property.getValue(), value) && element.getStartOffsetInParent() != 0) [ FD ]
Line_3 $$ for (final String value : valueToFiles.keySet()) -->Line_13 $$ Set<PsiFile> psiFilesWithDuplicates = valueToFiles.get(value)[ FD ]
Line_21 $$ if (Comparing.equal(property.getValue(), value) && element.getStartOffsetInParent() != 0) -->Line_22 $$ if (duplicatesCount[0] == 0) [ CD ]
Line_14 $$ for (final PsiFile file : psiFilesWithDuplicates) -->Line_18 $$ PsiElement element = file.findElementAt(offset)[ FD ]
Line_11 $$ final StringBuffer message = new StringBuffer()-->Line_25 $$ surroundWithHref(message, element, true)[ FD ]
Line_15 $$ CharSequence text = file.getViewProvider().getContents()-->Line_16 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() [ FD ]
Line_18 $$ PsiElement element = file.findElementAt(offset)-->Line_19 $$ if (element != null && element.getParent() instanceof Property) [ FD ]
Line_18 $$ PsiElement element = file.findElementAt(offset)-->Line_25 $$ surroundWithHref(message, element, true)[ FD ]
Line_2 $$ private static void prepareDuplicateValuesByFile(final Map<String, Set<PsiFile>> valueToFiles, final InspectionManager manager, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_34 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_14 $$ for (final PsiFile file : psiFilesWithDuplicates) -->Line_15 $$ CharSequence text = file.getViewProvider().getContents()[ FD ]
Line_2 $$ private static void prepareDuplicateValuesByFile(final Map<String, Set<PsiFile>> valueToFiles, final InspectionManager manager, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_4 $$ if (progress != null) [ FD ]
Line_33 $$ if (duplicatesCount[0] > 1) -->Line_34 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ CD ]
Line_3 $$ for (final String value : valueToFiles.keySet()) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.value.progress.indicator.text", value))[ FD ]
Line_19 $$ if (element != null && element.getParent() instanceof Property) -->Line_20 $$ final Property property = (Property) element.getParent()[ CD ]
Line_21 $$ if (Comparing.equal(property.getValue(), value) && element.getStartOffsetInParent() != 0) -->Line_26 $$ duplicatesCount[0]++[ CD ]
Line_11 $$ final StringBuffer message = new StringBuffer()-->Line_34 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_4 $$ if (progress != null) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.value.progress.indicator.text", value))[ CD ]
Line_18 $$ PsiElement element = file.findElementAt(offset)-->Line_21 $$ if (Comparing.equal(property.getValue(), value) && element.getStartOffsetInParent() != 0) [ FD ]
Line_21 $$ if (Comparing.equal(property.getValue(), value) && element.getStartOffsetInParent() != 0) -->Line_25 $$ surroundWithHref(message, element, true)[ CD ]
Line_16 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_29 $$ return true[ CD ]
Line_22 $$ if (duplicatesCount[0] == 0) -->Line_23 $$ message.append(InspectionsBundle.message("duplicate.property.value.problem.descriptor", property.getValue()))[ CD ]
Line_20 $$ final Property property = (Property) element.getParent()-->Line_23 $$ message.append(InspectionsBundle.message("duplicate.property.value.problem.descriptor", property.getValue()))[ FD ]
Line_2 $$ private static void prepareDuplicateValuesByFile(final Map<String, Set<PsiFile>> valueToFiles, final InspectionManager manager, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_3 $$ for (final String value : valueToFiles.keySet()) [ FD ]
Line_10 $$ StringSearcher searcher = new StringSearcher(value, true, true)-->Line_16 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() [ FD ]
Line_16 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_18 $$ PsiElement element = file.findElementAt(offset)[ FD ]
Line_11 $$ final StringBuffer message = new StringBuffer()-->Line_23 $$ message.append(InspectionsBundle.message("duplicate.property.value.problem.descriptor", property.getValue()))[ FD ]
Line_4 $$ if (progress != null) -->Line_6 $$ progress.checkCanceled()[ CD ]
Line_2 $$ private static void prepareDuplicateValuesByFile(final Map<String, Set<PsiFile>> valueToFiles, final InspectionManager manager, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_16 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() [ FD ]
Line_20 $$ final Property property = (Property) element.getParent()-->Line_21 $$ if (Comparing.equal(property.getValue(), value) && element.getStartOffsetInParent() != 0) [ FD ]
Line_2 $$ private static void prepareDuplicateValuesByFile(final Map<String, Set<PsiFile>> valueToFiles, final InspectionManager manager, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_13 $$ Set<PsiFile> psiFilesWithDuplicates = valueToFiles.get(value)[ FD ]
Line_2 $$ private static void prepareDuplicateValuesByFile(final Map<String, Set<PsiFile>> valueToFiles, final InspectionManager manager, final List<ProblemDescriptor> problemDescriptors, final PsiFile psiFile, final ProgressIndicator progress) -->Line_6 $$ progress.checkCanceled()[ FD ]
Line_3 $$ for (final String value : valueToFiles.keySet()) -->Line_8 $$ if (value.length() == 0)[ FD ]
Line_19 $$ if (element != null && element.getParent() instanceof Property) -->Line_21 $$ if (Comparing.equal(property.getValue(), value) && element.getStartOffsetInParent() != 0) [ CD ]
Line_16 $$ LowLevelSearchUtil.processTextOccurrences(text, 0, text.length(), searcher, progress, new TIntProcedure() -->Line_19 $$ if (element != null && element.getParent() instanceof Property) [ CD ]
