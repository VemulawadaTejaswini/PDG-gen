Line_7 $$ String output = writer.getBuffer().toString()-->Line_8 $$ assertCsvOutputCorrect(output)[ FD ]
Line_2 $$ public void renderAsCsvWithExporterParameters() throws Exception -->Line_9 $$ assertTrue("Delimiter is incorrect", output.contains("~"))[ CD ]
Line_7 $$ String output = writer.getBuffer().toString()-->Line_9 $$ assertTrue("Delimiter is incorrect", output.contains("~"))[ FD ]
Line_3 $$ StringWriter writer = new StringWriter()-->Line_6 $$ JasperReportsUtils.renderAsCsv(getReport(), getParameters(), getData(), writer, exporterParameters)[ FD ]
Line_2 $$ public void renderAsCsvWithExporterParameters() throws Exception -->Line_6 $$ JasperReportsUtils.renderAsCsv(getReport(), getParameters(), getData(), writer, exporterParameters)[ CD ]
Line_2 $$ public void renderAsCsvWithExporterParameters() throws Exception -->Line_8 $$ assertCsvOutputCorrect(output)[ CD ]
Line_4 $$ Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>()-->Line_5 $$ exporterParameters.put(JRCsvExporterParameter.FIELD_DELIMITER, "~")[ FD ]
Line_2 $$ public void renderAsCsvWithExporterParameters() throws Exception -->Line_5 $$ exporterParameters.put(JRCsvExporterParameter.FIELD_DELIMITER, "~")[ CD ]
Line_3 $$ StringWriter writer = new StringWriter()-->Line_7 $$ String output = writer.getBuffer().toString()[ FD ]
Line_2 $$ public void renderAsCsvWithExporterParameters() throws Exception -->Line_3 $$ StringWriter writer = new StringWriter()[ CD ]
Line_2 $$ public void renderAsCsvWithExporterParameters() throws Exception -->Line_4 $$ Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>()[ CD ]
Line_4 $$ Map<JRExporterParameter, Object> exporterParameters = new HashMap<JRExporterParameter, Object>()-->Line_6 $$ JasperReportsUtils.renderAsCsv(getReport(), getParameters(), getData(), writer, exporterParameters)[ FD ]
Line_2 $$ public void renderAsCsvWithExporterParameters() throws Exception -->Line_7 $$ String output = writer.getBuffer().toString()[ CD ]
