Line_4 $$ StringBuffer jniCleanupCode = new StringBuffer()-->Line_26 $$ buffer.append(jniCleanupCode)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_10 $$ if (javaMethod.hasDisposableArgument() && javaMethod.getNativeCode().contains("return")) [ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_10 $$ if (javaMethod.hasDisposableArgument() && javaMethod.getNativeCode().contains("return")) [ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_18 $$ buffer.append("}\n\n")[ FD ]
Line_11 $$ if (isManual) -->Line_20 $$ if (!isManual) [ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_14 $$ buffer.append("}\n\n")[ FD ]
Line_6 $$ StringBuffer wrapperArgs = new StringBuffer()-->Line_24 $$ buffer.append("\t" + wrappedMethodName + "(" + wrapperArgs.toString() + ");\n\n")[ FD ]
Line_9 $$ boolean isManual = javaMethod.isManual()-->Line_44 $$ if (!isManual) [ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_41 $$ buffer.append(jniSetupCode)[ FD ]
Line_10 $$ if (javaMethod.hasDisposableArgument() && javaMethod.getNativeCode().contains("return")) -->Line_44 $$ if (!isManual) [ CD ]
Line_9 $$ boolean isManual = javaMethod.isManual()-->Line_40 $$ if (!isManual) [ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_24 $$ buffer.append("\t" + wrappedMethodName + "(" + wrapperArgs.toString() + ");\n\n")[ FD ]
Line_6 $$ StringBuffer wrapperArgs = new StringBuffer()-->Line_30 $$ buffer.append("\t" + cMethod.getReturnType() + " " + JNI_RETURN_VALUE + " = " + wrappedMethodName + "(" + wrapperArgs.toString() + ");\n\n")[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_6 $$ StringBuffer wrapperArgs = new StringBuffer()[ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_28 $$ buffer.append("\treturn;\n")[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_13 $$ emitMethodBody(buffer, javaMethod)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_17 $$ emitMethodBody(buffer, javaMethod)[ FD ]
Line_6 $$ StringBuffer wrapperArgs = new StringBuffer()-->Line_7 $$ emitJniSetupCode(jniSetupCode, javaMethod, additionalArgs, wrapperArgs)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_7 $$ emitJniSetupCode(jniSetupCode, javaMethod, additionalArgs, wrapperArgs)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_23 $$ if (cMethod.getReturnType().equals("void")) [ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_9 $$ boolean isManual = javaMethod.isManual()[ FD ]
Line_40 $$ if (!isManual) -->Line_41 $$ buffer.append(jniSetupCode)[ CD ]
Line_9 $$ boolean isManual = javaMethod.isManual()-->Line_20 $$ if (!isManual) [ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_32 $$ buffer.append(jniCleanupCode)[ FD ]
Line_11 $$ if (isManual) -->Line_16 $$ String wrappedMethodName = emitMethodSignature(buffer, javaMethod, cMethod, additionalArgs.toString())[ CD ]
Line_4 $$ StringBuffer jniCleanupCode = new StringBuffer()-->Line_45 $$ buffer.append(jniCleanupCode)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_36 $$ buffer.append("}\n\n")[ FD ]
Line_10 $$ if (javaMethod.hasDisposableArgument() && javaMethod.getNativeCode().contains("return")) -->Line_39 $$ emitMethodSignature(buffer, javaMethod, cMethod, null)[ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_45 $$ buffer.append(jniCleanupCode)[ FD ]
Line_10 $$ if (javaMethod.hasDisposableArgument() && javaMethod.getNativeCode().contains("return")) -->Line_11 $$ if (isManual) [ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_9 $$ boolean isManual = javaMethod.isManual()[ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_16 $$ String wrappedMethodName = emitMethodSignature(buffer, javaMethod, cMethod, additionalArgs.toString())[ FD ]
Line_4 $$ StringBuffer jniCleanupCode = new StringBuffer()-->Line_8 $$ emitJniCleanupCode(jniCleanupCode, javaMethod, cMethod)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_4 $$ StringBuffer jniCleanupCode = new StringBuffer()[ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_8 $$ emitJniCleanupCode(jniCleanupCode, javaMethod, cMethod)[ CD ]
Line_9 $$ boolean isManual = javaMethod.isManual()-->Line_31 $$ if (!isManual) [ FD ]
Line_23 $$ if (cMethod.getReturnType().equals("void")) -->Line_31 $$ if (!isManual) [ CD ]
Line_5 $$ StringBuffer additionalArgs = new StringBuffer()-->Line_16 $$ String wrappedMethodName = emitMethodSignature(buffer, javaMethod, cMethod, additionalArgs.toString())[ FD ]
Line_10 $$ if (javaMethod.hasDisposableArgument() && javaMethod.getNativeCode().contains("return")) -->Line_47 $$ buffer.append("}\n\n")[ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_7 $$ emitJniSetupCode(jniSetupCode, javaMethod, additionalArgs, wrapperArgs)[ CD ]
Line_25 $$ if (!isManual) -->Line_26 $$ buffer.append(jniCleanupCode)[ CD ]
Line_10 $$ if (javaMethod.hasDisposableArgument() && javaMethod.getNativeCode().contains("return")) -->Line_43 $$ emitMethodBody(buffer, javaMethod)[ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_3 $$ StringBuffer jniSetupCode = new StringBuffer()[ CD ]
Line_3 $$ StringBuffer jniSetupCode = new StringBuffer()-->Line_7 $$ emitJniSetupCode(jniSetupCode, javaMethod, additionalArgs, wrapperArgs)[ FD ]
Line_9 $$ boolean isManual = javaMethod.isManual()-->Line_25 $$ if (!isManual) [ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_8 $$ emitJniCleanupCode(jniCleanupCode, javaMethod, cMethod)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_26 $$ buffer.append(jniCleanupCode)[ FD ]
Line_11 $$ if (isManual) -->Line_13 $$ emitMethodBody(buffer, javaMethod)[ CD ]
Line_11 $$ if (isManual) -->Line_17 $$ emitMethodBody(buffer, javaMethod)[ CD ]
Line_11 $$ if (isManual) -->Line_19 $$ emitMethodSignature(buffer, javaMethod, cMethod, null)[ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_34 $$ buffer.append("\treturn " + JNI_RETURN_VALUE + ";\n")[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_12 $$ emitMethodSignature(buffer, javaMethod, cMethod, null, false)[ FD ]
Line_11 $$ if (isManual) -->Line_12 $$ emitMethodSignature(buffer, javaMethod, cMethod, null, false)[ CD ]
Line_23 $$ if (cMethod.getReturnType().equals("void")) -->Line_24 $$ buffer.append("\t" + wrappedMethodName + "(" + wrapperArgs.toString() + ");\n\n")[ CD ]
Line_23 $$ if (cMethod.getReturnType().equals("void")) -->Line_25 $$ if (!isManual) [ CD ]
Line_3 $$ StringBuffer jniSetupCode = new StringBuffer()-->Line_41 $$ buffer.append(jniSetupCode)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_39 $$ emitMethodSignature(buffer, javaMethod, cMethod, null)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_30 $$ buffer.append("\t" + cMethod.getReturnType() + " " + JNI_RETURN_VALUE + " = " + wrappedMethodName + "(" + wrapperArgs.toString() + ");\n\n")[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_43 $$ emitMethodBody(buffer, javaMethod)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_5 $$ StringBuffer additionalArgs = new StringBuffer()[ CD ]
Line_20 $$ if (!isManual) -->Line_21 $$ buffer.append(jniSetupCode)[ CD ]
Line_44 $$ if (!isManual) -->Line_45 $$ buffer.append(jniCleanupCode)[ CD ]
Line_5 $$ StringBuffer additionalArgs = new StringBuffer()-->Line_7 $$ emitJniSetupCode(jniSetupCode, javaMethod, additionalArgs, wrapperArgs)[ FD ]
Line_4 $$ StringBuffer jniCleanupCode = new StringBuffer()-->Line_32 $$ buffer.append(jniCleanupCode)[ FD ]
Line_11 $$ if (isManual) -->Line_18 $$ buffer.append("}\n\n")[ CD ]
Line_3 $$ StringBuffer jniSetupCode = new StringBuffer()-->Line_21 $$ buffer.append(jniSetupCode)[ FD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_19 $$ emitMethodSignature(buffer, javaMethod, cMethod, null)[ FD ]
Line_10 $$ if (javaMethod.hasDisposableArgument() && javaMethod.getNativeCode().contains("return")) -->Line_40 $$ if (!isManual) [ CD ]
Line_23 $$ if (cMethod.getReturnType().equals("void")) -->Line_34 $$ buffer.append("\treturn " + JNI_RETURN_VALUE + ";\n")[ CD ]
Line_11 $$ if (isManual) -->Line_36 $$ buffer.append("}\n\n")[ CD ]
Line_23 $$ if (cMethod.getReturnType().equals("void")) -->Line_30 $$ buffer.append("\t" + cMethod.getReturnType() + " " + JNI_RETURN_VALUE + " = " + wrappedMethodName + "(" + wrapperArgs.toString() + ");\n\n")[ CD ]
Line_11 $$ if (isManual) -->Line_14 $$ buffer.append("}\n\n")[ CD ]
Line_31 $$ if (!isManual) -->Line_32 $$ buffer.append(jniCleanupCode)[ CD ]
Line_23 $$ if (cMethod.getReturnType().equals("void")) -->Line_28 $$ buffer.append("\treturn;\n")[ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_47 $$ buffer.append("}\n\n")[ FD ]
Line_11 $$ if (isManual) -->Line_23 $$ if (cMethod.getReturnType().equals("void")) [ CD ]
Line_2 $$ private void emitJavaMethod(StringBuffer buffer, JavaMethod javaMethod, CMethod cMethod) -->Line_21 $$ buffer.append(jniSetupCode)[ FD ]
