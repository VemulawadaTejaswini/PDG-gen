Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_19 $$ sb.append("  </rule>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_8 $$ sb.append("  <rule name='default' />")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_15 $$ sb = new StringBuffer()[ FD ]
Line_15 $$ sb = new StringBuffer()-->Line_25 $$ policy = parse(sb.toString())[ FD ]
Line_13 $$ policy = parse(sb.toString())-->Line_22 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user2"))[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_14 $$ assertEquals("root.user1group.user1", policy.assignAppToQueue("root.default", "user1"))[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_25 $$ policy = parse(sb.toString())[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_11 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user1"))[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_18 $$ sb.append("       <rule name='primaryGroup' create='false'/>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_17 $$ sb.append("  <rule name='nestedUserQueue' create='false'>")[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_9 $$ sb.append("</queuePlacementPolicy>")[ CD ]
Line_13 $$ policy = parse(sb.toString())-->Line_26 $$ assertEquals("root.user2group.user2", policy.assignAppToQueue("root.default", "user2"))[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_22 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user2"))[ CD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_22 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user2"))[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_16 $$ sb.append("<queuePlacementPolicy>")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_4 $$ sb.append("<queuePlacementPolicy>")[ CD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_11 $$ assertEquals("root.default", policy.assignAppToQueue("root.default", "user1"))[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_8 $$ sb.append("  <rule name='default' />")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_13 $$ policy = parse(sb.toString())[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_20 $$ sb.append("  <rule name='default' />")[ FD ]
Line_13 $$ policy = parse(sb.toString())-->Line_14 $$ assertEquals("root.user1group.user1", policy.assignAppToQueue("root.default", "user1"))[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_5 $$ sb.append("  <rule name='nestedUserQueue'>")[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_5 $$ sb.append("  <rule name='nestedUserQueue'>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_4 $$ sb.append("<queuePlacementPolicy>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_7 $$ sb.append("  </rule>")[ FD ]
Line_15 $$ sb = new StringBuffer()-->Line_20 $$ sb.append("  <rule name='default' />")[ FD ]
Line_15 $$ sb = new StringBuffer()-->Line_16 $$ sb.append("<queuePlacementPolicy>")[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_18 $$ sb.append("       <rule name='primaryGroup' create='false'/>")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_17 $$ sb.append("  <rule name='nestedUserQueue' create='false'>")[ CD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_25 $$ policy = parse(sb.toString())[ FD ]
Line_25 $$ policy = parse(sb.toString())-->Line_26 $$ assertEquals("root.user2group.user2", policy.assignAppToQueue("root.default", "user2"))[ FD ]
Line_15 $$ sb = new StringBuffer()-->Line_21 $$ sb.append("</queuePlacementPolicy>")[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_15 $$ sb = new StringBuffer()[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_21 $$ sb.append("</queuePlacementPolicy>")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_12 $$ configuredQueues.get(FSQueueType.PARENT).add("root.user1group")[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_16 $$ sb.append("<queuePlacementPolicy>")[ FD ]
Line_15 $$ sb = new StringBuffer()-->Line_17 $$ sb.append("  <rule name='nestedUserQueue' create='false'>")[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_26 $$ assertEquals("root.user2group.user2", policy.assignAppToQueue("root.default", "user2"))[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_6 $$ sb.append("       <rule name='primaryGroup' create='false'/>")[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_13 $$ policy = parse(sb.toString())[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_21 $$ sb.append("</queuePlacementPolicy>")[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_25 $$ policy = parse(sb.toString())[ FD ]
Line_15 $$ sb = new StringBuffer()-->Line_19 $$ sb.append("  </rule>")[ FD ]
Line_13 $$ policy = parse(sb.toString())-->Line_25 $$ policy = parse(sb.toString())[ FD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_9 $$ sb.append("</queuePlacementPolicy>")[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_7 $$ sb.append("  </rule>")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())[ CD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_13 $$ policy = parse(sb.toString())[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_23 $$ configuredQueues.get(FSQueueType.PARENT).add("root.user2group")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_3 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_3 $$ StringBuffer sb = new StringBuffer()-->Line_6 $$ sb.append("       <rule name='primaryGroup' create='false'/>")[ FD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_14 $$ assertEquals("root.user1group.user1", policy.assignAppToQueue("root.default", "user1"))[ FD ]
Line_10 $$ QueuePlacementPolicy policy = parse(sb.toString())-->Line_26 $$ assertEquals("root.user2group.user2", policy.assignAppToQueue("root.default", "user2"))[ FD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_24 $$ configuredQueues.get(FSQueueType.LEAF).add("root.user2group.user2")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_20 $$ sb.append("  <rule name='default' />")[ CD ]
Line_2 $$ public void testNestedUserQueuePrimaryGroupNoCreate() throws Exception -->Line_19 $$ sb.append("  </rule>")[ CD ]
Line_15 $$ sb = new StringBuffer()-->Line_18 $$ sb.append("       <rule name='primaryGroup' create='false'/>")[ FD ]
