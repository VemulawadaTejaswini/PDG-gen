Line_13 $$ if (wasIdentifier)-->Line_14 $$ error(AnalysisScopeBundle.message("error.packageset.token.expectations", getTokenText(lexer)), lexer)[ CD ]
Line_12 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER) -->Line_15 $$ wasIdentifier = true[ CD ]
Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) -->Line_11 $$ wasIdentifier = false[ CD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_16 $$ pattern.append(getTokenText(lexer))[ FD ]
Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) -->Line_8 $$ wasIdentifier = false[ CD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_10 $$ pattern.append('*')[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_25 $$ return pattern.toString()[ FD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_14 $$ error(AnalysisScopeBundle.message("error.packageset.token.expectations", getTokenText(lexer)), lexer)[ FD ]
Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) -->Line_10 $$ pattern.append('*')[ CD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_25 $$ return pattern.toString()[ CD ]
Line_22 $$ if (pattern.length() == 0) -->Line_23 $$ error(AnalysisScopeBundle.message("error.packageset.pattern.expectations"), lexer)[ CD ]
Line_5 $$ while (true) -->Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) [ CD ]
Line_5 $$ while (true) -->Line_20 $$ lexer.advance()[ CD ]
Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) -->Line_12 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER) [ CD ]
Line_8 $$ wasIdentifier = false-->Line_11 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) [ FD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_4 $$ boolean wasIdentifier = false[ CD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_3 $$ StringBuffer pattern = new StringBuffer()[ CD ]
Line_4 $$ boolean wasIdentifier = false-->Line_8 $$ wasIdentifier = false[ FD ]
Line_4 $$ boolean wasIdentifier = false-->Line_15 $$ wasIdentifier = true[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_7 $$ pattern.append('.')[ FD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_16 $$ pattern.append(getTokenText(lexer))[ FD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_5 $$ while (true) [ CD ]
Line_11 $$ wasIdentifier = false-->Line_15 $$ wasIdentifier = true[ FD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) [ FD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_20 $$ lexer.advance()[ FD ]
Line_4 $$ boolean wasIdentifier = false-->Line_11 $$ wasIdentifier = false[ FD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_12 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER) [ FD ]
Line_8 $$ wasIdentifier = false-->Line_15 $$ wasIdentifier = true[ FD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_22 $$ if (pattern.length() == 0) [ CD ]
Line_12 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER) -->Line_13 $$ if (wasIdentifier)[ CD ]
Line_12 $$ if (lexer.getTokenType() == ScopeTokenTypes.IDENTIFIER) -->Line_16 $$ pattern.append(getTokenText(lexer))[ CD ]
Line_2 $$ private static String parseAspectJPattern(Lexer lexer) throws ParsingException -->Line_23 $$ error(AnalysisScopeBundle.message("error.packageset.pattern.expectations"), lexer)[ FD ]
Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) -->Line_9 $$ if (lexer.getTokenType() == ScopeTokenTypes.ASTERISK) [ CD ]
Line_3 $$ StringBuffer pattern = new StringBuffer()-->Line_22 $$ if (pattern.length() == 0) [ FD ]
Line_6 $$ if (lexer.getTokenType() == ScopeTokenTypes.DOT) -->Line_7 $$ pattern.append('.')[ CD ]
