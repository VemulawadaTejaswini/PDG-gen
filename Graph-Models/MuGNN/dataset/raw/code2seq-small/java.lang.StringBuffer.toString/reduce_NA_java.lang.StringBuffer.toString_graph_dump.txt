Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_26 $$ reporter.setStatus("finished " + field + " ::host = " + hostName)[ FD ]
Line_14 $$ fSum += Float.parseFloat(values.next().toString())-->Line_15 $$ output.collect(key, new Text(String.valueOf(fSum)))[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_21 $$ while (values.hasNext()) [ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_9 $$ reporter.setStatus("finished " + field + " ::host = " + hostName)[ FD ]
Line_13 $$ float fSum = 0-->Line_14 $$ fSum += Float.parseFloat(values.next().toString())[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_16 $$ reporter.setStatus("finished " + field + " ::host = " + hostName)[ FD ]
Line_19 $$ if (field.startsWith(VALUE_TYPE_LONG)) -->Line_20 $$ long lSum = 0[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_12 $$ if (field.startsWith(VALUE_TYPE_FLOAT)) [ CD ]
Line_12 $$ if (field.startsWith(VALUE_TYPE_FLOAT)) -->Line_13 $$ float fSum = 0[ CD ]
Line_19 $$ if (field.startsWith(VALUE_TYPE_LONG)) -->Line_21 $$ while (values.hasNext()) [ CD ]
Line_13 $$ float fSum = 0-->Line_15 $$ output.collect(key, new Text(String.valueOf(fSum)))[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_4 $$ reporter.setStatus("starting " + field + " ::host = " + hostName)[ CD ]
Line_12 $$ if (field.startsWith(VALUE_TYPE_FLOAT)) -->Line_15 $$ output.collect(key, new Text(String.valueOf(fSum)))[ CD ]
Line_12 $$ if (field.startsWith(VALUE_TYPE_FLOAT)) -->Line_17 $$ return[ CD ]
Line_12 $$ if (field.startsWith(VALUE_TYPE_FLOAT)) -->Line_16 $$ reporter.setStatus("finished " + field + " ::host = " + hostName)[ CD ]
Line_22 $$ lSum += Long.parseLong(values.next().toString())-->Line_24 $$ output.collect(key, new Text(String.valueOf(lSum)))[ FD ]
Line_3 $$ String field = key.toString()-->Line_12 $$ if (field.startsWith(VALUE_TYPE_FLOAT)) [ FD ]
Line_20 $$ long lSum = 0-->Line_24 $$ output.collect(key, new Text(String.valueOf(lSum)))[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_8 $$ output.collect(key, new Text(sSum.toString()))[ FD ]
Line_3 $$ String field = key.toString()-->Line_19 $$ if (field.startsWith(VALUE_TYPE_LONG)) [ FD ]
Line_6 $$ StringBuffer sSum = new StringBuffer()-->Line_8 $$ output.collect(key, new Text(sSum.toString()))[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_3 $$ String field = key.toString()[ FD ]
Line_5 $$ if (field.startsWith(VALUE_TYPE_STRING)) -->Line_9 $$ reporter.setStatus("finished " + field + " ::host = " + hostName)[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_5 $$ if (field.startsWith(VALUE_TYPE_STRING)) [ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_14 $$ while (values.hasNext()) fSum += Float.parseFloat(values.next().toString())[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_19 $$ if (field.startsWith(VALUE_TYPE_LONG)) [ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_7 $$ sSum.append(values.next().toString()).append(";")[ FD ]
Line_5 $$ if (field.startsWith(VALUE_TYPE_STRING)) -->Line_7 $$ while (values.hasNext()) sSum.append(values.next().toString()).append(";")[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_15 $$ output.collect(key, new Text(String.valueOf(fSum)))[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_14 $$ fSum += Float.parseFloat(values.next().toString())[ FD ]
Line_21 $$ while (values.hasNext()) -->Line_22 $$ lSum += Long.parseLong(values.next().toString())[ CD ]
Line_19 $$ if (field.startsWith(VALUE_TYPE_LONG)) -->Line_24 $$ output.collect(key, new Text(String.valueOf(lSum)))[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_22 $$ lSum += Long.parseLong(values.next().toString())[ FD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_7 $$ while (values.hasNext()) sSum.append(values.next().toString()).append(";")[ FD ]
Line_5 $$ if (field.startsWith(VALUE_TYPE_STRING)) -->Line_10 $$ return[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_26 $$ reporter.setStatus("finished " + field + " ::host = " + hostName)[ CD ]
Line_6 $$ StringBuffer sSum = new StringBuffer()-->Line_7 $$ sSum.append(values.next().toString()).append(";")[ FD ]
Line_5 $$ if (field.startsWith(VALUE_TYPE_STRING)) -->Line_8 $$ output.collect(key, new Text(sSum.toString()))[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_3 $$ String field = key.toString()[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_4 $$ reporter.setStatus("starting " + field + " ::host = " + hostName)[ FD ]
Line_3 $$ String field = key.toString()-->Line_5 $$ if (field.startsWith(VALUE_TYPE_STRING)) [ FD ]
Line_5 $$ if (field.startsWith(VALUE_TYPE_STRING)) -->Line_6 $$ StringBuffer sSum = new StringBuffer()[ CD ]
Line_2 $$ public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException -->Line_24 $$ output.collect(key, new Text(String.valueOf(lSum)))[ FD ]
Line_12 $$ if (field.startsWith(VALUE_TYPE_FLOAT)) -->Line_14 $$ while (values.hasNext()) fSum += Float.parseFloat(values.next().toString())[ CD ]
Line_20 $$ long lSum = 0-->Line_22 $$ lSum += Long.parseLong(values.next().toString())[ FD ]
