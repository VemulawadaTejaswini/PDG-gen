Line_6 $$ for (Map.Entry<GroupDescriptor, Set<T>> entry : sortedMap.entrySet()) -->Line_9 $$ buffer.append(entry.getKey().getId())[ FD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_11 $$ buffer.append(value)[ FD ]
Line_2 $$ public static <T extends UsageDescriptor> String convertUsages(Map<GroupDescriptor, Set<T>> map) -->Line_4 $$ final Map<GroupDescriptor, Set<T>> sortedMap = sortDescriptorsByPriority(map)[ CD ]
Line_8 $$ if (!StringUtil.isEmptyOrSpaces(value)) -->Line_10 $$ buffer.append(GROUP_SEPARATOR)[ CD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_10 $$ buffer.append(GROUP_SEPARATOR)[ FD ]
Line_2 $$ public static <T extends UsageDescriptor> String convertUsages(Map<GroupDescriptor, Set<T>> map) -->Line_5 $$ StringBuffer buffer = new StringBuffer()[ CD ]
Line_8 $$ if (!StringUtil.isEmptyOrSpaces(value)) -->Line_9 $$ buffer.append(entry.getKey().getId())[ CD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_9 $$ buffer.append(entry.getKey().getId())[ FD ]
Line_8 $$ if (!StringUtil.isEmptyOrSpaces(value)) -->Line_12 $$ buffer.append(GROUPS_SEPARATOR)[ CD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_15 $$ return buffer.toString()[ FD ]
Line_7 $$ String value = convertValueMap(entry.getValue())-->Line_11 $$ buffer.append(value)[ FD ]
Line_2 $$ public static <T extends UsageDescriptor> String convertUsages(Map<GroupDescriptor, Set<T>> map) -->Line_15 $$ return buffer.toString()[ CD ]
Line_8 $$ if (!StringUtil.isEmptyOrSpaces(value)) -->Line_11 $$ buffer.append(value)[ CD ]
Line_4 $$ final Map<GroupDescriptor, Set<T>> sortedMap = sortDescriptorsByPriority(map)-->Line_6 $$ for (Map.Entry<GroupDescriptor, Set<T>> entry : sortedMap.entrySet()) [ FD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_12 $$ buffer.append(GROUPS_SEPARATOR)[ FD ]
Line_7 $$ String value = convertValueMap(entry.getValue())-->Line_8 $$ if (!StringUtil.isEmptyOrSpaces(value)) [ FD ]
Line_6 $$ for (Map.Entry<GroupDescriptor, Set<T>> entry : sortedMap.entrySet()) -->Line_7 $$ String value = convertValueMap(entry.getValue())[ FD ]
Line_2 $$ public static <T extends UsageDescriptor> String convertUsages(Map<GroupDescriptor, Set<T>> map) -->Line_4 $$ final Map<GroupDescriptor, Set<T>> sortedMap = sortDescriptorsByPriority(map)[ FD ]
