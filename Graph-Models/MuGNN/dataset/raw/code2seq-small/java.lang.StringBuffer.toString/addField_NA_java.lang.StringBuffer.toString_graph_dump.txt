Line_5 $$ PsiField field = createField(fieldVisibility, fieldInitializerNeeded, defaultClassFieldType())-->Line_15 $$ myClass.add(field)[ FD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_19 $$ if (myGenerateGetter) [ CD ]
Line_21 $$ StringBuffer getterBuffer = new StringBuffer()-->Line_22 $$ getterBuffer.append(getterVisibility)[ FD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_3 $$ final String fieldVisibility = getFieldVisibility(usages)[ FD ]
Line_4 $$ final boolean fieldInitializerNeeded = isFieldInitializerNeeded()-->Line_5 $$ PsiField field = createField(fieldVisibility, fieldInitializerNeeded, defaultClassFieldType())[ FD ]
Line_19 $$ if (myGenerateGetter) -->Line_31 $$ myClass.add(getter)[ CD ]
Line_19 $$ if (myGenerateGetter) -->Line_25 $$ getterBuffer.append("() [ CD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_3 $$ final String fieldVisibility = getFieldVisibility(usages)[ CD ]
Line_20 $$ final String getterVisibility = PsiModifier.PUBLIC-->Line_22 $$ getterBuffer.append(getterVisibility)[ FD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_15 $$ myClass.add(field)[ CD ]
Line_28 $$ PsiMethod getter = myFactory.createMethodFromText(getterBuffer.toString(), myClass)-->Line_29 $$ getter.getReturnTypeElement().replace(myFactory.createTypeElement(myBaseClassType))[ FD ]
Line_3 $$ final String fieldVisibility = getFieldVisibility(usages)-->Line_5 $$ PsiField field = createField(fieldVisibility, fieldInitializerNeeded, defaultClassFieldType())[ FD ]
Line_19 $$ if (myGenerateGetter) -->Line_30 $$ getter = (PsiMethod) CodeStyleManager.getInstance(myProject).reformat(getter)[ CD ]
Line_21 $$ StringBuffer getterBuffer = new StringBuffer()-->Line_27 $$ getterBuffer.append(";\n}")[ FD ]
Line_8 $$ if (fieldInitializerNeeded) -->Line_9 $$ final PsiJavaCodeReferenceElement classReferenceElement = myFactory.createReferenceElementByType(myBaseClassType)[ CD ]
Line_8 $$ if (fieldInitializerNeeded) -->Line_10 $$ PsiNewExpression newExpression = (PsiNewExpression) field.getInitializer()[ CD ]
Line_19 $$ if (myGenerateGetter) -->Line_26 $$ getterBuffer.append(myFieldName)[ CD ]
Line_9 $$ final PsiJavaCodeReferenceElement classReferenceElement = myFactory.createReferenceElementByType(myBaseClassType)-->Line_11 $$ newExpression.getClassReference().replace(classReferenceElement)[ FD ]
Line_28 $$ PsiMethod getter = myFactory.createMethodFromText(getterBuffer.toString(), myClass)-->Line_30 $$ getter = (PsiMethod) CodeStyleManager.getInstance(myProject).reformat(getter)[ FD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_6 $$ if (!myIsInnerClassNeeded) [ CD ]
Line_6 $$ if (!myIsInnerClassNeeded) -->Line_7 $$ field.getTypeElement().replace(myFactory.createTypeElement(myBaseClassType))[ CD ]
Line_19 $$ if (myGenerateGetter) -->Line_28 $$ PsiMethod getter = myFactory.createMethodFromText(getterBuffer.toString(), myClass)[ CD ]
Line_21 $$ StringBuffer getterBuffer = new StringBuffer()-->Line_24 $$ getterBuffer.append(myGetterName)[ FD ]
Line_16 $$ if (!fieldInitializerNeeded) -->Line_17 $$ fixConstructors()[ CD ]
Line_19 $$ if (myGenerateGetter) -->Line_29 $$ getter.getReturnTypeElement().replace(myFactory.createTypeElement(myBaseClassType))[ CD ]
Line_21 $$ StringBuffer getterBuffer = new StringBuffer()-->Line_25 $$ getterBuffer.append("() [ FD ]
Line_28 $$ PsiMethod getter = myFactory.createMethodFromText(getterBuffer.toString(), myClass)-->Line_31 $$ myClass.add(getter)[ FD ]
Line_5 $$ PsiField field = createField(fieldVisibility, fieldInitializerNeeded, defaultClassFieldType())-->Line_14 $$ field = (PsiField) CodeStyleManager.getInstance(myProject).reformat(field)[ FD ]
Line_4 $$ final boolean fieldInitializerNeeded = isFieldInitializerNeeded()-->Line_16 $$ if (!fieldInitializerNeeded) [ FD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_4 $$ final boolean fieldInitializerNeeded = isFieldInitializerNeeded()[ CD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_5 $$ PsiField field = createField(fieldVisibility, fieldInitializerNeeded, defaultClassFieldType())[ CD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_16 $$ if (!fieldInitializerNeeded) [ CD ]
Line_19 $$ if (myGenerateGetter) -->Line_23 $$ getterBuffer.append(" Object ")[ CD ]
Line_19 $$ if (myGenerateGetter) -->Line_24 $$ getterBuffer.append(myGetterName)[ CD ]
Line_21 $$ StringBuffer getterBuffer = new StringBuffer()-->Line_26 $$ getterBuffer.append(myFieldName)[ FD ]
Line_21 $$ StringBuffer getterBuffer = new StringBuffer()-->Line_28 $$ PsiMethod getter = myFactory.createMethodFromText(getterBuffer.toString(), myClass)[ FD ]
Line_19 $$ if (myGenerateGetter) -->Line_22 $$ getterBuffer.append(getterVisibility)[ CD ]
Line_30 $$ getter = (PsiMethod) CodeStyleManager.getInstance(myProject).reformat(getter)-->Line_31 $$ myClass.add(getter)[ FD ]
Line_14 $$ field = (PsiField) CodeStyleManager.getInstance(myProject).reformat(field)-->Line_15 $$ myClass.add(field)[ FD ]
Line_2 $$ private void addField(UsageInfo[] usages) throws IncorrectOperationException -->Line_14 $$ field = (PsiField) CodeStyleManager.getInstance(myProject).reformat(field)[ CD ]
Line_6 $$ if (!myIsInnerClassNeeded) -->Line_8 $$ if (fieldInitializerNeeded) [ CD ]
Line_19 $$ if (myGenerateGetter) -->Line_20 $$ final String getterVisibility = PsiModifier.PUBLIC[ CD ]
Line_21 $$ StringBuffer getterBuffer = new StringBuffer()-->Line_23 $$ getterBuffer.append(" Object ")[ FD ]
Line_5 $$ PsiField field = createField(fieldVisibility, fieldInitializerNeeded, defaultClassFieldType())-->Line_10 $$ PsiNewExpression newExpression = (PsiNewExpression) field.getInitializer()[ FD ]
Line_19 $$ if (myGenerateGetter) -->Line_27 $$ getterBuffer.append(";\n}")[ CD ]
Line_19 $$ if (myGenerateGetter) -->Line_21 $$ StringBuffer getterBuffer = new StringBuffer()[ CD ]
Line_8 $$ if (fieldInitializerNeeded) -->Line_11 $$ newExpression.getClassReference().replace(classReferenceElement)[ CD ]
Line_10 $$ PsiNewExpression newExpression = (PsiNewExpression) field.getInitializer()-->Line_11 $$ newExpression.getClassReference().replace(classReferenceElement)[ FD ]
Line_5 $$ PsiField field = createField(fieldVisibility, fieldInitializerNeeded, defaultClassFieldType())-->Line_7 $$ field.getTypeElement().replace(myFactory.createTypeElement(myBaseClassType))[ FD ]
