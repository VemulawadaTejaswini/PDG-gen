Line_2 $$ private static String[] getSuggestionsByValue(@NotNull String stringValue) -->Line_5 $$ boolean prevIsUpperCase = false[ CD ]
Line_5 $$ boolean prevIsUpperCase = false-->Line_9 $$ if (currentWord.length() > 0 && !prevIsUpperCase) [ FD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_11 $$ currentWord = new StringBuffer()[ FD ]
Line_3 $$ List<String> result = new ArrayList<String>()-->Line_17 $$ if (Character.isJavaIdentifierStart(c) || currentWord.length() > 0 || !result.isEmpty()) [ FD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_28 $$ if (currentWord.length() > 0) [ FD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_17 $$ if (Character.isJavaIdentifierStart(c) || currentWord.length() > 0 || !result.isEmpty()) [ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_17 $$ if (Character.isJavaIdentifierStart(c) || currentWord.length() > 0 || !result.isEmpty()) [ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_15 $$ currentWord.append(Character.toUpperCase(c))[ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_22 $$ result.add(currentWord.toString())[ FD ]
Line_2 $$ private static String[] getSuggestionsByValue(@NotNull String stringValue) -->Line_6 $$ for (int i = 0; i < stringValue.length(); i++) [ CD ]
Line_16 $$ if (Character.isJavaIdentifierPart(c) && c != '_') -->Line_17 $$ if (Character.isJavaIdentifierStart(c) || currentWord.length() > 0 || !result.isEmpty()) [ CD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_28 $$ if (currentWord.length() > 0) [ FD ]
Line_7 $$ final char c = stringValue.charAt(i)-->Line_26 $$ prevIsUpperCase = Character.isUpperCase(c)[ FD ]
Line_6 $$ for (int i = 0; i < stringValue.length(); i++) -->Line_7 $$ final char c = stringValue.charAt(i)[ CD ]
Line_16 $$ if (Character.isJavaIdentifierPart(c) && c != '_') -->Line_21 $$ if (currentWord.length() > 0) [ CD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_13 $$ currentWord.append(c)[ FD ]
Line_17 $$ if (Character.isJavaIdentifierStart(c) || currentWord.length() > 0 || !result.isEmpty()) -->Line_18 $$ currentWord.append(c)[ CD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_10 $$ result.add(currentWord.toString())[ FD ]
Line_2 $$ private static String[] getSuggestionsByValue(@NotNull String stringValue) -->Line_3 $$ List<String> result = new ArrayList<String>()[ CD ]
Line_7 $$ final char c = stringValue.charAt(i)-->Line_8 $$ if (Character.isUpperCase(c)) [ FD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_17 $$ if (Character.isJavaIdentifierStart(c) || currentWord.length() > 0 || !result.isEmpty()) [ FD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_10 $$ result.add(currentWord.toString())[ FD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_9 $$ if (currentWord.length() > 0 && !prevIsUpperCase) [ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_29 $$ result.add(currentWord.toString())[ FD ]
Line_2 $$ private static String[] getSuggestionsByValue(@NotNull String stringValue) -->Line_6 $$ for (int i = 0; i < stringValue.length(); i++) [ FD ]
Line_2 $$ private static String[] getSuggestionsByValue(@NotNull String stringValue) -->Line_31 $$ return ArrayUtil.toStringArray(result)[ CD ]
Line_7 $$ final char c = stringValue.charAt(i)-->Line_16 $$ if (Character.isJavaIdentifierPart(c) && c != '_') [ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_10 $$ result.add(currentWord.toString())[ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_28 $$ if (currentWord.length() > 0) [ FD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_22 $$ result.add(currentWord.toString())[ FD ]
Line_14 $$ if (Character.isLowerCase(c)) -->Line_16 $$ if (Character.isJavaIdentifierPart(c) && c != '_') [ CD ]
Line_7 $$ final char c = stringValue.charAt(i)-->Line_17 $$ if (Character.isJavaIdentifierStart(c) || currentWord.length() > 0 || !result.isEmpty()) [ FD ]
Line_7 $$ final char c = stringValue.charAt(i)-->Line_18 $$ currentWord.append(c)[ FD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_21 $$ if (currentWord.length() > 0) [ FD ]
Line_26 $$ prevIsUpperCase = Character.isUpperCase(c)-->Line_9 $$ if (currentWord.length() > 0 && !prevIsUpperCase) [ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_18 $$ currentWord.append(c)[ FD ]
Line_8 $$ if (Character.isUpperCase(c)) -->Line_14 $$ if (Character.isLowerCase(c)) [ CD ]
Line_9 $$ if (currentWord.length() > 0 && !prevIsUpperCase) -->Line_11 $$ currentWord = new StringBuffer()[ CD ]
Line_8 $$ if (Character.isUpperCase(c)) -->Line_9 $$ if (currentWord.length() > 0 && !prevIsUpperCase) [ CD ]
Line_14 $$ if (Character.isLowerCase(c)) -->Line_15 $$ currentWord.append(Character.toUpperCase(c))[ CD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_15 $$ currentWord.append(Character.toUpperCase(c))[ FD ]
Line_21 $$ if (currentWord.length() > 0) -->Line_22 $$ result.add(currentWord.toString())[ CD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_22 $$ result.add(currentWord.toString())[ FD ]
Line_2 $$ private static String[] getSuggestionsByValue(@NotNull String stringValue) -->Line_28 $$ if (currentWord.length() > 0) [ CD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_21 $$ if (currentWord.length() > 0) [ FD ]
Line_3 $$ List<String> result = new ArrayList<String>()-->Line_29 $$ result.add(currentWord.toString())[ FD ]
Line_2 $$ private static String[] getSuggestionsByValue(@NotNull String stringValue) -->Line_4 $$ StringBuffer currentWord = new StringBuffer()[ CD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_18 $$ currentWord.append(c)[ FD ]
Line_21 $$ if (currentWord.length() > 0) -->Line_23 $$ currentWord = new StringBuffer()[ CD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_29 $$ result.add(currentWord.toString())[ FD ]
Line_7 $$ final char c = stringValue.charAt(i)-->Line_13 $$ currentWord.append(c)[ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_9 $$ if (currentWord.length() > 0 && !prevIsUpperCase) [ FD ]
Line_23 $$ currentWord = new StringBuffer()-->Line_13 $$ currentWord.append(c)[ FD ]
Line_6 $$ for (int i = 0; i < stringValue.length(); i++) -->Line_8 $$ if (Character.isUpperCase(c)) [ CD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_15 $$ currentWord.append(Character.toUpperCase(c))[ FD ]
Line_9 $$ if (currentWord.length() > 0 && !prevIsUpperCase) -->Line_10 $$ result.add(currentWord.toString())[ CD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_23 $$ currentWord = new StringBuffer()[ FD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_29 $$ result.add(currentWord.toString())[ FD ]
Line_6 $$ for (int i = 0; i < stringValue.length(); i++) -->Line_7 $$ final char c = stringValue.charAt(i)[ FD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_9 $$ if (currentWord.length() > 0 && !prevIsUpperCase) [ FD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_18 $$ currentWord.append(c)[ FD ]
Line_7 $$ final char c = stringValue.charAt(i)-->Line_14 $$ if (Character.isLowerCase(c)) [ FD ]
Line_2 $$ private static String[] getSuggestionsByValue(@NotNull String stringValue) -->Line_7 $$ final char c = stringValue.charAt(i)[ FD ]
Line_7 $$ final char c = stringValue.charAt(i)-->Line_15 $$ currentWord.append(Character.toUpperCase(c))[ FD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_23 $$ currentWord = new StringBuffer()[ FD ]
Line_11 $$ currentWord = new StringBuffer()-->Line_13 $$ currentWord.append(c)[ FD ]
Line_3 $$ List<String> result = new ArrayList<String>()-->Line_22 $$ result.add(currentWord.toString())[ FD ]
Line_6 $$ for (int i = 0; i < stringValue.length(); i++) -->Line_26 $$ prevIsUpperCase = Character.isUpperCase(c)[ CD ]
Line_3 $$ List<String> result = new ArrayList<String>()-->Line_10 $$ result.add(currentWord.toString())[ FD ]
Line_5 $$ boolean prevIsUpperCase = false-->Line_26 $$ prevIsUpperCase = Character.isUpperCase(c)[ FD ]
Line_3 $$ List<String> result = new ArrayList<String>()-->Line_31 $$ return ArrayUtil.toStringArray(result)[ FD ]
Line_8 $$ if (Character.isUpperCase(c)) -->Line_13 $$ currentWord.append(c)[ CD ]
Line_28 $$ if (currentWord.length() > 0) -->Line_29 $$ result.add(currentWord.toString())[ CD ]
Line_4 $$ StringBuffer currentWord = new StringBuffer()-->Line_21 $$ if (currentWord.length() > 0) [ FD ]
