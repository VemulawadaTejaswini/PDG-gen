Line_10 $$ InetSocketAddress address = NetUtils.createSocketAddr(hsAddress, getDefaultJHSWebappPort(), getDefaultJHSWebappURLWithoutScheme())-->Line_17 $$ sb.append(":").append(address.getPort())[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_6 $$ String port = it.next()[ CD ]
Line_3 $$ String addr = getJHSWebappURLWithoutScheme(conf)-->Line_8 $$ String host = ADDR_SPLITTER.split(addr).iterator().next()[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_12 $$ if (address.getAddress().isAnyLocalAddress() || address.getAddress().isLoopbackAddress()) [ CD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_20 $$ sb.append(jobId.toString())[ CD ]
Line_11 $$ StringBuffer sb = new StringBuffer()-->Line_15 $$ sb.append(address.getHostName())[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_19 $$ JobID jobId = TypeConverter.fromYarn(appId)[ CD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_7 $$ addr = conf.get(JHAdminConfig.MR_HISTORY_ADDRESS, JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS)[ CD ]
Line_3 $$ String addr = getJHSWebappURLWithoutScheme(conf)-->Line_7 $$ addr = conf.get(JHAdminConfig.MR_HISTORY_ADDRESS, JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS)[ FD ]
Line_8 $$ String host = ADDR_SPLITTER.split(addr).iterator().next()-->Line_9 $$ String hsAddress = JOINER.join(host, ":", port)[ FD ]
Line_4 $$ Iterator<String> it = ADDR_SPLITTER.split(addr).iterator()-->Line_5 $$ it.next()[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_7 $$ addr = conf.get(JHAdminConfig.MR_HISTORY_ADDRESS, JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS)[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_9 $$ String hsAddress = JOINER.join(host, ":", port)[ CD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_11 $$ StringBuffer sb = new StringBuffer()[ CD ]
Line_10 $$ InetSocketAddress address = NetUtils.createSocketAddr(hsAddress, getDefaultJHSWebappPort(), getDefaultJHSWebappURLWithoutScheme())-->Line_12 $$ if (address.getAddress().isAnyLocalAddress() || address.getAddress().isLoopbackAddress()) [ FD ]
Line_11 $$ StringBuffer sb = new StringBuffer()-->Line_18 $$ sb.append("/jobhistory/job/")[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_8 $$ String host = ADDR_SPLITTER.split(addr).iterator().next()[ CD ]
Line_19 $$ JobID jobId = TypeConverter.fromYarn(appId)-->Line_20 $$ sb.append(jobId.toString())[ FD ]
Line_3 $$ String addr = getJHSWebappURLWithoutScheme(conf)-->Line_4 $$ Iterator<String> it = ADDR_SPLITTER.split(addr).iterator()[ FD ]
Line_12 $$ if (address.getAddress().isAnyLocalAddress() || address.getAddress().isLoopbackAddress()) -->Line_13 $$ sb.append(InetAddress.getLocalHost().getCanonicalHostName())[ CD ]
Line_11 $$ StringBuffer sb = new StringBuffer()-->Line_20 $$ sb.append(jobId.toString())[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_18 $$ sb.append("/jobhistory/job/")[ CD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_19 $$ JobID jobId = TypeConverter.fromYarn(appId)[ FD ]
Line_7 $$ addr = conf.get(JHAdminConfig.MR_HISTORY_ADDRESS, JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS)-->Line_8 $$ String host = ADDR_SPLITTER.split(addr).iterator().next()[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_3 $$ String addr = getJHSWebappURLWithoutScheme(conf)[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_10 $$ InetSocketAddress address = NetUtils.createSocketAddr(hsAddress, getDefaultJHSWebappPort(), getDefaultJHSWebappURLWithoutScheme())[ CD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_17 $$ sb.append(":").append(address.getPort())[ CD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_21 $$ return sb.toString()[ CD ]
Line_11 $$ StringBuffer sb = new StringBuffer()-->Line_13 $$ sb.append(InetAddress.getLocalHost().getCanonicalHostName())[ FD ]
Line_10 $$ InetSocketAddress address = NetUtils.createSocketAddr(hsAddress, getDefaultJHSWebappPort(), getDefaultJHSWebappURLWithoutScheme())-->Line_15 $$ sb.append(address.getHostName())[ FD ]
Line_4 $$ Iterator<String> it = ADDR_SPLITTER.split(addr).iterator()-->Line_6 $$ String port = it.next()[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_5 $$ it.next()[ CD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_4 $$ Iterator<String> it = ADDR_SPLITTER.split(addr).iterator()[ CD ]
Line_11 $$ StringBuffer sb = new StringBuffer()-->Line_17 $$ sb.append(":").append(address.getPort())[ FD ]
Line_12 $$ if (address.getAddress().isAnyLocalAddress() || address.getAddress().isLoopbackAddress()) -->Line_15 $$ sb.append(address.getHostName())[ CD ]
Line_11 $$ StringBuffer sb = new StringBuffer()-->Line_21 $$ return sb.toString()[ FD ]
Line_9 $$ String hsAddress = JOINER.join(host, ":", port)-->Line_10 $$ InetSocketAddress address = NetUtils.createSocketAddr(hsAddress, getDefaultJHSWebappPort(), getDefaultJHSWebappURLWithoutScheme())[ FD ]
Line_2 $$ public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf, ApplicationId appId) throws UnknownHostException -->Line_3 $$ String addr = getJHSWebappURLWithoutScheme(conf)[ CD ]
Line_6 $$ String port = it.next()-->Line_9 $$ String hsAddress = JOINER.join(host, ":", port)[ FD ]
