Line_14 $$ assignables = "new HashSet<Class>(Arrays.asList("-->Line_27 $$ assignables = null[ FD ]
Line_16 $$ for (JType i : c.getFlattenedSupertypeHierarchy()) -->Line_36 $$ if (!isVisible(i) || i.equals(t))[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_66 $$ if (c.getFields() != null && c.getFields().length > 0) [ FD ]
Line_53 $$ if (c != null) -->Line_89 $$ createTypeInvokables(c, varName, "Method", c.getMethods())[ CD ]
Line_53 $$ if (c != null) -->Line_98 $$ if (c.isEnum() != null) [ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_69 $$ String enclosingType = getType(c)[ FD ]
Line_68 $$ for (JField f : c.getFields()) -->Line_74 $$ pb("    new Field(\"" + f.getName() + "\", " + enclosingType + ", " + fieldType + ", " + f.isFinal() + ", " + f.isDefaultAccess() + ", " + f.isPrivate() + ", " + f.isProtected() + ", " + f.isPublic() + ", " + f.isStatic() + ", " + f.isTransient() + ", " + f.isVolatile() + ", " + setterGetter + ", " + setterGetter + ", " + elementType + ", " + annotations + "), ")[ FD ]
Line_9 $$ if (c != null && (isVisible(c.getSuperclass())))-->Line_10 $$ superClass = c.getSuperclass().getErasedType().getQualifiedSourceName() + ".class"[ CD ]
Line_98 $$ if (c.isEnum() != null) -->Line_99 $$ JEnumConstant[] enumConstants = c.isEnum().getEnumConstants()[ CD ]
Line_15 $$ boolean used = false-->Line_22 $$ used = true[ FD ]
Line_14 $$ assignables = "new HashSet<Class>(Arrays.asList("-->Line_21 $$ assignables += i.getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_48 $$ String varName = "c" + id-->Line_91 $$ createTypeInvokables(c, varName, "Constructor", c.getConstructors())[ FD ]
Line_70 $$ String fieldType = getType(f.getType())-->Line_78 $$ stub.type = fieldType[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_52 $$ pb(varName + " = new Type(\"" + name + "\", " + id + ", " + name + ".class, " + superClass + ", " + assignables + ", " + interfaces + ");")[ CD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_118 $$ return buffer.toString()[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_58 $$ if (c.isMemberType())[ FD ]
Line_12 $$ String interfaces = null-->Line_46 $$ interfaces = null[ FD ]
Line_53 $$ if (c != null) -->Line_107 $$ Annotation[] annotations = c.getDeclaredAnnotations()[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_98 $$ if (c.isEnum() != null) [ FD ]
Line_44 $$ interfaces += "))"-->Line_46 $$ interfaces = null[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_16 $$ for (JType i : c.getFlattenedSupertypeHierarchy()) [ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_63 $$ pb(varName + ".isStatic = " + c.isStatic() + ";")[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_64 $$ pb(varName + ".isAbstract = " + c.isAbstract() + ";")[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_117 $$ pb("}")[ CD ]
Line_66 $$ if (c.getFields() != null && c.getFields().length > 0) -->Line_67 $$ pb(varName + ".fields = new Field[] [ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_93 $$ logger.log(Type.INFO, c.getName() + " can't be instantiated. Constructors not generated")[ FD ]
Line_33 $$ interfaces = "new HashSet<Class>(Arrays.asList("-->Line_46 $$ interfaces = null[ FD ]
Line_30 $$ c = t.isInterface()-->Line_98 $$ if (c.isEnum() != null) [ FD ]
Line_30 $$ c = t.isInterface()-->Line_95 $$ if (c.isArray() != null) [ FD ]
Line_33 $$ interfaces = "new HashSet<Class>(Arrays.asList("-->Line_40 $$ interfaces += i.getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_68 $$ for (JField f : c.getFields()) -->Line_73 $$ String annotations = getAnnotations(f.getDeclaredAnnotations())[ FD ]
Line_21 $$ assignables += i.getErasedType().getQualifiedSourceName() + ".class"-->Line_27 $$ assignables = null[ FD ]
Line_14 $$ assignables = "new HashSet<Class>(Arrays.asList("-->Line_20 $$ assignables += ", "[ FD ]
Line_11 $$ String assignables = null-->Line_25 $$ assignables += "))"[ FD ]
Line_98 $$ if (c.isEnum() != null) -->Line_100 $$ if (enumConstants != null) [ CD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_4 $$ int id = nextTypeId++[ CD ]
Line_102 $$ for (int i = 0; i < enumConstants.length; i++) -->Line_103 $$ pb(varName + ".enumConstants[" + i + "] = " + c.getErasedType().getQualifiedSourceName() + "." + enumConstants[i].getName() + ";")[ CD ]
Line_68 $$ for (JField f : c.getFields()) -->Line_72 $$ String elementType = getElementTypes(f)[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_54 $$ if (c.isEnum() != null)[ FD ]
Line_32 $$ if (c != null && c.getImplementedInterfaces() != null) -->Line_33 $$ interfaces = "new HashSet<Class>(Arrays.asList("[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_35 $$ for (JType i : c.getImplementedInterfaces()) [ FD ]
Line_100 $$ if (enumConstants != null) -->Line_101 $$ pb(varName + ".enumConstants = new Object[" + enumConstants.length + "];")[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_107 $$ Annotation[] annotations = c.getDeclaredAnnotations()[ FD ]
Line_30 $$ c = t.isInterface()-->Line_63 $$ pb(varName + ".isStatic = " + c.isStatic() + ";")[ FD ]
Line_60 $$ if (c.isInterface() != null) -->Line_61 $$ pb(varName + ".isInterface = true;")[ CD ]
Line_12 $$ String interfaces = null-->Line_39 $$ interfaces += ", "[ FD ]
Line_81 $$ if (enclosingType != null && fieldType != null) -->Line_82 $$ stub.getter = setterGetter[ CD ]
Line_53 $$ if (c != null) -->Line_95 $$ if (c.isArray() != null) [ CD ]
Line_30 $$ c = t.isInterface()-->Line_32 $$ if (c != null && c.getImplementedInterfaces() != null) [ FD ]
Line_53 $$ if (c != null) -->Line_90 $$ if (c.isPublic() && !c.isAbstract() && (c.getEnclosingType() == null || c.isStatic())) [ CD ]
Line_30 $$ c = t.isInterface()-->Line_99 $$ JEnumConstant[] enumConstants = c.isEnum().getEnumConstants()[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_11 $$ String assignables = null[ CD ]
Line_30 $$ c = t.isInterface()-->Line_60 $$ if (c.isInterface() != null) [ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_32 $$ if (c != null && c.getImplementedInterfaces() != null) [ CD ]
Line_32 $$ if (c != null && c.getImplementedInterfaces() != null) -->Line_43 $$ if (used)[ CD ]
Line_30 $$ c = t.isInterface()-->Line_96 $$ pb(varName + ".componentType = " + getType(c.isArray().getComponentType()) + ";")[ FD ]
Line_16 $$ for (JType i : c.getFlattenedSupertypeHierarchy()) -->Line_102 $$ for (int i = 0; i < enumConstants.length; i++) [ FD ]
Line_8 $$ String superClass = null-->Line_10 $$ superClass = c.getSuperclass().getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_20 $$ assignables += ", "-->Line_21 $$ assignables += i.getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_8 $$ String superClass = null[ CD ]
Line_19 $$ if (used)-->Line_20 $$ assignables += ", "[ CD ]
Line_33 $$ interfaces = "new HashSet<Class>(Arrays.asList("-->Line_44 $$ interfaces += "))"[ FD ]
Line_56 $$ if (c.isArray() != null)-->Line_57 $$ pb(varName + ".isArray = true;")[ CD ]
Line_73 $$ String annotations = getAnnotations(f.getDeclaredAnnotations())-->Line_109 $$ pb(varName + ".annotations = " + getAnnotations(annotations) + ";")[ FD ]
Line_21 $$ assignables += i.getErasedType().getQualifiedSourceName() + ".class"-->Line_25 $$ assignables += "))"[ FD ]
Line_11 $$ String assignables = null-->Line_21 $$ assignables += i.getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_6 $$ JClassType c = t.isClass()[ FD ]
Line_40 $$ interfaces += i.getErasedType().getQualifiedSourceName() + ".class"-->Line_44 $$ interfaces += "))"[ FD ]
Line_48 $$ String varName = "c" + id-->Line_89 $$ createTypeInvokables(c, varName, "Method", c.getMethods())[ FD ]
Line_20 $$ assignables += ", "-->Line_27 $$ assignables = null[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_30 $$ c = t.isInterface()[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_56 $$ if (c.isArray() != null)[ FD ]
Line_53 $$ if (c != null) -->Line_60 $$ if (c.isInterface() != null) [ CD ]
Line_111 $$ if (t.isAnnotation() != null) -->Line_114 $$ pb(varName + ".isPrimitive = true;")[ CD ]
Line_68 $$ for (JField f : c.getFields()) -->Line_79 $$ stub.isStatic = f.isStatic()[ FD ]
Line_111 $$ if (t.isAnnotation() != null) -->Line_112 $$ pb(varName + ".isAnnotation = true;")[ CD ]
Line_33 $$ interfaces = "new HashSet<Class>(Arrays.asList("-->Line_39 $$ interfaces += ", "[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_9 $$ if (c != null && (isVisible(c.getSuperclass())))[ CD ]
Line_60 $$ if (c.isInterface() != null) -->Line_63 $$ pb(varName + ".isStatic = " + c.isStatic() + ";")[ CD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_49 $$ pb("private static Type " + varName + ";")[ CD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_5 $$ typeNames2typeIds.put(t.getErasedType().getQualifiedSourceName(), id)[ CD ]
Line_68 $$ for (JField f : c.getFields()) -->Line_80 $$ stub.isFinal = f.isFinal()[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_13 $$ if (c != null && c.getFlattenedSupertypeHierarchy() != null) [ FD ]
Line_90 $$ if (c.isPublic() && !c.isAbstract() && (c.getEnclosingType() == null || c.isStatic())) -->Line_93 $$ logger.log(Type.INFO, c.getName() + " can't be instantiated. Constructors not generated")[ CD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_7 $$ String name = t.getErasedType().getQualifiedSourceName()[ FD ]
Line_99 $$ JEnumConstant[] enumConstants = c.isEnum().getEnumConstants()-->Line_100 $$ if (enumConstants != null) [ FD ]
Line_75 $$ SetterGetterStub stub = new SetterGetterStub()-->Line_85 $$ setterGetterStubs.add(stub)[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_5 $$ typeNames2typeIds.put(t.getErasedType().getQualifiedSourceName(), id)[ FD ]
Line_30 $$ c = t.isInterface()-->Line_64 $$ pb(varName + ".isAbstract = " + c.isAbstract() + ";")[ FD ]
Line_30 $$ c = t.isInterface()-->Line_35 $$ for (JType i : c.getImplementedInterfaces()) [ FD ]
Line_71 $$ int setterGetter = nextSetterGetterId++-->Line_83 $$ stub.setter = setterGetter[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_12 $$ String interfaces = null[ CD ]
Line_25 $$ assignables += "))"-->Line_27 $$ assignables = null[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_48 $$ String varName = "c" + id[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_9 $$ if (c != null && (isVisible(c.getSuperclass())))[ FD ]
Line_30 $$ c = t.isInterface()-->Line_90 $$ if (c.isPublic() && !c.isAbstract() && (c.getEnclosingType() == null || c.isStatic())) [ FD ]
Line_39 $$ interfaces += ", "-->Line_44 $$ interfaces += "))"[ FD ]
Line_66 $$ if (c.getFields() != null && c.getFields().length > 0) -->Line_87 $$ pb("};")[ CD ]
Line_68 $$ for (JField f : c.getFields()) -->Line_76 $$ stub.name = f.getName()[ FD ]
Line_13 $$ if (c != null && c.getFlattenedSupertypeHierarchy() != null) -->Line_14 $$ assignables = "new HashSet<Class>(Arrays.asList("[ CD ]
Line_24 $$ if (used)-->Line_27 $$ assignables = null[ CD ]
Line_15 $$ boolean used = false-->Line_41 $$ used = true[ FD ]
Line_30 $$ c = t.isInterface()-->Line_89 $$ createTypeInvokables(c, varName, "Method", c.getMethods())[ FD ]
Line_16 $$ for (JType i : c.getFlattenedSupertypeHierarchy()) -->Line_40 $$ interfaces += i.getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_43 $$ if (used)-->Line_44 $$ interfaces += "))"[ CD ]
Line_16 $$ for (JType i : c.getFlattenedSupertypeHierarchy()) -->Line_17 $$ if (!isVisible(i) || i.equals(t) || "java.lang.Object".equals(i.getErasedType().getQualifiedSourceName()))[ FD ]
Line_12 $$ String interfaces = null-->Line_44 $$ interfaces += "))"[ FD ]
Line_30 $$ c = t.isInterface()-->Line_58 $$ if (c.isMemberType())[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_29 $$ if (c == null) [ FD ]
Line_13 $$ if (c != null && c.getFlattenedSupertypeHierarchy() != null) -->Line_24 $$ if (used)[ CD ]
Line_22 $$ used = true-->Line_41 $$ used = true[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_53 $$ if (c != null) [ FD ]
Line_16 $$ for (JType i : c.getFlattenedSupertypeHierarchy()) -->Line_21 $$ assignables += i.getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_39 $$ interfaces += ", "-->Line_46 $$ interfaces = null[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_68 $$ for (JField f : c.getFields()) [ FD ]
Line_30 $$ c = t.isInterface()-->Line_107 $$ Annotation[] annotations = c.getDeclaredAnnotations()[ FD ]
Line_14 $$ assignables = "new HashSet<Class>(Arrays.asList("-->Line_25 $$ assignables += "))"[ FD ]
Line_81 $$ if (enclosingType != null && fieldType != null) -->Line_83 $$ stub.setter = setterGetter[ CD ]
Line_30 $$ c = t.isInterface()-->Line_53 $$ if (c != null) [ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_7 $$ String name = t.getErasedType().getQualifiedSourceName()[ CD ]
Line_38 $$ if (used)-->Line_39 $$ interfaces += ", "[ CD ]
Line_108 $$ if (annotations != null && annotations.length > 0) -->Line_109 $$ pb(varName + ".annotations = " + getAnnotations(annotations) + ";")[ CD ]
Line_4 $$ int id = nextTypeId++-->Line_5 $$ typeNames2typeIds.put(t.getErasedType().getQualifiedSourceName(), id)[ FD ]
Line_53 $$ if (c != null) -->Line_58 $$ if (c.isMemberType())[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_10 $$ superClass = c.getSuperclass().getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_51 $$ pb("if(" + varName + "!=null) return " + varName + ";")[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_30 $$ c = t.isInterface()[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_36 $$ if (!isVisible(i) || i.equals(t))[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_116 $$ pb("return " + varName + ";")[ CD ]
Line_53 $$ if (c != null) -->Line_66 $$ if (c.getFields() != null && c.getFields().length > 0) [ CD ]
Line_68 $$ for (JField f : c.getFields()) -->Line_70 $$ String fieldType = getType(f.getType())[ FD ]
Line_53 $$ if (c != null) -->Line_108 $$ if (annotations != null && annotations.length > 0) [ CD ]
Line_11 $$ String assignables = null-->Line_27 $$ assignables = null[ FD ]
Line_11 $$ String assignables = null-->Line_14 $$ assignables = "new HashSet<Class>(Arrays.asList("[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_32 $$ if (c != null && c.getImplementedInterfaces() != null) [ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_13 $$ if (c != null && c.getFlattenedSupertypeHierarchy() != null) [ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_60 $$ if (c.isInterface() != null) [ FD ]
Line_69 $$ String enclosingType = getType(c)-->Line_77 $$ stub.enclosingType = enclosingType[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_95 $$ if (c.isArray() != null) [ FD ]
Line_58 $$ if (c.isMemberType())-->Line_59 $$ pb(varName + ".isMemberClass = true;")[ CD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_29 $$ if (c == null) [ CD ]
Line_30 $$ c = t.isInterface()-->Line_91 $$ createTypeInvokables(c, varName, "Constructor", c.getConstructors())[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_89 $$ createTypeInvokables(c, varName, "Method", c.getMethods())[ FD ]
Line_13 $$ if (c != null && c.getFlattenedSupertypeHierarchy() != null) -->Line_15 $$ boolean used = false[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_103 $$ pb(varName + ".enumConstants[" + i + "] = " + c.getErasedType().getQualifiedSourceName() + "." + enumConstants[i].getName() + ";")[ FD ]
Line_30 $$ c = t.isInterface()-->Line_93 $$ logger.log(Type.INFO, c.getName() + " can't be instantiated. Constructors not generated")[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_6 $$ JClassType c = t.isClass()[ CD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_17 $$ if (!isVisible(i) || i.equals(t) || "java.lang.Object".equals(i.getErasedType().getQualifiedSourceName()))[ FD ]
Line_30 $$ c = t.isInterface()-->Line_69 $$ String enclosingType = getType(c)[ FD ]
Line_30 $$ c = t.isInterface()-->Line_54 $$ if (c.isEnum() != null)[ FD ]
Line_30 $$ c = t.isInterface()-->Line_103 $$ pb(varName + ".enumConstants[" + i + "] = " + c.getErasedType().getQualifiedSourceName() + "." + enumConstants[i].getName() + ";")[ FD ]
Line_11 $$ String assignables = null-->Line_20 $$ assignables += ", "[ FD ]
Line_43 $$ if (used)-->Line_46 $$ interfaces = null[ CD ]
Line_12 $$ String interfaces = null-->Line_40 $$ interfaces += i.getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_96 $$ pb(varName + ".componentType = " + getType(c.isArray().getComponentType()) + ";")[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_50 $$ pb("private static Type " + varName + "() [ CD ]
Line_53 $$ if (c != null) -->Line_111 $$ if (t.isAnnotation() != null) [ CD ]
Line_39 $$ interfaces += ", "-->Line_40 $$ interfaces += i.getErasedType().getQualifiedSourceName() + ".class"[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_111 $$ if (t.isAnnotation() != null) [ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_53 $$ if (c != null) [ CD ]
Line_20 $$ assignables += ", "-->Line_25 $$ assignables += "))"[ FD ]
Line_53 $$ if (c != null) -->Line_54 $$ if (c.isEnum() != null)[ CD ]
Line_60 $$ if (c.isInterface() != null) -->Line_64 $$ pb(varName + ".isAbstract = " + c.isAbstract() + ";")[ CD ]
Line_54 $$ if (c.isEnum() != null)-->Line_55 $$ pb(varName + ".isEnum = true;")[ CD ]
Line_53 $$ if (c != null) -->Line_56 $$ if (c.isArray() != null)[ CD ]
Line_29 $$ if (c == null) -->Line_30 $$ c = t.isInterface()[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_90 $$ if (c.isPublic() && !c.isAbstract() && (c.getEnclosingType() == null || c.isStatic())) [ FD ]
Line_100 $$ if (enumConstants != null) -->Line_102 $$ for (int i = 0; i < enumConstants.length; i++) [ CD ]
Line_24 $$ if (used)-->Line_25 $$ assignables += "))"[ CD ]
Line_6 $$ JClassType c = t.isClass()-->Line_91 $$ createTypeInvokables(c, varName, "Constructor", c.getConstructors())[ FD ]
Line_40 $$ interfaces += i.getErasedType().getQualifiedSourceName() + ".class"-->Line_46 $$ interfaces = null[ FD ]
Line_95 $$ if (c.isArray() != null) -->Line_96 $$ pb(varName + ".componentType = " + getType(c.isArray().getComponentType()) + ";")[ CD ]
Line_30 $$ c = t.isInterface()-->Line_56 $$ if (c.isArray() != null)[ FD ]
Line_6 $$ JClassType c = t.isClass()-->Line_99 $$ JEnumConstant[] enumConstants = c.isEnum().getEnumConstants()[ FD ]
Line_30 $$ c = t.isInterface()-->Line_66 $$ if (c.getFields() != null && c.getFields().length > 0) [ FD ]
Line_12 $$ String interfaces = null-->Line_33 $$ interfaces = "new HashSet<Class>(Arrays.asList("[ FD ]
Line_2 $$ private String createTypeGenerator(JType t) -->Line_3 $$ buffer.setLength(0)[ CD ]
Line_71 $$ int setterGetter = nextSetterGetterId++-->Line_82 $$ stub.getter = setterGetter[ FD ]
Line_90 $$ if (c.isPublic() && !c.isAbstract() && (c.getEnclosingType() == null || c.isStatic())) -->Line_91 $$ createTypeInvokables(c, varName, "Constructor", c.getConstructors())[ CD ]
Line_30 $$ c = t.isInterface()-->Line_68 $$ for (JField f : c.getFields()) [ FD ]
