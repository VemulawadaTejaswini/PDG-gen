Line_10 $$ if (i == commentLines.length - 1) -->Line_12 $$ buf.append(commentLine)[ CD ]
Line_10 $$ if (i == commentLines.length - 1) -->Line_15 $$ buf.append('\n')[ CD ]
Line_19 $$ newComment = factory.createCommentFromText(commentString, null)-->Line_26 $$ newComment = factory.createCommentFromText(commentString, null)[ FD ]
Line_23 $$ StringBuffer commentBuffer = new StringBuffer()-->Line_24 $$ commentBuffer.append("")[ FD ]
Line_2 $$ private static void addMethodJavadocLine(PsiElementFactory factory, PsiMethod method, @NonNls String javaDocLine) throws IncorrectOperationException -->Line_11 $$ buf.append(javaDocLine)[ FD ]
Line_2 $$ private static void addMethodJavadocLine(PsiElementFactory factory, PsiMethod method, @NonNls String javaDocLine) throws IncorrectOperationException -->Line_4 $$ PsiElement comment = method.getFirstChild()[ CD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_20 $$ comment.replace(newComment)[ CD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_7 $$ StringBuffer buf = new StringBuffer()[ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_18 $$ String commentString = buf.toString()[ FD ]
Line_2 $$ private static void addMethodJavadocLine(PsiElementFactory factory, PsiMethod method, @NonNls String javaDocLine) throws IncorrectOperationException -->Line_5 $$ if (comment != null && comment instanceof PsiComment) [ CD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_8 $$ for (int i = 0; i < commentLines.length; i++) [ CD ]
Line_19 $$ newComment = factory.createCommentFromText(commentString, null)-->Line_20 $$ comment.replace(newComment)[ FD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_25 $$ commentString = commentBuffer.toString()[ CD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_26 $$ newComment = factory.createCommentFromText(commentString, null)[ CD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_19 $$ newComment = factory.createCommentFromText(commentString, null)[ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_11 $$ buf.append(javaDocLine)[ FD ]
Line_3 $$ PsiComment newComment-->Line_26 $$ newComment = factory.createCommentFromText(commentString, null)[ FD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_14 $$ buf.append(commentLine)[ FD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_18 $$ String commentString = buf.toString()[ CD ]
Line_2 $$ private static void addMethodJavadocLine(PsiElementFactory factory, PsiMethod method, @NonNls String javaDocLine) throws IncorrectOperationException -->Line_4 $$ PsiElement comment = method.getFirstChild()[ FD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_12 $$ buf.append(commentLine)[ FD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_27 $$ method.addBefore(newComment, comment)[ CD ]
Line_2 $$ private static void addMethodJavadocLine(PsiElementFactory factory, PsiMethod method, @NonNls String javaDocLine) throws IncorrectOperationException -->Line_27 $$ method.addBefore(newComment, comment)[ FD ]
Line_8 $$ for (int i = 0; i < commentLines.length; i++) -->Line_10 $$ if (i == commentLines.length - 1) [ FD ]
Line_9 $$ String commentLine = commentLines[i]-->Line_12 $$ buf.append(commentLine)[ FD ]
Line_3 $$ PsiComment newComment-->Line_20 $$ comment.replace(newComment)[ FD ]
Line_2 $$ private static void addMethodJavadocLine(PsiElementFactory factory, PsiMethod method, @NonNls String javaDocLine) throws IncorrectOperationException -->Line_26 $$ newComment = factory.createCommentFromText(commentString, null)[ FD ]
Line_2 $$ private static void addMethodJavadocLine(PsiElementFactory factory, PsiMethod method, @NonNls String javaDocLine) throws IncorrectOperationException -->Line_19 $$ newComment = factory.createCommentFromText(commentString, null)[ FD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_24 $$ commentBuffer.append("")[ CD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_6 $$ String[] commentLines = comment.getText().split("\n")[ CD ]
Line_18 $$ String commentString = buf.toString()-->Line_19 $$ newComment = factory.createCommentFromText(commentString, null)[ FD ]
Line_10 $$ if (i == commentLines.length - 1) -->Line_11 $$ buf.append(javaDocLine)[ CD ]
Line_3 $$ PsiComment newComment-->Line_27 $$ method.addBefore(newComment, comment)[ FD ]
Line_23 $$ StringBuffer commentBuffer = new StringBuffer()-->Line_25 $$ commentString = commentBuffer.toString()[ FD ]
Line_10 $$ if (i == commentLines.length - 1) -->Line_14 $$ buf.append(commentLine)[ CD ]
Line_3 $$ PsiComment newComment-->Line_19 $$ newComment = factory.createCommentFromText(commentString, null)[ FD ]
Line_9 $$ String commentLine = commentLines[i]-->Line_14 $$ buf.append(commentLine)[ FD ]
Line_19 $$ newComment = factory.createCommentFromText(commentString, null)-->Line_27 $$ method.addBefore(newComment, comment)[ FD ]
Line_8 $$ for (int i = 0; i < commentLines.length; i++) -->Line_9 $$ String commentLine = commentLines[i][ CD ]
Line_4 $$ PsiElement comment = method.getFirstChild()-->Line_27 $$ method.addBefore(newComment, comment)[ FD ]
Line_2 $$ private static void addMethodJavadocLine(PsiElementFactory factory, PsiMethod method, @NonNls String javaDocLine) throws IncorrectOperationException -->Line_3 $$ PsiComment newComment[ CD ]
Line_8 $$ for (int i = 0; i < commentLines.length; i++) -->Line_10 $$ if (i == commentLines.length - 1) [ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_15 $$ buf.append('\n')[ FD ]
Line_26 $$ newComment = factory.createCommentFromText(commentString, null)-->Line_27 $$ method.addBefore(newComment, comment)[ FD ]
Line_18 $$ String commentString = buf.toString()-->Line_26 $$ newComment = factory.createCommentFromText(commentString, null)[ FD ]
Line_5 $$ if (comment != null && comment instanceof PsiComment) -->Line_23 $$ StringBuffer commentBuffer = new StringBuffer()[ CD ]
Line_4 $$ PsiElement comment = method.getFirstChild()-->Line_20 $$ comment.replace(newComment)[ FD ]
Line_18 $$ String commentString = buf.toString()-->Line_25 $$ commentString = commentBuffer.toString()[ FD ]
Line_25 $$ commentString = commentBuffer.toString()-->Line_26 $$ newComment = factory.createCommentFromText(commentString, null)[ FD ]
Line_4 $$ PsiElement comment = method.getFirstChild()-->Line_6 $$ String[] commentLines = comment.getText().split("\n")[ FD ]
