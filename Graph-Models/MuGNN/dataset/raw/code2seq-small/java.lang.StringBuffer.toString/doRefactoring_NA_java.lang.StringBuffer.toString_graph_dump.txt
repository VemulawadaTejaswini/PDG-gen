Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_9 $$ buf.append(aClass.getName())[ CD ]
Line_13 $$ for (Iterator<PsiTypeParameter> it = myTypeParametersToCreate.iterator(); it.hasNext(); idx++) -->Line_14 $$ if (idx > 0)[ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_33 $$ buf.append(")")[ FD ]
Line_10 $$ if (!myTypeParametersToCreate.isEmpty()) -->Line_19 $$ buf.append(">")[ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_11 $$ buf.append("<")[ FD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_9 $$ buf.append(aClass.getName())[ FD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_21 $$ buf.append("(")[ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_34 $$ PsiNewExpression newClassExpression = (PsiNewExpression) JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createExpressionFromText(buf.toString(), null)[ CD ]
Line_34 $$ PsiNewExpression newClassExpression = (PsiNewExpression) JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createExpressionFromText(buf.toString(), null)-->Line_35 $$ newClassExpression = (PsiNewExpression) newExpr.replace(newClassExpression)[ FD ]
Line_10 $$ if (!myTypeParametersToCreate.isEmpty()) -->Line_11 $$ buf.append("<")[ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_15 $$ buf.append(", ")[ FD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_17 $$ buf.append(typeParamName)[ FD ]
Line_25 $$ if (isFirstParameter) -->Line_26 $$ isFirstParameter = false[ CD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_6 $$ PsiNewExpression newExpr = (PsiNewExpression) myAnonClass.getParent()[ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_8 $$ buf.append("new ")[ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_36 $$ if (PsiDiamondTypeUtil.canCollapseToDiamond(newClassExpression, newClassExpression, newClassExpression.getType())) [ CD ]
Line_12 $$ int idx = 0-->Line_13 $$ for (Iterator<PsiTypeParameter> it = myTypeParametersToCreate.iterator(); it.hasNext(); idx++) [ FD ]
Line_35 $$ newClassExpression = (PsiNewExpression) newExpr.replace(newClassExpression)-->Line_36 $$ if (PsiDiamondTypeUtil.canCollapseToDiamond(newClassExpression, newClassExpression, newClassExpression.getType())) [ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_5 $$ myTargetClass.add(aClass)[ CD ]
Line_16 $$ String typeParamName = it.next().getName()-->Line_17 $$ buf.append(typeParamName)[ FD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_30 $$ buf.append(info.variable.getName())[ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_7 $$ StringBuffer buf = new StringBuffer()[ CD ]
Line_34 $$ PsiNewExpression newClassExpression = (PsiNewExpression) JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createExpressionFromText(buf.toString(), null)-->Line_37 $$ PsiDiamondTypeUtil.replaceExplicitWithDiamond(newClassExpression.getClassOrAnonymousClassReference().getParameterList())[ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_21 $$ buf.append("(")[ CD ]
Line_23 $$ for (VariableInfo info : myVariableInfos) -->Line_24 $$ if (info.passAsParameter) [ FD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_34 $$ PsiNewExpression newClassExpression = (PsiNewExpression) JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createExpressionFromText(buf.toString(), null)[ FD ]
Line_13 $$ for (Iterator<PsiTypeParameter> it = myTypeParametersToCreate.iterator(); it.hasNext(); idx++) -->Line_16 $$ String typeParamName = it.next().getName()[ CD ]
Line_25 $$ if (isFirstParameter) -->Line_28 $$ buf.append(",")[ CD ]
Line_6 $$ PsiNewExpression newExpr = (PsiNewExpression) myAnonClass.getParent()-->Line_35 $$ newClassExpression = (PsiNewExpression) newExpr.replace(newClassExpression)[ FD ]
Line_24 $$ if (info.passAsParameter) -->Line_30 $$ buf.append(info.variable.getName())[ CD ]
Line_34 $$ PsiNewExpression newClassExpression = (PsiNewExpression) JavaPsiFacade.getInstance(myManager.getProject()).getElementFactory().createExpressionFromText(buf.toString(), null)-->Line_36 $$ if (PsiDiamondTypeUtil.canCollapseToDiamond(newClassExpression, newClassExpression, newClassExpression.getType())) [ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_22 $$ boolean isFirstParameter = true[ CD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_33 $$ buf.append(")")[ CD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_3 $$ calculateTypeParametersToCreate()[ CD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_10 $$ if (!myTypeParametersToCreate.isEmpty()) [ CD ]
Line_10 $$ if (!myTypeParametersToCreate.isEmpty()) -->Line_13 $$ for (Iterator<PsiTypeParameter> it = myTypeParametersToCreate.iterator(); it.hasNext(); idx++) [ CD ]
Line_22 $$ boolean isFirstParameter = true-->Line_26 $$ isFirstParameter = false[ FD ]
Line_4 $$ PsiClass aClass = createClass(myNewClassName)-->Line_9 $$ buf.append(aClass.getName())[ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_35 $$ newClassExpression = (PsiNewExpression) newExpr.replace(newClassExpression)[ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_19 $$ buf.append(">")[ FD ]
Line_36 $$ if (PsiDiamondTypeUtil.canCollapseToDiamond(newClassExpression, newClassExpression, newClassExpression.getType())) -->Line_37 $$ PsiDiamondTypeUtil.replaceExplicitWithDiamond(newClassExpression.getClassOrAnonymousClassReference().getParameterList())[ CD ]
Line_35 $$ newClassExpression = (PsiNewExpression) newExpr.replace(newClassExpression)-->Line_37 $$ PsiDiamondTypeUtil.replaceExplicitWithDiamond(newClassExpression.getClassOrAnonymousClassReference().getParameterList())[ FD ]
Line_4 $$ PsiClass aClass = createClass(myNewClassName)-->Line_5 $$ myTargetClass.add(aClass)[ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_4 $$ PsiClass aClass = createClass(myNewClassName)[ CD ]
Line_7 $$ StringBuffer buf = new StringBuffer()-->Line_28 $$ buf.append(",")[ FD ]
Line_2 $$ private void doRefactoring() throws IncorrectOperationException -->Line_8 $$ buf.append("new ")[ CD ]
Line_10 $$ if (!myTypeParametersToCreate.isEmpty()) -->Line_12 $$ int idx = 0[ CD ]
Line_24 $$ if (info.passAsParameter) -->Line_25 $$ if (isFirstParameter) [ CD ]
Line_13 $$ for (Iterator<PsiTypeParameter> it = myTypeParametersToCreate.iterator(); it.hasNext(); idx++) -->Line_16 $$ String typeParamName = it.next().getName()[ FD ]
Line_13 $$ for (Iterator<PsiTypeParameter> it = myTypeParametersToCreate.iterator(); it.hasNext(); idx++) -->Line_17 $$ buf.append(typeParamName)[ CD ]
Line_14 $$ if (idx > 0)-->Line_15 $$ buf.append(", ")[ CD ]
Line_12 $$ int idx = 0-->Line_14 $$ if (idx > 0)[ FD ]
