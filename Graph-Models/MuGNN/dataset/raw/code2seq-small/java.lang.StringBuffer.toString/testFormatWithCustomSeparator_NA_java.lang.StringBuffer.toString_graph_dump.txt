Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_18 $$ Text key2 = new Text("key2")[ CD ]
Line_20 $$ Text val2 = new Text("val2")-->Line_38 $$ expectedOutput.append(val2).append("\n")[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_27 $$ theRecordWriter.write(key2, nullWritable)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_35 $$ StringBuffer expectedOutput = new StringBuffer()[ CD ]
Line_9 $$ FileSystem fs = workDir.getFileSystem(job)-->Line_10 $$ if (!fs.mkdirs(workDir)) [ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_17 $$ Text key1 = new Text("key1")[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_9 $$ FileSystem fs = workDir.getFileSystem(job)[ FD ]
Line_19 $$ Text val1 = new Text("val1")-->Line_36 $$ expectedOutput.append(key1).append(separator).append(val1).append("\n")[ FD ]
Line_35 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_40 $$ expectedOutput.append(key1).append("\n")[ FD ]
Line_19 $$ Text val1 = new Text("val1")-->Line_25 $$ theRecordWriter.write(null, val1)[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_25 $$ theRecordWriter.write(null, val1)[ FD ]
Line_19 $$ Text val1 = new Text("val1")-->Line_37 $$ expectedOutput.append(val1).append("\n")[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_30 $$ theRecordWriter.write(key2, val2)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_15 $$ TextOutputFormat<Object, Object> theOutputFormat = new TextOutputFormat<Object, Object>()[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_14 $$ Reporter reporter = Reporter.NULL[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_5 $$ job.set("mapreduce.output.textoutputformat.separator", separator)[ FD ]
Line_35 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_38 $$ expectedOutput.append(val2).append("\n")[ FD ]
Line_20 $$ Text val2 = new Text("val2")-->Line_26 $$ theRecordWriter.write(nullWritable, val2)[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_23 $$ theRecordWriter.write(key1, val1)[ FD ]
Line_14 $$ Reporter reporter = Reporter.NULL-->Line_32 $$ theRecordWriter.close(reporter)[ FD ]
Line_13 $$ String file = "test_custom.txt"-->Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_32 $$ theRecordWriter.close(reporter)[ FD ]
Line_4 $$ String separator = ""-->Line_36 $$ expectedOutput.append(key1).append(separator).append(val1).append("\n")[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_8 $$ FileOutputFormat.setWorkOutputPath(job, workDir)[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_3 $$ JobConf job = new JobConf()[ CD ]
Line_21 $$ NullWritable nullWritable = NullWritable.get()-->Line_24 $$ theRecordWriter.write(null, nullWritable)[ FD ]
Line_17 $$ Text key1 = new Text("key1")-->Line_23 $$ theRecordWriter.write(key1, val1)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_8 $$ FileOutputFormat.setWorkOutputPath(job, workDir)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_10 $$ if (!fs.mkdirs(workDir)) [ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_6 $$ job.set(JobContext.TASK_ATTEMPT_ID, attempt)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_21 $$ NullWritable nullWritable = NullWritable.get()[ CD ]
Line_17 $$ Text key1 = new Text("key1")-->Line_36 $$ expectedOutput.append(key1).append(separator).append(val1).append("\n")[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ CD ]
Line_20 $$ Text val2 = new Text("val2")-->Line_30 $$ theRecordWriter.write(key2, val2)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_20 $$ Text val2 = new Text("val2")[ CD ]
Line_20 $$ Text val2 = new Text("val2")-->Line_41 $$ expectedOutput.append(key2).append(separator).append(val2).append("\n")[ FD ]
Line_10 $$ if (!fs.mkdirs(workDir)) -->Line_11 $$ fail("Failed to create output directory")[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_39 $$ expectedOutput.append(key2).append("\n")[ CD ]
Line_42 $$ String output = UtilsForTests.slurp(expectedFile)-->Line_43 $$ assertEquals(expectedOutput.toString(), output)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_42 $$ String output = UtilsForTests.slurp(expectedFile)[ CD ]
Line_35 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_41 $$ expectedOutput.append(key2).append(separator).append(val2).append("\n")[ FD ]
Line_35 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_43 $$ assertEquals(expectedOutput.toString(), output)[ FD ]
Line_17 $$ Text key1 = new Text("key1")-->Line_28 $$ theRecordWriter.write(key1, null)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_40 $$ expectedOutput.append(key1).append("\n")[ CD ]
Line_34 $$ File expectedFile = new File(new Path(workDir, file).toString())-->Line_42 $$ String output = UtilsForTests.slurp(expectedFile)[ FD ]
Line_4 $$ String separator = ""-->Line_5 $$ job.set("mapreduce.output.textoutputformat.separator", separator)[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_26 $$ theRecordWriter.write(nullWritable, val2)[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_29 $$ theRecordWriter.write(null, null)[ FD ]
Line_35 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_37 $$ expectedOutput.append(val1).append("\n")[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_9 $$ FileSystem fs = workDir.getFileSystem(job)[ CD ]
Line_19 $$ Text val1 = new Text("val1")-->Line_23 $$ theRecordWriter.write(key1, val1)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_13 $$ String file = "test_custom.txt"[ CD ]
Line_14 $$ Reporter reporter = Reporter.NULL-->Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_35 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_39 $$ expectedOutput.append(key2).append("\n")[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_6 $$ job.set(JobContext.TASK_ATTEMPT_ID, attempt)[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_36 $$ expectedOutput.append(key1).append(separator).append(val1).append("\n")[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_19 $$ Text val1 = new Text("val1")[ CD ]
Line_21 $$ NullWritable nullWritable = NullWritable.get()-->Line_27 $$ theRecordWriter.write(key2, nullWritable)[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_28 $$ theRecordWriter.write(key1, null)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_4 $$ String separator = ""[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_5 $$ job.set("mapreduce.output.textoutputformat.separator", separator)[ CD ]
Line_18 $$ Text key2 = new Text("key2")-->Line_41 $$ expectedOutput.append(key2).append(separator).append(val2).append("\n")[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_43 $$ assertEquals(expectedOutput.toString(), output)[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_7 $$ FileOutputFormat.setOutputPath(job, workDir.getParent().getParent())[ FD ]
Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)-->Line_24 $$ theRecordWriter.write(null, nullWritable)[ FD ]
Line_17 $$ Text key1 = new Text("key1")-->Line_40 $$ expectedOutput.append(key1).append("\n")[ FD ]
Line_18 $$ Text key2 = new Text("key2")-->Line_30 $$ theRecordWriter.write(key2, val2)[ FD ]
Line_35 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_36 $$ expectedOutput.append(key1).append(separator).append(val1).append("\n")[ FD ]
Line_15 $$ TextOutputFormat<Object, Object> theOutputFormat = new TextOutputFormat<Object, Object>()-->Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_18 $$ Text key2 = new Text("key2")-->Line_39 $$ expectedOutput.append(key2).append("\n")[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_34 $$ File expectedFile = new File(new Path(workDir, file).toString())[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_38 $$ expectedOutput.append(val2).append("\n")[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_41 $$ expectedOutput.append(key2).append(separator).append(val2).append("\n")[ CD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_7 $$ FileOutputFormat.setOutputPath(job, workDir.getParent().getParent())[ CD ]
Line_4 $$ String separator = ""-->Line_41 $$ expectedOutput.append(key2).append(separator).append(val2).append("\n")[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_16 $$ RecordWriter<Object, Object> theRecordWriter = theOutputFormat.getRecordWriter(localFs, job, file, reporter)[ FD ]
Line_18 $$ Text key2 = new Text("key2")-->Line_27 $$ theRecordWriter.write(key2, nullWritable)[ FD ]
Line_21 $$ NullWritable nullWritable = NullWritable.get()-->Line_26 $$ theRecordWriter.write(nullWritable, val2)[ FD ]
Line_2 $$ public void testFormatWithCustomSeparator() throws Exception -->Line_37 $$ expectedOutput.append(val1).append("\n")[ CD ]
