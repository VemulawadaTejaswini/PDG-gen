Line_5 $$ StringBuffer details = new StringBuffer()-->Line_27 $$ details.append(StringUtils.formatTimeDiff(tasks[i].getFinishTime(), tasks[i].getStartTime()))[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_21 $$ details.append("\nTaskId\t\tTimetaken")[ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_7 $$ details.append(taskType).append(" task ")[ FD ]
Line_11 $$ if ("shuffle".equals(taskType)) -->Line_14 $$ details.append(StringUtils.formatTimeDiff(min.getFinishTime(), min.getShuffleFinishTime()))[ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_18 $$ details.append(StringUtils.formatTimeDiff(avg, 0))[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_22 $$ System.out.println(details.toString())[ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_11 $$ if ("shuffle".equals(taskType)) [ FD ]
Line_4 $$ JobHistoryParser.TaskAttemptInfo min = tasks[tasks.length - 1]-->Line_10 $$ details.append(StringUtils.formatTimeDiff(min.getFinishTime(), min.getStartTime()))[ FD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_12 $$ details.append(StringUtils.formatTimeDiff(min.getShuffleFinishTime(), min.getStartTime()))[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_19 $$ details.append("\nWorse performing ")[ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_20 $$ details.append(taskType).append(" tasks: ")[ FD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_21 $$ details.append("\nTaskId\t\tTimetaken")[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_3 $$ Arrays.sort(tasks, cmp)[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_9 $$ if ("map".equals(taskType)) [ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_20 $$ details.append(taskType).append(" tasks: ")[ CD ]
Line_28 $$ if ("shuffle".equals(taskType)) -->Line_29 $$ details.append(StringUtils.formatTimeDiff(tasks[i].getShuffleFinishTime(), tasks[i].getStartTime()))[ CD ]
Line_23 $$ for (int i = 0; i < showTasks && i < tasks.length; i++) -->Line_33 $$ System.out.println(details.toString())[ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_16 $$ details.append("\nAverage time taken by ")[ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_33 $$ System.out.println(details.toString())[ FD ]
Line_4 $$ JobHistoryParser.TaskAttemptInfo min = tasks[tasks.length - 1]-->Line_8 $$ details.append(min.getAttemptId().getTaskID().toString()).append(": ")[ FD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_10 $$ details.append(StringUtils.formatTimeDiff(min.getFinishTime(), min.getStartTime()))[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_7 $$ details.append(taskType).append(" task ")[ FD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_31 $$ details.append(StringUtils.formatTimeDiff(tasks[i].getFinishTime(), tasks[i].getShuffleFinishTime()))[ FD ]
Line_23 $$ for (int i = 0; i < showTasks && i < tasks.length; i++) -->Line_24 $$ details.setLength(0)[ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_23 $$ for (int i = 0; i < showTasks && i < tasks.length; i++) [ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_16 $$ details.append("\nAverage time taken by ")[ FD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_19 $$ details.append("\nWorse performing ")[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_17 $$ details.append(taskType).append(" tasks: ")[ FD ]
Line_23 $$ for (int i = 0; i < showTasks && i < tasks.length; i++) -->Line_25 $$ details.append(tasks[i].getAttemptId().getTaskID()).append(" ")[ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_5 $$ StringBuffer details = new StringBuffer()[ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_8 $$ details.append(min.getAttemptId().getTaskID().toString()).append(": ")[ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_9 $$ if ("map".equals(taskType)) [ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_3 $$ Arrays.sort(tasks, cmp)[ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_6 $$ details.append("\nTime taken by best performing ")[ FD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_18 $$ details.append(StringUtils.formatTimeDiff(avg, 0))[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_4 $$ JobHistoryParser.TaskAttemptInfo min = tasks[tasks.length - 1][ CD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_18 $$ details.append(StringUtils.formatTimeDiff(avg, 0))[ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_20 $$ details.append(taskType).append(" tasks: ")[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_26 $$ if ("map".equals(taskType)) [ FD ]
Line_4 $$ JobHistoryParser.TaskAttemptInfo min = tasks[tasks.length - 1]-->Line_12 $$ details.append(StringUtils.formatTimeDiff(min.getShuffleFinishTime(), min.getStartTime()))[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_17 $$ details.append(taskType).append(" tasks: ")[ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_22 $$ System.out.println(details.toString())[ FD ]
Line_26 $$ if ("map".equals(taskType)) -->Line_28 $$ if ("shuffle".equals(taskType)) [ CD ]
Line_28 $$ if ("shuffle".equals(taskType)) -->Line_31 $$ details.append(StringUtils.formatTimeDiff(tasks[i].getFinishTime(), tasks[i].getShuffleFinishTime()))[ CD ]
Line_26 $$ if ("map".equals(taskType)) -->Line_27 $$ details.append(StringUtils.formatTimeDiff(tasks[i].getFinishTime(), tasks[i].getStartTime()))[ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_25 $$ details.append(tasks[i].getAttemptId().getTaskID()).append(" ")[ FD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_24 $$ details.setLength(0)[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_7 $$ details.append(taskType).append(" task ")[ CD ]
Line_4 $$ JobHistoryParser.TaskAttemptInfo min = tasks[tasks.length - 1]-->Line_14 $$ details.append(StringUtils.formatTimeDiff(min.getFinishTime(), min.getShuffleFinishTime()))[ FD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_8 $$ details.append(min.getAttemptId().getTaskID().toString()).append(": ")[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_28 $$ if ("shuffle".equals(taskType)) [ FD ]
Line_9 $$ if ("map".equals(taskType)) -->Line_10 $$ details.append(StringUtils.formatTimeDiff(min.getFinishTime(), min.getStartTime()))[ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_17 $$ details.append(taskType).append(" tasks: ")[ FD ]
Line_2 $$ private void printAnalysis(JobHistoryParser.TaskAttemptInfo[] tasks, Comparator<JobHistoryParser.TaskAttemptInfo> cmp, String taskType, long avg, int showTasks) -->Line_6 $$ details.append("\nTime taken by best performing ")[ CD ]
Line_11 $$ if ("shuffle".equals(taskType)) -->Line_12 $$ details.append(StringUtils.formatTimeDiff(min.getShuffleFinishTime(), min.getStartTime()))[ CD ]
Line_23 $$ for (int i = 0; i < showTasks && i < tasks.length; i++) -->Line_26 $$ if ("map".equals(taskType)) [ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_29 $$ details.append(StringUtils.formatTimeDiff(tasks[i].getShuffleFinishTime(), tasks[i].getStartTime()))[ FD ]
Line_9 $$ if ("map".equals(taskType)) -->Line_11 $$ if ("shuffle".equals(taskType)) [ CD ]
Line_5 $$ StringBuffer details = new StringBuffer()-->Line_14 $$ details.append(StringUtils.formatTimeDiff(min.getFinishTime(), min.getShuffleFinishTime()))[ FD ]
