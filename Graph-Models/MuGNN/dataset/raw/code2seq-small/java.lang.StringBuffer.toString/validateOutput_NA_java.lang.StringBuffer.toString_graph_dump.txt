Line_4 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_9 $$ expectedOutput.append(key1).append("\n")[ FD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_10 $$ expectedOutput.append(key2).append('\t').append(val2).append("\n")[ CD ]
Line_4 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_12 $$ Assert.assertEquals(output, expectedOutput.toString())[ FD ]
Line_4 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_7 $$ expectedOutput.append(val2).append("\n")[ FD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_6 $$ expectedOutput.append(val1).append("\n")[ CD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_3 $$ File expectedFile = new File(new Path(outputDir, partFile).toString())[ CD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_12 $$ Assert.assertEquals(output, expectedOutput.toString())[ CD ]
Line_4 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_5 $$ expectedOutput.append(key1).append('\t').append(val1).append("\n")[ FD ]
Line_4 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_10 $$ expectedOutput.append(key2).append('\t').append(val2).append("\n")[ FD ]
Line_4 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_8 $$ expectedOutput.append(key2).append("\n")[ FD ]
Line_4 $$ StringBuffer expectedOutput = new StringBuffer()-->Line_6 $$ expectedOutput.append(val1).append("\n")[ FD ]
Line_3 $$ File expectedFile = new File(new Path(outputDir, partFile).toString())-->Line_11 $$ String output = slurp(expectedFile)[ FD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_5 $$ expectedOutput.append(key1).append('\t').append(val1).append("\n")[ CD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_11 $$ String output = slurp(expectedFile)[ CD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_9 $$ expectedOutput.append(key1).append("\n")[ CD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_8 $$ expectedOutput.append(key2).append("\n")[ CD ]
Line_11 $$ String output = slurp(expectedFile)-->Line_12 $$ Assert.assertEquals(output, expectedOutput.toString())[ FD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_4 $$ StringBuffer expectedOutput = new StringBuffer()[ CD ]
Line_2 $$ private void validateOutput() throws IOException -->Line_7 $$ expectedOutput.append(val2).append("\n")[ CD ]
