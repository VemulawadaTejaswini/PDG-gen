Line_7 $$ if (isFinal[i]) -->Line_9 $$ result.append(" [shape = doublecircle]")[ CD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_10 $$ result.append(Out.NL)[ FD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_19 $$ result.append(i + " -> " + s)[ FD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_5 $$ result.append("rankdir = LR" + Out.NL)[ FD ]
Line_17 $$ while (states.hasMoreElements()) -->Line_19 $$ result.append(i + " -> " + s)[ CD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_33 $$ return result.toString()[ FD ]
Line_16 $$ StateSetEnumerator states = table[i][input].states()-->Line_18 $$ int s = states.nextElement()[ FD ]
Line_2 $$ public String dotFormat() -->Line_6 $$ for (int i = 0; i < numStates; i++) [ CD ]
Line_14 $$ for (int input = 0; input < numInput; input++) -->Line_20 $$ result.append(" [label=\"" + classes.toString(input) + "\"]" + Out.NL)[ FD ]
Line_13 $$ for (int i = 0; i < numStates; i++) -->Line_24 $$ if (epsilon[i] != null) [ CD ]
Line_7 $$ if (isFinal[i]) -->Line_10 $$ result.append(Out.NL)[ CD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_28 $$ result.append(i + " -> " + s + " [style=dotted]" + Out.NL)[ FD ]
Line_16 $$ StateSetEnumerator states = table[i][input].states()-->Line_27 $$ int s = states.nextElement()[ FD ]
Line_6 $$ for (int i = 0; i < numStates; i++) -->Line_7 $$ if (isFinal[i]) [ FD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_32 $$ result.append("}" + Out.NL)[ FD ]
Line_2 $$ public String dotFormat() -->Line_32 $$ result.append("}" + Out.NL)[ CD ]
Line_2 $$ public String dotFormat() -->Line_33 $$ return result.toString()[ CD ]
Line_2 $$ public String dotFormat() -->Line_5 $$ result.append("rankdir = LR" + Out.NL)[ CD ]
Line_14 $$ for (int input = 0; input < numInput; input++) -->Line_15 $$ if (table[i][input] != null) [ CD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_9 $$ result.append(" [shape = doublecircle]")[ FD ]
Line_26 $$ while (states.hasMoreElements()) -->Line_27 $$ int s = states.nextElement()[ CD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_8 $$ result.append(i)[ FD ]
Line_2 $$ public String dotFormat() -->Line_4 $$ result.append("digraph NFA [ CD ]
Line_2 $$ public String dotFormat() -->Line_13 $$ for (int i = 0; i < numStates; i++) [ CD ]
Line_26 $$ while (states.hasMoreElements()) -->Line_28 $$ result.append(i + " -> " + s + " [style=dotted]" + Out.NL)[ CD ]
Line_6 $$ for (int i = 0; i < numStates; i++) -->Line_8 $$ result.append(i)[ FD ]
Line_13 $$ for (int i = 0; i < numStates; i++) -->Line_14 $$ for (int input = 0; input < numInput; input++) [ CD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_4 $$ result.append("digraph NFA [ FD ]
Line_16 $$ StateSetEnumerator states = table[i][input].states()-->Line_26 $$ while (states.hasMoreElements()) [ FD ]
Line_6 $$ for (int i = 0; i < numStates; i++) -->Line_13 $$ for (int i = 0; i < numStates; i++) [ FD ]
Line_24 $$ if (epsilon[i] != null) -->Line_25 $$ StateSetEnumerator states = epsilon[i].states()[ CD ]
Line_16 $$ StateSetEnumerator states = table[i][input].states()-->Line_17 $$ while (states.hasMoreElements()) [ FD ]
Line_3 $$ StringBuffer result = new StringBuffer()-->Line_20 $$ result.append(" [label=\"" + classes.toString(input) + "\"]" + Out.NL)[ FD ]
Line_15 $$ if (table[i][input] != null) -->Line_16 $$ StateSetEnumerator states = table[i][input].states()[ CD ]
Line_15 $$ if (table[i][input] != null) -->Line_17 $$ while (states.hasMoreElements()) [ CD ]
Line_7 $$ if (isFinal[i]) -->Line_8 $$ result.append(i)[ CD ]
Line_24 $$ if (epsilon[i] != null) -->Line_26 $$ while (states.hasMoreElements()) [ CD ]
Line_6 $$ for (int i = 0; i < numStates; i++) -->Line_7 $$ if (isFinal[i]) [ CD ]
Line_17 $$ while (states.hasMoreElements()) -->Line_18 $$ int s = states.nextElement()[ CD ]
Line_2 $$ public String dotFormat() -->Line_3 $$ StringBuffer result = new StringBuffer()[ CD ]
Line_17 $$ while (states.hasMoreElements()) -->Line_20 $$ result.append(" [label=\"" + classes.toString(input) + "\"]" + Out.NL)[ CD ]
