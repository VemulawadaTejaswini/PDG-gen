Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_7 $$ String details = GradlePluginLord.getGradleExceptionMessage(buildResult.getFailure(), gradle.getStartParameter().getShowStacktrace())[ FD ]
Line_8 $$ output += details-->Line_14 $$ client.sendMessage(ProtocolConstants.TASK_LIST_COMPLETED_SUCCESSFULLY_TYPE, output, (Serializable) projects)[ FD ]
Line_3 $$ boolean wasSuccessful = buildResult.getFailure() == null-->Line_5 $$ if (!wasSuccessful) [ FD ]
Line_4 $$ String output = allOutputText.toString()-->Line_9 $$ client.sendMessage(ProtocolConstants.TASK_LIST_COMPLETED_WITH_ERRORS_TYPE, output, wasSuccessful)[ FD ]
Line_8 $$ output += details-->Line_9 $$ client.sendMessage(ProtocolConstants.TASK_LIST_COMPLETED_WITH_ERRORS_TYPE, output, wasSuccessful)[ FD ]
Line_4 $$ String output = allOutputText.toString()-->Line_8 $$ output += details[ FD ]
Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_13 $$ projects.addAll(buildExecuter.convertProjects(buildResult.getGradle().getRootProject()))[ FD ]
Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_3 $$ boolean wasSuccessful = buildResult.getFailure() == null[ CD ]
Line_5 $$ if (!wasSuccessful) -->Line_12 $$ List<ProjectView> projects = new ArrayList<ProjectView>()[ CD ]
Line_5 $$ if (!wasSuccessful) -->Line_8 $$ output += details[ CD ]
Line_5 $$ if (!wasSuccessful) -->Line_11 $$ ProjectConverter buildExecuter = new ProjectConverter(((GradleInternal) buildResult.getGradle()).getServices().get(ProjectTaskLister.class))[ CD ]
Line_5 $$ if (!wasSuccessful) -->Line_9 $$ client.sendMessage(ProtocolConstants.TASK_LIST_COMPLETED_WITH_ERRORS_TYPE, output, wasSuccessful)[ CD ]
Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_11 $$ ProjectConverter buildExecuter = new ProjectConverter(((GradleInternal) buildResult.getGradle()).getServices().get(ProjectTaskLister.class))[ FD ]
Line_5 $$ if (!wasSuccessful) -->Line_14 $$ client.sendMessage(ProtocolConstants.TASK_LIST_COMPLETED_SUCCESSFULLY_TYPE, output, (Serializable) projects)[ CD ]
Line_7 $$ String details = GradlePluginLord.getGradleExceptionMessage(buildResult.getFailure(), gradle.getStartParameter().getShowStacktrace())-->Line_8 $$ output += details[ FD ]
Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_16 $$ client.sendMessage(ProtocolConstants.EXITING, null, null)[ CD ]
Line_11 $$ ProjectConverter buildExecuter = new ProjectConverter(((GradleInternal) buildResult.getGradle()).getServices().get(ProjectTaskLister.class))-->Line_13 $$ projects.addAll(buildExecuter.convertProjects(buildResult.getGradle().getRootProject()))[ FD ]
Line_4 $$ String output = allOutputText.toString()-->Line_14 $$ client.sendMessage(ProtocolConstants.TASK_LIST_COMPLETED_SUCCESSFULLY_TYPE, output, (Serializable) projects)[ FD ]
Line_5 $$ if (!wasSuccessful) -->Line_7 $$ String details = GradlePluginLord.getGradleExceptionMessage(buildResult.getFailure(), gradle.getStartParameter().getShowStacktrace())[ CD ]
Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_5 $$ if (!wasSuccessful) [ CD ]
Line_3 $$ boolean wasSuccessful = buildResult.getFailure() == null-->Line_9 $$ client.sendMessage(ProtocolConstants.TASK_LIST_COMPLETED_WITH_ERRORS_TYPE, output, wasSuccessful)[ FD ]
Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_3 $$ boolean wasSuccessful = buildResult.getFailure() == null[ FD ]
Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_4 $$ String output = allOutputText.toString()[ CD ]
Line_2 $$ public void buildFinished(BuildResult buildResult) -->Line_17 $$ client.stop()[ CD ]
Line_5 $$ if (!wasSuccessful) -->Line_13 $$ projects.addAll(buildExecuter.convertProjects(buildResult.getGradle().getRootProject()))[ CD ]
Line_12 $$ List<ProjectView> projects = new ArrayList<ProjectView>()-->Line_13 $$ projects.addAll(buildExecuter.convertProjects(buildResult.getGradle().getRootProject()))[ FD ]
