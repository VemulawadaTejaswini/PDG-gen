Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_16 $$ return result.toString()[ FD ]
Line_2 $$ private String formatImports(final int startOffset, final String value) -->Line_5 $$ final String[] imports = value.split(",")[ FD ]
Line_8 $$ for (int i = 1; i < imports.length; i++) -->Line_13 $$ result.append(anImport.trim())[ CD ]
Line_8 $$ for (int i = 1; i < imports.length; i++) -->Line_9 $$ String anImport = imports[i][ CD ]
Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_10 $$ result.append(',')[ FD ]
Line_2 $$ private String formatImports(final int startOffset, final String value) -->Line_4 $$ String offset = calcOffset(startOffset)[ CD ]
Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_11 $$ result.append('\n')[ FD ]
Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_12 $$ result.append(offset)[ FD ]
Line_8 $$ for (int i = 1; i < imports.length; i++) -->Line_10 $$ result.append(',')[ CD ]
Line_8 $$ for (int i = 1; i < imports.length; i++) -->Line_12 $$ result.append(offset)[ CD ]
Line_2 $$ private String formatImports(final int startOffset, final String value) -->Line_6 $$ if (imports.length >= 1) [ CD ]
Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_13 $$ result.append(anImport.trim())[ FD ]
Line_9 $$ String anImport = imports[i]-->Line_13 $$ result.append(anImport.trim())[ FD ]
Line_4 $$ String offset = calcOffset(startOffset)-->Line_12 $$ result.append(offset)[ FD ]
Line_2 $$ private String formatImports(final int startOffset, final String value) -->Line_4 $$ String offset = calcOffset(startOffset)[ FD ]
Line_6 $$ if (imports.length >= 1) -->Line_8 $$ for (int i = 1; i < imports.length; i++) [ CD ]
Line_2 $$ private String formatImports(final int startOffset, final String value) -->Line_3 $$ final StringBuffer result = new StringBuffer()[ CD ]
Line_2 $$ private String formatImports(final int startOffset, final String value) -->Line_5 $$ final String[] imports = value.split(",")[ CD ]
Line_6 $$ if (imports.length >= 1) -->Line_7 $$ result.append(imports[0])[ CD ]
Line_3 $$ final StringBuffer result = new StringBuffer()-->Line_7 $$ result.append(imports[0])[ FD ]
Line_8 $$ for (int i = 1; i < imports.length; i++) -->Line_11 $$ result.append('\n')[ CD ]
Line_2 $$ private String formatImports(final int startOffset, final String value) -->Line_16 $$ return result.toString()[ CD ]
