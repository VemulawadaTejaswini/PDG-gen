Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_12 $$ WebServicesTestUtils.checkStringMatch("diagnostics", diagString, diagnostics)[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_21 $$ assertTrue("avgReduceTime not >= 0", avgReduceTime >= 0)[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_20 $$ assertTrue("avgMapTime not >= 0", avgMapTime >= 0)[ CD ]
Line_7 $$ for (String diag : diagList) -->Line_8 $$ b.append(diag)[ FD ]
Line_3 $$ String diagString = ""-->Line_12 $$ WebServicesTestUtils.checkStringMatch("diagnostics", diagString, diagnostics)[ FD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_16 $$ assertTrue("successfulReduceAttempts not >= 0", successfulReduceAttempts >= 0)[ CD ]
Line_10 $$ diagString = b.toString()-->Line_12 $$ WebServicesTestUtils.checkStringMatch("diagnostics", diagString, diagnostics)[ FD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_22 $$ assertTrue("avgShuffleTime not >= 0", avgShuffleTime >= 0)[ CD ]
Line_6 $$ StringBuffer b = new StringBuffer()-->Line_8 $$ b.append(diag)[ FD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_13 $$ assertEquals("isUber incorrect", job.isUber(), uberized)[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_12 $$ WebServicesTestUtils.checkStringMatch("diagnostics", diagString, diagnostics)[ FD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_5 $$ if (diagList != null && !diagList.isEmpty()) [ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_19 $$ assertTrue("successfulMapAttempts not >= 0", successfulMapAttempts >= 0)[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_14 $$ assertTrue("failedReduceAttempts not >= 0", failedReduceAttempts >= 0)[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_18 $$ assertTrue("killedMapAttempts not >= 0", killedMapAttempts >= 0)[ CD ]
Line_4 $$ List<String> diagList = job.getDiagnostics()-->Line_5 $$ if (diagList != null && !diagList.isEmpty()) [ FD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_23 $$ assertTrue("avgMergeTime not >= 0", avgMergeTime >= 0)[ CD ]
Line_3 $$ String diagString = ""-->Line_10 $$ diagString = b.toString()[ FD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_3 $$ String diagString = ""[ CD ]
Line_5 $$ if (diagList != null && !diagList.isEmpty()) -->Line_6 $$ StringBuffer b = new StringBuffer()[ CD ]
Line_5 $$ if (diagList != null && !diagList.isEmpty()) -->Line_10 $$ diagString = b.toString()[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_4 $$ List<String> diagList = job.getDiagnostics()[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_17 $$ assertTrue("failedMapAttempts not >= 0", failedMapAttempts >= 0)[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_15 $$ assertTrue("killedReduceAttempts not >= 0", killedReduceAttempts >= 0)[ CD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_4 $$ List<String> diagList = job.getDiagnostics()[ FD ]
Line_6 $$ StringBuffer b = new StringBuffer()-->Line_10 $$ diagString = b.toString()[ FD ]
Line_2 $$ public static void verifyHsJobGenericSecure(Job job, Boolean uberized, String diagnostics, long avgMapTime, long avgReduceTime, long avgShuffleTime, long avgMergeTime, int failedReduceAttempts, int killedReduceAttempts, int successfulReduceAttempts, int failedMapAttempts, int killedMapAttempts, int successfulMapAttempts) -->Line_13 $$ assertEquals("isUber incorrect", job.isUber(), uberized)[ FD ]
