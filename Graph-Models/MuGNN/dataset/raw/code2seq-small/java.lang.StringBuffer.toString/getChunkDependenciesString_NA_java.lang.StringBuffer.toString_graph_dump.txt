Line_2 $$ private static String getChunkDependenciesString(ModuleChunk moduleChunk) -->Line_4 $$ final ModuleChunk[] dependencies = moduleChunk.getDependentChunks()[ CD ]
Line_2 $$ private static String getChunkDependenciesString(ModuleChunk moduleChunk) -->Line_12 $$ return moduleDependencies.toString()[ CD ]
Line_7 $$ if (idx > 0) -->Line_8 $$ moduleDependencies.append(",")[ CD ]
Line_3 $$ final StringBuffer moduleDependencies = new StringBuffer()-->Line_12 $$ return moduleDependencies.toString()[ FD ]
Line_5 $$ for (int idx = 0; idx < dependencies.length; idx++) -->Line_7 $$ if (idx > 0) [ FD ]
Line_2 $$ private static String getChunkDependenciesString(ModuleChunk moduleChunk) -->Line_3 $$ final StringBuffer moduleDependencies = new StringBuffer()[ CD ]
Line_5 $$ for (int idx = 0; idx < dependencies.length; idx++) -->Line_7 $$ if (idx > 0) [ CD ]
Line_2 $$ private static String getChunkDependenciesString(ModuleChunk moduleChunk) -->Line_5 $$ for (int idx = 0; idx < dependencies.length; idx++) [ CD ]
Line_6 $$ final ModuleChunk dependency = dependencies[idx]-->Line_10 $$ moduleDependencies.append(BuildProperties.getCompileTargetName(dependency.getName()))[ FD ]
Line_2 $$ private static String getChunkDependenciesString(ModuleChunk moduleChunk) -->Line_4 $$ final ModuleChunk[] dependencies = moduleChunk.getDependentChunks()[ FD ]
Line_5 $$ for (int idx = 0; idx < dependencies.length; idx++) -->Line_10 $$ moduleDependencies.append(BuildProperties.getCompileTargetName(dependency.getName()))[ CD ]
Line_3 $$ final StringBuffer moduleDependencies = new StringBuffer()-->Line_10 $$ moduleDependencies.append(BuildProperties.getCompileTargetName(dependency.getName()))[ FD ]
Line_5 $$ for (int idx = 0; idx < dependencies.length; idx++) -->Line_6 $$ final ModuleChunk dependency = dependencies[idx][ CD ]
Line_3 $$ final StringBuffer moduleDependencies = new StringBuffer()-->Line_8 $$ moduleDependencies.append(",")[ FD ]
