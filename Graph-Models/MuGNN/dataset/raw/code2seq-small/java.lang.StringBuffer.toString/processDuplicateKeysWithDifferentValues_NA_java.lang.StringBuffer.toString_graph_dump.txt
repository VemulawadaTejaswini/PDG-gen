Line_2 $$ private static void processDuplicateKeysWithDifferentValues(final Map<String, Set<String>> keyToDifferentValues, final Map<String, Set<PsiFile>> keyToFiles, final List<ProblemDescriptor> problemDescriptors, final InspectionManager manager, final PsiFile psiFile, final ProgressIndicator progress) -->Line_14 $$ final Set<PsiFile> psiFiles = keyToFiles.get(key)[ FD ]
Line_21 $$ for (IProperty property : propertiesByKey) -->Line_26 $$ surroundWithHref(message, property.getPsiElement().getFirstChild(), false)[ FD ]
Line_10 $$ if (values == null || values.size() < 2) -->Line_14 $$ final Set<PsiFile> psiFiles = keyToFiles.get(key)[ CD ]
Line_3 $$ for (String key : keyToDifferentValues.keySet()) -->Line_23 $$ message.append(InspectionsBundle.message("duplicate.property.diff.key.problem.descriptor", key))[ FD ]
Line_2 $$ private static void processDuplicateKeysWithDifferentValues(final Map<String, Set<String>> keyToDifferentValues, final Map<String, Set<PsiFile>> keyToFiles, final List<ProblemDescriptor> problemDescriptors, final InspectionManager manager, final PsiFile psiFile, final ProgressIndicator progress) -->Line_3 $$ for (String key : keyToDifferentValues.keySet()) [ FD ]
Line_19 $$ PropertiesFile propertiesFile = (PropertiesFile) file-->Line_20 $$ final List<IProperty> propertiesByKey = propertiesFile.findPropertiesByKey(key)[ FD ]
Line_22 $$ if (firstUsage) -->Line_24 $$ firstUsage = false[ CD ]
Line_2 $$ private static void processDuplicateKeysWithDifferentValues(final Map<String, Set<String>> keyToDifferentValues, final Map<String, Set<PsiFile>> keyToFiles, final List<ProblemDescriptor> problemDescriptors, final InspectionManager manager, final PsiFile psiFile, final ProgressIndicator progress) -->Line_4 $$ if (progress != null) [ FD ]
Line_10 $$ if (values == null || values.size() < 2) -->Line_15 $$ boolean firstUsage = true[ CD ]
Line_2 $$ private static void processDuplicateKeysWithDifferentValues(final Map<String, Set<String>> keyToDifferentValues, final Map<String, Set<PsiFile>> keyToFiles, final List<ProblemDescriptor> problemDescriptors, final InspectionManager manager, final PsiFile psiFile, final ProgressIndicator progress) -->Line_6 $$ if (progress.isCanceled())[ FD ]
Line_13 $$ StringBuffer message = new StringBuffer()-->Line_26 $$ surroundWithHref(message, property.getPsiElement().getFirstChild(), false)[ FD ]
Line_3 $$ for (String key : keyToDifferentValues.keySet()) -->Line_11 $$ keyToFiles.remove(key)[ FD ]
Line_3 $$ for (String key : keyToDifferentValues.keySet()) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.diff.key.progress.indicator.text", key))[ FD ]
Line_2 $$ private static void processDuplicateKeysWithDifferentValues(final Map<String, Set<String>> keyToDifferentValues, final Map<String, Set<PsiFile>> keyToFiles, final List<ProblemDescriptor> problemDescriptors, final InspectionManager manager, final PsiFile psiFile, final ProgressIndicator progress) -->Line_11 $$ keyToFiles.remove(key)[ FD ]
Line_3 $$ for (String key : keyToDifferentValues.keySet()) -->Line_14 $$ final Set<PsiFile> psiFiles = keyToFiles.get(key)[ FD ]
Line_9 $$ final Set<String> values = keyToDifferentValues.get(key)-->Line_10 $$ if (values == null || values.size() < 2) [ FD ]
Line_3 $$ for (String key : keyToDifferentValues.keySet()) -->Line_9 $$ final Set<String> values = keyToDifferentValues.get(key)[ FD ]
Line_4 $$ if (progress != null) -->Line_6 $$ if (progress.isCanceled())[ CD ]
Line_2 $$ private static void processDuplicateKeysWithDifferentValues(final Map<String, Set<String>> keyToDifferentValues, final Map<String, Set<PsiFile>> keyToFiles, final List<ProblemDescriptor> problemDescriptors, final InspectionManager manager, final PsiFile psiFile, final ProgressIndicator progress) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.diff.key.progress.indicator.text", key))[ FD ]
Line_13 $$ StringBuffer message = new StringBuffer()-->Line_23 $$ message.append(InspectionsBundle.message("duplicate.property.diff.key.problem.descriptor", key))[ FD ]
Line_4 $$ if (progress != null) -->Line_5 $$ progress.setText2(InspectionsBundle.message("duplicate.property.diff.key.progress.indicator.text", key))[ CD ]
Line_2 $$ private static void processDuplicateKeysWithDifferentValues(final Map<String, Set<String>> keyToDifferentValues, final Map<String, Set<PsiFile>> keyToFiles, final List<ProblemDescriptor> problemDescriptors, final InspectionManager manager, final PsiFile psiFile, final ProgressIndicator progress) -->Line_29 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_13 $$ StringBuffer message = new StringBuffer()-->Line_29 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ FD ]
Line_3 $$ for (String key : keyToDifferentValues.keySet()) -->Line_20 $$ final List<IProperty> propertiesByKey = propertiesFile.findPropertiesByKey(key)[ FD ]
Line_2 $$ private static void processDuplicateKeysWithDifferentValues(final Map<String, Set<String>> keyToDifferentValues, final Map<String, Set<PsiFile>> keyToFiles, final List<ProblemDescriptor> problemDescriptors, final InspectionManager manager, final PsiFile psiFile, final ProgressIndicator progress) -->Line_9 $$ final Set<String> values = keyToDifferentValues.get(key)[ FD ]
Line_10 $$ if (values == null || values.size() < 2) -->Line_13 $$ StringBuffer message = new StringBuffer()[ CD ]
Line_10 $$ if (values == null || values.size() < 2) -->Line_11 $$ keyToFiles.remove(key)[ CD ]
Line_15 $$ boolean firstUsage = true-->Line_24 $$ firstUsage = false[ FD ]
Line_22 $$ if (firstUsage) -->Line_23 $$ message.append(InspectionsBundle.message("duplicate.property.diff.key.problem.descriptor", key))[ CD ]
Line_10 $$ if (values == null || values.size() < 2) -->Line_29 $$ problemDescriptors.add(manager.createProblemDescriptor(psiFile, message.toString(), false, null, ProblemHighlightType.GENERIC_ERROR_OR_WARNING))[ CD ]
