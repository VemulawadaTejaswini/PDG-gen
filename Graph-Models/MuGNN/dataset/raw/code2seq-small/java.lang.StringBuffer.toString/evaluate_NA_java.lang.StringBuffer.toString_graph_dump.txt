Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_6 $$ if (file != null)[ FD ]
Line_4 $$ VelocityContext vc = new VelocityContext()-->Line_33 $$ engine.evaluate(vc, sw, CopyrightManager.class.getName(), template)[ FD ]
Line_13 $$ if (file != null) -->Line_14 $$ final VirtualFile virtualFile = PsiUtilCore.getVirtualFile(file)[ CD ]
Line_17 $$ if (variablesProvider != null) -->Line_19 $$ variablesProvider.collectVariables(context, project, module, file)[ CD ]
Line_4 $$ VelocityContext vc = new VelocityContext()-->Line_21 $$ vc.put(entry.getKey(), entry.getValue())[ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_6 $$ if (file != null)[ CD ]
Line_4 $$ VelocityContext vc = new VelocityContext()-->Line_9 $$ vc.put("project", new ProjectInfo(project))[ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_13 $$ if (file != null) [ FD ]
Line_17 $$ if (variablesProvider != null) -->Line_18 $$ final Map<String, Object> context = new HashMap<String, Object>()[ CD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_13 $$ if (file != null) [ CD ]
Line_4 $$ VelocityContext vc = new VelocityContext()-->Line_11 $$ vc.put("module", new ModuleInfo(module))[ FD ]
Line_20 $$ for (Map.Entry<String, Object> entry : context.entrySet()) -->Line_21 $$ vc.put(entry.getKey(), entry.getValue())[ FD ]
Line_8 $$ if (project != null)-->Line_9 $$ vc.put("project", new ProjectInfo(project))[ CD ]
Line_29 $$ if (template.endsWith("$")) -->Line_30 $$ template += getVelocitySuffix()[ CD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_33 $$ engine.evaluate(vc, sw, CopyrightManager.class.getName(), template)[ FD ]
Line_18 $$ final Map<String, Object> context = new HashMap<String, Object>()-->Line_19 $$ variablesProvider.collectVariables(context, project, module, file)[ FD ]
Line_14 $$ final VirtualFile virtualFile = PsiUtilCore.getVirtualFile(file)-->Line_16 $$ final CopyrightVariablesProvider variablesProvider = CopyrightVariablesProviders.INSTANCE.forFileType(virtualFile.getFileType())[ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_29 $$ if (template.endsWith("$")) [ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_10 $$ if (module != null)[ CD ]
Line_28 $$ boolean stripLineBreak = false-->Line_31 $$ stripLineBreak = true[ FD ]
Line_4 $$ VelocityContext vc = new VelocityContext()-->Line_7 $$ vc.put("file", new FileInfo(file))[ FD ]
Line_3 $$ VelocityEngine engine = getEngine()-->Line_33 $$ engine.evaluate(vc, sw, CopyrightManager.class.getName(), template)[ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_5 $$ vc.put("today", new DateInfo())[ CD ]
Line_30 $$ template += getVelocitySuffix()-->Line_33 $$ engine.evaluate(vc, sw, CopyrightManager.class.getName(), template)[ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_8 $$ if (project != null)[ FD ]
Line_15 $$ if (virtualFile != null) -->Line_16 $$ final CopyrightVariablesProvider variablesProvider = CopyrightVariablesProviders.INSTANCE.forFileType(virtualFile.getFileType())[ CD ]
Line_18 $$ final Map<String, Object> context = new HashMap<String, Object>()-->Line_20 $$ for (Map.Entry<String, Object> entry : context.entrySet()) [ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_12 $$ vc.put("username", System.getProperty("user.name"))[ CD ]
Line_4 $$ VelocityContext vc = new VelocityContext()-->Line_12 $$ vc.put("username", System.getProperty("user.name"))[ FD ]
Line_34 $$ final String result = sw.getBuffer().toString()-->Line_35 $$ return stripLineBreak ? StringUtil.trimEnd(result, getVelocitySuffix()) : result[ FD ]
Line_14 $$ final VirtualFile virtualFile = PsiUtilCore.getVirtualFile(file)-->Line_15 $$ if (virtualFile != null) [ FD ]
Line_6 $$ if (file != null)-->Line_7 $$ vc.put("file", new FileInfo(file))[ CD ]
Line_10 $$ if (module != null)-->Line_11 $$ vc.put("module", new ModuleInfo(module))[ CD ]
Line_16 $$ final CopyrightVariablesProvider variablesProvider = CopyrightVariablesProviders.INSTANCE.forFileType(virtualFile.getFileType())-->Line_19 $$ variablesProvider.collectVariables(context, project, module, file)[ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_19 $$ variablesProvider.collectVariables(context, project, module, file)[ FD ]
Line_27 $$ StringWriter sw = new StringWriter()-->Line_33 $$ engine.evaluate(vc, sw, CopyrightManager.class.getName(), template)[ FD ]
Line_13 $$ if (file != null) -->Line_15 $$ if (virtualFile != null) [ CD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_30 $$ template += getVelocitySuffix()[ FD ]
Line_4 $$ VelocityContext vc = new VelocityContext()-->Line_5 $$ vc.put("today", new DateInfo())[ FD ]
Line_29 $$ if (template.endsWith("$")) -->Line_31 $$ stripLineBreak = true[ CD ]
Line_16 $$ final CopyrightVariablesProvider variablesProvider = CopyrightVariablesProviders.INSTANCE.forFileType(virtualFile.getFileType())-->Line_17 $$ if (variablesProvider != null) [ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_4 $$ VelocityContext vc = new VelocityContext()[ CD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_3 $$ VelocityEngine engine = getEngine()[ CD ]
Line_27 $$ StringWriter sw = new StringWriter()-->Line_34 $$ final String result = sw.getBuffer().toString()[ FD ]
Line_15 $$ if (virtualFile != null) -->Line_17 $$ if (variablesProvider != null) [ CD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_8 $$ if (project != null)[ CD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_10 $$ if (module != null)[ FD ]
Line_2 $$ public static String evaluate(PsiFile file, Project project, Module module, String template) -->Line_14 $$ final VirtualFile virtualFile = PsiUtilCore.getVirtualFile(file)[ FD ]
