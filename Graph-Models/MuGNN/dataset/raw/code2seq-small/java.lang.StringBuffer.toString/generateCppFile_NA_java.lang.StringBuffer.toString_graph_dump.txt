Line_16 $$ CMethod cMethod = findCMethod(javaMethod, cMethods)-->Line_19 $$ emitJavaMethod(buffer, javaMethod, cMethod)[ FD ]
Line_3 $$ String headerFileContent = hFile.readString()-->Line_4 $$ ArrayList<CMethod> cMethods = cMethodParser.parse(headerFileContent).getMethods()[ FD ]
Line_2 $$ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor hFile, FileDescriptor cppFile) throws Exception -->Line_22 $$ cppFile.writeString(buffer.toString(), false, "UTF-8")[ CD ]
Line_2 $$ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor hFile, FileDescriptor cppFile) throws Exception -->Line_3 $$ String headerFileContent = hFile.readString()[ CD ]
Line_11 $$ if (segment instanceof JavaMethod) -->Line_17 $$ if (cMethod == null)[ CD ]
Line_2 $$ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor hFile, FileDescriptor cppFile) throws Exception -->Line_22 $$ cppFile.writeString(buffer.toString(), false, "UTF-8")[ FD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_22 $$ cppFile.writeString(buffer.toString(), false, "UTF-8")[ FD ]
Line_8 $$ if (segment instanceof JniSection) -->Line_9 $$ emitJniSection(buffer, (JniSection) segment)[ CD ]
Line_12 $$ JavaMethod javaMethod = (JavaMethod) segment-->Line_14 $$ throw new RuntimeException("Method '" + javaMethod.getName() + "' has no body")[ FD ]
Line_4 $$ ArrayList<CMethod> cMethods = cMethodParser.parse(headerFileContent).getMethods()-->Line_16 $$ CMethod cMethod = findCMethod(javaMethod, cMethods)[ FD ]
Line_11 $$ if (segment instanceof JavaMethod) -->Line_19 $$ emitJavaMethod(buffer, javaMethod, cMethod)[ CD ]
Line_12 $$ JavaMethod javaMethod = (JavaMethod) segment-->Line_13 $$ if (javaMethod.getNativeCode() == null) [ FD ]
Line_7 $$ for (JavaSegment segment : javaSegments) -->Line_8 $$ if (segment instanceof JniSection) [ FD ]
Line_16 $$ CMethod cMethod = findCMethod(javaMethod, cMethods)-->Line_17 $$ if (cMethod == null)[ FD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_6 $$ emitHeaderInclude(buffer, hFile.name())[ FD ]
Line_2 $$ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor hFile, FileDescriptor cppFile) throws Exception -->Line_3 $$ String headerFileContent = hFile.readString()[ FD ]
Line_11 $$ if (segment instanceof JavaMethod) -->Line_12 $$ JavaMethod javaMethod = (JavaMethod) segment[ CD ]
Line_2 $$ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor hFile, FileDescriptor cppFile) throws Exception -->Line_6 $$ emitHeaderInclude(buffer, hFile.name())[ CD ]
Line_12 $$ JavaMethod javaMethod = (JavaMethod) segment-->Line_19 $$ emitJavaMethod(buffer, javaMethod, cMethod)[ FD ]
Line_2 $$ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor hFile, FileDescriptor cppFile) throws Exception -->Line_5 $$ StringBuffer buffer = new StringBuffer()[ CD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_9 $$ emitJniSection(buffer, (JniSection) segment)[ FD ]
Line_2 $$ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor hFile, FileDescriptor cppFile) throws Exception -->Line_4 $$ ArrayList<CMethod> cMethods = cMethodParser.parse(headerFileContent).getMethods()[ CD ]
Line_12 $$ JavaMethod javaMethod = (JavaMethod) segment-->Line_18 $$ throw new RuntimeException("Couldn't find C method for Java method '" + javaMethod.getClassName() + "#" + javaMethod.getName() + "'")[ FD ]
Line_12 $$ JavaMethod javaMethod = (JavaMethod) segment-->Line_16 $$ CMethod cMethod = findCMethod(javaMethod, cMethods)[ FD ]
Line_2 $$ private void generateCppFile(ArrayList<JavaSegment> javaSegments, FileDescriptor hFile, FileDescriptor cppFile) throws Exception -->Line_6 $$ emitHeaderInclude(buffer, hFile.name())[ FD ]
Line_5 $$ StringBuffer buffer = new StringBuffer()-->Line_19 $$ emitJavaMethod(buffer, javaMethod, cMethod)[ FD ]
Line_11 $$ if (segment instanceof JavaMethod) -->Line_16 $$ CMethod cMethod = findCMethod(javaMethod, cMethods)[ CD ]
Line_7 $$ for (JavaSegment segment : javaSegments) -->Line_11 $$ if (segment instanceof JavaMethod) [ FD ]
Line_11 $$ if (segment instanceof JavaMethod) -->Line_13 $$ if (javaMethod.getNativeCode() == null) [ CD ]
