Line_5 $$ String coordinatorURL = coordinatorURLAttribute.isDefined() ? coordinatorURLAttribute.asString() : null-->Line_24 $$ if (coordinatorURL != null) [ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_3 $$ final String hostName = HOST_NAME.resolveModelAttribute(context, model).asString()[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_27 $$ final boolean isDefaultContextPropagation = model.hasDefined(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION) ? model.get(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION).asBoolean() : false[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_48 $$ XTSHandlersService.install(target, isDefaultContextPropagation)[ CD ]
Line_6 $$ if (coordinatorURL != null) -->Line_8 $$ boolean isIPv6Address = false[ CD ]
Line_28 $$ context.addStep(new AbstractDeploymentChainStep() -->Line_30 $$ processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_XTS_COMPONENT_INTERCEPTORS, new XTSInterceptorDeploymentProcessor())[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_35 $$ final ServiceTarget target = context.getServiceTarget()[ CD ]
Line_5 $$ String coordinatorURL = coordinatorURLAttribute.isDefined() ? coordinatorURLAttribute.asString() : null-->Line_21 $$ coordinatorURL = sb.toString()[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_5 $$ String coordinatorURL = coordinatorURLAttribute.isDefined() ? coordinatorURLAttribute.asString() : null[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_6 $$ if (coordinatorURL != null) [ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_53 $$ xtsServiceBuilder.addDependency(WSServices.XTS_CLIENT_INTEGRATION_SERVICE)[ CD ]
Line_16 $$ if (isIPv6Address) -->Line_18 $$ for (int i = 1; i < attrs.length; i++) [ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_4 $$ final ModelNode coordinatorURLAttribute = ENVIRONMENT_URL.resolveModelAttribute(context, model)[ FD ]
Line_28 $$ context.addStep(new AbstractDeploymentChainStep() -->Line_31 $$ processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_XTS_SOAP_HANDLERS, new XTSHandlerDeploymentProcessor())[ CD ]
Line_16 $$ if (isIPv6Address) -->Line_21 $$ coordinatorURL = sb.toString()[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_65 $$ txBridgeOutboundRecoveryServiceBuilder.setInitialMode(Mode.ACTIVE).install()[ CD ]
Line_5 $$ String coordinatorURL = coordinatorURLAttribute.isDefined() ? coordinatorURLAttribute.asString() : null-->Line_7 $$ String[] attrs = coordinatorURL.split("/")[ FD ]
Line_28 $$ context.addStep(new AbstractDeploymentChainStep() -->Line_32 $$ processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.DEPENDENCIES, Phase.DEPENDENCIES_XTS, new XTSDependenciesDeploymentProcessor())[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_60 $$ txBridgeInboundRecoveryServiceBuilder.addDependency(XTSServices.JBOSS_XTS_MAIN)[ CD ]
Line_24 $$ if (coordinatorURL != null) -->Line_25 $$ XtsAsLogger.ROOT_LOGGER.debugf("nodeIdentifier=%s%n", coordinatorURL)[ CD ]
Line_28 $$ context.addStep(new AbstractDeploymentChainStep() -->Line_32 $$ processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.DEPENDENCIES, Phase.DEPENDENCIES_XTS, new XTSDependenciesDeploymentProcessor())[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_27 $$ final boolean isDefaultContextPropagation = model.hasDefined(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION) ? model.get(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION).asBoolean() : false[ FD ]
Line_6 $$ if (coordinatorURL != null) -->Line_9 $$ for (int i = 0; i < attrs.length; i++) [ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_4 $$ final ModelNode coordinatorURLAttribute = ENVIRONMENT_URL.resolveModelAttribute(context, model)[ CD ]
Line_3 $$ final String hostName = HOST_NAME.resolveModelAttribute(context, model).asString()-->Line_45 $$ endpointBuilder = EndpointPublishService.createServiceBuilder(target, contextName, loader, hostName, map)[ FD ]
Line_10 $$ if (attrs[i].startsWith("::1")) -->Line_11 $$ attrs[i] = "[" + attrs[i].substring(0, 3) + "]" + attrs[i].substring(3)[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_36 $$ final ClassLoader loader = XTSService.class.getClassLoader()[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_3 $$ final String hostName = HOST_NAME.resolveModelAttribute(context, model).asString()[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_57 $$ xtsServiceBuilder.setInitialMode(Mode.ACTIVE).install()[ CD ]
Line_5 $$ String coordinatorURL = coordinatorURLAttribute.isDefined() ? coordinatorURLAttribute.asString() : null-->Line_6 $$ if (coordinatorURL != null) [ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_61 $$ txBridgeInboundRecoveryServiceBuilder.setInitialMode(Mode.ACTIVE).install()[ CD ]
Line_9 $$ for (int i = 0; i < attrs.length; i++) -->Line_10 $$ if (attrs[i].startsWith("::1")) [ CD ]
Line_17 $$ StringBuffer sb = new StringBuffer(attrs[0])-->Line_21 $$ coordinatorURL = sb.toString()[ FD ]
Line_21 $$ coordinatorURL = sb.toString()-->Line_24 $$ if (coordinatorURL != null) [ FD ]
Line_21 $$ coordinatorURL = sb.toString()-->Line_25 $$ XtsAsLogger.ROOT_LOGGER.debugf("nodeIdentifier=%s%n", coordinatorURL)[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_28 $$ context.addStep(new AbstractDeploymentChainStep() [ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_35 $$ final ServiceTarget target = context.getServiceTarget()[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_59 $$ ServiceBuilder<?> txBridgeInboundRecoveryServiceBuilder = target.addService(XTSServices.JBOSS_XTS_TXBRIDGE_INBOUND_RECOVERY, txBridgeInboundRecoveryService)[ CD ]
Line_16 $$ if (isIPv6Address) -->Line_17 $$ StringBuffer sb = new StringBuffer(attrs[0])[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_51 $$ xtsServiceBuilder.addDependency(TxnServices.JBOSS_TXN_ARJUNA_TRANSACTION_MANAGER)[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_28 $$ context.addStep(new AbstractDeploymentChainStep() [ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_64 $$ txBridgeOutboundRecoveryServiceBuilder.addDependency(XTSServices.JBOSS_XTS_MAIN)[ CD ]
Line_10 $$ if (attrs[i].startsWith("::1")) -->Line_12 $$ isIPv6Address = true[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_52 $$ xtsServiceBuilder.addDependency(WSServices.CONFIG_SERVICE, ServerConfig.class, xtsService.getWSServerConfig())[ CD ]
Line_9 $$ for (int i = 0; i < attrs.length; i++) -->Line_18 $$ for (int i = 1; i < attrs.length; i++) [ FD ]
Line_28 $$ context.addStep(new AbstractDeploymentChainStep() -->Line_30 $$ processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_XTS_COMPONENT_INTERCEPTORS, new XTSInterceptorDeploymentProcessor())[ CD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_63 $$ ServiceBuilder<?> txBridgeOutboundRecoveryServiceBuilder = target.addService(XTSServices.JBOSS_XTS_TXBRIDGE_OUTBOUND_RECOVERY, txBridgeOutboundRecoveryService)[ CD ]
Line_27 $$ final boolean isDefaultContextPropagation = model.hasDefined(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION) ? model.get(CommonAttributes.DEFAULT_CONTEXT_PROPAGATION).asBoolean() : false-->Line_48 $$ XTSHandlersService.install(target, isDefaultContextPropagation)[ FD ]
Line_4 $$ final ModelNode coordinatorURLAttribute = ENVIRONMENT_URL.resolveModelAttribute(context, model)-->Line_5 $$ String coordinatorURL = coordinatorURLAttribute.isDefined() ? coordinatorURLAttribute.asString() : null[ FD ]
Line_8 $$ boolean isIPv6Address = false-->Line_12 $$ isIPv6Address = true[ FD ]
Line_18 $$ for (int i = 1; i < attrs.length; i++) -->Line_19 $$ sb.append('/').append(attrs[i])[ CD ]
Line_5 $$ String coordinatorURL = coordinatorURLAttribute.isDefined() ? coordinatorURLAttribute.asString() : null-->Line_25 $$ XtsAsLogger.ROOT_LOGGER.debugf("nodeIdentifier=%s%n", coordinatorURL)[ FD ]
Line_28 $$ context.addStep(new AbstractDeploymentChainStep() -->Line_31 $$ processorTarget.addDeploymentProcessor(XTSExtension.SUBSYSTEM_NAME, Phase.PARSE, Phase.PARSE_XTS_SOAP_HANDLERS, new XTSHandlerDeploymentProcessor())[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_50 $$ ServiceBuilder<?> xtsServiceBuilder = target.addService(XTSServices.JBOSS_XTS_MAIN, xtsService)[ CD ]
Line_6 $$ if (coordinatorURL != null) -->Line_7 $$ String[] attrs = coordinatorURL.split("/")[ CD ]
Line_17 $$ StringBuffer sb = new StringBuffer(attrs[0])-->Line_19 $$ sb.append('/').append(attrs[i])[ FD ]
Line_2 $$ protected void performBoottime(OperationContext context, ModelNode operation, ModelNode model) throws OperationFailedException -->Line_24 $$ if (coordinatorURL != null) [ CD ]
Line_6 $$ if (coordinatorURL != null) -->Line_16 $$ if (isIPv6Address) [ CD ]
