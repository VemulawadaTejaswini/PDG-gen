Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_6 $$ String comment = dataInput.readUTF()[ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_9 $$ List<Change> changes = new ArrayList<Change>()[ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_8 $$ int changesCount = dataInput.readInt()[ FD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_4 $$ String branch = dataInput.readUTF()[ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_12 $$ HgContentRevision afterRevision = readRevision(repositoryLocation, dataInput)[ FD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_3 $$ HgRevisionNumber revision = HgRevisionNumber.getInstance(dataInput.readUTF(), dataInput.readUTF())[ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_7 $$ Date commitDate = new Date(dataInput.readLong())[ FD ]
Line_8 $$ int changesCount = dataInput.readInt()-->Line_10 $$ for (int i = 0; i < changesCount; i++) [ FD ]
Line_10 $$ for (int i = 0; i < changesCount; i++) -->Line_12 $$ HgContentRevision afterRevision = readRevision(repositoryLocation, dataInput)[ CD ]
Line_10 $$ for (int i = 0; i < changesCount; i++) -->Line_13 $$ changes.add(new Change(beforeRevision, afterRevision))[ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_5 $$ String committerName = dataInput.readUTF()[ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_15 $$ return new HgCommittedChangeList(myVcs, revision, branch, comment, committerName, commitDate, changes)[ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_3 $$ HgRevisionNumber revision = HgRevisionNumber.getInstance(dataInput.readUTF(), dataInput.readUTF())[ FD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_6 $$ String comment = dataInput.readUTF()[ FD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_11 $$ HgContentRevision beforeRevision = readRevision(repositoryLocation, dataInput)[ FD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_8 $$ int changesCount = dataInput.readInt()[ CD ]
Line_9 $$ List<Change> changes = new ArrayList<Change>()-->Line_13 $$ changes.add(new Change(beforeRevision, afterRevision))[ FD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_7 $$ Date commitDate = new Date(dataInput.readLong())[ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_10 $$ for (int i = 0; i < changesCount; i++) [ CD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_4 $$ String branch = dataInput.readUTF()[ FD ]
Line_2 $$ public CommittedChangeList readChangeList(RepositoryLocation repositoryLocation, DataInput dataInput) throws IOException -->Line_5 $$ String committerName = dataInput.readUTF()[ FD ]
Line_10 $$ for (int i = 0; i < changesCount; i++) -->Line_11 $$ HgContentRevision beforeRevision = readRevision(repositoryLocation, dataInput)[ CD ]
