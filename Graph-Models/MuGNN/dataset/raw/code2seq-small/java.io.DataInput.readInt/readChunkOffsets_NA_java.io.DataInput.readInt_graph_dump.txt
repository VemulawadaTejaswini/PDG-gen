Line_3 $$ final int chunkCount-->Line_6 $$ if (chunkCount <= 0)[ FD ]
Line_19 $$ if (offsets != null)-->Line_20 $$ offsets.close()[ CD ]
Line_11 $$ Memory offsets = Memory.allocate(chunkCount * 8L)-->Line_19 $$ if (offsets != null)[ FD ]
Line_3 $$ final int chunkCount-->Line_5 $$ chunkCount = input.readInt()[ FD ]
Line_11 $$ Memory offsets = Memory.allocate(chunkCount * 8L)-->Line_15 $$ offsets.setLong(i * 8L, input.readLong())[ FD ]
Line_14 $$ for (i = 0; i < chunkCount; i++) -->Line_22 $$ String msg = String.format("Corrupted Index File %s: read %d but expected %d chunks.", indexFilePath, i, chunkCount)[ FD ]
Line_12 $$ int i = 0-->Line_14 $$ for (i = 0; i < chunkCount; i++) [ FD ]
Line_2 $$ private Memory readChunkOffsets(DataInput input) -->Line_5 $$ chunkCount = input.readInt()[ FD ]
Line_2 $$ private Memory readChunkOffsets(DataInput input) -->Line_3 $$ final int chunkCount[ CD ]
Line_5 $$ chunkCount = input.readInt()-->Line_22 $$ String msg = String.format("Corrupted Index File %s: read %d but expected %d chunks.", indexFilePath, i, chunkCount)[ FD ]
Line_12 $$ int i = 0-->Line_22 $$ String msg = String.format("Corrupted Index File %s: read %d but expected %d chunks.", indexFilePath, i, chunkCount)[ FD ]
Line_3 $$ final int chunkCount-->Line_14 $$ for (i = 0; i < chunkCount; i++) [ FD ]
Line_14 $$ for (i = 0; i < chunkCount; i++) -->Line_15 $$ offsets.setLong(i * 8L, input.readLong())[ CD ]
Line_3 $$ final int chunkCount-->Line_22 $$ String msg = String.format("Corrupted Index File %s: read %d but expected %d chunks.", indexFilePath, i, chunkCount)[ FD ]
Line_2 $$ private Memory readChunkOffsets(DataInput input) -->Line_12 $$ int i = 0[ CD ]
Line_11 $$ Memory offsets = Memory.allocate(chunkCount * 8L)-->Line_20 $$ offsets.close()[ FD ]
Line_21 $$ if (e instanceof EOFException) -->Line_22 $$ String msg = String.format("Corrupted Index File %s: read %d but expected %d chunks.", indexFilePath, i, chunkCount)[ CD ]
Line_5 $$ chunkCount = input.readInt()-->Line_6 $$ if (chunkCount <= 0)[ FD ]
Line_5 $$ chunkCount = input.readInt()-->Line_14 $$ for (i = 0; i < chunkCount; i++) [ FD ]
Line_2 $$ private Memory readChunkOffsets(DataInput input) -->Line_15 $$ offsets.setLong(i * 8L, input.readLong())[ FD ]
Line_2 $$ private Memory readChunkOffsets(DataInput input) -->Line_11 $$ Memory offsets = Memory.allocate(chunkCount * 8L)[ CD ]
