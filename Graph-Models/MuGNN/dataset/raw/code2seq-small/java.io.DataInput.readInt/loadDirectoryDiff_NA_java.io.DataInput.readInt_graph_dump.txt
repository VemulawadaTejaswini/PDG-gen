Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_6 $$ List<INode> createdList = loadCreatedList(parent, in)[ FD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_10 $$ return sdiff[ CD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_8 $$ List<DirectoryDiff> diffs = parent.getDiffs().asList()[ CD ]
Line_8 $$ List<DirectoryDiff> diffs = parent.getDiffs().asList()-->Line_9 $$ DirectoryDiff sdiff = new DirectoryDiff(snapshot.getId(), snapshotINode, diffs.isEmpty() ? null : diffs.get(0), childrenSize, createdList, deletedList, snapshotINode == snapshot.getRoot())[ FD ]
Line_3 $$ final Snapshot snapshot = loader.getSnapshot(in)-->Line_5 $$ INodeDirectoryAttributes snapshotINode = loadSnapshotINodeInDirectoryDiff(snapshot, in, loader)[ FD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_4 $$ int childrenSize = in.readInt()[ CD ]
Line_6 $$ List<INode> createdList = loadCreatedList(parent, in)-->Line_7 $$ List<INode> deletedList = loadDeletedList(parent, createdList, in, loader)[ FD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_6 $$ List<INode> createdList = loadCreatedList(parent, in)[ CD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_5 $$ INodeDirectoryAttributes snapshotINode = loadSnapshotINodeInDirectoryDiff(snapshot, in, loader)[ CD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_7 $$ List<INode> deletedList = loadDeletedList(parent, createdList, in, loader)[ FD ]
Line_3 $$ final Snapshot snapshot = loader.getSnapshot(in)-->Line_9 $$ DirectoryDiff sdiff = new DirectoryDiff(snapshot.getId(), snapshotINode, diffs.isEmpty() ? null : diffs.get(0), childrenSize, createdList, deletedList, snapshotINode == snapshot.getRoot())[ FD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_3 $$ final Snapshot snapshot = loader.getSnapshot(in)[ CD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_8 $$ List<DirectoryDiff> diffs = parent.getDiffs().asList()[ FD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_7 $$ List<INode> deletedList = loadDeletedList(parent, createdList, in, loader)[ CD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_9 $$ DirectoryDiff sdiff = new DirectoryDiff(snapshot.getId(), snapshotINode, diffs.isEmpty() ? null : diffs.get(0), childrenSize, createdList, deletedList, snapshotINode == snapshot.getRoot())[ CD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_5 $$ INodeDirectoryAttributes snapshotINode = loadSnapshotINodeInDirectoryDiff(snapshot, in, loader)[ FD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_3 $$ final Snapshot snapshot = loader.getSnapshot(in)[ FD ]
Line_2 $$ private static DirectoryDiff loadDirectoryDiff(INodeDirectory parent, DataInput in, FSImageFormat.Loader loader) throws IOException -->Line_4 $$ int childrenSize = in.readInt()[ FD ]
