Line_58 $$ snapshottable = in.readBoolean()-->Line_59 $$ if (!snapshottable) [ FD ]
Line_68 $$ if (nsQuota >= 0 || dsQuota >= 0) -->Line_69 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ CD ]
Line_49 $$ if (numBlocks == -1) -->Line_78 $$ if (numBlocks == -2) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_81 $$ if (counter != null) [ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_9 $$ final long modificationTime = in.readLong()[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_80 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ FD ]
Line_26 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_28 $$ if (isSnapshotINode) [ CD ]
Line_78 $$ if (numBlocks == -2) -->Line_81 $$ if (counter != null) [ CD ]
Line_16 $$ if (numBlocks >= 0) -->Line_45 $$ if (underConstruction) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_60 $$ withSnapshot = in.readBoolean()[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_14 $$ final long blockSize = in.readLong()[ CD ]
Line_4 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_5 $$ namesystem.getFSDirectory().verifyINodeName(localName)[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_7 $$ long inodeId = NameNodeLayoutVersion.supports(LayoutVersion.Feature.ADD_INODE_ID, imgVersion) ? in.readLong() : namesystem.allocateNewInodeId()[ FD ]
Line_3 $$ final int imgVersion = getLayoutVersion()-->Line_52 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.DISKSPACE_QUOTA, imgVersion)) [ FD ]
Line_49 $$ if (numBlocks == -1) -->Line_68 $$ if (nsQuota >= 0 || dsQuota >= 0) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_65 $$ counter.increment()[ FD ]
Line_85 $$ if (numBlocks == -3) -->Line_86 $$ final boolean isWithName = in.readBoolean()[ CD ]
Line_51 $$ long dsQuota = -1L-->Line_53 $$ dsQuota = in.readLong()[ FD ]
Line_30 $$ if (underConstruction) -->Line_31 $$ clientName = FSImageSerialization.readString(in)[ CD ]
Line_15 $$ final int numBlocks = in.readInt()-->Line_85 $$ if (numBlocks == -3) [ FD ]
Line_11 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.FILE_ACCESS_TIME, imgVersion)) -->Line_12 $$ atime = in.readLong()[ CD ]
Line_74 $$ if (snapshottable) -->Line_75 $$ dir.addSnapshottableFeature()[ CD ]
Line_55 $$ boolean snapshottable = false-->Line_59 $$ if (!snapshottable) [ FD ]
Line_23 $$ String clientMachine = ""-->Line_32 $$ clientMachine = FSImageSerialization.readString(in)[ FD ]
Line_23 $$ String clientMachine = ""-->Line_46 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_16 $$ if (numBlocks >= 0) -->Line_48 $$ return fileDiffs == null ? file : new INodeFile(file, fileDiffs)[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_82 $$ counter.increment()[ FD ]
Line_15 $$ final int numBlocks = in.readInt()-->Line_18 $$ for (int j = 0; j < numBlocks; j++) [ FD ]
Line_49 $$ if (numBlocks == -1) -->Line_67 $$ final INodeDirectory dir = new INodeDirectory(inodeId, localName, permissions, modificationTime)[ CD ]
Line_16 $$ if (numBlocks >= 0) -->Line_41 $$ if (counter != null) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_29 $$ underConstruction = in.readBoolean()[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_31 $$ clientName = FSImageSerialization.readString(in)[ FD ]
Line_16 $$ if (numBlocks >= 0) -->Line_23 $$ String clientMachine = ""[ CD ]
Line_53 $$ dsQuota = in.readLong()-->Line_69 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ FD ]
Line_56 $$ boolean withSnapshot = false-->Line_60 $$ withSnapshot = in.readBoolean()[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_9 $$ final long modificationTime = in.readLong()[ FD ]
Line_30 $$ if (underConstruction) -->Line_32 $$ clientMachine = FSImageSerialization.readString(in)[ CD ]
Line_22 $$ String clientName = ""-->Line_31 $$ clientName = FSImageSerialization.readString(in)[ FD ]
Line_31 $$ clientName = FSImageSerialization.readString(in)-->Line_46 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_67 $$ final INodeDirectory dir = new INodeDirectory(inodeId, localName, permissions, modificationTime)-->Line_75 $$ dir.addSnapshottableFeature()[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_16 $$ if (numBlocks >= 0) [ CD ]
Line_3 $$ final int imgVersion = getLayoutVersion()-->Line_11 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.FILE_ACCESS_TIME, imgVersion)) [ FD ]
Line_15 $$ final int numBlocks = in.readInt()-->Line_16 $$ if (numBlocks >= 0) [ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_42 $$ counter.increment()[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_7 $$ long inodeId = NameNodeLayoutVersion.supports(LayoutVersion.Feature.ADD_INODE_ID, imgVersion) ? in.readLong() : namesystem.allocateNewInodeId()[ CD ]
Line_59 $$ if (!snapshottable) -->Line_60 $$ withSnapshot = in.readBoolean()[ CD ]
Line_89 $$ if (isWithName) -->Line_93 $$ return ref[ CD ]
Line_33 $$ if (blocks.length > 0) -->Line_34 $$ BlockInfo lastBlk = blocks[blocks.length - 1][ CD ]
Line_3 $$ final int imgVersion = getLayoutVersion()-->Line_57 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_63 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ FD ]
Line_52 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.DISKSPACE_QUOTA, imgVersion)) -->Line_53 $$ dsQuota = in.readLong()[ CD ]
Line_89 $$ if (isWithName) -->Line_90 $$ return new INodeReference.WithName(null, withCount, localName, snapshotId)[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_41 $$ if (counter != null) [ FD ]
Line_16 $$ if (numBlocks >= 0) -->Line_17 $$ BlockInfo[] blocks = new BlockInfo[numBlocks][ CD ]
Line_50 $$ final long nsQuota = in.readLong()-->Line_69 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_3 $$ final int imgVersion = getLayoutVersion()[ CD ]
Line_16 $$ if (numBlocks >= 0) -->Line_40 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ CD ]
Line_78 $$ if (numBlocks == -2) -->Line_79 $$ final String symlink = Text.readString(in)[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_15 $$ final int numBlocks = in.readInt()[ CD ]
Line_3 $$ final int imgVersion = getLayoutVersion()-->Line_7 $$ long inodeId = NameNodeLayoutVersion.supports(LayoutVersion.Feature.ADD_INODE_ID, imgVersion) ? in.readLong() : namesystem.allocateNewInodeId()[ FD ]
Line_32 $$ clientMachine = FSImageSerialization.readString(in)-->Line_46 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_49 $$ if (numBlocks == -1) -->Line_71 $$ if (withSnapshot) [ CD ]
Line_28 $$ if (isSnapshotINode) -->Line_29 $$ underConstruction = in.readBoolean()[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_50 $$ final long nsQuota = in.readLong()[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_12 $$ atime = in.readLong()[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_20 $$ blocks[j].readFields(in)[ FD ]
Line_78 $$ if (numBlocks == -2) -->Line_80 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ CD ]
Line_49 $$ if (numBlocks == -1) -->Line_74 $$ if (snapshottable) [ CD ]
Line_49 $$ if (numBlocks == -1) -->Line_51 $$ long dsQuota = -1L[ CD ]
Line_18 $$ for (int j = 0; j < numBlocks; j++) -->Line_20 $$ blocks[j].readFields(in)[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_11 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.FILE_ACCESS_TIME, imgVersion)) [ CD ]
Line_16 $$ if (numBlocks >= 0) -->Line_18 $$ for (int j = 0; j < numBlocks; j++) [ CD ]
Line_24 $$ boolean underConstruction = false-->Line_29 $$ underConstruction = in.readBoolean()[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_86 $$ final boolean isWithName = in.readBoolean()[ FD ]
Line_16 $$ if (numBlocks >= 0) -->Line_25 $$ FileDiffList fileDiffs = null[ CD ]
Line_49 $$ if (numBlocks == -1) -->Line_64 $$ if (counter != null) [ CD ]
Line_78 $$ if (numBlocks == -2) -->Line_84 $$ return new INodeSymlink(inodeId, localName, permissions, modificationTime, atime, symlink)[ CD ]
Line_30 $$ if (underConstruction) -->Line_33 $$ if (blocks.length > 0) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_5 $$ namesystem.getFSDirectory().verifyINodeName(localName)[ FD ]
Line_49 $$ if (numBlocks == -1) -->Line_55 $$ boolean snapshottable = false[ CD ]
Line_18 $$ for (int j = 0; j < numBlocks; j++) -->Line_19 $$ blocks[j] = new BlockInfo(replication)[ CD ]
Line_49 $$ if (numBlocks == -1) -->Line_56 $$ boolean withSnapshot = false[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_88 $$ final INodeReference.WithCount withCount = referenceMap.loadINodeReferenceWithCount(isSnapshotINode, in, this)[ FD ]
Line_64 $$ if (counter != null) -->Line_65 $$ counter.increment()[ CD ]
Line_67 $$ final INodeDirectory dir = new INodeDirectory(inodeId, localName, permissions, modificationTime)-->Line_69 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_53 $$ dsQuota = in.readLong()[ FD ]
Line_16 $$ if (numBlocks >= 0) -->Line_49 $$ if (numBlocks == -1) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_8 $$ final short replication = namesystem.getBlockManager().adjustReplication(in.readShort())[ CD ]
Line_16 $$ if (numBlocks >= 0) -->Line_22 $$ String clientName = ""[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_79 $$ final String symlink = Text.readString(in)[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_87 $$ int snapshotId = in.readInt()[ FD ]
Line_10 $$ long atime = 0-->Line_12 $$ atime = in.readLong()[ FD ]
Line_22 $$ String clientName = ""-->Line_46 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_40 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ FD ]
Line_49 $$ if (numBlocks == -1) -->Line_77 $$ return dir[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_64 $$ if (counter != null) [ FD ]
Line_16 $$ if (numBlocks >= 0) -->Line_24 $$ boolean underConstruction = false[ CD ]
Line_71 $$ if (withSnapshot) -->Line_72 $$ dir.addSnapshotFeature(null)[ CD ]
Line_26 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_27 $$ fileDiffs = SnapshotFSImageFormat.loadFileDiffList(in, this)[ CD ]
Line_15 $$ final int numBlocks = in.readInt()-->Line_49 $$ if (numBlocks == -1) [ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_27 $$ fileDiffs = SnapshotFSImageFormat.loadFileDiffList(in, this)[ FD ]
Line_51 $$ long dsQuota = -1L-->Line_69 $$ dir.addDirectoryWithQuotaFeature(nsQuota, dsQuota)[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_58 $$ snapshottable = in.readBoolean()[ FD ]
Line_49 $$ if (numBlocks == -1) -->Line_52 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.DISKSPACE_QUOTA, imgVersion)) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_14 $$ final long blockSize = in.readLong()[ FD ]
Line_49 $$ if (numBlocks == -1) -->Line_63 $$ final PermissionStatus permissions = PermissionStatus.read(in)[ CD ]
Line_28 $$ if (isSnapshotINode) -->Line_30 $$ if (underConstruction) [ CD ]
Line_45 $$ if (underConstruction) -->Line_46 $$ file.toUnderConstruction(clientName, clientMachine)[ CD ]
Line_44 $$ final INodeFile file = new INodeFile(inodeId, localName, permissions, modificationTime, atime, blocks, replication, blockSize)-->Line_46 $$ file.toUnderConstruction(clientName, clientMachine)[ FD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_15 $$ final int numBlocks = in.readInt()[ FD ]
Line_41 $$ if (counter != null) -->Line_42 $$ counter.increment()[ CD ]
Line_57 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_59 $$ if (!snapshottable) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_10 $$ long atime = 0[ CD ]
Line_89 $$ if (isWithName) -->Line_92 $$ final INodeReference ref = new INodeReference.DstReference(null, withCount, snapshotId)[ CD ]
Line_25 $$ FileDiffList fileDiffs = null-->Line_27 $$ fileDiffs = SnapshotFSImageFormat.loadFileDiffList(in, this)[ FD ]
Line_85 $$ if (numBlocks == -3) -->Line_88 $$ final INodeReference.WithCount withCount = referenceMap.loadINodeReferenceWithCount(isSnapshotINode, in, this)[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_4 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_8 $$ final short replication = namesystem.getBlockManager().adjustReplication(in.readShort())[ FD ]
Line_3 $$ final int imgVersion = getLayoutVersion()-->Line_26 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ FD ]
Line_57 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) -->Line_58 $$ snapshottable = in.readBoolean()[ CD ]
Line_2 $$ INode loadINode(final byte[] localName, boolean isSnapshotINode, DataInput in, Counter counter) throws IOException -->Line_32 $$ clientMachine = FSImageSerialization.readString(in)[ FD ]
Line_33 $$ if (blocks.length > 0) -->Line_35 $$ blocks[blocks.length - 1] = new BlockInfoUnderConstruction(lastBlk, replication)[ CD ]
Line_49 $$ if (numBlocks == -1) -->Line_50 $$ final long nsQuota = in.readLong()[ CD ]
Line_78 $$ if (numBlocks == -2) -->Line_85 $$ if (numBlocks == -3) [ CD ]
Line_85 $$ if (numBlocks == -3) -->Line_87 $$ int snapshotId = in.readInt()[ CD ]
Line_55 $$ boolean snapshottable = false-->Line_58 $$ snapshottable = in.readBoolean()[ FD ]
Line_16 $$ if (numBlocks >= 0) -->Line_26 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ CD ]
Line_67 $$ final INodeDirectory dir = new INodeDirectory(inodeId, localName, permissions, modificationTime)-->Line_72 $$ dir.addSnapshotFeature(null)[ FD ]
Line_81 $$ if (counter != null) -->Line_82 $$ counter.increment()[ CD ]
Line_3 $$ final int imgVersion = getLayoutVersion()-->Line_4 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ FD ]
Line_15 $$ final int numBlocks = in.readInt()-->Line_78 $$ if (numBlocks == -2) [ FD ]
Line_16 $$ if (numBlocks >= 0) -->Line_44 $$ final INodeFile file = new INodeFile(inodeId, localName, permissions, modificationTime, atime, blocks, replication, blockSize)[ CD ]
Line_85 $$ if (numBlocks == -3) -->Line_89 $$ if (isWithName) [ CD ]
Line_49 $$ if (numBlocks == -1) -->Line_57 $$ if (NameNodeLayoutVersion.supports(LayoutVersion.Feature.SNAPSHOT, imgVersion)) [ CD ]
