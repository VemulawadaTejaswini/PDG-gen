Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_4 $$ if (length == -1) [ CD ]
Line_11 $$ int charsRead = 0-->Line_17 $$ chars[charsRead++] = (char) ((buff[i] << 8) + (buff[i + 1] & 0xFF))[ FD ]
Line_3 $$ final int length = stream.readInt()-->Line_4 $$ if (length == -1) [ FD ]
Line_13 $$ while (charsRead < length) -->Line_14 $$ final int bytesRead = Math.min((length - charsRead) * 2, buff.length)[ CD ]
Line_13 $$ while (charsRead < length) -->Line_16 $$ for (int i = 0; i < bytesRead; i += 2) [ CD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_20 $$ return new String(chars)[ CD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_3 $$ final int length = stream.readInt()[ CD ]
Line_13 $$ while (charsRead < length) -->Line_15 $$ stream.readFully(buff, 0, bytesRead)[ CD ]
Line_12 $$ final byte[] buff = myBuffer.get()-->Line_15 $$ stream.readFully(buff, 0, bytesRead)[ FD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_3 $$ final int length = stream.readInt()[ FD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_13 $$ while (charsRead < length) [ CD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_15 $$ stream.readFully(buff, 0, bytesRead)[ FD ]
Line_4 $$ if (length == -1) -->Line_5 $$ return null[ CD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_11 $$ int charsRead = 0[ CD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_10 $$ char[] chars = new char[length][ CD ]
Line_14 $$ final int bytesRead = Math.min((length - charsRead) * 2, buff.length)-->Line_16 $$ for (int i = 0; i < bytesRead; i += 2) [ FD ]
Line_16 $$ for (int i = 0; i < bytesRead; i += 2) -->Line_17 $$ chars[charsRead++] = (char) ((buff[i] << 8) + (buff[i + 1] & 0xFF))[ CD ]
Line_3 $$ final int length = stream.readInt()-->Line_13 $$ while (charsRead < length) [ FD ]
Line_3 $$ final int length = stream.readInt()-->Line_7 $$ if (length == 0) [ FD ]
Line_14 $$ final int bytesRead = Math.min((length - charsRead) * 2, buff.length)-->Line_15 $$ stream.readFully(buff, 0, bytesRead)[ FD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_7 $$ if (length == 0) [ CD ]
Line_2 $$ public static String readString(DataInput stream) throws IOException -->Line_12 $$ final byte[] buff = myBuffer.get()[ CD ]
Line_11 $$ int charsRead = 0-->Line_13 $$ while (charsRead < length) [ FD ]
Line_7 $$ if (length == 0) -->Line_8 $$ return ""[ CD ]
