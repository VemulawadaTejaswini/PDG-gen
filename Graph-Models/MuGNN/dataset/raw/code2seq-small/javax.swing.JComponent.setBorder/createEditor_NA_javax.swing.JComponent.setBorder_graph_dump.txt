Line_24 $$ myCoverageRunnerCb.addActionListener(new ActionListener() -->Line_29 $$ myTrackPerTestCoverageCb.setEnabled(myTracingRb.isSelected() && canHavePerTestCoverage() && runner != null && runner.isCoverageByTestApplicable())[ CD ]
Line_4 $$ JPanel result = new JPanel(new GridBagLayout())-->Line_58 $$ result.add(myRunnerPanel, gc)[ FD ]
Line_15 $$ myCoverageRunnerCb.setRenderer(new ListCellRendererWrapper<CoverageRunnerItem>() -->Line_19 $$ if (value != null) [ CD ]
Line_24 $$ myCoverageRunnerCb.addActionListener(new ActionListener() -->Line_27 $$ final CoverageRunner runner = getSelectedRunner()[ CD ]
Line_10 $$ for (CoverageRunner runner : Extensions.getExtensions(CoverageRunner.EP_NAME)) -->Line_11 $$ if (runner.acceptsCoverageEngine(provider)) [ FD ]
Line_5 $$ final DefaultComboBoxModel runnersModel = new DefaultComboBoxModel()-->Line_12 $$ runnersModel.addElement(new CoverageRunnerItem(runner))[ FD ]
Line_44 $$ ActionListener samplingListener = new ActionListener() -->Line_47 $$ final CoverageRunner runner = getSelectedRunner()[ CD ]
Line_27 $$ final CoverageRunner runner = getSelectedRunner()-->Line_48 $$ myTrackPerTestCoverageCb.setEnabled(canHavePerTestCoverage() && myTracingRb.isSelected() && runner != null && runner.isCoverageByTestApplicable())[ FD ]
Line_15 $$ myCoverageRunnerCb.setRenderer(new ListCellRendererWrapper<CoverageRunnerItem>() -->Line_20 $$ setText(value.getPresentableName())[ FD ]
Line_15 $$ myCoverageRunnerCb.setRenderer(new ListCellRendererWrapper<CoverageRunnerItem>() -->Line_19 $$ if (value != null) [ FD ]
Line_7 $$ final JavaCoverageEnabledConfiguration javaCoverageEnabledConfiguration = JavaCoverageEnabledConfiguration.getFrom(myConfig)-->Line_9 $$ final JavaCoverageEngine provider = javaCoverageEnabledConfiguration.getCoverageProvider()[ FD ]
Line_11 $$ if (runner.acceptsCoverageEngine(provider)) -->Line_12 $$ runnersModel.addElement(new CoverageRunnerItem(runner))[ CD ]
Line_10 $$ for (CoverageRunner runner : Extensions.getExtensions(CoverageRunner.EP_NAME)) -->Line_48 $$ myTrackPerTestCoverageCb.setEnabled(canHavePerTestCoverage() && myTracingRb.isSelected() && runner != null && runner.isCoverageByTestApplicable())[ FD ]
Line_27 $$ final CoverageRunner runner = getSelectedRunner()-->Line_28 $$ enableTracingPanel(runner != null && runner.isCoverageByTestApplicable())[ FD ]
Line_44 $$ ActionListener samplingListener = new ActionListener() -->Line_48 $$ myTrackPerTestCoverageCb.setEnabled(canHavePerTestCoverage() && myTracingRb.isSelected() && runner != null && runner.isCoverageByTestApplicable())[ CD ]
Line_19 $$ if (value != null) -->Line_20 $$ setText(value.getPresentableName())[ CD ]
Line_4 $$ JPanel result = new JPanel(new GridBagLayout())-->Line_67 $$ result.add(panel, gc)[ FD ]
Line_9 $$ final JavaCoverageEngine provider = javaCoverageEnabledConfiguration.getCoverageProvider()-->Line_11 $$ if (runner.acceptsCoverageEngine(provider)) [ FD ]
Line_10 $$ for (CoverageRunner runner : Extensions.getExtensions(CoverageRunner.EP_NAME)) -->Line_29 $$ myTrackPerTestCoverageCb.setEnabled(myTracingRb.isSelected() && canHavePerTestCoverage() && runner != null && runner.isCoverageByTestApplicable())[ FD ]
Line_4 $$ JPanel result = new JPanel(new GridBagLayout())-->Line_70 $$ result.add(myCoverageNotSupportedLabel, gc)[ FD ]
Line_27 $$ final CoverageRunner runner = getSelectedRunner()-->Line_29 $$ myTrackPerTestCoverageCb.setEnabled(myTracingRb.isSelected() && canHavePerTestCoverage() && runner != null && runner.isCoverageByTestApplicable())[ FD ]
Line_47 $$ final CoverageRunner runner = getSelectedRunner()-->Line_48 $$ myTrackPerTestCoverageCb.setEnabled(canHavePerTestCoverage() && myTracingRb.isSelected() && runner != null && runner.isCoverageByTestApplicable())[ FD ]
Line_24 $$ myCoverageRunnerCb.addActionListener(new ActionListener() -->Line_28 $$ enableTracingPanel(runner != null && runner.isCoverageByTestApplicable())[ CD ]
Line_10 $$ for (CoverageRunner runner : Extensions.getExtensions(CoverageRunner.EP_NAME)) -->Line_28 $$ enableTracingPanel(runner != null && runner.isCoverageByTestApplicable())[ FD ]
