Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_42 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Cleanup"))[ FD ]
Line_14 $$ final VirtualFile root = (vf == null) ? wcInfo.getVcsRoot() : vf-->Line_50 $$ if (root == null) [ FD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_12 $$ final Collection<WorkingCopyFormat> upgradeFormats = getUpgradeFormats(wcInfo, supportedFormats)[ FD ]
Line_25 $$ if (CONFIGURE_BRANCHES.equals(e.getDescription())) -->Line_28 $$ BranchConfigurationDialog.configureBranches(myProject, root)[ CD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_37 $$ if (MERGE_FROM.equals(e.getDescription())) [ FD ]
Line_26 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Configure Branches"))-->Line_27 $$ return[ CD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_24 $$ if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) [ FD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_30 $$ final int result = Messages.showOkCancelDialog(myVcs.getProject(), "You are going to checkout into '" + wcInfo.getPath() + "' with 'infinity' depth.\n" + "This will update your working copy to HEAD revision as well.", "Set Working Copy Infinity Depth", Messages.getWarningIcon())[ FD ]
Line_35 $$ if (CHANGE_FORMAT.equals(e.getDescription())) -->Line_36 $$ changeFormat(wcInfo, upgradeFormats)[ CD ]
Line_12 $$ final Collection<WorkingCopyFormat> upgradeFormats = getUpgradeFormats(wcInfo, supportedFormats)-->Line_36 $$ changeFormat(wcInfo, upgradeFormats)[ FD ]
Line_24 $$ if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) -->Line_25 $$ if (CONFIGURE_BRANCHES.equals(e.getDescription())) [ CD ]
Line_29 $$ if (FIX_DEPTH.equals(e.getDescription())) -->Line_35 $$ if (CHANGE_FORMAT.equals(e.getDescription())) [ CD ]
Line_50 $$ if (root == null) -->Line_52 $$ return false[ CD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_10 $$ final Insets topIndent = new Insets(10, 3, 0, 0)[ CD ]
Line_5 $$ final GridBagConstraints gb = new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(2, 2, 0, 0), 0, 0)-->Line_68 $$ myPanel.add(contForCopy, gb)[ FD ]
Line_35 $$ if (CHANGE_FORMAT.equals(e.getDescription())) -->Line_37 $$ if (MERGE_FROM.equals(e.getDescription())) [ CD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_6 $$ gb.insets.left = 4[ CD ]
Line_29 $$ if (FIX_DEPTH.equals(e.getDescription())) -->Line_30 $$ final int result = Messages.showOkCancelDialog(myVcs.getProject(), "You are going to checkout into '" + wcInfo.getPath() + "' with 'infinity' depth.\n" + "This will update your working copy to HEAD revision as well.", "Set Working Copy Infinity Depth", Messages.getWarningIcon())[ CD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_54 $$ return true[ CD ]
Line_9 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()-->Line_13 $$ final VirtualFile vf = lfs.refreshAndFindFileByIoFile(new File(wcInfo.getPath()))[ FD ]
Line_25 $$ if (CONFIGURE_BRANCHES.equals(e.getDescription())) -->Line_29 $$ if (FIX_DEPTH.equals(e.getDescription())) [ CD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_9 $$ final LocalFileSystem lfs = LocalFileSystem.getInstance()[ CD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_26 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Configure Branches"))[ FD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_25 $$ if (CONFIGURE_BRANCHES.equals(e.getDescription())) [ FD ]
Line_37 $$ if (MERGE_FROM.equals(e.getDescription())) -->Line_38 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Merge From"))[ CD ]
Line_14 $$ final VirtualFile root = (vf == null) ? wcInfo.getVcsRoot() : vf-->Line_38 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Merge From"))[ FD ]
Line_42 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Cleanup"))-->Line_43 $$ return[ CD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_50 $$ if (root == null) [ CD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_58 $$ editorPane.setText(formatWc(wcInfo, upgradeFormats))[ FD ]
Line_25 $$ if (CONFIGURE_BRANCHES.equals(e.getDescription())) -->Line_26 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Configure Branches"))[ CD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_13 $$ final VirtualFile vf = lfs.refreshAndFindFileByIoFile(new File(wcInfo.getPath()))[ FD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_38 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Merge From"))[ FD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_4 $$ final Insets nullIndent = new Insets(1, 3, 1, 0)[ CD ]
Line_38 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Merge From"))-->Line_39 $$ return[ CD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_7 $$ myPanel.add(myRefreshLabel, gb)[ CD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_35 $$ if (CHANGE_FORMAT.equals(e.getDescription())) [ FD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_58 $$ editorPane.setText(formatWc(wcInfo, upgradeFormats))[ FD ]
Line_12 $$ final Collection<WorkingCopyFormat> upgradeFormats = getUpgradeFormats(wcInfo, supportedFormats)-->Line_58 $$ editorPane.setText(formatWc(wcInfo, upgradeFormats))[ FD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_8 $$ gb.insets.left = 1[ CD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_24 $$ if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) [ CD ]
Line_14 $$ final VirtualFile root = (vf == null) ? wcInfo.getVcsRoot() : vf-->Line_28 $$ BranchConfigurationDialog.configureBranches(myProject, root)[ FD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_17 $$ editorPane.setFocusable(true)[ FD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_19 $$ editorPane.setOpaque(false)[ FD ]
Line_29 $$ if (FIX_DEPTH.equals(e.getDescription())) -->Line_31 $$ if (result == Messages.OK) [ CD ]
Line_50 $$ if (root == null) -->Line_51 $$ Messages.showWarningDialog(myProject, "Invalid working copy root: " + path, "Can not " + actionName)[ CD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_41 $$ if (CLEANUP.equals(e.getDescription())) [ FD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_18 $$ editorPane.setBackground(UIUtil.getPanelBackground())[ FD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_12 $$ final Collection<WorkingCopyFormat> upgradeFormats = getUpgradeFormats(wcInfo, supportedFormats)[ FD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_40 $$ mergeFrom(wcInfo, root, editorPane)[ FD ]
Line_41 $$ if (CLEANUP.equals(e.getDescription())) -->Line_44 $$ new CleanupWorker(new VirtualFile[] [ CD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_5 $$ final GridBagConstraints gb = new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(2, 2, 0, 0), 0, 0)[ CD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_72 $$ myPanel.revalidate()[ CD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_69 $$ copyPanel.add(editorPane, gb1)[ FD ]
Line_5 $$ final GridBagConstraints gb = new GridBagConstraints(0, 0, 1, 1, 0, 0, GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(2, 2, 0, 0), 0, 0)-->Line_7 $$ myPanel.add(myRefreshLabel, gb)[ FD ]
Line_14 $$ final VirtualFile root = (vf == null) ? wcInfo.getVcsRoot() : vf-->Line_26 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Configure Branches"))[ FD ]
Line_30 $$ final int result = Messages.showOkCancelDialog(myVcs.getProject(), "You are going to checkout into '" + wcInfo.getPath() + "' with 'infinity' depth.\n" + "This will update your working copy to HEAD revision as well.", "Set Working Copy Infinity Depth", Messages.getWarningIcon())-->Line_31 $$ if (result == Messages.OK) [ FD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_36 $$ changeFormat(wcInfo, upgradeFormats)[ FD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_40 $$ mergeFrom(wcInfo, root, editorPane)[ FD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_57 $$ editorPane.setBorder(null)[ FD ]
Line_41 $$ if (CLEANUP.equals(e.getDescription())) -->Line_42 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Cleanup"))[ CD ]
Line_14 $$ final VirtualFile root = (vf == null) ? wcInfo.getVcsRoot() : vf-->Line_40 $$ mergeFrom(wcInfo, root, editorPane)[ FD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() [ FD ]
Line_15 $$ final JEditorPane editorPane = new JEditorPane(UIUtil.HTML_MIME, "")-->Line_16 $$ editorPane.setEditable(false)[ FD ]
Line_11 $$ for (final WCInfo wcInfo : infoList) -->Line_14 $$ final VirtualFile root = (vf == null) ? wcInfo.getVcsRoot() : vf[ FD ]
Line_37 $$ if (MERGE_FROM.equals(e.getDescription())) -->Line_40 $$ mergeFrom(wcInfo, root, editorPane)[ CD ]
Line_14 $$ final VirtualFile root = (vf == null) ? wcInfo.getVcsRoot() : vf-->Line_42 $$ if (!checkRoot(root, wcInfo.getPath(), " invoke Cleanup"))[ FD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_50 $$ if (root == null) [ FD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_3 $$ myPanel.removeAll()[ CD ]
Line_2 $$ private void updateList(@NotNull final List<WCInfo> infoList, @NotNull final List<WorkingCopyFormat> supportedFormats) -->Line_73 $$ myPanel.repaint()[ CD ]
Line_37 $$ if (MERGE_FROM.equals(e.getDescription())) -->Line_41 $$ if (CLEANUP.equals(e.getDescription())) [ CD ]
Line_20 $$ editorPane.addHyperlinkListener(new HyperlinkListener() -->Line_29 $$ if (FIX_DEPTH.equals(e.getDescription())) [ FD ]
