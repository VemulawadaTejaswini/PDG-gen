Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_34 $$ label.setEditable(false)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_32 $$ label.setPreferredSize(new Dimension(label.getPreferredSize().width + new JLabel("M").getPreferredSize().width, label.getPreferredSize().height))[ CD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_29 $$ final RangeHighlighter h = HighlighterUtil.highlightNode(editor, node, cfg.getContextAttributes(), cfg)[ FD ]
Line_18 $$ final PsiElement element = psiFile.findElementAt(editor.getCaretModel().getOffset())-->Line_23 $$ final PsiElement node = XPathExpressionGenerator.transformToValidShowPathNode(element)[ FD ]
Line_24 $$ if (node == null) -->Line_26 $$ return[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_8 $$ if (project == null) [ CD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_54 $$ final Point point = editor.visualPositionToXY(editor.getCaretModel().getVisualPosition())[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_14 $$ final PsiFile psiFile = docmgr.getPsiFile(document)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_38 $$ final JPanel p = new NonOpaquePanel(new BorderLayout())[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_31 $$ final JTextField label = new JTextField(path)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_36 $$ label.setHorizontalAlignment(SwingConstants.CENTER)[ CD ]
Line_31 $$ final JTextField label = new JTextField(path)-->Line_37 $$ label.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR))[ FD ]
Line_23 $$ final PsiElement node = XPathExpressionGenerator.transformToValidShowPathNode(element)-->Line_24 $$ if (node == null) [ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_42 $$ InplaceButton copy = new InplaceButton(ActionsBundle.message("action.EditorCopy.text"), PlatformIcons.COPY_ICON, new ActionListener() [ CD ]
Line_28 $$ final Config cfg = myComponent.getConfig()-->Line_29 $$ final RangeHighlighter h = HighlighterUtil.highlightNode(editor, node, cfg.getContextAttributes(), cfg)[ FD ]
Line_38 $$ final JPanel p = new NonOpaquePanel(new BorderLayout())-->Line_40 $$ p.add(l, BorderLayout.WEST)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_56 $$ HintHint hintHint = new HintHint(editor, point).setAwtTooltip(true).setContentActive(true).setExplicitClose(true).setShowImmediately(true)[ CD ]
Line_29 $$ final RangeHighlighter h = HighlighterUtil.highlightNode(editor, node, cfg.getContextAttributes(), cfg)-->Line_51 $$ HighlighterUtil.removeHighlighter(editor, h)[ FD ]
Line_8 $$ if (project == null) -->Line_9 $$ return[ CD ]
Line_11 $$ final PsiDocumentManager docmgr = PsiDocumentManager.getInstance(project)-->Line_13 $$ docmgr.commitDocument(document)[ FD ]
Line_15 $$ if (!(psiFile instanceof XmlFile)) -->Line_16 $$ return[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_12 $$ final Document document = editor.getDocument()[ CD ]
Line_48 $$ final LightweightHint hint = new LightweightHint(p) -->Line_50 $$ super.hide()[ CD ]
Line_38 $$ final JPanel p = new NonOpaquePanel(new BorderLayout())-->Line_47 $$ p.add(copy, BorderLayout.EAST)[ FD ]
Line_48 $$ final LightweightHint hint = new LightweightHint(p) -->Line_51 $$ HighlighterUtil.removeHighlighter(editor, h)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_40 $$ p.add(l, BorderLayout.WEST)[ CD ]
Line_31 $$ final JTextField label = new JTextField(path)-->Line_36 $$ label.setHorizontalAlignment(SwingConstants.CENTER)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_57 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, point, HintManager.HIDE_BY_ANY_KEY, 0, false, hintHint)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_28 $$ final Config cfg = myComponent.getConfig()[ CD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_18 $$ final PsiElement element = psiFile.findElementAt(editor.getCaretModel().getOffset())[ FD ]
Line_12 $$ final Document document = editor.getDocument()-->Line_14 $$ final PsiFile psiFile = docmgr.getPsiFile(document)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_47 $$ p.add(copy, BorderLayout.EAST)[ CD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_4 $$ if (editor == null) [ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())[ FD ]
Line_12 $$ final Document document = editor.getDocument()-->Line_13 $$ docmgr.commitDocument(document)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_35 $$ label.setBorder(null)[ CD ]
Line_31 $$ final JTextField label = new JTextField(path)-->Line_34 $$ label.setEditable(false)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_19 $$ if (!(element instanceof XmlElement || element instanceof PsiWhiteSpace)) [ CD ]
Line_42 $$ InplaceButton copy = new InplaceButton(ActionsBundle.message("action.EditorCopy.text"), PlatformIcons.COPY_ICON, new ActionListener() -->Line_47 $$ p.add(copy, BorderLayout.EAST)[ FD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_55 $$ point.y += editor.getLineHeight() / 2[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_18 $$ final PsiElement element = psiFile.findElementAt(editor.getCaretModel().getOffset())[ CD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_7 $$ final Project project = editor.getProject()[ FD ]
Line_38 $$ final JPanel p = new NonOpaquePanel(new BorderLayout())-->Line_41 $$ p.add(label, BorderLayout.CENTER)[ FD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_12 $$ final Document document = editor.getDocument()[ FD ]
Line_24 $$ if (node == null) -->Line_25 $$ XPathAppComponent.showEditorHint("No suitable context for an XPath-expression selected.", editor)[ CD ]
Line_42 $$ InplaceButton copy = new InplaceButton(ActionsBundle.message("action.EditorCopy.text"), PlatformIcons.COPY_ICON, new ActionListener() -->Line_44 $$ CopyPasteManager.getInstance().setContents(new StringSelection(path))[ CD ]
Line_14 $$ final PsiFile psiFile = docmgr.getPsiFile(document)-->Line_18 $$ final PsiElement element = psiFile.findElementAt(editor.getCaretModel().getOffset())[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_55 $$ point.y += editor.getLineHeight() / 2[ CD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_51 $$ HighlighterUtil.removeHighlighter(editor, h)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_54 $$ final Point point = editor.visualPositionToXY(editor.getCaretModel().getVisualPosition())[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_39 $$ final JLabel l = new JLabel("XPath:")[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_33 $$ label.setOpaque(false)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_11 $$ final PsiDocumentManager docmgr = PsiDocumentManager.getInstance(project)[ CD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_25 $$ XPathAppComponent.showEditorHint("No suitable context for an XPath-expression selected.", editor)[ FD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_57 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, point, HintManager.HIDE_BY_ANY_KEY, 0, false, hintHint)[ FD ]
Line_19 $$ if (!(element instanceof XmlElement || element instanceof PsiWhiteSpace)) -->Line_20 $$ XPathAppComponent.showEditorHint("No suitable context for an XPath-expression selected.", editor)[ CD ]
Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())-->Line_20 $$ XPathAppComponent.showEditorHint("No suitable context for an XPath-expression selected.", editor)[ FD ]
Line_19 $$ if (!(element instanceof XmlElement || element instanceof PsiWhiteSpace)) -->Line_21 $$ return[ CD ]
Line_4 $$ if (editor == null) -->Line_5 $$ return[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_29 $$ final RangeHighlighter h = HighlighterUtil.highlightNode(editor, node, cfg.getContextAttributes(), cfg)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_3 $$ final Editor editor = CommonDataKeys.EDITOR.getData(e.getDataContext())[ CD ]
Line_31 $$ final JTextField label = new JTextField(path)-->Line_35 $$ label.setBorder(null)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_15 $$ if (!(psiFile instanceof XmlFile)) [ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_13 $$ docmgr.commitDocument(document)[ CD ]
Line_31 $$ final JTextField label = new JTextField(path)-->Line_41 $$ p.add(label, BorderLayout.CENTER)[ FD ]
Line_7 $$ final Project project = editor.getProject()-->Line_8 $$ if (project == null) [ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_30 $$ final String path = XPathSupport.getInstance().getUniquePath((XmlElement) node, null)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_7 $$ final Project project = editor.getProject()[ CD ]
Line_23 $$ final PsiElement node = XPathExpressionGenerator.transformToValidShowPathNode(element)-->Line_29 $$ final RangeHighlighter h = HighlighterUtil.highlightNode(editor, node, cfg.getContextAttributes(), cfg)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_4 $$ if (editor == null) [ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_37 $$ label.setCursor(Cursor.getPredefinedCursor(Cursor.TEXT_CURSOR))[ CD ]
Line_7 $$ final Project project = editor.getProject()-->Line_11 $$ final PsiDocumentManager docmgr = PsiDocumentManager.getInstance(project)[ FD ]
Line_31 $$ final JTextField label = new JTextField(path)-->Line_33 $$ label.setOpaque(false)[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_41 $$ p.add(label, BorderLayout.CENTER)[ CD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_24 $$ if (node == null) [ CD ]
Line_11 $$ final PsiDocumentManager docmgr = PsiDocumentManager.getInstance(project)-->Line_14 $$ final PsiFile psiFile = docmgr.getPsiFile(document)[ FD ]
Line_31 $$ final JTextField label = new JTextField(path)-->Line_32 $$ label.setPreferredSize(new Dimension(label.getPreferredSize().width + new JLabel("M").getPreferredSize().width, label.getPreferredSize().height))[ FD ]
Line_2 $$ public void actionPerformed(AnActionEvent e) -->Line_23 $$ final PsiElement node = XPathExpressionGenerator.transformToValidShowPathNode(element)[ CD ]
Line_39 $$ final JLabel l = new JLabel("XPath:")-->Line_40 $$ p.add(l, BorderLayout.WEST)[ FD ]
