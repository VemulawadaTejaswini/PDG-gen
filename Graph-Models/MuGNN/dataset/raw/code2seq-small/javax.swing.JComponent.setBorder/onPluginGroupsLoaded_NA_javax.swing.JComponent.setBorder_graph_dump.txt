Line_13 $$ JPanel groupPanel = new JPanel(new GridBagLayout())-->Line_185 $$ gridPanel.add(groupPanel)[ FD ]
Line_49 $$ final JButton installButton = new JButton(isVIM ? "Install and Enable" : "Install")-->Line_59 $$ buttonPanel.add(installButton)[ FD ]
Line_20 $$ String s = entry.getValue()-->Line_24 $$ final String description = s.substring(i + 1, j)[ FD ]
Line_133 $$ PluginDownloader downloader = PluginDownloader.createDownloader(descriptor)-->Line_135 $$ downloader.install()[ FD ]
Line_20 $$ String s = entry.getValue()-->Line_25 $$ final String pluginId = s.substring(j + 1)[ FD ]
Line_138 $$ if (!myCanceled.get()) -->Line_139 $$ onFail()[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_136 $$ indicator.processFinish()[ FD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_202 $$ repaint()[ CD ]
Line_99 $$ int value = (int) (100 * fraction + .5)-->Line_100 $$ progressBar.setValue(value)[ FD ]
Line_54 $$ final LinkLabel cancelLink = new LinkLabel("Cancel", AllIcons.Actions.Cancel)-->Line_56 $$ linkWrapper.add(cancelLink)[ FD ]
Line_81 $$ SwingUtilities.invokeLater(new Runnable() -->Line_87 $$ installButton.setText("Installed")[ CD ]
Line_20 $$ String s = entry.getValue()-->Line_22 $$ String topic = s.substring(0, i)[ FD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_11 $$ Map<String, String> config = myPluginGroups.getFeaturedPlugins()[ CD ]
Line_95 $$ SwingUtilities.invokeLater(new Runnable() -->Line_99 $$ int value = (int) (100 * fraction + .5)[ CD ]
Line_81 $$ SwingUtilities.invokeLater(new Runnable() -->Line_86 $$ installButton.setEnabled(false)[ CD ]
Line_39 $$ JLabel descriptionLabel = createHTMLLabel("<i>" + description + "</i>")-->Line_170 $$ groupPanel.add(descriptionLabel, gbc)[ FD ]
Line_40 $$ JLabel warningLabel = null-->Line_179 $$ warningPanel.add(warningLabel)[ FD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_81 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_111 $$ SwingUtilities.invokeLater(new Runnable() -->Line_115 $$ wrapperLayout.show(buttonWrapper, "button")[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_94 $$ super.setFraction(fraction)[ FD ]
Line_47 $$ final CardLayout wrapperLayout = new CardLayout()-->Line_126 $$ wrapperLayout.show(buttonWrapper, "progress")[ FD ]
Line_40 $$ JLabel warningLabel = null-->Line_42 $$ warningLabel = createHTMLLabel("Recommended only if you are<br> familiar with Vim.")[ FD ]
Line_9 $$ JPanel gridPanel = new JPanel(new GridLayout(0, 3))-->Line_185 $$ gridPanel.add(groupPanel)[ FD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_10 $$ JBScrollPane scrollPane = CustomizePluginsStepPanel.createScrollPane(gridPanel)[ CD ]
Line_174 $$ if (warningLabel != null) -->Line_179 $$ warningPanel.add(warningLabel)[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_69 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_61 $$ buttonWrapper.add(progressPanel, "progress")[ FD ]
Line_40 $$ JLabel warningLabel = null-->Line_45 $$ UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL, warningLabel)[ FD ]
Line_4 $$ if (pluginsFromRepository.isEmpty()) -->Line_6 $$ return[ CD ]
Line_9 $$ JPanel gridPanel = new JPanel(new GridLayout(0, 3))-->Line_10 $$ JBScrollPane scrollPane = CustomizePluginsStepPanel.createScrollPane(gridPanel)[ FD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_163 $$ indicator.cancel()[ FD ]
Line_47 $$ final CardLayout wrapperLayout = new CardLayout()-->Line_85 $$ wrapperLayout.show(buttonWrapper, "button")[ FD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_184 $$ groupPanel.add(buttonWrapper, gbc)[ FD ]
Line_55 $$ JPanel linkWrapper = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0))-->Line_57 $$ progressPanel.add(linkWrapper)[ FD ]
Line_47 $$ final CardLayout wrapperLayout = new CardLayout()-->Line_62 $$ wrapperLayout.show(buttonWrapper, "button")[ FD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_62 $$ wrapperLayout.show(buttonWrapper, "button")[ FD ]
Line_159 $$ cancelLink.setListener(new LinkListener() -->Line_163 $$ indicator.cancel()[ CD ]
Line_10 $$ JBScrollPane scrollPane = CustomizePluginsStepPanel.createScrollPane(gridPanel)-->Line_200 $$ add(scrollPane)[ FD ]
Line_52 $$ JPanel progressPanel = new JPanel(new VerticalFlowLayout(true, false))-->Line_57 $$ progressPanel.add(linkWrapper)[ FD ]
Line_133 $$ PluginDownloader downloader = PluginDownloader.createDownloader(descriptor)-->Line_134 $$ downloader.prepareToInstall(indicator)[ FD ]
Line_26 $$ IdeaPluginDescriptor foundDescriptor = null-->Line_29 $$ foundDescriptor = descriptor[ FD ]
Line_42 $$ warningLabel = createHTMLLabel("Recommended only if you are<br> familiar with Vim.")-->Line_179 $$ warningPanel.add(warningLabel)[ FD ]
Line_174 $$ if (warningLabel != null) -->Line_178 $$ warningPanel.setBorder(new EmptyBorder(5, 10, 5, 10))[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_94 $$ super.setFraction(fraction)[ CD ]
Line_174 $$ if (warningLabel != null) -->Line_180 $$ groupPanel.add(warningPanel, gbc)[ CD ]
Line_52 $$ JPanel progressPanel = new JPanel(new VerticalFlowLayout(true, false))-->Line_53 $$ progressPanel.add(progressBar)[ FD ]
Line_111 $$ SwingUtilities.invokeLater(new Runnable() -->Line_116 $$ progressBar.setValue(0)[ CD ]
Line_13 $$ JPanel groupPanel = new JPanel(new GridBagLayout())-->Line_172 $$ groupPanel.add(Box.createVerticalGlue(), gbc)[ FD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_8 $$ removeAll()[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_132 $$ indicator.start()[ FD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_95 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_68 $$ super.start()[ CD ]
Line_122 $$ installButton.addActionListener(new ActionListener() -->Line_127 $$ ourService.schedule(new Runnable() [ CD ]
Line_40 $$ JLabel warningLabel = null-->Line_174 $$ if (warningLabel != null) [ FD ]
Line_29 $$ foundDescriptor = descriptor-->Line_33 $$ if (foundDescriptor == null)[ FD ]
Line_54 $$ final LinkLabel cancelLink = new LinkLabel("Cancel", AllIcons.Actions.Cancel)-->Line_159 $$ cancelLink.setListener(new LinkListener() [ FD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_150 $$ indicator.stop()[ FD ]
Line_37 $$ JLabel titleLabel = new JLabel("<html><body><h2 style=\"text-align:left;\">" + title + "</h2></body></html>")-->Line_167 $$ groupPanel.add(titleLabel, gbc)[ FD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_126 $$ wrapperLayout.show(buttonWrapper, "progress")[ FD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_73 $$ wrapperLayout.show(buttonWrapper, "progress")[ FD ]
Line_81 $$ SwingUtilities.invokeLater(new Runnable() -->Line_85 $$ wrapperLayout.show(buttonWrapper, "button")[ CD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_151 $$ wrapperLayout.show(buttonWrapper, "progress")[ FD ]
Line_11 $$ Map<String, String> config = myPluginGroups.getFeaturedPlugins()-->Line_12 $$ for (Map.Entry<String, String> entry : config.entrySet()) [ FD ]
Line_58 $$ final JPanel buttonPanel = new JPanel(new VerticalFlowLayout(0, 0))-->Line_60 $$ buttonWrapper.add(buttonPanel, "button")[ FD ]
Line_41 $$ if (isVIM) -->Line_44 $$ if (!SystemInfo.isWindows)[ CD ]
Line_42 $$ warningLabel = createHTMLLabel("Recommended only if you are<br> familiar with Vim.")-->Line_45 $$ UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL, warningLabel)[ FD ]
Line_38 $$ JLabel topicLabel = new JLabel("<html><body><h4 style=\"text-align:left;\">" + topic + "</h4></body></html>")-->Line_169 $$ groupPanel.add(topicLabel, gbc)[ FD ]
Line_47 $$ final CardLayout wrapperLayout = new CardLayout()-->Line_73 $$ wrapperLayout.show(buttonWrapper, "progress")[ FD ]
Line_50 $$ final JProgressBar progressBar = new JProgressBar(0, 100)-->Line_116 $$ progressBar.setValue(0)[ FD ]
Line_111 $$ SwingUtilities.invokeLater(new Runnable() -->Line_117 $$ progressBar.setString("0%")[ CD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_3 $$ List<IdeaPluginDescriptor> pluginsFromRepository = myPluginGroups.getPluginsFromRepository()[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_108 $$ stop()[ CD ]
Line_13 $$ JPanel groupPanel = new JPanel(new GridBagLayout())-->Line_180 $$ groupPanel.add(warningPanel, gbc)[ FD ]
Line_55 $$ JPanel linkWrapper = new JPanel(new FlowLayout(FlowLayout.CENTER, 0, 0))-->Line_56 $$ linkWrapper.add(cancelLink)[ FD ]
Line_27 $$ for (IdeaPluginDescriptor descriptor : pluginsFromRepository) -->Line_36 $$ final boolean isVIM = PluginGroups.IDEA_VIM_PLUGIN_ID.equals(descriptor.getPluginId().getIdString())[ FD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_80 $$ super.processFinish()[ CD ]
Line_50 $$ final JProgressBar progressBar = new JProgressBar(0, 100)-->Line_100 $$ progressBar.setValue(value)[ FD ]
Line_49 $$ final JButton installButton = new JButton(isVIM ? "Install and Enable" : "Install")-->Line_122 $$ installButton.addActionListener(new ActionListener() [ FD ]
Line_50 $$ final JProgressBar progressBar = new JProgressBar(0, 100)-->Line_117 $$ progressBar.setString("0%")[ FD ]
Line_14 $$ GridBagConstraints gbc = new GridBagConstraints()-->Line_180 $$ groupPanel.add(warningPanel, gbc)[ FD ]
Line_42 $$ warningLabel = createHTMLLabel("Recommended only if you are<br> familiar with Vim.")-->Line_174 $$ if (warningLabel != null) [ FD ]
Line_13 $$ JPanel groupPanel = new JPanel(new GridBagLayout())-->Line_184 $$ groupPanel.add(buttonWrapper, gbc)[ FD ]
Line_20 $$ String s = entry.getValue()-->Line_21 $$ int i = s.indexOf(":")[ FD ]
Line_20 $$ String s = entry.getValue()-->Line_23 $$ int j = s.indexOf(":", i + 1)[ FD ]
Line_42 $$ warningLabel = createHTMLLabel("Recommended only if you are<br> familiar with Vim.")-->Line_43 $$ warningLabel.setIcon(AllIcons.General.BalloonWarning)[ FD ]
Line_23 $$ int j = s.indexOf(":", i + 1)-->Line_24 $$ final String description = s.substring(i + 1, j)[ FD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_9 $$ JPanel gridPanel = new JPanel(new GridLayout(0, 3))[ CD ]
Line_44 $$ if (!SystemInfo.isWindows)-->Line_45 $$ UIUtil.applyStyle(UIUtil.ComponentStyle.SMALL, warningLabel)[ CD ]
Line_50 $$ final JProgressBar progressBar = new JProgressBar(0, 100)-->Line_51 $$ progressBar.setStringPainted(true)[ FD ]
Line_25 $$ final String pluginId = s.substring(j + 1)-->Line_28 $$ if (descriptor.getPluginId().getIdString().equals(pluginId) && !PluginManagerCore.isBrokenPlugin(descriptor)) [ FD ]
Line_41 $$ if (isVIM) -->Line_43 $$ warningLabel.setIcon(AllIcons.General.BalloonWarning)[ CD ]
Line_40 $$ JLabel warningLabel = null-->Line_43 $$ warningLabel.setIcon(AllIcons.General.BalloonWarning)[ FD ]
Line_52 $$ JPanel progressPanel = new JPanel(new VerticalFlowLayout(true, false))-->Line_61 $$ buttonWrapper.add(progressPanel, "progress")[ FD ]
Line_41 $$ if (isVIM) -->Line_42 $$ warningLabel = createHTMLLabel("Recommended only if you are<br> familiar with Vim.")[ CD ]
Line_27 $$ for (IdeaPluginDescriptor descriptor : pluginsFromRepository) -->Line_133 $$ PluginDownloader downloader = PluginDownloader.createDownloader(descriptor)[ FD ]
Line_13 $$ JPanel groupPanel = new JPanel(new GridBagLayout())-->Line_170 $$ groupPanel.add(descriptionLabel, gbc)[ FD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_134 $$ downloader.prepareToInstall(indicator)[ FD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_109 $$ myCanceled.set(true)[ CD ]
Line_50 $$ final JProgressBar progressBar = new JProgressBar(0, 100)-->Line_152 $$ progressBar.setString("Cannot download plugin")[ FD ]
Line_27 $$ for (IdeaPluginDescriptor descriptor : pluginsFromRepository) -->Line_28 $$ if (descriptor.getPluginId().getIdString().equals(pluginId) && !PluginManagerCore.isBrokenPlugin(descriptor)) [ FD ]
Line_95 $$ SwingUtilities.invokeLater(new Runnable() -->Line_100 $$ progressBar.setValue(value)[ CD ]
Line_9 $$ JPanel gridPanel = new JPanel(new GridLayout(0, 3))-->Line_188 $$ Component[] components = gridPanel.getComponents()[ FD ]
Line_14 $$ GridBagConstraints gbc = new GridBagConstraints()-->Line_170 $$ groupPanel.add(descriptionLabel, gbc)[ FD ]
Line_14 $$ GridBagConstraints gbc = new GridBagConstraints()-->Line_169 $$ groupPanel.add(topicLabel, gbc)[ FD ]
Line_13 $$ JPanel groupPanel = new JPanel(new GridBagLayout())-->Line_167 $$ groupPanel.add(titleLabel, gbc)[ FD ]
Line_174 $$ if (warningLabel != null) -->Line_176 $$ gbc.insets = new Insets(0, -10, SMALL_GAP, -10)[ CD ]
Line_50 $$ final JProgressBar progressBar = new JProgressBar(0, 100)-->Line_53 $$ progressPanel.add(progressBar)[ FD ]
Line_14 $$ GridBagConstraints gbc = new GridBagConstraints()-->Line_172 $$ groupPanel.add(Box.createVerticalGlue(), gbc)[ FD ]
Line_13 $$ JPanel groupPanel = new JPanel(new GridBagLayout())-->Line_169 $$ groupPanel.add(topicLabel, gbc)[ FD ]
Line_12 $$ for (Map.Entry<String, String> entry : config.entrySet()) -->Line_19 $$ String title = entry.getKey()[ FD ]
Line_28 $$ if (descriptor.getPluginId().getIdString().equals(pluginId) && !PluginManagerCore.isBrokenPlugin(descriptor)) -->Line_29 $$ foundDescriptor = descriptor[ CD ]
Line_21 $$ int i = s.indexOf(":")-->Line_22 $$ String topic = s.substring(0, i)[ FD ]
Line_58 $$ final JPanel buttonPanel = new JPanel(new VerticalFlowLayout(0, 0))-->Line_59 $$ buttonPanel.add(installButton)[ FD ]
Line_47 $$ final CardLayout wrapperLayout = new CardLayout()-->Line_115 $$ wrapperLayout.show(buttonWrapper, "button")[ FD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_115 $$ wrapperLayout.show(buttonWrapper, "button")[ FD ]
Line_191 $$ ((JComponent) component).setBorder(new CompoundBorder(new CustomLineBorder(ColorUtil.withAlpha(JBColor.foreground(), .2), 0, 0, cursor / 3 < rowCount ? 1 : 0, cursor % COLS != COLS - 1 ? 1 : 0) -->Line_195 $$ return ColorUtil.withAlpha(JBColor.foreground(), .2)[ CD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_200 $$ add(scrollPane)[ CD ]
Line_50 $$ final JProgressBar progressBar = new JProgressBar(0, 100)-->Line_101 $$ progressBar.setString(value + "%")[ FD ]
Line_95 $$ SwingUtilities.invokeLater(new Runnable() -->Line_101 $$ progressBar.setString(value + "%")[ CD ]
Line_47 $$ final CardLayout wrapperLayout = new CardLayout()-->Line_151 $$ wrapperLayout.show(buttonWrapper, "progress")[ FD ]
Line_4 $$ if (pluginsFromRepository.isEmpty()) -->Line_5 $$ myInProgressLabel.setText("Cannot get featured plugins description online.")[ CD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_4 $$ if (pluginsFromRepository.isEmpty()) [ CD ]
Line_14 $$ GridBagConstraints gbc = new GridBagConstraints()-->Line_184 $$ groupPanel.add(buttonWrapper, gbc)[ FD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_201 $$ revalidate()[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_110 $$ super.cancel()[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_67 $$ myCanceled.set(false)[ CD ]
Line_122 $$ installButton.addActionListener(new ActionListener() -->Line_126 $$ wrapperLayout.show(buttonWrapper, "progress")[ CD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_85 $$ wrapperLayout.show(buttonWrapper, "button")[ FD ]
Line_69 $$ SwingUtilities.invokeLater(new Runnable() -->Line_73 $$ wrapperLayout.show(buttonWrapper, "progress")[ CD ]
Line_63 $$ final ProgressIndicatorEx indicator = new AbstractProgressIndicatorExBase(true) -->Line_111 $$ SwingUtilities.invokeLater(new Runnable() [ CD ]
Line_48 $$ final JPanel buttonWrapper = new JPanel(wrapperLayout)-->Line_60 $$ buttonWrapper.add(buttonPanel, "button")[ FD ]
Line_26 $$ IdeaPluginDescriptor foundDescriptor = null-->Line_33 $$ if (foundDescriptor == null)[ FD ]
Line_12 $$ for (Map.Entry<String, String> entry : config.entrySet()) -->Line_20 $$ String s = entry.getValue()[ FD ]
Line_14 $$ GridBagConstraints gbc = new GridBagConstraints()-->Line_167 $$ groupPanel.add(titleLabel, gbc)[ FD ]
Line_49 $$ final JButton installButton = new JButton(isVIM ? "Install and Enable" : "Install")-->Line_87 $$ installButton.setText("Installed")[ FD ]
Line_2 $$ private void onPluginGroupsLoaded() -->Line_188 $$ Component[] components = gridPanel.getComponents()[ CD ]
Line_49 $$ final JButton installButton = new JButton(isVIM ? "Install and Enable" : "Install")-->Line_86 $$ installButton.setEnabled(false)[ FD ]
Line_3 $$ List<IdeaPluginDescriptor> pluginsFromRepository = myPluginGroups.getPluginsFromRepository()-->Line_4 $$ if (pluginsFromRepository.isEmpty()) [ FD ]
Line_27 $$ for (IdeaPluginDescriptor descriptor : pluginsFromRepository) -->Line_29 $$ foundDescriptor = descriptor[ FD ]
