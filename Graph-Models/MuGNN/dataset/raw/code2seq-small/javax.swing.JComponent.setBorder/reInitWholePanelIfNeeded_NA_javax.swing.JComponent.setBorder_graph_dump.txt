Line_5 $$ myWholePanel = new JPanel(new BorderLayout()) -->Line_9 $$ MasterDetailsComponent.this.addNotify()[ CD ]
Line_13 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) -->Line_16 $$ if (component instanceof TreeNode) [ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_48 $$ right.add(myDetails.getComponent(), BorderLayout.CENTER)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_52 $$ mySplitter.setSecondComponent(right)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_53 $$ GuiUtils.replaceJSplitPaneWithIDEASplitter(myWholePanel)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_49 $$ if (!isNewProjectSettings()) [ CD ]
Line_32 $$ if (isNewProjectSettings()) -->Line_42 $$ left.add(myNorthPanel, BorderLayout.NORTH)[ CD ]
Line_32 $$ if (isNewProjectSettings()) -->Line_43 $$ myMaster = ScrollPaneFactory.createScrollPane(myTree)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_46 $$ mySplitter.setFirstComponent(left)[ CD ]
Line_3 $$ if (!myToReInitWholePanel)-->Line_4 $$ return[ CD ]
Line_15 $$ Object component = eachPath.getLastPathComponent()-->Line_16 $$ if (component instanceof TreeNode) [ FD ]
Line_13 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) -->Line_14 $$ TreePath eachPath = myTree.getPathForRow(eachRow)[ CD ]
Line_35 $$ if (group != null) -->Line_36 $$ decorator.setActionGroup(group)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_24 $$ myWholePanel.add(mySplitter, BorderLayout.CENTER)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_3 $$ if (!myToReInitWholePanel)[ CD ]
Line_5 $$ myWholePanel = new JPanel(new BorderLayout()) -->Line_11 $$ if (m instanceof DefaultTreeModel) [ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_32 $$ if (isNewProjectSettings()) [ CD ]
Line_11 $$ if (m instanceof DefaultTreeModel) -->Line_12 $$ DefaultTreeModel model = (DefaultTreeModel) m[ CD ]
Line_16 $$ if (component instanceof TreeNode) -->Line_17 $$ model.nodeChanged((TreeNode) component)[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_45 $$ left.add(myMaster, BorderLayout.CENTER)[ CD ]
Line_49 $$ if (!isNewProjectSettings()) -->Line_50 $$ myWholePanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10))[ CD ]
Line_5 $$ myWholePanel = new JPanel(new BorderLayout()) -->Line_8 $$ super.addNotify()[ CD ]
Line_32 $$ if (isNewProjectSettings()) -->Line_35 $$ if (group != null) [ CD ]
Line_25 $$ JPanel left = new JPanel(new BorderLayout()) -->Line_29 $$ return new Dimension(Math.max(original.width, 100), original.height)[ CD ]
Line_32 $$ if (isNewProjectSettings()) -->Line_33 $$ ToolbarDecorator decorator = ToolbarDecorator.createDecorator(myTree)[ CD ]
Line_32 $$ if (isNewProjectSettings()) -->Line_40 $$ myNorthPanel.setVisible(false)[ CD ]
Line_13 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) -->Line_14 $$ TreePath eachPath = myTree.getPathForRow(eachRow)[ FD ]
Line_32 $$ if (isNewProjectSettings()) -->Line_34 $$ DefaultActionGroup group = createToolbarActionGroup()[ CD ]
Line_5 $$ myWholePanel = new JPanel(new BorderLayout()) -->Line_10 $$ TreeModel m = myTree.getModel()[ CD ]
Line_13 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) -->Line_15 $$ Object component = eachPath.getLastPathComponent()[ CD ]
Line_2 $$ protected void reInitWholePanelIfNeeded() -->Line_23 $$ mySplitter.setHonorComponentsMinimumSize(true)[ CD ]
Line_11 $$ if (m instanceof DefaultTreeModel) -->Line_13 $$ for (int eachRow = 0; eachRow < myTree.getRowCount(); eachRow++) [ CD ]
Line_25 $$ JPanel left = new JPanel(new BorderLayout()) -->Line_28 $$ final Dimension original = super.getMinimumSize()[ CD ]
Line_14 $$ TreePath eachPath = myTree.getPathForRow(eachRow)-->Line_15 $$ Object component = eachPath.getLastPathComponent()[ FD ]
Line_12 $$ DefaultTreeModel model = (DefaultTreeModel) m-->Line_17 $$ model.nodeChanged((TreeNode) component)[ FD ]
Line_10 $$ TreeModel m = myTree.getModel()-->Line_11 $$ if (m instanceof DefaultTreeModel) [ FD ]
