Line_6 $$ final JButton pipette = new JButton()-->Line_12 $$ pipette.setFocusable(false)[ FD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_49 $$ rgbPanel.add(myFormat)[ CD ]
Line_28 $$ if (!UIUtil.isUnderAquaLookAndFeel()) -->Line_31 $$ myB_after.setPreferredSize(new Dimension(14, -1))[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_48 $$ rgbPanel.add(Box.createHorizontalStrut(2))[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_5 $$ if (enablePipette && myPicker != null) [ FD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_13 $$ pipette.addActionListener(new ActionListener() [ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_55 $$ hexPanel.add(myHex)[ CD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_12 $$ pipette.setFocusable(false)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_46 $$ if (!UIUtil.isUnderAquaLookAndFeel())[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_33 $$ rgbPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0))[ CD ]
Line_13 $$ pipette.addActionListener(new ActionListener() -->Line_17 $$ myPicker.setInitialColor(getColor())[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_24 $$ previewPanel.add(myPreviewComponent, BorderLayout.CENTER)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_45 $$ rgbPanel.add(myBlue)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_4 $$ final JPanel previewPanel = new JPanel(new BorderLayout())[ CD ]
Line_4 $$ final JPanel previewPanel = new JPanel(new BorderLayout())-->Line_25 $$ result.add(previewPanel, BorderLayout.NORTH)[ FD ]
Line_6 $$ final JButton pipette = new JButton()-->Line_10 $$ pipette.setBorder(IdeBorderFactory.createEmptyBorder())[ FD ]
Line_6 $$ final JButton pipette = new JButton()-->Line_7 $$ pipette.setUI(new BasicButtonUI())[ FD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_43 $$ rgbPanel.add(Box.createHorizontalStrut(2))[ CD ]
Line_46 $$ if (!UIUtil.isUnderAquaLookAndFeel())-->Line_47 $$ rgbPanel.add(myB_after)[ CD ]
Line_6 $$ final JButton pipette = new JButton()-->Line_21 $$ previewPanel.add(pipette, BorderLayout.WEST)[ FD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_41 $$ if (!UIUtil.isUnderAquaLookAndFeel())[ CD ]
Line_3 $$ final JPanel result = new JPanel(new BorderLayout())-->Line_25 $$ result.add(previewPanel, BorderLayout.NORTH)[ FD ]
Line_6 $$ final JButton pipette = new JButton()-->Line_8 $$ pipette.setRolloverEnabled(true)[ FD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_57 $$ return result[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_39 $$ rgbPanel.add(myG)[ CD ]
Line_6 $$ final JButton pipette = new JButton()-->Line_13 $$ pipette.addActionListener(new ActionListener() [ FD ]
Line_3 $$ final JPanel result = new JPanel(new BorderLayout())-->Line_50 $$ result.add(rgbPanel, BorderLayout.WEST)[ FD ]
Line_6 $$ final JButton pipette = new JButton()-->Line_11 $$ pipette.setRolloverIcon(AllIcons.Ide.Pipette_rollover)[ FD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_9 $$ pipette.setIcon(AllIcons.Ide.Pipette)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_52 $$ hexPanel.setLayout(new BoxLayout(hexPanel, BoxLayout.X_AXIS))[ CD ]
Line_6 $$ final JButton pipette = new JButton()-->Line_9 $$ pipette.setIcon(AllIcons.Ide.Pipette)[ FD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_11 $$ pipette.setRolloverIcon(AllIcons.Ide.Pipette_rollover)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_5 $$ if (enablePipette && myPicker != null) [ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_27 $$ rgbPanel.setLayout(new BoxLayout(rgbPanel, BoxLayout.X_AXIS))[ CD ]
Line_28 $$ if (!UIUtil.isUnderAquaLookAndFeel()) -->Line_30 $$ myG_after.setPreferredSize(new Dimension(14, -1))[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_35 $$ rgbPanel.add(myRed)[ CD ]
Line_41 $$ if (!UIUtil.isUnderAquaLookAndFeel())-->Line_42 $$ rgbPanel.add(myG_after)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_50 $$ result.add(rgbPanel, BorderLayout.WEST)[ CD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_7 $$ pipette.setUI(new BasicButtonUI())[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_56 $$ result.add(hexPanel, BorderLayout.EAST)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_34 $$ rgbPanel.add(myR)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_36 $$ if (!UIUtil.isUnderAquaLookAndFeel())[ CD ]
Line_3 $$ final JPanel result = new JPanel(new BorderLayout())-->Line_56 $$ result.add(hexPanel, BorderLayout.EAST)[ FD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_21 $$ previewPanel.add(pipette, BorderLayout.WEST)[ CD ]
Line_4 $$ final JPanel previewPanel = new JPanel(new BorderLayout())-->Line_21 $$ previewPanel.add(pipette, BorderLayout.WEST)[ FD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_28 $$ if (!UIUtil.isUnderAquaLookAndFeel()) [ CD ]
Line_28 $$ if (!UIUtil.isUnderAquaLookAndFeel()) -->Line_29 $$ myR_after.setPreferredSize(new Dimension(14, -1))[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_53 $$ hexPanel.setBorder(BorderFactory.createEmptyBorder(10, 0, 0, 0))[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_54 $$ hexPanel.add(new JLabel("#"))[ CD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_8 $$ pipette.setRolloverEnabled(true)[ CD ]
Line_13 $$ pipette.addActionListener(new ActionListener() -->Line_18 $$ myPicker.show()[ CD ]
Line_4 $$ final JPanel previewPanel = new JPanel(new BorderLayout())-->Line_24 $$ previewPanel.add(myPreviewComponent, BorderLayout.CENTER)[ FD ]
Line_36 $$ if (!UIUtil.isUnderAquaLookAndFeel())-->Line_37 $$ rgbPanel.add(myR_after)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_38 $$ rgbPanel.add(Box.createHorizontalStrut(2))[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_25 $$ result.add(previewPanel, BorderLayout.NORTH)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_44 $$ rgbPanel.add(myB)[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_3 $$ final JPanel result = new JPanel(new BorderLayout())[ CD ]
Line_2 $$ private JComponent buildTopPanel(boolean enablePipette) throws ParseException -->Line_40 $$ rgbPanel.add(myGreen)[ CD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_6 $$ final JButton pipette = new JButton()[ CD ]
Line_5 $$ if (enablePipette && myPicker != null) -->Line_10 $$ pipette.setBorder(IdeBorderFactory.createEmptyBorder())[ CD ]
