Line_8 $$ final JPanel leftPanel = new JPanel(new BorderLayout())-->Line_65 $$ leftPanel.setBorder(JBUI.Borders.empty())[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_47 $$ scrollPaneWrap.add(scrollPane, BorderLayout.CENTER)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_4 $$ myLayoutTreeComponent.initTree()[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_30 $$ link.setUseIconAsLink(true)[ CD ]
Line_35 $$ final JLabel label = new JLabel(ProjectBundle.message("artifact.source.items.tree.tooltip"))-->Line_38 $$ label.setOpaque(true)[ FD ]
Line_72 $$ if (state == ThreeStateCheckBox.State.SELECTED) -->Line_73 $$ mySubstitutionParameters.setSubstituteAll()[ CD ]
Line_24 $$ final JPanel rightTopPanel = new JPanel(new BorderLayout())-->Line_44 $$ rightPanel.add(rightTopPanel, BorderLayout.NORTH)[ FD ]
Line_60 $$ if (Registry.is("ide.new.project.settings")) -->Line_63 $$ rightPanel.setBorder(JBUI.Borders.empty())[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_31 $$ link.addHyperlinkListener(new HyperlinkAdapter() [ CD ]
Line_31 $$ link.addHyperlinkListener(new HyperlinkAdapter() -->Line_38 $$ label.setOpaque(true)[ CD ]
Line_84 $$ if (UIUtil.isUnderDarcula()) -->Line_85 $$ toolbarComponent.setBorder(new CustomLineBorder(0, 0, 1, 0))[ CD ]
Line_7 $$ final JBSplitter splitter = Registry.is("ide.new.project.settings") ? new OnePixelSplitter(false) : new JBSplitter(false)-->Line_59 $$ splitter.setSecondComponent(rightPanel)[ FD ]
Line_7 $$ final JBSplitter splitter = Registry.is("ide.new.project.settings") ? new OnePixelSplitter(false) : new JBSplitter(false)-->Line_22 $$ splitter.setFirstComponent(leftPanel)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_82 $$ ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, createToolbarActionGroup(), true)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_6 $$ myErrorPanelPlace.add(myValidationManager.getMainErrorPanel(), BorderLayout.CENTER)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_8 $$ final JPanel leftPanel = new JPanel(new BorderLayout())[ CD ]
Line_54 $$ if (UIUtil.isUnderDarcula()) -->Line_55 $$ rightPanel.setBorder(new CompoundBorder(new CustomLineBorder(0, 1, 0, 0), BorderFactory.createEmptyBorder(0, 0, 0, 0)))[ CD ]
Line_60 $$ if (Registry.is("ide.new.project.settings")) -->Line_65 $$ leftPanel.setBorder(JBUI.Borders.empty())[ CD ]
Line_31 $$ link.addHyperlinkListener(new HyperlinkAdapter() -->Line_39 $$ HintManager.getInstance().showHint(label, RelativePoint.getSouthWestOf(link), HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE, -1)[ CD ]
Line_8 $$ final JPanel leftPanel = new JPanel(new BorderLayout())-->Line_18 $$ leftPanel.setBorder(border)[ FD ]
Line_60 $$ if (Registry.is("ide.new.project.settings")) -->Line_64 $$ scrollPaneWrap.setBorder(JBUI.Borders.empty())[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_27 $$ labelPanel.add(new JLabel("Available Elements "))[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_22 $$ splitter.setFirstComponent(leftPanel)[ CD ]
Line_23 $$ final JPanel rightPanel = new JPanel(new BorderLayout())-->Line_63 $$ rightPanel.setBorder(JBUI.Borders.empty())[ FD ]
Line_23 $$ final JPanel rightPanel = new JPanel(new BorderLayout())-->Line_53 $$ rightPanel.add(scrollPaneWrap, BorderLayout.CENTER)[ FD ]
Line_23 $$ final JPanel rightPanel = new JPanel(new BorderLayout())-->Line_55 $$ rightPanel.setBorder(new CompoundBorder(new CustomLineBorder(0, 1, 0, 0), BorderFactory.createEmptyBorder(0, 0, 0, 0)))[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_15 $$ leftPanel.add(treePanel, BorderLayout.CENTER)[ CD ]
Line_25 $$ final JPanel labelPanel = new JPanel()-->Line_43 $$ rightTopPanel.add(labelPanel, BorderLayout.CENTER)[ FD ]
Line_67 $$ myShowContentCheckBox.addActionListener(new ActionListener() -->Line_78 $$ myLayoutTreeComponent.rebuildTree()[ CD ]
Line_72 $$ if (state == ThreeStateCheckBox.State.SELECTED) -->Line_74 $$ if (state == ThreeStateCheckBox.State.NOT_SELECTED) [ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_87 $$ leftPanel.add(toolbarComponent, BorderLayout.NORTH)[ CD ]
Line_31 $$ link.addHyperlinkListener(new HyperlinkAdapter() -->Line_36 $$ label.setBorder(HintUtil.createHintBorder())[ CD ]
Line_67 $$ myShowContentCheckBox.addActionListener(new ActionListener() -->Line_72 $$ if (state == ThreeStateCheckBox.State.SELECTED) [ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_93 $$ myEditorPanel.add(myTabbedPane.getComponent(), BorderLayout.CENTER)[ CD ]
Line_17 $$ CompoundBorder border = new CompoundBorder(new CustomLineBorder(0, 0, 0, 1), BorderFactory.createEmptyBorder(0, 0, 0, 0))-->Line_18 $$ leftPanel.setBorder(border)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_28 $$ final HyperlinkLabel link = new HyperlinkLabel("")[ CD ]
Line_8 $$ final JPanel leftPanel = new JPanel(new BorderLayout())-->Line_20 $$ leftPanel.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 0))[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_45 $$ JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(mySourceItemsTree, UIUtil.isUnderDarcula() || Registry.is("ide.new.project.settings"))[ CD ]
Line_9 $$ JPanel treePanel = myLayoutTreeComponent.getTreePanel()-->Line_13 $$ treePanel.setBorder(new LineBorder(UIUtil.getBorderColor()))[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_3 $$ mySourceItemsTree.initTree()[ CD ]
Line_23 $$ final JPanel rightPanel = new JPanel(new BorderLayout())-->Line_59 $$ splitter.setSecondComponent(rightPanel)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_10 $$ if (UIUtil.isUnderDarcula()) [ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_91 $$ myTabbedPane.addTab("Output Layout", splitter)[ CD ]
Line_28 $$ final HyperlinkLabel link = new HyperlinkLabel("")-->Line_30 $$ link.setUseIconAsLink(true)[ FD ]
Line_54 $$ if (UIUtil.isUnderDarcula()) -->Line_57 $$ rightPanel.setBorder(BorderFactory.createEmptyBorder(3, 0, 3, 3))[ CD ]
Line_31 $$ link.addHyperlinkListener(new HyperlinkAdapter() -->Line_35 $$ final JLabel label = new JLabel(ProjectBundle.message("artifact.source.items.tree.tooltip"))[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_99 $$ return getMainComponent()[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_95 $$ new ShowAddPackagingElementPopupAction(this).registerCustomShortcutSet(CommonShortcuts.getNew(), tree)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_48 $$ if (UIUtil.isUnderDarcula()) [ CD ]
Line_28 $$ final HyperlinkLabel link = new HyperlinkLabel("")-->Line_42 $$ labelPanel.add(link)[ FD ]
Line_10 $$ if (UIUtil.isUnderDarcula()) -->Line_13 $$ treePanel.setBorder(new LineBorder(UIUtil.getBorderColor()))[ CD ]
Line_10 $$ if (UIUtil.isUnderDarcula()) -->Line_11 $$ treePanel.setBorder(new EmptyBorder(3, 0, 0, 0))[ CD ]
Line_24 $$ final JPanel rightTopPanel = new JPanel(new BorderLayout())-->Line_89 $$ rightTopPanel.setPreferredSize(new Dimension(-1, toolbarComponent.getPreferredSize().height))[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_84 $$ if (UIUtil.isUnderDarcula()) [ CD ]
Line_23 $$ final JPanel rightPanel = new JPanel(new BorderLayout())-->Line_57 $$ rightPanel.setBorder(BorderFactory.createEmptyBorder(3, 0, 3, 3))[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_67 $$ myShowContentCheckBox.addActionListener(new ActionListener() [ CD ]
Line_25 $$ final JPanel labelPanel = new JPanel()-->Line_27 $$ labelPanel.add(new JLabel("Available Elements "))[ FD ]
Line_71 $$ final ThreeStateCheckBox.State state = myShowContentCheckBox.getState()-->Line_74 $$ if (state == ThreeStateCheckBox.State.NOT_SELECTED) [ FD ]
Line_71 $$ final ThreeStateCheckBox.State state = myShowContentCheckBox.getState()-->Line_72 $$ if (state == ThreeStateCheckBox.State.SELECTED) [ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_83 $$ JComponent toolbarComponent = toolbar.getComponent()[ CD ]
Line_28 $$ final HyperlinkLabel link = new HyperlinkLabel("")-->Line_31 $$ link.addHyperlinkListener(new HyperlinkAdapter() [ FD ]
Line_74 $$ if (state == ThreeStateCheckBox.State.NOT_SELECTED) -->Line_75 $$ mySubstitutionParameters.setSubstituteNone()[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_42 $$ labelPanel.add(link)[ CD ]
Line_16 $$ if (UIUtil.isUnderDarcula()) -->Line_17 $$ CompoundBorder border = new CompoundBorder(new CustomLineBorder(0, 0, 0, 1), BorderFactory.createEmptyBorder(0, 0, 0, 0))[ CD ]
Line_8 $$ final JPanel leftPanel = new JPanel(new BorderLayout())-->Line_87 $$ leftPanel.add(toolbarComponent, BorderLayout.NORTH)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_25 $$ final JPanel labelPanel = new JPanel()[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_23 $$ final JPanel rightPanel = new JPanel(new BorderLayout())[ CD ]
Line_7 $$ final JBSplitter splitter = Registry.is("ide.new.project.settings") ? new OnePixelSplitter(false) : new JBSplitter(false)-->Line_91 $$ myTabbedPane.addTab("Output Layout", splitter)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_26 $$ labelPanel.setLayout(new BoxLayout(labelPanel, BoxLayout.X_AXIS))[ CD ]
Line_8 $$ final JPanel leftPanel = new JPanel(new BorderLayout())-->Line_22 $$ splitter.setFirstComponent(leftPanel)[ FD ]
Line_24 $$ final JPanel rightTopPanel = new JPanel(new BorderLayout())-->Line_43 $$ rightTopPanel.add(labelPanel, BorderLayout.CENTER)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_88 $$ toolbar.updateActionsImmediately()[ CD ]
Line_16 $$ if (UIUtil.isUnderDarcula()) -->Line_18 $$ leftPanel.setBorder(border)[ CD ]
Line_9 $$ JPanel treePanel = myLayoutTreeComponent.getTreePanel()-->Line_15 $$ leftPanel.add(treePanel, BorderLayout.CENTER)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_94 $$ final LayoutTree tree = myLayoutTreeComponent.getLayoutTree()[ CD ]
Line_25 $$ final JPanel labelPanel = new JPanel()-->Line_42 $$ labelPanel.add(link)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_29 $$ link.setIcon(AllIcons.General.Help_small)[ CD ]
Line_48 $$ if (UIUtil.isUnderDarcula()) -->Line_49 $$ scrollPaneWrap.setBorder(new EmptyBorder(3, 0, 0, 0))[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_16 $$ if (UIUtil.isUnderDarcula()) [ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_24 $$ final JPanel rightTopPanel = new JPanel(new BorderLayout())[ CD ]
Line_8 $$ final JPanel leftPanel = new JPanel(new BorderLayout())-->Line_15 $$ leftPanel.add(treePanel, BorderLayout.CENTER)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_43 $$ rightTopPanel.add(labelPanel, BorderLayout.CENTER)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_59 $$ splitter.setSecondComponent(rightPanel)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_98 $$ rebuildTries()[ CD ]
Line_60 $$ if (Registry.is("ide.new.project.settings")) -->Line_61 $$ splitter.getDivider().setBackground(UIUtil.getPanelBackground())[ CD ]
Line_35 $$ final JLabel label = new JLabel(ProjectBundle.message("artifact.source.items.tree.tooltip"))-->Line_39 $$ HintManager.getInstance().showHint(label, RelativePoint.getSouthWestOf(link), HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE, -1)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_89 $$ rightTopPanel.setPreferredSize(new Dimension(-1, toolbarComponent.getPreferredSize().height))[ CD ]
Line_67 $$ myShowContentCheckBox.addActionListener(new ActionListener() -->Line_77 $$ myShowContentCheckBox.setThirdStateEnabled(false)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_53 $$ rightPanel.add(scrollPaneWrap, BorderLayout.CENTER)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_7 $$ final JBSplitter splitter = Registry.is("ide.new.project.settings") ? new OnePixelSplitter(false) : new JBSplitter(false)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_97 $$ ToolTipManager.sharedInstance().registerComponent(tree)[ CD ]
Line_35 $$ final JLabel label = new JLabel(ProjectBundle.message("artifact.source.items.tree.tooltip"))-->Line_36 $$ label.setBorder(HintUtil.createHintBorder())[ FD ]
Line_48 $$ if (UIUtil.isUnderDarcula()) -->Line_51 $$ scrollPaneWrap.setBorder(new LineBorder(UIUtil.getBorderColor()))[ CD ]
Line_67 $$ myShowContentCheckBox.addActionListener(new ActionListener() -->Line_79 $$ onShowContentSettingsChanged()[ CD ]
Line_60 $$ if (Registry.is("ide.new.project.settings")) -->Line_62 $$ treePanel.setBorder(JBUI.Borders.empty())[ CD ]
Line_9 $$ JPanel treePanel = myLayoutTreeComponent.getTreePanel()-->Line_11 $$ treePanel.setBorder(new EmptyBorder(3, 0, 0, 0))[ FD ]
Line_67 $$ myShowContentCheckBox.addActionListener(new ActionListener() -->Line_71 $$ final ThreeStateCheckBox.State state = myShowContentCheckBox.getState()[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_54 $$ if (UIUtil.isUnderDarcula()) [ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_9 $$ JPanel treePanel = myLayoutTreeComponent.getTreePanel()[ CD ]
Line_16 $$ if (UIUtil.isUnderDarcula()) -->Line_20 $$ leftPanel.setBorder(BorderFactory.createEmptyBorder(3, 3, 3, 0))[ CD ]
Line_25 $$ final JPanel labelPanel = new JPanel()-->Line_26 $$ labelPanel.setLayout(new BoxLayout(labelPanel, BoxLayout.X_AXIS))[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_44 $$ rightPanel.add(rightTopPanel, BorderLayout.NORTH)[ CD ]
Line_2 $$ public JComponent createMainComponent() -->Line_92 $$ myPropertiesEditors.addTabs(myTabbedPane)[ CD ]
Line_35 $$ final JLabel label = new JLabel(ProjectBundle.message("artifact.source.items.tree.tooltip"))-->Line_37 $$ label.setBackground(HintUtil.INFORMATION_COLOR)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_96 $$ PopupHandler.installPopupHandler(tree, createPopupActionGroup(), ActionPlaces.UNKNOWN, ActionManager.getInstance())[ CD ]
Line_31 $$ link.addHyperlinkListener(new HyperlinkAdapter() -->Line_37 $$ label.setBackground(HintUtil.INFORMATION_COLOR)[ CD ]
Line_9 $$ JPanel treePanel = myLayoutTreeComponent.getTreePanel()-->Line_62 $$ treePanel.setBorder(JBUI.Borders.empty())[ FD ]
Line_7 $$ final JBSplitter splitter = Registry.is("ide.new.project.settings") ? new OnePixelSplitter(false) : new JBSplitter(false)-->Line_61 $$ splitter.getDivider().setBackground(UIUtil.getPanelBackground())[ FD ]
Line_28 $$ final HyperlinkLabel link = new HyperlinkLabel("")-->Line_29 $$ link.setIcon(AllIcons.General.Help_small)[ FD ]
Line_28 $$ final HyperlinkLabel link = new HyperlinkLabel("")-->Line_39 $$ HintManager.getInstance().showHint(label, RelativePoint.getSouthWestOf(link), HintManager.HIDE_BY_ANY_KEY | HintManager.HIDE_BY_TEXT_CHANGE, -1)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_5 $$ DataManager.registerDataProvider(myMainPanel, new TypeSafeDataProviderAdapter(new MyDataProvider()))[ CD ]
Line_23 $$ final JPanel rightPanel = new JPanel(new BorderLayout())-->Line_44 $$ rightPanel.add(rightTopPanel, BorderLayout.NORTH)[ FD ]
Line_2 $$ public JComponent createMainComponent() -->Line_60 $$ if (Registry.is("ide.new.project.settings")) [ CD ]
