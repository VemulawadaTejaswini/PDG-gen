Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_43 $$ PerHintSearchData data = getUserData(SEARCH_DATA_IN_HINT_KEY)[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_80 $$ if (!hint.isVisible())[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_13 $$ String selection = editor.getSelectionModel().getSelectedText()[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_15 $$ PerEditorSearchData data = editor.getUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY)[ CD ]
Line_3 $$ if (!ourActionsRegistered) -->Line_4 $$ EditorActionManager actionManager = EditorActionManager.getInstance()[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_31 $$ label1.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD))[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_94 $$ hint.putUserData(SEARCH_DATA_IN_HINT_KEY, hintData)[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_45 $$ String prefix = data.label.getText()[ CD ]
Line_4 $$ EditorActionManager actionManager = EditorActionManager.getInstance()-->Line_8 $$ actionManager.setActionHandler(IdeActions.ACTION_EDITOR_MOVE_CARET_UP, new UpHandler(actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_CARET_UP)))[ FD ]
Line_15 $$ PerEditorSearchData data = editor.getUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY)-->Line_96 $$ editor.putUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY, data)[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_12 $$ FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.incremental.search")[ CD ]
Line_58 $$ CaretListener listener = caretListener[0]-->Line_59 $$ editor.getCaretModel().removeCaretListener(listener)[ FD ]
Line_43 $$ PerHintSearchData data = getUserData(SEARCH_DATA_IN_HINT_KEY)-->Line_96 $$ editor.putUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY, data)[ FD ]
Line_3 $$ if (!ourActionsRegistered) -->Line_7 $$ actionManager.setActionHandler(IdeActions.ACTION_EDITOR_BACKSPACE, new BackSpaceHandler(actionManager.getActionHandler(IdeActions.ACTION_EDITOR_BACKSPACE)))[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_34 $$ panel.add(label2, BorderLayout.CENTER)[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_38 $$ final Document document = editor.getDocument()[ FD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_94 $$ hint.putUserData(SEARCH_DATA_IN_HINT_KEY, hintData)[ FD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_77 $$ PerHintSearchData data = hint.getUserData(SEARCH_DATA_IN_HINT_KEY)[ FD ]
Line_4 $$ EditorActionManager actionManager = EditorActionManager.getInstance()-->Line_5 $$ TypedAction typedAction = actionManager.getTypedAction()[ FD ]
Line_73 $$ caretListener[0] = new CaretAdapter() -->Line_78 $$ if (data != null && data.ignoreCaretMove)[ CD ]
Line_57 $$ if (caretListener[0] != null) -->Line_59 $$ editor.getCaretModel().removeCaretListener(listener)[ CD ]
Line_4 $$ EditorActionManager actionManager = EditorActionManager.getInstance()-->Line_9 $$ actionManager.setActionHandler(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN, new DownHandler(actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN)))[ FD ]
Line_15 $$ PerEditorSearchData data = editor.getUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY)-->Line_17 $$ data = new PerEditorSearchData()[ FD ]
Line_3 $$ if (!ourActionsRegistered) -->Line_6 $$ typedAction.setupRawHandler(new MyTypedHandler(typedAction.getRawHandler()))[ CD ]
Line_58 $$ CaretListener listener = caretListener[0]-->Line_86 $$ editor.getCaretModel().addCaretListener(listener)[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_91 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, p, HintManagerImpl.HIDE_BY_ESCAPE | HintManagerImpl.HIDE_BY_TEXT_CHANGE, 0, false, new HintHint(editor, p).setAwtTooltip(false))[ CD ]
Line_73 $$ caretListener[0] = new CaretAdapter() -->Line_77 $$ PerHintSearchData data = hint.getUserData(SEARCH_DATA_IN_HINT_KEY)[ CD ]
Line_3 $$ if (!ourActionsRegistered) -->Line_9 $$ actionManager.setActionHandler(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN, new DownHandler(actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_CARET_DOWN)))[ CD ]
Line_32 $$ JPanel panel = new MyPanel(label1)-->Line_35 $$ panel.setBorder(BorderFactory.createLineBorder(Color.black))[ FD ]
Line_80 $$ if (!hint.isVisible())-->Line_81 $$ return[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_57 $$ if (caretListener[0] != null) [ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_97 $$ if (hintData.label.getText().length() > 0) [ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_82 $$ hint.hide()[ FD ]
Line_5 $$ TypedAction typedAction = actionManager.getTypedAction()-->Line_6 $$ typedAction.setupRawHandler(new MyTypedHandler(typedAction.getRawHandler()))[ FD ]
Line_14 $$ JLabel label2 = new MyLabel(selection == null ? "" : selection)-->Line_24 $$ label2 = new MyLabel(data.lastSearch)[ FD ]
Line_63 $$ documentListener[0] = new DocumentAdapter() -->Line_67 $$ if (!hint.isVisible())[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_69 $$ hint.hide()[ FD ]
Line_24 $$ label2 = new MyLabel(data.lastSearch)-->Line_34 $$ panel.add(label2, BorderLayout.CENTER)[ FD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_89 $$ int y = -hint.getComponent().getPreferredSize().height[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_30 $$ JLabel label1 = new MyLabel(" " + CodeInsightBundle.message("incremental.search.tooltip.prefix"))[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_91 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, p, HintManagerImpl.HIDE_BY_ESCAPE | HintManagerImpl.HIDE_BY_TEXT_CHANGE, 0, false, new HintHint(editor, p).setAwtTooltip(false))[ FD ]
Line_15 $$ PerEditorSearchData data = editor.getUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY)-->Line_16 $$ if (data == null) [ FD ]
Line_19 $$ if (data.hint != null) -->Line_20 $$ if (data.lastSearch != null) [ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_87 $$ final JComponent component = editor.getComponent()[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_50 $$ PerEditorSearchData editorData = editor.getUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY)[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_72 $$ document.addDocumentListener(documentListener[0])[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_46 $$ super.hide()[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_87 $$ final JComponent component = editor.getComponent()[ FD ]
Line_3 $$ if (!ourActionsRegistered) -->Line_5 $$ TypedAction typedAction = actionManager.getTypedAction()[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_86 $$ editor.getCaretModel().addCaretListener(listener)[ FD ]
Line_20 $$ if (data.lastSearch != null) -->Line_21 $$ PerHintSearchData hintData = data.hint.getUserData(SEARCH_DATA_IN_HINT_KEY)[ CD ]
Line_30 $$ JLabel label1 = new MyLabel(" " + CodeInsightBundle.message("incremental.search.tooltip.prefix"))-->Line_31 $$ label1.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD))[ FD ]
Line_47 $$ if (data.segmentHighlighter != null) -->Line_48 $$ data.segmentHighlighter.dispose()[ CD ]
Line_21 $$ PerHintSearchData hintData = data.hint.getUserData(SEARCH_DATA_IN_HINT_KEY)-->Line_98 $$ updatePosition(editor, hintData, true, false)[ FD ]
Line_32 $$ JPanel panel = new MyPanel(label1)-->Line_34 $$ panel.add(label2, BorderLayout.CENTER)[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_50 $$ PerEditorSearchData editorData = editor.getUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY)[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_37 $$ final CaretListener[] caretListener = new CaretListener[1][ CD ]
Line_32 $$ JPanel panel = new MyPanel(label1)-->Line_33 $$ panel.add(label1, BorderLayout.WEST)[ FD ]
Line_16 $$ if (data == null) -->Line_17 $$ data = new PerEditorSearchData()[ CD ]
Line_73 $$ caretListener[0] = new CaretAdapter() -->Line_80 $$ if (!hint.isVisible())[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_93 $$ hintData.searchStart = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_93 $$ hintData.searchStart = editor.getCaretModel().getOffset()[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_73 $$ caretListener[0] = new CaretAdapter() [ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_13 $$ String selection = editor.getSelectionModel().getSelectedText()[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_14 $$ JLabel label2 = new MyLabel(selection == null ? "" : selection)[ CD ]
Line_73 $$ caretListener[0] = new CaretAdapter() -->Line_82 $$ hint.hide()[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_16 $$ if (data == null) [ CD ]
Line_67 $$ if (!hint.isVisible())-->Line_68 $$ return[ CD ]
Line_53 $$ if (documentListener[0] != null) -->Line_55 $$ documentListener[0] = null[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_39 $$ final LightweightHint hint = new LightweightHint(panel) [ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_67 $$ if (!hint.isVisible())[ FD ]
Line_3 $$ if (!ourActionsRegistered) -->Line_8 $$ actionManager.setActionHandler(IdeActions.ACTION_EDITOR_MOVE_CARET_UP, new UpHandler(actionManager.getActionHandler(IdeActions.ACTION_EDITOR_MOVE_CARET_UP)))[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_91 $$ HintManagerImpl.getInstanceImpl().showEditorHint(hint, editor, p, HintManagerImpl.HIDE_BY_ESCAPE | HintManagerImpl.HIDE_BY_TEXT_CHANGE, 0, false, new HintHint(editor, p).setAwtTooltip(false))[ FD ]
Line_21 $$ PerHintSearchData hintData = data.hint.getUserData(SEARCH_DATA_IN_HINT_KEY)-->Line_94 $$ hint.putUserData(SEARCH_DATA_IN_HINT_KEY, hintData)[ FD ]
Line_14 $$ JLabel label2 = new MyLabel(selection == null ? "" : selection)-->Line_34 $$ panel.add(label2, BorderLayout.CENTER)[ FD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_44 $$ LOG.assertTrue(data != null)[ CD ]
Line_38 $$ final Document document = editor.getDocument()-->Line_72 $$ document.addDocumentListener(documentListener[0])[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_15 $$ PerEditorSearchData data = editor.getUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY)[ FD ]
Line_57 $$ if (caretListener[0] != null) -->Line_58 $$ CaretListener listener = caretListener[0][ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_53 $$ if (documentListener[0] != null) [ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_89 $$ int y = -hint.getComponent().getPreferredSize().height[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_33 $$ panel.add(label1, BorderLayout.WEST)[ CD ]
Line_63 $$ documentListener[0] = new DocumentAdapter() -->Line_69 $$ hint.hide()[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_96 $$ editor.putUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY, data)[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_96 $$ editor.putUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY, data)[ FD ]
Line_97 $$ if (hintData.label.getText().length() > 0) -->Line_98 $$ updatePosition(editor, hintData, true, false)[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_38 $$ final Document document = editor.getDocument()[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_51 $$ editorData.hint = null[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_63 $$ documentListener[0] = new DocumentAdapter() [ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_47 $$ if (data.segmentHighlighter != null) [ CD ]
Line_77 $$ PerHintSearchData data = hint.getUserData(SEARCH_DATA_IN_HINT_KEY)-->Line_96 $$ editor.putUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY, data)[ FD ]
Line_16 $$ if (data == null) -->Line_19 $$ if (data.hint != null) [ CD ]
Line_53 $$ if (documentListener[0] != null) -->Line_54 $$ document.removeDocumentListener(documentListener[0])[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_86 $$ editor.getCaretModel().addCaretListener(listener)[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_32 $$ JPanel panel = new MyPanel(label1)[ CD ]
Line_4 $$ EditorActionManager actionManager = EditorActionManager.getInstance()-->Line_7 $$ actionManager.setActionHandler(IdeActions.ACTION_EDITOR_BACKSPACE, new BackSpaceHandler(actionManager.getActionHandler(IdeActions.ACTION_EDITOR_BACKSPACE)))[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_36 $$ final DocumentListener[] documentListener = new DocumentListener[1][ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_59 $$ editor.getCaretModel().removeCaretListener(listener)[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_90 $$ Point p = SwingUtilities.convertPoint(component, x, y, component.getRootPane().getLayeredPane())[ CD ]
Line_45 $$ String prefix = data.label.getText()-->Line_52 $$ editorData.lastSearch = prefix[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_35 $$ panel.setBorder(BorderFactory.createLineBorder(Color.black))[ CD ]
Line_39 $$ final LightweightHint hint = new LightweightHint(panel) -->Line_52 $$ editorData.lastSearch = prefix[ CD ]
Line_30 $$ JLabel label1 = new MyLabel(" " + CodeInsightBundle.message("incremental.search.tooltip.prefix"))-->Line_33 $$ panel.add(label1, BorderLayout.WEST)[ FD ]
Line_78 $$ if (data != null && data.ignoreCaretMove)-->Line_79 $$ return[ CD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_3 $$ if (!ourActionsRegistered) [ CD ]
Line_38 $$ final Document document = editor.getDocument()-->Line_54 $$ document.removeDocumentListener(documentListener[0])[ FD ]
Line_19 $$ if (data.hint != null) -->Line_27 $$ data.hint.hide()[ CD ]
Line_17 $$ data = new PerEditorSearchData()-->Line_96 $$ editor.putUserData(SEARCH_DATA_IN_EDITOR_VIEW_KEY, data)[ FD ]
Line_2 $$ public void invoke(Project project, final Editor editor) -->Line_98 $$ updatePosition(editor, hintData, true, false)[ FD ]
