Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_56 $$ panel.setBackground(descriptorBg)[ FD ]
Line_28 $$ Presentation presentation = anAction.getTemplatePresentation()-->Line_33 $$ panel.add(createIconLabel(presentation.getIcon()), BorderLayout.WEST)[ FD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_76 $$ addOnOffButton(panel, selected)[ FD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_43 $$ addOnOffButton(panel, selected)[ FD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_73 $$ panel.setToolTipText(fullHit)[ FD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_31 $$ Color fg = defaultActionForeground(isSelected, actionWithParentGroup.getPresentation())[ CD ]
Line_26 $$ ActionWrapper actionWithParentGroup = (ActionWrapper) value-->Line_31 $$ Color fg = defaultActionForeground(isSelected, actionWithParentGroup.getPresentation())[ FD ]
Line_28 $$ Presentation presentation = anAction.getTemplatePresentation()-->Line_35 $$ appendWithColoredMatches(nameComponent, getName(presentation.getText(), groupName, toggle), pattern, fg, isSelected)[ FD ]
Line_42 $$ boolean selected = ((ToggleAction) anAction).isSelected(event)-->Line_43 $$ addOnOffButton(panel, selected)[ FD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_66 $$ String fullHit = hit[ CD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_9 $$ panel.setBackground(bg)[ FD ]
Line_67 $$ hit = StringUtil.first(hit, 45, true)-->Line_69 $$ appendWithColoredMatches(nameComponent, hit.trim(), pattern, fg, isSelected)[ FD ]
Line_78 $$ JLabel settingsLabel = new JLabel(myGroupNamer.fun((OptionDescription) value))-->Line_80 $$ settingsLabel.setBackground(bg)[ FD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_67 $$ hit = StringUtil.first(hit, 45, true)[ CD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_17 $$ panel.add(new JBLabel(EMPTY_ICON), BorderLayout.WEST)[ FD ]
Line_59 $$ String hit = ((OptionDescription) value).getHit()-->Line_63 $$ hit = StringUtil.unescapeXml(hit)[ FD ]
Line_22 $$ Object value = ((MatchedValue) matchedValue).value-->Line_53 $$ if (value instanceof OptionDescription) [ FD ]
Line_27 $$ AnAction anAction = actionWithParentGroup.getAction()-->Line_28 $$ Presentation presentation = anAction.getTemplatePresentation()[ FD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_82 $$ panel.add(settingsLabel, BorderLayout.EAST)[ FD ]
Line_59 $$ String hit = ((OptionDescription) value).getHit()-->Line_67 $$ hit = StringUtil.first(hit, 45, true)[ FD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_6 $$ panel.setBorder(IdeBorderFactory.createEmptyBorder(2))[ FD ]
Line_74 $$ if (value instanceof BooleanOptionDescription) -->Line_78 $$ JLabel settingsLabel = new JLabel(myGroupNamer.fun((OptionDescription) value))[ CD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_50 $$ panel.add(groupLabel, BorderLayout.EAST)[ FD ]
Line_26 $$ ActionWrapper actionWithParentGroup = (ActionWrapper) value-->Line_30 $$ String groupName = actionWithParentGroup.getAction() instanceof ApplyIntentionAction ? null : actionWithParentGroup.getGroupName()[ FD ]
Line_45 $$ if (groupName != null) -->Line_48 $$ groupLabel.setBorder(eastBorder)[ CD ]
Line_78 $$ JLabel settingsLabel = new JLabel(myGroupNamer.fun((OptionDescription) value))-->Line_79 $$ settingsLabel.setForeground(groupFg)[ FD ]
Line_10 $$ SimpleColoredComponent nameComponent = new SimpleColoredComponent()-->Line_35 $$ appendWithColoredMatches(nameComponent, getName(presentation.getText(), groupName, toggle), pattern, fg, isSelected)[ FD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_28 $$ Presentation presentation = anAction.getTemplatePresentation()[ CD ]
Line_8 $$ Color bg = UIUtil.getListBackground(isSelected)-->Line_47 $$ groupLabel.setBackground(bg)[ FD ]
Line_16 $$ if (showIcon) -->Line_17 $$ panel.add(new JBLabel(EMPTY_ICON), BorderLayout.WEST)[ CD ]
Line_30 $$ String groupName = actionWithParentGroup.getAction() instanceof ApplyIntentionAction ? null : actionWithParentGroup.getGroupName()-->Line_35 $$ appendWithColoredMatches(nameComponent, getName(presentation.getText(), groupName, toggle), pattern, fg, isSelected)[ FD ]
Line_46 $$ JLabel groupLabel = new JLabel(groupName)-->Line_48 $$ groupLabel.setBorder(eastBorder)[ FD ]
Line_10 $$ SimpleColoredComponent nameComponent = new SimpleColoredComponent()-->Line_11 $$ nameComponent.setBackground(bg)[ FD ]
Line_8 $$ Color bg = UIUtil.getListBackground(isSelected)-->Line_9 $$ panel.setBackground(bg)[ FD ]
Line_21 $$ Color groupFg = isSelected ? UIUtil.getListSelectionForeground() : UIUtil.getLabelDisabledForeground()-->Line_38 $$ nameComponent.append(" " + KeymapUtil.getShortcutText(shortcut), new SimpleTextAttributes(SimpleTextAttributes.STYLE_SMALLER | SimpleTextAttributes.STYLE_BOLD, UIUtil.isUnderDarcula() ? groupFg : ColorUtil.shift(groupFg, 1.3)))[ FD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_29 $$ boolean toggle = anAction instanceof ToggleAction[ CD ]
Line_54 $$ if (!isSelected && !(value instanceof BooleanOptionDescription)) -->Line_56 $$ panel.setBackground(descriptorBg)[ CD ]
Line_36 $$ Shortcut shortcut = preferKeyboardShortcut(KeymapManager.getInstance().getActiveKeymap().getShortcuts(ActionManager.getInstance().getId(anAction)))-->Line_37 $$ if (shortcut != null) [ FD ]
Line_78 $$ JLabel settingsLabel = new JLabel(myGroupNamer.fun((OptionDescription) value))-->Line_81 $$ settingsLabel.setBorder(eastBorder)[ FD ]
Line_24 $$ Border eastBorder = IdeBorderFactory.createEmptyBorder(0, 0, 0, 2)-->Line_81 $$ settingsLabel.setBorder(eastBorder)[ FD ]
Line_46 $$ JLabel groupLabel = new JLabel(groupName)-->Line_49 $$ groupLabel.setForeground(groupFg)[ FD ]
Line_21 $$ Color groupFg = isSelected ? UIUtil.getListSelectionForeground() : UIUtil.getLabelDisabledForeground()-->Line_79 $$ settingsLabel.setForeground(groupFg)[ FD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_74 $$ if (value instanceof BooleanOptionDescription) [ CD ]
Line_45 $$ if (groupName != null) -->Line_46 $$ JLabel groupLabel = new JLabel(groupName)[ CD ]
Line_8 $$ Color bg = UIUtil.getListBackground(isSelected)-->Line_11 $$ nameComponent.setBackground(bg)[ FD ]
Line_63 $$ hit = StringUtil.unescapeXml(hit)-->Line_67 $$ hit = StringUtil.first(hit, 45, true)[ FD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_32 $$ if (showIcon) [ CD ]
Line_45 $$ if (groupName != null) -->Line_50 $$ panel.add(groupLabel, BorderLayout.EAST)[ CD ]
Line_63 $$ hit = StringUtil.unescapeXml(hit)-->Line_69 $$ appendWithColoredMatches(nameComponent, hit.trim(), pattern, fg, isSelected)[ FD ]
Line_40 $$ if (toggle) -->Line_41 $$ AnActionEvent event = AnActionEvent.createFromDataContext(ActionPlaces.UNKNOWN, null, ((ActionWrapper) value).myDataContext)[ CD ]
Line_61 $$ hit = ((OptionDescription) value).getOption()-->Line_69 $$ appendWithColoredMatches(nameComponent, hit.trim(), pattern, fg, isSelected)[ FD ]
Line_66 $$ String fullHit = hit-->Line_73 $$ panel.setToolTipText(fullHit)[ FD ]
Line_27 $$ AnAction anAction = actionWithParentGroup.getAction()-->Line_36 $$ Shortcut shortcut = preferKeyboardShortcut(KeymapManager.getInstance().getActiveKeymap().getShortcuts(ActionManager.getInstance().getId(anAction)))[ FD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_27 $$ AnAction anAction = actionWithParentGroup.getAction()[ CD ]
Line_10 $$ SimpleColoredComponent nameComponent = new SimpleColoredComponent()-->Line_38 $$ nameComponent.append(" " + KeymapUtil.getShortcutText(shortcut), new SimpleTextAttributes(SimpleTextAttributes.STYLE_SMALLER | SimpleTextAttributes.STYLE_BOLD, UIUtil.isUnderDarcula() ? groupFg : ColorUtil.shift(groupFg, 1.3)))[ FD ]
Line_61 $$ hit = ((OptionDescription) value).getOption()-->Line_63 $$ hit = StringUtil.unescapeXml(hit)[ FD ]
Line_13 $$ if (matchedValue instanceof String) -->Line_16 $$ if (showIcon) [ CD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_40 $$ if (toggle) [ CD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_7 $$ panel.setOpaque(true)[ FD ]
Line_40 $$ if (toggle) -->Line_42 $$ boolean selected = ((ToggleAction) anAction).isSelected(event)[ CD ]
Line_8 $$ Color bg = UIUtil.getListBackground(isSelected)-->Line_80 $$ settingsLabel.setBackground(bg)[ FD ]
Line_46 $$ JLabel groupLabel = new JLabel(groupName)-->Line_47 $$ groupLabel.setBackground(bg)[ FD ]
Line_74 $$ if (value instanceof BooleanOptionDescription) -->Line_82 $$ panel.add(settingsLabel, BorderLayout.EAST)[ CD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_59 $$ String hit = ((OptionDescription) value).getHit()[ CD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_26 $$ ActionWrapper actionWithParentGroup = (ActionWrapper) value[ CD ]
Line_13 $$ if (matchedValue instanceof String) -->Line_19 $$ return panel[ CD ]
Line_41 $$ AnActionEvent event = AnActionEvent.createFromDataContext(ActionPlaces.UNKNOWN, null, ((ActionWrapper) value).myDataContext)-->Line_42 $$ boolean selected = ((ToggleAction) anAction).isSelected(event)[ FD ]
Line_78 $$ JLabel settingsLabel = new JLabel(myGroupNamer.fun((OptionDescription) value))-->Line_82 $$ panel.add(settingsLabel, BorderLayout.EAST)[ FD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_69 $$ appendWithColoredMatches(nameComponent, hit.trim(), pattern, fg, isSelected)[ CD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_54 $$ if (!isSelected && !(value instanceof BooleanOptionDescription)) [ CD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_73 $$ panel.setToolTipText(fullHit)[ CD ]
Line_30 $$ String groupName = actionWithParentGroup.getAction() instanceof ApplyIntentionAction ? null : actionWithParentGroup.getGroupName()-->Line_45 $$ if (groupName != null) [ FD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_12 $$ panel.add(nameComponent, BorderLayout.CENTER)[ FD ]
Line_36 $$ Shortcut shortcut = preferKeyboardShortcut(KeymapManager.getInstance().getActiveKeymap().getShortcuts(ActionManager.getInstance().getId(anAction)))-->Line_38 $$ nameComponent.append(" " + KeymapUtil.getShortcutText(shortcut), new SimpleTextAttributes(SimpleTextAttributes.STYLE_SMALLER | SimpleTextAttributes.STYLE_BOLD, UIUtil.isUnderDarcula() ? groupFg : ColorUtil.shift(groupFg, 1.3)))[ FD ]
Line_22 $$ Object value = ((MatchedValue) matchedValue).value-->Line_74 $$ if (value instanceof BooleanOptionDescription) [ FD ]
Line_74 $$ if (value instanceof BooleanOptionDescription) -->Line_79 $$ settingsLabel.setForeground(groupFg)[ CD ]
Line_61 $$ hit = ((OptionDescription) value).getOption()-->Line_67 $$ hit = StringUtil.first(hit, 45, true)[ FD ]
Line_40 $$ if (toggle) -->Line_43 $$ addOnOffButton(panel, selected)[ CD ]
Line_59 $$ String hit = ((OptionDescription) value).getHit()-->Line_69 $$ appendWithColoredMatches(nameComponent, hit.trim(), pattern, fg, isSelected)[ FD ]
Line_55 $$ Color descriptorBg = UIUtil.isUnderDarcula() ? ColorUtil.brighter(UIUtil.getListBackground(), 1) : LightColors.SLIGHTLY_GRAY-->Line_56 $$ panel.setBackground(descriptorBg)[ FD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_35 $$ appendWithColoredMatches(nameComponent, getName(presentation.getText(), groupName, toggle), pattern, fg, isSelected)[ CD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_33 $$ panel.add(createIconLabel(presentation.getIcon()), BorderLayout.WEST)[ FD ]
Line_74 $$ if (value instanceof BooleanOptionDescription) -->Line_76 $$ addOnOffButton(panel, selected)[ CD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_36 $$ Shortcut shortcut = preferKeyboardShortcut(KeymapManager.getInstance().getActiveKeymap().getShortcuts(ActionManager.getInstance().getId(anAction)))[ CD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_37 $$ if (shortcut != null) [ CD ]
Line_42 $$ boolean selected = ((ToggleAction) anAction).isSelected(event)-->Line_76 $$ addOnOffButton(panel, selected)[ FD ]
Line_5 $$ JPanel panel = new JPanel(new BorderLayout())-->Line_71 $$ panel.add(new JLabel(EMPTY_ICON), BorderLayout.WEST)[ FD ]
Line_55 $$ Color descriptorBg = UIUtil.isUnderDarcula() ? ColorUtil.brighter(UIUtil.getListBackground(), 1) : LightColors.SLIGHTLY_GRAY-->Line_57 $$ nameComponent.setBackground(descriptorBg)[ FD ]
Line_37 $$ if (shortcut != null) -->Line_38 $$ nameComponent.append(" " + KeymapUtil.getShortcutText(shortcut), new SimpleTextAttributes(SimpleTextAttributes.STYLE_SMALLER | SimpleTextAttributes.STYLE_BOLD, UIUtil.isUnderDarcula() ? groupFg : ColorUtil.shift(groupFg, 1.3)))[ CD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_53 $$ if (value instanceof OptionDescription) [ CD ]
Line_22 $$ Object value = ((MatchedValue) matchedValue).value-->Line_25 $$ if (value instanceof ActionWrapper) [ FD ]
Line_23 $$ String pattern = ((MatchedValue) matchedValue).pattern-->Line_35 $$ appendWithColoredMatches(nameComponent, getName(presentation.getText(), groupName, toggle), pattern, fg, isSelected)[ FD ]
Line_54 $$ if (!isSelected && !(value instanceof BooleanOptionDescription)) -->Line_57 $$ nameComponent.setBackground(descriptorBg)[ CD ]
Line_10 $$ SimpleColoredComponent nameComponent = new SimpleColoredComponent()-->Line_69 $$ appendWithColoredMatches(nameComponent, hit.trim(), pattern, fg, isSelected)[ FD ]
Line_31 $$ Color fg = defaultActionForeground(isSelected, actionWithParentGroup.getPresentation())-->Line_35 $$ appendWithColoredMatches(nameComponent, getName(presentation.getText(), groupName, toggle), pattern, fg, isSelected)[ FD ]
Line_25 $$ if (value instanceof ActionWrapper) -->Line_30 $$ String groupName = actionWithParentGroup.getAction() instanceof ApplyIntentionAction ? null : actionWithParentGroup.getGroupName()[ CD ]
Line_23 $$ String pattern = ((MatchedValue) matchedValue).pattern-->Line_69 $$ appendWithColoredMatches(nameComponent, hit.trim(), pattern, fg, isSelected)[ FD ]
Line_24 $$ Border eastBorder = IdeBorderFactory.createEmptyBorder(0, 0, 0, 2)-->Line_48 $$ groupLabel.setBorder(eastBorder)[ FD ]
Line_40 $$ if (toggle) -->Line_45 $$ if (groupName != null) [ CD ]
Line_29 $$ boolean toggle = anAction instanceof ToggleAction-->Line_35 $$ appendWithColoredMatches(nameComponent, getName(presentation.getText(), groupName, toggle), pattern, fg, isSelected)[ FD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_60 $$ if (hit == null) [ CD ]
Line_31 $$ Color fg = defaultActionForeground(isSelected, actionWithParentGroup.getPresentation())-->Line_69 $$ appendWithColoredMatches(nameComponent, hit.trim(), pattern, fg, isSelected)[ FD ]
Line_10 $$ SimpleColoredComponent nameComponent = new SimpleColoredComponent()-->Line_57 $$ nameComponent.setBackground(descriptorBg)[ FD ]
Line_26 $$ ActionWrapper actionWithParentGroup = (ActionWrapper) value-->Line_27 $$ AnAction anAction = actionWithParentGroup.getAction()[ FD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_70 $$ if (showIcon) [ CD ]
Line_70 $$ if (showIcon) -->Line_71 $$ panel.add(new JLabel(EMPTY_ICON), BorderLayout.WEST)[ CD ]
Line_45 $$ if (groupName != null) -->Line_47 $$ groupLabel.setBackground(bg)[ CD ]
Line_54 $$ if (!isSelected && !(value instanceof BooleanOptionDescription)) -->Line_55 $$ Color descriptorBg = UIUtil.isUnderDarcula() ? ColorUtil.brighter(UIUtil.getListBackground(), 1) : LightColors.SLIGHTLY_GRAY[ CD ]
Line_10 $$ SimpleColoredComponent nameComponent = new SimpleColoredComponent()-->Line_12 $$ panel.add(nameComponent, BorderLayout.CENTER)[ FD ]
Line_59 $$ String hit = ((OptionDescription) value).getHit()-->Line_60 $$ if (hit == null) [ FD ]
Line_45 $$ if (groupName != null) -->Line_49 $$ groupLabel.setForeground(groupFg)[ CD ]
Line_74 $$ if (value instanceof BooleanOptionDescription) -->Line_80 $$ settingsLabel.setBackground(bg)[ CD ]
Line_46 $$ JLabel groupLabel = new JLabel(groupName)-->Line_50 $$ panel.add(groupLabel, BorderLayout.EAST)[ FD ]
Line_60 $$ if (hit == null) -->Line_61 $$ hit = ((OptionDescription) value).getOption()[ CD ]
Line_74 $$ if (value instanceof BooleanOptionDescription) -->Line_81 $$ settingsLabel.setBorder(eastBorder)[ CD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_68 $$ Color fg = UIUtil.getListForeground(isSelected)[ CD ]
Line_21 $$ Color groupFg = isSelected ? UIUtil.getListSelectionForeground() : UIUtil.getLabelDisabledForeground()-->Line_49 $$ groupLabel.setForeground(groupFg)[ FD ]
Line_59 $$ String hit = ((OptionDescription) value).getHit()-->Line_61 $$ hit = ((OptionDescription) value).getOption()[ FD ]
Line_32 $$ if (showIcon) -->Line_33 $$ panel.add(createIconLabel(presentation.getIcon()), BorderLayout.WEST)[ CD ]
Line_53 $$ if (value instanceof OptionDescription) -->Line_63 $$ hit = StringUtil.unescapeXml(hit)[ CD ]
Line_74 $$ if (value instanceof BooleanOptionDescription) -->Line_75 $$ boolean selected = ((BooleanOptionDescription) value).isOptionEnabled()[ CD ]
