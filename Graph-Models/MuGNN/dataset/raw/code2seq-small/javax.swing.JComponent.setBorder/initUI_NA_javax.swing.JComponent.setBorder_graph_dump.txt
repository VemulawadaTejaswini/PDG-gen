Line_121 $$ if (popup != null) -->Line_146 $$ hideHint()[ CD ]
Line_9 $$ final JPanel hBox = new JPanel()-->Line_10 $$ hBox.setLayout(new BoxLayout(hBox, BoxLayout.X_AXIS))[ FD ]
Line_219 $$ if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP) -->Line_222 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ CD ]
Line_244 $$ int selectedIndex = myList.getSelectedIndex()-->Line_245 $$ Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex)[ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_132 $$ Component oppositeComponent = e.getOppositeComponent()[ FD ]
Line_122 $$ popup.addListener(new JBPopupListener.Adapter() -->Line_126 $$ if (event.isOk()) [ CD ]
Line_61 $$ if (object == NON_PREFIX_SEPARATOR) -->Line_62 $$ curElements = nonPrefixMatchElements[ CD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_220 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_51 $$ final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length)-->Line_62 $$ curElements = nonPrefixMatchElements[ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_199 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_222 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_53 $$ for (Object object : objects) -->Line_54 $$ if (object instanceof PsiElement) [ FD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_133 $$ if (oppositeComponent == myCheckBox) -->Line_135 $$ return[ CD ]
Line_137 $$ if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) && myList.isShowing() && (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) -->Line_140 $$ return[ CD ]
Line_121 $$ if (popup != null) -->Line_142 $$ if (isDescendingFromTemporarilyFocusableToolWindow(oppositeComponent)) [ CD ]
Line_53 $$ for (Object object : objects) -->Line_61 $$ if (object == NON_PREFIX_SEPARATOR) [ FD ]
Line_9 $$ final JPanel hBox = new JPanel()-->Line_76 $$ hBox.add(toolbarComponent)[ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_89 $$ if (chosenElement instanceof PsiElement) [ CD ]
Line_190 $$ keyCode = KeyEvent.VK_DOWN-->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_132 $$ Component oppositeComponent = e.getOppositeComponent()[ FD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_222 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_243 $$ if (clickCount == 2) -->Line_255 $$ return true[ CD ]
Line_153 $$ if (myCheckBox != null) -->Line_161 $$ myCheckBox.setFocusable(false)[ CD ]
Line_268 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) -->Line_271 $$ updateDocumentation()[ CD ]
Line_53 $$ for (Object object : objects) -->Line_56 $$ if (object instanceof DataProvider) [ FD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_227 $$ myTextField.addActionListener(new ActionListener() -->Line_231 $$ doClose(true)[ CD ]
Line_243 $$ if (clickCount == 2) -->Line_244 $$ int selectedIndex = myList.getSelectedIndex()[ CD ]
Line_181 $$ if (!myListScrollPane.isVisible()) -->Line_182 $$ return[ CD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_177 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_11 $$ JPanel caption2Tools = new JPanel(new BorderLayout())-->Line_20 $$ caption2Tools.add(hBox, BorderLayout.EAST)[ FD ]
Line_45 $$ group.add(new ShowFindUsagesAction() -->Line_50 $$ final List<PsiElement> prefixMatchElements = new ArrayList<PsiElement>(objects.length)[ CD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_158 $$ rebuildList(false)[ CD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_120 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())[ FD ]
Line_187 $$ if (upShortcuts.contains(stroke)) -->Line_189 $$ if (downShortcuts.contains(stroke)) [ CD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_222 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_188 $$ keyCode = KeyEvent.VK_UP-->Line_190 $$ keyCode = KeyEvent.VK_DOWN[ FD ]
Line_36 $$ JPanel searching = new JPanel(new BorderLayout(5, 0))-->Line_38 $$ searching.add(new HintLabel(IdeBundle.message("label.choosebyname.searching")), BorderLayout.CENTER)[ FD ]
Line_89 $$ if (chosenElement instanceof PsiElement) -->Line_90 $$ CopyReferenceAction.doCopy((PsiElement) chosenElement, myProject)[ CD ]
Line_12 $$ if (myModel.getPromptText() != null) -->Line_14 $$ if (UIUtil.isUnderAquaLookAndFeel()) [ CD ]
Line_268 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) -->Line_270 $$ chosenElementMightChange()[ CD ]
Line_12 $$ if (myModel.getPromptText() != null) -->Line_18 $$ caption2Tools.add(label, BorderLayout.WEST)[ CD ]
Line_52 $$ List<PsiElement> curElements = prefixMatchElements-->Line_59 $$ curElements.add(psi)[ FD ]
Line_243 $$ if (clickCount == 2) -->Line_245 $$ Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex)[ CD ]
Line_84 $$ if (myTextField.getSelectedText() != null) -->Line_86 $$ return[ CD ]
Line_99 $$ if (myCheckBox != null && myCheckBoxShortcut != null) -->Line_100 $$ new DumbAwareAction("change goto check box", null, null) [ CD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_199 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_13 $$ JLabel label = new JLabel(myModel.getPromptText())-->Line_15 $$ label.setBorder(new CompoundBorder(new EmptyBorder(0, 9, 0, 0), label.getBorder()))[ FD ]
Line_11 $$ JPanel caption2Tools = new JPanel(new BorderLayout())-->Line_77 $$ myTextFieldPanel.add(caption2Tools)[ FD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_177 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_41 $$ if (isCheckboxVisible()) -->Line_42 $$ hBox.add(myCardContainer)[ CD ]
Line_88 $$ final Object chosenElement = getChosenElement()-->Line_89 $$ if (chosenElement instanceof PsiElement) [ FD ]
Line_120 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())-->Line_122 $$ popup.addListener(new JBPopupListener.Adapter() [ FD ]
Line_116 $$ myHideAlarm.addRequest(new Runnable() -->Line_120 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())[ CD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_132 $$ Component oppositeComponent = e.getOppositeComponent()[ FD ]
Line_11 $$ JPanel caption2Tools = new JPanel(new BorderLayout())-->Line_18 $$ caption2Tools.add(label, BorderLayout.WEST)[ FD ]
Line_57 $$ final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider) object)-->Line_59 $$ curElements.add(psi)[ FD ]
Line_236 $$ new ClickListener() -->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_184 $$ final int keyCode-->Line_190 $$ keyCode = KeyEvent.VK_DOWN[ FD ]
Line_84 $$ if (myTextField.getSelectedText() != null) -->Line_85 $$ actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e)[ CD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_222 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_54 $$ if (object instanceof PsiElement) -->Line_56 $$ if (object instanceof DataProvider) [ CD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_104 $$ myCheckBox.setSelected(!myCheckBox.isSelected())[ CD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_268 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) -->Line_269 $$ myPreviousSelectionIndex = myList.getSelectedIndex()[ CD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_177 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_126 $$ if (event.isOk()) -->Line_127 $$ hideHint()[ CD ]
Line_122 $$ popup.addListener(new JBPopupListener.Adapter() -->Line_126 $$ if (event.isOk()) [ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_84 $$ if (myTextField.getSelectedText() != null) [ CD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_9 $$ final JPanel hBox = new JPanel()-->Line_20 $$ caption2Tools.add(hBox, BorderLayout.EAST)[ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_244 $$ int selectedIndex = myList.getSelectedIndex()-->Line_250 $$ rebuildList(selectedIndex, myRebuildDelay, ModalityState.current(), null)[ FD ]
Line_240 $$ if (!myTextField.hasFocus()) -->Line_241 $$ IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true)[ CD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_187 $$ if (upShortcuts.contains(stroke)) [ CD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_199 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_121 $$ if (popup != null) -->Line_122 $$ popup.addListener(new JBPopupListener.Adapter() [ CD ]
Line_56 $$ if (object instanceof DataProvider) -->Line_57 $$ final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider) object)[ CD ]
Line_44 $$ final DefaultActionGroup group = new DefaultActionGroup()-->Line_68 $$ final ActionToolbar actionToolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.UNKNOWN, group, true)[ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_85 $$ actionMap.getParent().get(DefaultEditorKit.copyAction).actionPerformed(e)[ FD ]
Line_177 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) -->Line_179 $$ close(true)[ CD ]
Line_14 $$ if (UIUtil.isUnderAquaLookAndFeel()) -->Line_15 $$ label.setBorder(new CompoundBorder(new EmptyBorder(0, 9, 0, 0), label.getBorder()))[ CD ]
Line_133 $$ if (oppositeComponent == myCheckBox) -->Line_134 $$ IdeFocusManager.getInstance(myProject).requestFocus(myTextField, true)[ CD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_222 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_120 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())-->Line_121 $$ if (popup != null) [ FD ]
Line_58 $$ if (psi != null) -->Line_59 $$ curElements.add(psi)[ CD ]
Line_282 $$ if (modalityState != null) -->Line_283 $$ rebuildList(myInitialIndex, 0, modalityState, null)[ CD ]
Line_36 $$ JPanel searching = new JPanel(new BorderLayout(5, 0))-->Line_37 $$ searching.add(new AsyncProcessIcon("searching"), BorderLayout.WEST)[ FD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_116 $$ myHideAlarm.addRequest(new Runnable() [ CD ]
Line_30 $$ if (checkBoxName == null) -->Line_31 $$ myCheckBox.setVisible(false)[ CD ]
Line_243 $$ if (clickCount == 2) -->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ CD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_214 $$ e.consume()[ FD ]
Line_9 $$ final JPanel hBox = new JPanel()-->Line_75 $$ hBox.add(myToolArea)[ FD ]
Line_262 $$ myList.addListSelectionListener(new ListSelectionListener() -->Line_268 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) [ CD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_184 $$ final int keyCode-->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_44 $$ final DefaultActionGroup group = new DefaultActionGroup()-->Line_45 $$ group.add(new ShowFindUsagesAction() [ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_220 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_56 $$ if (object instanceof DataProvider) -->Line_61 $$ if (object == NON_PREFIX_SEPARATOR) [ CD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_236 $$ new ClickListener() -->Line_257 $$ return false[ CD ]
Line_184 $$ final int keyCode-->Line_188 $$ keyCode = KeyEvent.VK_UP[ FD ]
Line_269 $$ myPreviousSelectionIndex = myList.getSelectedIndex()-->Line_273 $$ myList.setSelectedIndex(myPreviousSelectionIndex)[ FD ]
Line_13 $$ JLabel label = new JLabel(myModel.getPromptText())-->Line_18 $$ caption2Tools.add(label, BorderLayout.WEST)[ FD ]
Line_50 $$ final List<PsiElement> prefixMatchElements = new ArrayList<PsiElement>(objects.length)-->Line_65 $$ return new PsiElement[][] [ FD ]
Line_187 $$ if (upShortcuts.contains(stroke)) -->Line_188 $$ keyCode = KeyEvent.VK_UP[ CD ]
Line_189 $$ if (downShortcuts.contains(stroke)) -->Line_190 $$ keyCode = KeyEvent.VK_DOWN[ CD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_120 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())[ FD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_214 $$ e.consume()[ FD ]
Line_54 $$ if (object instanceof PsiElement) -->Line_55 $$ curElements.add((PsiElement) object)[ CD ]
Line_52 $$ List<PsiElement> curElements = prefixMatchElements-->Line_55 $$ curElements.add((PsiElement) object)[ FD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_272 $$ if (allowMultipleSelection) -->Line_273 $$ myList.setSelectedIndex(myPreviousSelectionIndex)[ CD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_214 $$ e.consume()[ FD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_236 $$ new ClickListener() -->Line_243 $$ if (clickCount == 2) [ FD ]
Line_121 $$ if (popup != null) -->Line_137 $$ if (oppositeComponent != null && !(oppositeComponent instanceof JFrame) && myList.isShowing() && (oppositeComponent == myList || SwingUtilities.isDescendingFrom(myList, oppositeComponent))) [ CD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_177 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_121 $$ if (popup != null) -->Line_133 $$ if (oppositeComponent == myCheckBox) [ CD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_167 $$ clearPostponedOkAction(false)[ CD ]
Line_13 $$ JLabel label = new JLabel(myModel.getPromptText())-->Line_17 $$ label.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD))[ FD ]
Line_236 $$ new ClickListener() -->Line_243 $$ if (clickCount == 2) [ CD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_45 $$ group.add(new ShowFindUsagesAction() -->Line_52 $$ List<PsiElement> curElements = prefixMatchElements[ CD ]
Line_23 $$ final String checkBoxName = myModel.getCheckBoxName()-->Line_98 $$ if (checkBoxName != null) [ FD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_177 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ CD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_98 $$ if (checkBoxName != null) -->Line_99 $$ if (myCheckBox != null && myCheckBoxShortcut != null) [ CD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_199 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_199 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_214 $$ e.consume()[ FD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_220 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_36 $$ JPanel searching = new JPanel(new BorderLayout(5, 0))-->Line_39 $$ addCard(searching, SEARCHING_CARD)[ FD ]
Line_45 $$ group.add(new ShowFindUsagesAction() -->Line_51 $$ final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length)[ CD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_220 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_222 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_56 $$ if (object instanceof DataProvider) -->Line_58 $$ if (psi != null) [ CD ]
Line_153 $$ if (myCheckBox != null) -->Line_154 $$ myCheckBox.addItemListener(new ItemListener() [ CD ]
Line_9 $$ final JPanel hBox = new JPanel()-->Line_42 $$ hBox.add(myCardContainer)[ FD ]
Line_23 $$ final String checkBoxName = myModel.getCheckBoxName()-->Line_30 $$ if (checkBoxName == null) [ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_88 $$ final Object chosenElement = getChosenElement()[ CD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_214 $$ e.consume()[ FD ]
Line_268 $$ if (myList.getSelectedValue() != NON_PREFIX_SEPARATOR) -->Line_272 $$ if (allowMultipleSelection) [ CD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_218 $$ if (myList.getSelectedValue() == NON_PREFIX_SEPARATOR) [ CD ]
Line_218 $$ if (myList.getSelectedValue() == NON_PREFIX_SEPARATOR) -->Line_219 $$ if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP) [ CD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_177 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_188 $$ keyCode = KeyEvent.VK_UP-->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_57 $$ final PsiElement psi = CommonDataKeys.PSI_ELEMENT.getData((DataProvider) object)-->Line_58 $$ if (psi != null) [ FD ]
Line_211 $$ if (myList.getSelectedValue() == EXTRA_ELEM) -->Line_213 $$ rebuildList(myList.getSelectedIndex(), myRebuildDelay, ModalityState.current(), null)[ CD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_220 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_110 $$ myTextField.addFocusListener(new FocusAdapter() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_214 $$ e.consume()[ FD ]
Line_109 $$ if (isCloseByFocusLost()) -->Line_110 $$ myTextField.addFocusListener(new FocusAdapter() [ CD ]
Line_100 $$ new DumbAwareAction("change goto check box", null, null) -->Line_199 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_211 $$ if (myList.getSelectedValue() == EXTRA_ELEM) -->Line_214 $$ e.consume()[ CD ]
Line_80 $$ actionMap.put(DefaultEditorKit.copyAction, new AbstractAction() -->Line_120 $$ JBPopup popup = JBPopupFactory.getInstance().getChildFocusedPopup(e.getComponent())[ FD ]
Line_189 $$ if (downShortcuts.contains(stroke)) -->Line_192 $$ keyCode = e.getKeyCode()[ CD ]
Line_245 $$ Rectangle selectedCellBounds = myList.getCellBounds(selectedIndex, selectedIndex)-->Line_246 $$ if (selectedCellBounds != null && selectedCellBounds.contains(e.getPoint())) [ FD ]
Line_26 $$ if (!SystemInfo.isMac) -->Line_27 $$ myCheckBox.setBorder(null)[ CD ]
Line_52 $$ List<PsiElement> curElements = prefixMatchElements-->Line_62 $$ curElements = nonPrefixMatchElements[ FD ]
Line_12 $$ if (myModel.getPromptText() != null) -->Line_13 $$ JLabel label = new JLabel(myModel.getPromptText())[ CD ]
Line_219 $$ if (keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_PAGE_UP) -->Line_220 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ CD ]
Line_45 $$ group.add(new ShowFindUsagesAction() -->Line_49 $$ final Object[] objects = myListModel.toArray()[ CD ]
Line_163 $$ myTextField.getDocument().addDocumentListener(new DocumentAdapter() -->Line_168 $$ rebuildList(false)[ CD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_177 $$ if (e.getKeyCode() == KeyEvent.VK_ENTER && (e.getModifiers() & InputEvent.SHIFT_MASK) != 0) [ FD ]
Line_12 $$ if (myModel.getPromptText() != null) -->Line_17 $$ label.setFont(UIUtil.getLabelFont().deriveFont(Font.BOLD))[ CD ]
Line_154 $$ myCheckBox.addItemListener(new ItemListener() -->Line_196 $$ ScrollingUtil.moveDown(myList, e.getModifiersEx())[ FD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_220 $$ ScrollingUtil.moveUp(myList, e.getModifiersEx())[ FD ]
Line_116 $$ myHideAlarm.addRequest(new Runnable() -->Line_121 $$ if (popup != null) [ CD ]
Line_121 $$ if (popup != null) -->Line_132 $$ Component oppositeComponent = e.getOppositeComponent()[ CD ]
Line_236 $$ new ClickListener() -->Line_240 $$ if (!myTextField.hasFocus()) [ CD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_192 $$ keyCode = e.getKeyCode()[ FD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_181 $$ if (!myListScrollPane.isVisible()) [ CD ]
Line_51 $$ final List<PsiElement> nonPrefixMatchElements = new ArrayList<PsiElement>(objects.length)-->Line_65 $$ return new PsiElement[][] [ FD ]
Line_173 $$ myTextField.addKeyListener(new KeyAdapter() -->Line_184 $$ final int keyCode[ CD ]
Line_45 $$ group.add(new ShowFindUsagesAction() -->Line_65 $$ return new PsiElement[][] [ CD ]
