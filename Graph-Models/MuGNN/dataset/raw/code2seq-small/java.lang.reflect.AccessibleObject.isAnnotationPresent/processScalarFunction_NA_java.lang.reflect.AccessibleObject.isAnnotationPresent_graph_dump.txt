Line_19 $$ List<Boolean> nullableArguments = getNullableArguments(method)-->Line_22 $$ scalar(signature.withAlias(alias.toLowerCase(ENGLISH)), methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_10 $$ String name = scalarFunction.value()-->Line_12 $$ name = camelToSnake(method.getName())[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_14 $$ SqlType returnTypeAnnotation = method.getAnnotation(SqlType.class)[ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_15 $$ checkArgument(returnTypeAnnotation != null, "Method %s return type does not have a @SqlType annotation", method)[ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_22 $$ scalar(signature.withAlias(alias.toLowerCase(ENGLISH)), methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_3 $$ ScalarFunction scalarFunction = method.getAnnotation(ScalarFunction.class)-->Line_22 $$ scalar(signature.withAlias(alias.toLowerCase(ENGLISH)), methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_19 $$ List<Boolean> nullableArguments = getNullableArguments(method)-->Line_20 $$ scalar(signature, methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_24 $$ return true[ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_8 $$ Optional<MethodHandle> instanceFactory = getInstanceFactory(method)[ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_18 $$ verifyMethodSignature(method, signature.getReturnType(), signature.getArgumentTypes(), typeManager)[ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_17 $$ Signature signature = new Signature(name.toLowerCase(ENGLISH), SCALAR, returnType.getTypeSignature(), Lists.transform(parameterTypes(typeManager, method), Type::<>getTypeSignature))[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_9 $$ MethodHandle methodHandle = lookup().unreflect(method)[ FD ]
Line_3 $$ ScalarFunction scalarFunction = method.getAnnotation(ScalarFunction.class)-->Line_21 $$ for (String alias : scalarFunction.alias()) [ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_12 $$ name = camelToSnake(method.getName())[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_19 $$ List<Boolean> nullableArguments = getNullableArguments(method)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_16 $$ Type returnType = type(typeManager, returnTypeAnnotation)[ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_11 $$ if (name.isEmpty()) [ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_18 $$ verifyMethodSignature(method, signature.getReturnType(), signature.getArgumentTypes(), typeManager)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_20 $$ scalar(signature, methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ CD ]
Line_11 $$ if (name.isEmpty()) -->Line_12 $$ name = camelToSnake(method.getName())[ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_9 $$ MethodHandle methodHandle = lookup().unreflect(method)[ CD ]
Line_3 $$ ScalarFunction scalarFunction = method.getAnnotation(ScalarFunction.class)-->Line_4 $$ if (scalarFunction == null) [ FD ]
Line_16 $$ Type returnType = type(typeManager, returnTypeAnnotation)-->Line_17 $$ Signature signature = new Signature(name.toLowerCase(ENGLISH), SCALAR, returnType.getTypeSignature(), Lists.transform(parameterTypes(typeManager, method), Type::<>getTypeSignature))[ FD ]
Line_17 $$ Signature signature = new Signature(name.toLowerCase(ENGLISH), SCALAR, returnType.getTypeSignature(), Lists.transform(parameterTypes(typeManager, method), Type::<>getTypeSignature))-->Line_20 $$ scalar(signature, methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_7 $$ checkValidMethod(method)[ CD ]
Line_3 $$ ScalarFunction scalarFunction = method.getAnnotation(ScalarFunction.class)-->Line_20 $$ scalar(signature, methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_3 $$ ScalarFunction scalarFunction = method.getAnnotation(ScalarFunction.class)[ CD ]
Line_10 $$ String name = scalarFunction.value()-->Line_17 $$ Signature signature = new Signature(name.toLowerCase(ENGLISH), SCALAR, returnType.getTypeSignature(), Lists.transform(parameterTypes(typeManager, method), Type::<>getTypeSignature))[ FD ]
Line_8 $$ Optional<MethodHandle> instanceFactory = getInstanceFactory(method)-->Line_22 $$ scalar(signature.withAlias(alias.toLowerCase(ENGLISH)), methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_4 $$ if (scalarFunction == null) [ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_8 $$ Optional<MethodHandle> instanceFactory = getInstanceFactory(method)[ FD ]
Line_9 $$ MethodHandle methodHandle = lookup().unreflect(method)-->Line_22 $$ scalar(signature.withAlias(alias.toLowerCase(ENGLISH)), methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_17 $$ Signature signature = new Signature(name.toLowerCase(ENGLISH), SCALAR, returnType.getTypeSignature(), Lists.transform(parameterTypes(typeManager, method), Type::<>getTypeSignature))[ CD ]
Line_12 $$ name = camelToSnake(method.getName())-->Line_17 $$ Signature signature = new Signature(name.toLowerCase(ENGLISH), SCALAR, returnType.getTypeSignature(), Lists.transform(parameterTypes(typeManager, method), Type::<>getTypeSignature))[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_20 $$ scalar(signature, methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_19 $$ List<Boolean> nullableArguments = getNullableArguments(method)[ CD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_10 $$ String name = scalarFunction.value()[ CD ]
Line_3 $$ ScalarFunction scalarFunction = method.getAnnotation(ScalarFunction.class)-->Line_10 $$ String name = scalarFunction.value()[ FD ]
Line_10 $$ String name = scalarFunction.value()-->Line_11 $$ if (name.isEmpty()) [ FD ]
Line_17 $$ Signature signature = new Signature(name.toLowerCase(ENGLISH), SCALAR, returnType.getTypeSignature(), Lists.transform(parameterTypes(typeManager, method), Type::<>getTypeSignature))-->Line_18 $$ verifyMethodSignature(method, signature.getReturnType(), signature.getArgumentTypes(), typeManager)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_7 $$ checkValidMethod(method)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_15 $$ checkArgument(returnTypeAnnotation != null, "Method %s return type does not have a @SqlType annotation", method)[ FD ]
Line_21 $$ for (String alias : scalarFunction.alias()) -->Line_22 $$ scalar(signature.withAlias(alias.toLowerCase(ENGLISH)), methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_3 $$ ScalarFunction scalarFunction = method.getAnnotation(ScalarFunction.class)[ FD ]
Line_17 $$ Signature signature = new Signature(name.toLowerCase(ENGLISH), SCALAR, returnType.getTypeSignature(), Lists.transform(parameterTypes(typeManager, method), Type::<>getTypeSignature))-->Line_22 $$ scalar(signature.withAlias(alias.toLowerCase(ENGLISH)), methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_4 $$ if (scalarFunction == null) -->Line_5 $$ return false[ CD ]
Line_9 $$ MethodHandle methodHandle = lookup().unreflect(method)-->Line_20 $$ scalar(signature, methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_8 $$ Optional<MethodHandle> instanceFactory = getInstanceFactory(method)-->Line_20 $$ scalar(signature, methodHandle, instanceFactory, scalarFunction.deterministic(), getDescription(method), scalarFunction.hidden(), method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarFunction(Method method) throws IllegalAccessException -->Line_14 $$ SqlType returnTypeAnnotation = method.getAnnotation(SqlType.class)[ FD ]
Line_14 $$ SqlType returnTypeAnnotation = method.getAnnotation(SqlType.class)-->Line_16 $$ Type returnType = type(typeManager, returnTypeAnnotation)[ FD ]
