Line_13 $$ if (operatorType == OperatorType.HASH_CODE) -->Line_14 $$ returnType = BIGINT[ CD ]
Line_9 $$ MethodHandle methodHandle = lookup().unreflect(method)-->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_16 $$ SqlType explicitType = method.getAnnotation(SqlType.class)-->Line_18 $$ returnType = type(typeManager, explicitType)[ FD ]
Line_3 $$ ScalarOperator scalarOperator = method.getAnnotation(ScalarOperator.class)-->Line_10 $$ OperatorType operatorType = scalarOperator.value()[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_17 $$ checkArgument(explicitType != null, "Method %s return type does not have a @SqlType annotation", method)[ FD ]
Line_8 $$ Optional<MethodHandle> instanceFactory = getInstanceFactory(method)-->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_3 $$ ScalarOperator scalarOperator = method.getAnnotation(ScalarOperator.class)-->Line_4 $$ if (scalarOperator == null) [ FD ]
Line_12 $$ Type returnType-->Line_18 $$ returnType = type(typeManager, explicitType)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_16 $$ SqlType explicitType = method.getAnnotation(SqlType.class)[ FD ]
Line_13 $$ if (operatorType == OperatorType.HASH_CODE) -->Line_18 $$ returnType = type(typeManager, explicitType)[ CD ]
Line_18 $$ returnType = type(typeManager, explicitType)-->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_19 $$ verifyMethodSignature(method, returnType.getTypeSignature(), Lists.transform(parameterTypes, Type::<>getTypeSignature), typeManager)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_23 $$ return true[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_10 $$ OperatorType operatorType = scalarOperator.value()[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_21 $$ List<Boolean> nullableArguments = getNullableArguments(method)[ FD ]
Line_12 $$ Type returnType-->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_12 $$ Type returnType-->Line_19 $$ verifyMethodSignature(method, returnType.getTypeSignature(), Lists.transform(parameterTypes, Type::<>getTypeSignature), typeManager)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_8 $$ Optional<MethodHandle> instanceFactory = getInstanceFactory(method)[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_7 $$ checkValidMethod(method)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_13 $$ if (operatorType == OperatorType.HASH_CODE) [ CD ]
Line_12 $$ Type returnType-->Line_14 $$ returnType = BIGINT[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_21 $$ List<Boolean> nullableArguments = getNullableArguments(method)[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_3 $$ ScalarOperator scalarOperator = method.getAnnotation(ScalarOperator.class)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_4 $$ if (scalarOperator == null) [ CD ]
Line_4 $$ if (scalarOperator == null) -->Line_5 $$ return false[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_12 $$ Type returnType[ CD ]
Line_21 $$ List<Boolean> nullableArguments = getNullableArguments(method)-->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_7 $$ checkValidMethod(method)[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_11 $$ List<Type> parameterTypes = parameterTypes(typeManager, method)[ FD ]
Line_13 $$ if (operatorType == OperatorType.HASH_CODE) -->Line_16 $$ SqlType explicitType = method.getAnnotation(SqlType.class)[ CD ]
Line_10 $$ OperatorType operatorType = scalarOperator.value()-->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_14 $$ returnType = BIGINT-->Line_19 $$ verifyMethodSignature(method, returnType.getTypeSignature(), Lists.transform(parameterTypes, Type::<>getTypeSignature), typeManager)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_3 $$ ScalarOperator scalarOperator = method.getAnnotation(ScalarOperator.class)[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_11 $$ List<Type> parameterTypes = parameterTypes(typeManager, method)[ CD ]
Line_13 $$ if (operatorType == OperatorType.HASH_CODE) -->Line_17 $$ checkArgument(explicitType != null, "Method %s return type does not have a @SqlType annotation", method)[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_9 $$ MethodHandle methodHandle = lookup().unreflect(method)[ CD ]
Line_10 $$ OperatorType operatorType = scalarOperator.value()-->Line_13 $$ if (operatorType == OperatorType.HASH_CODE) [ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_9 $$ MethodHandle methodHandle = lookup().unreflect(method)[ FD ]
Line_18 $$ returnType = type(typeManager, explicitType)-->Line_19 $$ verifyMethodSignature(method, returnType.getTypeSignature(), Lists.transform(parameterTypes, Type::<>getTypeSignature), typeManager)[ FD ]
Line_11 $$ List<Type> parameterTypes = parameterTypes(typeManager, method)-->Line_19 $$ verifyMethodSignature(method, returnType.getTypeSignature(), Lists.transform(parameterTypes, Type::<>getTypeSignature), typeManager)[ FD ]
Line_11 $$ List<Type> parameterTypes = parameterTypes(typeManager, method)-->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_14 $$ returnType = BIGINT-->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ FD ]
Line_13 $$ if (operatorType == OperatorType.HASH_CODE) -->Line_19 $$ verifyMethodSignature(method, returnType.getTypeSignature(), Lists.transform(parameterTypes, Type::<>getTypeSignature), typeManager)[ CD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_22 $$ operator(operatorType, returnType, parameterTypes, methodHandle, instanceFactory, method.isAnnotationPresent(Nullable.class), nullableArguments)[ CD ]
Line_14 $$ returnType = BIGINT-->Line_18 $$ returnType = type(typeManager, explicitType)[ FD ]
Line_2 $$ private boolean processScalarOperator(Method method) throws IllegalAccessException -->Line_8 $$ Optional<MethodHandle> instanceFactory = getInstanceFactory(method)[ FD ]
