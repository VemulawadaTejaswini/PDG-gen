Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_7 $$ int i = 0[ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_5 $$ assertListLength()[ CD ]
Line_10 $$ int stored = i < size ? old[i] : Integer.MAX_VALUE-->Line_13 $$ mergedBytes.putInt(stored)[ FD ]
Line_10 $$ int stored = i < size ? old[i] : Integer.MAX_VALUE-->Line_12 $$ if (stored < value) [ FD ]
Line_9 $$ while (i < size || j < values.length) -->Line_12 $$ if (stored < value) [ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_28 $$ int newSize = mergedInts.length[ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)[ CD ]
Line_7 $$ int i = 0-->Line_21 $$ i++[ FD ]
Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)-->Line_25 $$ mergedBytes.position(0)[ FD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_25 $$ mergedBytes.position(0)[ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_38 $$ return null[ CD ]
Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)-->Line_13 $$ mergedBytes.putInt(stored)[ FD ]
Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)-->Line_16 $$ mergedBytes.putInt(value)[ FD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_35 $$ writeInt(data, base, newSize)[ CD ]
Line_15 $$ if (stored > value) -->Line_17 $$ j++[ CD ]
Line_29 $$ if (newSize > capacity) -->Line_32 $$ return realloc[ CD ]
Line_26 $$ int[] mergedInts = fromBytes(mergedBytes)-->Line_27 $$ assertSorted(mergedInts)[ FD ]
Line_11 $$ int value = j < values.length ? values[j] : Integer.MAX_VALUE-->Line_15 $$ if (stored > value) [ FD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_24 $$ mergedBytes.limit(mergedBytes.position())[ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_26 $$ int[] mergedInts = fromBytes(mergedBytes)[ CD ]
Line_29 $$ if (newSize > capacity) -->Line_30 $$ IntArray realloc = reallocWith(mergedBytes, newSize)[ CD ]
Line_12 $$ if (stored < value) -->Line_13 $$ mergedBytes.putInt(stored)[ CD ]
Line_11 $$ int value = j < values.length ? values[j] : Integer.MAX_VALUE-->Line_19 $$ mergedBytes.putInt(value)[ FD ]
Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)-->Line_19 $$ mergedBytes.putInt(value)[ FD ]
Line_15 $$ if (stored > value) -->Line_19 $$ mergedBytes.putInt(value)[ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_3 $$ int[] old = toArray()[ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_27 $$ assertSorted(mergedInts)[ CD ]
Line_3 $$ int[] old = toArray()-->Line_4 $$ assertSorted(old)[ FD ]
Line_28 $$ int newSize = mergedInts.length-->Line_35 $$ writeInt(data, base, newSize)[ FD ]
Line_10 $$ int stored = i < size ? old[i] : Integer.MAX_VALUE-->Line_15 $$ if (stored > value) [ FD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_8 $$ int j = 0[ CD ]
Line_9 $$ while (i < size || j < values.length) -->Line_11 $$ int value = j < values.length ? values[j] : Integer.MAX_VALUE[ CD ]
Line_12 $$ if (stored < value) -->Line_15 $$ if (stored > value) [ CD ]
Line_28 $$ int newSize = mergedInts.length-->Line_30 $$ IntArray realloc = reallocWith(mergedBytes, newSize)[ FD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_34 $$ data.write(mergedBytes, base + 8)[ CD ]
Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)-->Line_34 $$ data.write(mergedBytes, base + 8)[ FD ]
Line_15 $$ if (stored > value) -->Line_16 $$ mergedBytes.putInt(value)[ CD ]
Line_15 $$ if (stored > value) -->Line_20 $$ j++[ CD ]
Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)-->Line_30 $$ IntArray realloc = reallocWith(mergedBytes, newSize)[ FD ]
Line_12 $$ if (stored < value) -->Line_14 $$ i++[ CD ]
Line_28 $$ int newSize = mergedInts.length-->Line_29 $$ if (newSize > capacity) [ FD ]
Line_11 $$ int value = j < values.length ? values[j] : Integer.MAX_VALUE-->Line_12 $$ if (stored < value) [ FD ]
Line_11 $$ int value = j < values.length ? values[j] : Integer.MAX_VALUE-->Line_16 $$ mergedBytes.putInt(value)[ FD ]
Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)-->Line_26 $$ int[] mergedInts = fromBytes(mergedBytes)[ FD ]
Line_6 $$ ByteBuffer mergedBytes = ByteBuffer.allocateDirect(size * 4 + values.length * 4)-->Line_24 $$ mergedBytes.limit(mergedBytes.position())[ FD ]
Line_7 $$ int i = 0-->Line_14 $$ i++[ FD ]
Line_8 $$ int j = 0-->Line_17 $$ j++[ FD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_9 $$ while (i < size || j < values.length) [ CD ]
Line_9 $$ while (i < size || j < values.length) -->Line_10 $$ int stored = i < size ? old[i] : Integer.MAX_VALUE[ CD ]
Line_15 $$ if (stored > value) -->Line_21 $$ i++[ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_37 $$ assertListLength()[ CD ]
Line_8 $$ int j = 0-->Line_20 $$ j++[ FD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_29 $$ if (newSize > capacity) [ CD ]
Line_2 $$ public IntArray addAll(int[] values) throws IOException -->Line_4 $$ assertSorted(old)[ CD ]
