Line_2 $$ public void testMappedFile() throws IOException -->Line_14 $$ dest.put(garbage)[ CD ]
Line_23 $$ ByteBuffer result = makeBB(data.length + 100)-->Line_28 $$ Assert.assertEquals(data.length, result.limit())[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_18 $$ int compressedLength = dest.position() - outOffset[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_6 $$ src.put(data)[ CD ]
Line_13 $$ ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length))-->Line_16 $$ dest.position(outOffset)[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_22 $$ MappedByteBuffer mappedData = Files.map(temp)[ CD ]
Line_23 $$ ByteBuffer result = makeBB(data.length + 100)-->Line_30 $$ Assert.assertEquals("Decompression mismatch at byte " + i, data[i], result.get())[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_10 $$ final int outOffset = 3[ CD ]
Line_8 $$ File temp = File.createTempFile("tempfile", ".tmp")-->Line_19 $$ FileChannel channel = FileChannel.open(temp.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)[ FD ]
Line_13 $$ ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length))-->Line_15 $$ dest.clear()[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_4 $$ new Random().nextBytes(data)[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_13 $$ ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length))[ CD ]
Line_8 $$ File temp = File.createTempFile("tempfile", ".tmp")-->Line_9 $$ temp.deleteOnExit()[ FD ]
Line_19 $$ FileChannel channel = FileChannel.open(temp.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)-->Line_26 $$ channel.close()[ FD ]
Line_29 $$ for (int i = 0; i < result.limit(); i++) -->Line_30 $$ Assert.assertEquals("Decompression mismatch at byte " + i, data[i], result.get())[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_3 $$ byte[] data = new byte[1 << 20][ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_28 $$ Assert.assertEquals(data.length, result.limit())[ CD ]
Line_3 $$ byte[] data = new byte[1 << 20]-->Line_4 $$ new Random().nextBytes(data)[ FD ]
Line_22 $$ MappedByteBuffer mappedData = Files.map(temp)-->Line_25 $$ compressor.uncompress(mappedData, result)[ FD ]
Line_22 $$ MappedByteBuffer mappedData = Files.map(temp)-->Line_24 $$ mappedData.position(outOffset).limit(outOffset + compressedLength)[ FD ]
Line_23 $$ ByteBuffer result = makeBB(data.length + 100)-->Line_27 $$ result.flip()[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_17 $$ compressor.compress(src, dest)[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_29 $$ for (int i = 0; i < result.limit(); i++) [ CD ]
Line_10 $$ final int outOffset = 3-->Line_16 $$ dest.position(outOffset)[ FD ]
Line_3 $$ byte[] data = new byte[1 << 20]-->Line_6 $$ src.put(data)[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_20 $$ dest.clear()[ CD ]
Line_13 $$ ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length))-->Line_17 $$ compressor.compress(src, dest)[ FD ]
Line_23 $$ ByteBuffer result = makeBB(data.length + 100)-->Line_25 $$ compressor.uncompress(mappedData, result)[ FD ]
Line_19 $$ FileChannel channel = FileChannel.open(temp.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)-->Line_21 $$ channel.write(dest)[ FD ]
Line_11 $$ byte[] garbage = new byte[outOffset + compressor.initialCompressedBufferLength(data.length)]-->Line_14 $$ dest.put(garbage)[ FD ]
Line_5 $$ ByteBuffer src = makeBB(data.length)-->Line_6 $$ src.put(data)[ FD ]
Line_13 $$ ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length))-->Line_20 $$ dest.clear()[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_16 $$ dest.position(outOffset)[ CD ]
Line_10 $$ final int outOffset = 3-->Line_24 $$ mappedData.position(outOffset).limit(outOffset + compressedLength)[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_8 $$ File temp = File.createTempFile("tempfile", ".tmp")[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_5 $$ ByteBuffer src = makeBB(data.length)[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_25 $$ compressor.uncompress(mappedData, result)[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_26 $$ channel.close()[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_23 $$ ByteBuffer result = makeBB(data.length + 100)[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_19 $$ FileChannel channel = FileChannel.open(temp.toPath(), StandardOpenOption.READ, StandardOpenOption.WRITE)[ CD ]
Line_8 $$ File temp = File.createTempFile("tempfile", ".tmp")-->Line_22 $$ MappedByteBuffer mappedData = Files.map(temp)[ FD ]
Line_5 $$ ByteBuffer src = makeBB(data.length)-->Line_7 $$ src.flip()[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_11 $$ byte[] garbage = new byte[outOffset + compressor.initialCompressedBufferLength(data.length)][ CD ]
Line_13 $$ ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length))-->Line_14 $$ dest.put(garbage)[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_7 $$ src.flip()[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_21 $$ channel.write(dest)[ CD ]
Line_23 $$ ByteBuffer result = makeBB(data.length + 100)-->Line_29 $$ for (int i = 0; i < result.limit(); i++) [ FD ]
Line_5 $$ ByteBuffer src = makeBB(data.length)-->Line_17 $$ compressor.compress(src, dest)[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_24 $$ mappedData.position(outOffset).limit(outOffset + compressedLength)[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_12 $$ new Random().nextBytes(garbage)[ CD ]
Line_11 $$ byte[] garbage = new byte[outOffset + compressor.initialCompressedBufferLength(data.length)]-->Line_12 $$ new Random().nextBytes(garbage)[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_27 $$ result.flip()[ CD ]
Line_13 $$ ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length))-->Line_18 $$ int compressedLength = dest.position() - outOffset[ FD ]
Line_13 $$ ByteBuffer dest = makeBB(outOffset + compressor.initialCompressedBufferLength(data.length))-->Line_21 $$ channel.write(dest)[ FD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_9 $$ temp.deleteOnExit()[ CD ]
Line_2 $$ public void testMappedFile() throws IOException -->Line_15 $$ dest.clear()[ CD ]
