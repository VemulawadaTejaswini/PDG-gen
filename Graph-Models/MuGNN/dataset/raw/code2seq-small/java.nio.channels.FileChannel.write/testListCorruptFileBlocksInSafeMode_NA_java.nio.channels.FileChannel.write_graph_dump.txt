Line_23 $$ FileSystem fs = cluster.getFileSystem()-->Line_26 $$ util.createFiles(fs, "/srcdat10")[ FD ]
Line_23 $$ FileSystem fs = cluster.getFileSystem()-->Line_85 $$ util.cleanup(fs, "/srcdat10")[ FD ]
Line_34 $$ List<File> metaFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)-->Line_36 $$ File metaFile = metaFiles.get(0)[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_91 $$ cluster.shutdown()[ FD ]
Line_34 $$ List<File> metaFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)-->Line_35 $$ assertTrue("Data directory does not contain any blocks or there was an " + "IO error", metaFiles != null && !metaFiles.isEmpty())[ FD ]
Line_38 $$ FileChannel channel = file.getChannel()-->Line_39 $$ long position = channel.size() - 2[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_90 $$ if (cluster != null) [ FD ]
Line_23 $$ FileSystem fs = cluster.getFileSystem()-->Line_71 $$ util.checkFiles(fs, "/srcdat10")[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_22 $$ cluster.getNameNodeRpc().setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE, false)[ FD ]
Line_60 $$ fs = cluster.getFileSystem()-->Line_85 $$ util.cleanup(fs, "/srcdat10")[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_23 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_37 $$ RandomAccessFile file = new RandomAccessFile(metaFile, "rw")-->Line_38 $$ FileChannel channel = file.getChannel()[ FD ]
Line_39 $$ long position = channel.size() - 2-->Line_43 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_23 $$ FileSystem fs = cluster.getFileSystem()-->Line_48 $$ util.checkFiles(fs, "/srcdat10")[ FD ]
Line_32 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())-->Line_33 $$ assertTrue("data directory does not exist", data_dir.exists())[ FD ]
Line_8 $$ Random random = new Random()-->Line_42 $$ random.nextBytes(buffer)[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_32 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_32 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()[ FD ]
Line_37 $$ RandomAccessFile file = new RandomAccessFile(metaFile, "rw")-->Line_44 $$ file.close()[ FD ]
Line_90 $$ if (cluster != null) -->Line_91 $$ cluster.shutdown()[ CD ]
Line_41 $$ byte[] buffer = new byte[length]-->Line_43 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_38 $$ FileChannel channel = file.getChannel()-->Line_43 $$ channel.write(ByteBuffer.wrap(buffer), position)[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_60 $$ fs = cluster.getFileSystem()[ FD ]
Line_23 $$ FileSystem fs = cluster.getFileSystem()-->Line_60 $$ fs = cluster.getFileSystem()[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_23 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_32 $$ File data_dir = MiniDFSCluster.getFinalizedDir(storageDir, cluster.getNamesystem().getBlockPoolId())-->Line_34 $$ List<File> metaFiles = MiniDFSCluster.getAllBlockMetadataFiles(data_dir)[ FD ]
Line_60 $$ fs = cluster.getFileSystem()-->Line_71 $$ util.checkFiles(fs, "/srcdat10")[ FD ]
Line_41 $$ byte[] buffer = new byte[length]-->Line_42 $$ random.nextBytes(buffer)[ FD ]
Line_36 $$ File metaFile = metaFiles.get(0)-->Line_45 $$ LOG.info("Deliberately corrupting file " + metaFile.getName() + " at offset " + position + " length " + length)[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_90 $$ if (cluster != null) [ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_60 $$ fs = cluster.getFileSystem()[ FD ]
Line_7 $$ MiniDFSCluster cluster = null-->Line_22 $$ cluster.getNameNodeRpc().setSafeMode(HdfsConstants.SafeModeAction.SAFEMODE_LEAVE, false)[ FD ]
Line_21 $$ cluster = new MiniDFSCluster.Builder(conf).waitSafeMode(false).build()-->Line_91 $$ cluster.shutdown()[ FD ]
