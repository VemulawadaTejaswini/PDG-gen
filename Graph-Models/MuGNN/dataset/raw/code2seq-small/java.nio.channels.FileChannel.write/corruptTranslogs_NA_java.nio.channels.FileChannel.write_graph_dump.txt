Line_10 $$ ByteBuffer junk = ByteBuffer.wrap(new byte[] -->Line_11 $$ f.write(junk, pos)[ FD ]
Line_6 $$ FileChannel f = FileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE)-->Line_13 $$ f.close()[ FD ]
Line_6 $$ FileChannel f = FileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE)-->Line_9 $$ long pos = randomIntBetween(0, (int) f.size())[ FD ]
Line_8 $$ for (int i = 0; i < corruptions; i++) -->Line_9 $$ long pos = randomIntBetween(0, (int) f.size())[ CD ]
Line_2 $$ private void corruptTranslogs(Path directory) throws Exception -->Line_3 $$ Path[] files = FileSystemUtils.files(directory, "translog-*")[ FD ]
Line_4 $$ for (Path file : files) -->Line_6 $$ FileChannel f = FileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE)[ FD ]
Line_9 $$ long pos = randomIntBetween(0, (int) f.size())-->Line_11 $$ f.write(junk, pos)[ FD ]
Line_2 $$ private void corruptTranslogs(Path directory) throws Exception -->Line_3 $$ Path[] files = FileSystemUtils.files(directory, "translog-*")[ CD ]
Line_8 $$ for (int i = 0; i < corruptions; i++) -->Line_10 $$ ByteBuffer junk = ByteBuffer.wrap(new byte[] [ CD ]
Line_7 $$ int corruptions = scaledRandomIntBetween(10, 50)-->Line_8 $$ for (int i = 0; i < corruptions; i++) [ FD ]
Line_8 $$ for (int i = 0; i < corruptions; i++) -->Line_11 $$ f.write(junk, pos)[ CD ]
Line_6 $$ FileChannel f = FileChannel.open(file, StandardOpenOption.READ, StandardOpenOption.WRITE)-->Line_11 $$ f.write(junk, pos)[ FD ]
