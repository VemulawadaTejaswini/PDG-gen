Line_5 $$ final StringTokenizer st = new StringTokenizer(string.substring(returnIdx + 1), ",")-->Line_8 $$ result[i] = Boolean.parseBoolean(st.nextToken())[ FD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_5 $$ final StringTokenizer st = new StringTokenizer(string.substring(returnIdx + 1), ",")[ CD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_7 $$ for (int i = 0; i < result.length; i++) [ CD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_3 $$ final int returnIdx = string.indexOf(':')[ CD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_4 $$ boolean returnFlag = returnIdx != -1 && Boolean.parseBoolean(string.substring(0, returnIdx))[ FD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_4 $$ boolean returnFlag = returnIdx != -1 && Boolean.parseBoolean(string.substring(0, returnIdx))[ CD ]
Line_4 $$ boolean returnFlag = returnIdx != -1 && Boolean.parseBoolean(string.substring(0, returnIdx))-->Line_10 $$ return Pair.create(result, returnFlag)[ FD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_10 $$ return Pair.create(result, returnFlag)[ CD ]
Line_7 $$ for (int i = 0; i < result.length; i++) -->Line_8 $$ result[i] = Boolean.parseBoolean(st.nextToken())[ CD ]
Line_3 $$ final int returnIdx = string.indexOf(':')-->Line_4 $$ boolean returnFlag = returnIdx != -1 && Boolean.parseBoolean(string.substring(0, returnIdx))[ FD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_5 $$ final StringTokenizer st = new StringTokenizer(string.substring(returnIdx + 1), ",")[ FD ]
Line_5 $$ final StringTokenizer st = new StringTokenizer(string.substring(returnIdx + 1), ",")-->Line_6 $$ final boolean[] result = new boolean[st.countTokens()][ FD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_6 $$ final boolean[] result = new boolean[st.countTokens()][ CD ]
Line_2 $$ private static Pair<boolean[], Boolean> parseFlags(final String string) -->Line_3 $$ final int returnIdx = string.indexOf(':')[ FD ]
Line_6 $$ final boolean[] result = new boolean[st.countTokens()]-->Line_10 $$ return Pair.create(result, returnFlag)[ FD ]
