Line_10 $$ PsiClass inner = aClass.findInnerClassByName(name, true)-->Line_11 $$ if (inner != null)[ FD ]
Line_15 $$ if (method.getName().equals(name))-->Line_16 $$ return method[ CD ]
Line_49 $$ PsiParameter parm = parms[k]-->Line_50 $$ final PsiType parmType = parm.getType()[ FD ]
Line_5 $$ if (parenthIndex < 0) -->Line_28 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory()[ CD ]
Line_57 $$ int parameterNumber = Integer.parseInt(memberRefText.substring(hashIndex + 1))-->Line_58 $$ if (parameterNumber < parms.length)[ FD ]
Line_21 $$ int rparenIndex = memberRefText.lastIndexOf(')')-->Line_22 $$ if (rparenIndex == -1)[ FD ]
Line_55 $$ int hashIndex = memberRefText.indexOf('#', rparenIndex)-->Line_56 $$ if (hashIndex != -1) [ FD ]
Line_33 $$ String typeText = parmText-->Line_37 $$ PsiType type = factory.createTypeFromText(typeText, context)[ FD ]
Line_48 $$ for (int k = 0; k < parms.length; k++) -->Line_50 $$ final PsiType parmType = parm.getType()[ CD ]
Line_11 $$ if (inner != null)-->Line_12 $$ return inner[ CD ]
Line_56 $$ if (hashIndex != -1) -->Line_58 $$ if (parameterNumber < parms.length)[ CD ]
Line_22 $$ if (rparenIndex == -1)-->Line_23 $$ return null[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_29 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_43 $$ PsiMethod[] methods = aClass.findMethodsByName(name, true)[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_18 $$ return null[ CD ]
Line_14 $$ for (PsiMethod method : methods) -->Line_15 $$ if (method.getName().equals(name))[ FD ]
Line_48 $$ for (int k = 0; k < parms.length; k++) -->Line_49 $$ PsiParameter parm = parms[k][ CD ]
Line_14 $$ for (PsiMethod method : methods) -->Line_59 $$ return method.getParameterList().getParameters()[parameterNumber][ FD ]
Line_28 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory()-->Line_37 $$ PsiType type = factory.createTypeFromText(typeText, context)[ FD ]
Line_5 $$ if (parenthIndex < 0) -->Line_8 $$ if (field != null)[ CD ]
Line_32 $$ Matcher typeMatcher = ourTypePattern.matcher(parmText)-->Line_35 $$ typeText = parmText.substring(0, typeMatcher.start())[ FD ]
Line_5 $$ if (parenthIndex < 0) -->Line_7 $$ PsiField field = aClass.findFieldByName(name, true)[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_22 $$ if (rparenIndex == -1)[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_20 $$ String name = memberRefText.substring(0, parenthIndex).trim()[ CD ]
Line_8 $$ if (field != null)-->Line_9 $$ return field[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_25 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")[ CD ]
Line_25 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")-->Line_30 $$ String parmText = tokenizer.nextToken().trim()[ FD ]
Line_48 $$ for (int k = 0; k < parms.length; k++) -->Line_51 $$ if (types[k] != null && !TypeConversionUtil.erasure(parmType).getCanonicalText().equals(types[k].getCanonicalText()) && !parmType.getCanonicalText().equals(types[k].getCanonicalText()) && !TypeConversionUtil.isAssignable(parmType, types[k])) [ CD ]
Line_7 $$ PsiField field = aClass.findFieldByName(name, true)-->Line_8 $$ if (field != null)[ FD ]
Line_6 $$ String name = memberRefText-->Line_15 $$ if (method.getName().equals(name))[ FD ]
Line_21 $$ int rparenIndex = memberRefText.lastIndexOf(')')-->Line_24 $$ String parmsText = memberRefText.substring(parenthIndex + 1, rparenIndex).trim()[ FD ]
Line_50 $$ final PsiType parmType = parm.getType()-->Line_51 $$ if (types[k] != null && !TypeConversionUtil.erasure(parmType).getCanonicalText().equals(types[k].getCanonicalText()) && !parmType.getCanonicalText().equals(types[k].getCanonicalText()) && !TypeConversionUtil.isAssignable(parmType, types[k])) [ FD ]
Line_30 $$ String parmText = tokenizer.nextToken().trim()-->Line_35 $$ typeText = parmText.substring(0, typeMatcher.start())[ FD ]
Line_32 $$ Matcher typeMatcher = ourTypePattern.matcher(parmText)-->Line_34 $$ if (typeMatcher.find()) [ FD ]
Line_21 $$ int rparenIndex = memberRefText.lastIndexOf(')')-->Line_55 $$ int hashIndex = memberRefText.indexOf('#', rparenIndex)[ FD ]
Line_27 $$ int i = 0-->Line_38 $$ types[i++] = type[ FD ]
Line_35 $$ typeText = parmText.substring(0, typeMatcher.start())-->Line_37 $$ PsiType type = factory.createTypeFromText(typeText, context)[ FD ]
Line_33 $$ String typeText = parmText-->Line_35 $$ typeText = parmText.substring(0, typeMatcher.start())[ FD ]
Line_5 $$ if (parenthIndex < 0) -->Line_6 $$ String name = memberRefText[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_27 $$ int i = 0[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_11 $$ if (inner != null)[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_26 $$ PsiType[] types = PsiType.createArray(tokenizer.countTokens())[ CD ]
Line_25 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")-->Line_26 $$ PsiType[] types = PsiType.createArray(tokenizer.countTokens())[ FD ]
Line_56 $$ if (hashIndex != -1) -->Line_57 $$ int parameterNumber = Integer.parseInt(memberRefText.substring(hashIndex + 1))[ CD ]
Line_29 $$ while (tokenizer.hasMoreTokens()) -->Line_30 $$ String parmText = tokenizer.nextToken().trim()[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_24 $$ String parmsText = memberRefText.substring(parenthIndex + 1, rparenIndex).trim()[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_13 $$ PsiMethod[] methods = aClass.getAllMethods()[ CD ]
Line_25 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")-->Line_29 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_6 $$ String name = memberRefText-->Line_7 $$ PsiField field = aClass.findFieldByName(name, true)[ FD ]
Line_6 $$ String name = memberRefText-->Line_10 $$ PsiClass inner = aClass.findInnerClassByName(name, true)[ FD ]
Line_5 $$ if (parenthIndex < 0) -->Line_21 $$ int rparenIndex = memberRefText.lastIndexOf(')')[ CD ]
Line_30 $$ String parmText = tokenizer.nextToken().trim()-->Line_32 $$ Matcher typeMatcher = ourTypePattern.matcher(parmText)[ FD ]
Line_37 $$ PsiType type = factory.createTypeFromText(typeText, context)-->Line_38 $$ types[i++] = type[ FD ]
Line_6 $$ String name = memberRefText-->Line_43 $$ PsiMethod[] methods = aClass.findMethodsByName(name, true)[ FD ]
Line_24 $$ String parmsText = memberRefText.substring(parenthIndex + 1, rparenIndex).trim()-->Line_25 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")[ FD ]
Line_14 $$ for (PsiMethod method : methods) -->Line_45 $$ PsiParameter[] parms = method.getParameterList().getParameters()[ FD ]
Line_4 $$ int parenthIndex = memberRefText.indexOf('(')-->Line_5 $$ if (parenthIndex < 0) [ FD ]
Line_58 $$ if (parameterNumber < parms.length)-->Line_59 $$ return method.getParameterList().getParameters()[parameterNumber][ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_10 $$ PsiClass inner = aClass.findInnerClassByName(name, true)[ CD ]
Line_5 $$ if (parenthIndex < 0) -->Line_63 $$ return null[ CD ]
Line_4 $$ int parenthIndex = memberRefText.indexOf('(')-->Line_20 $$ String name = memberRefText.substring(0, parenthIndex).trim()[ FD ]
Line_34 $$ if (typeMatcher.find()) -->Line_35 $$ typeText = parmText.substring(0, typeMatcher.start())[ CD ]
