Line_29 $$ String parmText = tokenizer.nextToken().trim()-->Line_34 $$ typeText = parmText.substring(0, typeMatcher.start())[ FD ]
Line_47 $$ for (int k = 0; k < parms.length; k++) -->Line_48 $$ PsiParameter parm = parms[k][ CD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_3 $$ int parenthIndex = memberRefText.indexOf('(')[ FD ]
Line_31 $$ Matcher typeMatcher = ourTypePattern.matcher(parmText)-->Line_33 $$ if (typeMatcher.find()) [ FD ]
Line_31 $$ Matcher typeMatcher = ourTypePattern.matcher(parmText)-->Line_34 $$ typeText = parmText.substring(0, typeMatcher.start())[ FD ]
Line_5 $$ String name = memberRefText-->Line_14 $$ if (method.getName().equals(name))[ FD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_36 $$ PsiType type = factory.createTypeFromText(typeText, context)[ FD ]
Line_27 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory()-->Line_36 $$ PsiType type = factory.createTypeFromText(typeText, context)[ FD ]
Line_36 $$ PsiType type = factory.createTypeFromText(typeText, context)-->Line_37 $$ types[i++] = type[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_27 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory()[ CD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_54 $$ int hashIndex = memberRefText.indexOf('#', rparenIndex)[ FD ]
Line_34 $$ typeText = parmText.substring(0, typeMatcher.start())-->Line_36 $$ PsiType type = factory.createTypeFromText(typeText, context)[ FD ]
Line_33 $$ if (typeMatcher.find()) -->Line_34 $$ typeText = parmText.substring(0, typeMatcher.start())[ CD ]
Line_47 $$ for (int k = 0; k < parms.length; k++) -->Line_49 $$ final PsiType parmType = parm.getType()[ CD ]
Line_48 $$ PsiParameter parm = parms[k]-->Line_49 $$ final PsiType parmType = parm.getType()[ FD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_4 $$ if (parenthIndex < 0) [ CD ]
Line_4 $$ if (parenthIndex < 0) -->Line_10 $$ if (inner != null)[ CD ]
Line_4 $$ if (parenthIndex < 0) -->Line_6 $$ PsiField field = aClass.findFieldByName(name, true)[ CD ]
Line_26 $$ int i = 0-->Line_37 $$ types[i++] = type[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_62 $$ return null[ CD ]
Line_28 $$ while (tokenizer.hasMoreTokens()) -->Line_29 $$ String parmText = tokenizer.nextToken().trim()[ CD ]
Line_24 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")-->Line_29 $$ String parmText = tokenizer.nextToken().trim()[ FD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_42 $$ PsiMethod[] methods = aClass.findMethodsByName(name, true)[ FD ]
Line_3 $$ int parenthIndex = memberRefText.indexOf('(')-->Line_4 $$ if (parenthIndex < 0) [ FD ]
Line_13 $$ for (PsiMethod method : methods) -->Line_58 $$ return method.getParameterList().getParameters()[parameterNumber][ FD ]
Line_5 $$ String name = memberRefText-->Line_42 $$ PsiMethod[] methods = aClass.findMethodsByName(name, true)[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_20 $$ int rparenIndex = memberRefText.lastIndexOf(')')[ CD ]
Line_4 $$ if (parenthIndex < 0) -->Line_19 $$ String name = memberRefText.substring(0, parenthIndex).trim()[ CD ]
Line_54 $$ int hashIndex = memberRefText.indexOf('#', rparenIndex)-->Line_55 $$ if (hashIndex != -1) [ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_42 $$ PsiMethod[] methods = aClass.findMethodsByName(name, true)[ CD ]
Line_5 $$ String name = memberRefText-->Line_9 $$ PsiClass inner = aClass.findInnerClassByName(name, true)[ FD ]
Line_24 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")-->Line_28 $$ while (tokenizer.hasMoreTokens()) [ FD ]
Line_9 $$ PsiClass inner = aClass.findInnerClassByName(name, true)-->Line_10 $$ if (inner != null)[ FD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_12 $$ PsiMethod[] methods = aClass.getAllMethods()[ FD ]
Line_14 $$ if (method.getName().equals(name))-->Line_15 $$ return method[ CD ]
Line_4 $$ if (parenthIndex < 0) -->Line_12 $$ PsiMethod[] methods = aClass.getAllMethods()[ CD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_27 $$ PsiElementFactory factory = JavaPsiFacade.getInstance(aClass.getProject()).getElementFactory()[ FD ]
Line_29 $$ String parmText = tokenizer.nextToken().trim()-->Line_31 $$ Matcher typeMatcher = ourTypePattern.matcher(parmText)[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_5 $$ String name = memberRefText[ CD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_56 $$ int parameterNumber = Integer.parseInt(memberRefText.substring(hashIndex + 1))[ FD ]
Line_47 $$ for (int k = 0; k < parms.length; k++) -->Line_50 $$ if (types[k] != null && !TypeConversionUtil.erasure(parmType).getCanonicalText().equals(types[k].getCanonicalText()) && !parmType.getCanonicalText().equals(types[k].getCanonicalText()) && !TypeConversionUtil.isAssignable(parmType, types[k])) [ CD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_6 $$ PsiField field = aClass.findFieldByName(name, true)[ FD ]
Line_49 $$ final PsiType parmType = parm.getType()-->Line_50 $$ if (types[k] != null && !TypeConversionUtil.erasure(parmType).getCanonicalText().equals(types[k].getCanonicalText()) && !parmType.getCanonicalText().equals(types[k].getCanonicalText()) && !TypeConversionUtil.isAssignable(parmType, types[k])) [ FD ]
Line_55 $$ if (hashIndex != -1) -->Line_56 $$ int parameterNumber = Integer.parseInt(memberRefText.substring(hashIndex + 1))[ CD ]
Line_7 $$ if (field != null)-->Line_8 $$ return field[ CD ]
Line_4 $$ if (parenthIndex < 0) -->Line_21 $$ if (rparenIndex == -1)[ CD ]
Line_20 $$ int rparenIndex = memberRefText.lastIndexOf(')')-->Line_54 $$ int hashIndex = memberRefText.indexOf('#', rparenIndex)[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_9 $$ PsiClass inner = aClass.findInnerClassByName(name, true)[ CD ]
Line_13 $$ for (PsiMethod method : methods) -->Line_14 $$ if (method.getName().equals(name))[ FD ]
Line_32 $$ String typeText = parmText-->Line_36 $$ PsiType type = factory.createTypeFromText(typeText, context)[ FD ]
Line_32 $$ String typeText = parmText-->Line_34 $$ typeText = parmText.substring(0, typeMatcher.start())[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_7 $$ if (field != null)[ CD ]
Line_4 $$ if (parenthIndex < 0) -->Line_23 $$ String parmsText = memberRefText.substring(parenthIndex + 1, rparenIndex).trim()[ CD ]
Line_23 $$ String parmsText = memberRefText.substring(parenthIndex + 1, rparenIndex).trim()-->Line_24 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")[ FD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_23 $$ String parmsText = memberRefText.substring(parenthIndex + 1, rparenIndex).trim()[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_28 $$ while (tokenizer.hasMoreTokens()) [ CD ]
Line_13 $$ for (PsiMethod method : methods) -->Line_44 $$ PsiParameter[] parms = method.getParameterList().getParameters()[ FD ]
Line_55 $$ if (hashIndex != -1) -->Line_57 $$ if (parameterNumber < parms.length)[ CD ]
Line_57 $$ if (parameterNumber < parms.length)-->Line_58 $$ return method.getParameterList().getParameters()[parameterNumber][ CD ]
Line_5 $$ String name = memberRefText-->Line_6 $$ PsiField field = aClass.findFieldByName(name, true)[ FD ]
Line_20 $$ int rparenIndex = memberRefText.lastIndexOf(')')-->Line_21 $$ if (rparenIndex == -1)[ FD ]
Line_10 $$ if (inner != null)-->Line_11 $$ return inner[ CD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_9 $$ PsiClass inner = aClass.findInnerClassByName(name, true)[ FD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_20 $$ int rparenIndex = memberRefText.lastIndexOf(')')[ FD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_19 $$ String name = memberRefText.substring(0, parenthIndex).trim()[ FD ]
Line_21 $$ if (rparenIndex == -1)-->Line_22 $$ return null[ CD ]
Line_2 $$ private static PsiElement findReferencedMember(PsiClass aClass, String memberRefText, PsiElement context) -->Line_3 $$ int parenthIndex = memberRefText.indexOf('(')[ CD ]
Line_20 $$ int rparenIndex = memberRefText.lastIndexOf(')')-->Line_23 $$ String parmsText = memberRefText.substring(parenthIndex + 1, rparenIndex).trim()[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_24 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")[ CD ]
Line_6 $$ PsiField field = aClass.findFieldByName(name, true)-->Line_7 $$ if (field != null)[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_17 $$ return null[ CD ]
Line_4 $$ if (parenthIndex < 0) -->Line_25 $$ PsiType[] types = PsiType.createArray(tokenizer.countTokens())[ CD ]
Line_24 $$ StringTokenizer tokenizer = new StringTokenizer(parmsText.replaceAll("[*]", ""), ",")-->Line_25 $$ PsiType[] types = PsiType.createArray(tokenizer.countTokens())[ FD ]
Line_4 $$ if (parenthIndex < 0) -->Line_26 $$ int i = 0[ CD ]
Line_56 $$ int parameterNumber = Integer.parseInt(memberRefText.substring(hashIndex + 1))-->Line_57 $$ if (parameterNumber < parms.length)[ FD ]
Line_3 $$ int parenthIndex = memberRefText.indexOf('(')-->Line_19 $$ String name = memberRefText.substring(0, parenthIndex).trim()[ FD ]
