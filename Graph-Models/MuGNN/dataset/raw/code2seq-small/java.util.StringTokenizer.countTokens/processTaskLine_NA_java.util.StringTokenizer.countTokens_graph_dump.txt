Line_3 $$ if (jobBeingTraced != null) -->Line_11 $$ String finishTime = line.get("FINISH_TIME")[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_40 $$ Pre21JobHistoryConstants.Values typ[ CD ]
Line_37 $$ if (finishTime != null) -->Line_38 $$ task.setFinishTime(Long.parseLong(finishTime))[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_48 $$ task.setTaskStatus(stat)[ CD ]
Line_50 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)-->Line_58 $$ task.setTaskType(typ)[ FD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_35 $$ task.setStartTime(Long.parseLong(startTime))[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_41 $$ Pre21JobHistoryConstants.Values stat[ CD ]
Line_46 $$ stat = null-->Line_48 $$ task.setTaskStatus(stat)[ FD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_12 $$ String splits = line.get("SPLITS")[ FD ]
Line_6 $$ String taskType = line.get("TASK_TYPE")-->Line_50 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)[ FD ]
Line_53 $$ typ = null-->Line_58 $$ task.setTaskType(typ)[ FD ]
Line_18 $$ if (splits != null) -->Line_31 $$ task.setPreferredLocations(locations)[ CD ]
Line_40 $$ Pre21JobHistoryConstants.Values typ-->Line_55 $$ if (typ == null) [ FD ]
Line_16 $$ task = new LoggedTask()-->Line_62 $$ tasksInCurrentJob.put(taskID, task)[ FD ]
Line_18 $$ if (splits != null) -->Line_21 $$ if (tok.countTokens() <= MAXIMUM_PREFERRED_LOCATIONS) [ CD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_62 $$ tasksInCurrentJob.put(taskID, task)[ FD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_15 $$ if (task == null) [ FD ]
Line_60 $$ if (!taskAlreadyLogged) -->Line_61 $$ vec.add(task)[ CD ]
Line_20 $$ StringTokenizer tok = new StringTokenizer(splits, ",", false)-->Line_24 $$ while (tok.hasMoreTokens()) [ FD ]
Line_55 $$ if (typ == null) -->Line_56 $$ return[ CD ]
Line_16 $$ task = new LoggedTask()-->Line_38 $$ task.setFinishTime(Long.parseLong(finishTime))[ FD ]
Line_43 $$ stat = status == null ? null : Pre21JobHistoryConstants.Values.valueOf(status)-->Line_46 $$ stat = null[ FD ]
Line_21 $$ if (tok.countTokens() <= MAXIMUM_PREFERRED_LOCATIONS) -->Line_22 $$ locations = new ArrayList<LoggedLocation>()[ CD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_48 $$ task.setTaskStatus(stat)[ FD ]
Line_26 $$ ParsedHost node = getAndRecordParsedHost(nextSplit)-->Line_28 $$ locations.add(node.makeLoggedLocation())[ FD ]
Line_19 $$ ArrayList<LoggedLocation> locations = null-->Line_22 $$ locations = new ArrayList<LoggedLocation>()[ FD ]
Line_41 $$ Pre21JobHistoryConstants.Values stat-->Line_43 $$ stat = status == null ? null : Pre21JobHistoryConstants.Values.valueOf(status)[ FD ]
Line_20 $$ StringTokenizer tok = new StringTokenizer(splits, ",", false)-->Line_21 $$ if (tok.countTokens() <= MAXIMUM_PREFERRED_LOCATIONS) [ FD ]
Line_14 $$ boolean taskAlreadyLogged = task != null-->Line_60 $$ if (!taskAlreadyLogged) [ FD ]
Line_19 $$ ArrayList<LoggedLocation> locations = null-->Line_28 $$ locations.add(node.makeLoggedLocation())[ FD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_33 $$ task.setTaskID(taskID)[ FD ]
Line_41 $$ Pre21JobHistoryConstants.Values stat-->Line_46 $$ stat = null[ FD ]
Line_22 $$ locations = new ArrayList<LoggedLocation>()-->Line_28 $$ locations.add(node.makeLoggedLocation())[ FD ]
Line_41 $$ Pre21JobHistoryConstants.Values stat-->Line_48 $$ task.setTaskStatus(stat)[ FD ]
Line_22 $$ locations = new ArrayList<LoggedLocation>()-->Line_31 $$ task.setPreferredLocations(locations)[ FD ]
Line_18 $$ if (splits != null) -->Line_20 $$ StringTokenizer tok = new StringTokenizer(splits, ",", false)[ CD ]
Line_40 $$ Pre21JobHistoryConstants.Values typ-->Line_50 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)[ FD ]
Line_40 $$ Pre21JobHistoryConstants.Values typ-->Line_53 $$ typ = null[ FD ]
Line_19 $$ ArrayList<LoggedLocation> locations = null-->Line_31 $$ task.setPreferredLocations(locations)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_18 $$ if (splits != null) [ CD ]
Line_20 $$ StringTokenizer tok = new StringTokenizer(splits, ",", false)-->Line_25 $$ String nextSplit = tok.nextToken()[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_6 $$ String taskType = line.get("TASK_TYPE")[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_60 $$ if (!taskAlreadyLogged) [ CD ]
Line_16 $$ task = new LoggedTask()-->Line_35 $$ task.setStartTime(Long.parseLong(startTime))[ FD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_31 $$ task.setPreferredLocations(locations)[ FD ]
Line_12 $$ String splits = line.get("SPLITS")-->Line_18 $$ if (splits != null) [ FD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_3 $$ if (jobBeingTraced != null) [ CD ]
Line_16 $$ task = new LoggedTask()-->Line_48 $$ task.setTaskStatus(stat)[ FD ]
Line_25 $$ String nextSplit = tok.nextToken()-->Line_26 $$ ParsedHost node = getAndRecordParsedHost(nextSplit)[ FD ]
Line_50 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)-->Line_53 $$ typ = null[ FD ]
Line_24 $$ while (tok.hasMoreTokens()) -->Line_26 $$ ParsedHost node = getAndRecordParsedHost(nextSplit)[ CD ]
Line_18 $$ if (splits != null) -->Line_24 $$ while (tok.hasMoreTokens()) [ CD ]
Line_53 $$ typ = null-->Line_55 $$ if (typ == null) [ FD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_38 $$ task.setFinishTime(Long.parseLong(finishTime))[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_59 $$ List<LoggedTask> vec = typ == Pre21JobHistoryConstants.Values.MAP ? jobBeingTraced.getMapTasks() : typ == Pre21JobHistoryConstants.Values.REDUCE ? jobBeingTraced.getReduceTasks() : jobBeingTraced.getOtherTasks()[ CD ]
Line_16 $$ task = new LoggedTask()-->Line_61 $$ vec.add(task)[ FD ]
Line_27 $$ if (locations != null && node != null) -->Line_28 $$ locations.add(node.makeLoggedLocation())[ CD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_11 $$ String finishTime = line.get("FINISH_TIME")[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_58 $$ task.setTaskType(typ)[ CD ]
Line_16 $$ task = new LoggedTask()-->Line_31 $$ task.setPreferredLocations(locations)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_15 $$ if (task == null) [ CD ]
Line_40 $$ Pre21JobHistoryConstants.Values typ-->Line_58 $$ task.setTaskType(typ)[ FD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_61 $$ vec.add(task)[ FD ]
Line_16 $$ task = new LoggedTask()-->Line_33 $$ task.setTaskID(taskID)[ FD ]
Line_34 $$ if (startTime != null) -->Line_35 $$ task.setStartTime(Long.parseLong(startTime))[ CD ]
Line_59 $$ List<LoggedTask> vec = typ == Pre21JobHistoryConstants.Values.MAP ? jobBeingTraced.getMapTasks() : typ == Pre21JobHistoryConstants.Values.REDUCE ? jobBeingTraced.getReduceTasks() : jobBeingTraced.getOtherTasks()-->Line_61 $$ vec.add(task)[ FD ]
Line_60 $$ if (!taskAlreadyLogged) -->Line_62 $$ tasksInCurrentJob.put(taskID, task)[ CD ]
Line_24 $$ while (tok.hasMoreTokens()) -->Line_27 $$ if (locations != null && node != null) [ CD ]
Line_11 $$ String finishTime = line.get("FINISH_TIME")-->Line_38 $$ task.setFinishTime(Long.parseLong(finishTime))[ FD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_16 $$ task = new LoggedTask()[ FD ]
Line_16 $$ task = new LoggedTask()-->Line_58 $$ task.setTaskType(typ)[ FD ]
Line_24 $$ while (tok.hasMoreTokens()) -->Line_25 $$ String nextSplit = tok.nextToken()[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_37 $$ if (finishTime != null) [ CD ]
Line_50 $$ typ = taskType == null ? null : Pre21JobHistoryConstants.Values.valueOf(taskType)-->Line_55 $$ if (typ == null) [ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_34 $$ if (startTime != null) [ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_12 $$ String splits = line.get("SPLITS")[ CD ]
Line_18 $$ if (splits != null) -->Line_19 $$ ArrayList<LoggedLocation> locations = null[ CD ]
Line_11 $$ String finishTime = line.get("FINISH_TIME")-->Line_37 $$ if (finishTime != null) [ FD ]
Line_2 $$ private void processTaskLine(ParsedLine line) -->Line_6 $$ String taskType = line.get("TASK_TYPE")[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_55 $$ if (typ == null) [ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)[ CD ]
Line_15 $$ if (task == null) -->Line_16 $$ task = new LoggedTask()[ CD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_14 $$ boolean taskAlreadyLogged = task != null[ CD ]
Line_13 $$ LoggedTask task = tasksInCurrentJob.get(taskID)-->Line_58 $$ task.setTaskType(typ)[ FD ]
Line_43 $$ stat = status == null ? null : Pre21JobHistoryConstants.Values.valueOf(status)-->Line_48 $$ task.setTaskStatus(stat)[ FD ]
Line_3 $$ if (jobBeingTraced != null) -->Line_33 $$ task.setTaskID(taskID)[ CD ]
