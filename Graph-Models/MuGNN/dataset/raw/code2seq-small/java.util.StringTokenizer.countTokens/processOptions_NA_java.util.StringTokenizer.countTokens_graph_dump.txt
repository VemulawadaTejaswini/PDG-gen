Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_43 $$ if (line.hasOption('w')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_29 $$ keyLength = Integer.parseInt(line.getOptionValue('k'))[ FD ]
Line_3 $$ if (line.hasOption('h')) -->Line_5 $$ System.out.println("TFile and SeqFile benchmark.")[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_3 $$ if (line.hasOption('h')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_10 $$ if (line.hasOption('c')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_11 $$ compress = line.getOptionValue('c')[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_26 $$ fsOutputBufferSize = Integer.parseInt(line.getOptionValue('o'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_14 $$ dictSize = Integer.parseInt(line.getOptionValue('d'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_16 $$ if (line.hasOption('s')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_28 $$ if (line.hasOption('k')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_31 $$ if (line.hasOption('v')) [ FD ]
Line_56 $$ if (strOp.equals("w")) -->Line_58 $$ if (strOp.equals("rw")) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_34 $$ if (line.hasOption('b')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_3 $$ if (line.hasOption('h')) [ FD ]
Line_43 $$ if (line.hasOption('w')) -->Line_49 $$ minWordLen = Integer.parseInt(st.nextToken())[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_19 $$ if (line.hasOption('f')) [ CD ]
Line_3 $$ if (line.hasOption('h')) -->Line_8 $$ return[ CD ]
Line_3 $$ if (line.hasOption('h')) -->Line_4 $$ HelpFormatter formatter = new HelpFormatter()[ CD ]
Line_45 $$ StringTokenizer st = new StringTokenizer(min_max, " \t,")-->Line_50 $$ maxWordLen = Integer.parseInt(st.nextToken())[ FD ]
Line_22 $$ if (line.hasOption('i')) -->Line_23 $$ fsInputBufferSize = Integer.parseInt(line.getOptionValue('i'))[ CD ]
Line_45 $$ StringTokenizer st = new StringTokenizer(min_max, " \t,")-->Line_46 $$ if (st.countTokens() != 2) [ FD ]
Line_52 $$ if (line.hasOption('x')) -->Line_53 $$ String strOp = line.getOptionValue('x')[ CD ]
Line_53 $$ String strOp = line.getOptionValue('x')-->Line_58 $$ if (strOp.equals("rw")) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_35 $$ minBlockSize = Integer.parseInt(line.getOptionValue('b')) * 1024[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_7 $$ formatter.printHelp(100, "java ... TestTFileSeqFileComparison [options]", "\nSupported options:", opts, "")[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_25 $$ if (line.hasOption('o')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_53 $$ String strOp = line.getOptionValue('x')[ FD ]
Line_54 $$ if (strOp.equals("r")) -->Line_56 $$ if (strOp.equals("w")) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_22 $$ if (line.hasOption('i')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_16 $$ if (line.hasOption('s')) [ CD ]
Line_40 $$ if (line.hasOption('S')) -->Line_41 $$ seed = Long.parseLong(line.getOptionValue('S'))[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_22 $$ if (line.hasOption('i')) [ FD ]
Line_4 $$ HelpFormatter formatter = new HelpFormatter()-->Line_7 $$ formatter.printHelp(100, "java ... TestTFileSeqFileComparison [options]", "\nSupported options:", opts, "")[ FD ]
Line_19 $$ if (line.hasOption('f')) -->Line_20 $$ format = line.getOptionValue('f')[ CD ]
Line_10 $$ if (line.hasOption('c')) -->Line_11 $$ compress = line.getOptionValue('c')[ CD ]
Line_25 $$ if (line.hasOption('o')) -->Line_26 $$ fsOutputBufferSize = Integer.parseInt(line.getOptionValue('o'))[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_37 $$ if (line.hasOption('r')) [ FD ]
Line_53 $$ String strOp = line.getOptionValue('x')-->Line_54 $$ if (strOp.equals("r")) [ FD ]
Line_53 $$ String strOp = line.getOptionValue('x')-->Line_56 $$ if (strOp.equals("w")) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_52 $$ if (line.hasOption('x')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_34 $$ if (line.hasOption('b')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_17 $$ fileSize = Long.parseLong(line.getOptionValue('s')) * 1024 * 1024[ FD ]
Line_3 $$ if (line.hasOption('h')) -->Line_6 $$ System.out.println()[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_40 $$ if (line.hasOption('S')) [ CD ]
Line_37 $$ if (line.hasOption('r')) -->Line_38 $$ rootDir = line.getOptionValue('r')[ CD ]
Line_45 $$ StringTokenizer st = new StringTokenizer(min_max, " \t,")-->Line_49 $$ minWordLen = Integer.parseInt(st.nextToken())[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_19 $$ if (line.hasOption('f')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_41 $$ seed = Long.parseLong(line.getOptionValue('S'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_43 $$ if (line.hasOption('w')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_23 $$ fsInputBufferSize = Integer.parseInt(line.getOptionValue('i'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_37 $$ if (line.hasOption('r')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_44 $$ String min_max = line.getOptionValue('w')[ FD ]
Line_28 $$ if (line.hasOption('k')) -->Line_29 $$ keyLength = Integer.parseInt(line.getOptionValue('k'))[ CD ]
Line_3 $$ if (line.hasOption('h')) -->Line_7 $$ formatter.printHelp(100, "java ... TestTFileSeqFileComparison [options]", "\nSupported options:", opts, "")[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_10 $$ if (line.hasOption('c')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_32 $$ valueLength = Integer.parseInt(line.getOptionValue('v'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_38 $$ rootDir = line.getOptionValue('r')[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_40 $$ if (line.hasOption('S')) [ FD ]
Line_43 $$ if (line.hasOption('w')) -->Line_44 $$ String min_max = line.getOptionValue('w')[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_25 $$ if (line.hasOption('o')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_52 $$ if (line.hasOption('x')) [ FD ]
Line_52 $$ if (line.hasOption('x')) -->Line_54 $$ if (strOp.equals("r")) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_13 $$ if (line.hasOption('d')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_13 $$ if (line.hasOption('d')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_28 $$ if (line.hasOption('k')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_20 $$ format = line.getOptionValue('f')[ FD ]
Line_13 $$ if (line.hasOption('d')) -->Line_14 $$ dictSize = Integer.parseInt(line.getOptionValue('d'))[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_31 $$ if (line.hasOption('v')) [ CD ]
Line_31 $$ if (line.hasOption('v')) -->Line_32 $$ valueLength = Integer.parseInt(line.getOptionValue('v'))[ CD ]
Line_43 $$ if (line.hasOption('w')) -->Line_45 $$ StringTokenizer st = new StringTokenizer(min_max, " \t,")[ CD ]
Line_43 $$ if (line.hasOption('w')) -->Line_50 $$ maxWordLen = Integer.parseInt(st.nextToken())[ CD ]
Line_43 $$ if (line.hasOption('w')) -->Line_46 $$ if (st.countTokens() != 2) [ CD ]
