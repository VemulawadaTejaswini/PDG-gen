Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_29 $$ if (line.hasOption('k')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_21 $$ format = line.getOptionValue('f')[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_12 $$ compress = line.getOptionValue('c')[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_17 $$ if (line.hasOption('s')) [ CD ]
Line_44 $$ if (line.hasOption('w')) -->Line_51 $$ maxWordLen = Integer.parseInt(st.nextToken())[ CD ]
Line_46 $$ StringTokenizer st = new StringTokenizer(min_max, " \t,")-->Line_47 $$ if (st.countTokens() != 2) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_14 $$ if (line.hasOption('d')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_41 $$ if (line.hasOption('S')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_8 $$ formatter.printHelp(100, "java ... TestTFileSeqFileComparison [options]", "\nSupported options:", opts, "")[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_33 $$ valueLength = Integer.parseInt(line.getOptionValue('v'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_53 $$ if (line.hasOption('x')) [ FD ]
Line_23 $$ if (line.hasOption('i')) -->Line_24 $$ fsInputBufferSize = Integer.parseInt(line.getOptionValue('i'))[ CD ]
Line_26 $$ if (line.hasOption('o')) -->Line_27 $$ fsOutputBufferSize = Integer.parseInt(line.getOptionValue('o'))[ CD ]
Line_54 $$ String strOp = line.getOptionValue('x')-->Line_59 $$ if (strOp.equals("rw")) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_26 $$ if (line.hasOption('o')) [ CD ]
Line_14 $$ if (line.hasOption('d')) -->Line_15 $$ dictSize = Integer.parseInt(line.getOptionValue('d'))[ CD ]
Line_46 $$ StringTokenizer st = new StringTokenizer(min_max, " \t,")-->Line_51 $$ maxWordLen = Integer.parseInt(st.nextToken())[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_23 $$ if (line.hasOption('i')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_27 $$ fsOutputBufferSize = Integer.parseInt(line.getOptionValue('o'))[ FD ]
Line_44 $$ if (line.hasOption('w')) -->Line_46 $$ StringTokenizer st = new StringTokenizer(min_max, " \t,")[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_18 $$ fileSize = Long.parseLong(line.getOptionValue('s')) * 1024 * 1024[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_29 $$ if (line.hasOption('k')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_42 $$ seed = Long.parseLong(line.getOptionValue('S'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_32 $$ if (line.hasOption('v')) [ CD ]
Line_32 $$ if (line.hasOption('v')) -->Line_33 $$ valueLength = Integer.parseInt(line.getOptionValue('v'))[ CD ]
Line_11 $$ if (line.hasOption('c')) -->Line_12 $$ compress = line.getOptionValue('c')[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_35 $$ if (line.hasOption('b')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_20 $$ if (line.hasOption('f')) [ CD ]
Line_55 $$ if (strOp.equals("r")) -->Line_57 $$ if (strOp.equals("w")) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_11 $$ if (line.hasOption('c')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_44 $$ if (line.hasOption('w')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_41 $$ if (line.hasOption('S')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_45 $$ String min_max = line.getOptionValue('w')[ FD ]
Line_38 $$ if (line.hasOption('r')) -->Line_39 $$ rootDir = line.getOptionValue('r')[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_14 $$ if (line.hasOption('d')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_23 $$ if (line.hasOption('i')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_36 $$ minBlockSize = Integer.parseInt(line.getOptionValue('b')) * 1024[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_30 $$ keyLength = Integer.parseInt(line.getOptionValue('k'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_17 $$ if (line.hasOption('s')) [ FD ]
Line_54 $$ String strOp = line.getOptionValue('x')-->Line_55 $$ if (strOp.equals("r")) [ FD ]
Line_29 $$ if (line.hasOption('k')) -->Line_30 $$ keyLength = Integer.parseInt(line.getOptionValue('k'))[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_26 $$ if (line.hasOption('o')) [ FD ]
Line_54 $$ String strOp = line.getOptionValue('x')-->Line_57 $$ if (strOp.equals("w")) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_39 $$ rootDir = line.getOptionValue('r')[ FD ]
Line_46 $$ StringTokenizer st = new StringTokenizer(min_max, " \t,")-->Line_50 $$ minWordLen = Integer.parseInt(st.nextToken())[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_53 $$ if (line.hasOption('x')) [ CD ]
Line_20 $$ if (line.hasOption('f')) -->Line_21 $$ format = line.getOptionValue('f')[ CD ]
Line_53 $$ if (line.hasOption('x')) -->Line_54 $$ String strOp = line.getOptionValue('x')[ CD ]
Line_5 $$ HelpFormatter formatter = new HelpFormatter()-->Line_8 $$ formatter.printHelp(100, "java ... TestTFileSeqFileComparison [options]", "\nSupported options:", opts, "")[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_35 $$ if (line.hasOption('b')) [ CD ]
Line_44 $$ if (line.hasOption('w')) -->Line_47 $$ if (st.countTokens() != 2) [ CD ]
Line_41 $$ if (line.hasOption('S')) -->Line_42 $$ seed = Long.parseLong(line.getOptionValue('S'))[ CD ]
Line_57 $$ if (strOp.equals("w")) -->Line_59 $$ if (strOp.equals("rw")) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_38 $$ if (line.hasOption('r')) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_44 $$ if (line.hasOption('w')) [ FD ]
Line_53 $$ if (line.hasOption('x')) -->Line_55 $$ if (strOp.equals("r")) [ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_38 $$ if (line.hasOption('r')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_11 $$ if (line.hasOption('c')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_15 $$ dictSize = Integer.parseInt(line.getOptionValue('d'))[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_24 $$ fsInputBufferSize = Integer.parseInt(line.getOptionValue('i'))[ FD ]
Line_44 $$ if (line.hasOption('w')) -->Line_45 $$ String min_max = line.getOptionValue('w')[ CD ]
Line_44 $$ if (line.hasOption('w')) -->Line_50 $$ minWordLen = Integer.parseInt(st.nextToken())[ CD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_54 $$ String strOp = line.getOptionValue('x')[ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_20 $$ if (line.hasOption('f')) [ FD ]
Line_2 $$ private void processOptions(CommandLine line, Options opts) throws ParseException -->Line_32 $$ if (line.hasOption('v')) [ FD ]
