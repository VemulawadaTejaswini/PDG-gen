Line_27 $$ badBlocks = new StringTokenizer(tokens.nextToken(), ";")-->Line_43 $$ while (badBlocks.hasMoreTokens()) [ FD ]
Line_15 $$ while ((line = lines.readLine()) != null) -->Line_17 $$ String attr = tokens.nextToken()[ CD ]
Line_26 $$ if (attr.endsWith("badBlocks")) -->Line_27 $$ badBlocks = new StringTokenizer(tokens.nextToken(), ";")[ CD ]
Line_27 $$ badBlocks = new StringTokenizer(tokens.nextToken(), ";")-->Line_44 $$ String curBlock = badBlocks.nextToken()[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_40 $$ if (nrBadBlocks > 0) [ CD ]
Line_12 $$ StringTokenizer badBlocks = null-->Line_44 $$ String curBlock = badBlocks.nextToken()[ FD ]
Line_51 $$ if (viewStats) -->Line_52 $$ resultLines.add("")[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_37 $$ int nrBadFilesPos = resultLines.size()[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_14 $$ String line[ CD ]
Line_18 $$ if (attr.endsWith("blocks"))-->Line_19 $$ blocks = Long.parseLong(tokens.nextToken())[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_10 $$ long time = 0[ CD ]
Line_51 $$ if (viewStats) -->Line_55 $$ resultLines.add("         Throughput mb/sec: " + (float) size * 1000.0 / (time * MEGA))[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_35 $$ resultLines.add("    Total number of  files: " + nrFiles)[ CD ]
Line_37 $$ int nrBadFilesPos = resultLines.size()-->Line_50 $$ resultLines.insertElementAt(" Number of corrupted files: " + nrBadFiles, nrBadFilesPos)[ FD ]
Line_38 $$ TreeSet<String> badFiles = new TreeSet<String>()-->Line_46 $$ badFiles.add(curBlock.substring(0, curBlock.indexOf('@')))[ FD ]
Line_4 $$ DataInputStream in-->Line_5 $$ in = new DataInputStream(fs.open(reduceFile))[ FD ]
Line_10 $$ long time = 0-->Line_23 $$ time = Long.parseLong(tokens.nextToken())[ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_55 $$ resultLines.add("         Throughput mb/sec: " + (float) size * 1000.0 / (time * MEGA))[ FD ]
Line_15 $$ while ((line = lines.readLine()) != null) -->Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")[ CD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_27 $$ badBlocks = new StringTokenizer(tokens.nextToken(), ";")[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_32 $$ resultLines.add("----- DistributedFSCheck ----- : ")[ CD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_52 $$ resultLines.add("")[ FD ]
Line_22 $$ if (attr.endsWith("time"))-->Line_23 $$ time = Long.parseLong(tokens.nextToken())[ CD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_54 $$ resultLines.add("         Total MBytes read: " + size / MEGA)[ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_57 $$ resultLines.add("        Test exec time sec: " + (float) execTime / 1000)[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_6 $$ BufferedReader lines[ CD ]
Line_59 $$ PrintStream res = new PrintStream(new FileOutputStream(new File(resFileName), true))-->Line_63 $$ res.println(cur)[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_39 $$ long nrBadFiles = 0[ CD ]
Line_14 $$ String line-->Line_15 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_13 $$ long nrBadBlocks = 0-->Line_40 $$ if (nrBadBlocks > 0) [ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_32 $$ resultLines.add("----- DistributedFSCheck ----- : ")[ FD ]
Line_22 $$ if (attr.endsWith("time"))-->Line_24 $$ if (attr.endsWith("rate"))[ CD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_33 $$ resultLines.add("               Date & time: " + new Date(System.currentTimeMillis()))[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_12 $$ StringTokenizer badBlocks = null[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_13 $$ long nrBadBlocks = 0[ CD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_26 $$ if (attr.endsWith("badBlocks")) [ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_61 $$ String cur = resultLines.get(i)[ FD ]
Line_24 $$ if (attr.endsWith("rate"))-->Line_26 $$ if (attr.endsWith("badBlocks")) [ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_34 $$ resultLines.add("    Total number of blocks: " + blocks)[ CD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_60 $$ for (int i = 0; i < resultLines.size(); i++) [ FD ]
Line_51 $$ if (viewStats) -->Line_54 $$ resultLines.add("         Total MBytes read: " + size / MEGA)[ CD ]
Line_40 $$ if (nrBadBlocks > 0) -->Line_48 $$ nrBadFiles = badFiles.size()[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_3 $$ Path reduceFile = new Path(READ_DIR, "part-00000")[ CD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_17 $$ String attr = tokens.nextToken()[ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_56 $$ resultLines.add("    Average IO rate mb/sec: " + rate / 1000 / blocks)[ FD ]
Line_7 $$ lines = new BufferedReader(new InputStreamReader(in))-->Line_15 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_13 $$ long nrBadBlocks = 0-->Line_28 $$ nrBadBlocks = badBlocks.countTokens()[ FD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_24 $$ if (attr.endsWith("rate"))[ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_35 $$ resultLines.add("    Total number of  files: " + nrFiles)[ FD ]
Line_51 $$ if (viewStats) -->Line_57 $$ resultLines.add("        Test exec time sec: " + (float) execTime / 1000)[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_31 $$ Vector<String> resultLines = new Vector<String>()[ CD ]
Line_11 $$ float rate = 0-->Line_25 $$ rate = Float.parseFloat(tokens.nextToken())[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_51 $$ if (viewStats) [ CD ]
Line_12 $$ StringTokenizer badBlocks = null-->Line_27 $$ badBlocks = new StringTokenizer(tokens.nextToken(), ";")[ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_37 $$ int nrBadFilesPos = resultLines.size()[ FD ]
Line_8 $$ long blocks = 0-->Line_19 $$ blocks = Long.parseLong(tokens.nextToken())[ FD ]
Line_60 $$ for (int i = 0; i < resultLines.size(); i++) -->Line_62 $$ LOG.info(cur)[ CD ]
Line_44 $$ String curBlock = badBlocks.nextToken()-->Line_45 $$ resultLines.add(curBlock)[ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_45 $$ resultLines.add(curBlock)[ FD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_23 $$ time = Long.parseLong(tokens.nextToken())[ FD ]
Line_60 $$ for (int i = 0; i < resultLines.size(); i++) -->Line_61 $$ String cur = resultLines.get(i)[ FD ]
Line_15 $$ while ((line = lines.readLine()) != null) -->Line_18 $$ if (attr.endsWith("blocks"))[ CD ]
Line_43 $$ while (badBlocks.hasMoreTokens()) -->Line_44 $$ String curBlock = badBlocks.nextToken()[ CD ]
Line_44 $$ String curBlock = badBlocks.nextToken()-->Line_46 $$ badFiles.add(curBlock.substring(0, curBlock.indexOf('@')))[ FD ]
Line_12 $$ StringTokenizer badBlocks = null-->Line_43 $$ while (badBlocks.hasMoreTokens()) [ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_60 $$ for (int i = 0; i < resultLines.size(); i++) [ CD ]
Line_9 $$ long size = 0-->Line_21 $$ size = Long.parseLong(tokens.nextToken())[ FD ]
Line_40 $$ if (nrBadBlocks > 0) -->Line_42 $$ resultLines.add("----- Corrupted Blocks (file@offset) ----- : ")[ CD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_22 $$ if (attr.endsWith("time"))[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_33 $$ resultLines.add("               Date & time: " + new Date(System.currentTimeMillis()))[ CD ]
Line_61 $$ String cur = resultLines.get(i)-->Line_62 $$ LOG.info(cur)[ FD ]
Line_51 $$ if (viewStats) -->Line_56 $$ resultLines.add("    Average IO rate mb/sec: " + rate / 1000 / blocks)[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_7 $$ lines = new BufferedReader(new InputStreamReader(in))[ CD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_34 $$ resultLines.add("    Total number of blocks: " + blocks)[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_9 $$ long size = 0[ CD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_18 $$ if (attr.endsWith("blocks"))[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_50 $$ resultLines.insertElementAt(" Number of corrupted files: " + nrBadFiles, nrBadFilesPos)[ CD ]
Line_17 $$ String attr = tokens.nextToken()-->Line_20 $$ if (attr.endsWith("size"))[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_4 $$ DataInputStream in[ CD ]
Line_26 $$ if (attr.endsWith("badBlocks")) -->Line_28 $$ nrBadBlocks = badBlocks.countTokens()[ CD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_42 $$ resultLines.add("----- Corrupted Blocks (file@offset) ----- : ")[ FD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_25 $$ rate = Float.parseFloat(tokens.nextToken())[ FD ]
Line_40 $$ if (nrBadBlocks > 0) -->Line_43 $$ while (badBlocks.hasMoreTokens()) [ CD ]
Line_20 $$ if (attr.endsWith("size"))-->Line_22 $$ if (attr.endsWith("time"))[ CD ]
Line_18 $$ if (attr.endsWith("blocks"))-->Line_20 $$ if (attr.endsWith("size"))[ CD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_36 $$ resultLines.add("Number of corrupted blocks: " + nrBadBlocks)[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_15 $$ while ((line = lines.readLine()) != null) [ CD ]
Line_12 $$ StringTokenizer badBlocks = null-->Line_28 $$ nrBadBlocks = badBlocks.countTokens()[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_5 $$ in = new DataInputStream(fs.open(reduceFile))[ CD ]
Line_60 $$ for (int i = 0; i < resultLines.size(); i++) -->Line_63 $$ res.println(cur)[ CD ]
Line_39 $$ long nrBadFiles = 0-->Line_48 $$ nrBadFiles = badFiles.size()[ FD ]
Line_6 $$ BufferedReader lines-->Line_15 $$ while ((line = lines.readLine()) != null) [ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_50 $$ resultLines.insertElementAt(" Number of corrupted files: " + nrBadFiles, nrBadFilesPos)[ FD ]
Line_61 $$ String cur = resultLines.get(i)-->Line_63 $$ res.println(cur)[ FD ]
Line_43 $$ while (badBlocks.hasMoreTokens()) -->Line_45 $$ resultLines.add(curBlock)[ CD ]
Line_28 $$ nrBadBlocks = badBlocks.countTokens()-->Line_40 $$ if (nrBadBlocks > 0) [ FD ]
Line_40 $$ if (nrBadBlocks > 0) -->Line_41 $$ resultLines.add("")[ CD ]
Line_24 $$ if (attr.endsWith("rate"))-->Line_25 $$ rate = Float.parseFloat(tokens.nextToken())[ CD ]
Line_6 $$ BufferedReader lines-->Line_7 $$ lines = new BufferedReader(new InputStreamReader(in))[ FD ]
Line_60 $$ for (int i = 0; i < resultLines.size(); i++) -->Line_61 $$ String cur = resultLines.get(i)[ CD ]
Line_43 $$ while (badBlocks.hasMoreTokens()) -->Line_46 $$ badFiles.add(curBlock.substring(0, curBlock.indexOf('@')))[ CD ]
Line_3 $$ Path reduceFile = new Path(READ_DIR, "part-00000")-->Line_5 $$ in = new DataInputStream(fs.open(reduceFile))[ FD ]
Line_38 $$ TreeSet<String> badFiles = new TreeSet<String>()-->Line_48 $$ nrBadFiles = badFiles.size()[ FD ]
Line_51 $$ if (viewStats) -->Line_53 $$ resultLines.add("-----   Performance  ----- : ")[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_11 $$ float rate = 0[ CD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_41 $$ resultLines.add("")[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_8 $$ long blocks = 0[ CD ]
Line_27 $$ badBlocks = new StringTokenizer(tokens.nextToken(), ";")-->Line_28 $$ nrBadBlocks = badBlocks.countTokens()[ FD ]
Line_20 $$ if (attr.endsWith("size"))-->Line_21 $$ size = Long.parseLong(tokens.nextToken())[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_36 $$ resultLines.add("Number of corrupted blocks: " + nrBadBlocks)[ CD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_38 $$ TreeSet<String> badFiles = new TreeSet<String>()[ CD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_21 $$ size = Long.parseLong(tokens.nextToken())[ FD ]
Line_2 $$ private void analyzeResult(long execTime, String resFileName, boolean viewStats) throws IOException -->Line_59 $$ PrintStream res = new PrintStream(new FileOutputStream(new File(resFileName), true))[ CD ]
Line_16 $$ StringTokenizer tokens = new StringTokenizer(line, " \t\n\r\f%")-->Line_19 $$ blocks = Long.parseLong(tokens.nextToken())[ FD ]
Line_31 $$ Vector<String> resultLines = new Vector<String>()-->Line_53 $$ resultLines.add("-----   Performance  ----- : ")[ FD ]
