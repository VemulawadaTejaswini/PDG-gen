Line_3 $$ new Timer().schedule(new TimerTask() -->Line_14 $$ LOG.info("Release request cache is cleaned up")[ CD ]
Line_6 $$ T attempt = app.getCurrentAppAttempt()-->Line_8 $$ for (ContainerId containerId : attempt.getPendingRelease()) [ FD ]
Line_5 $$ for (SchedulerApplication<T> app : applications.values()) -->Line_9 $$ RMAuditLogger.logFailure(app.getUser(), AuditConstants.RELEASE_CONTAINER, "Unauthorized access or invalid container", "Scheduler", "Trying to release container not owned by app or with invalid id.", attempt.getApplicationId(), containerId)[ FD ]
Line_6 $$ T attempt = app.getCurrentAppAttempt()-->Line_11 $$ attempt.getPendingRelease().clear()[ FD ]
Line_6 $$ T attempt = app.getCurrentAppAttempt()-->Line_9 $$ RMAuditLogger.logFailure(app.getUser(), AuditConstants.RELEASE_CONTAINER, "Unauthorized access or invalid container", "Scheduler", "Trying to release container not owned by app or with invalid id.", attempt.getApplicationId(), containerId)[ FD ]
Line_2 $$ protected void createReleaseCache() -->Line_3 $$ new Timer().schedule(new TimerTask() [ CD ]
Line_5 $$ for (SchedulerApplication<T> app : applications.values()) -->Line_6 $$ T attempt = app.getCurrentAppAttempt()[ FD ]
Line_8 $$ for (ContainerId containerId : attempt.getPendingRelease()) -->Line_9 $$ RMAuditLogger.logFailure(app.getUser(), AuditConstants.RELEASE_CONTAINER, "Unauthorized access or invalid container", "Scheduler", "Trying to release container not owned by app or with invalid id.", attempt.getApplicationId(), containerId)[ FD ]
