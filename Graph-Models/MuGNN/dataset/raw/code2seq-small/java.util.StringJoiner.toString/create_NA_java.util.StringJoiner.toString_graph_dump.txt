Line_7 $$ Domain domain = entry.getValue()-->Line_30 $$ Ranges ranges = domain.getValues().getRanges()[ FD ]
Line_46 $$ maxValue = range.getHigh().getValue()-->Line_56 $$ if (maxValue != null) [ FD ]
Line_42 $$ if (!range.getLow().isLowerUnbounded()) -->Line_43 $$ minValue = range.getLow().getValue()[ CD ]
Line_36 $$ Object minValue = null-->Line_43 $$ minValue = range.getLow().getValue()[ FD ]
Line_35 $$ Range range = getOnlyElement(ranges.getOrderedRanges())-->Line_38 $$ if (range.isSingleValue()) [ FD ]
Line_40 $$ maxValue = range.getSingleValue()-->Line_46 $$ maxValue = range.getHigh().getValue()[ FD ]
Line_50 $$ String max = maxColumn(handle.getColumnId())-->Line_52 $$ predicate.add(format("(%s >= ? OR %s IS NULL)", max, max))[ FD ]
Line_35 $$ Range range = getOnlyElement(ranges.getOrderedRanges())-->Line_45 $$ if (!range.getHigh().isUpperUnbounded()) [ FD ]
Line_35 $$ Range range = getOnlyElement(ranges.getOrderedRanges())-->Line_46 $$ maxValue = range.getHigh().getValue()[ FD ]
Line_3 $$ StringJoiner predicate = new StringJoiner(" AND ").setEmptyValue("true")-->Line_52 $$ predicate.add(format("(%s >= ? OR %s IS NULL)", max, max))[ FD ]
Line_3 $$ StringJoiner predicate = new StringJoiner(" AND ").setEmptyValue("true")-->Line_20 $$ predicate.add("shard_uuid = ?")[ FD ]
Line_35 $$ Range range = getOnlyElement(ranges.getOrderedRanges())-->Line_42 $$ if (!range.getLow().isLowerUnbounded()) [ FD ]
Line_35 $$ Range range = getOnlyElement(ranges.getOrderedRanges())-->Line_40 $$ maxValue = range.getSingleValue()[ FD ]
Line_6 $$ for (Entry<RaptorColumnHandle, Domain> entry : tupleDomain.getDomains().get().entrySet()) -->Line_11 $$ RaptorColumnHandle handle = entry.getKey()[ FD ]
Line_38 $$ if (range.isSingleValue()) -->Line_40 $$ maxValue = range.getSingleValue()[ CD ]
Line_4 $$ ImmutableList.Builder<JDBCType> types = ImmutableList.builder()-->Line_53 $$ types.add(jdbcType)[ FD ]
Line_5 $$ ImmutableList.Builder<Object> values = ImmutableList.builder()-->Line_54 $$ values.add(minValue)[ FD ]
Line_49 $$ String min = minColumn(handle.getColumnId())-->Line_57 $$ predicate.add(format("(%s <= ? OR %s IS NULL)", min, min))[ FD ]
Line_37 $$ Object maxValue = null-->Line_59 $$ values.add(maxValue)[ FD ]
Line_5 $$ ImmutableList.Builder<Object> values = ImmutableList.builder()-->Line_62 $$ return new ShardPredicate(predicate.toString(), types.build(), values.build())[ FD ]
Line_36 $$ Object minValue = null-->Line_54 $$ values.add(minValue)[ FD ]
Line_56 $$ if (maxValue != null) -->Line_59 $$ values.add(maxValue)[ CD ]
Line_40 $$ maxValue = range.getSingleValue()-->Line_59 $$ values.add(maxValue)[ FD ]
Line_38 $$ if (range.isSingleValue()) -->Line_39 $$ minValue = range.getSingleValue()[ CD ]
Line_5 $$ ImmutableList.Builder<Object> values = ImmutableList.builder()-->Line_23 $$ values.add(uuidStringToBytes(uuidSlice))[ FD ]
Line_13 $$ JDBCType jdbcType = jdbcType(type)-->Line_14 $$ if (jdbcType == null) [ FD ]
Line_2 $$ public static ShardPredicate create(TupleDomain<RaptorColumnHandle> tupleDomain) -->Line_62 $$ return new ShardPredicate(predicate.toString(), types.build(), values.build())[ CD ]
Line_2 $$ public static ShardPredicate create(TupleDomain<RaptorColumnHandle> tupleDomain) -->Line_6 $$ for (Entry<RaptorColumnHandle, Domain> entry : tupleDomain.getDomains().get().entrySet()) [ FD ]
Line_51 $$ if (minValue != null) -->Line_52 $$ predicate.add(format("(%s >= ? OR %s IS NULL)", max, max))[ CD ]
Line_51 $$ if (minValue != null) -->Line_54 $$ values.add(minValue)[ CD ]
Line_2 $$ public static ShardPredicate create(TupleDomain<RaptorColumnHandle> tupleDomain) -->Line_4 $$ ImmutableList.Builder<JDBCType> types = ImmutableList.builder()[ CD ]
Line_39 $$ minValue = range.getSingleValue()-->Line_51 $$ if (minValue != null) [ FD ]
Line_35 $$ Range range = getOnlyElement(ranges.getOrderedRanges())-->Line_39 $$ minValue = range.getSingleValue()[ FD ]
Line_43 $$ minValue = range.getLow().getValue()-->Line_51 $$ if (minValue != null) [ FD ]
Line_37 $$ Object maxValue = null-->Line_40 $$ maxValue = range.getSingleValue()[ FD ]
Line_7 $$ Domain domain = entry.getValue()-->Line_27 $$ if (!domain.getType().isOrderable()) [ FD ]
Line_35 $$ Range range = getOnlyElement(ranges.getOrderedRanges())-->Line_43 $$ minValue = range.getLow().getValue()[ FD ]
Line_22 $$ Slice uuidSlice = checkType(entry.getValue().getSingleValue(), Slice.class, "value")-->Line_23 $$ values.add(uuidStringToBytes(uuidSlice))[ FD ]
Line_56 $$ if (maxValue != null) -->Line_57 $$ predicate.add(format("(%s <= ? OR %s IS NULL)", min, min))[ CD ]
Line_11 $$ RaptorColumnHandle handle = entry.getKey()-->Line_12 $$ Type type = handle.getColumnType()[ FD ]
Line_38 $$ if (range.isSingleValue()) -->Line_45 $$ if (!range.getHigh().isUpperUnbounded()) [ CD ]
Line_4 $$ ImmutableList.Builder<JDBCType> types = ImmutableList.builder()-->Line_58 $$ types.add(jdbcType)[ FD ]
Line_39 $$ minValue = range.getSingleValue()-->Line_54 $$ values.add(minValue)[ FD ]
Line_36 $$ Object minValue = null-->Line_51 $$ if (minValue != null) [ FD ]
Line_13 $$ JDBCType jdbcType = jdbcType(type)-->Line_58 $$ types.add(jdbcType)[ FD ]
Line_4 $$ ImmutableList.Builder<JDBCType> types = ImmutableList.builder()-->Line_21 $$ types.add(jdbcType(type))[ FD ]
Line_12 $$ Type type = handle.getColumnType()-->Line_21 $$ types.add(jdbcType(type))[ FD ]
Line_43 $$ minValue = range.getLow().getValue()-->Line_54 $$ values.add(minValue)[ FD ]
Line_11 $$ RaptorColumnHandle handle = entry.getKey()-->Line_17 $$ if (handle.isShardUuid()) [ FD ]
Line_2 $$ public static ShardPredicate create(TupleDomain<RaptorColumnHandle> tupleDomain) -->Line_5 $$ ImmutableList.Builder<Object> values = ImmutableList.builder()[ CD ]
Line_38 $$ if (range.isSingleValue()) -->Line_42 $$ if (!range.getLow().isLowerUnbounded()) [ CD ]
Line_6 $$ for (Entry<RaptorColumnHandle, Domain> entry : tupleDomain.getDomains().get().entrySet()) -->Line_7 $$ Domain domain = entry.getValue()[ FD ]
Line_45 $$ if (!range.getHigh().isUpperUnbounded()) -->Line_46 $$ maxValue = range.getHigh().getValue()[ CD ]
Line_36 $$ Object minValue = null-->Line_39 $$ minValue = range.getSingleValue()[ FD ]
Line_39 $$ minValue = range.getSingleValue()-->Line_43 $$ minValue = range.getLow().getValue()[ FD ]
Line_3 $$ StringJoiner predicate = new StringJoiner(" AND ").setEmptyValue("true")-->Line_57 $$ predicate.add(format("(%s <= ? OR %s IS NULL)", min, min))[ FD ]
Line_37 $$ Object maxValue = null-->Line_46 $$ maxValue = range.getHigh().getValue()[ FD ]
Line_5 $$ ImmutableList.Builder<Object> values = ImmutableList.builder()-->Line_59 $$ values.add(maxValue)[ FD ]
Line_11 $$ RaptorColumnHandle handle = entry.getKey()-->Line_49 $$ String min = minColumn(handle.getColumnId())[ FD ]
Line_56 $$ if (maxValue != null) -->Line_58 $$ types.add(jdbcType)[ CD ]
Line_46 $$ maxValue = range.getHigh().getValue()-->Line_59 $$ values.add(maxValue)[ FD ]
Line_40 $$ maxValue = range.getSingleValue()-->Line_56 $$ if (maxValue != null) [ FD ]
Line_6 $$ for (Entry<RaptorColumnHandle, Domain> entry : tupleDomain.getDomains().get().entrySet()) -->Line_22 $$ Slice uuidSlice = checkType(entry.getValue().getSingleValue(), Slice.class, "value")[ FD ]
Line_12 $$ Type type = handle.getColumnType()-->Line_13 $$ JDBCType jdbcType = jdbcType(type)[ FD ]
Line_2 $$ public static ShardPredicate create(TupleDomain<RaptorColumnHandle> tupleDomain) -->Line_3 $$ StringJoiner predicate = new StringJoiner(" AND ").setEmptyValue("true")[ CD ]
Line_30 $$ Ranges ranges = domain.getValues().getRanges()-->Line_35 $$ Range range = getOnlyElement(ranges.getOrderedRanges())[ FD ]
Line_3 $$ StringJoiner predicate = new StringJoiner(" AND ").setEmptyValue("true")-->Line_62 $$ return new ShardPredicate(predicate.toString(), types.build(), values.build())[ FD ]
Line_11 $$ RaptorColumnHandle handle = entry.getKey()-->Line_50 $$ String max = maxColumn(handle.getColumnId())[ FD ]
Line_4 $$ ImmutableList.Builder<JDBCType> types = ImmutableList.builder()-->Line_62 $$ return new ShardPredicate(predicate.toString(), types.build(), values.build())[ FD ]
Line_37 $$ Object maxValue = null-->Line_56 $$ if (maxValue != null) [ FD ]
Line_7 $$ Domain domain = entry.getValue()-->Line_8 $$ if (domain.isNullAllowed() || domain.isAll()) [ FD ]
Line_51 $$ if (minValue != null) -->Line_53 $$ types.add(jdbcType)[ CD ]
Line_13 $$ JDBCType jdbcType = jdbcType(type)-->Line_53 $$ types.add(jdbcType)[ FD ]
