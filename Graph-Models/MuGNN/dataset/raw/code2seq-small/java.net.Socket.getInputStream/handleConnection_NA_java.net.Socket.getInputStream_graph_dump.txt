Line_14 $$ final HgPromptChoice defaultChoice = choices[defaultChoiceInt]-->Line_16 $$ int chosen = myHandler.promptUser(message, choices, defaultChoice).getChosenIndex()[ FD ]
Line_22 $$ EventQueue.invokeAndWait(new Runnable() -->Line_29 $$ index[0] = Messages.showDialog(message, "Mercurial Prompt Message", choicePresentationArray, defaultChoice.getChosenIndex(), Messages.getQuestionIcon())[ CD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_9 $$ for (int i = 0; i < numOfChoices; i++) [ CD ]
Line_7 $$ int numOfChoices = dataInput.readInt()-->Line_9 $$ for (int i = 0; i < numOfChoices; i++) [ FD ]
Line_9 $$ for (int i = 0; i < numOfChoices; i++) -->Line_10 $$ String choice = new String(readDataBlock(dataInput))[ CD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_5 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())[ CD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_6 $$ final String message = new String(readDataBlock(dataInput))[ CD ]
Line_25 $$ String[] choicePresentationArray = new String[choices.length]-->Line_29 $$ index[0] = Messages.showDialog(message, "Mercurial Prompt Message", choicePresentationArray, defaultChoice.getChosenIndex(), Messages.getQuestionIcon())[ FD ]
Line_15 $$ if (myHandler != null && myHandler.shouldHandle(message)) -->Line_17 $$ sendChoiceToHg(out, chosen)[ CD ]
Line_8 $$ final HgPromptChoice[] choices = new HgPromptChoice[numOfChoices]-->Line_16 $$ int chosen = myHandler.promptUser(message, choices, defaultChoice).getChosenIndex()[ FD ]
Line_22 $$ EventQueue.invokeAndWait(new Runnable() -->Line_26 $$ for (int i = 0; i < choices.length; ++i) [ CD ]
Line_14 $$ final HgPromptChoice defaultChoice = choices[defaultChoiceInt]-->Line_29 $$ index[0] = Messages.showDialog(message, "Mercurial Prompt Message", choicePresentationArray, defaultChoice.getChosenIndex(), Messages.getQuestionIcon())[ FD ]
Line_16 $$ int chosen = myHandler.promptUser(message, choices, defaultChoice).getChosenIndex()-->Line_33 $$ sendChoiceToHg(out, chosen)[ FD ]
Line_16 $$ int chosen = myHandler.promptUser(message, choices, defaultChoice).getChosenIndex()-->Line_17 $$ sendChoiceToHg(out, chosen)[ FD ]
Line_26 $$ for (int i = 0; i < choices.length; ++i) -->Line_27 $$ choicePresentationArray[i] = choices[i].toString()[ CD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_7 $$ int numOfChoices = dataInput.readInt()[ CD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_15 $$ if (myHandler != null && myHandler.shouldHandle(message)) [ CD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())-->Line_33 $$ sendChoiceToHg(out, chosen)[ FD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_20 $$ final int[] index = new int[] [ CD ]
Line_9 $$ for (int i = 0; i < numOfChoices; i++) -->Line_26 $$ for (int i = 0; i < choices.length; ++i) [ FD ]
Line_6 $$ final String message = new String(readDataBlock(dataInput))-->Line_29 $$ index[0] = Messages.showDialog(message, "Mercurial Prompt Message", choicePresentationArray, defaultChoice.getChosenIndex(), Messages.getQuestionIcon())[ FD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_5 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())[ FD ]
Line_9 $$ for (int i = 0; i < numOfChoices; i++) -->Line_11 $$ choices[i] = new HgPromptChoice(i, choice)[ CD ]
Line_6 $$ final String message = new String(readDataBlock(dataInput))-->Line_16 $$ int chosen = myHandler.promptUser(message, choices, defaultChoice).getChosenIndex()[ FD ]
Line_15 $$ if (myHandler != null && myHandler.shouldHandle(message)) -->Line_16 $$ int chosen = myHandler.promptUser(message, choices, defaultChoice).getChosenIndex()[ CD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_14 $$ final HgPromptChoice defaultChoice = choices[defaultChoiceInt][ CD ]
Line_5 $$ DataOutputStream out = new DataOutputStream(socket.getOutputStream())-->Line_17 $$ sendChoiceToHg(out, chosen)[ FD ]
Line_22 $$ EventQueue.invokeAndWait(new Runnable() -->Line_25 $$ String[] choicePresentationArray = new String[choices.length][ CD ]
Line_6 $$ final String message = new String(readDataBlock(dataInput))-->Line_15 $$ if (myHandler != null && myHandler.shouldHandle(message)) [ FD ]
Line_15 $$ if (myHandler != null && myHandler.shouldHandle(message)) -->Line_18 $$ return true[ CD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_13 $$ int defaultChoiceInt = dataInput.readInt()[ CD ]
Line_2 $$ public boolean handleConnection(Socket socket) throws IOException -->Line_8 $$ final HgPromptChoice[] choices = new HgPromptChoice[numOfChoices][ CD ]
