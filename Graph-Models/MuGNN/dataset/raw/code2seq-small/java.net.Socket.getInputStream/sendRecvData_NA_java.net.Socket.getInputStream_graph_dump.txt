Line_2 $$ private void sendRecvData(String testDescription, boolean eofExpected) throws IOException -->Line_5 $$ if (testDescription != null) [ FD ]
Line_9 $$ sock = new Socket()-->Line_12 $$ OutputStream out = sock.getOutputStream()[ FD ]
Line_9 $$ sock = new Socket()-->Line_10 $$ sock.connect(dnAddr, HdfsServerConstants.READ_TIMEOUT)[ FD ]
Line_26 $$ String received = StringUtils.byteToHexString(retBuf)-->Line_33 $$ assertEquals(expected, received)[ FD ]
Line_9 $$ sock = new Socket()-->Line_11 $$ sock.setSoTimeout(HdfsServerConstants.READ_TIMEOUT)[ FD ]
Line_9 $$ sock = new Socket()-->Line_35 $$ IOUtils.closeSocket(sock)[ FD ]
Line_12 $$ OutputStream out = sock.getOutputStream()-->Line_15 $$ out.write(sendBuf.toByteArray())[ FD ]
Line_3 $$ Socket sock = null-->Line_35 $$ IOUtils.closeSocket(sock)[ FD ]
Line_3 $$ Socket sock = null-->Line_10 $$ sock.connect(dnAddr, HdfsServerConstants.READ_TIMEOUT)[ FD ]
Line_13 $$ byte[] retBuf = new byte[recvBuf.size()]-->Line_18 $$ in.readFully(retBuf)[ FD ]
Line_20 $$ if (eofExpected) -->Line_21 $$ LOG.info("Got EOF as expected.")[ CD ]
Line_3 $$ Socket sock = null-->Line_14 $$ DataInputStream in = new DataInputStream(sock.getInputStream())[ FD ]
Line_3 $$ Socket sock = null-->Line_9 $$ sock = new Socket()[ FD ]
Line_2 $$ private void sendRecvData(String testDescription, boolean eofExpected) throws IOException -->Line_3 $$ Socket sock = null[ CD ]
Line_5 $$ if (testDescription != null) -->Line_6 $$ LOG.info("Testing : " + testDescription)[ CD ]
Line_3 $$ Socket sock = null-->Line_11 $$ sock.setSoTimeout(HdfsServerConstants.READ_TIMEOUT)[ FD ]
Line_9 $$ sock = new Socket()-->Line_14 $$ DataInputStream in = new DataInputStream(sock.getInputStream())[ FD ]
Line_3 $$ Socket sock = null-->Line_12 $$ OutputStream out = sock.getOutputStream()[ FD ]
Line_14 $$ DataInputStream in = new DataInputStream(sock.getInputStream())-->Line_18 $$ in.readFully(retBuf)[ FD ]
Line_27 $$ String expected = StringUtils.byteToHexString(recvBuf.toByteArray())-->Line_33 $$ assertEquals(expected, received)[ FD ]
Line_13 $$ byte[] retBuf = new byte[recvBuf.size()]-->Line_26 $$ String received = StringUtils.byteToHexString(retBuf)[ FD ]
Line_20 $$ if (eofExpected) -->Line_22 $$ return[ CD ]
Line_12 $$ OutputStream out = sock.getOutputStream()-->Line_16 $$ out.flush()[ FD ]
