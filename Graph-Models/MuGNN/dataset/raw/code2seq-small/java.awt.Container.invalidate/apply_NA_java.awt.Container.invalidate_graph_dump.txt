Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_7 $$ final ToolWindowAnchor anchor = myInfo.getAnchor()[ CD ]
Line_10 $$ if (ToolWindowAnchor.TOP == anchor) -->Line_11 $$ add(myDivider, BorderLayout.SOUTH)[ CD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_8 $$ if (info.isSliding()) [ CD ]
Line_7 $$ final ToolWindowAnchor anchor = myInfo.getAnchor()-->Line_12 $$ if (ToolWindowAnchor.LEFT == anchor) [ FD ]
Line_8 $$ if (info.isSliding()) -->Line_19 $$ myDivider.setPreferredSize(new Dimension(0, 0))[ CD ]
Line_10 $$ if (ToolWindowAnchor.TOP == anchor) -->Line_12 $$ if (ToolWindowAnchor.LEFT == anchor) [ CD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_8 $$ if (info.isSliding()) [ FD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_3 $$ if (Comparing.equal(myInfo, info) || myProject == null || myProject.isDisposed()) [ CD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_32 $$ setBorder(new InnerPanelBorder(myToolWindow))[ CD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_3 $$ if (Comparing.equal(myInfo, info) || myProject == null || myProject.isDisposed()) [ FD ]
Line_27 $$ if (floatingDecorator != null) -->Line_28 $$ floatingDecorator.apply(myInfo)[ CD ]
Line_26 $$ final FloatingDecorator floatingDecorator = (FloatingDecorator) SwingUtilities.getAncestorOfClass(FloatingDecorator.class, this)-->Line_27 $$ if (floatingDecorator != null) [ FD ]
Line_8 $$ if (info.isSliding()) -->Line_21 $$ remove(myDivider)[ CD ]
Line_14 $$ if (ToolWindowAnchor.BOTTOM == anchor) -->Line_16 $$ if (ToolWindowAnchor.RIGHT == anchor) [ CD ]
Line_8 $$ if (info.isSliding()) -->Line_9 $$ myDivider.invalidate()[ CD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_24 $$ repaint()[ CD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_31 $$ myToolWindow.getContentUI().setType(myInfo.getContentUiType())[ CD ]
Line_12 $$ if (ToolWindowAnchor.LEFT == anchor) -->Line_13 $$ add(myDivider, BorderLayout.EAST)[ CD ]
Line_12 $$ if (ToolWindowAnchor.LEFT == anchor) -->Line_14 $$ if (ToolWindowAnchor.BOTTOM == anchor) [ CD ]
Line_7 $$ final ToolWindowAnchor anchor = myInfo.getAnchor()-->Line_10 $$ if (ToolWindowAnchor.TOP == anchor) [ FD ]
Line_25 $$ if (myInfo.isFloating() && myInfo.isVisible()) -->Line_27 $$ if (floatingDecorator != null) [ CD ]
Line_8 $$ if (info.isSliding()) -->Line_10 $$ if (ToolWindowAnchor.TOP == anchor) [ CD ]
Line_16 $$ if (ToolWindowAnchor.RIGHT == anchor) -->Line_17 $$ add(myDivider, BorderLayout.WEST)[ CD ]
Line_7 $$ final ToolWindowAnchor anchor = myInfo.getAnchor()-->Line_14 $$ if (ToolWindowAnchor.BOTTOM == anchor) [ FD ]
Line_25 $$ if (myInfo.isFloating() && myInfo.isVisible()) -->Line_26 $$ final FloatingDecorator floatingDecorator = (FloatingDecorator) SwingUtilities.getAncestorOfClass(FloatingDecorator.class, this)[ CD ]
Line_14 $$ if (ToolWindowAnchor.BOTTOM == anchor) -->Line_15 $$ add(myDivider, BorderLayout.NORTH)[ CD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_23 $$ validate()[ CD ]
Line_26 $$ final FloatingDecorator floatingDecorator = (FloatingDecorator) SwingUtilities.getAncestorOfClass(FloatingDecorator.class, this)-->Line_28 $$ floatingDecorator.apply(myInfo)[ FD ]
Line_2 $$ public final void apply(@NotNull WindowInfoImpl info) -->Line_25 $$ if (myInfo.isFloating() && myInfo.isVisible()) [ CD ]
Line_3 $$ if (Comparing.equal(myInfo, info) || myProject == null || myProject.isDisposed()) -->Line_4 $$ return[ CD ]
Line_7 $$ final ToolWindowAnchor anchor = myInfo.getAnchor()-->Line_16 $$ if (ToolWindowAnchor.RIGHT == anchor) [ FD ]
