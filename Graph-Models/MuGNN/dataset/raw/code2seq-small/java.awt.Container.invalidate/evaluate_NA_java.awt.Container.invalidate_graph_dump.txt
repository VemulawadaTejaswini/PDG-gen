Line_20 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)-->Line_21 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_11 $$ tree.markNodesObsolete()[ CD ]
Line_4 $$ int offset = -1-->Line_20 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)[ FD ]
Line_10 $$ final XDebuggerTree tree = myTreePanel.getTree()-->Line_12 $$ tree.setRoot(new EvaluatingExpressionRootNode(this, tree), false)[ FD ]
Line_2 $$ private void evaluate() -->Line_7 $$ if (editor != null) [ CD ]
Line_4 $$ int offset = -1-->Line_21 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_10 $$ final XDebuggerTree tree = myTreePanel.getTree()[ CD ]
Line_4 $$ int offset = -1-->Line_22 $$ editor.getSelectionModel().setSelection(offset, offset)[ FD ]
Line_7 $$ if (editor != null) -->Line_8 $$ offset = editor.getCaretModel().getOffset()[ CD ]
Line_8 $$ offset = editor.getCaretModel().getOffset()-->Line_22 $$ editor.getSelectionModel().setSelection(offset, offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_12 $$ tree.setRoot(new EvaluatingExpressionRootNode(this, tree), false)[ CD ]
Line_8 $$ offset = editor.getCaretModel().getOffset()-->Line_21 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_3 $$ final XDebuggerEditorBase inputEditor = getInputEditor()[ CD ]
Line_10 $$ final XDebuggerTree tree = myTreePanel.getTree()-->Line_11 $$ tree.markNodesObsolete()[ FD ]
Line_8 $$ offset = editor.getCaretModel().getOffset()-->Line_20 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)[ FD ]
Line_20 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)-->Line_22 $$ editor.getSelectionModel().setSelection(offset, offset)[ FD ]
Line_4 $$ int offset = -1-->Line_8 $$ offset = editor.getCaretModel().getOffset()[ FD ]
Line_2 $$ private void evaluate() -->Line_4 $$ int offset = -1[ CD ]
Line_2 $$ private void evaluate() -->Line_13 $$ myResultPanel.invalidate()[ CD ]
