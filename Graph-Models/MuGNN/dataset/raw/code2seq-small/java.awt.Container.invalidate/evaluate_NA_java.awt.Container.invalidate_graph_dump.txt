Line_5 $$ Editor editor = inputEditor.getEditor()-->Line_13 $$ editor = inputEditor.getEditor()[ FD ]
Line_15 $$ if (offset >= 0 && editor != null) -->Line_18 $$ editor.getSelectionModel().setSelection(offset, offset)[ CD ]
Line_3 $$ final XDebuggerEditorBase inputEditor = getInputEditor()-->Line_13 $$ editor = inputEditor.getEditor()[ FD ]
Line_2 $$ private void evaluate() -->Line_12 $$ myResultPanel.invalidate()[ CD ]
Line_5 $$ Editor editor = inputEditor.getEditor()-->Line_7 $$ offset = editor.getCaretModel().getOffset()[ FD ]
Line_5 $$ Editor editor = inputEditor.getEditor()-->Line_6 $$ if (editor != null) [ FD ]
Line_2 $$ private void evaluate() -->Line_15 $$ if (offset >= 0 && editor != null) [ CD ]
Line_9 $$ final XDebuggerTree tree = myTreePanel.getTree()-->Line_10 $$ tree.markNodesObsolete()[ FD ]
Line_2 $$ private void evaluate() -->Line_6 $$ if (editor != null) [ CD ]
Line_3 $$ final XDebuggerEditorBase inputEditor = getInputEditor()-->Line_14 $$ inputEditor.selectAll()[ FD ]
Line_3 $$ final XDebuggerEditorBase inputEditor = getInputEditor()-->Line_5 $$ Editor editor = inputEditor.getEditor()[ FD ]
Line_15 $$ if (offset >= 0 && editor != null) -->Line_16 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)[ CD ]
Line_16 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)-->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_13 $$ editor = inputEditor.getEditor()-->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_4 $$ int offset = -1-->Line_18 $$ editor.getSelectionModel().setSelection(offset, offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_14 $$ inputEditor.selectAll()[ CD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_16 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_4 $$ int offset = -1[ CD ]
Line_2 $$ private void evaluate() -->Line_13 $$ editor = inputEditor.getEditor()[ CD ]
Line_4 $$ int offset = -1-->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_16 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)-->Line_18 $$ editor.getSelectionModel().setSelection(offset, offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_9 $$ final XDebuggerTree tree = myTreePanel.getTree()[ CD ]
Line_13 $$ editor = inputEditor.getEditor()-->Line_16 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)[ FD ]
Line_4 $$ int offset = -1-->Line_7 $$ offset = editor.getCaretModel().getOffset()[ FD ]
Line_6 $$ if (editor != null) -->Line_7 $$ offset = editor.getCaretModel().getOffset()[ CD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_3 $$ final XDebuggerEditorBase inputEditor = getInputEditor()[ CD ]
Line_7 $$ offset = editor.getCaretModel().getOffset()-->Line_18 $$ editor.getSelectionModel().setSelection(offset, offset)[ FD ]
Line_5 $$ Editor editor = inputEditor.getEditor()-->Line_16 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)[ FD ]
Line_2 $$ private void evaluate() -->Line_5 $$ Editor editor = inputEditor.getEditor()[ CD ]
Line_2 $$ private void evaluate() -->Line_10 $$ tree.markNodesObsolete()[ CD ]
Line_5 $$ Editor editor = inputEditor.getEditor()-->Line_18 $$ editor.getSelectionModel().setSelection(offset, offset)[ FD ]
Line_5 $$ Editor editor = inputEditor.getEditor()-->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ FD ]
Line_9 $$ final XDebuggerTree tree = myTreePanel.getTree()-->Line_11 $$ tree.setRoot(new EvaluatingExpressionRootNode(this, tree), false)[ FD ]
Line_2 $$ private void evaluate() -->Line_11 $$ tree.setRoot(new EvaluatingExpressionRootNode(this, tree), false)[ CD ]
Line_4 $$ int offset = -1-->Line_16 $$ offset = Math.min(editor.getDocument().getTextLength(), offset)[ FD ]
Line_15 $$ if (offset >= 0 && editor != null) -->Line_17 $$ editor.getCaretModel().moveToOffset(offset)[ CD ]
Line_13 $$ editor = inputEditor.getEditor()-->Line_18 $$ editor.getSelectionModel().setSelection(offset, offset)[ FD ]
