Line_4 $$ DataContext dataContext = getDataContext()-->Line_5 $$ Utils.expandActionGroup(myActionGroup, newVisibleActions, myPresentationFactory, dataContext, myPlace, myActionManager, transparentOnly)[ FD ]
Line_19 $$ Container parent = getParent()-->Line_20 $$ if (parent != null) [ FD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_9 $$ Dimension oldSize = getPreferredSize()[ CD ]
Line_2 $$ private void updateActionsImpl(boolean transparentOnly, boolean forced) -->Line_5 $$ Utils.expandActionGroup(myActionGroup, newVisibleActions, myPresentationFactory, dataContext, myPlace, myActionManager, transparentOnly)[ CD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_16 $$ if (shouldRebuildUI) [ CD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_11 $$ mySecondaryActions.removeAll()[ CD ]
Line_2 $$ private void updateActionsImpl(boolean transparentOnly, boolean forced) -->Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) [ FD ]
Line_3 $$ List<AnAction> newVisibleActions = ContainerUtil.newArrayListWithCapacity(myVisibleActions.size())-->Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) [ FD ]
Line_20 $$ if (parent != null) -->Line_22 $$ parent.validate()[ CD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_14 $$ Dimension newSize = getPreferredSize()[ CD ]
Line_2 $$ private void updateActionsImpl(boolean transparentOnly, boolean forced) -->Line_4 $$ DataContext dataContext = getDataContext()[ CD ]
Line_19 $$ Container parent = getParent()-->Line_21 $$ parent.invalidate()[ FD ]
Line_3 $$ List<AnAction> newVisibleActions = ContainerUtil.newArrayListWithCapacity(myVisibleActions.size())-->Line_5 $$ Utils.expandActionGroup(myActionGroup, newVisibleActions, myPresentationFactory, dataContext, myPlace, myActionManager, transparentOnly)[ FD ]
Line_2 $$ private void updateActionsImpl(boolean transparentOnly, boolean forced) -->Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) [ CD ]
Line_20 $$ if (parent != null) -->Line_21 $$ parent.invalidate()[ CD ]
Line_2 $$ private void updateActionsImpl(boolean transparentOnly, boolean forced) -->Line_3 $$ List<AnAction> newVisibleActions = ContainerUtil.newArrayListWithCapacity(myVisibleActions.size())[ CD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_7 $$ boolean shouldRebuildUI = newVisibleActions.isEmpty() || myVisibleActions.isEmpty()[ CD ]
Line_19 $$ Container parent = getParent()-->Line_22 $$ parent.validate()[ FD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_13 $$ fillToolBar(myVisibleActions, getLayoutPolicy() == AUTO_LAYOUT_POLICY && myOrientation == SwingConstants.HORIZONTAL)[ CD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_15 $$ ((WindowManagerEx) WindowManager.getInstance()).adjustContainerWindow(this, oldSize, newSize)[ CD ]
Line_2 $$ private void updateActionsImpl(boolean transparentOnly, boolean forced) -->Line_5 $$ Utils.expandActionGroup(myActionGroup, newVisibleActions, myPresentationFactory, dataContext, myPlace, myActionManager, transparentOnly)[ FD ]
Line_16 $$ if (shouldRebuildUI) -->Line_17 $$ revalidate()[ CD ]
Line_3 $$ List<AnAction> newVisibleActions = ContainerUtil.newArrayListWithCapacity(myVisibleActions.size())-->Line_7 $$ boolean shouldRebuildUI = newVisibleActions.isEmpty() || myVisibleActions.isEmpty()[ FD ]
Line_14 $$ Dimension newSize = getPreferredSize()-->Line_15 $$ ((WindowManagerEx) WindowManager.getInstance()).adjustContainerWindow(this, oldSize, newSize)[ FD ]
Line_16 $$ if (shouldRebuildUI) -->Line_19 $$ Container parent = getParent()[ CD ]
Line_16 $$ if (shouldRebuildUI) -->Line_20 $$ if (parent != null) [ CD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_25 $$ repaint()[ CD ]
Line_6 $$ if (forced || !newVisibleActions.equals(myVisibleActions)) -->Line_10 $$ removeAll()[ CD ]
Line_9 $$ Dimension oldSize = getPreferredSize()-->Line_15 $$ ((WindowManagerEx) WindowManager.getInstance()).adjustContainerWindow(this, oldSize, newSize)[ FD ]
