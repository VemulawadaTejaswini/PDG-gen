Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_22 $$ if (java.util.Date.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_25 $$ if (Long.class.isAssignableFrom(type)) [ FD ]
Line_6 $$ if (Instant.class.isAssignableFrom(type)) -->Line_7 $$ return (X) instant[ CD ]
Line_25 $$ if (Long.class.isAssignableFrom(type)) -->Line_26 $$ return (X) Long.valueOf(instant.toEpochMilli())[ CD ]
Line_9 $$ if (Calendar.class.isAssignableFrom(type)) -->Line_10 $$ final ZoneId zoneId = ZoneId.ofOffset("UTC", ZoneOffset.UTC)[ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_16 $$ if (java.sql.Date.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_22 $$ if (java.util.Date.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_23 $$ return (X) Date.from(instant)[ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_25 $$ if (Long.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_13 $$ if (java.sql.Timestamp.class.isAssignableFrom(type)) [ FD ]
Line_16 $$ if (java.sql.Date.class.isAssignableFrom(type)) -->Line_17 $$ return (X) java.sql.Date.from(instant)[ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_19 $$ if (java.sql.Time.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_20 $$ return (X) java.sql.Time.from(instant)[ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_6 $$ if (Instant.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_28 $$ throw unknownUnwrap(type)[ FD ]
Line_10 $$ final ZoneId zoneId = ZoneId.ofOffset("UTC", ZoneOffset.UTC)-->Line_11 $$ return (X) GregorianCalendar.from(instant.atZone(zoneId))[ FD ]
Line_9 $$ if (Calendar.class.isAssignableFrom(type)) -->Line_11 $$ return (X) GregorianCalendar.from(instant.atZone(zoneId))[ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_17 $$ return (X) java.sql.Date.from(instant)[ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_19 $$ if (java.sql.Time.class.isAssignableFrom(type)) [ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_14 $$ return (X) Timestamp.from(instant)[ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_9 $$ if (Calendar.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_9 $$ if (Calendar.class.isAssignableFrom(type)) [ FD ]
Line_22 $$ if (java.util.Date.class.isAssignableFrom(type)) -->Line_23 $$ return (X) Date.from(instant)[ CD ]
Line_3 $$ if (instant == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_6 $$ if (Instant.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_3 $$ if (instant == null) [ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_13 $$ if (java.sql.Timestamp.class.isAssignableFrom(type)) [ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_3 $$ if (instant == null) [ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_11 $$ return (X) GregorianCalendar.from(instant.atZone(zoneId))[ FD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_26 $$ return (X) Long.valueOf(instant.toEpochMilli())[ FD ]
Line_13 $$ if (java.sql.Timestamp.class.isAssignableFrom(type)) -->Line_14 $$ return (X) Timestamp.from(instant)[ CD ]
Line_2 $$ public <X> X unwrap(Instant instant, Class<X> type, WrapperOptions options) -->Line_16 $$ if (java.sql.Date.class.isAssignableFrom(type)) [ FD ]
Line_19 $$ if (java.sql.Time.class.isAssignableFrom(type)) -->Line_20 $$ return (X) java.sql.Time.from(instant)[ CD ]
