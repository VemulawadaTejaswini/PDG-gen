Line_7 $$ SortedMap<String, CompressionCodec> subMap = codecs.headMap(reversedFilename)-->Line_9 $$ String potentialSuffix = subMap.lastKey()[ FD ]
Line_6 $$ String reversedFilename = new StringBuilder(filename).reverse().toString()-->Line_10 $$ if (reversedFilename.startsWith(potentialSuffix)) [ FD ]
Line_4 $$ if (codecs != null) -->Line_7 $$ SortedMap<String, CompressionCodec> subMap = codecs.headMap(reversedFilename)[ CD ]
Line_2 $$ public CompressionCodec getCodec(Path file) -->Line_15 $$ return result[ CD ]
Line_9 $$ String potentialSuffix = subMap.lastKey()-->Line_10 $$ if (reversedFilename.startsWith(potentialSuffix)) [ FD ]
Line_2 $$ public CompressionCodec getCodec(Path file) -->Line_3 $$ CompressionCodec result = null[ CD ]
Line_9 $$ String potentialSuffix = subMap.lastKey()-->Line_11 $$ result = codecs.get(potentialSuffix)[ FD ]
Line_4 $$ if (codecs != null) -->Line_6 $$ String reversedFilename = new StringBuilder(filename).reverse().toString()[ CD ]
Line_7 $$ SortedMap<String, CompressionCodec> subMap = codecs.headMap(reversedFilename)-->Line_8 $$ if (!subMap.isEmpty()) [ FD ]
Line_2 $$ public CompressionCodec getCodec(Path file) -->Line_4 $$ if (codecs != null) [ CD ]
Line_8 $$ if (!subMap.isEmpty()) -->Line_9 $$ String potentialSuffix = subMap.lastKey()[ CD ]
Line_8 $$ if (!subMap.isEmpty()) -->Line_10 $$ if (reversedFilename.startsWith(potentialSuffix)) [ CD ]
Line_3 $$ CompressionCodec result = null-->Line_11 $$ result = codecs.get(potentialSuffix)[ FD ]
Line_4 $$ if (codecs != null) -->Line_5 $$ String filename = file.getName()[ CD ]
Line_10 $$ if (reversedFilename.startsWith(potentialSuffix)) -->Line_11 $$ result = codecs.get(potentialSuffix)[ CD ]
Line_6 $$ String reversedFilename = new StringBuilder(filename).reverse().toString()-->Line_7 $$ SortedMap<String, CompressionCodec> subMap = codecs.headMap(reversedFilename)[ FD ]
Line_4 $$ if (codecs != null) -->Line_8 $$ if (!subMap.isEmpty()) [ CD ]
Line_2 $$ public CompressionCodec getCodec(Path file) -->Line_5 $$ String filename = file.getName()[ FD ]
