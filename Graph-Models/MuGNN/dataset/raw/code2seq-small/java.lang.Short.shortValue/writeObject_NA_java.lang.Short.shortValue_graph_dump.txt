Line_35 $$ if (declaredClass == Float.TYPE) -->Line_36 $$ out.writeFloat(((Float) instance).floatValue())[ CD ]
Line_5 $$ declaredClass = Writable.class-->Line_39 $$ if (declaredClass == Void.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_38 $$ out.writeDouble(((Double) instance).doubleValue())[ FD ]
Line_22 $$ if (declaredClass.isPrimitive()) -->Line_43 $$ if (declaredClass.isEnum()) [ CD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_12 $$ if (declaredClass.isArray()) [ FD ]
Line_12 $$ if (declaredClass.isArray()) -->Line_15 $$ for (int i = 0; i < length; i++) [ CD ]
Line_4 $$ instance = new NullInstance(declaredClass, conf)-->Line_8 $$ instance = new ArrayPrimitiveWritable.Internal(instance)[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_18 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) [ FD ]
Line_15 $$ for (int i = 0; i < length; i++) -->Line_16 $$ writeObject(out, Array.get(instance, i), declaredClass.getComponentType(), conf, allowCompactArrays)[ CD ]
Line_5 $$ declaredClass = Writable.class-->Line_35 $$ if (declaredClass == Float.TYPE) [ FD ]
Line_31 $$ if (declaredClass == Integer.TYPE) -->Line_32 $$ out.writeInt(((Integer) instance).intValue())[ CD ]
Line_25 $$ if (declaredClass == Character.TYPE) -->Line_27 $$ if (declaredClass == Byte.TYPE) [ CD ]
Line_5 $$ declaredClass = Writable.class-->Line_7 $$ if (allowCompactArrays && declaredClass.isArray() && instance.getClass().getName().equals(declaredClass.getName()) && instance.getClass().getComponentType().isPrimitive()) [ FD ]
Line_37 $$ if (declaredClass == Double.TYPE) -->Line_39 $$ if (declaredClass == Void.TYPE) [ CD ]
Line_3 $$ if (instance == null) -->Line_5 $$ declaredClass = Writable.class[ CD ]
Line_31 $$ if (declaredClass == Integer.TYPE) -->Line_33 $$ if (declaredClass == Long.TYPE) [ CD ]
Line_37 $$ if (declaredClass == Double.TYPE) -->Line_38 $$ out.writeDouble(((Double) instance).doubleValue())[ CD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_25 $$ if (declaredClass == Character.TYPE) [ FD ]
Line_4 $$ instance = new NullInstance(declaredClass, conf)-->Line_46 $$ UTF8.writeString(out, instance.getClass().getName())[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_11 $$ UTF8.writeString(out, declaredClass.getName())[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_48 $$ if (Message.class.isAssignableFrom(declaredClass)) [ FD ]
Line_4 $$ instance = new NullInstance(declaredClass, conf)-->Line_7 $$ if (allowCompactArrays && declaredClass.isArray() && instance.getClass().getName().equals(declaredClass.getName()) && instance.getClass().getComponentType().isPrimitive()) [ FD ]
Line_8 $$ instance = new ArrayPrimitiveWritable.Internal(instance)-->Line_13 $$ int length = Array.getLength(instance)[ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_18 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) [ FD ]
Line_27 $$ if (declaredClass == Byte.TYPE) -->Line_28 $$ out.writeByte(((Byte) instance).byteValue())[ CD ]
Line_45 $$ if (Writable.class.isAssignableFrom(declaredClass)) -->Line_48 $$ if (Message.class.isAssignableFrom(declaredClass)) [ CD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_39 $$ if (declaredClass == Void.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_20 $$ if (declaredClass == String.class) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_33 $$ if (declaredClass == Long.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_7 $$ if (allowCompactArrays && declaredClass.isArray() && instance.getClass().getName().equals(declaredClass.getName()) && instance.getClass().getComponentType().isPrimitive()) [ CD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_11 $$ UTF8.writeString(out, declaredClass.getName())[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_8 $$ instance = new ArrayPrimitiveWritable.Internal(instance)[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_20 $$ if (declaredClass == String.class) [ FD ]
Line_7 $$ if (allowCompactArrays && declaredClass.isArray() && instance.getClass().getName().equals(declaredClass.getName()) && instance.getClass().getComponentType().isPrimitive()) -->Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class[ CD ]
Line_45 $$ if (Writable.class.isAssignableFrom(declaredClass)) -->Line_47 $$ ((Writable) instance).write(out)[ CD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_27 $$ if (declaredClass == Byte.TYPE) [ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_16 $$ writeObject(out, Array.get(instance, i), declaredClass.getComponentType(), conf, allowCompactArrays)[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_23 $$ if (declaredClass == Boolean.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_21 $$ UTF8.writeString(out, (String) instance)[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_46 $$ UTF8.writeString(out, instance.getClass().getName())[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_31 $$ if (declaredClass == Integer.TYPE) [ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_43 $$ if (declaredClass.isEnum()) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_25 $$ if (declaredClass == Character.TYPE) [ FD ]
Line_20 $$ if (declaredClass == String.class) -->Line_21 $$ UTF8.writeString(out, (String) instance)[ CD ]
Line_12 $$ if (declaredClass.isArray()) -->Line_18 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) [ CD ]
Line_5 $$ declaredClass = Writable.class-->Line_45 $$ if (Writable.class.isAssignableFrom(declaredClass)) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_28 $$ out.writeByte(((Byte) instance).byteValue())[ FD ]
Line_43 $$ if (declaredClass.isEnum()) -->Line_45 $$ if (Writable.class.isAssignableFrom(declaredClass)) [ CD ]
Line_12 $$ if (declaredClass.isArray()) -->Line_13 $$ int length = Array.getLength(instance)[ CD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_22 $$ if (declaredClass.isPrimitive()) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_44 $$ UTF8.writeString(out, ((Enum) instance).name())[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_29 $$ if (declaredClass == Short.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_37 $$ if (declaredClass == Double.TYPE) [ FD ]
Line_18 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) -->Line_20 $$ if (declaredClass == String.class) [ CD ]
Line_5 $$ declaredClass = Writable.class-->Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_4 $$ instance = new NullInstance(declaredClass, conf)[ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_43 $$ if (declaredClass.isEnum()) [ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_12 $$ if (declaredClass.isArray()) [ FD ]
Line_23 $$ if (declaredClass == Boolean.TYPE) -->Line_25 $$ if (declaredClass == Character.TYPE) [ CD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_45 $$ if (Writable.class.isAssignableFrom(declaredClass)) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_11 $$ UTF8.writeString(out, declaredClass.getName())[ CD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_24 $$ out.writeBoolean(((Boolean) instance).booleanValue())[ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_23 $$ if (declaredClass == Boolean.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_47 $$ ((Writable) instance).write(out)[ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_16 $$ writeObject(out, Array.get(instance, i), declaredClass.getComponentType(), conf, allowCompactArrays)[ FD ]
Line_45 $$ if (Writable.class.isAssignableFrom(declaredClass)) -->Line_46 $$ UTF8.writeString(out, instance.getClass().getName())[ CD ]
Line_48 $$ if (Message.class.isAssignableFrom(declaredClass)) -->Line_49 $$ ((Message) instance).writeDelimitedTo(DataOutputOutputStream.constructOutputStream(out))[ CD ]
Line_5 $$ declaredClass = Writable.class-->Line_18 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) [ FD ]
Line_12 $$ if (declaredClass.isArray()) -->Line_14 $$ out.writeInt(length)[ CD ]
Line_7 $$ if (allowCompactArrays && declaredClass.isArray() && instance.getClass().getName().equals(declaredClass.getName()) && instance.getClass().getComponentType().isPrimitive()) -->Line_8 $$ instance = new ArrayPrimitiveWritable.Internal(instance)[ CD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_26 $$ out.writeChar(((Character) instance).charValue())[ FD ]
Line_15 $$ for (int i = 0; i < length; i++) -->Line_16 $$ writeObject(out, Array.get(instance, i), declaredClass.getComponentType(), conf, allowCompactArrays)[ FD ]
Line_20 $$ if (declaredClass == String.class) -->Line_22 $$ if (declaredClass.isPrimitive()) [ CD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_25 $$ if (declaredClass == Character.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_14 $$ out.writeInt(length)[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_3 $$ if (instance == null) [ CD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_48 $$ if (Message.class.isAssignableFrom(declaredClass)) [ FD ]
Line_13 $$ int length = Array.getLength(instance)-->Line_14 $$ out.writeInt(length)[ FD ]
Line_27 $$ if (declaredClass == Byte.TYPE) -->Line_29 $$ if (declaredClass == Short.TYPE) [ CD ]
Line_25 $$ if (declaredClass == Character.TYPE) -->Line_26 $$ out.writeChar(((Character) instance).charValue())[ CD ]
Line_3 $$ if (instance == null) -->Line_4 $$ instance = new NullInstance(declaredClass, conf)[ CD ]
Line_5 $$ declaredClass = Writable.class-->Line_37 $$ if (declaredClass == Double.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_35 $$ if (declaredClass == Float.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_27 $$ if (declaredClass == Byte.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_39 $$ if (declaredClass == Void.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_13 $$ int length = Array.getLength(instance)[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_12 $$ if (declaredClass.isArray()) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_43 $$ if (declaredClass.isEnum()) [ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_37 $$ if (declaredClass == Double.TYPE) [ FD ]
Line_43 $$ if (declaredClass.isEnum()) -->Line_44 $$ UTF8.writeString(out, ((Enum) instance).name())[ CD ]
Line_29 $$ if (declaredClass == Short.TYPE) -->Line_30 $$ out.writeShort(((Short) instance).shortValue())[ CD ]
Line_22 $$ if (declaredClass.isPrimitive()) -->Line_23 $$ if (declaredClass == Boolean.TYPE) [ CD ]
Line_4 $$ instance = new NullInstance(declaredClass, conf)-->Line_13 $$ int length = Array.getLength(instance)[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_16 $$ writeObject(out, Array.get(instance, i), declaredClass.getComponentType(), conf, allowCompactArrays)[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_19 $$ ((ArrayPrimitiveWritable.Internal) instance).write(out)[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_34 $$ out.writeLong(((Long) instance).longValue())[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_31 $$ if (declaredClass == Integer.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_7 $$ if (allowCompactArrays && declaredClass.isArray() && instance.getClass().getName().equals(declaredClass.getName()) && instance.getClass().getComponentType().isPrimitive()) [ FD ]
Line_33 $$ if (declaredClass == Long.TYPE) -->Line_35 $$ if (declaredClass == Float.TYPE) [ CD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_35 $$ if (declaredClass == Float.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_12 $$ if (declaredClass.isArray()) [ CD ]
Line_8 $$ instance = new ArrayPrimitiveWritable.Internal(instance)-->Line_46 $$ UTF8.writeString(out, instance.getClass().getName())[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_27 $$ if (declaredClass == Byte.TYPE) [ FD ]
Line_35 $$ if (declaredClass == Float.TYPE) -->Line_37 $$ if (declaredClass == Double.TYPE) [ CD ]
Line_33 $$ if (declaredClass == Long.TYPE) -->Line_34 $$ out.writeLong(((Long) instance).longValue())[ CD ]
Line_5 $$ declaredClass = Writable.class-->Line_29 $$ if (declaredClass == Short.TYPE) [ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_22 $$ if (declaredClass.isPrimitive()) [ FD ]
Line_4 $$ instance = new NullInstance(declaredClass, conf)-->Line_16 $$ writeObject(out, Array.get(instance, i), declaredClass.getComponentType(), conf, allowCompactArrays)[ FD ]
Line_18 $$ if (declaredClass == ArrayPrimitiveWritable.Internal.class) -->Line_19 $$ ((ArrayPrimitiveWritable.Internal) instance).write(out)[ CD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_20 $$ if (declaredClass == String.class) [ FD ]
Line_13 $$ int length = Array.getLength(instance)-->Line_15 $$ for (int i = 0; i < length; i++) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_5 $$ declaredClass = Writable.class[ FD ]
Line_29 $$ if (declaredClass == Short.TYPE) -->Line_31 $$ if (declaredClass == Integer.TYPE) [ CD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_45 $$ if (Writable.class.isAssignableFrom(declaredClass)) [ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_31 $$ if (declaredClass == Integer.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_3 $$ if (instance == null) [ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_48 $$ if (Message.class.isAssignableFrom(declaredClass)) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_23 $$ if (declaredClass == Boolean.TYPE) [ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_11 $$ UTF8.writeString(out, declaredClass.getName())[ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_33 $$ if (declaredClass == Long.TYPE) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_36 $$ out.writeFloat(((Float) instance).floatValue())[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_22 $$ if (declaredClass.isPrimitive()) [ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_49 $$ ((Message) instance).writeDelimitedTo(DataOutputOutputStream.constructOutputStream(out))[ FD ]
Line_8 $$ instance = new ArrayPrimitiveWritable.Internal(instance)-->Line_16 $$ writeObject(out, Array.get(instance, i), declaredClass.getComponentType(), conf, allowCompactArrays)[ FD ]
Line_9 $$ declaredClass = ArrayPrimitiveWritable.Internal.class-->Line_29 $$ if (declaredClass == Short.TYPE) [ FD ]
Line_23 $$ if (declaredClass == Boolean.TYPE) -->Line_24 $$ out.writeBoolean(((Boolean) instance).booleanValue())[ CD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_32 $$ out.writeInt(((Integer) instance).intValue())[ FD ]
Line_2 $$ public static void writeObject(DataOutput out, Object instance, Class declaredClass, Configuration conf, boolean allowCompactArrays) throws IOException -->Line_30 $$ out.writeShort(((Short) instance).shortValue())[ FD ]
Line_5 $$ declaredClass = Writable.class-->Line_33 $$ if (declaredClass == Long.TYPE) [ FD ]
