Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(courseExpected, shermanObjects[3])[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select e.student, e.semester, e.year, e.course from Enrolment e  where e.studentNumber = :studentNumber").setParameter("studentNumber", shermanEnrolmentExpected.getStudentNumber())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ assertNotNull(shermanObjects[0])[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertEquals(shermanEnrolmentExpected.getYear(), ((Short) shermanObjects[2]).shortValue())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ assertTrue(results instanceof Object[])[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select e.student, e.semester, e.year, e.course from Enrolment e  where e.studentNumber = :studentNumber").setParameter("studentNumber", shermanEnrolmentExpected.getStudentNumber())[ FD ]
Line_2 $$ public void testMultiEntityProjectionUnique() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertEquals(shermanEnrolmentExpected.getSemester(), ((Short) shermanObjects[1]).shortValue())[ CD ]
Line_2 $$ public void testMultiEntityProjectionUnique() throws Exception -->Line_27 $$ runTest(hqlExecutor, criteriaExecutor, checker, true)[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student")).add(Property.forName("semester")).add(Property.forName("year")).add(Property.forName("course"))).add(Restrictions.eq("studentNumber", Long.valueOf(shermanEnrolmentExpected.getStudentNumber())))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_27 $$ runTest(hqlExecutor, criteriaExecutor, checker, true)[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class).setProjection(Projections.projectionList().add(Property.forName("student")).add(Property.forName("semester")).add(Property.forName("year")).add(Property.forName("course"))).add(Restrictions.eq("studentNumber", Long.valueOf(shermanEnrolmentExpected.getStudentNumber())))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertTrue(!(shermanObjects[3] instanceof HibernateProxy))[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertTrue(shermanObjects[3] instanceof Course)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertTrue(shermanObjects[0] instanceof Student)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ Object[] shermanObjects = (Object[]) results[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select e.student, e.semester, e.year, e.course from Enrolment e  where e.studentNumber = :studentNumber").setParameter("studentNumber", shermanEnrolmentExpected.getStudentNumber())[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ assertEquals(4, shermanObjects.length)[ CD ]
