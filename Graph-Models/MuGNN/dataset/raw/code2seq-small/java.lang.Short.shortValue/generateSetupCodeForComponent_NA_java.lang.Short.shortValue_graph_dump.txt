Line_74 $$ if (isTextWithMnemonicProperty) -->Line_75 $$ textWithMnemonic = SupportCode.parseText((String) value)[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_130 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setDisplayedMnemonic", JLabel.class)[ FD ]
Line_25 $$ if (component instanceof LwContainer) -->Line_26 $$ final LwContainer container = (LwContainer) component[ CD ]
Line_13 $$ if (binding != null) -->Line_17 $$ myBuffer.append(componentClass)[ CD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_22 $$ startConstructor(componentClass)[ FD ]
Line_87 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_89 $$ if (propertyClass.equals(Double.class.getName())) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_31 $$ final LwIntrospectedProperty[] introspectedProperties = component.getAssignedIntrospectedProperties()[ FD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_50 $$ pushVar(variable)[ FD ]
Line_105 $$ if (propertyClass.equals(Insets.class.getName())) -->Line_106 $$ newInsets((Insets) value)[ CD ]
Line_109 $$ if (propertyClass.equals(Color.class.getName())) -->Line_111 $$ if (propertyClass.equals(Font.class.getName())) [ CD ]
Line_85 $$ if (propertyClass.equals(Dimension.class.getName())) -->Line_86 $$ newDimension((Dimension) value)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)[ FD ]
Line_97 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_99 $$ if (propertyClass.equals(Character.class.getName())) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_3 $$ id2component.put(component.getId(), component)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_5 $$ final LwContainer parent = component.getParent()[ FD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_28 $$ getComponentLayoutGenerator(container).generateContainerLayout(container, this, variable)[ FD ]
Line_113 $$ if (propertyClass.equals(Icon.class.getName())) -->Line_115 $$ if (property instanceof LwIntroEnumProperty) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_142 $$ if (component instanceof LwContainer) [ FD ]
Line_32 $$ Arrays.sort(introspectedProperties, new Comparator<LwIntrospectedProperty>() -->Line_34 $$ return p1.getName().compareTo(p2.getName())[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)[ FD ]
Line_26 $$ final LwContainer container = (LwContainer) component-->Line_28 $$ getComponentLayoutGenerator(container).generateContainerLayout(container, this, variable)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_32 $$ Arrays.sort(introspectedProperties, new Comparator<LwIntrospectedProperty>() [ CD ]
Line_46 $$ if (isTextWithMnemonicProperty) -->Line_63 $$ endMethod()[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_8 $$ if (component.isCustomCreate() && component.getBinding() == null) [ CD ]
Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_52 $$ endMethod()[ CD ]
Line_31 $$ final LwIntrospectedProperty[] introspectedProperties = component.getAssignedIntrospectedProperties()-->Line_32 $$ Arrays.sort(introspectedProperties, new Comparator<LwIntrospectedProperty>() [ FD ]
Line_32 $$ Arrays.sort(introspectedProperties, new Comparator<LwIntrospectedProperty>() -->Line_34 $$ return p1.getName().compareTo(p2.getName())[ FD ]
Line_13 $$ if (binding != null) -->Line_16 $$ myBuffer.append("final ")[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_11 $$ if (!component.isCustomCreate()) [ FD ]
Line_101 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_103 $$ if (propertyClass.equals(Rectangle.class.getName())) [ CD ]
Line_107 $$ if (propertyClass.equals(String.class.getName())) -->Line_108 $$ push((String) value)[ CD ]
Line_13 $$ if (binding != null) -->Line_14 $$ myBuffer.append(binding)[ CD ]
Line_12 $$ final String binding = component.getBinding()-->Line_14 $$ myBuffer.append(binding)[ FD ]
Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)-->Line_42 $$ final boolean isTextWithMnemonicProperty = "text".equals(property.getName()) && (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope) || isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope))[ FD ]
Line_89 $$ if (propertyClass.equals(Double.class.getName())) -->Line_90 $$ push(((Double) value).doubleValue())[ CD ]
Line_13 $$ if (binding != null) -->Line_19 $$ myBuffer.append(variable)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_12 $$ final String binding = component.getBinding()[ FD ]
Line_127 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_128 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setMnemonic", AbstractButton.class)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_8 $$ if (component.isCustomCreate() && component.getBinding() == null) [ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_9 $$ throw new CodeGenerationException(component.getId(), UIDesignerBundle.message("error.custom.create.no.binding"))[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_134 $$ if (!(component.getParent() instanceof LwRootContainer)) [ CD ]
Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)-->Line_129 $$ if (isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_128 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setMnemonic", AbstractButton.class)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_25 $$ if (component instanceof LwContainer) [ CD ]
Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_57 $$ push(descriptor)[ CD ]
Line_46 $$ if (isTextWithMnemonicProperty) -->Line_62 $$ push(descriptor)[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_133 $$ generateClientProperties(component, variable)[ FD ]
Line_134 $$ if (!(component.getParent() instanceof LwRootContainer)) -->Line_135 $$ final String parentVariable = getVariable(parent, component2TempVariable, class2variableIndex, aClass)[ CD ]
Line_142 $$ if (component instanceof LwContainer) -->Line_144 $$ generateBorder(container, variable)[ CD ]
Line_26 $$ final LwContainer container = (LwContainer) component-->Line_145 $$ for (int i = 0; i < container.getComponentCount(); i++) [ FD ]
Line_45 $$ if (descriptor.getValue() == null) -->Line_46 $$ if (isTextWithMnemonicProperty) [ CD ]
Line_13 $$ if (binding != null) -->Line_18 $$ myBuffer.append(" ")[ CD ]
Line_134 $$ if (!(component.getParent() instanceof LwRootContainer)) -->Line_140 $$ getComponentLayoutGenerator(component.getParent()).generateComponentLayout(component, this, componentVar, parentVariable)[ CD ]
Line_103 $$ if (propertyClass.equals(Rectangle.class.getName())) -->Line_105 $$ if (propertyClass.equals(Insets.class.getName())) [ CD ]
Line_46 $$ if (isTextWithMnemonicProperty) -->Line_61 $$ startMethodCall(variable, property.getWriteMethodName())[ CD ]
Line_142 $$ if (component instanceof LwContainer) -->Line_145 $$ for (int i = 0; i < container.getComponentCount(); i++) [ CD ]
Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)-->Line_127 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_111 $$ if (propertyClass.equals(Font.class.getName())) -->Line_113 $$ if (propertyClass.equals(Icon.class.getName())) [ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_84 $$ startMethodCall(variable, property.getWriteMethodName())[ FD ]
Line_91 $$ if (propertyClass.equals(Float.class.getName())) -->Line_92 $$ push(((Float) value).floatValue())[ CD ]
Line_109 $$ if (propertyClass.equals(Color.class.getName())) -->Line_110 $$ pushColor((ColorDescriptor) value)[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_144 $$ generateBorder(container, variable)[ FD ]
Line_145 $$ for (int i = 0; i < container.getComponentCount(); i++) -->Line_146 $$ generateSetupCodeForComponent((LwComponent) container.getComponent(i), component2TempVariable, class2variableIndex, id2component, module, aClass)[ CD ]
Line_43 $$ if (property instanceof LwRbIntroStringProperty) -->Line_45 $$ if (descriptor.getValue() == null) [ CD ]
Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_56 $$ pushVar(variable)[ CD ]
Line_89 $$ if (propertyClass.equals(Double.class.getName())) -->Line_91 $$ if (propertyClass.equals(Float.class.getName())) [ CD ]
Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_58 $$ endMethod()[ CD ]
Line_127 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_129 $$ if (isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope)) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_134 $$ if (!(component.getParent() instanceof LwRootContainer)) [ FD ]
Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_50 $$ pushVar(variable)[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_56 $$ pushVar(variable)[ FD ]
Line_5 $$ final LwContainer parent = component.getParent()-->Line_135 $$ final String parentVariable = getVariable(parent, component2TempVariable, class2variableIndex, aClass)[ FD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_17 $$ myBuffer.append(componentClass)[ FD ]
Line_43 $$ if (property instanceof LwRbIntroStringProperty) -->Line_69 $$ if (property instanceof LwIntroListModelProperty) [ CD ]
Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_55 $$ startMethodCall("this", AsmCodeGenerator.LOAD_LABEL_TEXT_METHOD)[ CD ]
Line_129 $$ if (isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope)) -->Line_130 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setDisplayedMnemonic", JLabel.class)[ CD ]
Line_87 $$ if (propertyClass.equals(Integer.class.getName())) -->Line_88 $$ push(((Integer) value).intValue())[ CD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_19 $$ myBuffer.append(variable)[ FD ]
Line_134 $$ if (!(component.getParent() instanceof LwRootContainer)) -->Line_137 $$ if (component instanceof LwNestedForm) [ CD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_129 $$ if (isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_12 $$ final String binding = component.getBinding()[ CD ]
Line_95 $$ if (propertyClass.equals(Short.class.getName())) -->Line_96 $$ push(((Short) value).shortValue())[ CD ]
Line_93 $$ if (propertyClass.equals(Long.class.getName())) -->Line_95 $$ if (propertyClass.equals(Short.class.getName())) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_5 $$ final LwContainer parent = component.getParent()[ CD ]
Line_115 $$ if (property instanceof LwIntroEnumProperty) -->Line_116 $$ pushVar(propertyClass.replace('$', '.') + "." + value.toString())[ CD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_22 $$ startConstructor(componentClass)[ CD ]
Line_95 $$ if (propertyClass.equals(Short.class.getName())) -->Line_97 $$ if (propertyClass.equals(Byte.class.getName())) [ CD ]
Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_49 $$ startMethodCall("this", AsmCodeGenerator.LOAD_BUTTON_TEXT_METHOD)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_11 $$ if (!component.isCustomCreate()) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_133 $$ generateClientProperties(component, variable)[ CD ]
Line_113 $$ if (propertyClass.equals(Icon.class.getName())) -->Line_114 $$ pushIcon((IconDescriptor) value)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())[ FD ]
Line_26 $$ final LwContainer container = (LwContainer) component-->Line_146 $$ generateSetupCodeForComponent((LwComponent) container.getComponent(i), component2TempVariable, class2variableIndex, id2component, module, aClass)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_133 $$ generateClientProperties(component, variable)[ FD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_61 $$ startMethodCall(variable, property.getWriteMethodName())[ FD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_70 $$ generateListModelProperty(property, class2variableIndex, aClass, value, variable)[ FD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_42 $$ final boolean isTextWithMnemonicProperty = "text".equals(property.getName()) && (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope) || isAssignableFrom(JLabel.class.getName(), componentClass, globalSearchScope))[ FD ]
Line_107 $$ if (propertyClass.equals(String.class.getName())) -->Line_109 $$ if (propertyClass.equals(Color.class.getName())) [ CD ]
Line_105 $$ if (propertyClass.equals(Insets.class.getName())) -->Line_107 $$ if (propertyClass.equals(String.class.getName())) [ CD ]
Line_25 $$ if (component instanceof LwContainer) -->Line_27 $$ if (!container.isCustomCreate() || container.getComponentCount() > 0) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_70 $$ generateListModelProperty(property, class2variableIndex, aClass, value, variable)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_130 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setDisplayedMnemonic", JLabel.class)[ FD ]
Line_99 $$ if (propertyClass.equals(Character.class.getName())) -->Line_101 $$ if (propertyClass.equals(Boolean.class.getName())) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_140 $$ getComponentLayoutGenerator(component.getParent()).generateComponentLayout(component, this, componentVar, parentVariable)[ FD ]
Line_26 $$ final LwContainer container = (LwContainer) component-->Line_27 $$ if (!container.isCustomCreate() || container.getComponentCount() > 0) [ FD ]
Line_26 $$ final LwContainer container = (LwContainer) component-->Line_144 $$ generateBorder(container, variable)[ FD ]
Line_111 $$ if (propertyClass.equals(Font.class.getName())) -->Line_112 $$ pushFont(variable, (FontDescriptor) value, property.getReadMethodName())[ CD ]
Line_93 $$ if (propertyClass.equals(Long.class.getName())) -->Line_94 $$ push(((Long) value).longValue())[ CD ]
Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) -->Line_51 $$ push(descriptor)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_31 $$ final LwIntrospectedProperty[] introspectedProperties = component.getAssignedIntrospectedProperties()[ CD ]
Line_145 $$ for (int i = 0; i < container.getComponentCount(); i++) -->Line_146 $$ generateSetupCodeForComponent((LwComponent) container.getComponent(i), component2TempVariable, class2variableIndex, id2component, module, aClass)[ FD ]
Line_69 $$ if (property instanceof LwIntroListModelProperty) -->Line_70 $$ generateListModelProperty(property, class2variableIndex, aClass, value, variable)[ CD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_46 $$ if (isTextWithMnemonicProperty) -->Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_135 $$ final String parentVariable = getVariable(parent, component2TempVariable, class2variableIndex, aClass)[ FD ]
Line_6 $$ final String variable = getVariable(component, component2TempVariable, class2variableIndex, aClass)-->Line_112 $$ pushFont(variable, (FontDescriptor) value, property.getReadMethodName())[ FD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_21 $$ myBuffer.append('=')[ CD ]
Line_12 $$ final String binding = component.getBinding()-->Line_13 $$ if (binding != null) [ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_3 $$ id2component.put(component.getId(), component)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_137 $$ if (component instanceof LwNestedForm) [ FD ]
Line_7 $$ final String componentClass = component instanceof LwNestedForm ? getNestedFormClass(module, (LwNestedForm) component) : getComponentLayoutGenerator(component.getParent()).mapComponentClass(component.getComponentClassName())-->Line_127 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_13 $$ if (binding != null) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_41 $$ Object value = component.getPropertyValue(property)[ FD ]
Line_11 $$ if (!component.isCustomCreate()) -->Line_23 $$ endConstructor()[ CD ]
Line_27 $$ if (!container.isCustomCreate() || container.getComponentCount() > 0) -->Line_28 $$ getComponentLayoutGenerator(container).generateContainerLayout(container, this, variable)[ CD ]
Line_85 $$ if (propertyClass.equals(Dimension.class.getName())) -->Line_87 $$ if (propertyClass.equals(Integer.class.getName())) [ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_128 $$ generateSetMnemonic(variable, textWithMnemonic, module, "setMnemonic", AbstractButton.class)[ FD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_142 $$ if (component instanceof LwContainer) [ CD ]
Line_4 $$ GlobalSearchScope globalSearchScope = module.getModuleWithDependenciesAndLibrariesScope(false)-->Line_47 $$ if (isAssignableFrom(AbstractButton.class.getName(), componentClass, globalSearchScope)) [ FD ]
Line_101 $$ if (propertyClass.equals(Boolean.class.getName())) -->Line_102 $$ push(((Boolean) value).booleanValue())[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_146 $$ generateSetupCodeForComponent((LwComponent) container.getComponent(i), component2TempVariable, class2variableIndex, id2component, module, aClass)[ FD ]
Line_97 $$ if (propertyClass.equals(Byte.class.getName())) -->Line_98 $$ push(((Byte) value).byteValue())[ CD ]
Line_45 $$ if (descriptor.getValue() == null) -->Line_67 $$ value = descriptor.getValue()[ CD ]
Line_79 $$ if (propertyClass.equals(Color.class.getName())) -->Line_81 $$ if (!descriptor.isColorSet())[ CD ]
Line_103 $$ if (propertyClass.equals(Rectangle.class.getName())) -->Line_104 $$ newRectangle((Rectangle) value)[ CD ]
Line_2 $$ private void generateSetupCodeForComponent(final LwComponent component, final HashMap<LwComponent, String> component2TempVariable, final TObjectIntHashMap<String> class2variableIndex, final HashMap<String, LwComponent> id2component, final Module module, final PsiClass aClass) throws CodeGenerationException -->Line_25 $$ if (component instanceof LwContainer) [ FD ]
Line_91 $$ if (propertyClass.equals(Float.class.getName())) -->Line_93 $$ if (propertyClass.equals(Long.class.getName())) [ CD ]
Line_99 $$ if (propertyClass.equals(Character.class.getName())) -->Line_100 $$ push(((Character) value).charValue())[ CD ]
