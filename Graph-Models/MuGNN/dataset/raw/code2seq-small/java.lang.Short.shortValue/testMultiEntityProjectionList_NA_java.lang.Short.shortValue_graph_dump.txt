Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_22 $$ assertEquals(yogiEnrolmentExpected.getSemester(), ((Short) yogiObjects[1]).shortValue())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_18 $$ Object[] shermanObjects = (Object[]) resultList.get(1)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_26 $$ assertEquals(shermanEnrolmentExpected.getYear(), ((Short) shermanObjects[2]).shortValue())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_24 $$ assertEquals(courseExpected, yogiObjects[3])[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_20 $$ assertTrue(yogiObjects[0] instanceof Student)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_23 $$ assertEquals(yogiEnrolmentExpected.getYear(), ((Short) yogiObjects[2]).shortValue())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_19 $$ assertEquals(4, yogiObjects.length)[ CD ]
Line_2 $$ public void testMultiEntityProjectionList() throws Exception -->Line_31 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select e.student, e.semester, e.year, e.course from Enrolment e order by e.studentNumber")[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_31 $$ runTest(hqlExecutor, criteriaExecutor, checker, false)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_16 $$ assertEquals(2, resultList.size())[ CD ]
Line_8 $$ HqlExecutor hqlExecutor = new HqlExecutor() -->Line_10 $$ return s.createQuery("select e.student, e.semester, e.year, e.course from Enrolment e order by e.studentNumber")[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_28 $$ assertEquals(courseExpected, shermanObjects[3])[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_15 $$ List resultList = (List) results[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_10 $$ return s.createQuery("select e.student, e.semester, e.year, e.course from Enrolment e order by e.studentNumber")[ FD ]
Line_15 $$ List resultList = (List) results-->Line_18 $$ Object[] shermanObjects = (Object[]) resultList.get(1)[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_27 $$ assertTrue(shermanObjects[3] instanceof Course)[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_21 $$ assertTrue(shermanObjects[0] instanceof Student)[ CD ]
Line_15 $$ List resultList = (List) results-->Line_17 $$ Object[] yogiObjects = (Object[]) resultList.get(0)[ FD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.projectionList().add(Property.forName("e.student")).add(Property.forName("e.semester")).add(Property.forName("e.year")).add(Property.forName("e.course"))).addOrder(Order.asc("e.studentNumber"))[ CD ]
Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() -->Line_5 $$ return s.createCriteria(Enrolment.class, "e").setProjection(Projections.projectionList().add(Property.forName("e.student")).add(Property.forName("e.semester")).add(Property.forName("e.year")).add(Property.forName("e.course"))).addOrder(Order.asc("e.studentNumber"))[ FD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_25 $$ assertEquals(shermanEnrolmentExpected.getSemester(), ((Short) shermanObjects[1]).shortValue())[ CD ]
Line_13 $$ ResultChecker checker = new ResultChecker() -->Line_17 $$ Object[] yogiObjects = (Object[]) resultList.get(0)[ CD ]
Line_2 $$ public void testMultiEntityProjectionList() throws Exception -->Line_3 $$ CriteriaExecutor criteriaExecutor = new CriteriaExecutor() [ CD ]
Line_15 $$ List resultList = (List) results-->Line_16 $$ assertEquals(2, resultList.size())[ FD ]
