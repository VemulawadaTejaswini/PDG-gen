Line_5 $$ Transaction t = s.beginTransaction()-->Line_7 $$ t.commit()[ FD ]
Line_6 $$ List resultList = s.createCriteria(Enrolment.class).setCacheable(isCacheableQuery).setFetchMode("student", FetchMode.JOIN).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year").add(Property.forName("course"), "course")).addOrder(Order.asc("studentNumber")).list()-->Line_10 $$ Object[] yogiObjects = (Object[]) resultList.get(0)[ FD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_5 $$ Transaction t = s.beginTransaction()[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_20 $$ assertEquals(shermanEnrolmentExpected.getSemester(), ((Short) shermanObjects[1]).shortValue())[ CD ]
Line_6 $$ List resultList = s.createCriteria(Enrolment.class).setCacheable(isCacheableQuery).setFetchMode("student", FetchMode.JOIN).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year").add(Property.forName("course"), "course")).addOrder(Order.asc("studentNumber")).list()-->Line_9 $$ assertEquals(2, resultList.size())[ FD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_9 $$ assertEquals(2, resultList.size())[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_14 $$ assertTrue(Hibernate.isInitialized(yogiObjects[0]))[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_23 $$ assertTrue(shermanObjects[3] instanceof Course)[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_13 $$ assertTrue(yogiObjects[0] instanceof Student)[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_17 $$ assertEquals(courseExpected, yogiObjects[3])[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_7 $$ t.commit()[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_10 $$ Object[] yogiObjects = (Object[]) resultList.get(0)[ CD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ List resultList = s.createCriteria(Enrolment.class).setCacheable(isCacheableQuery).setFetchMode("student", FetchMode.JOIN).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year").add(Property.forName("course"), "course")).addOrder(Order.asc("studentNumber")).list()[ FD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_11 $$ Object[] shermanObjects = (Object[]) resultList.get(1)[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_12 $$ assertEquals(4, yogiObjects.length)[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_4 $$ s.setCacheMode(sessionCacheMode)[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_18 $$ assertTrue(shermanObjects[0] instanceof Student)[ CD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.close()[ FD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_4 $$ s.setCacheMode(sessionCacheMode)[ FD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_24 $$ assertEquals(courseExpected, shermanObjects[3])[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_21 $$ assertEquals(shermanEnrolmentExpected.getYear(), ((Short) shermanObjects[2]).shortValue())[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_6 $$ List resultList = s.createCriteria(Enrolment.class).setCacheable(isCacheableQuery).setFetchMode("student", FetchMode.JOIN).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year").add(Property.forName("course"), "course")).addOrder(Order.asc("studentNumber")).list()[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_22 $$ assertTrue(!(shermanObjects[3] instanceof HibernateProxy))[ CD ]
Line_6 $$ List resultList = s.createCriteria(Enrolment.class).setCacheable(isCacheableQuery).setFetchMode("student", FetchMode.JOIN).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year").add(Property.forName("course"), "course")).addOrder(Order.asc("studentNumber")).list()-->Line_11 $$ Object[] shermanObjects = (Object[]) resultList.get(1)[ FD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_6 $$ List resultList = s.createCriteria(Enrolment.class).setCacheable(isCacheableQuery).setFetchMode("student", FetchMode.JOIN).setProjection(Projections.projectionList().add(Property.forName("student"), "student").add(Property.forName("semester"), "semester").add(Property.forName("year"), "year").add(Property.forName("course"), "course")).addOrder(Order.asc("studentNumber")).list()[ FD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_8 $$ s.close()[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_16 $$ assertEquals(yogiEnrolmentExpected.getYear(), ((Short) yogiObjects[2]).shortValue())[ CD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_19 $$ assertTrue(Hibernate.isInitialized(shermanObjects[0]))[ CD ]
Line_3 $$ Session s = openSession()-->Line_5 $$ Transaction t = s.beginTransaction()[ FD ]
Line_2 $$ private void multiPropProjectionNoTransformerDynNonLazy(CacheMode sessionCacheMode, boolean isCacheableQuery) -->Line_15 $$ assertEquals(yogiEnrolmentExpected.getSemester(), ((Short) yogiObjects[1]).shortValue())[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.setCacheMode(sessionCacheMode)[ FD ]
