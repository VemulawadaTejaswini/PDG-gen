Line_10 $$ final String pattern = AnnotationUtilEx.calcAnnotationValue(psiAnnotation, "value")-->Line_31 $$ if (!pattern.matcher(o).matches()) [ FD ]
Line_10 $$ final String pattern = AnnotationUtilEx.calcAnnotationValue(psiAnnotation, "value")-->Line_38 $$ holder.registerProblem(expression, MessageFormat.format("Expression ''[ FD ]
Line_11 $$ Pattern p = null-->Line_18 $$ return Result.create(p, (Object[]) annotations)[ FD ]
Line_6 $$ CachedValue<Pattern> p = psiAnnotation.getUserData(COMPLIED_PATTERN)-->Line_14 $$ p = Pattern.compile(pattern)[ FD ]
Line_14 $$ p = Pattern.compile(pattern)-->Line_21 $$ p = CachedValuesManager.getManager(expression.getProject()).createCachedValue(provider, false)[ FD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_36 $$ holder.registerProblem(expression, MessageFormat.format("Expression ''[ FD ]
Line_8 $$ final CachedValueProvider<Pattern> provider = new CachedValueProvider<Pattern>() -->Line_18 $$ return Result.create(p, (Object[]) annotations)[ CD ]
Line_32 $$ if (annotations.length > 1) -->Line_36 $$ holder.registerProblem(expression, MessageFormat.format("Expression ''[ CD ]
Line_11 $$ Pattern p = null-->Line_24 $$ final Pattern pattern = p.getValue()[ FD ]
Line_32 $$ if (annotations.length > 1) -->Line_38 $$ holder.registerProblem(expression, MessageFormat.format("Expression ''[ CD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_25 $$ if (pattern == null)[ CD ]
Line_10 $$ final String pattern = AnnotationUtilEx.calcAnnotationValue(psiAnnotation, "value")-->Line_14 $$ p = Pattern.compile(pattern)[ FD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_7 $$ if (p == null) [ CD ]
Line_5 $$ final PsiAnnotation psiAnnotation = annotations[0]-->Line_22 $$ psiAnnotation.putUserData(COMPLIED_PATTERN, p)[ FD ]
Line_32 $$ if (annotations.length > 1) -->Line_33 $$ final String fqn = annotations[annotations.length - 1].getQualifiedName()[ CD ]
Line_8 $$ final CachedValueProvider<Pattern> provider = new CachedValueProvider<Pattern>() -->Line_12 $$ if (pattern != null) [ CD ]
Line_21 $$ p = CachedValuesManager.getManager(expression.getProject()).createCachedValue(provider, false)-->Line_24 $$ final Pattern pattern = p.getValue()[ FD ]
Line_55 $$ if (resolvedAnnos.length == 2 && annotations.length == 2 && Comparing.strEqual(resolvedAnnos[1].getQualifiedName(), annotations[1].getQualifiedName())) -->Line_56 $$ return[ CD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_24 $$ final Pattern pattern = p.getValue()[ CD ]
Line_11 $$ Pattern p = null-->Line_21 $$ p = CachedValuesManager.getManager(expression.getProject()).createCachedValue(provider, false)[ FD ]
Line_46 $$ if (expr instanceof PsiMethodCallExpression) -->Line_47 $$ e = ((PsiMethodCallExpression) expr).getMethodExpression().resolve()[ CD ]
Line_14 $$ p = Pattern.compile(pattern)-->Line_24 $$ final Pattern pattern = p.getValue()[ FD ]
Line_44 $$ if (expr instanceof PsiReferenceExpression) -->Line_45 $$ e = ((PsiReferenceExpression) expr).resolve()[ CD ]
Line_8 $$ final CachedValueProvider<Pattern> provider = new CachedValueProvider<Pattern>() -->Line_11 $$ Pattern p = null[ CD ]
Line_6 $$ CachedValue<Pattern> p = psiAnnotation.getUserData(COMPLIED_PATTERN)-->Line_21 $$ p = CachedValuesManager.getManager(expression.getProject()).createCachedValue(provider, false)[ FD ]
Line_11 $$ Pattern p = null-->Line_14 $$ p = Pattern.compile(pattern)[ FD ]
Line_10 $$ final String pattern = AnnotationUtilEx.calcAnnotationValue(psiAnnotation, "value")-->Line_25 $$ if (pattern == null)[ FD ]
Line_32 $$ if (annotations.length > 1) -->Line_35 $$ final String name = StringUtil.getShortName(fqn)[ CD ]
Line_30 $$ if (o != null) -->Line_41 $$ if (CHECK_NON_CONSTANT_VALUES) [ CD ]
Line_53 $$ if (owner != null && PsiUtilEx.isLanguageAnnotationTarget(owner)) -->Line_54 $$ PsiAnnotation[] resolvedAnnos = AnnotationUtilEx.getAnnotationFrom(owner, myConfiguration.getAdvancedConfiguration().getPatternAnnotationPair(), true)[ CD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_30 $$ if (o != null) [ CD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_38 $$ holder.registerProblem(expression, MessageFormat.format("Expression ''[ FD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_64 $$ holder.registerProblem(expr, "Unsubstituted expression", quickFix)[ FD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_28 $$ final Object result = new SubstitutedExpressionEvaluationHelper(expression.getProject()).computeExpression(expression, myConfiguration.getAdvancedConfiguration().getDfaOption(), false, nonConstantElements)[ CD ]
Line_30 $$ if (o != null) -->Line_31 $$ if (!pattern.matcher(o).matches()) [ CD ]
Line_44 $$ if (expr instanceof PsiReferenceExpression) -->Line_46 $$ if (expr instanceof PsiMethodCallExpression) [ CD ]
Line_5 $$ final PsiAnnotation psiAnnotation = annotations[0]-->Line_6 $$ CachedValue<Pattern> p = psiAnnotation.getUserData(COMPLIED_PATTERN)[ FD ]
Line_6 $$ CachedValue<Pattern> p = psiAnnotation.getUserData(COMPLIED_PATTERN)-->Line_22 $$ psiAnnotation.putUserData(COMPLIED_PATTERN, p)[ FD ]
Line_5 $$ final PsiAnnotation psiAnnotation = annotations[0]-->Line_10 $$ final String pattern = AnnotationUtilEx.calcAnnotationValue(psiAnnotation, "value")[ FD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_6 $$ CachedValue<Pattern> p = psiAnnotation.getUserData(COMPLIED_PATTERN)[ CD ]
Line_7 $$ if (p == null) -->Line_21 $$ p = CachedValuesManager.getManager(expression.getProject()).createCachedValue(provider, false)[ CD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_21 $$ p = CachedValuesManager.getManager(expression.getProject()).createCachedValue(provider, false)[ FD ]
Line_6 $$ CachedValue<Pattern> p = psiAnnotation.getUserData(COMPLIED_PATTERN)-->Line_7 $$ if (p == null) [ FD ]
Line_14 $$ p = Pattern.compile(pattern)-->Line_18 $$ return Result.create(p, (Object[]) annotations)[ FD ]
Line_6 $$ CachedValue<Pattern> p = psiAnnotation.getUserData(COMPLIED_PATTERN)-->Line_18 $$ return Result.create(p, (Object[]) annotations)[ FD ]
Line_21 $$ p = CachedValuesManager.getManager(expression.getProject()).createCachedValue(provider, false)-->Line_22 $$ psiAnnotation.putUserData(COMPLIED_PATTERN, p)[ FD ]
Line_53 $$ if (owner != null && PsiUtilEx.isLanguageAnnotationTarget(owner)) -->Line_55 $$ if (resolvedAnnos.length == 2 && annotations.length == 2 && Comparing.strEqual(resolvedAnnos[1].getQualifiedName(), annotations[1].getQualifiedName())) [ CD ]
Line_10 $$ final String pattern = AnnotationUtilEx.calcAnnotationValue(psiAnnotation, "value")-->Line_36 $$ holder.registerProblem(expression, MessageFormat.format("Expression ''[ FD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_28 $$ final Object result = new SubstitutedExpressionEvaluationHelper(expression.getProject()).computeExpression(expression, myConfiguration.getAdvancedConfiguration().getDfaOption(), false, nonConstantElements)[ FD ]
Line_8 $$ final CachedValueProvider<Pattern> provider = new CachedValueProvider<Pattern>() -->Line_10 $$ final String pattern = AnnotationUtilEx.calcAnnotationValue(psiAnnotation, "value")[ CD ]
Line_7 $$ if (p == null) -->Line_22 $$ psiAnnotation.putUserData(COMPLIED_PATTERN, p)[ CD ]
Line_11 $$ Pattern p = null-->Line_22 $$ psiAnnotation.putUserData(COMPLIED_PATTERN, p)[ FD ]
Line_6 $$ CachedValue<Pattern> p = psiAnnotation.getUserData(COMPLIED_PATTERN)-->Line_24 $$ final Pattern pattern = p.getValue()[ FD ]
Line_14 $$ p = Pattern.compile(pattern)-->Line_22 $$ psiAnnotation.putUserData(COMPLIED_PATTERN, p)[ FD ]
Line_25 $$ if (pattern == null)-->Line_26 $$ return[ CD ]
Line_31 $$ if (!pattern.matcher(o).matches()) -->Line_32 $$ if (annotations.length > 1) [ CD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_3 $$ if (annotations.length == 0)[ CD ]
Line_7 $$ if (p == null) -->Line_8 $$ final CachedValueProvider<Pattern> provider = new CachedValueProvider<Pattern>() [ CD ]
Line_10 $$ final String pattern = AnnotationUtilEx.calcAnnotationValue(psiAnnotation, "value")-->Line_12 $$ if (pattern != null) [ FD ]
Line_2 $$ private void checkExpression(PsiExpression expression, final PsiAnnotation[] annotations, ProblemsHolder holder) -->Line_5 $$ final PsiAnnotation psiAnnotation = annotations[0][ CD ]
Line_8 $$ final CachedValueProvider<Pattern> provider = new CachedValueProvider<Pattern>() -->Line_21 $$ p = CachedValuesManager.getManager(expression.getProject()).createCachedValue(provider, false)[ FD ]
Line_3 $$ if (annotations.length == 0)-->Line_4 $$ return[ CD ]
