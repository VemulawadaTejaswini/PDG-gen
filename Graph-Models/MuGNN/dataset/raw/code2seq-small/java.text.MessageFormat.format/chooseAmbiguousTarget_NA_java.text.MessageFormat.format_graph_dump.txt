Line_20 $$ title = titlePattern-->Line_26 $$ title = MessageFormat.format(titlePattern, refText)[ FD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_6 $$ final PsiReference reference = TargetElementUtil.findReference(editor, offset)[ CD ]
Line_23 $$ final String elementText = reference.getElement().getText()-->Line_25 $$ final String refText = range.substring(elementText)[ FD ]
Line_23 $$ final String elementText = reference.getElement().getText()-->Line_24 $$ LOG.assertTrue(range.getStartOffset() >= 0 && range.getEndOffset() <= elementText.length(), Arrays.toString(elements) + ";" + reference)[ FD ]
Line_7 $$ if (elements == null || elements.length == 0) -->Line_8 $$ final Collection<PsiElement> candidates = suggestCandidates(reference)[ CD ]
Line_20 $$ title = titlePattern-->Line_28 $$ NavigationUtil.getPsiElementPopup(elements, new DefaultPsiElementCellRenderer(), title, processor).showInBestPositionFor(editor)[ FD ]
Line_11 $$ if (elements.length == 1) -->Line_14 $$ processor.execute(element)[ CD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_11 $$ if (elements.length == 1) [ CD ]
Line_17 $$ if (elements.length > 1) -->Line_28 $$ NavigationUtil.getPsiElementPopup(elements, new DefaultPsiElementCellRenderer(), title, processor).showInBestPositionFor(editor)[ CD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_20 $$ title = titlePattern[ FD ]
Line_17 $$ if (elements.length > 1) -->Line_18 $$ String title[ CD ]
Line_12 $$ PsiElement element = elements[0]-->Line_14 $$ processor.execute(element)[ FD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_24 $$ LOG.assertTrue(range.getStartOffset() >= 0 && range.getEndOffset() <= elementText.length(), Arrays.toString(elements) + ";" + reference)[ FD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_6 $$ final PsiReference reference = TargetElementUtil.findReference(editor, offset)[ FD ]
Line_19 $$ if (reference == null) -->Line_25 $$ final String refText = range.substring(elementText)[ CD ]
Line_19 $$ if (reference == null) -->Line_20 $$ title = titlePattern[ CD ]
Line_8 $$ final Collection<PsiElement> candidates = suggestCandidates(reference)-->Line_9 $$ elements = PsiUtilCore.toPsiElementArray(candidates)[ FD ]
Line_19 $$ if (reference == null) -->Line_24 $$ LOG.assertTrue(range.getStartOffset() >= 0 && range.getEndOffset() <= elementText.length(), Arrays.toString(elements) + ";" + reference)[ CD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_14 $$ processor.execute(element)[ FD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_7 $$ if (elements == null || elements.length == 0) [ CD ]
Line_19 $$ if (reference == null) -->Line_26 $$ title = MessageFormat.format(titlePattern, refText)[ CD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_17 $$ if (elements.length > 1) [ CD ]
Line_18 $$ String title-->Line_20 $$ title = titlePattern[ FD ]
Line_22 $$ final TextRange range = reference.getRangeInElement()-->Line_24 $$ LOG.assertTrue(range.getStartOffset() >= 0 && range.getEndOffset() <= elementText.length(), Arrays.toString(elements) + ";" + reference)[ FD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_3 $$ if (TargetElementUtil.inVirtualSpace(editor, offset)) [ FD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_28 $$ NavigationUtil.getPsiElementPopup(elements, new DefaultPsiElementCellRenderer(), title, processor).showInBestPositionFor(editor)[ FD ]
Line_22 $$ final TextRange range = reference.getRangeInElement()-->Line_25 $$ final String refText = range.substring(elementText)[ FD ]
Line_17 $$ if (elements.length > 1) -->Line_19 $$ if (reference == null) [ CD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_26 $$ title = MessageFormat.format(titlePattern, refText)[ FD ]
Line_25 $$ final String refText = range.substring(elementText)-->Line_26 $$ title = MessageFormat.format(titlePattern, refText)[ FD ]
Line_6 $$ final PsiReference reference = TargetElementUtil.findReference(editor, offset)-->Line_8 $$ final Collection<PsiElement> candidates = suggestCandidates(reference)[ FD ]
Line_7 $$ if (elements == null || elements.length == 0) -->Line_9 $$ elements = PsiUtilCore.toPsiElementArray(candidates)[ CD ]
Line_26 $$ title = MessageFormat.format(titlePattern, refText)-->Line_28 $$ NavigationUtil.getPsiElementPopup(elements, new DefaultPsiElementCellRenderer(), title, processor).showInBestPositionFor(editor)[ FD ]
Line_6 $$ final PsiReference reference = TargetElementUtil.findReference(editor, offset)-->Line_19 $$ if (reference == null) [ FD ]
Line_19 $$ if (reference == null) -->Line_23 $$ final String elementText = reference.getElement().getText()[ CD ]
Line_18 $$ String title-->Line_26 $$ title = MessageFormat.format(titlePattern, refText)[ FD ]
Line_19 $$ if (reference == null) -->Line_22 $$ final TextRange range = reference.getRangeInElement()[ CD ]
Line_11 $$ if (elements.length == 1) -->Line_15 $$ return true[ CD ]
Line_6 $$ final PsiReference reference = TargetElementUtil.findReference(editor, offset)-->Line_22 $$ final TextRange range = reference.getRangeInElement()[ FD ]
Line_18 $$ String title-->Line_28 $$ NavigationUtil.getPsiElementPopup(elements, new DefaultPsiElementCellRenderer(), title, processor).showInBestPositionFor(editor)[ FD ]
Line_3 $$ if (TargetElementUtil.inVirtualSpace(editor, offset)) -->Line_4 $$ return false[ CD ]
Line_11 $$ if (elements.length == 1) -->Line_12 $$ PsiElement element = elements[0][ CD ]
Line_17 $$ if (elements.length > 1) -->Line_29 $$ return true[ CD ]
Line_11 $$ if (elements.length == 1) -->Line_13 $$ LOG.assertTrue(element != null)[ CD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_3 $$ if (TargetElementUtil.inVirtualSpace(editor, offset)) [ CD ]
Line_2 $$ public static boolean chooseAmbiguousTarget(@NotNull Editor editor, int offset, @NotNull PsiElementProcessor<PsiElement> processor, @NotNull String titlePattern, @Nullable PsiElement[] elements) -->Line_31 $$ return false[ CD ]
Line_6 $$ final PsiReference reference = TargetElementUtil.findReference(editor, offset)-->Line_23 $$ final String elementText = reference.getElement().getText()[ FD ]
