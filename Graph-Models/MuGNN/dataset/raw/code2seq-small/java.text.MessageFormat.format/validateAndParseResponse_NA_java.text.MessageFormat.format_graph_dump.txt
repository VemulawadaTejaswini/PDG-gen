Line_2 $$ private static TimelineDelegationTokenResponse validateAndParseResponse(HttpURLConnection conn) throws IOException -->Line_26 $$ throw new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_4 $$ JsonNode json = mapper.readTree(conn.getInputStream())-->Line_10 $$ String exception = json.get(TimelineAuthenticationConsts.ERROR_EXCEPTION_JSON).getTextValue()[ FD ]
Line_5 $$ if (status == HttpURLConnection.HTTP_OK) -->Line_6 $$ return mapper.readValue(json, TimelineDelegationTokenResponse.class)[ CD ]
Line_2 $$ private static TimelineDelegationTokenResponse validateAndParseResponse(HttpURLConnection conn) throws IOException -->Line_4 $$ JsonNode json = mapper.readTree(conn.getInputStream())[ CD ]
Line_11 $$ String className = json.get(TimelineAuthenticationConsts.ERROR_CLASSNAME_JSON).getTextValue()-->Line_14 $$ Class<?> klass = cl.loadClass(className)[ FD ]
Line_14 $$ Class<?> klass = cl.loadClass(className)-->Line_15 $$ Constructor<?> constr = klass.getConstructor(String.class)[ FD ]
Line_10 $$ String exception = json.get(TimelineAuthenticationConsts.ERROR_EXCEPTION_JSON).getTextValue()-->Line_20 $$ throw new IOException(MessageFormat.format("[ FD ]
Line_4 $$ JsonNode json = mapper.readTree(conn.getInputStream())-->Line_9 $$ String message = json.get(TimelineAuthenticationConsts.ERROR_MESSAGE_JSON).getTextValue()[ FD ]
Line_2 $$ private static TimelineDelegationTokenResponse validateAndParseResponse(HttpURLConnection conn) throws IOException -->Line_3 $$ int status = conn.getResponseCode()[ FD ]
Line_2 $$ private static TimelineDelegationTokenResponse validateAndParseResponse(HttpURLConnection conn) throws IOException -->Line_4 $$ JsonNode json = mapper.readTree(conn.getInputStream())[ FD ]
Line_3 $$ int status = conn.getResponseCode()-->Line_5 $$ if (status == HttpURLConnection.HTTP_OK) [ FD ]
Line_2 $$ private static TimelineDelegationTokenResponse validateAndParseResponse(HttpURLConnection conn) throws IOException -->Line_3 $$ int status = conn.getResponseCode()[ CD ]
Line_4 $$ JsonNode json = mapper.readTree(conn.getInputStream())-->Line_6 $$ return mapper.readValue(json, TimelineDelegationTokenResponse.class)[ FD ]
Line_4 $$ JsonNode json = mapper.readTree(conn.getInputStream())-->Line_11 $$ String className = json.get(TimelineAuthenticationConsts.ERROR_CLASSNAME_JSON).getTextValue()[ FD ]
Line_13 $$ ClassLoader cl = TimelineAuthenticator.class.getClassLoader()-->Line_14 $$ Class<?> klass = cl.loadClass(className)[ FD ]
Line_9 $$ String message = json.get(TimelineAuthenticationConsts.ERROR_MESSAGE_JSON).getTextValue()-->Line_20 $$ throw new IOException(MessageFormat.format("[ FD ]
Line_3 $$ int status = conn.getResponseCode()-->Line_26 $$ throw new IOException(MessageFormat.format("HTTP status [[ FD ]
Line_15 $$ Constructor<?> constr = klass.getConstructor(String.class)-->Line_16 $$ throw (IOException) constr.newInstance(message)[ FD ]
Line_9 $$ String message = json.get(TimelineAuthenticationConsts.ERROR_MESSAGE_JSON).getTextValue()-->Line_16 $$ throw (IOException) constr.newInstance(message)[ FD ]
Line_2 $$ private static TimelineDelegationTokenResponse validateAndParseResponse(HttpURLConnection conn) throws IOException -->Line_5 $$ if (status == HttpURLConnection.HTTP_OK) [ CD ]
