Line_4 $$ byte[] array = new byte[] -->Line_8 $$ os.write(array)[ FD ]
Line_10 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0]-->Line_11 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1/tmp/foo?user.name=[ FD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_7 $$ OutputStream os = fs.create(new Path("/tmp/foo"))[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_14 $$ InputStream is = conn.getInputStream()[ FD ]
Line_14 $$ InputStream is = conn.getInputStream()-->Line_15 $$ Assert.assertEquals(1, is.read())[ FD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_9 $$ os.close()[ CD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_13 $$ Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode())[ CD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_8 $$ os.write(array)[ CD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_3 $$ createHttpFSServer(false)[ CD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_17 $$ Assert.assertEquals(-1, is.read())[ CD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_16 $$ Assert.assertEquals(2, is.read())[ CD ]
Line_14 $$ InputStream is = conn.getInputStream()-->Line_16 $$ Assert.assertEquals(2, is.read())[ FD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_6 $$ fs.mkdirs(new Path("/tmp"))[ CD ]
Line_5 $$ FileSystem fs = FileSystem.get(TestHdfsHelper.getHdfsConf())-->Line_6 $$ fs.mkdirs(new Path("/tmp"))[ FD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_10 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0][ CD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_4 $$ byte[] array = new byte[] [ CD ]
Line_7 $$ OutputStream os = fs.create(new Path("/tmp/foo"))-->Line_8 $$ os.write(array)[ FD ]
Line_11 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1/tmp/foo?user.name=-->Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_15 $$ Assert.assertEquals(1, is.read())[ CD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_14 $$ InputStream is = conn.getInputStream()[ CD ]
Line_14 $$ InputStream is = conn.getInputStream()-->Line_17 $$ Assert.assertEquals(-1, is.read())[ FD ]
Line_5 $$ FileSystem fs = FileSystem.get(TestHdfsHelper.getHdfsConf())-->Line_7 $$ OutputStream os = fs.create(new Path("/tmp/foo"))[ FD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_11 $$ URL url = new URL(TestJettyHelper.getJettyURL(), MessageFormat.format("/webhdfs/v1/tmp/foo?user.name=[ CD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_5 $$ FileSystem fs = FileSystem.get(TestHdfsHelper.getHdfsConf())[ CD ]
Line_7 $$ OutputStream os = fs.create(new Path("/tmp/foo"))-->Line_9 $$ os.close()[ FD ]
Line_2 $$ public void testOpenOffsetLength() throws Exception -->Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_12 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_13 $$ Assert.assertEquals(HttpURLConnection.HTTP_OK, conn.getResponseCode())[ FD ]
