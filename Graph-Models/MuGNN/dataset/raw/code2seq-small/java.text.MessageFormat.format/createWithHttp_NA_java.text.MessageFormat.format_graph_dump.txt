Line_3 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0]-->Line_11 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_7 $$ String pathOps[ CD ]
Line_7 $$ String pathOps-->Line_11 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_3 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0]-->Line_9 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_4 $$ if (filename.charAt(0) == '/') [ CD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_13 $$ URL url = new URL(TestJettyHelper.getJettyURL(), pathOps)[ CD ]
Line_14 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_18 $$ Assert.assertEquals(HttpURLConnection.HTTP_CREATED, conn.getResponseCode())[ FD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_17 $$ conn.connect()[ CD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_3 $$ String user = HadoopUsersConfTestHelper.getHadoopUsers()[0][ CD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_8 $$ if (perms == null) [ CD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_16 $$ conn.setRequestMethod("PUT")[ CD ]
Line_8 $$ if (perms == null) -->Line_11 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ CD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_4 $$ if (filename.charAt(0) == '/') [ FD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_5 $$ filename = filename.substring(1)[ FD ]
Line_5 $$ filename = filename.substring(1)-->Line_9 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_9 $$ pathOps = MessageFormat.format("/webhdfs/v1/-->Line_11 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_14 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_16 $$ conn.setRequestMethod("PUT")[ FD ]
Line_4 $$ if (filename.charAt(0) == '/') -->Line_5 $$ filename = filename.substring(1)[ CD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_11 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_8 $$ if (perms == null) [ FD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_9 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_18 $$ Assert.assertEquals(HttpURLConnection.HTTP_CREATED, conn.getResponseCode())[ CD ]
Line_8 $$ if (perms == null) -->Line_9 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ CD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_14 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ CD ]
Line_7 $$ String pathOps-->Line_9 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_5 $$ filename = filename.substring(1)-->Line_11 $$ pathOps = MessageFormat.format("/webhdfs/v1/[ FD ]
Line_14 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_15 $$ conn.addRequestProperty("Content-Type", "application/octet-stream")[ FD ]
Line_13 $$ URL url = new URL(TestJettyHelper.getJettyURL(), pathOps)-->Line_14 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()[ FD ]
Line_2 $$ private void createWithHttp(String filename, String perms) throws Exception -->Line_15 $$ conn.addRequestProperty("Content-Type", "application/octet-stream")[ CD ]
Line_14 $$ HttpURLConnection conn = (HttpURLConnection) url.openConnection()-->Line_17 $$ conn.connect()[ FD ]
