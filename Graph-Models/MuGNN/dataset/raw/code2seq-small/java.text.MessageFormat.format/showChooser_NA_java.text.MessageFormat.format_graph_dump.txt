Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_28 $$ final ReplaceChoice value = (ReplaceChoice) list.getSelectedValue()[ FD ]
Line_3 $$ if (occurrencesMap.size() == 1) -->Line_4 $$ callback.pass(occurrencesMap.keySet().iterator().next())[ CD ]
Line_35 $$ final TextRange textRange = getOccurrenceRange(occurrence)-->Line_36 $$ final RangeHighlighter rangeHighlighter = markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), HighlighterLayer.SELECTION - 1, myAttributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_14 $$ final Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ CD ]
Line_11 $$ final JList list = new JBList(model)-->Line_43 $$ callback.pass((ReplaceChoice) list.getSelectedValue())[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_16 $$ if (choices != null) [ CD ]
Line_26 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_32 $$ final MarkupModel markupModel = myEditor.getMarkupModel()[ CD ]
Line_11 $$ final JList list = new JBList(model)-->Line_28 $$ final ReplaceChoice value = (ReplaceChoice) list.getSelectedValue()[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_26 $$ list.addListSelectionListener(new ListSelectionListener() [ FD ]
Line_7 $$ final DefaultListModel model = new DefaultListModel()-->Line_9 $$ model.addElement(choice)[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_23 $$ return rendererComponent[ CD ]
Line_41 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Multiple occurrences found").setMovable(true).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() -->Line_43 $$ callback.pass((ReplaceChoice) list.getSelectedValue())[ CD ]
Line_16 $$ if (choices != null) -->Line_18 $$ if (choices == ReplaceChoice.ALL) [ CD ]
Line_16 $$ if (choices != null) -->Line_17 $$ String text = choices.getDescription()[ CD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_33 $$ final List<T> occurrenceList = occurrencesMap.get(value)[ FD ]
Line_18 $$ if (choices == ReplaceChoice.ALL) -->Line_19 $$ text = MessageFormat.format(text, occurrencesMap.get(choices).size())[ CD ]
Line_28 $$ final ReplaceChoice value = (ReplaceChoice) list.getSelectedValue()-->Line_33 $$ final List<T> occurrenceList = occurrencesMap.get(value)[ FD ]
Line_34 $$ for (T occurrence : occurrenceList) -->Line_35 $$ final TextRange textRange = getOccurrenceRange(occurrence)[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_14 $$ final Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_26 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_29 $$ if (value == null)[ CD ]
Line_32 $$ final MarkupModel markupModel = myEditor.getMarkupModel()-->Line_36 $$ final RangeHighlighter rangeHighlighter = markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), HighlighterLayer.SELECTION - 1, myAttributes, HighlighterTargetArea.EXACT_RANGE)[ FD ]
Line_15 $$ final ReplaceChoice choices = (ReplaceChoice) value-->Line_18 $$ if (choices == ReplaceChoice.ALL) [ FD ]
Line_26 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_28 $$ final ReplaceChoice value = (ReplaceChoice) list.getSelectedValue()[ CD ]
Line_11 $$ final JList list = new JBList(model)-->Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() [ FD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_4 $$ callback.pass(occurrencesMap.keySet().iterator().next())[ FD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_11 $$ final JList list = new JBList(model)[ CD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_29 $$ if (value == null)[ FD ]
Line_11 $$ final JList list = new JBList(model)-->Line_14 $$ final Component rendererComponent = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus)[ FD ]
Line_26 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_31 $$ dropHighlighters()[ CD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() [ CD ]
Line_11 $$ final JList list = new JBList(model)-->Line_26 $$ list.addListSelectionListener(new ListSelectionListener() [ FD ]
Line_29 $$ if (value == null)-->Line_30 $$ return[ CD ]
Line_26 $$ list.addListSelectionListener(new ListSelectionListener() -->Line_33 $$ final List<T> occurrenceList = occurrencesMap.get(value)[ CD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_43 $$ callback.pass((ReplaceChoice) list.getSelectedValue())[ FD ]
Line_41 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Multiple occurrences found").setMovable(true).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() -->Line_47 $$ dropHighlighters()[ CD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_3 $$ if (occurrencesMap.size() == 1) [ FD ]
Line_17 $$ String text = choices.getDescription()-->Line_19 $$ text = MessageFormat.format(text, occurrencesMap.get(choices).size())[ FD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_19 $$ text = MessageFormat.format(text, occurrencesMap.get(choices).size())[ FD ]
Line_19 $$ text = MessageFormat.format(text, occurrencesMap.get(choices).size())-->Line_21 $$ setText(text)[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_43 $$ callback.pass((ReplaceChoice) list.getSelectedValue())[ FD ]
Line_17 $$ String text = choices.getDescription()-->Line_21 $$ setText(text)[ FD ]
Line_15 $$ final ReplaceChoice choices = (ReplaceChoice) value-->Line_16 $$ if (choices != null) [ FD ]
Line_15 $$ final ReplaceChoice choices = (ReplaceChoice) value-->Line_19 $$ text = MessageFormat.format(text, occurrencesMap.get(choices).size())[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_15 $$ final ReplaceChoice choices = (ReplaceChoice) value[ CD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_7 $$ final DefaultListModel model = new DefaultListModel()[ CD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_41 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Multiple occurrences found").setMovable(true).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ CD ]
Line_11 $$ final JList list = new JBList(model)-->Line_41 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Multiple occurrences found").setMovable(true).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ FD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_8 $$ for (ReplaceChoice choice : occurrencesMap.keySet()) [ FD ]
Line_3 $$ if (occurrencesMap.size() == 1) -->Line_5 $$ return[ CD ]
Line_16 $$ if (choices != null) -->Line_21 $$ setText(text)[ CD ]
Line_36 $$ final RangeHighlighter rangeHighlighter = markupModel.addRangeHighlighter(textRange.getStartOffset(), textRange.getEndOffset(), HighlighterLayer.SELECTION - 1, myAttributes, HighlighterTargetArea.EXACT_RANGE)-->Line_37 $$ myRangeHighlighters.add(rangeHighlighter)[ FD ]
Line_8 $$ for (ReplaceChoice choice : occurrencesMap.keySet()) -->Line_9 $$ model.addElement(choice)[ FD ]
Line_12 $$ list.setCellRenderer(new DefaultListCellRenderer() -->Line_41 $$ JBPopupFactory.getInstance().createListPopupBuilder(list).setTitle("Multiple occurrences found").setMovable(true).setResizable(false).setRequestFocus(true).setItemChoosenCallback(new Runnable() [ FD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_33 $$ final List<T> occurrenceList = occurrencesMap.get(value)[ FD ]
Line_28 $$ final ReplaceChoice value = (ReplaceChoice) list.getSelectedValue()-->Line_29 $$ if (value == null)[ FD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_26 $$ list.addListSelectionListener(new ListSelectionListener() [ CD ]
Line_2 $$ public void showChooser(final Pass<ReplaceChoice> callback, final Map<ReplaceChoice, List<T>> occurrencesMap) -->Line_3 $$ if (occurrencesMap.size() == 1) [ CD ]
Line_15 $$ final ReplaceChoice choices = (ReplaceChoice) value-->Line_17 $$ String text = choices.getDescription()[ FD ]
