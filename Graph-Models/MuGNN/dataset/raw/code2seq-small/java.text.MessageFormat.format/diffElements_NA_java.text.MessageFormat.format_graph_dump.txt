Line_26 $$ List childrenExpected = elementExpected.getChildren()-->Line_38 $$ return MessageFormat.format("Too many children at [ FD ]
Line_20 $$ String result = diffAttributes(elementExpected, elementActual, pathPrefix, "missing")-->Line_34 $$ if (result != null)[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_4 $$ pathPrefix = MessageFormat.format("[ FD ]
Line_20 $$ String result = diffAttributes(elementExpected, elementActual, pathPrefix, "missing")-->Line_21 $$ if (result != null)[ FD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_7 $$ return MessageFormat.format("Tag mismatch at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_27 $$ List childrenActual = elementActual.getChildren()[ FD ]
Line_9 $$ final String expectedText = elementExpected.getText().trim()-->Line_15 $$ return MessageFormat.format("Text content mismatch at [ FD ]
Line_34 $$ if (result != null)-->Line_35 $$ return result[ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_3 $$ final String expectedTag = elementExpected.getName()[ CD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_15 $$ return MessageFormat.format("Text content mismatch at [ FD ]
Line_27 $$ List childrenActual = elementActual.getChildren()-->Line_37 $$ if (childrenExpected.size() != childrenActual.size()) [ FD ]
Line_26 $$ List childrenExpected = elementExpected.getChildren()-->Line_37 $$ if (childrenExpected.size() != childrenActual.size()) [ FD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_18 $$ return MessageFormat.format("Text content unexpected at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_15 $$ return MessageFormat.format("Text content mismatch at [ FD ]
Line_23 $$ result = diffAttributes(elementActual, elementExpected, pathPrefix, "unexpected")-->Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)[ FD ]
Line_5 $$ final String actualTag = elementActual.getName()-->Line_7 $$ return MessageFormat.format("Tag mismatch at [ FD ]
Line_10 $$ final String actualText = elementActual.getText().trim()-->Line_18 $$ return MessageFormat.format("Text content unexpected at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_24 $$ if (result != null)[ CD ]
Line_29 $$ final Element expectedChild = (Element) childrenExpected.get(i)-->Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_9 $$ final String expectedText = elementExpected.getText().trim()[ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_11 $$ if (expectedText != null) [ CD ]
Line_3 $$ final String expectedTag = elementExpected.getName()-->Line_7 $$ return MessageFormat.format("Tag mismatch at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_26 $$ List childrenExpected = elementExpected.getChildren()[ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_3 $$ final String expectedTag = elementExpected.getName()[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_7 $$ return MessageFormat.format("Tag mismatch at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_26 $$ List childrenExpected = elementExpected.getChildren()[ FD ]
Line_5 $$ final String actualTag = elementActual.getName()-->Line_6 $$ if (!elementExpected.getName().equals(actualTag)) [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_37 $$ if (childrenExpected.size() != childrenActual.size()) [ CD ]
Line_6 $$ if (!elementExpected.getName().equals(actualTag)) -->Line_7 $$ return MessageFormat.format("Tag mismatch at [ CD ]
Line_10 $$ final String actualText = elementActual.getText().trim()-->Line_14 $$ if (!expectedText.equals(actualText)) [ FD ]
Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) -->Line_30 $$ if (i >= childrenActual.size()) [ FD ]
Line_20 $$ String result = diffAttributes(elementExpected, elementActual, pathPrefix, "missing")-->Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)[ FD ]
Line_10 $$ final String actualText = elementActual.getText().trim()-->Line_15 $$ return MessageFormat.format("Text content mismatch at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_6 $$ if (!elementExpected.getName().equals(actualTag)) [ CD ]
Line_3 $$ final String expectedTag = elementExpected.getName()-->Line_4 $$ pathPrefix = MessageFormat.format("[ FD ]
Line_26 $$ List childrenExpected = elementExpected.getChildren()-->Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) [ FD ]
Line_29 $$ final Element expectedChild = (Element) childrenExpected.get(i)-->Line_31 $$ return MessageFormat.format("Too few children at [ FD ]
Line_23 $$ result = diffAttributes(elementActual, elementExpected, pathPrefix, "unexpected")-->Line_34 $$ if (result != null)[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_27 $$ List childrenActual = elementActual.getChildren()[ CD ]
Line_9 $$ final String expectedText = elementExpected.getText().trim()-->Line_11 $$ if (expectedText != null) [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_5 $$ final String actualTag = elementActual.getName()[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_38 $$ return MessageFormat.format("Too many children at [ FD ]
Line_17 $$ if (actualText != null) -->Line_18 $$ return MessageFormat.format("Text content unexpected at [ CD ]
Line_23 $$ result = diffAttributes(elementActual, elementExpected, pathPrefix, "unexpected")-->Line_24 $$ if (result != null)[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_31 $$ return MessageFormat.format("Too few children at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_23 $$ result = diffAttributes(elementActual, elementExpected, pathPrefix, "unexpected")[ CD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_20 $$ String result = diffAttributes(elementExpected, elementActual, pathPrefix, "missing")[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_10 $$ final String actualText = elementActual.getText().trim()[ FD ]
Line_20 $$ String result = diffAttributes(elementExpected, elementActual, pathPrefix, "missing")-->Line_24 $$ if (result != null)[ FD ]
Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) -->Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)[ CD ]
Line_27 $$ List childrenActual = elementActual.getChildren()-->Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)[ FD ]
Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) -->Line_29 $$ final Element expectedChild = (Element) childrenExpected.get(i)[ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_4 $$ pathPrefix = MessageFormat.format("[ CD ]
Line_12 $$ if (actualText == null) -->Line_13 $$ return MessageFormat.format("Text content missing at [ CD ]
Line_11 $$ if (expectedText != null) -->Line_17 $$ if (actualText != null) [ CD ]
Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)-->Line_34 $$ if (result != null)[ FD ]
Line_9 $$ final String expectedText = elementExpected.getText().trim()-->Line_13 $$ return MessageFormat.format("Text content missing at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_20 $$ String result = diffAttributes(elementExpected, elementActual, pathPrefix, "missing")[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_6 $$ if (!elementExpected.getName().equals(actualTag)) [ FD ]
Line_30 $$ if (i >= childrenActual.size()) -->Line_31 $$ return MessageFormat.format("Too few children at [ CD ]
Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) -->Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)[ FD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_13 $$ return MessageFormat.format("Text content missing at [ FD ]
Line_21 $$ if (result != null)-->Line_22 $$ return result[ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_13 $$ return MessageFormat.format("Text content missing at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_5 $$ final String actualTag = elementActual.getName()[ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_21 $$ if (result != null)[ CD ]
Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) -->Line_34 $$ if (result != null)[ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_10 $$ final String actualText = elementActual.getText().trim()[ CD ]
Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) -->Line_29 $$ final Element expectedChild = (Element) childrenExpected.get(i)[ FD ]
Line_14 $$ if (!expectedText.equals(actualText)) -->Line_15 $$ return MessageFormat.format("Text content mismatch at [ CD ]
Line_12 $$ if (actualText == null) -->Line_14 $$ if (!expectedText.equals(actualText)) [ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_20 $$ String result = diffAttributes(elementExpected, elementActual, pathPrefix, "missing")[ CD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_33 $$ result = diffElements(expectedChild, (Element) childrenActual.get(i), pathPrefix, i)[ FD ]
Line_24 $$ if (result != null)-->Line_25 $$ return result[ CD ]
Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) -->Line_30 $$ if (i >= childrenActual.size()) [ CD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_9 $$ final String expectedText = elementExpected.getText().trim()[ FD ]
Line_37 $$ if (childrenExpected.size() != childrenActual.size()) -->Line_38 $$ return MessageFormat.format("Too many children at [ CD ]
Line_27 $$ List childrenActual = elementActual.getChildren()-->Line_30 $$ if (i >= childrenActual.size()) [ FD ]
Line_10 $$ final String actualText = elementActual.getText().trim()-->Line_12 $$ if (actualText == null) [ FD ]
Line_9 $$ final String expectedText = elementExpected.getText().trim()-->Line_14 $$ if (!expectedText.equals(actualText)) [ FD ]
Line_10 $$ final String actualText = elementActual.getText().trim()-->Line_17 $$ if (actualText != null) [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_18 $$ return MessageFormat.format("Text content unexpected at [ FD ]
Line_26 $$ List childrenExpected = elementExpected.getChildren()-->Line_31 $$ return MessageFormat.format("Too few children at [ FD ]
Line_26 $$ List childrenExpected = elementExpected.getChildren()-->Line_29 $$ final Element expectedChild = (Element) childrenExpected.get(i)[ FD ]
Line_27 $$ List childrenActual = elementActual.getChildren()-->Line_31 $$ return MessageFormat.format("Too few children at [ FD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_31 $$ return MessageFormat.format("Too few children at [ FD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_38 $$ return MessageFormat.format("Too many children at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_23 $$ result = diffAttributes(elementActual, elementExpected, pathPrefix, "unexpected")[ FD ]
Line_11 $$ if (expectedText != null) -->Line_12 $$ if (actualText == null) [ CD ]
Line_27 $$ List childrenActual = elementActual.getChildren()-->Line_38 $$ return MessageFormat.format("Too many children at [ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_40 $$ return null[ CD ]
Line_20 $$ String result = diffAttributes(elementExpected, elementActual, pathPrefix, "missing")-->Line_23 $$ result = diffAttributes(elementActual, elementExpected, pathPrefix, "unexpected")[ FD ]
Line_2 $$ public static String diffElements(Element elementExpected, Element elementActual, String pathPrefix, int order) -->Line_28 $$ for (int i = 0; i != childrenExpected.size(); i++) [ CD ]
Line_4 $$ pathPrefix = MessageFormat.format("-->Line_23 $$ result = diffAttributes(elementActual, elementExpected, pathPrefix, "unexpected")[ FD ]
