Line_11 $$ final Throwable cause = e.getCause()-->Line_12 $$ if (cause != null && "java.nio.file.NoSuchFileException".equals(cause.getClass().getName())) [ FD ]
Line_9 $$ attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myLinkOptions)-->Line_19 $$ long size = (Long) attributes.get("size")[ FD ]
Line_9 $$ attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myLinkOptions)-->Line_22 $$ boolean isHidden = new File(path).getParent() == null ? false : (Boolean) attributes.get("hidden")[ FD ]
Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)-->Line_23 $$ boolean isWritable = isDirectory || !(Boolean) attributes.get("readonly")[ FD ]
Line_9 $$ attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myLinkOptions)-->Line_20 $$ long lastModified = (Long) myToMillis.invoke(attributes.get("lastModifiedTime"))[ FD ]
Line_31 $$ if (cause instanceof IOException || cause != null && "java.nio.file.InvalidPathException".equals(cause.getClass().getName())) -->Line_33 $$ return null[ CD ]
Line_4 $$ Object pathObj = myGetPath.invoke(myDefaultFileSystem, path, ArrayUtil.EMPTY_STRING_ARRAY)-->Line_9 $$ attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myLinkOptions)[ FD ]
Line_9 $$ attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myLinkOptions)-->Line_17 $$ boolean isDirectory = (Boolean) attributes.get("isDirectory")[ FD ]
Line_9 $$ attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myLinkOptions)-->Line_23 $$ boolean isWritable = isDirectory || !(Boolean) attributes.get("readonly")[ FD ]
Line_21 $$ if (SystemInfo.isWindows) -->Line_26 $$ boolean isWritable = new File(path).canWrite()[ CD ]
Line_21 $$ if (SystemInfo.isWindows) -->Line_24 $$ return new FileAttributes(isDirectory, isOther, isSymbolicLink, isHidden, size, lastModified, isWritable)[ CD ]
Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)-->Line_6 $$ boolean isSymbolicLink = (Boolean) attributes.get("isSymbolicLink")[ FD ]
Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)-->Line_20 $$ long lastModified = (Long) myToMillis.invoke(attributes.get("lastModifiedTime"))[ FD ]
Line_21 $$ if (SystemInfo.isWindows) -->Line_23 $$ boolean isWritable = isDirectory || !(Boolean) attributes.get("readonly")[ CD ]
Line_21 $$ if (SystemInfo.isWindows) -->Line_22 $$ boolean isHidden = new File(path).getParent() == null ? false : (Boolean) attributes.get("hidden")[ CD ]
Line_31 $$ if (cause instanceof IOException || cause != null && "java.nio.file.InvalidPathException".equals(cause.getClass().getName())) -->Line_32 $$ LOG.debug(cause)[ CD ]
Line_11 $$ final Throwable cause = e.getCause()-->Line_32 $$ LOG.debug(cause)[ FD ]
Line_21 $$ if (SystemInfo.isWindows) -->Line_27 $$ return new FileAttributes(isDirectory, isOther, isSymbolicLink, false, size, lastModified, isWritable)[ CD ]
Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)-->Line_9 $$ attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myLinkOptions)[ FD ]
Line_12 $$ if (cause != null && "java.nio.file.NoSuchFileException".equals(cause.getClass().getName())) -->Line_13 $$ return FileAttributes.BROKEN_SYMLINK[ CD ]
Line_2 $$ protected FileAttributes getAttributes(@NotNull String path) throws Exception -->Line_4 $$ Object pathObj = myGetPath.invoke(myDefaultFileSystem, path, ArrayUtil.EMPTY_STRING_ARRAY)[ FD ]
Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)-->Line_19 $$ long size = (Long) attributes.get("size")[ FD ]
Line_4 $$ Object pathObj = myGetPath.invoke(myDefaultFileSystem, path, ArrayUtil.EMPTY_STRING_ARRAY)-->Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)[ FD ]
Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)-->Line_18 $$ boolean isOther = (Boolean) attributes.get("isOther")[ FD ]
Line_9 $$ attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myLinkOptions)-->Line_18 $$ boolean isOther = (Boolean) attributes.get("isOther")[ FD ]
Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)-->Line_17 $$ boolean isDirectory = (Boolean) attributes.get("isDirectory")[ FD ]
Line_11 $$ final Throwable cause = e.getCause()-->Line_31 $$ if (cause instanceof IOException || cause != null && "java.nio.file.InvalidPathException".equals(cause.getClass().getName())) [ FD ]
Line_5 $$ Map attributes = (Map) myReadAttributes.invoke(null, pathObj, mySchema, myNoFollowLinkOptions)-->Line_22 $$ boolean isHidden = new File(path).getParent() == null ? false : (Boolean) attributes.get("hidden")[ FD ]
