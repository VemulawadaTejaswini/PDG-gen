Line_5 $$ SPI spi = new MockSPI() -->Line_12 $$ Assert.assertEquals(HttpClientSPIAgent.MAPPING_PATTERN, mappingPattern)[ CD ]
Line_4 $$ final AtomicBoolean throwException = new AtomicBoolean()-->Line_20 $$ throwException.set(true)[ FD ]
Line_2 $$ public void testInit() throws Exception -->Line_5 $$ SPI spi = new MockSPI() [ CD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_22 $$ httpClientSPIAgent.init(spi)[ FD ]
Line_2 $$ public void testInit() throws Exception -->Line_20 $$ throwException.set(true)[ CD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_19 $$ httpClientSPIAgent.init(spi)[ FD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_10 $$ Assert.assertEquals(HttpClientSPIAgent.SPI_AGENT_CONTEXT_PATH, contextPath)[ CD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_10 $$ Assert.assertEquals(HttpClientSPIAgent.SPI_AGENT_CONTEXT_PATH, contextPath)[ FD ]
Line_2 $$ public void testInit() throws Exception -->Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))[ CD ]
Line_4 $$ final AtomicBoolean throwException = new AtomicBoolean()-->Line_7 $$ if (throwException.get()) [ FD ]
Line_2 $$ public void testInit() throws Exception -->Line_19 $$ httpClientSPIAgent.init(spi)[ CD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_7 $$ if (throwException.get()) [ CD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_11 $$ Assert.assertEquals(_spiConfiguration.getBaseDir(), docBasePath)[ CD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_16 $$ return _spiConfiguration[ CD ]
Line_3 $$ HttpClientSPIAgent httpClientSPIAgent = new HttpClientSPIAgent(_spiConfiguration, new MockRegistrationReference(new MockIntraband()))-->Line_19 $$ httpClientSPIAgent.init(spi)[ FD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_22 $$ httpClientSPIAgent.init(spi)[ FD ]
Line_2 $$ public void testInit() throws Exception -->Line_4 $$ final AtomicBoolean throwException = new AtomicBoolean()[ CD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_13 $$ Assert.assertEquals(AcceptorServlet.class.getName(), servletClassName)[ CD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_12 $$ Assert.assertEquals(HttpClientSPIAgent.MAPPING_PATTERN, mappingPattern)[ FD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_11 $$ Assert.assertEquals(_spiConfiguration.getBaseDir(), docBasePath)[ FD ]
Line_5 $$ SPI spi = new MockSPI() -->Line_13 $$ Assert.assertEquals(AcceptorServlet.class.getName(), servletClassName)[ FD ]
