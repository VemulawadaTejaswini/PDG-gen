Line_2 $$ public void testErrorOutputProcessor() throws Exception -->Line_3 $$ String[] arguments = _buildArguments(Echo.class, "1")[ CD ]
Line_4 $$ Future<?> future = ProcessUtil.execute(new ErrorStderrOutputProcessor(), arguments)-->Line_15 $$ future.get()[ FD ]
Line_9 $$ Throwable throwable = ee.getCause()-->Line_19 $$ Assert.assertEquals(ProcessException.class, throwable.getClass())[ FD ]
Line_3 $$ String[] arguments = _buildArguments(Echo.class, "1")-->Line_13 $$ future = ProcessUtil.execute(new ErrorStdoutOutputProcessor(), arguments)[ FD ]
Line_2 $$ public void testErrorOutputProcessor() throws Exception -->Line_13 $$ future = ProcessUtil.execute(new ErrorStdoutOutputProcessor(), arguments)[ CD ]
Line_9 $$ Throwable throwable = ee.getCause()-->Line_20 $$ Assert.assertEquals(ErrorStdoutOutputProcessor.class.getName(), throwable.getMessage())[ FD ]
Line_4 $$ Future<?> future = ProcessUtil.execute(new ErrorStderrOutputProcessor(), arguments)-->Line_6 $$ future.get()[ FD ]
Line_9 $$ Throwable throwable = ee.getCause()-->Line_11 $$ Assert.assertEquals(ErrorStderrOutputProcessor.class.getName(), throwable.getMessage())[ FD ]
Line_9 $$ Throwable throwable = ee.getCause()-->Line_10 $$ Assert.assertEquals(ProcessException.class, throwable.getClass())[ FD ]
Line_13 $$ future = ProcessUtil.execute(new ErrorStdoutOutputProcessor(), arguments)-->Line_15 $$ future.get()[ FD ]
Line_3 $$ String[] arguments = _buildArguments(Echo.class, "1")-->Line_4 $$ Future<?> future = ProcessUtil.execute(new ErrorStderrOutputProcessor(), arguments)[ FD ]
Line_4 $$ Future<?> future = ProcessUtil.execute(new ErrorStderrOutputProcessor(), arguments)-->Line_13 $$ future = ProcessUtil.execute(new ErrorStdoutOutputProcessor(), arguments)[ FD ]
Line_2 $$ public void testErrorOutputProcessor() throws Exception -->Line_4 $$ Future<?> future = ProcessUtil.execute(new ErrorStderrOutputProcessor(), arguments)[ CD ]
