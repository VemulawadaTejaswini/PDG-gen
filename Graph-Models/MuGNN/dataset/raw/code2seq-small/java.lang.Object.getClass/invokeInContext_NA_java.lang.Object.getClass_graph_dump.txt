Line_14 $$ Throwable targetEx = ex.getTargetException()-->Line_18 $$ if (targetEx instanceof CreateException) [ FD ]
Line_10 $$ Method ejbMethod = ejb.getClass().getMethod(method.getName(), method.getParameterTypes())-->Line_11 $$ return ejbMethod.invoke(ejb, invocation.getArguments())[ FD ]
Line_2 $$ public Object invokeInContext(MethodInvocation invocation) throws Throwable -->Line_6 $$ Method method = invocation.getMethod()[ FD ]
Line_3 $$ Object ejb = null-->Line_8 $$ return method.invoke(ejb, invocation.getArguments())[ FD ]
Line_5 $$ ejb = getSessionBeanInstance()-->Line_11 $$ return ejbMethod.invoke(ejb, invocation.getArguments())[ FD ]
Line_5 $$ ejb = getSessionBeanInstance()-->Line_28 $$ if (ejb instanceof EJBLocalObject) [ FD ]
Line_5 $$ ejb = getSessionBeanInstance()-->Line_10 $$ Method ejbMethod = ejb.getClass().getMethod(method.getName(), method.getParameterTypes())[ FD ]
Line_2 $$ public Object invokeInContext(MethodInvocation invocation) throws Throwable -->Line_8 $$ return method.invoke(ejb, invocation.getArguments())[ FD ]
Line_3 $$ Object ejb = null-->Line_5 $$ ejb = getSessionBeanInstance()[ FD ]
Line_14 $$ Throwable targetEx = ex.getTargetException()-->Line_16 $$ logger.debug("Method of local EJB [" + getJndiName() + "] threw exception", targetEx)[ FD ]
Line_15 $$ if (logger.isDebugEnabled()) -->Line_16 $$ logger.debug("Method of local EJB [" + getJndiName() + "] threw exception", targetEx)[ CD ]
Line_3 $$ Object ejb = null-->Line_7 $$ if (method.getDeclaringClass().isInstance(ejb)) [ FD ]
Line_7 $$ if (method.getDeclaringClass().isInstance(ejb)) -->Line_10 $$ Method ejbMethod = ejb.getClass().getMethod(method.getName(), method.getParameterTypes())[ CD ]
Line_3 $$ Object ejb = null-->Line_10 $$ Method ejbMethod = ejb.getClass().getMethod(method.getName(), method.getParameterTypes())[ FD ]
Line_3 $$ Object ejb = null-->Line_11 $$ return ejbMethod.invoke(ejb, invocation.getArguments())[ FD ]
Line_6 $$ Method method = invocation.getMethod()-->Line_8 $$ return method.invoke(ejb, invocation.getArguments())[ FD ]
Line_3 $$ Object ejb = null-->Line_28 $$ if (ejb instanceof EJBLocalObject) [ FD ]
Line_6 $$ Method method = invocation.getMethod()-->Line_7 $$ if (method.getDeclaringClass().isInstance(ejb)) [ FD ]
Line_7 $$ if (method.getDeclaringClass().isInstance(ejb)) -->Line_11 $$ return ejbMethod.invoke(ejb, invocation.getArguments())[ CD ]
Line_2 $$ public Object invokeInContext(MethodInvocation invocation) throws Throwable -->Line_11 $$ return ejbMethod.invoke(ejb, invocation.getArguments())[ FD ]
Line_5 $$ ejb = getSessionBeanInstance()-->Line_8 $$ return method.invoke(ejb, invocation.getArguments())[ FD ]
Line_28 $$ if (ejb instanceof EJBLocalObject) -->Line_29 $$ releaseSessionBeanInstance((EJBLocalObject) ejb)[ CD ]
Line_2 $$ public Object invokeInContext(MethodInvocation invocation) throws Throwable -->Line_26 $$ throw new EjbAccessException("Could not access method [" + invocation.getMethod().getName() + "] of local EJB [" + getJndiName() + "]", ex)[ FD ]
Line_7 $$ if (method.getDeclaringClass().isInstance(ejb)) -->Line_8 $$ return method.invoke(ejb, invocation.getArguments())[ CD ]
Line_6 $$ Method method = invocation.getMethod()-->Line_10 $$ Method ejbMethod = ejb.getClass().getMethod(method.getName(), method.getParameterTypes())[ FD ]
Line_5 $$ ejb = getSessionBeanInstance()-->Line_7 $$ if (method.getDeclaringClass().isInstance(ejb)) [ FD ]
Line_2 $$ public Object invokeInContext(MethodInvocation invocation) throws Throwable -->Line_3 $$ Object ejb = null[ CD ]
