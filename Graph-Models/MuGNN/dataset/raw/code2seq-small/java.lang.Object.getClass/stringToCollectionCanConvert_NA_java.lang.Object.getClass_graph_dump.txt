Line_2 $$ public void stringToCollectionCanConvert() throws Exception -->Line_3 $$ conversionService.addConverter(new StringToCollectionConverter(conversionService))[ CD ]
Line_2 $$ public void stringToCollectionCanConvert() throws Exception -->Line_4 $$ assertTrue(conversionService.canConvert(String.class, Collection.class))[ CD ]
Line_2 $$ public void stringToCollectionCanConvert() throws Exception -->Line_7 $$ conversionService.addConverterFactory(new StringToNumberConverterFactory())[ CD ]
Line_2 $$ public void stringToCollectionCanConvert() throws Exception -->Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("integerCollection"))[ CD ]
Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("integerCollection"))-->Line_6 $$ assertFalse(conversionService.canConvert(TypeDescriptor.valueOf(String.class), targetType))[ FD ]
Line_2 $$ public void stringToCollectionCanConvert() throws Exception -->Line_8 $$ assertTrue(conversionService.canConvert(TypeDescriptor.valueOf(String.class), targetType))[ CD ]
Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("integerCollection"))-->Line_8 $$ assertTrue(conversionService.canConvert(TypeDescriptor.valueOf(String.class), targetType))[ FD ]
Line_2 $$ public void stringToCollectionCanConvert() throws Exception -->Line_6 $$ assertFalse(conversionService.canConvert(TypeDescriptor.valueOf(String.class), targetType))[ CD ]
