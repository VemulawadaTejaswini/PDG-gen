Line_6 $$ final Element res = new Element("splitter")-->Line_13 $$ res.addContent(first)[ FD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_13 $$ res.addContent(first)[ CD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_9 $$ final Element first = new Element("split-first")[ CD ]
Line_16 $$ if (comp instanceof JBTabs) -->Line_22 $$ writeWindow(res, findWindowWith(comp))[ CD ]
Line_24 $$ if (comp instanceof EditorWindow.TCompForTablessMode) -->Line_30 $$ LOG.error(comp != null ? comp.getClass().getName() : null)[ CD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_15 $$ return res[ CD ]
Line_2 $$ private Element writePanel(final JPanel panel) -->Line_3 $$ final Component comp = panel.getComponent(0)[ FD ]
Line_3 $$ final Component comp = panel.getComponent(0)-->Line_24 $$ if (comp instanceof EditorWindow.TCompForTablessMode) [ FD ]
Line_18 $$ Integer limit = UIUtil.getClientProperty(((JBTabs) comp).getComponent(), JBTabsImpl.SIDE_TABS_SIZE_LIMIT_KEY)-->Line_19 $$ if (limit != null) [ FD ]
Line_5 $$ final Splitter splitter = (Splitter) comp-->Line_12 $$ second.addContent(writePanel((JPanel) splitter.getSecondComponent()))[ FD ]
Line_3 $$ final Component comp = panel.getComponent(0)-->Line_30 $$ LOG.error(comp != null ? comp.getClass().getName() : null)[ FD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_14 $$ res.addContent(second)[ CD ]
Line_6 $$ final Element res = new Element("splitter")-->Line_7 $$ res.setAttribute("split-orientation", splitter.getOrientation() ? "vertical" : "horizontal")[ FD ]
Line_5 $$ final Splitter splitter = (Splitter) comp-->Line_8 $$ res.setAttribute("split-proportion", Float.toString(splitter.getProportion()))[ FD ]
Line_9 $$ final Element first = new Element("split-first")-->Line_13 $$ res.addContent(first)[ FD ]
Line_5 $$ final Splitter splitter = (Splitter) comp-->Line_10 $$ first.addContent(writePanel((JPanel) splitter.getFirstComponent()))[ FD ]
Line_6 $$ final Element res = new Element("splitter")-->Line_14 $$ res.addContent(second)[ FD ]
Line_16 $$ if (comp instanceof JBTabs) -->Line_18 $$ Integer limit = UIUtil.getClientProperty(((JBTabs) comp).getComponent(), JBTabsImpl.SIDE_TABS_SIZE_LIMIT_KEY)[ CD ]
Line_16 $$ if (comp instanceof JBTabs) -->Line_19 $$ if (limit != null) [ CD ]
Line_11 $$ final Element second = new Element("split-second")-->Line_12 $$ second.addContent(writePanel((JPanel) splitter.getSecondComponent()))[ FD ]
Line_3 $$ final Component comp = panel.getComponent(0)-->Line_22 $$ writeWindow(res, findWindowWith(comp))[ FD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_5 $$ final Splitter splitter = (Splitter) comp[ CD ]
Line_11 $$ final Element second = new Element("split-second")-->Line_14 $$ res.addContent(second)[ FD ]
Line_24 $$ if (comp instanceof EditorWindow.TCompForTablessMode) -->Line_28 $$ return res[ CD ]
Line_16 $$ if (comp instanceof JBTabs) -->Line_23 $$ return res[ CD ]
Line_24 $$ if (comp instanceof EditorWindow.TCompForTablessMode) -->Line_25 $$ EditorWithProviderComposite composite = ((EditorWindow.TCompForTablessMode) comp).myEditor[ CD ]
Line_6 $$ final Element res = new Element("splitter")-->Line_20 $$ res.setAttribute(JBTabsImpl.SIDE_TABS_SIZE_LIMIT_KEY.toString(), String.valueOf(limit))[ FD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_7 $$ res.setAttribute("split-orientation", splitter.getOrientation() ? "vertical" : "horizontal")[ CD ]
Line_24 $$ if (comp instanceof EditorWindow.TCompForTablessMode) -->Line_31 $$ return null[ CD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_11 $$ final Element second = new Element("split-second")[ CD ]
Line_6 $$ final Element res = new Element("splitter")-->Line_27 $$ res.addContent(writeComposite(composite.getFile(), composite, false, composite))[ FD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_10 $$ first.addContent(writePanel((JPanel) splitter.getFirstComponent()))[ CD ]
Line_16 $$ if (comp instanceof JBTabs) -->Line_24 $$ if (comp instanceof EditorWindow.TCompForTablessMode) [ CD ]
Line_18 $$ Integer limit = UIUtil.getClientProperty(((JBTabs) comp).getComponent(), JBTabsImpl.SIDE_TABS_SIZE_LIMIT_KEY)-->Line_20 $$ res.setAttribute(JBTabsImpl.SIDE_TABS_SIZE_LIMIT_KEY.toString(), String.valueOf(limit))[ FD ]
Line_5 $$ final Splitter splitter = (Splitter) comp-->Line_7 $$ res.setAttribute("split-orientation", splitter.getOrientation() ? "vertical" : "horizontal")[ FD ]
Line_9 $$ final Element first = new Element("split-first")-->Line_10 $$ first.addContent(writePanel((JPanel) splitter.getFirstComponent()))[ FD ]
Line_19 $$ if (limit != null) -->Line_20 $$ res.setAttribute(JBTabsImpl.SIDE_TABS_SIZE_LIMIT_KEY.toString(), String.valueOf(limit))[ CD ]
Line_3 $$ final Component comp = panel.getComponent(0)-->Line_16 $$ if (comp instanceof JBTabs) [ FD ]
Line_2 $$ private Element writePanel(final JPanel panel) -->Line_4 $$ if (comp instanceof Splitter) [ CD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_16 $$ if (comp instanceof JBTabs) [ CD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_12 $$ second.addContent(writePanel((JPanel) splitter.getSecondComponent()))[ CD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_8 $$ res.setAttribute("split-proportion", Float.toString(splitter.getProportion()))[ CD ]
Line_6 $$ final Element res = new Element("splitter")-->Line_22 $$ writeWindow(res, findWindowWith(comp))[ FD ]
Line_24 $$ if (comp instanceof EditorWindow.TCompForTablessMode) -->Line_27 $$ res.addContent(writeComposite(composite.getFile(), composite, false, composite))[ CD ]
Line_4 $$ if (comp instanceof Splitter) -->Line_6 $$ final Element res = new Element("splitter")[ CD ]
Line_2 $$ private Element writePanel(final JPanel panel) -->Line_3 $$ final Component comp = panel.getComponent(0)[ CD ]
Line_3 $$ final Component comp = panel.getComponent(0)-->Line_4 $$ if (comp instanceof Splitter) [ FD ]
Line_25 $$ EditorWithProviderComposite composite = ((EditorWindow.TCompForTablessMode) comp).myEditor-->Line_27 $$ res.addContent(writeComposite(composite.getFile(), composite, false, composite))[ FD ]
Line_6 $$ final Element res = new Element("splitter")-->Line_8 $$ res.setAttribute("split-proportion", Float.toString(splitter.getProportion()))[ FD ]
