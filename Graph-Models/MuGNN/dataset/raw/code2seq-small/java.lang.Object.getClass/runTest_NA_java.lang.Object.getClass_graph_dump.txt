Line_3 $$ HandlerMethodArgumentResolverComposite resolvers = new HandlerMethodArgumentResolverComposite()-->Line_12 $$ modelMethod.setHandlerMethodArgumentResolvers(resolvers)[ FD ]
Line_11 $$ InvocableHandlerMethod modelMethod = new InvocableHandlerMethod(controller, method)-->Line_14 $$ modelMethods.add(modelMethod)[ FD ]
Line_7 $$ Class<?> type = controller.getClass()-->Line_8 $$ Set<Method> methods = MethodIntrospector.selectMethods(type, METHOD_FILTER)[ FD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_5 $$ resolvers.addResolver(new ModelMethodProcessor())[ CD ]
Line_20 $$ if (logger.isDebugEnabled()) -->Line_21 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_6 $$ WebDataBinderFactory dataBinderFactory = new DefaultDataBinderFactory(null)[ CD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_18 $$ ModelFactory factory = new ModelFactory(modelMethods, dataBinderFactory, sessionHandler)[ CD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_8 $$ Set<Method> methods = MethodIntrospector.selectMethods(type, METHOD_FILTER)[ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_23 $$ sb.append(" >> ").append(name)[ FD ]
Line_9 $$ List<InvocableHandlerMethod> modelMethods = new ArrayList<InvocableHandlerMethod>()-->Line_16 $$ Collections.shuffle(modelMethods)[ FD ]
Line_3 $$ HandlerMethodArgumentResolverComposite resolvers = new HandlerMethodArgumentResolverComposite()-->Line_5 $$ resolvers.addResolver(new ModelMethodProcessor())[ FD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_4 $$ resolvers.addResolver(new ModelAttributeMethodProcessor(false))[ CD ]
Line_11 $$ InvocableHandlerMethod modelMethod = new InvocableHandlerMethod(controller, method)-->Line_12 $$ modelMethod.setHandlerMethodArgumentResolvers(resolvers)[ FD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_9 $$ List<InvocableHandlerMethod> modelMethods = new ArrayList<InvocableHandlerMethod>()[ CD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_17 $$ SessionAttributesHandler sessionHandler = new SessionAttributesHandler(type, this.sessionAttributeStore)[ CD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_7 $$ Class<?> type = controller.getClass()[ FD ]
Line_20 $$ if (logger.isDebugEnabled()) -->Line_25 $$ logger.debug(sb)[ CD ]
Line_6 $$ WebDataBinderFactory dataBinderFactory = new DefaultDataBinderFactory(null)-->Line_13 $$ modelMethod.setDataBinderFactory(dataBinderFactory)[ FD ]
Line_22 $$ for (String name : getInvokedMethods()) -->Line_23 $$ sb.append(" >> ").append(name)[ FD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_3 $$ HandlerMethodArgumentResolverComposite resolvers = new HandlerMethodArgumentResolverComposite()[ CD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_16 $$ Collections.shuffle(modelMethods)[ CD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_7 $$ Class<?> type = controller.getClass()[ CD ]
Line_21 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ logger.debug(sb)[ FD ]
Line_3 $$ HandlerMethodArgumentResolverComposite resolvers = new HandlerMethodArgumentResolverComposite()-->Line_4 $$ resolvers.addResolver(new ModelAttributeMethodProcessor(false))[ FD ]
Line_11 $$ InvocableHandlerMethod modelMethod = new InvocableHandlerMethod(controller, method)-->Line_13 $$ modelMethod.setDataBinderFactory(dataBinderFactory)[ FD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_19 $$ factory.initModel(this.webRequest, this.mavContainer, new HandlerMethod(controller, "handle"))[ CD ]
Line_2 $$ private void runTest(Object controller) throws Exception -->Line_20 $$ if (logger.isDebugEnabled()) [ CD ]
Line_18 $$ ModelFactory factory = new ModelFactory(modelMethods, dataBinderFactory, sessionHandler)-->Line_19 $$ factory.initModel(this.webRequest, this.mavContainer, new HandlerMethod(controller, "handle"))[ FD ]
Line_9 $$ List<InvocableHandlerMethod> modelMethods = new ArrayList<InvocableHandlerMethod>()-->Line_14 $$ modelMethods.add(modelMethod)[ FD ]
