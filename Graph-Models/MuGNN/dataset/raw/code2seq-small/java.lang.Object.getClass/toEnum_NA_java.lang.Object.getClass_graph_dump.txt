Line_2 $$ private <T extends Enum<T>> T toEnum(Class<T> enumType, Object value) -->Line_9 $$ throw new IllegalArgumentException(String.format("Cannot convert value '%s' of type '%s' to enum type '%s'", value, value.getClass(), enumType))[ FD ]
Line_2 $$ private <T extends Enum<T>> T toEnum(Class<T> enumType, Object value) -->Line_3 $$ if (enumType.isInstance(value)) [ FD ]
Line_2 $$ private <T extends Enum<T>> T toEnum(Class<T> enumType, Object value) -->Line_7 $$ return Enum.valueOf(enumType, GUtil.toConstant(value.toString()))[ FD ]
Line_2 $$ private <T extends Enum<T>> T toEnum(Class<T> enumType, Object value) -->Line_6 $$ if (value instanceof CharSequence) [ FD ]
Line_2 $$ private <T extends Enum<T>> T toEnum(Class<T> enumType, Object value) -->Line_4 $$ return enumType.cast(value)[ FD ]
Line_3 $$ if (enumType.isInstance(value)) -->Line_4 $$ return enumType.cast(value)[ CD ]
Line_2 $$ private <T extends Enum<T>> T toEnum(Class<T> enumType, Object value) -->Line_3 $$ if (enumType.isInstance(value)) [ CD ]
Line_6 $$ if (value instanceof CharSequence) -->Line_7 $$ return Enum.valueOf(enumType, GUtil.toConstant(value.toString()))[ CD ]
Line_2 $$ private <T extends Enum<T>> T toEnum(Class<T> enumType, Object value) -->Line_6 $$ if (value instanceof CharSequence) [ CD ]
