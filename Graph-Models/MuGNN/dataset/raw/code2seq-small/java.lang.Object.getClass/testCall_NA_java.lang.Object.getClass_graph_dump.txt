Line_2 $$ public void testCall() throws Exception -->Line_18 $$ Assert.assertSame(_mockRemoteSPI, attributes.remove(SPI.SPI_INSTANCE_PUBLICATION_KEY))[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_26 $$ Assert.assertTrue(ProcessContext.isAttached())[ CD ]
Line_3 $$ final AtomicBoolean throwIOException = new AtomicBoolean()-->Line_6 $$ if (throwIOException.get()) [ FD ]
Line_2 $$ public void testCall() throws Exception -->Line_39 $$ ProcessContext.detach()[ CD ]
Line_4 $$ ProcessOutputStream processOutputStream = new ProcessOutputStream(new ObjectOutputStream(new UnsyncByteArrayOutputStream())) -->Line_9 $$ super.writeProcessCallable(processCallable)[ FD ]
Line_2 $$ public void testCall() throws Exception -->Line_14 $$ SPI spi = _mockRemoteSPI.call()[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_30 $$ throwIOException.set(true)[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_29 $$ UnicastRemoteObject.unexportObject(_mockRemoteSPI, true)[ CD ]
Line_4 $$ ProcessOutputStream processOutputStream = new ProcessOutputStream(new ObjectOutputStream(new UnsyncByteArrayOutputStream())) -->Line_12 $$ ReflectionTestUtil.setFieldValue(ProcessContext.class, "_processOutputStream", processOutputStream)[ FD ]
Line_2 $$ public void testCall() throws Exception -->Line_38 $$ Assert.assertTrue(ProcessContext.isAttached())[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_17 $$ ProcessContext.detach()[ CD ]
Line_4 $$ ProcessOutputStream processOutputStream = new ProcessOutputStream(new ObjectOutputStream(new UnsyncByteArrayOutputStream())) -->Line_6 $$ if (throwIOException.get()) [ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_16 $$ Assert.assertTrue(ProcessContext.isAttached())[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_40 $$ Assert.assertNull(attributes.remove(SPI.SPI_INSTANCE_PUBLICATION_KEY))[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_41 $$ UnicastRemoteObject.unexportObject(_mockRemoteSPI, true)[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_4 $$ ProcessOutputStream processOutputStream = new ProcessOutputStream(new ObjectOutputStream(new UnsyncByteArrayOutputStream())) [ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_28 $$ Assert.assertNull(attributes.remove(SPI.SPI_INSTANCE_PUBLICATION_KEY))[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_27 $$ ProcessContext.detach()[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_3 $$ final AtomicBoolean throwIOException = new AtomicBoolean()[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_15 $$ Assert.assertSame(spi, UnicastRemoteObject.toStub(_mockRemoteSPI))[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_13 $$ ConcurrentMap<String, Object> attributes = ProcessContext.getAttributes()[ CD ]
Line_2 $$ public void testCall() throws Exception -->Line_12 $$ ReflectionTestUtil.setFieldValue(ProcessContext.class, "_processOutputStream", processOutputStream)[ CD ]
Line_3 $$ final AtomicBoolean throwIOException = new AtomicBoolean()-->Line_30 $$ throwIOException.set(true)[ FD ]
Line_4 $$ ProcessOutputStream processOutputStream = new ProcessOutputStream(new ObjectOutputStream(new UnsyncByteArrayOutputStream())) -->Line_9 $$ super.writeProcessCallable(processCallable)[ CD ]
