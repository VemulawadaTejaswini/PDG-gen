Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_3 $$ Mapper.Context context = mock(Mapper.Context.class)[ CD ]
Line_8 $$ File f = File.createTempFile(this.getClass().getSimpleName(), null)-->Line_10 $$ FileStatus stat = new FileStatus(1L, false, 1, 1024, 0, new Path(f.toURI()))[ FD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_17 $$ assertNotNull("close didn't fail", actualEx)[ CD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_4 $$ doReturn(new Configuration()).when(context).getConfiguration()[ CD ]
Line_11 $$ Exception actualEx = null-->Line_18 $$ assertEquals(expectedEx, actualEx)[ FD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_8 $$ File f = File.createTempFile(this.getClass().getSimpleName(), null)[ CD ]
Line_6 $$ OutputStream out = mock(OutputStream.class)-->Line_7 $$ doThrow(expectedEx).when(out).close()[ FD ]
Line_5 $$ Exception expectedEx = new IOException("boom")-->Line_7 $$ doThrow(expectedEx).when(out).close()[ FD ]
Line_3 $$ Mapper.Context context = mock(Mapper.Context.class)-->Line_13 $$ new RetriableFileCopyCommand("testFailOnCloseError", FileAction.OVERWRITE).copyBytes(stat, 0, out, 512, context)[ FD ]
Line_15 $$ actualEx = e-->Line_18 $$ assertEquals(expectedEx, actualEx)[ FD ]
Line_11 $$ Exception actualEx = null-->Line_17 $$ assertNotNull("close didn't fail", actualEx)[ FD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_5 $$ Exception expectedEx = new IOException("boom")[ CD ]
Line_3 $$ Mapper.Context context = mock(Mapper.Context.class)-->Line_4 $$ doReturn(new Configuration()).when(context).getConfiguration()[ FD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_6 $$ OutputStream out = mock(OutputStream.class)[ CD ]
Line_10 $$ FileStatus stat = new FileStatus(1L, false, 1, 1024, 0, new Path(f.toURI()))-->Line_13 $$ new RetriableFileCopyCommand("testFailOnCloseError", FileAction.OVERWRITE).copyBytes(stat, 0, out, 512, context)[ FD ]
Line_11 $$ Exception actualEx = null-->Line_15 $$ actualEx = e[ FD ]
Line_5 $$ Exception expectedEx = new IOException("boom")-->Line_18 $$ assertEquals(expectedEx, actualEx)[ FD ]
Line_15 $$ actualEx = e-->Line_17 $$ assertNotNull("close didn't fail", actualEx)[ FD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_7 $$ doThrow(expectedEx).when(out).close()[ CD ]
Line_8 $$ File f = File.createTempFile(this.getClass().getSimpleName(), null)-->Line_9 $$ f.deleteOnExit()[ FD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_18 $$ assertEquals(expectedEx, actualEx)[ CD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_9 $$ f.deleteOnExit()[ CD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_11 $$ Exception actualEx = null[ CD ]
Line_2 $$ public void testFailOnCloseError() throws Exception -->Line_10 $$ FileStatus stat = new FileStatus(1L, false, 1, 1024, 0, new Path(f.toURI()))[ CD ]
Line_6 $$ OutputStream out = mock(OutputStream.class)-->Line_13 $$ new RetriableFileCopyCommand("testFailOnCloseError", FileAction.OVERWRITE).copyBytes(stat, 0, out, 512, context)[ FD ]
