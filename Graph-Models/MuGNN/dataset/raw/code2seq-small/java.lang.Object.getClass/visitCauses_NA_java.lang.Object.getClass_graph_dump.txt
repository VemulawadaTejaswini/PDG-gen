Line_8 $$ for (Throwable cause : causes) -->Line_9 $$ visitor.node(cause)[ FD ]
Line_18 $$ if (t.getCause() != null) -->Line_20 $$ Throwable next = findNearestContextualCause(t)[ CD ]
Line_5 $$ List<? extends Throwable> causes = multiCauseException.getCauses()-->Line_6 $$ if (!causes.isEmpty()) [ FD ]
Line_18 $$ if (t.getCause() != null) -->Line_27 $$ visitor.endChildren()[ CD ]
Line_18 $$ if (t.getCause() != null) -->Line_19 $$ visitor.startChildren()[ CD ]
Line_6 $$ if (!causes.isEmpty()) -->Line_7 $$ visitor.startChildren()[ CD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_19 $$ visitor.startChildren()[ FD ]
Line_21 $$ if (next != null) -->Line_22 $$ visitor.node(next)[ CD ]
Line_10 $$ if (cause.getClass().getAnnotation(Contextual.class) != null) -->Line_11 $$ visitCauses(cause, visitor)[ CD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_25 $$ visitor.node(t.getCause())[ FD ]
Line_20 $$ Throwable next = findNearestContextualCause(t)-->Line_21 $$ if (next != null) [ FD ]
Line_3 $$ if (t instanceof MultiCauseException) -->Line_4 $$ MultiCauseException multiCauseException = (MultiCauseException) t[ CD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_14 $$ visitor.endChildren()[ FD ]
Line_20 $$ Throwable next = findNearestContextualCause(t)-->Line_23 $$ visitCauses(next, visitor)[ FD ]
Line_21 $$ if (next != null) -->Line_23 $$ visitCauses(next, visitor)[ CD ]
Line_3 $$ if (t instanceof MultiCauseException) -->Line_16 $$ return[ CD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_18 $$ if (t.getCause() != null) [ CD ]
Line_3 $$ if (t instanceof MultiCauseException) -->Line_5 $$ List<? extends Throwable> causes = multiCauseException.getCauses()[ CD ]
Line_8 $$ for (Throwable cause : causes) -->Line_11 $$ visitCauses(cause, visitor)[ FD ]
Line_8 $$ for (Throwable cause : causes) -->Line_10 $$ if (cause.getClass().getAnnotation(Contextual.class) != null) [ FD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_18 $$ if (t.getCause() != null) [ FD ]
Line_4 $$ MultiCauseException multiCauseException = (MultiCauseException) t-->Line_5 $$ List<? extends Throwable> causes = multiCauseException.getCauses()[ FD ]
Line_18 $$ if (t.getCause() != null) -->Line_21 $$ if (next != null) [ CD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_23 $$ visitCauses(next, visitor)[ FD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_3 $$ if (t instanceof MultiCauseException) [ CD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_27 $$ visitor.endChildren()[ FD ]
Line_6 $$ if (!causes.isEmpty()) -->Line_14 $$ visitor.endChildren()[ CD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_11 $$ visitCauses(cause, visitor)[ FD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_22 $$ visitor.node(next)[ FD ]
Line_21 $$ if (next != null) -->Line_25 $$ visitor.node(t.getCause())[ CD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_7 $$ visitor.startChildren()[ FD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_9 $$ visitor.node(cause)[ FD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_20 $$ Throwable next = findNearestContextualCause(t)[ FD ]
Line_2 $$ private void visitCauses(Throwable t, TreeVisitor<? super Throwable> visitor) -->Line_3 $$ if (t instanceof MultiCauseException) [ FD ]
Line_3 $$ if (t instanceof MultiCauseException) -->Line_6 $$ if (!causes.isEmpty()) [ CD ]
Line_20 $$ Throwable next = findNearestContextualCause(t)-->Line_22 $$ visitor.node(next)[ FD ]
