Line_11 $$ Task mapTask = it.next()-->Line_37 $$ mapTask = it.next()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_26 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_27 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_11 $$ Task mapTask = it.next()-->Line_17 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_24 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_37 $$ mapTask = it.next()-->Line_43 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_17 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ CD ]
Line_11 $$ Task mapTask = it.next()-->Line_39 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_44 $$ reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_46 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_11 $$ Task mapTask = it.next()[ FD ]
Line_22 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_23 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_46 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)-->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_35 $$ Assert.assertEquals("Num tasks not correct", 2, job.getTasks().size())[ CD ]
Line_36 $$ it = job.getTasks().values().iterator()-->Line_37 $$ mapTask = it.next()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_21 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_34 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_33 $$ job = app.submit(conf)-->Line_36 $$ it = job.getTasks().values().iterator()[ FD ]
Line_22 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_44 $$ reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_16 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_16 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_18 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_22 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ CD ]
Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_12 $$ Task reduceTask = it.next()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_25 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_31 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ FD ]
Line_11 $$ Task mapTask = it.next()-->Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_35 $$ Assert.assertEquals("Num tasks not correct", 2, job.getTasks().size())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_7 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_11 $$ Task mapTask = it.next()[ CD ]
Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)-->Line_39 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)-->Line_46 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_12 $$ Task reduceTask = it.next()-->Line_21 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_24 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_9 $$ Assert.assertEquals("Num tasks not correct", 2, job.getTasks().size())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_36 $$ it = job.getTasks().values().iterator()[ CD ]
Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)-->Line_33 $$ job = app.submit(conf)[ FD ]
Line_38 $$ reduceTask = it.next()-->Line_44 $$ reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ FD ]
Line_22 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_25 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_39 $$ app.waitForState(mapTask, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_19 $$ Assert.assertEquals("Num completion events not correct", 1, events.length)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_38 $$ reduceTask = it.next()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_26 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_37 $$ mapTask = it.next()-->Line_40 $$ mapAttempt1 = mapTask.getAttempts().values().iterator().next()[ FD ]
Line_3 $$ int runCount = 0-->Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_33 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_13 $$ app.waitForState(mapTask, TaskState.RUNNING)[ CD ]
Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_26 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)-->Line_34 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_43 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_48 $$ Assert.assertEquals("Num completion events not correct", 2, events.length)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_6 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_11 $$ Task mapTask = it.next()-->Line_43 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_33 $$ job = app.submit(conf)-->Line_47 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_15 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ CD ]
Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)-->Line_43 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_34 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_7 $$ Job job = app.submit(conf)[ CD ]
Line_12 $$ Task reduceTask = it.next()-->Line_22 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ FD ]
Line_30 $$ conf = new Configuration()-->Line_32 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_11 $$ Task mapTask = it.next()-->Line_27 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_21 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_39 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_40 $$ mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_41 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_32 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_11 $$ Task mapTask = it.next()-->Line_40 $$ mapAttempt1 = mapTask.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_34 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_28 $$ app.stop()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_28 $$ app.stop()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_13 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_37 $$ mapTask = it.next()-->Line_39 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_41 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_18 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_16 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_15 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ FD ]
Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_41 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ FD ]
Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_40 $$ mapAttempt1 = mapTask.getAttempts().values().iterator().next()[ FD ]
Line_12 $$ Task reduceTask = it.next()-->Line_44 $$ reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ FD ]
Line_30 $$ conf = new Configuration()-->Line_31 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ FD ]
Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_36 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_40 $$ mapAttempt1 = mapTask.getAttempts().values().iterator().next()[ CD ]
Line_3 $$ int runCount = 0-->Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_30 $$ conf = new Configuration()[ CD ]
Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_37 $$ mapTask = it.next()[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_33 $$ job = app.submit(conf)[ FD ]
Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_38 $$ reduceTask = it.next()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_47 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_31 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ CD ]
Line_22 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_24 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_33 $$ job = app.submit(conf)[ FD ]
Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)-->Line_41 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ FD ]
Line_12 $$ Task reduceTask = it.next()-->Line_38 $$ reduceTask = it.next()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_12 $$ Task reduceTask = it.next()[ CD ]
Line_22 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_26 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_33 $$ job = app.submit(conf)-->Line_34 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_43 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_32 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_33 $$ job = app.submit(conf)[ CD ]
Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)-->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_23 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_20 $$ Assert.assertEquals("Event status not correct", TaskAttemptCompletionEventStatus.SUCCEEDED, events[0].getStatus())[ CD ]
Line_40 $$ mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_33 $$ job = app.submit(conf)-->Line_46 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_47 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_44 $$ reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_11 $$ Task mapTask = it.next()-->Line_13 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_15 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_29 $$ app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_36 $$ it = job.getTasks().values().iterator()-->Line_38 $$ reduceTask = it.next()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_46 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_22 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_36 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_27 $$ app.waitForState(mapTask, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_37 $$ mapTask = it.next()[ CD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_9 $$ Assert.assertEquals("Num tasks not correct", 2, job.getTasks().size())[ CD ]
Line_33 $$ job = app.submit(conf)-->Line_35 $$ Assert.assertEquals("Num tasks not correct", 2, job.getTasks().size())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_41 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_24 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_14 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_25 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_30 $$ conf = new Configuration()-->Line_33 $$ job = app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_23 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_30 $$ conf = new Configuration()[ FD ]
Line_2 $$ public void testFetchFailureWithRecovery() throws Exception -->Line_3 $$ int runCount = 0[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_17 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 1, false, this.getClass().getName(), true, ++runCount)-->Line_25 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_18 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_47 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
