Line_4 $$ Class<?> clazz = clazz0.isAnonymousClass() ? clazz0.getSuperclass() : clazz0-->Line_5 $$ myProperties.add(new PropertyBean("class", clazz.getName()))[ FD ]
Line_2 $$ void fillTable() -->Line_20 $$ myProperties.add(new PropertyBean("added-at", addedAt))[ CD ]
Line_3 $$ Class<?> clazz0 = myComponent.getClass()-->Line_4 $$ Class<?> clazz = clazz0.isAnonymousClass() ? clazz0.getSuperclass() : clazz0[ FD ]
Line_2 $$ void fillTable() -->Line_5 $$ myProperties.add(new PropertyBean("class", clazz.getName()))[ CD ]
Line_6 $$ for (String name : PROPERTIES) -->Line_11 $$ propertyValue = ReflectionUtil.findMethod(Arrays.asList(clazz.getMethods()), name).invoke(myComponent)[ FD ]
Line_6 $$ for (String name : PROPERTIES) -->Line_7 $$ String propertyName = ObjectUtils.notNull(StringUtil.getPropertyName(name), name)[ FD ]
Line_8 $$ Object propertyValue-->Line_13 $$ propertyValue = ReflectionUtil.findField(clazz, null, name).get(myComponent)[ FD ]
Line_2 $$ void fillTable() -->Line_4 $$ Class<?> clazz = clazz0.isAnonymousClass() ? clazz0.getSuperclass() : clazz0[ CD ]
Line_8 $$ Object propertyValue-->Line_11 $$ propertyValue = ReflectionUtil.findMethod(Arrays.asList(clazz.getMethods()), name).invoke(myComponent)[ FD ]
Line_2 $$ void fillTable() -->Line_3 $$ Class<?> clazz0 = myComponent.getClass()[ CD ]
Line_4 $$ Class<?> clazz = clazz0.isAnonymousClass() ? clazz0.getSuperclass() : clazz0-->Line_13 $$ propertyValue = ReflectionUtil.findField(clazz, null, name).get(myComponent)[ FD ]
Line_6 $$ for (String name : PROPERTIES) -->Line_13 $$ propertyValue = ReflectionUtil.findField(clazz, null, name).get(myComponent)[ FD ]
Line_2 $$ void fillTable() -->Line_19 $$ Object addedAt = myComponent instanceof JComponent ? ((JComponent) myComponent).getClientProperty("uiInspector.addedAt") : null[ CD ]
Line_4 $$ Class<?> clazz = clazz0.isAnonymousClass() ? clazz0.getSuperclass() : clazz0-->Line_11 $$ propertyValue = ReflectionUtil.findMethod(Arrays.asList(clazz.getMethods()), name).invoke(myComponent)[ FD ]
Line_11 $$ propertyValue = ReflectionUtil.findMethod(Arrays.asList(clazz.getMethods()), name).invoke(myComponent)-->Line_13 $$ propertyValue = ReflectionUtil.findField(clazz, null, name).get(myComponent)[ FD ]
