Line_2 $$ protected void initCheckers() throws Exception -->Line_7 $$ if (_log.isInfoEnabled()) [ CD ]
Line_17 $$ Checker checker = (Checker) checkerClass.newInstance()-->Line_22 $$ _checkers.put(permissionClassName, checker)[ FD ]
Line_16 $$ Class<?> checkerClass = classLoader.loadClass(checkerClassName)-->Line_17 $$ Checker checker = (Checker) checkerClass.newInstance()[ FD ]
Line_13 $$ int y = key.indexOf("]")-->Line_14 $$ String permissionClassName = key.substring(x + 1, y)[ FD ]
Line_7 $$ if (_log.isInfoEnabled()) -->Line_8 $$ _log.info("Registering " + portalProperties.size() + " PACL policy checkers")[ CD ]
Line_4 $$ ClassLoader classLoader = clazz.getClassLoader()-->Line_16 $$ Class<?> checkerClass = classLoader.loadClass(checkerClassName)[ FD ]
Line_11 $$ String key = (String) entry.getKey()-->Line_12 $$ int x = key.indexOf("[")[ FD ]
Line_5 $$ Properties portalProperties = PropsUtil.getProperties("portal.security.manager.pacl.policy.checker", false)-->Line_8 $$ _log.info("Registering " + portalProperties.size() + " PACL policy checkers")[ FD ]
Line_10 $$ for (Map.Entry<Object, Object> entry : portalProperties.entrySet()) -->Line_15 $$ String checkerClassName = (String) entry.getValue()[ FD ]
Line_19 $$ if (_log.isInfoEnabled()) -->Line_20 $$ _log.info("Registering permission " + permissionClassName + " with PACL policy " + checkerClassName)[ CD ]
Line_5 $$ Properties portalProperties = PropsUtil.getProperties("portal.security.manager.pacl.policy.checker", false)-->Line_10 $$ for (Map.Entry<Object, Object> entry : portalProperties.entrySet()) [ FD ]
Line_2 $$ protected void initCheckers() throws Exception -->Line_6 $$ portalProperties = new SortedProperties(portalProperties)[ CD ]
Line_2 $$ protected void initCheckers() throws Exception -->Line_4 $$ ClassLoader classLoader = clazz.getClassLoader()[ CD ]
Line_6 $$ portalProperties = new SortedProperties(portalProperties)-->Line_10 $$ for (Map.Entry<Object, Object> entry : portalProperties.entrySet()) [ FD ]
Line_6 $$ portalProperties = new SortedProperties(portalProperties)-->Line_8 $$ _log.info("Registering " + portalProperties.size() + " PACL policy checkers")[ FD ]
Line_5 $$ Properties portalProperties = PropsUtil.getProperties("portal.security.manager.pacl.policy.checker", false)-->Line_6 $$ portalProperties = new SortedProperties(portalProperties)[ FD ]
Line_11 $$ String key = (String) entry.getKey()-->Line_13 $$ int y = key.indexOf("]")[ FD ]
Line_15 $$ String checkerClassName = (String) entry.getValue()-->Line_16 $$ Class<?> checkerClass = classLoader.loadClass(checkerClassName)[ FD ]
Line_17 $$ Checker checker = (Checker) checkerClass.newInstance()-->Line_18 $$ initChecker(checker)[ FD ]
Line_10 $$ for (Map.Entry<Object, Object> entry : portalProperties.entrySet()) -->Line_11 $$ String key = (String) entry.getKey()[ FD ]
Line_14 $$ String permissionClassName = key.substring(x + 1, y)-->Line_22 $$ _checkers.put(permissionClassName, checker)[ FD ]
Line_3 $$ Class<?> clazz = getClass()-->Line_4 $$ ClassLoader classLoader = clazz.getClassLoader()[ FD ]
Line_11 $$ String key = (String) entry.getKey()-->Line_14 $$ String permissionClassName = key.substring(x + 1, y)[ FD ]
Line_2 $$ protected void initCheckers() throws Exception -->Line_5 $$ Properties portalProperties = PropsUtil.getProperties("portal.security.manager.pacl.policy.checker", false)[ CD ]
Line_2 $$ protected void initCheckers() throws Exception -->Line_3 $$ Class<?> clazz = getClass()[ CD ]
