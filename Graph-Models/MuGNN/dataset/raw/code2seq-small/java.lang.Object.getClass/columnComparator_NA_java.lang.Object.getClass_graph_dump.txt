Line_3 $$ return new Comparator<Object>() -->Line_5 $$ if (a instanceof Number && b instanceof Number) [ CD ]
Line_6 $$ Number x = (Number) a-->Line_14 $$ return Long.compare(x.longValue(), y.longValue())[ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_33 $$ checkArgument(a instanceof Comparable, "item is not Comparable: %s", a.getClass().getName())[ CD ]
Line_6 $$ Number x = (Number) a-->Line_16 $$ return precisionCompare(x.doubleValue(), y.doubleValue(), precision)[ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_21 $$ if ((a.getClass().isArray() && b.getClass().isArray())) [ FD ]
Line_27 $$ if ((a instanceof Map && b instanceof Map)) -->Line_31 $$ return a.hashCode() < b.hashCode() ? -1 : 1[ CD ]
Line_7 $$ Number y = (Number) b-->Line_16 $$ return precisionCompare(x.doubleValue(), y.doubleValue(), precision)[ FD ]
Line_6 $$ Number x = (Number) a-->Line_9 $$ boolean bothIntegral = isIntegral(x) && isIntegral(y)[ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_21 $$ if ((a.getClass().isArray() && b.getClass().isArray())) [ CD ]
Line_6 $$ Number x = (Number) a-->Line_8 $$ boolean bothReal = isReal(x) && isReal(y)[ FD ]
Line_7 $$ Number y = (Number) b-->Line_9 $$ boolean bothIntegral = isIntegral(x) && isIntegral(y)[ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_34 $$ return ((Comparable<Object>) a).compareTo(b)[ CD ]
Line_3 $$ return new Comparator<Object>() -->Line_31 $$ return a.hashCode() < b.hashCode() ? -1 : 1[ FD ]
Line_5 $$ if (a instanceof Number && b instanceof Number) -->Line_16 $$ return precisionCompare(x.doubleValue(), y.doubleValue(), precision)[ CD ]
Line_2 $$ private static Comparator<Object> columnComparator(int precision) -->Line_16 $$ return precisionCompare(x.doubleValue(), y.doubleValue(), precision)[ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_11 $$ throw new TypesDoNotMatchException(format("item types do not match: %s vs %s", a.getClass().getName(), b.getClass().getName()))[ FD ]
Line_22 $$ if (Arrays.deepEquals((Object[]) a, (Object[]) b)) -->Line_23 $$ return 0[ CD ]
Line_5 $$ if (a instanceof Number && b instanceof Number) -->Line_10 $$ if (!(bothReal || bothIntegral)) [ CD ]
Line_7 $$ Number y = (Number) b-->Line_8 $$ boolean bothReal = isReal(x) && isReal(y)[ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_27 $$ if ((a instanceof Map && b instanceof Map)) [ CD ]
Line_5 $$ if (a instanceof Number && b instanceof Number) -->Line_9 $$ boolean bothIntegral = isIntegral(x) && isIntegral(y)[ CD ]
Line_21 $$ if ((a.getClass().isArray() && b.getClass().isArray())) -->Line_25 $$ return Arrays.hashCode((Object[]) a) < Arrays.hashCode((Object[]) b) ? -1 : 1[ CD ]
Line_5 $$ if (a instanceof Number && b instanceof Number) -->Line_6 $$ Number x = (Number) a[ CD ]
Line_13 $$ if (isIntegral(x)) -->Line_14 $$ return Long.compare(x.longValue(), y.longValue())[ CD ]
Line_5 $$ if (a instanceof Number && b instanceof Number) -->Line_7 $$ Number y = (Number) b[ CD ]
Line_3 $$ return new Comparator<Object>() -->Line_18 $$ if (a.getClass() != b.getClass()) [ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_33 $$ checkArgument(a instanceof Comparable, "item is not Comparable: %s", a.getClass().getName())[ FD ]
Line_27 $$ if ((a instanceof Map && b instanceof Map)) -->Line_28 $$ if (a.equals(b)) [ CD ]
Line_3 $$ return new Comparator<Object>() -->Line_28 $$ if (a.equals(b)) [ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_18 $$ if (a.getClass() != b.getClass()) [ CD ]
Line_28 $$ if (a.equals(b)) -->Line_29 $$ return 0[ CD ]
Line_3 $$ return new Comparator<Object>() -->Line_34 $$ return ((Comparable<Object>) a).compareTo(b)[ FD ]
Line_3 $$ return new Comparator<Object>() -->Line_19 $$ throw new TypesDoNotMatchException(format("item types do not match: %s vs %s", a.getClass().getName(), b.getClass().getName()))[ FD ]
Line_21 $$ if ((a.getClass().isArray() && b.getClass().isArray())) -->Line_22 $$ if (Arrays.deepEquals((Object[]) a, (Object[]) b)) [ CD ]
Line_6 $$ Number x = (Number) a-->Line_13 $$ if (isIntegral(x)) [ FD ]
Line_5 $$ if (a instanceof Number && b instanceof Number) -->Line_13 $$ if (isIntegral(x)) [ CD ]
Line_2 $$ private static Comparator<Object> columnComparator(int precision) -->Line_3 $$ return new Comparator<Object>() [ CD ]
Line_5 $$ if (a instanceof Number && b instanceof Number) -->Line_8 $$ boolean bothReal = isReal(x) && isReal(y)[ CD ]
Line_7 $$ Number y = (Number) b-->Line_14 $$ return Long.compare(x.longValue(), y.longValue())[ FD ]
