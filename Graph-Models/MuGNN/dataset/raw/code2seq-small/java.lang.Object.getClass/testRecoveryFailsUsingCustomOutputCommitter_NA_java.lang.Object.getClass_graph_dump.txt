Line_9 $$ Job job = app.submit(conf)-->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_13 $$ Task mapTask1 = it.next()-->Line_16 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_17 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_31 $$ conf = new Configuration()[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_54 $$ app.verifyCompleted()[ FD ]
Line_14 $$ Task mapTask2 = it.next()-->Line_20 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_11 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_37 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_21 $$ TaskAttempt task3Attempt = mapTask3.getAttempts().values().iterator().next()[ CD ]
Line_9 $$ Job job = app.submit(conf)-->Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_14 $$ Task mapTask2 = it.next()[ CD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_44 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_23 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_8 $$ conf.setBoolean("want.am.recovery", false)[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_10 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_14 $$ Task mapTask2 = it.next()-->Line_50 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_7 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ CD ]
Line_43 $$ mapTask3 = it.next()-->Line_47 $$ task3Attempt = mapTask3.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_26 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_40 $$ it = job.getTasks().values().iterator()-->Line_41 $$ mapTask1 = it.next()[ FD ]
Line_9 $$ Job job = app.submit(conf)-->Line_11 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask3.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_49 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask1.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_17 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_23 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ CD ]
Line_14 $$ Task mapTask2 = it.next()-->Line_45 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_45 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_41 $$ mapTask1 = it.next()-->Line_49 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask1.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask3.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_41 $$ mapTask1 = it.next()-->Line_44 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_28 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_49 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask1.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_42 $$ mapTask2 = it.next()-->Line_50 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_37 $$ job = app.submit(conf)[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_36 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_6 $$ conf.setClass("mapred.output.committer.class", TestFileOutputCommitter.class, org.apache.hadoop.mapred.OutputCommitter.class)[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_15 $$ Task mapTask3 = it.next()[ CD ]
Line_13 $$ Task mapTask1 = it.next()-->Line_19 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_45 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_44 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_40 $$ it = job.getTasks().values().iterator()-->Line_43 $$ mapTask3 = it.next()[ FD ]
Line_15 $$ Task mapTask3 = it.next()-->Line_18 $$ app.waitForState(mapTask3, TaskState.RUNNING)[ FD ]
Line_13 $$ Task mapTask1 = it.next()-->Line_27 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask3.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_16 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_10 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_36 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_48 $$ app.waitForState(task3Attempt, TaskAttemptState.RUNNING)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_49 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask1.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_37 $$ job = app.submit(conf)[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_52 $$ app.waitForState(mapTask3, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_45 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_15 $$ Task mapTask3 = it.next()-->Line_21 $$ TaskAttempt task3Attempt = mapTask3.getAttempts().values().iterator().next()[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_37 $$ job = app.submit(conf)[ FD ]
Line_31 $$ conf = new Configuration()-->Line_34 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_37 $$ job = app.submit(conf)-->Line_39 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_9 $$ Job job = app.submit(conf)[ CD ]
Line_14 $$ Task mapTask2 = it.next()-->Line_42 $$ mapTask2 = it.next()[ FD ]
Line_19 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()-->Line_25 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_13 $$ Task mapTask1 = it.next()-->Line_44 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_54 $$ app.verifyCompleted()[ CD ]
Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_41 $$ mapTask1 = it.next()[ FD ]
Line_9 $$ Job job = app.submit(conf)-->Line_37 $$ job = app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_54 $$ app.verifyCompleted()[ FD ]
Line_9 $$ Job job = app.submit(conf)-->Line_40 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_39 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ CD ]
Line_9 $$ Job job = app.submit(conf)-->Line_10 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_34 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ CD ]
Line_43 $$ mapTask3 = it.next()-->Line_46 $$ app.waitForState(mapTask3, TaskState.RUNNING)[ FD ]
Line_14 $$ Task mapTask2 = it.next()-->Line_28 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_42 $$ mapTask2 = it.next()-->Line_45 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_19 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()-->Line_22 $$ app.waitForState(task1Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_40 $$ it = job.getTasks().values().iterator()-->Line_42 $$ mapTask2 = it.next()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_46 $$ app.waitForState(mapTask3, TaskState.RUNNING)[ CD ]
Line_20 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_26 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_35 $$ conf.setInt(MRJobConfig.NUM_REDUCES, 0)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_48 $$ app.waitForState(task3Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_31 $$ conf = new Configuration()-->Line_35 $$ conf.setInt(MRJobConfig.NUM_REDUCES, 0)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_32 $$ conf.setClass("mapred.output.committer.class", TestFileOutputCommitter.class, org.apache.hadoop.mapred.OutputCommitter.class)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_50 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_14 $$ Task mapTask2 = it.next()-->Line_17 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_9 $$ Job job = app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_18 $$ app.waitForState(mapTask3, TaskState.RUNNING)[ FD ]
Line_15 $$ Task mapTask3 = it.next()-->Line_47 $$ task3Attempt = mapTask3.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_13 $$ Task mapTask1 = it.next()[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setClass("mapred.output.committer.class", TestFileOutputCommitter.class, org.apache.hadoop.mapred.OutputCommitter.class)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_26 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_27 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_21 $$ TaskAttempt task3Attempt = mapTask3.getAttempts().values().iterator().next()-->Line_48 $$ app.waitForState(task3Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_20 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()[ CD ]
Line_21 $$ TaskAttempt task3Attempt = mapTask3.getAttempts().values().iterator().next()-->Line_47 $$ task3Attempt = mapTask3.getAttempts().values().iterator().next()[ FD ]
Line_21 $$ TaskAttempt task3Attempt = mapTask3.getAttempts().values().iterator().next()-->Line_24 $$ app.waitForState(task3Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setBoolean("want.am.recovery", false)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_43 $$ mapTask3 = it.next()[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_22 $$ app.waitForState(task1Attempt, TaskAttemptState.RUNNING)[ CD ]
Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_14 $$ Task mapTask2 = it.next()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_18 $$ app.waitForState(mapTask3, TaskState.RUNNING)[ CD ]
Line_9 $$ Job job = app.submit(conf)-->Line_39 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_24 $$ app.waitForState(task3Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_52 $$ app.waitForState(mapTask3, TaskState.SUCCEEDED)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_29 $$ app.stop()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_27 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_38 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_3 $$ int runCount = 0-->Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_13 $$ Task mapTask1 = it.next()-->Line_41 $$ mapTask1 = it.next()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_44 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_31 $$ conf = new Configuration()-->Line_33 $$ conf.setBoolean("want.am.recovery", false)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_47 $$ task3Attempt = mapTask3.getAttempts().values().iterator().next()[ CD ]
Line_3 $$ int runCount = 0-->Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_22 $$ app.waitForState(task1Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_29 $$ app.stop()[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_38 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_15 $$ Task mapTask3 = it.next()-->Line_46 $$ app.waitForState(mapTask3, TaskState.RUNNING)[ FD ]
Line_47 $$ task3Attempt = mapTask3.getAttempts().values().iterator().next()-->Line_48 $$ app.waitForState(task3Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_16 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ CD ]
Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_40 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_42 $$ mapTask2 = it.next()[ CD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_15 $$ Task mapTask3 = it.next()-->Line_43 $$ mapTask3 = it.next()[ FD ]
Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_43 $$ mapTask3 = it.next()[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_48 $$ app.waitForState(task3Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_37 $$ job = app.submit(conf)-->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_9 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_40 $$ it = job.getTasks().values().iterator()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_46 $$ app.waitForState(mapTask3, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_37 $$ job = app.submit(conf)-->Line_40 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_31 $$ conf = new Configuration()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_42 $$ mapTask2 = it.next()[ FD ]
Line_37 $$ job = app.submit(conf)-->Line_38 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_15 $$ Task mapTask3 = it.next()-->Line_52 $$ app.waitForState(mapTask3, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_33 $$ conf.setBoolean("want.am.recovery", false)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_28 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_25 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_20 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_23 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_52 $$ app.waitForState(mapTask3, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_19 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_24 $$ app.waitForState(task3Attempt, TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_32 $$ conf.setClass("mapred.output.committer.class", TestFileOutputCommitter.class, org.apache.hadoop.mapred.OutputCommitter.class)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_33 $$ conf.setBoolean("want.am.recovery", false)[ FD ]
Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_13 $$ Task mapTask1 = it.next()[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_38 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_31 $$ conf = new Configuration()-->Line_37 $$ job = app.submit(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_34 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_9 $$ Job job = app.submit(conf)-->Line_38 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_43 $$ mapTask3 = it.next()-->Line_52 $$ app.waitForState(mapTask3, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_3 $$ int runCount = 0[ CD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_46 $$ app.waitForState(mapTask3, TaskState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_50 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(3, 0, false, this.getClass().getName(), true, ++runCount)-->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_13 $$ Task mapTask1 = it.next()-->Line_49 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask1.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_35 $$ conf.setInt(MRJobConfig.NUM_REDUCES, 0)[ FD ]
Line_31 $$ conf = new Configuration()-->Line_36 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_12 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_15 $$ Task mapTask3 = it.next()[ FD ]
Line_30 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_50 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_31 $$ conf = new Configuration()-->Line_32 $$ conf.setClass("mapred.output.committer.class", TestFileOutputCommitter.class, org.apache.hadoop.mapred.OutputCommitter.class)[ FD ]
Line_43 $$ mapTask3 = it.next()-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask3.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_41 $$ mapTask1 = it.next()[ CD ]
Line_15 $$ Task mapTask3 = it.next()-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask3.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testRecoveryFailsUsingCustomOutputCommitter() throws Exception -->Line_25 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
