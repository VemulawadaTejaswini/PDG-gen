Line_11 $$ if (!partHeaders.isEmpty()) -->Line_12 $$ multipartMessage.getHeaders().putAll(partHeaders)[ CD ]
Line_8 $$ if (messageConverter.canWrite(partType, partContentType)) -->Line_9 $$ HttpOutputMessage multipartMessage = new MultipartHttpOutputMessage(os)[ CD ]
Line_7 $$ for (HttpMessageConverter<?> messageConverter : this.partConverters) -->Line_8 $$ if (messageConverter.canWrite(partType, partContentType)) [ FD ]
Line_4 $$ Class<?> partType = partBody.getClass()-->Line_18 $$ throw new HttpMessageNotWritableException("Could not write request: no suitable HttpMessageConverter " + "found for request type [" + partType.getName() + "]")[ FD ]
Line_8 $$ if (messageConverter.canWrite(partType, partContentType)) -->Line_14 $$ ((HttpMessageConverter<Object>) messageConverter).write(partBody, partContentType, multipartMessage)[ CD ]
Line_2 $$ private void writePart(String name, HttpEntity<?> partEntity, OutputStream os) throws IOException -->Line_4 $$ Class<?> partType = partBody.getClass()[ CD ]
Line_8 $$ if (messageConverter.canWrite(partType, partContentType)) -->Line_10 $$ multipartMessage.getHeaders().setContentDispositionFormData(name, getFilename(partBody))[ CD ]
Line_2 $$ private void writePart(String name, HttpEntity<?> partEntity, OutputStream os) throws IOException -->Line_5 $$ HttpHeaders partHeaders = partEntity.getHeaders()[ FD ]
Line_5 $$ HttpHeaders partHeaders = partEntity.getHeaders()-->Line_6 $$ MediaType partContentType = partHeaders.getContentType()[ FD ]
Line_6 $$ MediaType partContentType = partHeaders.getContentType()-->Line_8 $$ if (messageConverter.canWrite(partType, partContentType)) [ FD ]
Line_9 $$ HttpOutputMessage multipartMessage = new MultipartHttpOutputMessage(os)-->Line_10 $$ multipartMessage.getHeaders().setContentDispositionFormData(name, getFilename(partBody))[ FD ]
Line_3 $$ Object partBody = partEntity.getBody()-->Line_4 $$ Class<?> partType = partBody.getClass()[ FD ]
Line_8 $$ if (messageConverter.canWrite(partType, partContentType)) -->Line_11 $$ if (!partHeaders.isEmpty()) [ CD ]
Line_2 $$ private void writePart(String name, HttpEntity<?> partEntity, OutputStream os) throws IOException -->Line_3 $$ Object partBody = partEntity.getBody()[ CD ]
Line_3 $$ Object partBody = partEntity.getBody()-->Line_10 $$ multipartMessage.getHeaders().setContentDispositionFormData(name, getFilename(partBody))[ FD ]
Line_5 $$ HttpHeaders partHeaders = partEntity.getHeaders()-->Line_11 $$ if (!partHeaders.isEmpty()) [ FD ]
Line_4 $$ Class<?> partType = partBody.getClass()-->Line_8 $$ if (messageConverter.canWrite(partType, partContentType)) [ FD ]
Line_2 $$ private void writePart(String name, HttpEntity<?> partEntity, OutputStream os) throws IOException -->Line_3 $$ Object partBody = partEntity.getBody()[ FD ]
Line_2 $$ private void writePart(String name, HttpEntity<?> partEntity, OutputStream os) throws IOException -->Line_10 $$ multipartMessage.getHeaders().setContentDispositionFormData(name, getFilename(partBody))[ FD ]
Line_3 $$ Object partBody = partEntity.getBody()-->Line_14 $$ ((HttpMessageConverter<Object>) messageConverter).write(partBody, partContentType, multipartMessage)[ FD ]
Line_8 $$ if (messageConverter.canWrite(partType, partContentType)) -->Line_15 $$ return[ CD ]
Line_2 $$ private void writePart(String name, HttpEntity<?> partEntity, OutputStream os) throws IOException -->Line_6 $$ MediaType partContentType = partHeaders.getContentType()[ CD ]
Line_9 $$ HttpOutputMessage multipartMessage = new MultipartHttpOutputMessage(os)-->Line_12 $$ multipartMessage.getHeaders().putAll(partHeaders)[ FD ]
Line_9 $$ HttpOutputMessage multipartMessage = new MultipartHttpOutputMessage(os)-->Line_14 $$ ((HttpMessageConverter<Object>) messageConverter).write(partBody, partContentType, multipartMessage)[ FD ]
Line_5 $$ HttpHeaders partHeaders = partEntity.getHeaders()-->Line_12 $$ multipartMessage.getHeaders().putAll(partHeaders)[ FD ]
Line_2 $$ private void writePart(String name, HttpEntity<?> partEntity, OutputStream os) throws IOException -->Line_5 $$ HttpHeaders partHeaders = partEntity.getHeaders()[ CD ]
Line_6 $$ MediaType partContentType = partHeaders.getContentType()-->Line_14 $$ ((HttpMessageConverter<Object>) messageConverter).write(partBody, partContentType, multipartMessage)[ FD ]
