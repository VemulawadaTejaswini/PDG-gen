Line_13 $$ cause = cause.getCause()-->Line_19 $$ cause = logRecord.getThrown()[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_20 $$ Assert.assertSame(WriteAbortedException.class, cause.getClass())[ FD ]
Line_13 $$ cause = cause.getCause()-->Line_34 $$ cause = cause.getCause()[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.WARNING)) -->Line_36 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_14 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_15 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_37 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_21 $$ cause = cause.getCause()-->Line_34 $$ cause = cause.getCause()[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_19 $$ cause = logRecord.getThrown()[ FD ]
Line_5 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), unserializablePipingBackProcessCallable)-->Line_6 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()[ FD ]
Line_6 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()-->Line_8 $$ noticeableFuture.get()[ FD ]
Line_19 $$ cause = logRecord.getThrown()-->Line_34 $$ cause = cause.getCause()[ FD ]
Line_21 $$ cause = cause.getCause()-->Line_33 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_6 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()-->Line_29 $$ noticeableFuture.get()[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_22 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_5 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), unserializablePipingBackProcessCallable)-->Line_27 $$ NoticeableFuture<Serializable> noticeableFuture = processChannel.getProcessNoticeableFuture()[ FD ]
Line_3 $$ UnserializablePipingBackProcessCallable unserializablePipingBackProcessCallable = new UnserializablePipingBackProcessCallable()-->Line_26 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), unserializablePipingBackProcessCallable)[ FD ]
Line_15 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_19 $$ cause = logRecord.getThrown()-->Line_22 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_19 $$ cause = logRecord.getThrown()-->Line_33 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_33 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_21 $$ cause = cause.getCause()-->Line_35 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_21 $$ cause = cause.getCause()-->Line_22 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_19 $$ cause = logRecord.getThrown()-->Line_20 $$ Assert.assertSame(WriteAbortedException.class, cause.getClass())[ FD ]
Line_2 $$ public void testUnserializablePipingBackProcessCallable() throws Exception -->Line_3 $$ UnserializablePipingBackProcessCallable unserializablePipingBackProcessCallable = new UnserializablePipingBackProcessCallable()[ CD ]
Line_15 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ cause = logRecord.getThrown()[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(LocalProcessExecutor.class.getName(), Level.WARNING)) -->Line_15 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_12 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_13 $$ cause = cause.getCause()-->Line_20 $$ Assert.assertSame(WriteAbortedException.class, cause.getClass())[ FD ]
Line_17 $$ LogRecord logRecord = logRecords.get(0)-->Line_18 $$ Assert.assertEquals("Caught a write aborted exception", logRecord.getMessage())[ FD ]
Line_13 $$ cause = cause.getCause()-->Line_22 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_3 $$ UnserializablePipingBackProcessCallable unserializablePipingBackProcessCallable = new UnserializablePipingBackProcessCallable()-->Line_5 $$ ProcessChannel<Serializable> processChannel = _localProcessExecutor.execute(_createJPDAProcessConfig(_JPDA_OPTIONS1), unserializablePipingBackProcessCallable)[ FD ]
Line_13 $$ cause = cause.getCause()-->Line_33 $$ Assert.assertSame(ProcessException.class, cause.getClass())[ FD ]
Line_19 $$ cause = logRecord.getThrown()-->Line_35 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_35 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_34 $$ cause = cause.getCause()-->Line_35 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_13 $$ cause = cause.getCause()[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_34 $$ cause = cause.getCause()[ FD ]
Line_13 $$ cause = cause.getCause()-->Line_21 $$ cause = cause.getCause()[ FD ]
Line_19 $$ cause = logRecord.getThrown()-->Line_21 $$ cause = cause.getCause()[ FD ]
Line_11 $$ Throwable cause = ee.getCause()-->Line_21 $$ cause = cause.getCause()[ FD ]
Line_13 $$ cause = cause.getCause()-->Line_35 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
Line_13 $$ cause = cause.getCause()-->Line_14 $$ Assert.assertSame(NotSerializableException.class, cause.getClass())[ FD ]
