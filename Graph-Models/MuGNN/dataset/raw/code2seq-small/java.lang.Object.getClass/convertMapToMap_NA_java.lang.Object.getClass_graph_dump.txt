Line_3 $$ Map<String, String> foo = new HashMap<String, String>()-->Line_5 $$ foo.put("2", "BAZ")[ FD ]
Line_2 $$ public void convertMapToMap() throws Exception -->Line_3 $$ Map<String, String> foo = new HashMap<String, String>()[ CD ]
Line_2 $$ public void convertMapToMap() throws Exception -->Line_5 $$ foo.put("2", "BAZ")[ CD ]
Line_2 $$ public void convertMapToMap() throws Exception -->Line_4 $$ foo.put("1", "BAR")[ CD ]
Line_2 $$ public void convertMapToMap() throws Exception -->Line_7 $$ assertEquals(FooEnum.BAR, map.get(1))[ CD ]
Line_3 $$ Map<String, String> foo = new HashMap<String, String>()-->Line_4 $$ foo.put("1", "BAR")[ FD ]
Line_6 $$ Map<Integer, FooEnum> map = (Map<Integer, FooEnum>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericMap")))-->Line_7 $$ assertEquals(FooEnum.BAR, map.get(1))[ FD ]
Line_6 $$ Map<Integer, FooEnum> map = (Map<Integer, FooEnum>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericMap")))-->Line_8 $$ assertEquals(FooEnum.BAZ, map.get(2))[ FD ]
Line_3 $$ Map<String, String> foo = new HashMap<String, String>()-->Line_6 $$ Map<Integer, FooEnum> map = (Map<Integer, FooEnum>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericMap")))[ FD ]
Line_2 $$ public void convertMapToMap() throws Exception -->Line_6 $$ Map<Integer, FooEnum> map = (Map<Integer, FooEnum>) conversionService.convert(foo, TypeDescriptor.forObject(foo), new TypeDescriptor(getClass().getField("genericMap")))[ CD ]
Line_2 $$ public void convertMapToMap() throws Exception -->Line_8 $$ assertEquals(FooEnum.BAZ, map.get(2))[ CD ]
