Line_2 $$ private EvaluationContext createEvaluationContext(Object result, BeanFactory beanFactory) -->Line_4 $$ Method method = ReflectionUtils.findMethod(AnnotatedClass.class, "multipleCaching", Object.class, Object.class)[ CD ]
Line_4 $$ Method method = ReflectionUtils.findMethod(AnnotatedClass.class, "multipleCaching", Object.class, Object.class)-->Line_7 $$ return eval.createEvaluationContext(caches, method, args, target, target.getClass(), result, beanFactory)[ FD ]
Line_2 $$ private EvaluationContext createEvaluationContext(Object result, BeanFactory beanFactory) -->Line_6 $$ Collection<ConcurrentMapCache> caches = Collections.singleton(new ConcurrentMapCache("test"))[ CD ]
Line_6 $$ Collection<ConcurrentMapCache> caches = Collections.singleton(new ConcurrentMapCache("test"))-->Line_7 $$ return eval.createEvaluationContext(caches, method, args, target, target.getClass(), result, beanFactory)[ FD ]
Line_2 $$ private EvaluationContext createEvaluationContext(Object result, BeanFactory beanFactory) -->Line_7 $$ return eval.createEvaluationContext(caches, method, args, target, target.getClass(), result, beanFactory)[ FD ]
Line_5 $$ Object[] args = new Object[] -->Line_7 $$ return eval.createEvaluationContext(caches, method, args, target, target.getClass(), result, beanFactory)[ FD ]
Line_2 $$ private EvaluationContext createEvaluationContext(Object result, BeanFactory beanFactory) -->Line_5 $$ Object[] args = new Object[] [ CD ]
Line_2 $$ private EvaluationContext createEvaluationContext(Object result, BeanFactory beanFactory) -->Line_3 $$ AnnotatedClass target = new AnnotatedClass()[ CD ]
Line_2 $$ private EvaluationContext createEvaluationContext(Object result, BeanFactory beanFactory) -->Line_7 $$ return eval.createEvaluationContext(caches, method, args, target, target.getClass(), result, beanFactory)[ CD ]
Line_3 $$ AnnotatedClass target = new AnnotatedClass()-->Line_7 $$ return eval.createEvaluationContext(caches, method, args, target, target.getClass(), result, beanFactory)[ FD ]
