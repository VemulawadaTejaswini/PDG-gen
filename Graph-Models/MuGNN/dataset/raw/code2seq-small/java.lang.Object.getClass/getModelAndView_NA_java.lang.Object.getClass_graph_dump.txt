Line_3 $$ ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(handlerMethod, ResponseStatus.class)-->Line_6 $$ String reason = responseStatus.reason()[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_23 $$ if (returnValue instanceof HttpEntity) [ CD ]
Line_26 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) -->Line_29 $$ if (returnValue instanceof ModelAndView) [ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_3 $$ ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(handlerMethod, ResponseStatus.class)[ CD ]
Line_4 $$ if (responseStatus != null) -->Line_5 $$ HttpStatus statusCode = responseStatus.code()[ CD ]
Line_4 $$ if (responseStatus != null) -->Line_12 $$ webRequest.getRequest().setAttribute(View.RESPONSE_STATUS_ATTRIBUTE, statusCode)[ CD ]
Line_7 $$ if (!StringUtils.hasText(reason)) -->Line_10 $$ webRequest.getResponse().sendError(statusCode.value(), reason)[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_29 $$ if (returnValue instanceof ModelAndView) [ FD ]
Line_17 $$ ModelAndView mav = mavResolver.resolveModelAndView(handlerMethod, handlerType, returnValue, implicitModel, webRequest)-->Line_18 $$ if (mav != ModelAndViewResolver.UNRESOLVED) [ FD ]
Line_40 $$ if (returnValue instanceof Map) -->Line_41 $$ return new ModelAndView().addAllObjects(implicitModel).addAllObjects((Map<String, ?>) returnValue)[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_33 $$ if (returnValue instanceof Model) [ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_17 $$ ModelAndView mav = mavResolver.resolveModelAndView(handlerMethod, handlerType, returnValue, implicitModel, webRequest)[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_35 $$ if (returnValue instanceof View) [ FD ]
Line_37 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class) != null) -->Line_39 $$ return new ModelAndView().addAllObjects(implicitModel)[ CD ]
Line_45 $$ if (this.responseArgumentUsed || webRequest.isNotModified()) -->Line_46 $$ return null[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_52 $$ return new ModelAndView().addAllObjects(implicitModel)[ FD ]
Line_18 $$ if (mav != ModelAndViewResolver.UNRESOLVED) -->Line_19 $$ return mav[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_50 $$ if (!BeanUtils.isSimpleProperty(returnValue.getClass())) [ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_3 $$ ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(handlerMethod, ResponseStatus.class)[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_43 $$ return new ModelAndView((String) returnValue).addAllObjects(implicitModel)[ FD ]
Line_3 $$ ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(handlerMethod, ResponseStatus.class)-->Line_5 $$ HttpStatus statusCode = responseStatus.code()[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_27 $$ handleResponseBody(returnValue, webRequest)[ FD ]
Line_4 $$ if (responseStatus != null) -->Line_7 $$ if (!StringUtils.hasText(reason)) [ CD ]
Line_35 $$ if (returnValue instanceof View) -->Line_37 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class) != null) [ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_38 $$ addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel)[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_8 $$ webRequest.getResponse().setStatus(statusCode.value())[ FD ]
Line_37 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class) != null) -->Line_38 $$ addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel)[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_37 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class) != null) [ FD ]
Line_5 $$ HttpStatus statusCode = responseStatus.code()-->Line_10 $$ webRequest.getResponse().sendError(statusCode.value(), reason)[ FD ]
Line_33 $$ if (returnValue instanceof Model) -->Line_35 $$ if (returnValue instanceof View) [ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_45 $$ if (this.responseArgumentUsed || webRequest.isNotModified()) [ FD ]
Line_45 $$ if (this.responseArgumentUsed || webRequest.isNotModified()) -->Line_48 $$ return new ModelAndView().addAllObjects(implicitModel)[ CD ]
Line_37 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ModelAttribute.class) != null) -->Line_40 $$ if (returnValue instanceof Map) [ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_48 $$ return new ModelAndView().addAllObjects(implicitModel)[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_12 $$ webRequest.getRequest().setAttribute(View.RESPONSE_STATUS_ATTRIBUTE, statusCode)[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_44 $$ if (returnValue == null) [ FD ]
Line_4 $$ if (responseStatus != null) -->Line_13 $$ this.responseArgumentUsed = true[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_51 $$ addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel)[ FD ]
Line_6 $$ String reason = responseStatus.reason()-->Line_10 $$ webRequest.getResponse().sendError(statusCode.value(), reason)[ FD ]
Line_42 $$ if (returnValue instanceof String) -->Line_43 $$ return new ModelAndView((String) returnValue).addAllObjects(implicitModel)[ CD ]
Line_26 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) -->Line_27 $$ handleResponseBody(returnValue, webRequest)[ CD ]
Line_44 $$ if (returnValue == null) -->Line_50 $$ if (!BeanUtils.isSimpleProperty(returnValue.getClass())) [ CD ]
Line_29 $$ if (returnValue instanceof ModelAndView) -->Line_31 $$ mav.getModelMap().mergeAttributes(implicitModel)[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_36 $$ return new ModelAndView((View) returnValue).addAllObjects(implicitModel)[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_15 $$ if (customModelAndViewResolvers != null) [ CD ]
Line_23 $$ if (returnValue instanceof HttpEntity) -->Line_25 $$ return null[ CD ]
Line_3 $$ ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(handlerMethod, ResponseStatus.class)-->Line_4 $$ if (responseStatus != null) [ FD ]
Line_16 $$ for (ModelAndViewResolver mavResolver : customModelAndViewResolvers) -->Line_17 $$ ModelAndView mav = mavResolver.resolveModelAndView(handlerMethod, handlerType, returnValue, implicitModel, webRequest)[ FD ]
Line_23 $$ if (returnValue instanceof HttpEntity) -->Line_24 $$ handleHttpEntityResponse((HttpEntity<?>) returnValue, webRequest)[ CD ]
Line_35 $$ if (returnValue instanceof View) -->Line_36 $$ return new ModelAndView((View) returnValue).addAllObjects(implicitModel)[ CD ]
Line_26 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) -->Line_28 $$ return null[ CD ]
Line_44 $$ if (returnValue == null) -->Line_45 $$ if (this.responseArgumentUsed || webRequest.isNotModified()) [ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_10 $$ webRequest.getResponse().sendError(statusCode.value(), reason)[ FD ]
Line_6 $$ String reason = responseStatus.reason()-->Line_7 $$ if (!StringUtils.hasText(reason)) [ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_42 $$ if (returnValue instanceof String) [ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_24 $$ handleHttpEntityResponse((HttpEntity<?>) returnValue, webRequest)[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_41 $$ return new ModelAndView().addAllObjects(implicitModel).addAllObjects((Map<String, ?>) returnValue)[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_39 $$ return new ModelAndView().addAllObjects(implicitModel)[ FD ]
Line_42 $$ if (returnValue instanceof String) -->Line_44 $$ if (returnValue == null) [ CD ]
Line_33 $$ if (returnValue instanceof Model) -->Line_34 $$ return new ModelAndView().addAllObjects(implicitModel).addAllObjects(((Model) returnValue).asMap())[ CD ]
Line_29 $$ if (returnValue instanceof ModelAndView) -->Line_33 $$ if (returnValue instanceof Model) [ CD ]
Line_7 $$ if (!StringUtils.hasText(reason)) -->Line_8 $$ webRequest.getResponse().setStatus(statusCode.value())[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_31 $$ mav.getModelMap().mergeAttributes(implicitModel)[ FD ]
Line_40 $$ if (returnValue instanceof Map) -->Line_42 $$ if (returnValue instanceof String) [ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_40 $$ if (returnValue instanceof Map) [ FD ]
Line_29 $$ if (returnValue instanceof ModelAndView) -->Line_32 $$ return mav[ CD ]
Line_50 $$ if (!BeanUtils.isSimpleProperty(returnValue.getClass())) -->Line_52 $$ return new ModelAndView().addAllObjects(implicitModel)[ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_26 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) [ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_4 $$ if (responseStatus != null) [ CD ]
Line_4 $$ if (responseStatus != null) -->Line_6 $$ String reason = responseStatus.reason()[ CD ]
Line_50 $$ if (!BeanUtils.isSimpleProperty(returnValue.getClass())) -->Line_51 $$ addReturnValueAsModelAttribute(handlerMethod, handlerType, returnValue, implicitModel)[ CD ]
Line_17 $$ ModelAndView mav = mavResolver.resolveModelAndView(handlerMethod, handlerType, returnValue, implicitModel, webRequest)-->Line_31 $$ mav.getModelMap().mergeAttributes(implicitModel)[ FD ]
Line_5 $$ HttpStatus statusCode = responseStatus.code()-->Line_12 $$ webRequest.getRequest().setAttribute(View.RESPONSE_STATUS_ATTRIBUTE, statusCode)[ FD ]
Line_5 $$ HttpStatus statusCode = responseStatus.code()-->Line_8 $$ webRequest.getResponse().setStatus(statusCode.value())[ FD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_34 $$ return new ModelAndView().addAllObjects(implicitModel).addAllObjects(((Model) returnValue).asMap())[ FD ]
Line_23 $$ if (returnValue instanceof HttpEntity) -->Line_26 $$ if (AnnotationUtils.findAnnotation(handlerMethod, ResponseBody.class) != null) [ CD ]
Line_2 $$ public ModelAndView getModelAndView(Method handlerMethod, Class<?> handlerType, Object returnValue, ExtendedModelMap implicitModel, ServletWebRequest webRequest) throws Exception -->Line_23 $$ if (returnValue instanceof HttpEntity) [ FD ]
