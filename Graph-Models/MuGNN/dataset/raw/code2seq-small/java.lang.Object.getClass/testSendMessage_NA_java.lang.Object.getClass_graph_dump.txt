Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_19 $$ message = new Message()[ CD ]
Line_29 $$ message = messageRoutingBag.getMessage()-->Line_43 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_24 $$ message = messageRoutingBag.getMessage()-->Line_43 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_24 $$ message = messageRoutingBag.getMessage()[ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_16 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_19 $$ message = new Message()-->Line_25 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ FD ]
Line_34 $$ currentThread.setContextClassLoader(new ClassLoader() -->Line_36 $$ if (name.equals(Message.class.getName())) [ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_31 $$ messageRoutingBag.getMessageData()[ CD ]
Line_3 $$ final AtomicBoolean throwRuntimeException = new AtomicBoolean()-->Line_51 $$ throwRuntimeException.set(true)[ FD ]
Line_4 $$ final AtomicReference<Message> messageReference = new AtomicReference()-->Line_10 $$ messageReference.set(message)[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_19 $$ message = new Message()[ FD ]
Line_24 $$ message = messageRoutingBag.getMessage()-->Line_30 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_26 $$ _intrabandBridgeDestination.send(message)[ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_18 $$ Assert.assertSame(message, messageReference.get())[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_18 $$ Assert.assertSame(message, messageReference.get())[ CD ]
Line_24 $$ message = messageRoutingBag.getMessage()-->Line_27 $$ Assert.assertSame(messageRoutingBag, message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ FD ]
Line_19 $$ message = new Message()-->Line_43 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_15 $$ message.put(MessagingProxy.LOCAL_MESSAGE, Boolean.TRUE)[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_10 $$ messageReference.set(message)[ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_29 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_30 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ CD ]
Line_19 $$ message = new Message()-->Line_20 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_34 $$ currentThread.setContextClassLoader(new ClassLoader() -->Line_39 $$ return super.loadClass(name)[ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_22 $$ Assert.assertSame(message, messageReference.get())[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_25 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_15 $$ message.put(MessagingProxy.LOCAL_MESSAGE, Boolean.TRUE)[ CD ]
Line_34 $$ currentThread.setContextClassLoader(new ClassLoader() -->Line_36 $$ if (name.equals(Message.class.getName())) [ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_17 $$ Assert.assertNull(message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_5 $$ MessageListener messageListener = new MessageListener() [ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_13 $$ _baseDestination.register(messageListener)[ FD ]
Line_4 $$ final AtomicReference<Message> messageReference = new AtomicReference()-->Line_18 $$ Assert.assertSame(message, messageReference.get())[ FD ]
Line_24 $$ message = messageRoutingBag.getMessage()-->Line_26 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_13 $$ _baseDestination.register(messageListener)[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_51 $$ throwRuntimeException.set(true)[ CD ]
Line_24 $$ message = messageRoutingBag.getMessage()-->Line_29 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_19 $$ message = new Message()-->Line_27 $$ Assert.assertSame(messageRoutingBag, message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_43 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_28 $$ messageRoutingBag = _createMessageRoutingBag()[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_3 $$ final AtomicBoolean throwRuntimeException = new AtomicBoolean()[ CD ]
Line_19 $$ message = new Message()-->Line_24 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_27 $$ Assert.assertSame(messageRoutingBag, message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ FD ]
Line_29 $$ message = messageRoutingBag.getMessage()-->Line_30 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_32 $$ Thread currentThread = Thread.currentThread()[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_34 $$ currentThread.setContextClassLoader(new ClassLoader() [ CD ]
Line_19 $$ message = new Message()-->Line_30 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_21 $$ Assert.assertNotNull(message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_22 $$ Assert.assertSame(message, messageReference.get())[ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_7 $$ if (throwRuntimeException.get()) [ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_10 $$ messageReference.set(message)[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_33 $$ ClassLoader contextClassLoader = currentThread.getContextClassLoader()[ CD ]
Line_3 $$ final AtomicBoolean throwRuntimeException = new AtomicBoolean()-->Line_7 $$ if (throwRuntimeException.get()) [ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_27 $$ Assert.assertSame(messageRoutingBag, message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_20 $$ _intrabandBridgeDestination.send(message)[ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_24 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_19 $$ message = new Message()-->Line_21 $$ Assert.assertNotNull(message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_25 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_26 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_19 $$ message = new Message()-->Line_29 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_30 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ FD ]
Line_4 $$ final AtomicReference<Message> messageReference = new AtomicReference()-->Line_22 $$ Assert.assertSame(message, messageReference.get())[ FD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_21 $$ Assert.assertNotNull(message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_29 $$ message = messageRoutingBag.getMessage()[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_17 $$ Assert.assertNull(message.get(MessageRoutingBag.MESSAGE_ROUTING_BAG))[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_4 $$ final AtomicReference<Message> messageReference = new AtomicReference()[ CD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_16 $$ _intrabandBridgeDestination.send(message)[ CD ]
Line_19 $$ message = new Message()-->Line_22 $$ Assert.assertSame(message, messageReference.get())[ FD ]
Line_34 $$ currentThread.setContextClassLoader(new ClassLoader() -->Line_39 $$ return super.loadClass(name)[ FD ]
Line_24 $$ message = messageRoutingBag.getMessage()-->Line_25 $$ message.put(MessageRoutingBag.MESSAGE_ROUTING_BAG, messageRoutingBag)[ FD ]
Line_19 $$ message = new Message()-->Line_26 $$ _intrabandBridgeDestination.send(message)[ FD ]
Line_2 $$ public void testSendMessage() throws ClassNotFoundException -->Line_23 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()[ CD ]
Line_5 $$ MessageListener messageListener = new MessageListener() -->Line_20 $$ _intrabandBridgeDestination.send(message)[ FD ]
