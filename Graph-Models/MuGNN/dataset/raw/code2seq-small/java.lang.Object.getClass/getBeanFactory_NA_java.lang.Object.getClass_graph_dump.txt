Line_2 $$ private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) -->Line_5 $$ Object beanFactory = ReflectionUtils.getField(field, enhancedConfigInstance)[ CD ]
Line_2 $$ private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) -->Line_5 $$ Object beanFactory = ReflectionUtils.getField(field, enhancedConfigInstance)[ FD ]
Line_2 $$ private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) -->Line_3 $$ Field field = ReflectionUtils.findField(enhancedConfigInstance.getClass(), BEAN_FACTORY_FIELD)[ FD ]
Line_2 $$ private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) -->Line_7 $$ Assert.state(beanFactory instanceof ConfigurableBeanFactory, "Injected BeanFactory is not a ConfigurableBeanFactory")[ CD ]
Line_2 $$ private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) -->Line_8 $$ return (ConfigurableBeanFactory) beanFactory[ CD ]
Line_2 $$ private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) -->Line_3 $$ Field field = ReflectionUtils.findField(enhancedConfigInstance.getClass(), BEAN_FACTORY_FIELD)[ CD ]
Line_2 $$ private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) -->Line_6 $$ Assert.state(beanFactory != null, "BeanFactory has not been injected into @Configuration class")[ CD ]
Line_3 $$ Field field = ReflectionUtils.findField(enhancedConfigInstance.getClass(), BEAN_FACTORY_FIELD)-->Line_5 $$ Object beanFactory = ReflectionUtils.getField(field, enhancedConfigInstance)[ FD ]
Line_2 $$ private ConfigurableBeanFactory getBeanFactory(Object enhancedConfigInstance) -->Line_4 $$ Assert.state(field != null, "Unable to find generated bean factory field")[ CD ]
