Line_9 $$ return new RMContainerAllocator(clientService, context, policy) -->Line_11 $$ return new ApplicationMasterProtocol() [ CD ]
Line_18 $$ FinishApplicationMasterResponse response = Records.newRecord(FinishApplicationMasterResponse.class)-->Line_35 $$ response.setAllocatedContainers(containers)[ FD ]
Line_2 $$ public void benchmark1() throws Exception -->Line_3 $$ int maps = 100[ CD ]
Line_13 $$ RegisterApplicationMasterResponse response = Records.newRecord(RegisterApplicationMasterResponse.class)-->Line_37 $$ response.setNumClusterNodes(350)[ FD ]
Line_13 $$ RegisterApplicationMasterResponse response = Records.newRecord(RegisterApplicationMasterResponse.class)-->Line_36 $$ response.setResponseId(request.getResponseId() + 1)[ FD ]
Line_13 $$ RegisterApplicationMasterResponse response = Records.newRecord(RegisterApplicationMasterResponse.class)-->Line_35 $$ response.setAllocatedContainers(containers)[ FD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_35 $$ response.setAllocatedContainers(containers)[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_15 $$ return response[ CD ]
Line_30 $$ for (int i = 0; i < numContainers; i++) -->Line_32 $$ containers.add(Container.newInstance(containerId, NodeId.newInstance("host" + containerId.getId(), 2345), "host" + containerId.getId() + ":5678", req.getCapability(), req.getPriority(), null))[ CD ]
Line_13 $$ RegisterApplicationMasterResponse response = Records.newRecord(RegisterApplicationMasterResponse.class)-->Line_14 $$ response.setMaximumResourceCapability(Resource.newInstance(10240, 1))[ FD ]
Line_25 $$ for (ResourceRequest req : askList) -->Line_29 $$ int numContainers = req.getNumContainers()[ FD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_31 $$ ContainerId containerId = ContainerId.newInstance(getContext().getApplicationAttemptId(), request.getResponseId() + i)[ FD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_23 $$ List<ResourceRequest> askList = request.getAskList()[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_14 $$ response.setMaximumResourceCapability(Resource.newInstance(10240, 1))[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_22 $$ AllocateResponse response = Records.newRecord(AllocateResponse.class)[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_23 $$ List<ResourceRequest> askList = request.getAskList()[ FD ]
Line_22 $$ AllocateResponse response = Records.newRecord(AllocateResponse.class)-->Line_35 $$ response.setAllocatedContainers(containers)[ FD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_38 $$ return response[ CD ]
Line_25 $$ for (ResourceRequest req : askList) -->Line_32 $$ containers.add(Container.newInstance(containerId, NodeId.newInstance("host" + containerId.getId(), 2345), "host" + containerId.getId() + ":5678", req.getCapability(), req.getPriority(), null))[ FD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_36 $$ response.setResponseId(request.getResponseId() + 1)[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_24 $$ List<Container> containers = new ArrayList<Container>()[ CD ]
Line_18 $$ FinishApplicationMasterResponse response = Records.newRecord(FinishApplicationMasterResponse.class)-->Line_36 $$ response.setResponseId(request.getResponseId() + 1)[ FD ]
Line_6 $$ run(new MRApp(maps, reduces, true, this.getClass().getName(), true) -->Line_9 $$ return new RMContainerAllocator(clientService, context, policy) [ CD ]
Line_22 $$ AllocateResponse response = Records.newRecord(AllocateResponse.class)-->Line_37 $$ response.setNumClusterNodes(350)[ FD ]
Line_6 $$ run(new MRApp(maps, reduces, true, this.getClass().getName(), true) -->Line_8 $$ AMPreemptionPolicy policy = new NoopAMPreemptionPolicy()[ CD ]
Line_2 $$ public void benchmark1() throws Exception -->Line_5 $$ System.out.println("Running benchmark with maps:" + maps + " reduces:" + reduces)[ CD ]
Line_22 $$ AllocateResponse response = Records.newRecord(AllocateResponse.class)-->Line_36 $$ response.setResponseId(request.getResponseId() + 1)[ FD ]
Line_24 $$ List<Container> containers = new ArrayList<Container>()-->Line_35 $$ response.setAllocatedContainers(containers)[ FD ]
Line_29 $$ int numContainers = req.getNumContainers()-->Line_30 $$ for (int i = 0; i < numContainers; i++) [ FD ]
Line_25 $$ for (ResourceRequest req : askList) -->Line_26 $$ if (!ResourceRequest.isAnyLocation(req.getResourceName())) [ FD ]
Line_18 $$ FinishApplicationMasterResponse response = Records.newRecord(FinishApplicationMasterResponse.class)-->Line_37 $$ response.setNumClusterNodes(350)[ FD ]
Line_24 $$ List<Container> containers = new ArrayList<Container>()-->Line_32 $$ containers.add(Container.newInstance(containerId, NodeId.newInstance("host" + containerId.getId(), 2345), "host" + containerId.getId() + ":5678", req.getCapability(), req.getPriority(), null))[ FD ]
Line_31 $$ ContainerId containerId = ContainerId.newInstance(getContext().getApplicationAttemptId(), request.getResponseId() + i)-->Line_32 $$ containers.add(Container.newInstance(containerId, NodeId.newInstance("host" + containerId.getId(), 2345), "host" + containerId.getId() + ":5678", req.getCapability(), req.getPriority(), null))[ FD ]
Line_2 $$ public void benchmark1() throws Exception -->Line_4 $$ int reduces = 0[ CD ]
Line_2 $$ public void benchmark1() throws Exception -->Line_6 $$ run(new MRApp(maps, reduces, true, this.getClass().getName(), true) [ CD ]
Line_30 $$ for (int i = 0; i < numContainers; i++) -->Line_31 $$ ContainerId containerId = ContainerId.newInstance(getContext().getApplicationAttemptId(), request.getResponseId() + i)[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_18 $$ FinishApplicationMasterResponse response = Records.newRecord(FinishApplicationMasterResponse.class)[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_37 $$ response.setNumClusterNodes(350)[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_19 $$ return response[ CD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_36 $$ response.setResponseId(request.getResponseId() + 1)[ FD ]
Line_11 $$ return new ApplicationMasterProtocol() -->Line_13 $$ RegisterApplicationMasterResponse response = Records.newRecord(RegisterApplicationMasterResponse.class)[ CD ]
