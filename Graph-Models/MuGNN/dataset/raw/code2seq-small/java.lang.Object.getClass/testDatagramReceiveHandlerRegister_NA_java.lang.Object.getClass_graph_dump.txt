Line_29 $$ FutureTask<Void> monitorFutureTask = new FutureTask(new Callable<Void>() -->Line_34 $$ atomicReference.set(null)[ CD ]
Line_4 $$ DatagramReceiveHandler[] datagramReceiveHandlers = datagramReceiveHandlersReference.get()-->Line_6 $$ Assert.assertNotSame(datagramReceiveHandlers, _mockIntraband.getDatagramReceiveHandlers())[ FD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_4 $$ DatagramReceiveHandler[] datagramReceiveHandlers = datagramReceiveHandlersReference.get()[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_17 $$ atomicReference.set(new DatagramReceiveHandler[1024 * 1024])[ CD ]
Line_31 $$ for (int i = 0; i < 10; i++) -->Line_32 $$ GCUtil.gc(false, false)[ CD ]
Line_15 $$ final AtomicReference<DatagramReceiveHandler[]> atomicReference = _mockIntraband.datagramReceiveHandlersReference-->Line_34 $$ atomicReference.set(null)[ FD ]
Line_15 $$ final AtomicReference<DatagramReceiveHandler[]> atomicReference = _mockIntraband.datagramReceiveHandlersReference-->Line_50 $$ atomicReference.set(originalDatagramReceiveHandlers)[ FD ]
Line_3 $$ AtomicReference<DatagramReceiveHandler[]> datagramReceiveHandlersReference = _mockIntraband.datagramReceiveHandlersReference-->Line_4 $$ DatagramReceiveHandler[] datagramReceiveHandlers = datagramReceiveHandlersReference.get()[ FD ]
Line_18 $$ long valueOffset = ReflectionTestUtil.getFieldValue(AtomicReference.class, "valueOffset")-->Line_49 $$ ReflectionTestUtil.setFieldValue(AtomicReference.class, "valueOffset", valueOffset)[ FD ]
Line_29 $$ FutureTask<Void> monitorFutureTask = new FutureTask(new Callable<Void>() -->Line_35 $$ return null[ CD ]
Line_16 $$ DatagramReceiveHandler[] originalDatagramReceiveHandlers = atomicReference.get()-->Line_50 $$ atomicReference.set(originalDatagramReceiveHandlers)[ FD ]
Line_21 $$ FutureTask<Void> registerFutureTask = new FutureTask(new Callable<Void>() -->Line_23 $$ _mockIntraband.registerDatagramReceiveHandler(_TYPE, datagramReceiveHandler2)[ CD ]
Line_10 $$ final DatagramReceiveHandler datagramReceiveHandler2 = new RecordDatagramReceiveHandler()-->Line_13 $$ Assert.assertSame(datagramReceiveHandler2, _mockIntraband.unregisterDatagramReceiveHandler(_TYPE))[ FD ]
Line_7 $$ DatagramReceiveHandler datagramReceiveHandler1 = new RecordDatagramReceiveHandler()-->Line_11 $$ Assert.assertSame(datagramReceiveHandler1, _mockIntraband.registerDatagramReceiveHandler(_TYPE, datagramReceiveHandler2))[ FD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_13 $$ Assert.assertSame(datagramReceiveHandler2, _mockIntraband.unregisterDatagramReceiveHandler(_TYPE))[ CD ]
Line_7 $$ DatagramReceiveHandler datagramReceiveHandler1 = new RecordDatagramReceiveHandler()-->Line_9 $$ Assert.assertSame(datagramReceiveHandler1, _mockIntraband.getDatagramReceiveHandlers()[_TYPE])[ FD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_7 $$ DatagramReceiveHandler datagramReceiveHandler1 = new RecordDatagramReceiveHandler()[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_6 $$ Assert.assertNotSame(datagramReceiveHandlers, _mockIntraband.getDatagramReceiveHandlers())[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_52 $$ _mockIntraband.close()[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_12 $$ Assert.assertSame(datagramReceiveHandler2, _mockIntraband.getDatagramReceiveHandlers()[_TYPE])[ CD ]
Line_15 $$ final AtomicReference<DatagramReceiveHandler[]> atomicReference = _mockIntraband.datagramReceiveHandlersReference-->Line_17 $$ atomicReference.set(new DatagramReceiveHandler[1024 * 1024])[ FD ]
Line_29 $$ FutureTask<Void> monitorFutureTask = new FutureTask(new Callable<Void>() -->Line_31 $$ for (int i = 0; i < 10; i++) [ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_3 $$ AtomicReference<DatagramReceiveHandler[]> datagramReceiveHandlersReference = _mockIntraband.datagramReceiveHandlersReference[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_11 $$ Assert.assertSame(datagramReceiveHandler1, _mockIntraband.registerDatagramReceiveHandler(_TYPE, datagramReceiveHandler2))[ CD ]
Line_3 $$ AtomicReference<DatagramReceiveHandler[]> datagramReceiveHandlersReference = _mockIntraband.datagramReceiveHandlersReference-->Line_53 $$ Assert.assertNull(datagramReceiveHandlersReference.get())[ FD ]
Line_10 $$ final DatagramReceiveHandler datagramReceiveHandler2 = new RecordDatagramReceiveHandler()-->Line_23 $$ _mockIntraband.registerDatagramReceiveHandler(_TYPE, datagramReceiveHandler2)[ FD ]
Line_10 $$ final DatagramReceiveHandler datagramReceiveHandler2 = new RecordDatagramReceiveHandler()-->Line_12 $$ Assert.assertSame(datagramReceiveHandler2, _mockIntraband.getDatagramReceiveHandlers()[_TYPE])[ FD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_9 $$ Assert.assertSame(datagramReceiveHandler1, _mockIntraband.getDatagramReceiveHandlers()[_TYPE])[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_16 $$ DatagramReceiveHandler[] originalDatagramReceiveHandlers = atomicReference.get()[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_53 $$ Assert.assertNull(datagramReceiveHandlersReference.get())[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_5 $$ Assert.assertEquals(256, datagramReceiveHandlers.length)[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_14 $$ Assert.assertNull(_mockIntraband.getDatagramReceiveHandlers()[_TYPE])[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_15 $$ final AtomicReference<DatagramReceiveHandler[]> atomicReference = _mockIntraband.datagramReceiveHandlersReference[ CD ]
Line_7 $$ DatagramReceiveHandler datagramReceiveHandler1 = new RecordDatagramReceiveHandler()-->Line_8 $$ Assert.assertNull(_mockIntraband.registerDatagramReceiveHandler(_TYPE, datagramReceiveHandler1))[ FD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_8 $$ Assert.assertNull(_mockIntraband.registerDatagramReceiveHandler(_TYPE, datagramReceiveHandler1))[ CD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_10 $$ final DatagramReceiveHandler datagramReceiveHandler2 = new RecordDatagramReceiveHandler()[ CD ]
Line_21 $$ FutureTask<Void> registerFutureTask = new FutureTask(new Callable<Void>() -->Line_42 $$ registerFutureTask.get(10, TimeUnit.MINUTES)[ FD ]
Line_10 $$ final DatagramReceiveHandler datagramReceiveHandler2 = new RecordDatagramReceiveHandler()-->Line_11 $$ Assert.assertSame(datagramReceiveHandler1, _mockIntraband.registerDatagramReceiveHandler(_TYPE, datagramReceiveHandler2))[ FD ]
Line_15 $$ final AtomicReference<DatagramReceiveHandler[]> atomicReference = _mockIntraband.datagramReceiveHandlersReference-->Line_16 $$ DatagramReceiveHandler[] originalDatagramReceiveHandlers = atomicReference.get()[ FD ]
Line_2 $$ public void testDatagramReceiveHandlerRegister() throws Exception -->Line_18 $$ long valueOffset = ReflectionTestUtil.getFieldValue(AtomicReference.class, "valueOffset")[ CD ]
