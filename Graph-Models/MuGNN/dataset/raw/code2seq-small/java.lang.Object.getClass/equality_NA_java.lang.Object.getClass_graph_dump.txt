Line_2 $$ public void equality() throws Exception -->Line_23 $$ assertEquals(t13, t14)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_17 $$ assertEquals(t9, t10)[ CD ]
Line_15 $$ TypeDescriptor t9 = new TypeDescriptor(getClass().getField("listField"))-->Line_17 $$ assertEquals(t9, t10)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_28 $$ TypeDescriptor t18 = new TypeDescriptor(new MethodParameter(getClass().getMethod("test5", String.class), 0))[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_27 $$ TypeDescriptor t17 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))[ CD ]
Line_6 $$ TypeDescriptor t4 = TypeDescriptor.valueOf(Date.class)-->Line_12 $$ assertEquals(t3, t4)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_18 $$ TypeDescriptor t11 = new TypeDescriptor(getClass().getField("mapField"))[ CD ]
Line_21 $$ TypeDescriptor t13 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_23 $$ assertEquals(t13, t14)[ FD ]
Line_24 $$ TypeDescriptor t15 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_26 $$ assertNotEquals(t15, t16)[ FD ]
Line_3 $$ TypeDescriptor t1 = TypeDescriptor.valueOf(String.class)-->Line_11 $$ assertEquals(t1, t2)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_6 $$ TypeDescriptor t4 = TypeDescriptor.valueOf(Date.class)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_22 $$ TypeDescriptor t14 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_3 $$ TypeDescriptor t1 = TypeDescriptor.valueOf(String.class)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_7 $$ TypeDescriptor t5 = TypeDescriptor.valueOf(List.class)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_19 $$ TypeDescriptor t12 = new TypeDescriptor(getClass().getField("mapField"))[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_29 $$ assertNotEquals(t17, t18)[ CD ]
Line_7 $$ TypeDescriptor t5 = TypeDescriptor.valueOf(List.class)-->Line_13 $$ assertEquals(t5, t6)[ FD ]
Line_28 $$ TypeDescriptor t18 = new TypeDescriptor(new MethodParameter(getClass().getMethod("test5", String.class), 0))-->Line_29 $$ assertNotEquals(t17, t18)[ FD ]
Line_27 $$ TypeDescriptor t17 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_29 $$ assertNotEquals(t17, t18)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_21 $$ TypeDescriptor t13 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))[ CD ]
Line_10 $$ TypeDescriptor t8 = TypeDescriptor.valueOf(Map.class)-->Line_14 $$ assertEquals(t7, t8)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_13 $$ assertEquals(t5, t6)[ CD ]
Line_16 $$ TypeDescriptor t10 = new TypeDescriptor(getClass().getField("listField"))-->Line_17 $$ assertEquals(t9, t10)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_15 $$ TypeDescriptor t9 = new TypeDescriptor(getClass().getField("listField"))[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_16 $$ TypeDescriptor t10 = new TypeDescriptor(getClass().getField("listField"))[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_10 $$ TypeDescriptor t8 = TypeDescriptor.valueOf(Map.class)[ CD ]
Line_5 $$ TypeDescriptor t3 = TypeDescriptor.valueOf(Date.class)-->Line_12 $$ assertEquals(t3, t4)[ FD ]
Line_25 $$ TypeDescriptor t16 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethodDifferentAnnotationValue", String.class), 0))-->Line_26 $$ assertNotEquals(t15, t16)[ FD ]
Line_18 $$ TypeDescriptor t11 = new TypeDescriptor(getClass().getField("mapField"))-->Line_20 $$ assertEquals(t11, t12)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_8 $$ TypeDescriptor t6 = TypeDescriptor.valueOf(List.class)[ CD ]
Line_8 $$ TypeDescriptor t6 = TypeDescriptor.valueOf(List.class)-->Line_13 $$ assertEquals(t5, t6)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_14 $$ assertEquals(t7, t8)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_4 $$ TypeDescriptor t2 = TypeDescriptor.valueOf(String.class)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_12 $$ assertEquals(t3, t4)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_24 $$ TypeDescriptor t15 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))[ CD ]
Line_4 $$ TypeDescriptor t2 = TypeDescriptor.valueOf(String.class)-->Line_11 $$ assertEquals(t1, t2)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_5 $$ TypeDescriptor t3 = TypeDescriptor.valueOf(Date.class)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_26 $$ assertNotEquals(t15, t16)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_11 $$ assertEquals(t1, t2)[ CD ]
Line_19 $$ TypeDescriptor t12 = new TypeDescriptor(getClass().getField("mapField"))-->Line_20 $$ assertEquals(t11, t12)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_9 $$ TypeDescriptor t7 = TypeDescriptor.valueOf(Map.class)[ CD ]
Line_2 $$ public void equality() throws Exception -->Line_25 $$ TypeDescriptor t16 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethodDifferentAnnotationValue", String.class), 0))[ CD ]
Line_9 $$ TypeDescriptor t7 = TypeDescriptor.valueOf(Map.class)-->Line_14 $$ assertEquals(t7, t8)[ FD ]
Line_22 $$ TypeDescriptor t14 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_23 $$ assertEquals(t13, t14)[ FD ]
Line_2 $$ public void equality() throws Exception -->Line_20 $$ assertEquals(t11, t12)[ CD ]
