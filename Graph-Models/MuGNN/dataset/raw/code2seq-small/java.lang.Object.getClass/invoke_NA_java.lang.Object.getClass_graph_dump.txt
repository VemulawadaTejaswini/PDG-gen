Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_28 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ FD ]
Line_31 $$ retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse)-->Line_38 $$ retVal = proxy[ FD ]
Line_33 $$ invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain)-->Line_34 $$ retVal = invocation.proceed()[ FD ]
Line_25 $$ if (target != null) -->Line_26 $$ targetClass = target.getClass()[ CD ]
Line_26 $$ targetClass = target.getClass()-->Line_28 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ FD ]
Line_24 $$ target = targetSource.getTarget()-->Line_26 $$ targetClass = target.getClass()[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_13 $$ if (!this.hashCodeDefined && AopUtils.isHashCodeMethod(method)) [ FD ]
Line_4 $$ Object oldProxy = null-->Line_21 $$ oldProxy = AopContext.setCurrentProxy(proxy)[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_38 $$ retVal = proxy[ FD ]
Line_36 $$ Class<?> returnType = method.getReturnType()-->Line_39 $$ if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) [ FD ]
Line_8 $$ Object target = null-->Line_25 $$ if (target != null) [ FD ]
Line_8 $$ Object target = null-->Line_24 $$ target = targetSource.getTarget()[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_3 $$ MethodInvocation invocation[ CD ]
Line_8 $$ Object target = null-->Line_26 $$ targetClass = target.getClass()[ FD ]
Line_28 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)-->Line_29 $$ if (chain.isEmpty()) [ FD ]
Line_24 $$ target = targetSource.getTarget()-->Line_31 $$ retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse)[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_4 $$ Object oldProxy = null[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_7 $$ Class<?> targetClass = null[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_30 $$ Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args)[ FD ]
Line_8 $$ Object target = null-->Line_31 $$ retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse)[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_36 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_7 $$ Class<?> targetClass = null-->Line_26 $$ targetClass = target.getClass()[ FD ]
Line_10 $$ if (!this.equalsDefined && AopUtils.isEqualsMethod(method)) -->Line_11 $$ return equals(args[0])[ CD ]
Line_29 $$ if (chain.isEmpty()) -->Line_30 $$ Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args)[ CD ]
Line_31 $$ retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse)-->Line_34 $$ retVal = invocation.proceed()[ FD ]
Line_29 $$ if (chain.isEmpty()) -->Line_33 $$ invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain)[ CD ]
Line_5 $$ boolean setProxyContext = false-->Line_22 $$ setProxyContext = true[ FD ]
Line_13 $$ if (!this.hashCodeDefined && AopUtils.isHashCodeMethod(method)) -->Line_14 $$ return hashCode()[ CD ]
Line_6 $$ TargetSource targetSource = this.advised.targetSource-->Line_45 $$ targetSource.releaseTarget(target)[ FD ]
Line_34 $$ retVal = invocation.proceed()-->Line_38 $$ retVal = proxy[ FD ]
Line_24 $$ target = targetSource.getTarget()-->Line_25 $$ if (target != null) [ FD ]
Line_19 $$ Object retVal-->Line_31 $$ retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse)[ FD ]
Line_19 $$ Object retVal-->Line_38 $$ retVal = proxy[ FD ]
Line_30 $$ Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args)-->Line_31 $$ retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse)[ FD ]
Line_29 $$ if (chain.isEmpty()) -->Line_34 $$ retVal = invocation.proceed()[ CD ]
Line_16 $$ if (!this.advised.opaque && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) -->Line_17 $$ return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args)[ CD ]
Line_44 $$ if (target != null && !targetSource.isStatic()) -->Line_45 $$ targetSource.releaseTarget(target)[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_5 $$ boolean setProxyContext = false[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_17 $$ return AopUtils.invokeJoinpointUsingReflection(this.advised, method, args)[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_6 $$ TargetSource targetSource = this.advised.targetSource[ CD ]
Line_19 $$ Object retVal-->Line_34 $$ retVal = invocation.proceed()[ FD ]
Line_24 $$ target = targetSource.getTarget()-->Line_45 $$ targetSource.releaseTarget(target)[ FD ]
Line_3 $$ MethodInvocation invocation-->Line_33 $$ invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain)[ FD ]
Line_29 $$ if (chain.isEmpty()) -->Line_31 $$ retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse)[ CD ]
Line_20 $$ if (this.advised.exposeProxy) -->Line_22 $$ setProxyContext = true[ CD ]
Line_36 $$ Class<?> returnType = method.getReturnType()-->Line_37 $$ if (retVal != null && retVal == target && returnType.isInstance(proxy) && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) [ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_16 $$ if (!this.advised.opaque && method.getDeclaringClass().isInterface() && method.getDeclaringClass().isAssignableFrom(Advised.class)) [ FD ]
Line_37 $$ if (retVal != null && retVal == target && returnType.isInstance(proxy) && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) -->Line_38 $$ retVal = proxy[ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_31 $$ retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse)[ FD ]
Line_6 $$ TargetSource targetSource = this.advised.targetSource-->Line_44 $$ if (target != null && !targetSource.isStatic()) [ FD ]
Line_8 $$ Object target = null-->Line_45 $$ targetSource.releaseTarget(target)[ FD ]
Line_4 $$ Object oldProxy = null-->Line_48 $$ AopContext.setCurrentProxy(oldProxy)[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_37 $$ if (retVal != null && retVal == target && returnType.isInstance(proxy) && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) [ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_8 $$ Object target = null[ CD ]
Line_20 $$ if (this.advised.exposeProxy) -->Line_21 $$ oldProxy = AopContext.setCurrentProxy(proxy)[ CD ]
Line_21 $$ oldProxy = AopContext.setCurrentProxy(proxy)-->Line_48 $$ AopContext.setCurrentProxy(oldProxy)[ FD ]
Line_6 $$ TargetSource targetSource = this.advised.targetSource-->Line_24 $$ target = targetSource.getTarget()[ FD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_10 $$ if (!this.equalsDefined && AopUtils.isEqualsMethod(method)) [ FD ]
Line_37 $$ if (retVal != null && retVal == target && returnType.isInstance(proxy) && !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) -->Line_39 $$ if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) [ CD ]
Line_2 $$ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable -->Line_21 $$ oldProxy = AopContext.setCurrentProxy(proxy)[ FD ]
Line_3 $$ MethodInvocation invocation-->Line_34 $$ retVal = invocation.proceed()[ FD ]
Line_47 $$ if (setProxyContext) -->Line_48 $$ AopContext.setCurrentProxy(oldProxy)[ CD ]
Line_7 $$ Class<?> targetClass = null-->Line_28 $$ List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass)[ FD ]
