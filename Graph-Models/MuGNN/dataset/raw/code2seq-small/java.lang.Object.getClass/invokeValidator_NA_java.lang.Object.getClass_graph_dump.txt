Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_18 $$ logger.debug("Validator found " + errors.getErrorCount() + " errors")[ FD ]
Line_5 $$ if (logger.isDebugEnabled()) -->Line_6 $$ logger.debug("Invoking validator [" + validator + "]")[ CD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_3 $$ Assert.notNull(validator, "Validator must not be null")[ CD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_11 $$ if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) [ CD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_4 $$ Assert.notNull(errors, "Errors object must not be null")[ FD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_12 $$ ((SmartValidator) validator).validate(obj, errors, validationHints)[ FD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_14 $$ validator.validate(obj, errors)[ FD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_17 $$ if (errors.hasErrors()) [ FD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_5 $$ if (logger.isDebugEnabled()) [ CD ]
Line_17 $$ if (errors.hasErrors()) -->Line_20 $$ logger.debug("Validator found no errors")[ CD ]
Line_11 $$ if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) -->Line_14 $$ validator.validate(obj, errors)[ CD ]
Line_16 $$ if (logger.isDebugEnabled()) -->Line_17 $$ if (errors.hasErrors()) [ CD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_9 $$ throw new IllegalArgumentException("Validator [" + validator.getClass() + "] does not support [" + obj.getClass() + "]")[ FD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_8 $$ if (obj != null && !validator.supports(obj.getClass())) [ CD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_4 $$ Assert.notNull(errors, "Errors object must not be null")[ CD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_11 $$ if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) [ FD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_16 $$ if (logger.isDebugEnabled()) [ CD ]
Line_17 $$ if (errors.hasErrors()) -->Line_18 $$ logger.debug("Validator found " + errors.getErrorCount() + " errors")[ CD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_3 $$ Assert.notNull(validator, "Validator must not be null")[ FD ]
Line_2 $$ public static void invokeValidator(Validator validator, Object obj, Errors errors, Object... validationHints) -->Line_8 $$ if (obj != null && !validator.supports(obj.getClass())) [ FD ]
Line_11 $$ if (!ObjectUtils.isEmpty(validationHints) && validator instanceof SmartValidator) -->Line_12 $$ ((SmartValidator) validator).validate(obj, errors, validationHints)[ CD ]
