Line_4 $$ if (logger.isDebugEnabled()) -->Line_5 $$ logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")[ CD ]
Line_2 $$ public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception -->Line_3 $$ DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)[ CD ]
Line_2 $$ public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception -->Line_3 $$ DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)[ FD ]
Line_2 $$ public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception -->Line_7 $$ DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)[ CD ]
Line_2 $$ public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception -->Line_8 $$ return builder.parse(inputSource)[ CD ]
Line_3 $$ DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)-->Line_7 $$ DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)[ FD ]
Line_3 $$ DocumentBuilderFactory factory = createDocumentBuilderFactory(validationMode, namespaceAware)-->Line_5 $$ logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]")[ FD ]
Line_2 $$ public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception -->Line_8 $$ return builder.parse(inputSource)[ FD ]
Line_2 $$ public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception -->Line_4 $$ if (logger.isDebugEnabled()) [ CD ]
Line_7 $$ DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)-->Line_8 $$ return builder.parse(inputSource)[ FD ]
Line_2 $$ public Document loadDocument(InputSource inputSource, EntityResolver entityResolver, ErrorHandler errorHandler, int validationMode, boolean namespaceAware) throws Exception -->Line_7 $$ DocumentBuilder builder = createDocumentBuilder(factory, entityResolver, errorHandler)[ FD ]
