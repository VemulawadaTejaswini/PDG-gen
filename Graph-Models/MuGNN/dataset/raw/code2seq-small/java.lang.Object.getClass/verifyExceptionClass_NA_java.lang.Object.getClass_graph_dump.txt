Line_2 $$ private IOException verifyExceptionClass(IOException e, Class expectedClass) throws Throwable -->Line_5 $$ LOG.info(wrapped.toString(), wrapped)[ CD ]
Line_4 $$ IOException wrapped = NetUtils.wrapException("desthost", DEST_PORT, "localhost", LOCAL_PORT, e)-->Line_6 $$ if (!(wrapped.getClass().equals(expectedClass))) [ FD ]
Line_2 $$ private IOException verifyExceptionClass(IOException e, Class expectedClass) throws Throwable -->Line_6 $$ if (!(wrapped.getClass().equals(expectedClass))) [ CD ]
Line_2 $$ private IOException verifyExceptionClass(IOException e, Class expectedClass) throws Throwable -->Line_9 $$ return wrapped[ CD ]
Line_4 $$ IOException wrapped = NetUtils.wrapException("desthost", DEST_PORT, "localhost", LOCAL_PORT, e)-->Line_5 $$ LOG.info(wrapped.toString(), wrapped)[ FD ]
Line_4 $$ IOException wrapped = NetUtils.wrapException("desthost", DEST_PORT, "localhost", LOCAL_PORT, e)-->Line_7 $$ throw new AssertionFailedError("Wrong exception class; expected " + expectedClass + " got " + wrapped.getClass() + ": " + wrapped).initCause(wrapped)[ FD ]
Line_2 $$ private IOException verifyExceptionClass(IOException e, Class expectedClass) throws Throwable -->Line_3 $$ assertNotNull("Null Exception", e)[ FD ]
Line_2 $$ private IOException verifyExceptionClass(IOException e, Class expectedClass) throws Throwable -->Line_4 $$ IOException wrapped = NetUtils.wrapException("desthost", DEST_PORT, "localhost", LOCAL_PORT, e)[ CD ]
Line_2 $$ private IOException verifyExceptionClass(IOException e, Class expectedClass) throws Throwable -->Line_3 $$ assertNotNull("Null Exception", e)[ CD ]
Line_2 $$ private IOException verifyExceptionClass(IOException e, Class expectedClass) throws Throwable -->Line_6 $$ if (!(wrapped.getClass().equals(expectedClass))) [ FD ]
Line_2 $$ private IOException verifyExceptionClass(IOException e, Class expectedClass) throws Throwable -->Line_4 $$ IOException wrapped = NetUtils.wrapException("desthost", DEST_PORT, "localhost", LOCAL_PORT, e)[ FD ]
