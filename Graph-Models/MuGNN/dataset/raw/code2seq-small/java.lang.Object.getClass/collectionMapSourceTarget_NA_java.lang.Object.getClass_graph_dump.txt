Line_17 $$ Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType)-->Line_20 $$ assertEquals(Arrays.asList(37, 23), result.get(2))[ FD ]
Line_6 $$ TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("sourceCollectionMapTarget"))-->Line_8 $$ assertFalse(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_17 $$ Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType)[ CD ]
Line_3 $$ Map<String, List<String>> map = new HashMap<String, List<String>>()-->Line_4 $$ map.put("1", Arrays.asList("9", "12"))[ FD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_20 $$ assertEquals(Arrays.asList(37, 23), result.get(2))[ CD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_8 $$ assertFalse(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_19 $$ assertEquals(Arrays.asList(9, 12), result.get(1))[ CD ]
Line_3 $$ Map<String, List<String>> map = new HashMap<String, List<String>>()-->Line_18 $$ assertFalse(map.equals(result))[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("collectionMapTarget"))-->Line_17 $$ Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_16 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_3 $$ Map<String, List<String>> map = new HashMap<String, List<String>>()[ CD ]
Line_6 $$ TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("sourceCollectionMapTarget"))-->Line_16 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_6 $$ TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("sourceCollectionMapTarget"))[ CD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_5 $$ map.put("2", Arrays.asList("37", "23"))[ CD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("collectionMapTarget"))-->Line_16 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_17 $$ Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType)-->Line_18 $$ assertFalse(map.equals(result))[ FD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_14 $$ conversionService.addConverter(new CollectionToCollectionConverter(conversionService))[ CD ]
Line_3 $$ Map<String, List<String>> map = new HashMap<String, List<String>>()-->Line_5 $$ map.put("2", Arrays.asList("37", "23"))[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("collectionMapTarget"))-->Line_10 $$ conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_15 $$ conversionService.addConverterFactory(new StringToNumberConverterFactory())[ CD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_4 $$ map.put("1", Arrays.asList("9", "12"))[ CD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_18 $$ assertFalse(map.equals(result))[ CD ]
Line_17 $$ Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType)-->Line_19 $$ assertEquals(Arrays.asList(9, 12), result.get(1))[ FD ]
Line_3 $$ Map<String, List<String>> map = new HashMap<String, List<String>>()-->Line_17 $$ Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void collectionMapSourceTarget() throws Exception -->Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("collectionMapTarget"))[ CD ]
Line_6 $$ TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("sourceCollectionMapTarget"))-->Line_17 $$ Map<Integer, List<Integer>> result = (Map<Integer, List<Integer>>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_6 $$ TypeDescriptor sourceType = new TypeDescriptor(getClass().getField("sourceCollectionMapTarget"))-->Line_10 $$ conversionService.convert(map, sourceType, targetType)[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("collectionMapTarget"))-->Line_8 $$ assertFalse(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_3 $$ Map<String, List<String>> map = new HashMap<String, List<String>>()-->Line_10 $$ conversionService.convert(map, sourceType, targetType)[ FD ]
