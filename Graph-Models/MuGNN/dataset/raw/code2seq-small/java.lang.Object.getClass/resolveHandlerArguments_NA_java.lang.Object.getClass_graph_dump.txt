Line_10 $$ Object argValue = resolveCommonArgument(methodParam, webRequest, thrownException)-->Line_12 $$ args[i] = argValue[ FD ]
Line_6 $$ for (int i = 0; i < args.length; i++) -->Line_7 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)[ CD ]
Line_6 $$ for (int i = 0; i < args.length; i++) -->Line_10 $$ Object argValue = resolveCommonArgument(methodParam, webRequest, thrownException)[ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, Exception thrownException) throws Exception -->Line_6 $$ for (int i = 0; i < args.length; i++) [ CD ]
Line_9 $$ Class<?> paramType = methodParam.getParameterType()-->Line_14 $$ throw new IllegalStateException("Unsupported argument [" + paramType.getName() + "] for @ExceptionHandler method: " + handlerMethod)[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, Exception thrownException) throws Exception -->Line_5 $$ Class<?> handlerType = handler.getClass()[ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, Exception thrownException) throws Exception -->Line_3 $$ Class<?>[] paramTypes = handlerMethod.getParameterTypes()[ CD ]
Line_7 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_10 $$ Object argValue = resolveCommonArgument(methodParam, webRequest, thrownException)[ FD ]
Line_11 $$ if (argValue != WebArgumentResolver.UNRESOLVED) -->Line_12 $$ args[i] = argValue[ CD ]
Line_7 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_8 $$ GenericTypeResolver.resolveParameterType(methodParam, handlerType)[ FD ]
Line_6 $$ for (int i = 0; i < args.length; i++) -->Line_11 $$ if (argValue != WebArgumentResolver.UNRESOLVED) [ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, Exception thrownException) throws Exception -->Line_10 $$ Object argValue = resolveCommonArgument(methodParam, webRequest, thrownException)[ FD ]
Line_10 $$ Object argValue = resolveCommonArgument(methodParam, webRequest, thrownException)-->Line_11 $$ if (argValue != WebArgumentResolver.UNRESOLVED) [ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, Exception thrownException) throws Exception -->Line_5 $$ Class<?> handlerType = handler.getClass()[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, Exception thrownException) throws Exception -->Line_3 $$ Class<?>[] paramTypes = handlerMethod.getParameterTypes()[ FD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, Exception thrownException) throws Exception -->Line_4 $$ Object[] args = new Object[paramTypes.length][ CD ]
Line_2 $$ private Object[] resolveHandlerArguments(Method handlerMethod, Object handler, NativeWebRequest webRequest, Exception thrownException) throws Exception -->Line_17 $$ return args[ CD ]
Line_6 $$ for (int i = 0; i < args.length; i++) -->Line_8 $$ GenericTypeResolver.resolveParameterType(methodParam, handlerType)[ CD ]
Line_6 $$ for (int i = 0; i < args.length; i++) -->Line_9 $$ Class<?> paramType = methodParam.getParameterType()[ CD ]
Line_7 $$ MethodParameter methodParam = new SynthesizingMethodParameter(handlerMethod, i)-->Line_9 $$ Class<?> paramType = methodParam.getParameterType()[ FD ]
Line_5 $$ Class<?> handlerType = handler.getClass()-->Line_8 $$ GenericTypeResolver.resolveParameterType(methodParam, handlerType)[ FD ]
