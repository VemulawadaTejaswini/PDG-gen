Line_6 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()-->Line_7 $$ LoggingEvent loggingEvent = loggingEvents.get(0)[ FD ]
Line_9 $$ ThrowableInformation throwableInformation = loggingEvent.getThrowableInformation()-->Line_10 $$ Throwable throwable = throwableInformation.getThrowable()[ FD ]
Line_10 $$ Throwable throwable = throwableInformation.getThrowable()-->Line_11 $$ Assert.assertSame(NoSuchLayoutException.class, throwable.getClass())[ FD ]
Line_7 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_9 $$ ThrowableInformation throwableInformation = loggingEvent.getThrowableInformation()[ FD ]
Line_2 $$ public void testFailedPortletLocalPublishing() throws Exception -->Line_13 $$ Assert.assertTrue(_firedExportImportLifecycleEventsMap.containsKey(ExportImportLifecycleConstants.EVENT_PUBLICATION_PORTLET_LOCAL_FAILED))[ CD ]
Line_2 $$ public void testFailedPortletLocalPublishing() throws Exception -->Line_3 $$ User user = TestPropsValues.getUser()[ CD ]
Line_4 $$ try (CaptureAppender captureAppender = Log4JLoggerTestUtil.configureLog4JLogger("com.liferay.portal.background.task.internal.messaging." + "BackgroundTaskMessageListener", Level.ERROR)) -->Line_6 $$ List<LoggingEvent> loggingEvents = captureAppender.getLoggingEvents()[ FD ]
Line_7 $$ LoggingEvent loggingEvent = loggingEvents.get(0)-->Line_8 $$ Assert.assertEquals("Unable to execute background task", loggingEvent.getMessage())[ FD ]
Line_3 $$ User user = TestPropsValues.getUser()-->Line_5 $$ StagingUtil.publishPortlet(user.getUserId(), _group.getGroupId(), _liveGroup.getGroupId(), 0, 0, StringPool.BLANK, _parameterMap)[ FD ]
