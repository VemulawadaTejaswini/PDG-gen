Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_21 $$ value = transform.method.handle.invoke(value)[ FD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_29 $$ ((List) array).add((int) index, value)[ FD ]
Line_28 $$ if (array instanceof List) -->Line_29 $$ ((List) array).add((int) index, value)[ CD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_18 $$ if (!valuesafe) [ FD ]
Line_7 $$ if (!indexsafe) -->Line_9 $$ if (transform != null) [ CD ]
Line_18 $$ if (!valuesafe) -->Line_20 $$ if (transform != null) [ CD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_8 $$ final Transform transform = getTransform(index.getClass(), Integer.class, definition)[ FD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_3 $$ if (array instanceof Map) [ FD ]
Line_3 $$ if (array instanceof Map) -->Line_4 $$ ((Map) array).put(index, value)[ CD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_19 $$ final Transform transform = getTransform(value.getClass(), array.getClass().getComponentType(), definition)[ FD ]
Line_8 $$ final Transform transform = getTransform(index.getClass(), Integer.class, definition)-->Line_20 $$ if (transform != null) [ FD ]
Line_9 $$ if (transform != null) -->Line_10 $$ index = transform.method.handle.invoke(index)[ CD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_10 $$ index = transform.method.handle.invoke(index)[ FD ]
Line_20 $$ if (transform != null) -->Line_21 $$ value = transform.method.handle.invoke(value)[ CD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_16 $$ if (array.getClass().isArray()) [ FD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_28 $$ if (array instanceof List) [ FD ]
Line_18 $$ if (!valuesafe) -->Line_19 $$ final Transform transform = getTransform(value.getClass(), array.getClass().getComponentType(), definition)[ CD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_24 $$ Array.set(array, (int) index, value)[ FD ]
Line_7 $$ if (!indexsafe) -->Line_8 $$ final Transform transform = getTransform(index.getClass(), Integer.class, definition)[ CD ]
Line_21 $$ value = transform.method.handle.invoke(value)-->Line_29 $$ ((List) array).add((int) index, value)[ FD ]
Line_8 $$ final Transform transform = getTransform(index.getClass(), Integer.class, definition)-->Line_9 $$ if (transform != null) [ FD ]
Line_21 $$ value = transform.method.handle.invoke(value)-->Line_24 $$ Array.set(array, (int) index, value)[ FD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_3 $$ if (array instanceof Map) [ CD ]
Line_16 $$ if (array.getClass().isArray()) -->Line_28 $$ if (array instanceof List) [ CD ]
Line_3 $$ if (array instanceof Map) -->Line_16 $$ if (array.getClass().isArray()) [ CD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_26 $$ throw new IllegalArgumentException("Error storing value [" + value + "] " + "in array class [" + array.getClass().getCanonicalName() + "].", throwable)[ FD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_7 $$ if (!indexsafe) [ FD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_31 $$ throw new IllegalArgumentException("Attempting to address a non-array type " + "[" + array.getClass().getCanonicalName() + "] as an array.")[ FD ]
Line_2 $$ public static void arrayStore(final Object array, Object index, Object value, final Definition definition, final boolean indexsafe, final boolean valuesafe) -->Line_4 $$ ((Map) array).put(index, value)[ FD ]
