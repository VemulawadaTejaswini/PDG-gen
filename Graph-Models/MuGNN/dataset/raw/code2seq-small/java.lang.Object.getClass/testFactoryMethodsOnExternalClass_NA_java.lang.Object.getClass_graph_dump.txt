Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_6 $$ assertEquals(TestBean.class, xbf.getType("externalFactoryMethodWithoutArgs"))[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_11 $$ TestBean tb = (TestBean) xbf.getBean("externalFactoryMethodWithoutArgs")[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_18 $$ assertEquals(TestBean.class, xbf.getType("externalFactoryMethodWithArgs"))[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_16 $$ assertEquals("Rod", tb.getName())[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_9 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithoutArgs"))[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_14 $$ tb = (TestBean) xbf.getBean("externalFactoryMethodWithArgs")[ CD ]
Line_8 $$ String[] names = xbf.getBeanNamesForType(TestBean.class)-->Line_20 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithoutArgs"))[ FD ]
Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)-->Line_5 $$ reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()))[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_21 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithArgs"))[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_19 $$ names = xbf.getBeanNamesForType(TestBean.class)[ FD ]
Line_11 $$ TestBean tb = (TestBean) xbf.getBean("externalFactoryMethodWithoutArgs")-->Line_13 $$ assertEquals("Tristan", tb.getName())[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_18 $$ assertEquals(TestBean.class, xbf.getType("externalFactoryMethodWithArgs"))[ FD ]
Line_8 $$ String[] names = xbf.getBeanNamesForType(TestBean.class)-->Line_10 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithArgs"))[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_12 $$ assertEquals(2, tb.getAge())[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_7 $$ assertEquals(TestBean.class, xbf.getType("externalFactoryMethodWithArgs"))[ CD ]
Line_8 $$ String[] names = xbf.getBeanNamesForType(TestBean.class)-->Line_9 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithoutArgs"))[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_14 $$ tb = (TestBean) xbf.getBean("externalFactoryMethodWithArgs")[ FD ]
Line_19 $$ names = xbf.getBeanNamesForType(TestBean.class)-->Line_20 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithoutArgs"))[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_8 $$ String[] names = xbf.getBeanNamesForType(TestBean.class)[ CD ]
Line_11 $$ TestBean tb = (TestBean) xbf.getBean("externalFactoryMethodWithoutArgs")-->Line_15 $$ assertEquals(33, tb.getAge())[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_15 $$ assertEquals(33, tb.getAge())[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_6 $$ assertEquals(TestBean.class, xbf.getType("externalFactoryMethodWithoutArgs"))[ FD ]
Line_8 $$ String[] names = xbf.getBeanNamesForType(TestBean.class)-->Line_21 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithArgs"))[ FD ]
Line_19 $$ names = xbf.getBeanNamesForType(TestBean.class)-->Line_21 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithArgs"))[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_17 $$ assertEquals(TestBean.class, xbf.getType("externalFactoryMethodWithoutArgs"))[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_13 $$ assertEquals("Tristan", tb.getName())[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_5 $$ reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()))[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_11 $$ TestBean tb = (TestBean) xbf.getBean("externalFactoryMethodWithoutArgs")[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_17 $$ assertEquals(TestBean.class, xbf.getType("externalFactoryMethodWithoutArgs"))[ FD ]
Line_11 $$ TestBean tb = (TestBean) xbf.getBean("externalFactoryMethodWithoutArgs")-->Line_12 $$ assertEquals(2, tb.getAge())[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_7 $$ assertEquals(TestBean.class, xbf.getType("externalFactoryMethodWithArgs"))[ FD ]
Line_11 $$ TestBean tb = (TestBean) xbf.getBean("externalFactoryMethodWithoutArgs")-->Line_16 $$ assertEquals("Rod", tb.getName())[ FD ]
Line_14 $$ tb = (TestBean) xbf.getBean("externalFactoryMethodWithArgs")-->Line_15 $$ assertEquals(33, tb.getAge())[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_19 $$ names = xbf.getBeanNamesForType(TestBean.class)[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_8 $$ String[] names = xbf.getBeanNamesForType(TestBean.class)[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)[ CD ]
Line_8 $$ String[] names = xbf.getBeanNamesForType(TestBean.class)-->Line_19 $$ names = xbf.getBeanNamesForType(TestBean.class)[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_10 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithArgs"))[ CD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()[ CD ]
Line_11 $$ TestBean tb = (TestBean) xbf.getBean("externalFactoryMethodWithoutArgs")-->Line_14 $$ tb = (TestBean) xbf.getBean("externalFactoryMethodWithArgs")[ FD ]
Line_14 $$ tb = (TestBean) xbf.getBean("externalFactoryMethodWithArgs")-->Line_16 $$ assertEquals("Rod", tb.getName())[ FD ]
Line_2 $$ public void testFactoryMethodsOnExternalClass() -->Line_20 $$ assertTrue(Arrays.asList(names).contains("externalFactoryMethodWithoutArgs"))[ CD ]
