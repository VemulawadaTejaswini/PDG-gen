Line_16 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()-->Line_17 $$ Assert.assertTrue(fabricWorkers.isEmpty())[ FD ]
Line_2 $$ public void testExecuteWithInterruption() throws Exception -->Line_16 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()[ CD ]
Line_2 $$ public void testExecuteWithInterruption() throws Exception -->Line_3 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)[ CD ]
Line_2 $$ public void testExecuteWithInterruption() throws Exception -->Line_5 $$ currentThread.interrupt()[ CD ]
Line_13 $$ Throwable throwable = ee.getCause()-->Line_14 $$ Assert.assertSame(InterruptedException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testExecuteWithInterruption() throws Exception -->Line_17 $$ Assert.assertTrue(fabricWorkers.isEmpty())[ CD ]
Line_2 $$ public void testExecuteWithInterruption() throws Exception -->Line_8 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()[ CD ]
Line_3 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_7 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))[ FD ]
Line_6 $$ Builder builder = new Builder()-->Line_7 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))[ FD ]
Line_7 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))-->Line_8 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()[ FD ]
Line_2 $$ public void testExecuteWithInterruption() throws Exception -->Line_4 $$ Thread currentThread = Thread.currentThread()[ CD ]
Line_4 $$ Thread currentThread = Thread.currentThread()-->Line_5 $$ currentThread.interrupt()[ FD ]
Line_2 $$ public void testExecuteWithInterruption() throws Exception -->Line_6 $$ Builder builder = new Builder()[ CD ]
Line_8 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()-->Line_10 $$ noticeableFuture.get()[ FD ]
Line_2 $$ public void testExecuteWithInterruption() throws Exception -->Line_7 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))[ CD ]
Line_3 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, Long.MAX_VALUE)-->Line_16 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()[ FD ]
