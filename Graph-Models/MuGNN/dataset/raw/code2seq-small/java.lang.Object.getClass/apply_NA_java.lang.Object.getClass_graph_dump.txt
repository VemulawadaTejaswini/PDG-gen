Line_8 $$ TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)-->Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ CD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)[ CD ]
Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_13 $$ statement = withPotentialRepeat(statement, frameworkMethod, testInstance)[ FD ]
Line_9 $$ Statement statement = base-->Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_4 $$ logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]")[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_14 $$ statement = withPotentialTimeout(statement, frameworkMethod, testInstance)[ CD ]
Line_9 $$ Statement statement = base-->Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)[ FD ]
Line_8 $$ TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)-->Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_3 $$ if (logger.isDebugEnabled()) [ CD ]
Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ FD ]
Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)[ FD ]
Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)-->Line_13 $$ statement = withPotentialRepeat(statement, frameworkMethod, testInstance)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_16 $$ return statement[ CD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_7 $$ validateSpringClassRuleConfiguration(testClass)[ CD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_6 $$ Class<?> testClass = testInstance.getClass()[ CD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_6 $$ Class<?> testClass = testInstance.getClass()[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ CD ]
Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_13 $$ statement = withPotentialRepeat(statement, frameworkMethod, testInstance)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)[ FD ]
Line_8 $$ TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)-->Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ FD ]
Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_14 $$ statement = withPotentialTimeout(statement, frameworkMethod, testInstance)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_15 $$ statement = withProfileValueCheck(statement, frameworkMethod, testInstance)[ CD ]
Line_9 $$ Statement statement = base-->Line_15 $$ statement = withProfileValueCheck(statement, frameworkMethod, testInstance)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_14 $$ statement = withPotentialTimeout(statement, frameworkMethod, testInstance)[ FD ]
Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_15 $$ statement = withProfileValueCheck(statement, frameworkMethod, testInstance)[ FD ]
Line_9 $$ Statement statement = base-->Line_10 $$ statement = withBeforeTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ FD ]
Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)-->Line_15 $$ statement = withProfileValueCheck(statement, frameworkMethod, testInstance)[ FD ]
Line_6 $$ Class<?> testClass = testInstance.getClass()-->Line_7 $$ validateSpringClassRuleConfiguration(testClass)[ FD ]
Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_15 $$ statement = withProfileValueCheck(statement, frameworkMethod, testInstance)[ FD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_4 $$ logger.debug("Applying SpringMethodRule to test method [" + frameworkMethod.getMethod() + "]")[ CD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_8 $$ TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)[ CD ]
Line_13 $$ statement = withPotentialRepeat(statement, frameworkMethod, testInstance)-->Line_14 $$ statement = withPotentialTimeout(statement, frameworkMethod, testInstance)[ FD ]
Line_9 $$ Statement statement = base-->Line_14 $$ statement = withPotentialTimeout(statement, frameworkMethod, testInstance)[ FD ]
Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_15 $$ statement = withProfileValueCheck(statement, frameworkMethod, testInstance)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_13 $$ statement = withPotentialRepeat(statement, frameworkMethod, testInstance)[ CD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_9 $$ Statement statement = base[ CD ]
Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)-->Line_14 $$ statement = withPotentialTimeout(statement, frameworkMethod, testInstance)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_11 $$ statement = withAfterTestMethodCallbacks(statement, frameworkMethod, testInstance, testContextManager)[ FD ]
Line_12 $$ statement = withTestInstancePreparation(statement, testInstance, testContextManager)-->Line_14 $$ statement = withPotentialTimeout(statement, frameworkMethod, testInstance)[ FD ]
Line_6 $$ Class<?> testClass = testInstance.getClass()-->Line_8 $$ TestContextManager testContextManager = SpringClassRule.getTestContextManager(testClass)[ FD ]
Line_9 $$ Statement statement = base-->Line_13 $$ statement = withPotentialRepeat(statement, frameworkMethod, testInstance)[ FD ]
Line_14 $$ statement = withPotentialTimeout(statement, frameworkMethod, testInstance)-->Line_15 $$ statement = withProfileValueCheck(statement, frameworkMethod, testInstance)[ FD ]
Line_13 $$ statement = withPotentialRepeat(statement, frameworkMethod, testInstance)-->Line_15 $$ statement = withProfileValueCheck(statement, frameworkMethod, testInstance)[ FD ]
Line_2 $$ public Statement apply(Statement base, FrameworkMethod frameworkMethod, Object testInstance) -->Line_13 $$ statement = withPotentialRepeat(statement, frameworkMethod, testInstance)[ FD ]
