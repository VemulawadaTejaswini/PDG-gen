Line_6 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_1)-->Line_8 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_2)[ FD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)[ CD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_10 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_3)[ CD ]
Line_6 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_1)-->Line_10 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_3)[ FD ]
Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)-->Line_8 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_2)[ FD ]
Line_3 $$ ZipReader zipReader = new ZipReaderImpl(DependenciesTestUtil.getDependencyAsInputStream(getClass(), _ZIP_FILE_PATH))-->Line_6 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_1)[ FD ]
Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)-->Line_5 $$ Assert.assertArrayEquals(_expectedContent0.getBytes(_UTF_8), bytes)[ FD ]
Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)-->Line_10 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_3)[ FD ]
Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)-->Line_6 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_1)[ FD ]
Line_3 $$ ZipReader zipReader = new ZipReaderImpl(DependenciesTestUtil.getDependencyAsInputStream(getClass(), _ZIP_FILE_PATH))-->Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)[ FD ]
Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)-->Line_11 $$ Assert.assertArrayEquals(_expectedContent3.getBytes(_UTF_8), bytes)[ FD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_12 $$ zipReader.close()[ CD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_8 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_2)[ CD ]
Line_8 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_2)-->Line_11 $$ Assert.assertArrayEquals(_expectedContent3.getBytes(_UTF_8), bytes)[ FD ]
Line_3 $$ ZipReader zipReader = new ZipReaderImpl(DependenciesTestUtil.getDependencyAsInputStream(getClass(), _ZIP_FILE_PATH))-->Line_12 $$ zipReader.close()[ FD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_6 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_1)[ CD ]
Line_6 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_1)-->Line_11 $$ Assert.assertArrayEquals(_expectedContent3.getBytes(_UTF_8), bytes)[ FD ]
Line_6 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_1)-->Line_7 $$ Assert.assertArrayEquals(_expectedContent1.getBytes(_UTF_8), bytes)[ FD ]
Line_8 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_2)-->Line_9 $$ Assert.assertArrayEquals(_expectedContent2.getBytes(_UTF_8), bytes)[ FD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_7 $$ Assert.assertArrayEquals(_expectedContent1.getBytes(_UTF_8), bytes)[ CD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_3 $$ ZipReader zipReader = new ZipReaderImpl(DependenciesTestUtil.getDependencyAsInputStream(getClass(), _ZIP_FILE_PATH))[ CD ]
Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)-->Line_7 $$ Assert.assertArrayEquals(_expectedContent1.getBytes(_UTF_8), bytes)[ FD ]
Line_8 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_2)-->Line_10 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_3)[ FD ]
Line_3 $$ ZipReader zipReader = new ZipReaderImpl(DependenciesTestUtil.getDependencyAsInputStream(getClass(), _ZIP_FILE_PATH))-->Line_8 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_2)[ FD ]
Line_4 $$ byte[] bytes = zipReader.getEntryAsByteArray(_FILE_PATH_0)-->Line_9 $$ Assert.assertArrayEquals(_expectedContent2.getBytes(_UTF_8), bytes)[ FD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_5 $$ Assert.assertArrayEquals(_expectedContent0.getBytes(_UTF_8), bytes)[ CD ]
Line_6 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_1)-->Line_9 $$ Assert.assertArrayEquals(_expectedContent2.getBytes(_UTF_8), bytes)[ FD ]
Line_3 $$ ZipReader zipReader = new ZipReaderImpl(DependenciesTestUtil.getDependencyAsInputStream(getClass(), _ZIP_FILE_PATH))-->Line_10 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_3)[ FD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_11 $$ Assert.assertArrayEquals(_expectedContent3.getBytes(_UTF_8), bytes)[ CD ]
Line_10 $$ bytes = zipReader.getEntryAsByteArray(_FILE_PATH_3)-->Line_11 $$ Assert.assertArrayEquals(_expectedContent3.getBytes(_UTF_8), bytes)[ FD ]
Line_2 $$ public void testGetEntryAsByteArray() throws Exception -->Line_9 $$ Assert.assertArrayEquals(_expectedContent2.getBytes(_UTF_8), bytes)[ CD ]
