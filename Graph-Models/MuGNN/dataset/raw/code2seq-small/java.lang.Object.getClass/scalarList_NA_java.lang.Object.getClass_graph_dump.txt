Line_3 $$ List<String> list = new ArrayList<String>()-->Line_10 $$ conversionService.convert(list, sourceType, targetType)[ FD ]
Line_16 $$ List<String> result = (List<String>) conversionService.convert(list, sourceType, targetType)-->Line_19 $$ assertEquals(37, result.get(1))[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_16 $$ List<String> result = (List<String>) conversionService.convert(list, sourceType, targetType)[ CD ]
Line_2 $$ public void scalarList() throws Exception -->Line_14 $$ conversionService.addConverterFactory(new StringToNumberConverterFactory())[ CD ]
Line_3 $$ List<String> list = new ArrayList<String>()-->Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_15 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_3 $$ List<String> list = new ArrayList<String>()-->Line_5 $$ list.add("37")[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarListTarget"))[ CD ]
Line_3 $$ List<String> list = new ArrayList<String>()-->Line_16 $$ List<String> result = (List<String>) conversionService.convert(list, sourceType, targetType)[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_16 $$ List<String> result = (List<String>) conversionService.convert(list, sourceType, targetType)-->Line_18 $$ assertEquals(9, result.get(0))[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_19 $$ assertEquals(37, result.get(1))[ CD ]
Line_2 $$ public void scalarList() throws Exception -->Line_5 $$ list.add("37")[ CD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarListTarget"))-->Line_16 $$ List<String> result = (List<String>) conversionService.convert(list, sourceType, targetType)[ FD ]
Line_3 $$ List<String> list = new ArrayList<String>()-->Line_17 $$ assertFalse(list.equals(result))[ FD ]
Line_3 $$ List<String> list = new ArrayList<String>()-->Line_4 $$ list.add("9")[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_3 $$ List<String> list = new ArrayList<String>()[ CD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)-->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_18 $$ assertEquals(9, result.get(0))[ CD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)-->Line_10 $$ conversionService.convert(list, sourceType, targetType)[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_4 $$ list.add("9")[ CD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)-->Line_15 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarListTarget"))-->Line_10 $$ conversionService.convert(list, sourceType, targetType)[ FD ]
Line_16 $$ List<String> result = (List<String>) conversionService.convert(list, sourceType, targetType)-->Line_17 $$ assertFalse(list.equals(result))[ FD ]
Line_2 $$ public void scalarList() throws Exception -->Line_17 $$ assertFalse(list.equals(result))[ CD ]
Line_2 $$ public void scalarList() throws Exception -->Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)[ CD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarListTarget"))-->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("scalarListTarget"))-->Line_15 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)-->Line_16 $$ List<String> result = (List<String>) conversionService.convert(list, sourceType, targetType)[ FD ]
