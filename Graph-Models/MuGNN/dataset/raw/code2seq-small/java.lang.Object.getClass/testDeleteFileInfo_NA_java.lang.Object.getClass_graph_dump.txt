Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_11 $$ JobId jobId = job.getID()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setClass(NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ FD ]
Line_14 $$ HistoryFileManager hfm = new HistoryFileManager()-->Line_22 $$ hfm.clean()[ FD ]
Line_2 $$ public void testDeleteFileInfo() throws Exception -->Line_3 $$ LOG.info("STARTING testDeleteFileInfo")[ CD ]
Line_14 $$ HistoryFileManager hfm = new HistoryFileManager()-->Line_26 $$ hfm.stop()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_9 $$ app.submit(conf)[ FD ]
Line_14 $$ HistoryFileManager hfm = new HistoryFileManager()-->Line_15 $$ hfm.init(conf)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_12 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_13 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_18 $$ while (fileInfo.isMovePending()) -->Line_19 $$ Thread.sleep(300)[ CD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_12 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_14 $$ HistoryFileManager hfm = new HistoryFileManager()-->Line_24 $$ hfm.setMaxHistoryAge(-1)[ FD ]
Line_16 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_28 $$ Assert.assertTrue("file should be deleted ", fileInfo.isDeleted())[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ RackResolver.init(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_15 $$ hfm.init(conf)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_14 $$ HistoryFileManager hfm = new HistoryFileManager()-->Line_17 $$ hfm.initExisting()[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_9 $$ app.submit(conf)[ FD ]
Line_14 $$ HistoryFileManager hfm = new HistoryFileManager()-->Line_25 $$ hfm.clean()[ FD ]
Line_16 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_23 $$ Assert.assertFalse(fileInfo.isDeleted())[ FD ]
Line_16 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_18 $$ while (fileInfo.isMovePending()) [ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_16 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)[ FD ]
Line_14 $$ HistoryFileManager hfm = new HistoryFileManager()-->Line_16 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)[ FD ]
