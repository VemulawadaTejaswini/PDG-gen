Line_2 $$ public void doEncryptionTest(int numMappers, int numReducers, int numNodes, int numLines) throws Exception -->Line_8 $$ dfsCluster = new MiniDFSCluster.Builder(conf).numDataNodes(numNodes).build()[ FD ]
Line_2 $$ public void doEncryptionTest(int numMappers, int numReducers, int numNodes, int numLines) throws Exception -->Line_5 $$ FileSystem fileSystem = null[ CD ]
Line_8 $$ dfsCluster = new MiniDFSCluster.Builder(conf).numDataNodes(numNodes).build()-->Line_9 $$ fileSystem = dfsCluster.getFileSystem()[ FD ]
Line_5 $$ FileSystem fileSystem = null-->Line_12 $$ runMergeTest(new JobConf(mrCluster.getConfig()), fileSystem, numMappers, numReducers, numLines)[ FD ]
Line_2 $$ public void doEncryptionTest(int numMappers, int numReducers, int numNodes, int numLines) throws Exception -->Line_3 $$ MiniDFSCluster dfsCluster = null[ CD ]
Line_10 $$ mrCluster = MiniMRClientClusterFactory.create(this.getClass(), numNodes, conf)-->Line_12 $$ runMergeTest(new JobConf(mrCluster.getConfig()), fileSystem, numMappers, numReducers, numLines)[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_10 $$ mrCluster = MiniMRClientClusterFactory.create(this.getClass(), numNodes, conf)[ FD ]
Line_10 $$ mrCluster = MiniMRClientClusterFactory.create(this.getClass(), numNodes, conf)-->Line_17 $$ if (mrCluster != null) [ FD ]
Line_9 $$ fileSystem = dfsCluster.getFileSystem()-->Line_11 $$ createInput(fileSystem, numMappers, numLines)[ FD ]
Line_17 $$ if (mrCluster != null) -->Line_18 $$ mrCluster.stop()[ CD ]
Line_4 $$ MiniMRClientCluster mrCluster = null-->Line_17 $$ if (mrCluster != null) [ FD ]
Line_9 $$ fileSystem = dfsCluster.getFileSystem()-->Line_12 $$ runMergeTest(new JobConf(mrCluster.getConfig()), fileSystem, numMappers, numReducers, numLines)[ FD ]
Line_10 $$ mrCluster = MiniMRClientClusterFactory.create(this.getClass(), numNodes, conf)-->Line_18 $$ mrCluster.stop()[ FD ]
Line_2 $$ public void doEncryptionTest(int numMappers, int numReducers, int numNodes, int numLines) throws Exception -->Line_11 $$ createInput(fileSystem, numMappers, numLines)[ FD ]
Line_3 $$ MiniDFSCluster dfsCluster = null-->Line_8 $$ dfsCluster = new MiniDFSCluster.Builder(conf).numDataNodes(numNodes).build()[ FD ]
Line_4 $$ MiniMRClientCluster mrCluster = null-->Line_10 $$ mrCluster = MiniMRClientClusterFactory.create(this.getClass(), numNodes, conf)[ FD ]
Line_3 $$ MiniDFSCluster dfsCluster = null-->Line_14 $$ if (dfsCluster != null) [ FD ]
Line_4 $$ MiniMRClientCluster mrCluster = null-->Line_18 $$ mrCluster.stop()[ FD ]
Line_5 $$ FileSystem fileSystem = null-->Line_9 $$ fileSystem = dfsCluster.getFileSystem()[ FD ]
Line_4 $$ MiniMRClientCluster mrCluster = null-->Line_12 $$ runMergeTest(new JobConf(mrCluster.getConfig()), fileSystem, numMappers, numReducers, numLines)[ FD ]
Line_3 $$ MiniDFSCluster dfsCluster = null-->Line_9 $$ fileSystem = dfsCluster.getFileSystem()[ FD ]
Line_2 $$ public void doEncryptionTest(int numMappers, int numReducers, int numNodes, int numLines) throws Exception -->Line_10 $$ mrCluster = MiniMRClientClusterFactory.create(this.getClass(), numNodes, conf)[ FD ]
Line_2 $$ public void doEncryptionTest(int numMappers, int numReducers, int numNodes, int numLines) throws Exception -->Line_12 $$ runMergeTest(new JobConf(mrCluster.getConfig()), fileSystem, numMappers, numReducers, numLines)[ FD ]
Line_3 $$ MiniDFSCluster dfsCluster = null-->Line_15 $$ dfsCluster.shutdown()[ FD ]
Line_8 $$ dfsCluster = new MiniDFSCluster.Builder(conf).numDataNodes(numNodes).build()-->Line_15 $$ dfsCluster.shutdown()[ FD ]
Line_5 $$ FileSystem fileSystem = null-->Line_11 $$ createInput(fileSystem, numMappers, numLines)[ FD ]
Line_2 $$ public void doEncryptionTest(int numMappers, int numReducers, int numNodes, int numLines) throws Exception -->Line_4 $$ MiniMRClientCluster mrCluster = null[ CD ]
Line_8 $$ dfsCluster = new MiniDFSCluster.Builder(conf).numDataNodes(numNodes).build()-->Line_14 $$ if (dfsCluster != null) [ FD ]
Line_14 $$ if (dfsCluster != null) -->Line_15 $$ dfsCluster.shutdown()[ CD ]
