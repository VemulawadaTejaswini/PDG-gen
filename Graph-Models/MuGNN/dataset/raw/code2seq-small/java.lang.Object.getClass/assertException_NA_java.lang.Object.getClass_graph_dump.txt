Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_6 $$ discoverer.setThrowingName(throwing)[ FD ]
Line_3 $$ AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer(pointcut)-->Line_8 $$ discoverer.getParameterNames(m)[ FD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_8 $$ discoverer.getParameterNames(m)[ FD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_12 $$ assertEquals("Exception message does not match expected", message, expected.getMessage())[ FD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_5 $$ discoverer.setReturningName(returning)[ FD ]
Line_3 $$ AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer(pointcut)-->Line_4 $$ discoverer.setRaiseExceptions(true)[ FD ]
Line_3 $$ AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer(pointcut)-->Line_6 $$ discoverer.setThrowingName(throwing)[ FD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_11 $$ assertEquals("Expecting exception of type " + exceptionType.getName(), exceptionType, expected.getClass())[ FD ]
Line_3 $$ AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer(pointcut)-->Line_5 $$ discoverer.setReturningName(returning)[ FD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_3 $$ AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer(pointcut)[ CD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_6 $$ discoverer.setThrowingName(throwing)[ CD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_4 $$ discoverer.setRaiseExceptions(true)[ CD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_9 $$ fail("Expecting " + exceptionType.getName() + " with message '" + message + "'")[ FD ]
Line_2 $$ protected void assertException(Method m, String pointcut, String returning, String throwing, Class<?> exceptionType, String message) -->Line_5 $$ discoverer.setReturningName(returning)[ CD ]
