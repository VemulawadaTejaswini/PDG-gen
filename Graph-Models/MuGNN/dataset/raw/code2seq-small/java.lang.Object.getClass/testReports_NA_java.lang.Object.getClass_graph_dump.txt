Line_20 $$ Map<JobId, Job> jobs = jobHistory.getAllJobs()-->Line_22 $$ assertEquals("job_0_0000", jobs.keySet().iterator().next().toString())[ FD ]
Line_6 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_35 $$ assertNotNull(response.getTaskAttemptReport().getCounters().getCounter(TaskCounter.PHYSICAL_MEMORY_BYTES))[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_51 $$ diagnosticRequest.setTaskAttemptId(taId)[ CD ]
Line_8 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_39 $$ taskId.setJobId(job.getID())[ FD ]
Line_32 $$ GetTaskAttemptReportResponse response = protocol.getTaskAttemptReport(gtarRequest)-->Line_35 $$ assertNotNull(response.getTaskAttemptReport().getCounters().getCounter(TaskCounter.PHYSICAL_MEMORY_BYTES))[ FD ]
Line_23 $$ Task task = job.getTasks().values().iterator().next()-->Line_38 $$ TaskId taskId = task.getID()[ FD ]
Line_8 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_27 $$ GetTaskAttemptReportRequest gtarRequest = recordFactory.newRecordInstance(GetTaskAttemptReportRequest.class)-->Line_32 $$ GetTaskAttemptReportResponse response = protocol.getTaskAttemptReport(gtarRequest)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_45 $$ assertEquals(TaskState.SUCCEEDED, reportResponse.getTaskReport().getTaskState())[ CD ]
Line_38 $$ TaskId taskId = task.getID()-->Line_39 $$ taskId.setJobId(job.getID())[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_32 $$ GetTaskAttemptReportResponse response = protocol.getTaskAttemptReport(gtarRequest)[ CD ]
Line_8 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_30 $$ taId.getTaskId().setJobId(job.getID())[ FD ]
Line_38 $$ TaskId taskId = task.getID()-->Line_44 $$ assertEquals(taskId.toString(), reportResponse.getTaskReport().getTaskId().toString())[ FD ]
Line_26 $$ MRClientProtocol protocol = historyService.getClientHandler()-->Line_48 $$ GetTaskAttemptCompletionEventsResponse taskAttemptCompletionEventsResponse = protocol.getTaskAttemptCompletionEvents(taskAttemptRequest)[ FD ]
Line_27 $$ GetTaskAttemptReportRequest gtarRequest = recordFactory.newRecordInstance(GetTaskAttemptReportRequest.class)-->Line_31 $$ gtarRequest.setTaskAttemptId(taId)[ FD ]
Line_23 $$ Task task = job.getTasks().values().iterator().next()-->Line_24 $$ TaskAttempt attempt = task.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_3 $$ Configuration config = new Configuration()[ CD ]
Line_37 $$ GetTaskReportRequest request = recordFactory.newRecordInstance(GetTaskReportRequest.class)-->Line_41 $$ GetTaskReportResponse reportResponse = protocol.getTaskReport(request)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_50 $$ GetDiagnosticsRequest diagnosticRequest = recordFactory.newRecordInstance(GetDiagnosticsRequest.class)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_25 $$ HistoryClientService historyService = historyServer.getClientService()[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_5 $$ RackResolver.init(config)[ CD ]
Line_46 $$ GetTaskAttemptCompletionEventsRequest taskAttemptRequest = recordFactory.newRecordInstance(GetTaskAttemptCompletionEventsRequest.class)-->Line_48 $$ GetTaskAttemptCompletionEventsResponse taskAttemptCompletionEventsResponse = protocol.getTaskAttemptCompletionEvents(taskAttemptRequest)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_36 $$ assertEquals(taId.toString(), response.getTaskAttemptReport().getTaskAttemptId().toString())[ CD ]
Line_26 $$ MRClientProtocol protocol = historyService.getClientHandler()-->Line_32 $$ GetTaskAttemptReportResponse response = protocol.getTaskAttemptReport(gtarRequest)[ FD ]
Line_50 $$ GetDiagnosticsRequest diagnosticRequest = recordFactory.newRecordInstance(GetDiagnosticsRequest.class)-->Line_52 $$ GetDiagnosticsResponse diagnosticResponse = protocol.getDiagnostics(diagnosticRequest)[ FD ]
Line_41 $$ GetTaskReportResponse reportResponse = protocol.getTaskReport(request)-->Line_45 $$ assertEquals(TaskState.SUCCEEDED, reportResponse.getTaskReport().getTaskState())[ FD ]
Line_14 $$ for (Service service : historyServer.getServices()) -->Line_15 $$ if (service instanceof JobHistory) [ FD ]
Line_16 $$ jobHistory = (JobHistory) service-->Line_20 $$ Map<JobId, Job> jobs = jobHistory.getAllJobs()[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_13 $$ JobHistory jobHistory = null[ CD ]
Line_3 $$ Configuration config = new Configuration()-->Line_5 $$ RackResolver.init(config)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_48 $$ GetTaskAttemptCompletionEventsResponse taskAttemptCompletionEventsResponse = protocol.getTaskAttemptCompletionEvents(taskAttemptRequest)[ CD ]
Line_13 $$ JobHistory jobHistory = null-->Line_16 $$ jobHistory = (JobHistory) service[ FD ]
Line_46 $$ GetTaskAttemptCompletionEventsRequest taskAttemptRequest = recordFactory.newRecordInstance(GetTaskAttemptCompletionEventsRequest.class)-->Line_47 $$ taskAttemptRequest.setJobId(job.getID())[ FD ]
Line_28 $$ TaskAttemptId taId = attempt.getID()-->Line_51 $$ diagnosticRequest.setTaskAttemptId(taId)[ FD ]
Line_3 $$ Configuration config = new Configuration()-->Line_7 $$ app.submit(config)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_40 $$ request.setTaskId(taskId)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_20 $$ Map<JobId, Job> jobs = jobHistory.getAllJobs()[ CD ]
Line_8 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_23 $$ Task task = job.getTasks().values().iterator().next()[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_12 $$ historyServer.start()[ CD ]
Line_41 $$ GetTaskReportResponse reportResponse = protocol.getTaskReport(request)-->Line_43 $$ assertEquals(1.0f, reportResponse.getTaskReport().getProgress(), 0.01)[ FD ]
Line_28 $$ TaskAttemptId taId = attempt.getID()-->Line_31 $$ gtarRequest.setTaskAttemptId(taId)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_8 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ CD ]
Line_28 $$ TaskAttemptId taId = attempt.getID()-->Line_30 $$ taId.getTaskId().setJobId(job.getID())[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_43 $$ assertEquals(1.0f, reportResponse.getTaskReport().getProgress(), 0.01)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_23 $$ Task task = job.getTasks().values().iterator().next()[ CD ]
Line_6 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_7 $$ app.submit(config)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_29 $$ taId.setTaskId(task.getID())[ CD ]
Line_20 $$ Map<JobId, Job> jobs = jobHistory.getAllJobs()-->Line_21 $$ assertEquals(1, jobs.size())[ FD ]
Line_48 $$ GetTaskAttemptCompletionEventsResponse taskAttemptCompletionEventsResponse = protocol.getTaskAttemptCompletionEvents(taskAttemptRequest)-->Line_49 $$ assertEquals(0, taskAttemptCompletionEventsResponse.getCompletionEventCount())[ FD ]
Line_32 $$ GetTaskAttemptReportResponse response = protocol.getTaskAttemptReport(gtarRequest)-->Line_36 $$ assertEquals(taId.toString(), response.getTaskAttemptReport().getTaskAttemptId().toString())[ FD ]
Line_6 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_8 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_33 $$ assertEquals("container_0_0000_01_000000", response.getTaskAttemptReport().getContainerId().toString())[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_39 $$ taskId.setJobId(job.getID())[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_31 $$ gtarRequest.setTaskAttemptId(taId)[ CD ]
Line_28 $$ TaskAttemptId taId = attempt.getID()-->Line_29 $$ taId.setTaskId(task.getID())[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_22 $$ assertEquals("job_0_0000", jobs.keySet().iterator().next().toString())[ CD ]
Line_41 $$ GetTaskReportResponse reportResponse = protocol.getTaskReport(request)-->Line_44 $$ assertEquals(taskId.toString(), reportResponse.getTaskReport().getTaskId().toString())[ FD ]
Line_3 $$ Configuration config = new Configuration()-->Line_4 $$ config.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_37 $$ GetTaskReportRequest request = recordFactory.newRecordInstance(GetTaskReportRequest.class)[ CD ]
Line_3 $$ Configuration config = new Configuration()-->Line_11 $$ historyServer.init(config)[ FD ]
Line_50 $$ GetDiagnosticsRequest diagnosticRequest = recordFactory.newRecordInstance(GetDiagnosticsRequest.class)-->Line_51 $$ diagnosticRequest.setTaskAttemptId(taId)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_4 $$ config.setClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ CD ]
Line_38 $$ TaskId taskId = task.getID()-->Line_40 $$ request.setTaskId(taskId)[ FD ]
Line_24 $$ TaskAttempt attempt = task.getAttempts().values().iterator().next()-->Line_28 $$ TaskAttemptId taId = attempt.getID()[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_21 $$ assertEquals(1, jobs.size())[ CD ]
Line_13 $$ JobHistory jobHistory = null-->Line_20 $$ Map<JobId, Job> jobs = jobHistory.getAllJobs()[ FD ]
Line_23 $$ Task task = job.getTasks().values().iterator().next()-->Line_29 $$ taId.setTaskId(task.getID())[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_42 $$ assertEquals("", reportResponse.getTaskReport().getDiagnosticsList().iterator().next())[ CD ]
Line_32 $$ GetTaskAttemptReportResponse response = protocol.getTaskAttemptReport(gtarRequest)-->Line_34 $$ assertTrue(response.getTaskAttemptReport().getDiagnosticInfo().isEmpty())[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_41 $$ GetTaskReportResponse reportResponse = protocol.getTaskReport(request)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_24 $$ TaskAttempt attempt = task.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_46 $$ GetTaskAttemptCompletionEventsRequest taskAttemptRequest = recordFactory.newRecordInstance(GetTaskAttemptCompletionEventsRequest.class)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_7 $$ app.submit(config)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_27 $$ GetTaskAttemptReportRequest gtarRequest = recordFactory.newRecordInstance(GetTaskAttemptReportRequest.class)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_44 $$ assertEquals(taskId.toString(), reportResponse.getTaskReport().getTaskId().toString())[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_54 $$ assertEquals("", diagnosticResponse.getDiagnostics(0))[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_38 $$ TaskId taskId = task.getID()[ CD ]
Line_15 $$ if (service instanceof JobHistory) -->Line_16 $$ jobHistory = (JobHistory) service[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_26 $$ MRClientProtocol protocol = historyService.getClientHandler()[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_52 $$ GetDiagnosticsResponse diagnosticResponse = protocol.getDiagnostics(diagnosticRequest)[ CD ]
Line_52 $$ GetDiagnosticsResponse diagnosticResponse = protocol.getDiagnostics(diagnosticRequest)-->Line_53 $$ assertEquals(1, diagnosticResponse.getDiagnosticsCount())[ FD ]
Line_52 $$ GetDiagnosticsResponse diagnosticResponse = protocol.getDiagnostics(diagnosticRequest)-->Line_54 $$ assertEquals("", diagnosticResponse.getDiagnostics(0))[ FD ]
Line_25 $$ HistoryClientService historyService = historyServer.getClientService()-->Line_26 $$ MRClientProtocol protocol = historyService.getClientHandler()[ FD ]
Line_26 $$ MRClientProtocol protocol = historyService.getClientHandler()-->Line_52 $$ GetDiagnosticsResponse diagnosticResponse = protocol.getDiagnostics(diagnosticRequest)[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_34 $$ assertTrue(response.getTaskAttemptReport().getDiagnosticInfo().isEmpty())[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_53 $$ assertEquals(1, diagnosticResponse.getDiagnosticsCount())[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_11 $$ historyServer.init(config)[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_49 $$ assertEquals(0, taskAttemptCompletionEventsResponse.getCompletionEventCount())[ CD ]
Line_32 $$ GetTaskAttemptReportResponse response = protocol.getTaskAttemptReport(gtarRequest)-->Line_33 $$ assertEquals("container_0_0000_01_000000", response.getTaskAttemptReport().getContainerId().toString())[ FD ]
Line_8 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_47 $$ taskAttemptRequest.setJobId(job.getID())[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_30 $$ taId.getTaskId().setJobId(job.getID())[ CD ]
Line_41 $$ GetTaskReportResponse reportResponse = protocol.getTaskReport(request)-->Line_42 $$ assertEquals("", reportResponse.getTaskReport().getDiagnosticsList().iterator().next())[ FD ]
Line_28 $$ TaskAttemptId taId = attempt.getID()-->Line_36 $$ assertEquals(taId.toString(), response.getTaskAttemptReport().getTaskAttemptId().toString())[ FD ]
Line_2 $$ public void testReports() throws Exception -->Line_47 $$ taskAttemptRequest.setJobId(job.getID())[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_28 $$ TaskAttemptId taId = attempt.getID()[ CD ]
Line_2 $$ public void testReports() throws Exception -->Line_6 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)[ CD ]
Line_37 $$ GetTaskReportRequest request = recordFactory.newRecordInstance(GetTaskReportRequest.class)-->Line_40 $$ request.setTaskId(taskId)[ FD ]
Line_26 $$ MRClientProtocol protocol = historyService.getClientHandler()-->Line_41 $$ GetTaskReportResponse reportResponse = protocol.getTaskReport(request)[ FD ]
