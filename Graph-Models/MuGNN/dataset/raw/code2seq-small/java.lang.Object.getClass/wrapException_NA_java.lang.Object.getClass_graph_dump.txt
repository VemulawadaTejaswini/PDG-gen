Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_12 $$ if (foreignException) [ CD ]
Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_13 $$ final RuntimeException wrapper = new RuntimeException(ex.toString())[ FD ]
Line_13 $$ final RuntimeException wrapper = new RuntimeException(ex.toString())-->Line_14 $$ wrapper.setStackTrace(ex.getStackTrace())[ FD ]
Line_12 $$ if (foreignException) -->Line_14 $$ wrapper.setStackTrace(ex.getStackTrace())[ CD ]
Line_5 $$ while (each != null) -->Line_10 $$ each = each.getCause()[ CD ]
Line_10 $$ each = each.getCause()-->Line_5 $$ while (each != null) [ FD ]
Line_5 $$ while (each != null) -->Line_6 $$ if (!each.getClass().getName().startsWith("java.") && !isKnownException(each)) [ CD ]
Line_3 $$ boolean foreignException = false-->Line_7 $$ foreignException = true[ FD ]
Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_5 $$ while (each != null) [ CD ]
Line_13 $$ final RuntimeException wrapper = new RuntimeException(ex.toString())-->Line_15 $$ wrapper.initCause(wrapException(ex.getCause()))[ FD ]
Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_4 $$ Throwable each = ex[ CD ]
Line_4 $$ Throwable each = ex-->Line_10 $$ each = each.getCause()[ FD ]
Line_10 $$ each = each.getCause()-->Line_6 $$ if (!each.getClass().getName().startsWith("java.") && !isKnownException(each)) [ FD ]
Line_6 $$ if (!each.getClass().getName().startsWith("java.") && !isKnownException(each)) -->Line_7 $$ foreignException = true[ CD ]
Line_13 $$ final RuntimeException wrapper = new RuntimeException(ex.toString())-->Line_16 $$ ex = wrapper[ FD ]
Line_12 $$ if (foreignException) -->Line_15 $$ wrapper.initCause(wrapException(ex.getCause()))[ CD ]
Line_4 $$ Throwable each = ex-->Line_5 $$ while (each != null) [ FD ]
Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_15 $$ wrapper.initCause(wrapException(ex.getCause()))[ FD ]
Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_18 $$ return ex[ CD ]
Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_14 $$ wrapper.setStackTrace(ex.getStackTrace())[ FD ]
Line_4 $$ Throwable each = ex-->Line_6 $$ if (!each.getClass().getName().startsWith("java.") && !isKnownException(each)) [ FD ]
Line_12 $$ if (foreignException) -->Line_13 $$ final RuntimeException wrapper = new RuntimeException(ex.toString())[ CD ]
Line_12 $$ if (foreignException) -->Line_16 $$ ex = wrapper[ CD ]
Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_16 $$ ex = wrapper[ FD ]
Line_2 $$ public Throwable wrapException(Throwable ex) -->Line_3 $$ boolean foreignException = false[ CD ]
