Line_6 $$ if (source instanceof BackgroundOperatingDiffElement) -->Line_7 $$ final Ref<String> errorMessage = new Ref<String>()[ CD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement) -->Line_28 $$ final AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(getClass())[ CD ]
Line_13 $$ DiffElement newElement = diff.get()-->Line_19 $$ refreshElementAfterCopyTo(newElement, element)[ FD ]
Line_12 $$ if (!myDisposed) -->Line_13 $$ DiffElement newElement = diff.get()[ CD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_3 $$ final DiffElement<?> source = element.getSource()[ CD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_15 $$ final int row = myElements.indexOf(element)[ FD ]
Line_3 $$ final DiffElement<?> source = element.getSource()-->Line_30 $$ final DiffElement<?> diffElement = source.copyTo(myTrg, path)[ FD ]
Line_4 $$ if (source != null) -->Line_5 $$ final String path = element.getParentNode().getPath()[ CD ]
Line_5 $$ final String path = element.getParentNode().getPath()-->Line_26 $$ ((BackgroundOperatingDiffElement) source).copyTo(myTrg, errorMessage, diff, onFinish, element.getTarget(), path)[ FD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_16 $$ element.updateTargetData()[ FD ]
Line_8 $$ final Ref<DiffElement> diff = new Ref<DiffElement>()-->Line_13 $$ DiffElement newElement = diff.get()[ FD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_14 $$ if (newElement == null && element.getTarget() != null) [ FD ]
Line_9 $$ Runnable onFinish = new Runnable() -->Line_12 $$ if (!myDisposed) [ CD ]
Line_4 $$ if (source != null) -->Line_6 $$ if (source instanceof BackgroundOperatingDiffElement) [ CD ]
Line_9 $$ Runnable onFinish = new Runnable() -->Line_26 $$ ((BackgroundOperatingDiffElement) source).copyTo(myTrg, errorMessage, diff, onFinish, element.getTarget(), path)[ FD ]
Line_3 $$ final DiffElement<?> source = element.getSource()-->Line_6 $$ if (source instanceof BackgroundOperatingDiffElement) [ FD ]
Line_12 $$ if (!myDisposed) -->Line_19 $$ refreshElementAfterCopyTo(newElement, element)[ CD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_19 $$ refreshElementAfterCopyTo(newElement, element)[ FD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_3 $$ final DiffElement<?> source = element.getSource()[ FD ]
Line_12 $$ if (!myDisposed) -->Line_20 $$ if (!errorMessage.isNull()) [ CD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement) -->Line_9 $$ Runnable onFinish = new Runnable() [ CD ]
Line_9 $$ Runnable onFinish = new Runnable() -->Line_11 $$ ApplicationManager.getApplication().assertIsDispatchThread()[ CD ]
Line_12 $$ if (!myDisposed) -->Line_14 $$ if (newElement == null && element.getTarget() != null) [ CD ]
Line_7 $$ final Ref<String> errorMessage = new Ref<String>()-->Line_26 $$ ((BackgroundOperatingDiffElement) source).copyTo(myTrg, errorMessage, diff, onFinish, element.getTarget(), path)[ FD ]
Line_15 $$ final int row = myElements.indexOf(element)-->Line_17 $$ fireTableRowsUpdated(row, row)[ FD ]
Line_14 $$ if (newElement == null && element.getTarget() != null) -->Line_16 $$ element.updateTargetData()[ CD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_5 $$ final String path = element.getParentNode().getPath()[ FD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_26 $$ ((BackgroundOperatingDiffElement) source).copyTo(myTrg, errorMessage, diff, onFinish, element.getTarget(), path)[ FD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement) -->Line_26 $$ ((BackgroundOperatingDiffElement) source).copyTo(myTrg, errorMessage, diff, onFinish, element.getTarget(), path)[ CD ]
Line_7 $$ final Ref<String> errorMessage = new Ref<String>()-->Line_21 $$ reportException(errorMessage.get())[ FD ]
Line_20 $$ if (!errorMessage.isNull()) -->Line_21 $$ reportException(errorMessage.get())[ CD ]
Line_3 $$ final DiffElement<?> source = element.getSource()-->Line_4 $$ if (source != null) [ FD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_4 $$ if (source != null) [ CD ]
Line_5 $$ final String path = element.getParentNode().getPath()-->Line_30 $$ final DiffElement<?> diffElement = source.copyTo(myTrg, path)[ FD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement) -->Line_8 $$ final Ref<DiffElement> diff = new Ref<DiffElement>()[ CD ]
Line_2 $$ public void performCopyTo(final DirDiffElementImpl element) -->Line_31 $$ refreshElementAfterCopyTo(diffElement, element)[ FD ]
Line_7 $$ final Ref<String> errorMessage = new Ref<String>()-->Line_20 $$ if (!errorMessage.isNull()) [ FD ]
Line_8 $$ final Ref<DiffElement> diff = new Ref<DiffElement>()-->Line_26 $$ ((BackgroundOperatingDiffElement) source).copyTo(myTrg, errorMessage, diff, onFinish, element.getTarget(), path)[ FD ]
Line_14 $$ if (newElement == null && element.getTarget() != null) -->Line_17 $$ fireTableRowsUpdated(row, row)[ CD ]
Line_14 $$ if (newElement == null && element.getTarget() != null) -->Line_15 $$ final int row = myElements.indexOf(element)[ CD ]
