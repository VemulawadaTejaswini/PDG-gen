Line_2 $$ public void testToConstantsBean() throws Exception -->Line_19 $$ Assert.assertSame(constantsBean1, constantsBeanImpl.getConstantsBean(constantsClass1))[ CD ]
Line_11 $$ ClassLoader classLoader1 = new URLClassLoader(urls, null)-->Line_12 $$ Class<?> constantsClass1 = classLoader1.loadClass(Constants.class.getName())[ FD ]
Line_12 $$ Class<?> constantsClass1 = classLoader1.loadClass(Constants.class.getName())-->Line_19 $$ Assert.assertSame(constantsBean1, constantsBeanImpl.getConstantsBean(constantsClass1))[ FD ]
Line_23 $$ Object constantsBean2 = constantsBeanImpl.getConstantsBean(constantsClass2)-->Line_27 $$ Assert.assertSame(constantsBean2, constantsBeanImpl.getConstantsBean(constantsClass2))[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_22 $$ Class<?> constantsClass2 = classLoader2.loadClass(Constants.class.getName())[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_37 $$ constantsBean2 = null[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_20 $$ Assert.assertEquals(1, constantsBeans.size())[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_29 $$ classLoader1 = null[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_21 $$ ClassLoader classLoader2 = new URLClassLoader(urls, null)[ CD ]
Line_15 $$ Class<?> constantsBeanClass1 = constantsBean1.getClass()-->Line_16 $$ Assert.assertSame(classLoader1, constantsBeanClass1.getClassLoader())[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_23 $$ Object constantsBean2 = constantsBeanImpl.getConstantsBean(constantsClass2)[ CD ]
Line_13 $$ ConstantsBeanFactoryImpl constantsBeanImpl = new ConstantsBeanFactoryImpl()-->Line_14 $$ Object constantsBean1 = constantsBeanImpl.getConstantsBean(constantsClass1)[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_15 $$ Class<?> constantsBeanClass1 = constantsBean1.getClass()[ CD ]
Line_21 $$ ClassLoader classLoader2 = new URLClassLoader(urls, null)-->Line_22 $$ Class<?> constantsClass2 = classLoader2.loadClass(Constants.class.getName())[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_17 $$ Map<Class<?>, ?> constantsBeans = ConstantsBeanFactoryImpl.constantsBeans[ CD ]
Line_11 $$ ClassLoader classLoader1 = new URLClassLoader(urls, null)-->Line_16 $$ Assert.assertSame(classLoader1, constantsBeanClass1.getClassLoader())[ FD ]
Line_17 $$ Map<Class<?>, ?> constantsBeans = ConstantsBeanFactoryImpl.constantsBeans-->Line_28 $$ Assert.assertEquals(2, constantsBeans.size())[ FD ]
Line_13 $$ ConstantsBeanFactoryImpl constantsBeanImpl = new ConstantsBeanFactoryImpl()-->Line_23 $$ Object constantsBean2 = constantsBeanImpl.getConstantsBean(constantsClass2)[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_14 $$ Object constantsBean1 = constantsBeanImpl.getConstantsBean(constantsClass1)[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_16 $$ Assert.assertSame(classLoader1, constantsBeanClass1.getClassLoader())[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_27 $$ Assert.assertSame(constantsBean2, constantsBeanImpl.getConstantsBean(constantsClass2))[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_36 $$ Assert.assertEquals(1, constantsBeans.size())[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_39 $$ ReflectionTestUtil.invoke(FinalizeManager.class, "_pollingCleanup", new Class<?>[0])[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_38 $$ GCUtil.gc(true)[ CD ]
Line_14 $$ Object constantsBean1 = constantsBeanImpl.getConstantsBean(constantsClass1)-->Line_19 $$ Assert.assertSame(constantsBean1, constantsBeanImpl.getConstantsBean(constantsClass1))[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_40 $$ Assert.assertTrue(constantsBeans.isEmpty())[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_12 $$ Class<?> constantsClass1 = classLoader1.loadClass(Constants.class.getName())[ CD ]
Line_23 $$ Object constantsBean2 = constantsBeanImpl.getConstantsBean(constantsClass2)-->Line_37 $$ constantsBean2 = null[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_24 $$ Assert.assertNotSame(constantsBean1, constantsBean2)[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_25 $$ Assert.assertNotSame(constantsBeanClass1, constantsBean2.getClass())[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_11 $$ ClassLoader classLoader1 = new URLClassLoader(urls, null)[ CD ]
Line_23 $$ Object constantsBean2 = constantsBeanImpl.getConstantsBean(constantsClass2)-->Line_35 $$ Assert.assertSame(constantsBean2, constantsBeanImpl.getConstantsBean(constantsClass2))[ FD ]
Line_17 $$ Map<Class<?>, ?> constantsBeans = ConstantsBeanFactoryImpl.constantsBeans-->Line_40 $$ Assert.assertTrue(constantsBeans.isEmpty())[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_18 $$ Assert.assertEquals(1, constantsBeans.size())[ CD ]
Line_17 $$ Map<Class<?>, ?> constantsBeans = ConstantsBeanFactoryImpl.constantsBeans-->Line_20 $$ Assert.assertEquals(1, constantsBeans.size())[ FD ]
Line_5 $$ URL[] urls = null-->Line_7 $$ urls = ClassPathUtil.getClassPathURLs(jvmClassPath)[ FD ]
Line_12 $$ Class<?> constantsClass1 = classLoader1.loadClass(Constants.class.getName())-->Line_30 $$ constantsClass1 = null[ FD ]
Line_14 $$ Object constantsBean1 = constantsBeanImpl.getConstantsBean(constantsClass1)-->Line_24 $$ Assert.assertNotSame(constantsBean1, constantsBean2)[ FD ]
Line_17 $$ Map<Class<?>, ?> constantsBeans = ConstantsBeanFactoryImpl.constantsBeans-->Line_18 $$ Assert.assertEquals(1, constantsBeans.size())[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_5 $$ URL[] urls = null[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_33 $$ GCUtil.gc(true)[ CD ]
Line_4 $$ String jvmClassPath = ClassPathUtil.getJVMClassPath(true)-->Line_7 $$ urls = ClassPathUtil.getClassPathURLs(jvmClassPath)[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_31 $$ constantsBean1 = null[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_13 $$ ConstantsBeanFactoryImpl constantsBeanImpl = new ConstantsBeanFactoryImpl()[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_26 $$ Assert.assertEquals(2, constantsBeans.size())[ CD ]
Line_13 $$ ConstantsBeanFactoryImpl constantsBeanImpl = new ConstantsBeanFactoryImpl()-->Line_27 $$ Assert.assertSame(constantsBean2, constantsBeanImpl.getConstantsBean(constantsClass2))[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_34 $$ ReflectionTestUtil.invoke(FinalizeManager.class, "_pollingCleanup", new Class<?>[0])[ CD ]
Line_22 $$ Class<?> constantsClass2 = classLoader2.loadClass(Constants.class.getName())-->Line_27 $$ Assert.assertSame(constantsBean2, constantsBeanImpl.getConstantsBean(constantsClass2))[ FD ]
Line_17 $$ Map<Class<?>, ?> constantsBeans = ConstantsBeanFactoryImpl.constantsBeans-->Line_26 $$ Assert.assertEquals(2, constantsBeans.size())[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_32 $$ constantsBeanClass1 = null[ CD ]
Line_22 $$ Class<?> constantsClass2 = classLoader2.loadClass(Constants.class.getName())-->Line_23 $$ Object constantsBean2 = constantsBeanImpl.getConstantsBean(constantsClass2)[ FD ]
Line_11 $$ ClassLoader classLoader1 = new URLClassLoader(urls, null)-->Line_29 $$ classLoader1 = null[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_4 $$ String jvmClassPath = ClassPathUtil.getJVMClassPath(true)[ CD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_28 $$ Assert.assertEquals(2, constantsBeans.size())[ CD ]
Line_14 $$ Object constantsBean1 = constantsBeanImpl.getConstantsBean(constantsClass1)-->Line_31 $$ constantsBean1 = null[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_35 $$ Assert.assertSame(constantsBean2, constantsBeanImpl.getConstantsBean(constantsClass2))[ CD ]
Line_14 $$ Object constantsBean1 = constantsBeanImpl.getConstantsBean(constantsClass1)-->Line_15 $$ Class<?> constantsBeanClass1 = constantsBean1.getClass()[ FD ]
Line_15 $$ Class<?> constantsBeanClass1 = constantsBean1.getClass()-->Line_25 $$ Assert.assertNotSame(constantsBeanClass1, constantsBean2.getClass())[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_3 $$ System.setProperty(FinalizeManager.class.getName() + ".thread.enabled", StringPool.FALSE)[ CD ]
Line_23 $$ Object constantsBean2 = constantsBeanImpl.getConstantsBean(constantsClass2)-->Line_25 $$ Assert.assertNotSame(constantsBeanClass1, constantsBean2.getClass())[ FD ]
Line_13 $$ ConstantsBeanFactoryImpl constantsBeanImpl = new ConstantsBeanFactoryImpl()-->Line_35 $$ Assert.assertSame(constantsBean2, constantsBeanImpl.getConstantsBean(constantsClass2))[ FD ]
Line_15 $$ Class<?> constantsBeanClass1 = constantsBean1.getClass()-->Line_32 $$ constantsBeanClass1 = null[ FD ]
Line_13 $$ ConstantsBeanFactoryImpl constantsBeanImpl = new ConstantsBeanFactoryImpl()-->Line_19 $$ Assert.assertSame(constantsBean1, constantsBeanImpl.getConstantsBean(constantsClass1))[ FD ]
Line_23 $$ Object constantsBean2 = constantsBeanImpl.getConstantsBean(constantsClass2)-->Line_24 $$ Assert.assertNotSame(constantsBean1, constantsBean2)[ FD ]
Line_17 $$ Map<Class<?>, ?> constantsBeans = ConstantsBeanFactoryImpl.constantsBeans-->Line_36 $$ Assert.assertEquals(1, constantsBeans.size())[ FD ]
Line_12 $$ Class<?> constantsClass1 = classLoader1.loadClass(Constants.class.getName())-->Line_14 $$ Object constantsBean1 = constantsBeanImpl.getConstantsBean(constantsClass1)[ FD ]
Line_2 $$ public void testToConstantsBean() throws Exception -->Line_30 $$ constantsClass1 = null[ CD ]
Line_22 $$ Class<?> constantsClass2 = classLoader2.loadClass(Constants.class.getName())-->Line_35 $$ Assert.assertSame(constantsBean2, constantsBeanImpl.getConstantsBean(constantsClass2))[ FD ]
