Line_2 $$ public List<OptionDescriptor> getOptions(Object target) -->Line_3 $$ final Class<?> targetClass = target.getClass()[ FD ]
Line_3 $$ final Class<?> targetClass = target.getClass()-->Line_5 $$ if (!cachedOptionElements.containsKey(targetClass)) [ FD ]
Line_2 $$ public List<OptionDescriptor> getOptions(Object target) -->Line_6 $$ loadClassDescriptorInCache(target)[ FD ]
Line_2 $$ public List<OptionDescriptor> getOptions(Object target) -->Line_12 $$ return CollectionUtils.sort(options.values())[ CD ]
Line_2 $$ public List<OptionDescriptor> getOptions(Object target) -->Line_3 $$ final Class<?> targetClass = target.getClass()[ CD ]
Line_3 $$ final Class<?> targetClass = target.getClass()-->Line_8 $$ for (OptionElement optionElement : cachedOptionElements.get(targetClass)) [ FD ]
Line_2 $$ public List<OptionDescriptor> getOptions(Object target) -->Line_4 $$ Map<String, OptionDescriptor> options = new HashMap<String, OptionDescriptor>()[ CD ]
Line_8 $$ for (OptionElement optionElement : cachedOptionElements.get(targetClass)) -->Line_10 $$ options.put(optionElement.getOptionName(), new InstanceOptionDescriptor(target, optionElement, optionValueMethod))[ FD ]
Line_4 $$ Map<String, OptionDescriptor> options = new HashMap<String, OptionDescriptor>()-->Line_10 $$ options.put(optionElement.getOptionName(), new InstanceOptionDescriptor(target, optionElement, optionValueMethod))[ FD ]
Line_4 $$ Map<String, OptionDescriptor> options = new HashMap<String, OptionDescriptor>()-->Line_12 $$ return CollectionUtils.sort(options.values())[ FD ]
Line_5 $$ if (!cachedOptionElements.containsKey(targetClass)) -->Line_6 $$ loadClassDescriptorInCache(target)[ CD ]
Line_8 $$ for (OptionElement optionElement : cachedOptionElements.get(targetClass)) -->Line_9 $$ JavaMethod<Object, Collection> optionValueMethod = cachedOptionValueMethods.get(optionElement)[ FD ]
Line_2 $$ public List<OptionDescriptor> getOptions(Object target) -->Line_5 $$ if (!cachedOptionElements.containsKey(targetClass)) [ CD ]
