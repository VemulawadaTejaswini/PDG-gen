Line_3 $$ GenericXmlApplicationContext context = new GenericXmlApplicationContext()-->Line_6 $$ ITestBean testBean = context.getBean("target", ITestBean.class)[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_5 $$ context.refresh()[ CD ]
Line_6 $$ ITestBean testBean = context.getBean("target", ITestBean.class)-->Line_13 $$ testBean.failWithVoid()[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_17 $$ context.close()[ CD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_8 $$ testBean.await(3000)[ CD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_15 $$ Method m = ReflectionUtils.findMethod(TestBean.class, "failWithVoid")[ CD ]
Line_11 $$ TestableAsyncUncaughtExceptionHandler exceptionHandler = context.getBean("exceptionHandler", TestableAsyncUncaughtExceptionHandler.class)-->Line_16 $$ exceptionHandler.assertCalledWith(m, UnsupportedOperationException.class)[ FD ]
Line_3 $$ GenericXmlApplicationContext context = new GenericXmlApplicationContext()-->Line_11 $$ TestableAsyncUncaughtExceptionHandler exceptionHandler = context.getBean("exceptionHandler", TestableAsyncUncaughtExceptionHandler.class)[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_13 $$ testBean.failWithVoid()[ CD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_12 $$ assertFalse("handler should not have been called yet", exceptionHandler.isCalled())[ CD ]
Line_11 $$ TestableAsyncUncaughtExceptionHandler exceptionHandler = context.getBean("exceptionHandler", TestableAsyncUncaughtExceptionHandler.class)-->Line_12 $$ assertFalse("handler should not have been called yet", exceptionHandler.isCalled())[ FD ]
Line_11 $$ TestableAsyncUncaughtExceptionHandler exceptionHandler = context.getBean("exceptionHandler", TestableAsyncUncaughtExceptionHandler.class)-->Line_14 $$ exceptionHandler.await(3000)[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_4 $$ context.load(new ClassPathResource("taskNamespaceTests.xml", getClass()))[ CD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_7 $$ testBean.test()[ CD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_16 $$ exceptionHandler.assertCalledWith(m, UnsupportedOperationException.class)[ CD ]
Line_6 $$ ITestBean testBean = context.getBean("target", ITestBean.class)-->Line_8 $$ testBean.await(3000)[ FD ]
Line_15 $$ Method m = ReflectionUtils.findMethod(TestBean.class, "failWithVoid")-->Line_16 $$ exceptionHandler.assertCalledWith(m, UnsupportedOperationException.class)[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_3 $$ GenericXmlApplicationContext context = new GenericXmlApplicationContext()[ CD ]
Line_6 $$ ITestBean testBean = context.getBean("target", ITestBean.class)-->Line_7 $$ testBean.test()[ FD ]
Line_9 $$ Thread asyncThread = testBean.getThread()-->Line_10 $$ assertTrue(asyncThread.getName().startsWith("testExecutor"))[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_14 $$ exceptionHandler.await(3000)[ CD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_11 $$ TestableAsyncUncaughtExceptionHandler exceptionHandler = context.getBean("exceptionHandler", TestableAsyncUncaughtExceptionHandler.class)[ CD ]
Line_3 $$ GenericXmlApplicationContext context = new GenericXmlApplicationContext()-->Line_17 $$ context.close()[ FD ]
Line_3 $$ GenericXmlApplicationContext context = new GenericXmlApplicationContext()-->Line_4 $$ context.load(new ClassPathResource("taskNamespaceTests.xml", getClass()))[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_10 $$ assertTrue(asyncThread.getName().startsWith("testExecutor"))[ CD ]
Line_3 $$ GenericXmlApplicationContext context = new GenericXmlApplicationContext()-->Line_5 $$ context.refresh()[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_6 $$ ITestBean testBean = context.getBean("target", ITestBean.class)[ CD ]
Line_6 $$ ITestBean testBean = context.getBean("target", ITestBean.class)-->Line_9 $$ Thread asyncThread = testBean.getThread()[ FD ]
Line_2 $$ public void configuredThroughNamespace() -->Line_9 $$ Thread asyncThread = testBean.getThread()[ CD ]
