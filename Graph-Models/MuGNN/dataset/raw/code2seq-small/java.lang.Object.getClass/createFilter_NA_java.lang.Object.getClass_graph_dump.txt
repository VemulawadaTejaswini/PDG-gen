Line_2 $$ public void createFilter() throws Exception -->Line_7 $$ List<ResourceResolver> resolvers = Arrays.asList(versionResolver, pathResolver)[ CD ]
Line_3 $$ VersionResourceResolver versionResolver = new VersionResourceResolver()-->Line_7 $$ List<ResourceResolver> resolvers = Arrays.asList(versionResolver, pathResolver)[ FD ]
Line_2 $$ public void createFilter() throws Exception -->Line_9 $$ this.resourceUrlProvider = createResourceUrlProvider(resolvers)[ CD ]
Line_5 $$ PathResourceResolver pathResolver = new PathResourceResolver()-->Line_7 $$ List<ResourceResolver> resolvers = Arrays.asList(versionResolver, pathResolver)[ FD ]
Line_7 $$ List<ResourceResolver> resolvers = Arrays.asList(versionResolver, pathResolver)-->Line_9 $$ this.resourceUrlProvider = createResourceUrlProvider(resolvers)[ FD ]
Line_3 $$ VersionResourceResolver versionResolver = new VersionResourceResolver()-->Line_4 $$ versionResolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()))[ FD ]
Line_5 $$ PathResourceResolver pathResolver = new PathResourceResolver()-->Line_6 $$ pathResolver.setAllowedLocations(new ClassPathResource("test/", getClass()))[ FD ]
Line_2 $$ public void createFilter() throws Exception -->Line_4 $$ versionResolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()))[ CD ]
Line_2 $$ public void createFilter() throws Exception -->Line_6 $$ pathResolver.setAllowedLocations(new ClassPathResource("test/", getClass()))[ CD ]
Line_2 $$ public void createFilter() throws Exception -->Line_8 $$ this.filter = new ResourceUrlEncodingFilter()[ CD ]
Line_2 $$ public void createFilter() throws Exception -->Line_3 $$ VersionResourceResolver versionResolver = new VersionResourceResolver()[ CD ]
Line_2 $$ public void createFilter() throws Exception -->Line_5 $$ PathResourceResolver pathResolver = new PathResourceResolver()[ CD ]
