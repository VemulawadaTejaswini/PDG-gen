Line_3 $$ Method method = ReflectionUtils.findMethod(getClass(), "toString")-->Line_6 $$ expressionEvaluator.getTestExpression("true", method, getClass())[ FD ]
Line_2 $$ public void cacheExpression() -->Line_6 $$ expressionEvaluator.getTestExpression("true", method, getClass())[ CD ]
Line_2 $$ public void cacheExpression() -->Line_8 $$ assertEquals("Only one expression should be in cache", 1, expressionEvaluator.testCache.size())[ CD ]
Line_2 $$ public void cacheExpression() -->Line_3 $$ Method method = ReflectionUtils.findMethod(getClass(), "toString")[ CD ]
Line_3 $$ Method method = ReflectionUtils.findMethod(getClass(), "toString")-->Line_4 $$ expressionEvaluator.getTestExpression("true", method, getClass())[ FD ]
Line_2 $$ public void cacheExpression() -->Line_4 $$ expressionEvaluator.getTestExpression("true", method, getClass())[ CD ]
Line_2 $$ public void cacheExpression() -->Line_5 $$ expressionEvaluator.getTestExpression("true", method, getClass())[ CD ]
Line_3 $$ Method method = ReflectionUtils.findMethod(getClass(), "toString")-->Line_5 $$ expressionEvaluator.getTestExpression("true", method, getClass())[ FD ]
Line_2 $$ public void cacheExpression() -->Line_7 $$ hasParsedExpression("true")[ CD ]
