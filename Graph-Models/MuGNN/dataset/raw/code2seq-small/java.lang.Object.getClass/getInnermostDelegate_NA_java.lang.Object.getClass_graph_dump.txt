Line_9 $$ classToAnalyze = classToAnalyze.getSuperclass()-->Line_14 $$ Method getInnermostDelegate = classToAnalyze.getMethod(GET_INNERMOST_DELEGATE_METHOD_NAME, (Class[]) null)[ FD ]
Line_3 $$ if (obj == null) -->Line_4 $$ return null[ CD ]
Line_7 $$ Class<?> classToAnalyze = obj.getClass()-->Line_9 $$ classToAnalyze = classToAnalyze.getSuperclass()[ FD ]
Line_2 $$ private static Object getInnermostDelegate(Object obj) throws SQLException -->Line_15 $$ Object delegate = ReflectionUtils.invokeJdbcMethod(getInnermostDelegate, obj)[ FD ]
Line_10 $$ if (classToAnalyze == null) -->Line_11 $$ return obj[ CD ]
Line_8 $$ while (!Modifier.isPublic(classToAnalyze.getModifiers())) -->Line_10 $$ if (classToAnalyze == null) [ CD ]
Line_7 $$ Class<?> classToAnalyze = obj.getClass()-->Line_10 $$ if (classToAnalyze == null) [ FD ]
Line_8 $$ while (!Modifier.isPublic(classToAnalyze.getModifiers())) -->Line_9 $$ classToAnalyze = classToAnalyze.getSuperclass()[ CD ]
Line_7 $$ Class<?> classToAnalyze = obj.getClass()-->Line_8 $$ while (!Modifier.isPublic(classToAnalyze.getModifiers())) [ FD ]
Line_7 $$ Class<?> classToAnalyze = obj.getClass()-->Line_14 $$ Method getInnermostDelegate = classToAnalyze.getMethod(GET_INNERMOST_DELEGATE_METHOD_NAME, (Class[]) null)[ FD ]
Line_14 $$ Method getInnermostDelegate = classToAnalyze.getMethod(GET_INNERMOST_DELEGATE_METHOD_NAME, (Class[]) null)-->Line_15 $$ Object delegate = ReflectionUtils.invokeJdbcMethod(getInnermostDelegate, obj)[ FD ]
Line_9 $$ classToAnalyze = classToAnalyze.getSuperclass()-->Line_10 $$ if (classToAnalyze == null) [ FD ]
Line_2 $$ private static Object getInnermostDelegate(Object obj) throws SQLException -->Line_3 $$ if (obj == null) [ FD ]
Line_2 $$ private static Object getInnermostDelegate(Object obj) throws SQLException -->Line_3 $$ if (obj == null) [ CD ]
Line_2 $$ private static Object getInnermostDelegate(Object obj) throws SQLException -->Line_7 $$ Class<?> classToAnalyze = obj.getClass()[ FD ]
Line_9 $$ classToAnalyze = classToAnalyze.getSuperclass()-->Line_8 $$ while (!Modifier.isPublic(classToAnalyze.getModifiers())) [ FD ]
