Line_7 $$ ObjectNode<T> objectNode = getNode(object)-->Line_13 $$ final Throwable trace = objectNode.getTrace()[ FD ]
Line_4 $$ for (T object : myRootObjects) -->Line_7 $$ ObjectNode<T> objectNode = getNode(object)[ FD ]
Line_10 $$ while (objectNode.getParent() != null) -->Line_11 $$ objectNode = objectNode.getParent()[ CD ]
Line_7 $$ ObjectNode<T> objectNode = getNode(object)-->Line_11 $$ objectNode = objectNode.getParent()[ FD ]
Line_7 $$ ObjectNode<T> objectNode = getNode(object)-->Line_8 $$ if (objectNode == null)[ FD ]
Line_4 $$ for (T object : myRootObjects) -->Line_14 $$ RuntimeException exception = new RuntimeException("Memory leak detected: '" + object + "' of " + object.getClass() + "\nSee the cause for the corresponding Disposer.register() stacktrace:\n", trace)[ FD ]
Line_4 $$ for (T object : myRootObjects) -->Line_5 $$ if (object == null)[ FD ]
Line_7 $$ ObjectNode<T> objectNode = getNode(object)-->Line_10 $$ while (objectNode.getParent() != null) [ FD ]
Line_14 $$ RuntimeException exception = new RuntimeException("Memory leak detected: '" + object + "' of " + object.getClass() + "\nSee the cause for the corresponding Disposer.register() stacktrace:\n", trace)-->Line_18 $$ LOG.error(exception)[ FD ]
Line_11 $$ objectNode = objectNode.getParent()-->Line_13 $$ final Throwable trace = objectNode.getTrace()[ FD ]
Line_11 $$ objectNode = objectNode.getParent()-->Line_10 $$ while (objectNode.getParent() != null) [ FD ]
