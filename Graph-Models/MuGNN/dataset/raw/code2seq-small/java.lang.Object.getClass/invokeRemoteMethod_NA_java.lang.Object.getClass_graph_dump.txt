Line_2 $$ public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) throws InvocationTargetException -->Line_3 $$ Method method = invocation.getMethod()[ CD ]
Line_5 $$ if (method.getDeclaringClass().isInstance(stub)) -->Line_6 $$ return method.invoke(stub, invocation.getArguments())[ CD ]
Line_5 $$ if (method.getDeclaringClass().isInstance(stub)) -->Line_9 $$ return stubMethod.invoke(stub, invocation.getArguments())[ CD ]
Line_2 $$ public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) throws InvocationTargetException -->Line_3 $$ Method method = invocation.getMethod()[ FD ]
Line_5 $$ if (method.getDeclaringClass().isInstance(stub)) -->Line_8 $$ Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())[ CD ]
Line_8 $$ Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())-->Line_9 $$ return stubMethod.invoke(stub, invocation.getArguments())[ FD ]
Line_2 $$ public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) throws InvocationTargetException -->Line_5 $$ if (method.getDeclaringClass().isInstance(stub)) [ FD ]
Line_3 $$ Method method = invocation.getMethod()-->Line_6 $$ return method.invoke(stub, invocation.getArguments())[ FD ]
Line_2 $$ public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) throws InvocationTargetException -->Line_6 $$ return method.invoke(stub, invocation.getArguments())[ FD ]
Line_3 $$ Method method = invocation.getMethod()-->Line_5 $$ if (method.getDeclaringClass().isInstance(stub)) [ FD ]
Line_3 $$ Method method = invocation.getMethod()-->Line_8 $$ Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())[ FD ]
Line_2 $$ public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) throws InvocationTargetException -->Line_9 $$ return stubMethod.invoke(stub, invocation.getArguments())[ FD ]
Line_2 $$ public static Object invokeRemoteMethod(MethodInvocation invocation, Object stub) throws InvocationTargetException -->Line_8 $$ Method stubMethod = stub.getClass().getMethod(method.getName(), method.getParameterTypes())[ FD ]
