Line_2 $$ public void bestMatchWildcard() throws Exception -->Line_3 $$ Method method = this.testController.getClass().getMethod("bestMatch")[ CD ]
Line_2 $$ public void bestMatchWildcard() throws Exception -->Line_8 $$ assertEquals("bestMatch", this.testController.method)[ CD ]
Line_2 $$ public void bestMatchWildcard() throws Exception -->Line_7 $$ this.messageHandler.handleMessage(toDestination("/test/bestmatch/bar/path"))[ CD ]
Line_3 $$ Method method = this.testController.getClass().getMethod("bestMatch")-->Line_6 $$ this.messageHandler.registerHandlerMethod(this.testController, method, "/bestmatch/*/*")[ FD ]
Line_3 $$ Method method = this.testController.getClass().getMethod("bestMatch")-->Line_4 $$ this.messageHandler.registerHandlerMethod(this.testController, method, "/bestmatch/[ FD ]
Line_3 $$ Method method = this.testController.getClass().getMethod("bestMatch")-->Line_5 $$ method = this.testController.getClass().getMethod("secondBestMatch")[ FD ]
Line_2 $$ public void bestMatchWildcard() throws Exception -->Line_6 $$ this.messageHandler.registerHandlerMethod(this.testController, method, "/bestmatch/*/*")[ CD ]
Line_5 $$ method = this.testController.getClass().getMethod("secondBestMatch")-->Line_6 $$ this.messageHandler.registerHandlerMethod(this.testController, method, "/bestmatch/*/*")[ FD ]
Line_2 $$ public void bestMatchWildcard() throws Exception -->Line_5 $$ method = this.testController.getClass().getMethod("secondBestMatch")[ CD ]
Line_2 $$ public void bestMatchWildcard() throws Exception -->Line_4 $$ this.messageHandler.registerHandlerMethod(this.testController, method, "/bestmatch/[ CD ]
