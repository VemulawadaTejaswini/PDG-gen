Line_10 $$ ResponseEntity<?> responseEntity = (ResponseEntity<?>) returnValue-->Line_11 $$ outputMessage.setStatusCode(responseEntity.getStatusCode())[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_8 $$ ServerHttpResponse outputMessage = new ServletServerHttpResponse(response)[ CD ]
Line_29 $$ HttpMessageConvertingHandler handler = new HttpMessageConvertingHandler(outputMessage, deferredResult)-->Line_30 $$ emitter.initialize(handler)[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_21 $$ Assert.isInstanceOf(ResponseBodyEmitter.class, returnValue)[ CD ]
Line_10 $$ ResponseEntity<?> responseEntity = (ResponseEntity<?>) returnValue-->Line_13 $$ returnValue = responseEntity.getBody()[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_9 $$ if (ResponseEntity.class.isAssignableFrom(returnValue.getClass())) [ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_25 $$ outputMessage.flush()[ CD ]
Line_10 $$ ResponseEntity<?> responseEntity = (ResponseEntity<?>) returnValue-->Line_12 $$ outputMessage.getHeaders().putAll(responseEntity.getHeaders())[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_14 $$ if (returnValue == null) [ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_15 $$ mavContainer.setRequestHandled(true)[ FD ]
Line_27 $$ DeferredResult<?> deferredResult = new DeferredResult<Object>(emitter.getTimeout())-->Line_28 $$ WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(deferredResult, mavContainer)[ FD ]
Line_9 $$ if (ResponseEntity.class.isAssignableFrom(returnValue.getClass())) -->Line_14 $$ if (returnValue == null) [ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_26 $$ outputMessage = new StreamingServletServerHttpResponse(outputMessage)[ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_28 $$ WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(deferredResult, mavContainer)[ CD ]
Line_9 $$ if (ResponseEntity.class.isAssignableFrom(returnValue.getClass())) -->Line_12 $$ outputMessage.getHeaders().putAll(responseEntity.getHeaders())[ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_28 $$ WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(deferredResult, mavContainer)[ FD ]
Line_9 $$ if (ResponseEntity.class.isAssignableFrom(returnValue.getClass())) -->Line_11 $$ outputMessage.setStatusCode(responseEntity.getStatusCode())[ CD ]
Line_13 $$ returnValue = responseEntity.getBody()-->Line_14 $$ if (returnValue == null) [ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_20 $$ ShallowEtagHeaderFilter.disableContentCaching(request)[ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_13 $$ returnValue = responseEntity.getBody()[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_3 $$ if (returnValue == null) [ CD ]
Line_9 $$ if (ResponseEntity.class.isAssignableFrom(returnValue.getClass())) -->Line_10 $$ ResponseEntity<?> responseEntity = (ResponseEntity<?>) returnValue[ CD ]
Line_9 $$ if (ResponseEntity.class.isAssignableFrom(returnValue.getClass())) -->Line_13 $$ returnValue = responseEntity.getBody()[ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_19 $$ ServletRequest request = webRequest.getNativeRequest(ServletRequest.class)[ CD ]
Line_13 $$ returnValue = responseEntity.getBody()-->Line_21 $$ Assert.isInstanceOf(ResponseBodyEmitter.class, returnValue)[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_19 $$ ServletRequest request = webRequest.getNativeRequest(ServletRequest.class)[ FD ]
Line_14 $$ if (returnValue == null) -->Line_16 $$ return[ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_24 $$ outputMessage.getBody()[ CD ]
Line_8 $$ ServerHttpResponse outputMessage = new ServletServerHttpResponse(response)-->Line_11 $$ outputMessage.setStatusCode(responseEntity.getStatusCode())[ FD ]
Line_8 $$ ServerHttpResponse outputMessage = new ServletServerHttpResponse(response)-->Line_25 $$ outputMessage.flush()[ FD ]
Line_3 $$ if (returnValue == null) -->Line_5 $$ return[ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_30 $$ emitter.initialize(handler)[ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_9 $$ if (ResponseEntity.class.isAssignableFrom(returnValue.getClass())) [ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_23 $$ emitter.extendResponse(outputMessage)[ CD ]
Line_22 $$ ResponseBodyEmitter emitter = (ResponseBodyEmitter) returnValue-->Line_27 $$ DeferredResult<?> deferredResult = new DeferredResult<Object>(emitter.getTimeout())[ FD ]
Line_19 $$ ServletRequest request = webRequest.getNativeRequest(ServletRequest.class)-->Line_20 $$ ShallowEtagHeaderFilter.disableContentCaching(request)[ FD ]
Line_8 $$ ServerHttpResponse outputMessage = new ServletServerHttpResponse(response)-->Line_26 $$ outputMessage = new StreamingServletServerHttpResponse(outputMessage)[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_7 $$ HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)[ CD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_7 $$ HttpServletResponse response = webRequest.getNativeResponse(HttpServletResponse.class)[ FD ]
Line_22 $$ ResponseBodyEmitter emitter = (ResponseBodyEmitter) returnValue-->Line_30 $$ emitter.initialize(handler)[ FD ]
Line_8 $$ ServerHttpResponse outputMessage = new ServletServerHttpResponse(response)-->Line_24 $$ outputMessage.getBody()[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_27 $$ DeferredResult<?> deferredResult = new DeferredResult<Object>(emitter.getTimeout())[ CD ]
Line_14 $$ if (returnValue == null) -->Line_15 $$ mavContainer.setRequestHandled(true)[ CD ]
Line_22 $$ ResponseBodyEmitter emitter = (ResponseBodyEmitter) returnValue-->Line_23 $$ emitter.extendResponse(outputMessage)[ FD ]
Line_8 $$ ServerHttpResponse outputMessage = new ServletServerHttpResponse(response)-->Line_12 $$ outputMessage.getHeaders().putAll(responseEntity.getHeaders())[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_4 $$ mavContainer.setRequestHandled(true)[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_21 $$ Assert.isInstanceOf(ResponseBodyEmitter.class, returnValue)[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_29 $$ HttpMessageConvertingHandler handler = new HttpMessageConvertingHandler(outputMessage, deferredResult)[ CD ]
Line_3 $$ if (returnValue == null) -->Line_4 $$ mavContainer.setRequestHandled(true)[ CD ]
Line_8 $$ ServerHttpResponse outputMessage = new ServletServerHttpResponse(response)-->Line_23 $$ emitter.extendResponse(outputMessage)[ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_3 $$ if (returnValue == null) [ FD ]
Line_2 $$ public void handleReturnValue(Object returnValue, MethodParameter returnType, ModelAndViewContainer mavContainer, NativeWebRequest webRequest) throws Exception -->Line_22 $$ ResponseBodyEmitter emitter = (ResponseBodyEmitter) returnValue[ CD ]
