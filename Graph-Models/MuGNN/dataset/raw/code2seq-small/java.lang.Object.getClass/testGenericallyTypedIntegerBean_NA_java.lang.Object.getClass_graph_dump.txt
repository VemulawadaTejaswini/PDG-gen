Line_5 $$ GenericIntegerBean gb = (GenericIntegerBean) bf.getBean("integerBean")-->Line_6 $$ assertEquals(new Integer(10), gb.getGenericProperty())[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_5 $$ GenericIntegerBean gb = (GenericIntegerBean) bf.getBean("integerBean")[ FD ]
Line_2 $$ public void testGenericallyTypedIntegerBean() throws Exception -->Line_8 $$ assertEquals(new Integer(30), gb.getGenericListProperty().get(1))[ CD ]
Line_5 $$ GenericIntegerBean gb = (GenericIntegerBean) bf.getBean("integerBean")-->Line_8 $$ assertEquals(new Integer(30), gb.getGenericListProperty().get(1))[ FD ]
Line_2 $$ public void testGenericallyTypedIntegerBean() throws Exception -->Line_6 $$ assertEquals(new Integer(10), gb.getGenericProperty())[ CD ]
Line_5 $$ GenericIntegerBean gb = (GenericIntegerBean) bf.getBean("integerBean")-->Line_7 $$ assertEquals(new Integer(20), gb.getGenericListProperty().get(0))[ FD ]
Line_2 $$ public void testGenericallyTypedIntegerBean() throws Exception -->Line_4 $$ new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("genericBeanTests.xml", getClass()))[ CD ]
Line_2 $$ public void testGenericallyTypedIntegerBean() throws Exception -->Line_7 $$ assertEquals(new Integer(20), gb.getGenericListProperty().get(0))[ CD ]
Line_2 $$ public void testGenericallyTypedIntegerBean() throws Exception -->Line_5 $$ GenericIntegerBean gb = (GenericIntegerBean) bf.getBean("integerBean")[ CD ]
Line_2 $$ public void testGenericallyTypedIntegerBean() throws Exception -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
