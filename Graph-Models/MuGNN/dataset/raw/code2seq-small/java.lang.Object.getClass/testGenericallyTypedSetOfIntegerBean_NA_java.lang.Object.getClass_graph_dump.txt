Line_2 $$ public void testGenericallyTypedSetOfIntegerBean() throws Exception -->Line_6 $$ assertEquals(new Integer(10), gb.getGenericProperty().iterator().next())[ CD ]
Line_5 $$ GenericSetOfIntegerBean gb = (GenericSetOfIntegerBean) bf.getBean("setOfIntegerBean")-->Line_6 $$ assertEquals(new Integer(10), gb.getGenericProperty().iterator().next())[ FD ]
Line_2 $$ public void testGenericallyTypedSetOfIntegerBean() throws Exception -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testGenericallyTypedSetOfIntegerBean() throws Exception -->Line_5 $$ GenericSetOfIntegerBean gb = (GenericSetOfIntegerBean) bf.getBean("setOfIntegerBean")[ CD ]
Line_5 $$ GenericSetOfIntegerBean gb = (GenericSetOfIntegerBean) bf.getBean("setOfIntegerBean")-->Line_7 $$ assertEquals(new Integer(20), gb.getGenericListProperty().get(0).iterator().next())[ FD ]
Line_2 $$ public void testGenericallyTypedSetOfIntegerBean() throws Exception -->Line_7 $$ assertEquals(new Integer(20), gb.getGenericListProperty().get(0).iterator().next())[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_5 $$ GenericSetOfIntegerBean gb = (GenericSetOfIntegerBean) bf.getBean("setOfIntegerBean")[ FD ]
Line_5 $$ GenericSetOfIntegerBean gb = (GenericSetOfIntegerBean) bf.getBean("setOfIntegerBean")-->Line_8 $$ assertEquals(new Integer(30), gb.getGenericListProperty().get(1).iterator().next())[ FD ]
Line_2 $$ public void testGenericallyTypedSetOfIntegerBean() throws Exception -->Line_8 $$ assertEquals(new Integer(30), gb.getGenericListProperty().get(1).iterator().next())[ CD ]
Line_2 $$ public void testGenericallyTypedSetOfIntegerBean() throws Exception -->Line_4 $$ new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("genericBeanTests.xml", getClass()))[ CD ]
