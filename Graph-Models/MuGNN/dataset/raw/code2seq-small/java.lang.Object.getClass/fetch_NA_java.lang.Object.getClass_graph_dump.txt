Line_46 $$ if (!(targetException instanceof InterruptedException)) -->Line_47 $$ Logger.getInstance(getClass().getName()).error(e)[ CD ]
Line_2 $$ public void fetch(@NotNull final String location) throws DownloadException -->Line_6 $$ myProgress.setText("Downloading " + location)[ CD ]
Line_2 $$ public void fetch(@NotNull final String location) throws DownloadException -->Line_22 $$ resourceManager.addResource(location, file.getAbsolutePath())[ FD ]
Line_24 $$ ApplicationManager.getApplication().invokeLater(new Runnable() -->Line_26 $$ Messages.showErrorDialog(myProject, "Not a valid file: " + vf.getPresentableUrl(), "Download Problem")[ CD ]
Line_40 $$ if (e instanceof InvocationTargetException) -->Line_49 $$ if (!(e instanceof InterruptedException)) [ CD ]
Line_9 $$ file = HttpRequests.request(location).connect(new HttpRequests.RequestProcessor<File>() -->Line_11 $$ String name = Integer.toHexString(System.identityHashCode(this)) + "_" + Integer.toHexString(location.hashCode()) + "_" + location.substring(location.lastIndexOf('/') + 1)[ CD ]
Line_40 $$ if (e instanceof InvocationTargetException) -->Line_41 $$ Throwable targetException = ((InvocationTargetException) e).getTargetException()[ CD ]
Line_9 $$ file = HttpRequests.request(location).connect(new HttpRequests.RequestProcessor<File>() -->Line_12 $$ return request.saveToFile(new File(myResourcePath, name.lastIndexOf('.') == -1 ? name + ".xml" : name), myProgress)[ FD ]
Line_40 $$ if (e instanceof InvocationTargetException) -->Line_42 $$ if (targetException instanceof RuntimeException) [ CD ]
Line_20 $$ if (psiFile != null && isAccepted(psiFile)) -->Line_24 $$ ApplicationManager.getApplication().invokeLater(new Runnable() [ CD ]
Line_20 $$ if (psiFile != null && isAccepted(psiFile)) -->Line_21 $$ resourceDependencies[0] = getResourceDependencies(psiFile)[ CD ]
Line_9 $$ file = HttpRequests.request(location).connect(new HttpRequests.RequestProcessor<File>() -->Line_12 $$ return request.saveToFile(new File(myResourcePath, name.lastIndexOf('.') == -1 ? name + ".xml" : name), myProgress)[ CD ]
Line_18 $$ if (vf != null) -->Line_19 $$ PsiFile psiFile = PsiManager.getInstance(myProject).findFile(vf)[ CD ]
Line_9 $$ file = HttpRequests.request(location).connect(new HttpRequests.RequestProcessor<File>() -->Line_17 $$ final VirtualFile vf = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ FD ]
Line_7 $$ File file = null-->Line_9 $$ file = HttpRequests.request(location).connect(new HttpRequests.RequestProcessor<File>() [ FD ]
Line_2 $$ public void fetch(@NotNull final String location) throws DownloadException -->Line_56 $$ if (file != null && resourceManager.getResourceLocation(location, myProject) == location) [ FD ]
Line_56 $$ if (file != null && resourceManager.getResourceLocation(location, myProject) == location) -->Line_57 $$ FileUtil.delete(file)[ CD ]
Line_44 $$ if (targetException instanceof IOException) -->Line_46 $$ if (!(targetException instanceof InterruptedException)) [ CD ]
Line_7 $$ File file = null-->Line_57 $$ FileUtil.delete(file)[ FD ]
Line_2 $$ public void fetch(@NotNull final String location) throws DownloadException -->Line_9 $$ file = HttpRequests.request(location).connect(new HttpRequests.RequestProcessor<File>() [ FD ]
Line_2 $$ public void fetch(@NotNull final String location) throws DownloadException -->Line_11 $$ String name = Integer.toHexString(System.identityHashCode(this)) + "_" + Integer.toHexString(location.hashCode()) + "_" + location.substring(location.lastIndexOf('/') + 1)[ FD ]
Line_2 $$ public void fetch(@NotNull final String location) throws DownloadException -->Line_3 $$ if (resourceManager.getResourceLocation(location, myProject) != location) [ CD ]
Line_3 $$ if (resourceManager.getResourceLocation(location, myProject) != location) -->Line_4 $$ return[ CD ]
Line_42 $$ if (targetException instanceof RuntimeException) -->Line_44 $$ if (targetException instanceof IOException) [ CD ]
Line_9 $$ file = HttpRequests.request(location).connect(new HttpRequests.RequestProcessor<File>() -->Line_57 $$ FileUtil.delete(file)[ FD ]
Line_9 $$ file = HttpRequests.request(location).connect(new HttpRequests.RequestProcessor<File>() -->Line_22 $$ resourceManager.addResource(location, file.getAbsolutePath())[ FD ]
Line_7 $$ File file = null-->Line_22 $$ resourceManager.addResource(location, file.getAbsolutePath())[ FD ]
Line_18 $$ if (vf != null) -->Line_20 $$ if (psiFile != null && isAccepted(psiFile)) [ CD ]
Line_7 $$ File file = null-->Line_17 $$ final VirtualFile vf = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(file)[ FD ]
Line_20 $$ if (psiFile != null && isAccepted(psiFile)) -->Line_22 $$ resourceManager.addResource(location, file.getAbsolutePath())[ CD ]
Line_2 $$ public void fetch(@NotNull final String location) throws DownloadException -->Line_3 $$ if (resourceManager.getResourceLocation(location, myProject) != location) [ FD ]
Line_11 $$ String name = Integer.toHexString(System.identityHashCode(this)) + "_" + Integer.toHexString(location.hashCode()) + "_" + location.substring(location.lastIndexOf('/') + 1)-->Line_12 $$ return request.saveToFile(new File(myResourcePath, name.lastIndexOf('.') == -1 ? name + ".xml" : name), myProgress)[ FD ]
Line_2 $$ public void fetch(@NotNull final String location) throws DownloadException -->Line_7 $$ File file = null[ CD ]
