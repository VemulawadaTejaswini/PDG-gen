Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_11 $$ app.getContext().getEventHandler().handle(new JobEvent(job.getID(), JobEventType.JOB_AM_REBOOT))[ CD ]
Line_5 $$ Job job = app.submit(conf)-->Line_13 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_5 $$ Job job = app.submit(conf)[ CD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_10 $$ app.waitForState(task, TaskState.RUNNING)[ CD ]
Line_5 $$ Job job = app.submit(conf)-->Line_8 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true, 2, false)-->Line_12 $$ app.waitForInternalState((JobImpl) job, JobStateInternal.REBOOT)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ Job job = app.submit(conf)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true, 2, false)-->Line_5 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_7 $$ Assert.assertEquals("Num tasks not correct", 1, job.getTasks().size())[ CD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_12 $$ app.waitForInternalState((JobImpl) job, JobStateInternal.REBOOT)[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true, 2, false)-->Line_10 $$ app.waitForState(task, TaskState.RUNNING)[ FD ]
Line_8 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_9 $$ Task task = it.next()[ FD ]
Line_9 $$ Task task = it.next()-->Line_10 $$ app.waitForState(task, TaskState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true, 2, false)-->Line_11 $$ app.getContext().getEventHandler().handle(new JobEvent(job.getID(), JobEventType.JOB_AM_REBOOT))[ FD ]
Line_5 $$ Job job = app.submit(conf)-->Line_6 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true, 2, false)-->Line_6 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true, 2, false)-->Line_13 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_13 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_6 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_5 $$ Job job = app.submit(conf)-->Line_7 $$ Assert.assertEquals("Num tasks not correct", 1, job.getTasks().size())[ FD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true, 2, false)[ CD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_8 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_2 $$ public void testJobRebootOnLastRetryOnUnregistrationFailure() throws Exception -->Line_9 $$ Task task = it.next()[ CD ]
Line_5 $$ Job job = app.submit(conf)-->Line_11 $$ app.getContext().getEventHandler().handle(new JobEvent(job.getID(), JobEventType.JOB_AM_REBOOT))[ FD ]
