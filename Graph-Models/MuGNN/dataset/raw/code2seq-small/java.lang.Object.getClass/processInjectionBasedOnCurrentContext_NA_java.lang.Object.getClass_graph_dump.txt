Line_4 $$ WebApplicationContext cc = ContextLoader.getCurrentWebApplicationContext()-->Line_5 $$ if (cc != null) [ FD ]
Line_2 $$ public static void processInjectionBasedOnCurrentContext(Object target) -->Line_3 $$ Assert.notNull(target, "Target object must not be null")[ CD ]
Line_4 $$ WebApplicationContext cc = ContextLoader.getCurrentWebApplicationContext()-->Line_7 $$ bpp.setBeanFactory(cc.getAutowireCapableBeanFactory())[ FD ]
Line_2 $$ public static void processInjectionBasedOnCurrentContext(Object target) -->Line_11 $$ logger.debug("Current WebApplicationContext is not available for processing of " + ClassUtils.getShortName(target.getClass()) + ": " + "Make sure this class gets constructed in a Spring web application. Proceeding without injection.")[ FD ]
Line_2 $$ public static void processInjectionBasedOnCurrentContext(Object target) -->Line_3 $$ Assert.notNull(target, "Target object must not be null")[ FD ]
Line_2 $$ public static void processInjectionBasedOnCurrentContext(Object target) -->Line_8 $$ bpp.processInjection(target)[ FD ]
Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_8 $$ bpp.processInjection(target)[ FD ]
Line_2 $$ public static void processInjectionBasedOnCurrentContext(Object target) -->Line_4 $$ WebApplicationContext cc = ContextLoader.getCurrentWebApplicationContext()[ CD ]
Line_10 $$ if (logger.isDebugEnabled()) -->Line_11 $$ logger.debug("Current WebApplicationContext is not available for processing of " + ClassUtils.getShortName(target.getClass()) + ": " + "Make sure this class gets constructed in a Spring web application. Proceeding without injection.")[ CD ]
Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()-->Line_7 $$ bpp.setBeanFactory(cc.getAutowireCapableBeanFactory())[ FD ]
Line_5 $$ if (cc != null) -->Line_6 $$ AutowiredAnnotationBeanPostProcessor bpp = new AutowiredAnnotationBeanPostProcessor()[ CD ]
Line_5 $$ if (cc != null) -->Line_7 $$ bpp.setBeanFactory(cc.getAutowireCapableBeanFactory())[ CD ]
Line_5 $$ if (cc != null) -->Line_10 $$ if (logger.isDebugEnabled()) [ CD ]
Line_5 $$ if (cc != null) -->Line_8 $$ bpp.processInjection(target)[ CD ]
Line_2 $$ public static void processInjectionBasedOnCurrentContext(Object target) -->Line_5 $$ if (cc != null) [ CD ]
