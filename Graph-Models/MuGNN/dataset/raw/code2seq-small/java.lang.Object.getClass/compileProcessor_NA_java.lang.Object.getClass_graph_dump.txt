Line_4 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()-->Line_7 $$ return defineClass(classDefinition, superType, callSiteBinder.getBindings(), getClass().getClassLoader())[ FD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_6 $$ generateToString(classDefinition, callSiteBinder, toStringHelper(classDefinition.getType().getJavaClassName()).add("filter", filter).add("projections", projections).toString())[ FD ]
Line_4 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()-->Line_6 $$ generateToString(classDefinition, callSiteBinder, toStringHelper(classDefinition.getType().getJavaClassName()).add("filter", filter).add("projections", projections).toString())[ FD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_7 $$ return defineClass(classDefinition, superType, callSiteBinder.getBindings(), getClass().getClassLoader())[ FD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_3 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName(superType.getSimpleName()), type(Object.class), type(superType))[ CD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_7 $$ return defineClass(classDefinition, superType, callSiteBinder.getBindings(), getClass().getClassLoader())[ CD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_3 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName(superType.getSimpleName()), type(Object.class), type(superType))[ FD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_5 $$ bodyCompiler.generateMethods(classDefinition, callSiteBinder, filter, projections)[ FD ]
Line_4 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()-->Line_5 $$ bodyCompiler.generateMethods(classDefinition, callSiteBinder, filter, projections)[ FD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_4 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()[ CD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_6 $$ generateToString(classDefinition, callSiteBinder, toStringHelper(classDefinition.getType().getJavaClassName()).add("filter", filter).add("projections", projections).toString())[ CD ]
Line_2 $$ private <T> Class<? extends T> compileProcessor(RowExpression filter, List<RowExpression> projections, BodyCompiler<T> bodyCompiler, Class<? extends T> superType) -->Line_5 $$ bodyCompiler.generateMethods(classDefinition, callSiteBinder, filter, projections)[ CD ]
Line_3 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName(superType.getSimpleName()), type(Object.class), type(superType))-->Line_5 $$ bodyCompiler.generateMethods(classDefinition, callSiteBinder, filter, projections)[ FD ]
Line_3 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName(superType.getSimpleName()), type(Object.class), type(superType))-->Line_7 $$ return defineClass(classDefinition, superType, callSiteBinder.getBindings(), getClass().getClassLoader())[ FD ]
Line_3 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName(superType.getSimpleName()), type(Object.class), type(superType))-->Line_6 $$ generateToString(classDefinition, callSiteBinder, toStringHelper(classDefinition.getType().getJavaClassName()).add("filter", filter).add("projections", projections).toString())[ FD ]
