Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_6 $$ TransactionSynchronizationRegistry tsr = mock(TransactionSynchronizationRegistry.class)[ CD ]
Line_4 $$ TransactionManager tm = mock(TransactionManager.class)-->Line_15 $$ assertSame(tm, jtaPlatform.getClass().getMethod("retrieveTransactionManager").invoke(jtaPlatform))[ FD ]
Line_7 $$ JtaTransactionManager jtm = new JtaTransactionManager()-->Line_8 $$ jtm.setTransactionManager(tm)[ FD ]
Line_7 $$ JtaTransactionManager jtm = new JtaTransactionManager()-->Line_12 $$ lsfb.setJtaTransactionManager(jtm)[ FD ]
Line_5 $$ UserTransaction ut = mock(UserTransaction.class)-->Line_9 $$ jtm.setUserTransaction(ut)[ FD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_13 $$ Object jtaPlatform = lsfb.getProperties().get(AvailableSettings.JTA_PLATFORM)[ CD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_14 $$ assertNotNull(jtaPlatform)[ CD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_11 $$ LocalSessionFactoryBuilder lsfb = new LocalSessionFactoryBuilder(ds)[ CD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_3 $$ DataSource ds = mock(DataSource.class)[ CD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_17 $$ assertTrue(lsfb.getProperties().get(AvailableSettings.TRANSACTION_STRATEGY) instanceof CMTTransactionFactory)[ CD ]
Line_13 $$ Object jtaPlatform = lsfb.getProperties().get(AvailableSettings.JTA_PLATFORM)-->Line_15 $$ assertSame(tm, jtaPlatform.getClass().getMethod("retrieveTransactionManager").invoke(jtaPlatform))[ FD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_7 $$ JtaTransactionManager jtm = new JtaTransactionManager()[ CD ]
Line_6 $$ TransactionSynchronizationRegistry tsr = mock(TransactionSynchronizationRegistry.class)-->Line_10 $$ jtm.setTransactionSynchronizationRegistry(tsr)[ FD ]
Line_13 $$ Object jtaPlatform = lsfb.getProperties().get(AvailableSettings.JTA_PLATFORM)-->Line_14 $$ assertNotNull(jtaPlatform)[ FD ]
Line_11 $$ LocalSessionFactoryBuilder lsfb = new LocalSessionFactoryBuilder(ds)-->Line_13 $$ Object jtaPlatform = lsfb.getProperties().get(AvailableSettings.JTA_PLATFORM)[ FD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_5 $$ UserTransaction ut = mock(UserTransaction.class)[ CD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_15 $$ assertSame(tm, jtaPlatform.getClass().getMethod("retrieveTransactionManager").invoke(jtaPlatform))[ CD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_4 $$ TransactionManager tm = mock(TransactionManager.class)[ CD ]
Line_11 $$ LocalSessionFactoryBuilder lsfb = new LocalSessionFactoryBuilder(ds)-->Line_17 $$ assertTrue(lsfb.getProperties().get(AvailableSettings.TRANSACTION_STRATEGY) instanceof CMTTransactionFactory)[ FD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_9 $$ jtm.setUserTransaction(ut)[ CD ]
Line_4 $$ TransactionManager tm = mock(TransactionManager.class)-->Line_8 $$ jtm.setTransactionManager(tm)[ FD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_10 $$ jtm.setTransactionSynchronizationRegistry(tsr)[ CD ]
Line_7 $$ JtaTransactionManager jtm = new JtaTransactionManager()-->Line_10 $$ jtm.setTransactionSynchronizationRegistry(tsr)[ FD ]
Line_11 $$ LocalSessionFactoryBuilder lsfb = new LocalSessionFactoryBuilder(ds)-->Line_12 $$ lsfb.setJtaTransactionManager(jtm)[ FD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_8 $$ jtm.setTransactionManager(tm)[ CD ]
Line_13 $$ Object jtaPlatform = lsfb.getProperties().get(AvailableSettings.JTA_PLATFORM)-->Line_16 $$ assertSame(ut, jtaPlatform.getClass().getMethod("retrieveUserTransaction").invoke(jtaPlatform))[ FD ]
Line_7 $$ JtaTransactionManager jtm = new JtaTransactionManager()-->Line_9 $$ jtm.setUserTransaction(ut)[ FD ]
Line_5 $$ UserTransaction ut = mock(UserTransaction.class)-->Line_16 $$ assertSame(ut, jtaPlatform.getClass().getMethod("retrieveUserTransaction").invoke(jtaPlatform))[ FD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_16 $$ assertSame(ut, jtaPlatform.getClass().getMethod("retrieveUserTransaction").invoke(jtaPlatform))[ CD ]
Line_2 $$ public void testSetJtaTransactionManager() throws Exception -->Line_12 $$ lsfb.setJtaTransactionManager(jtm)[ CD ]
