Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))-->Line_9 $$ assertEquals(0, desc.getAnnotations().length)[ FD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))-->Line_4 $$ assertEquals(int.class, desc.getType())[ FD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))[ CD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))-->Line_8 $$ assertTrue(desc.isPrimitive())[ FD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))-->Line_5 $$ assertEquals(Integer.class, desc.getObjectType())[ FD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_7 $$ assertEquals("int", desc.toString())[ CD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_9 $$ assertEquals(0, desc.getAnnotations().length)[ CD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))-->Line_6 $$ assertEquals("int", desc.getName())[ FD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_5 $$ assertEquals(Integer.class, desc.getObjectType())[ CD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))-->Line_7 $$ assertEquals("int", desc.toString())[ FD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_8 $$ assertTrue(desc.isPrimitive())[ CD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_10 $$ assertFalse(desc.isCollection())[ CD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_11 $$ assertFalse(desc.isMap())[ CD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_4 $$ assertEquals(int.class, desc.getType())[ CD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))-->Line_11 $$ assertFalse(desc.isMap())[ FD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(new MethodParameter(getClass().getMethod("testParameterPrimitive", int.class), 0))-->Line_10 $$ assertFalse(desc.isCollection())[ FD ]
Line_2 $$ public void parameterPrimitive() throws Exception -->Line_6 $$ assertEquals("int", desc.getName())[ CD ]
