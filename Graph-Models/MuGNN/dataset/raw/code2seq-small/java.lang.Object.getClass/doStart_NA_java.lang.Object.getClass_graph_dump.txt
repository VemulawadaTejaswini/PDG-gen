Line_7 $$ activeMQServer.getValue().registerActivateCallback(new ActivateCallback() -->Line_12 $$ if (overrideInVMSecurity) [ CD ]
Line_25 $$ if (!activeMQActivationController.getState().in(STOPPING, REMOVED)) -->Line_27 $$ activeMQActivationController.compareAndSetMode(ACTIVE, REMOVE)[ CD ]
Line_15 $$ if (activeMQActivationController == null) -->Line_16 $$ activeMQActivationController = serviceContainer.addService(ActiveMQActivationService.getServiceName(serverServiceName), new ActiveMQActivationService()).setInitialMode(Mode.ACTIVE).install()[ CD ]
Line_2 $$ private synchronized void doStart(final StartContext context) throws StartException -->Line_4 $$ ClassLoader oldTccl = WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(getClass())[ CD ]
Line_28 $$ activeMQActivationController.addListener(new AbstractServiceListener<Void>() -->Line_30 $$ if (transition.enters(REMOVED)) [ FD ]
Line_2 $$ private synchronized void doStart(final StartContext context) throws StartException -->Line_6 $$ jmsServer = new JMSServerManagerImpl(activeMQServer.getValue(), new WildFlyBindingRegistry(context.getController().getServiceContainer()))[ FD ]
Line_7 $$ activeMQServer.getValue().registerActivateCallback(new ActivateCallback() -->Line_15 $$ if (activeMQActivationController == null) [ CD ]
Line_4 $$ ClassLoader oldTccl = WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(getClass())-->Line_50 $$ WildFlySecurityManager.setCurrentContextClassLoaderPrivileged(oldTccl)[ FD ]
Line_25 $$ if (!activeMQActivationController.getState().in(STOPPING, REMOVED)) -->Line_26 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ private synchronized void doStart(final StartContext context) throws StartException -->Line_3 $$ final ServiceContainer serviceContainer = context.getController().getServiceContainer()[ FD ]
Line_24 $$ if (activeMQActivationController != null) -->Line_25 $$ if (!activeMQActivationController.getState().in(STOPPING, REMOVED)) [ CD ]
Line_3 $$ final ServiceContainer serviceContainer = context.getController().getServiceContainer()-->Line_16 $$ activeMQActivationController = serviceContainer.addService(ActiveMQActivationService.getServiceName(serverServiceName), new ActiveMQActivationService()).setInitialMode(Mode.ACTIVE).install()[ FD ]
Line_7 $$ activeMQServer.getValue().registerActivateCallback(new ActivateCallback() -->Line_24 $$ if (activeMQActivationController != null) [ CD ]
Line_15 $$ if (activeMQActivationController == null) -->Line_18 $$ activeMQActivationController.setMode(ACTIVE)[ CD ]
Line_26 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_31 $$ latch.countDown()[ FD ]
Line_26 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_36 $$ latch.await(5, TimeUnit.SECONDS)[ FD ]
Line_12 $$ if (overrideInVMSecurity) -->Line_13 $$ activeMQServer.getValue().getRemotingService().allowInvmSecurityOverride(new ActiveMQPrincipal(DefaultCredentials.getUsername(), DefaultCredentials.getPassword()))[ CD ]
Line_30 $$ if (transition.enters(REMOVED)) -->Line_31 $$ latch.countDown()[ CD ]
Line_25 $$ if (!activeMQActivationController.getState().in(STOPPING, REMOVED)) -->Line_28 $$ activeMQActivationController.addListener(new AbstractServiceListener<Void>() [ CD ]
Line_28 $$ activeMQActivationController.addListener(new AbstractServiceListener<Void>() -->Line_30 $$ if (transition.enters(REMOVED)) [ CD ]
Line_2 $$ private synchronized void doStart(final StartContext context) throws StartException -->Line_3 $$ final ServiceContainer serviceContainer = context.getController().getServiceContainer()[ CD ]
