Line_5 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, getModule(), true)-->Line_9 $$ element.addChildElement().addChildElement()[ FD ]
Line_5 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, getModule(), true)-->Line_12 $$ final MyElement child = element.getChildElements().get(0)[ FD ]
Line_5 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, getModule(), true)-->Line_6 $$ final DomFileElement<MyElement> root = DomUtil.getFileElement(element)[ FD ]
Line_6 $$ final DomFileElement<MyElement> root = DomUtil.getFileElement(element)-->Line_29 $$ assertTrue(root.isValid())[ FD ]
Line_5 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, getModule(), true)-->Line_32 $$ final MyElement newChild = element.getChildElements().get(0)[ FD ]
Line_7 $$ new WriteCommandAction<MyElement>(getProject()) -->Line_9 $$ element.addChildElement().addChildElement()[ CD ]
Line_5 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, getModule(), true)-->Line_30 $$ assertTrue(element.isValid())[ FD ]
Line_24 $$ new WriteCommandAction(getProject()) -->Line_26 $$ tag.add(XmlElementFactory.getInstance(getProject()).createTagFromText("<foo/>"))[ CD ]
Line_5 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, getModule(), true)-->Line_19 $$ assertNotNull(element.getXmlTag())[ FD ]
Line_5 $$ final MyElement element = getDomManager().createMockElement(MyElement.class, getModule(), true)-->Line_16 $$ assertTrue(element.isValid())[ FD ]
Line_2 $$ public void testChangeImplementationClass_InCollection() throws Throwable -->Line_3 $$ getTypeChooserManager().registerTypeChooser(MyElement.class, createClassChooser())[ CD ]
