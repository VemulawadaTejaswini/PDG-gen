Line_7 $$ Writer writer = (Writer) methodToInvoke.invoke(lob, (Object[]) null)-->Line_8 $$ FileCopyUtils.copy(content, writer)[ FD ]
Line_3 $$ if (content != null) -->Line_11 $$ ps.setClob(paramIndex, clob)[ CD ]
Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() -->Line_13 $$ logger.debug("Set string for Oracle CLOB with length " + clob.length())[ FD ]
Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() -->Line_6 $$ Method methodToInvoke = lob.getClass().getMethod("getCharacterOutputStream", (Class[]) null)[ FD ]
Line_2 $$ public void setClobAsString(PreparedStatement ps, int paramIndex, final String content) throws SQLException -->Line_11 $$ ps.setClob(paramIndex, clob)[ FD ]
Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() -->Line_8 $$ FileCopyUtils.copy(content, writer)[ CD ]
Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() -->Line_6 $$ Method methodToInvoke = lob.getClass().getMethod("getCharacterOutputStream", (Class[]) null)[ CD ]
Line_2 $$ public void setClobAsString(PreparedStatement ps, int paramIndex, final String content) throws SQLException -->Line_8 $$ FileCopyUtils.copy(content, writer)[ FD ]
Line_3 $$ if (content != null) -->Line_17 $$ logger.debug("Set Oracle CLOB to null")[ CD ]
Line_2 $$ public void setClobAsString(PreparedStatement ps, int paramIndex, final String content) throws SQLException -->Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() [ FD ]
Line_6 $$ Method methodToInvoke = lob.getClass().getMethod("getCharacterOutputStream", (Class[]) null)-->Line_7 $$ Writer writer = (Writer) methodToInvoke.invoke(lob, (Object[]) null)[ FD ]
Line_3 $$ if (content != null) -->Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() [ CD ]
Line_2 $$ public void setClobAsString(PreparedStatement ps, int paramIndex, final String content) throws SQLException -->Line_3 $$ if (content != null) [ FD ]
Line_2 $$ public void setClobAsString(PreparedStatement ps, int paramIndex, final String content) throws SQLException -->Line_16 $$ ps.setClob(paramIndex, (Clob) null)[ FD ]
Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() -->Line_7 $$ Writer writer = (Writer) methodToInvoke.invoke(lob, (Object[]) null)[ CD ]
Line_3 $$ if (content != null) -->Line_16 $$ ps.setClob(paramIndex, (Clob) null)[ CD ]
Line_12 $$ if (logger.isDebugEnabled()) -->Line_13 $$ logger.debug("Set string for Oracle CLOB with length " + clob.length())[ CD ]
Line_3 $$ if (content != null) -->Line_12 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public void setClobAsString(PreparedStatement ps, int paramIndex, final String content) throws SQLException -->Line_3 $$ if (content != null) [ CD ]
Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() -->Line_7 $$ Writer writer = (Writer) methodToInvoke.invoke(lob, (Object[]) null)[ FD ]
Line_4 $$ Clob clob = (Clob) createLob(ps, true, new LobCallback() -->Line_11 $$ ps.setClob(paramIndex, clob)[ FD ]
