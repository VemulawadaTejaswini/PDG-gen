Line_3 $$ final Context ctx = Util.createNamingContext()-->Line_6 $$ String echoValue = getBean(MODULE, log, SB_CLASS, ctx).defaultAccess("alohomora")[ FD ]
Line_2 $$ public void testSingleMethodAnnotationsNoUserTemplate(final String MODULE, final Logger log, final Class SB_CLASS) throws Exception -->Line_3 $$ final Context ctx = Util.createNamingContext()[ CD ]
Line_9 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessOne("alohomora")-->Line_15 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessMore("alohomora")[ FD ]
Line_9 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessOne("alohomora")-->Line_26 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).denyAll("alohomora")[ FD ]
Line_2 $$ public void testSingleMethodAnnotationsNoUserTemplate(final String MODULE, final Logger log, final Class SB_CLASS) throws Exception -->Line_9 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessOne("alohomora")[ FD ]
Line_20 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).permitAll("alohomora")-->Line_26 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).denyAll("alohomora")[ FD ]
Line_6 $$ String echoValue = getBean(MODULE, log, SB_CLASS, ctx).defaultAccess("alohomora")-->Line_21 $$ Assert.assertEquals(echoValue, "alohomora")[ FD ]
Line_6 $$ String echoValue = getBean(MODULE, log, SB_CLASS, ctx).defaultAccess("alohomora")-->Line_26 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).denyAll("alohomora")[ FD ]
Line_6 $$ String echoValue = getBean(MODULE, log, SB_CLASS, ctx).defaultAccess("alohomora")-->Line_7 $$ Assert.assertEquals(echoValue, "alohomora")[ FD ]
Line_2 $$ public void testSingleMethodAnnotationsNoUserTemplate(final String MODULE, final Logger log, final Class SB_CLASS) throws Exception -->Line_15 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessMore("alohomora")[ FD ]
Line_2 $$ public void testSingleMethodAnnotationsNoUserTemplate(final String MODULE, final Logger log, final Class SB_CLASS) throws Exception -->Line_20 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).permitAll("alohomora")[ FD ]
Line_2 $$ public void testSingleMethodAnnotationsNoUserTemplate(final String MODULE, final Logger log, final Class SB_CLASS) throws Exception -->Line_4 $$ ContextSelector<EJBClientContext> old = setupEJBClientContextSelector("$local", null)[ CD ]
Line_6 $$ String echoValue = getBean(MODULE, log, SB_CLASS, ctx).defaultAccess("alohomora")-->Line_9 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessOne("alohomora")[ FD ]
Line_3 $$ final Context ctx = Util.createNamingContext()-->Line_20 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).permitAll("alohomora")[ FD ]
Line_9 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessOne("alohomora")-->Line_21 $$ Assert.assertEquals(echoValue, "alohomora")[ FD ]
Line_15 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessMore("alohomora")-->Line_20 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).permitAll("alohomora")[ FD ]
Line_2 $$ public void testSingleMethodAnnotationsNoUserTemplate(final String MODULE, final Logger log, final Class SB_CLASS) throws Exception -->Line_26 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).denyAll("alohomora")[ FD ]
Line_3 $$ final Context ctx = Util.createNamingContext()-->Line_9 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessOne("alohomora")[ FD ]
Line_6 $$ String echoValue = getBean(MODULE, log, SB_CLASS, ctx).defaultAccess("alohomora")-->Line_15 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessMore("alohomora")[ FD ]
Line_20 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).permitAll("alohomora")-->Line_21 $$ Assert.assertEquals(echoValue, "alohomora")[ FD ]
Line_9 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessOne("alohomora")-->Line_20 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).permitAll("alohomora")[ FD ]
Line_2 $$ public void testSingleMethodAnnotationsNoUserTemplate(final String MODULE, final Logger log, final Class SB_CLASS) throws Exception -->Line_6 $$ String echoValue = getBean(MODULE, log, SB_CLASS, ctx).defaultAccess("alohomora")[ FD ]
Line_4 $$ ContextSelector<EJBClientContext> old = setupEJBClientContextSelector("$local", null)-->Line_32 $$ safeClose((Closeable) EJBClientContext.setSelector(old))[ FD ]
Line_15 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessMore("alohomora")-->Line_26 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).denyAll("alohomora")[ FD ]
Line_3 $$ final Context ctx = Util.createNamingContext()-->Line_26 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).denyAll("alohomora")[ FD ]
Line_3 $$ final Context ctx = Util.createNamingContext()-->Line_15 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessMore("alohomora")[ FD ]
Line_15 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).roleBasedAccessMore("alohomora")-->Line_21 $$ Assert.assertEquals(echoValue, "alohomora")[ FD ]
Line_6 $$ String echoValue = getBean(MODULE, log, SB_CLASS, ctx).defaultAccess("alohomora")-->Line_20 $$ echoValue = getBean(MODULE, log, SB_CLASS, ctx).permitAll("alohomora")[ FD ]
