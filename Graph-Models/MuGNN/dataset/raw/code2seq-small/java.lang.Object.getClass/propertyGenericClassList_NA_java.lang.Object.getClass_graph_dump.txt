Line_2 $$ public void propertyGenericClassList() throws Exception -->Line_8 $$ assertNotNull(desc.getAnnotation(MethodAnnotation1.class))[ CD ]
Line_5 $$ TypeDescriptor desc = new TypeDescriptor(property)-->Line_7 $$ assertEquals(Integer.class, desc.getElementTypeDescriptor().getType())[ FD ]
Line_5 $$ TypeDescriptor desc = new TypeDescriptor(property)-->Line_9 $$ assertTrue(desc.hasAnnotation(MethodAnnotation1.class))[ FD ]
Line_3 $$ IntegerClass genericBean = new IntegerClass()-->Line_4 $$ Property property = new Property(genericBean.getClass(), genericBean.getClass().getMethod("getListProperty"), genericBean.getClass().getMethod("setListProperty", List.class))[ FD ]
Line_2 $$ public void propertyGenericClassList() throws Exception -->Line_5 $$ TypeDescriptor desc = new TypeDescriptor(property)[ CD ]
Line_2 $$ public void propertyGenericClassList() throws Exception -->Line_3 $$ IntegerClass genericBean = new IntegerClass()[ CD ]
Line_2 $$ public void propertyGenericClassList() throws Exception -->Line_7 $$ assertEquals(Integer.class, desc.getElementTypeDescriptor().getType())[ CD ]
Line_2 $$ public void propertyGenericClassList() throws Exception -->Line_6 $$ assertEquals(List.class, desc.getType())[ CD ]
Line_2 $$ public void propertyGenericClassList() throws Exception -->Line_9 $$ assertTrue(desc.hasAnnotation(MethodAnnotation1.class))[ CD ]
Line_2 $$ public void propertyGenericClassList() throws Exception -->Line_4 $$ Property property = new Property(genericBean.getClass(), genericBean.getClass().getMethod("getListProperty"), genericBean.getClass().getMethod("setListProperty", List.class))[ CD ]
Line_5 $$ TypeDescriptor desc = new TypeDescriptor(property)-->Line_6 $$ assertEquals(List.class, desc.getType())[ FD ]
Line_5 $$ TypeDescriptor desc = new TypeDescriptor(property)-->Line_8 $$ assertNotNull(desc.getAnnotation(MethodAnnotation1.class))[ FD ]
