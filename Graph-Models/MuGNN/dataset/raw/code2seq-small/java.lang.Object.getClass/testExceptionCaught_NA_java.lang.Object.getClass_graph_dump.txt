Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_6 $$ NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig = createNettyFabricWorkerConfig()-->Line_7 $$ ReflectionTestUtil.setFieldValue(nettyFabricWorkerConfig, "_processConfig", null)[ FD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_2 $$ public void testExceptionCaught() -->Line_3 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>(), new LocalFabricAgent(new EmbeddedProcessExecutor()), Long.MAX_VALUE)[ CD ]
Line_16 $$ Throwable throwable = logRecord.getThrown()-->Line_17 $$ Assert.assertSame(NullPointerException.class, throwable.getClass())[ FD ]
Line_4 $$ ChannelPipeline channelPipeline = _embeddedChannel.pipeline()-->Line_5 $$ channelPipeline.addFirst(nettyFabricWorkerExecutionChannelHandler)[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_2 $$ public void testExceptionCaught() -->Line_5 $$ channelPipeline.addFirst(nettyFabricWorkerExecutionChannelHandler)[ CD ]
Line_2 $$ public void testExceptionCaught() -->Line_6 $$ NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig = createNettyFabricWorkerConfig()[ CD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ Assert.assertEquals(_embeddedChannel + " is closed", logRecord.getMessage())[ FD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_18 $$ logRecord = logRecords.get(1)[ FD ]
Line_6 $$ NettyFabricWorkerConfig<Serializable> nettyFabricWorkerConfig = createNettyFabricWorkerConfig()-->Line_10 $$ _embeddedChannel.writeInbound(nettyFabricWorkerConfig)[ FD ]
Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_18 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testExceptionCaught() -->Line_4 $$ ChannelPipeline channelPipeline = _embeddedChannel.pipeline()[ CD ]
Line_2 $$ public void testExceptionCaught() -->Line_7 $$ ReflectionTestUtil.setFieldValue(nettyFabricWorkerConfig, "_processConfig", null)[ CD ]
Line_8 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyFabricWorkerExecutionChannelHandler.class.getName(), Level.INFO)) -->Line_12 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_3 $$ NettyFabricWorkerExecutionChannelHandler nettyFabricWorkerExecutionChannelHandler = new NettyFabricWorkerExecutionChannelHandler(new MockRepository<Channel>(), new LocalFabricAgent(new EmbeddedProcessExecutor()), Long.MAX_VALUE)-->Line_5 $$ channelPipeline.addFirst(nettyFabricWorkerExecutionChannelHandler)[ FD ]
Line_18 $$ logRecord = logRecords.get(1)-->Line_19 $$ Assert.assertEquals(_embeddedChannel + " is closed", logRecord.getMessage())[ FD ]
Line_14 $$ LogRecord logRecord = logRecords.get(0)-->Line_15 $$ Assert.assertEquals("Closing " + embeddedChannelToString + " due to:", logRecord.getMessage())[ FD ]
