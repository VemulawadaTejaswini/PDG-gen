Line_2 $$ private static Set<VirtualFile> filterOutNulls(@NotNull IndexableSetContributor contributor, @NotNull String methodInfo, @NotNull Set<VirtualFile> roots) -->Line_13 $$ return roots[ CD ]
Line_3 $$ for (VirtualFile root : roots) -->Line_4 $$ if (root == null || !root.isValid()) [ FD ]
Line_2 $$ private static Set<VirtualFile> filterOutNulls(@NotNull IndexableSetContributor contributor, @NotNull String methodInfo, @NotNull Set<VirtualFile> roots) -->Line_6 $$ return ContainerUtil.newLinkedHashSet(ContainerUtil.filter(roots, new Condition<VirtualFile>() [ FD ]
Line_4 $$ if (root == null || !root.isValid()) -->Line_5 $$ LOG.error("Please fix " + contributor.getClass().getName() + "#" + methodInfo + ".\n" + (root == null ? "The returned set is not expected to contain nulls, but it is " + roots : "Invalid file returned: " + root))[ CD ]
Line_2 $$ private static Set<VirtualFile> filterOutNulls(@NotNull IndexableSetContributor contributor, @NotNull String methodInfo, @NotNull Set<VirtualFile> roots) -->Line_5 $$ LOG.error("Please fix " + contributor.getClass().getName() + "#" + methodInfo + ".\n" + (root == null ? "The returned set is not expected to contain nulls, but it is " + roots : "Invalid file returned: " + root))[ FD ]
Line_4 $$ if (root == null || !root.isValid()) -->Line_6 $$ return ContainerUtil.newLinkedHashSet(ContainerUtil.filter(roots, new Condition<VirtualFile>() [ CD ]
Line_6 $$ return ContainerUtil.newLinkedHashSet(ContainerUtil.filter(roots, new Condition<VirtualFile>() -->Line_8 $$ return virtualFile != null && virtualFile.isValid()[ CD ]
Line_6 $$ return ContainerUtil.newLinkedHashSet(ContainerUtil.filter(roots, new Condition<VirtualFile>() -->Line_8 $$ return virtualFile != null && virtualFile.isValid()[ FD ]
