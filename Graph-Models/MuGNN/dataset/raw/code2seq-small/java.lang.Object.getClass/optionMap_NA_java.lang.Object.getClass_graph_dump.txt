Line_2 $$ public Map<String, Object> optionMap() -->Line_3 $$ final Class<?> thisClass = getClass()[ CD ]
Line_4 $$ Map<String, Object> map = Maps.newHashMap()-->Line_12 $$ addValueToMapIfNotNull(map, field)[ FD ]
Line_7 $$ currClass = currClass.getSuperclass()-->Line_15 $$ currClass = currClass.getSuperclass()[ FD ]
Line_5 $$ Class<?> currClass = thisClass-->Line_6 $$ if (currClass.getName().endsWith("_Decorated")) [ FD ]
Line_2 $$ public Map<String, Object> optionMap() -->Line_5 $$ Class<?> currClass = thisClass[ CD ]
Line_5 $$ Class<?> currClass = thisClass-->Line_7 $$ currClass = currClass.getSuperclass()[ FD ]
Line_15 $$ currClass = currClass.getSuperclass()-->Line_10 $$ for (Field field : currClass.getDeclaredFields()) [ FD ]
Line_7 $$ currClass = currClass.getSuperclass()-->Line_10 $$ for (Field field : currClass.getDeclaredFields()) [ FD ]
Line_5 $$ Class<?> currClass = thisClass-->Line_9 $$ while (currClass != AbstractOptions.class) [ FD ]
Line_9 $$ while (currClass != AbstractOptions.class) -->Line_15 $$ currClass = currClass.getSuperclass()[ CD ]
Line_2 $$ public Map<String, Object> optionMap() -->Line_9 $$ while (currClass != AbstractOptions.class) [ CD ]
Line_5 $$ Class<?> currClass = thisClass-->Line_10 $$ for (Field field : currClass.getDeclaredFields()) [ FD ]
Line_15 $$ currClass = currClass.getSuperclass()-->Line_9 $$ while (currClass != AbstractOptions.class) [ FD ]
Line_5 $$ Class<?> currClass = thisClass-->Line_15 $$ currClass = currClass.getSuperclass()[ FD ]
Line_11 $$ if (isOptionField(field)) -->Line_12 $$ addValueToMapIfNotNull(map, field)[ CD ]
Line_10 $$ for (Field field : currClass.getDeclaredFields()) -->Line_11 $$ if (isOptionField(field)) [ FD ]
Line_7 $$ currClass = currClass.getSuperclass()-->Line_9 $$ while (currClass != AbstractOptions.class) [ FD ]
Line_2 $$ public Map<String, Object> optionMap() -->Line_17 $$ return map[ CD ]
Line_2 $$ public Map<String, Object> optionMap() -->Line_6 $$ if (currClass.getName().endsWith("_Decorated")) [ CD ]
Line_6 $$ if (currClass.getName().endsWith("_Decorated")) -->Line_7 $$ currClass = currClass.getSuperclass()[ CD ]
Line_2 $$ public Map<String, Object> optionMap() -->Line_4 $$ Map<String, Object> map = Maps.newHashMap()[ CD ]
Line_10 $$ for (Field field : currClass.getDeclaredFields()) -->Line_12 $$ addValueToMapIfNotNull(map, field)[ FD ]
