Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_20 $$ return s.toString()[ CD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_5 $$ if (persister == null) [ CD ]
Line_13 $$ ownerKey = collectionKey-->Line_15 $$ ownerKey = session.getPersistenceContext().getEntry(collection.getOwner()).getId()[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_17 $$ s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()))[ FD ]
Line_11 $$ Serializable ownerKey-->Line_15 $$ ownerKey = session.getPersistenceContext().getEntry(collection.getOwner()).getId()[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_6 $$ s.append("<unreferenced>")[ FD ]
Line_11 $$ Serializable ownerKey-->Line_13 $$ ownerKey = collectionKey[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_9 $$ s.append('#')[ FD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_3 $$ StringBuilder s = new StringBuilder()[ CD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_4 $$ s.append('[')[ CD ]
Line_5 $$ if (persister == null) -->Line_17 $$ s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()))[ CD ]
Line_5 $$ if (persister == null) -->Line_10 $$ Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType()[ CD ]
Line_12 $$ if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) -->Line_13 $$ ownerKey = collectionKey[ CD ]
Line_11 $$ Serializable ownerKey-->Line_17 $$ s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()))[ FD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_15 $$ ownerKey = session.getPersistenceContext().getEntry(collection.getOwner()).getId()[ FD ]
Line_5 $$ if (persister == null) -->Line_12 $$ if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) [ CD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_13 $$ ownerKey = collectionKey[ FD ]
Line_13 $$ ownerKey = collectionKey-->Line_17 $$ s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()))[ FD ]
Line_5 $$ if (persister == null) -->Line_6 $$ s.append("<unreferenced>")[ CD ]
Line_10 $$ Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType()-->Line_17 $$ s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()))[ FD ]
Line_5 $$ if (persister == null) -->Line_9 $$ s.append('#')[ CD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_19 $$ s.append(']')[ CD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_10 $$ Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType()[ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_20 $$ return s.toString()[ FD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_5 $$ if (persister == null) [ FD ]
Line_15 $$ ownerKey = session.getPersistenceContext().getEntry(collection.getOwner()).getId()-->Line_17 $$ s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()))[ FD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_17 $$ s.append(ownerIdentifierType.toLoggableString(ownerKey, session.getFactory()))[ FD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_12 $$ if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) [ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_4 $$ s.append('[')[ FD ]
Line_5 $$ if (persister == null) -->Line_11 $$ Serializable ownerKey[ CD ]
Line_10 $$ Type ownerIdentifierType = persister.getOwnerEntityPersister().getIdentifierType()-->Line_12 $$ if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) [ FD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_19 $$ s.append(']')[ FD ]
Line_12 $$ if (collectionKey.getClass().isAssignableFrom(ownerIdentifierType.getReturnedClass())) -->Line_15 $$ ownerKey = session.getPersistenceContext().getEntry(collection.getOwner()).getId()[ CD ]
Line_2 $$ public static String collectionInfoString(CollectionPersister persister, PersistentCollection collection, Serializable collectionKey, SessionImplementor session) -->Line_8 $$ s.append(persister.getRole())[ FD ]
Line_5 $$ if (persister == null) -->Line_8 $$ s.append(persister.getRole())[ CD ]
Line_3 $$ StringBuilder s = new StringBuilder()-->Line_8 $$ s.append(persister.getRole())[ FD ]
