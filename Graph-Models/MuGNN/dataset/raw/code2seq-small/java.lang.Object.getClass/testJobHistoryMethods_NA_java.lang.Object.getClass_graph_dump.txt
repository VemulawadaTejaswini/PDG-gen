Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_16 $$ Assert.assertEquals(1, jobHistory.getAllJobs().size())[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_11 $$ JobId jobId = job.getID()[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_23 $$ Assert.assertNull(jobHistory.getEventHandler())[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_9 $$ app.submit(configuration)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_25 $$ Assert.assertNull(jobHistory.getClusterInfo())[ FD ]
Line_18 $$ JobsInfo jobsinfo = jobHistory.getPartialJobs(0L, 10L, null, "default", 0L, System.currentTimeMillis() + 1, 0L, System.currentTimeMillis() + 1, JobState.SUCCEEDED)-->Line_19 $$ Assert.assertEquals(1, jobsinfo.getJobs().size())[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_17 $$ Assert.assertEquals(1, jobHistory.getAllJobs(app.getAppID()).size())[ FD ]
Line_2 $$ public void testJobHistoryMethods() throws Exception -->Line_3 $$ LOG.info("STARTING testJobHistoryMethods")[ CD ]
Line_5 $$ Configuration configuration = new Configuration()-->Line_7 $$ RackResolver.init(configuration)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_15 $$ jobHistory.init(configuration)[ FD ]
Line_5 $$ Configuration configuration = new Configuration()-->Line_9 $$ app.submit(configuration)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_22 $$ Assert.assertEquals("Job History Server", jobHistory.getApplicationName())[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_20 $$ Assert.assertNotNull(jobHistory.getApplicationAttemptId())[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_13 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_21 $$ Assert.assertEquals("application_0_0000", jobHistory.getApplicationID().toString())[ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_12 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_17 $$ Assert.assertEquals(1, jobHistory.getAllJobs(app.getAppID()).size())[ FD ]
Line_5 $$ Configuration configuration = new Configuration()-->Line_6 $$ configuration.setClass(NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_13 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_24 $$ Assert.assertNull(jobHistory.getClock())[ FD ]
Line_5 $$ Configuration configuration = new Configuration()-->Line_15 $$ jobHistory.init(configuration)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_18 $$ JobsInfo jobsinfo = jobHistory.getPartialJobs(0L, 10L, null, "default", 0L, System.currentTimeMillis() + 1, 0L, System.currentTimeMillis() + 1, JobState.SUCCEEDED)[ FD ]
