Line_7 $$ Set<JmsListener> listenerMethods = AnnotationUtils.getRepeatableAnnotations(method, JmsListener.class, JmsListeners.class)-->Line_8 $$ return (!listenerMethods.isEmpty() ? listenerMethods : null)[ FD ]
Line_3 $$ if (!this.nonAnnotatedClasses.contains(bean.getClass())) -->Line_11 $$ if (annotatedMethods.isEmpty()) [ CD ]
Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() -->Line_17 $$ for (Map.Entry<Method, Set<JmsListener>> entry : annotatedMethods.entrySet()) [ FD ]
Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() -->Line_7 $$ Set<JmsListener> listenerMethods = AnnotationUtils.getRepeatableAnnotations(method, JmsListener.class, JmsListeners.class)[ CD ]
Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() -->Line_11 $$ if (annotatedMethods.isEmpty()) [ FD ]
Line_4 $$ Class<?> targetClass = AopUtils.getTargetClass(bean)-->Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() [ FD ]
Line_11 $$ if (annotatedMethods.isEmpty()) -->Line_23 $$ if (logger.isDebugEnabled()) [ CD ]
Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() -->Line_8 $$ return (!listenerMethods.isEmpty() ? listenerMethods : null)[ CD ]
Line_3 $$ if (!this.nonAnnotatedClasses.contains(bean.getClass())) -->Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() [ CD ]
Line_2 $$ public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException -->Line_12 $$ this.nonAnnotatedClasses.add(bean.getClass())[ FD ]
Line_2 $$ public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException -->Line_28 $$ return bean[ CD ]
Line_11 $$ if (annotatedMethods.isEmpty()) -->Line_12 $$ this.nonAnnotatedClasses.add(bean.getClass())[ CD ]
Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() -->Line_20 $$ processJmsListener(listener, method, bean)[ FD ]
Line_11 $$ if (annotatedMethods.isEmpty()) -->Line_13 $$ if (logger.isTraceEnabled()) [ CD ]
Line_2 $$ public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException -->Line_20 $$ processJmsListener(listener, method, bean)[ FD ]
Line_3 $$ if (!this.nonAnnotatedClasses.contains(bean.getClass())) -->Line_4 $$ Class<?> targetClass = AopUtils.getTargetClass(bean)[ CD ]
Line_2 $$ public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException -->Line_3 $$ if (!this.nonAnnotatedClasses.contains(bean.getClass())) [ FD ]
Line_2 $$ public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException -->Line_4 $$ Class<?> targetClass = AopUtils.getTargetClass(bean)[ FD ]
Line_23 $$ if (logger.isDebugEnabled()) -->Line_24 $$ logger.debug(annotatedMethods.size() + " @JmsListener methods processed on bean '" + beanName + "': " + annotatedMethods)[ CD ]
Line_2 $$ public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException -->Line_14 $$ logger.trace("No @JmsListener annotations found on bean type: " + bean.getClass())[ FD ]
Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() -->Line_24 $$ logger.debug(annotatedMethods.size() + " @JmsListener methods processed on bean '" + beanName + "': " + annotatedMethods)[ FD ]
Line_5 $$ Map<Method, Set<JmsListener>> annotatedMethods = MethodIntrospector.selectMethods(targetClass, new MethodIntrospector.MetadataLookup<Set<JmsListener>>() -->Line_7 $$ Set<JmsListener> listenerMethods = AnnotationUtils.getRepeatableAnnotations(method, JmsListener.class, JmsListeners.class)[ FD ]
Line_2 $$ public Object postProcessAfterInitialization(final Object bean, String beanName) throws BeansException -->Line_3 $$ if (!this.nonAnnotatedClasses.contains(bean.getClass())) [ CD ]
Line_13 $$ if (logger.isTraceEnabled()) -->Line_14 $$ logger.trace("No @JmsListener annotations found on bean type: " + bean.getClass())[ CD ]
