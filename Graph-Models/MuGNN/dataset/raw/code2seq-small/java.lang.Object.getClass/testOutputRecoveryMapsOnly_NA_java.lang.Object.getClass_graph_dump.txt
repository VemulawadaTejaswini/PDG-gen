Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_14 $$ Task mapTask1 = it.next()[ CD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_33 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_33 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setBoolean("mapred.mapper.new-api", true)[ FD ]
Line_32 $$ job = app.submit(conf)-->Line_34 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_27 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_31 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduce1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduce1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_16 $$ Task reduceTask1 = it.next()-->Line_52 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_50 $$ writeOutput(reduce1Attempt1, conf)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_44 $$ app.waitForState(task2Attempt1, TaskAttemptState.RUNNING)[ CD ]
Line_14 $$ Task mapTask1 = it.next()-->Line_40 $$ task1Attempt1 = mapTask1.getAttempts().values().iterator().next()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_54 $$ app.verifyCompleted()[ FD ]
Line_3 $$ int runCount = 0-->Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)[ FD ]
Line_3 $$ int runCount = 0-->Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_30 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_11 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_27 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_31 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_32 $$ job = app.submit(conf)-->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_43 $$ TaskAttempt task2Attempt1 = mapTask2.getAttempts().values().iterator().next()-->Line_44 $$ app.waitForState(task2Attempt1, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_33 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_52 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_10 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_35 $$ it = job.getTasks().values().iterator()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_19 $$ app.waitForState(task1Attempt1, TaskAttemptState.RUNNING)[ CD ]
Line_15 $$ Task mapTask2 = it.next()-->Line_46 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_42 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_38 $$ reduceTask1 = it.next()-->Line_49 $$ TaskAttempt reduce1Attempt1 = reduceTask1.getAttempts().values().iterator().next()[ FD ]
Line_15 $$ Task mapTask2 = it.next()-->Line_42 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_16 $$ Task reduceTask1 = it.next()[ FD ]
Line_10 $$ Job job = app.submit(conf)-->Line_32 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_38 $$ reduceTask1 = it.next()[ CD ]
Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_14 $$ Task mapTask1 = it.next()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_19 $$ app.waitForState(task1Attempt1, TaskAttemptState.RUNNING)[ FD ]
Line_18 $$ TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next()-->Line_20 $$ writeBadOutput(task1Attempt1, conf)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_26 $$ conf = new Configuration()[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_36 $$ mapTask1 = it.next()[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_42 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_10 $$ Job job = app.submit(conf)-->Line_34 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
Line_37 $$ mapTask2 = it.next()-->Line_42 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_34 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ CD ]
Line_36 $$ mapTask1 = it.next()-->Line_39 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_35 $$ it = job.getTasks().values().iterator()-->Line_36 $$ mapTask1 = it.next()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_38 $$ reduceTask1 = it.next()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_32 $$ job = app.submit(conf)[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_42 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_10 $$ Job job = app.submit(conf)[ CD ]
Line_16 $$ Task reduceTask1 = it.next()-->Line_48 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_37 $$ mapTask2 = it.next()[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_28 $$ conf.setBoolean("mapred.mapper.new-api", true)[ FD ]
Line_14 $$ Task mapTask1 = it.next()-->Line_18 $$ TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next()[ FD ]
Line_26 $$ conf = new Configuration()-->Line_32 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_18 $$ TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next()[ CD ]
Line_18 $$ TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next()-->Line_19 $$ app.waitForState(task1Attempt1, TaskAttemptState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_15 $$ Task mapTask2 = it.next()-->Line_37 $$ mapTask2 = it.next()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_29 $$ conf.setBoolean("mapred.reducer.new-api", true)[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_7 $$ conf.setBoolean("mapred.reducer.new-api", true)[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_49 $$ TaskAttempt reduce1Attempt1 = reduceTask1.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_43 $$ TaskAttempt task2Attempt1 = mapTask2.getAttempts().values().iterator().next()[ CD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_32 $$ job = app.submit(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_26 $$ conf = new Configuration()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_46 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ CD ]
Line_38 $$ reduceTask1 = it.next()-->Line_48 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ FD ]
Line_10 $$ Job job = app.submit(conf)-->Line_11 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_17 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_20 $$ writeBadOutput(task1Attempt1, conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_24 $$ app.stop()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_41 $$ Assert.assertEquals(5467, task1Attempt1.getShufflePort())[ CD ]
Line_14 $$ Task mapTask1 = it.next()-->Line_22 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_32 $$ job = app.submit(conf)-->Line_33 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_39 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_29 $$ conf.setBoolean("mapred.reducer.new-api", true)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_32 $$ job = app.submit(conf)[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_24 $$ app.stop()[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_22 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_46 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_14 $$ Task mapTask1 = it.next()-->Line_17 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_22 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_11 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_35 $$ it = job.getTasks().values().iterator()-->Line_37 $$ mapTask2 = it.next()[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_44 $$ app.waitForState(task2Attempt1, TaskAttemptState.RUNNING)[ FD ]
Line_43 $$ TaskAttempt task2Attempt1 = mapTask2.getAttempts().values().iterator().next()-->Line_47 $$ Assert.assertEquals(5467, task2Attempt1.getShufflePort())[ FD ]
Line_36 $$ mapTask1 = it.next()-->Line_40 $$ task1Attempt1 = mapTask1.getAttempts().values().iterator().next()[ FD ]
Line_16 $$ Task reduceTask1 = it.next()-->Line_49 $$ TaskAttempt reduce1Attempt1 = reduceTask1.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_9 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ CD ]
Line_10 $$ Job job = app.submit(conf)-->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_16 $$ Task reduceTask1 = it.next()[ CD ]
Line_38 $$ reduceTask1 = it.next()-->Line_52 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_37 $$ mapTask2 = it.next()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_9 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_48 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_28 $$ conf.setBoolean("mapred.mapper.new-api", true)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_32 $$ job = app.submit(conf)[ FD ]
Line_49 $$ TaskAttempt reduce1Attempt1 = reduceTask1.getAttempts().values().iterator().next()-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduce1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_43 $$ TaskAttempt task2Attempt1 = mapTask2.getAttempts().values().iterator().next()-->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_40 $$ task1Attempt1 = mapTask1.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_3 $$ int runCount = 0[ CD ]
Line_18 $$ TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next()-->Line_41 $$ Assert.assertEquals(5467, task1Attempt1.getShufflePort())[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_35 $$ it = job.getTasks().values().iterator()-->Line_38 $$ reduceTask1 = it.next()[ FD ]
Line_16 $$ Task reduceTask1 = it.next()-->Line_38 $$ reduceTask1 = it.next()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_30 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_44 $$ app.waitForState(task2Attempt1, TaskAttemptState.RUNNING)[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_48 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_20 $$ writeBadOutput(task1Attempt1, conf)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_10 $$ Job job = app.submit(conf)-->Line_35 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_55 $$ validateOutput()[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_12 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_39 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_26 $$ conf = new Configuration()-->Line_29 $$ conf.setBoolean("mapred.reducer.new-api", true)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_50 $$ writeOutput(reduce1Attempt1, conf)[ CD ]
Line_14 $$ Task mapTask1 = it.next()-->Line_36 $$ mapTask1 = it.next()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_8 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_40 $$ task1Attempt1 = mapTask1.getAttempts().values().iterator().next()-->Line_41 $$ Assert.assertEquals(5467, task1Attempt1.getShufflePort())[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_10 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_18 $$ TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next()-->Line_40 $$ task1Attempt1 = mapTask1.getAttempts().values().iterator().next()[ FD ]
Line_14 $$ Task mapTask1 = it.next()-->Line_39 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_10 $$ Job job = app.submit(conf)-->Line_33 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setBoolean("mapred.reducer.new-api", true)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_23 $$ Assert.assertEquals(5467, task1Attempt1.getShufflePort())[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_50 $$ writeOutput(reduce1Attempt1, conf)[ FD ]
Line_37 $$ mapTask2 = it.next()-->Line_43 $$ TaskAttempt task2Attempt1 = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_26 $$ conf = new Configuration()-->Line_30 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_46 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_32 $$ job = app.submit(conf)-->Line_35 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ CD ]
Line_26 $$ conf = new Configuration()-->Line_31 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_52 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ CD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_54 $$ app.verifyCompleted()[ CD ]
Line_18 $$ TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next()-->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_37 $$ mapTask2 = it.next()-->Line_46 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_54 $$ app.verifyCompleted()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_15 $$ Task mapTask2 = it.next()[ CD ]
Line_18 $$ TaskAttempt task1Attempt1 = mapTask1.getAttempts().values().iterator().next()-->Line_23 $$ Assert.assertEquals(5467, task1Attempt1.getShufflePort())[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_47 $$ Assert.assertEquals(5467, task2Attempt1.getShufflePort())[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_45 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_52 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_36 $$ mapTask1 = it.next()[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_53 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_28 $$ conf.setBoolean("mapred.mapper.new-api", true)[ CD ]
Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_35 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_6 $$ conf.setBoolean("mapred.mapper.new-api", true)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_17 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_15 $$ Task mapTask2 = it.next()[ FD ]
Line_49 $$ TaskAttempt reduce1Attempt1 = reduceTask1.getAttempts().values().iterator().next()-->Line_50 $$ writeOutput(reduce1Attempt1, conf)[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduce1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_10 $$ Job job = app.submit(conf)-->Line_13 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_27 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ FD ]
Line_25 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_39 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testOutputRecoveryMapsOnly() throws Exception -->Line_48 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ CD ]
Line_15 $$ Task mapTask2 = it.next()-->Line_43 $$ TaskAttempt task2Attempt1 = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_10 $$ Job job = app.submit(conf)-->Line_12 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
