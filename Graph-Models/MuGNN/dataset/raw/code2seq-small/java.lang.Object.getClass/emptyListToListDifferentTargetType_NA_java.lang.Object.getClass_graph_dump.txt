Line_5 $$ List<String> list = new ArrayList<String>()-->Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)[ FD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyListDifferentTarget"))[ CD ]
Line_9 $$ LinkedList<Integer> result = (LinkedList<Integer>) conversionService.convert(list, sourceType, targetType)-->Line_10 $$ assertEquals(LinkedList.class, result.getClass())[ FD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_11 $$ assertTrue(result.isEmpty())[ CD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)[ CD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_4 $$ conversionService.addConverterFactory(new StringToNumberConverterFactory())[ CD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_5 $$ List<String> list = new ArrayList<String>()[ CD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)-->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_6 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)-->Line_9 $$ LinkedList<Integer> result = (LinkedList<Integer>) conversionService.convert(list, sourceType, targetType)[ FD ]
Line_5 $$ List<String> list = new ArrayList<String>()-->Line_9 $$ LinkedList<Integer> result = (LinkedList<Integer>) conversionService.convert(list, sourceType, targetType)[ FD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_9 $$ LinkedList<Integer> result = (LinkedList<Integer>) conversionService.convert(list, sourceType, targetType)[ CD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_3 $$ conversionService.addConverter(new CollectionToCollectionConverter(conversionService))[ CD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyListDifferentTarget"))-->Line_9 $$ LinkedList<Integer> result = (LinkedList<Integer>) conversionService.convert(list, sourceType, targetType)[ FD ]
Line_9 $$ LinkedList<Integer> result = (LinkedList<Integer>) conversionService.convert(list, sourceType, targetType)-->Line_11 $$ assertTrue(result.isEmpty())[ FD ]
Line_2 $$ public void emptyListToListDifferentTargetType() throws Exception -->Line_10 $$ assertEquals(LinkedList.class, result.getClass())[ CD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyListDifferentTarget"))-->Line_8 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
