Line_4 $$ HandlerExceptionResolverComposite compositeResolver = context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class)-->Line_5 $$ assertEquals(0, compositeResolver.getOrder())[ FD ]
Line_19 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/")-->Line_21 $$ rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException())[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_8 $$ assertEquals(ResponseStatusExceptionResolver.class, expectedResolvers.get(1).getClass())[ CD ]
Line_10 $$ ExceptionHandlerExceptionResolver eher = (ExceptionHandlerExceptionResolver) expectedResolvers.get(0)-->Line_11 $$ assertNotNull(eher.getApplicationContext())[ FD ]
Line_6 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_8 $$ assertEquals(ResponseStatusExceptionResolver.class, expectedResolvers.get(1).getClass())[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_6 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()[ CD ]
Line_6 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_10 $$ ExceptionHandlerExceptionResolver eher = (ExceptionHandlerExceptionResolver) expectedResolvers.get(0)[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_14 $$ assertEquals(1, interceptors.size())[ CD ]
Line_13 $$ List<Object> interceptors = (List<Object>) fieldAccessor.getPropertyValue("responseBodyAdvice")-->Line_14 $$ assertEquals(1, interceptors.size())[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_9 $$ assertEquals(DefaultHandlerExceptionResolver.class, expectedResolvers.get(2).getClass())[ CD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_4 $$ HandlerExceptionResolverComposite compositeResolver = context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class)[ CD ]
Line_3 $$ ApplicationContext context = initContext(WebConfig.class)-->Line_4 $$ HandlerExceptionResolverComposite compositeResolver = context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class)[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_12 $$ DirectFieldAccessor fieldAccessor = new DirectFieldAccessor(eher)[ CD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_7 $$ assertEquals(ExceptionHandlerExceptionResolver.class, expectedResolvers.get(0).getClass())[ CD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_3 $$ ApplicationContext context = initContext(WebConfig.class)[ CD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_15 $$ assertEquals(JsonViewResponseBodyAdvice.class, interceptors.get(0).getClass())[ CD ]
Line_20 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_22 $$ assertEquals("User already exists!", response.getErrorMessage())[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_5 $$ assertEquals(0, compositeResolver.getOrder())[ CD ]
Line_6 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_7 $$ assertEquals(ExceptionHandlerExceptionResolver.class, expectedResolvers.get(0).getClass())[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_16 $$ LocaleContextHolder.setLocale(Locale.ENGLISH)[ CD ]
Line_6 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_18 $$ ResponseStatusExceptionResolver rser = (ResponseStatusExceptionResolver) expectedResolvers.get(1)[ FD ]
Line_18 $$ ResponseStatusExceptionResolver rser = (ResponseStatusExceptionResolver) expectedResolvers.get(1)-->Line_21 $$ rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException())[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_10 $$ ExceptionHandlerExceptionResolver eher = (ExceptionHandlerExceptionResolver) expectedResolvers.get(0)[ CD ]
Line_3 $$ ApplicationContext context = initContext(WebConfig.class)-->Line_21 $$ rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException())[ FD ]
Line_6 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()-->Line_9 $$ assertEquals(DefaultHandlerExceptionResolver.class, expectedResolvers.get(2).getClass())[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_11 $$ assertNotNull(eher.getApplicationContext())[ CD ]
Line_13 $$ List<Object> interceptors = (List<Object>) fieldAccessor.getPropertyValue("responseBodyAdvice")-->Line_15 $$ assertEquals(JsonViewResponseBodyAdvice.class, interceptors.get(0).getClass())[ FD ]
Line_12 $$ DirectFieldAccessor fieldAccessor = new DirectFieldAccessor(eher)-->Line_13 $$ List<Object> interceptors = (List<Object>) fieldAccessor.getPropertyValue("responseBodyAdvice")[ FD ]
Line_2 $$ public void handlerExceptionResolver() throws Exception -->Line_13 $$ List<Object> interceptors = (List<Object>) fieldAccessor.getPropertyValue("responseBodyAdvice")[ CD ]
Line_4 $$ HandlerExceptionResolverComposite compositeResolver = context.getBean("handlerExceptionResolver", HandlerExceptionResolverComposite.class)-->Line_6 $$ List<HandlerExceptionResolver> expectedResolvers = compositeResolver.getExceptionResolvers()[ FD ]
Line_20 $$ MockHttpServletResponse response = new MockHttpServletResponse()-->Line_21 $$ rser.resolveException(request, response, context.getBean(TestController.class), new UserAlreadyExistsException())[ FD ]
