Line_2 $$ private <T> T invokeMethod(@NonNls String methodName, final boolean ignoreErrors, Object... params) -->Line_10 $$ return (T) method.invoke(myHelper, params)[ FD ]
Line_20 $$ final Throwable cause = e.getCause()-->Line_21 $$ if (cause instanceof RuntimeException) [ FD ]
Line_2 $$ private <T> T invokeMethod(@NonNls String methodName, final boolean ignoreErrors, Object... params) -->Line_4 $$ final Class[] types = new Class[params.length][ CD ]
Line_2 $$ private <T> T invokeMethod(@NonNls String methodName, final boolean ignoreErrors, Object... params) -->Line_3 $$ final Class helperClass = myHelper.getClass()[ CD ]
Line_6 $$ for (int idx = 0; idx < params.length; idx++) -->Line_7 $$ types[idx] = params[idx].getClass()[ CD ]
Line_27 $$ if (!ignoreErrors) -->Line_28 $$ LOG.error(e)[ CD ]
Line_12 $$ if (!ignoreErrors) -->Line_13 $$ LOG.error(e)[ CD ]
Line_2 $$ private <T> T invokeMethod(@NonNls String methodName, final boolean ignoreErrors, Object... params) -->Line_16 $$ if (!ignoreErrors) [ FD ]
Line_16 $$ if (!ignoreErrors) -->Line_17 $$ LOG.error(e)[ CD ]
Line_20 $$ final Throwable cause = e.getCause()-->Line_24 $$ if (cause instanceof Error) [ FD ]
Line_9 $$ final Method method = helperClass.getMethod(methodName, types)-->Line_10 $$ return (T) method.invoke(myHelper, params)[ FD ]
Line_2 $$ private <T> T invokeMethod(@NonNls String methodName, final boolean ignoreErrors, Object... params) -->Line_12 $$ if (!ignoreErrors) [ FD ]
Line_2 $$ private <T> T invokeMethod(@NonNls String methodName, final boolean ignoreErrors, Object... params) -->Line_27 $$ if (!ignoreErrors) [ FD ]
Line_3 $$ final Class helperClass = myHelper.getClass()-->Line_9 $$ final Method method = helperClass.getMethod(methodName, types)[ FD ]
Line_4 $$ final Class[] types = new Class[params.length]-->Line_9 $$ final Method method = helperClass.getMethod(methodName, types)[ FD ]
Line_2 $$ private <T> T invokeMethod(@NonNls String methodName, final boolean ignoreErrors, Object... params) -->Line_9 $$ final Method method = helperClass.getMethod(methodName, types)[ FD ]
Line_2 $$ private <T> T invokeMethod(@NonNls String methodName, final boolean ignoreErrors, Object... params) -->Line_31 $$ return null[ CD ]
