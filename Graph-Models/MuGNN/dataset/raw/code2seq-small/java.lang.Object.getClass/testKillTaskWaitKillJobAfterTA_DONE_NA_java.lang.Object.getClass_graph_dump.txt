Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_25 $$ latch.countDown()[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_13 $$ Assert.assertEquals("Num tasks not correct", 2, job.getTasks().size())[ CD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_23 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_22 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ FD ]
Line_3 $$ CountDownLatch latch = new CountDownLatch(1)-->Line_25 $$ latch.countDown()[ FD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) [ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_26 $$ app.waitForInternalState((JobImpl) job, JobStateInternal.KILLED)[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_4 $$ final Dispatcher dispatcher = new MyAsyncDispatch(latch, TaskAttemptEventType.TA_DONE)[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_10 $$ Job job = app.submit(new Configuration())[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_15 $$ Task mapTask = it.next()[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_16 $$ Task reduceTask = it.next()[ CD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_10 $$ Job job = app.submit(new Configuration())[ FD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_11 $$ JobId jobId = app.getJobId()[ FD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_24 $$ app.getContext().getEventHandler().handle(new JobEvent(jobId, JobEventType.JOB_KILL))[ FD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_17 $$ app.waitForState(mapTask, TaskState.RUNNING)[ CD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_12 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_14 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_18 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_18 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ CD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_7 $$ return dispatcher[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_12 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_20 $$ app.waitForState(mapAttempt, TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_3 $$ CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_22 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_21 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_23 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_24 $$ app.getContext().getEventHandler().handle(new JobEvent(jobId, JobEventType.JOB_KILL))[ CD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_26 $$ app.waitForInternalState((JobImpl) job, JobStateInternal.KILLED)[ FD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_17 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_11 $$ JobId jobId = app.getJobId()[ CD ]
Line_2 $$ public void testKillTaskWaitKillJobAfterTA_DONE() throws Exception -->Line_19 $$ TaskAttempt mapAttempt = mapTask.getAttempts().values().iterator().next()[ CD ]
Line_5 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_20 $$ app.waitForState(mapAttempt, TaskAttemptState.RUNNING)[ FD ]
