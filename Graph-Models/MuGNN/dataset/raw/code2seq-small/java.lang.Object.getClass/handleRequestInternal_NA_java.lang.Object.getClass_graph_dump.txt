Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_9 $$ handleReadError(response, "Payload expected.", sockJsSession.getId())[ FD ]
Line_19 $$ if (messages == null) -->Line_21 $$ return[ CD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_28 $$ sockJsSession.delegateMessages(messages)[ FD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_27 $$ response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))[ CD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_28 $$ sockJsSession.delegateMessages(messages)[ CD ]
Line_19 $$ if (messages == null) -->Line_20 $$ handleReadError(response, "Payload expected.", sockJsSession.getId())[ CD ]
Line_23 $$ if (logger.isTraceEnabled()) -->Line_24 $$ logger.trace("Received message(s): " + Arrays.asList(messages))[ CD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_3 $$ String[] messages[ CD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_26 $$ response.setStatusCode(getResponseStatus())[ FD ]
Line_3 $$ String[] messages-->Line_28 $$ sockJsSession.delegateMessages(messages)[ FD ]
Line_5 $$ messages = readMessages(request)-->Line_19 $$ if (messages == null) [ FD ]
Line_5 $$ messages = readMessages(request)-->Line_24 $$ logger.trace("Received message(s): " + Arrays.asList(messages))[ FD ]
Line_8 $$ if (ex.getClass().getName().contains("Mapping")) -->Line_9 $$ handleReadError(response, "Payload expected.", sockJsSession.getId())[ CD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_19 $$ if (messages == null) [ CD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_23 $$ if (logger.isTraceEnabled()) [ CD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_5 $$ messages = readMessages(request)[ FD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_20 $$ handleReadError(response, "Payload expected.", sockJsSession.getId())[ FD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_27 $$ response.getHeaders().setContentType(new MediaType("text", "plain", UTF8_CHARSET))[ FD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_16 $$ handleReadError(response, "Failed to read message(s)", sockJsSession.getId())[ FD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_11 $$ handleReadError(response, "Broken JSON encoding.", sockJsSession.getId())[ FD ]
Line_3 $$ String[] messages-->Line_19 $$ if (messages == null) [ FD ]
Line_3 $$ String[] messages-->Line_24 $$ logger.trace("Received message(s): " + Arrays.asList(messages))[ FD ]
Line_3 $$ String[] messages-->Line_5 $$ messages = readMessages(request)[ FD ]
Line_2 $$ protected void handleRequestInternal(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, AbstractHttpSockJsSession sockJsSession) throws SockJsException -->Line_26 $$ response.setStatusCode(getResponseStatus())[ CD ]
Line_8 $$ if (ex.getClass().getName().contains("Mapping")) -->Line_11 $$ handleReadError(response, "Broken JSON encoding.", sockJsSession.getId())[ CD ]
Line_5 $$ messages = readMessages(request)-->Line_28 $$ sockJsSession.delegateMessages(messages)[ FD ]
