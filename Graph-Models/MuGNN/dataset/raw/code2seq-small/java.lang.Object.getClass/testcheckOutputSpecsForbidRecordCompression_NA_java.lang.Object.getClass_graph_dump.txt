Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_12 $$ FileOutputFormat.setWorkOutputPath(job, dir)[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_23 $$ new SequenceFileAsBinaryOutputFormat().checkOutputSpecs(fs, job)[ FD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_8 $$ fs.delete(outputdir, true)[ CD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(job)-->Line_8 $$ fs.delete(outputdir, true)[ FD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_13 $$ FileOutputFormat.setOutputPath(job, outputdir)[ CD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_6 $$ Path outputdir = new Path(System.getProperty("test.build.data", ".") + "/output")[ CD ]
Line_5 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")-->Line_9 $$ if (!fs.mkdirs(dir)) [ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_17 $$ new SequenceFileAsBinaryOutputFormat().checkOutputSpecs(fs, job)[ FD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(job)-->Line_9 $$ if (!fs.mkdirs(dir)) [ FD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_9 $$ if (!fs.mkdirs(dir)) [ CD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_21 $$ SequenceFileAsBinaryOutputFormat.setOutputCompressionType(job, CompressionType.RECORD)[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_13 $$ FileOutputFormat.setOutputPath(job, outputdir)[ FD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(job)-->Line_7 $$ fs.delete(dir, true)[ FD ]
Line_9 $$ if (!fs.mkdirs(dir)) -->Line_10 $$ fail("Failed to create output directory")[ CD ]
Line_3 $$ JobConf job = new JobConf()-->Line_4 $$ FileSystem fs = FileSystem.getLocal(job)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_14 $$ SequenceFileAsBinaryOutputFormat.setCompressOutput(job, true)[ FD ]
Line_5 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")-->Line_12 $$ FileOutputFormat.setWorkOutputPath(job, dir)[ FD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_3 $$ JobConf job = new JobConf()[ CD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_5 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")[ CD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(job)-->Line_23 $$ new SequenceFileAsBinaryOutputFormat().checkOutputSpecs(fs, job)[ FD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_15 $$ SequenceFileAsBinaryOutputFormat.setOutputCompressionType(job, CompressionType.BLOCK)[ CD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_14 $$ SequenceFileAsBinaryOutputFormat.setCompressOutput(job, true)[ CD ]
Line_6 $$ Path outputdir = new Path(System.getProperty("test.build.data", ".") + "/output")-->Line_8 $$ fs.delete(outputdir, true)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_12 $$ FileOutputFormat.setWorkOutputPath(job, dir)[ FD ]
Line_5 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")-->Line_7 $$ fs.delete(dir, true)[ FD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_4 $$ FileSystem fs = FileSystem.getLocal(job)[ CD ]
Line_6 $$ Path outputdir = new Path(System.getProperty("test.build.data", ".") + "/output")-->Line_13 $$ FileOutputFormat.setOutputPath(job, outputdir)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_21 $$ SequenceFileAsBinaryOutputFormat.setOutputCompressionType(job, CompressionType.RECORD)[ FD ]
Line_2 $$ public void testcheckOutputSpecsForbidRecordCompression() throws IOException -->Line_7 $$ fs.delete(dir, true)[ CD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(job)-->Line_17 $$ new SequenceFileAsBinaryOutputFormat().checkOutputSpecs(fs, job)[ FD ]
Line_3 $$ JobConf job = new JobConf()-->Line_15 $$ SequenceFileAsBinaryOutputFormat.setOutputCompressionType(job, CompressionType.BLOCK)[ FD ]
