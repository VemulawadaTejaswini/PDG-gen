Line_2 $$ public void testAppClientJBossDescriptor() throws Exception -->Line_7 $$ final AppClientWrapper wrapper = new AppClientWrapper(archive, " -Dnode0=" + managementClient.getMgmtAddress() + " --ejb-client-properties=" + props, "client-override.jar", "")[ CD ]
Line_3 $$ final StatelessEJBLocator<AppClientSingletonRemote> locator = new StatelessEJBLocator(AppClientSingletonRemote.class, APP_NAME, MODULE_NAME, AppClientStateSingleton.class.getSimpleName(), "")-->Line_4 $$ final AppClientSingletonRemote remote = EJBClient.createProxy(locator)[ FD ]
Line_2 $$ public void testAppClientJBossDescriptor() throws Exception -->Line_3 $$ final StatelessEJBLocator<AppClientSingletonRemote> locator = new StatelessEJBLocator(AppClientSingletonRemote.class, APP_NAME, MODULE_NAME, AppClientStateSingleton.class.getSimpleName(), "")[ CD ]
Line_2 $$ public void testAppClientJBossDescriptor() throws Exception -->Line_4 $$ final AppClientSingletonRemote remote = EJBClient.createProxy(locator)[ CD ]
Line_2 $$ public void testAppClientJBossDescriptor() throws Exception -->Line_6 $$ URL props = getClass().getClassLoader().getResource("jboss-ejb-client.properties")[ CD ]
Line_7 $$ final AppClientWrapper wrapper = new AppClientWrapper(archive, " -Dnode0=" + managementClient.getMgmtAddress() + " --ejb-client-properties=" + props, "client-override.jar", "")-->Line_10 $$ assertTrue("App client call failed. App client output: " + wrapper.readAllUnformated(1000), result != null)[ FD ]
Line_9 $$ final String result = remote.awaitAppClientCall()-->Line_11 $$ assertEquals("OverridenEnvEntry", result)[ FD ]
Line_7 $$ final AppClientWrapper wrapper = new AppClientWrapper(archive, " -Dnode0=" + managementClient.getMgmtAddress() + " --ejb-client-properties=" + props, "client-override.jar", "")-->Line_13 $$ wrapper.quit()[ FD ]
Line_4 $$ final AppClientSingletonRemote remote = EJBClient.createProxy(locator)-->Line_9 $$ final String result = remote.awaitAppClientCall()[ FD ]
Line_2 $$ public void testAppClientJBossDescriptor() throws Exception -->Line_5 $$ remote.reset()[ CD ]
Line_4 $$ final AppClientSingletonRemote remote = EJBClient.createProxy(locator)-->Line_5 $$ remote.reset()[ FD ]
