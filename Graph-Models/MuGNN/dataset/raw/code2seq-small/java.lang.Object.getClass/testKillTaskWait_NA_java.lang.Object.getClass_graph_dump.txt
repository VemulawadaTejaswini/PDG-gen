Line_18 $$ if (event instanceof TaskEvent) -->Line_19 $$ TaskEvent taskEvent = (TaskEvent) event[ CD ]
Line_6 $$ if (event instanceof TaskAttemptEvent) -->Line_18 $$ if (event instanceof TaskEvent) [ CD ]
Line_7 $$ TaskAttemptEvent killEvent = (TaskAttemptEvent) event-->Line_8 $$ if (killEvent.getType() == TaskAttemptEventType.TA_KILL) [ FD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_36 $$ Assert.assertEquals("Num tasks not correct", 2, job.getTasks().size())[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_33 $$ Job job = app.submit(new Configuration())[ CD ]
Line_8 $$ if (killEvent.getType() == TaskAttemptEventType.TA_KILL) -->Line_10 $$ if (taID.getTaskId().getTaskType() == TaskType.REDUCE && taID.getTaskId().getId() == 0 && taID.getId() == 0) [ CD ]
Line_28 $$ MRApp app = new MRApp(1, 1, false, this.getClass().getName(), true) -->Line_30 $$ return dispatcher[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_40 $$ app.waitForState(mapTask, TaskState.RUNNING)[ CD ]
Line_10 $$ if (taID.getTaskId().getTaskType() == TaskType.REDUCE && taID.getTaskId().getId() == 0 && taID.getId() == 0) -->Line_12 $$ super.dispatch(new TaskAttemptEvent(taID, TaskAttemptEventType.TA_CONTAINER_CLEANED))[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_35 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_3 $$ final Dispatcher dispatcher = new AsyncDispatcher() -->Line_25 $$ super.dispatch(event)[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_43 $$ app.waitForState(mapAttempt, TaskAttemptState.RUNNING)[ CD ]
Line_10 $$ if (taID.getTaskId().getTaskType() == TaskType.REDUCE && taID.getTaskId().getId() == 0 && taID.getId() == 0) -->Line_13 $$ super.dispatch(new TaskTAttemptEvent(taID, TaskEventType.T_ATTEMPT_SUCCEEDED))[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_34 $$ JobId jobId = app.getJobId()[ CD ]
Line_10 $$ if (taID.getTaskId().getTaskType() == TaskType.REDUCE && taID.getTaskId().getId() == 0 && taID.getId() == 0) -->Line_15 $$ return[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_37 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_7 $$ TaskAttemptEvent killEvent = (TaskAttemptEvent) event-->Line_9 $$ TaskAttemptId taID = killEvent.getTaskAttemptID()[ FD ]
Line_3 $$ final Dispatcher dispatcher = new AsyncDispatcher() -->Line_6 $$ if (event instanceof TaskAttemptEvent) [ FD ]
Line_6 $$ if (event instanceof TaskAttemptEvent) -->Line_7 $$ TaskAttemptEvent killEvent = (TaskAttemptEvent) event[ CD ]
Line_3 $$ final Dispatcher dispatcher = new AsyncDispatcher() -->Line_25 $$ super.dispatch(event)[ FD ]
Line_3 $$ final Dispatcher dispatcher = new AsyncDispatcher() -->Line_18 $$ if (event instanceof TaskEvent) [ FD ]
Line_18 $$ if (event instanceof TaskEvent) -->Line_20 $$ if (taskEvent.getType() == TaskEventType.T_ATTEMPT_SUCCEEDED && this.cachedKillEvent != null) [ CD ]
Line_8 $$ if (killEvent.getType() == TaskAttemptEventType.TA_KILL) -->Line_9 $$ TaskAttemptId taID = killEvent.getTaskAttemptID()[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_46 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_39 $$ Task reduceTask = it.next()[ CD ]
Line_10 $$ if (taID.getTaskId().getTaskType() == TaskType.REDUCE && taID.getTaskId().getId() == 0 && taID.getId() == 0) -->Line_14 $$ this.cachedKillEvent = killEvent[ CD ]
Line_7 $$ TaskAttemptEvent killEvent = (TaskAttemptEvent) event-->Line_14 $$ this.cachedKillEvent = killEvent[ FD ]
Line_20 $$ if (taskEvent.getType() == TaskEventType.T_ATTEMPT_SUCCEEDED && this.cachedKillEvent != null) -->Line_22 $$ return[ CD ]
Line_9 $$ TaskAttemptId taID = killEvent.getTaskAttemptID()-->Line_10 $$ if (taID.getTaskId().getTaskType() == TaskType.REDUCE && taID.getTaskId().getId() == 0 && taID.getId() == 0) [ FD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_44 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_49 $$ app.waitForInternalState((JobImpl) job, JobStateInternal.KILLED)[ CD ]
Line_20 $$ if (taskEvent.getType() == TaskEventType.T_ATTEMPT_SUCCEEDED && this.cachedKillEvent != null) -->Line_21 $$ super.dispatch(this.cachedKillEvent)[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_42 $$ TaskAttempt mapAttempt = mapTask.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_45 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ CD ]
Line_19 $$ TaskEvent taskEvent = (TaskEvent) event-->Line_20 $$ if (taskEvent.getType() == TaskEventType.T_ATTEMPT_SUCCEEDED && this.cachedKillEvent != null) [ FD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_38 $$ Task mapTask = it.next()[ CD ]
Line_3 $$ final Dispatcher dispatcher = new AsyncDispatcher() -->Line_6 $$ if (event instanceof TaskAttemptEvent) [ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_41 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ CD ]
Line_10 $$ if (taID.getTaskId().getTaskType() == TaskType.REDUCE && taID.getTaskId().getId() == 0 && taID.getId() == 0) -->Line_11 $$ super.dispatch(new TaskAttemptEvent(taID, TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_47 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_48 $$ app.getContext().getEventHandler().handle(new JobEvent(jobId, JobEventType.JOB_KILL))[ CD ]
Line_6 $$ if (event instanceof TaskAttemptEvent) -->Line_8 $$ if (killEvent.getType() == TaskAttemptEventType.TA_KILL) [ CD ]
Line_2 $$ public void testKillTaskWait() throws Exception -->Line_3 $$ final Dispatcher dispatcher = new AsyncDispatcher() [ CD ]
