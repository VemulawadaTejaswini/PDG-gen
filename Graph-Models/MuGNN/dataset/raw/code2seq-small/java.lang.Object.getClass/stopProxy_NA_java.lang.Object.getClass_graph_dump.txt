Line_7 $$ if (proxy instanceof Closeable) -->Line_8 $$ ((Closeable) proxy).close()[ CD ]
Line_2 $$ public static void stopProxy(Object proxy) -->Line_3 $$ if (proxy == null) [ CD ]
Line_7 $$ if (proxy instanceof Closeable) -->Line_11 $$ InvocationHandler handler = Proxy.getInvocationHandler(proxy)[ CD ]
Line_11 $$ InvocationHandler handler = Proxy.getInvocationHandler(proxy)-->Line_12 $$ if (handler instanceof Closeable) [ FD ]
Line_12 $$ if (handler instanceof Closeable) -->Line_14 $$ return[ CD ]
Line_2 $$ public static void stopProxy(Object proxy) -->Line_7 $$ if (proxy instanceof Closeable) [ FD ]
Line_7 $$ if (proxy instanceof Closeable) -->Line_9 $$ return[ CD ]
Line_2 $$ public static void stopProxy(Object proxy) -->Line_20 $$ LOG.error("RPC.stopProxy called on non proxy: class=" + proxy.getClass().getName(), e)[ FD ]
Line_2 $$ public static void stopProxy(Object proxy) -->Line_3 $$ if (proxy == null) [ FD ]
Line_2 $$ public static void stopProxy(Object proxy) -->Line_22 $$ throw new HadoopIllegalArgumentException("Cannot close proxy - is not Closeable or " + "does not provide closeable invocation handler " + proxy.getClass())[ FD ]
Line_12 $$ if (handler instanceof Closeable) -->Line_13 $$ ((Closeable) handler).close()[ CD ]
Line_2 $$ public static void stopProxy(Object proxy) -->Line_11 $$ InvocationHandler handler = Proxy.getInvocationHandler(proxy)[ FD ]
Line_7 $$ if (proxy instanceof Closeable) -->Line_12 $$ if (handler instanceof Closeable) [ CD ]
