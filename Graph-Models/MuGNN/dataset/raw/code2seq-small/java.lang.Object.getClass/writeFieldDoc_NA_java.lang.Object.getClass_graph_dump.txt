Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_22 $$ out.writeByte((byte) 5)[ FD ]
Line_30 $$ if (type == Boolean.class) -->Line_33 $$ if (type == BytesRef.class) [ CD ]
Line_5 $$ if (field == null) -->Line_8 $$ Class type = field.getClass()[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_19 $$ out.writeByte((byte) 4)[ FD ]
Line_21 $$ if (type == Double.class) -->Line_23 $$ out.writeDouble((Double) field)[ CD ]
Line_30 $$ if (type == Boolean.class) -->Line_32 $$ out.writeBoolean((Boolean) field)[ CD ]
Line_5 $$ if (field == null) -->Line_9 $$ if (type == String.class) [ CD ]
Line_8 $$ Class type = field.getClass()-->Line_18 $$ if (type == Float.class) [ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_20 $$ out.writeFloat((Float) field)[ FD ]
Line_27 $$ if (type == Short.class) -->Line_28 $$ out.writeByte((byte) 7)[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_34 $$ out.writeByte((byte) 9)[ FD ]
Line_18 $$ if (type == Float.class) -->Line_19 $$ out.writeByte((byte) 4)[ CD ]
Line_33 $$ if (type == BytesRef.class) -->Line_34 $$ out.writeByte((byte) 9)[ CD ]
Line_27 $$ if (type == Short.class) -->Line_29 $$ out.writeShort((Short) field)[ CD ]
Line_21 $$ if (type == Double.class) -->Line_22 $$ out.writeByte((byte) 5)[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_42 $$ out.writeFloat(fieldDoc.score)[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_3 $$ out.writeVInt(fieldDoc.fields.length)[ FD ]
Line_24 $$ if (type == Byte.class) -->Line_25 $$ out.writeByte((byte) 6)[ CD ]
Line_4 $$ for (Object field : fieldDoc.fields) -->Line_8 $$ Class type = field.getClass()[ FD ]
Line_8 $$ Class type = field.getClass()-->Line_30 $$ if (type == Boolean.class) [ FD ]
Line_12 $$ if (type == Integer.class) -->Line_13 $$ out.writeByte((byte) 2)[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_31 $$ out.writeByte((byte) 8)[ FD ]
Line_8 $$ Class type = field.getClass()-->Line_33 $$ if (type == BytesRef.class) [ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_3 $$ out.writeVInt(fieldDoc.fields.length)[ CD ]
Line_24 $$ if (type == Byte.class) -->Line_27 $$ if (type == Short.class) [ CD ]
Line_12 $$ if (type == Integer.class) -->Line_15 $$ if (type == Long.class) [ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_23 $$ out.writeDouble((Double) field)[ FD ]
Line_27 $$ if (type == Short.class) -->Line_30 $$ if (type == Boolean.class) [ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_42 $$ out.writeFloat(fieldDoc.score)[ FD ]
Line_24 $$ if (type == Byte.class) -->Line_26 $$ out.writeByte((Byte) field)[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_13 $$ out.writeByte((byte) 2)[ FD ]
Line_15 $$ if (type == Long.class) -->Line_17 $$ out.writeLong((Long) field)[ CD ]
Line_4 $$ for (Object field : fieldDoc.fields) -->Line_5 $$ if (field == null) [ FD ]
Line_5 $$ if (field == null) -->Line_6 $$ out.writeByte((byte) 0)[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_17 $$ out.writeLong((Long) field)[ FD ]
Line_9 $$ if (type == String.class) -->Line_11 $$ out.writeString((String) field)[ CD ]
Line_18 $$ if (type == Float.class) -->Line_21 $$ if (type == Double.class) [ CD ]
Line_33 $$ if (type == BytesRef.class) -->Line_35 $$ out.writeBytesRef((BytesRef) field)[ CD ]
Line_18 $$ if (type == Float.class) -->Line_20 $$ out.writeFloat((Float) field)[ CD ]
Line_8 $$ Class type = field.getClass()-->Line_15 $$ if (type == Long.class) [ FD ]
Line_30 $$ if (type == Boolean.class) -->Line_31 $$ out.writeByte((byte) 8)[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_32 $$ out.writeBoolean((Boolean) field)[ FD ]
Line_9 $$ if (type == String.class) -->Line_10 $$ out.writeByte((byte) 1)[ CD ]
Line_8 $$ Class type = field.getClass()-->Line_24 $$ if (type == Byte.class) [ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_14 $$ out.writeInt((Integer) field)[ FD ]
Line_8 $$ Class type = field.getClass()-->Line_12 $$ if (type == Integer.class) [ FD ]
Line_12 $$ if (type == Integer.class) -->Line_14 $$ out.writeInt((Integer) field)[ CD ]
Line_15 $$ if (type == Long.class) -->Line_18 $$ if (type == Float.class) [ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_25 $$ out.writeByte((byte) 6)[ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_28 $$ out.writeByte((byte) 7)[ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_41 $$ out.writeVInt(fieldDoc.doc)[ CD ]
Line_8 $$ Class type = field.getClass()-->Line_27 $$ if (type == Short.class) [ FD ]
Line_21 $$ if (type == Double.class) -->Line_24 $$ if (type == Byte.class) [ CD ]
Line_15 $$ if (type == Long.class) -->Line_16 $$ out.writeByte((byte) 3)[ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_10 $$ out.writeByte((byte) 1)[ FD ]
Line_8 $$ Class type = field.getClass()-->Line_21 $$ if (type == Double.class) [ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_26 $$ out.writeByte((Byte) field)[ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_29 $$ out.writeShort((Short) field)[ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_41 $$ out.writeVInt(fieldDoc.doc)[ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_6 $$ out.writeByte((byte) 0)[ FD ]
Line_8 $$ Class type = field.getClass()-->Line_9 $$ if (type == String.class) [ FD ]
Line_9 $$ if (type == String.class) -->Line_12 $$ if (type == Integer.class) [ CD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_16 $$ out.writeByte((byte) 3)[ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_11 $$ out.writeString((String) field)[ FD ]
Line_2 $$ public static void writeFieldDoc(StreamOutput out, FieldDoc fieldDoc) throws IOException -->Line_35 $$ out.writeBytesRef((BytesRef) field)[ FD ]
