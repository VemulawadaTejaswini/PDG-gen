Line_2 $$ private Properties _getProperties(String fileName) -->Line_11 $$ ClassLoader classLoader = clazz.getClassLoader()[ CD ]
Line_4 $$ fileName = PATCHER_PROPERTIES-->Line_8 $$ if (Validator.equals(fileName, PATCHER_SERVICE_PROPERTIES)) [ FD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_28 $$ return _properties[ CD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_8 $$ if (Validator.equals(fileName, PATCHER_SERVICE_PROPERTIES)) [ FD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_6 $$ Properties properties = new Properties()[ CD ]
Line_11 $$ ClassLoader classLoader = clazz.getClassLoader()-->Line_12 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)[ FD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_8 $$ if (Validator.equals(fileName, PATCHER_SERVICE_PROPERTIES)) [ CD ]
Line_3 $$ if (Validator.isNull(fileName)) -->Line_4 $$ fileName = PATCHER_PROPERTIES[ CD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_4 $$ fileName = PATCHER_PROPERTIES[ FD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_12 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)[ FD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_13 $$ if (inputStream == null) [ CD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_3 $$ if (Validator.isNull(fileName)) [ FD ]
Line_4 $$ fileName = PATCHER_PROPERTIES-->Line_12 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)[ FD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_7 $$ Class<?> clazz = getClass()[ CD ]
Line_12 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)-->Line_19 $$ properties.load(inputStream)[ FD ]
Line_12 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)-->Line_24 $$ StreamUtil.cleanUp(inputStream)[ FD ]
Line_6 $$ Properties properties = new Properties()-->Line_19 $$ properties.load(inputStream)[ FD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_3 $$ if (Validator.isNull(fileName)) [ CD ]
Line_7 $$ Class<?> clazz = getClass()-->Line_11 $$ ClassLoader classLoader = clazz.getClassLoader()[ FD ]
Line_13 $$ if (inputStream == null) -->Line_14 $$ if (_log.isDebugEnabled()) [ CD ]
Line_12 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)-->Line_13 $$ if (inputStream == null) [ FD ]
Line_9 $$ clazz = clazz.getInterfaces()[0]-->Line_11 $$ ClassLoader classLoader = clazz.getClassLoader()[ FD ]
Line_7 $$ Class<?> clazz = getClass()-->Line_9 $$ clazz = clazz.getInterfaces()[0][ FD ]
Line_8 $$ if (Validator.equals(fileName, PATCHER_SERVICE_PROPERTIES)) -->Line_9 $$ clazz = clazz.getInterfaces()[0][ CD ]
Line_2 $$ private Properties _getProperties(String fileName) -->Line_12 $$ InputStream inputStream = classLoader.getResourceAsStream(fileName)[ CD ]
Line_14 $$ if (_log.isDebugEnabled()) -->Line_15 $$ _log.debug("Unable to load " + fileName)[ CD ]
