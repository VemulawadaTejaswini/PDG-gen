Line_3 $$ Class<? extends Throwable> clazz = exception.getClass()-->Line_5 $$ Constructor<? extends Throwable> ctor = clazz.getConstructor(String.class)[ FD ]
Line_5 $$ Constructor<? extends Throwable> ctor = clazz.getConstructor(String.class)-->Line_6 $$ Throwable t = ctor.newInstance(msg)[ FD ]
Line_6 $$ Throwable t = ctor.newInstance(msg)-->Line_7 $$ return (T) (t.initCause(exception))[ FD ]
Line_2 $$ private static <T extends IOException> T wrapWithMessage(T exception, String msg) -->Line_7 $$ return (T) (t.initCause(exception))[ FD ]
Line_2 $$ private static <T extends IOException> T wrapWithMessage(T exception, String msg) -->Line_6 $$ Throwable t = ctor.newInstance(msg)[ FD ]
Line_2 $$ private static <T extends IOException> T wrapWithMessage(T exception, String msg) -->Line_3 $$ Class<? extends Throwable> clazz = exception.getClass()[ FD ]
Line_2 $$ private static <T extends IOException> T wrapWithMessage(T exception, String msg) -->Line_3 $$ Class<? extends Throwable> clazz = exception.getClass()[ CD ]
