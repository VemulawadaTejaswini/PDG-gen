Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_17 $$ assertEquals(version, request.getAttribute(VersionResourceResolver.RESOURCE_VERSION_ATTRIBUTE))[ CD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_16 $$ verify(this.versionStrategy, times(1)).getResourceVersion(expected)[ CD ]
Line_3 $$ String versionFile = "bar-version.css"-->Line_14 $$ Resource actual = this.resolver.resolveResourceInternal(request, versionFile, this.locations, this.chain)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_12 $$ given(this.versionStrategy.getResourceVersion(expected)).willReturn(version)[ CD ]
Line_7 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/resources/bar-version.css")-->Line_14 $$ Resource actual = this.resolver.resolveResourceInternal(request, versionFile, this.locations, this.chain)[ FD ]
Line_3 $$ String versionFile = "bar-version.css"-->Line_10 $$ given(this.versionStrategy.extractVersion(versionFile)).willReturn(version)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_4 $$ String version = "version"[ CD ]
Line_7 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/resources/bar-version.css")-->Line_8 $$ given(this.chain.resolveResource(request, versionFile, this.locations)).willReturn(null)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_8 $$ given(this.chain.resolveResource(request, versionFile, this.locations)).willReturn(null)[ CD ]
Line_7 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/resources/bar-version.css")-->Line_9 $$ given(this.chain.resolveResource(request, file, this.locations)).willReturn(expected)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_11 $$ given(this.versionStrategy.removeVersion(versionFile, version)).willReturn(file)[ CD ]
Line_5 $$ String file = "bar.css"-->Line_11 $$ given(this.versionStrategy.removeVersion(versionFile, version)).willReturn(file)[ FD ]
Line_4 $$ String version = "version"-->Line_10 $$ given(this.versionStrategy.extractVersion(versionFile)).willReturn(version)[ FD ]
Line_3 $$ String versionFile = "bar-version.css"-->Line_8 $$ given(this.chain.resolveResource(request, versionFile, this.locations)).willReturn(null)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_10 $$ given(this.versionStrategy.extractVersion(versionFile)).willReturn(version)[ CD ]
Line_4 $$ String version = "version"-->Line_11 $$ given(this.versionStrategy.removeVersion(versionFile, version)).willReturn(file)[ FD ]
Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())-->Line_12 $$ given(this.versionStrategy.getResourceVersion(expected)).willReturn(version)[ FD ]
Line_4 $$ String version = "version"-->Line_12 $$ given(this.versionStrategy.getResourceVersion(expected)).willReturn(version)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_5 $$ String file = "bar.css"[ CD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_14 $$ Resource actual = this.resolver.resolveResourceInternal(request, versionFile, this.locations, this.chain)[ CD ]
Line_3 $$ String versionFile = "bar-version.css"-->Line_11 $$ given(this.versionStrategy.removeVersion(versionFile, version)).willReturn(file)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_3 $$ String versionFile = "bar-version.css"[ CD ]
Line_4 $$ String version = "version"-->Line_17 $$ assertEquals(version, request.getAttribute(VersionResourceResolver.RESOURCE_VERSION_ATTRIBUTE))[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_15 $$ assertEquals(expected, actual)[ CD ]
Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())-->Line_16 $$ verify(this.versionStrategy, times(1)).getResourceVersion(expected)[ FD ]
Line_14 $$ Resource actual = this.resolver.resolveResourceInternal(request, versionFile, this.locations, this.chain)-->Line_15 $$ assertEquals(expected, actual)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_9 $$ given(this.chain.resolveResource(request, file, this.locations)).willReturn(expected)[ CD ]
Line_7 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/resources/bar-version.css")-->Line_17 $$ assertEquals(version, request.getAttribute(VersionResourceResolver.RESOURCE_VERSION_ATTRIBUTE))[ FD ]
Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())-->Line_15 $$ assertEquals(expected, actual)[ FD ]
Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())-->Line_9 $$ given(this.chain.resolveResource(request, file, this.locations)).willReturn(expected)[ FD ]
Line_5 $$ String file = "bar.css"-->Line_9 $$ given(this.chain.resolveResource(request, file, this.locations)).willReturn(expected)[ FD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_13 $$ this.resolver.setStrategyMap(Collections.singletonMap("/**", this.versionStrategy))[ CD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_7 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/resources/bar-version.css")[ CD ]
Line_2 $$ public void resolveResourceSuccess() throws Exception -->Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())[ CD ]
