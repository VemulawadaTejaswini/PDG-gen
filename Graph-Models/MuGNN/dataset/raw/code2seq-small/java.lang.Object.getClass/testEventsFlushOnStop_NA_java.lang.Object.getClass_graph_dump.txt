Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_13 $$ Job parsedJob = context.getJob(jobId)-->Line_14 $$ Assert.assertEquals("CompletedMaps not correct", 1, parsedJob.getCompletedMaps())[ FD ]
Line_7 $$ JobId jobId = job.getID()-->Line_13 $$ Job parsedJob = context.getJob(jobId)[ FD ]
Line_15 $$ Map<TaskId, Task> tasks = parsedJob.getTasks()-->Line_17 $$ verifyTask(tasks.values().iterator().next())[ FD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_16 $$ Assert.assertEquals("No of tasks not correct", 1, tasks.size())[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_10 $$ app.waitForState(Service.STATE.STOPPED)[ CD ]
Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_7 $$ JobId jobId = job.getID()[ FD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_5 $$ app.submit(conf)[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_12 $$ ((JobHistory) context).init(conf)[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_17 $$ verifyTask(tasks.values().iterator().next())[ CD ]
Line_11 $$ HistoryContext context = new JobHistory()-->Line_13 $$ Job parsedJob = context.getJob(jobId)[ FD ]
Line_15 $$ Map<TaskId, Task> tasks = parsedJob.getTasks()-->Line_16 $$ Assert.assertEquals("No of tasks not correct", 1, tasks.size())[ FD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_19 $$ Assert.assertEquals("No of maps not correct", 1, maps.size())[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_14 $$ Assert.assertEquals("CompletedMaps not correct", 1, parsedJob.getCompletedMaps())[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_4 $$ MRApp app = new MRAppWithSpecialHistoryHandler(1, 0, true, this.getClass().getName(), true)[ CD ]
Line_4 $$ MRApp app = new MRAppWithSpecialHistoryHandler(1, 0, true, this.getClass().getName(), true)-->Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ ((JobHistory) context).init(conf)[ FD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_13 $$ Job parsedJob = context.getJob(jobId)-->Line_15 $$ Map<TaskId, Task> tasks = parsedJob.getTasks()[ FD ]
Line_13 $$ Job parsedJob = context.getJob(jobId)-->Line_18 $$ Map<TaskId, Task> maps = parsedJob.getTasks(TaskType.MAP)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithSpecialHistoryHandler(1, 0, true, this.getClass().getName(), true)-->Line_5 $$ app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithSpecialHistoryHandler(1, 0, true, this.getClass().getName(), true)-->Line_10 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_7 $$ JobId jobId = job.getID()[ CD ]
Line_4 $$ MRApp app = new MRAppWithSpecialHistoryHandler(1, 0, true, this.getClass().getName(), true)-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_18 $$ Map<TaskId, Task> maps = parsedJob.getTasks(TaskType.MAP)-->Line_19 $$ Assert.assertEquals("No of maps not correct", 1, maps.size())[ FD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_18 $$ Map<TaskId, Task> maps = parsedJob.getTasks(TaskType.MAP)[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_8 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_13 $$ Job parsedJob = context.getJob(jobId)[ CD ]
Line_7 $$ JobId jobId = job.getID()-->Line_8 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ FD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_15 $$ Map<TaskId, Task> tasks = parsedJob.getTasks()[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_20 $$ Assert.assertEquals("Job state not currect", JobState.SUCCEEDED, parsedJob.getState())[ CD ]
Line_2 $$ public void testEventsFlushOnStop() throws Exception -->Line_11 $$ HistoryContext context = new JobHistory()[ CD ]
Line_13 $$ Job parsedJob = context.getJob(jobId)-->Line_20 $$ Assert.assertEquals("Job state not currect", JobState.SUCCEEDED, parsedJob.getState())[ FD ]
