Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_4 $$ if (matchContext.getOptions() == options && matchContext.getPattern() != null && matchContext.getOptions().hashCode() == matchContext.getPattern().getOptionsHashStamp()) [ CD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_10 $$ matchContext.setMatcher(visitor)[ CD ]
Line_21 $$ if (compiledPattern == null) -->Line_22 $$ compiledPattern = ApplicationManager.getApplication().runReadAction(new Computable<CompiledPattern>() [ CD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_12 $$ CompiledPattern compiledPattern = savedPattern[ CD ]
Line_13 $$ if (compiledPattern == null) -->Line_21 $$ if (compiledPattern == null) [ CD ]
Line_17 $$ compiledPattern = data.lastPattern-->Line_22 $$ compiledPattern = ApplicationManager.getApplication().runReadAction(new Computable<CompiledPattern>() [ FD ]
Line_12 $$ CompiledPattern compiledPattern = savedPattern-->Line_29 $$ cacheCompiledPattern(options, compiledPattern)[ FD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_30 $$ return compiledPattern[ CD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_29 $$ cacheCompiledPattern(options, compiledPattern)[ FD ]
Line_17 $$ compiledPattern = data.lastPattern-->Line_29 $$ cacheCompiledPattern(options, compiledPattern)[ FD ]
Line_17 $$ compiledPattern = data.lastPattern-->Line_21 $$ if (compiledPattern == null) [ FD ]
Line_12 $$ CompiledPattern compiledPattern = savedPattern-->Line_13 $$ if (compiledPattern == null) [ FD ]
Line_12 $$ CompiledPattern compiledPattern = savedPattern-->Line_21 $$ if (compiledPattern == null) [ FD ]
Line_22 $$ compiledPattern = ApplicationManager.getApplication().runReadAction(new Computable<CompiledPattern>() -->Line_24 $$ return PatternCompiler.compilePattern(project, options)[ CD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_29 $$ cacheCompiledPattern(options, compiledPattern)[ CD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_13 $$ if (compiledPattern == null) [ CD ]
Line_16 $$ if (data != null && options == data.lastOptions) -->Line_17 $$ compiledPattern = data.lastPattern[ CD ]
Line_4 $$ if (matchContext.getOptions() == options && matchContext.getPattern() != null && matchContext.getOptions().hashCode() == matchContext.getPattern().getOptionsHashStamp()) -->Line_5 $$ savedPattern = matchContext.getPattern()[ CD ]
Line_3 $$ CompiledPattern savedPattern = null-->Line_5 $$ savedPattern = matchContext.getPattern()[ FD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_11 $$ visitor.setMatchContext(matchContext)[ CD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_3 $$ CompiledPattern savedPattern = null[ CD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_8 $$ matchContext.setSink(new DuplicateFilteringResultSink(sink))[ CD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_9 $$ matchContext.setOptions(options)[ FD ]
Line_12 $$ CompiledPattern compiledPattern = savedPattern-->Line_22 $$ compiledPattern = ApplicationManager.getApplication().runReadAction(new Computable<CompiledPattern>() [ FD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_7 $$ matchContext.clear()[ CD ]
Line_12 $$ CompiledPattern compiledPattern = savedPattern-->Line_17 $$ compiledPattern = data.lastPattern[ FD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_24 $$ return PatternCompiler.compilePattern(project, options)[ FD ]
Line_2 $$ private CompiledPattern prepareMatching(final MatchResultSink sink, final MatchOptions options) -->Line_9 $$ matchContext.setOptions(options)[ CD ]
Line_22 $$ compiledPattern = ApplicationManager.getApplication().runReadAction(new Computable<CompiledPattern>() -->Line_29 $$ cacheCompiledPattern(options, compiledPattern)[ FD ]
