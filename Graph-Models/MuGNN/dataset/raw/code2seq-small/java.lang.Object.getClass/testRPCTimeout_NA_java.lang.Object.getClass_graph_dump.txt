Line_22 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_24 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)[ FD ]
Line_6 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_9 $$ Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1)[ FD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_10 $$ server.start()[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_9 $$ Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1)[ FD ]
Line_7 $$ String bindAddr = "localhost:0"-->Line_8 $$ InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr)[ FD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_5 $$ conf.set(YarnConfiguration.IPC_RPC_IMPL, rpcClass)[ FD ]
Line_20 $$ Token containerToken = TestRPC.newContainerToken(nodeId, "password".getBytes(), containerTokenIdentifier)-->Line_21 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ FD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_5 $$ conf.set(YarnConfiguration.IPC_RPC_IMPL, rpcClass)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_4 $$ conf.setInt("yarn.rpc.nm-command-timeout", 3000)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.set(YarnConfiguration.IPC_RPC_IMPL, rpcClass)[ FD ]
Line_24 $$ StartContainersRequest allRequests = StartContainersRequest.newInstance(list)-->Line_26 $$ proxy.startContainers(allRequests)[ FD ]
Line_12 $$ ContainerManagementProtocol proxy = (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class, server.getListenerAddress(), conf)-->Line_26 $$ proxy.startContainers(allRequests)[ FD ]
Line_9 $$ Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1)-->Line_33 $$ server.stop()[ FD ]
Line_9 $$ Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1)-->Line_10 $$ server.start()[ FD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_4 $$ conf.setInt("yarn.rpc.nm-command-timeout", 3000)[ CD ]
Line_15 $$ ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 0)-->Line_16 $$ ContainerId containerId = ContainerId.newInstance(applicationAttemptId, 100)[ FD ]
Line_17 $$ NodeId nodeId = NodeId.newInstance("localhost", 1234)-->Line_20 $$ Token containerToken = TestRPC.newContainerToken(nodeId, "password".getBytes(), containerTokenIdentifier)[ FD ]
Line_9 $$ Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1)-->Line_12 $$ ContainerManagementProtocol proxy = (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class, server.getListenerAddress(), conf)[ FD ]
Line_8 $$ InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr)-->Line_9 $$ Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1)[ FD ]
Line_14 $$ ApplicationId applicationId = ApplicationId.newInstance(0, 0)-->Line_15 $$ ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 0)[ FD ]
Line_6 $$ YarnRPC rpc = YarnRPC.create(conf)-->Line_12 $$ ContainerManagementProtocol proxy = (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class, server.getListenerAddress(), conf)[ FD ]
Line_21 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)-->Line_23 $$ list.add(scRequest)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_6 $$ YarnRPC rpc = YarnRPC.create(conf)[ FD ]
Line_22 $$ List<StartContainerRequest> list = new ArrayList<StartContainerRequest>()-->Line_23 $$ list.add(scRequest)[ FD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_6 $$ YarnRPC rpc = YarnRPC.create(conf)[ CD ]
Line_19 $$ ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(containerId, "localhost", "user", resource, System.currentTimeMillis() + 10000, 42, 42, Priority.newInstance(0), 0)-->Line_20 $$ Token containerToken = TestRPC.newContainerToken(nodeId, "password".getBytes(), containerTokenIdentifier)[ FD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_7 $$ String bindAddr = "localhost:0"[ CD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_9 $$ Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ ContainerManagementProtocol proxy = (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class, server.getListenerAddress(), conf)[ FD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_8 $$ InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr)[ CD ]
Line_13 $$ ContainerLaunchContext containerLaunchContext = recordFactory.newRecordInstance(ContainerLaunchContext.class)-->Line_21 $$ StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken)[ FD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ private void testRPCTimeout(String rpcClass) throws Exception -->Line_35 $$ Assert.fail("timeout exception should have occurred!")[ CD ]
