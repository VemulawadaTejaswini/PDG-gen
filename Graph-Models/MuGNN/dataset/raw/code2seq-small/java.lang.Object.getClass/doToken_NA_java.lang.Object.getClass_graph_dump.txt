Line_5 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_9 $$ Queryable persister = q.getEntityPersisterUsingImports(token)[ CD ]
Line_10 $$ if (persister != null) -->Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) [ CD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_39 $$ appendToken(q, token)[ FD ]
Line_35 $$ String negatedToken = negated ? NEGATIONS.get(token.toLowerCase(Locale.ROOT)) : null-->Line_37 $$ appendToken(q, negatedToken)[ FD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_37 $$ appendToken(q, negatedToken)[ FD ]
Line_9 $$ Queryable persister = q.getEntityPersisterUsingImports(token)-->Line_11 $$ final String discrim = persister.getDiscriminatorSQLValue()[ FD ]
Line_36 $$ if (negatedToken != null && (!betweenSpecialCase || !"or".equals(negatedToken))) -->Line_39 $$ appendToken(q, token)[ CD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_22 $$ type = q.getFactory().getTypeResolver().heuristicType(constant.getClass().getName())[ FD ]
Line_18 $$ Object constant-->Line_22 $$ type = q.getFactory().getTypeResolver().heuristicType(constant.getClass().getName())[ FD ]
Line_3 $$ if (q.isName(StringHelper.root(token))) -->Line_4 $$ doPathExpression(q.unalias(token), q)[ CD ]
Line_22 $$ type = q.getFactory().getTypeResolver().heuristicType(constant.getClass().getName())-->Line_26 $$ if (type == null) [ FD ]
Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) -->Line_30 $$ appendToken(q, ((LiteralType) type).objectToSQLString(constant, q.getFactory().getDialect()))[ FD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_30 $$ appendToken(q, ((LiteralType) type).objectToSQLString(constant, q.getFactory().getDialect()))[ FD ]
Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) -->Line_35 $$ String negatedToken = negated ? NEGATIONS.get(token.toLowerCase(Locale.ROOT)) : null[ CD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_5 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) [ FD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) [ FD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_4 $$ doPathExpression(q.unalias(token), q)[ FD ]
Line_10 $$ if (persister != null) -->Line_18 $$ Object constant[ CD ]
Line_36 $$ if (negatedToken != null && (!betweenSpecialCase || !"or".equals(negatedToken))) -->Line_37 $$ appendToken(q, negatedToken)[ CD ]
Line_18 $$ Object constant-->Line_30 $$ appendToken(q, ((LiteralType) type).objectToSQLString(constant, q.getFactory().getDialect()))[ FD ]
Line_5 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_6 $$ q.addNamedParameter(token.substring(1))[ CD ]
Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) -->Line_36 $$ if (negatedToken != null && (!betweenSpecialCase || !"or".equals(negatedToken))) [ CD ]
Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) -->Line_22 $$ type = q.getFactory().getTypeResolver().heuristicType(constant.getClass().getName())[ FD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_3 $$ if (q.isName(StringHelper.root(token))) [ CD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_3 $$ if (q.isName(StringHelper.root(token))) [ FD ]
Line_11 $$ final String discrim = persister.getDiscriminatorSQLValue()-->Line_12 $$ if (InFragment.NULL.equals(discrim) || InFragment.NOT_NULL.equals(discrim)) [ FD ]
Line_5 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_7 $$ appendToken(q, "?")[ CD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_7 $$ appendToken(q, "?")[ FD ]
Line_11 $$ final String discrim = persister.getDiscriminatorSQLValue()-->Line_15 $$ appendToken(q, discrim)[ FD ]
Line_5 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) -->Line_10 $$ if (persister != null) [ CD ]
Line_10 $$ if (persister != null) -->Line_11 $$ final String discrim = persister.getDiscriminatorSQLValue()[ CD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_15 $$ appendToken(q, discrim)[ FD ]
Line_9 $$ Queryable persister = q.getEntityPersisterUsingImports(token)-->Line_10 $$ if (persister != null) [ FD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_35 $$ String negatedToken = negated ? NEGATIONS.get(token.toLowerCase(Locale.ROOT)) : null[ FD ]
Line_20 $$ Type type-->Line_22 $$ type = q.getFactory().getTypeResolver().heuristicType(constant.getClass().getName())[ FD ]
Line_35 $$ String negatedToken = negated ? NEGATIONS.get(token.toLowerCase(Locale.ROOT)) : null-->Line_36 $$ if (negatedToken != null && (!betweenSpecialCase || !"or".equals(negatedToken))) [ FD ]
Line_20 $$ Type type-->Line_26 $$ if (type == null) [ FD ]
Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) -->Line_20 $$ Type type[ CD ]
Line_3 $$ if (q.isName(StringHelper.root(token))) -->Line_5 $$ if (token.startsWith(ParserHelper.HQL_VARIABLE_PREFIX)) [ CD ]
Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) -->Line_26 $$ if (type == null) [ CD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_6 $$ q.addNamedParameter(token.substring(1))[ FD ]
Line_18 $$ Object constant-->Line_19 $$ if (token.indexOf('.') > -1 && (constant = ReflectHelper.getConstantValue(token, q.getFactory().getServiceRegistry().getService(ClassLoaderService.class))) != null) [ FD ]
Line_12 $$ if (InFragment.NULL.equals(discrim) || InFragment.NOT_NULL.equals(discrim)) -->Line_15 $$ appendToken(q, discrim)[ CD ]
Line_2 $$ private void doToken(String token, QueryTranslatorImpl q) throws QueryException -->Line_9 $$ Queryable persister = q.getEntityPersisterUsingImports(token)[ FD ]
Line_10 $$ if (persister != null) -->Line_12 $$ if (InFragment.NULL.equals(discrim) || InFragment.NOT_NULL.equals(discrim)) [ CD ]
