Line_5 $$ AspectMetadata am = createAspectMetadata(aspectClass, aspectName)-->Line_6 $$ if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) [ FD ]
Line_2 $$ public void addAspect(Object aspectInstance) -->Line_4 $$ String aspectName = aspectClass.getName()[ CD ]
Line_4 $$ String aspectName = aspectClass.getName()-->Line_5 $$ AspectMetadata am = createAspectMetadata(aspectClass, aspectName)[ FD ]
Line_3 $$ Class<?> aspectClass = aspectInstance.getClass()-->Line_7 $$ throw new IllegalArgumentException("Aspect class [" + aspectClass.getName() + "] does not define a singleton aspect")[ FD ]
Line_2 $$ public void addAspect(Object aspectInstance) -->Line_3 $$ Class<?> aspectClass = aspectInstance.getClass()[ FD ]
Line_3 $$ Class<?> aspectClass = aspectInstance.getClass()-->Line_4 $$ String aspectName = aspectClass.getName()[ FD ]
Line_2 $$ public void addAspect(Object aspectInstance) -->Line_5 $$ AspectMetadata am = createAspectMetadata(aspectClass, aspectName)[ CD ]
Line_2 $$ public void addAspect(Object aspectInstance) -->Line_9 $$ addAdvisorsFromAspectInstanceFactory(new SingletonMetadataAwareAspectInstanceFactory(aspectInstance, aspectName))[ CD ]
Line_2 $$ public void addAspect(Object aspectInstance) -->Line_3 $$ Class<?> aspectClass = aspectInstance.getClass()[ CD ]
Line_3 $$ Class<?> aspectClass = aspectInstance.getClass()-->Line_5 $$ AspectMetadata am = createAspectMetadata(aspectClass, aspectName)[ FD ]
Line_2 $$ public void addAspect(Object aspectInstance) -->Line_6 $$ if (am.getAjType().getPerClause().getKind() != PerClauseKind.SINGLETON) [ CD ]
