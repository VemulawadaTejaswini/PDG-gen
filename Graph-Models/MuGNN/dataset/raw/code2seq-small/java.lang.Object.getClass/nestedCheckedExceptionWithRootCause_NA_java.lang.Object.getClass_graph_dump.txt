Line_6 $$ NestedCheckedException nex = new NestedCheckedException(myMessage, rootCause) -->Line_13 $$ nex.printStackTrace(pw)[ FD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_10 $$ assertTrue(nex.getMessage().indexOf(rootCauseMesg) != -1)[ CD ]
Line_3 $$ String myMessage = "mesg for this exception"-->Line_9 $$ assertTrue(nex.getMessage().indexOf(myMessage) != -1)[ FD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_17 $$ assertFalse(stackTrace.indexOf(rootCauseMesg) == -1)[ CD ]
Line_15 $$ String stackTrace = new String(baos.toByteArray())-->Line_17 $$ assertFalse(stackTrace.indexOf(rootCauseMesg) == -1)[ FD ]
Line_6 $$ NestedCheckedException nex = new NestedCheckedException(myMessage, rootCause) -->Line_10 $$ assertTrue(nex.getMessage().indexOf(rootCauseMesg) != -1)[ FD ]
Line_6 $$ NestedCheckedException nex = new NestedCheckedException(myMessage, rootCause) -->Line_8 $$ assertEquals(nex.getCause(), rootCause)[ FD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_6 $$ NestedCheckedException nex = new NestedCheckedException(myMessage, rootCause) [ CD ]
Line_12 $$ PrintWriter pw = new PrintWriter(baos)-->Line_13 $$ nex.printStackTrace(pw)[ FD ]
Line_4 $$ String rootCauseMesg = "this is the obscure message of the root cause"-->Line_10 $$ assertTrue(nex.getMessage().indexOf(rootCauseMesg) != -1)[ FD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_14 $$ pw.flush()[ CD ]
Line_15 $$ String stackTrace = new String(baos.toByteArray())-->Line_16 $$ assertFalse(stackTrace.indexOf(rootCause.getClass().getName()) == -1)[ FD ]
Line_12 $$ PrintWriter pw = new PrintWriter(baos)-->Line_14 $$ pw.flush()[ FD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_8 $$ assertEquals(nex.getCause(), rootCause)[ CD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_12 $$ PrintWriter pw = new PrintWriter(baos)[ CD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_9 $$ assertTrue(nex.getMessage().indexOf(myMessage) != -1)[ CD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_16 $$ assertFalse(stackTrace.indexOf(rootCause.getClass().getName()) == -1)[ CD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_15 $$ String stackTrace = new String(baos.toByteArray())[ CD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_13 $$ nex.printStackTrace(pw)[ CD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_11 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()[ CD ]
Line_5 $$ Exception rootCause = new Exception(rootCauseMesg)-->Line_16 $$ assertFalse(stackTrace.indexOf(rootCause.getClass().getName()) == -1)[ FD ]
Line_4 $$ String rootCauseMesg = "this is the obscure message of the root cause"-->Line_17 $$ assertFalse(stackTrace.indexOf(rootCauseMesg) == -1)[ FD ]
Line_6 $$ NestedCheckedException nex = new NestedCheckedException(myMessage, rootCause) -->Line_9 $$ assertTrue(nex.getMessage().indexOf(myMessage) != -1)[ FD ]
Line_11 $$ ByteArrayOutputStream baos = new ByteArrayOutputStream()-->Line_15 $$ String stackTrace = new String(baos.toByteArray())[ FD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_3 $$ String myMessage = "mesg for this exception"[ CD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_5 $$ Exception rootCause = new Exception(rootCauseMesg)[ CD ]
Line_2 $$ public void nestedCheckedExceptionWithRootCause() -->Line_4 $$ String rootCauseMesg = "this is the obscure message of the root cause"[ CD ]
Line_5 $$ Exception rootCause = new Exception(rootCauseMesg)-->Line_8 $$ assertEquals(nex.getCause(), rootCause)[ FD ]
