Line_13 $$ Collections.sort(methods, new Comparator<Method>() -->Line_16 $$ int m2pl = m2.getParameterTypes().length[ FD ]
Line_6 $$ List<Method> methods = new ArrayList<Method>(getMethods(type, targetObject))-->Line_9 $$ List<Method> filtered = filter.filter(methods)[ FD ]
Line_13 $$ Collections.sort(methods, new Comparator<Method>() -->Line_16 $$ int m2pl = m2.getParameterTypes().length[ CD ]
Line_13 $$ Collections.sort(methods, new Comparator<Method>() -->Line_15 $$ int m1pl = m1.getParameterTypes().length[ CD ]
Line_52 $$ if (matchInfo.isExactMatch()) -->Line_53 $$ return new ReflectiveMethodExecutor(method)[ CD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_47 $$ matchInfo = ReflectionHelper.compareArgumentsVarargs(paramDescriptors, argumentTypes, typeConverter)[ FD ]
Line_13 $$ Collections.sort(methods, new Comparator<Method>() -->Line_18 $$ if (!m1.isVarArgs() && m2.isVarArgs()) [ FD ]
Line_55 $$ if (this.useDistance) -->Line_62 $$ if (closeMatch == null) [ CD ]
Line_20 $$ if (m1.isVarArgs() && !m2.isVarArgs()) -->Line_23 $$ return 0[ CD ]
Line_5 $$ Class<?> type = (targetObject instanceof Class ? (Class<?>) targetObject : targetObject.getClass())-->Line_6 $$ List<Method> methods = new ArrayList<Method>(getMethods(type, targetObject))[ FD ]
Line_5 $$ Class<?> type = (targetObject instanceof Class ? (Class<?>) targetObject : targetObject.getClass())-->Line_7 $$ MethodFilter filter = (this.filters != null ? this.filters.get(type) : null)[ FD ]
Line_13 $$ Collections.sort(methods, new Comparator<Method>() -->Line_15 $$ int m1pl = m1.getParameterTypes().length[ FD ]
Line_30 $$ for (int i = 0; i < methods.size(); i++) -->Line_42 $$ for (int i = 0; i < paramTypes.length; i++) [ FD ]
Line_48 $$ if (paramTypes.length == argumentTypes.size()) -->Line_49 $$ matchInfo = ReflectionHelper.compareArguments(paramDescriptors, argumentTypes, typeConverter)[ CD ]
Line_54 $$ if (matchInfo.isCloseMatch()) -->Line_55 $$ if (this.useDistance) [ CD ]
Line_20 $$ if (m1.isVarArgs() && !m2.isVarArgs()) -->Line_21 $$ return 1[ CD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_56 $$ int matchDistance = ReflectionHelper.getTypeDifferenceWeight(paramDescriptors, argumentTypes)[ FD ]
Line_7 $$ MethodFilter filter = (this.filters != null ? this.filters.get(type) : null)-->Line_9 $$ List<Method> filtered = filter.filter(methods)[ FD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_48 $$ if (paramTypes.length == argumentTypes.size()) [ FD ]
Line_55 $$ if (this.useDistance) -->Line_56 $$ int matchDistance = ReflectionHelper.getTypeDifferenceWeight(paramDescriptors, argumentTypes)[ CD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_49 $$ matchInfo = ReflectionHelper.compareArguments(paramDescriptors, argumentTypes, typeConverter)[ FD ]
Line_15 $$ int m1pl = m1.getParameterTypes().length-->Line_17 $$ if (m1pl == m2pl) [ FD ]
Line_66 $$ if (matchInfo.isMatchRequiringConversion()) -->Line_67 $$ if (matchRequiringConversion != null) [ CD ]
Line_39 $$ if (method.getName().equals(name)) -->Line_40 $$ Class<?>[] paramTypes = method.getParameterTypes()[ CD ]
Line_8 $$ if (filter != null) -->Line_9 $$ List<Method> filtered = filter.filter(methods)[ CD ]
Line_77 $$ if (matchRequiringConversion != null) -->Line_83 $$ return null[ CD ]
Line_13 $$ Collections.sort(methods, new Comparator<Method>() -->Line_26 $$ return (m1pl < m2pl ? -1 : (m1pl > m2pl ? 1 : 0))[ CD ]
Line_4 $$ TypeConverter typeConverter = context.getTypeConverter()-->Line_47 $$ matchInfo = ReflectionHelper.compareArgumentsVarargs(paramDescriptors, argumentTypes, typeConverter)[ FD ]
Line_39 $$ if (method.getName().equals(name)) -->Line_42 $$ for (int i = 0; i < paramTypes.length; i++) [ CD ]
Line_55 $$ if (this.useDistance) -->Line_57 $$ if (closeMatch == null || matchDistance < closeMatchDistance) [ CD ]
Line_52 $$ if (matchInfo.isExactMatch()) -->Line_54 $$ if (matchInfo.isCloseMatch()) [ CD ]
Line_6 $$ List<Method> methods = new ArrayList<Method>(getMethods(type, targetObject))-->Line_31 $$ methods.set(i, BridgeMethodResolver.findBridgedMethod(methods.get(i)))[ FD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_39 $$ if (method.getName().equals(name)) [ FD ]
Line_6 $$ List<Method> methods = new ArrayList<Method>(getMethods(type, targetObject))-->Line_13 $$ Collections.sort(methods, new Comparator<Method>() [ FD ]
Line_6 $$ List<Method> methods = new ArrayList<Method>(getMethods(type, targetObject))-->Line_12 $$ if (methods.size() > 1) [ FD ]
Line_18 $$ if (!m1.isVarArgs() && m2.isVarArgs()) -->Line_19 $$ return -1[ CD ]
Line_13 $$ Collections.sort(methods, new Comparator<Method>() -->Line_20 $$ if (m1.isVarArgs() && !m2.isVarArgs()) [ FD ]
Line_75 $$ if (closeMatch != null) -->Line_76 $$ return new ReflectiveMethodExecutor(closeMatch)[ CD ]
Line_75 $$ if (closeMatch != null) -->Line_77 $$ if (matchRequiringConversion != null) [ CD ]
Line_10 $$ methods = (filtered instanceof ArrayList ? filtered : new ArrayList<Method>(filtered))-->Line_12 $$ if (methods.size() > 1) [ FD ]
Line_77 $$ if (matchRequiringConversion != null) -->Line_78 $$ if (multipleOptions) [ CD ]
Line_7 $$ MethodFilter filter = (this.filters != null ? this.filters.get(type) : null)-->Line_8 $$ if (filter != null) [ FD ]
Line_30 $$ for (int i = 0; i < methods.size(); i++) -->Line_31 $$ methods.set(i, BridgeMethodResolver.findBridgedMethod(methods.get(i)))[ CD ]
Line_51 $$ if (matchInfo != null) -->Line_52 $$ if (matchInfo.isExactMatch()) [ CD ]
Line_10 $$ methods = (filtered instanceof ArrayList ? filtered : new ArrayList<Method>(filtered))-->Line_31 $$ methods.set(i, BridgeMethodResolver.findBridgedMethod(methods.get(i)))[ FD ]
Line_39 $$ if (method.getName().equals(name)) -->Line_46 $$ if (method.isVarArgs() && argumentTypes.size() >= (paramTypes.length - 1)) [ CD ]
Line_46 $$ if (method.isVarArgs() && argumentTypes.size() >= (paramTypes.length - 1)) -->Line_48 $$ if (paramTypes.length == argumentTypes.size()) [ CD ]
Line_18 $$ if (!m1.isVarArgs() && m2.isVarArgs()) -->Line_20 $$ if (m1.isVarArgs() && !m2.isVarArgs()) [ CD ]
Line_39 $$ if (method.getName().equals(name)) -->Line_51 $$ if (matchInfo != null) [ CD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_4 $$ TypeConverter typeConverter = context.getTypeConverter()[ FD ]
Line_4 $$ TypeConverter typeConverter = context.getTypeConverter()-->Line_49 $$ matchInfo = ReflectionHelper.compareArguments(paramDescriptors, argumentTypes, typeConverter)[ FD ]
Line_10 $$ methods = (filtered instanceof ArrayList ? filtered : new ArrayList<Method>(filtered))-->Line_30 $$ for (int i = 0; i < methods.size(); i++) [ FD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_5 $$ Class<?> type = (targetObject instanceof Class ? (Class<?>) targetObject : targetObject.getClass())[ FD ]
Line_46 $$ if (method.isVarArgs() && argumentTypes.size() >= (paramTypes.length - 1)) -->Line_47 $$ matchInfo = ReflectionHelper.compareArgumentsVarargs(paramDescriptors, argumentTypes, typeConverter)[ CD ]
Line_10 $$ methods = (filtered instanceof ArrayList ? filtered : new ArrayList<Method>(filtered))-->Line_13 $$ Collections.sort(methods, new Comparator<Method>() [ FD ]
Line_54 $$ if (matchInfo.isCloseMatch()) -->Line_66 $$ if (matchInfo.isMatchRequiringConversion()) [ CD ]
Line_8 $$ if (filter != null) -->Line_10 $$ methods = (filtered instanceof ArrayList ? filtered : new ArrayList<Method>(filtered))[ CD ]
Line_6 $$ List<Method> methods = new ArrayList<Method>(getMethods(type, targetObject))-->Line_10 $$ methods = (filtered instanceof ArrayList ? filtered : new ArrayList<Method>(filtered))[ FD ]
Line_12 $$ if (methods.size() > 1) -->Line_13 $$ Collections.sort(methods, new Comparator<Method>() [ CD ]
Line_77 $$ if (matchRequiringConversion != null) -->Line_81 $$ return new ReflectiveMethodExecutor(matchRequiringConversion)[ CD ]
Line_30 $$ for (int i = 0; i < methods.size(); i++) -->Line_31 $$ methods.set(i, BridgeMethodResolver.findBridgedMethod(methods.get(i)))[ FD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_6 $$ List<Method> methods = new ArrayList<Method>(getMethods(type, targetObject))[ FD ]
Line_17 $$ if (m1pl == m2pl) -->Line_18 $$ if (!m1.isVarArgs() && m2.isVarArgs()) [ CD ]
Line_16 $$ int m2pl = m2.getParameterTypes().length-->Line_17 $$ if (m1pl == m2pl) [ FD ]
Line_6 $$ List<Method> methods = new ArrayList<Method>(getMethods(type, targetObject))-->Line_30 $$ for (int i = 0; i < methods.size(); i++) [ FD ]
Line_13 $$ Collections.sort(methods, new Comparator<Method>() -->Line_17 $$ if (m1pl == m2pl) [ CD ]
Line_42 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_43 $$ paramDescriptors.add(new TypeDescriptor(new MethodParameter(method, i)))[ CD ]
Line_2 $$ public MethodExecutor resolve(EvaluationContext context, Object targetObject, String name, List<TypeDescriptor> argumentTypes) throws AccessException -->Line_46 $$ if (method.isVarArgs() && argumentTypes.size() >= (paramTypes.length - 1)) [ FD ]
