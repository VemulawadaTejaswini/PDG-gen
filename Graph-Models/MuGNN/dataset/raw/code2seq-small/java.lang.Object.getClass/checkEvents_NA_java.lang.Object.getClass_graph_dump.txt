Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_3 $$ Class<T> genericClass = (Class<T>) expectedEvents.getClass().getComponentType()[ CD ]
Line_3 $$ Class<T> genericClass = (Class<T>) expectedEvents.getClass().getComponentType()-->Line_4 $$ ArgumentCaptor<T> eventCaptor = ArgumentCaptor.forClass(genericClass)[ FD ]
Line_14 $$ int len = Math.max(expectedEvents.length, actualEvents.size())-->Line_15 $$ for (int n = 0; n < len; n++) [ FD ]
Line_6 $$ List<T> actualEvents = eventCaptor.getAllValues()-->Line_9 $$ assertEquals("expected events", expectedEvents.length, actualEvents.size())[ FD ]
Line_15 $$ for (int n = 0; n < len; n++) -->Line_18 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null[ FD ]
Line_26 $$ for (T expectedEvent : expectedEvents) -->Line_27 $$ expectedSet.add(eventToString(expectedEvent, methods))[ FD ]
Line_31 $$ String actual = eventToString(actualEvent, methods)-->Line_32 $$ assertTrue("unexpected event: " + actual, expectedSet.remove(actual))[ FD ]
Line_4 $$ ArgumentCaptor<T> eventCaptor = ArgumentCaptor.forClass(genericClass)-->Line_5 $$ verify(eventHandler, atLeast(0)).handle(eventCaptor.capture())[ FD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_7 $$ MultiException failures = new MultiException()[ CD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_3 $$ Class<T> genericClass = (Class<T>) expectedEvents.getClass().getComponentType()[ FD ]
Line_18 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null-->Line_19 $$ assertEquals("event#" + n, expect, actual)[ FD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_27 $$ expectedSet.add(eventToString(expectedEvent, methods))[ FD ]
Line_7 $$ MultiException failures = new MultiException()-->Line_45 $$ failures.ifExceptionThrow()[ FD ]
Line_7 $$ MultiException failures = new MultiException()-->Line_34 $$ failures.add(e)[ FD ]
Line_13 $$ if (inOrder) -->Line_14 $$ int len = Math.max(expectedEvents.length, actualEvents.size())[ CD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_17 $$ String expect = (n < expectedEvents.length) ? eventToString(expectedEvents[n], methods) : null[ FD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_4 $$ ArgumentCaptor<T> eventCaptor = ArgumentCaptor.forClass(genericClass)[ CD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_13 $$ if (inOrder) [ CD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_18 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null[ FD ]
Line_13 $$ if (inOrder) -->Line_25 $$ Set<String> expectedSet = new HashSet<String>()[ CD ]
Line_7 $$ MultiException failures = new MultiException()-->Line_41 $$ failures.add(e)[ FD ]
Line_6 $$ List<T> actualEvents = eventCaptor.getAllValues()-->Line_14 $$ int len = Math.max(expectedEvents.length, actualEvents.size())[ FD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_5 $$ verify(eventHandler, atLeast(0)).handle(eventCaptor.capture())[ FD ]
Line_7 $$ MultiException failures = new MultiException()-->Line_21 $$ failures.add(e)[ FD ]
Line_25 $$ Set<String> expectedSet = new HashSet<String>()-->Line_32 $$ assertTrue("unexpected event: " + actual, expectedSet.remove(actual))[ FD ]
Line_18 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null-->Line_32 $$ assertTrue("unexpected event: " + actual, expectedSet.remove(actual))[ FD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_45 $$ failures.ifExceptionThrow()[ CD ]
Line_17 $$ String expect = (n < expectedEvents.length) ? eventToString(expectedEvents[n], methods) : null-->Line_19 $$ assertEquals("event#" + n, expect, actual)[ FD ]
Line_25 $$ Set<String> expectedSet = new HashSet<String>()-->Line_27 $$ expectedSet.add(eventToString(expectedEvent, methods))[ FD ]
Line_7 $$ MultiException failures = new MultiException()-->Line_11 $$ failures.add(e)[ FD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_6 $$ List<T> actualEvents = eventCaptor.getAllValues()[ CD ]
Line_13 $$ if (inOrder) -->Line_15 $$ for (int n = 0; n < len; n++) [ CD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_5 $$ verify(eventHandler, atLeast(0)).handle(eventCaptor.capture())[ CD ]
Line_29 $$ for (T actualEvent : actualEvents) -->Line_31 $$ String actual = eventToString(actualEvent, methods)[ FD ]
Line_4 $$ ArgumentCaptor<T> eventCaptor = ArgumentCaptor.forClass(genericClass)-->Line_6 $$ List<T> actualEvents = eventCaptor.getAllValues()[ FD ]
Line_2 $$ private static <T extends Event<?>> void checkEvents(EventHandler<T> eventHandler, T[] expectedEvents, boolean inOrder, String... methods) throws Exception -->Line_31 $$ String actual = eventToString(actualEvent, methods)[ FD ]
Line_6 $$ List<T> actualEvents = eventCaptor.getAllValues()-->Line_18 $$ String actual = (n < actualEvents.size()) ? eventToString(actualEvents.get(n), methods) : null[ FD ]
