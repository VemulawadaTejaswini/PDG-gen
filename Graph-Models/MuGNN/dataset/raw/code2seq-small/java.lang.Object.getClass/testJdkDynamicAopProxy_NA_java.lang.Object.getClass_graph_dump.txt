Line_2 $$ public void testJdkDynamicAopProxy() throws Exception -->Line_3 $$ Class<?> jdkDynamicAopProxyClass = Class.forName("org.springframework.aop.framework.JdkDynamicAopProxy")[ CD ]
Line_3 $$ Class<?> jdkDynamicAopProxyClass = Class.forName("org.springframework.aop.framework.JdkDynamicAopProxy")-->Line_4 $$ Field advisedField = jdkDynamicAopProxyClass.getDeclaredField("advised")[ FD ]
Line_2 $$ public void testJdkDynamicAopProxy() throws Exception -->Line_5 $$ Class<?> advisedSupportClass = advisedField.getType()[ CD ]
Line_2 $$ public void testJdkDynamicAopProxy() throws Exception -->Line_6 $$ Assert.assertTrue(advisedSupportClass.getClass().getName() + " is not " + AdvisedSupport.class.getName(), advisedSupportClass.equals(AdvisedSupport.class))[ CD ]
Line_5 $$ Class<?> advisedSupportClass = advisedField.getType()-->Line_6 $$ Assert.assertTrue(advisedSupportClass.getClass().getName() + " is not " + AdvisedSupport.class.getName(), advisedSupportClass.equals(AdvisedSupport.class))[ FD ]
Line_2 $$ public void testJdkDynamicAopProxy() throws Exception -->Line_4 $$ Field advisedField = jdkDynamicAopProxyClass.getDeclaredField("advised")[ CD ]
Line_4 $$ Field advisedField = jdkDynamicAopProxyClass.getDeclaredField("advised")-->Line_5 $$ Class<?> advisedSupportClass = advisedField.getType()[ FD ]
