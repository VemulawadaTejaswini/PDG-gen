Line_8 $$ AdvisedSupport as = new AdvisedSupport()-->Line_9 $$ as.setTargetSource(mockTargetSource)[ FD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_6 $$ bean.value = "foo"[ CD ]
Line_12 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy(child)-->Line_15 $$ assertNull(proxy.getString())[ FD ]
Line_5 $$ PackageMethodTestBean bean = new PackageMethodTestBean()-->Line_14 $$ assertNotEquals(proxy.getClass().getClassLoader(), bean.getClass().getClassLoader())[ FD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_12 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy(child)[ CD ]
Line_5 $$ PackageMethodTestBean bean = new PackageMethodTestBean()-->Line_7 $$ mockTargetSource.setTarget(bean)[ FD ]
Line_3 $$ ClassLoader child = new ClassLoader(getClass().getClassLoader()) -->Line_12 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy(child)[ FD ]
Line_12 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy(child)-->Line_14 $$ assertNotEquals(proxy.getClass().getClassLoader(), bean.getClass().getClassLoader())[ FD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_15 $$ assertNull(proxy.getString())[ CD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_9 $$ as.setTargetSource(mockTargetSource)[ CD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_14 $$ assertNotEquals(proxy.getClass().getClassLoader(), bean.getClass().getClassLoader())[ CD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_11 $$ AopProxy aop = new CglibAopProxy(as)[ CD ]
Line_12 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy(child)-->Line_13 $$ assertTrue(AopUtils.isCglibProxy(proxy))[ FD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_10 $$ as.addAdvice(new NopInterceptor())[ CD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_3 $$ ClassLoader child = new ClassLoader(getClass().getClassLoader()) [ CD ]
Line_8 $$ AdvisedSupport as = new AdvisedSupport()-->Line_10 $$ as.addAdvice(new NopInterceptor())[ FD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_5 $$ PackageMethodTestBean bean = new PackageMethodTestBean()[ CD ]
Line_11 $$ AopProxy aop = new CglibAopProxy(as)-->Line_12 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy(child)[ FD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_7 $$ mockTargetSource.setTarget(bean)[ CD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_8 $$ AdvisedSupport as = new AdvisedSupport()[ CD ]
Line_2 $$ public void testPackageMethodInvocationWithDifferentClassLoader() -->Line_13 $$ assertTrue(AopUtils.isCglibProxy(proxy))[ CD ]
