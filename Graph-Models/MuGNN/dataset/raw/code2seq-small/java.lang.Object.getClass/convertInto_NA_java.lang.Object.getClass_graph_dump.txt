Line_7 $$ MinimalFileCollection collection = (MinimalFileCollection) element-->Line_8 $$ result.add(collection)[ FD ]
Line_4 $$ DefaultFileCollectionResolveContext nestedContext = (DefaultFileCollectionResolveContext) element-->Line_5 $$ result.addAll(nestedContext.resolveAsMinimalFileCollections())[ FD ]
Line_11 $$ if (element instanceof TaskDependency) -->Line_12 $$ return[ CD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_3 $$ if (element instanceof DefaultFileCollectionResolveContext) [ CD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_5 $$ result.addAll(nestedContext.resolveAsMinimalFileCollections())[ FD ]
Line_9 $$ if (element instanceof FileCollection) -->Line_11 $$ if (element instanceof TaskDependency) [ CD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_3 $$ if (element instanceof DefaultFileCollectionResolveContext) [ FD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_9 $$ if (element instanceof FileCollection) [ FD ]
Line_6 $$ if (element instanceof MinimalFileCollection) -->Line_9 $$ if (element instanceof FileCollection) [ CD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_14 $$ result.add(new ListBackedFileSet(resolver.resolve(element)))[ FD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_6 $$ if (element instanceof MinimalFileCollection) [ FD ]
Line_3 $$ if (element instanceof DefaultFileCollectionResolveContext) -->Line_5 $$ result.addAll(nestedContext.resolveAsMinimalFileCollections())[ CD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_8 $$ result.add(collection)[ FD ]
Line_11 $$ if (element instanceof TaskDependency) -->Line_14 $$ result.add(new ListBackedFileSet(resolver.resolve(element)))[ CD ]
Line_6 $$ if (element instanceof MinimalFileCollection) -->Line_8 $$ result.add(collection)[ CD ]
Line_3 $$ if (element instanceof DefaultFileCollectionResolveContext) -->Line_6 $$ if (element instanceof MinimalFileCollection) [ CD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_11 $$ if (element instanceof TaskDependency) [ FD ]
Line_6 $$ if (element instanceof MinimalFileCollection) -->Line_7 $$ MinimalFileCollection collection = (MinimalFileCollection) element[ CD ]
Line_3 $$ if (element instanceof DefaultFileCollectionResolveContext) -->Line_4 $$ DefaultFileCollectionResolveContext nestedContext = (DefaultFileCollectionResolveContext) element[ CD ]
Line_2 $$ public void convertInto(Object element, Collection<? super MinimalFileCollection> result, FileResolver resolver) -->Line_10 $$ throw new UnsupportedOperationException(String.format("Cannot convert instance of %s to MinimalFileCollection", element.getClass().getSimpleName()))[ FD ]
