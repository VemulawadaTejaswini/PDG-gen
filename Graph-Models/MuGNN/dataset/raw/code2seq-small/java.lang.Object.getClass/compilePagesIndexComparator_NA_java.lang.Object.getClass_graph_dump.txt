Line_3 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()-->Line_7 $$ return defineClass(classDefinition, PagesIndexComparator.class, callSiteBinder.getBindings(), getClass().getClassLoader())[ FD ]
Line_3 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()-->Line_6 $$ generateCompareTo(classDefinition, callSiteBinder, sortTypes, sortChannels, sortOrders)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("PagesIndexComparator"), type(Object.class), type(PagesIndexComparator.class))-->Line_6 $$ generateCompareTo(classDefinition, callSiteBinder, sortTypes, sortChannels, sortOrders)[ FD ]
Line_2 $$ private Class<? extends PagesIndexComparator> compilePagesIndexComparator(List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_3 $$ CallSiteBinder callSiteBinder = new CallSiteBinder()[ CD ]
Line_2 $$ private Class<? extends PagesIndexComparator> compilePagesIndexComparator(List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_7 $$ return defineClass(classDefinition, PagesIndexComparator.class, callSiteBinder.getBindings(), getClass().getClassLoader())[ CD ]
Line_2 $$ private Class<? extends PagesIndexComparator> compilePagesIndexComparator(List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("PagesIndexComparator"), type(Object.class), type(PagesIndexComparator.class))[ CD ]
Line_2 $$ private Class<? extends PagesIndexComparator> compilePagesIndexComparator(List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_6 $$ generateCompareTo(classDefinition, callSiteBinder, sortTypes, sortChannels, sortOrders)[ CD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("PagesIndexComparator"), type(Object.class), type(PagesIndexComparator.class))-->Line_5 $$ classDefinition.declareDefaultConstructor(a(PUBLIC))[ FD ]
Line_2 $$ private Class<? extends PagesIndexComparator> compilePagesIndexComparator(List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_5 $$ classDefinition.declareDefaultConstructor(a(PUBLIC))[ CD ]
Line_2 $$ private Class<? extends PagesIndexComparator> compilePagesIndexComparator(List<Type> sortTypes, List<Integer> sortChannels, List<SortOrder> sortOrders) -->Line_6 $$ generateCompareTo(classDefinition, callSiteBinder, sortTypes, sortChannels, sortOrders)[ FD ]
Line_4 $$ ClassDefinition classDefinition = new ClassDefinition(a(PUBLIC, FINAL), makeClassName("PagesIndexComparator"), type(Object.class), type(PagesIndexComparator.class))-->Line_7 $$ return defineClass(classDefinition, PagesIndexComparator.class, callSiteBinder.getBindings(), getClass().getClassLoader())[ FD ]
