Line_2 $$ public static Exception convertRmiAccessException(Method method, RemoteException ex, boolean isConnectFailure, String serviceName) -->Line_6 $$ if (ReflectionUtils.declaresException(method, ex.getClass())) [ FD ]
Line_3 $$ if (logger.isDebugEnabled()) -->Line_4 $$ logger.debug("Remote service [" + serviceName + "] threw exception", ex)[ CD ]
Line_2 $$ public static Exception convertRmiAccessException(Method method, RemoteException ex, boolean isConnectFailure, String serviceName) -->Line_6 $$ if (ReflectionUtils.declaresException(method, ex.getClass())) [ CD ]
Line_2 $$ public static Exception convertRmiAccessException(Method method, RemoteException ex, boolean isConnectFailure, String serviceName) -->Line_3 $$ if (logger.isDebugEnabled()) [ CD ]
Line_9 $$ if (isConnectFailure) -->Line_10 $$ return new RemoteConnectFailureException("Could not connect to remote service [" + serviceName + "]", ex)[ CD ]
Line_2 $$ public static Exception convertRmiAccessException(Method method, RemoteException ex, boolean isConnectFailure, String serviceName) -->Line_4 $$ logger.debug("Remote service [" + serviceName + "] threw exception", ex)[ FD ]
Line_6 $$ if (ReflectionUtils.declaresException(method, ex.getClass())) -->Line_9 $$ if (isConnectFailure) [ CD ]
Line_6 $$ if (ReflectionUtils.declaresException(method, ex.getClass())) -->Line_7 $$ return ex[ CD ]
Line_9 $$ if (isConnectFailure) -->Line_12 $$ return new RemoteAccessException("Could not access remote service [" + serviceName + "]", ex)[ CD ]
