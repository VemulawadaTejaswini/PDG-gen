Line_2 $$ public void testRegisterCallback() throws Exception -->Line_4 $$ final SynchronousQueue<SPI> synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(uuid)[ CD ]
Line_2 $$ public void testRegisterCallback() throws Exception -->Line_11 $$ takeSPIThread.start()[ CD ]
Line_2 $$ public void testRegisterCallback() throws Exception -->Line_3 $$ String uuid = "uuid"[ CD ]
Line_4 $$ final SynchronousQueue<SPI> synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(uuid)-->Line_7 $$ return synchronousQueue.take()[ FD ]
Line_3 $$ String uuid = "uuid"-->Line_15 $$ SPISynchronousQueueUtil.createSynchronousQueue(uuid)[ FD ]
Line_5 $$ FutureTask<SPI> takeSPIFutureTask = new FutureTask(new Callable<SPI>() -->Line_14 $$ Assert.assertSame(_mockRemoteSPI, takeSPIFutureTask.get())[ FD ]
Line_2 $$ public void testRegisterCallback() throws Exception -->Line_14 $$ Assert.assertSame(_mockRemoteSPI, takeSPIFutureTask.get())[ CD ]
Line_2 $$ public void testRegisterCallback() throws Exception -->Line_18 $$ currentThread.interrupt()[ CD ]
Line_2 $$ public void testRegisterCallback() throws Exception -->Line_5 $$ FutureTask<SPI> takeSPIFutureTask = new FutureTask(new Callable<SPI>() [ CD ]
Line_2 $$ public void testRegisterCallback() throws Exception -->Line_15 $$ SPISynchronousQueueUtil.createSynchronousQueue(uuid)[ CD ]
Line_2 $$ public void testRegisterCallback() throws Exception -->Line_17 $$ Thread currentThread = Thread.currentThread()[ CD ]
Line_5 $$ FutureTask<SPI> takeSPIFutureTask = new FutureTask(new Callable<SPI>() -->Line_7 $$ return synchronousQueue.take()[ CD ]
Line_3 $$ String uuid = "uuid"-->Line_4 $$ final SynchronousQueue<SPI> synchronousQueue = SPISynchronousQueueUtil.createSynchronousQueue(uuid)[ FD ]
Line_2 $$ public void testRegisterCallback() throws Exception -->Line_13 $$ Assert.assertSame(_mockRemoteSPI, registerCallback.call())[ CD ]
