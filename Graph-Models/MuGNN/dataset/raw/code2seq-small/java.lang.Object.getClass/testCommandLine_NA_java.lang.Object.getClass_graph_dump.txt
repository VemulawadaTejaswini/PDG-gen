Line_6 $$ Job job = app.submit(conf)-->Line_7 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_12 $$ Assert.assertTrue("HADOOP_CLIENT_OPTS not set for job", app.cmdEnvironment.containsKey("HADOOP_CLIENT_OPTS"))[ CD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_13 $$ Assert.assertEquals("", app.cmdEnvironment.get("HADOOP_CLIENT_OPTS"))[ CD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_10 $$ Assert.assertTrue("HADOOP_ROOT_LOGGER not set for job", app.cmdEnvironment.containsKey("HADOOP_ROOT_LOGGER"))[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_5 $$ conf.setBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM, true)[ CD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_6 $$ Job job = app.submit(conf)[ CD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_7 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)[ CD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_8 $$ app.verifyCompleted()[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM, true)[ FD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_11 $$ Assert.assertEquals("INFO,console", app.cmdEnvironment.get("HADOOP_ROOT_LOGGER"))[ CD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testCommandLine() throws Exception -->Line_9 $$ Assert.assertEquals("[" + MRApps.crossPlatformify("JAVA_HOME") + "/bin/java" + " -Djava.net.preferIPv4Stack=true" + " -Dhadoop.metrics.log.level=WARN" + "  -Xmx200m -Djava.io.tmpdir=" + MRApps.crossPlatformify("PWD") + "/tmp" + " -Dlog4j.configuration=container-log4j.properties" + " -Dyarn.app.container.log.dir=<LOG_DIR>" + " -Dyarn.app.container.log.filesize=0" + " -Dhadoop.root.logger=INFO,CLA" + " org.apache.hadoop.mapred.YarnChild 127.0.0.1" + " 54321" + " attempt_0_0000_m_000000_0" + " 0" + " 1><LOG_DIR>/stdout" + " 2><LOG_DIR>/stderr ]", app.myCommandLine)[ CD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_8 $$ app.verifyCompleted()[ FD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_7 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_6 $$ Job job = app.submit(conf)[ FD ]
