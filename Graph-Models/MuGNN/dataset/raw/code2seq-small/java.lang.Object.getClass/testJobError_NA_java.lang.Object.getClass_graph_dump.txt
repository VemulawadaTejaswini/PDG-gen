Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true)-->Line_4 $$ Job job = app.submit(new Configuration())[ FD ]
Line_2 $$ public void testJobError() throws Exception -->Line_7 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true)-->Line_11 $$ app.waitForState(job, JobState.ERROR)[ FD ]
Line_2 $$ public void testJobError() throws Exception -->Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true)[ CD ]
Line_4 $$ Job job = app.submit(new Configuration())-->Line_7 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true)-->Line_5 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testJobError() throws Exception -->Line_6 $$ Assert.assertEquals("Num tasks not correct", 1, job.getTasks().size())[ CD ]
Line_4 $$ Job job = app.submit(new Configuration())-->Line_5 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testJobError() throws Exception -->Line_5 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_7 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_8 $$ Task task = it.next()[ FD ]
Line_2 $$ public void testJobError() throws Exception -->Line_11 $$ app.waitForState(job, JobState.ERROR)[ CD ]
Line_8 $$ Task task = it.next()-->Line_9 $$ app.waitForState(task, TaskState.RUNNING)[ FD ]
Line_4 $$ Job job = app.submit(new Configuration())-->Line_6 $$ Assert.assertEquals("Num tasks not correct", 1, job.getTasks().size())[ FD ]
Line_2 $$ public void testJobError() throws Exception -->Line_9 $$ app.waitForState(task, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testJobError() throws Exception -->Line_4 $$ Job job = app.submit(new Configuration())[ CD ]
Line_2 $$ public void testJobError() throws Exception -->Line_10 $$ app.getContext().getEventHandler().handle(new TaskEvent(task.getID(), TaskEventType.T_SCHEDULE))[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true)-->Line_9 $$ app.waitForState(task, TaskState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 0, false, this.getClass().getName(), true)-->Line_10 $$ app.getContext().getEventHandler().handle(new TaskEvent(task.getID(), TaskEventType.T_SCHEDULE))[ FD ]
Line_2 $$ public void testJobError() throws Exception -->Line_8 $$ Task task = it.next()[ CD ]
Line_4 $$ Job job = app.submit(new Configuration())-->Line_11 $$ app.waitForState(job, JobState.ERROR)[ FD ]
Line_8 $$ Task task = it.next()-->Line_10 $$ app.getContext().getEventHandler().handle(new TaskEvent(task.getID(), TaskEventType.T_SCHEDULE))[ FD ]
