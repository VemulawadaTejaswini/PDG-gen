Line_9 $$ names = xbf.getBeanNamesForType(List.class)-->Line_16 $$ assertTrue(Arrays.asList(names).contains("listInstance"))[ FD ]
Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_8 $$ assertTrue(!Arrays.asList(names).contains("listInstance"))[ FD ]
Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_9 $$ names = xbf.getBeanNamesForType(List.class)[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_12 $$ assertTrue(List.class.isAssignableFrom(xbf.getType("listInstance")))[ FD ]
Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_13 $$ names = xbf.getBeanNamesForType(FactoryMethods.class)[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_17 $$ List<?> list = (List<?>) xbf.getBean("listInstance")[ FD ]
Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)-->Line_5 $$ reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()))[ FD ]
Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_10 $$ assertTrue(Arrays.asList(names).contains("listInstance"))[ FD ]
Line_9 $$ names = xbf.getBeanNamesForType(List.class)-->Line_15 $$ names = xbf.getBeanNamesForType(List.class)[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_12 $$ assertTrue(List.class.isAssignableFrom(xbf.getType("listInstance")))[ CD ]
Line_13 $$ names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_15 $$ names = xbf.getBeanNamesForType(List.class)[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_9 $$ names = xbf.getBeanNamesForType(List.class)[ CD ]
Line_9 $$ names = xbf.getBeanNamesForType(List.class)-->Line_13 $$ names = xbf.getBeanNamesForType(FactoryMethods.class)[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_8 $$ assertTrue(!Arrays.asList(names).contains("listInstance"))[ CD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_10 $$ assertTrue(Arrays.asList(names).contains("listInstance"))[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_13 $$ names = xbf.getBeanNamesForType(FactoryMethods.class)[ FD ]
Line_9 $$ names = xbf.getBeanNamesForType(List.class)-->Line_10 $$ assertTrue(Arrays.asList(names).contains("listInstance"))[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)[ CD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_15 $$ names = xbf.getBeanNamesForType(List.class)[ CD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_6 $$ assertTrue(List.class.isAssignableFrom(xbf.getType("listInstance")))[ CD ]
Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_14 $$ assertTrue(!Arrays.asList(names).contains("listInstance"))[ FD ]
Line_15 $$ names = xbf.getBeanNamesForType(List.class)-->Line_16 $$ assertTrue(Arrays.asList(names).contains("listInstance"))[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_17 $$ List<?> list = (List<?>) xbf.getBean("listInstance")[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_15 $$ names = xbf.getBeanNamesForType(List.class)[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_9 $$ names = xbf.getBeanNamesForType(List.class)[ FD ]
Line_13 $$ names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_14 $$ assertTrue(!Arrays.asList(names).contains("listInstance"))[ FD ]
Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_15 $$ names = xbf.getBeanNamesForType(List.class)[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_18 $$ assertEquals(Collections.EMPTY_LIST, list)[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_11 $$ xbf.preInstantiateSingletons()[ FD ]
Line_9 $$ names = xbf.getBeanNamesForType(List.class)-->Line_14 $$ assertTrue(!Arrays.asList(names).contains("listInstance"))[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_13 $$ names = xbf.getBeanNamesForType(FactoryMethods.class)[ CD ]
Line_13 $$ names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_16 $$ assertTrue(Arrays.asList(names).contains("listInstance"))[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_14 $$ assertTrue(!Arrays.asList(names).contains("listInstance"))[ CD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_11 $$ xbf.preInstantiateSingletons()[ CD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_5 $$ reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()))[ CD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_16 $$ assertTrue(Arrays.asList(names).contains("listInstance"))[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_6 $$ assertTrue(List.class.isAssignableFrom(xbf.getType("listInstance")))[ FD ]
Line_2 $$ public void testFactoryMethodWithDifferentReturnType() -->Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)[ CD ]
Line_17 $$ List<?> list = (List<?>) xbf.getBean("listInstance")-->Line_18 $$ assertEquals(Collections.EMPTY_LIST, list)[ FD ]
Line_7 $$ String[] names = xbf.getBeanNamesForType(FactoryMethods.class)-->Line_16 $$ assertTrue(Arrays.asList(names).contains("listInstance"))[ FD ]
