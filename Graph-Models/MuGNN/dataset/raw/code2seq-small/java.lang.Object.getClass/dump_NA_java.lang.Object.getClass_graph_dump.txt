Line_12 $$ for (int j = 0; j < inode.getBlocks().length; j++) -->Line_13 $$ sb.append("\t").append(inode.getBlocks()[j]).append("\n")[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder(getClass().getSimpleName())-->Line_6 $$ sb.append(entry.getKey()).append("\n")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(getClass().getSimpleName())-->Line_8 $$ sb.append("\t").append(inode.getFileType()).append("\n")[ FD ]
Line_2 $$ public void dump() throws IOException -->Line_4 $$ sb.append(", \n")[ CD ]
Line_7 $$ INode inode = entry.getValue()-->Line_9 $$ if (inode.getFileType() == FileType.DIRECTORY) [ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(getClass().getSimpleName())-->Line_16 $$ System.out.println(sb)[ FD ]
Line_2 $$ public void dump() throws IOException -->Line_16 $$ System.out.println(sb)[ CD ]
Line_2 $$ public void dump() throws IOException -->Line_3 $$ StringBuilder sb = new StringBuilder(getClass().getSimpleName())[ CD ]
Line_2 $$ public void dump() throws IOException -->Line_17 $$ System.out.println(inodes.keySet())[ CD ]
Line_5 $$ for (Map.Entry<Path, INode> entry : inodes.entrySet()) -->Line_7 $$ INode inode = entry.getValue()[ FD ]
Line_7 $$ INode inode = entry.getValue()-->Line_13 $$ sb.append("\t").append(inode.getBlocks()[j]).append("\n")[ FD ]
Line_2 $$ public void dump() throws IOException -->Line_18 $$ System.out.println(blocks.keySet())[ CD ]
Line_3 $$ StringBuilder sb = new StringBuilder(getClass().getSimpleName())-->Line_4 $$ sb.append(", \n")[ FD ]
Line_3 $$ StringBuilder sb = new StringBuilder(getClass().getSimpleName())-->Line_13 $$ sb.append("\t").append(inode.getBlocks()[j]).append("\n")[ FD ]
Line_7 $$ INode inode = entry.getValue()-->Line_12 $$ for (int j = 0; j < inode.getBlocks().length; j++) [ FD ]
Line_5 $$ for (Map.Entry<Path, INode> entry : inodes.entrySet()) -->Line_6 $$ sb.append(entry.getKey()).append("\n")[ FD ]
Line_7 $$ INode inode = entry.getValue()-->Line_8 $$ sb.append("\t").append(inode.getFileType()).append("\n")[ FD ]
