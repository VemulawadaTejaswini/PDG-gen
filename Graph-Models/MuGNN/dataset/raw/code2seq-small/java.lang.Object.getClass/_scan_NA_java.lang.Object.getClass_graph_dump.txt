Line_20 $$ Class<?> targetClass = target.getClass()-->Line_25 $$ Class<?> componentTypeClass = targetClass.getComponentType()[ FD ]
Line_28 $$ for (Object element : array) -->Line_29 $$ _scan(element)[ FD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_21 $$ if (targetClass.isArray()) [ CD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_9 $$ target = _resolveJavaProxy(target)[ FD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_12 $$ visitedId = String.valueOf(System.identityHashCode(target))[ FD ]
Line_36 $$ if (_visitSets && (target instanceof Set)) -->Line_37 $$ _scanCollection((Set<Object>) target)[ CD ]
Line_22 $$ if (!_visitArrays) -->Line_23 $$ return[ CD ]
Line_20 $$ Class<?> targetClass = target.getClass()-->Line_21 $$ if (targetClass.isArray()) [ FD ]
Line_12 $$ visitedId = String.valueOf(System.identityHashCode(target))-->Line_19 $$ _visitedIds.add(visitedId)[ FD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_3 $$ if (target == null) [ FD ]
Line_21 $$ if (targetClass.isArray()) -->Line_32 $$ if (_visitLists && (target instanceof List)) [ CD ]
Line_9 $$ target = _resolveJavaProxy(target)-->Line_20 $$ Class<?> targetClass = target.getClass()[ FD ]
Line_26 $$ if (componentTypeClass.isPrimitive() == false) -->Line_27 $$ Object[] array = (Object[]) target[ CD ]
Line_38 $$ if (_visitCollections && (target instanceof Collection)) -->Line_41 $$ _scanObject(target)[ CD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_20 $$ Class<?> targetClass = target.getClass()[ CD ]
Line_21 $$ if (targetClass.isArray()) -->Line_26 $$ if (componentTypeClass.isPrimitive() == false) [ CD ]
Line_32 $$ if (_visitLists && (target instanceof List)) -->Line_33 $$ _scanCollection((List<Object>) target)[ CD ]
Line_25 $$ Class<?> componentTypeClass = targetClass.getComponentType()-->Line_26 $$ if (componentTypeClass.isPrimitive() == false) [ FD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_41 $$ _scanObject(target)[ FD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_19 $$ _visitedIds.add(visitedId)[ CD ]
Line_10 $$ String visitedId = null-->Line_13 $$ if (_visitedIds.contains(visitedId)) [ FD ]
Line_10 $$ String visitedId = null-->Line_12 $$ visitedId = String.valueOf(System.identityHashCode(target))[ FD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_6 $$ if (!_scanning) [ CD ]
Line_9 $$ target = _resolveJavaProxy(target)-->Line_12 $$ visitedId = String.valueOf(System.identityHashCode(target))[ FD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_10 $$ String visitedId = null[ CD ]
Line_12 $$ visitedId = String.valueOf(System.identityHashCode(target))-->Line_13 $$ if (_visitedIds.contains(visitedId)) [ FD ]
Line_21 $$ if (targetClass.isArray()) -->Line_25 $$ Class<?> componentTypeClass = targetClass.getComponentType()[ CD ]
Line_10 $$ String visitedId = null-->Line_19 $$ _visitedIds.add(visitedId)[ FD ]
Line_34 $$ if (_visitMaps && (target instanceof Map)) -->Line_35 $$ _scanMap((Map<Object, Object>) target)[ CD ]
Line_13 $$ if (_visitedIds.contains(visitedId)) -->Line_14 $$ return[ CD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_3 $$ if (target == null) [ CD ]
Line_32 $$ if (_visitLists && (target instanceof List)) -->Line_34 $$ if (_visitMaps && (target instanceof Map)) [ CD ]
Line_36 $$ if (_visitSets && (target instanceof Set)) -->Line_38 $$ if (_visitCollections && (target instanceof Collection)) [ CD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_20 $$ Class<?> targetClass = target.getClass()[ FD ]
Line_21 $$ if (targetClass.isArray()) -->Line_22 $$ if (!_visitArrays) [ CD ]
Line_2 $$ private void _scan(Object target) throws Exception -->Line_9 $$ target = _resolveJavaProxy(target)[ CD ]
Line_34 $$ if (_visitMaps && (target instanceof Map)) -->Line_36 $$ if (_visitSets && (target instanceof Set)) [ CD ]
Line_9 $$ target = _resolveJavaProxy(target)-->Line_41 $$ _scanObject(target)[ FD ]
Line_6 $$ if (!_scanning) -->Line_7 $$ return[ CD ]
Line_38 $$ if (_visitCollections && (target instanceof Collection)) -->Line_39 $$ _scanCollection((Collection<Object>) target)[ CD ]
Line_3 $$ if (target == null) -->Line_4 $$ return[ CD ]
