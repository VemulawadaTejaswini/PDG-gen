Line_4 $$ ReflectionOptimizer optimizer = provider.getReflectionOptimizer(Bean.class, BeanReflectionHelper.getGetterNames(), BeanReflectionHelper.getSetterNames(), BeanReflectionHelper.getTypes())-->Line_6 $$ assertNotNull(optimizer.getInstantiationOptimizer())[ FD ]
Line_4 $$ ReflectionOptimizer optimizer = provider.getReflectionOptimizer(Bean.class, BeanReflectionHelper.getGetterNames(), BeanReflectionHelper.getSetterNames(), BeanReflectionHelper.getTypes())-->Line_5 $$ assertNotNull(optimizer)[ FD ]
Line_2 $$ public void testReflectionOptimization() -->Line_5 $$ assertNotNull(optimizer)[ CD ]
Line_4 $$ ReflectionOptimizer optimizer = provider.getReflectionOptimizer(Bean.class, BeanReflectionHelper.getGetterNames(), BeanReflectionHelper.getSetterNames(), BeanReflectionHelper.getTypes())-->Line_13 $$ Object[] values = optimizer.getAccessOptimizer().getPropertyValues(bean)[ FD ]
Line_2 $$ public void testReflectionOptimization() -->Line_10 $$ Bean bean = (Bean) instance[ CD ]
Line_2 $$ public void testReflectionOptimization() -->Line_8 $$ Object instance = optimizer.getInstantiationOptimizer().newInstance()[ CD ]
Line_4 $$ ReflectionOptimizer optimizer = provider.getReflectionOptimizer(Bean.class, BeanReflectionHelper.getGetterNames(), BeanReflectionHelper.getSetterNames(), BeanReflectionHelper.getTypes())-->Line_7 $$ assertNotNull(optimizer.getAccessOptimizer())[ FD ]
Line_4 $$ ReflectionOptimizer optimizer = provider.getReflectionOptimizer(Bean.class, BeanReflectionHelper.getGetterNames(), BeanReflectionHelper.getSetterNames(), BeanReflectionHelper.getTypes())-->Line_8 $$ Object instance = optimizer.getInstantiationOptimizer().newInstance()[ FD ]
Line_13 $$ Object[] values = optimizer.getAccessOptimizer().getPropertyValues(bean)-->Line_14 $$ assertEquivalent(values, BeanReflectionHelper.TEST_VALUES)[ FD ]
Line_2 $$ public void testReflectionOptimization() -->Line_11 $$ optimizer.getAccessOptimizer().setPropertyValues(bean, BeanReflectionHelper.TEST_VALUES)[ CD ]
Line_10 $$ Bean bean = (Bean) instance-->Line_11 $$ optimizer.getAccessOptimizer().setPropertyValues(bean, BeanReflectionHelper.TEST_VALUES)[ FD ]
Line_10 $$ Bean bean = (Bean) instance-->Line_13 $$ Object[] values = optimizer.getAccessOptimizer().getPropertyValues(bean)[ FD ]
Line_2 $$ public void testReflectionOptimization() -->Line_3 $$ BytecodeProviderImpl provider = new BytecodeProviderImpl()[ CD ]
Line_2 $$ public void testReflectionOptimization() -->Line_13 $$ Object[] values = optimizer.getAccessOptimizer().getPropertyValues(bean)[ CD ]
Line_2 $$ public void testReflectionOptimization() -->Line_4 $$ ReflectionOptimizer optimizer = provider.getReflectionOptimizer(Bean.class, BeanReflectionHelper.getGetterNames(), BeanReflectionHelper.getSetterNames(), BeanReflectionHelper.getTypes())[ CD ]
Line_8 $$ Object instance = optimizer.getInstantiationOptimizer().newInstance()-->Line_9 $$ assertEquals(instance.getClass(), Bean.class)[ FD ]
Line_3 $$ BytecodeProviderImpl provider = new BytecodeProviderImpl()-->Line_4 $$ ReflectionOptimizer optimizer = provider.getReflectionOptimizer(Bean.class, BeanReflectionHelper.getGetterNames(), BeanReflectionHelper.getSetterNames(), BeanReflectionHelper.getTypes())[ FD ]
Line_2 $$ public void testReflectionOptimization() -->Line_14 $$ assertEquivalent(values, BeanReflectionHelper.TEST_VALUES)[ CD ]
Line_2 $$ public void testReflectionOptimization() -->Line_12 $$ assertEquals(bean.getSomeString(), BeanReflectionHelper.TEST_VALUES[0])[ CD ]
Line_10 $$ Bean bean = (Bean) instance-->Line_12 $$ assertEquals(bean.getSomeString(), BeanReflectionHelper.TEST_VALUES[0])[ FD ]
Line_4 $$ ReflectionOptimizer optimizer = provider.getReflectionOptimizer(Bean.class, BeanReflectionHelper.getGetterNames(), BeanReflectionHelper.getSetterNames(), BeanReflectionHelper.getTypes())-->Line_11 $$ optimizer.getAccessOptimizer().setPropertyValues(bean, BeanReflectionHelper.TEST_VALUES)[ FD ]
Line_2 $$ public void testReflectionOptimization() -->Line_9 $$ assertEquals(instance.getClass(), Bean.class)[ CD ]
Line_2 $$ public void testReflectionOptimization() -->Line_7 $$ assertNotNull(optimizer.getAccessOptimizer())[ CD ]
Line_2 $$ public void testReflectionOptimization() -->Line_6 $$ assertNotNull(optimizer.getInstantiationOptimizer())[ CD ]
