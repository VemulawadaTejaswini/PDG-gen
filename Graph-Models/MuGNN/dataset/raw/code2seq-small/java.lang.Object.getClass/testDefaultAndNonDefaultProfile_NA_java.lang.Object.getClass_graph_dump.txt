Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_21 $$ reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()))[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_10 $$ env.setDefaultProfiles("default")[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_4 $$ assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, "other"), not(containsTargetBean()))[ CD ]
Line_8 $$ ConfigurableEnvironment env = new StandardEnvironment()-->Line_20 $$ reader.setEnvironment(env)[ FD ]
Line_8 $$ ConfigurableEnvironment env = new StandardEnvironment()-->Line_28 $$ reader.setEnvironment(env)[ FD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_29 $$ reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()))[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_11 $$ reader.setEnvironment(env)[ CD ]
Line_7 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory)-->Line_12 $$ reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()))[ FD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_30 $$ assertThat(beanFactory, containsTargetBean())[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_9 $$ env.setActiveProfiles(DEV_ACTIVE)[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_22 $$ assertThat(beanFactory, containsTargetBean())[ CD ]
Line_8 $$ ConfigurableEnvironment env = new StandardEnvironment()-->Line_11 $$ reader.setEnvironment(env)[ FD ]
Line_6 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()-->Line_30 $$ assertThat(beanFactory, containsTargetBean())[ FD ]
Line_8 $$ ConfigurableEnvironment env = new StandardEnvironment()-->Line_10 $$ env.setDefaultProfiles("default")[ FD ]
Line_7 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory)-->Line_29 $$ reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()))[ FD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_13 $$ assertThat(beanFactory, containsTargetBean())[ CD ]
Line_8 $$ ConfigurableEnvironment env = new StandardEnvironment()-->Line_19 $$ env.setDefaultProfiles("default")[ FD ]
Line_7 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory)-->Line_20 $$ reader.setEnvironment(env)[ FD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_20 $$ reader.setEnvironment(env)[ CD ]
Line_8 $$ ConfigurableEnvironment env = new StandardEnvironment()-->Line_9 $$ env.setActiveProfiles(DEV_ACTIVE)[ FD ]
Line_6 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()-->Line_13 $$ assertThat(beanFactory, containsTargetBean())[ FD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_6 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_3 $$ assertThat(beanFactoryFor(DEFAULT_ELIGIBLE_XML, NONE_ACTIVE), containsTargetBean())[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_7 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory)[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_28 $$ reader.setEnvironment(env)[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_12 $$ reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()))[ CD ]
Line_7 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory)-->Line_11 $$ reader.setEnvironment(env)[ FD ]
Line_7 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory)-->Line_28 $$ reader.setEnvironment(env)[ FD ]
Line_7 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(beanFactory)-->Line_21 $$ reader.loadBeanDefinitions(new ClassPathResource(DEFAULT_AND_DEV_ELIGIBLE_XML, getClass()))[ FD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_19 $$ env.setDefaultProfiles("default")[ CD ]
Line_2 $$ public void testDefaultAndNonDefaultProfile() -->Line_8 $$ ConfigurableEnvironment env = new StandardEnvironment()[ CD ]
Line_6 $$ DefaultListableBeanFactory beanFactory = new DefaultListableBeanFactory()-->Line_22 $$ assertThat(beanFactory, containsTargetBean())[ FD ]
