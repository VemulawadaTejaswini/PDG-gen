Line_3 $$ TypeDescriptor desc = new TypeDescriptor(getClass().getField("mapPreserveContext"))-->Line_7 $$ assertEquals(Integer.class, desc.getElementTypeDescriptor().getType())[ FD ]
Line_2 $$ public void mapKeyTypePreserveContext() throws Exception -->Line_5 $$ List<Integer> value = new ArrayList<Integer>(3)[ CD ]
Line_6 $$ desc = desc.getMapKeyTypeDescriptor(value)-->Line_8 $$ assertNotNull(desc.getAnnotation(FieldAnnotation.class))[ FD ]
Line_2 $$ public void mapKeyTypePreserveContext() throws Exception -->Line_3 $$ TypeDescriptor desc = new TypeDescriptor(getClass().getField("mapPreserveContext"))[ CD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(getClass().getField("mapPreserveContext"))-->Line_4 $$ assertEquals(Integer.class, desc.getMapKeyTypeDescriptor().getElementTypeDescriptor().getType())[ FD ]
Line_5 $$ List<Integer> value = new ArrayList<Integer>(3)-->Line_6 $$ desc = desc.getMapKeyTypeDescriptor(value)[ FD ]
Line_2 $$ public void mapKeyTypePreserveContext() throws Exception -->Line_6 $$ desc = desc.getMapKeyTypeDescriptor(value)[ CD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(getClass().getField("mapPreserveContext"))-->Line_6 $$ desc = desc.getMapKeyTypeDescriptor(value)[ FD ]
Line_3 $$ TypeDescriptor desc = new TypeDescriptor(getClass().getField("mapPreserveContext"))-->Line_8 $$ assertNotNull(desc.getAnnotation(FieldAnnotation.class))[ FD ]
Line_6 $$ desc = desc.getMapKeyTypeDescriptor(value)-->Line_7 $$ assertEquals(Integer.class, desc.getElementTypeDescriptor().getType())[ FD ]
Line_2 $$ public void mapKeyTypePreserveContext() throws Exception -->Line_8 $$ assertNotNull(desc.getAnnotation(FieldAnnotation.class))[ CD ]
Line_2 $$ public void mapKeyTypePreserveContext() throws Exception -->Line_7 $$ assertEquals(Integer.class, desc.getElementTypeDescriptor().getType())[ CD ]
Line_2 $$ public void mapKeyTypePreserveContext() throws Exception -->Line_4 $$ assertEquals(Integer.class, desc.getMapKeyTypeDescriptor().getElementTypeDescriptor().getType())[ CD ]
