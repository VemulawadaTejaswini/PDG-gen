Line_7 $$ Resource resource = new ClassPathResource("test/" + gzFile, getClass())-->Line_9 $$ assertEquals(resource.getDescription(), resolved.getDescription())[ FD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_11 $$ assertTrue("Expected " + resolved + " to be of type " + EncodedResource.class, resolved instanceof EncodedResource)[ CD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_4 $$ request.addHeader("Accept-Encoding", "gzip")[ CD ]
Line_5 $$ String file = "js/foo.js"-->Line_8 $$ Resource resolved = resolver.resolveResource(request, file, locations)[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_8 $$ Resource resolved = resolver.resolveResource(request, file, locations)[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()-->Line_4 $$ request.addHeader("Accept-Encoding", "gzip")[ FD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_9 $$ assertEquals(resource.getDescription(), resolved.getDescription())[ CD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_8 $$ Resource resolved = resolver.resolveResource(request, file, locations)[ CD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_6 $$ String gzFile = file + ".gz"[ CD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_5 $$ String file = "js/foo.js"[ CD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest()[ CD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_7 $$ Resource resource = new ClassPathResource("test/" + gzFile, getClass())[ CD ]
Line_2 $$ public void resolveGzippedFile() throws IOException -->Line_10 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ CD ]
Line_8 $$ Resource resolved = resolver.resolveResource(request, file, locations)-->Line_10 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ FD ]
Line_8 $$ Resource resolved = resolver.resolveResource(request, file, locations)-->Line_9 $$ assertEquals(resource.getDescription(), resolved.getDescription())[ FD ]
