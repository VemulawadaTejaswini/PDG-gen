Line_22 $$ String type-->Line_29 $$ if (type.equals(ObjectMapper.CONTENT_TYPE) || type.equals(ObjectMapper.NESTED_CONTENT_TYPE)) [ FD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_38 $$ DocumentMapperParser.checkNoRemainingFields(propName, multiFieldNodes, parserContext.indexVersionCreated())[ FD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_42 $$ return false[ CD ]
Line_4 $$ if (propName.equals("fields")) -->Line_5 $$ final Map<String, Object> multiFieldsPropNodes[ CD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_11 $$ throw new MapperParsingException("expected map for property [fields] on field [" + propNode + "] or " + "[" + propName + "] but got a " + propNode.getClass())[ FD ]
Line_13 $$ for (Map.Entry<String, Object> multiFieldEntry : multiFieldsPropNodes.entrySet()) -->Line_18 $$ if (!(multiFieldEntry.getValue() instanceof Map)) [ FD ]
Line_5 $$ final Map<String, Object> multiFieldsPropNodes-->Line_9 $$ multiFieldsPropNodes = (Map<String, Object>) propNode[ FD ]
Line_32 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)-->Line_36 $$ builder.addMultiField(typeParser.parse(multiFieldName, multiFieldNodes, parserContext))[ FD ]
Line_13 $$ for (Map.Entry<String, Object> multiFieldEntry : multiFieldsPropNodes.entrySet()) -->Line_14 $$ String multiFieldName = multiFieldEntry.getKey()[ FD ]
Line_7 $$ multiFieldsPropNodes = Collections.emptyMap()-->Line_9 $$ multiFieldsPropNodes = (Map<String, Object>) propNode[ FD ]
Line_5 $$ final Map<String, Object> multiFieldsPropNodes-->Line_13 $$ for (Map.Entry<String, Object> multiFieldEntry : multiFieldsPropNodes.entrySet()) [ FD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_36 $$ builder.addMultiField(typeParser.parse(multiFieldName, multiFieldNodes, parserContext))[ FD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_3 $$ parserContext = parserContext.createMultiFieldContext(parserContext)[ FD ]
Line_24 $$ if (typeNode != null) -->Line_25 $$ type = typeNode.toString()[ CD ]
Line_22 $$ String type-->Line_32 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_32 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)-->Line_33 $$ if (typeParser == null) [ FD ]
Line_6 $$ if (propNode instanceof List && ((List<?>) propNode).isEmpty()) -->Line_7 $$ multiFieldsPropNodes = Collections.emptyMap()[ CD ]
Line_23 $$ Object typeNode = multiFieldNodes.get("type")-->Line_24 $$ if (typeNode != null) [ FD ]
Line_21 $$ Map<String, Object> multiFieldNodes = (Map<String, Object>) multiFieldEntry.getValue()-->Line_36 $$ builder.addMultiField(typeParser.parse(multiFieldName, multiFieldNodes, parserContext))[ FD ]
Line_21 $$ Map<String, Object> multiFieldNodes = (Map<String, Object>) multiFieldEntry.getValue()-->Line_23 $$ Object typeNode = multiFieldNodes.get("type")[ FD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_8 $$ if (propNode instanceof Map) [ FD ]
Line_23 $$ Object typeNode = multiFieldNodes.get("type")-->Line_25 $$ type = typeNode.toString()[ FD ]
Line_4 $$ if (propName.equals("fields")) -->Line_40 $$ return true[ CD ]
Line_22 $$ String type-->Line_25 $$ type = typeNode.toString()[ FD ]
Line_25 $$ type = typeNode.toString()-->Line_29 $$ if (type.equals(ObjectMapper.CONTENT_TYPE) || type.equals(ObjectMapper.NESTED_CONTENT_TYPE)) [ FD ]
Line_25 $$ type = typeNode.toString()-->Line_32 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_8 $$ if (propNode instanceof Map) -->Line_9 $$ multiFieldsPropNodes = (Map<String, Object>) propNode[ CD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_4 $$ if (propName.equals("fields")) [ FD ]
Line_3 $$ parserContext = parserContext.createMultiFieldContext(parserContext)-->Line_36 $$ builder.addMultiField(typeParser.parse(multiFieldName, multiFieldNodes, parserContext))[ FD ]
Line_13 $$ for (Map.Entry<String, Object> multiFieldEntry : multiFieldsPropNodes.entrySet()) -->Line_21 $$ Map<String, Object> multiFieldNodes = (Map<String, Object>) multiFieldEntry.getValue()[ FD ]
Line_14 $$ String multiFieldName = multiFieldEntry.getKey()-->Line_15 $$ if (multiFieldName.contains(".")) [ FD ]
Line_5 $$ final Map<String, Object> multiFieldsPropNodes-->Line_7 $$ multiFieldsPropNodes = Collections.emptyMap()[ FD ]
Line_3 $$ parserContext = parserContext.createMultiFieldContext(parserContext)-->Line_38 $$ DocumentMapperParser.checkNoRemainingFields(propName, multiFieldNodes, parserContext.indexVersionCreated())[ FD ]
Line_21 $$ Map<String, Object> multiFieldNodes = (Map<String, Object>) multiFieldEntry.getValue()-->Line_37 $$ multiFieldNodes.remove("type")[ FD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_3 $$ parserContext = parserContext.createMultiFieldContext(parserContext)[ CD ]
Line_3 $$ parserContext = parserContext.createMultiFieldContext(parserContext)-->Line_32 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_14 $$ String multiFieldName = multiFieldEntry.getKey()-->Line_36 $$ builder.addMultiField(typeParser.parse(multiFieldName, multiFieldNodes, parserContext))[ FD ]
Line_7 $$ multiFieldsPropNodes = Collections.emptyMap()-->Line_13 $$ for (Map.Entry<String, Object> multiFieldEntry : multiFieldsPropNodes.entrySet()) [ FD ]
Line_6 $$ if (propNode instanceof List && ((List<?>) propNode).isEmpty()) -->Line_8 $$ if (propNode instanceof Map) [ CD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_4 $$ if (propName.equals("fields")) [ CD ]
Line_9 $$ multiFieldsPropNodes = (Map<String, Object>) propNode-->Line_13 $$ for (Map.Entry<String, Object> multiFieldEntry : multiFieldsPropNodes.entrySet()) [ FD ]
Line_4 $$ if (propName.equals("fields")) -->Line_6 $$ if (propNode instanceof List && ((List<?>) propNode).isEmpty()) [ CD ]
Line_21 $$ Map<String, Object> multiFieldNodes = (Map<String, Object>) multiFieldEntry.getValue()-->Line_38 $$ DocumentMapperParser.checkNoRemainingFields(propName, multiFieldNodes, parserContext.indexVersionCreated())[ FD ]
Line_2 $$ public static boolean parseMultiField(FieldMapper.Builder builder, String name, Mapper.TypeParser.ParserContext parserContext, String propName, Object propNode) -->Line_32 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
