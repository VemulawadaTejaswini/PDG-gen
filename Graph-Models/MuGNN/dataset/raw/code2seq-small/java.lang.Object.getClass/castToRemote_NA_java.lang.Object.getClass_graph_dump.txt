Line_6 $$ if (handler instanceof RemoteInvocationHandler) -->Line_8 $$ if (clazz.isInstance(rih.myRemote)) [ CD ]
Line_2 $$ public static <T> T castToRemote(final Object object, final Class<T> clazz) -->Line_5 $$ final InvocationHandler handler = Proxy.getInvocationHandler(object)[ CD ]
Line_2 $$ public static <T> T castToRemote(final Object object, final Class<T> clazz) -->Line_12 $$ return null[ CD ]
Line_2 $$ public static <T> T castToRemote(final Object object, final Class<T> clazz) -->Line_5 $$ final InvocationHandler handler = Proxy.getInvocationHandler(object)[ FD ]
Line_8 $$ if (clazz.isInstance(rih.myRemote)) -->Line_9 $$ return (T) rih.myRemote[ CD ]
Line_6 $$ if (handler instanceof RemoteInvocationHandler) -->Line_7 $$ final RemoteInvocationHandler rih = (RemoteInvocationHandler) handler[ CD ]
Line_2 $$ public static <T> T castToRemote(final Object object, final Class<T> clazz) -->Line_6 $$ if (handler instanceof RemoteInvocationHandler) [ CD ]
Line_5 $$ final InvocationHandler handler = Proxy.getInvocationHandler(object)-->Line_6 $$ if (handler instanceof RemoteInvocationHandler) [ FD ]
Line_2 $$ public static <T> T castToRemote(final Object object, final Class<T> clazz) -->Line_3 $$ if (!Proxy.isProxyClass(object.getClass()))[ CD ]
Line_2 $$ public static <T> T castToRemote(final Object object, final Class<T> clazz) -->Line_3 $$ if (!Proxy.isProxyClass(object.getClass()))[ FD ]
Line_2 $$ public static <T> T castToRemote(final Object object, final Class<T> clazz) -->Line_8 $$ if (clazz.isInstance(rih.myRemote)) [ FD ]
Line_3 $$ if (!Proxy.isProxyClass(object.getClass()))-->Line_4 $$ return null[ CD ]
