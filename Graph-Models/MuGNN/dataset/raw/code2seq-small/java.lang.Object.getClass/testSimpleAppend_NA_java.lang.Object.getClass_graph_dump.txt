Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_23 $$ stm = fs.append(file1)[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_62 $$ int offset = 0-->Line_67 $$ offset += len[ FD ]
Line_84 $$ out = null-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_2 $$ public void testSimpleAppend() throws IOException -->Line_3 $$ final Configuration conf = new HdfsConfiguration()[ CD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_103 $$ fs.close()[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_34 $$ AppendTestUtil.checkFullFile(fs, file1, AppendTestUtil.FILE_SIZE, fileContents, "Read 2")[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_83 $$ fs.setPermission(dir, new FsPermission((short) 0777))[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_27 $$ stm = fs.append(file1)[ FD ]
Line_73 $$ out = null-->Line_84 $$ out = null[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_72 $$ fs.setPermission(foo, new FsPermission((short) 0200))[ FD ]
Line_73 $$ out = null-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_23 $$ stm = fs.append(file1)[ FD ]
Line_59 $$ Path dir = new Path(root, getClass().getSimpleName())-->Line_71 $$ fs.setPermission(dir, new FsPermission((short) 0100))[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_75 $$ out = fs.append(foo)[ FD ]
Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)-->Line_82 $$ fs.setPermission(foo, new FsPermission((short) 0577))[ FD ]
Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)-->Line_75 $$ out = fs.append(foo)[ FD ]
Line_3 $$ final Configuration conf = new HdfsConfiguration()-->Line_5 $$ SimulatedFSDataset.setFactory(conf)[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_75 $$ out = fs.append(foo)[ FD ]
Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)-->Line_71 $$ fs.setPermission(dir, new FsPermission((short) 0100))[ FD ]
Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_30 $$ stm.write(fileContents, mid2, AppendTestUtil.FILE_SIZE - mid2)[ FD ]
Line_60 $$ Path foo = new Path(dir, "foo.dat")-->Line_72 $$ fs.setPermission(foo, new FsPermission((short) 0200))[ FD ]
Line_86 $$ out = fs.append(foo)-->Line_92 $$ IOUtils.closeStream(out)[ FD ]
Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_32 $$ stm.close()[ FD ]
Line_23 $$ stm = fs.append(file1)-->Line_25 $$ stm.close()[ FD ]
Line_16 $$ int mid = 186-->Line_24 $$ stm.write(fileContents, mid, mid2 - mid)[ FD ]
Line_53 $$ String username = "testappenduser"-->Line_57 $$ UserGroupInformation appenduser = UserGroupInformation.createUserForTesting(username, new String[] [ FD ]
Line_73 $$ out = null-->Line_92 $$ IOUtils.closeStream(out)[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_69 $$ IOUtils.closeStream(out)[ FD ]
Line_23 $$ stm = fs.append(file1)-->Line_30 $$ stm.write(fileContents, mid2, AppendTestUtil.FILE_SIZE - mid2)[ FD ]
Line_65 $$ int len = 10 + AppendTestUtil.nextInt(100)-->Line_67 $$ offset += len[ FD ]
Line_13 $$ Path file1 = new Path("/simpleAppend.dat")-->Line_34 $$ AppendTestUtil.checkFullFile(fs, file1, AppendTestUtil.FILE_SIZE, fileContents, "Read 2")[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_51 $$ fs.close()[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_39 $$ out = fs.append(new Path("/non-existing.dat"))[ FD ]
Line_27 $$ stm = fs.append(file1)-->Line_32 $$ stm.close()[ FD ]
Line_62 $$ int offset = 0-->Line_78 $$ offset += len[ FD ]
Line_16 $$ int mid = 186-->Line_18 $$ stm.write(fileContents, 0, mid)[ FD ]
Line_3 $$ final Configuration conf = new HdfsConfiguration()-->Line_7 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_HANDLER_COUNT_KEY, 50)[ FD ]
Line_23 $$ stm = fs.append(file1)-->Line_24 $$ stm.write(fileContents, mid, mid2 - mid)[ FD ]
Line_2 $$ public void testSimpleAppend() throws IOException -->Line_4 $$ if (simulatedStorage) [ CD ]
Line_37 $$ FSDataOutputStream out = null-->Line_66 $$ out.write(fileContents, offset, len)[ FD ]
Line_60 $$ Path foo = new Path(dir, "foo.dat")-->Line_64 $$ out = fs.create(foo)[ FD ]
Line_52 $$ final UserGroupInformation superuser = UserGroupInformation.getCurrentUser()-->Line_56 $$ assertFalse(Arrays.asList(superuser.getGroupNames()).contains(group))[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_77 $$ out.write(fileContents, offset, len)[ FD ]
Line_2 $$ public void testSimpleAppend() throws IOException -->Line_8 $$ fileContents = AppendTestUtil.initBuffer(AppendTestUtil.FILE_SIZE)[ CD ]
Line_37 $$ FSDataOutputStream out = null-->Line_84 $$ out = null[ FD ]
Line_4 $$ if (simulatedStorage) -->Line_5 $$ SimulatedFSDataset.setFactory(conf)[ CD ]
Line_49 $$ Path root = new Path("/")-->Line_50 $$ fs.setPermission(root, new FsPermission((short) 0777))[ FD ]
Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)-->Line_64 $$ out = fs.create(foo)[ FD ]
Line_54 $$ String group = "testappendgroup"-->Line_56 $$ assertFalse(Arrays.asList(superuser.getGroupNames()).contains(group))[ FD ]
Line_75 $$ out = fs.append(foo)-->Line_80 $$ IOUtils.closeStream(out)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_60 $$ Path foo = new Path(dir, "foo.dat")-->Line_75 $$ out = fs.append(foo)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_64 $$ out = fs.create(foo)[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_66 $$ out.write(fileContents, offset, len)[ FD ]
Line_73 $$ out = null-->Line_77 $$ out.write(fileContents, offset, len)[ FD ]
Line_75 $$ out = fs.append(foo)-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_65 $$ int len = 10 + AppendTestUtil.nextInt(100)-->Line_78 $$ offset += len[ FD ]
Line_2 $$ public void testSimpleAppend() throws IOException -->Line_10 $$ FileSystem fs = cluster.getFileSystem()[ CD ]
Line_2 $$ public void testSimpleAppend() throws IOException -->Line_7 $$ conf.setInt(DFSConfigKeys.DFS_DATANODE_HANDLER_COUNT_KEY, 50)[ CD ]
Line_13 $$ Path file1 = new Path("/simpleAppend.dat")-->Line_23 $$ stm = fs.append(file1)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_45 $$ IOUtils.closeStream(out)[ FD ]
Line_73 $$ out = null-->Line_75 $$ out = fs.append(foo)[ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_10 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_21 $$ int mid2 = 607-->Line_30 $$ stm.write(fileContents, mid2, AppendTestUtil.FILE_SIZE - mid2)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_73 $$ out = null[ FD ]
Line_59 $$ Path dir = new Path(root, getClass().getSimpleName())-->Line_83 $$ fs.setPermission(dir, new FsPermission((short) 0777))[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_71 $$ fs.setPermission(dir, new FsPermission((short) 0100))[ FD ]
Line_67 $$ offset += len-->Line_78 $$ offset += len[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_50 $$ fs.setPermission(root, new FsPermission((short) 0777))[ FD ]
Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()-->Line_104 $$ cluster.shutdown()[ FD ]
Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_18 $$ stm.write(fileContents, 0, mid)[ FD ]
Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_27 $$ stm = fs.append(file1)[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_69 $$ IOUtils.closeStream(out)[ FD ]
Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_19 $$ stm.close()[ FD ]
Line_65 $$ int len = 10 + AppendTestUtil.nextInt(100)-->Line_77 $$ out.write(fileContents, offset, len)[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_64 $$ out = fs.create(foo)[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_69 $$ IOUtils.closeStream(out)[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_84 $$ out = null[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_45 $$ IOUtils.closeStream(out)[ FD ]
Line_75 $$ out = fs.append(foo)-->Line_92 $$ IOUtils.closeStream(out)[ FD ]
Line_67 $$ offset += len-->Line_77 $$ out.write(fileContents, offset, len)[ FD ]
Line_13 $$ Path file1 = new Path("/simpleAppend.dat")-->Line_27 $$ stm = fs.append(file1)[ FD ]
Line_13 $$ Path file1 = new Path("/simpleAppend.dat")-->Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_92 $$ IOUtils.closeStream(out)[ FD ]
Line_60 $$ Path foo = new Path(dir, "foo.dat")-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_23 $$ stm = fs.append(file1)-->Line_27 $$ stm = fs.append(file1)[ FD ]
Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_28 $$ assertTrue(stm.getPos() > 0)[ FD ]
Line_65 $$ int len = 10 + AppendTestUtil.nextInt(100)-->Line_66 $$ out.write(fileContents, offset, len)[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_66 $$ out.write(fileContents, offset, len)[ FD ]
Line_53 $$ String username = "testappenduser"-->Line_55 $$ assertFalse(superuser.getShortUserName().equals(username))[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_77 $$ out.write(fileContents, offset, len)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_80 $$ IOUtils.closeStream(out)[ FD ]
Line_57 $$ UserGroupInformation appenduser = UserGroupInformation.createUserForTesting(username, new String[] -->Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)[ FD ]
Line_23 $$ stm = fs.append(file1)-->Line_28 $$ assertTrue(stm.getPos() > 0)[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_82 $$ fs.setPermission(foo, new FsPermission((short) 0577))[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_80 $$ IOUtils.closeStream(out)[ FD ]
Line_2 $$ public void testSimpleAppend() throws IOException -->Line_9 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).build()[ CD ]
Line_75 $$ out = fs.append(foo)-->Line_77 $$ out.write(fileContents, offset, len)[ FD ]
Line_73 $$ out = null-->Line_80 $$ IOUtils.closeStream(out)[ FD ]
Line_84 $$ out = null-->Line_92 $$ IOUtils.closeStream(out)[ FD ]
Line_27 $$ stm = fs.append(file1)-->Line_28 $$ assertTrue(stm.getPos() > 0)[ FD ]
Line_62 $$ int offset = 0-->Line_66 $$ out.write(fileContents, offset, len)[ FD ]
Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_24 $$ stm.write(fileContents, mid, mid2 - mid)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_75 $$ out = fs.append(foo)[ FD ]
Line_23 $$ stm = fs.append(file1)-->Line_32 $$ stm.close()[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_73 $$ out = null[ FD ]
Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)-->Line_86 $$ out = fs.append(foo)[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_84 $$ out = null[ FD ]
Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)-->Line_25 $$ stm.close()[ FD ]
Line_64 $$ out = fs.create(foo)-->Line_73 $$ out = null[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_92 $$ IOUtils.closeStream(out)[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_80 $$ IOUtils.closeStream(out)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_39 $$ out = fs.append(new Path("/non-existing.dat"))[ FD ]
Line_52 $$ final UserGroupInformation superuser = UserGroupInformation.getCurrentUser()-->Line_55 $$ assertFalse(superuser.getShortUserName().equals(username))[ FD ]
Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)-->Line_83 $$ fs.setPermission(dir, new FsPermission((short) 0777))[ FD ]
Line_75 $$ out = fs.append(foo)-->Line_84 $$ out = null[ FD ]
Line_62 $$ int offset = 0-->Line_77 $$ out.write(fileContents, offset, len)[ FD ]
Line_3 $$ final Configuration conf = new HdfsConfiguration()-->Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)[ FD ]
Line_60 $$ Path foo = new Path(dir, "foo.dat")-->Line_82 $$ fs.setPermission(foo, new FsPermission((short) 0577))[ FD ]
Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)-->Line_103 $$ fs.close()[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_75 $$ out = fs.append(foo)[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_64 $$ out = fs.create(foo)[ FD ]
Line_37 $$ FSDataOutputStream out = null-->Line_92 $$ IOUtils.closeStream(out)[ FD ]
Line_39 $$ out = fs.append(new Path("/non-existing.dat"))-->Line_77 $$ out.write(fileContents, offset, len)[ FD ]
Line_58 $$ fs = DFSTestUtil.getFileSystemAs(appenduser, conf)-->Line_72 $$ fs.setPermission(foo, new FsPermission((short) 0200))[ FD ]
Line_27 $$ stm = fs.append(file1)-->Line_30 $$ stm.write(fileContents, mid2, AppendTestUtil.FILE_SIZE - mid2)[ FD ]
Line_10 $$ FileSystem fs = cluster.getFileSystem()-->Line_14 $$ FSDataOutputStream stm = AppendTestUtil.createFile(fs, file1, 1)[ FD ]
