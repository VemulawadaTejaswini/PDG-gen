Line_2 $$ public void registerSynchronization(final Synchronization synchronization) throws RollbackException, IllegalStateException, SystemException -->Line_3 $$ final InvocationHandler ih = new InvocationHandler() [ CD ]
Line_10 $$ if ("toString".equals(method.getName())) -->Line_11 $$ return synchronization.toString()[ CD ]
Line_2 $$ public void registerSynchronization(final Synchronization synchronization) throws RollbackException, IllegalStateException, SystemException -->Line_11 $$ return synchronization.toString()[ FD ]
Line_8 $$ if ("beforeCompletion".equals(method.getName())) -->Line_9 $$ synchronization.beforeCompletion()[ CD ]
Line_8 $$ if ("beforeCompletion".equals(method.getName())) -->Line_10 $$ if ("toString".equals(method.getName())) [ CD ]
Line_3 $$ final InvocationHandler ih = new InvocationHandler() -->Line_13 $$ return null[ CD ]
Line_3 $$ final InvocationHandler ih = new InvocationHandler() -->Line_5 $$ if ("afterCompletion".equals(method.getName())) [ CD ]
Line_2 $$ public void registerSynchronization(final Synchronization synchronization) throws RollbackException, IllegalStateException, SystemException -->Line_16 $$ final Object synchronizationCallback = Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] [ CD ]
Line_5 $$ if ("afterCompletion".equals(method.getName())) -->Line_6 $$ int status = args[2].equals(Boolean.TRUE) ? Status.STATUS_COMMITTED : Status.STATUS_UNKNOWN[ CD ]
Line_3 $$ final InvocationHandler ih = new InvocationHandler() -->Line_10 $$ if ("toString".equals(method.getName())) [ FD ]
Line_5 $$ if ("afterCompletion".equals(method.getName())) -->Line_7 $$ synchronization.afterCompletion(status)[ CD ]
Line_2 $$ public void registerSynchronization(final Synchronization synchronization) throws RollbackException, IllegalStateException, SystemException -->Line_7 $$ synchronization.afterCompletion(status)[ FD ]
Line_3 $$ final InvocationHandler ih = new InvocationHandler() -->Line_16 $$ final Object synchronizationCallback = Proxy.newProxyInstance(getClass().getClassLoader(), new Class[] [ FD ]
Line_3 $$ final InvocationHandler ih = new InvocationHandler() -->Line_8 $$ if ("beforeCompletion".equals(method.getName())) [ FD ]
Line_2 $$ public void registerSynchronization(final Synchronization synchronization) throws RollbackException, IllegalStateException, SystemException -->Line_9 $$ synchronization.beforeCompletion()[ FD ]
Line_6 $$ int status = args[2].equals(Boolean.TRUE) ? Status.STATUS_COMMITTED : Status.STATUS_UNKNOWN-->Line_7 $$ synchronization.afterCompletion(status)[ FD ]
Line_5 $$ if ("afterCompletion".equals(method.getName())) -->Line_8 $$ if ("beforeCompletion".equals(method.getName())) [ CD ]
Line_3 $$ final InvocationHandler ih = new InvocationHandler() -->Line_5 $$ if ("afterCompletion".equals(method.getName())) [ FD ]
