Line_2 $$ private ProgressLogger startProgress(String description, Class loggingClass) -->Line_5 $$ progressLogger.setLoggingHeader(description)[ CD ]
Line_2 $$ private ProgressLogger startProgress(String description, Class loggingClass) -->Line_3 $$ ProgressLogger progressLogger = progressLoggerFactory.newOperation(loggingClass != null ? loggingClass : getClass())[ CD ]
Line_3 $$ ProgressLogger progressLogger = progressLoggerFactory.newOperation(loggingClass != null ? loggingClass : getClass())-->Line_5 $$ progressLogger.setLoggingHeader(description)[ FD ]
Line_2 $$ private ProgressLogger startProgress(String description, Class loggingClass) -->Line_6 $$ progressLogger.started()[ CD ]
Line_3 $$ ProgressLogger progressLogger = progressLoggerFactory.newOperation(loggingClass != null ? loggingClass : getClass())-->Line_6 $$ progressLogger.started()[ FD ]
Line_2 $$ private ProgressLogger startProgress(String description, Class loggingClass) -->Line_5 $$ progressLogger.setLoggingHeader(description)[ FD ]
Line_3 $$ ProgressLogger progressLogger = progressLoggerFactory.newOperation(loggingClass != null ? loggingClass : getClass())-->Line_4 $$ progressLogger.setDescription(description)[ FD ]
Line_2 $$ private ProgressLogger startProgress(String description, Class loggingClass) -->Line_4 $$ progressLogger.setDescription(description)[ FD ]
Line_2 $$ private ProgressLogger startProgress(String description, Class loggingClass) -->Line_7 $$ return progressLogger[ CD ]
Line_2 $$ private ProgressLogger startProgress(String description, Class loggingClass) -->Line_4 $$ progressLogger.setDescription(description)[ CD ]
