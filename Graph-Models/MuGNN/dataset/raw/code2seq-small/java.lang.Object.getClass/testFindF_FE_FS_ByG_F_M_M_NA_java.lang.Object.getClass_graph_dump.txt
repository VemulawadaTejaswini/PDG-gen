Line_7 $$ for (Object result : results) -->Line_9 $$ if (result instanceof DLFileEntry) [ FD ]
Line_5 $$ List<Object> results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), _folder.getFolderId(), new String[] -->Line_20 $$ results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, null, true, queryDefinition)[ FD ]
Line_7 $$ for (Object result : results) -->Line_8 $$ Assert.assertTrue(String.valueOf(result.getClass()), result instanceof DLFileEntry || result instanceof DLFileShortcut || result instanceof DLFolder)[ FD ]
Line_27 $$ if (dlFolder.isMountPoint()) -->Line_32 $$ assertRegularFolder = true[ CD ]
Line_32 $$ assertRegularFolder = true-->Line_36 $$ Assert.assertTrue(assertRegularFolder)[ FD ]
Line_12 $$ if (result instanceof FileShortcut) -->Line_13 $$ FileShortcut fileShortcut = (FileShortcut) result[ CD ]
Line_9 $$ if (result instanceof DLFileEntry) -->Line_12 $$ if (result instanceof FileShortcut) [ CD ]
Line_29 $$ assertMountPointFolder = true-->Line_35 $$ Assert.assertTrue(assertMountPointFolder)[ FD ]
Line_23 $$ boolean assertRegularFolder = false-->Line_36 $$ Assert.assertTrue(assertRegularFolder)[ FD ]
Line_15 $$ if (result instanceof DLFolder) -->Line_17 $$ Assert.assertEquals("Folder B", dlFolder.getName())[ CD ]
Line_12 $$ if (result instanceof FileShortcut) -->Line_14 $$ Assert.assertEquals(this._fileShortcut.getFileShortcutId(), fileShortcut.getFileShortcutId())[ CD ]
Line_7 $$ for (Object result : results) -->Line_12 $$ if (result instanceof FileShortcut) [ FD ]
Line_15 $$ if (result instanceof DLFolder) -->Line_16 $$ DLFolder dlFolder = (DLFolder) result[ CD ]
Line_5 $$ List<Object> results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), _folder.getFolderId(), new String[] -->Line_6 $$ Assert.assertEquals(3, results.size())[ FD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_21 $$ Assert.assertEquals(2, results.size())[ CD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_6 $$ Assert.assertEquals(3, results.size())[ CD ]
Line_7 $$ for (Object result : results) -->Line_15 $$ if (result instanceof DLFolder) [ FD ]
Line_7 $$ for (Object result : results) -->Line_25 $$ Assert.assertTrue(String.valueOf(result.getClass()), result instanceof DLFolder)[ FD ]
Line_27 $$ if (dlFolder.isMountPoint()) -->Line_29 $$ assertMountPointFolder = true[ CD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_23 $$ boolean assertRegularFolder = false[ CD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_3 $$ QueryDefinition<?> queryDefinition = new QueryDefinition()[ CD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_20 $$ results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, null, true, queryDefinition)[ CD ]
Line_16 $$ DLFolder dlFolder = (DLFolder) result-->Line_31 $$ Assert.assertEquals("Folder A", dlFolder.getName())[ FD ]
Line_22 $$ boolean assertMountPointFolder = false-->Line_29 $$ assertMountPointFolder = true[ FD ]
Line_3 $$ QueryDefinition<?> queryDefinition = new QueryDefinition()-->Line_5 $$ List<Object> results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), _folder.getFolderId(), new String[] [ FD ]
Line_22 $$ boolean assertMountPointFolder = false-->Line_35 $$ Assert.assertTrue(assertMountPointFolder)[ FD ]
Line_20 $$ results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, null, true, queryDefinition)-->Line_21 $$ Assert.assertEquals(2, results.size())[ FD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_22 $$ boolean assertMountPointFolder = false[ CD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_35 $$ Assert.assertTrue(assertMountPointFolder)[ CD ]
Line_27 $$ if (dlFolder.isMountPoint()) -->Line_31 $$ Assert.assertEquals("Folder A", dlFolder.getName())[ CD ]
Line_16 $$ DLFolder dlFolder = (DLFolder) result-->Line_17 $$ Assert.assertEquals("Folder B", dlFolder.getName())[ FD ]
Line_12 $$ if (result instanceof FileShortcut) -->Line_15 $$ if (result instanceof DLFolder) [ CD ]
Line_10 $$ DLFileEntry dlFileEntry = (DLFileEntry) result-->Line_11 $$ Assert.assertEquals("FE1.txt", dlFileEntry.getTitle())[ FD ]
Line_3 $$ QueryDefinition<?> queryDefinition = new QueryDefinition()-->Line_20 $$ results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), DLFolderConstants.DEFAULT_PARENT_FOLDER_ID, null, true, queryDefinition)[ FD ]
Line_16 $$ DLFolder dlFolder = (DLFolder) result-->Line_27 $$ if (dlFolder.isMountPoint()) [ FD ]
Line_27 $$ if (dlFolder.isMountPoint()) -->Line_28 $$ Assert.assertEquals("Test Repository", dlFolder.getName())[ CD ]
Line_16 $$ DLFolder dlFolder = (DLFolder) result-->Line_28 $$ Assert.assertEquals("Test Repository", dlFolder.getName())[ FD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_36 $$ Assert.assertTrue(assertRegularFolder)[ CD ]
Line_9 $$ if (result instanceof DLFileEntry) -->Line_10 $$ DLFileEntry dlFileEntry = (DLFileEntry) result[ CD ]
Line_3 $$ QueryDefinition<?> queryDefinition = new QueryDefinition()-->Line_4 $$ queryDefinition.setStatus(WorkflowConstants.STATUS_APPROVED)[ FD ]
Line_5 $$ List<Object> results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), _folder.getFolderId(), new String[] -->Line_21 $$ Assert.assertEquals(2, results.size())[ FD ]
Line_9 $$ if (result instanceof DLFileEntry) -->Line_11 $$ Assert.assertEquals("FE1.txt", dlFileEntry.getTitle())[ CD ]
Line_23 $$ boolean assertRegularFolder = false-->Line_32 $$ assertRegularFolder = true[ FD ]
Line_13 $$ FileShortcut fileShortcut = (FileShortcut) result-->Line_14 $$ Assert.assertEquals(this._fileShortcut.getFileShortcutId(), fileShortcut.getFileShortcutId())[ FD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_5 $$ List<Object> results = DLFolderFinderUtil.filterFindF_FE_FS_ByG_F_M_M(_group.getGroupId(), _folder.getFolderId(), new String[] [ CD ]
Line_2 $$ public void testFindF_FE_FS_ByG_F_M_M() throws Exception -->Line_4 $$ queryDefinition.setStatus(WorkflowConstants.STATUS_APPROVED)[ CD ]
