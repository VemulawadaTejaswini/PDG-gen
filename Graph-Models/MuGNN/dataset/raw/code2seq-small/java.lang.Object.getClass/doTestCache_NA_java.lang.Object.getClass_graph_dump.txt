Line_3 $$ for (int i = 0; i < toConstruct.length; i++) -->Line_4 $$ Class cl = toConstruct[i][ CD ]
Line_4 $$ Class cl = toConstruct[i]-->Line_5 $$ Object x = ReflectionUtils.newInstance(cl, null)[ FD ]
Line_3 $$ for (int i = 0; i < toConstruct.length; i++) -->Line_8 $$ assertEquals(cl, y.getClass())[ CD ]
Line_4 $$ Class cl = toConstruct[i]-->Line_7 $$ assertEquals(cl, x.getClass())[ FD ]
Line_5 $$ Object x = ReflectionUtils.newInstance(cl, null)-->Line_7 $$ assertEquals(cl, x.getClass())[ FD ]
Line_6 $$ Object y = ReflectionUtils.newInstance(cl, null)-->Line_8 $$ assertEquals(cl, y.getClass())[ FD ]
Line_3 $$ for (int i = 0; i < toConstruct.length; i++) -->Line_6 $$ Object y = ReflectionUtils.newInstance(cl, null)[ CD ]
Line_4 $$ Class cl = toConstruct[i]-->Line_6 $$ Object y = ReflectionUtils.newInstance(cl, null)[ FD ]
Line_3 $$ for (int i = 0; i < toConstruct.length; i++) -->Line_5 $$ Object x = ReflectionUtils.newInstance(cl, null)[ CD ]
Line_3 $$ for (int i = 0; i < toConstruct.length; i++) -->Line_7 $$ assertEquals(cl, x.getClass())[ CD ]
Line_4 $$ Class cl = toConstruct[i]-->Line_8 $$ assertEquals(cl, y.getClass())[ FD ]
Line_2 $$ private void doTestCache() -->Line_3 $$ for (int i = 0; i < toConstruct.length; i++) [ CD ]
