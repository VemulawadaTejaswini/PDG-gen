Line_2 $$ public void testFsckPermission() throws Exception -->Line_6 $$ MiniDFSCluster cluster = null[ CD ]
Line_12 $$ final FileSystem fs = c2.getFileSystem()-->Line_13 $$ util.createFiles(fs, dir)[ FD ]
Line_12 $$ final FileSystem fs = c2.getFileSystem()-->Line_15 $$ fs.setPermission(dirpath, new FsPermission((short) 0700))[ FD ]
Line_24 $$ fakeUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_26 $$ final String outStr = runFsck(conf, 0, true, dir)[ CD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()[ FD ]
Line_2 $$ public void testFsckPermission() throws Exception -->Line_3 $$ final DFSTestUtil util = new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(20).build()[ CD ]
Line_4 $$ final Configuration conf = new HdfsConfiguration()-->Line_19 $$ System.out.println(runFsck(conf, -1, true, dir))[ FD ]
Line_12 $$ final FileSystem fs = c2.getFileSystem()-->Line_23 $$ fs.setPermission(dirpath, new FsPermission((short) 0777))[ FD ]
Line_10 $$ final String dir = "/dfsck"-->Line_13 $$ util.createFiles(fs, dir)[ FD ]
Line_10 $$ final String dir = "/dfsck"-->Line_14 $$ util.waitReplication(fs, dir, (short) 3)[ FD ]
Line_10 $$ final String dir = "/dfsck"-->Line_26 $$ final String outStr = runFsck(conf, 0, true, dir)[ FD ]
Line_24 $$ fakeUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_29 $$ return null[ CD ]
Line_2 $$ public void testFsckPermission() throws Exception -->Line_4 $$ final Configuration conf = new HdfsConfiguration()[ CD ]
Line_34 $$ if (cluster != null) -->Line_35 $$ cluster.shutdown()[ CD ]
Line_26 $$ final String outStr = runFsck(conf, 0, true, dir)-->Line_28 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_3 $$ final DFSTestUtil util = new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(20).build()-->Line_32 $$ util.cleanup(fs, dir)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_34 $$ if (cluster != null) [ FD ]
Line_16 $$ UserGroupInformation fakeUGI = UserGroupInformation.createUserForTesting("ProbablyNotARealUserName", new String[] -->Line_24 $$ fakeUGI.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_24 $$ fakeUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_27 $$ System.out.println(outStr)[ CD ]
Line_24 $$ fakeUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_28 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ CD ]
Line_12 $$ final FileSystem fs = c2.getFileSystem()-->Line_14 $$ util.waitReplication(fs, dir, (short) 3)[ FD ]
Line_12 $$ final FileSystem fs = c2.getFileSystem()-->Line_32 $$ util.cleanup(fs, dir)[ FD ]
Line_3 $$ final DFSTestUtil util = new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(20).build()-->Line_13 $$ util.createFiles(fs, dir)[ FD ]
Line_17 $$ fakeUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_20 $$ return null[ CD ]
Line_11 $$ final Path dirpath = new Path(dir)-->Line_23 $$ fs.setPermission(dirpath, new FsPermission((short) 0777))[ FD ]
Line_4 $$ final Configuration conf = new HdfsConfiguration()-->Line_26 $$ final String outStr = runFsck(conf, 0, true, dir)[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_34 $$ if (cluster != null) [ FD ]
Line_10 $$ final String dir = "/dfsck"-->Line_19 $$ System.out.println(runFsck(conf, -1, true, dir))[ FD ]
Line_16 $$ UserGroupInformation fakeUGI = UserGroupInformation.createUserForTesting("ProbablyNotARealUserName", new String[] -->Line_17 $$ fakeUGI.doAs(new PrivilegedExceptionAction<Object>() [ FD ]
Line_17 $$ fakeUGI.doAs(new PrivilegedExceptionAction<Object>() -->Line_19 $$ System.out.println(runFsck(conf, -1, true, dir))[ CD ]
Line_26 $$ final String outStr = runFsck(conf, 0, true, dir)-->Line_27 $$ System.out.println(outStr)[ FD ]
Line_8 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_35 $$ cluster.shutdown()[ FD ]
Line_11 $$ final Path dirpath = new Path(dir)-->Line_15 $$ fs.setPermission(dirpath, new FsPermission((short) 0700))[ FD ]
Line_10 $$ final String dir = "/dfsck"-->Line_32 $$ util.cleanup(fs, dir)[ FD ]
Line_9 $$ final MiniDFSCluster c2 = cluster-->Line_12 $$ final FileSystem fs = c2.getFileSystem()[ FD ]
Line_2 $$ public void testFsckPermission() throws Exception -->Line_5 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 10000L)[ CD ]
Line_3 $$ final DFSTestUtil util = new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(20).build()-->Line_14 $$ util.waitReplication(fs, dir, (short) 3)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_35 $$ cluster.shutdown()[ FD ]
Line_4 $$ final Configuration conf = new HdfsConfiguration()-->Line_5 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 10000L)[ FD ]
