Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_28 $$ scheduler.scheduleWithFixedDelay(r, delay, interval, unit)[ FD ]
Line_10 $$ if (getServer().getStatus() == Server.Status.HALTED) -->Line_12 $$ instr.incr(INST_GROUP, instrName + ".skips", 1)[ CD ]
Line_9 $$ Instrumentation instr = getServer().get(Instrumentation.class)-->Line_12 $$ instr.incr(INST_GROUP, instrName + ".skips", 1)[ FD ]
Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_8 $$ String instrName = callable.getClass().getSimpleName()[ FD ]
Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_18 $$ callable.call()[ FD ]
Line_6 $$ Runnable r = new Runnable() -->Line_8 $$ String instrName = callable.getClass().getSimpleName()[ CD ]
Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_3 $$ Check.notNull(callable, "callable")[ FD ]
Line_9 $$ Instrumentation instr = getServer().get(Instrumentation.class)-->Line_15 $$ instr.incr(INST_GROUP, instrName + ".execs", 1)[ FD ]
Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_3 $$ Check.notNull(callable, "callable")[ CD ]
Line_9 $$ Instrumentation instr = getServer().get(Instrumentation.class)-->Line_20 $$ instr.incr(INST_GROUP, instrName + ".fails", 1)[ FD ]
Line_6 $$ Runnable r = new Runnable() -->Line_28 $$ scheduler.scheduleWithFixedDelay(r, delay, interval, unit)[ FD ]
Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_30 $$ throw new IllegalStateException(MessageFormat.format("Scheduler shutting down, ignoring scheduling of [[ FD ]
Line_10 $$ if (getServer().getStatus() == Server.Status.HALTED) -->Line_14 $$ LOG.debug("Executing [[ CD ]
Line_8 $$ String instrName = callable.getClass().getSimpleName()-->Line_23 $$ instr.addCron(INST_GROUP, instrName, cron.stop())[ FD ]
Line_10 $$ if (getServer().getStatus() == Server.Status.HALTED) -->Line_11 $$ LOG.debug("Skipping [[ CD ]
Line_4 $$ if (!scheduler.isShutdown()) -->Line_5 $$ LOG.debug("Scheduling callable [[ CD ]
Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_4 $$ if (!scheduler.isShutdown()) [ CD ]
Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_11 $$ LOG.debug("Skipping [[ FD ]
Line_6 $$ Runnable r = new Runnable() -->Line_9 $$ Instrumentation instr = getServer().get(Instrumentation.class)[ CD ]
Line_10 $$ if (getServer().getStatus() == Server.Status.HALTED) -->Line_15 $$ instr.incr(INST_GROUP, instrName + ".execs", 1)[ CD ]
Line_4 $$ if (!scheduler.isShutdown()) -->Line_6 $$ Runnable r = new Runnable() [ CD ]
Line_10 $$ if (getServer().getStatus() == Server.Status.HALTED) -->Line_16 $$ Instrumentation.Cron cron = instr.createCron().start()[ CD ]
Line_9 $$ Instrumentation instr = getServer().get(Instrumentation.class)-->Line_23 $$ instr.addCron(INST_GROUP, instrName, cron.stop())[ FD ]
Line_4 $$ if (!scheduler.isShutdown()) -->Line_28 $$ scheduler.scheduleWithFixedDelay(r, delay, interval, unit)[ CD ]
Line_16 $$ Instrumentation.Cron cron = instr.createCron().start()-->Line_23 $$ instr.addCron(INST_GROUP, instrName, cron.stop())[ FD ]
Line_9 $$ Instrumentation instr = getServer().get(Instrumentation.class)-->Line_16 $$ Instrumentation.Cron cron = instr.createCron().start()[ FD ]
Line_6 $$ Runnable r = new Runnable() -->Line_10 $$ if (getServer().getStatus() == Server.Status.HALTED) [ CD ]
Line_2 $$ public void schedule(final Callable<?> callable, long delay, long interval, TimeUnit unit) -->Line_14 $$ LOG.debug("Executing [[ FD ]
