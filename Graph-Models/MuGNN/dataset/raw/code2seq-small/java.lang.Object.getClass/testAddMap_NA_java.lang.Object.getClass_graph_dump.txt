Line_2 $$ public void testAddMap() throws Exception -->Line_6 $$ ModelMap model = new ModelMap()[ CD ]
Line_2 $$ public void testAddMap() throws Exception -->Line_5 $$ map.put("two", "two-value")[ CD ]
Line_2 $$ public void testAddMap() throws Exception -->Line_7 $$ model.addAttribute(map)[ CD ]
Line_2 $$ public void testAddMap() throws Exception -->Line_8 $$ assertEquals(1, model.size())[ CD ]
Line_6 $$ ModelMap model = new ModelMap()-->Line_7 $$ model.addAttribute(map)[ FD ]
Line_9 $$ String key = StringUtils.uncapitalize(ClassUtils.getShortName(map.getClass()))-->Line_10 $$ assertTrue(model.containsKey(key))[ FD ]
Line_2 $$ public void testAddMap() throws Exception -->Line_4 $$ map.put("one", "one-value")[ CD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_4 $$ map.put("one", "one-value")[ FD ]
Line_6 $$ ModelMap model = new ModelMap()-->Line_10 $$ assertTrue(model.containsKey(key))[ FD ]
Line_2 $$ public void testAddMap() throws Exception -->Line_9 $$ String key = StringUtils.uncapitalize(ClassUtils.getShortName(map.getClass()))[ CD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_9 $$ String key = StringUtils.uncapitalize(ClassUtils.getShortName(map.getClass()))[ FD ]
Line_6 $$ ModelMap model = new ModelMap()-->Line_8 $$ assertEquals(1, model.size())[ FD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_7 $$ model.addAttribute(map)[ FD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_5 $$ map.put("two", "two-value")[ FD ]
Line_2 $$ public void testAddMap() throws Exception -->Line_10 $$ assertTrue(model.containsKey(key))[ CD ]
Line_2 $$ public void testAddMap() throws Exception -->Line_3 $$ Map<String, String> map = new HashMap<String, String>()[ CD ]
