Line_50 $$ StringBuilder buffer = new StringBuilder()-->Line_51 $$ buffer.append('[ FD ]
Line_17 $$ if (value instanceof Integer) -->Line_28 $$ return value.toString()[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_60 $$ if (anno && value instanceof Type) [ FD ]
Line_18 $$ if ("boolean".equals(type)) -->Line_21 $$ if (value.equals(1))[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_19 $$ if (value.equals(0))[ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_55 $$ buffer.append(constToString(Array.get(value, i), type, anno))[ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_30 $$ if (value instanceof Double) [ CD ]
Line_17 $$ if (value instanceof Integer) -->Line_24 $$ if ("char".equals(type)) [ CD ]
Line_49 $$ if (value.getClass().isArray()) -->Line_50 $$ StringBuilder buffer = new StringBuilder()[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_52 $$ for (int i = 0, length = Array.getLength(value); i < length; i++) [ FD ]
Line_3 $$ if (value == null)-->Line_4 $$ return null[ CD ]
Line_30 $$ if (value instanceof Double) -->Line_31 $$ final double d = (Double) value[ CD ]
Line_34 $$ if (Double.isNaN(d)) -->Line_35 $$ return DOUBLE_NAN[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_28 $$ return value.toString()[ FD ]
Line_50 $$ StringBuilder buffer = new StringBuilder()-->Line_54 $$ buffer.append(", ")[ FD ]
Line_21 $$ if (value.equals(1))-->Line_22 $$ return "true"[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_60 $$ if (anno && value instanceof Type) [ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_8 $$ if (value instanceof Boolean || value instanceof Short || value instanceof Byte) [ CD ]
Line_41 $$ if (Float.isInfinite(v)) -->Line_43 $$ if (Float.isNaN(v)) [ CD ]
Line_32 $$ if (Double.isInfinite(d)) -->Line_34 $$ if (Double.isNaN(d)) [ CD ]
Line_19 $$ if (value.equals(0))-->Line_20 $$ return "false"[ CD ]
Line_43 $$ if (Float.isNaN(v)) -->Line_46 $$ return Float.toString(v) + "f"[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_3 $$ if (value == null)[ CD ]
Line_8 $$ if (value instanceof Boolean || value instanceof Short || value instanceof Byte) -->Line_9 $$ return value.toString()[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_24 $$ if ("char".equals(type)) [ FD ]
Line_53 $$ if (i > 0)-->Line_54 $$ buffer.append(", ")[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_14 $$ if (value instanceof Long) [ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_49 $$ if (value.getClass().isArray()) [ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_3 $$ if (value == null)[ FD ]
Line_39 $$ if (value instanceof Float) -->Line_40 $$ final float v = (Float) value[ CD ]
Line_24 $$ if ("char".equals(type)) -->Line_26 $$ return "'" + StringUtil.escapeCharCharacters(String.valueOf(ch)) + "'"[ CD ]
Line_41 $$ if (Float.isInfinite(v)) -->Line_42 $$ return v > 0 ? FLOAT_POSITIVE_INF : FLOAT_NEGATIVE_INF[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_18 $$ if ("boolean".equals(type)) [ FD ]
Line_30 $$ if (value instanceof Double) -->Line_32 $$ if (Double.isInfinite(d)) [ CD ]
Line_52 $$ for (int i = 0, length = Array.getLength(value); i < length; i++) -->Line_55 $$ buffer.append(constToString(Array.get(value, i), type, anno))[ CD ]
Line_50 $$ StringBuilder buffer = new StringBuilder()-->Line_58 $$ return buffer.toString()[ FD ]
Line_49 $$ if (value.getClass().isArray()) -->Line_58 $$ return buffer.toString()[ CD ]
Line_17 $$ if (value instanceof Integer) -->Line_18 $$ if ("boolean".equals(type)) [ CD ]
Line_50 $$ StringBuilder buffer = new StringBuilder()-->Line_55 $$ buffer.append(constToString(Array.get(value, i), type, anno))[ FD ]
Line_18 $$ if ("boolean".equals(type)) -->Line_19 $$ if (value.equals(0))[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_9 $$ return value.toString()[ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_14 $$ if (value instanceof Long) [ FD ]
Line_52 $$ for (int i = 0, length = Array.getLength(value); i < length; i++) -->Line_53 $$ if (i > 0)[ CD ]
Line_40 $$ final float v = (Float) value-->Line_46 $$ return Float.toString(v) + "f"[ FD ]
Line_31 $$ final double d = (Double) value-->Line_34 $$ if (Double.isNaN(d)) [ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_49 $$ if (value.getClass().isArray()) [ FD ]
Line_49 $$ if (value.getClass().isArray()) -->Line_57 $$ buffer.append('}')[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_21 $$ if (value.equals(1))[ FD ]
Line_43 $$ if (Float.isNaN(v)) -->Line_44 $$ return FLOAT_NAN[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_11 $$ if (value instanceof Character) [ CD ]
Line_31 $$ final double d = (Double) value-->Line_32 $$ if (Double.isInfinite(d)) [ FD ]
Line_24 $$ if ("char".equals(type)) -->Line_25 $$ char ch = (char) ((Integer) value).intValue()[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_15 $$ return value.toString() + "L"[ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_11 $$ if (value instanceof Character) [ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_5 $$ if (value instanceof String) [ CD ]
Line_52 $$ for (int i = 0, length = Array.getLength(value); i < length; i++) -->Line_55 $$ buffer.append(constToString(Array.get(value, i), type, anno))[ FD ]
Line_50 $$ StringBuilder buffer = new StringBuilder()-->Line_57 $$ buffer.append('}')[ FD ]
Line_40 $$ final float v = (Float) value-->Line_43 $$ if (Float.isNaN(v)) [ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_39 $$ if (value instanceof Float) [ CD ]
Line_25 $$ char ch = (char) ((Integer) value).intValue()-->Line_26 $$ return "'" + StringUtil.escapeCharCharacters(String.valueOf(ch)) + "'"[ FD ]
Line_49 $$ if (value.getClass().isArray()) -->Line_52 $$ for (int i = 0, length = Array.getLength(value); i < length; i++) [ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_12 $$ return "'" + StringUtil.escapeCharCharacters(value.toString()) + "'"[ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_17 $$ if (value instanceof Integer) [ FD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_63 $$ return null[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_30 $$ if (value instanceof Double) [ FD ]
Line_31 $$ final double d = (Double) value-->Line_37 $$ return Double.toString(d)[ FD ]
Line_11 $$ if (value instanceof Character) -->Line_12 $$ return "'" + StringUtil.escapeCharCharacters(value.toString()) + "'"[ CD ]
Line_52 $$ for (int i = 0, length = Array.getLength(value); i < length; i++) -->Line_53 $$ if (i > 0)[ FD ]
Line_39 $$ if (value instanceof Float) -->Line_41 $$ if (Float.isInfinite(v)) [ CD ]
Line_32 $$ if (Double.isInfinite(d)) -->Line_33 $$ return d > 0 ? DOUBLE_POSITIVE_INF : DOUBLE_NEGATIVE_INF[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_39 $$ if (value instanceof Float) [ FD ]
Line_49 $$ if (value.getClass().isArray()) -->Line_51 $$ buffer.append('[ CD ]
Line_5 $$ if (value instanceof String) -->Line_6 $$ return "\"" + StringUtil.escapeStringCharacters((String) value) + "\""[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_17 $$ if (value instanceof Integer) [ CD ]
Line_30 $$ if (value instanceof Double) -->Line_37 $$ return Double.toString(d)[ CD ]
Line_14 $$ if (value instanceof Long) -->Line_15 $$ return value.toString() + "L"[ CD ]
Line_2 $$ private static String constToString(@Nullable Object value, @Nullable String type, boolean anno) -->Line_5 $$ if (value instanceof String) [ FD ]
Line_40 $$ final float v = (Float) value-->Line_41 $$ if (Float.isInfinite(v)) [ FD ]
Line_60 $$ if (anno && value instanceof Type) -->Line_61 $$ return getTypeText((Type) value) + ".class"[ CD ]
