Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)-->Line_9 $$ assertThat(converted.size(), equalTo(2))[ FD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_4 $$ MultiValueMap<String, Integer> source = new LinkedMultiValueMap<String, Integer>()[ CD ]
Line_4 $$ MultiValueMap<String, Integer> source = new LinkedMultiValueMap<String, Integer>()-->Line_6 $$ source.put("b", Arrays.asList(4, 5, 6))[ FD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_10 $$ assertThat(converted.get("a"), equalTo(Arrays.asList("1", "2", "3")))[ CD ]
Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)-->Line_11 $$ assertThat(converted.get("b"), equalTo(Arrays.asList("4", "5", "6")))[ FD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("multiValueMapTarget"))-->Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)[ FD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)[ CD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_11 $$ assertThat(converted.get("b"), equalTo(Arrays.asList("4", "5", "6")))[ CD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_5 $$ source.put("a", Arrays.asList(1, 2, 3))[ CD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_6 $$ source.put("b", Arrays.asList(4, 5, 6))[ CD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_9 $$ assertThat(converted.size(), equalTo(2))[ CD ]
Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)-->Line_10 $$ assertThat(converted.get("a"), equalTo(Arrays.asList("1", "2", "3")))[ FD ]
Line_4 $$ MultiValueMap<String, Integer> source = new LinkedMultiValueMap<String, Integer>()-->Line_5 $$ source.put("a", Arrays.asList(1, 2, 3))[ FD ]
Line_4 $$ MultiValueMap<String, Integer> source = new LinkedMultiValueMap<String, Integer>()-->Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)[ FD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("multiValueMapTarget"))[ CD ]
Line_2 $$ public void multiValueMapToMultiValueMap() throws Exception -->Line_3 $$ DefaultConversionService.addDefaultConverters(conversionService)[ CD ]
