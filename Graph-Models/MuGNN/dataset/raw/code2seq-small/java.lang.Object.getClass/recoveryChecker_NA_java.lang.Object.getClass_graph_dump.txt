Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_12 $$ long totalFailedMaps = 0[ CD ]
Line_24 $$ JobCounterUpdateEvent jcue = (JobCounterUpdateEvent) current-->Line_28 $$ if (jcue.getCounterUpdates().get(0).getCounterKey() == JobCounter.TOTAL_LAUNCHED_MAPS) [ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_9 $$ Iterator<Event> ie = arg.getAllValues().iterator()[ CD ]
Line_18 $$ if (current instanceof JobHistoryEvent) -->Line_22 $$ expectedJobHistoryEvents.remove(0)[ CD ]
Line_31 $$ if (current instanceof JobTaskEvent) -->Line_34 $$ jobTaskEventReceived = true[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_5 $$ assertEquals("Expected Number of Task Attempts", finalAttemptStates.size(), recoveredAttempts.size())[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_11 $$ long totalLaunchedMaps = 0[ CD ]
Line_24 $$ JobCounterUpdateEvent jcue = (JobCounterUpdateEvent) current-->Line_26 $$ if (jcue.getCounterUpdates().get(0).getCounterKey() == JobCounter.NUM_FAILED_MAPS) [ FD ]
Line_31 $$ if (current instanceof JobTaskEvent) -->Line_33 $$ assertEquals(jte.getState(), finalState)[ CD ]
Line_26 $$ if (jcue.getCounterUpdates().get(0).getCounterKey() == JobCounter.NUM_FAILED_MAPS) -->Line_27 $$ totalFailedMaps += jcue.getCounterUpdates().get(0).getIncrementValue()[ CD ]
Line_15 $$ Object current = ie.next()-->Line_18 $$ if (current instanceof JobHistoryEvent) [ FD ]
Line_12 $$ long totalFailedMaps = 0-->Line_27 $$ totalFailedMaps += jcue.getCounterUpdates().get(0).getIncrementValue()[ FD ]
Line_18 $$ if (current instanceof JobHistoryEvent) -->Line_20 $$ LOG.info(expectedJobHistoryEvents.get(0).toString() + " " + jhe.getHistoryEvent().getEventType().toString() + " " + jhe.getJobID())[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_38 $$ assertEquals("Did not process all expected JobHistoryEvents", 0, expectedJobHistoryEvents.size())[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_40 $$ assertEquals("Expected Failed Maps", expectedFailedMaps, totalFailedMaps)[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_22 $$ expectedJobHistoryEvents.remove(0)[ FD ]
Line_23 $$ if (current instanceof JobCounterUpdateEvent) -->Line_26 $$ if (jcue.getCounterUpdates().get(0).getCounterKey() == JobCounter.NUM_FAILED_MAPS) [ CD ]
Line_26 $$ if (jcue.getCounterUpdates().get(0).getCounterKey() == JobCounter.NUM_FAILED_MAPS) -->Line_28 $$ if (jcue.getCounterUpdates().get(0).getCounterKey() == JobCounter.TOTAL_LAUNCHED_MAPS) [ CD ]
Line_24 $$ JobCounterUpdateEvent jcue = (JobCounterUpdateEvent) current-->Line_25 $$ LOG.info("JobCounterUpdateEvent " + jcue.getCounterUpdates().get(0).getCounterKey() + " " + jcue.getCounterUpdates().get(0).getIncrementValue())[ FD ]
Line_9 $$ Iterator<Event> ie = arg.getAllValues().iterator()-->Line_14 $$ while (ie.hasNext()) [ FD ]
Line_24 $$ JobCounterUpdateEvent jcue = (JobCounterUpdateEvent) current-->Line_29 $$ totalLaunchedMaps += jcue.getCounterUpdates().get(0).getIncrementValue()[ FD ]
Line_15 $$ Object current = ie.next()-->Line_31 $$ if (current instanceof JobTaskEvent) [ FD ]
Line_10 $$ int eventNum = 0-->Line_16 $$ ++eventNum[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_38 $$ assertEquals("Did not process all expected JobHistoryEvents", 0, expectedJobHistoryEvents.size())[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_10 $$ int eventNum = 0[ CD ]
Line_18 $$ if (current instanceof JobHistoryEvent) -->Line_19 $$ JobHistoryEvent jhe = (JobHistoryEvent) current[ CD ]
Line_14 $$ while (ie.hasNext()) -->Line_16 $$ ++eventNum[ CD ]
Line_15 $$ Object current = ie.next()-->Line_17 $$ LOG.info(eventNum + " " + current.getClass().getName())[ FD ]
Line_13 $$ boolean jobTaskEventReceived = false-->Line_34 $$ jobTaskEventReceived = true[ FD ]
Line_23 $$ if (current instanceof JobCounterUpdateEvent) -->Line_31 $$ if (current instanceof JobTaskEvent) [ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_37 $$ assertTrue(jobTaskEventReceived || (finalState == TaskState.RUNNING))[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_13 $$ boolean jobTaskEventReceived = false[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_3 $$ assertEquals("Final State of Task", finalState, checkTask.getState())[ FD ]
Line_9 $$ Iterator<Event> ie = arg.getAllValues().iterator()-->Line_15 $$ Object current = ie.next()[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_7 $$ assertEquals("Expected Task Attempt State", finalAttemptStates.get(taID), recoveredAttempts.get(TypeConverter.toYarn(taID)).getState())[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_21 $$ assertEquals(expectedJobHistoryEvents.get(0), jhe.getHistoryEvent().getEventType())[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_4 $$ Map<TaskAttemptId, TaskAttempt> recoveredAttempts = checkTask.getAttempts()[ FD ]
Line_14 $$ while (ie.hasNext()) -->Line_17 $$ LOG.info(eventNum + " " + current.getClass().getName())[ CD ]
Line_11 $$ long totalLaunchedMaps = 0-->Line_29 $$ totalLaunchedMaps += jcue.getCounterUpdates().get(0).getIncrementValue()[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_4 $$ Map<TaskAttemptId, TaskAttempt> recoveredAttempts = checkTask.getAttempts()[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_3 $$ assertEquals("Final State of Task", finalState, checkTask.getState())[ CD ]
Line_6 $$ for (TaskAttemptID taID : finalAttemptStates.keySet()) -->Line_7 $$ assertEquals("Expected Task Attempt State", finalAttemptStates.get(taID), recoveredAttempts.get(TypeConverter.toYarn(taID)).getState())[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_20 $$ LOG.info(expectedJobHistoryEvents.get(0).toString() + " " + jhe.getHistoryEvent().getEventType().toString() + " " + jhe.getJobID())[ FD ]
Line_31 $$ if (current instanceof JobTaskEvent) -->Line_32 $$ JobTaskEvent jte = (JobTaskEvent) current[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_39 $$ assertEquals("Expected Map Launches", expectedMapLaunches, totalLaunchedMaps)[ FD ]
Line_29 $$ totalLaunchedMaps += jcue.getCounterUpdates().get(0).getIncrementValue()-->Line_39 $$ assertEquals("Expected Map Launches", expectedMapLaunches, totalLaunchedMaps)[ FD ]
Line_19 $$ JobHistoryEvent jhe = (JobHistoryEvent) current-->Line_20 $$ LOG.info(expectedJobHistoryEvents.get(0).toString() + " " + jhe.getHistoryEvent().getEventType().toString() + " " + jhe.getJobID())[ FD ]
Line_23 $$ if (current instanceof JobCounterUpdateEvent) -->Line_24 $$ JobCounterUpdateEvent jcue = (JobCounterUpdateEvent) current[ CD ]
Line_32 $$ JobTaskEvent jte = (JobTaskEvent) current-->Line_33 $$ assertEquals(jte.getState(), finalState)[ FD ]
Line_23 $$ if (current instanceof JobCounterUpdateEvent) -->Line_25 $$ LOG.info("JobCounterUpdateEvent " + jcue.getCounterUpdates().get(0).getCounterKey() + " " + jcue.getCounterUpdates().get(0).getIncrementValue())[ CD ]
Line_14 $$ while (ie.hasNext()) -->Line_18 $$ if (current instanceof JobHistoryEvent) [ CD ]
Line_11 $$ long totalLaunchedMaps = 0-->Line_39 $$ assertEquals("Expected Map Launches", expectedMapLaunches, totalLaunchedMaps)[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_14 $$ while (ie.hasNext()) [ CD ]
Line_19 $$ JobHistoryEvent jhe = (JobHistoryEvent) current-->Line_21 $$ assertEquals(expectedJobHistoryEvents.get(0), jhe.getHistoryEvent().getEventType())[ FD ]
Line_15 $$ Object current = ie.next()-->Line_23 $$ if (current instanceof JobCounterUpdateEvent) [ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_40 $$ assertEquals("Expected Failed Maps", expectedFailedMaps, totalFailedMaps)[ CD ]
Line_18 $$ if (current instanceof JobHistoryEvent) -->Line_21 $$ assertEquals(expectedJobHistoryEvents.get(0), jhe.getHistoryEvent().getEventType())[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_33 $$ assertEquals(jte.getState(), finalState)[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_9 $$ Iterator<Event> ie = arg.getAllValues().iterator()[ FD ]
Line_4 $$ Map<TaskAttemptId, TaskAttempt> recoveredAttempts = checkTask.getAttempts()-->Line_7 $$ assertEquals("Expected Task Attempt State", finalAttemptStates.get(taID), recoveredAttempts.get(TypeConverter.toYarn(taID)).getState())[ FD ]
Line_18 $$ if (current instanceof JobHistoryEvent) -->Line_23 $$ if (current instanceof JobCounterUpdateEvent) [ CD ]
Line_28 $$ if (jcue.getCounterUpdates().get(0).getCounterKey() == JobCounter.TOTAL_LAUNCHED_MAPS) -->Line_29 $$ totalLaunchedMaps += jcue.getCounterUpdates().get(0).getIncrementValue()[ CD ]
Line_14 $$ while (ie.hasNext()) -->Line_15 $$ Object current = ie.next()[ CD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_5 $$ assertEquals("Expected Number of Task Attempts", finalAttemptStates.size(), recoveredAttempts.size())[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_6 $$ for (TaskAttemptID taID : finalAttemptStates.keySet()) [ FD ]
Line_27 $$ totalFailedMaps += jcue.getCounterUpdates().get(0).getIncrementValue()-->Line_40 $$ assertEquals("Expected Failed Maps", expectedFailedMaps, totalFailedMaps)[ FD ]
Line_12 $$ long totalFailedMaps = 0-->Line_40 $$ assertEquals("Expected Failed Maps", expectedFailedMaps, totalFailedMaps)[ FD ]
Line_4 $$ Map<TaskAttemptId, TaskAttempt> recoveredAttempts = checkTask.getAttempts()-->Line_5 $$ assertEquals("Expected Number of Task Attempts", finalAttemptStates.size(), recoveredAttempts.size())[ FD ]
Line_2 $$ private void recoveryChecker(MapTaskImpl checkTask, TaskState finalState, Map<TaskAttemptID, TaskAttemptState> finalAttemptStates, ArgumentCaptor<Event> arg, List<EventType> expectedJobHistoryEvents, long expectedMapLaunches, long expectedFailedMaps) -->Line_39 $$ assertEquals("Expected Map Launches", expectedMapLaunches, totalLaunchedMaps)[ CD ]
Line_24 $$ JobCounterUpdateEvent jcue = (JobCounterUpdateEvent) current-->Line_27 $$ totalFailedMaps += jcue.getCounterUpdates().get(0).getIncrementValue()[ FD ]
