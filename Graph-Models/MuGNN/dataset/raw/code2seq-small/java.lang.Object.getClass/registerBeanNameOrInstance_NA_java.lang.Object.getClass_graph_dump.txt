Line_2 $$ protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException -->Line_31 $$ return registerBeanInstance(mapValue, beanKey)[ FD ]
Line_2 $$ protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException -->Line_15 $$ ObjectName objectName = registerBeanInstance(bean, beanKey)[ FD ]
Line_8 $$ String beanName = (String) mapValue-->Line_26 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ FD ]
Line_8 $$ String beanName = (String) mapValue-->Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) [ FD ]
Line_14 $$ Object bean = this.beanFactory.getBean(beanName)-->Line_15 $$ ObjectName objectName = registerBeanInstance(bean, beanKey)[ FD ]
Line_23 $$ if (entry.getValue() == mapValue) -->Line_24 $$ String beanName = entry.getKey()[ CD ]
Line_2 $$ protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException -->Line_21 $$ Map<String, ?> beansOfSameType = this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)[ FD ]
Line_8 $$ String beanName = (String) mapValue-->Line_10 $$ ObjectName objectName = registerLazyInit(beanName, beanKey)[ FD ]
Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) -->Line_10 $$ ObjectName objectName = registerLazyInit(beanName, beanKey)[ CD ]
Line_23 $$ if (entry.getValue() == mapValue) -->Line_26 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ CD ]
Line_2 $$ protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException -->Line_4 $$ if (mapValue instanceof String) [ FD ]
Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) -->Line_16 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ CD ]
Line_2 $$ protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException -->Line_10 $$ ObjectName objectName = registerLazyInit(beanName, beanKey)[ FD ]
Line_10 $$ ObjectName objectName = registerLazyInit(beanName, beanKey)-->Line_11 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ FD ]
Line_21 $$ Map<String, ?> beansOfSameType = this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)-->Line_22 $$ for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) [ FD ]
Line_4 $$ if (mapValue instanceof String) -->Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) [ CD ]
Line_10 $$ ObjectName objectName = registerLazyInit(beanName, beanKey)-->Line_16 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ FD ]
Line_4 $$ if (mapValue instanceof String) -->Line_8 $$ String beanName = (String) mapValue[ CD ]
Line_4 $$ if (mapValue instanceof String) -->Line_5 $$ if (this.beanFactory == null) [ CD ]
Line_23 $$ if (entry.getValue() == mapValue) -->Line_25 $$ ObjectName objectName = registerBeanInstance(mapValue, beanKey)[ CD ]
Line_10 $$ ObjectName objectName = registerLazyInit(beanName, beanKey)-->Line_26 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ FD ]
Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) -->Line_11 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ CD ]
Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) -->Line_17 $$ return objectName[ CD ]
Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) -->Line_15 $$ ObjectName objectName = registerBeanInstance(bean, beanKey)[ CD ]
Line_22 $$ for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) -->Line_23 $$ if (entry.getValue() == mapValue) [ FD ]
Line_4 $$ if (mapValue instanceof String) -->Line_20 $$ if (this.beanFactory != null) [ CD ]
Line_2 $$ protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException -->Line_23 $$ if (entry.getValue() == mapValue) [ FD ]
Line_2 $$ protected ObjectName registerBeanNameOrInstance(Object mapValue, String beanKey) throws MBeanExportException -->Line_25 $$ ObjectName objectName = registerBeanInstance(mapValue, beanKey)[ FD ]
Line_8 $$ String beanName = (String) mapValue-->Line_11 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ FD ]
Line_20 $$ if (this.beanFactory != null) -->Line_21 $$ Map<String, ?> beansOfSameType = this.beanFactory.getBeansOfType(mapValue.getClass(), false, this.allowEagerInit)[ CD ]
Line_4 $$ if (mapValue instanceof String) -->Line_31 $$ return registerBeanInstance(mapValue, beanKey)[ CD ]
Line_8 $$ String beanName = (String) mapValue-->Line_16 $$ replaceNotificationListenerBeanNameKeysIfNecessary(beanName, objectName)[ FD ]
Line_23 $$ if (entry.getValue() == mapValue) -->Line_27 $$ return objectName[ CD ]
Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) -->Line_12 $$ return objectName[ CD ]
Line_9 $$ if (isBeanDefinitionLazyInit(this.beanFactory, beanName)) -->Line_14 $$ Object bean = this.beanFactory.getBean(beanName)[ CD ]
Line_22 $$ for (Map.Entry<String, ?> entry : beansOfSameType.entrySet()) -->Line_24 $$ String beanName = entry.getKey()[ FD ]
Line_8 $$ String beanName = (String) mapValue-->Line_14 $$ Object bean = this.beanFactory.getBean(beanName)[ FD ]
