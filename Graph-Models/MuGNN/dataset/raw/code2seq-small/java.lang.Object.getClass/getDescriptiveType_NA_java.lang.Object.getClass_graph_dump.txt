Line_6 $$ Class<?> clazz = value.getClass()-->Line_8 $$ StringBuilder result = new StringBuilder(clazz.getName())[ FD ]
Line_8 $$ StringBuilder result = new StringBuilder(clazz.getName())-->Line_12 $$ result.append(ifcs[i].getName())[ FD ]
Line_6 $$ Class<?> clazz = value.getClass()-->Line_7 $$ if (Proxy.isProxyClass(clazz)) [ FD ]
Line_3 $$ if (value == null) -->Line_4 $$ return null[ CD ]
Line_6 $$ Class<?> clazz = value.getClass()-->Line_19 $$ return getQualifiedNameForArray(clazz)[ FD ]
Line_6 $$ Class<?> clazz = value.getClass()-->Line_10 $$ Class<?>[] ifcs = clazz.getInterfaces()[ FD ]
Line_8 $$ StringBuilder result = new StringBuilder(clazz.getName())-->Line_14 $$ result.append(',')[ FD ]
Line_6 $$ Class<?> clazz = value.getClass()-->Line_18 $$ if (clazz.isArray()) [ FD ]
Line_2 $$ public static String getDescriptiveType(Object value) -->Line_6 $$ Class<?> clazz = value.getClass()[ CD ]
Line_11 $$ for (int i = 0; i < ifcs.length; i++) -->Line_13 $$ if (i < ifcs.length - 1) [ CD ]
Line_2 $$ public static String getDescriptiveType(Object value) -->Line_7 $$ if (Proxy.isProxyClass(clazz)) [ CD ]
Line_18 $$ if (clazz.isArray()) -->Line_19 $$ return getQualifiedNameForArray(clazz)[ CD ]
Line_13 $$ if (i < ifcs.length - 1) -->Line_14 $$ result.append(',')[ CD ]
Line_7 $$ if (Proxy.isProxyClass(clazz)) -->Line_18 $$ if (clazz.isArray()) [ CD ]
Line_8 $$ StringBuilder result = new StringBuilder(clazz.getName())-->Line_9 $$ result.append(" implementing ")[ FD ]
Line_2 $$ public static String getDescriptiveType(Object value) -->Line_6 $$ Class<?> clazz = value.getClass()[ FD ]
Line_2 $$ public static String getDescriptiveType(Object value) -->Line_3 $$ if (value == null) [ FD ]
Line_7 $$ if (Proxy.isProxyClass(clazz)) -->Line_11 $$ for (int i = 0; i < ifcs.length; i++) [ CD ]
Line_7 $$ if (Proxy.isProxyClass(clazz)) -->Line_8 $$ StringBuilder result = new StringBuilder(clazz.getName())[ CD ]
Line_18 $$ if (clazz.isArray()) -->Line_21 $$ return clazz.getName()[ CD ]
Line_7 $$ if (Proxy.isProxyClass(clazz)) -->Line_17 $$ return result.toString()[ CD ]
Line_8 $$ StringBuilder result = new StringBuilder(clazz.getName())-->Line_17 $$ return result.toString()[ FD ]
Line_11 $$ for (int i = 0; i < ifcs.length; i++) -->Line_12 $$ result.append(ifcs[i].getName())[ CD ]
Line_7 $$ if (Proxy.isProxyClass(clazz)) -->Line_9 $$ result.append(" implementing ")[ CD ]
Line_6 $$ Class<?> clazz = value.getClass()-->Line_21 $$ return clazz.getName()[ FD ]
Line_11 $$ for (int i = 0; i < ifcs.length; i++) -->Line_13 $$ if (i < ifcs.length - 1) [ FD ]
Line_7 $$ if (Proxy.isProxyClass(clazz)) -->Line_10 $$ Class<?>[] ifcs = clazz.getInterfaces()[ CD ]
Line_2 $$ public static String getDescriptiveType(Object value) -->Line_3 $$ if (value == null) [ CD ]
