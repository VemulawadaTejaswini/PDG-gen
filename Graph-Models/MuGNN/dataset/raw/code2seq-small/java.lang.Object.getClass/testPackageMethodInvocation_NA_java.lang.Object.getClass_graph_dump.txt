Line_2 $$ public void testPackageMethodInvocation() -->Line_13 $$ assertEquals("foo", proxy.getString())[ CD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_3 $$ PackageMethodTestBean bean = new PackageMethodTestBean()[ CD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_4 $$ bean.value = "foo"[ CD ]
Line_3 $$ PackageMethodTestBean bean = new PackageMethodTestBean()-->Line_5 $$ mockTargetSource.setTarget(bean)[ FD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_6 $$ AdvisedSupport as = new AdvisedSupport()[ CD ]
Line_10 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy()-->Line_13 $$ assertEquals("foo", proxy.getString())[ FD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_5 $$ mockTargetSource.setTarget(bean)[ CD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_12 $$ assertEquals(proxy.getClass().getClassLoader(), bean.getClass().getClassLoader())[ CD ]
Line_6 $$ AdvisedSupport as = new AdvisedSupport()-->Line_8 $$ as.addAdvice(new NopInterceptor())[ FD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_10 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy()[ CD ]
Line_10 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy()-->Line_12 $$ assertEquals(proxy.getClass().getClassLoader(), bean.getClass().getClassLoader())[ FD ]
Line_10 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy()-->Line_11 $$ assertTrue(AopUtils.isCglibProxy(proxy))[ FD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_11 $$ assertTrue(AopUtils.isCglibProxy(proxy))[ CD ]
Line_6 $$ AdvisedSupport as = new AdvisedSupport()-->Line_7 $$ as.setTargetSource(mockTargetSource)[ FD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_8 $$ as.addAdvice(new NopInterceptor())[ CD ]
Line_9 $$ AopProxy aop = new CglibAopProxy(as)-->Line_10 $$ PackageMethodTestBean proxy = (PackageMethodTestBean) aop.getProxy()[ FD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_9 $$ AopProxy aop = new CglibAopProxy(as)[ CD ]
Line_3 $$ PackageMethodTestBean bean = new PackageMethodTestBean()-->Line_12 $$ assertEquals(proxy.getClass().getClassLoader(), bean.getClass().getClassLoader())[ FD ]
Line_2 $$ public void testPackageMethodInvocation() -->Line_7 $$ as.setTargetSource(mockTargetSource)[ CD ]
