Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_19 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ CD ]
Line_20 $$ Message message = messageRoutingBag.getMessage()-->Line_21 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ FD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_22 $$ messageRoutingBag = _createMessageRoutingBag()[ CD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_26 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ CD ]
Line_12 $$ Throwable throwable = re.getCause()-->Line_13 $$ Assert.assertEquals(RuntimeException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_6 $$ _mockIntraband.setIOException(ioException)[ CD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_9 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_3 $$ MockSPI mockSPI = _createMockSPI("SPIProvider", "SPI1")-->Line_23 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI))[ FD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_5 $$ IOException ioException = new IOException()[ CD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_23 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI))[ FD ]
Line_22 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_23 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI))[ FD ]
Line_22 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_25 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_18 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()[ CD ]
Line_20 $$ Message message = messageRoutingBag.getMessage()-->Line_25 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_25 $$ message = messageRoutingBag.getMessage()[ CD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_23 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI))[ CD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_3 $$ MockSPI mockSPI = _createMockSPI("SPIProvider", "SPI1")[ CD ]
Line_22 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_24 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_12 $$ Throwable throwable = re.getCause()-->Line_14 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_21 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ CD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_4 $$ _installSPIs(mockSPI)[ CD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_24 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ CD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_25 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_25 $$ message = messageRoutingBag.getMessage()-->Line_26 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ FD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_22 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_20 $$ Message message = messageRoutingBag.getMessage()[ FD ]
Line_20 $$ Message message = messageRoutingBag.getMessage()-->Line_26 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ FD ]
Line_5 $$ IOException ioException = new IOException()-->Line_6 $$ _mockIntraband.setIOException(ioException)[ FD ]
Line_5 $$ IOException ioException = new IOException()-->Line_14 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_19 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_8 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_24 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_3 $$ MockSPI mockSPI = _createMockSPI("SPIProvider", "SPI1")-->Line_4 $$ _installSPIs(mockSPI)[ FD ]
Line_2 $$ public void testSendMessageBag2() throws Exception -->Line_20 $$ Message message = messageRoutingBag.getMessage()[ CD ]
