Line_8 $$ if (c instanceof NodeRenderer) -->Line_9 $$ ((NodeRenderer) c).setToolTipText(element == null ? null : element.getClass().getName())[ CD ]
Line_11 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) -->Line_13 $$ c.setBackground(attr.getBackgroundColor())[ CD ]
Line_12 $$ final TextAttributes attr = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT)-->Line_13 $$ c.setBackground(attr.getBackgroundColor())[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_17 $$ return c[ CD ]
Line_6 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_11 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) [ CD ]
Line_3 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)-->Line_13 $$ c.setBackground(attr.getBackgroundColor())[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_4 $$ if (value instanceof DefaultMutableTreeNode) [ FD ]
Line_3 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)-->Line_8 $$ if (c instanceof NodeRenderer) [ FD ]
Line_11 $$ if (element instanceof PsiElement && FileContextUtil.getFileContext(((PsiElement) element).getContainingFile()) != null || element instanceof ViewerTreeStructure.Inject) -->Line_12 $$ final TextAttributes attr = EditorColorsManager.getInstance().getGlobalScheme().getAttributes(EditorColors.INJECTED_LANGUAGE_FRAGMENT)[ CD ]
Line_6 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_8 $$ if (c instanceof NodeRenderer) [ CD ]
Line_4 $$ if (value instanceof DefaultMutableTreeNode) -->Line_5 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()[ CD ]
Line_2 $$ public Component getTreeCellRendererComponent(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_3 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_3 $$ final Component c = renderer.getTreeCellRendererComponent(tree, value, selected, expanded, leaf, row, hasFocus)[ CD ]
Line_4 $$ if (value instanceof DefaultMutableTreeNode) -->Line_6 $$ if (userObject instanceof ViewerNodeDescriptor) [ CD ]
Line_6 $$ if (userObject instanceof ViewerNodeDescriptor) -->Line_7 $$ final Object element = ((ViewerNodeDescriptor) userObject).getElement()[ CD ]
Line_7 $$ final Object element = ((ViewerNodeDescriptor) userObject).getElement()-->Line_9 $$ ((NodeRenderer) c).setToolTipText(element == null ? null : element.getClass().getName())[ FD ]
Line_5 $$ final Object userObject = ((DefaultMutableTreeNode) value).getUserObject()-->Line_6 $$ if (userObject instanceof ViewerNodeDescriptor) [ FD ]
Line_2 $$ public Component getTreeCellRendererComponent(@NotNull JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) -->Line_4 $$ if (value instanceof DefaultMutableTreeNode) [ CD ]
