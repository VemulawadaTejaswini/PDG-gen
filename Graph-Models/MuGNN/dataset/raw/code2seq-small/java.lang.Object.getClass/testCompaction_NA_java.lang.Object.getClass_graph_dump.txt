Line_8 $$ SortedMap<String, PartitionUpdate> rows = new TreeMap()-->Line_15 $$ Collection<SSTableReader> readers = SSTableUtils.prepare().write(rows)[ FD ]
Line_7 $$ for (int k = 0; k < sstableCount; k++) -->Line_17 $$ store.addSSTables(readers)[ CD ]
Line_9 $$ for (int j = 0; j < partitionsPerSSTable; j++) -->Line_12 $$ for (int i = 0; i < rowsPerPartition; i++) builder.newRow(String.valueOf(i)).add("val", String.valueOf(i))[ CD ]
Line_8 $$ SortedMap<String, PartitionUpdate> rows = new TreeMap()-->Line_13 $$ rows.put(key, builder.build())[ FD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_6 $$ ArrayList<SSTableReader> sstables = new ArrayList()[ CD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_21 $$ final int gcBefore = (int) (System.currentTimeMillis() / 1000) - Schema.instance.getCFMetaData(KEYSPACE1, "Standard1").params.gcGraceSeconds[ CD ]
Line_11 $$ UpdateBuilder builder = UpdateBuilder.create(store.metadata, String.valueOf(j)).withTimestamp(k)-->Line_13 $$ rows.put(key, builder.build())[ FD ]
Line_10 $$ String key = String.valueOf(j)-->Line_13 $$ rows.put(key, builder.build())[ FD ]
Line_4 $$ Keyspace keyspace = Keyspace.open(KEYSPACE1)-->Line_5 $$ ColumnFamilyStore store = keyspace.getColumnFamilyStore("Standard1")[ FD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_7 $$ for (int k = 0; k < sstableCount; k++) [ FD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_4 $$ Keyspace keyspace = Keyspace.open(KEYSPACE1)[ CD ]
Line_7 $$ for (int k = 0; k < sstableCount; k++) -->Line_16 $$ sstables.addAll(readers)[ CD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_26 $$ System.out.println(String.format("%s: sstables=%d rowsper=%d colsper=%d: %d ms", this.getClass().getName(), sstableCount, partitionsPerSSTable, rowsPerPartition, TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)))[ FD ]
Line_9 $$ for (int j = 0; j < partitionsPerSSTable; j++) -->Line_10 $$ String key = String.valueOf(j)[ CD ]
Line_9 $$ for (int j = 0; j < partitionsPerSSTable; j++) -->Line_10 $$ String key = String.valueOf(j)[ FD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_3 $$ CompactionManager.instance.disableAutoCompaction()[ CD ]
Line_9 $$ for (int j = 0; j < partitionsPerSSTable; j++) -->Line_11 $$ UpdateBuilder builder = UpdateBuilder.create(store.metadata, String.valueOf(j)).withTimestamp(k)[ FD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_9 $$ for (int j = 0; j < partitionsPerSSTable; j++) [ FD ]
Line_9 $$ for (int j = 0; j < partitionsPerSSTable; j++) -->Line_13 $$ rows.put(key, builder.build())[ CD ]
Line_7 $$ for (int k = 0; k < sstableCount; k++) -->Line_11 $$ UpdateBuilder builder = UpdateBuilder.create(store.metadata, String.valueOf(j)).withTimestamp(k)[ FD ]
Line_5 $$ ColumnFamilyStore store = keyspace.getColumnFamilyStore("Standard1")-->Line_17 $$ store.addSSTables(readers)[ FD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_5 $$ ColumnFamilyStore store = keyspace.getColumnFamilyStore("Standard1")[ CD ]
Line_11 $$ UpdateBuilder builder = UpdateBuilder.create(store.metadata, String.valueOf(j)).withTimestamp(k)-->Line_12 $$ builder.newRow(String.valueOf(i)).add("val", String.valueOf(i))[ FD ]
Line_7 $$ for (int k = 0; k < sstableCount; k++) -->Line_9 $$ for (int j = 0; j < partitionsPerSSTable; j++) [ CD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_19 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_12 $$ for (int i = 0; i < rowsPerPartition; i++) builder.newRow(String.valueOf(i)).add("val", String.valueOf(i))[ FD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_26 $$ System.out.println(String.format("%s: sstables=%d rowsper=%d colsper=%d: %d ms", this.getClass().getName(), sstableCount, partitionsPerSSTable, rowsPerPartition, TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - start)))[ CD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_20 $$ long start = System.nanoTime()[ CD ]
Line_5 $$ ColumnFamilyStore store = keyspace.getColumnFamilyStore("Standard1")-->Line_22 $$ try (LifecycleTransaction txn = store.getTracker().tryModify(sstables, OperationType.COMPACTION)) [ FD ]
Line_7 $$ for (int k = 0; k < sstableCount; k++) -->Line_15 $$ Collection<SSTableReader> readers = SSTableUtils.prepare().write(rows)[ CD ]
Line_7 $$ for (int k = 0; k < sstableCount; k++) -->Line_8 $$ SortedMap<String, PartitionUpdate> rows = new TreeMap()[ CD ]
Line_2 $$ protected void testCompaction(int sstableCount, int partitionsPerSSTable, int rowsPerPartition) throws Exception -->Line_7 $$ for (int k = 0; k < sstableCount; k++) [ CD ]
Line_6 $$ ArrayList<SSTableReader> sstables = new ArrayList()-->Line_22 $$ try (LifecycleTransaction txn = store.getTracker().tryModify(sstables, OperationType.COMPACTION)) [ FD ]
Line_9 $$ for (int j = 0; j < partitionsPerSSTable; j++) -->Line_11 $$ UpdateBuilder builder = UpdateBuilder.create(store.metadata, String.valueOf(j)).withTimestamp(k)[ CD ]
Line_6 $$ ArrayList<SSTableReader> sstables = new ArrayList()-->Line_16 $$ sstables.addAll(readers)[ FD ]
