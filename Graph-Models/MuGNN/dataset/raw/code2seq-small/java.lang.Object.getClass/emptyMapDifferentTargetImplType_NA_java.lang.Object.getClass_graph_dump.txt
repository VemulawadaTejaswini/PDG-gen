Line_2 $$ public void emptyMapDifferentTargetImplType() throws Exception -->Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapDifferentTarget"))[ CD ]
Line_2 $$ public void emptyMapDifferentTargetImplType() throws Exception -->Line_9 $$ assertEquals(LinkedHashMap.class, result.getClass())[ CD ]
Line_2 $$ public void emptyMapDifferentTargetImplType() throws Exception -->Line_8 $$ assertEquals(map, result)[ CD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)[ FD ]
Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)-->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapDifferentTarget"))-->Line_7 $$ LinkedHashMap<String, String> result = (LinkedHashMap<String, String>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_7 $$ LinkedHashMap<String, String> result = (LinkedHashMap<String, String>) conversionService.convert(map, sourceType, targetType)-->Line_8 $$ assertEquals(map, result)[ FD ]
Line_7 $$ LinkedHashMap<String, String> result = (LinkedHashMap<String, String>) conversionService.convert(map, sourceType, targetType)-->Line_9 $$ assertEquals(LinkedHashMap.class, result.getClass())[ FD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_8 $$ assertEquals(map, result)[ FD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_7 $$ LinkedHashMap<String, String> result = (LinkedHashMap<String, String>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void emptyMapDifferentTargetImplType() throws Exception -->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_2 $$ public void emptyMapDifferentTargetImplType() throws Exception -->Line_7 $$ LinkedHashMap<String, String> result = (LinkedHashMap<String, String>) conversionService.convert(map, sourceType, targetType)[ CD ]
Line_2 $$ public void emptyMapDifferentTargetImplType() throws Exception -->Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)[ CD ]
Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)-->Line_7 $$ LinkedHashMap<String, String> result = (LinkedHashMap<String, String>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void emptyMapDifferentTargetImplType() throws Exception -->Line_3 $$ Map<String, String> map = new HashMap<String, String>()[ CD ]
Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapDifferentTarget"))-->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
