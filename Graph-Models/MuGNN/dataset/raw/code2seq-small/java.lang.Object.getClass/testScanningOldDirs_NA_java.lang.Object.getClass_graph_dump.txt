Line_15 $$ HistoryFileManagerForTest hfm = new HistoryFileManagerForTest()-->Line_16 $$ hfm.init(conf)[ FD ]
Line_17 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_23 $$ Assert.assertTrue(!fileInfo.didMoveFail())[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_11 $$ JobId jobId = job.getID()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setClass(NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_9 $$ app.submit(conf)[ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_17 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)[ FD ]
Line_17 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_28 $$ fileInfo = hfm.getFileInfo(jobId)[ FD ]
Line_22 $$ while (fileInfo.isMovePending() && msecToSleep > 0) -->Line_25 $$ Thread.sleep(msecPerSleep)[ CD ]
Line_15 $$ HistoryFileManagerForTest hfm = new HistoryFileManagerForTest()-->Line_19 $$ hfm.deleteJobFromJobListCache(fileInfo)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ RackResolver.init(conf)[ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_28 $$ fileInfo = hfm.getFileInfo(jobId)[ FD ]
Line_17 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_19 $$ hfm.deleteJobFromJobListCache(fileInfo)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_14 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_15 $$ HistoryFileManagerForTest hfm = new HistoryFileManagerForTest()-->Line_28 $$ fileInfo = hfm.getFileInfo(jobId)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_28 $$ fileInfo = hfm.getFileInfo(jobId)-->Line_30 $$ Assert.assertNotNull("Unable to locate old job history", fileInfo)[ FD ]
Line_2 $$ public void testScanningOldDirs() throws Exception -->Line_3 $$ LOG.info("STARTING testScanningOldDirs")[ CD ]
Line_22 $$ while (fileInfo.isMovePending() && msecToSleep > 0) -->Line_24 $$ msecToSleep -= msecPerSleep[ CD ]
Line_20 $$ final int msecPerSleep = 10-->Line_25 $$ Thread.sleep(msecPerSleep)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_9 $$ app.submit(conf)[ FD ]
Line_20 $$ final int msecPerSleep = 10-->Line_24 $$ msecToSleep -= msecPerSleep[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_13 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_12 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistory(1, 1, true, this.getClass().getName(), true)-->Line_13 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_15 $$ HistoryFileManagerForTest hfm = new HistoryFileManagerForTest()-->Line_29 $$ hfm.stop()[ FD ]
Line_15 $$ HistoryFileManagerForTest hfm = new HistoryFileManagerForTest()-->Line_17 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_16 $$ hfm.init(conf)[ FD ]
Line_17 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_18 $$ Assert.assertNotNull("Unable to locate job history", fileInfo)[ FD ]
Line_21 $$ int msecToSleep = 10 * 1000-->Line_24 $$ msecToSleep -= msecPerSleep[ FD ]
Line_22 $$ while (fileInfo.isMovePending() && msecToSleep > 0) -->Line_23 $$ Assert.assertTrue(!fileInfo.didMoveFail())[ CD ]
Line_17 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_22 $$ while (fileInfo.isMovePending() && msecToSleep > 0) [ FD ]
Line_17 $$ HistoryFileInfo fileInfo = hfm.getFileInfo(jobId)-->Line_30 $$ Assert.assertNotNull("Unable to locate old job history", fileInfo)[ FD ]
