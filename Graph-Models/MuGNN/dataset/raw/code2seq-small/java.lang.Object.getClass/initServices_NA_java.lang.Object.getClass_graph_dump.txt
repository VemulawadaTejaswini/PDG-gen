Line_2 $$ protected void initServices(String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_11 $$ Class<?> serviceImplClass = portletClassLoader.loadClass(serviceImpl)[ FD ]
Line_5 $$ String serviceType = serviceElement.elementText("service-type")-->Line_10 $$ Class<?> serviceTypeClass = portletClassLoader.loadClass(serviceType)[ FD ]
Line_15 $$ serviceProxy = PortalBeanLocatorUtil.locate(serviceType)-->Line_20 $$ if (ProxyUtil.isProxyClass(serviceProxy.getClass())) [ FD ]
Line_18 $$ serviceProxy = registry.getService(serviceTypeClass)-->Line_21 $$ initServices(servletContextName, portletClassLoader, serviceType, serviceTypeClass, serviceImplConstructor, serviceProxy)[ FD ]
Line_13 $$ Object serviceProxy = null-->Line_20 $$ if (ProxyUtil.isProxyClass(serviceProxy.getClass())) [ FD ]
Line_13 $$ Object serviceProxy = null-->Line_18 $$ serviceProxy = registry.getService(serviceTypeClass)[ FD ]
Line_2 $$ protected void initServices(String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_3 $$ List<Element> serviceElements = parentElement.elements("service")[ CD ]
Line_5 $$ String serviceType = serviceElement.elementText("service-type")-->Line_7 $$ if (!checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_SERVICE, portletClassLoader, serviceType, "Rejecting service " + serviceImpl)) [ FD ]
Line_13 $$ Object serviceProxy = null-->Line_15 $$ serviceProxy = PortalBeanLocatorUtil.locate(serviceType)[ FD ]
Line_12 $$ Constructor<?> serviceImplConstructor = serviceImplClass.getConstructor(new Class<?>[] -->Line_21 $$ initServices(servletContextName, portletClassLoader, serviceType, serviceTypeClass, serviceImplConstructor, serviceProxy)[ FD ]
Line_4 $$ for (Element serviceElement : serviceElements) -->Line_6 $$ String serviceImpl = serviceElement.elementText("service-impl")[ FD ]
Line_2 $$ protected void initServices(String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_7 $$ if (!checkPermission(PACLConstants.PORTAL_HOOK_PERMISSION_SERVICE, portletClassLoader, serviceType, "Rejecting service " + serviceImpl)) [ FD ]
Line_2 $$ protected void initServices(String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_10 $$ Class<?> serviceTypeClass = portletClassLoader.loadClass(serviceType)[ FD ]
Line_5 $$ String serviceType = serviceElement.elementText("service-type")-->Line_15 $$ serviceProxy = PortalBeanLocatorUtil.locate(serviceType)[ FD ]
Line_20 $$ if (ProxyUtil.isProxyClass(serviceProxy.getClass())) -->Line_21 $$ initServices(servletContextName, portletClassLoader, serviceType, serviceTypeClass, serviceImplConstructor, serviceProxy)[ CD ]
Line_13 $$ Object serviceProxy = null-->Line_21 $$ initServices(servletContextName, portletClassLoader, serviceType, serviceTypeClass, serviceImplConstructor, serviceProxy)[ FD ]
Line_18 $$ serviceProxy = registry.getService(serviceTypeClass)-->Line_20 $$ if (ProxyUtil.isProxyClass(serviceProxy.getClass())) [ FD ]
Line_11 $$ Class<?> serviceImplClass = portletClassLoader.loadClass(serviceImpl)-->Line_12 $$ Constructor<?> serviceImplConstructor = serviceImplClass.getConstructor(new Class<?>[] [ FD ]
Line_4 $$ for (Element serviceElement : serviceElements) -->Line_5 $$ String serviceType = serviceElement.elementText("service-type")[ FD ]
Line_20 $$ if (ProxyUtil.isProxyClass(serviceProxy.getClass())) -->Line_23 $$ _log.error("Service hooks require Spring to be configured to use " + "JdkDynamicProxy and will not work with CGLIB")[ CD ]
Line_2 $$ protected void initServices(String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_3 $$ List<Element> serviceElements = parentElement.elements("service")[ FD ]
Line_6 $$ String serviceImpl = serviceElement.elementText("service-impl")-->Line_11 $$ Class<?> serviceImplClass = portletClassLoader.loadClass(serviceImpl)[ FD ]
Line_2 $$ protected void initServices(String servletContextName, ClassLoader portletClassLoader, Element parentElement) throws Exception -->Line_21 $$ initServices(servletContextName, portletClassLoader, serviceType, serviceTypeClass, serviceImplConstructor, serviceProxy)[ FD ]
Line_10 $$ Class<?> serviceTypeClass = portletClassLoader.loadClass(serviceType)-->Line_21 $$ initServices(servletContextName, portletClassLoader, serviceType, serviceTypeClass, serviceImplConstructor, serviceProxy)[ FD ]
Line_17 $$ Registry registry = RegistryUtil.getRegistry()-->Line_18 $$ serviceProxy = registry.getService(serviceTypeClass)[ FD ]
Line_15 $$ serviceProxy = PortalBeanLocatorUtil.locate(serviceType)-->Line_21 $$ initServices(servletContextName, portletClassLoader, serviceType, serviceTypeClass, serviceImplConstructor, serviceProxy)[ FD ]
Line_5 $$ String serviceType = serviceElement.elementText("service-type")-->Line_21 $$ initServices(servletContextName, portletClassLoader, serviceType, serviceTypeClass, serviceImplConstructor, serviceProxy)[ FD ]
Line_15 $$ serviceProxy = PortalBeanLocatorUtil.locate(serviceType)-->Line_18 $$ serviceProxy = registry.getService(serviceTypeClass)[ FD ]
Line_10 $$ Class<?> serviceTypeClass = portletClassLoader.loadClass(serviceType)-->Line_18 $$ serviceProxy = registry.getService(serviceTypeClass)[ FD ]
