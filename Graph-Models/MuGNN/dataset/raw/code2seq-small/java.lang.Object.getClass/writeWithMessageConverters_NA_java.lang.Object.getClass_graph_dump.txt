Line_12 $$ for (HttpMessageConverter messageConverter : getMessageConverters()) -->Line_13 $$ if (messageConverter.canWrite(returnValueType, acceptedMediaType)) [ FD ]
Line_8 $$ Class<?> returnValueType = returnValue.getClass()-->Line_13 $$ if (messageConverter.canWrite(returnValueType, acceptedMediaType)) [ FD ]
Line_15 $$ if (logger.isDebugEnabled()) -->Line_17 $$ if (contentType == null) [ CD ]
Line_9 $$ List<MediaType> allSupportedMediaTypes = new ArrayList<MediaType>()-->Line_28 $$ allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())[ FD ]
Line_11 $$ for (MediaType acceptedMediaType : acceptedMediaTypes) -->Line_18 $$ contentType = acceptedMediaType[ FD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_3 $$ List<MediaType> acceptedMediaTypes = inputMessage.getHeaders().getAccept()[ CD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_10 $$ if (getMessageConverters() != null) [ CD ]
Line_3 $$ List<MediaType> acceptedMediaTypes = inputMessage.getHeaders().getAccept()-->Line_5 $$ acceptedMediaTypes = Collections.singletonList(MediaType.ALL)[ FD ]
Line_12 $$ for (HttpMessageConverter messageConverter : getMessageConverters()) -->Line_14 $$ messageConverter.write(returnValue, acceptedMediaType, outputMessage)[ FD ]
Line_11 $$ for (MediaType acceptedMediaType : acceptedMediaTypes) -->Line_14 $$ messageConverter.write(returnValue, acceptedMediaType, outputMessage)[ FD ]
Line_17 $$ if (contentType == null) -->Line_18 $$ contentType = acceptedMediaType[ CD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_8 $$ Class<?> returnValueType = returnValue.getClass()[ CD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_7 $$ MediaType.sortByQualityValue(acceptedMediaTypes)[ CD ]
Line_12 $$ for (HttpMessageConverter messageConverter : getMessageConverters()) -->Line_28 $$ allSupportedMediaTypes.addAll(messageConverter.getSupportedMediaTypes())[ FD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_8 $$ Class<?> returnValueType = returnValue.getClass()[ FD ]
Line_16 $$ MediaType contentType = outputMessage.getHeaders().getContentType()-->Line_18 $$ contentType = acceptedMediaType[ FD ]
Line_15 $$ if (logger.isDebugEnabled()) -->Line_16 $$ MediaType contentType = outputMessage.getHeaders().getContentType()[ CD ]
Line_4 $$ if (acceptedMediaTypes.isEmpty()) -->Line_5 $$ acceptedMediaTypes = Collections.singletonList(MediaType.ALL)[ CD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_16 $$ MediaType contentType = outputMessage.getHeaders().getContentType()[ FD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_3 $$ List<MediaType> acceptedMediaTypes = inputMessage.getHeaders().getAccept()[ FD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_14 $$ messageConverter.write(returnValue, acceptedMediaType, outputMessage)[ FD ]
Line_3 $$ List<MediaType> acceptedMediaTypes = inputMessage.getHeaders().getAccept()-->Line_4 $$ if (acceptedMediaTypes.isEmpty()) [ FD ]
Line_15 $$ if (logger.isDebugEnabled()) -->Line_20 $$ logger.debug("Written [" + returnValue + "] as \"" + contentType + "\" using [" + messageConverter + "]")[ CD ]
Line_11 $$ for (MediaType acceptedMediaType : acceptedMediaTypes) -->Line_13 $$ if (messageConverter.canWrite(returnValueType, acceptedMediaType)) [ FD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_4 $$ if (acceptedMediaTypes.isEmpty()) [ CD ]
Line_13 $$ if (messageConverter.canWrite(returnValueType, acceptedMediaType)) -->Line_23 $$ return[ CD ]
Line_5 $$ acceptedMediaTypes = Collections.singletonList(MediaType.ALL)-->Line_7 $$ MediaType.sortByQualityValue(acceptedMediaTypes)[ FD ]
Line_3 $$ List<MediaType> acceptedMediaTypes = inputMessage.getHeaders().getAccept()-->Line_7 $$ MediaType.sortByQualityValue(acceptedMediaTypes)[ FD ]
Line_13 $$ if (messageConverter.canWrite(returnValueType, acceptedMediaType)) -->Line_15 $$ if (logger.isDebugEnabled()) [ CD ]
Line_13 $$ if (messageConverter.canWrite(returnValueType, acceptedMediaType)) -->Line_22 $$ this.responseArgumentUsed = true[ CD ]
Line_2 $$ private void writeWithMessageConverters(Object returnValue, HttpInputMessage inputMessage, HttpOutputMessage outputMessage) throws IOException, HttpMediaTypeNotAcceptableException -->Line_9 $$ List<MediaType> allSupportedMediaTypes = new ArrayList<MediaType>()[ CD ]
Line_13 $$ if (messageConverter.canWrite(returnValueType, acceptedMediaType)) -->Line_14 $$ messageConverter.write(returnValue, acceptedMediaType, outputMessage)[ CD ]
Line_16 $$ MediaType contentType = outputMessage.getHeaders().getContentType()-->Line_17 $$ if (contentType == null) [ FD ]
