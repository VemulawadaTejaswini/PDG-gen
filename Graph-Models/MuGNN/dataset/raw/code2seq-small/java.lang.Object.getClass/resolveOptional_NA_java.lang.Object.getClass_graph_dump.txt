Line_2 $$ public void resolveOptional() throws Exception -->Line_3 $$ ConfigurableWebBindingInitializer initializer = new ConfigurableWebBindingInitializer()[ CD ]
Line_5 $$ WebDataBinderFactory binderFactory = new DefaultDataBinderFactory(initializer)-->Line_6 $$ Object result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)[ FD ]
Line_6 $$ Object result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)-->Line_11 $$ assertEquals(Optional.class, result.getClass())[ FD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_9 $$ this.request.addParameter("name", "123")[ CD ]
Line_6 $$ Object result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)-->Line_8 $$ assertEquals(Optional.empty(), result)[ FD ]
Line_5 $$ WebDataBinderFactory binderFactory = new DefaultDataBinderFactory(initializer)-->Line_10 $$ result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)[ FD ]
Line_10 $$ result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)-->Line_11 $$ assertEquals(Optional.class, result.getClass())[ FD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_4 $$ initializer.setConversionService(new DefaultConversionService())[ CD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_11 $$ assertEquals(Optional.class, result.getClass())[ CD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_6 $$ Object result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)[ CD ]
Line_3 $$ ConfigurableWebBindingInitializer initializer = new ConfigurableWebBindingInitializer()-->Line_4 $$ initializer.setConversionService(new DefaultConversionService())[ FD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_8 $$ assertEquals(Optional.empty(), result)[ CD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_10 $$ result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)[ CD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_5 $$ WebDataBinderFactory binderFactory = new DefaultDataBinderFactory(initializer)[ CD ]
Line_6 $$ Object result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)-->Line_10 $$ result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)[ FD ]
Line_6 $$ Object result = resolver.resolveArgument(paramOptional, null, webRequest, binderFactory)-->Line_7 $$ assertEquals(Optional.class, result.getClass())[ FD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_7 $$ assertEquals(Optional.class, result.getClass())[ CD ]
Line_2 $$ public void resolveOptional() throws Exception -->Line_12 $$ assertEquals(123, ((Optional) result).get())[ CD ]
