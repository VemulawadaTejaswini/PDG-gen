Line_3 $$ for (PsiReference ref : refs) -->Line_4 $$ final PsiElement element = ref.getElement()[ FD ]
Line_9 $$ final TextRange range = nameIdentifier.getTextRange()-->Line_10 $$ if (range != null && checkRangeContainsOffset(offset, range, nameIdentifier, 0))[ FD ]
Line_3 $$ for (PsiReference ref : refs) -->Line_5 $$ if (checkRangeContainsOffset(offset, ref.getRangeInElement(), element))[ FD ]
Line_2 $$ private PsiElement getSelectedInEditorElement(@Nullable PsiElement nameIdentifier, final Collection<PsiReference> refs, Collection<Pair<PsiElement, TextRange>> stringUsages, final int offset) -->Line_8 $$ if (nameIdentifier != null) [ FD ]
Line_10 $$ if (range != null && checkRangeContainsOffset(offset, range, nameIdentifier, 0))-->Line_11 $$ return nameIdentifier[ CD ]
Line_2 $$ private PsiElement getSelectedInEditorElement(@Nullable PsiElement nameIdentifier, final Collection<PsiReference> refs, Collection<Pair<PsiElement, TextRange>> stringUsages, final int offset) -->Line_18 $$ return null[ CD ]
Line_14 $$ if (checkRangeContainsOffset(offset, stringUsage.second, stringUsage.first))-->Line_15 $$ return stringUsage.first[ CD ]
Line_2 $$ private PsiElement getSelectedInEditorElement(@Nullable PsiElement nameIdentifier, final Collection<PsiReference> refs, Collection<Pair<PsiElement, TextRange>> stringUsages, final int offset) -->Line_5 $$ if (checkRangeContainsOffset(offset, ref.getRangeInElement(), element))[ FD ]
Line_2 $$ private PsiElement getSelectedInEditorElement(@Nullable PsiElement nameIdentifier, final Collection<PsiReference> refs, Collection<Pair<PsiElement, TextRange>> stringUsages, final int offset) -->Line_10 $$ if (range != null && checkRangeContainsOffset(offset, range, nameIdentifier, 0))[ FD ]
Line_4 $$ final PsiElement element = ref.getElement()-->Line_5 $$ if (checkRangeContainsOffset(offset, ref.getRangeInElement(), element))[ FD ]
Line_2 $$ private PsiElement getSelectedInEditorElement(@Nullable PsiElement nameIdentifier, final Collection<PsiReference> refs, Collection<Pair<PsiElement, TextRange>> stringUsages, final int offset) -->Line_9 $$ final TextRange range = nameIdentifier.getTextRange()[ FD ]
Line_8 $$ if (nameIdentifier != null) -->Line_10 $$ if (range != null && checkRangeContainsOffset(offset, range, nameIdentifier, 0))[ CD ]
Line_2 $$ private PsiElement getSelectedInEditorElement(@Nullable PsiElement nameIdentifier, final Collection<PsiReference> refs, Collection<Pair<PsiElement, TextRange>> stringUsages, final int offset) -->Line_14 $$ if (checkRangeContainsOffset(offset, stringUsage.second, stringUsage.first))[ FD ]
Line_8 $$ if (nameIdentifier != null) -->Line_9 $$ final TextRange range = nameIdentifier.getTextRange()[ CD ]
Line_2 $$ private PsiElement getSelectedInEditorElement(@Nullable PsiElement nameIdentifier, final Collection<PsiReference> refs, Collection<Pair<PsiElement, TextRange>> stringUsages, final int offset) -->Line_8 $$ if (nameIdentifier != null) [ CD ]
Line_2 $$ private PsiElement getSelectedInEditorElement(@Nullable PsiElement nameIdentifier, final Collection<PsiReference> refs, Collection<Pair<PsiElement, TextRange>> stringUsages, final int offset) -->Line_17 $$ LOG.error(nameIdentifier + " by " + this.getClass().getName())[ CD ]
Line_5 $$ if (checkRangeContainsOffset(offset, ref.getRangeInElement(), element))-->Line_6 $$ return element[ CD ]
