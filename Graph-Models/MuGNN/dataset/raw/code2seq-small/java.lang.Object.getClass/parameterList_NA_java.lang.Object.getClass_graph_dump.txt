Line_2 $$ public void parameterList() throws Exception -->Line_14 $$ assertEquals(TypeDescriptor.nested(methodParameter, 1), desc.getElementTypeDescriptor())[ CD ]
Line_3 $$ MethodParameter methodParameter = new MethodParameter(getClass().getMethod("testParameterList", List.class), 0)-->Line_14 $$ assertEquals(TypeDescriptor.nested(methodParameter, 1), desc.getElementTypeDescriptor())[ FD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_13 $$ assertEquals(List.class, desc.getElementTypeDescriptor().getType())[ FD ]
Line_2 $$ public void parameterList() throws Exception -->Line_11 $$ assertTrue(desc.isCollection())[ CD ]
Line_2 $$ public void parameterList() throws Exception -->Line_8 $$ assertEquals("java.util.List<java.util.List<java.util.Map<java.lang.Integer, java.lang.Enum<?>>>>", desc.toString())[ CD ]
Line_3 $$ MethodParameter methodParameter = new MethodParameter(getClass().getMethod("testParameterList", List.class), 0)-->Line_15 $$ assertEquals(TypeDescriptor.nested(methodParameter, 2), desc.getElementTypeDescriptor().getElementTypeDescriptor())[ FD ]
Line_2 $$ public void parameterList() throws Exception -->Line_15 $$ assertEquals(TypeDescriptor.nested(methodParameter, 2), desc.getElementTypeDescriptor().getElementTypeDescriptor())[ CD ]
Line_2 $$ public void parameterList() throws Exception -->Line_9 $$ assertTrue(!desc.isPrimitive())[ CD ]
Line_2 $$ public void parameterList() throws Exception -->Line_7 $$ assertEquals("java.util.List", desc.getName())[ CD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_17 $$ assertEquals(Integer.class, desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapKeyTypeDescriptor().getType())[ FD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_19 $$ assertFalse(desc.isMap())[ FD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_15 $$ assertEquals(TypeDescriptor.nested(methodParameter, 2), desc.getElementTypeDescriptor().getElementTypeDescriptor())[ FD ]
Line_2 $$ public void parameterList() throws Exception -->Line_17 $$ assertEquals(Integer.class, desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapKeyTypeDescriptor().getType())[ CD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_10 $$ assertEquals(0, desc.getAnnotations().length)[ FD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_9 $$ assertTrue(!desc.isPrimitive())[ FD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_5 $$ assertEquals(List.class, desc.getType())[ FD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_6 $$ assertEquals(List.class, desc.getObjectType())[ FD ]
Line_2 $$ public void parameterList() throws Exception -->Line_5 $$ assertEquals(List.class, desc.getType())[ CD ]
Line_2 $$ public void parameterList() throws Exception -->Line_10 $$ assertEquals(0, desc.getAnnotations().length)[ CD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_14 $$ assertEquals(TypeDescriptor.nested(methodParameter, 1), desc.getElementTypeDescriptor())[ FD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_7 $$ assertEquals("java.util.List", desc.getName())[ FD ]
Line_2 $$ public void parameterList() throws Exception -->Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)[ CD ]
Line_2 $$ public void parameterList() throws Exception -->Line_6 $$ assertEquals(List.class, desc.getObjectType())[ CD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_11 $$ assertTrue(desc.isCollection())[ FD ]
Line_3 $$ MethodParameter methodParameter = new MethodParameter(getClass().getMethod("testParameterList", List.class), 0)-->Line_16 $$ assertEquals(TypeDescriptor.nested(methodParameter, 3), desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor())[ FD ]
Line_2 $$ public void parameterList() throws Exception -->Line_16 $$ assertEquals(TypeDescriptor.nested(methodParameter, 3), desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor())[ CD ]
Line_2 $$ public void parameterList() throws Exception -->Line_12 $$ assertFalse(desc.isArray())[ CD ]
Line_2 $$ public void parameterList() throws Exception -->Line_13 $$ assertEquals(List.class, desc.getElementTypeDescriptor().getType())[ CD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_16 $$ assertEquals(TypeDescriptor.nested(methodParameter, 3), desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor())[ FD ]
Line_2 $$ public void parameterList() throws Exception -->Line_19 $$ assertFalse(desc.isMap())[ CD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_12 $$ assertFalse(desc.isArray())[ FD ]
Line_2 $$ public void parameterList() throws Exception -->Line_3 $$ MethodParameter methodParameter = new MethodParameter(getClass().getMethod("testParameterList", List.class), 0)[ CD ]
Line_2 $$ public void parameterList() throws Exception -->Line_18 $$ assertEquals(Enum.class, desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor().getType())[ CD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_8 $$ assertEquals("java.util.List<java.util.List<java.util.Map<java.lang.Integer, java.lang.Enum<?>>>>", desc.toString())[ FD ]
Line_4 $$ TypeDescriptor desc = new TypeDescriptor(methodParameter)-->Line_18 $$ assertEquals(Enum.class, desc.getElementTypeDescriptor().getElementTypeDescriptor().getMapValueTypeDescriptor().getType())[ FD ]
