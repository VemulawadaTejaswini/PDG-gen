Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_14 $$ rm.sendAMLaunched(appAttemptId)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_84 $$ Assert.assertEquals(0.95f, rmApp.getProgress(), 0.001f)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_60 $$ rmDispatcher.await()[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_25 $$ mrApp.submit(conf)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_75 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_9 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_38 $$ rmDispatcher.await()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_67 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_83 $$ Assert.assertEquals(0.95f, job.getProgress(), 0.001f)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_33 $$ mrApp.waitForInternalState((TaskAttemptImpl) t.getAttempts().values().iterator().next(), TaskAttemptStateInternal.UNASSIGNED)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_26 $$ Job job = mrApp.getContext().getAllJobs().entrySet().iterator().next().getValue()[ FD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)-->Line_58 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 7)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_42 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_76 $$ allocator.schedule()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_48 $$ allocator.schedule()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_78 $$ Assert.assertEquals(0.59f, job.getProgress(), 0.001f)[ CD ]
Line_13 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()-->Line_14 $$ rm.sendAMLaunched(appAttemptId)[ FD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)-->Line_75 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_40 $$ rmDispatcher.await()[ CD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)-->Line_63 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_12 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_68 $$ allocator.schedule()[ CD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_8 $$ RMApp rmApp = rm.submitApp(1024)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_39 $$ amNodeManager.nodeHeartbeat(true)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_13 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_82 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_77 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_6 $$ rm.start()[ CD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)-->Line_39 $$ amNodeManager.nodeHeartbeat(true)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_53 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_69 $$ rmDispatcher.await()[ FD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_24 $$ Assert.assertEquals(0.0, rmApp.getProgress(), 0.0)[ FD ]
Line_44 $$ if (t.getType() == TaskType.MAP) -->Line_45 $$ mrApp.waitForState(t, TaskState.RUNNING)[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_79 $$ Assert.assertEquals(0.59f, rmApp.getProgress(), 0.001f)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_72 $$ mrApp.waitForState(t, TaskState.RUNNING)[ FD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)-->Line_11 $$ amNodeManager.nodeHeartbeat(true)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_62 $$ Assert.assertEquals(0.41f, rmApp.getProgress(), 0.001f)[ CD ]
Line_32 $$ if (t.getType() == TaskType.MAP) -->Line_33 $$ mrApp.waitForInternalState((TaskAttemptImpl) t.getAttempts().values().iterator().next(), TaskAttemptStateInternal.UNASSIGNED)[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_21 $$ return new MyContainerAllocator(rm, appAttemptId, context)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_64 $$ allocator.schedule()[ CD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_6 $$ rm.start()[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_18 $$ return new DrainDispatcher()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_53 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1)[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_28 $$ MyContainerAllocator allocator = (MyContainerAllocator) mrApp.getContainerAllocator()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) [ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_51 $$ Assert.assertEquals(0.05f, rmApp.getProgress(), 0.001f)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_69 $$ rmDispatcher.await()[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_25 $$ mrApp.submit(conf)[ FD ]
Line_71 $$ if (t.getType() == TaskType.REDUCE) -->Line_72 $$ mrApp.waitForState(t, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_81 $$ allocator.schedule()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_84 $$ Assert.assertEquals(0.95f, rmApp.getProgress(), 0.001f)[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_58 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 7)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_66 $$ amNodeManager.nodeHeartbeat(true)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_12 $$ rmDispatcher.await()[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_13 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_25 $$ mrApp.submit(conf)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_61 $$ Assert.assertEquals(0.41f, job.getProgress(), 0.001f)[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_45 $$ mrApp.waitForState(t, TaskState.RUNNING)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_82 $$ rmDispatcher.await()[ FD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_60 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_54 $$ allocator.schedule()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_15 $$ rmDispatcher.await()[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_29 $$ mrApp.waitForInternalState((JobImpl) job, JobStateInternal.RUNNING)[ FD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_14 $$ rm.sendAMLaunched(appAttemptId)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_65 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_67 $$ rmDispatcher.await()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_58 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 7)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_49 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_80 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 8)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_9 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_56 $$ Assert.assertEquals(0.095f, job.getProgress(), 0.001f)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_75 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_15 $$ rmDispatcher.await()[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_27 $$ DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_30 $$ amDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_49 $$ rmDispatcher.await()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_55 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_65 $$ rmDispatcher.await()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_38 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_41 $$ allocator.schedule()[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_62 $$ Assert.assertEquals(0.41f, rmApp.getProgress(), 0.001f)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_58 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 7)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_26 $$ Job job = mrApp.getContext().getAllJobs().entrySet().iterator().next().getValue()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_80 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 8)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_8 $$ RMApp rmApp = rm.submitApp(1024)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_37 $$ allocator.schedule()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_11 $$ amNodeManager.nodeHeartbeat(true)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_53 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1)[ FD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_63 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_3 $$ LOG.info("Running testReportedAppProgress")[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_50 $$ Assert.assertEquals(0.05f, job.getProgress(), 0.001f)[ CD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)-->Line_53 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_42 $$ rmDispatcher.await()[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_80 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 8)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_40 $$ rmDispatcher.await()[ FD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)-->Line_66 $$ amNodeManager.nodeHeartbeat(true)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_52 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_36 $$ amDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_51 $$ Assert.assertEquals(0.05f, rmApp.getProgress(), 0.001f)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_77 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_59 $$ allocator.schedule()[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_24 $$ Assert.assertEquals(0.0, rmApp.getProgress(), 0.0)[ CD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_29 $$ mrApp.waitForInternalState((JobImpl) job, JobStateInternal.RUNNING)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_63 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_79 $$ Assert.assertEquals(0.59f, rmApp.getProgress(), 0.001f)[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_63 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2)[ FD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_57 $$ Assert.assertEquals(0.095f, rmApp.getProgress(), 0.001f)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) -->Line_75 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 2)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_57 $$ Assert.assertEquals(0.095f, rmApp.getProgress(), 0.001f)[ CD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 21504)-->Line_80 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 8)[ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_55 $$ rmDispatcher.await()[ CD ]
Line_13 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()-->Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 10, false, this.getClass().getName(), true, 1) [ FD ]
Line_2 $$ public void testReportedAppProgress() throws Exception -->Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()[ CD ]
