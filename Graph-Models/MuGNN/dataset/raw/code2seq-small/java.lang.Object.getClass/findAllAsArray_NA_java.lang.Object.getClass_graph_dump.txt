Line_2 $$ public static <T> T[] findAllAsArray(@NotNull T[] collection, @NotNull Condition<? super T> instanceOf) -->Line_4 $$ T[] array = (T[]) Array.newInstance(collection.getClass().getComponentType(), list.size())[ FD ]
Line_3 $$ List<T> list = findAll(collection, instanceOf)-->Line_5 $$ return list.toArray(array)[ FD ]
Line_2 $$ public static <T> T[] findAllAsArray(@NotNull T[] collection, @NotNull Condition<? super T> instanceOf) -->Line_4 $$ T[] array = (T[]) Array.newInstance(collection.getClass().getComponentType(), list.size())[ CD ]
Line_2 $$ public static <T> T[] findAllAsArray(@NotNull T[] collection, @NotNull Condition<? super T> instanceOf) -->Line_3 $$ List<T> list = findAll(collection, instanceOf)[ CD ]
Line_4 $$ T[] array = (T[]) Array.newInstance(collection.getClass().getComponentType(), list.size())-->Line_5 $$ return list.toArray(array)[ FD ]
Line_3 $$ List<T> list = findAll(collection, instanceOf)-->Line_4 $$ T[] array = (T[]) Array.newInstance(collection.getClass().getComponentType(), list.size())[ FD ]
Line_2 $$ public static <T> T[] findAllAsArray(@NotNull T[] collection, @NotNull Condition<? super T> instanceOf) -->Line_3 $$ List<T> list = findAll(collection, instanceOf)[ FD ]
Line_2 $$ public static <T> T[] findAllAsArray(@NotNull T[] collection, @NotNull Condition<? super T> instanceOf) -->Line_5 $$ return list.toArray(array)[ CD ]
