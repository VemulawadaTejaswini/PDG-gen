Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_13 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_LONG + "size"), new Text(String.valueOf(totalSize)))[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_15 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_FLOAT + "rate"), new Text(String.valueOf(ioRateMbSec * 1000)))[ FD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_5 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_STRING + "badBlocks"), new Text((String) corruptedBlock))[ FD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_14 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_LONG + "time"), new Text(String.valueOf(execTime)))[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_11 $$ LOG.info("Exec time = " + execTime)[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_3 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_LONG + "blocks"), new Text(String.valueOf(1)))[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_15 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_FLOAT + "rate"), new Text(String.valueOf(ioRateMbSec * 1000)))[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_13 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_LONG + "size"), new Text(String.valueOf(totalSize)))[ FD ]
Line_8 $$ long totalSize = ((Long) corruptedBlock).longValue()-->Line_13 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_LONG + "size"), new Text(String.valueOf(totalSize)))[ FD ]
Line_4 $$ if (corruptedBlock.getClass().getName().endsWith("String")) -->Line_5 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_STRING + "badBlocks"), new Text((String) corruptedBlock))[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_12 $$ LOG.info("IO rate = " + ioRateMbSec)[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_3 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_LONG + "blocks"), new Text(String.valueOf(1)))[ FD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_8 $$ long totalSize = ((Long) corruptedBlock).longValue()[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_9 $$ float ioRateMbSec = (float) totalSize * 1000 / (execTime * 0x100000)[ CD ]
Line_4 $$ if (corruptedBlock.getClass().getName().endsWith("String")) -->Line_6 $$ return[ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_4 $$ if (corruptedBlock.getClass().getName().endsWith("String")) [ CD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_14 $$ output.collect(new Text(AccumulatingReducer.VALUE_TYPE_LONG + "time"), new Text(String.valueOf(execTime)))[ FD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_4 $$ if (corruptedBlock.getClass().getName().endsWith("String")) [ FD ]
Line_2 $$ void collectStats(OutputCollector<Text, Text> output, String name, long execTime, Object corruptedBlock) throws IOException -->Line_10 $$ LOG.info("Number of bytes processed = " + totalSize)[ CD ]
