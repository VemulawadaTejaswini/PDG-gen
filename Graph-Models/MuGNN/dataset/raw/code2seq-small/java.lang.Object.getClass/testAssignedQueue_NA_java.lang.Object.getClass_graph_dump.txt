Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_11 $$ HistoryContext context = new JobHistory()[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_13 $$ ((JobHistory) context).start()[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_17 $$ ((JobHistory) context).stop()[ CD ]
Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_7 $$ JobId jobId = job.getID()[ FD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_10 $$ app.waitForState(Service.STATE.STOPPED)[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_18 $$ Assert.assertEquals(((JobHistory) context).getServiceState(), Service.STATE.STOPPED)[ CD ]
Line_11 $$ HistoryContext context = new JobHistory()-->Line_16 $$ Job parsedJob = context.getJob(jobId)[ FD ]
Line_7 $$ JobId jobId = job.getID()-->Line_16 $$ Job parsedJob = context.getJob(jobId)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ ((JobHistory) context).init(conf)[ FD ]
Line_11 $$ HistoryContext context = new JobHistory()-->Line_14 $$ Assert.assertTrue(context.getStartTime() > 0)[ FD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_15 $$ Assert.assertEquals(((JobHistory) context).getServiceState(), Service.STATE.STARTED)[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_12 $$ ((JobHistory) context).init(conf)[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_19 $$ Assert.assertEquals("QueueName not correct", "assignedQueue", parsedJob.getQueueName())[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true, "assignedQueue")[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true, "assignedQueue")-->Line_5 $$ app.submit(conf)[ FD ]
Line_16 $$ Job parsedJob = context.getJob(jobId)-->Line_19 $$ Assert.assertEquals("QueueName not correct", "assignedQueue", parsedJob.getQueueName())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true, "assignedQueue")-->Line_10 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ app.submit(conf)[ FD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_5 $$ app.submit(conf)[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_16 $$ Job parsedJob = context.getJob(jobId)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true, "assignedQueue")-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_14 $$ Assert.assertTrue(context.getStartTime() > 0)[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_8 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ CD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ CD ]
Line_7 $$ JobId jobId = job.getID()-->Line_8 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ FD ]
Line_2 $$ public void testAssignedQueue() throws Exception -->Line_7 $$ JobId jobId = job.getID()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true, "assignedQueue")-->Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
