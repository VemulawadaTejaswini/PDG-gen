Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_6 $$ String pkg = getPackage(resource)[ FD ]
Line_4 $$ resource = RESOURCE_PATH_SEPARATOR + resource-->Line_7 $$ String name = getRelativeName(resource)[ FD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_4 $$ resource = RESOURCE_PATH_SEPARATOR + resource[ FD ]
Line_3 $$ if (!resource.startsWith(RESOURCE_PATH_SEPARATOR)) -->Line_4 $$ resource = RESOURCE_PATH_SEPARATOR + resource[ CD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_13 $$ ormStream = this.getClass().getResourceAsStream(resource)[ FD ]
Line_7 $$ String name = getRelativeName(resource)-->Line_10 $$ FileObject fileObject = context.getProcessingEnvironment().getFiler().getResource(StandardLocation.CLASS_OUTPUT, pkg, name)[ FD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_3 $$ if (!resource.startsWith(RESOURCE_PATH_SEPARATOR)) [ FD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_8 $$ InputStream ormStream[ CD ]
Line_8 $$ InputStream ormStream-->Line_11 $$ ormStream = fileObject.openInputStream()[ FD ]
Line_10 $$ FileObject fileObject = context.getProcessingEnvironment().getFiler().getResource(StandardLocation.CLASS_OUTPUT, pkg, name)-->Line_11 $$ ormStream = fileObject.openInputStream()[ FD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_3 $$ if (!resource.startsWith(RESOURCE_PATH_SEPARATOR)) [ CD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_6 $$ String pkg = getPackage(resource)[ CD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_7 $$ String name = getRelativeName(resource)[ CD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_7 $$ String name = getRelativeName(resource)[ FD ]
Line_4 $$ resource = RESOURCE_PATH_SEPARATOR + resource-->Line_6 $$ String pkg = getPackage(resource)[ FD ]
Line_2 $$ public InputStream getInputStreamForResource(String resource) -->Line_15 $$ return ormStream[ CD ]
Line_6 $$ String pkg = getPackage(resource)-->Line_10 $$ FileObject fileObject = context.getProcessingEnvironment().getFiler().getResource(StandardLocation.CLASS_OUTPUT, pkg, name)[ FD ]
Line_4 $$ resource = RESOURCE_PATH_SEPARATOR + resource-->Line_13 $$ ormStream = this.getClass().getResourceAsStream(resource)[ FD ]
Line_8 $$ InputStream ormStream-->Line_13 $$ ormStream = this.getClass().getResourceAsStream(resource)[ FD ]
Line_11 $$ ormStream = fileObject.openInputStream()-->Line_13 $$ ormStream = this.getClass().getResourceAsStream(resource)[ FD ]
