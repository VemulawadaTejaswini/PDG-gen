Line_3 $$ ClassLoaderResourceParser classLoaderResourceParser = new ClassLoaderResourceParser()-->Line_11 $$ Assert.assertNull(classLoaderResourceParser.getURL(templateId))[ FD ]
Line_3 $$ ClassLoaderResourceParser classLoaderResourceParser = new ClassLoaderResourceParser()-->Line_9 $$ classLoaderResourceParser = new ClassLoaderResourceParser(clazz.getClassLoader())[ FD ]
Line_2 $$ public void testGetURL() -->Line_3 $$ ClassLoaderResourceParser classLoaderResourceParser = new ClassLoaderResourceParser()[ CD ]
Line_8 $$ Class<?> clazz = getClass()-->Line_9 $$ classLoaderResourceParser = new ClassLoaderResourceParser(clazz.getClassLoader())[ FD ]
Line_10 $$ String templateId = "DummyFile"-->Line_13 $$ Assert.assertNull(classLoaderResourceParser.getURL(templateId))[ FD ]
Line_2 $$ public void testGetURL() -->Line_10 $$ String templateId = "DummyFile"[ CD ]
Line_3 $$ ClassLoaderResourceParser classLoaderResourceParser = new ClassLoaderResourceParser()-->Line_5 $$ Assert.assertNull(classLoaderResourceParser.getURL(TemplateConstants.SERVLET_SEPARATOR))[ FD ]
Line_16 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ Assert.assertEquals("Loading " + templateId, logRecord.getMessage())[ FD ]
Line_3 $$ ClassLoaderResourceParser classLoaderResourceParser = new ClassLoaderResourceParser()-->Line_7 $$ Assert.assertNull(classLoaderResourceParser.getURL(TemplateConstants.THEME_LOADER_SEPARATOR))[ FD ]
Line_9 $$ classLoaderResourceParser = new ClassLoaderResourceParser(clazz.getClassLoader())-->Line_11 $$ Assert.assertNull(classLoaderResourceParser.getURL(templateId))[ FD ]
Line_2 $$ public void testGetURL() -->Line_4 $$ Assert.assertNull(classLoaderResourceParser.getURL(TemplateConstants.JOURNAL_SEPARATOR))[ CD ]
Line_3 $$ ClassLoaderResourceParser classLoaderResourceParser = new ClassLoaderResourceParser()-->Line_4 $$ Assert.assertNull(classLoaderResourceParser.getURL(TemplateConstants.JOURNAL_SEPARATOR))[ FD ]
Line_2 $$ public void testGetURL() -->Line_7 $$ Assert.assertNull(classLoaderResourceParser.getURL(TemplateConstants.THEME_LOADER_SEPARATOR))[ CD ]
Line_3 $$ ClassLoaderResourceParser classLoaderResourceParser = new ClassLoaderResourceParser()-->Line_6 $$ Assert.assertNull(classLoaderResourceParser.getURL(TemplateConstants.TEMPLATE_SEPARATOR))[ FD ]
Line_3 $$ ClassLoaderResourceParser classLoaderResourceParser = new ClassLoaderResourceParser()-->Line_13 $$ Assert.assertNull(classLoaderResourceParser.getURL(templateId))[ FD ]
Line_9 $$ classLoaderResourceParser = new ClassLoaderResourceParser(clazz.getClassLoader())-->Line_13 $$ Assert.assertNull(classLoaderResourceParser.getURL(templateId))[ FD ]
Line_2 $$ public void testGetURL() -->Line_5 $$ Assert.assertNull(classLoaderResourceParser.getURL(TemplateConstants.SERVLET_SEPARATOR))[ CD ]
Line_10 $$ String templateId = "DummyFile"-->Line_11 $$ Assert.assertNull(classLoaderResourceParser.getURL(templateId))[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_16 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_12 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(ClassLoaderResourceParser.class.getName(), Level.FINEST)) -->Line_14 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testGetURL() -->Line_11 $$ Assert.assertNull(classLoaderResourceParser.getURL(templateId))[ CD ]
Line_2 $$ public void testGetURL() -->Line_8 $$ Class<?> clazz = getClass()[ CD ]
Line_2 $$ public void testGetURL() -->Line_9 $$ classLoaderResourceParser = new ClassLoaderResourceParser(clazz.getClassLoader())[ CD ]
Line_2 $$ public void testGetURL() -->Line_6 $$ Assert.assertNull(classLoaderResourceParser.getURL(TemplateConstants.TEMPLATE_SEPARATOR))[ CD ]
