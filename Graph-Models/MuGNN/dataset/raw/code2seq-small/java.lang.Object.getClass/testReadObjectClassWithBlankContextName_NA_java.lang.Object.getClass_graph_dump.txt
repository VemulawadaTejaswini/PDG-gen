Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_6 $$ byteBuffer.put(SerializationConstants.TC_CLASS)[ CD ]
Line_3 $$ Class<?> clazz = getClass()-->Line_16 $$ Assert.assertSame(clazz, deserializer.readObject())[ FD ]
Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)-->Line_6 $$ byteBuffer.put(SerializationConstants.TC_CLASS)[ FD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_4 $$ String className = clazz.getName()[ CD ]
Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)-->Line_12 $$ byteBuffer.flip()[ FD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)[ CD ]
Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)-->Line_10 $$ byteBuffer.putInt(className.length())[ FD ]
Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)-->Line_11 $$ byteBuffer.put(className.getBytes(StringPool.UTF8))[ FD ]
Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)-->Line_9 $$ byteBuffer.put((byte) 1)[ FD ]
Line_3 $$ Class<?> clazz = getClass()-->Line_14 $$ ClassLoaderPool.register(StringPool.BLANK, clazz.getClassLoader())[ FD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_13 $$ Deserializer deserializer = new Deserializer(byteBuffer)[ CD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_12 $$ byteBuffer.flip()[ CD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_11 $$ byteBuffer.put(className.getBytes(StringPool.UTF8))[ CD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_10 $$ byteBuffer.putInt(className.length())[ CD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_7 $$ byteBuffer.put((byte) 1)[ CD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_8 $$ byteBuffer.putInt(0)[ CD ]
Line_3 $$ Class<?> clazz = getClass()-->Line_4 $$ String className = clazz.getName()[ FD ]
Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)-->Line_7 $$ byteBuffer.put((byte) 1)[ FD ]
Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)-->Line_8 $$ byteBuffer.putInt(0)[ FD ]
Line_4 $$ String className = clazz.getName()-->Line_11 $$ byteBuffer.put(className.getBytes(StringPool.UTF8))[ FD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_3 $$ Class<?> clazz = getClass()[ CD ]
Line_4 $$ String className = clazz.getName()-->Line_10 $$ byteBuffer.putInt(className.length())[ FD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_9 $$ byteBuffer.put((byte) 1)[ CD ]
Line_4 $$ String className = clazz.getName()-->Line_5 $$ ByteBuffer byteBuffer = ByteBuffer.allocate(className.length() + 11)[ FD ]
Line_2 $$ public void testReadObjectClassWithBlankContextName() throws Exception -->Line_14 $$ ClassLoaderPool.register(StringPool.BLANK, clazz.getClassLoader())[ CD ]
Line_13 $$ Deserializer deserializer = new Deserializer(byteBuffer)-->Line_16 $$ Assert.assertSame(clazz, deserializer.readObject())[ FD ]
Line_3 $$ Class<?> clazz = getClass()-->Line_18 $$ ClassLoaderPool.unregister(clazz.getClassLoader())[ FD ]
