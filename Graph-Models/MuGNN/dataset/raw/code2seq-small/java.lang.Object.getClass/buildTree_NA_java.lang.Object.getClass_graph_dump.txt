Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_9 $$ final UserObjectContainer<T> container = computeContainer.fun(userObject)[ FD ]
Line_49 $$ for (int i = packageNode.getChildCount() - 1; i >= 0; i--) -->Line_61 $$ final TreeNode childNode = pNode.getChildAt(i)[ FD ]
Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)-->Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)[ FD ]
Line_31 $$ InspectionModuleNode moduleNode = moduleNodes.get(moduleName)-->Line_37 $$ moduleNodes.put(moduleName, moduleNode)[ FD ]
Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)-->Line_13 $$ if (packageNodes == null) [ FD ]
Line_89 $$ TreeUtil.traverse(parentNode, new TreeUtil.Traverse() -->Line_101 $$ parentNode.add(node)[ FD ]
Line_46 $$ if (packageNode.getPackageName() != null) -->Line_49 $$ for (int i = packageNode.getChildCount() - 1; i >= 0; i--) [ CD ]
Line_30 $$ if (packageNode.getChildCount() > 0) -->Line_46 $$ if (packageNode.getPackageName() != null) [ CD ]
Line_73 $$ for (int e = 0; e < elementNode.getChildCount(); e++) -->Line_75 $$ if (grandChildNode instanceof ProblemDescriptionNode) [ CD ]
Line_61 $$ final TreeNode childNode = pNode.getChildAt(i)-->Line_66 $$ LOG.assertTrue(childNode instanceof RefElementNode, childNode.getClass().getName())[ FD ]
Line_19 $$ pNode = new InspectionPackageNode(packageName)-->Line_20 $$ packageNodes.put(packageName, pNode)[ FD ]
Line_18 $$ if (pNode == null) -->Line_19 $$ pNode = new InspectionPackageNode(packageName)[ CD ]
Line_14 $$ packageNodes = new HashMap<String, InspectionPackageNode>()-->Line_15 $$ module2PackageMap.put(moduleName, packageNodes)[ FD ]
Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) -->Line_62 $$ if (childNode instanceof ProblemDescriptionNode) [ CD ]
Line_25 $$ if (supportStructure) -->Line_26 $$ final HashMap<String, InspectionModuleNode> moduleNodes = new HashMap<String, InspectionModuleNode>()[ CD ]
Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)-->Line_63 $$ content.add(pNode)[ FD ]
Line_14 $$ packageNodes = new HashMap<String, InspectionPackageNode>()-->Line_42 $$ content.addAll(packageNodes.values())[ FD ]
Line_75 $$ if (grandChildNode instanceof ProblemDescriptionNode) -->Line_76 $$ hasElementNodeUnder = false[ CD ]
Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) -->Line_61 $$ final TreeNode childNode = pNode.getChildAt(i)[ CD ]
Line_72 $$ boolean hasElementNodeUnder = true-->Line_82 $$ if (!hasElementNodeUnder) [ FD ]
Line_33 $$ if (moduleName != null) -->Line_34 $$ final Module module = ModuleManager.getInstance(myProject).findModuleByName(moduleName)[ CD ]
Line_31 $$ InspectionModuleNode moduleNode = moduleNodes.get(moduleName)-->Line_50 $$ moduleNode.add((MutableTreeNode) packageNode.getChildAt(i))[ FD ]
Line_4 $$ final Map<String, Map<String, InspectionPackageNode>> module2PackageMap = new HashMap<String, Map<String, InspectionPackageNode>>()-->Line_27 $$ for (final String moduleName : module2PackageMap.keySet()) [ FD ]
Line_6 $$ for (String packageName : packageContents.keySet()) -->Line_20 $$ packageNodes.put(packageName, pNode)[ FD ]
Line_49 $$ for (int i = packageNode.getChildCount() - 1; i >= 0; i--) -->Line_50 $$ moduleNode.add((MutableTreeNode) packageNode.getChildAt(i))[ FD ]
Line_67 $$ final RefElementNode elementNode = (RefElementNode) childNode-->Line_73 $$ for (int e = 0; e < elementNode.getChildCount(); e++) [ FD ]
Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_22 $$ appendDescriptor(context, toolWrapper, container, pNode, canPackageRepeat)[ FD ]
Line_26 $$ final HashMap<String, InspectionModuleNode> moduleNodes = new HashMap<String, InspectionModuleNode>()-->Line_56 $$ content.addAll(moduleNodes.values())[ FD ]
Line_49 $$ for (int i = packageNode.getChildCount() - 1; i >= 0; i--) -->Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) [ FD ]
Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) -->Line_69 $$ if (pNode.getPackageName() != null) [ CD ]
Line_6 $$ for (String packageName : packageContents.keySet()) -->Line_7 $$ final Set<T> elements = packageContents.get(packageName)[ FD ]
Line_9 $$ final UserObjectContainer<T> container = computeContainer.fun(userObject)-->Line_22 $$ appendDescriptor(context, toolWrapper, container, pNode, canPackageRepeat)[ FD ]
Line_46 $$ if (packageNode.getPackageName() != null) -->Line_47 $$ moduleNode.add(packageNode)[ CD ]
Line_61 $$ final TreeNode childNode = pNode.getChildAt(i)-->Line_62 $$ if (childNode instanceof ProblemDescriptionNode) [ FD ]
Line_73 $$ for (int e = 0; e < elementNode.getChildCount(); e++) -->Line_74 $$ final TreeNode grandChildNode = elementNode.getChildAt(e)[ FD ]
Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)-->Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) [ FD ]
Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)-->Line_19 $$ pNode = new InspectionPackageNode(packageName)[ FD ]
Line_29 $$ for (InspectionPackageNode packageNode : packageNodes.values()) -->Line_47 $$ moduleNode.add(packageNode)[ FD ]
Line_89 $$ TreeUtil.traverse(parentNode, new TreeUtil.Traverse() -->Line_91 $$ if (node instanceof ProblemDescriptionNode) [ CD ]
Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) -->Line_104 $$ content.addAll(parentNodes)[ CD ]
Line_36 $$ moduleNode = new InspectionModuleNode(module)-->Line_37 $$ moduleNodes.put(moduleName, moduleNode)[ FD ]
Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)-->Line_18 $$ if (pNode == null) [ FD ]
Line_19 $$ pNode = new InspectionPackageNode(packageName)-->Line_69 $$ if (pNode.getPackageName() != null) [ FD ]
Line_69 $$ if (pNode.getPackageName() != null) -->Line_70 $$ parentNodes.add(elementNode)[ CD ]
Line_4 $$ final Map<String, Map<String, InspectionPackageNode>> module2PackageMap = new HashMap<String, Map<String, InspectionPackageNode>>()-->Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)[ FD ]
Line_11 $$ final String moduleName = showStructure ? container.getModule() : null-->Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)[ FD ]
Line_76 $$ hasElementNodeUnder = false-->Line_82 $$ if (!hasElementNodeUnder) [ FD ]
Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)-->Line_29 $$ for (InspectionPackageNode packageNode : packageNodes.values()) [ FD ]
Line_32 $$ if (moduleNode == null) -->Line_33 $$ if (moduleName != null) [ CD ]
Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_109 $$ return content[ CD ]
Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)-->Line_15 $$ module2PackageMap.put(moduleName, packageNodes)[ FD ]
Line_82 $$ if (!hasElementNodeUnder) -->Line_83 $$ content.add(elementNode)[ CD ]
Line_4 $$ final Map<String, Map<String, InspectionPackageNode>> module2PackageMap = new HashMap<String, Map<String, InspectionPackageNode>>()-->Line_15 $$ module2PackageMap.put(moduleName, packageNodes)[ FD ]
Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) -->Line_67 $$ final RefElementNode elementNode = (RefElementNode) childNode[ CD ]
Line_29 $$ for (InspectionPackageNode packageNode : packageNodes.values()) -->Line_30 $$ if (packageNode.getChildCount() > 0) [ FD ]
Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)-->Line_22 $$ appendDescriptor(context, toolWrapper, container, pNode, canPackageRepeat)[ FD ]
Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) -->Line_68 $$ final Set<RefElementNode> parentNodes = new LinkedHashSet<RefElementNode>()[ CD ]
Line_67 $$ final RefElementNode elementNode = (RefElementNode) childNode-->Line_74 $$ final TreeNode grandChildNode = elementNode.getChildAt(e)[ FD ]
Line_69 $$ if (pNode.getPackageName() != null) -->Line_72 $$ boolean hasElementNodeUnder = true[ CD ]
Line_26 $$ final HashMap<String, InspectionModuleNode> moduleNodes = new HashMap<String, InspectionModuleNode>()-->Line_31 $$ InspectionModuleNode moduleNode = moduleNodes.get(moduleName)[ FD ]
Line_33 $$ if (moduleName != null) -->Line_35 $$ if (module != null) [ CD ]
Line_33 $$ if (moduleName != null) -->Line_42 $$ content.addAll(packageNodes.values())[ CD ]
Line_14 $$ packageNodes = new HashMap<String, InspectionPackageNode>()-->Line_59 $$ for (InspectionPackageNode pNode : packageNodes.values()) [ FD ]
Line_69 $$ if (pNode.getPackageName() != null) -->Line_73 $$ for (int e = 0; e < elementNode.getChildCount(); e++) [ CD ]
Line_3 $$ final List<InspectionTreeNode> content = new ArrayList<InspectionTreeNode>()-->Line_104 $$ content.addAll(parentNodes)[ FD ]
Line_14 $$ packageNodes = new HashMap<String, InspectionPackageNode>()-->Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)[ FD ]
Line_89 $$ TreeUtil.traverse(parentNode, new TreeUtil.Traverse() -->Line_94 $$ return true[ CD ]
Line_9 $$ final UserObjectContainer<T> container = computeContainer.fun(userObject)-->Line_11 $$ final String moduleName = showStructure ? container.getModule() : null[ FD ]
Line_91 $$ if (node instanceof ProblemDescriptionNode) -->Line_92 $$ nodes.add((ProblemDescriptionNode) node)[ CD ]
Line_34 $$ final Module module = ModuleManager.getInstance(myProject).findModuleByName(moduleName)-->Line_35 $$ if (module != null) [ FD ]
Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)-->Line_20 $$ packageNodes.put(packageName, pNode)[ FD ]
Line_30 $$ if (packageNode.getChildCount() > 0) -->Line_32 $$ if (moduleNode == null) [ CD ]
Line_35 $$ if (module != null) -->Line_37 $$ moduleNodes.put(moduleName, moduleNode)[ CD ]
Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)-->Line_61 $$ final TreeNode childNode = pNode.getChildAt(i)[ FD ]
Line_67 $$ final RefElementNode elementNode = (RefElementNode) childNode-->Line_83 $$ content.add(elementNode)[ FD ]
Line_74 $$ final TreeNode grandChildNode = elementNode.getChildAt(e)-->Line_75 $$ if (grandChildNode instanceof ProblemDescriptionNode) [ FD ]
Line_4 $$ final Map<String, Map<String, InspectionPackageNode>> module2PackageMap = new HashMap<String, Map<String, InspectionPackageNode>>()-->Line_58 $$ for (Map<String, InspectionPackageNode> packageNodes : module2PackageMap.values()) [ FD ]
Line_29 $$ for (InspectionPackageNode packageNode : packageNodes.values()) -->Line_49 $$ for (int i = packageNode.getChildCount() - 1; i >= 0; i--) [ FD ]
Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) -->Line_61 $$ final TreeNode childNode = pNode.getChildAt(i)[ FD ]
Line_73 $$ for (int e = 0; e < elementNode.getChildCount(); e++) -->Line_80 $$ parentNodes.add((RefElementNode) grandChildNode)[ CD ]
Line_11 $$ final String moduleName = showStructure ? container.getModule() : null-->Line_33 $$ if (moduleName != null) [ FD ]
Line_49 $$ for (int i = packageNode.getChildCount() - 1; i >= 0; i--) -->Line_50 $$ moduleNode.add((MutableTreeNode) packageNode.getChildAt(i))[ CD ]
Line_26 $$ final HashMap<String, InspectionModuleNode> moduleNodes = new HashMap<String, InspectionModuleNode>()-->Line_37 $$ moduleNodes.put(moduleName, moduleNode)[ FD ]
Line_36 $$ moduleNode = new InspectionModuleNode(module)-->Line_50 $$ moduleNode.add((MutableTreeNode) packageNode.getChildAt(i))[ FD ]
Line_35 $$ if (module != null) -->Line_36 $$ moduleNode = new InspectionModuleNode(module)[ CD ]
Line_73 $$ for (int e = 0; e < elementNode.getChildCount(); e++) -->Line_74 $$ final TreeNode grandChildNode = elementNode.getChildAt(e)[ CD ]
Line_29 $$ for (InspectionPackageNode packageNode : packageNodes.values()) -->Line_46 $$ if (packageNode.getPackageName() != null) [ FD ]
Line_19 $$ pNode = new InspectionPackageNode(packageName)-->Line_63 $$ content.add(pNode)[ FD ]
Line_13 $$ if (packageNodes == null) -->Line_14 $$ packageNodes = new HashMap<String, InspectionPackageNode>()[ CD ]
Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)-->Line_69 $$ if (pNode.getPackageName() != null) [ FD ]
Line_3 $$ final List<InspectionTreeNode> content = new ArrayList<InspectionTreeNode>()-->Line_42 $$ content.addAll(packageNodes.values())[ FD ]
Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_6 $$ for (String packageName : packageContents.keySet()) [ FD ]
Line_9 $$ final UserObjectContainer<T> container = computeContainer.fun(userObject)-->Line_10 $$ supportStructure &= container.supportStructure()[ FD ]
Line_11 $$ final String moduleName = showStructure ? container.getModule() : null-->Line_37 $$ moduleNodes.put(moduleName, moduleNode)[ FD ]
Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)-->Line_20 $$ packageNodes.put(packageName, pNode)[ FD ]
Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) -->Line_66 $$ LOG.assertTrue(childNode instanceof RefElementNode, childNode.getClass().getName())[ CD ]
Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)-->Line_14 $$ packageNodes = new HashMap<String, InspectionPackageNode>()[ FD ]
Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)-->Line_42 $$ content.addAll(packageNodes.values())[ FD ]
Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_7 $$ final Set<T> elements = packageContents.get(packageName)[ FD ]
Line_31 $$ InspectionModuleNode moduleNode = moduleNodes.get(moduleName)-->Line_36 $$ moduleNode = new InspectionModuleNode(module)[ FD ]
Line_12 $$ Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)-->Line_59 $$ for (InspectionPackageNode pNode : packageNodes.values()) [ FD ]
Line_62 $$ if (childNode instanceof ProblemDescriptionNode) -->Line_63 $$ content.add(pNode)[ CD ]
Line_19 $$ pNode = new InspectionPackageNode(packageName)-->Line_60 $$ for (int i = 0; i < pNode.getChildCount(); i++) [ FD ]
Line_8 $$ for (T userObject : elements) -->Line_9 $$ final UserObjectContainer<T> container = computeContainer.fun(userObject)[ FD ]
Line_11 $$ final String moduleName = showStructure ? container.getModule() : null-->Line_34 $$ final Module module = ModuleManager.getInstance(myProject).findModuleByName(moduleName)[ FD ]
Line_11 $$ final String moduleName = showStructure ? container.getModule() : null-->Line_28 $$ final Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)[ FD ]
Line_19 $$ pNode = new InspectionPackageNode(packageName)-->Line_61 $$ final TreeNode childNode = pNode.getChildAt(i)[ FD ]
Line_18 $$ if (pNode == null) -->Line_20 $$ packageNodes.put(packageName, pNode)[ CD ]
Line_14 $$ packageNodes = new HashMap<String, InspectionPackageNode>()-->Line_20 $$ packageNodes.put(packageName, pNode)[ FD ]
Line_36 $$ moduleNode = new InspectionModuleNode(module)-->Line_47 $$ moduleNode.add(packageNode)[ FD ]
Line_11 $$ final String moduleName = showStructure ? container.getModule() : null-->Line_31 $$ InspectionModuleNode moduleNode = moduleNodes.get(moduleName)[ FD ]
Line_25 $$ if (supportStructure) -->Line_56 $$ content.addAll(moduleNodes.values())[ CD ]
Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_3 $$ final List<InspectionTreeNode> content = new ArrayList<InspectionTreeNode>()[ CD ]
Line_67 $$ final RefElementNode elementNode = (RefElementNode) childNode-->Line_70 $$ parentNodes.add(elementNode)[ FD ]
Line_31 $$ InspectionModuleNode moduleNode = moduleNodes.get(moduleName)-->Line_47 $$ moduleNode.add(packageNode)[ FD ]
Line_72 $$ boolean hasElementNodeUnder = true-->Line_76 $$ hasElementNodeUnder = false[ FD ]
Line_11 $$ final String moduleName = showStructure ? container.getModule() : null-->Line_15 $$ module2PackageMap.put(moduleName, packageNodes)[ FD ]
Line_3 $$ final List<InspectionTreeNode> content = new ArrayList<InspectionTreeNode>()-->Line_63 $$ content.add(pNode)[ FD ]
Line_14 $$ packageNodes = new HashMap<String, InspectionPackageNode>()-->Line_29 $$ for (InspectionPackageNode packageNode : packageNodes.values()) [ FD ]
Line_30 $$ if (packageNode.getChildCount() > 0) -->Line_31 $$ InspectionModuleNode moduleNode = moduleNodes.get(moduleName)[ CD ]
Line_5 $$ boolean supportStructure = showStructure-->Line_10 $$ supportStructure &= container.supportStructure()[ FD ]
Line_89 $$ TreeUtil.traverse(parentNode, new TreeUtil.Traverse() -->Line_91 $$ if (node instanceof ProblemDescriptionNode) [ FD ]
Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_5 $$ boolean supportStructure = showStructure[ CD ]
Line_6 $$ for (String packageName : packageContents.keySet()) -->Line_17 $$ InspectionPackageNode pNode = packageNodes.get(packageName)[ FD ]
Line_3 $$ final List<InspectionTreeNode> content = new ArrayList<InspectionTreeNode>()-->Line_56 $$ content.addAll(moduleNodes.values())[ FD ]
Line_29 $$ for (InspectionPackageNode packageNode : packageNodes.values()) -->Line_50 $$ moduleNode.add((MutableTreeNode) packageNode.getChildAt(i))[ FD ]
Line_68 $$ final Set<RefElementNode> parentNodes = new LinkedHashSet<RefElementNode>()-->Line_80 $$ parentNodes.add((RefElementNode) grandChildNode)[ FD ]
Line_31 $$ InspectionModuleNode moduleNode = moduleNodes.get(moduleName)-->Line_32 $$ if (moduleNode == null) [ FD ]
Line_13 $$ if (packageNodes == null) -->Line_15 $$ module2PackageMap.put(moduleName, packageNodes)[ CD ]
Line_4 $$ final Map<String, Map<String, InspectionPackageNode>> module2PackageMap = new HashMap<String, Map<String, InspectionPackageNode>>()-->Line_28 $$ final Map<String, InspectionPackageNode> packageNodes = module2PackageMap.get(moduleName)[ FD ]
Line_68 $$ final Set<RefElementNode> parentNodes = new LinkedHashSet<RefElementNode>()-->Line_104 $$ content.addAll(parentNodes)[ FD ]
Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_4 $$ final Map<String, Map<String, InspectionPackageNode>> module2PackageMap = new HashMap<String, Map<String, InspectionPackageNode>>()[ CD ]
Line_69 $$ if (pNode.getPackageName() != null) -->Line_82 $$ if (!hasElementNodeUnder) [ CD ]
Line_73 $$ for (int e = 0; e < elementNode.getChildCount(); e++) -->Line_79 $$ LOG.assertTrue(grandChildNode instanceof RefElementNode)[ CD ]
Line_19 $$ pNode = new InspectionPackageNode(packageName)-->Line_22 $$ appendDescriptor(context, toolWrapper, container, pNode, canPackageRepeat)[ FD ]
Line_2 $$ protected <T> List<InspectionTreeNode> buildTree(@NotNull GlobalInspectionContextImpl context, @NotNull Map<String, Set<T>> packageContents, final boolean canPackageRepeat, @NotNull InspectionToolWrapper toolWrapper, @NotNull Function<T, UserObjectContainer<T>> computeContainer, final boolean showStructure) -->Line_25 $$ if (supportStructure) [ CD ]
Line_3 $$ final List<InspectionTreeNode> content = new ArrayList<InspectionTreeNode>()-->Line_83 $$ content.add(elementNode)[ FD ]
Line_68 $$ final Set<RefElementNode> parentNodes = new LinkedHashSet<RefElementNode>()-->Line_70 $$ parentNodes.add(elementNode)[ FD ]
