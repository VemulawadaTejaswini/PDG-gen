Line_2 $$ private Object instantiateUserDefinedStrategy(String className, Class<?> strategyType, ClassLoader classLoader) -->Line_3 $$ Object result[ CD ]
Line_2 $$ private Object instantiateUserDefinedStrategy(String className, Class<?> strategyType, ClassLoader classLoader) -->Line_7 $$ throw new IllegalArgumentException("Class [" + className + "] for strategy [" + strategyType.getName() + "] not found", ex)[ FD ]
Line_2 $$ private Object instantiateUserDefinedStrategy(String className, Class<?> strategyType, ClassLoader classLoader) -->Line_11 $$ if (!strategyType.isAssignableFrom(result.getClass())) [ CD ]
Line_5 $$ result = classLoader.loadClass(className).newInstance()-->Line_11 $$ if (!strategyType.isAssignableFrom(result.getClass())) [ FD ]
Line_2 $$ private Object instantiateUserDefinedStrategy(String className, Class<?> strategyType, ClassLoader classLoader) -->Line_5 $$ result = classLoader.loadClass(className).newInstance()[ FD ]
Line_3 $$ Object result-->Line_5 $$ result = classLoader.loadClass(className).newInstance()[ FD ]
Line_2 $$ private Object instantiateUserDefinedStrategy(String className, Class<?> strategyType, ClassLoader classLoader) -->Line_9 $$ throw new IllegalArgumentException("Unable to instantiate class [" + className + "] for strategy [" + strategyType.getName() + "]: a zero-argument constructor is required", ex)[ FD ]
Line_2 $$ private Object instantiateUserDefinedStrategy(String className, Class<?> strategyType, ClassLoader classLoader) -->Line_11 $$ if (!strategyType.isAssignableFrom(result.getClass())) [ FD ]
Line_3 $$ Object result-->Line_11 $$ if (!strategyType.isAssignableFrom(result.getClass())) [ FD ]
Line_2 $$ private Object instantiateUserDefinedStrategy(String className, Class<?> strategyType, ClassLoader classLoader) -->Line_14 $$ return result[ CD ]
