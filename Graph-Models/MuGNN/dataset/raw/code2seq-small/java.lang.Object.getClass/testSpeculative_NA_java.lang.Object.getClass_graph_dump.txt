Line_76 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_77 $$ Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId().getAttemptId())[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_40 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_72 $$ Assert.assertEquals("Task Start time not correct", task1StartTime, mapTask1.getReport().getStartTime())[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_39 $$ Assert.assertEquals("Reduce Task state not correct", TaskState.RUNNING, reduceTask.getReport().getTaskState())[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_42 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_70 $$ app.verifyCompleted()[ CD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_37 $$ app.waitForState(task1Attempt2, TaskAttemptState.RUNNING)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_49 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ FD ]
Line_75 $$ int attemptNum = 1-->Line_77 $$ Assert.assertEquals(attemptNum++, amInfo.getAppAttemptId().getAttemptId())[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_54 $$ job = app.submit(conf)-->Line_74 $$ Assert.assertEquals(2, job.getAMInfos().size())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_6 $$ Configuration conf = new Configuration()[ CD ]
Line_57 $$ it = job.getTasks().values().iterator()-->Line_58 $$ mapTask1 = it.next()[ FD ]
Line_48 $$ conf = new Configuration()-->Line_50 $$ conf.setBoolean("mapred.mapper.new-api", true)[ FD ]
Line_43 $$ long task1StartTime = mapTask1.getReport().getStartTime()-->Line_72 $$ Assert.assertEquals("Task Start time not correct", task1StartTime, mapTask1.getReport().getStartTime())[ FD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_58 $$ mapTask1 = it.next()[ FD ]
Line_59 $$ mapTask2 = it.next()-->Line_63 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_18 $$ Task reduceTask = it.next()-->Line_68 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_54 $$ job = app.submit(conf)[ FD ]
Line_54 $$ job = app.submit(conf)-->Line_84 $$ long am2StartTimeReal = job.getAMInfos().get(1).getStartTime()[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_74 $$ Assert.assertEquals(2, job.getAMInfos().size())[ FD ]
Line_29 $$ TaskAttempt task1Attempt2 = t1it.next()-->Line_31 $$ ContainerId t1a2contId = task1Attempt2.getAssignedContainerID()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_29 $$ TaskAttempt task1Attempt2 = t1it.next()[ CD ]
Line_28 $$ TaskAttempt task1Attempt1 = t1it.next()-->Line_36 $$ app.waitForState(task1Attempt1, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_43 $$ long task1StartTime = mapTask1.getReport().getStartTime()[ CD ]
Line_59 $$ mapTask2 = it.next()-->Line_62 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_69 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_53 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_54 $$ job = app.submit(conf)-->Line_71 $$ Assert.assertEquals("Job Start time not correct", jobStartTime, job.getReport().getStartTime())[ FD ]
Line_27 $$ Iterator<TaskAttempt> t1it = mapTask1.getAttempts().values().iterator()-->Line_28 $$ TaskAttempt task1Attempt1 = t1it.next()[ FD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_69 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setBoolean("mapred.mapper.new-api", true)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_64 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ CD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_67 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_18 $$ Task reduceTask = it.next()-->Line_60 $$ reduceTask = it.next()[ FD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_73 $$ Assert.assertEquals("Task Finish time not correct", task1FinishTime, mapTask1.getReport().getFinishTime())[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_20 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_36 $$ app.waitForState(task1Attempt1, TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_16 $$ Task mapTask1 = it.next()[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_33 $$ LOG.info(task1Attempt1.getID().toString())[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_10 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ CD ]
Line_18 $$ Task reduceTask = it.next()-->Line_39 $$ Assert.assertEquals("Reduce Task state not correct", TaskState.RUNNING, reduceTask.getReport().getTaskState())[ FD ]
Line_13 $$ long jobStartTime = job.getReport().getStartTime()-->Line_71 $$ Assert.assertEquals("Job Start time not correct", jobStartTime, job.getReport().getStartTime())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_18 $$ Task reduceTask = it.next()[ CD ]
Line_11 $$ Job job = app.submit(conf)-->Line_55 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_17 $$ Task mapTask2 = it.next()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_85 $$ Assert.assertTrue(am1StartTimeReal >= am1StartTimeEst && am1StartTimeReal <= am2StartTimeEst)[ CD ]
Line_30 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_38 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_57 $$ it = job.getTasks().values().iterator()[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_73 $$ Assert.assertEquals("Task Finish time not correct", task1FinishTime, mapTask1.getReport().getFinishTime())[ CD ]
Line_17 $$ Task mapTask2 = it.next()-->Line_30 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_28 $$ TaskAttempt task1Attempt1 = t1it.next()[ CD ]
Line_54 $$ job = app.submit(conf)-->Line_57 $$ it = job.getTasks().values().iterator()[ FD ]
Line_57 $$ it = job.getTasks().values().iterator()-->Line_60 $$ reduceTask = it.next()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_50 $$ conf.setBoolean("mapred.mapper.new-api", true)[ CD ]
Line_11 $$ Job job = app.submit(conf)-->Line_84 $$ long am2StartTimeReal = job.getAMInfos().get(1).getStartTime()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_34 $$ LOG.info(task1Attempt2.getID().toString())[ CD ]
Line_54 $$ job = app.submit(conf)-->Line_76 $$ for (AMInfo amInfo : job.getAMInfos()) [ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_22 $$ int timeOut = 0[ CD ]
Line_28 $$ TaskAttempt task1Attempt1 = t1it.next()-->Line_40 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_76 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_80 $$ Assert.assertEquals(MRApp.NM_PORT, amInfo.getNodeManagerPort())[ FD ]
Line_17 $$ Task mapTask2 = it.next()-->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_31 $$ ContainerId t1a2contId = task1Attempt2.getAssignedContainerID()[ CD ]
Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_60 $$ reduceTask = it.next()[ FD ]
Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_58 $$ mapTask1 = it.next()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_27 $$ Iterator<TaskAttempt> t1it = mapTask1.getAttempts().values().iterator()[ CD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_44 $$ long task1FinishTime = mapTask1.getReport().getFinishTime()[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_64 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_17 $$ Task mapTask2 = it.next()-->Line_59 $$ mapTask2 = it.next()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_71 $$ Assert.assertEquals("Job Start time not correct", jobStartTime, job.getReport().getStartTime())[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)[ CD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_61 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_17 $$ Task mapTask2 = it.next()-->Line_20 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_29 $$ TaskAttempt task1Attempt2 = t1it.next()-->Line_35 $$ app.getContext().getEventHandler().handle(new TaskAttemptContainerLaunchedEvent(task1Attempt2.getID(), runCount))[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_69 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_38 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ CD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_12 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_14 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_51 $$ conf.setBoolean("mapred.reducer.new-api", true)[ FD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_42 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_42 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_51 $$ conf.setBoolean("mapred.reducer.new-api", true)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_11 $$ Job job = app.submit(conf)[ CD ]
Line_3 $$ int runCount = 0-->Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_52 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ CD ]
Line_18 $$ Task reduceTask = it.next()-->Line_67 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_31 $$ ContainerId t1a2contId = task1Attempt2.getAssignedContainerID()-->Line_32 $$ LOG.info(t1a2contId.toString())[ FD ]
Line_54 $$ job = app.submit(conf)-->Line_69 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_21 $$ app.getContext().getEventHandler().handle(new TaskEvent(mapTask1.getID(), TaskEventType.T_ADD_SPEC_ATTEMPT))[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_75 $$ int attemptNum = 1[ CD ]
Line_48 $$ conf = new Configuration()-->Line_54 $$ job = app.submit(conf)[ FD ]
Line_60 $$ reduceTask = it.next()-->Line_68 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_30 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_64 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_17 $$ Task mapTask2 = it.next()[ CD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_54 $$ job = app.submit(conf)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_59 $$ mapTask2 = it.next()[ FD ]
Line_58 $$ mapTask1 = it.next()-->Line_72 $$ Assert.assertEquals("Task Start time not correct", task1StartTime, mapTask1.getReport().getStartTime())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_8 $$ conf.setBoolean("mapred.reducer.new-api", true)[ CD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_36 $$ app.waitForState(task1Attempt1, TaskAttemptState.RUNNING)[ FD ]
Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_57 $$ it = job.getTasks().values().iterator()[ FD ]
Line_54 $$ job = app.submit(conf)-->Line_83 $$ long am1StartTimeReal = job.getAMInfos().get(0).getStartTime()[ FD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_62 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_30 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_63 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_38 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_19 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ CD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_64 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_35 $$ app.getContext().getEventHandler().handle(new TaskAttemptContainerLaunchedEvent(task1Attempt2.getID(), runCount))[ CD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_68 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_52 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_48 $$ conf = new Configuration()[ CD ]
Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_16 $$ Task mapTask1 = it.next()[ FD ]
Line_29 $$ TaskAttempt task1Attempt2 = t1it.next()-->Line_37 $$ app.waitForState(task1Attempt2, TaskAttemptState.RUNNING)[ FD ]
Line_17 $$ Task mapTask2 = it.next()-->Line_63 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_3 $$ int runCount = 0-->Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_9 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_74 $$ Assert.assertEquals(2, job.getAMInfos().size())[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_53 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_54 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_20 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_67 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ CD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_23 $$ while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) [ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_35 $$ app.getContext().getEventHandler().handle(new TaskAttemptContainerLaunchedEvent(task1Attempt2.getID(), runCount))[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_71 $$ Assert.assertEquals("Job Start time not correct", jobStartTime, job.getReport().getStartTime())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_30 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()[ CD ]
Line_28 $$ TaskAttempt task1Attempt1 = t1it.next()-->Line_33 $$ LOG.info(task1Attempt1.getID().toString())[ FD ]
Line_59 $$ mapTask2 = it.next()-->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_17 $$ Task mapTask2 = it.next()-->Line_62 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_41 $$ app.waitForState(task1Attempt1, TaskAttemptState.SUCCEEDED)[ FD ]
Line_54 $$ job = app.submit(conf)-->Line_55 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_48 $$ conf = new Configuration()-->Line_53 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_61 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_61 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_11 $$ Job job = app.submit(conf)[ FD ]
Line_63 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_64 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_76 $$ for (AMInfo amInfo : job.getAMInfos()) [ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_86 $$ Assert.assertTrue(am2StartTimeReal >= am2StartTimeEst && am2StartTimeReal <= System.currentTimeMillis())[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_32 $$ LOG.info(t1a2contId.toString())[ CD ]
Line_57 $$ it = job.getTasks().values().iterator()-->Line_59 $$ mapTask2 = it.next()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_83 $$ long am1StartTimeReal = job.getAMInfos().get(0).getStartTime()[ CD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_43 $$ long task1StartTime = mapTask1.getReport().getStartTime()[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_45 $$ app.stop()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_59 $$ mapTask2 = it.next()[ CD ]
Line_15 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_18 $$ Task reduceTask = it.next()[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_21 $$ app.getContext().getEventHandler().handle(new TaskEvent(mapTask1.getID(), TaskEventType.T_ADD_SPEC_ATTEMPT))[ CD ]
Line_23 $$ while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) -->Line_24 $$ Thread.sleep(1000)[ CD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_70 $$ app.verifyCompleted()[ FD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_27 $$ Iterator<TaskAttempt> t1it = mapTask1.getAttempts().values().iterator()[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_69 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_19 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_28 $$ TaskAttempt task1Attempt1 = t1it.next()-->Line_41 $$ app.waitForState(task1Attempt1, TaskAttemptState.SUCCEEDED)[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_13 $$ long jobStartTime = job.getReport().getStartTime()[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_56 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
Line_44 $$ long task1FinishTime = mapTask1.getReport().getFinishTime()-->Line_73 $$ Assert.assertEquals("Task Finish time not correct", task1FinishTime, mapTask1.getReport().getFinishTime())[ FD ]
Line_29 $$ TaskAttempt task1Attempt2 = t1it.next()-->Line_34 $$ LOG.info(task1Attempt2.getID().toString())[ FD ]
Line_76 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_78 $$ Assert.assertEquals(amInfo.getAppAttemptId(), amInfo.getContainerId().getApplicationAttemptId())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_12 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_23 $$ while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) [ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_9 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_27 $$ Iterator<TaskAttempt> t1it = mapTask1.getAttempts().values().iterator()-->Line_29 $$ TaskAttempt task1Attempt2 = t1it.next()[ FD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_72 $$ Assert.assertEquals("Task Start time not correct", task1StartTime, mapTask1.getReport().getStartTime())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_84 $$ long am2StartTimeReal = job.getAMInfos().get(1).getStartTime()[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_45 $$ app.stop()[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_48 $$ conf = new Configuration()[ FD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_61 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.setBoolean("mapred.reducer.new-api", true)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_68 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_60 $$ reduceTask = it.next()[ CD ]
Line_22 $$ int timeOut = 0-->Line_23 $$ while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) [ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_50 $$ conf.setBoolean("mapred.mapper.new-api", true)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_55 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ CD ]
Line_76 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_79 $$ Assert.assertEquals(MRApp.NM_HOST, amInfo.getNodeManagerHost())[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_83 $$ long am1StartTimeReal = job.getAMInfos().get(0).getStartTime()[ FD ]
Line_17 $$ Task mapTask2 = it.next()-->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_19 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_55 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_40 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt1.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_54 $$ job = app.submit(conf)[ CD ]
Line_11 $$ Job job = app.submit(conf)-->Line_57 $$ it = job.getTasks().values().iterator()[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_62 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_11 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_7 $$ conf.setBoolean("mapred.mapper.new-api", true)[ CD ]
Line_48 $$ conf = new Configuration()-->Line_52 $$ conf.set(FileOutputFormat.OUTDIR, outputDir.toString())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_62 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_49 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ CD ]
Line_58 $$ mapTask1 = it.next()-->Line_61 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_4 $$ long am1StartTimeEst = System.currentTimeMillis()[ CD ]
Line_47 $$ app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), false, ++runCount)-->Line_55 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_11 $$ Job job = app.submit(conf)-->Line_12 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_70 $$ app.verifyCompleted()[ FD ]
Line_16 $$ Task mapTask1 = it.next()-->Line_21 $$ app.getContext().getEventHandler().handle(new TaskEvent(mapTask1.getID(), TaskEventType.T_ADD_SPEC_ATTEMPT))[ FD ]
Line_23 $$ while (mapTask1.getAttempts().size() != 2 && timeOut++ < 10) -->Line_25 $$ LOG.info("Waiting for next attempt to start")[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_3 $$ int runCount = 0[ CD ]
Line_48 $$ conf = new Configuration()-->Line_51 $$ conf.setBoolean("mapred.reducer.new-api", true)[ FD ]
Line_59 $$ mapTask2 = it.next()-->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_58 $$ mapTask1 = it.next()[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_63 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()[ CD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_68 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_5 $$ MRApp app = new MRAppWithHistory(2, 1, false, this.getClass().getName(), true, ++runCount)-->Line_67 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_60 $$ reduceTask = it.next()-->Line_67 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_58 $$ mapTask1 = it.next()-->Line_73 $$ Assert.assertEquals("Task Finish time not correct", task1FinishTime, mapTask1.getReport().getFinishTime())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_13 $$ long jobStartTime = job.getReport().getStartTime()[ CD ]
Line_6 $$ Configuration conf = new Configuration()-->Line_54 $$ job = app.submit(conf)[ FD ]
Line_76 $$ for (AMInfo amInfo : job.getAMInfos()) -->Line_81 $$ Assert.assertEquals(MRApp.NM_HTTP_PORT, amInfo.getNodeManagerHttpPort())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_44 $$ long task1FinishTime = mapTask1.getReport().getFinishTime()[ CD ]
Line_54 $$ job = app.submit(conf)-->Line_56 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_14 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_56 $$ Assert.assertEquals("No of tasks not correct", 3, job.getTasks().size())[ CD ]
Line_48 $$ conf = new Configuration()-->Line_49 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ FD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_41 $$ app.waitForState(task1Attempt1, TaskAttemptState.SUCCEEDED)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_37 $$ app.waitForState(task1Attempt2, TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testSpeculative() throws Exception -->Line_46 $$ long am2StartTimeEst = System.currentTimeMillis()[ CD ]
