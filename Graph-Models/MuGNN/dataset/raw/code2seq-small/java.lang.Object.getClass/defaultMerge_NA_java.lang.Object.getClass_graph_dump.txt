Line_10 $$ TestBean secondLevel = bf.getBean("secondLevelNestedTestBean", TestBean.class)-->Line_11 $$ assertThat((Iterable<String>) secondLevel.getSomeList(), hasItems("charlie", "delta", "echo", "foxtrot", "golf", "hotel"))[ FD ]
Line_2 $$ public void defaultMerge() -->Line_10 $$ TestBean secondLevel = bf.getBean("secondLevelNestedTestBean", TestBean.class)[ CD ]
Line_2 $$ public void defaultMerge() -->Line_6 $$ assertThat((Iterable<String>) topLevel.getSomeList(), hasItems("charlie", "delta"))[ CD ]
Line_5 $$ TestBean topLevel = bf.getBean("topLevelConcreteTestBean", TestBean.class)-->Line_7 $$ assertThat((Iterable<String>) topLevel.getSomeList(), not(hasItems("alpha", "bravo")))[ FD ]
Line_2 $$ public void defaultMerge() -->Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()[ CD ]
Line_8 $$ TestBean firstLevel = bf.getBean("firstLevelNestedTestBean", TestBean.class)-->Line_9 $$ assertThat((Iterable<String>) firstLevel.getSomeList(), hasItems("charlie", "delta", "echo", "foxtrot"))[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_10 $$ TestBean secondLevel = bf.getBean("secondLevelNestedTestBean", TestBean.class)[ FD ]
Line_2 $$ public void defaultMerge() -->Line_11 $$ assertThat((Iterable<String>) secondLevel.getSomeList(), hasItems("charlie", "delta", "echo", "foxtrot", "golf", "hotel"))[ CD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_8 $$ TestBean firstLevel = bf.getBean("firstLevelNestedTestBean", TestBean.class)[ FD ]
Line_3 $$ DefaultListableBeanFactory bf = new DefaultListableBeanFactory()-->Line_5 $$ TestBean topLevel = bf.getBean("topLevelConcreteTestBean", TestBean.class)[ FD ]
Line_5 $$ TestBean topLevel = bf.getBean("topLevelConcreteTestBean", TestBean.class)-->Line_6 $$ assertThat((Iterable<String>) topLevel.getSomeList(), hasItems("charlie", "delta"))[ FD ]
Line_2 $$ public void defaultMerge() -->Line_9 $$ assertThat((Iterable<String>) firstLevel.getSomeList(), hasItems("charlie", "delta", "echo", "foxtrot"))[ CD ]
Line_2 $$ public void defaultMerge() -->Line_4 $$ new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource("NestedBeansElementAttributeRecursionTests-merge-context.xml", this.getClass()))[ CD ]
Line_2 $$ public void defaultMerge() -->Line_8 $$ TestBean firstLevel = bf.getBean("firstLevelNestedTestBean", TestBean.class)[ CD ]
Line_2 $$ public void defaultMerge() -->Line_7 $$ assertThat((Iterable<String>) topLevel.getSomeList(), not(hasItems("alpha", "bravo")))[ CD ]
Line_2 $$ public void defaultMerge() -->Line_5 $$ TestBean topLevel = bf.getBean("topLevelConcreteTestBean", TestBean.class)[ CD ]
