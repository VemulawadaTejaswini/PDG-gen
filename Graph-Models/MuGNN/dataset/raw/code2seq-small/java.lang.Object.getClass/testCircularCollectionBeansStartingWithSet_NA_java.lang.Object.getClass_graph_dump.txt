Line_4 $$ TestBean bean = (TestBean) this.beanFactory.getBean("circularCollectionBeansBean")-->Line_12 $$ assertTrue(set.contains(bean))[ FD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_15 $$ assertEquals(1, map.size())[ CD ]
Line_4 $$ TestBean bean = (TestBean) this.beanFactory.getBean("circularCollectionBeansBean")-->Line_16 $$ assertEquals(bean, map.get("foo"))[ FD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_4 $$ TestBean bean = (TestBean) this.beanFactory.getBean("circularCollectionBeansBean")[ CD ]
Line_9 $$ Set set = bean.getSomeSet()-->Line_10 $$ assertTrue(Proxy.isProxyClass(set.getClass()))[ FD ]
Line_13 $$ Map map = bean.getSomeMap()-->Line_14 $$ assertFalse(Proxy.isProxyClass(map.getClass()))[ FD ]
Line_4 $$ TestBean bean = (TestBean) this.beanFactory.getBean("circularCollectionBeansBean")-->Line_13 $$ Map map = bean.getSomeMap()[ FD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_3 $$ this.beanFactory.getBean("circularSet")[ CD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_16 $$ assertEquals(bean, map.get("foo"))[ CD ]
Line_13 $$ Map map = bean.getSomeMap()-->Line_16 $$ assertEquals(bean, map.get("foo"))[ FD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_13 $$ Map map = bean.getSomeMap()[ CD ]
Line_5 $$ List list = bean.getSomeList()-->Line_6 $$ assertFalse(Proxy.isProxyClass(list.getClass()))[ FD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_6 $$ assertFalse(Proxy.isProxyClass(list.getClass()))[ CD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_12 $$ assertTrue(set.contains(bean))[ CD ]
Line_4 $$ TestBean bean = (TestBean) this.beanFactory.getBean("circularCollectionBeansBean")-->Line_9 $$ Set set = bean.getSomeSet()[ FD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_5 $$ List list = bean.getSomeList()[ CD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_8 $$ assertEquals(bean, list.get(0))[ CD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_10 $$ assertTrue(Proxy.isProxyClass(set.getClass()))[ CD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_7 $$ assertEquals(1, list.size())[ CD ]
Line_5 $$ List list = bean.getSomeList()-->Line_7 $$ assertEquals(1, list.size())[ FD ]
Line_5 $$ List list = bean.getSomeList()-->Line_8 $$ assertEquals(bean, list.get(0))[ FD ]
Line_4 $$ TestBean bean = (TestBean) this.beanFactory.getBean("circularCollectionBeansBean")-->Line_5 $$ List list = bean.getSomeList()[ FD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_14 $$ assertFalse(Proxy.isProxyClass(map.getClass()))[ CD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_11 $$ assertEquals(1, set.size())[ CD ]
Line_2 $$ public void testCircularCollectionBeansStartingWithSet() -->Line_9 $$ Set set = bean.getSomeSet()[ CD ]
Line_13 $$ Map map = bean.getSomeMap()-->Line_15 $$ assertEquals(1, map.size())[ FD ]
Line_9 $$ Set set = bean.getSomeSet()-->Line_11 $$ assertEquals(1, set.size())[ FD ]
Line_9 $$ Set set = bean.getSomeSet()-->Line_12 $$ assertTrue(set.contains(bean))[ FD ]
Line_4 $$ TestBean bean = (TestBean) this.beanFactory.getBean("circularCollectionBeansBean")-->Line_8 $$ assertEquals(bean, list.get(0))[ FD ]
