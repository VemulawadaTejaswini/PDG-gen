Line_2 $$ private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) -->Line_8 $$ Class<?> sourceType = generics[0].resolve()[ CD ]
Line_2 $$ private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) -->Line_3 $$ ResolvableType resolvableType = ResolvableType.forClass(converter.getClass()).as(genericIfc)[ FD ]
Line_2 $$ private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) -->Line_5 $$ if (generics.length < 2) [ CD ]
Line_5 $$ if (generics.length < 2) -->Line_6 $$ return null[ CD ]
Line_2 $$ private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) -->Line_3 $$ ResolvableType resolvableType = ResolvableType.forClass(converter.getClass()).as(genericIfc)[ CD ]
Line_3 $$ ResolvableType resolvableType = ResolvableType.forClass(converter.getClass()).as(genericIfc)-->Line_4 $$ ResolvableType[] generics = resolvableType.getGenerics()[ FD ]
Line_2 $$ private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) -->Line_4 $$ ResolvableType[] generics = resolvableType.getGenerics()[ CD ]
Line_2 $$ private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) -->Line_13 $$ return generics[ CD ]
Line_2 $$ private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) -->Line_9 $$ Class<?> targetType = generics[1].resolve()[ CD ]
Line_2 $$ private ResolvableType[] getRequiredTypeInfo(Object converter, Class<?> genericIfc) -->Line_10 $$ if (sourceType == null || targetType == null) [ CD ]
Line_10 $$ if (sourceType == null || targetType == null) -->Line_11 $$ return null[ CD ]
