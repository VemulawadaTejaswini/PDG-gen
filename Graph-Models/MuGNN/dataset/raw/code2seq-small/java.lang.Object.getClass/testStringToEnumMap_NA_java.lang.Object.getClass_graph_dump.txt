Line_2 $$ public void testStringToEnumMap() throws Exception -->Line_3 $$ conversionService.addConverterFactory(new StringToEnumConverterFactory())[ CD ]
Line_2 $$ public void testStringToEnumMap() throws Exception -->Line_8 $$ result.put(MyEnum.A, 1)[ CD ]
Line_2 $$ public void testStringToEnumMap() throws Exception -->Line_5 $$ source.put("A", 1)[ CD ]
Line_7 $$ EnumMap<MyEnum, Integer> result = new EnumMap<MyEnum, Integer>(MyEnum.class)-->Line_8 $$ result.put(MyEnum.A, 1)[ FD ]
Line_2 $$ public void testStringToEnumMap() throws Exception -->Line_7 $$ EnumMap<MyEnum, Integer> result = new EnumMap<MyEnum, Integer>(MyEnum.class)[ CD ]
Line_4 $$ Map<String, Integer> source = new HashMap<String, Integer>()-->Line_6 $$ source.put("C", 2)[ FD ]
Line_2 $$ public void testStringToEnumMap() throws Exception -->Line_9 $$ result.put(MyEnum.C, 2)[ CD ]
Line_2 $$ public void testStringToEnumMap() throws Exception -->Line_4 $$ Map<String, Integer> source = new HashMap<String, Integer>()[ CD ]
Line_7 $$ EnumMap<MyEnum, Integer> result = new EnumMap<MyEnum, Integer>(MyEnum.class)-->Line_9 $$ result.put(MyEnum.C, 2)[ FD ]
Line_2 $$ public void testStringToEnumMap() throws Exception -->Line_10 $$ assertEquals(result, conversionService.convert(source, TypeDescriptor.forObject(source), new TypeDescriptor(getClass().getField("enumMap"))))[ CD ]
Line_4 $$ Map<String, Integer> source = new HashMap<String, Integer>()-->Line_10 $$ assertEquals(result, conversionService.convert(source, TypeDescriptor.forObject(source), new TypeDescriptor(getClass().getField("enumMap"))))[ FD ]
Line_7 $$ EnumMap<MyEnum, Integer> result = new EnumMap<MyEnum, Integer>(MyEnum.class)-->Line_10 $$ assertEquals(result, conversionService.convert(source, TypeDescriptor.forObject(source), new TypeDescriptor(getClass().getField("enumMap"))))[ FD ]
Line_4 $$ Map<String, Integer> source = new HashMap<String, Integer>()-->Line_5 $$ source.put("A", 1)[ FD ]
Line_2 $$ public void testStringToEnumMap() throws Exception -->Line_6 $$ source.put("C", 2)[ CD ]
