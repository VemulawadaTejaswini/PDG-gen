Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_3 $$ URL testFileUrl = getClass().getClassLoader().getResource(testFile)[ CD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_4 $$ ArrayList<String> records = readRecords(testFileUrl, splitSize)[ CD ]
Line_8 $$ for (int i = 0; i < actuals.length; ++i) -->Line_10 $$ if (actuals[i].length() > 2 * splitSize) [ CD ]
Line_3 $$ URL testFileUrl = getClass().getClassLoader().getResource(testFile)-->Line_5 $$ String[] actuals = readRecordsDirectly(testFileUrl, bzip)[ FD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_3 $$ URL testFileUrl = getClass().getClassLoader().getResource(testFile)[ FD ]
Line_7 $$ boolean hasLargeRecord = false-->Line_14 $$ assertTrue("Invalid test data. Doesn't have a large enough record", hasLargeRecord)[ FD ]
Line_10 $$ if (actuals[i].length() > 2 * splitSize) -->Line_11 $$ hasLargeRecord = true[ CD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_5 $$ String[] actuals = readRecordsDirectly(testFileUrl, bzip)[ FD ]
Line_4 $$ ArrayList<String> records = readRecords(testFileUrl, splitSize)-->Line_6 $$ assertEquals("Wrong number of records", actuals.length, records.size())[ FD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_14 $$ assertTrue("Invalid test data. Doesn't have a large enough record", hasLargeRecord)[ CD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_5 $$ String[] actuals = readRecordsDirectly(testFileUrl, bzip)[ CD ]
Line_4 $$ ArrayList<String> records = readRecords(testFileUrl, splitSize)-->Line_9 $$ assertEquals(actuals[i], records.get(i))[ FD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_7 $$ boolean hasLargeRecord = false[ CD ]
Line_11 $$ hasLargeRecord = true-->Line_14 $$ assertTrue("Invalid test data. Doesn't have a large enough record", hasLargeRecord)[ FD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_4 $$ ArrayList<String> records = readRecords(testFileUrl, splitSize)[ FD ]
Line_3 $$ URL testFileUrl = getClass().getClassLoader().getResource(testFile)-->Line_4 $$ ArrayList<String> records = readRecords(testFileUrl, splitSize)[ FD ]
Line_8 $$ for (int i = 0; i < actuals.length; ++i) -->Line_9 $$ assertEquals(actuals[i], records.get(i))[ FD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_8 $$ for (int i = 0; i < actuals.length; ++i) [ CD ]
Line_7 $$ boolean hasLargeRecord = false-->Line_11 $$ hasLargeRecord = true[ FD ]
Line_8 $$ for (int i = 0; i < actuals.length; ++i) -->Line_9 $$ assertEquals(actuals[i], records.get(i))[ CD ]
Line_2 $$ public void checkRecordSpanningMultipleSplits(String testFile, int splitSize, boolean bzip) throws IOException -->Line_6 $$ assertEquals("Wrong number of records", actuals.length, records.size())[ CD ]
