Line_2 $$ public void testOrphanCancellationNotSupported() throws Exception -->Line_3 $$ System.setProperty(_THREAD_ENABLED_KEY, StringPool.FALSE)[ CD ]
Line_8 $$ Field field = ReflectionTestUtil.getFieldValue(AsyncBroker.class, "_REFERENT_FIELD")-->Line_9 $$ field.setAccessible(false)[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_4 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(AsyncBroker.class.getName(), Level.SEVERE)) -->Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_13 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_5 $$ AsyncBroker<String, String> asyncBroker = new AsyncBroker()-->Line_6 $$ asyncBroker.post(_KEY)[ FD ]
Line_14 $$ String message = logRecord.getMessage()-->Line_15 $$ Assert.assertTrue(message.startsWith("Unable to access referent of "))[ FD ]
Line_13 $$ LogRecord logRecord = logRecords.get(0)-->Line_14 $$ String message = logRecord.getMessage()[ FD ]
Line_16 $$ Throwable throwable = logRecord.getThrown()-->Line_17 $$ Assert.assertSame(IllegalAccessException.class, throwable.getClass())[ FD ]
Line_11 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
