Line_16 $$ result = container-->Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_6 $$ if (componentClass.isAnonymousClass()) [ CD ]
Line_17 $$ if (component instanceof Box.Filler) -->Line_19 $$ if (filler.getMaximumSize().height == Short.MAX_VALUE) [ CD ]
Line_53 $$ if (model.getGroup() != null) -->Line_54 $$ context.registerButtonGroup(model.getGroup())[ CD ]
Line_4 $$ RadComponent result-->Line_24 $$ result.getConstraints().setHSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ FD ]
Line_4 $$ RadComponent result-->Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())[ FD ]
Line_9 $$ if (component instanceof JPanel && !isCompositeComponent(component)) -->Line_16 $$ result = container[ CD ]
Line_4 $$ RadComponent result-->Line_21 $$ result.getConstraints().setVSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ FD ]
Line_16 $$ result = container-->Line_47 $$ prop.importSnapshotValue(context, component, result)[ FD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_23 $$ result = new RadHSpacer(null, id)[ FD ]
Line_51 $$ if (btn.getModel() instanceof DefaultButtonModel) -->Line_52 $$ DefaultButtonModel model = (DefaultButtonModel) btn.getModel()[ CD ]
Line_10 $$ RadContainer container = new RadContainer(componentClass, id, context.getPalette())-->Line_15 $$ container.setLayoutManager(manager)[ FD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_35 $$ result.importSnapshotComponent(context, component)[ FD ]
Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())-->Line_34 $$ context.registerComponent(component, result)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_5 $$ Class componentClass = component.getClass()[ FD ]
Line_11 $$ final RadLayoutManager manager = LayoutManagerRegistry.createFromLayout(component.getLayout())-->Line_15 $$ container.setLayoutManager(manager)[ FD ]
Line_5 $$ Class componentClass = component.getClass()-->Line_7 $$ componentClass = componentClass.getSuperclass()[ FD ]
Line_5 $$ Class componentClass = component.getClass()-->Line_6 $$ if (componentClass.isAnonymousClass()) [ FD ]
Line_28 $$ if (factory == null) -->Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())[ CD ]
Line_4 $$ RadComponent result-->Line_23 $$ result = new RadHSpacer(null, id)[ FD ]
Line_23 $$ result = new RadHSpacer(null, id)-->Line_36 $$ final IntrospectedProperty[] properties = context.getPalette().getIntrospectedProperties(component.getClass(), result.getDelegee().getClass())[ FD ]
Line_4 $$ RadComponent result-->Line_34 $$ context.registerComponent(component, result)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_47 $$ prop.importSnapshotValue(context, component, result)[ FD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_21 $$ result.getConstraints().setVSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())[ FD ]
Line_23 $$ result = new RadHSpacer(null, id)-->Line_24 $$ result.getConstraints().setHSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ FD ]
Line_3 $$ String id = context.newId()-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_5 $$ Class componentClass = component.getClass()[ CD ]
Line_17 $$ if (component instanceof Box.Filler) -->Line_27 $$ final RadComponentFactory factory = InsertComponentProcessor.getRadComponentFactory(componentClass)[ CD ]
Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())-->Line_36 $$ final IntrospectedProperty[] properties = context.getPalette().getIntrospectedProperties(component.getClass(), result.getDelegee().getClass())[ FD ]
Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())-->Line_47 $$ prop.importSnapshotValue(context, component, result)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_35 $$ result.importSnapshotComponent(context, component)[ CD ]
Line_12 $$ if (manager == null) -->Line_13 $$ return null[ CD ]
Line_49 $$ if (component instanceof AbstractButton) -->Line_51 $$ if (btn.getModel() instanceof DefaultButtonModel) [ CD ]
Line_5 $$ Class componentClass = component.getClass()-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_34 $$ context.registerComponent(component, result)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_35 $$ result.importSnapshotComponent(context, component)[ FD ]
Line_16 $$ result = container-->Line_24 $$ result.getConstraints().setHSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ FD ]
Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())-->Line_35 $$ result.importSnapshotComponent(context, component)[ FD ]
Line_16 $$ result = container-->Line_34 $$ context.registerComponent(component, result)[ FD ]
Line_19 $$ if (filler.getMaximumSize().height == Short.MAX_VALUE) -->Line_23 $$ result = new RadHSpacer(null, id)[ CD ]
Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_16 $$ result = container-->Line_35 $$ result.importSnapshotComponent(context, component)[ FD ]
Line_38 $$ if (component instanceof AbstractButton) -->Line_39 $$ AbstractButton btn = (AbstractButton) component[ CD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_47 $$ prop.importSnapshotValue(context, component, result)[ FD ]
Line_4 $$ RadComponent result-->Line_16 $$ result = container[ FD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_36 $$ final IntrospectedProperty[] properties = context.getPalette().getIntrospectedProperties(component.getClass(), result.getDelegee().getClass())[ FD ]
Line_38 $$ if (component instanceof AbstractButton) -->Line_43 $$ if (prop.getName().equals(SwingProperties.ACTION_COMMAND) && btn.getActionCommand().equals(btn.getText())) [ CD ]
Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())-->Line_47 $$ prop.importSnapshotValue(context, component, result)[ FD ]
Line_9 $$ if (component instanceof JPanel && !isCompositeComponent(component)) -->Line_10 $$ RadContainer container = new RadContainer(componentClass, id, context.getPalette())[ CD ]
Line_52 $$ DefaultButtonModel model = (DefaultButtonModel) btn.getModel()-->Line_54 $$ context.registerButtonGroup(model.getGroup())[ FD ]
Line_17 $$ if (component instanceof Box.Filler) -->Line_18 $$ Box.Filler filler = (Box.Filler) component[ CD ]
Line_19 $$ if (filler.getMaximumSize().height == Short.MAX_VALUE) -->Line_21 $$ result.getConstraints().setVSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ CD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_3 $$ String id = context.newId()[ FD ]
Line_9 $$ if (component instanceof JPanel && !isCompositeComponent(component)) -->Line_11 $$ final RadLayoutManager manager = LayoutManagerRegistry.createFromLayout(component.getLayout())[ CD ]
Line_5 $$ Class componentClass = component.getClass()-->Line_27 $$ final RadComponentFactory factory = InsertComponentProcessor.getRadComponentFactory(componentClass)[ FD ]
Line_16 $$ result = container-->Line_21 $$ result.getConstraints().setVSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_36 $$ final IntrospectedProperty[] properties = context.getPalette().getIntrospectedProperties(component.getClass(), result.getDelegee().getClass())[ CD ]
Line_4 $$ RadComponent result-->Line_20 $$ result = new RadVSpacer(null, id)[ FD ]
Line_18 $$ Box.Filler filler = (Box.Filler) component-->Line_19 $$ if (filler.getMaximumSize().height == Short.MAX_VALUE) [ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_11 $$ final RadLayoutManager manager = LayoutManagerRegistry.createFromLayout(component.getLayout())[ FD ]
Line_16 $$ result = container-->Line_20 $$ result = new RadVSpacer(null, id)[ FD ]
Line_4 $$ RadComponent result-->Line_36 $$ final IntrospectedProperty[] properties = context.getPalette().getIntrospectedProperties(component.getClass(), result.getDelegee().getClass())[ FD ]
Line_9 $$ if (component instanceof JPanel && !isCompositeComponent(component)) -->Line_15 $$ container.setLayoutManager(manager)[ CD ]
Line_27 $$ final RadComponentFactory factory = InsertComponentProcessor.getRadComponentFactory(componentClass)-->Line_28 $$ if (factory == null) [ FD ]
Line_23 $$ result = new RadHSpacer(null, id)-->Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())[ FD ]
Line_37 $$ for (IntrospectedProperty prop : properties) -->Line_43 $$ if (prop.getName().equals(SwingProperties.ACTION_COMMAND) && btn.getActionCommand().equals(btn.getText())) [ FD ]
Line_37 $$ for (IntrospectedProperty prop : properties) -->Line_47 $$ prop.importSnapshotValue(context, component, result)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_17 $$ if (component instanceof Box.Filler) [ FD ]
Line_4 $$ RadComponent result-->Line_35 $$ result.importSnapshotComponent(context, component)[ FD ]
Line_37 $$ for (IntrospectedProperty prop : properties) -->Line_40 $$ if (prop.getName().equals(SwingProperties.LABEL) && btn.getLabel().equals(btn.getText())) [ FD ]
Line_16 $$ result = container-->Line_36 $$ final IntrospectedProperty[] properties = context.getPalette().getIntrospectedProperties(component.getClass(), result.getDelegee().getClass())[ FD ]
Line_11 $$ final RadLayoutManager manager = LayoutManagerRegistry.createFromLayout(component.getLayout())-->Line_12 $$ if (manager == null) [ FD ]
Line_39 $$ AbstractButton btn = (AbstractButton) component-->Line_51 $$ if (btn.getModel() instanceof DefaultButtonModel) [ FD ]
Line_19 $$ if (filler.getMaximumSize().height == Short.MAX_VALUE) -->Line_24 $$ result.getConstraints().setHSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ CD ]
Line_16 $$ result = container-->Line_23 $$ result = new RadHSpacer(null, id)[ FD ]
Line_28 $$ if (factory == null) -->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ CD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_34 $$ context.registerComponent(component, result)[ CD ]
Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())-->Line_36 $$ final IntrospectedProperty[] properties = context.getPalette().getIntrospectedProperties(component.getClass(), result.getDelegee().getClass())[ FD ]
Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())-->Line_34 $$ context.registerComponent(component, result)[ FD ]
Line_23 $$ result = new RadHSpacer(null, id)-->Line_35 $$ result.importSnapshotComponent(context, component)[ FD ]
Line_9 $$ if (component instanceof JPanel && !isCompositeComponent(component)) -->Line_12 $$ if (manager == null) [ CD ]
Line_10 $$ RadContainer container = new RadContainer(componentClass, id, context.getPalette())-->Line_16 $$ result = container[ FD ]
Line_6 $$ if (componentClass.isAnonymousClass()) -->Line_7 $$ componentClass = componentClass.getSuperclass()[ CD ]
Line_9 $$ if (component instanceof JPanel && !isCompositeComponent(component)) -->Line_17 $$ if (component instanceof Box.Filler) [ CD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_34 $$ context.registerComponent(component, result)[ FD ]
Line_51 $$ if (btn.getModel() instanceof DefaultButtonModel) -->Line_53 $$ if (model.getGroup() != null) [ CD ]
Line_17 $$ if (component instanceof Box.Filler) -->Line_28 $$ if (factory == null) [ CD ]
Line_4 $$ RadComponent result-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_23 $$ result = new RadHSpacer(null, id)-->Line_34 $$ context.registerComponent(component, result)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_54 $$ context.registerButtonGroup(model.getGroup())[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_4 $$ RadComponent result[ CD ]
Line_16 $$ result = container-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_23 $$ result = new RadHSpacer(null, id)-->Line_47 $$ prop.importSnapshotValue(context, component, result)[ FD ]
Line_7 $$ componentClass = componentClass.getSuperclass()-->Line_27 $$ final RadComponentFactory factory = InsertComponentProcessor.getRadComponentFactory(componentClass)[ FD ]
Line_39 $$ AbstractButton btn = (AbstractButton) component-->Line_52 $$ DefaultButtonModel model = (DefaultButtonModel) btn.getModel()[ FD ]
Line_23 $$ result = new RadHSpacer(null, id)-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_27 $$ final RadComponentFactory factory = InsertComponentProcessor.getRadComponentFactory(componentClass)-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())-->Line_35 $$ result.importSnapshotComponent(context, component)[ FD ]
Line_39 $$ AbstractButton btn = (AbstractButton) component-->Line_40 $$ if (prop.getName().equals(SwingProperties.LABEL) && btn.getLabel().equals(btn.getText())) [ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_3 $$ String id = context.newId()[ CD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_36 $$ final IntrospectedProperty[] properties = context.getPalette().getIntrospectedProperties(component.getClass(), result.getDelegee().getClass())[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_9 $$ if (component instanceof JPanel && !isCompositeComponent(component)) [ CD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_24 $$ result.getConstraints().setHSizePolicy(GridConstraints.SIZEPOLICY_CAN_GROW | GridConstraints.SIZEPOLICY_WANT_GROW)[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_49 $$ if (component instanceof AbstractButton) [ CD ]
Line_4 $$ RadComponent result-->Line_47 $$ prop.importSnapshotValue(context, component, result)[ FD ]
Line_19 $$ if (filler.getMaximumSize().height == Short.MAX_VALUE) -->Line_20 $$ result = new RadVSpacer(null, id)[ CD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_10 $$ RadContainer container = new RadContainer(componentClass, id, context.getPalette())[ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_49 $$ if (component instanceof AbstractButton) [ FD ]
Line_38 $$ if (component instanceof AbstractButton) -->Line_40 $$ if (prop.getName().equals(SwingProperties.LABEL) && btn.getLabel().equals(btn.getText())) [ CD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_58 $$ return result[ CD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_38 $$ if (component instanceof AbstractButton) [ FD ]
Line_7 $$ componentClass = componentClass.getSuperclass()-->Line_31 $$ result = factory.newInstance(componentClass, id, context.getPalette())[ FD ]
Line_20 $$ result = new RadVSpacer(null, id)-->Line_29 $$ result = new RadAtomicComponent(componentClass, id, context.getPalette())[ FD ]
Line_52 $$ DefaultButtonModel model = (DefaultButtonModel) btn.getModel()-->Line_53 $$ if (model.getGroup() != null) [ FD ]
Line_39 $$ AbstractButton btn = (AbstractButton) component-->Line_43 $$ if (prop.getName().equals(SwingProperties.ACTION_COMMAND) && btn.getActionCommand().equals(btn.getText())) [ FD ]
Line_2 $$ public static RadComponent createSnapshotComponent(final SnapshotContext context, final JComponent component) -->Line_9 $$ if (component instanceof JPanel && !isCompositeComponent(component)) [ FD ]
