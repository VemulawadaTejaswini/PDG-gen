Line_19 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)-->Line_24 $$ seqWriter.append(key, value)[ FD ]
Line_23 $$ LongWritable value = new LongWritable(12 * i)-->Line_24 $$ seqWriter.append(key, value)[ FD ]
Line_2 $$ public void testFormat() throws IOException -->Line_7 $$ Path seqFile = new Path(dir, "auto.seq")[ CD ]
Line_2 $$ public void testFormat() throws IOException -->Line_6 $$ Path txtFile = new Path(dir, "auto.txt")[ CD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_8 $$ fs.delete(dir, true)[ FD ]
Line_10 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))-->Line_17 $$ txtWriter.close()[ FD ]
Line_37 $$ if (key instanceof LongWritable) -->Line_44 $$ assertTrue("Invalid value.", ((LongWritable) value).get() % 12 == 0)[ CD ]
Line_33 $$ Object key = reader.createKey()-->Line_37 $$ if (key instanceof LongWritable) [ FD ]
Line_7 $$ Path seqFile = new Path(dir, "auto.seq")-->Line_19 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)[ FD ]
Line_31 $$ for (InputSplit split : splits) -->Line_32 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)[ FD ]
Line_12 $$ for (int i = 0; i < LINES_COUNT; i++) -->Line_21 $$ for (int i = 0; i < RECORDS_COUNT; i++) [ FD ]
Line_33 $$ Object key = reader.createKey()-->Line_36 $$ while (reader.next(key, value)) [ FD ]
Line_23 $$ LongWritable value = new LongWritable(12 * i)-->Line_36 $$ while (reader.next(key, value)) [ FD ]
Line_5 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")-->Line_8 $$ fs.delete(dir, true)[ FD ]
Line_5 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")-->Line_9 $$ FileInputFormat.setInputPaths(job, dir)[ FD ]
Line_21 $$ for (int i = 0; i < RECORDS_COUNT; i++) -->Line_24 $$ seqWriter.append(key, value)[ CD ]
Line_3 $$ JobConf job = new JobConf(conf)-->Line_32 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)[ FD ]
Line_2 $$ public void testFormat() throws IOException -->Line_3 $$ JobConf job = new JobConf(conf)[ CD ]
Line_3 $$ JobConf job = new JobConf(conf)-->Line_9 $$ FileInputFormat.setInputPaths(job, dir)[ FD ]
Line_37 $$ if (key instanceof LongWritable) -->Line_38 $$ assertEquals("Wrong value class.", Text.class, value.getClass())[ CD ]
Line_29 $$ AutoInputFormat format = new AutoInputFormat()-->Line_32 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)[ FD ]
Line_2 $$ public void testFormat() throws IOException -->Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_36 $$ while (reader.next(key, value)) -->Line_37 $$ if (key instanceof LongWritable) [ CD ]
Line_2 $$ public void testFormat() throws IOException -->Line_9 $$ FileInputFormat.setInputPaths(job, dir)[ CD ]
Line_2 $$ public void testFormat() throws IOException -->Line_8 $$ fs.delete(dir, true)[ CD ]
Line_2 $$ public void testFormat() throws IOException -->Line_19 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)[ CD ]
Line_22 $$ IntWritable key = new IntWritable(11 * i)-->Line_37 $$ if (key instanceof LongWritable) [ FD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_19 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)[ FD ]
Line_22 $$ IntWritable key = new IntWritable(11 * i)-->Line_41 $$ assertEquals("Wrong key class.", IntWritable.class, key.getClass())[ FD ]
Line_37 $$ if (key instanceof LongWritable) -->Line_42 $$ assertEquals("Wrong value class.", LongWritable.class, value.getClass())[ CD ]
Line_37 $$ if (key instanceof LongWritable) -->Line_43 $$ assertTrue("Invalid key.", ((IntWritable) key).get() % 11 == 0)[ CD ]
Line_23 $$ LongWritable value = new LongWritable(12 * i)-->Line_42 $$ assertEquals("Wrong value class.", LongWritable.class, value.getClass())[ FD ]
Line_32 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)-->Line_34 $$ Object value = reader.createValue()[ FD ]
Line_21 $$ for (int i = 0; i < RECORDS_COUNT; i++) -->Line_22 $$ IntWritable key = new IntWritable(11 * i)[ CD ]
Line_10 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))-->Line_14 $$ txtWriter.write("\n")[ FD ]
Line_23 $$ LongWritable value = new LongWritable(12 * i)-->Line_38 $$ assertEquals("Wrong value class.", Text.class, value.getClass())[ FD ]
Line_32 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)-->Line_48 $$ reader.close()[ FD ]
Line_22 $$ IntWritable key = new IntWritable(11 * i)-->Line_24 $$ seqWriter.append(key, value)[ FD ]
Line_4 $$ FileSystem fs = FileSystem.getLocal(conf)-->Line_10 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))[ FD ]
Line_19 $$ SequenceFile.Writer seqWriter = SequenceFile.createWriter(fs, conf, seqFile, IntWritable.class, LongWritable.class)-->Line_27 $$ seqWriter.close()[ FD ]
Line_2 $$ public void testFormat() throws IOException -->Line_5 $$ Path dir = new Path(System.getProperty("test.build.data", ".") + "/mapred")[ CD ]
Line_32 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)-->Line_36 $$ while (reader.next(key, value)) [ FD ]
Line_37 $$ if (key instanceof LongWritable) -->Line_41 $$ assertEquals("Wrong key class.", IntWritable.class, key.getClass())[ CD ]
Line_3 $$ JobConf job = new JobConf(conf)-->Line_30 $$ InputSplit[] splits = format.getSplits(job, SPLITS_COUNT)[ FD ]
Line_2 $$ public void testFormat() throws IOException -->Line_29 $$ AutoInputFormat format = new AutoInputFormat()[ CD ]
Line_6 $$ Path txtFile = new Path(dir, "auto.txt")-->Line_10 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))[ FD ]
Line_12 $$ for (int i = 0; i < LINES_COUNT; i++) -->Line_14 $$ txtWriter.write("\n")[ CD ]
Line_2 $$ public void testFormat() throws IOException -->Line_30 $$ InputSplit[] splits = format.getSplits(job, SPLITS_COUNT)[ CD ]
Line_10 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))-->Line_13 $$ txtWriter.write("" + (10 * i))[ FD ]
Line_2 $$ public void testFormat() throws IOException -->Line_10 $$ Writer txtWriter = new OutputStreamWriter(fs.create(txtFile))[ CD ]
Line_21 $$ for (int i = 0; i < RECORDS_COUNT; i++) -->Line_23 $$ LongWritable value = new LongWritable(12 * i)[ CD ]
Line_29 $$ AutoInputFormat format = new AutoInputFormat()-->Line_30 $$ InputSplit[] splits = format.getSplits(job, SPLITS_COUNT)[ FD ]
Line_34 $$ Object value = reader.createValue()-->Line_42 $$ assertEquals("Wrong value class.", LongWritable.class, value.getClass())[ FD ]
Line_32 $$ RecordReader reader = format.getRecordReader(split, job, Reporter.NULL)-->Line_33 $$ Object key = reader.createKey()[ FD ]
Line_22 $$ IntWritable key = new IntWritable(11 * i)-->Line_36 $$ while (reader.next(key, value)) [ FD ]
Line_33 $$ Object key = reader.createKey()-->Line_41 $$ assertEquals("Wrong key class.", IntWritable.class, key.getClass())[ FD ]
Line_12 $$ for (int i = 0; i < LINES_COUNT; i++) -->Line_13 $$ txtWriter.write("" + (10 * i))[ CD ]
Line_34 $$ Object value = reader.createValue()-->Line_38 $$ assertEquals("Wrong value class.", Text.class, value.getClass())[ FD ]
Line_37 $$ if (key instanceof LongWritable) -->Line_39 $$ assertTrue("Invalid value", Integer.parseInt(((Text) value).toString()) % 10 == 0)[ CD ]
Line_34 $$ Object value = reader.createValue()-->Line_36 $$ while (reader.next(key, value)) [ FD ]
