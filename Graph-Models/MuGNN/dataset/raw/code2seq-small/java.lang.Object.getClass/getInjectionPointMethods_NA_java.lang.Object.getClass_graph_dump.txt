Line_4 $$ Class<?> targetClass = target.getClass()-->Line_5 $$ Method[] methods = targetClass.getDeclaredMethods()[ FD ]
Line_2 $$ protected List<Method> getInjectionPointMethods(Object target) -->Line_4 $$ Class<?> targetClass = target.getClass()[ FD ]
Line_2 $$ protected List<Method> getInjectionPointMethods(Object target) -->Line_5 $$ Method[] methods = targetClass.getDeclaredMethods()[ CD ]
Line_6 $$ for (Method method : methods) -->Line_11 $$ injectionPointMethods.add(method)[ FD ]
Line_2 $$ protected List<Method> getInjectionPointMethods(Object target) -->Line_14 $$ return injectionPointMethods[ CD ]
Line_6 $$ for (Method method : methods) -->Line_8 $$ Class<?>[] parameterTypes = method.getParameterTypes()[ FD ]
Line_10 $$ if (annotationPresent && (parameterTypes.length == 1) && returnType.equals(void.class)) -->Line_11 $$ injectionPointMethods.add(method)[ CD ]
Line_6 $$ for (Method method : methods) -->Line_7 $$ boolean annotationPresent = method.isAnnotationPresent(Reference.class)[ FD ]
Line_2 $$ protected List<Method> getInjectionPointMethods(Object target) -->Line_4 $$ Class<?> targetClass = target.getClass()[ CD ]
Line_6 $$ for (Method method : methods) -->Line_9 $$ Class<?> returnType = method.getReturnType()[ FD ]
Line_3 $$ List<Method> injectionPointMethods = new ArrayList<Method>()-->Line_11 $$ injectionPointMethods.add(method)[ FD ]
Line_2 $$ protected List<Method> getInjectionPointMethods(Object target) -->Line_3 $$ List<Method> injectionPointMethods = new ArrayList<Method>()[ CD ]
Line_9 $$ Class<?> returnType = method.getReturnType()-->Line_10 $$ if (annotationPresent && (parameterTypes.length == 1) && returnType.equals(void.class)) [ FD ]
