Line_21 $$ if (value instanceof Float) -->Line_24 $$ node.setType(SqlTokenTypes.CONSTANT)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_43 $$ node.setResolvedConstant(text)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_24 $$ node.setType(SqlTokenTypes.CONSTANT)[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_42 $$ node.setDataType(type)[ FD ]
Line_13 $$ if (value instanceof Short) -->Line_15 $$ if (value instanceof Integer) [ CD ]
Line_15 $$ if (value instanceof Integer) -->Line_16 $$ node.setType(SqlTokenTypes.NUM_INT)[ CD ]
Line_15 $$ if (value instanceof Integer) -->Line_17 $$ if (value instanceof Long) [ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_20 $$ node.setType(SqlTokenTypes.NUM_DOUBLE)[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_14 $$ node.setType(SqlTokenTypes.NUM_INT)[ FD ]
Line_26 $$ Type type-->Line_42 $$ node.setDataType(type)[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_7 $$ if (value instanceof String) [ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_10 $$ node.setType(SqlTokenTypes.QUOTED_STRING)[ FD ]
Line_3 $$ if (LOG.isDebugEnabled()) -->Line_4 $$ LOG.debugf("setConstantValue() %s -> %s %s", text, value, value.getClass().getName())[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_32 $$ if (type == null) [ CD ]
Line_17 $$ if (value instanceof Long) -->Line_19 $$ if (value instanceof Double) [ CD ]
Line_19 $$ if (value instanceof Double) -->Line_20 $$ node.setType(SqlTokenTypes.NUM_DOUBLE)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_6 $$ node.setFirstChild(null)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_7 $$ if (value instanceof String) [ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_12 $$ node.setType(SqlTokenTypes.NUM_INT)[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_13 $$ if (value instanceof Short) [ FD ]
Line_21 $$ if (value instanceof Float) -->Line_22 $$ node.setType(SqlTokenTypes.NUM_FLOAT)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_6 $$ node.setFirstChild(null)[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_43 $$ node.setResolvedConstant(text)[ FD ]
Line_7 $$ if (value instanceof String) -->Line_8 $$ node.setType(SqlTokenTypes.QUOTED_STRING)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_9 $$ if (value instanceof Character) [ FD ]
Line_19 $$ if (value instanceof Double) -->Line_21 $$ if (value instanceof Float) [ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_3 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_18 $$ node.setType(SqlTokenTypes.NUM_LONG)[ FD ]
Line_26 $$ Type type-->Line_28 $$ type = walker.getSessionFactoryHelper().getFactory().getTypeResolver().heuristicType(value.getClass().getName())[ FD ]
Line_28 $$ type = walker.getSessionFactoryHelper().getFactory().getTypeResolver().heuristicType(value.getClass().getName())-->Line_42 $$ node.setDataType(type)[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_17 $$ if (value instanceof Long) [ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_40 $$ throw new QueryException(QueryTranslator.ERROR_CANNOT_FORMAT_LITERAL + node.getText(), e)[ FD ]
Line_9 $$ if (value instanceof Character) -->Line_11 $$ if (value instanceof Byte) [ CD ]
Line_11 $$ if (value instanceof Byte) -->Line_13 $$ if (value instanceof Short) [ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_8 $$ node.setType(SqlTokenTypes.QUOTED_STRING)[ FD ]
Line_37 $$ Dialect dialect = walker.getSessionFactoryHelper().getFactory().getDialect()-->Line_38 $$ node.setText(literalType.objectToSQLString(value, dialect))[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_33 $$ throw new QueryException(QueryTranslator.ERROR_CANNOT_DETERMINE_TYPE + node.getText())[ FD ]
Line_11 $$ if (value instanceof Byte) -->Line_12 $$ node.setType(SqlTokenTypes.NUM_INT)[ CD ]
Line_13 $$ if (value instanceof Short) -->Line_14 $$ node.setType(SqlTokenTypes.NUM_INT)[ CD ]
Line_17 $$ if (value instanceof Long) -->Line_18 $$ node.setType(SqlTokenTypes.NUM_LONG)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_16 $$ node.setType(SqlTokenTypes.NUM_INT)[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_22 $$ node.setType(SqlTokenTypes.NUM_FLOAT)[ FD ]
Line_9 $$ if (value instanceof Character) -->Line_10 $$ node.setType(SqlTokenTypes.QUOTED_STRING)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_28 $$ type = walker.getSessionFactoryHelper().getFactory().getTypeResolver().heuristicType(value.getClass().getName())[ FD ]
Line_26 $$ Type type-->Line_32 $$ if (type == null) [ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_42 $$ node.setDataType(type)[ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_11 $$ if (value instanceof Byte) [ FD ]
Line_7 $$ if (value instanceof String) -->Line_9 $$ if (value instanceof Character) [ CD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_19 $$ if (value instanceof Double) [ FD ]
Line_36 $$ LiteralType literalType = (LiteralType) type-->Line_38 $$ node.setText(literalType.objectToSQLString(value, dialect))[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_4 $$ LOG.debugf("setConstantValue() %s -> %s %s", text, value, value.getClass().getName())[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_15 $$ if (value instanceof Integer) [ FD ]
Line_28 $$ type = walker.getSessionFactoryHelper().getFactory().getTypeResolver().heuristicType(value.getClass().getName())-->Line_32 $$ if (type == null) [ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_21 $$ if (value instanceof Float) [ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_38 $$ node.setText(literalType.objectToSQLString(value, dialect))[ FD ]
Line_2 $$ private void setConstantValue(DotNode node, String text, Object value) -->Line_26 $$ Type type[ CD ]
