Line_2 $$ public void testParameterNameDiscoverWithReferencePointcut() throws Exception -->Line_3 $$ AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer("somepc(formal) && set(* *)")[ CD ]
Line_2 $$ public void testParameterNameDiscoverWithReferencePointcut() throws Exception -->Line_4 $$ discoverer.setRaiseExceptions(true)[ CD ]
Line_2 $$ public void testParameterNameDiscoverWithReferencePointcut() throws Exception -->Line_7 $$ assertEquals("one parameter name", 1, pnames.length)[ CD ]
Line_3 $$ AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer("somepc(formal) && set(* *)")-->Line_4 $$ discoverer.setRaiseExceptions(true)[ FD ]
Line_2 $$ public void testParameterNameDiscoverWithReferencePointcut() throws Exception -->Line_5 $$ Method methodUsedForParameterTypeDiscovery = getClass().getMethod("methodWithOneParam", String.class)[ CD ]
Line_2 $$ public void testParameterNameDiscoverWithReferencePointcut() throws Exception -->Line_8 $$ assertEquals("formal", pnames[0])[ CD ]
Line_5 $$ Method methodUsedForParameterTypeDiscovery = getClass().getMethod("methodWithOneParam", String.class)-->Line_6 $$ String[] pnames = discoverer.getParameterNames(methodUsedForParameterTypeDiscovery)[ FD ]
Line_3 $$ AspectJAdviceParameterNameDiscoverer discoverer = new AspectJAdviceParameterNameDiscoverer("somepc(formal) && set(* *)")-->Line_6 $$ String[] pnames = discoverer.getParameterNames(methodUsedForParameterTypeDiscovery)[ FD ]
Line_2 $$ public void testParameterNameDiscoverWithReferencePointcut() throws Exception -->Line_6 $$ String[] pnames = discoverer.getParameterNames(methodUsedForParameterTypeDiscovery)[ CD ]
