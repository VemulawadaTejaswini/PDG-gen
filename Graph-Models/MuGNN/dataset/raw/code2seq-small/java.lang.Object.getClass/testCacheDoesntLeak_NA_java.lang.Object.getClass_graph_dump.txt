Line_4 $$ for (int i = 0; i < iterations; i++) -->Line_8 $$ assertEquals(cl, o.getClass())[ CD ]
Line_2 $$ public void testCacheDoesntLeak() throws Exception -->Line_10 $$ System.gc()[ CD ]
Line_3 $$ int iterations = 9999-->Line_4 $$ for (int i = 0; i < iterations; i++) [ FD ]
Line_4 $$ for (int i = 0; i < iterations; i++) -->Line_6 $$ Class cl = Class.forName("org.apache.hadoop.util.TestReflectionUtils$LoadedInChild", false, loader)[ CD ]
Line_5 $$ URLClassLoader loader = new URLClassLoader(new URL[0], getClass().getClassLoader())-->Line_6 $$ Class cl = Class.forName("org.apache.hadoop.util.TestReflectionUtils$LoadedInChild", false, loader)[ FD ]
Line_2 $$ public void testCacheDoesntLeak() throws Exception -->Line_3 $$ int iterations = 9999[ CD ]
Line_6 $$ Class cl = Class.forName("org.apache.hadoop.util.TestReflectionUtils$LoadedInChild", false, loader)-->Line_7 $$ Object o = ReflectionUtils.newInstance(cl, null)[ FD ]
Line_2 $$ public void testCacheDoesntLeak() throws Exception -->Line_4 $$ for (int i = 0; i < iterations; i++) [ CD ]
Line_4 $$ for (int i = 0; i < iterations; i++) -->Line_7 $$ Object o = ReflectionUtils.newInstance(cl, null)[ CD ]
Line_7 $$ Object o = ReflectionUtils.newInstance(cl, null)-->Line_8 $$ assertEquals(cl, o.getClass())[ FD ]
Line_6 $$ Class cl = Class.forName("org.apache.hadoop.util.TestReflectionUtils$LoadedInChild", false, loader)-->Line_8 $$ assertEquals(cl, o.getClass())[ FD ]
Line_4 $$ for (int i = 0; i < iterations; i++) -->Line_5 $$ URLClassLoader loader = new URLClassLoader(new URL[0], getClass().getClassLoader())[ CD ]
Line_2 $$ public void testCacheDoesntLeak() throws Exception -->Line_11 $$ assertTrue(cacheSize() + " too big", cacheSize() < iterations)[ CD ]
