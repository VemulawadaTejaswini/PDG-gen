Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_37 $$ setIncludeSynonyms.invoke(con, Boolean.TRUE)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_23 $$ if (!isOracleCon) [ CD ]
Line_8 $$ Connection con = databaseMetaData.getConnection()-->Line_35 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)[ FD ]
Line_16 $$ isOracleCon = oracleConClass.isInstance(con)-->Line_21 $$ isOracleCon = false[ FD ]
Line_32 $$ Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms", (Class[]) null)-->Line_34 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)[ FD ]
Line_30 $$ Boolean originalValueForIncludeSynonyms-->Line_34 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)[ FD ]
Line_23 $$ if (!isOracleCon) -->Line_25 $$ super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName)[ CD ]
Line_35 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)-->Line_37 $$ setIncludeSynonyms.invoke(con, Boolean.TRUE)[ FD ]
Line_21 $$ isOracleCon = false-->Line_23 $$ if (!isOracleCon) [ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_5 $$ super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName)[ FD ]
Line_13 $$ boolean isOracleCon-->Line_21 $$ isOracleCon = false[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_3 $$ if (!this.includeSynonyms) [ CD ]
Line_8 $$ Connection con = databaseMetaData.getConnection()-->Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)[ FD ]
Line_18 $$ if (logger.isInfoEnabled()) -->Line_19 $$ logger.info("Couldn't find Oracle JDBC API: " + ex)[ CD ]
Line_8 $$ Connection con = databaseMetaData.getConnection()-->Line_37 $$ setIncludeSynonyms.invoke(con, Boolean.TRUE)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_28 $$ logger.debug("Including synonyms in table metadata lookup")[ CD ]
Line_29 $$ Method setIncludeSynonyms-->Line_43 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_3 $$ if (!this.includeSynonyms) -->Line_4 $$ logger.debug("Defaulting to no synonyms in table metadata lookup")[ CD ]
Line_15 $$ Class<?> oracleConClass = con.getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection")-->Line_16 $$ isOracleCon = oracleConClass.isInstance(con)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_10 $$ if (nativeJdbcExtractor != null) [ CD ]
Line_16 $$ isOracleCon = oracleConClass.isInstance(con)-->Line_23 $$ if (!isOracleCon) [ FD ]
Line_35 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)-->Line_36 $$ ReflectionUtils.makeAccessible(setIncludeSynonyms)[ FD ]
Line_8 $$ Connection con = databaseMetaData.getConnection()-->Line_15 $$ Class<?> oracleConClass = con.getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection")[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_8 $$ Connection con = databaseMetaData.getConnection()[ CD ]
Line_30 $$ Boolean originalValueForIncludeSynonyms-->Line_43 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_9 $$ NativeJdbcExtractor nativeJdbcExtractor = getNativeJdbcExtractor()[ CD ]
Line_34 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)-->Line_43 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_8 $$ Connection con = databaseMetaData.getConnection()-->Line_32 $$ Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms", (Class[]) null)[ FD ]
Line_8 $$ Connection con = databaseMetaData.getConnection()-->Line_16 $$ isOracleCon = oracleConClass.isInstance(con)[ FD ]
Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_15 $$ Class<?> oracleConClass = con.getClass().getClassLoader().loadClass("oracle.jdbc.OracleConnection")[ FD ]
Line_23 $$ if (!isOracleCon) -->Line_24 $$ logger.warn("Unable to include synonyms in table metadata lookup. Connection used for " + "DatabaseMetaData is not recognized as an Oracle connection: " + con)[ CD ]
Line_13 $$ boolean isOracleCon-->Line_16 $$ isOracleCon = oracleConClass.isInstance(con)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_29 $$ Method setIncludeSynonyms[ CD ]
Line_8 $$ Connection con = databaseMetaData.getConnection()-->Line_34 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)[ FD ]
Line_35 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)-->Line_43 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_23 $$ if (!isOracleCon) -->Line_26 $$ return[ CD ]
Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_32 $$ Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms", (Class[]) null)[ FD ]
Line_9 $$ NativeJdbcExtractor nativeJdbcExtractor = getNativeJdbcExtractor()-->Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)[ FD ]
Line_3 $$ if (!this.includeSynonyms) -->Line_6 $$ return[ CD ]
Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_34 $$ originalValueForIncludeSynonyms = (Boolean) getIncludeSynonyms.invoke(con)[ FD ]
Line_29 $$ Method setIncludeSynonyms-->Line_35 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_13 $$ boolean isOracleCon[ CD ]
Line_13 $$ boolean isOracleCon-->Line_23 $$ if (!isOracleCon) [ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_8 $$ Connection con = databaseMetaData.getConnection()[ FD ]
Line_32 $$ Method getIncludeSynonyms = con.getClass().getMethod("getIncludeSynonyms", (Class[]) null)-->Line_33 $$ ReflectionUtils.makeAccessible(getIncludeSynonyms)[ FD ]
Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_16 $$ isOracleCon = oracleConClass.isInstance(con)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_30 $$ Boolean originalValueForIncludeSynonyms[ CD ]
Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_35 $$ setIncludeSynonyms = con.getClass().getMethod("setIncludeSynonyms", boolean.class)[ FD ]
Line_29 $$ Method setIncludeSynonyms-->Line_37 $$ setIncludeSynonyms.invoke(con, Boolean.TRUE)[ FD ]
Line_8 $$ Connection con = databaseMetaData.getConnection()-->Line_43 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_25 $$ super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName)[ FD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_41 $$ super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName)[ FD ]
Line_9 $$ NativeJdbcExtractor nativeJdbcExtractor = getNativeJdbcExtractor()-->Line_10 $$ if (nativeJdbcExtractor != null) [ FD ]
Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)-->Line_43 $$ setIncludeSynonyms.invoke(con, originalValueForIncludeSynonyms)[ FD ]
Line_29 $$ Method setIncludeSynonyms-->Line_36 $$ ReflectionUtils.makeAccessible(setIncludeSynonyms)[ FD ]
Line_3 $$ if (!this.includeSynonyms) -->Line_5 $$ super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName)[ CD ]
Line_10 $$ if (nativeJdbcExtractor != null) -->Line_11 $$ con = nativeJdbcExtractor.getNativeConnection(con)[ CD ]
Line_2 $$ public void initializeWithTableColumnMetaData(DatabaseMetaData databaseMetaData, String catalogName, String schemaName, String tableName) throws SQLException -->Line_41 $$ super.initializeWithTableColumnMetaData(databaseMetaData, catalogName, schemaName, tableName)[ CD ]
