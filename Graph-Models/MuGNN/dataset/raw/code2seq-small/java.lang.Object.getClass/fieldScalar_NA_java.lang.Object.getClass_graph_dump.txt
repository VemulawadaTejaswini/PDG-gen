Line_2 $$ public void fieldScalar() throws Exception -->Line_5 $$ assertFalse(typeDescriptor.isArray())[ CD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField("fieldScalar"))-->Line_4 $$ assertFalse(typeDescriptor.isPrimitive())[ FD ]
Line_2 $$ public void fieldScalar() throws Exception -->Line_4 $$ assertFalse(typeDescriptor.isPrimitive())[ CD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField("fieldScalar"))-->Line_7 $$ assertFalse(typeDescriptor.isMap())[ FD ]
Line_2 $$ public void fieldScalar() throws Exception -->Line_7 $$ assertFalse(typeDescriptor.isMap())[ CD ]
Line_2 $$ public void fieldScalar() throws Exception -->Line_9 $$ assertEquals(Integer.class, typeDescriptor.getObjectType())[ CD ]
Line_2 $$ public void fieldScalar() throws Exception -->Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField("fieldScalar"))[ CD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField("fieldScalar"))-->Line_5 $$ assertFalse(typeDescriptor.isArray())[ FD ]
Line_2 $$ public void fieldScalar() throws Exception -->Line_6 $$ assertFalse(typeDescriptor.isCollection())[ CD ]
Line_2 $$ public void fieldScalar() throws Exception -->Line_8 $$ assertEquals(Integer.class, typeDescriptor.getType())[ CD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField("fieldScalar"))-->Line_9 $$ assertEquals(Integer.class, typeDescriptor.getObjectType())[ FD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField("fieldScalar"))-->Line_6 $$ assertFalse(typeDescriptor.isCollection())[ FD ]
Line_3 $$ TypeDescriptor typeDescriptor = new TypeDescriptor(getClass().getField("fieldScalar"))-->Line_8 $$ assertEquals(Integer.class, typeDescriptor.getType())[ FD ]
