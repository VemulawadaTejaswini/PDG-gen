Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_3 $$ if (entity instanceof SelfDirtinessTracker) [ CD ]
Line_12 $$ if (generatedId == IdentifierGeneratorHelper.POST_INSERT_INDICATOR) -->Line_18 $$ return performSave(entity, generatedId, persister, false, anything, source, true)[ CD ]
Line_7 $$ Serializable generatedId = persister.getIdentifierGenerator().generate(source, entity)-->Line_18 $$ return performSave(entity, generatedId, persister, false, anything, source, true)[ FD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_11 $$ return source.getIdentifier(entity)[ FD ]
Line_12 $$ if (generatedId == IdentifierGeneratorHelper.POST_INSERT_INDICATOR) -->Line_15 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_7 $$ Serializable generatedId = persister.getIdentifierGenerator().generate(source, entity)-->Line_8 $$ if (generatedId == null) [ FD ]
Line_12 $$ if (generatedId == IdentifierGeneratorHelper.POST_INSERT_INDICATOR) -->Line_13 $$ return performSave(entity, null, persister, true, anything, source, requiresImmediateIdAccess)[ CD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_16 $$ LOG.debugf("Generated identifier: %s, using strategy: %s", persister.getIdentifierType().toLoggableString(generatedId, source.getFactory()), persister.getIdentifierGenerator().getClass().getName())[ FD ]
Line_7 $$ Serializable generatedId = persister.getIdentifierGenerator().generate(source, entity)-->Line_10 $$ if (generatedId == IdentifierGeneratorHelper.SHORT_CIRCUIT_INDICATOR) [ FD ]
Line_6 $$ EntityPersister persister = source.getEntityPersister(entityName, entity)-->Line_16 $$ LOG.debugf("Generated identifier: %s, using strategy: %s", persister.getIdentifierType().toLoggableString(generatedId, source.getFactory()), persister.getIdentifierGenerator().getClass().getName())[ FD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_3 $$ if (entity instanceof SelfDirtinessTracker) [ FD ]
Line_15 $$ if (LOG.isDebugEnabled()) -->Line_16 $$ LOG.debugf("Generated identifier: %s, using strategy: %s", persister.getIdentifierType().toLoggableString(generatedId, source.getFactory()), persister.getIdentifierGenerator().getClass().getName())[ CD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_6 $$ EntityPersister persister = source.getEntityPersister(entityName, entity)[ CD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_8 $$ if (generatedId == null) [ CD ]
Line_8 $$ if (generatedId == null) -->Line_10 $$ if (generatedId == IdentifierGeneratorHelper.SHORT_CIRCUIT_INDICATOR) [ CD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_7 $$ Serializable generatedId = persister.getIdentifierGenerator().generate(source, entity)[ CD ]
Line_6 $$ EntityPersister persister = source.getEntityPersister(entityName, entity)-->Line_7 $$ Serializable generatedId = persister.getIdentifierGenerator().generate(source, entity)[ FD ]
Line_10 $$ if (generatedId == IdentifierGeneratorHelper.SHORT_CIRCUIT_INDICATOR) -->Line_12 $$ if (generatedId == IdentifierGeneratorHelper.POST_INSERT_INDICATOR) [ CD ]
Line_6 $$ EntityPersister persister = source.getEntityPersister(entityName, entity)-->Line_13 $$ return performSave(entity, null, persister, true, anything, source, requiresImmediateIdAccess)[ FD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_13 $$ return performSave(entity, null, persister, true, anything, source, requiresImmediateIdAccess)[ FD ]
Line_7 $$ Serializable generatedId = persister.getIdentifierGenerator().generate(source, entity)-->Line_16 $$ LOG.debugf("Generated identifier: %s, using strategy: %s", persister.getIdentifierType().toLoggableString(generatedId, source.getFactory()), persister.getIdentifierGenerator().getClass().getName())[ FD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_7 $$ Serializable generatedId = persister.getIdentifierGenerator().generate(source, entity)[ FD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_18 $$ return performSave(entity, generatedId, persister, false, anything, source, true)[ FD ]
Line_6 $$ EntityPersister persister = source.getEntityPersister(entityName, entity)-->Line_18 $$ return performSave(entity, generatedId, persister, false, anything, source, true)[ FD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_6 $$ EntityPersister persister = source.getEntityPersister(entityName, entity)[ FD ]
Line_2 $$ protected Serializable saveWithGeneratedId(Object entity, String entityName, Object anything, EventSource source, boolean requiresImmediateIdAccess) -->Line_9 $$ throw new IdentifierGenerationException("null id generated for:" + entity.getClass())[ FD ]
Line_7 $$ Serializable generatedId = persister.getIdentifierGenerator().generate(source, entity)-->Line_12 $$ if (generatedId == IdentifierGeneratorHelper.POST_INSERT_INDICATOR) [ FD ]
Line_10 $$ if (generatedId == IdentifierGeneratorHelper.SHORT_CIRCUIT_INDICATOR) -->Line_11 $$ return source.getIdentifier(entity)[ CD ]
