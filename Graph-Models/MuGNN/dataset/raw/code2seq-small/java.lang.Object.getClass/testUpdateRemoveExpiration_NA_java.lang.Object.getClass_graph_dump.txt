Line_20 $$ if (removeSucceeded) -->Line_30 $$ assertEquals(value, entityCache.get(itemId))[ CD ]
Line_17 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_25 $$ assertEquals(Collections.EMPTY_MAP, contents)[ FD ]
Line_20 $$ if (removeSucceeded) -->Line_29 $$ TIME_SERVICE.advance(TIMEOUT + 1)[ CD ]
Line_8 $$ Future<Boolean> second = removeFlushWait(itemId, loadBarrier, preFlushLatch, null, commitLatch)-->Line_16 $$ boolean removeSucceeded = second.get(WAIT_TIMEOUT, TimeUnit.SECONDS)[ FD ]
Line_20 $$ if (removeSucceeded) -->Line_24 $$ contents = Caches.entrySet(entityCache).toMap()[ CD ]
Line_10 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_11 $$ assertEquals(1, contents.size())[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_8 $$ Future<Boolean> second = removeFlushWait(itemId, loadBarrier, preFlushLatch, null, commitLatch)[ CD ]
Line_10 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_25 $$ assertEquals(Collections.EMPTY_MAP, contents)[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_20 $$ if (removeSucceeded) [ CD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_3 $$ CyclicBarrier loadBarrier = new CyclicBarrier(2)[ CD ]
Line_17 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_24 $$ contents = Caches.entrySet(entityCache).toMap()[ FD ]
Line_20 $$ if (removeSucceeded) -->Line_27 $$ assertNotNull(value)[ CD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_12 $$ assertEquals(FutureUpdate.class, contents.get(itemId).getClass())[ CD ]
Line_10 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_18 $$ assertEquals(1, contents.size())[ FD ]
Line_3 $$ CyclicBarrier loadBarrier = new CyclicBarrier(2)-->Line_8 $$ Future<Boolean> second = removeFlushWait(itemId, loadBarrier, preFlushLatch, null, commitLatch)[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_9 $$ awaitOrThrow(flushLatch)[ CD ]
Line_10 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_24 $$ contents = Caches.entrySet(entityCache).toMap()[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_13 $$ preFlushLatch.countDown()[ CD ]
Line_20 $$ if (removeSucceeded) -->Line_28 $$ assertEquals(StandardCacheEntryImpl.class, value.getClass())[ CD ]
Line_10 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_17 $$ contents = Caches.entrySet(entityCache).toMap()[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_18 $$ assertEquals(1, contents.size())[ CD ]
Line_6 $$ CountDownLatch commitLatch = new CountDownLatch(1)-->Line_14 $$ commitLatch.countDown()[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_7 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ CD ]
Line_10 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_19 $$ Object value = contents.get(itemId)[ FD ]
Line_17 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_19 $$ Object value = contents.get(itemId)[ FD ]
Line_6 $$ CountDownLatch commitLatch = new CountDownLatch(1)-->Line_8 $$ Future<Boolean> second = removeFlushWait(itemId, loadBarrier, preFlushLatch, null, commitLatch)[ FD ]
Line_20 $$ if (removeSucceeded) -->Line_25 $$ assertEquals(Collections.EMPTY_MAP, contents)[ CD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_10 $$ Map contents = Caches.entrySet(entityCache).toMap()[ CD ]
Line_5 $$ CountDownLatch flushLatch = new CountDownLatch(1)-->Line_7 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_7 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)-->Line_15 $$ first.get(WAIT_TIMEOUT, TimeUnit.SECONDS)[ FD ]
Line_17 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_18 $$ assertEquals(1, contents.size())[ FD ]
Line_6 $$ CountDownLatch commitLatch = new CountDownLatch(1)-->Line_7 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_20 $$ if (removeSucceeded) -->Line_21 $$ assertEquals(Tombstone.class, value.getClass())[ CD ]
Line_24 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_25 $$ assertEquals(Collections.EMPTY_MAP, contents)[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_5 $$ CountDownLatch flushLatch = new CountDownLatch(1)[ CD ]
Line_4 $$ CountDownLatch preFlushLatch = new CountDownLatch(1)-->Line_8 $$ Future<Boolean> second = removeFlushWait(itemId, loadBarrier, preFlushLatch, null, commitLatch)[ FD ]
Line_5 $$ CountDownLatch flushLatch = new CountDownLatch(1)-->Line_9 $$ awaitOrThrow(flushLatch)[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_15 $$ first.get(WAIT_TIMEOUT, TimeUnit.SECONDS)[ CD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_17 $$ contents = Caches.entrySet(entityCache).toMap()[ CD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_19 $$ Object value = contents.get(itemId)[ CD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_14 $$ commitLatch.countDown()[ CD ]
Line_4 $$ CountDownLatch preFlushLatch = new CountDownLatch(1)-->Line_13 $$ preFlushLatch.countDown()[ FD ]
Line_10 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_12 $$ assertEquals(FutureUpdate.class, contents.get(itemId).getClass())[ FD ]
Line_20 $$ if (removeSucceeded) -->Line_23 $$ assertNull(entityCache.get(itemId))[ CD ]
Line_19 $$ Object value = contents.get(itemId)-->Line_30 $$ assertEquals(value, entityCache.get(itemId))[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_4 $$ CountDownLatch preFlushLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_6 $$ CountDownLatch commitLatch = new CountDownLatch(1)[ CD ]
Line_3 $$ CyclicBarrier loadBarrier = new CyclicBarrier(2)-->Line_7 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_19 $$ Object value = contents.get(itemId)-->Line_28 $$ assertEquals(StandardCacheEntryImpl.class, value.getClass())[ FD ]
Line_19 $$ Object value = contents.get(itemId)-->Line_21 $$ assertEquals(Tombstone.class, value.getClass())[ FD ]
Line_19 $$ Object value = contents.get(itemId)-->Line_27 $$ assertNotNull(value)[ FD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_11 $$ assertEquals(1, contents.size())[ CD ]
Line_2 $$ public void testUpdateRemoveExpiration() throws Exception -->Line_16 $$ boolean removeSucceeded = second.get(WAIT_TIMEOUT, TimeUnit.SECONDS)[ CD ]
Line_20 $$ if (removeSucceeded) -->Line_22 $$ TIME_SERVICE.advance(TIMEOUT + 1)[ CD ]
