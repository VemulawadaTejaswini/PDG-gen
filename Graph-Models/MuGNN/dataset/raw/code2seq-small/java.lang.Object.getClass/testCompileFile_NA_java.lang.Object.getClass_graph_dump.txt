Line_8 $$ File inputFile = new File(testDir, "input.scss")-->Line_9 $$ if (!inputFile.exists()) [ FD ]
Line_8 $$ File inputFile = new File(testDir, "input.scss")-->Line_12 $$ String actualOutput = sassCompiler.compileFile(inputFile.getCanonicalPath(), "", false)[ FD ]
Line_2 $$ public void testCompileFile() throws Exception -->Line_6 $$ File sassSpecDir = new File(url.toURI())[ CD ]
Line_2 $$ public void testCompileFile() throws Exception -->Line_5 $$ URL url = clazz.getResource("dependencies/sass-spec")[ CD ]
Line_12 $$ String actualOutput = sassCompiler.compileFile(inputFile.getCanonicalPath(), "", false)-->Line_13 $$ Assert.assertNotNull(actualOutput)[ FD ]
Line_2 $$ public void testCompileFile() throws Exception -->Line_4 $$ Class<?> clazz = getClass()[ CD ]
Line_6 $$ File sassSpecDir = new File(url.toURI())-->Line_7 $$ for (File testDir : sassSpecDir.listFiles()) [ FD ]
Line_15 $$ String expectedOutput = read(expectedOutputFile.toPath())-->Line_16 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ FD ]
Line_2 $$ public void testCompileFile() throws Exception -->Line_3 $$ SassCompiler sassCompiler = new JniSassCompiler()[ CD ]
Line_3 $$ SassCompiler sassCompiler = new JniSassCompiler()-->Line_12 $$ String actualOutput = sassCompiler.compileFile(inputFile.getCanonicalPath(), "", false)[ FD ]
Line_12 $$ String actualOutput = sassCompiler.compileFile(inputFile.getCanonicalPath(), "", false)-->Line_16 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ FD ]
Line_5 $$ URL url = clazz.getResource("dependencies/sass-spec")-->Line_6 $$ File sassSpecDir = new File(url.toURI())[ FD ]
Line_4 $$ Class<?> clazz = getClass()-->Line_5 $$ URL url = clazz.getResource("dependencies/sass-spec")[ FD ]
Line_14 $$ File expectedOutputFile = new File(testDir, "expected_output.css")-->Line_15 $$ String expectedOutput = read(expectedOutputFile.toPath())[ FD ]
