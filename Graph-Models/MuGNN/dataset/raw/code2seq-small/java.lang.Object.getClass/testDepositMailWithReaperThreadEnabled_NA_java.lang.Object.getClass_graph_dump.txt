Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_29 $$ Assert.assertSame(reaperThread, RecorderUncaughtExceptionHandler._thread)[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_5 $$ Assert.assertEquals(0, MailboxUtil.depositMail(ByteBuffer.allocate(0)))[ CD ]
Line_9 $$ Thread reaperThread = null-->Line_32 $$ Assert.assertFalse(reaperThread.isAlive())[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_19 $$ Assert.assertTrue(reaperThread.isAlive())[ CD ]
Line_10 $$ for (Thread thread : ThreadUtil.getThreads()) -->Line_11 $$ if ((thread != null) && thread.getName().equals(MailboxUtil.class.getName())) [ FD ]
Line_9 $$ Thread reaperThread = null-->Line_18 $$ while (reaperThread.isInterrupted()) [ FD ]
Line_23 $$ RecorderUncaughtExceptionHandler recorderUncaughtExceptionHandler = new RecorderUncaughtExceptionHandler()-->Line_26 $$ recorderUncaughtExceptionHandler.await(10 * Time.MINUTE)[ FD ]
Line_9 $$ Thread reaperThread = null-->Line_16 $$ Assert.assertNotNull(reaperThread)[ FD ]
Line_12 $$ reaperThread = thread-->Line_28 $$ Assert.assertFalse("Reaper thread " + reaperThread + " failed to join back after waiting for 10 mins", reaperThread.isAlive())[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_27 $$ reaperThread.join()[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_17 $$ reaperThread.interrupt()[ CD ]
Line_12 $$ reaperThread = thread-->Line_24 $$ reaperThread.setUncaughtExceptionHandler(recorderUncaughtExceptionHandler)[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_23 $$ RecorderUncaughtExceptionHandler recorderUncaughtExceptionHandler = new RecorderUncaughtExceptionHandler()[ CD ]
Line_23 $$ RecorderUncaughtExceptionHandler recorderUncaughtExceptionHandler = new RecorderUncaughtExceptionHandler()-->Line_24 $$ reaperThread.setUncaughtExceptionHandler(recorderUncaughtExceptionHandler)[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_32 $$ Assert.assertFalse(reaperThread.isAlive())[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_25 $$ overdueMailQueue.offer(createReceiptStub())[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_18 $$ while (reaperThread.isInterrupted()) [ CD ]
Line_9 $$ Thread reaperThread = null-->Line_27 $$ reaperThread.join()[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_22 $$ ReceiptStubAdvice._throwException = true[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_20 $$ BlockingQueue<Object> overdueMailQueue = ReflectionTestUtil.getFieldValue(MailboxUtil.class, "_overdueMailQueue")[ CD ]
Line_9 $$ Thread reaperThread = null-->Line_28 $$ Assert.assertFalse("Reaper thread " + reaperThread + " failed to join back after waiting for 10 mins", reaperThread.isAlive())[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_28 $$ Assert.assertFalse("Reaper thread " + reaperThread + " failed to join back after waiting for 10 mins", reaperThread.isAlive())[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_9 $$ Thread reaperThread = null[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_8 $$ Assert.assertEquals(3, MailboxUtil.depositMail(ByteBuffer.allocate(0)))[ CD ]
Line_11 $$ if ((thread != null) && thread.getName().equals(MailboxUtil.class.getName())) -->Line_12 $$ reaperThread = thread[ CD ]
Line_12 $$ reaperThread = thread-->Line_29 $$ Assert.assertSame(reaperThread, RecorderUncaughtExceptionHandler._thread)[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_30 $$ Throwable throwable = RecorderUncaughtExceptionHandler._throwable[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_24 $$ reaperThread.setUncaughtExceptionHandler(recorderUncaughtExceptionHandler)[ CD ]
Line_9 $$ Thread reaperThread = null-->Line_17 $$ reaperThread.interrupt()[ FD ]
Line_20 $$ BlockingQueue<Object> overdueMailQueue = ReflectionTestUtil.getFieldValue(MailboxUtil.class, "_overdueMailQueue")-->Line_25 $$ overdueMailQueue.offer(createReceiptStub())[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_31 $$ Assert.assertSame(IllegalStateException.class, throwable.getClass())[ CD ]
Line_12 $$ reaperThread = thread-->Line_19 $$ Assert.assertTrue(reaperThread.isAlive())[ FD ]
Line_12 $$ reaperThread = thread-->Line_32 $$ Assert.assertFalse(reaperThread.isAlive())[ FD ]
Line_9 $$ Thread reaperThread = null-->Line_29 $$ Assert.assertSame(reaperThread, RecorderUncaughtExceptionHandler._thread)[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_6 $$ Assert.assertEquals(1, MailboxUtil.depositMail(ByteBuffer.allocate(0)))[ CD ]
Line_12 $$ reaperThread = thread-->Line_27 $$ reaperThread.join()[ FD ]
Line_30 $$ Throwable throwable = RecorderUncaughtExceptionHandler._throwable-->Line_31 $$ Assert.assertSame(IllegalStateException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_3 $$ PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_REAPER_THREAD_ENABLED, Boolean.TRUE.toString())[ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_4 $$ PropsUtilAdvice.setProps(PropsKeys.INTRABAND_MAILBOX_STORAGE_LIFE, String.valueOf(0))[ CD ]
Line_9 $$ Thread reaperThread = null-->Line_19 $$ Assert.assertTrue(reaperThread.isAlive())[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_7 $$ Assert.assertEquals(2, MailboxUtil.depositMail(ByteBuffer.allocate(0)))[ CD ]
Line_12 $$ reaperThread = thread-->Line_17 $$ reaperThread.interrupt()[ FD ]
Line_9 $$ Thread reaperThread = null-->Line_24 $$ reaperThread.setUncaughtExceptionHandler(recorderUncaughtExceptionHandler)[ FD ]
Line_12 $$ reaperThread = thread-->Line_16 $$ Assert.assertNotNull(reaperThread)[ FD ]
Line_12 $$ reaperThread = thread-->Line_18 $$ while (reaperThread.isInterrupted()) [ FD ]
Line_20 $$ BlockingQueue<Object> overdueMailQueue = ReflectionTestUtil.getFieldValue(MailboxUtil.class, "_overdueMailQueue")-->Line_21 $$ while (!overdueMailQueue.isEmpty()) [ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_21 $$ while (!overdueMailQueue.isEmpty()) [ CD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_16 $$ Assert.assertNotNull(reaperThread)[ CD ]
Line_10 $$ for (Thread thread : ThreadUtil.getThreads()) -->Line_12 $$ reaperThread = thread[ FD ]
Line_9 $$ Thread reaperThread = null-->Line_12 $$ reaperThread = thread[ FD ]
Line_2 $$ public void testDepositMailWithReaperThreadEnabled() throws Exception -->Line_26 $$ recorderUncaughtExceptionHandler.await(10 * Time.MINUTE)[ CD ]
