Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_24 $$ fixTransportAddress(createLdapServer, hostname)[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_10 $$ final SchemaManager schemaManager = directoryService1.getSchemaManager()[ CD ]
Line_8 $$ final String ldifContent = StrSubstitutor.replace(IOUtils.toString(LdapExtLoginModuleTestCase.class.getResourceAsStream(LdapExtLoginModuleTestCase.class.getSimpleName() + ".ldif"), "UTF-8"), map)-->Line_9 $$ LOGGER.debug(ldifContent)[ FD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_19 $$ final ManagedCreateLdapServer createLdapServer = new ManagedCreateLdapServer((CreateLdapServer) AnnotationUtils.getInstance(CreateLdapServer.class))[ CD ]
Line_19 $$ final ManagedCreateLdapServer createLdapServer = new ManagedCreateLdapServer((CreateLdapServer) AnnotationUtils.getInstance(CreateLdapServer.class))-->Line_24 $$ fixTransportAddress(createLdapServer, hostname)[ FD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_4 $$ final Map<String, String> map = new HashMap<String, String>()[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_22 $$ fos.close()[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_9 $$ LOGGER.debug(ldifContent)[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_6 $$ map.put("ldapPort2", Integer.toString(LDAP_PORT2))[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_8 $$ final String ldifContent = StrSubstitutor.replace(IOUtils.toString(LdapExtLoginModuleTestCase.class.getResourceAsStream(LdapExtLoginModuleTestCase.class.getSimpleName() + ".ldif"), "UTF-8"), map)[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_7 $$ directoryService1 = DSAnnotationProcessor.getDirectoryService()[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_21 $$ IOUtils.copy(getClass().getResourceAsStream(KEYSTORE_FILENAME), fos)[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_25 $$ ldapServer1 = ServerAnnotationProcessor.instantiateLdapServer(createLdapServer, directoryService1)[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_27 $$ LOGGER.info("ldapServer1 = " + ldapServer1)[ CD ]
Line_4 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_6 $$ map.put("ldapPort2", Integer.toString(LDAP_PORT2))[ FD ]
Line_20 $$ FileOutputStream fos = new FileOutputStream(KEYSTORE_FILE)-->Line_22 $$ fos.close()[ FD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_23 $$ createLdapServer.setKeyStore(KEYSTORE_FILE.getAbsolutePath())[ CD ]
Line_4 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_8 $$ final String ldifContent = StrSubstitutor.replace(IOUtils.toString(LdapExtLoginModuleTestCase.class.getResourceAsStream(LdapExtLoginModuleTestCase.class.getSimpleName() + ".ldif"), "UTF-8"), map)[ FD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_5 $$ map.put("hostname", NetworkUtils.formatPossibleIpv6Address(hostname))[ CD ]
Line_19 $$ final ManagedCreateLdapServer createLdapServer = new ManagedCreateLdapServer((CreateLdapServer) AnnotationUtils.getInstance(CreateLdapServer.class))-->Line_25 $$ ldapServer1 = ServerAnnotationProcessor.instantiateLdapServer(createLdapServer, directoryService1)[ FD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_24 $$ fixTransportAddress(createLdapServer, hostname)[ FD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_20 $$ FileOutputStream fos = new FileOutputStream(KEYSTORE_FILE)[ CD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_26 $$ ldapServer1.start()[ CD ]
Line_8 $$ final String ldifContent = StrSubstitutor.replace(IOUtils.toString(LdapExtLoginModuleTestCase.class.getResourceAsStream(LdapExtLoginModuleTestCase.class.getSimpleName() + ".ldif"), "UTF-8"), map)-->Line_12 $$ for (LdifEntry ldifEntry : new LdifReader(IOUtils.toInputStream(ldifContent))) [ FD ]
Line_20 $$ FileOutputStream fos = new FileOutputStream(KEYSTORE_FILE)-->Line_21 $$ IOUtils.copy(getClass().getResourceAsStream(KEYSTORE_FILENAME), fos)[ FD ]
Line_19 $$ final ManagedCreateLdapServer createLdapServer = new ManagedCreateLdapServer((CreateLdapServer) AnnotationUtils.getInstance(CreateLdapServer.class))-->Line_23 $$ createLdapServer.setKeyStore(KEYSTORE_FILE.getAbsolutePath())[ FD ]
Line_4 $$ final Map<String, String> map = new HashMap<String, String>()-->Line_5 $$ map.put("hostname", NetworkUtils.formatPossibleIpv6Address(hostname))[ FD ]
Line_2 $$ public void createLdap1(final String hostname) throws Exception, IOException, ClassNotFoundException, FileNotFoundException -->Line_5 $$ map.put("hostname", NetworkUtils.formatPossibleIpv6Address(hostname))[ FD ]
Line_12 $$ for (LdifEntry ldifEntry : new LdifReader(IOUtils.toInputStream(ldifContent))) -->Line_13 $$ directoryService1.getAdminSession().add(new DefaultEntry(schemaManager, ldifEntry.getEntry()))[ FD ]
