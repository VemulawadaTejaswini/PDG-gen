Line_5 $$ String all = FileCopyUtils.copyToString(new InputStreamReader(resource.getInputStream()))-->Line_6 $$ all = all.replace("\r\n", "\n")[ FD ]
Line_2 $$ private String fetchMacro(String name) throws Exception -->Line_13 $$ return null[ CD ]
Line_6 $$ all = all.replace("\r\n", "\n")-->Line_7 $$ String[] macros = StringUtils.delimitedListToStringArray(all, "\n\n")[ FD ]
Line_2 $$ private String fetchMacro(String name) throws Exception -->Line_4 $$ assertTrue(resource.exists())[ CD ]
Line_3 $$ ClassPathResource resource = new ClassPathResource("test.ftl", getClass())-->Line_4 $$ assertTrue(resource.exists())[ FD ]
Line_8 $$ for (String macro : macros) -->Line_10 $$ return macro.substring(macro.indexOf("\n")).trim()[ FD ]
Line_3 $$ ClassPathResource resource = new ClassPathResource("test.ftl", getClass())-->Line_5 $$ String all = FileCopyUtils.copyToString(new InputStreamReader(resource.getInputStream()))[ FD ]
Line_5 $$ String all = FileCopyUtils.copyToString(new InputStreamReader(resource.getInputStream()))-->Line_7 $$ String[] macros = StringUtils.delimitedListToStringArray(all, "\n\n")[ FD ]
Line_2 $$ private String fetchMacro(String name) throws Exception -->Line_5 $$ String all = FileCopyUtils.copyToString(new InputStreamReader(resource.getInputStream()))[ CD ]
Line_9 $$ if (macro.startsWith(name)) -->Line_10 $$ return macro.substring(macro.indexOf("\n")).trim()[ CD ]
Line_2 $$ private String fetchMacro(String name) throws Exception -->Line_7 $$ String[] macros = StringUtils.delimitedListToStringArray(all, "\n\n")[ CD ]
Line_2 $$ private String fetchMacro(String name) throws Exception -->Line_9 $$ if (macro.startsWith(name)) [ FD ]
Line_2 $$ private String fetchMacro(String name) throws Exception -->Line_6 $$ all = all.replace("\r\n", "\n")[ CD ]
Line_8 $$ for (String macro : macros) -->Line_9 $$ if (macro.startsWith(name)) [ FD ]
Line_2 $$ private String fetchMacro(String name) throws Exception -->Line_3 $$ ClassPathResource resource = new ClassPathResource("test.ftl", getClass())[ CD ]
