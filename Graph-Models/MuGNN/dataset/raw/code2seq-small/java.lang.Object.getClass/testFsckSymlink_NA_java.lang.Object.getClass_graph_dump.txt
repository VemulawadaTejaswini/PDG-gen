Line_14 $$ final String fileName = "/srcdat"-->Line_15 $$ util.createFiles(fs, fileName)[ FD ]
Line_18 $$ final Path symlink = new Path("/srcdat-symlink")-->Line_26 $$ assertEquals(aTime, fc.getFileStatus(symlink).getAccessTime())[ FD ]
Line_4 $$ final Configuration conf = new HdfsConfiguration()-->Line_11 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 10000L)[ FD ]
Line_9 $$ final long precision = 1L-->Line_22 $$ Thread.sleep(precision)[ FD ]
Line_7 $$ FileSystem fs = null-->Line_32 $$ if (fs != null) [ FD ]
Line_16 $$ final FileContext fc = FileContext.getFileContext(cluster.getConfiguration(0))-->Line_19 $$ fc.createSymlink(file, symlink, false)[ FD ]
Line_3 $$ final DFSTestUtil util = new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(1).build()-->Line_20 $$ util.waitReplication(fs, fileName, (short) 3)[ FD ]
Line_24 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_28 $$ assertTrue(outStr.contains(NamenodeFsck.HEALTHY_STATUS))[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_38 $$ if (cluster != null) [ FD ]
Line_9 $$ final long precision = 1L-->Line_10 $$ conf.setLong(DFSConfigKeys.DFS_NAMENODE_ACCESSTIME_PRECISION_KEY, precision)[ FD ]
Line_3 $$ final DFSTestUtil util = new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(1).build()-->Line_15 $$ util.createFiles(fs, fileName)[ FD ]
Line_13 $$ fs = cluster.getFileSystem()-->Line_30 $$ util.cleanup(fs, fileName)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()[ FD ]
Line_7 $$ FileSystem fs = null-->Line_30 $$ util.cleanup(fs, fileName)[ FD ]
Line_21 $$ long aTime = fc.getFileStatus(symlink).getAccessTime()-->Line_26 $$ assertEquals(aTime, fc.getFileStatus(symlink).getAccessTime())[ FD ]
Line_18 $$ final Path symlink = new Path("/srcdat-symlink")-->Line_19 $$ fc.createSymlink(file, symlink, false)[ FD ]
Line_7 $$ FileSystem fs = null-->Line_34 $$ fs.close()[ FD ]
Line_2 $$ public void testFsckSymlink() throws Exception -->Line_3 $$ final DFSTestUtil util = new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(1).build()[ CD ]
Line_13 $$ fs = cluster.getFileSystem()-->Line_20 $$ util.waitReplication(fs, fileName, (short) 3)[ FD ]
Line_24 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_27 $$ System.out.println(outStr)[ FD ]
Line_2 $$ public void testFsckSymlink() throws Exception -->Line_6 $$ MiniDFSCluster cluster = null[ CD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_39 $$ cluster.shutdown()[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_16 $$ final FileContext fc = FileContext.getFileContext(cluster.getConfiguration(0))[ FD ]
Line_16 $$ final FileContext fc = FileContext.getFileContext(cluster.getConfiguration(0))-->Line_26 $$ assertEquals(aTime, fc.getFileStatus(symlink).getAccessTime())[ FD ]
Line_2 $$ public void testFsckSymlink() throws Exception -->Line_4 $$ final Configuration conf = new HdfsConfiguration()[ CD ]
Line_2 $$ public void testFsckSymlink() throws Exception -->Line_7 $$ FileSystem fs = null[ CD ]
Line_14 $$ final String fileName = "/srcdat"-->Line_30 $$ util.cleanup(fs, fileName)[ FD ]
Line_24 $$ String outStr = runFsck(conf, 0, true, "/")-->Line_29 $$ assertTrue(outStr.contains("Total symlinks:\t\t1"))[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_13 $$ fs = cluster.getFileSystem()[ FD ]
Line_7 $$ FileSystem fs = null-->Line_20 $$ util.waitReplication(fs, fileName, (short) 3)[ FD ]
Line_13 $$ fs = cluster.getFileSystem()-->Line_34 $$ fs.close()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_16 $$ final FileContext fc = FileContext.getFileContext(cluster.getConfiguration(0))[ FD ]
Line_13 $$ fs = cluster.getFileSystem()-->Line_15 $$ util.createFiles(fs, fileName)[ FD ]
Line_4 $$ final Configuration conf = new HdfsConfiguration()-->Line_10 $$ conf.setLong(DFSConfigKeys.DFS_NAMENODE_ACCESSTIME_PRECISION_KEY, precision)[ FD ]
Line_7 $$ FileSystem fs = null-->Line_15 $$ util.createFiles(fs, fileName)[ FD ]
Line_2 $$ public void testFsckSymlink() throws Exception -->Line_5 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 10000L)[ CD ]
Line_16 $$ final FileContext fc = FileContext.getFileContext(cluster.getConfiguration(0))-->Line_21 $$ long aTime = fc.getFileStatus(symlink).getAccessTime()[ FD ]
Line_38 $$ if (cluster != null) -->Line_39 $$ cluster.shutdown()[ CD ]
Line_14 $$ final String fileName = "/srcdat"-->Line_20 $$ util.waitReplication(fs, fileName, (short) 3)[ FD ]
Line_6 $$ MiniDFSCluster cluster = null-->Line_38 $$ if (cluster != null) [ FD ]
Line_4 $$ final Configuration conf = new HdfsConfiguration()-->Line_24 $$ String outStr = runFsck(conf, 0, true, "/")[ FD ]
Line_3 $$ final DFSTestUtil util = new DFSTestUtil.Builder().setName(getClass().getSimpleName()).setNumFiles(1).build()-->Line_30 $$ util.cleanup(fs, fileName)[ FD ]
Line_7 $$ FileSystem fs = null-->Line_13 $$ fs = cluster.getFileSystem()[ FD ]
Line_13 $$ fs = cluster.getFileSystem()-->Line_32 $$ if (fs != null) [ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_39 $$ cluster.shutdown()[ FD ]
Line_4 $$ final Configuration conf = new HdfsConfiguration()-->Line_5 $$ conf.setLong(DFSConfigKeys.DFS_BLOCKREPORT_INTERVAL_MSEC_KEY, 10000L)[ FD ]
Line_17 $$ final Path file = new Path(fileName)-->Line_19 $$ fc.createSymlink(file, symlink, false)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).numDataNodes(4).build()-->Line_13 $$ fs = cluster.getFileSystem()[ FD ]
Line_18 $$ final Path symlink = new Path("/srcdat-symlink")-->Line_21 $$ long aTime = fc.getFileStatus(symlink).getAccessTime()[ FD ]
