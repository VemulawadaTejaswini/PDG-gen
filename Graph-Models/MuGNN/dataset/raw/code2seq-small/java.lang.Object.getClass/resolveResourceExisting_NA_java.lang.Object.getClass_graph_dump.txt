Line_5 $$ String file = "/foo/2.3/foo.txt"-->Line_7 $$ Resource actual = this.resolver.resolveResource(this.request, file, this.locations, this.chain)[ FD ]
Line_2 $$ public void resolveResourceExisting() -->Line_5 $$ String file = "/foo/2.3/foo.txt"[ CD ]
Line_7 $$ Resource actual = this.resolver.resolveResource(this.request, file, this.locations, this.chain)-->Line_8 $$ assertEquals(expected, actual)[ FD ]
Line_2 $$ public void resolveResourceExisting() -->Line_9 $$ verify(this.chain, times(1)).resolveResource(this.request, file, this.locations)[ CD ]
Line_2 $$ public void resolveResourceExisting() -->Line_8 $$ assertEquals(expected, actual)[ CD ]
Line_3 $$ Resource expected = mock(Resource.class)-->Line_6 $$ given(this.chain.resolveResource(this.request, file, this.locations)).willReturn(expected)[ FD ]
Line_2 $$ public void resolveResourceExisting() -->Line_4 $$ this.locations = Collections.singletonList(new ClassPathResource("/META-INF/resources/webjars/", getClass()))[ CD ]
Line_3 $$ Resource expected = mock(Resource.class)-->Line_8 $$ assertEquals(expected, actual)[ FD ]
Line_2 $$ public void resolveResourceExisting() -->Line_6 $$ given(this.chain.resolveResource(this.request, file, this.locations)).willReturn(expected)[ CD ]
Line_2 $$ public void resolveResourceExisting() -->Line_7 $$ Resource actual = this.resolver.resolveResource(this.request, file, this.locations, this.chain)[ CD ]
Line_5 $$ String file = "/foo/2.3/foo.txt"-->Line_6 $$ given(this.chain.resolveResource(this.request, file, this.locations)).willReturn(expected)[ FD ]
Line_5 $$ String file = "/foo/2.3/foo.txt"-->Line_9 $$ verify(this.chain, times(1)).resolveResource(this.request, file, this.locations)[ FD ]
Line_2 $$ public void resolveResourceExisting() -->Line_3 $$ Resource expected = mock(Resource.class)[ CD ]
