Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_23 $$ ((Factory) fbProxy).setCallback(0, new MethodInterceptor() [ CD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_5 $$ enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)[ CD ]
Line_8 $$ Object fbProxy = null-->Line_18 $$ fbProxy = fbClass.newInstance()[ FD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_16 $$ if (fbProxy == null) [ CD ]
Line_25 $$ if (method.getName().equals("getObject") && args.length == 0) -->Line_26 $$ return beanFactory.getBean(beanName)[ CD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_7 $$ Class<?> fbClass = enhancer.createClass()[ CD ]
Line_23 $$ ((Factory) fbProxy).setCallback(0, new MethodInterceptor() -->Line_25 $$ if (method.getName().equals("getObject") && args.length == 0) [ CD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_4 $$ enhancer.setSuperclass(factoryBean.getClass())[ CD ]
Line_3 $$ Enhancer enhancer = new Enhancer()-->Line_4 $$ enhancer.setSuperclass(factoryBean.getClass())[ FD ]
Line_3 $$ Enhancer enhancer = new Enhancer()-->Line_6 $$ enhancer.setCallbackType(MethodInterceptor.class)[ FD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_8 $$ Object fbProxy = null[ CD ]
Line_7 $$ Class<?> fbClass = enhancer.createClass()-->Line_18 $$ fbProxy = fbClass.newInstance()[ FD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_26 $$ return beanFactory.getBean(beanName)[ FD ]
Line_3 $$ Enhancer enhancer = new Enhancer()-->Line_7 $$ Class<?> fbClass = enhancer.createClass()[ FD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_6 $$ enhancer.setCallbackType(MethodInterceptor.class)[ CD ]
Line_7 $$ Class<?> fbClass = enhancer.createClass()-->Line_11 $$ fbProxy = objenesis.newInstance(fbClass, enhancer.getUseCache())[ FD ]
Line_11 $$ fbProxy = objenesis.newInstance(fbClass, enhancer.getUseCache())-->Line_16 $$ if (fbProxy == null) [ FD ]
Line_8 $$ Object fbProxy = null-->Line_16 $$ if (fbProxy == null) [ FD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_9 $$ if (objenesis.isWorthTrying()) [ CD ]
Line_23 $$ ((Factory) fbProxy).setCallback(0, new MethodInterceptor() -->Line_25 $$ if (method.getName().equals("getObject") && args.length == 0) [ FD ]
Line_3 $$ Enhancer enhancer = new Enhancer()-->Line_5 $$ enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE)[ FD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_4 $$ enhancer.setSuperclass(factoryBean.getClass())[ FD ]
Line_8 $$ Object fbProxy = null-->Line_11 $$ fbProxy = objenesis.newInstance(fbClass, enhancer.getUseCache())[ FD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_3 $$ Enhancer enhancer = new Enhancer()[ CD ]
Line_3 $$ Enhancer enhancer = new Enhancer()-->Line_11 $$ fbProxy = objenesis.newInstance(fbClass, enhancer.getUseCache())[ FD ]
Line_11 $$ fbProxy = objenesis.newInstance(fbClass, enhancer.getUseCache())-->Line_18 $$ fbProxy = fbClass.newInstance()[ FD ]
Line_23 $$ ((Factory) fbProxy).setCallback(0, new MethodInterceptor() -->Line_28 $$ return proxy.invoke(factoryBean, args)[ FD ]
Line_23 $$ ((Factory) fbProxy).setCallback(0, new MethodInterceptor() -->Line_28 $$ return proxy.invoke(factoryBean, args)[ CD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_28 $$ return proxy.invoke(factoryBean, args)[ FD ]
Line_2 $$ private Object enhanceFactoryBean(final Object factoryBean, final ConfigurableBeanFactory beanFactory, final String beanName) -->Line_31 $$ return fbProxy[ CD ]
