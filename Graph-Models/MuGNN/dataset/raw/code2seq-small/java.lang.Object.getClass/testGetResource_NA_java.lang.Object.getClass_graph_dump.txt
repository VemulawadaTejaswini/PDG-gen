Line_7 $$ InputStream in = appClassloader.getResourceAsStream("resource.txt")-->Line_8 $$ assertNotNull("Resource should not be null for app classloader", in)[ FD ]
Line_2 $$ public void testGetResource() throws IOException -->Line_4 $$ ClassLoader currentClassLoader = getClass().getClassLoader()[ CD ]
Line_2 $$ public void testGetResource() throws IOException -->Line_6 $$ assertNull("Resource should be null for current classloader", currentClassLoader.getResourceAsStream("resource.txt"))[ CD ]
Line_2 $$ public void testGetResource() throws IOException -->Line_7 $$ InputStream in = appClassloader.getResourceAsStream("resource.txt")[ CD ]
Line_2 $$ public void testGetResource() throws IOException -->Line_9 $$ assertEquals("hello", IOUtils.toString(in))[ CD ]
Line_2 $$ public void testGetResource() throws IOException -->Line_3 $$ URL testJar = makeTestJar().toURI().toURL()[ CD ]
Line_2 $$ public void testGetResource() throws IOException -->Line_8 $$ assertNotNull("Resource should not be null for app classloader", in)[ CD ]
Line_2 $$ public void testGetResource() throws IOException -->Line_5 $$ ClassLoader appClassloader = new ApplicationClassLoader(new URL[] [ CD ]
Line_5 $$ ClassLoader appClassloader = new ApplicationClassLoader(new URL[] -->Line_7 $$ InputStream in = appClassloader.getResourceAsStream("resource.txt")[ FD ]
Line_4 $$ ClassLoader currentClassLoader = getClass().getClassLoader()-->Line_6 $$ assertNull("Resource should be null for current classloader", currentClassLoader.getResourceAsStream("resource.txt"))[ FD ]
Line_7 $$ InputStream in = appClassloader.getResourceAsStream("resource.txt")-->Line_9 $$ assertEquals("hello", IOUtils.toString(in))[ FD ]
