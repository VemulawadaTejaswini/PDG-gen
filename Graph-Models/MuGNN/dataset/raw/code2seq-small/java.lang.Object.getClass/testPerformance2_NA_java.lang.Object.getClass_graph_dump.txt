Line_2 $$ public void testPerformance2() throws Exception -->Line_22 $$ watch.stop()[ CD ]
Line_16 $$ for (int i = 0; i < 4000000; i++) -->Line_17 $$ List<Integer> target = new ArrayList<Integer>(source.size())[ CD ]
Line_4 $$ StopWatch watch = new StopWatch("list<string> -> list<integer> conversionPerformance")-->Line_15 $$ watch.start("convert 4,000,000 manually")[ FD ]
Line_6 $$ List<String> source = new LinkedList<String>()-->Line_17 $$ List<Integer> target = new ArrayList<Integer>(source.size())[ FD ]
Line_18 $$ for (String element : source) -->Line_19 $$ target.add(Integer.valueOf(element))[ FD ]
Line_17 $$ List<Integer> target = new ArrayList<Integer>(source.size())-->Line_19 $$ target.add(Integer.valueOf(element))[ FD ]
Line_4 $$ StopWatch watch = new StopWatch("list<string> -> list<integer> conversionPerformance")-->Line_5 $$ watch.start("convert 4,000,000 with conversion service")[ FD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_3 $$ Assume.group(TestGroup.PERFORMANCE)[ CD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_7 $$ source.add("1")[ CD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_8 $$ source.add("2")[ CD ]
Line_11 $$ for (int i = 0; i < 1000000; i++) -->Line_16 $$ for (int i = 0; i < 4000000; i++) [ FD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_15 $$ watch.start("convert 4,000,000 manually")[ CD ]
Line_6 $$ List<String> source = new LinkedList<String>()-->Line_7 $$ source.add("1")[ FD ]
Line_10 $$ TypeDescriptor td = new TypeDescriptor(getClass().getField("list"))-->Line_12 $$ conversionService.convert(source, TypeDescriptor.forObject(source), td)[ FD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_16 $$ for (int i = 0; i < 4000000; i++) [ CD ]
Line_6 $$ List<String> source = new LinkedList<String>()-->Line_12 $$ conversionService.convert(source, TypeDescriptor.forObject(source), td)[ FD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_11 $$ for (int i = 0; i < 1000000; i++) [ CD ]
Line_6 $$ List<String> source = new LinkedList<String>()-->Line_9 $$ source.add("3")[ FD ]
Line_6 $$ List<String> source = new LinkedList<String>()-->Line_8 $$ source.add("2")[ FD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_10 $$ TypeDescriptor td = new TypeDescriptor(getClass().getField("list"))[ CD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_9 $$ source.add("3")[ CD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_6 $$ List<String> source = new LinkedList<String>()[ CD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_4 $$ StopWatch watch = new StopWatch("list<string> -> list<integer> conversionPerformance")[ CD ]
Line_4 $$ StopWatch watch = new StopWatch("list<string> -> list<integer> conversionPerformance")-->Line_14 $$ watch.stop()[ FD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_5 $$ watch.start("convert 4,000,000 with conversion service")[ CD ]
Line_2 $$ public void testPerformance2() throws Exception -->Line_14 $$ watch.stop()[ CD ]
Line_4 $$ StopWatch watch = new StopWatch("list<string> -> list<integer> conversionPerformance")-->Line_22 $$ watch.stop()[ FD ]
Line_11 $$ for (int i = 0; i < 1000000; i++) -->Line_12 $$ conversionService.convert(source, TypeDescriptor.forObject(source), td)[ CD ]
