Line_7 $$ if (!approximable && !canCreateCopy(requiredType)) -->Line_8 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_6 $$ boolean approximable = CollectionFactory.isApproximableCollectionType(requiredType)[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_23 $$ logger.debug("Collection of type [" + original.getClass().getName() + "] returned null Iterator - injecting original Collection as-is")[ FD ]
Line_18 $$ Iterator<?> it-->Line_48 $$ Object element = it.next()[ FD ]
Line_38 $$ convertedCopy = (Collection<Object>) requiredType.newInstance()-->Line_52 $$ convertedCopy.add(convertedElement)[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_38 $$ convertedCopy = (Collection<Object>) requiredType.newInstance()[ FD ]
Line_47 $$ for (; it.hasNext(); i++) -->Line_50 $$ Object convertedElement = convertIfNecessary(indexedPropertyName, null, element, (elementType != null ? elementType.getType() : null), elementType)[ CD ]
Line_7 $$ if (!approximable && !canCreateCopy(requiredType)) -->Line_11 $$ return original[ CD ]
Line_22 $$ if (logger.isDebugEnabled()) -->Line_23 $$ logger.debug("Collection of type [" + original.getClass().getName() + "] returned null Iterator - injecting original Collection as-is")[ CD ]
Line_35 $$ if (approximable) -->Line_36 $$ convertedCopy = CollectionFactory.createApproximateCollection(original, original.size())[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_20 $$ it = original.iterator()[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_33 $$ Collection<Object> convertedCopy[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_6 $$ boolean approximable = CollectionFactory.isApproximableCollectionType(requiredType)[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_14 $$ TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor()[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_18 $$ Iterator<?> it[ CD ]
Line_36 $$ convertedCopy = CollectionFactory.createApproximateCollection(original, original.size())-->Line_52 $$ convertedCopy.add(convertedElement)[ FD ]
Line_36 $$ convertedCopy = CollectionFactory.createApproximateCollection(original, original.size())-->Line_38 $$ convertedCopy = (Collection<Object>) requiredType.newInstance()[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_42 $$ logger.debug("Cannot create copy of Collection type [" + original.getClass().getName() + "] - injecting original Collection as-is: " + ex)[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_15 $$ if (elementType == null && originalAllowed && !this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) [ CD ]
Line_50 $$ Object convertedElement = convertIfNecessary(indexedPropertyName, null, element, (elementType != null ? elementType.getType() : null), elementType)-->Line_52 $$ convertedCopy.add(convertedElement)[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_49 $$ String indexedPropertyName = buildIndexedPropertyName(propertyName, i)[ FD ]
Line_20 $$ it = original.iterator()-->Line_47 $$ for (; it.hasNext(); i++) [ FD ]
Line_8 $$ if (logger.isDebugEnabled()) -->Line_9 $$ logger.debug("Custom Collection type [" + original.getClass().getName() + "] does not allow for creating a copy - injecting original Collection as-is")[ CD ]
Line_49 $$ String indexedPropertyName = buildIndexedPropertyName(propertyName, i)-->Line_50 $$ Object convertedElement = convertIfNecessary(indexedPropertyName, null, element, (elementType != null ? elementType.getType() : null), elementType)[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_7 $$ if (!approximable && !canCreateCopy(requiredType)) [ CD ]
Line_33 $$ Collection<Object> convertedCopy-->Line_38 $$ convertedCopy = (Collection<Object>) requiredType.newInstance()[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_55 $$ logger.debug("Collection type [" + original.getClass().getName() + "] seems to be read-only - injecting original Collection as-is: " + ex)[ FD ]
Line_13 $$ boolean originalAllowed = requiredType.isInstance(original)-->Line_59 $$ originalAllowed = originalAllowed && (element == convertedElement)[ FD ]
Line_33 $$ Collection<Object> convertedCopy-->Line_52 $$ convertedCopy.add(convertedElement)[ FD ]
Line_20 $$ it = original.iterator()-->Line_48 $$ Object element = it.next()[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_47 $$ for (; it.hasNext(); i++) [ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_3 $$ if (!Collection.class.isAssignableFrom(requiredType)) [ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_14 $$ TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor()[ FD ]
Line_3 $$ if (!Collection.class.isAssignableFrom(requiredType)) -->Line_4 $$ return original[ CD ]
Line_21 $$ if (it == null) -->Line_25 $$ return original[ CD ]
Line_46 $$ int i = 0-->Line_47 $$ for (; it.hasNext(); i++) [ FD ]
Line_33 $$ Collection<Object> convertedCopy-->Line_36 $$ convertedCopy = CollectionFactory.createApproximateCollection(original, original.size())[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_3 $$ if (!Collection.class.isAssignableFrom(requiredType)) [ FD ]
Line_18 $$ Iterator<?> it-->Line_21 $$ if (it == null) [ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_13 $$ boolean originalAllowed = requiredType.isInstance(original)[ FD ]
Line_41 $$ if (logger.isDebugEnabled()) -->Line_42 $$ logger.debug("Cannot create copy of Collection type [" + original.getClass().getName() + "] - injecting original Collection as-is: " + ex)[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_13 $$ boolean originalAllowed = requiredType.isInstance(original)[ CD ]
Line_18 $$ Iterator<?> it-->Line_47 $$ for (; it.hasNext(); i++) [ FD ]
Line_21 $$ if (it == null) -->Line_22 $$ if (logger.isDebugEnabled()) [ CD ]
Line_46 $$ int i = 0-->Line_49 $$ String indexedPropertyName = buildIndexedPropertyName(propertyName, i)[ FD ]
Line_47 $$ for (; it.hasNext(); i++) -->Line_49 $$ String indexedPropertyName = buildIndexedPropertyName(propertyName, i)[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_46 $$ int i = 0[ CD ]
Line_47 $$ for (; it.hasNext(); i++) -->Line_59 $$ originalAllowed = originalAllowed && (element == convertedElement)[ CD ]
Line_14 $$ TypeDescriptor elementType = typeDescriptor.getElementTypeDescriptor()-->Line_50 $$ Object convertedElement = convertIfNecessary(indexedPropertyName, null, element, (elementType != null ? elementType.getType() : null), elementType)[ FD ]
Line_18 $$ Iterator<?> it-->Line_20 $$ it = original.iterator()[ FD ]
Line_6 $$ boolean approximable = CollectionFactory.isApproximableCollectionType(requiredType)-->Line_7 $$ if (!approximable && !canCreateCopy(requiredType)) [ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_29 $$ logger.debug("Cannot access Collection of type [" + original.getClass().getName() + "] - injecting original Collection as-is: " + ex)[ FD ]
Line_48 $$ Object element = it.next()-->Line_50 $$ Object convertedElement = convertIfNecessary(indexedPropertyName, null, element, (elementType != null ? elementType.getType() : null), elementType)[ FD ]
Line_54 $$ if (logger.isDebugEnabled()) -->Line_55 $$ logger.debug("Collection type [" + original.getClass().getName() + "] seems to be read-only - injecting original Collection as-is: " + ex)[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_36 $$ convertedCopy = CollectionFactory.createApproximateCollection(original, original.size())[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_61 $$ return (originalAllowed ? original : convertedCopy)[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_9 $$ logger.debug("Custom Collection type [" + original.getClass().getName() + "] does not allow for creating a copy - injecting original Collection as-is")[ FD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_7 $$ if (!approximable && !canCreateCopy(requiredType)) [ FD ]
Line_15 $$ if (elementType == null && originalAllowed && !this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) -->Line_16 $$ return original[ CD ]
Line_20 $$ it = original.iterator()-->Line_21 $$ if (it == null) [ FD ]
Line_28 $$ if (logger.isDebugEnabled()) -->Line_29 $$ logger.debug("Cannot access Collection of type [" + original.getClass().getName() + "] - injecting original Collection as-is: " + ex)[ CD ]
Line_35 $$ if (approximable) -->Line_38 $$ convertedCopy = (Collection<Object>) requiredType.newInstance()[ CD ]
Line_47 $$ for (; it.hasNext(); i++) -->Line_48 $$ Object element = it.next()[ CD ]
Line_2 $$ private Collection<?> convertToTypedCollection(Collection<?> original, String propertyName, Class<?> requiredType, TypeDescriptor typeDescriptor) -->Line_15 $$ if (elementType == null && originalAllowed && !this.propertyEditorRegistry.hasCustomEditorForElement(null, propertyName)) [ FD ]
