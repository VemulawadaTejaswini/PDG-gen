Line_6 $$ boolean useOptimization = true-->Line_9 $$ useOptimization = softWrap == null[ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_29 $$ if (editor == null || useOptimization) [ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_53 $$ return editorImpl.calcColumnNumber(text, start, offset, tabSize)[ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_17 $$ for (int i = start; i < offset; i++) [ FD ]
Line_9 $$ useOptimization = softWrap == null-->Line_29 $$ if (editor == null || useOptimization) [ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_52 $$ EditorEx editorImpl = (EditorEx) editor[ CD ]
Line_17 $$ for (int i = start; i < offset; i++) -->Line_18 $$ if (text.charAt(i) == '\t') [ CD ]
Line_33 $$ String documentInfo-->Line_37 $$ documentInfo = "Text holder class: " + text.getClass()[ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_31 $$ if (document != null && start < offset - 1 && document.getLineNumber(start) != document.getLineNumber(offset - 1)) [ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_43 $$ for (int i = start; i < offset; i++) [ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_12 $$ if (useOptimization) [ CD ]
Line_43 $$ for (int i = start; i < offset; i++) -->Line_45 $$ if (c == '\t') [ CD ]
Line_29 $$ if (editor == null || useOptimization) -->Line_30 $$ Document document = editor == null ? null : editor.getDocument()[ CD ]
Line_52 $$ EditorEx editorImpl = (EditorEx) editor-->Line_53 $$ return editorImpl.calcColumnNumber(text, start, offset, tabSize)[ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_34 $$ if (text instanceof Dumpable) [ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_44 $$ char c = text.charAt(i)[ FD ]
Line_8 $$ SoftWrap softWrap = editor.getSoftWrapModel().getSoftWrap(start)-->Line_9 $$ useOptimization = softWrap == null[ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_11 $$ boolean hasTabs = true[ CD ]
Line_43 $$ for (int i = start; i < offset; i++) -->Line_44 $$ char c = text.charAt(i)[ CD ]
Line_35 $$ documentInfo = ((Dumpable) text).dumpState()-->Line_37 $$ documentInfo = "Text holder class: " + text.getClass()[ FD ]
Line_45 $$ if (c == '\t') -->Line_46 $$ shift += getTabLength(i + shift - start, tabSize) - 1[ CD ]
Line_29 $$ if (editor == null || useOptimization) -->Line_50 $$ return offset - start + shift[ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_37 $$ documentInfo = "Text holder class: " + text.getClass()[ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_8 $$ SoftWrap softWrap = editor.getSoftWrapModel().getSoftWrap(start)[ FD ]
Line_31 $$ if (document != null && start < offset - 1 && document.getLineNumber(start) != document.getLineNumber(offset - 1)) -->Line_32 $$ String editorInfo = editor instanceof EditorImpl ? ". Editor info: " + ((EditorImpl) editor).dumpState() : ""[ CD ]
Line_34 $$ if (text instanceof Dumpable) -->Line_37 $$ documentInfo = "Text holder class: " + text.getClass()[ CD ]
Line_13 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_17 $$ for (int i = start; i < offset; i++) [ CD ]
Line_18 $$ if (text.charAt(i) == '\t') -->Line_19 $$ if (hasNonTabs) [ CD ]
Line_43 $$ for (int i = start; i < offset; i++) -->Line_44 $$ char c = text.charAt(i)[ FD ]
Line_30 $$ Document document = editor == null ? null : editor.getDocument()-->Line_31 $$ if (document != null && start < offset - 1 && document.getLineNumber(start) != document.getLineNumber(offset - 1)) [ FD ]
Line_12 $$ if (useOptimization) -->Line_13 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) [ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_3 $$ if (editor instanceof TextComponentEditor) [ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_7 $$ if (editor != null) [ CD ]
Line_34 $$ if (text instanceof Dumpable) -->Line_35 $$ documentInfo = ((Dumpable) text).dumpState()[ CD ]
Line_16 $$ boolean hasNonTabs = false-->Line_24 $$ hasNonTabs = true[ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_46 $$ shift += getTabLength(i + shift - start, tabSize) - 1[ FD ]
Line_7 $$ if (editor != null) -->Line_8 $$ SoftWrap softWrap = editor.getSoftWrapModel().getSoftWrap(start)[ CD ]
Line_17 $$ for (int i = start; i < offset; i++) -->Line_43 $$ for (int i = start; i < offset; i++) [ FD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_18 $$ if (text.charAt(i) == '\t') [ FD ]
Line_41 $$ int shift = 0-->Line_46 $$ shift += getTabLength(i + shift - start, tabSize) - 1[ FD ]
Line_19 $$ if (hasNonTabs) -->Line_20 $$ useOptimization = false[ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_6 $$ boolean useOptimization = true[ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_30 $$ Document document = editor == null ? null : editor.getDocument()[ FD ]
Line_44 $$ char c = text.charAt(i)-->Line_45 $$ if (c == '\t') [ FD ]
Line_6 $$ boolean useOptimization = true-->Line_20 $$ useOptimization = false[ FD ]
Line_29 $$ if (editor == null || useOptimization) -->Line_31 $$ if (document != null && start < offset - 1 && document.getLineNumber(start) != document.getLineNumber(offset - 1)) [ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_53 $$ return editorImpl.calcColumnNumber(text, start, offset, tabSize)[ FD ]
Line_42 $$ if (hasTabs) -->Line_43 $$ for (int i = start; i < offset; i++) [ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_3 $$ if (editor instanceof TextComponentEditor) [ FD ]
Line_29 $$ if (editor == null || useOptimization) -->Line_42 $$ if (hasTabs) [ CD ]
Line_31 $$ if (document != null && start < offset - 1 && document.getLineNumber(start) != document.getLineNumber(offset - 1)) -->Line_39 $$ LogMessageEx.error(LOG, "detected incorrect offset -> column number calculation", "start: " + start + ", given offset: " + offset + ", given tab size: " + tabSize + ". " + documentInfo + editorInfo)[ CD ]
Line_17 $$ for (int i = start; i < offset; i++) -->Line_18 $$ if (text.charAt(i) == '\t') [ FD ]
Line_9 $$ useOptimization = softWrap == null-->Line_20 $$ useOptimization = false[ FD ]
Line_20 $$ useOptimization = false-->Line_29 $$ if (editor == null || useOptimization) [ FD ]
Line_11 $$ boolean hasTabs = true-->Line_14 $$ hasTabs = false[ FD ]
Line_31 $$ if (document != null && start < offset - 1 && document.getLineNumber(start) != document.getLineNumber(offset - 1)) -->Line_33 $$ String documentInfo[ CD ]
Line_17 $$ for (int i = start; i < offset; i++) -->Line_44 $$ char c = text.charAt(i)[ FD ]
Line_7 $$ if (editor != null) -->Line_9 $$ useOptimization = softWrap == null[ CD ]
Line_3 $$ if (editor instanceof TextComponentEditor) -->Line_4 $$ return offset - start[ CD ]
Line_18 $$ if (text.charAt(i) == '\t') -->Line_24 $$ hasNonTabs = true[ CD ]
Line_31 $$ if (document != null && start < offset - 1 && document.getLineNumber(start) != document.getLineNumber(offset - 1)) -->Line_34 $$ if (text instanceof Dumpable) [ CD ]
Line_33 $$ String documentInfo-->Line_35 $$ documentInfo = ((Dumpable) text).dumpState()[ FD ]
Line_13 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_14 $$ hasTabs = false[ CD ]
Line_29 $$ if (editor == null || useOptimization) -->Line_41 $$ int shift = 0[ CD ]
Line_13 $$ if (editor instanceof EditorImpl && !((EditorImpl) editor).hasTabs()) -->Line_16 $$ boolean hasNonTabs = false[ CD ]
Line_2 $$ public static int calcColumnNumber(@Nullable Editor editor, @NotNull CharSequence text, final int start, final int offset, final int tabSize) -->Line_7 $$ if (editor != null) [ FD ]
Line_6 $$ boolean useOptimization = true-->Line_29 $$ if (editor == null || useOptimization) [ FD ]
