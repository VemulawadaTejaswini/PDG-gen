Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_10 $$ app.verifyCompleted()[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_20 $$ app.verifyCompleted()[ CD ]
Line_8 $$ Job job = app.submit(conf)-->Line_18 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_10 $$ app.verifyCompleted()[ CD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_18 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_19 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_20 $$ app.verifyCompleted()[ FD ]
Line_16 $$ conf = new Configuration()-->Line_18 $$ job = app.submit(conf)[ FD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_19 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM, false)[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_7 $$ conf.setBoolean(MRConfig.MAPREDUCE_APP_SUBMISSION_CROSS_PLATFORM, false)[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_6 $$ conf.setStrings(MRJobConfig.MAP_LOG_LEVEL, "WARN")[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_17 $$ conf.set(JobConf.MAPRED_MAP_TASK_ENV, "HADOOP_ROOT_LOGGER=trace")[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_5 $$ conf.set(JobConf.MAPRED_MAP_TASK_ENV, "HADOOP_CLIENT_OPTS=test")[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_21 $$ Assert.assertTrue("HADOOP_ROOT_LOGGER not set for job", app.cmdEnvironment.containsKey("HADOOP_ROOT_LOGGER"))[ CD ]
Line_8 $$ Job job = app.submit(conf)-->Line_19 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setStrings(MRJobConfig.MAP_LOG_LEVEL, "WARN")[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_16 $$ conf = new Configuration()[ CD ]
Line_16 $$ conf = new Configuration()-->Line_17 $$ conf.set(JobConf.MAPRED_MAP_TASK_ENV, "HADOOP_ROOT_LOGGER=trace")[ FD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.set(JobConf.MAPRED_MAP_TASK_ENV, "HADOOP_CLIENT_OPTS=test")[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_15 $$ app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_20 $$ app.verifyCompleted()[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_22 $$ Assert.assertEquals("trace", app.cmdEnvironment.get("HADOOP_ROOT_LOGGER"))[ CD ]
Line_15 $$ app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_18 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_14 $$ Assert.assertEquals("test", app.cmdEnvironment.get("HADOOP_CLIENT_OPTS"))[ CD ]
Line_18 $$ job = app.submit(conf)-->Line_19 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_8 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_12 $$ Assert.assertEquals("WARN,console", app.cmdEnvironment.get("HADOOP_ROOT_LOGGER"))[ CD ]
Line_15 $$ app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_19 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_8 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_11 $$ Assert.assertTrue("HADOOP_ROOT_LOGGER not set for job", app.cmdEnvironment.containsKey("HADOOP_ROOT_LOGGER"))[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_18 $$ job = app.submit(conf)[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_17 $$ conf.set(JobConf.MAPRED_MAP_TASK_ENV, "HADOOP_ROOT_LOGGER=trace")[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_18 $$ job = app.submit(conf)[ FD ]
Line_3 $$ MyMRApp app = new MyMRApp(1, 0, true, this.getClass().getName(), true)-->Line_15 $$ app = new MyMRApp(1, 0, true, this.getClass().getName(), true)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_16 $$ conf = new Configuration()[ FD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_13 $$ Assert.assertTrue("HADOOP_CLIENT_OPTS not set for job", app.cmdEnvironment.containsKey("HADOOP_CLIENT_OPTS"))[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_8 $$ Job job = app.submit(conf)[ CD ]
Line_2 $$ public void testEnvironmentVariables() throws Exception -->Line_15 $$ app = new MyMRApp(1, 0, true, this.getClass().getName(), true)[ CD ]
