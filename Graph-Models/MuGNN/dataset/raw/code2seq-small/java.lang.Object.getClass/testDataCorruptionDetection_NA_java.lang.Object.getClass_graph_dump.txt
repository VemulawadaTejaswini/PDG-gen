Line_2 $$ public void testDataCorruptionDetection() throws IOException -->Line_5 $$ file.deleteOnExit()[ CD ]
Line_2 $$ public void testDataCorruptionDetection() throws IOException -->Line_7 $$ metadata.deleteOnExit()[ CD ]
Line_2 $$ public void testDataCorruptionDetection() throws IOException -->Line_6 $$ File metadata = new File(file.getPath() + ".meta")[ CD ]
Line_36 $$ exception = t-->Line_38 $$ assertNotNull(exception)[ FD ]
Line_32 $$ Throwable exception = null-->Line_39 $$ assertSame(exception.getClass(), CorruptSSTableException.class)[ FD ]
Line_2 $$ public void testDataCorruptionDetection() throws IOException -->Line_9 $$ assertTrue(metadata.createNewFile())[ CD ]
Line_6 $$ File metadata = new File(file.getPath() + ".meta")-->Line_11 $$ try (SequentialWriter writer = new CompressedSequentialWriter(file, metadata.getPath(), CompressionParams.snappy(), sstableMetadataCollector)) [ FD ]
Line_24 $$ byte[] checksum = new byte[4]-->Line_26 $$ checksumModifier.read(checksum)[ FD ]
Line_32 $$ Throwable exception = null-->Line_36 $$ exception = t[ FD ]
Line_24 $$ byte[] checksum = new byte[4]-->Line_43 $$ updateChecksum(checksumModifier, chunk.length, checksum)[ FD ]
Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")-->Line_30 $$ SyncUtil.sync(checksumModifier)[ FD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_25 $$ checksumModifier.seek(chunk.length)[ FD ]
Line_4 $$ File file = new File("testDataCorruptionDetection")-->Line_5 $$ file.deleteOnExit()[ FD ]
Line_4 $$ File file = new File("testDataCorruptionDetection")-->Line_6 $$ File metadata = new File(file.getPath() + ".meta")[ FD ]
Line_2 $$ public void testDataCorruptionDetection() throws IOException -->Line_4 $$ File file = new File("testDataCorruptionDetection")[ CD ]
Line_31 $$ try (final RandomAccessReader r = new CompressedRandomAccessReader.Builder(channel, meta).build()) -->Line_34 $$ r.readLine()[ FD ]
Line_6 $$ File metadata = new File(file.getPath() + ".meta")-->Line_16 $$ CompressionMetadata meta = new CompressionMetadata(metadata.getPath(), file.length(), ChecksumType.CRC32)[ FD ]
Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")-->Line_26 $$ checksumModifier.read(checksum)[ FD ]
Line_2 $$ public void testDataCorruptionDetection() throws IOException -->Line_8 $$ assertTrue(file.createNewFile())[ CD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_49 $$ checksumModifier.close()[ FD ]
Line_4 $$ File file = new File("testDataCorruptionDetection")-->Line_8 $$ assertTrue(file.createNewFile())[ FD ]
Line_32 $$ Throwable exception = null-->Line_40 $$ assertSame(exception.getCause().getClass(), CorruptBlockException.class)[ FD ]
Line_6 $$ File metadata = new File(file.getPath() + ".meta")-->Line_9 $$ assertTrue(metadata.createNewFile())[ FD ]
Line_6 $$ File metadata = new File(file.getPath() + ".meta")-->Line_7 $$ metadata.deleteOnExit()[ FD ]
Line_11 $$ try (SequentialWriter writer = new CompressedSequentialWriter(file, metadata.getPath(), CompressionParams.snappy(), sstableMetadataCollector)) -->Line_12 $$ writer.write(CONTENT.getBytes())[ FD ]
Line_4 $$ File file = new File("testDataCorruptionDetection")-->Line_16 $$ CompressionMetadata meta = new CompressionMetadata(metadata.getPath(), file.length(), ChecksumType.CRC32)[ FD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_27 $$ checksumModifier.seek(chunk.length)[ FD ]
Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")-->Line_29 $$ checksumModifier.write(random.nextInt())[ FD ]
Line_28 $$ for (int i = 0; i < checksum.length; i++) -->Line_30 $$ SyncUtil.sync(checksumModifier)[ CD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_30 $$ SyncUtil.sync(checksumModifier)[ FD ]
Line_36 $$ exception = t-->Line_40 $$ assertSame(exception.getCause().getClass(), CorruptBlockException.class)[ FD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_43 $$ updateChecksum(checksumModifier, chunk.length, checksum)[ FD ]
Line_44 $$ try (RandomAccessReader cr = new CompressedRandomAccessReader.Builder(channel, meta).build()) -->Line_45 $$ assertEquals(CONTENT, cr.readLine())[ FD ]
Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")-->Line_27 $$ checksumModifier.seek(chunk.length)[ FD ]
Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")-->Line_49 $$ checksumModifier.close()[ FD ]
Line_36 $$ exception = t-->Line_39 $$ assertSame(exception.getClass(), CorruptSSTableException.class)[ FD ]
Line_3 $$ String CONTENT = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae."-->Line_19 $$ assertEquals(CONTENT, reader.readLine())[ FD ]
Line_48 $$ if (checksumModifier != null)-->Line_49 $$ checksumModifier.close()[ CD ]
Line_18 $$ try (RandomAccessReader reader = new CompressedRandomAccessReader.Builder(channel, meta).build()) -->Line_19 $$ assertEquals(CONTENT, reader.readLine())[ FD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")[ FD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_29 $$ checksumModifier.write(random.nextInt())[ FD ]
Line_28 $$ for (int i = 0; i < checksum.length; i++) -->Line_29 $$ checksumModifier.write(random.nextInt())[ CD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_26 $$ checksumModifier.read(checksum)[ FD ]
Line_2 $$ public void testDataCorruptionDetection() throws IOException -->Line_3 $$ String CONTENT = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae."[ CD ]
Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")-->Line_25 $$ checksumModifier.seek(chunk.length)[ FD ]
Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")-->Line_48 $$ if (checksumModifier != null)[ FD ]
Line_20 $$ Random random = new Random()-->Line_29 $$ checksumModifier.write(random.nextInt())[ FD ]
Line_11 $$ try (SequentialWriter writer = new CompressedSequentialWriter(file, metadata.getPath(), CompressionParams.snappy(), sstableMetadataCollector)) -->Line_13 $$ writer.finish()[ FD ]
Line_16 $$ CompressionMetadata meta = new CompressionMetadata(metadata.getPath(), file.length(), ChecksumType.CRC32)-->Line_17 $$ CompressionMetadata.Chunk chunk = meta.chunkFor(0)[ FD ]
Line_21 $$ RandomAccessFile checksumModifier = null-->Line_48 $$ if (checksumModifier != null)[ FD ]
Line_3 $$ String CONTENT = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae."-->Line_12 $$ writer.write(CONTENT.getBytes())[ FD ]
Line_32 $$ Throwable exception = null-->Line_38 $$ assertNotNull(exception)[ FD ]
Line_2 $$ public void testDataCorruptionDetection() throws IOException -->Line_10 $$ MetadataCollector sstableMetadataCollector = new MetadataCollector(new ClusteringComparator(BytesType.instance)).replayPosition(null)[ CD ]
Line_3 $$ String CONTENT = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam vitae."-->Line_45 $$ assertEquals(CONTENT, cr.readLine())[ FD ]
Line_23 $$ checksumModifier = new RandomAccessFile(file, "rw")-->Line_43 $$ updateChecksum(checksumModifier, chunk.length, checksum)[ FD ]
