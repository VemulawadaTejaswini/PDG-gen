Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_9 $$ txn.commit()[ CD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_3 $$ Session s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ if (s != null && s.isOpen()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.save(item)[ FD ]
Line_14 $$ s = openSession()-->Line_43 $$ s = openSession()[ FD ]
Line_14 $$ s = openSession()-->Line_45 $$ item = (VersionedItem) s.load(VersionedItem.class, item.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ s.close()[ FD ]
Line_38 $$ if (entry.getClass().getName().equals("org.hibernate.cache.ehcache.internal.strategy.AbstractReadWriteEhcacheAccessStrategy$Lock")) -->Line_41 $$ assertEquals(initialVersion.longValue(), cachedVersionValue.longValue())[ CD ]
Line_44 $$ txn = s.beginTransaction()-->Line_47 $$ txn.commit()[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_12 $$ item.setVersion(Long.valueOf(item.getVersion().longValue() - 1))[ CD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_21 $$ if (txn != null) [ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_36 $$ Object entry = slcs.getEntries().get(item.getId())[ CD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_45 $$ item = (VersionedItem) s.load(VersionedItem.class, item.getId())[ CD ]
Line_36 $$ Object entry = slcs.getEntries().get(item.getId())-->Line_38 $$ if (entry.getClass().getName().equals("org.hibernate.cache.ehcache.internal.strategy.AbstractReadWriteEhcacheAccessStrategy$Lock")) [ FD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_12 $$ item.setVersion(Long.valueOf(item.getVersion().longValue() - 1))[ FD ]
Line_15 $$ txn = s.beginTransaction()-->Line_47 $$ txn.commit()[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_11 $$ Long initialVersion = item.getVersion()[ CD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_7 $$ item.setDescription("steve's item")[ CD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_44 $$ txn = s.beginTransaction()[ FD ]
Line_14 $$ s = openSession()-->Line_48 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.close()[ FD ]
Line_14 $$ s = openSession()-->Line_28 $$ if (s != null && s.isOpen()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s.update(item)[ FD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_15 $$ txn = s.beginTransaction()[ FD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_8 $$ s.save(item)[ FD ]
Line_43 $$ s = openSession()-->Line_48 $$ s.close()[ FD ]
Line_43 $$ s = openSession()-->Line_44 $$ txn = s.beginTransaction()[ FD ]
Line_40 $$ cachedVersionValue = (Long) getMapFromCacheEntry(entry).get("_version")-->Line_41 $$ assertEquals(initialVersion.longValue(), cachedVersionValue.longValue())[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_46 $$ s.delete(item)[ CD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_4 $$ Transaction txn = s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_38 $$ if (entry.getClass().getName().equals("org.hibernate.cache.ehcache.internal.strategy.AbstractReadWriteEhcacheAccessStrategy$Lock")) [ CD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_9 $$ txn.commit()[ FD ]
Line_37 $$ Long cachedVersionValue-->Line_40 $$ cachedVersionValue = (Long) getMapFromCacheEntry(entry).get("_version")[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ s = openSession()[ FD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_17 $$ txn.commit()[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_5 $$ VersionedItem item = new VersionedItem()[ CD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_23 $$ txn.rollback()[ FD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_36 $$ Object entry = slcs.getEntries().get(item.getId())[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ s.close()[ FD ]
Line_14 $$ s = openSession()-->Line_15 $$ txn = s.beginTransaction()[ FD ]
Line_14 $$ s = openSession()-->Line_46 $$ s.delete(item)[ FD ]
Line_43 $$ s = openSession()-->Line_46 $$ s.delete(item)[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_10 $$ s.close()[ CD ]
Line_15 $$ txn = s.beginTransaction()-->Line_21 $$ if (txn != null) [ FD ]
Line_43 $$ s = openSession()-->Line_45 $$ item = (VersionedItem) s.load(VersionedItem.class, item.getId())[ FD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_7 $$ item.setDescription("steve's item")[ FD ]
Line_37 $$ Long cachedVersionValue-->Line_41 $$ assertEquals(initialVersion.longValue(), cachedVersionValue.longValue())[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_47 $$ txn.commit()[ CD ]
Line_35 $$ SecondLevelCacheStatistics slcs = sessionFactory().getStatistics().getSecondLevelCacheStatistics(VersionedItem.class.getName())-->Line_36 $$ Object entry = slcs.getEntries().get(item.getId())[ FD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_11 $$ Long initialVersion = item.getVersion()[ FD ]
Line_11 $$ Long initialVersion = item.getVersion()-->Line_41 $$ assertEquals(initialVersion.longValue(), cachedVersionValue.longValue())[ FD ]
Line_15 $$ txn = s.beginTransaction()-->Line_23 $$ txn.rollback()[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_6 $$ item.setName("steve")[ CD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_6 $$ item.setName("steve")[ FD ]
Line_38 $$ if (entry.getClass().getName().equals("org.hibernate.cache.ehcache.internal.strategy.AbstractReadWriteEhcacheAccessStrategy$Lock")) -->Line_40 $$ cachedVersionValue = (Long) getMapFromCacheEntry(entry).get("_version")[ CD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_16 $$ s.update(item)[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_44 $$ txn = s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ s = openSession()[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_37 $$ Long cachedVersionValue[ CD ]
Line_14 $$ s = openSession()-->Line_16 $$ s.update(item)[ FD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ item = (VersionedItem) s.load(VersionedItem.class, item.getId())[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_35 $$ SecondLevelCacheStatistics slcs = sessionFactory().getStatistics().getSecondLevelCacheStatistics(VersionedItem.class.getName())[ CD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ s.close()[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_43 $$ s = openSession()[ CD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ s.delete(item)[ FD ]
Line_45 $$ item = (VersionedItem) s.load(VersionedItem.class, item.getId())-->Line_46 $$ s.delete(item)[ FD ]
Line_14 $$ s = openSession()-->Line_30 $$ s.close()[ FD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_45 $$ item = (VersionedItem) s.load(VersionedItem.class, item.getId())[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_8 $$ s.save(item)[ CD ]
Line_14 $$ s = openSession()-->Line_44 $$ txn = s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_15 $$ txn = s.beginTransaction()[ FD ]
Line_2 $$ public void testStaleWritesLeaveCacheConsistent() -->Line_48 $$ s.close()[ CD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_47 $$ txn.commit()[ FD ]
Line_15 $$ txn = s.beginTransaction()-->Line_17 $$ txn.commit()[ FD ]
Line_5 $$ VersionedItem item = new VersionedItem()-->Line_46 $$ s.delete(item)[ FD ]
Line_14 $$ s = openSession()-->Line_18 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ txn = s.beginTransaction()[ FD ]
Line_15 $$ txn = s.beginTransaction()-->Line_44 $$ txn = s.beginTransaction()[ FD ]
Line_36 $$ Object entry = slcs.getEntries().get(item.getId())-->Line_40 $$ cachedVersionValue = (Long) getMapFromCacheEntry(entry).get("_version")[ FD ]
