Line_9 $$ Builder builder = new Builder()-->Line_13 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())[ FD ]
Line_22 $$ File file = new File(newBootstrapClassPath)-->Line_23 $$ URI uri = file.toURI()[ FD ]
Line_13 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())-->Line_17 $$ ClassLoader classLoader = processConfig.getReactClassLoader()[ FD ]
Line_3 $$ Map<Path, Path> inputPaths = Collections.emptyMap()-->Line_7 $$ Assert.assertSame(inputPaths, loadedPaths.getInputPaths())[ FD ]
Line_22 $$ File file = new File(newBootstrapClassPath)-->Line_25 $$ file = new File(newRuntimeClassPath)[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_3 $$ Map<Path, Path> inputPaths = Collections.emptyMap()[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_29 $$ Map<Object, Object> handlers = ReflectionTestUtil.getFieldValue(URL.class, "handlers")[ CD ]
Line_28 $$ final MalformedURLException malformedURLException = new MalformedURLException()-->Line_32 $$ ReflectionUtil.throwException(malformedURLException)[ FD ]
Line_6 $$ LoadedPaths loadedPaths = new LoadedPaths(inputPaths, newBootstrapClassPath, newRuntimeClassPath)-->Line_13 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())[ FD ]
Line_19 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader-->Line_20 $$ URL[] urls = urlClassLoader.getURLs()[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_26 $$ uri = file.toURI()[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_7 $$ Assert.assertSame(inputPaths, loadedPaths.getInputPaths())[ CD ]
Line_5 $$ String newRuntimeClassPath = "newRuntimeClassPath"-->Line_16 $$ Assert.assertEquals(newRuntimeClassPath, processConfig.getRuntimeClassPath())[ FD ]
Line_17 $$ ClassLoader classLoader = processConfig.getReactClassLoader()-->Line_18 $$ Assert.assertSame(URLClassLoader.class, classLoader.getClass())[ FD ]
Line_6 $$ LoadedPaths loadedPaths = new LoadedPaths(inputPaths, newBootstrapClassPath, newRuntimeClassPath)-->Line_39 $$ loadedPaths.toProcessConfig(builder.build())[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_12 $$ builder.setRuntimeClassPath("oldRuntimeClassPath")[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_17 $$ ClassLoader classLoader = processConfig.getReactClassLoader()[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_16 $$ Assert.assertEquals(newRuntimeClassPath, processConfig.getRuntimeClassPath())[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_27 $$ Assert.assertEquals(urls[1], uri.toURL())[ CD ]
Line_22 $$ File file = new File(newBootstrapClassPath)-->Line_26 $$ uri = file.toURI()[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_4 $$ String newBootstrapClassPath = "newBootstrapClassPath"[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_28 $$ final MalformedURLException malformedURLException = new MalformedURLException()[ CD ]
Line_29 $$ Map<Object, Object> handlers = ReflectionTestUtil.getFieldValue(URL.class, "handlers")-->Line_30 $$ handlers.put("file", new URLStreamHandler() [ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_23 $$ URI uri = file.toURI()[ CD ]
Line_26 $$ uri = file.toURI()-->Line_27 $$ Assert.assertEquals(urls[1], uri.toURL())[ FD ]
Line_23 $$ URI uri = file.toURI()-->Line_26 $$ uri = file.toURI()[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_22 $$ File file = new File(newBootstrapClassPath)[ CD ]
Line_28 $$ final MalformedURLException malformedURLException = new MalformedURLException()-->Line_42 $$ Assert.assertSame(malformedURLException, pe.getCause())[ FD ]
Line_9 $$ Builder builder = new Builder()-->Line_39 $$ loadedPaths.toProcessConfig(builder.build())[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_8 $$ List<String> arguments = Collections.emptyList()[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_13 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())[ CD ]
Line_6 $$ LoadedPaths loadedPaths = new LoadedPaths(inputPaths, newBootstrapClassPath, newRuntimeClassPath)-->Line_7 $$ Assert.assertSame(inputPaths, loadedPaths.getInputPaths())[ FD ]
Line_9 $$ Builder builder = new Builder()-->Line_10 $$ builder.setArguments(arguments)[ FD ]
Line_8 $$ List<String> arguments = Collections.emptyList()-->Line_14 $$ Assert.assertSame(arguments, processConfig.getArguments())[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_21 $$ Assert.assertEquals(2, urls.length)[ CD ]
Line_23 $$ URI uri = file.toURI()-->Line_24 $$ Assert.assertEquals(urls[0], uri.toURL())[ FD ]
Line_13 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())-->Line_16 $$ Assert.assertEquals(newRuntimeClassPath, processConfig.getRuntimeClassPath())[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_6 $$ LoadedPaths loadedPaths = new LoadedPaths(inputPaths, newBootstrapClassPath, newRuntimeClassPath)[ CD ]
Line_23 $$ URI uri = file.toURI()-->Line_27 $$ Assert.assertEquals(urls[1], uri.toURL())[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_30 $$ handlers.put("file", new URLStreamHandler() [ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_11 $$ builder.setBootstrapClassPath("oldBootstrapClassPath")[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_5 $$ String newRuntimeClassPath = "newRuntimeClassPath"[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_18 $$ Assert.assertSame(URLClassLoader.class, classLoader.getClass())[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_14 $$ Assert.assertSame(arguments, processConfig.getArguments())[ CD ]
Line_13 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())-->Line_15 $$ Assert.assertEquals(newBootstrapClassPath, processConfig.getBootstrapClassPath())[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_15 $$ Assert.assertEquals(newBootstrapClassPath, processConfig.getBootstrapClassPath())[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_20 $$ URL[] urls = urlClassLoader.getURLs()[ CD ]
Line_9 $$ Builder builder = new Builder()-->Line_11 $$ builder.setBootstrapClassPath("oldBootstrapClassPath")[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_10 $$ builder.setArguments(arguments)[ CD ]
Line_25 $$ file = new File(newRuntimeClassPath)-->Line_26 $$ uri = file.toURI()[ FD ]
Line_30 $$ handlers.put("file", new URLStreamHandler() -->Line_32 $$ ReflectionUtil.throwException(malformedURLException)[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_25 $$ file = new File(newRuntimeClassPath)[ CD ]
Line_8 $$ List<String> arguments = Collections.emptyList()-->Line_10 $$ builder.setArguments(arguments)[ FD ]
Line_4 $$ String newBootstrapClassPath = "newBootstrapClassPath"-->Line_15 $$ Assert.assertEquals(newBootstrapClassPath, processConfig.getBootstrapClassPath())[ FD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_19 $$ URLClassLoader urlClassLoader = (URLClassLoader) classLoader[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_24 $$ Assert.assertEquals(urls[0], uri.toURL())[ CD ]
Line_2 $$ public void testLoadedPaths() throws Exception -->Line_9 $$ Builder builder = new Builder()[ CD ]
Line_9 $$ Builder builder = new Builder()-->Line_12 $$ builder.setRuntimeClassPath("oldRuntimeClassPath")[ FD ]
Line_13 $$ ProcessConfig processConfig = loadedPaths.toProcessConfig(builder.build())-->Line_14 $$ Assert.assertSame(arguments, processConfig.getArguments())[ FD ]
Line_29 $$ Map<Object, Object> handlers = ReflectionTestUtil.getFieldValue(URL.class, "handlers")-->Line_44 $$ handlers.clear()[ FD ]
