Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_31 $$ this.registrar.registerEndpoint(endpoint, factory)[ FD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_6 $$ endpoint.setMethod(invocableMethod)[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_15 $$ if (StringUtils.hasText(jmsListener.subscription())) [ CD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_16 $$ endpoint.setSubscription(resolve(jmsListener.subscription()))[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_10 $$ endpoint.setId(getEndpointId(jmsListener))[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_12 $$ if (StringUtils.hasText(jmsListener.selector())) [ CD ]
Line_26 $$ factory = this.beanFactory.getBean(containerFactoryBeanName, JmsListenerContainerFactory.class)-->Line_31 $$ this.registrar.registerEndpoint(endpoint, factory)[ FD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_13 $$ endpoint.setSelector(resolve(jmsListener.selector()))[ FD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_7 $$ endpoint.setMostSpecificMethod(mostSpecificMethod)[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_23 $$ if (StringUtils.hasText(containerFactoryBeanName)) [ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_13 $$ endpoint.setSelector(resolve(jmsListener.selector()))[ FD ]
Line_22 $$ String containerFactoryBeanName = resolve(jmsListener.containerFactory())-->Line_26 $$ factory = this.beanFactory.getBean(containerFactoryBeanName, JmsListenerContainerFactory.class)[ FD ]
Line_21 $$ JmsListenerContainerFactory<?> factory = null-->Line_31 $$ this.registrar.registerEndpoint(endpoint, factory)[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_3 $$ Method invocableMethod = AopUtils.selectInvocableMethod(mostSpecificMethod, bean.getClass())[ CD ]
Line_15 $$ if (StringUtils.hasText(jmsListener.subscription())) -->Line_16 $$ endpoint.setSubscription(resolve(jmsListener.subscription()))[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_18 $$ if (StringUtils.hasText(jmsListener.concurrency())) [ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_12 $$ if (StringUtils.hasText(jmsListener.selector())) [ FD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_10 $$ endpoint.setId(getEndpointId(jmsListener))[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_7 $$ endpoint.setMostSpecificMethod(mostSpecificMethod)[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_11 $$ endpoint.setDestination(resolve(jmsListener.destination()))[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_31 $$ this.registrar.registerEndpoint(endpoint, factory)[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_22 $$ String containerFactoryBeanName = resolve(jmsListener.containerFactory())[ FD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_11 $$ endpoint.setDestination(resolve(jmsListener.destination()))[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_3 $$ Method invocableMethod = AopUtils.selectInvocableMethod(mostSpecificMethod, bean.getClass())[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_7 $$ endpoint.setMostSpecificMethod(mostSpecificMethod)[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_15 $$ if (StringUtils.hasText(jmsListener.subscription())) [ FD ]
Line_12 $$ if (StringUtils.hasText(jmsListener.selector())) -->Line_13 $$ endpoint.setSelector(resolve(jmsListener.selector()))[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_21 $$ JmsListenerContainerFactory<?> factory = null[ CD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_8 $$ endpoint.setMessageHandlerMethodFactory(this.messageHandlerMethodFactory)[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_18 $$ if (StringUtils.hasText(jmsListener.concurrency())) [ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_5 $$ endpoint.setBean(bean)[ FD ]
Line_3 $$ Method invocableMethod = AopUtils.selectInvocableMethod(mostSpecificMethod, bean.getClass())-->Line_6 $$ endpoint.setMethod(invocableMethod)[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_6 $$ endpoint.setMethod(invocableMethod)[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_11 $$ endpoint.setDestination(resolve(jmsListener.destination()))[ CD ]
Line_22 $$ String containerFactoryBeanName = resolve(jmsListener.containerFactory())-->Line_23 $$ if (StringUtils.hasText(containerFactoryBeanName)) [ FD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_5 $$ endpoint.setBean(bean)[ FD ]
Line_21 $$ JmsListenerContainerFactory<?> factory = null-->Line_26 $$ factory = this.beanFactory.getBean(containerFactoryBeanName, JmsListenerContainerFactory.class)[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_5 $$ endpoint.setBean(bean)[ CD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_19 $$ endpoint.setConcurrency(resolve(jmsListener.concurrency()))[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_10 $$ endpoint.setId(getEndpointId(jmsListener))[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_16 $$ endpoint.setSubscription(resolve(jmsListener.subscription()))[ FD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_8 $$ endpoint.setMessageHandlerMethodFactory(this.messageHandlerMethodFactory)[ CD ]
Line_23 $$ if (StringUtils.hasText(containerFactoryBeanName)) -->Line_24 $$ Assert.state(this.beanFactory != null, "BeanFactory must be set to obtain container factory by bean name")[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_22 $$ String containerFactoryBeanName = resolve(jmsListener.containerFactory())[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_9 $$ endpoint.setBeanFactory(this.beanFactory)[ CD ]
Line_4 $$ MethodJmsListenerEndpoint endpoint = createMethodJmsListenerEndpoint()-->Line_9 $$ endpoint.setBeanFactory(this.beanFactory)[ FD ]
Line_18 $$ if (StringUtils.hasText(jmsListener.concurrency())) -->Line_19 $$ endpoint.setConcurrency(resolve(jmsListener.concurrency()))[ CD ]
Line_2 $$ protected void processJmsListener(JmsListener jmsListener, Method mostSpecificMethod, Object bean) -->Line_19 $$ endpoint.setConcurrency(resolve(jmsListener.concurrency()))[ FD ]
