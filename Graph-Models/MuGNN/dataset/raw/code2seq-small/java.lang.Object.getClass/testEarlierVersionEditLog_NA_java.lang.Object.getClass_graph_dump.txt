Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_5 $$ String testDir = PathUtils.getTestDirName(getClass())[ CD ]
Line_19 $$ FileSystem fs = cluster.getFileSystem()-->Line_21 $$ DFSTestUtil.readFile(fs, testPath)[ FD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_14 $$ GenericTestUtils.assertExists(dataDir)[ CD ]
Line_3 $$ final Configuration conf = new HdfsConfiguration()-->Line_16 $$ conf.set(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY, dataDir.getAbsolutePath())[ FD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_11 $$ File nameDir = new File(dfsDir, "name")[ CD ]
Line_3 $$ final Configuration conf = new HdfsConfiguration()-->Line_15 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameDir.getAbsolutePath())[ FD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_4 $$ String tarFile = System.getProperty("test.cache.data", "build/test/cache") + "/" + HADOOP_1_0_MULTIBLOCK_TGZ[ CD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_12 $$ GenericTestUtils.assertExists(nameDir)[ CD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_15 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameDir.getAbsolutePath())[ CD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_13 $$ File dataDir = new File(dfsDir, "data")[ CD ]
Line_22 $$ FSDataOutputStream stm = fs.append(testPath)-->Line_26 $$ IOUtils.closeStream(stm)[ FD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_3 $$ final Configuration conf = new HdfsConfiguration()[ CD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_16 $$ conf.set(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY, dataDir.getAbsolutePath())[ CD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_7 $$ if (dfsDir.exists() && !FileUtil.fullyDelete(dfsDir)) [ CD ]
Line_11 $$ File nameDir = new File(dfsDir, "name")-->Line_15 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, nameDir.getAbsolutePath())[ FD ]
Line_11 $$ File nameDir = new File(dfsDir, "name")-->Line_12 $$ GenericTestUtils.assertExists(nameDir)[ FD ]
Line_13 $$ File dataDir = new File(dfsDir, "data")-->Line_16 $$ conf.set(DFSConfigKeys.DFS_DATANODE_DATA_DIR_KEY, dataDir.getAbsolutePath())[ FD ]
Line_20 $$ Path testPath = new Path("/user/todd/4blocks")-->Line_21 $$ DFSTestUtil.readFile(fs, testPath)[ FD ]
Line_20 $$ Path testPath = new Path("/user/todd/4blocks")-->Line_22 $$ FSDataOutputStream stm = fs.append(testPath)[ FD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).manageDataDfsDirs(false).manageNameDfsDirs(false).numDataNodes(1).startupOption(StartupOption.UPGRADE).build()-->Line_29 $$ cluster.shutdown()[ FD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_6 $$ File dfsDir = new File(testDir, "image-1.0")[ CD ]
Line_13 $$ File dataDir = new File(dfsDir, "data")-->Line_14 $$ GenericTestUtils.assertExists(dataDir)[ FD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).manageDataDfsDirs(false).manageNameDfsDirs(false).numDataNodes(1).startupOption(StartupOption.UPGRADE).build()[ CD ]
Line_19 $$ FileSystem fs = cluster.getFileSystem()-->Line_22 $$ FSDataOutputStream stm = fs.append(testPath)[ FD ]
Line_2 $$ public void testEarlierVersionEditLog() throws Exception -->Line_10 $$ FileUtil.unTar(new File(tarFile), new File(testDir))[ CD ]
Line_17 $$ MiniDFSCluster cluster = new MiniDFSCluster.Builder(conf).numDataNodes(0).format(false).manageDataDfsDirs(false).manageNameDfsDirs(false).numDataNodes(1).startupOption(StartupOption.UPGRADE).build()-->Line_19 $$ FileSystem fs = cluster.getFileSystem()[ FD ]
Line_22 $$ FSDataOutputStream stm = fs.append(testPath)-->Line_24 $$ stm.write(1)[ FD ]
Line_6 $$ File dfsDir = new File(testDir, "image-1.0")-->Line_7 $$ if (dfsDir.exists() && !FileUtil.fullyDelete(dfsDir)) [ FD ]
