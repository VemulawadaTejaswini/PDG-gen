Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_14 $$ if (specificInterceptors != DO_NOT_PROXY) [ CD ]
Line_13 $$ Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)-->Line_14 $$ if (specificInterceptors != DO_NOT_PROXY) [ FD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_3 $$ if (beanName != null && this.targetSourcedBeans.contains(beanName)) [ FD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_20 $$ this.advisedBeans.put(cacheKey, Boolean.FALSE)[ FD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_10 $$ this.advisedBeans.put(cacheKey, Boolean.FALSE)[ FD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_13 $$ Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)[ FD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_21 $$ return bean[ CD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_15 $$ this.advisedBeans.put(cacheKey, Boolean.TRUE)[ FD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_20 $$ this.advisedBeans.put(cacheKey, Boolean.FALSE)[ CD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_16 $$ Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))[ FD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_6 $$ if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) [ CD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_3 $$ if (beanName != null && this.targetSourcedBeans.contains(beanName)) [ CD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_9 $$ if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) [ CD ]
Line_9 $$ if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) -->Line_11 $$ return bean[ CD ]
Line_14 $$ if (specificInterceptors != DO_NOT_PROXY) -->Line_17 $$ this.proxyTypes.put(cacheKey, proxy.getClass())[ CD ]
Line_16 $$ Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))-->Line_17 $$ this.proxyTypes.put(cacheKey, proxy.getClass())[ FD ]
Line_6 $$ if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) -->Line_7 $$ return bean[ CD ]
Line_14 $$ if (specificInterceptors != DO_NOT_PROXY) -->Line_15 $$ this.advisedBeans.put(cacheKey, Boolean.TRUE)[ CD ]
Line_14 $$ if (specificInterceptors != DO_NOT_PROXY) -->Line_18 $$ return proxy[ CD ]
Line_14 $$ if (specificInterceptors != DO_NOT_PROXY) -->Line_16 $$ Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))[ CD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_17 $$ this.proxyTypes.put(cacheKey, proxy.getClass())[ FD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_13 $$ Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)[ CD ]
Line_13 $$ Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)-->Line_16 $$ Object proxy = createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))[ FD ]
Line_3 $$ if (beanName != null && this.targetSourcedBeans.contains(beanName)) -->Line_4 $$ return bean[ CD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_6 $$ if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) [ FD ]
Line_9 $$ if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) -->Line_10 $$ this.advisedBeans.put(cacheKey, Boolean.FALSE)[ CD ]
Line_2 $$ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) -->Line_9 $$ if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) [ FD ]
