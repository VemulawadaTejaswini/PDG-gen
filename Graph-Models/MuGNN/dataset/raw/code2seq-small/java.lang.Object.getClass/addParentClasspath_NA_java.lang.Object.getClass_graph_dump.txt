Line_6 $$ List<URLClassLoader> loaders = new ArrayList<URLClassLoader>(2)-->Line_9 $$ loaders.add(0, (URLClassLoader) loader)[ FD ]
Line_2 $$ private static void addParentClasspath(Collection<URL> classpath, boolean ext) throws MalformedURLException -->Line_3 $$ String[] extDirs = System.getProperty("java.ext.dirs", "").split(File.pathSeparator)[ CD ]
Line_18 $$ boolean isExt = false-->Line_21 $$ isExt = true[ FD ]
Line_2 $$ private static void addParentClasspath(Collection<URL> classpath, boolean ext) throws MalformedURLException -->Line_4 $$ if (ext && extDirs.length == 0)[ CD ]
Line_18 $$ boolean isExt = false-->Line_25 $$ if (isExt == ext) [ FD ]
Line_4 $$ if (ext && extDirs.length == 0)-->Line_5 $$ return[ CD ]
Line_14 $$ for (URLClassLoader loader : loaders) -->Line_15 $$ URL[] urls = loader.getURLs()[ FD ]
Line_2 $$ private static void addParentClasspath(Collection<URL> classpath, boolean ext) throws MalformedURLException -->Line_26 $$ classpath.add(url)[ FD ]
Line_19 $$ for (String extDir : extDirs) -->Line_20 $$ if (path.startsWith(extDir) && path.length() > extDir.length() && path.charAt(extDir.length()) == File.separatorChar) [ FD ]
Line_2 $$ private static void addParentClasspath(Collection<URL> classpath, boolean ext) throws MalformedURLException -->Line_6 $$ List<URLClassLoader> loaders = new ArrayList<URLClassLoader>(2)[ CD ]
Line_7 $$ for (ClassLoader loader = BootstrapClassLoaderUtil.class.getClassLoader(); loader != null; loader = loader.getParent()) -->Line_8 $$ if (loader instanceof URLClassLoader) [ FD ]
Line_21 $$ isExt = true-->Line_25 $$ if (isExt == ext) [ FD ]
Line_17 $$ String path = urlToPath(url)-->Line_20 $$ if (path.startsWith(extDir) && path.length() > extDir.length() && path.charAt(extDir.length()) == File.separatorChar) [ FD ]
Line_7 $$ for (ClassLoader loader = BootstrapClassLoaderUtil.class.getClassLoader(); loader != null; loader = loader.getParent()) -->Line_8 $$ if (loader instanceof URLClassLoader) [ CD ]
Line_8 $$ if (loader instanceof URLClassLoader) -->Line_11 $$ getLogger().warn("Unknown class loader: " + loader.getClass().getName())[ CD ]
Line_7 $$ for (ClassLoader loader = BootstrapClassLoaderUtil.class.getClassLoader(); loader != null; loader = loader.getParent()) -->Line_11 $$ getLogger().warn("Unknown class loader: " + loader.getClass().getName())[ FD ]
Line_2 $$ private static void addParentClasspath(Collection<URL> classpath, boolean ext) throws MalformedURLException -->Line_25 $$ if (isExt == ext) [ FD ]
Line_2 $$ private static void addParentClasspath(Collection<URL> classpath, boolean ext) throws MalformedURLException -->Line_4 $$ if (ext && extDirs.length == 0)[ FD ]
Line_2 $$ private static void addParentClasspath(Collection<URL> classpath, boolean ext) throws MalformedURLException -->Line_7 $$ for (ClassLoader loader = BootstrapClassLoaderUtil.class.getClassLoader(); loader != null; loader = loader.getParent()) [ CD ]
Line_7 $$ for (ClassLoader loader = BootstrapClassLoaderUtil.class.getClassLoader(); loader != null; loader = loader.getParent()) -->Line_15 $$ URL[] urls = loader.getURLs()[ FD ]
Line_16 $$ for (URL url : urls) -->Line_26 $$ classpath.add(url)[ FD ]
Line_16 $$ for (URL url : urls) -->Line_17 $$ String path = urlToPath(url)[ FD ]
Line_8 $$ if (loader instanceof URLClassLoader) -->Line_9 $$ loaders.add(0, (URLClassLoader) loader)[ CD ]
Line_25 $$ if (isExt == ext) -->Line_26 $$ classpath.add(url)[ CD ]
Line_20 $$ if (path.startsWith(extDir) && path.length() > extDir.length() && path.charAt(extDir.length()) == File.separatorChar) -->Line_21 $$ isExt = true[ CD ]
