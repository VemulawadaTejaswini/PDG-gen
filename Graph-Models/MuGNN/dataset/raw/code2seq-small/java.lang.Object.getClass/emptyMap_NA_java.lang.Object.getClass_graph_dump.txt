Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapTarget"))-->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapTarget"))-->Line_7 $$ assertSame(map, conversionService.convert(map, sourceType, targetType))[ FD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)[ FD ]
Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)-->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)-->Line_7 $$ assertSame(map, conversionService.convert(map, sourceType, targetType))[ FD ]
Line_2 $$ public void emptyMap() throws Exception -->Line_7 $$ assertSame(map, conversionService.convert(map, sourceType, targetType))[ CD ]
Line_3 $$ Map<String, String> map = new HashMap<String, String>()-->Line_7 $$ assertSame(map, conversionService.convert(map, sourceType, targetType))[ FD ]
Line_2 $$ public void emptyMap() throws Exception -->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_2 $$ public void emptyMap() throws Exception -->Line_5 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("emptyMapTarget"))[ CD ]
Line_2 $$ public void emptyMap() throws Exception -->Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(map)[ CD ]
Line_2 $$ public void emptyMap() throws Exception -->Line_3 $$ Map<String, String> map = new HashMap<String, String>()[ CD ]
