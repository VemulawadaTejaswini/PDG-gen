Line_2 $$ public void testTableCaching() throws IOException -->Line_11 $$ names.add("a.b.c")[ CD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_3 $$ File mapFile = File.createTempFile(getClass().getSimpleName() + ".testTableCaching", ".txt")[ CD ]
Line_13 $$ List<String> result1 = mapping.resolve(names)-->Line_15 $$ assertEquals("/rack1", result1.get(0))[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_19 $$ assertEquals(result1, result2)[ CD ]
Line_13 $$ List<String> result1 = mapping.resolve(names)-->Line_14 $$ assertEquals(names.size(), result1.size())[ FD ]
Line_10 $$ List<String> names = new ArrayList<String>()-->Line_12 $$ names.add("1.2.3.4")[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_18 $$ List<String> result2 = mapping.resolve(names)[ CD ]
Line_3 $$ File mapFile = File.createTempFile(getClass().getSimpleName() + ".testTableCaching", ".txt")-->Line_5 $$ mapFile.deleteOnExit()[ FD ]
Line_10 $$ List<String> names = new ArrayList<String>()-->Line_18 $$ List<String> result2 = mapping.resolve(names)[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_14 $$ assertEquals(names.size(), result1.size())[ CD ]
Line_6 $$ TableMapping mapping = new TableMapping()-->Line_13 $$ List<String> result1 = mapping.resolve(names)[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_8 $$ conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY, mapFile.getCanonicalPath())[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_17 $$ conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY, "some bad value for a file")[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_17 $$ conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY, "some bad value for a file")[ CD ]
Line_3 $$ File mapFile = File.createTempFile(getClass().getSimpleName() + ".testTableCaching", ".txt")-->Line_4 $$ Files.write("a.b.c /rack1\n" + "1.2.3.4\t/rack2\n", mapFile, Charsets.UTF_8)[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_12 $$ names.add("1.2.3.4")[ CD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_7 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_16 $$ assertEquals("/rack2", result1.get(1))[ CD ]
Line_6 $$ TableMapping mapping = new TableMapping()-->Line_9 $$ mapping.setConf(conf)[ FD ]
Line_6 $$ TableMapping mapping = new TableMapping()-->Line_18 $$ List<String> result2 = mapping.resolve(names)[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_15 $$ assertEquals("/rack1", result1.get(0))[ CD ]
Line_13 $$ List<String> result1 = mapping.resolve(names)-->Line_16 $$ assertEquals("/rack2", result1.get(1))[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_6 $$ TableMapping mapping = new TableMapping()[ CD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_9 $$ mapping.setConf(conf)[ CD ]
Line_10 $$ List<String> names = new ArrayList<String>()-->Line_14 $$ assertEquals(names.size(), result1.size())[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_8 $$ conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY, mapFile.getCanonicalPath())[ CD ]
Line_3 $$ File mapFile = File.createTempFile(getClass().getSimpleName() + ".testTableCaching", ".txt")-->Line_8 $$ conf.set(NET_TOPOLOGY_TABLE_MAPPING_FILE_KEY, mapFile.getCanonicalPath())[ FD ]
Line_7 $$ Configuration conf = new Configuration()-->Line_9 $$ mapping.setConf(conf)[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_5 $$ mapFile.deleteOnExit()[ CD ]
Line_13 $$ List<String> result1 = mapping.resolve(names)-->Line_19 $$ assertEquals(result1, result2)[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_10 $$ List<String> names = new ArrayList<String>()[ CD ]
Line_18 $$ List<String> result2 = mapping.resolve(names)-->Line_19 $$ assertEquals(result1, result2)[ FD ]
Line_10 $$ List<String> names = new ArrayList<String>()-->Line_13 $$ List<String> result1 = mapping.resolve(names)[ FD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_4 $$ Files.write("a.b.c /rack1\n" + "1.2.3.4\t/rack2\n", mapFile, Charsets.UTF_8)[ CD ]
Line_2 $$ public void testTableCaching() throws IOException -->Line_13 $$ List<String> result1 = mapping.resolve(names)[ CD ]
Line_10 $$ List<String> names = new ArrayList<String>()-->Line_11 $$ names.add("a.b.c")[ FD ]
