Line_4 $$ Field shadowMatchCacheField = null-->Line_6 $$ Class<?> shadowMatchCacheClass = shadowMatchCacheField.getType()[ FD ]
Line_5 $$ shadowMatchCacheField = aspectJExpressionPointcutClass.getDeclaredField("shadowMatchCache")-->Line_6 $$ Class<?> shadowMatchCacheClass = shadowMatchCacheField.getType()[ FD ]
Line_6 $$ Class<?> shadowMatchCacheClass = shadowMatchCacheField.getType()-->Line_7 $$ Assert.assertTrue(shadowMatchCacheClass.getClass().getName() + " is not " + Map.class.getName(), Map.class.isAssignableFrom(shadowMatchCacheClass))[ FD ]
Line_2 $$ public void testAspectJExpressionPointcut() throws Exception -->Line_7 $$ Assert.assertTrue(shadowMatchCacheClass.getClass().getName() + " is not " + Map.class.getName(), Map.class.isAssignableFrom(shadowMatchCacheClass))[ CD ]
Line_4 $$ Field shadowMatchCacheField = null-->Line_5 $$ shadowMatchCacheField = aspectJExpressionPointcutClass.getDeclaredField("shadowMatchCache")[ FD ]
Line_2 $$ public void testAspectJExpressionPointcut() throws Exception -->Line_6 $$ Class<?> shadowMatchCacheClass = shadowMatchCacheField.getType()[ CD ]
Line_2 $$ public void testAspectJExpressionPointcut() throws Exception -->Line_4 $$ Field shadowMatchCacheField = null[ CD ]
Line_2 $$ public void testAspectJExpressionPointcut() throws Exception -->Line_5 $$ shadowMatchCacheField = aspectJExpressionPointcutClass.getDeclaredField("shadowMatchCache")[ CD ]
Line_2 $$ public void testAspectJExpressionPointcut() throws Exception -->Line_3 $$ Class<?> aspectJExpressionPointcutClass = Class.forName("org.springframework.aop.aspectj.AspectJExpressionPointcut")[ CD ]
Line_3 $$ Class<?> aspectJExpressionPointcutClass = Class.forName("org.springframework.aop.aspectj.AspectJExpressionPointcut")-->Line_5 $$ shadowMatchCacheField = aspectJExpressionPointcutClass.getDeclaredField("shadowMatchCache")[ FD ]
