Line_2 $$ public void javaDocSample() throws Exception -->Line_9 $$ assertThat(t.resolveGeneric(1, 0), equalTo((Class) String.class))[ CD ]
Line_3 $$ ResolvableType t = ResolvableType.forField(getClass().getDeclaredField("myMap"))-->Line_7 $$ assertThat(t.getGeneric(1).resolve(), equalTo((Class) List.class))[ FD ]
Line_2 $$ public void javaDocSample() throws Exception -->Line_8 $$ assertThat(t.getGeneric(1).toString(), equalTo("java.util.List<java.lang.String>"))[ CD ]
Line_2 $$ public void javaDocSample() throws Exception -->Line_6 $$ assertThat(t.getGeneric(0).resolve(), equalTo((Class) Integer.class))[ CD ]
Line_3 $$ ResolvableType t = ResolvableType.forField(getClass().getDeclaredField("myMap"))-->Line_8 $$ assertThat(t.getGeneric(1).toString(), equalTo("java.util.List<java.lang.String>"))[ FD ]
Line_3 $$ ResolvableType t = ResolvableType.forField(getClass().getDeclaredField("myMap"))-->Line_9 $$ assertThat(t.resolveGeneric(1, 0), equalTo((Class) String.class))[ FD ]
Line_2 $$ public void javaDocSample() throws Exception -->Line_3 $$ ResolvableType t = ResolvableType.forField(getClass().getDeclaredField("myMap"))[ CD ]
Line_3 $$ ResolvableType t = ResolvableType.forField(getClass().getDeclaredField("myMap"))-->Line_6 $$ assertThat(t.getGeneric(0).resolve(), equalTo((Class) Integer.class))[ FD ]
Line_2 $$ public void javaDocSample() throws Exception -->Line_7 $$ assertThat(t.getGeneric(1).resolve(), equalTo((Class) List.class))[ CD ]
Line_2 $$ public void javaDocSample() throws Exception -->Line_4 $$ assertThat(t.getSuperType().toString(), equalTo("java.util.AbstractMap<java.lang.Integer, java.util.List<java.lang.String>>"))[ CD ]
Line_3 $$ ResolvableType t = ResolvableType.forField(getClass().getDeclaredField("myMap"))-->Line_4 $$ assertThat(t.getSuperType().toString(), equalTo("java.util.AbstractMap<java.lang.Integer, java.util.List<java.lang.String>>"))[ FD ]
Line_2 $$ public void javaDocSample() throws Exception -->Line_5 $$ assertThat(t.asMap().toString(), equalTo("java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>"))[ CD ]
Line_3 $$ ResolvableType t = ResolvableType.forField(getClass().getDeclaredField("myMap"))-->Line_5 $$ assertThat(t.asMap().toString(), equalTo("java.util.Map<java.lang.Integer, java.util.List<java.lang.String>>"))[ FD ]
