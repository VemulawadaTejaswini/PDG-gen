Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_12 $$ AdvisedSupport advisedSupport = ServiceBeanAopProxy.getAdvisedSupport(serviceProxy)[ CD ]
Line_6 $$ Class<?> serviceTypeClass = method.getReturnType()-->Line_7 $$ Object serviceProxy = getServiceProxy(serviceTypeClass)[ FD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_3 $$ Class<?> clazz = serviceWrapper.getClass()[ CD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_4 $$ ClassLoader classLoader = clazz.getClassLoader()[ CD ]
Line_7 $$ Object serviceProxy = getServiceProxy(serviceTypeClass)-->Line_8 $$ if (!ProxyUtil.isProxyClass(serviceProxy.getClass())) [ FD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_5 $$ Method method = clazz.getMethod("getWrappedService", new Class<?>[0])[ CD ]
Line_5 $$ Method method = clazz.getMethod("getWrappedService", new Class<?>[0])-->Line_6 $$ Class<?> serviceTypeClass = method.getReturnType()[ FD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_7 $$ Object serviceProxy = getServiceProxy(serviceTypeClass)[ CD ]
Line_13 $$ TargetSource targetSource = advisedSupport.getTargetSource()-->Line_14 $$ serviceWrapper.setWrappedService((T) targetSource.getTarget())[ FD ]
Line_3 $$ Class<?> clazz = serviceWrapper.getClass()-->Line_4 $$ ClassLoader classLoader = clazz.getClassLoader()[ FD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_6 $$ Class<?> serviceTypeClass = method.getReturnType()[ CD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_8 $$ if (!ProxyUtil.isProxyClass(serviceProxy.getClass())) [ CD ]
Line_8 $$ if (!ProxyUtil.isProxyClass(serviceProxy.getClass())) -->Line_10 $$ return null[ CD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_14 $$ serviceWrapper.setWrappedService((T) targetSource.getTarget())[ FD ]
Line_8 $$ if (!ProxyUtil.isProxyClass(serviceProxy.getClass())) -->Line_9 $$ _log.error("Service hooks require Spring to be configured to use " + "JdkDynamicProxy and will not work with CGLIB")[ CD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_15 $$ return new ServiceBag(classLoader, advisedSupport, serviceTypeClass, serviceWrapper)[ CD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_13 $$ TargetSource targetSource = advisedSupport.getTargetSource()[ CD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_14 $$ serviceWrapper.setWrappedService((T) targetSource.getTarget())[ CD ]
Line_12 $$ AdvisedSupport advisedSupport = ServiceBeanAopProxy.getAdvisedSupport(serviceProxy)-->Line_13 $$ TargetSource targetSource = advisedSupport.getTargetSource()[ FD ]
Line_7 $$ Object serviceProxy = getServiceProxy(serviceTypeClass)-->Line_12 $$ AdvisedSupport advisedSupport = ServiceBeanAopProxy.getAdvisedSupport(serviceProxy)[ FD ]
Line_3 $$ Class<?> clazz = serviceWrapper.getClass()-->Line_5 $$ Method method = clazz.getMethod("getWrappedService", new Class<?>[0])[ FD ]
Line_2 $$ private <T> ServiceBag<?> _getServiceBag(ServiceWrapper<T> serviceWrapper) throws Throwable -->Line_3 $$ Class<?> clazz = serviceWrapper.getClass()[ FD ]
