Line_6 $$ final PlainActionFuture<Response> listener = new PlainActionFuture()-->Line_53 $$ Response response = listener.get()[ FD ]
Line_36 $$ if (criticalFailure) -->Line_40 $$ CapturingTransport.CapturedRequest shardFailedRequest = shardFailedRequests[0][ CD ]
Line_25 $$ if (randomBoolean()) -->Line_27 $$ boolean criticalFailure = randomBoolean()[ CD ]
Line_36 $$ if (criticalFailure) -->Line_41 $$ failures.add(shardFailedRequest)[ CD ]
Line_25 $$ if (randomBoolean()) -->Line_28 $$ if (criticalFailure) [ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_7 $$ logger.debug("expecting [[ CD ]
Line_26 $$ Throwable t-->Line_32 $$ t = new IndexShardNotStartedException(shardId, IndexShardState.RECOVERING)[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_17 $$ if (assignedReplicas > 0) [ FD ]
Line_26 $$ Throwable t-->Line_29 $$ t = new CorruptIndexException("simulated", (String) null)[ FD ]
Line_6 $$ final PlainActionFuture<Response> listener = new PlainActionFuture()-->Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)[ FD ]
Line_21 $$ int criticalFailures = 0-->Line_59 $$ assertThat("failed to see enough shard failures", failures.size(), equalTo(criticalFailures))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_56 $$ assertThat(shardInfo.getFailures(), arrayWithSize(criticalFailures))[ CD ]
Line_21 $$ int criticalFailures = 0-->Line_30 $$ criticalFailures++[ FD ]
Line_54 $$ final ReplicationResponse.ShardInfo shardInfo = response.getShardInfo()-->Line_55 $$ assertThat(shardInfo.getFailed(), equalTo(criticalFailures))[ FD ]
Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)-->Line_50 $$ assertThat(replicationPhase.successful(), equalTo(successful))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_20 $$ int pending = replicationPhase.pending()[ CD ]
Line_25 $$ if (randomBoolean()) -->Line_45 $$ successful++[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_7 $$ logger.debug("expecting [[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_12 $$ assertThat(replicationPhase.pending(), equalTo(assignedReplicas))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_17 $$ if (assignedReplicas > 0) [ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_3 $$ final ShardIterator shardIt = shardRoutingTable.shardsIt()[ FD ]
Line_25 $$ if (randomBoolean()) -->Line_46 $$ transport.handleResponse(capturedRequest.requestId, TransportResponse.Empty.INSTANCE)[ CD ]
Line_29 $$ t = new CorruptIndexException("simulated", (String) null)-->Line_35 $$ transport.handleResponse(capturedRequest.requestId, t)[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_53 $$ Response response = listener.get()[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_23 $$ List<CapturingTransport.CapturedRequest> failures = new ArrayList()[ CD ]
Line_25 $$ if (randomBoolean()) -->Line_35 $$ transport.handleResponse(capturedRequest.requestId, t)[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_11 $$ assertThat(replicationPhase.totalShards(), equalTo(totalShards))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_12 $$ assertThat(replicationPhase.pending(), equalTo(assignedReplicas))[ CD ]
Line_40 $$ CapturingTransport.CapturedRequest shardFailedRequest = shardFailedRequests[0]-->Line_41 $$ failures.add(shardFailedRequest)[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_14 $$ final CapturingTransport.CapturedRequest[] capturedRequests = transport.capturedRequests()[ CD ]
Line_54 $$ final ReplicationResponse.ShardInfo shardInfo = response.getShardInfo()-->Line_57 $$ assertThat(shardInfo.getSuccessful(), equalTo(successful))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_16 $$ assertThat(capturedRequests.length, equalTo(assignedReplicas))[ FD ]
Line_20 $$ int pending = replicationPhase.pending()-->Line_48 $$ pending--[ FD ]
Line_21 $$ int criticalFailures = 0-->Line_55 $$ assertThat(shardInfo.getFailed(), equalTo(criticalFailures))[ FD ]
Line_22 $$ int successful = 1-->Line_57 $$ assertThat(shardInfo.getSuccessful(), equalTo(successful))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_58 $$ assertThat(shardInfo.getTotal(), equalTo(totalShards))[ FD ]
Line_5 $$ final Request request = new Request(shardId)-->Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)[ FD ]
Line_54 $$ final ReplicationResponse.ShardInfo shardInfo = response.getShardInfo()-->Line_56 $$ assertThat(shardInfo.getFailures(), arrayWithSize(criticalFailures))[ FD ]
Line_6 $$ final PlainActionFuture<Response> listener = new PlainActionFuture()-->Line_18 $$ assertThat("listener is done, but there are outstanding replicas", listener.isDone(), equalTo(false))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_55 $$ assertThat(shardInfo.getFailed(), equalTo(criticalFailures))[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_21 $$ int criticalFailures = 0[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_59 $$ assertThat("failed to see enough shard failures", failures.size(), equalTo(criticalFailures))[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_6 $$ final PlainActionFuture<Response> listener = new PlainActionFuture()[ CD ]
Line_32 $$ t = new IndexShardNotStartedException(shardId, IndexShardState.RECOVERING)-->Line_35 $$ transport.handleResponse(capturedRequest.requestId, t)[ FD ]
Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)-->Line_12 $$ assertThat(replicationPhase.pending(), equalTo(assignedReplicas))[ FD ]
Line_36 $$ if (criticalFailure) -->Line_42 $$ transport.handleResponse(shardFailedRequest.requestId, TransportResponse.Empty.INSTANCE)[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_63 $$ assertIndexShardCounter(1)[ CD ]
Line_22 $$ int successful = 1-->Line_50 $$ assertThat(replicationPhase.successful(), equalTo(successful))[ FD ]
Line_36 $$ if (criticalFailure) -->Line_38 $$ transport.clear()[ CD ]
Line_22 $$ int successful = 1-->Line_45 $$ successful++[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_5 $$ final Request request = new Request(shardId)[ CD ]
Line_23 $$ List<CapturingTransport.CapturedRequest> failures = new ArrayList()-->Line_59 $$ assertThat("failed to see enough shard failures", failures.size(), equalTo(criticalFailures))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_8 $$ Releasable reference = getOrCreateIndexShardOperationsCounter()[ CD ]
Line_3 $$ final ShardIterator shardIt = shardRoutingTable.shardsIt()-->Line_4 $$ final ShardId shardId = shardIt.shardId()[ FD ]
Line_25 $$ if (randomBoolean()) -->Line_36 $$ if (criticalFailure) [ CD ]
Line_6 $$ final PlainActionFuture<Response> listener = new PlainActionFuture()-->Line_52 $$ assertThat(listener.isDone(), equalTo(true))[ FD ]
Line_23 $$ List<CapturingTransport.CapturedRequest> failures = new ArrayList()-->Line_41 $$ failures.add(shardFailedRequest)[ FD ]
Line_36 $$ if (criticalFailure) -->Line_39 $$ assertEquals(1, shardFailedRequests.length)[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_13 $$ replicationPhase.run()[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_57 $$ assertThat(shardInfo.getSuccessful(), equalTo(successful))[ CD ]
Line_20 $$ int pending = replicationPhase.pending()-->Line_49 $$ assertThat(replicationPhase.pending(), equalTo(pending))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_16 $$ assertThat(capturedRequests.length, equalTo(assignedReplicas))[ CD ]
Line_17 $$ if (assignedReplicas > 0) -->Line_18 $$ assertThat("listener is done, but there are outstanding replicas", listener.isDone(), equalTo(false))[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_9 $$ assertIndexShardCounter(2)[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_4 $$ final ShardId shardId = shardIt.shardId()[ CD ]
Line_29 $$ t = new CorruptIndexException("simulated", (String) null)-->Line_32 $$ t = new IndexShardNotStartedException(shardId, IndexShardState.RECOVERING)[ FD ]
Line_28 $$ if (criticalFailure) -->Line_32 $$ t = new IndexShardNotStartedException(shardId, IndexShardState.RECOVERING)[ CD ]
Line_28 $$ if (criticalFailure) -->Line_29 $$ t = new CorruptIndexException("simulated", (String) null)[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_15 $$ transport.clear()[ CD ]
Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)-->Line_11 $$ assertThat(replicationPhase.totalShards(), equalTo(totalShards))[ FD ]
Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)-->Line_13 $$ replicationPhase.run()[ FD ]
Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)-->Line_49 $$ assertThat(replicationPhase.pending(), equalTo(pending))[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_22 $$ int successful = 1[ CD ]
Line_53 $$ Response response = listener.get()-->Line_54 $$ final ReplicationResponse.ShardInfo shardInfo = response.getShardInfo()[ FD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_11 $$ assertThat(replicationPhase.totalShards(), equalTo(totalShards))[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_3 $$ final ShardIterator shardIt = shardRoutingTable.shardsIt()[ CD ]
Line_26 $$ Throwable t-->Line_35 $$ transport.handleResponse(capturedRequest.requestId, t)[ FD ]
Line_54 $$ final ReplicationResponse.ShardInfo shardInfo = response.getShardInfo()-->Line_58 $$ assertThat(shardInfo.getTotal(), equalTo(totalShards))[ FD ]
Line_28 $$ if (criticalFailure) -->Line_30 $$ criticalFailures++[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_54 $$ final ReplicationResponse.ShardInfo shardInfo = response.getShardInfo()[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_58 $$ assertThat(shardInfo.getTotal(), equalTo(totalShards))[ CD ]
Line_21 $$ int criticalFailures = 0-->Line_56 $$ assertThat(shardInfo.getFailures(), arrayWithSize(criticalFailures))[ FD ]
Line_25 $$ if (randomBoolean()) -->Line_26 $$ Throwable t[ CD ]
Line_2 $$ protected void runReplicateTest(IndexShardRoutingTable shardRoutingTable, int assignedReplicas, int totalShards) throws InterruptedException, ExecutionException -->Line_52 $$ assertThat(listener.isDone(), equalTo(true))[ CD ]
Line_36 $$ if (criticalFailure) -->Line_37 $$ CapturingTransport.CapturedRequest[] shardFailedRequests = transport.capturedRequests()[ CD ]
Line_10 $$ TransportReplicationAction<Request, Request, Response>.ReplicationPhase<Request, Request, Response> replicationPhase = action.new ReplicationPhase(request, new Response(), request.shardId(), createTransportChannel(listener), reference, null)-->Line_20 $$ int pending = replicationPhase.pending()[ FD ]
