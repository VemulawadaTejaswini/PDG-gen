Line_2 $$ public void testReceive() throws Exception -->Line_22 $$ Exception exception = rpcResponse.getException()[ CD ]
Line_6 $$ Serializer serializer = new Serializer()-->Line_7 $$ serializer.writeObject(new TestProcessCallable())[ FD ]
Line_15 $$ serializer = new Serializer()-->Line_17 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_19 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ CD ]
Line_2 $$ public void testReceive() throws Exception -->Line_7 $$ serializer.writeObject(new TestProcessCallable())[ CD ]
Line_2 $$ public void testReceive() throws Exception -->Line_14 $$ Assert.assertNull(rpcResponse.getException())[ CD ]
Line_4 $$ BootstrapRPCDatagramReceiveHandler bootstrapRPCDatagramReceiveHandler = new BootstrapRPCDatagramReceiveHandler()-->Line_17 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ FD ]
Line_11 $$ Deserializer deserializer = new Deserializer(responseDatagram.getDataByteBuffer())-->Line_12 $$ RPCResponse rpcResponse = deserializer.readObject()[ FD ]
Line_19 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())-->Line_20 $$ rpcResponse = deserializer.readObject()[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_4 $$ BootstrapRPCDatagramReceiveHandler bootstrapRPCDatagramReceiveHandler = new BootstrapRPCDatagramReceiveHandler()[ CD ]
Line_12 $$ RPCResponse rpcResponse = deserializer.readObject()-->Line_14 $$ Assert.assertNull(rpcResponse.getException())[ FD ]
Line_5 $$ MockIntraband mockIntraband = new MockIntraband()-->Line_18 $$ responseDatagram = mockIntraband.getDatagram()[ FD ]
Line_12 $$ RPCResponse rpcResponse = deserializer.readObject()-->Line_20 $$ rpcResponse = deserializer.readObject()[ FD ]
Line_12 $$ RPCResponse rpcResponse = deserializer.readObject()-->Line_22 $$ Exception exception = rpcResponse.getException()[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_12 $$ RPCResponse rpcResponse = deserializer.readObject()[ CD ]
Line_6 $$ Serializer serializer = new Serializer()-->Line_16 $$ serializer.writeObject(new ErrorTestProcessCallable())[ FD ]
Line_6 $$ Serializer serializer = new Serializer()-->Line_17 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_23 $$ Assert.assertSame(ProcessException.class, exception.getClass())[ CD ]
Line_12 $$ RPCResponse rpcResponse = deserializer.readObject()-->Line_21 $$ Assert.assertNull(rpcResponse.getResult())[ FD ]
Line_8 $$ SystemDataType systemDataType = SystemDataType.RPC-->Line_17 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_15 $$ serializer = new Serializer()[ CD ]
Line_18 $$ responseDatagram = mockIntraband.getDatagram()-->Line_19 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ FD ]
Line_20 $$ rpcResponse = deserializer.readObject()-->Line_22 $$ Exception exception = rpcResponse.getException()[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_17 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ CD ]
Line_2 $$ public void testReceive() throws Exception -->Line_13 $$ Assert.assertEquals(TestProcessCallable.class.getName(), rpcResponse.getResult())[ CD ]
Line_2 $$ public void testReceive() throws Exception -->Line_11 $$ Deserializer deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ CD ]
Line_2 $$ public void testReceive() throws Exception -->Line_18 $$ responseDatagram = mockIntraband.getDatagram()[ CD ]
Line_22 $$ Exception exception = rpcResponse.getException()-->Line_23 $$ Assert.assertSame(ProcessException.class, exception.getClass())[ FD ]
Line_11 $$ Deserializer deserializer = new Deserializer(responseDatagram.getDataByteBuffer())-->Line_19 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ FD ]
Line_11 $$ Deserializer deserializer = new Deserializer(responseDatagram.getDataByteBuffer())-->Line_20 $$ rpcResponse = deserializer.readObject()[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_24 $$ Assert.assertEquals(ErrorTestProcessCallable.class.getName(), exception.getMessage())[ CD ]
Line_2 $$ public void testReceive() throws Exception -->Line_20 $$ rpcResponse = deserializer.readObject()[ CD ]
Line_10 $$ Datagram responseDatagram = mockIntraband.getDatagram()-->Line_18 $$ responseDatagram = mockIntraband.getDatagram()[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_10 $$ Datagram responseDatagram = mockIntraband.getDatagram()[ CD ]
Line_6 $$ Serializer serializer = new Serializer()-->Line_15 $$ serializer = new Serializer()[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_6 $$ Serializer serializer = new Serializer()[ CD ]
Line_12 $$ RPCResponse rpcResponse = deserializer.readObject()-->Line_13 $$ Assert.assertEquals(TestProcessCallable.class.getName(), rpcResponse.getResult())[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_21 $$ Assert.assertNull(rpcResponse.getResult())[ CD ]
Line_5 $$ MockIntraband mockIntraband = new MockIntraband()-->Line_10 $$ Datagram responseDatagram = mockIntraband.getDatagram()[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_16 $$ serializer.writeObject(new ErrorTestProcessCallable())[ CD ]
Line_22 $$ Exception exception = rpcResponse.getException()-->Line_24 $$ Assert.assertEquals(ErrorTestProcessCallable.class.getName(), exception.getMessage())[ FD ]
Line_10 $$ Datagram responseDatagram = mockIntraband.getDatagram()-->Line_19 $$ deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ FD ]
Line_20 $$ rpcResponse = deserializer.readObject()-->Line_21 $$ Assert.assertNull(rpcResponse.getResult())[ FD ]
Line_15 $$ serializer = new Serializer()-->Line_16 $$ serializer.writeObject(new ErrorTestProcessCallable())[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_9 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ CD ]
Line_8 $$ SystemDataType systemDataType = SystemDataType.RPC-->Line_9 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ FD ]
Line_4 $$ BootstrapRPCDatagramReceiveHandler bootstrapRPCDatagramReceiveHandler = new BootstrapRPCDatagramReceiveHandler()-->Line_9 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_5 $$ MockIntraband mockIntraband = new MockIntraband()[ CD ]
Line_6 $$ Serializer serializer = new Serializer()-->Line_9 $$ bootstrapRPCDatagramReceiveHandler.receive(new MockRegistrationReference(mockIntraband), Datagram.createRequestDatagram(systemDataType.getValue(), serializer.toByteBuffer()))[ FD ]
Line_10 $$ Datagram responseDatagram = mockIntraband.getDatagram()-->Line_11 $$ Deserializer deserializer = new Deserializer(responseDatagram.getDataByteBuffer())[ FD ]
Line_2 $$ public void testReceive() throws Exception -->Line_3 $$ PortalClassLoaderUtil.setClassLoader(getClass().getClassLoader())[ CD ]
Line_2 $$ public void testReceive() throws Exception -->Line_8 $$ SystemDataType systemDataType = SystemDataType.RPC[ CD ]
