Line_8 $$ SequenceFile.Writer w = null-->Line_16 $$ w.close()[ FD ]
Line_11 $$ for (int i = 0; i < splits.length; ++i) -->Line_12 $$ w.append(splits[i], NullWritable.get())[ CD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_18 $$ return p[ CD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_8 $$ SequenceFile.Writer w = null[ CD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_6 $$ TotalOrderPartitioner.setPartitionFile(conf, p)[ CD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_7 $$ conf.setInt(MRJobConfig.NUM_REDUCES, splits.length + 1)[ CD ]
Line_5 $$ Path p = new Path(testdir, testname + "/_partition.lst")-->Line_6 $$ TotalOrderPartitioner.setPartitionFile(conf, p)[ FD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_10 $$ w = SequenceFile.createWriter(conf, SequenceFile.Writer.file(p), SequenceFile.Writer.keyClass(splits[0].getClass()), SequenceFile.Writer.valueClass(NullWritable.class), SequenceFile.Writer.compression(CompressionType.NONE))[ FD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_3 $$ final FileSystem fs = FileSystem.getLocal(conf)[ CD ]
Line_8 $$ SequenceFile.Writer w = null-->Line_10 $$ w = SequenceFile.createWriter(conf, SequenceFile.Writer.file(p), SequenceFile.Writer.keyClass(splits[0].getClass()), SequenceFile.Writer.valueClass(NullWritable.class), SequenceFile.Writer.compression(CompressionType.NONE))[ FD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_3 $$ final FileSystem fs = FileSystem.getLocal(conf)[ FD ]
Line_8 $$ SequenceFile.Writer w = null-->Line_15 $$ if (null != w)[ FD ]
Line_8 $$ SequenceFile.Writer w = null-->Line_12 $$ w.append(splits[i], NullWritable.get())[ FD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_4 $$ final Path testdir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(fs.getUri(), fs.getWorkingDirectory())[ CD ]
Line_10 $$ w = SequenceFile.createWriter(conf, SequenceFile.Writer.file(p), SequenceFile.Writer.keyClass(splits[0].getClass()), SequenceFile.Writer.valueClass(NullWritable.class), SequenceFile.Writer.compression(CompressionType.NONE))-->Line_15 $$ if (null != w)[ FD ]
Line_10 $$ w = SequenceFile.createWriter(conf, SequenceFile.Writer.file(p), SequenceFile.Writer.keyClass(splits[0].getClass()), SequenceFile.Writer.valueClass(NullWritable.class), SequenceFile.Writer.compression(CompressionType.NONE))-->Line_12 $$ w.append(splits[i], NullWritable.get())[ FD ]
Line_10 $$ w = SequenceFile.createWriter(conf, SequenceFile.Writer.file(p), SequenceFile.Writer.keyClass(splits[0].getClass()), SequenceFile.Writer.valueClass(NullWritable.class), SequenceFile.Writer.compression(CompressionType.NONE))-->Line_16 $$ w.close()[ FD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_5 $$ Path p = new Path(testdir, testname + "/_partition.lst")[ CD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_7 $$ conf.setInt(MRJobConfig.NUM_REDUCES, splits.length + 1)[ FD ]
Line_2 $$ private static <T> Path writePartitionFile(String testname, Configuration conf, T[] splits) throws IOException -->Line_6 $$ TotalOrderPartitioner.setPartitionFile(conf, p)[ FD ]
Line_3 $$ final FileSystem fs = FileSystem.getLocal(conf)-->Line_4 $$ final Path testdir = new Path(System.getProperty("test.build.data", "/tmp")).makeQualified(fs.getUri(), fs.getWorkingDirectory())[ FD ]
Line_15 $$ if (null != w)-->Line_16 $$ w.close()[ CD ]
Line_5 $$ Path p = new Path(testdir, testname + "/_partition.lst")-->Line_10 $$ w = SequenceFile.createWriter(conf, SequenceFile.Writer.file(p), SequenceFile.Writer.keyClass(splits[0].getClass()), SequenceFile.Writer.valueClass(NullWritable.class), SequenceFile.Writer.compression(CompressionType.NONE))[ FD ]
