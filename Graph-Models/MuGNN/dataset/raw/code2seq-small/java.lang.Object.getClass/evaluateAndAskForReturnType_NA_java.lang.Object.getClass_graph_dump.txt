Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_10 $$ Object value = expr.getValue(eContext, expectedResultType)[ FD ]
Line_10 $$ Object value = expr.getValue(eContext, expectedResultType)-->Line_17 $$ Class<?> resultType = value.getClass()[ FD ]
Line_10 $$ Object value = expr.getValue(eContext, expectedResultType)-->Line_19 $$ assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue, value)[ FD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_19 $$ assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue, value)[ FD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_3 $$ Expression expr = parser.parseExpression(expression)[ CD ]
Line_11 $$ if (value == null) -->Line_12 $$ if (expectedValue == null) [ CD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_12 $$ if (expectedValue == null) [ FD ]
Line_3 $$ Expression expr = parser.parseExpression(expression)-->Line_8 $$ SpelUtilities.printAbstractSyntaxTree(System.out, expr)[ FD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_15 $$ assertEquals("Expression returned null value, but expected '" + expectedValue + "'", expectedValue, null)[ FD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_4 $$ if (expr == null) [ CD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_18 $$ assertEquals("Type of the actual result was not as expected.  Expected '" + expectedResultType + "' but result was of type '" + resultType + "'", expectedResultType, resultType)[ CD ]
Line_10 $$ Object value = expr.getValue(eContext, expectedResultType)-->Line_11 $$ if (value == null) [ FD ]
Line_12 $$ if (expectedValue == null) -->Line_13 $$ return[ CD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_18 $$ assertEquals("Type of the actual result was not as expected.  Expected '" + expectedResultType + "' but result was of type '" + resultType + "'", expectedResultType, resultType)[ FD ]
Line_3 $$ Expression expr = parser.parseExpression(expression)-->Line_10 $$ Object value = expr.getValue(eContext, expectedResultType)[ FD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_7 $$ if (DEBUG) [ CD ]
Line_17 $$ Class<?> resultType = value.getClass()-->Line_18 $$ assertEquals("Type of the actual result was not as expected.  Expected '" + expectedResultType + "' but result was of type '" + resultType + "'", expectedResultType, resultType)[ FD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_10 $$ Object value = expr.getValue(eContext, expectedResultType)[ CD ]
Line_4 $$ if (expr == null) -->Line_5 $$ fail("Parser returned null for expression")[ CD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_3 $$ Expression expr = parser.parseExpression(expression)[ FD ]
Line_3 $$ Expression expr = parser.parseExpression(expression)-->Line_4 $$ if (expr == null) [ FD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_17 $$ Class<?> resultType = value.getClass()[ CD ]
Line_7 $$ if (DEBUG) -->Line_8 $$ SpelUtilities.printAbstractSyntaxTree(System.out, expr)[ CD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_11 $$ if (value == null) [ CD ]
Line_2 $$ public void evaluateAndAskForReturnType(String expression, Object expectedValue, Class<?> expectedResultType) -->Line_19 $$ assertEquals("Did not get expected value for expression '" + expression + "'.", expectedValue, value)[ CD ]
Line_11 $$ if (value == null) -->Line_15 $$ assertEquals("Expression returned null value, but expected '" + expectedValue + "'", expectedValue, null)[ CD ]
