Line_2 $$ public void adaptedCollectionTypesFromSameSourceType() throws Exception -->Line_7 $$ assertEquals(Collections.singleton("testX"), conversionService.convert("test", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField("genericCollection"))))[ CD ]
Line_2 $$ public void adaptedCollectionTypesFromSameSourceType() throws Exception -->Line_8 $$ assertEquals(Collections.singleton("testX"), conversionService.convert("test", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField("stringCollection"))))[ CD ]
Line_2 $$ public void adaptedCollectionTypesFromSameSourceType() throws Exception -->Line_5 $$ assertEquals(Collections.singleton("testX"), conversionService.convert("test", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField("genericCollection"))))[ CD ]
Line_2 $$ public void adaptedCollectionTypesFromSameSourceType() throws Exception -->Line_3 $$ conversionService.addConverter(new MyStringToStringCollectionConverter())[ CD ]
Line_2 $$ public void adaptedCollectionTypesFromSameSourceType() throws Exception -->Line_4 $$ assertEquals(Collections.singleton("testX"), conversionService.convert("test", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField("stringCollection"))))[ CD ]
Line_2 $$ public void adaptedCollectionTypesFromSameSourceType() throws Exception -->Line_6 $$ assertEquals(Collections.singleton("testX"), conversionService.convert("test", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField("rawCollection"))))[ CD ]
Line_2 $$ public void adaptedCollectionTypesFromSameSourceType() throws Exception -->Line_9 $$ assertEquals(Collections.singleton("testX"), conversionService.convert("test", TypeDescriptor.valueOf(String.class), new TypeDescriptor(getClass().getField("rawCollection"))))[ CD ]
