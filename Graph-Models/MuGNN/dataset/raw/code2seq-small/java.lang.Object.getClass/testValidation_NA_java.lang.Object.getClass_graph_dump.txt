Line_14 $$ except = builder.checkLatLon(true)-->Line_15 $$ assertNull("Inner pre 2.0 validation w/o coerce should ignore invalid coordinate for old indexes: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_4 $$ for (PointTester tester : testers) -->Line_12 $$ assertNull("Inner pre 2.0 validation w/ coerce should ignore invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate + " ", except)[ FD ]
Line_11 $$ except = builder.checkLatLon(false)-->Line_12 $$ assertNull("Inner pre 2.0 validation w/ coerce should ignore invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate + " ", except)[ FD ]
Line_8 $$ except = builder.checkLatLon(true)-->Line_15 $$ assertNull("Inner pre 2.0 validation w/o coerce should ignore invalid coordinate for old indexes: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_8 $$ except = builder.checkLatLon(true)-->Line_12 $$ assertNull("Inner pre 2.0 validation w/ coerce should ignore invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate + " ", except)[ FD ]
Line_6 $$ GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder()-->Line_16 $$ tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.STRICT), false)[ FD ]
Line_4 $$ for (PointTester tester : testers) -->Line_10 $$ tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.COERCE), false)[ FD ]
Line_5 $$ QueryValidationException except = null-->Line_17 $$ except = builder.checkLatLon(false)[ FD ]
Line_4 $$ for (PointTester tester : testers) -->Line_16 $$ tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.STRICT), false)[ FD ]
Line_6 $$ GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder()-->Line_17 $$ except = builder.checkLatLon(false)[ FD ]
Line_8 $$ except = builder.checkLatLon(true)-->Line_14 $$ except = builder.checkLatLon(true)[ FD ]
Line_2 $$ public void testValidation() -->Line_3 $$ PointTester[] testers = [ CD ]
Line_11 $$ except = builder.checkLatLon(false)-->Line_15 $$ assertNull("Inner pre 2.0 validation w/o coerce should ignore invalid coordinate for old indexes: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_5 $$ QueryValidationException except = null-->Line_8 $$ except = builder.checkLatLon(true)[ FD ]
Line_5 $$ QueryValidationException except = null-->Line_9 $$ assertNull("Inner post 2.0 validation w/ coerce should ignore invalid " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate + " ", except)[ FD ]
Line_14 $$ except = builder.checkLatLon(true)-->Line_18 $$ assertNotNull("Inner post 2.0 validation w/o coerce should detect invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_17 $$ except = builder.checkLatLon(false)-->Line_18 $$ assertNotNull("Inner post 2.0 validation w/o coerce should detect invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_8 $$ except = builder.checkLatLon(true)-->Line_18 $$ assertNotNull("Inner post 2.0 validation w/o coerce should detect invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_11 $$ except = builder.checkLatLon(false)-->Line_17 $$ except = builder.checkLatLon(false)[ FD ]
Line_6 $$ GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder()-->Line_8 $$ except = builder.checkLatLon(true)[ FD ]
Line_4 $$ for (PointTester tester : testers) -->Line_18 $$ assertNotNull("Inner post 2.0 validation w/o coerce should detect invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_4 $$ for (PointTester tester : testers) -->Line_13 $$ tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.STRICT), false)[ FD ]
Line_5 $$ QueryValidationException except = null-->Line_18 $$ assertNotNull("Inner post 2.0 validation w/o coerce should detect invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_6 $$ GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder()-->Line_13 $$ tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.STRICT), false)[ FD ]
Line_6 $$ GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder()-->Line_14 $$ except = builder.checkLatLon(true)[ FD ]
Line_5 $$ QueryValidationException except = null-->Line_15 $$ assertNull("Inner pre 2.0 validation w/o coerce should ignore invalid coordinate for old indexes: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_5 $$ QueryValidationException except = null-->Line_12 $$ assertNull("Inner pre 2.0 validation w/ coerce should ignore invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate + " ", except)[ FD ]
Line_8 $$ except = builder.checkLatLon(true)-->Line_9 $$ assertNull("Inner post 2.0 validation w/ coerce should ignore invalid " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate + " ", except)[ FD ]
Line_4 $$ for (PointTester tester : testers) -->Line_9 $$ assertNull("Inner post 2.0 validation w/ coerce should ignore invalid " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate + " ", except)[ FD ]
Line_8 $$ except = builder.checkLatLon(true)-->Line_17 $$ except = builder.checkLatLon(false)[ FD ]
Line_11 $$ except = builder.checkLatLon(false)-->Line_18 $$ assertNotNull("Inner post 2.0 validation w/o coerce should detect invalid coordinate: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_5 $$ QueryValidationException except = null-->Line_14 $$ except = builder.checkLatLon(true)[ FD ]
Line_4 $$ for (PointTester tester : testers) -->Line_7 $$ tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.COERCE), false)[ FD ]
Line_8 $$ except = builder.checkLatLon(true)-->Line_11 $$ except = builder.checkLatLon(false)[ FD ]
Line_5 $$ QueryValidationException except = null-->Line_11 $$ except = builder.checkLatLon(false)[ FD ]
Line_6 $$ GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder()-->Line_7 $$ tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.COERCE), false)[ FD ]
Line_11 $$ except = builder.checkLatLon(false)-->Line_14 $$ except = builder.checkLatLon(true)[ FD ]
Line_6 $$ GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder()-->Line_11 $$ except = builder.checkLatLon(false)[ FD ]
Line_14 $$ except = builder.checkLatLon(true)-->Line_17 $$ except = builder.checkLatLon(false)[ FD ]
Line_4 $$ for (PointTester tester : testers) -->Line_15 $$ assertNull("Inner pre 2.0 validation w/o coerce should ignore invalid coordinate for old indexes: " + tester.getClass().getName() + " coordinate: " + tester.invalidCoordinate, except)[ FD ]
Line_6 $$ GeoBoundingBoxQueryBuilder builder = createTestQueryBuilder()-->Line_10 $$ tester.invalidateCoordinate(builder.setValidationMethod(GeoValidationMethod.COERCE), false)[ FD ]
