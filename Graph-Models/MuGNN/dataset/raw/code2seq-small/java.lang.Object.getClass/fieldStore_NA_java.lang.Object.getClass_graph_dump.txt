Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_27 $$ ((Map) owner).put(name, value)[ FD ]
Line_6 $$ final String set = "set" + Character.toUpperCase(name.charAt(0)) + name.substring(1)-->Line_7 $$ final Method method = getMethod(owner, set, definition)[ FD ]
Line_17 $$ final Transform transform = getTransform(value.getClass(), handle.type().parameterType(1), definition)-->Line_18 $$ if (transform != null) [ FD ]
Line_16 $$ if (!typesafe) -->Line_17 $$ final Transform transform = getTransform(value.getClass(), handle.type().parameterType(1), definition)[ CD ]
Line_9 $$ handle = method.handle-->Line_14 $$ if (handle != null) [ FD ]
Line_19 $$ value = transform.method.handle.invoke(value)-->Line_22 $$ handle.invoke(owner, value)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_19 $$ value = transform.method.handle.invoke(value)[ FD ]
Line_16 $$ if (!typesafe) -->Line_18 $$ if (transform != null) [ CD ]
Line_7 $$ final Method method = getMethod(owner, set, definition)-->Line_8 $$ if (method != null) [ FD ]
Line_19 $$ value = transform.method.handle.invoke(value)-->Line_27 $$ ((Map) owner).put(name, value)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_16 $$ if (!typesafe) [ FD ]
Line_4 $$ MethodHandle handle = null-->Line_14 $$ if (handle != null) [ FD ]
Line_5 $$ if (field == null) -->Line_8 $$ if (method != null) [ CD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_6 $$ final String set = "set" + Character.toUpperCase(name.charAt(0)) + name.substring(1)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_3 $$ final Field field = getField(owner, name, definition)[ CD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_24 $$ throw new IllegalArgumentException("Error storing value [" + value + "] " + "in field [" + name + "] with owner class [" + owner.getClass() + "].", throwable)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_22 $$ handle.invoke(owner, value)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_28 $$ if (owner instanceof List) [ FD ]
Line_8 $$ if (method != null) -->Line_9 $$ handle = method.handle[ CD ]
Line_3 $$ final Field field = getField(owner, name, definition)-->Line_5 $$ if (field == null) [ FD ]
Line_19 $$ value = transform.method.handle.invoke(value)-->Line_31 $$ ((List) owner).add(index, value)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_31 $$ ((List) owner).add(index, value)[ FD ]
Line_4 $$ MethodHandle handle = null-->Line_9 $$ handle = method.handle[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_17 $$ final Transform transform = getTransform(value.getClass(), handle.type().parameterType(1), definition)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_30 $$ final int index = Integer.parseInt(name)[ FD ]
Line_18 $$ if (transform != null) -->Line_19 $$ value = transform.method.handle.invoke(value)[ CD ]
Line_5 $$ if (field == null) -->Line_7 $$ final Method method = getMethod(owner, set, definition)[ CD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_4 $$ MethodHandle handle = null[ CD ]
Line_9 $$ handle = method.handle-->Line_17 $$ final Transform transform = getTransform(value.getClass(), handle.type().parameterType(1), definition)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_14 $$ if (handle != null) [ CD ]
Line_26 $$ if (owner instanceof Map) -->Line_27 $$ ((Map) owner).put(name, value)[ CD ]
Line_26 $$ if (owner instanceof Map) -->Line_28 $$ if (owner instanceof List) [ CD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_7 $$ final Method method = getMethod(owner, set, definition)[ FD ]
Line_12 $$ handle = field.setter-->Line_22 $$ handle.invoke(owner, value)[ FD ]
Line_30 $$ final int index = Integer.parseInt(name)-->Line_31 $$ ((List) owner).add(index, value)[ FD ]
Line_12 $$ handle = field.setter-->Line_14 $$ if (handle != null) [ FD ]
Line_9 $$ handle = method.handle-->Line_12 $$ handle = field.setter[ FD ]
Line_14 $$ if (handle != null) -->Line_26 $$ if (owner instanceof Map) [ CD ]
Line_12 $$ handle = field.setter-->Line_17 $$ final Transform transform = getTransform(value.getClass(), handle.type().parameterType(1), definition)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_26 $$ if (owner instanceof Map) [ FD ]
Line_4 $$ MethodHandle handle = null-->Line_17 $$ final Transform transform = getTransform(value.getClass(), handle.type().parameterType(1), definition)[ FD ]
Line_4 $$ MethodHandle handle = null-->Line_12 $$ handle = field.setter[ FD ]
Line_4 $$ MethodHandle handle = null-->Line_22 $$ handle.invoke(owner, value)[ FD ]
Line_9 $$ handle = method.handle-->Line_22 $$ handle.invoke(owner, value)[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_5 $$ if (field == null) [ CD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_36 $$ throw new IllegalArgumentException("Unable to find dynamic field [" + name + "] " + "for class [" + owner.getClass().getCanonicalName() + "].")[ FD ]
Line_2 $$ public static void fieldStore(final Object owner, Object value, final String name, final Definition definition, final boolean typesafe) -->Line_3 $$ final Field field = getField(owner, name, definition)[ FD ]
Line_5 $$ if (field == null) -->Line_12 $$ handle = field.setter[ CD ]
Line_5 $$ if (field == null) -->Line_6 $$ final String set = "set" + Character.toUpperCase(name.charAt(0)) + name.substring(1)[ CD ]
