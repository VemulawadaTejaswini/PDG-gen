Line_2 $$ public void testRegisteringImplementation() throws Throwable -->Line_5 $$ final AnotherElement element = createElement("", AnotherElement.class)[ CD ]
Line_5 $$ final AnotherElement element = createElement("", AnotherElement.class)-->Line_6 $$ assertTrue(element.getClass().getSuperclass().getName(), element instanceof EmptyImpl)[ FD ]
Line_2 $$ public void testRegisteringImplementation() throws Throwable -->Line_6 $$ assertTrue(element.getClass().getSuperclass().getName(), element instanceof EmptyImpl)[ CD ]
Line_2 $$ public void testRegisteringImplementation() throws Throwable -->Line_4 $$ DomApplicationComponent.getInstance().registerImplementation(DomElement.class, BaseImpl.class, getTestRootDisposable())[ CD ]
Line_2 $$ public void testRegisteringImplementation() throws Throwable -->Line_3 $$ DomApplicationComponent.getInstance().registerImplementation(AnotherElement.class, EmptyImpl.class, getTestRootDisposable())[ CD ]
