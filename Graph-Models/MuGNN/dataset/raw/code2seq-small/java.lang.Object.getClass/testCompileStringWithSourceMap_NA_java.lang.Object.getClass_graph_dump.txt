Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_9 $$ sourceMapFile.deleteOnExit()[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_15 $$ File expectedOutputFile = new File(inputDir, "/sourcemap/expected_output.css")[ CD ]
Line_15 $$ File expectedOutputFile = new File(inputDir, "/sourcemap/expected_output.css")-->Line_16 $$ String expectedOutput = read(expectedOutputFile.toPath())[ FD ]
Line_3 $$ SassCompiler sassCompiler = new JniSassCompiler()-->Line_12 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_16 $$ String expectedOutput = read(expectedOutputFile.toPath())[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_11 $$ String input = read(inputFile.toPath())[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_4 $$ Class<?> clazz = getClass()[ CD ]
Line_12 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)-->Line_13 $$ Assert.assertNotNull(actualOutput)[ FD ]
Line_5 $$ URL url = clazz.getResource("dependencies")-->Line_6 $$ File inputDir = new File(url.toURI())[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_5 $$ URL url = clazz.getResource("dependencies")[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_6 $$ File inputDir = new File(url.toURI())[ CD ]
Line_8 $$ File sourceMapFile = new File(inputDir, "/sass-spec/14_imports/input.css.map")-->Line_14 $$ Assert.assertTrue(sourceMapFile.exists())[ FD ]
Line_7 $$ File inputFile = new File(inputDir, "/sass-spec/14_imports/input.scss")-->Line_12 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)[ FD ]
Line_16 $$ String expectedOutput = read(expectedOutputFile.toPath())-->Line_17 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_7 $$ File inputFile = new File(inputDir, "/sass-spec/14_imports/input.scss")[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_10 $$ Assert.assertFalse(sourceMapFile.exists())[ CD ]
Line_8 $$ File sourceMapFile = new File(inputDir, "/sass-spec/14_imports/input.css.map")-->Line_9 $$ sourceMapFile.deleteOnExit()[ FD ]
Line_11 $$ String input = read(inputFile.toPath())-->Line_12 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_3 $$ SassCompiler sassCompiler = new JniSassCompiler()[ CD ]
Line_4 $$ Class<?> clazz = getClass()-->Line_5 $$ URL url = clazz.getResource("dependencies")[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_8 $$ File sourceMapFile = new File(inputDir, "/sass-spec/14_imports/input.css.map")[ CD ]
Line_12 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)-->Line_17 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_14 $$ Assert.assertTrue(sourceMapFile.exists())[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_13 $$ Assert.assertNotNull(actualOutput)[ CD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_12 $$ String actualOutput = sassCompiler.compileString(input, inputFile.getCanonicalPath(), "", true)[ CD ]
Line_7 $$ File inputFile = new File(inputDir, "/sass-spec/14_imports/input.scss")-->Line_11 $$ String input = read(inputFile.toPath())[ FD ]
Line_2 $$ public void testCompileStringWithSourceMap() throws Exception -->Line_17 $$ Assert.assertEquals(stripNewLines(expectedOutput), stripNewLines(actualOutput))[ CD ]
Line_8 $$ File sourceMapFile = new File(inputDir, "/sass-spec/14_imports/input.css.map")-->Line_10 $$ Assert.assertFalse(sourceMapFile.exists())[ FD ]
