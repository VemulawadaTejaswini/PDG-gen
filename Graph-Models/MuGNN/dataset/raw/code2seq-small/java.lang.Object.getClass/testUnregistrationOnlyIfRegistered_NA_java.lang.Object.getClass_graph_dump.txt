Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_11 $$ rmDispatcher.await()[ CD ]
Line_6 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_14 $$ rmDispatcher.await()[ FD ]
Line_4 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_7 $$ RMApp rmApp = rm.submitApp(1024)[ FD ]
Line_4 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_13 $$ rm.sendAMLaunched(appAttemptId)[ FD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_12 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_28 $$ mrApp.stop()[ CD ]
Line_9 $$ MockNM amNodeManager = rm.registerNode("127.0.0.1:1234", 11264)-->Line_10 $$ amNodeManager.nodeHeartbeat(true)[ FD ]
Line_15 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_28 $$ mrApp.stop()[ FD ]
Line_12 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()-->Line_15 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) [ FD ]
Line_6 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_11 $$ rmDispatcher.await()[ FD ]
Line_6 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_8 $$ rmDispatcher.await()[ FD ]
Line_12 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()-->Line_13 $$ rm.sendAMLaunched(appAttemptId)[ FD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_14 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_8 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_6 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_27 $$ Assert.assertTrue(allocator.isApplicationMasterRegistered())[ CD ]
Line_15 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_20 $$ return new MyContainerAllocator(rm, appAttemptId, context)[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_23 $$ mrApp.submit(conf)[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_4 $$ final MyResourceManager rm = new MyResourceManager(conf)[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_26 $$ amDispatcher.await()[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_10 $$ amNodeManager.nodeHeartbeat(true)[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_9 $$ MockNM amNodeManager = rm.registerNode("127.0.0.1:1234", 11264)[ CD ]
Line_15 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_17 $$ return new DrainDispatcher()[ CD ]
Line_15 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_23 $$ mrApp.submit(conf)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_23 $$ mrApp.submit(conf)[ FD ]
Line_15 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_24 $$ DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher()[ FD ]
Line_4 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_6 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()[ FD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_15 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) [ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_13 $$ rm.sendAMLaunched(appAttemptId)[ CD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_15 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_25 $$ MyContainerAllocator allocator = (MyContainerAllocator) mrApp.getContainerAllocator()[ FD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_29 $$ Assert.assertTrue(allocator.isUnregistered())[ CD ]
Line_7 $$ RMApp rmApp = rm.submitApp(1024)-->Line_12 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()[ FD ]
Line_4 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_5 $$ rm.start()[ FD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_5 $$ rm.start()[ CD ]
Line_4 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_9 $$ MockNM amNodeManager = rm.registerNode("127.0.0.1:1234", 11264)[ FD ]
Line_2 $$ public void testUnregistrationOnlyIfRegistered() throws Exception -->Line_7 $$ RMApp rmApp = rm.submitApp(1024)[ CD ]
