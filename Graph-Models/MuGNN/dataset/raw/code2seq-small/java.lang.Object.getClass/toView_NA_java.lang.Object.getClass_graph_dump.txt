Line_55 $$ if (instance == null) -->Line_56 $$ return null[ CD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_54 $$ Collection<?> instance = ScalarCollectionSchema.get(propertyNode)[ FD ]
Line_85 $$ if (value == null) -->Line_86 $$ if (propertySchema instanceof ScalarCollectionSchema) [ CD ]
Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)-->Line_107 $$ propertyNode.setPrivateData(property.getType(), castValue)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_77 $$ value = doSet(name, value, property)[ FD ]
Line_81 $$ ModelSchema<T> propertySchema = property.getSchema()-->Line_84 $$ if (propertySchema instanceof ManagedImplSchema) [ FD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_3 $$ return new ModelView<M>() [ CD ]
Line_3 $$ return new ModelView<M>() -->Line_44 $$ propertyViews.put(name, value)[ FD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_96 $$ ModelView<? extends Collection<?>> modelView = propertyNode.asMutable(COLLECTION_MODEL_TYPE, ruleDescriptor)[ FD ]
Line_43 $$ Object value = doGet(property, name)-->Line_77 $$ value = doSet(name, value, property)[ FD ]
Line_76 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_81 $$ ModelSchema<T> propertySchema = property.getSchema()[ FD ]
Line_65 $$ modelView = propertyNode.asImmutable(propertyType, ruleDescriptor)-->Line_97 $$ Collection<Object> instance = Cast.uncheckedCast(modelView.getInstance())[ FD ]
Line_91 $$ if (ManagedInstance.class.isInstance(value)) -->Line_92 $$ ManagedInstance managedInstance = (ManagedInstance) value[ CD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_87 $$ ScalarCollectionSchema.clear(propertyNode)[ FD ]
Line_95 $$ if (propertySchema instanceof ScalarCollectionSchema && value instanceof Collection) -->Line_100 $$ instance.addAll(values)[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_59 $$ if (writable) [ CD ]
Line_42 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_53 $$ if (property.isWritable() && propertySchema instanceof ScalarCollectionSchema) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_48 $$ ModelType<T> propertyType = property.getType()[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)[ FD ]
Line_54 $$ Collection<?> instance = ScalarCollectionSchema.get(propertyNode)-->Line_55 $$ if (instance == null) [ FD ]
Line_91 $$ if (ManagedInstance.class.isInstance(value)) -->Line_95 $$ if (propertySchema instanceof ScalarCollectionSchema && value instanceof Collection) [ CD ]
Line_42 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_43 $$ Object value = doGet(property, name)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_51 $$ ModelView<? extends T> modelView[ CD ]
Line_91 $$ if (ManagedInstance.class.isInstance(value)) -->Line_93 $$ MutableModelNode targetNode = managedInstance.getBackingNode()[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_73 $$ if (!writable || closed) [ CD ]
Line_43 $$ Object value = doGet(property, name)-->Line_44 $$ propertyViews.put(name, value)[ FD ]
Line_54 $$ Collection<?> instance = ScalarCollectionSchema.get(propertyNode)-->Line_99 $$ instance.clear()[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_107 $$ propertyNode.setPrivateData(property.getType(), castValue)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_48 $$ ModelType<T> propertyType = property.getType()[ FD ]
Line_84 $$ if (propertySchema instanceof ManagedImplSchema) -->Line_85 $$ if (value == null) [ CD ]
Line_53 $$ if (property.isWritable() && propertySchema instanceof ScalarCollectionSchema) -->Line_55 $$ if (instance == null) [ CD ]
Line_3 $$ return new ModelView<M>() -->Line_52 $$ ModelSchema<T> propertySchema = property.getSchema()[ FD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_89 $$ propertyNode.setTarget(null)[ FD ]
Line_95 $$ if (propertySchema instanceof ScalarCollectionSchema && value instanceof Collection) -->Line_96 $$ ModelView<? extends Collection<?>> modelView = propertyNode.asMutable(COLLECTION_MODEL_TYPE, ruleDescriptor)[ CD ]
Line_48 $$ ModelType<T> propertyType = property.getType()-->Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)[ FD ]
Line_95 $$ if (propertySchema instanceof ScalarCollectionSchema && value instanceof Collection) -->Line_99 $$ instance.clear()[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_76 $$ ModelProperty<?> property = schema.getProperty(name)[ FD ]
Line_77 $$ value = doSet(name, value, property)-->Line_85 $$ if (value == null) [ FD ]
Line_86 $$ if (propertySchema instanceof ScalarCollectionSchema) -->Line_87 $$ ScalarCollectionSchema.clear(propertyNode)[ CD ]
Line_93 $$ MutableModelNode targetNode = managedInstance.getBackingNode()-->Line_94 $$ propertyNode.setTarget(targetNode)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_23 $$ return String.format("%s '%s'", getType(), modelNode.getPath().toString())[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_81 $$ ModelSchema<T> propertySchema = property.getSchema()[ FD ]
Line_51 $$ ModelView<? extends T> modelView-->Line_97 $$ Collection<Object> instance = Cast.uncheckedCast(modelView.getInstance())[ FD ]
Line_16 $$ closed = true-->Line_73 $$ if (!writable || closed) [ FD ]
Line_29 $$ if (obj == null || obj.getClass() != getClass()) -->Line_30 $$ return false[ CD ]
Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)-->Line_96 $$ ModelView<? extends Collection<?>> modelView = propertyNode.asMutable(COLLECTION_MODEL_TYPE, ruleDescriptor)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_53 $$ if (property.isWritable() && propertySchema instanceof ScalarCollectionSchema) [ FD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_96 $$ ModelView<? extends Collection<?>> modelView = propertyNode.asMutable(COLLECTION_MODEL_TYPE, ruleDescriptor)[ FD ]
Line_42 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_81 $$ ModelSchema<T> propertySchema = property.getSchema()[ FD ]
Line_51 $$ ModelView<? extends T> modelView-->Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)[ FD ]
Line_92 $$ ManagedInstance managedInstance = (ManagedInstance) value-->Line_93 $$ MutableModelNode targetNode = managedInstance.getBackingNode()[ FD ]
Line_95 $$ if (propertySchema instanceof ScalarCollectionSchema && value instanceof Collection) -->Line_101 $$ return instance[ CD ]
Line_43 $$ Object value = doGet(property, name)-->Line_106 $$ T castValue = Cast.uncheckedCast(value)[ FD ]
Line_48 $$ ModelType<T> propertyType = property.getType()-->Line_65 $$ modelView = propertyNode.asImmutable(propertyType, ruleDescriptor)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_39 $$ if (propertyViews.containsKey(name)) [ CD ]
Line_77 $$ value = doSet(name, value, property)-->Line_78 $$ propertyViews.put(name, value)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_81 $$ ModelSchema<T> propertySchema = property.getSchema()[ CD ]
Line_43 $$ Object value = doGet(property, name)-->Line_85 $$ if (value == null) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_32 $$ State other = Cast.uncheckedCast(obj)[ FD ]
Line_95 $$ if (propertySchema instanceof ScalarCollectionSchema && value instanceof Collection) -->Line_98 $$ Collection<Object> values = Cast.uncheckedCast(value)[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_13 $$ return proxyFactory.createProxy(new State(), schema, delegateSchema, typeConverter)[ CD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_43 $$ Object value = doGet(property, name)[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_40 $$ return propertyViews.get(name)[ FD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_36 $$ return modelNode.hashCode()[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_16 $$ closed = true[ CD ]
Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)-->Line_94 $$ propertyNode.setTarget(targetNode)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)[ FD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_107 $$ propertyNode.setPrivateData(property.getType(), castValue)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_43 $$ Object value = doGet(property, name)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_44 $$ propertyViews.put(name, value)[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_77 $$ value = doSet(name, value, property)[ CD ]
Line_76 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_77 $$ value = doSet(name, value, property)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_78 $$ propertyViews.put(name, value)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_7 $$ return modelNode.getPath()[ CD ]
Line_39 $$ if (propertyViews.containsKey(name)) -->Line_40 $$ return propertyViews.get(name)[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_26 $$ if (obj == this) [ CD ]
Line_65 $$ modelView = propertyNode.asImmutable(propertyType, ruleDescriptor)-->Line_67 $$ return modelView.getInstance()[ FD ]
Line_96 $$ ModelView<? extends Collection<?>> modelView = propertyNode.asMutable(COLLECTION_MODEL_TYPE, ruleDescriptor)-->Line_97 $$ Collection<Object> instance = Cast.uncheckedCast(modelView.getInstance())[ FD ]
Line_42 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_52 $$ ModelSchema<T> propertySchema = property.getSchema()[ FD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_65 $$ modelView = propertyNode.asImmutable(propertyType, ruleDescriptor)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_70 $$ ClosureBackedAction.execute(get(name), action)[ CD ]
Line_86 $$ if (propertySchema instanceof ScalarCollectionSchema) -->Line_89 $$ propertyNode.setTarget(null)[ CD ]
Line_97 $$ Collection<Object> instance = Cast.uncheckedCast(modelView.getInstance())-->Line_100 $$ instance.addAll(values)[ FD ]
Line_52 $$ ModelSchema<T> propertySchema = property.getSchema()-->Line_86 $$ if (propertySchema instanceof ScalarCollectionSchema) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_39 $$ if (propertyViews.containsKey(name)) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_50 $$ propertyNode.ensureUsable()[ CD ]
Line_59 $$ if (writable) -->Line_61 $$ if (closed) [ CD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)[ FD ]
Line_95 $$ if (propertySchema instanceof ScalarCollectionSchema && value instanceof Collection) -->Line_97 $$ Collection<Object> instance = Cast.uncheckedCast(modelView.getInstance())[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_84 $$ if (propertySchema instanceof ManagedImplSchema) [ CD ]
Line_3 $$ return new ModelView<M>() -->Line_20 $$ return modelNode[ CD ]
Line_42 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_107 $$ propertyNode.setPrivateData(property.getType(), castValue)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_67 $$ return modelView.getInstance()[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_83 $$ propertyNode.ensureUsable()[ CD ]
Line_85 $$ if (value == null) -->Line_91 $$ if (ManagedInstance.class.isInstance(value)) [ CD ]
Line_59 $$ if (writable) -->Line_65 $$ modelView = propertyNode.asImmutable(propertyType, ruleDescriptor)[ CD ]
Line_77 $$ value = doSet(name, value, property)-->Line_98 $$ Collection<Object> values = Cast.uncheckedCast(value)[ FD ]
Line_51 $$ ModelView<? extends T> modelView-->Line_65 $$ modelView = propertyNode.asImmutable(propertyType, ruleDescriptor)[ FD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)[ FD ]
Line_91 $$ if (ManagedInstance.class.isInstance(value)) -->Line_94 $$ propertyNode.setTarget(targetNode)[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_42 $$ ModelProperty<?> property = schema.getProperty(name)[ FD ]
Line_43 $$ Object value = doGet(property, name)-->Line_98 $$ Collection<Object> values = Cast.uncheckedCast(value)[ FD ]
Line_84 $$ if (propertySchema instanceof ManagedImplSchema) -->Line_106 $$ T castValue = Cast.uncheckedCast(value)[ CD ]
Line_77 $$ value = doSet(name, value, property)-->Line_91 $$ if (ManagedInstance.class.isInstance(value)) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_29 $$ if (obj == null || obj.getClass() != getClass()) [ CD ]
Line_98 $$ Collection<Object> values = Cast.uncheckedCast(value)-->Line_100 $$ instance.addAll(values)[ FD ]
Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)-->Line_87 $$ ScalarCollectionSchema.clear(propertyNode)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_29 $$ if (obj == null || obj.getClass() != getClass()) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_85 $$ if (value == null) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)[ CD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_65 $$ modelView = propertyNode.asImmutable(propertyType, ruleDescriptor)[ FD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_50 $$ propertyNode.ensureUsable()[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_36 $$ return modelNode.hashCode()[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_103 $$ throw new IllegalArgumentException(String.format("Only managed model instances can be set as property '%s' of class '%s'", name, getType()))[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_70 $$ ClosureBackedAction.execute(get(name), action)[ FD ]
Line_76 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_107 $$ propertyNode.setPrivateData(property.getType(), castValue)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)[ CD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_94 $$ propertyNode.setTarget(targetNode)[ FD ]
Line_81 $$ ModelSchema<T> propertySchema = property.getSchema()-->Line_86 $$ if (propertySchema instanceof ScalarCollectionSchema) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_106 $$ T castValue = Cast.uncheckedCast(value)[ FD ]
Line_84 $$ if (propertySchema instanceof ManagedImplSchema) -->Line_107 $$ propertyNode.setPrivateData(property.getType(), castValue)[ CD ]
Line_106 $$ T castValue = Cast.uncheckedCast(value)-->Line_107 $$ propertyNode.setPrivateData(property.getType(), castValue)[ FD ]
Line_32 $$ State other = Cast.uncheckedCast(obj)-->Line_33 $$ return modelNode == other.getBackingNode()[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_10 $$ return ManagedModelProjection.this.getType()[ CD ]
Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)-->Line_83 $$ propertyNode.ensureUsable()[ FD ]
Line_43 $$ Object value = doGet(property, name)-->Line_78 $$ propertyViews.put(name, value)[ FD ]
Line_52 $$ ModelSchema<T> propertySchema = property.getSchema()-->Line_84 $$ if (propertySchema instanceof ManagedImplSchema) [ FD ]
Line_43 $$ Object value = doGet(property, name)-->Line_91 $$ if (ManagedInstance.class.isInstance(value)) [ FD ]
Line_77 $$ value = doSet(name, value, property)-->Line_106 $$ T castValue = Cast.uncheckedCast(value)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_53 $$ if (property.isWritable() && propertySchema instanceof ScalarCollectionSchema) [ CD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)[ FD ]
Line_97 $$ Collection<Object> instance = Cast.uncheckedCast(modelView.getInstance())-->Line_99 $$ instance.clear()[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_109 $$ return value[ CD ]
Line_26 $$ if (obj == this) -->Line_27 $$ return true[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_91 $$ if (ManagedInstance.class.isInstance(value)) [ FD ]
Line_3 $$ return new ModelView<M>() -->Line_42 $$ ModelProperty<?> property = schema.getProperty(name)[ CD ]
Line_59 $$ if (writable) -->Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)[ CD ]
Line_42 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_48 $$ ModelType<T> propertyType = property.getType()[ FD ]
Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)-->Line_67 $$ return modelView.getInstance()[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_76 $$ ModelProperty<?> property = schema.getProperty(name)[ CD ]
Line_54 $$ Collection<?> instance = ScalarCollectionSchema.get(propertyNode)-->Line_100 $$ instance.addAll(values)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_98 $$ Collection<Object> values = Cast.uncheckedCast(value)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_45 $$ return value[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_32 $$ State other = Cast.uncheckedCast(obj)[ CD ]
Line_51 $$ ModelView<? extends T> modelView-->Line_62 $$ modelView.close()[ FD ]
Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)-->Line_62 $$ modelView.close()[ FD ]
Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)-->Line_97 $$ Collection<Object> instance = Cast.uncheckedCast(modelView.getInstance())[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_78 $$ propertyViews.put(name, value)[ CD ]
Line_3 $$ return new ModelView<M>() -->Line_33 $$ return modelNode == other.getBackingNode()[ CD ]
Line_51 $$ ModelView<? extends T> modelView-->Line_67 $$ return modelView.getInstance()[ FD ]
Line_49 $$ MutableModelNode propertyNode = modelNode.getLink(propertyName)-->Line_83 $$ propertyNode.ensureUsable()[ FD ]
Line_42 $$ ModelProperty<?> property = schema.getProperty(name)-->Line_77 $$ value = doSet(name, value, property)[ FD ]
Line_82 $$ MutableModelNode propertyNode = modelNode.getLink(name)-->Line_89 $$ propertyNode.setTarget(null)[ FD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_7 $$ return modelNode.getPath()[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_52 $$ ModelSchema<T> propertySchema = property.getSchema()[ CD ]
Line_60 $$ modelView = propertyNode.asMutable(propertyType, ruleDescriptor)-->Line_65 $$ modelView = propertyNode.asImmutable(propertyType, ruleDescriptor)[ FD ]
Line_3 $$ return new ModelView<M>() -->Line_26 $$ if (obj == this) [ FD ]
Line_2 $$ protected ModelView<M> toView(final MutableModelNode modelNode, final ModelRuleDescriptor ruleDescriptor, final boolean writable) -->Line_23 $$ return String.format("%s '%s'", getType(), modelNode.getPath().toString())[ FD ]
Line_61 $$ if (closed) -->Line_62 $$ modelView.close()[ CD ]
Line_53 $$ if (property.isWritable() && propertySchema instanceof ScalarCollectionSchema) -->Line_54 $$ Collection<?> instance = ScalarCollectionSchema.get(propertyNode)[ CD ]
