Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_8 $$ final Object vmState = stateMethod.invoke(vm)[ CD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_10 $$ ps = ourEnqueueMethod.invoke(null, vm, frame.thread(), frameId, slotInfoArray)[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_6 $$ Object slotInfoArray = createSlotInfoArray(vars)[ CD ]
Line_10 $$ ps = ourEnqueueMethod.invoke(null, vm, frame.thread(), frameId, slotInfoArray)-->Line_12 $$ final Object reply = ourWaitForReplyMethod.invoke(null, vm, ps)[ FD ]
Line_18 $$ for (DecompiledLocalVariable var : vars) -->Line_19 $$ map.put(var, values[idx++])[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_19 $$ map.put(var, values[idx++])[ FD ]
Line_3 $$ final Long frameId = ReflectionUtil.getField(frame.getClass(), frame, long.class, "id")-->Line_10 $$ ps = ourEnqueueMethod.invoke(null, vm, frame.thread(), frameId, slotInfoArray)[ FD ]
Line_4 $$ final VirtualMachine vm = frame.virtualMachine()-->Line_8 $$ final Object vmState = stateMethod.invoke(vm)[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_5 $$ final Method stateMethod = ReflectionUtil.getDeclaredMethod(vm.getClass(), "state")[ CD ]
Line_6 $$ Object slotInfoArray = createSlotInfoArray(vars)-->Line_10 $$ ps = ourEnqueueMethod.invoke(null, vm, frame.thread(), frameId, slotInfoArray)[ FD ]
Line_17 $$ int idx = 0-->Line_19 $$ map.put(var, values[idx++])[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_3 $$ final Long frameId = ReflectionUtil.getField(frame.getClass(), frame, long.class, "id")[ CD ]
Line_4 $$ final VirtualMachine vm = frame.virtualMachine()-->Line_10 $$ ps = ourEnqueueMethod.invoke(null, vm, frame.thread(), frameId, slotInfoArray)[ FD ]
Line_5 $$ final Method stateMethod = ReflectionUtil.getDeclaredMethod(vm.getClass(), "state")-->Line_8 $$ final Object vmState = stateMethod.invoke(vm)[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_14 $$ if (vars.size() != values.length) [ FD ]
Line_7 $$ Object ps-->Line_10 $$ ps = ourEnqueueMethod.invoke(null, vm, frame.thread(), frameId, slotInfoArray)[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_12 $$ final Object reply = ourWaitForReplyMethod.invoke(null, vm, ps)[ CD ]
Line_4 $$ final VirtualMachine vm = frame.virtualMachine()-->Line_12 $$ final Object reply = ourWaitForReplyMethod.invoke(null, vm, ps)[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_21 $$ return map[ CD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_4 $$ final VirtualMachine vm = frame.virtualMachine()[ CD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_17 $$ int idx = 0[ CD ]
Line_7 $$ Object ps-->Line_12 $$ final Object reply = ourWaitForReplyMethod.invoke(null, vm, ps)[ FD ]
Line_12 $$ final Object reply = ourWaitForReplyMethod.invoke(null, vm, ps)-->Line_13 $$ final Value[] values = ReflectionUtil.getField(reply.getClass(), reply, Value[].class, "values")[ FD ]
Line_4 $$ final VirtualMachine vm = frame.virtualMachine()-->Line_5 $$ final Method stateMethod = ReflectionUtil.getDeclaredMethod(vm.getClass(), "state")[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_4 $$ final VirtualMachine vm = frame.virtualMachine()[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_3 $$ final Long frameId = ReflectionUtil.getField(frame.getClass(), frame, long.class, "id")[ FD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_7 $$ Object ps[ CD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_14 $$ if (vars.size() != values.length) [ CD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_13 $$ final Value[] values = ReflectionUtil.getField(reply.getClass(), reply, Value[].class, "values")[ CD ]
Line_2 $$ private static Map<DecompiledLocalVariable, Value> fetchSlotValues(Map<DecompiledLocalVariable, Value> map, List<DecompiledLocalVariable> vars, StackFrame frame) throws Exception -->Line_6 $$ Object slotInfoArray = createSlotInfoArray(vars)[ FD ]
