Line_3 $$ Processor<Project> isReallyLeak = new Processor<Project>() -->Line_5 $$ return !project.isDefault() && !((ProjectImpl) project).isLight()[ FD ]
Line_2 $$ public static void checkProjectLeak() throws Exception -->Line_12 $$ checkLeak(roots, ProjectImpl.class, isReallyLeak)[ CD ]
Line_3 $$ Processor<Project> isReallyLeak = new Processor<Project>() -->Line_5 $$ return !project.isDefault() && !((ProjectImpl) project).isLight()[ CD ]
Line_3 $$ Processor<Project> isReallyLeak = new Processor<Project>() -->Line_12 $$ checkLeak(roots, ProjectImpl.class, isReallyLeak)[ FD ]
Line_2 $$ public static void checkProjectLeak() throws Exception -->Line_3 $$ Processor<Project> isReallyLeak = new Processor<Project>() [ CD ]
Line_2 $$ public static void checkProjectLeak() throws Exception -->Line_11 $$ roots.addAll(allLoadedClasses)[ CD ]
Line_2 $$ public static void checkProjectLeak() throws Exception -->Line_10 $$ Vector<Class> allLoadedClasses = ReflectionUtil.getField(classLoader.getClass(), classLoader, Vector.class, "classes")[ CD ]
Line_2 $$ public static void checkProjectLeak() throws Exception -->Line_9 $$ ClassLoader classLoader = LeakHunter.class.getClassLoader()[ CD ]
