Line_52 $$ value = map.get(convertedMapKey)-->Line_28 $$ if (value instanceof List) [ FD ]
Line_22 $$ if (value == null) -->Line_24 $$ if (value.getClass().isArray()) [ CD ]
Line_33 $$ if (value instanceof Set) -->Line_39 $$ Iterator<Object> it = set.iterator()[ CD ]
Line_24 $$ if (value.getClass().isArray()) -->Line_25 $$ int index = Integer.parseInt(key)[ CD ]
Line_27 $$ value = Array.get(value, index)-->Line_28 $$ if (value instanceof List) [ FD ]
Line_30 $$ List<Object> list = (List<Object>) value-->Line_32 $$ value = list.get(index)[ FD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_24 $$ if (value.getClass().isArray()) [ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_28 $$ if (value instanceof List) [ FD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_28 $$ if (value instanceof List) [ FD ]
Line_34 $$ Set<Object> set = (Set<Object>) value-->Line_37 $$ throw new InvalidPropertyException(getRootClass(), this.nestedPath + propertyName, "Cannot get element with index " + index + " from Set of size " + set.size() + ", accessed using property path '" + propertyName + "'")[ FD ]
Line_13 $$ if (isAutoGrowNestedPaths()) -->Line_14 $$ value = setDefaultValue(tokens.actualName)[ CD ]
Line_10 $$ Object value = ph.getValue()-->Line_12 $$ if (value == null) [ FD ]
Line_24 $$ if (value.getClass().isArray()) -->Line_28 $$ if (value instanceof List) [ CD ]
Line_32 $$ value = list.get(index)-->Line_43 $$ value = elem[ FD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_52 $$ value = map.get(convertedMapKey)[ FD ]
Line_2 $$ protected Object getPropertyValue(PropertyTokenHolder tokens) throws BeansException -->Line_5 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ CD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_47 $$ if (value instanceof Map) [ FD ]
Line_11 $$ if (tokens.keys != null) -->Line_12 $$ if (value == null) [ CD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_24 $$ if (value.getClass().isArray()) [ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_22 $$ if (value == null) [ FD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_32 $$ value = list.get(index)[ FD ]
Line_47 $$ if (value instanceof Map) -->Line_50 $$ TypeDescriptor typeDescriptor = TypeDescriptor.valueOf(mapKeyType)[ CD ]
Line_27 $$ value = Array.get(value, index)-->Line_43 $$ value = elem[ FD ]
Line_32 $$ value = list.get(index)-->Line_22 $$ if (value == null) [ FD ]
Line_2 $$ protected Object getPropertyValue(PropertyTokenHolder tokens) throws BeansException -->Line_3 $$ String propertyName = tokens.canonicalName[ CD ]
Line_21 $$ String key = tokens.keys[i]-->Line_29 $$ int index = Integer.parseInt(key)[ FD ]
Line_52 $$ value = map.get(convertedMapKey)-->Line_33 $$ if (value instanceof Set) [ FD ]
Line_11 $$ if (tokens.keys != null) -->Line_19 $$ String indexedPropertyName = tokens.actualName[ CD ]
Line_21 $$ String key = tokens.keys[i]-->Line_25 $$ int index = Integer.parseInt(key)[ FD ]
Line_4 $$ String actualName = tokens.actualName-->Line_5 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)[ FD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_22 $$ if (value == null) [ FD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_28 $$ if (value instanceof List) [ FD ]
Line_32 $$ value = list.get(index)-->Line_33 $$ if (value instanceof Set) [ FD ]
Line_34 $$ Set<Object> set = (Set<Object>) value-->Line_36 $$ if (index < 0 || index >= set.size()) [ FD ]
Line_25 $$ int index = Integer.parseInt(key)-->Line_32 $$ value = list.get(index)[ FD ]
Line_27 $$ value = Array.get(value, index)-->Line_33 $$ if (value instanceof Set) [ FD ]
Line_19 $$ String indexedPropertyName = tokens.actualName-->Line_31 $$ growCollectionIfNecessary(list, index, indexedPropertyName, ph, i + 1)[ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_33 $$ if (value instanceof Set) [ FD ]
Line_52 $$ value = map.get(convertedMapKey)-->Line_47 $$ if (value instanceof Map) [ FD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_33 $$ if (value instanceof Set) [ FD ]
Line_43 $$ value = elem-->Line_47 $$ if (value instanceof Map) [ FD ]
Line_47 $$ if (value instanceof Map) -->Line_52 $$ value = map.get(convertedMapKey)[ CD ]
Line_2 $$ protected Object getPropertyValue(PropertyTokenHolder tokens) throws BeansException -->Line_4 $$ String actualName = tokens.actualName[ CD ]
Line_32 $$ value = list.get(index)-->Line_27 $$ value = Array.get(value, index)[ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_14 $$ value = setDefaultValue(tokens.actualName)[ FD ]
Line_52 $$ value = map.get(convertedMapKey)-->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ FD ]
Line_39 $$ Iterator<Object> it = set.iterator()-->Line_41 $$ Object elem = it.next()[ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_43 $$ value = elem[ FD ]
Line_41 $$ Object elem = it.next()-->Line_43 $$ value = elem[ FD ]
Line_32 $$ value = list.get(index)-->Line_52 $$ value = map.get(convertedMapKey)[ FD ]
Line_47 $$ if (value instanceof Map) -->Line_51 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)[ CD ]
Line_43 $$ value = elem-->Line_52 $$ value = map.get(convertedMapKey)[ FD ]
Line_20 $$ for (int i = 0; i < tokens.keys.length; i++) -->Line_22 $$ if (value == null) [ CD ]
Line_19 $$ String indexedPropertyName = tokens.actualName-->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ FD ]
Line_32 $$ value = list.get(index)-->Line_24 $$ if (value.getClass().isArray()) [ FD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_32 $$ value = list.get(index)[ FD ]
Line_25 $$ int index = Integer.parseInt(key)-->Line_31 $$ growCollectionIfNecessary(list, index, indexedPropertyName, ph, i + 1)[ FD ]
Line_28 $$ if (value instanceof List) -->Line_33 $$ if (value instanceof Set) [ CD ]
Line_21 $$ String key = tokens.keys[i]-->Line_51 $$ Object convertedMapKey = convertIfNecessary(null, null, key, mapKeyType, typeDescriptor)[ FD ]
Line_56 $$ indexedPropertyName += PROPERTY_KEY_PREFIX + key + PROPERTY_KEY_SUFFIX-->Line_31 $$ growCollectionIfNecessary(list, index, indexedPropertyName, ph, i + 1)[ FD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_52 $$ value = map.get(convertedMapKey)[ FD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_27 $$ value = Array.get(value, index)[ FD ]
Line_47 $$ if (value instanceof Map) -->Line_49 $$ Class<?> mapKeyType = ph.getResolvableType().getNested(i + 1).asMap().resolveGeneric(0)[ CD ]
Line_28 $$ if (value instanceof List) -->Line_32 $$ value = list.get(index)[ CD ]
Line_33 $$ if (value instanceof Set) -->Line_35 $$ int index = Integer.parseInt(key)[ CD ]
Line_32 $$ value = list.get(index)-->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ FD ]
Line_20 $$ for (int i = 0; i < tokens.keys.length; i++) -->Line_21 $$ String key = tokens.keys[i][ CD ]
Line_32 $$ value = list.get(index)-->Line_47 $$ if (value instanceof Map) [ FD ]
Line_52 $$ value = map.get(convertedMapKey)-->Line_27 $$ value = Array.get(value, index)[ FD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_22 $$ if (value == null) [ FD ]
Line_27 $$ value = Array.get(value, index)-->Line_32 $$ value = list.get(index)[ FD ]
Line_27 $$ value = Array.get(value, index)-->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ FD ]
Line_33 $$ if (value instanceof Set) -->Line_36 $$ if (index < 0 || index >= set.size()) [ CD ]
Line_10 $$ Object value = ph.getValue()-->Line_32 $$ value = list.get(index)[ FD ]
Line_33 $$ if (value instanceof Set) -->Line_34 $$ Set<Object> set = (Set<Object>) value[ CD ]
Line_24 $$ if (value.getClass().isArray()) -->Line_27 $$ value = Array.get(value, index)[ CD ]
Line_56 $$ indexedPropertyName += PROPERTY_KEY_PREFIX + key + PROPERTY_KEY_SUFFIX-->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ FD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_33 $$ if (value instanceof Set) [ FD ]
Line_25 $$ int index = Integer.parseInt(key)-->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ FD ]
Line_25 $$ int index = Integer.parseInt(key)-->Line_42 $$ if (j == index) [ FD ]
Line_40 $$ for (int j = 0; it.hasNext(); j++) -->Line_42 $$ if (j == index) [ CD ]
Line_42 $$ if (j == index) -->Line_43 $$ value = elem[ CD ]
Line_12 $$ if (value == null) -->Line_13 $$ if (isAutoGrowNestedPaths()) [ CD ]
Line_30 $$ List<Object> list = (List<Object>) value-->Line_31 $$ growCollectionIfNecessary(list, index, indexedPropertyName, ph, i + 1)[ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_24 $$ if (value.getClass().isArray()) [ FD ]
Line_32 $$ value = list.get(index)-->Line_28 $$ if (value instanceof List) [ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_47 $$ if (value instanceof Map) [ FD ]
Line_28 $$ if (value instanceof List) -->Line_29 $$ int index = Integer.parseInt(key)[ CD ]
Line_52 $$ value = map.get(convertedMapKey)-->Line_24 $$ if (value.getClass().isArray()) [ FD ]
Line_19 $$ String indexedPropertyName = tokens.actualName-->Line_56 $$ indexedPropertyName += PROPERTY_KEY_PREFIX + key + PROPERTY_KEY_SUFFIX[ FD ]
Line_24 $$ if (value.getClass().isArray()) -->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ CD ]
Line_33 $$ if (value instanceof Set) -->Line_40 $$ for (int j = 0; it.hasNext(); j++) [ CD ]
Line_27 $$ value = Array.get(value, index)-->Line_24 $$ if (value.getClass().isArray()) [ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_52 $$ value = map.get(convertedMapKey)[ FD ]
Line_28 $$ if (value instanceof List) -->Line_31 $$ growCollectionIfNecessary(list, index, indexedPropertyName, ph, i + 1)[ CD ]
Line_40 $$ for (int j = 0; it.hasNext(); j++) -->Line_41 $$ Object elem = it.next()[ CD ]
Line_52 $$ value = map.get(convertedMapKey)-->Line_22 $$ if (value == null) [ FD ]
Line_5 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_10 $$ Object value = ph.getValue()[ FD ]
Line_39 $$ Iterator<Object> it = set.iterator()-->Line_40 $$ for (int j = 0; it.hasNext(); j++) [ FD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)[ FD ]
Line_40 $$ for (int j = 0; it.hasNext(); j++) -->Line_42 $$ if (j == index) [ FD ]
Line_25 $$ int index = Integer.parseInt(key)-->Line_27 $$ value = Array.get(value, index)[ FD ]
Line_27 $$ value = Array.get(value, index)-->Line_22 $$ if (value == null) [ FD ]
Line_10 $$ Object value = ph.getValue()-->Line_27 $$ value = Array.get(value, index)[ FD ]
Line_34 $$ Set<Object> set = (Set<Object>) value-->Line_39 $$ Iterator<Object> it = set.iterator()[ FD ]
Line_27 $$ value = Array.get(value, index)-->Line_47 $$ if (value instanceof Map) [ FD ]
Line_5 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_6 $$ if (ph == null || !ph.isReadable()) [ FD ]
Line_5 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_49 $$ Class<?> mapKeyType = ph.getResolvableType().getNested(i + 1).asMap().resolveGeneric(0)[ FD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_27 $$ value = Array.get(value, index)[ FD ]
Line_27 $$ value = Array.get(value, index)-->Line_52 $$ value = map.get(convertedMapKey)[ FD ]
Line_11 $$ if (tokens.keys != null) -->Line_20 $$ for (int i = 0; i < tokens.keys.length; i++) [ CD ]
Line_5 $$ PropertyHandler ph = getLocalPropertyHandler(actualName)-->Line_31 $$ growCollectionIfNecessary(list, index, indexedPropertyName, ph, i + 1)[ FD ]
Line_28 $$ if (value instanceof List) -->Line_30 $$ List<Object> list = (List<Object>) value[ CD ]
Line_20 $$ for (int i = 0; i < tokens.keys.length; i++) -->Line_56 $$ indexedPropertyName += PROPERTY_KEY_PREFIX + key + PROPERTY_KEY_SUFFIX[ CD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_43 $$ value = elem[ FD ]
Line_14 $$ value = setDefaultValue(tokens.actualName)-->Line_43 $$ value = elem[ FD ]
Line_26 $$ value = growArrayIfNecessary(value, index, indexedPropertyName)-->Line_47 $$ if (value instanceof Map) [ FD ]
Line_2 $$ protected Object getPropertyValue(PropertyTokenHolder tokens) throws BeansException -->Line_6 $$ if (ph == null || !ph.isReadable()) [ CD ]
Line_21 $$ String key = tokens.keys[i]-->Line_35 $$ int index = Integer.parseInt(key)[ FD ]
Line_33 $$ if (value instanceof Set) -->Line_47 $$ if (value instanceof Map) [ CD ]
