Line_6 $$ for (Object param : params) -->Line_14 $$ if (param == null) [ FD ]
Line_6 $$ for (Object param : params) -->Line_17 $$ ByteBufUtil.writeAscii(buffer, param.toString())[ FD ]
Line_18 $$ if (param instanceof Number) -->Line_19 $$ if (sb == null) [ CD ]
Line_7 $$ if (hasPrev) -->Line_8 $$ buffer.writeByte(',')[ CD ]
Line_22 $$ if (param instanceof Integer) -->Line_24 $$ if (param instanceof Long) [ CD ]
Line_3 $$ JsonWriter writer = null-->Line_44 $$ writer = new JsonWriter(new ByteBufUtf8Writer(buffer))[ FD ]
Line_6 $$ for (Object param : params) -->Line_16 $$ if (param instanceof Boolean) [ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_29 $$ sb.append(((Double) param).doubleValue())[ FD ]
Line_5 $$ boolean hasPrev = false-->Line_10 $$ hasPrev = true[ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_4 $$ buffer.writeByte(',').writeByte('[')[ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_25 $$ sb.append(((Long) param).longValue())[ FD ]
Line_35 $$ if (param instanceof Consumer) -->Line_43 $$ if (writer == null) [ CD ]
Line_14 $$ if (param == null) -->Line_16 $$ if (param instanceof Boolean) [ CD ]
Line_35 $$ if (param instanceof Consumer) -->Line_41 $$ sb.setLength(0)[ CD ]
Line_18 $$ if (param instanceof Number) -->Line_35 $$ if (param instanceof Consumer) [ CD ]
Line_26 $$ if (param instanceof Float) -->Line_28 $$ if (param instanceof Double) [ CD ]
Line_12 $$ if (param instanceof CharSequence) -->Line_14 $$ if (param == null) [ CD ]
Line_6 $$ for (Object param : params) -->Line_28 $$ if (param instanceof Double) [ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_39 $$ ((Consumer<StringBuilder>) param).consume(sb)[ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_40 $$ ByteBufUtilEx.writeUtf8(buffer, sb)[ FD ]
Line_14 $$ if (param == null) -->Line_15 $$ ByteBufUtil.writeAscii(buffer, "null")[ CD ]
Line_6 $$ for (Object param : params) -->Line_31 $$ sb.append(param.toString())[ FD ]
Line_16 $$ if (param instanceof Boolean) -->Line_18 $$ if (param instanceof Number) [ CD ]
Line_3 $$ JsonWriter writer = null-->Line_46 $$ ((TypeAdapter<Object>) gson.getAdapter(param.getClass())).write(writer, param)[ FD ]
Line_28 $$ if (param instanceof Double) -->Line_31 $$ sb.append(param.toString())[ CD ]
Line_44 $$ writer = new JsonWriter(new ByteBufUtf8Writer(buffer))-->Line_46 $$ ((TypeAdapter<Object>) gson.getAdapter(param.getClass())).write(writer, param)[ FD ]
Line_6 $$ for (Object param : params) -->Line_46 $$ ((TypeAdapter<Object>) gson.getAdapter(param.getClass())).write(writer, param)[ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_33 $$ ByteBufUtil.writeAscii(buffer, sb)[ FD ]
Line_6 $$ for (Object param : params) -->Line_18 $$ if (param instanceof Number) [ FD ]
Line_12 $$ if (param instanceof CharSequence) -->Line_13 $$ JsonUtil.escape(((CharSequence) param), buffer)[ CD ]
Line_6 $$ for (Object param : params) -->Line_24 $$ if (param instanceof Long) [ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_34 $$ sb.setLength(0)[ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_23 $$ sb.append(((Integer) param).intValue())[ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_13 $$ JsonUtil.escape(((CharSequence) param), buffer)[ FD ]
Line_35 $$ if (param instanceof Consumer) -->Line_40 $$ ByteBufUtilEx.writeUtf8(buffer, sb)[ CD ]
Line_6 $$ for (Object param : params) -->Line_12 $$ if (param instanceof CharSequence) [ FD ]
Line_22 $$ if (param instanceof Integer) -->Line_23 $$ sb.append(((Integer) param).intValue())[ CD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_3 $$ JsonWriter writer = null[ CD ]
Line_18 $$ if (param instanceof Number) -->Line_33 $$ ByteBufUtil.writeAscii(buffer, sb)[ CD ]
Line_7 $$ if (hasPrev) -->Line_10 $$ hasPrev = true[ CD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_17 $$ ByteBufUtil.writeAscii(buffer, param.toString())[ FD ]
Line_6 $$ for (Object param : params) -->Line_26 $$ if (param instanceof Float) [ FD ]
Line_35 $$ if (param instanceof Consumer) -->Line_36 $$ if (sb == null) [ CD ]
Line_6 $$ for (Object param : params) -->Line_22 $$ if (param instanceof Integer) [ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_36 $$ if (sb == null) [ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_15 $$ ByteBufUtil.writeAscii(buffer, "null")[ FD ]
Line_18 $$ if (param instanceof Number) -->Line_34 $$ sb.setLength(0)[ CD ]
Line_43 $$ if (writer == null) -->Line_44 $$ writer = new JsonWriter(new ByteBufUtf8Writer(buffer))[ CD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_5 $$ boolean hasPrev = false[ CD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_19 $$ if (sb == null) [ FD ]
Line_35 $$ if (param instanceof Consumer) -->Line_46 $$ ((TypeAdapter<Object>) gson.getAdapter(param.getClass())).write(writer, param)[ CD ]
Line_18 $$ if (param instanceof Number) -->Line_22 $$ if (param instanceof Integer) [ CD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_41 $$ sb.setLength(0)[ FD ]
Line_6 $$ for (Object param : params) -->Line_35 $$ if (param instanceof Consumer) [ FD ]
Line_24 $$ if (param instanceof Long) -->Line_25 $$ sb.append(((Long) param).longValue())[ CD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_8 $$ buffer.writeByte(',')[ FD ]
Line_24 $$ if (param instanceof Long) -->Line_26 $$ if (param instanceof Float) [ CD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_27 $$ sb.append(((Float) param).floatValue())[ FD ]
Line_3 $$ JsonWriter writer = null-->Line_43 $$ if (writer == null) [ FD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_4 $$ buffer.writeByte(',').writeByte('[')[ CD ]
Line_28 $$ if (param instanceof Double) -->Line_29 $$ sb.append(((Double) param).doubleValue())[ CD ]
Line_2 $$ private void encodeParameters(@NotNull ByteBuf buffer, @NotNull Object[] params, @Nullable StringBuilder sb) throws IOException -->Line_31 $$ sb.append(param.toString())[ FD ]
Line_35 $$ if (param instanceof Consumer) -->Line_39 $$ ((Consumer<StringBuilder>) param).consume(sb)[ CD ]
Line_26 $$ if (param instanceof Float) -->Line_27 $$ sb.append(((Float) param).floatValue())[ CD ]
Line_16 $$ if (param instanceof Boolean) -->Line_17 $$ ByteBufUtil.writeAscii(buffer, param.toString())[ CD ]
