Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_28 $$ assertNotNull(shorts[1])[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_42 $$ Map<?, ?> map = adder.toMap("key", expectedStrings)[ CD ]
Line_21 $$ Integer[] numbers = new Integer[] -->Line_22 $$ assertEquals("12345", adder.concatArrayOfIntegerWrappers(numbers))[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_14 $$ assertEquals(Double.class, adder.addDoubles(new Double(2.0), new Double(3.1)).getClass())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_21 $$ Integer[] numbers = new Integer[] [ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_25 $$ assertEquals(2, shorts.length)[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_36 $$ Map<?, ?> singleValueMap = adder.toMap("key", "value")[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_15 $$ assertFalse(adder.resultIsPositive(new Integer(-200), new Integer(1)).booleanValue())[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_11 $$ assertEquals(5, adder.addFloats(new Float(2.0F), new Float(3.1F)).intValue())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_13 $$ assertEquals(5, new Double(adder.addDoubles(new Double(2.0), new Double(3.1)).intValue()).intValue())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_20 $$ assertEquals(Character.class, adder.echo(new Character('c')).getClass())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_22 $$ assertEquals("12345", adder.concatArrayOfIntegerWrappers(numbers))[ CD ]
Line_41 $$ String[] expectedStrings = new String[] -->Line_42 $$ Map<?, ?> map = adder.toMap("key", expectedStrings)[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_30 $$ String[][] lol = adder.createListOfLists("1", "2", "3")[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_5 $$ assertEquals(new Integer(2), adder.addInts(new Integer(1), new Integer(1)))[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_40 $$ assertEquals("value", singleValueMap.values().iterator().next())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_33 $$ assertEquals("1", lol[0][0])[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_20 $$ assertEquals(Character.class, adder.echo(new Character('c')).getClass())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_47 $$ for (int i = 0; i < expectedStrings.length; ++i) [ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_19 $$ assertEquals(new Character('c'), adder.echo(new Character('c')))[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_24 $$ Short[] shorts = adder.populate(new Short((short) 1), new Short((short) 2))[ CD ]
Line_36 $$ Map<?, ?> singleValueMap = adder.toMap("key", "value")-->Line_40 $$ assertEquals("value", singleValueMap.values().iterator().next())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_8 $$ assertEquals(Short.class, adder.addShorts(new Short((short) 1), new Short((short) 3)).getClass())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_23 $$ assertEquals(String.class, adder.concatArrayOfIntegerWrappers(numbers).getClass())[ CD ]
Line_36 $$ Map<?, ?> singleValueMap = adder.toMap("key", "value")-->Line_37 $$ assertNotNull(singleValueMap)[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_31 $$ assertNotNull(lol)[ CD ]
Line_21 $$ Integer[] numbers = new Integer[] -->Line_23 $$ assertEquals(String.class, adder.concatArrayOfIntegerWrappers(numbers).getClass())[ FD ]
Line_30 $$ String[][] lol = adder.createListOfLists("1", "2", "3")-->Line_31 $$ assertNotNull(lol)[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_32 $$ assertEquals(3, lol.length)[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_6 $$ assertEquals(Integer.class, adder.addInts(new Integer(1), new Integer(1)).getClass())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_41 $$ String[] expectedStrings = new String[] [ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_23 $$ assertEquals(String.class, adder.concatArrayOfIntegerWrappers(numbers).getClass())[ FD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_10 $$ assertEquals(Long.class, adder.addLongs(new Long(2L), new Long(3L)).getClass())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_12 $$ assertEquals(Float.class, adder.addFloats(new Float(2.0F), new Float(3.1F)).getClass())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_10 $$ assertEquals(Long.class, adder.addLongs(new Long(2L), new Long(3L)).getClass())[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_8 $$ assertEquals(Short.class, adder.addShorts(new Short((short) 1), new Short((short) 3)).getClass())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_29 $$ assertEquals(new Short((short) 2), shorts[1])[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_3 $$ ApplicationContext ctx = new ClassPathXmlApplicationContext("jrubyContextForWrappers.xml", getClass())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_35 $$ assertEquals("3", lol[2][0])[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_12 $$ assertEquals(Float.class, adder.addFloats(new Float(2.0F), new Float(3.1F)).getClass())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_39 $$ assertEquals("key", singleValueMap.keySet().iterator().next())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_7 $$ assertEquals(new Short((short) 4), adder.addShorts(new Short((short) 1), new Short((short) 3)))[ CD ]
Line_42 $$ Map<?, ?> map = adder.toMap("key", expectedStrings)-->Line_46 $$ String[] strings = (String[]) map.values().iterator().next()[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_44 $$ assertEquals(1, map.size())[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_24 $$ Short[] shorts = adder.populate(new Short((short) 1), new Short((short) 2))[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_5 $$ assertEquals(new Integer(2), adder.addInts(new Integer(1), new Integer(1)))[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_16 $$ assertEquals(Boolean.class, adder.resultIsPositive(new Integer(-200), new Integer(1)).getClass())[ CD ]
Line_36 $$ Map<?, ?> singleValueMap = adder.toMap("key", "value")-->Line_38 $$ assertEquals(1, singleValueMap.size())[ FD ]
Line_42 $$ Map<?, ?> map = adder.toMap("key", expectedStrings)-->Line_45 $$ assertEquals("key", map.keySet().iterator().next())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_27 $$ assertEquals(new Short((short) 1), shorts[0])[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_15 $$ assertFalse(adder.resultIsPositive(new Integer(-200), new Integer(1)).booleanValue())[ FD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_13 $$ assertEquals(5, new Double(adder.addDoubles(new Double(2.0), new Double(3.1)).intValue()).intValue())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_7 $$ assertEquals(new Short((short) 4), adder.addShorts(new Short((short) 1), new Short((short) 3)))[ FD ]
Line_36 $$ Map<?, ?> singleValueMap = adder.toMap("key", "value")-->Line_39 $$ assertEquals("key", singleValueMap.keySet().iterator().next())[ FD ]
Line_47 $$ for (int i = 0; i < expectedStrings.length; ++i) -->Line_48 $$ assertEquals(expectedStrings[i], strings[i])[ CD ]
Line_42 $$ Map<?, ?> map = adder.toMap("key", expectedStrings)-->Line_44 $$ assertEquals(1, map.size())[ FD ]
Line_42 $$ Map<?, ?> map = adder.toMap("key", expectedStrings)-->Line_43 $$ assertNotNull(map)[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_38 $$ assertEquals(1, singleValueMap.size())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_46 $$ String[] strings = (String[]) map.values().iterator().next()[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_42 $$ Map<?, ?> map = adder.toMap("key", expectedStrings)[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_43 $$ assertNotNull(map)[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_36 $$ Map<?, ?> singleValueMap = adder.toMap("key", "value")[ FD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_14 $$ assertEquals(Double.class, adder.addDoubles(new Double(2.0), new Double(3.1)).getClass())[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_45 $$ assertEquals("key", map.keySet().iterator().next())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_17 $$ assertEquals("ri", adder.concatenate(new Character('r'), new Character('i')))[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_6 $$ assertEquals(Integer.class, adder.addInts(new Integer(1), new Integer(1)).getClass())[ FD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_18 $$ assertEquals(String.class, adder.concatenate(new Character('r'), new Character('i')).getClass())[ FD ]
Line_3 $$ ApplicationContext ctx = new ClassPathXmlApplicationContext("jrubyContextForWrappers.xml", getClass())-->Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")[ FD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_19 $$ assertEquals(new Character('c'), adder.echo(new Character('c')))[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_11 $$ assertEquals(5, adder.addFloats(new Float(2.0F), new Float(3.1F)).intValue())[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_9 $$ assertEquals(new Long(5L), adder.addLongs(new Long(2L), new Long(3L)))[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_9 $$ assertEquals(new Long(5L), adder.addLongs(new Long(2L), new Long(3L)))[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_26 $$ assertNotNull(shorts[0])[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_16 $$ assertEquals(Boolean.class, adder.resultIsPositive(new Integer(-200), new Integer(1)).getClass())[ FD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_17 $$ assertEquals("ri", adder.concatenate(new Character('r'), new Character('i')))[ FD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_37 $$ assertNotNull(singleValueMap)[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_34 $$ assertEquals("2", lol[1][0])[ CD ]
Line_2 $$ public void testWithWrapperArgsInReturnTypeAndParameters() throws Exception -->Line_18 $$ assertEquals(String.class, adder.concatenate(new Character('r'), new Character('i')).getClass())[ CD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_22 $$ assertEquals("12345", adder.concatArrayOfIntegerWrappers(numbers))[ FD ]
Line_4 $$ WrapperAdder adder = (WrapperAdder) ctx.getBean("adder")-->Line_30 $$ String[][] lol = adder.createListOfLists("1", "2", "3")[ FD ]
