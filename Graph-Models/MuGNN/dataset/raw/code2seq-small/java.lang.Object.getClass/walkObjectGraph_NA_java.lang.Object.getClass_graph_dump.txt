Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_6 $$ while ((object = queue.poll()) != null) [ FD ]
Line_25 $$ for (Field field : clazz.getDeclaredFields()) -->Line_29 $$ field.setAccessible(true)[ FD ]
Line_24 $$ while (clazz != null) -->Line_40 $$ clazz = clazz.getSuperclass()[ CD ]
Line_25 $$ for (Field field : clazz.getDeclaredFields()) -->Line_26 $$ if (Modifier.isStatic(field.getModifiers())) [ FD ]
Line_11 $$ if (clazz.isArray()) -->Line_13 $$ if (clazz.isPrimitive()) [ CD ]
Line_12 $$ clazz = clazz.getComponentType()-->Line_24 $$ while (clazz != null) [ FD ]
Line_40 $$ clazz = clazz.getSuperclass()-->Line_25 $$ for (Field field : clazz.getDeclaredFields()) [ FD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_6 $$ while ((object = queue.poll()) != null) [ CD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_7 $$ if (!visitedObjects.add(object)) [ CD ]
Line_3 $$ Queue<Object> queue = new LinkedList()-->Line_4 $$ queue.offer(object)[ FD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_7 $$ if (!visitedObjects.add(object)) [ FD ]
Line_10 $$ Class<?> clazz = object.getClass()-->Line_13 $$ if (clazz.isPrimitive()) [ FD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_16 $$ for (int i = 0; i < Array.getLength(object); i++) [ FD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_17 $$ Object element = Array.get(object, i)[ FD ]
Line_17 $$ Object element = Array.get(object, i)-->Line_19 $$ queue.offer(element)[ FD ]
Line_16 $$ for (int i = 0; i < Array.getLength(object); i++) -->Line_17 $$ Object element = Array.get(object, i)[ FD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_4 $$ queue.offer(object)[ CD ]
Line_3 $$ Queue<Object> queue = new LinkedList()-->Line_34 $$ queue.offer(value)[ FD ]
Line_5 $$ Set<Object> visitedObjects = Collections.newSetFromMap(new IdentityHashMap<Object, Boolean>())-->Line_7 $$ if (!visitedObjects.add(object)) [ FD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_17 $$ Object element = Array.get(object, i)[ FD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_24 $$ while (clazz != null) [ CD ]
Line_32 $$ Class<?> type = field.getType()-->Line_33 $$ if ((value != null) && !type.isPrimitive()) [ FD ]
Line_12 $$ clazz = clazz.getComponentType()-->Line_11 $$ if (clazz.isArray()) [ FD ]
Line_11 $$ if (clazz.isArray()) -->Line_16 $$ for (int i = 0; i < Array.getLength(object); i++) [ CD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_7 $$ if (!visitedObjects.add(object)) [ FD ]
Line_40 $$ clazz = clazz.getSuperclass()-->Line_24 $$ while (clazz != null) [ FD ]
Line_33 $$ if ((value != null) && !type.isPrimitive()) -->Line_34 $$ queue.offer(value)[ CD ]
Line_25 $$ for (Field field : clazz.getDeclaredFields()) -->Line_32 $$ Class<?> type = field.getType()[ FD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_10 $$ Class<?> clazz = object.getClass()[ FD ]
Line_17 $$ Object element = Array.get(object, i)-->Line_18 $$ if (element != null) [ FD ]
Line_10 $$ Class<?> clazz = object.getClass()-->Line_24 $$ while (clazz != null) [ FD ]
Line_10 $$ Class<?> clazz = object.getClass()-->Line_25 $$ for (Field field : clazz.getDeclaredFields()) [ FD ]
Line_10 $$ Class<?> clazz = object.getClass()-->Line_12 $$ clazz = clazz.getComponentType()[ FD ]
Line_3 $$ Queue<Object> queue = new LinkedList()-->Line_19 $$ queue.offer(element)[ FD ]
Line_25 $$ for (Field field : clazz.getDeclaredFields()) -->Line_31 $$ Object value = visitor.visit(field, object)[ FD ]
Line_18 $$ if (element != null) -->Line_19 $$ queue.offer(element)[ CD ]
Line_10 $$ Class<?> clazz = object.getClass()-->Line_40 $$ clazz = clazz.getSuperclass()[ FD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_11 $$ if (clazz.isArray()) [ CD ]
Line_10 $$ Class<?> clazz = object.getClass()-->Line_11 $$ if (clazz.isArray()) [ FD ]
Line_12 $$ clazz = clazz.getComponentType()-->Line_13 $$ if (clazz.isPrimitive()) [ FD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_10 $$ Class<?> clazz = object.getClass()[ CD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_3 $$ Queue<Object> queue = new LinkedList()[ CD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_5 $$ Set<Object> visitedObjects = Collections.newSetFromMap(new IdentityHashMap<Object, Boolean>())[ CD ]
Line_11 $$ if (clazz.isArray()) -->Line_12 $$ clazz = clazz.getComponentType()[ CD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_31 $$ Object value = visitor.visit(field, object)[ FD ]
Line_31 $$ Object value = visitor.visit(field, object)-->Line_34 $$ queue.offer(value)[ FD ]
Line_12 $$ clazz = clazz.getComponentType()-->Line_25 $$ for (Field field : clazz.getDeclaredFields()) [ FD ]
Line_6 $$ while ((object = queue.poll()) != null) -->Line_31 $$ Object value = visitor.visit(field, object)[ FD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_16 $$ for (int i = 0; i < Array.getLength(object); i++) [ FD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_10 $$ Class<?> clazz = object.getClass()[ FD ]
Line_3 $$ Queue<Object> queue = new LinkedList()-->Line_6 $$ while ((object = queue.poll()) != null) [ FD ]
Line_12 $$ clazz = clazz.getComponentType()-->Line_40 $$ clazz = clazz.getSuperclass()[ FD ]
Line_16 $$ for (int i = 0; i < Array.getLength(object); i++) -->Line_17 $$ Object element = Array.get(object, i)[ CD ]
Line_16 $$ for (int i = 0; i < Array.getLength(object); i++) -->Line_18 $$ if (element != null) [ CD ]
Line_2 $$ public static void walkObjectGraph(Object object, Visitor visitor) -->Line_4 $$ queue.offer(object)[ FD ]
