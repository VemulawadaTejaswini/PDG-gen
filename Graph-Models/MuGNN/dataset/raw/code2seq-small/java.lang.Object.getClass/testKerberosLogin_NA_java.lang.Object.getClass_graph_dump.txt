Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_29 $$ if (loginContext != null) [ FD ]
Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_15 $$ subject = loginContext.getSubject()[ FD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_23 $$ subject = loginContext.getSubject()[ FD ]
Line_3 $$ MiniKdc kdc = getKdc()-->Line_18 $$ Assert.assertEquals(principal + "@" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName())[ FD ]
Line_15 $$ subject = loginContext.getSubject()-->Line_24 $$ Assert.assertEquals(1, subject.getPrincipals().size())[ FD ]
Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_14 $$ loginContext.login()[ FD ]
Line_20 $$ subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_23 $$ subject = loginContext.getSubject()[ FD ]
Line_15 $$ subject = loginContext.getSubject()-->Line_17 $$ Assert.assertEquals(KerberosPrincipal.class, subject.getPrincipals().iterator().next().getClass())[ FD ]
Line_15 $$ subject = loginContext.getSubject()-->Line_18 $$ Assert.assertEquals(principal + "@" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName())[ FD ]
Line_15 $$ subject = loginContext.getSubject()-->Line_20 $$ subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_30 $$ loginContext.logout()[ FD ]
Line_15 $$ subject = loginContext.getSubject()-->Line_16 $$ Assert.assertEquals(1, subject.getPrincipals().size())[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_14 $$ loginContext.login()[ FD ]
Line_2 $$ public void testKerberosLogin() throws Exception -->Line_5 $$ LoginContext loginContext = null[ CD ]
Line_7 $$ String principal = "foo"-->Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))[ FD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_24 $$ Assert.assertEquals(1, subject.getPrincipals().size())[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_27 $$ loginContext.logout()[ FD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_15 $$ subject = loginContext.getSubject()[ FD ]
Line_2 $$ public void testKerberosLogin() throws Exception -->Line_4 $$ File workDir = getWorkDir()[ CD ]
Line_5 $$ LoginContext loginContext = null-->Line_19 $$ loginContext.logout()[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_22 $$ loginContext.login()[ FD ]
Line_20 $$ subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_25 $$ Assert.assertEquals(KerberosPrincipal.class, subject.getPrincipals().iterator().next().getClass())[ FD ]
Line_8 $$ File keytab = new File(workDir, "foo.keytab")-->Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))[ FD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_18 $$ Assert.assertEquals(principal + "@" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName())[ FD ]
Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))-->Line_30 $$ loginContext.logout()[ FD ]
Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_23 $$ subject = loginContext.getSubject()[ FD ]
Line_10 $$ Set<Principal> principals = new HashSet<Principal>()-->Line_11 $$ principals.add(new KerberosPrincipal(principal))[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_29 $$ if (loginContext != null) [ FD ]
Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_19 $$ loginContext.logout()[ FD ]
Line_8 $$ File keytab = new File(workDir, "foo.keytab")-->Line_9 $$ kdc.createPrincipal(keytab, principal)[ FD ]
Line_15 $$ subject = loginContext.getSubject()-->Line_25 $$ Assert.assertEquals(KerberosPrincipal.class, subject.getPrincipals().iterator().next().getClass())[ FD ]
Line_15 $$ subject = loginContext.getSubject()-->Line_26 $$ Assert.assertEquals(principal + "@" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName())[ FD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_25 $$ Assert.assertEquals(KerberosPrincipal.class, subject.getPrincipals().iterator().next().getClass())[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_15 $$ subject = loginContext.getSubject()[ FD ]
Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))-->Line_29 $$ if (loginContext != null) [ FD ]
Line_23 $$ subject = loginContext.getSubject()-->Line_24 $$ Assert.assertEquals(1, subject.getPrincipals().size())[ FD ]
Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_22 $$ loginContext.login()[ FD ]
Line_7 $$ String principal = "foo"-->Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))[ FD ]
Line_2 $$ public void testKerberosLogin() throws Exception -->Line_3 $$ MiniKdc kdc = getKdc()[ CD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_16 $$ Assert.assertEquals(1, subject.getPrincipals().size())[ FD ]
Line_3 $$ MiniKdc kdc = getKdc()-->Line_26 $$ Assert.assertEquals(principal + "@" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName())[ FD ]
Line_20 $$ subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_26 $$ Assert.assertEquals(principal + "@" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName())[ FD ]
Line_15 $$ subject = loginContext.getSubject()-->Line_23 $$ subject = loginContext.getSubject()[ FD ]
Line_8 $$ File keytab = new File(workDir, "foo.keytab")-->Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))[ FD ]
Line_3 $$ MiniKdc kdc = getKdc()-->Line_9 $$ kdc.createPrincipal(keytab, principal)[ FD ]
Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))-->Line_23 $$ subject = loginContext.getSubject()[ FD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_17 $$ Assert.assertEquals(KerberosPrincipal.class, subject.getPrincipals().iterator().next().getClass())[ FD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_20 $$ subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))[ FD ]
Line_20 $$ subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_24 $$ Assert.assertEquals(1, subject.getPrincipals().size())[ FD ]
Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_30 $$ loginContext.logout()[ FD ]
Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))[ FD ]
Line_23 $$ subject = loginContext.getSubject()-->Line_25 $$ Assert.assertEquals(KerberosPrincipal.class, subject.getPrincipals().iterator().next().getClass())[ FD ]
Line_29 $$ if (loginContext != null) -->Line_30 $$ loginContext.logout()[ CD ]
Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))-->Line_22 $$ loginContext.login()[ FD ]
Line_21 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createServerConfig(principal, keytab))-->Line_27 $$ loginContext.logout()[ FD ]
Line_23 $$ subject = loginContext.getSubject()-->Line_26 $$ Assert.assertEquals(principal + "@" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName())[ FD ]
Line_12 $$ Subject subject = new Subject(false, principals, new HashSet<Object>(), new HashSet<Object>())-->Line_26 $$ Assert.assertEquals(principal + "@" + kdc.getRealm(), subject.getPrincipals().iterator().next().getName())[ FD ]
Line_5 $$ LoginContext loginContext = null-->Line_23 $$ subject = loginContext.getSubject()[ FD ]
Line_13 $$ loginContext = new LoginContext("", subject, null, KerberosConfiguration.createClientConfig(principal, keytab))-->Line_27 $$ loginContext.logout()[ FD ]
Line_7 $$ String principal = "foo"-->Line_9 $$ kdc.createPrincipal(keytab, principal)[ FD ]
