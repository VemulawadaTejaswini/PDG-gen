Line_16 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_31 $$ futureCompletionHandler.timedOut(null)[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_17 $$ Serializer serializer = new Serializer()[ CD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_15 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_17 $$ Serializer serializer = new Serializer()-->Line_18 $$ serializer.writeObject(new TestProcessCallable())[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_31 $$ futureCompletionHandler.timedOut(null)[ CD ]
Line_3 $$ DefaultNoticeableFuture<String> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_33 $$ defaultNoticeableFuture.get()[ FD ]
Line_26 $$ Throwable throwable = ee.getCause()-->Line_27 $$ Assert.assertSame(ClassNotFoundException.class, throwable.getClass())[ FD ]
Line_3 $$ DefaultNoticeableFuture<String> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_15 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_4 $$ FutureCompletionHandler<String> futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_21 $$ futureCompletionHandler.replied(null, Datagram.createRequestDatagram(SystemDataType.RPC.getValue(), byteBuffer))[ FD ]
Line_4 $$ FutureCompletionHandler<String> futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_31 $$ futureCompletionHandler.timedOut(null)[ FD ]
Line_16 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_30 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_7 $$ IOException ioe = new IOException()[ CD ]
Line_15 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_33 $$ defaultNoticeableFuture.get()[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_3 $$ DefaultNoticeableFuture<String> defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_19 $$ ByteBuffer byteBuffer = serializer.toByteBuffer()-->Line_20 $$ byteBuffer.put(76, (byte) CharPool.UPPER_CASE_S)[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_21 $$ futureCompletionHandler.replied(null, Datagram.createRequestDatagram(SystemDataType.RPC.getValue(), byteBuffer))[ CD ]
Line_30 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_31 $$ futureCompletionHandler.timedOut(null)[ FD ]
Line_4 $$ FutureCompletionHandler<String> futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_16 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)[ FD ]
Line_4 $$ FutureCompletionHandler<String> futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_8 $$ futureCompletionHandler.failed(null, ioe)[ FD ]
Line_29 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_33 $$ defaultNoticeableFuture.get()[ FD ]
Line_4 $$ FutureCompletionHandler<String> futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_5 $$ futureCompletionHandler.delivered(null)[ FD ]
Line_7 $$ IOException ioe = new IOException()-->Line_13 $$ Assert.assertSame(ioe, ee.getCause())[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_6 $$ futureCompletionHandler.submitted(null)[ CD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_19 $$ ByteBuffer byteBuffer = serializer.toByteBuffer()[ CD ]
Line_15 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_29 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_30 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)[ CD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_20 $$ byteBuffer.put(76, (byte) CharPool.UPPER_CASE_S)[ CD ]
Line_7 $$ IOException ioe = new IOException()-->Line_8 $$ futureCompletionHandler.failed(null, ioe)[ FD ]
Line_19 $$ ByteBuffer byteBuffer = serializer.toByteBuffer()-->Line_21 $$ futureCompletionHandler.replied(null, Datagram.createRequestDatagram(SystemDataType.RPC.getValue(), byteBuffer))[ FD ]
Line_16 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_21 $$ futureCompletionHandler.replied(null, Datagram.createRequestDatagram(SystemDataType.RPC.getValue(), byteBuffer))[ FD ]
Line_3 $$ DefaultNoticeableFuture<String> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_29 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_18 $$ serializer.writeObject(new TestProcessCallable())[ CD ]
Line_3 $$ DefaultNoticeableFuture<String> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_10 $$ defaultNoticeableFuture.get()[ FD ]
Line_17 $$ Serializer serializer = new Serializer()-->Line_19 $$ ByteBuffer byteBuffer = serializer.toByteBuffer()[ FD ]
Line_4 $$ FutureCompletionHandler<String> futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_30 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)[ FD ]
Line_15 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_23 $$ defaultNoticeableFuture.get()[ FD ]
Line_4 $$ FutureCompletionHandler<String> futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)-->Line_6 $$ futureCompletionHandler.submitted(null)[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_29 $$ defaultNoticeableFuture = new DefaultNoticeableFuture()[ CD ]
Line_3 $$ DefaultNoticeableFuture<String> defaultNoticeableFuture = new DefaultNoticeableFuture()-->Line_23 $$ defaultNoticeableFuture.get()[ FD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_16 $$ futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)[ CD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_5 $$ futureCompletionHandler.delivered(null)[ CD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_8 $$ futureCompletionHandler.failed(null, ioe)[ CD ]
Line_2 $$ public void testFutureCompletionHandler() throws Exception -->Line_4 $$ FutureCompletionHandler<String> futureCompletionHandler = new FutureCompletionHandler(defaultNoticeableFuture)[ CD ]
