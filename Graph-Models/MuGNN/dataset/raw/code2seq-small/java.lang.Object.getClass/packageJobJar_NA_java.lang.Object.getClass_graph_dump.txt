Line_28 $$ if (debug_ == 0) -->Line_29 $$ jobJar.deleteOnExit()[ CD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_32 $$ if (verbose_) [ CD ]
Line_4 $$ String runtimeClasses = config_.get("stream.shipped.hadoopstreaming")-->Line_5 $$ if (runtimeClasses == null) [ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_37 $$ return jobJarName[ CD ]
Line_31 $$ JarBuilder builder = new JarBuilder()-->Line_36 $$ builder.merge(packageFiles_, unjarFiles, jobJarName)[ FD ]
Line_15 $$ if (new File(runtimeClasses).isDirectory()) -->Line_16 $$ packageFiles_.add(runtimeClasses)[ CD ]
Line_3 $$ ArrayList<String> unjarFiles = new ArrayList<String>()-->Line_18 $$ unjarFiles.add(runtimeClasses)[ FD ]
Line_32 $$ if (verbose_) -->Line_33 $$ builder.setVerbose(true)[ CD ]
Line_6 $$ runtimeClasses = StreamUtil.findInClasspath(StreamJob.class.getName())-->Line_18 $$ unjarFiles.add(runtimeClasses)[ FD ]
Line_8 $$ if (runtimeClasses == null) -->Line_11 $$ msg("Found runtime classes in: " + runtimeClasses)[ CD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_21 $$ if (packageFiles_.size() + unjarFiles.size() == 0) [ CD ]
Line_4 $$ String runtimeClasses = config_.get("stream.shipped.hadoopstreaming")-->Line_18 $$ unjarFiles.add(runtimeClasses)[ FD ]
Line_26 $$ File jobJar = File.createTempFile("streamjob", ".jar", tmpDir)-->Line_35 $$ String jobJarName = jobJar.getAbsolutePath()[ FD ]
Line_15 $$ if (new File(runtimeClasses).isDirectory()) -->Line_18 $$ unjarFiles.add(runtimeClasses)[ CD ]
Line_25 $$ File tmpDir = (tmp == null) ? null : new File(tmp)-->Line_26 $$ File jobJar = File.createTempFile("streamjob", ".jar", tmpDir)[ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_8 $$ if (runtimeClasses == null) [ CD ]
Line_3 $$ ArrayList<String> unjarFiles = new ArrayList<String>()-->Line_21 $$ if (packageFiles_.size() + unjarFiles.size() == 0) [ FD ]
Line_5 $$ if (runtimeClasses == null) -->Line_6 $$ runtimeClasses = StreamUtil.findInClasspath(StreamJob.class.getName())[ CD ]
Line_4 $$ String runtimeClasses = config_.get("stream.shipped.hadoopstreaming")-->Line_8 $$ if (runtimeClasses == null) [ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_25 $$ File tmpDir = (tmp == null) ? null : new File(tmp)[ CD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_27 $$ System.out.println("packageJobJar: " + packageFiles_ + " " + unjarFiles + " " + jobJar + " tmpDir=" + tmpDir)[ CD ]
Line_31 $$ JarBuilder builder = new JarBuilder()-->Line_33 $$ builder.setVerbose(true)[ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_36 $$ builder.merge(packageFiles_, unjarFiles, jobJarName)[ CD ]
Line_3 $$ ArrayList<String> unjarFiles = new ArrayList<String>()-->Line_36 $$ builder.merge(packageFiles_, unjarFiles, jobJarName)[ FD ]
Line_13 $$ if (isLocalHadoop()) -->Line_15 $$ if (new File(runtimeClasses).isDirectory()) [ CD ]
Line_35 $$ String jobJarName = jobJar.getAbsolutePath()-->Line_36 $$ builder.merge(packageFiles_, unjarFiles, jobJarName)[ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_35 $$ String jobJarName = jobJar.getAbsolutePath()[ CD ]
Line_26 $$ File jobJar = File.createTempFile("streamjob", ".jar", tmpDir)-->Line_29 $$ jobJar.deleteOnExit()[ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_5 $$ if (runtimeClasses == null) [ CD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_4 $$ String runtimeClasses = config_.get("stream.shipped.hadoopstreaming")[ CD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_3 $$ ArrayList<String> unjarFiles = new ArrayList<String>()[ CD ]
Line_21 $$ if (packageFiles_.size() + unjarFiles.size() == 0) -->Line_22 $$ return null[ CD ]
Line_4 $$ String runtimeClasses = config_.get("stream.shipped.hadoopstreaming")-->Line_16 $$ packageFiles_.add(runtimeClasses)[ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_24 $$ String tmp = jobConf_.get("stream.tmpdir")[ CD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_13 $$ if (isLocalHadoop()) [ CD ]
Line_4 $$ String runtimeClasses = config_.get("stream.shipped.hadoopstreaming")-->Line_6 $$ runtimeClasses = StreamUtil.findInClasspath(StreamJob.class.getName())[ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_26 $$ File jobJar = File.createTempFile("streamjob", ".jar", tmpDir)[ CD ]
Line_6 $$ runtimeClasses = StreamUtil.findInClasspath(StreamJob.class.getName())-->Line_16 $$ packageFiles_.add(runtimeClasses)[ FD ]
Line_6 $$ runtimeClasses = StreamUtil.findInClasspath(StreamJob.class.getName())-->Line_8 $$ if (runtimeClasses == null) [ FD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_31 $$ JarBuilder builder = new JarBuilder()[ CD ]
Line_2 $$ protected String packageJobJar() throws IOException -->Line_28 $$ if (debug_ == 0) [ CD ]
