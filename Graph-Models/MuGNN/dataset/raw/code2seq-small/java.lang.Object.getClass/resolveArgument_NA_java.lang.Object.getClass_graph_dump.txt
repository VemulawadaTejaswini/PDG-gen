Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_4 $$ if (!paramType.isAssignableFrom(message.getClass())) [ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_5 $$ throw new MethodArgumentTypeMismatchException(message, parameter, "The actual message type [" + ClassUtils.getQualifiedName(message.getClass()) + "] " + "does not match the expected type [" + ClassUtils.getQualifiedName(paramType) + "]")[ FD ]
Line_7 $$ Class<?> expectedPayloadType = getPayloadType(parameter)-->Line_10 $$ throw new MethodArgumentTypeMismatchException(message, parameter, "The expected Message<?> payload type [" + ClassUtils.getQualifiedName(expectedPayloadType) + "] does not match the actual payload type [" + ClassUtils.getQualifiedName(payload.getClass()) + "]")[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_12 $$ return message[ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_8 $$ Object payload = message.getPayload()[ FD ]
Line_3 $$ Class<?> paramType = parameter.getParameterType()-->Line_5 $$ throw new MethodArgumentTypeMismatchException(message, parameter, "The actual message type [" + ClassUtils.getQualifiedName(message.getClass()) + "] " + "does not match the expected type [" + ClassUtils.getQualifiedName(paramType) + "]")[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_7 $$ Class<?> expectedPayloadType = getPayloadType(parameter)[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_8 $$ Object payload = message.getPayload()[ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_4 $$ if (!paramType.isAssignableFrom(message.getClass())) [ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_3 $$ Class<?> paramType = parameter.getParameterType()[ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_3 $$ Class<?> paramType = parameter.getParameterType()[ CD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_9 $$ if (payload != null && expectedPayloadType != null && !expectedPayloadType.isInstance(payload)) [ CD ]
Line_7 $$ Class<?> expectedPayloadType = getPayloadType(parameter)-->Line_9 $$ if (payload != null && expectedPayloadType != null && !expectedPayloadType.isInstance(payload)) [ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_7 $$ Class<?> expectedPayloadType = getPayloadType(parameter)[ CD ]
Line_8 $$ Object payload = message.getPayload()-->Line_10 $$ throw new MethodArgumentTypeMismatchException(message, parameter, "The expected Message<?> payload type [" + ClassUtils.getQualifiedName(expectedPayloadType) + "] does not match the actual payload type [" + ClassUtils.getQualifiedName(payload.getClass()) + "]")[ FD ]
Line_8 $$ Object payload = message.getPayload()-->Line_9 $$ if (payload != null && expectedPayloadType != null && !expectedPayloadType.isInstance(payload)) [ FD ]
Line_2 $$ public Object resolveArgument(MethodParameter parameter, Message<?> message) throws Exception -->Line_4 $$ if (!paramType.isAssignableFrom(message.getClass())) [ FD ]
