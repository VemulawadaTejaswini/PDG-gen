Line_3 $$ MRAppTestCleanup app = new MRAppTestCleanup(1, 1, true, this.getClass().getName(), true)-->Line_4 $$ JobImpl job = (JobImpl) app.submit(new Configuration())[ FD ]
Line_7 $$ int waitTime = 20 * 1000-->Line_10 $$ waitTime -= 100[ FD ]
Line_2 $$ public void testStagingCleanupOrder() throws Exception -->Line_5 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_3 $$ MRAppTestCleanup app = new MRAppTestCleanup(1, 1, true, this.getClass().getName(), true)-->Line_5 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testStagingCleanupOrder() throws Exception -->Line_8 $$ while (waitTime > 0 && app.numStops < 2) [ CD ]
Line_8 $$ while (waitTime > 0 && app.numStops < 2) -->Line_9 $$ Thread.sleep(100)[ CD ]
Line_2 $$ public void testStagingCleanupOrder() throws Exception -->Line_6 $$ app.verifyCompleted()[ CD ]
Line_8 $$ while (waitTime > 0 && app.numStops < 2) -->Line_10 $$ waitTime -= 100[ CD ]
Line_4 $$ JobImpl job = (JobImpl) app.submit(new Configuration())-->Line_5 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testStagingCleanupOrder() throws Exception -->Line_12 $$ Assert.assertEquals(1, app.ContainerAllocatorStopped)[ CD ]
Line_2 $$ public void testStagingCleanupOrder() throws Exception -->Line_7 $$ int waitTime = 20 * 1000[ CD ]
Line_2 $$ public void testStagingCleanupOrder() throws Exception -->Line_4 $$ JobImpl job = (JobImpl) app.submit(new Configuration())[ CD ]
Line_2 $$ public void testStagingCleanupOrder() throws Exception -->Line_13 $$ Assert.assertEquals(2, app.stagingDirCleanedup)[ CD ]
Line_2 $$ public void testStagingCleanupOrder() throws Exception -->Line_3 $$ MRAppTestCleanup app = new MRAppTestCleanup(1, 1, true, this.getClass().getName(), true)[ CD ]
Line_3 $$ MRAppTestCleanup app = new MRAppTestCleanup(1, 1, true, this.getClass().getName(), true)-->Line_6 $$ app.verifyCompleted()[ FD ]
