Line_10 $$ if (primitiveType == Integer.TYPE) -->Line_20 $$ if (primitiveType == Long.TYPE) [ CD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_47 $$ sb.append("}")[ CD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_51 $$ sb.append(value.getClass().getComponentType().getName())[ FD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_3 $$ if (value == null) [ CD ]
Line_20 $$ if (primitiveType == Long.TYPE) -->Line_22 $$ sb.append("long[").append(l.length).append("][ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_45 $$ sb.append(stringValueOf(object, true))[ FD ]
Line_10 $$ if (primitiveType == Integer.TYPE) -->Line_19 $$ sb.append("}")[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_17 $$ sb.append(stringValueOf(l[j]))[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_22 $$ sb.append("long[").append(l.length).append("][ FD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_50 $$ if (!isNested) [ FD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_34 $$ List<Object> l = Arrays.asList((Object[]) value)[ CD ]
Line_56 $$ if (i > 0) -->Line_57 $$ sb.append(",")[ CD ]
Line_9 $$ Class<?> primitiveType = value.getClass().getComponentType()-->Line_20 $$ if (primitiveType == Long.TYPE) [ FD ]
Line_39 $$ int i = 0-->Line_59 $$ i++[ FD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_35 $$ if (!isNested) [ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_19 $$ sb.append("}")[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_47 $$ sb.append("}")[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_64 $$ return sb.toString()[ FD ]
Line_20 $$ if (primitiveType == Long.TYPE) -->Line_29 $$ sb.append("}")[ CD ]
Line_6 $$ if (value.getClass().isArray()) -->Line_66 $$ return value.toString()[ CD ]
Line_39 $$ int i = 0-->Line_44 $$ i++[ FD ]
Line_6 $$ if (value.getClass().isArray()) -->Line_7 $$ StringBuilder sb = new StringBuilder()[ CD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_8 $$ if (value.getClass().getComponentType().isPrimitive()) [ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_12 $$ sb.append("int[").append(l.length).append("][ FD ]
Line_6 $$ if (value.getClass().isArray()) -->Line_64 $$ return sb.toString()[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_36 $$ sb.append(value.getClass().getComponentType().getName())[ FD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_38 $$ sb.append("[").append(l.size()).append("][ CD ]
Line_41 $$ if (i > 0) -->Line_42 $$ sb.append(",")[ CD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_6 $$ if (value.getClass().isArray()) [ FD ]
Line_10 $$ if (primitiveType == Integer.TYPE) -->Line_11 $$ int[] l = (int[]) value[ CD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_6 $$ if (value.getClass().isArray()) [ CD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_9 $$ Class<?> primitiveType = value.getClass().getComponentType()[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_38 $$ sb.append("[").append(l.size()).append("][ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_51 $$ sb.append(value.getClass().getComponentType().getName())[ FD ]
Line_40 $$ for (Object object : l) -->Line_60 $$ sb.append(stringValueOf(object))[ FD ]
Line_39 $$ int i = 0-->Line_56 $$ if (i > 0) [ FD ]
Line_23 $$ for (int j = 0; j < l.length; j++) -->Line_24 $$ if (j > 0) [ CD ]
Line_3 $$ if (value == null) -->Line_4 $$ return "null"[ CD ]
Line_13 $$ for (int j = 0; j < l.length; j++) -->Line_24 $$ if (j > 0) [ FD ]
Line_23 $$ for (int j = 0; j < l.length; j++) -->Line_27 $$ sb.append(stringValueOf(l[j]))[ CD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_35 $$ if (!isNested) [ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_25 $$ sb.append(",")[ FD ]
Line_6 $$ if (value.getClass().isArray()) -->Line_8 $$ if (value.getClass().getComponentType().isPrimitive()) [ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_60 $$ sb.append(stringValueOf(object))[ FD ]
Line_13 $$ for (int j = 0; j < l.length; j++) -->Line_14 $$ if (j > 0) [ CD ]
Line_9 $$ Class<?> primitiveType = value.getClass().getComponentType()-->Line_31 $$ throw new RuntimeException("Please implement support for type " + primitiveType.getName() + " in ExpressionTestCase.stringValueOf()")[ FD ]
Line_23 $$ for (int j = 0; j < l.length; j++) -->Line_24 $$ if (j > 0) [ FD ]
Line_10 $$ if (primitiveType == Integer.TYPE) -->Line_13 $$ for (int j = 0; j < l.length; j++) [ CD ]
Line_13 $$ for (int j = 0; j < l.length; j++) -->Line_14 $$ if (j > 0) [ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_29 $$ sb.append("}")[ FD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_49 $$ List<Object> l = Arrays.asList((Object[]) value)[ CD ]
Line_10 $$ if (primitiveType == Integer.TYPE) -->Line_12 $$ sb.append("int[").append(l.length).append("][ CD ]
Line_14 $$ if (j > 0) -->Line_15 $$ sb.append(",")[ CD ]
Line_39 $$ int i = 0-->Line_41 $$ if (i > 0) [ FD ]
Line_8 $$ if (value.getClass().getComponentType().isPrimitive()) -->Line_33 $$ if (value.getClass().getComponentType().isArray()) [ CD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_39 $$ int i = 0[ CD ]
Line_50 $$ if (!isNested) -->Line_51 $$ sb.append(value.getClass().getComponentType().getName())[ CD ]
Line_9 $$ Class<?> primitiveType = value.getClass().getComponentType()-->Line_10 $$ if (primitiveType == Integer.TYPE) [ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_27 $$ sb.append(stringValueOf(l[j]))[ FD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_50 $$ if (!isNested) [ CD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_66 $$ return value.toString()[ FD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_3 $$ if (value == null) [ FD ]
Line_11 $$ int[] l = (int[]) value-->Line_38 $$ sb.append("[").append(l.size()).append("][ FD ]
Line_24 $$ if (j > 0) -->Line_25 $$ sb.append(",")[ CD ]
Line_35 $$ if (!isNested) -->Line_36 $$ sb.append(value.getClass().getComponentType().getName())[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_15 $$ sb.append(",")[ FD ]
Line_13 $$ for (int j = 0; j < l.length; j++) -->Line_23 $$ for (int j = 0; j < l.length; j++) [ FD ]
Line_8 $$ if (value.getClass().getComponentType().isPrimitive()) -->Line_9 $$ Class<?> primitiveType = value.getClass().getComponentType()[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_53 $$ sb.append("[").append(l.size()).append("][ FD ]
Line_13 $$ for (int j = 0; j < l.length; j++) -->Line_17 $$ sb.append(stringValueOf(l[j]))[ CD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_53 $$ sb.append("[").append(l.size()).append("][ CD ]
Line_11 $$ int[] l = (int[]) value-->Line_53 $$ sb.append("[").append(l.size()).append("][ FD ]
Line_8 $$ if (value.getClass().getComponentType().isPrimitive()) -->Line_10 $$ if (primitiveType == Integer.TYPE) [ CD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_36 $$ sb.append(value.getClass().getComponentType().getName())[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_57 $$ sb.append(",")[ FD ]
Line_40 $$ for (Object object : l) -->Line_45 $$ sb.append(stringValueOf(object, true))[ FD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_62 $$ sb.append("}")[ FD ]
Line_20 $$ if (primitiveType == Long.TYPE) -->Line_23 $$ for (int j = 0; j < l.length; j++) [ CD ]
Line_2 $$ protected static String stringValueOf(Object value, boolean isNested) -->Line_33 $$ if (value.getClass().getComponentType().isArray()) [ FD ]
Line_33 $$ if (value.getClass().getComponentType().isArray()) -->Line_62 $$ sb.append("}")[ CD ]
Line_7 $$ StringBuilder sb = new StringBuilder()-->Line_42 $$ sb.append(",")[ FD ]
