Line_12 $$ handle = method.handle-->Line_26 $$ handle = field.getter[ FD ]
Line_26 $$ handle = field.getter-->Line_28 $$ if (handle == null) [ FD ]
Line_3 $$ if (owner.getClass().isArray() && "length".equals(name)) -->Line_7 $$ MethodHandle handle[ CD ]
Line_8 $$ if (field == null) -->Line_11 $$ if (method != null) [ CD ]
Line_7 $$ MethodHandle handle-->Line_12 $$ handle = method.handle[ FD ]
Line_13 $$ if (owner instanceof Map) -->Line_14 $$ return ((Map) owner).get(name)[ CD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_13 $$ if (owner instanceof Map) [ FD ]
Line_8 $$ if (field == null) -->Line_9 $$ final String get = "get" + Character.toUpperCase(name.charAt(0)) + name.substring(1)[ CD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_3 $$ if (owner.getClass().isArray() && "length".equals(name)) [ CD ]
Line_17 $$ final int index = Integer.parseInt(name)-->Line_18 $$ return ((List) owner).get(index)[ FD ]
Line_8 $$ if (field == null) -->Line_10 $$ final Method method = getMethod(owner, get, definition)[ CD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_9 $$ final String get = "get" + Character.toUpperCase(name.charAt(0)) + name.substring(1)[ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_4 $$ return Array.getLength(owner)[ FD ]
Line_7 $$ MethodHandle handle-->Line_26 $$ handle = field.getter[ FD ]
Line_3 $$ if (owner.getClass().isArray() && "length".equals(name)) -->Line_4 $$ return Array.getLength(owner)[ CD ]
Line_6 $$ final Field field = getField(owner, name, definition)-->Line_8 $$ if (field == null) [ FD ]
Line_3 $$ if (owner.getClass().isArray() && "length".equals(name)) -->Line_6 $$ final Field field = getField(owner, name, definition)[ CD ]
Line_7 $$ MethodHandle handle-->Line_28 $$ if (handle == null) [ FD ]
Line_8 $$ if (field == null) -->Line_26 $$ handle = field.getter[ CD ]
Line_3 $$ if (owner.getClass().isArray() && "length".equals(name)) -->Line_8 $$ if (field == null) [ CD ]
Line_9 $$ final String get = "get" + Character.toUpperCase(name.charAt(0)) + name.substring(1)-->Line_10 $$ final Method method = getMethod(owner, get, definition)[ FD ]
Line_11 $$ if (method != null) -->Line_13 $$ if (owner instanceof Map) [ CD ]
Line_12 $$ handle = method.handle-->Line_32 $$ return handle.invoke(owner)[ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_34 $$ throw new IllegalArgumentException("Error loading value from " + "field [" + name + "] with owner class [" + owner.getClass() + "].", throwable)[ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_6 $$ final Field field = getField(owner, name, definition)[ FD ]
Line_26 $$ handle = field.getter-->Line_32 $$ return handle.invoke(owner)[ FD ]
Line_3 $$ if (owner.getClass().isArray() && "length".equals(name)) -->Line_28 $$ if (handle == null) [ CD ]
Line_10 $$ final Method method = getMethod(owner, get, definition)-->Line_11 $$ if (method != null) [ FD ]
Line_13 $$ if (owner instanceof Map) -->Line_15 $$ if (owner instanceof List) [ CD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_29 $$ throw new IllegalArgumentException("Unable to read from field [" + name + "] with owner class [" + owner.getClass() + "].")[ FD ]
Line_11 $$ if (method != null) -->Line_12 $$ handle = method.handle[ CD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_14 $$ return ((Map) owner).get(name)[ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_23 $$ throw new IllegalArgumentException("Unable to find dynamic field [" + name + "] " + "for class [" + owner.getClass().getCanonicalName() + "].")[ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_15 $$ if (owner instanceof List) [ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_17 $$ final int index = Integer.parseInt(name)[ FD ]
Line_7 $$ MethodHandle handle-->Line_32 $$ return handle.invoke(owner)[ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_10 $$ final Method method = getMethod(owner, get, definition)[ FD ]
Line_12 $$ handle = method.handle-->Line_28 $$ if (handle == null) [ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_32 $$ return handle.invoke(owner)[ FD ]
Line_2 $$ public static Object fieldLoad(final Object owner, final String name, final Definition definition) -->Line_3 $$ if (owner.getClass().isArray() && "length".equals(name)) [ FD ]
