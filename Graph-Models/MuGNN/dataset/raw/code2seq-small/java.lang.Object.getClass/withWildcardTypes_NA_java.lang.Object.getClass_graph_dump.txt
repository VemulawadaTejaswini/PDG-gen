Line_4 $$ ParameterizedType openNumbersType = (ParameterizedType) getClass().getField("openNumbers").getGenericType()-->Line_10 $$ Type openNumbersWildcard = openNumbersType.getActualTypeArguments()[0][ FD ]
Line_6 $$ Type objectType = getClass().getField("object").getGenericType()-->Line_11 $$ assertTrue(TypeUtils.isAssignable(openWildcard, objectType))[ FD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_3 $$ ParameterizedType openObjectsType = (ParameterizedType) getClass().getField("openObjects").getGenericType()[ CD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_13 $$ assertFalse(TypeUtils.isAssignable(openNumbersWildcard, stringType))[ CD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_10 $$ Type openNumbersWildcard = openNumbersType.getActualTypeArguments()[0][ CD ]
Line_9 $$ Type openWildcard = openObjectsType.getActualTypeArguments()[0]-->Line_11 $$ assertTrue(TypeUtils.isAssignable(openWildcard, objectType))[ FD ]
Line_5 $$ Type storableObjectListType = getClass().getField("storableObjectList").getGenericType()-->Line_14 $$ assertFalse(TypeUtils.isAssignable(storableObjectListType, openObjectsType))[ FD ]
Line_10 $$ Type openNumbersWildcard = openNumbersType.getActualTypeArguments()[0]-->Line_12 $$ assertTrue(TypeUtils.isAssignable(openNumbersWildcard, numberType))[ FD ]
Line_7 $$ Type numberType = getClass().getField("number").getGenericType()-->Line_12 $$ assertTrue(TypeUtils.isAssignable(openNumbersWildcard, numberType))[ FD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_14 $$ assertFalse(TypeUtils.isAssignable(storableObjectListType, openObjectsType))[ CD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_4 $$ ParameterizedType openNumbersType = (ParameterizedType) getClass().getField("openNumbers").getGenericType()[ CD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_6 $$ Type objectType = getClass().getField("object").getGenericType()[ CD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_8 $$ Type stringType = getClass().getField("string").getGenericType()[ CD ]
Line_10 $$ Type openNumbersWildcard = openNumbersType.getActualTypeArguments()[0]-->Line_13 $$ assertFalse(TypeUtils.isAssignable(openNumbersWildcard, stringType))[ FD ]
Line_3 $$ ParameterizedType openObjectsType = (ParameterizedType) getClass().getField("openObjects").getGenericType()-->Line_9 $$ Type openWildcard = openObjectsType.getActualTypeArguments()[0][ FD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_11 $$ assertTrue(TypeUtils.isAssignable(openWildcard, objectType))[ CD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_7 $$ Type numberType = getClass().getField("number").getGenericType()[ CD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_5 $$ Type storableObjectListType = getClass().getField("storableObjectList").getGenericType()[ CD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_9 $$ Type openWildcard = openObjectsType.getActualTypeArguments()[0][ CD ]
Line_8 $$ Type stringType = getClass().getField("string").getGenericType()-->Line_13 $$ assertFalse(TypeUtils.isAssignable(openNumbersWildcard, stringType))[ FD ]
Line_3 $$ ParameterizedType openObjectsType = (ParameterizedType) getClass().getField("openObjects").getGenericType()-->Line_14 $$ assertFalse(TypeUtils.isAssignable(storableObjectListType, openObjectsType))[ FD ]
Line_2 $$ public void withWildcardTypes() throws Exception -->Line_12 $$ assertTrue(TypeUtils.isAssignable(openNumbersWildcard, numberType))[ CD ]
