Line_51 $$ s = openSession()-->Line_55 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_31 $$ assertTrue(String.class.isAssignableFrom(key.getClass()))[ CD ]
Line_36 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_26 $$ s = openSession()-->Line_46 $$ Long count = (Long) s.createQuery("select count(*) from Human h join h.family f where key(f) = 'son'").uniqueResult()[ FD ]
Line_36 $$ s = openSession()-->Line_55 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_55 $$ s.getTransaction().commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_27 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_6 $$ me.setName(new Name("Steve", null, "Ebersole"))[ CD ]
Line_16 $$ s = openSession()-->Line_51 $$ s = openSession()[ FD ]
Line_36 $$ s = openSession()-->Line_56 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_52 $$ s.beginTransaction()[ FD ]
Line_26 $$ s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_26 $$ s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_21 $$ assertTrue(String.class.isAssignableFrom(key.getClass()))[ CD ]
Line_26 $$ s = openSession()-->Line_33 $$ s.close()[ FD ]
Line_16 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_55 $$ s.getTransaction().commit()[ CD ]
Line_44 $$ s = openSession()-->Line_56 $$ s.close()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_18 $$ List results = s.createQuery("select distinct key(h.family) from Human h").list()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_28 $$ List results = s.createQuery("select distinct KEY(f) from Human h join h.family f").list()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_53 $$ s.delete(me)[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_22 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_32 $$ s.getTransaction().commit()[ CD ]
Line_26 $$ s = openSession()-->Line_38 $$ Long count = (Long) s.createQuery("select count(*) from Human h where KEY(h.family) = 'son'").uniqueResult()[ FD ]
Line_26 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_5 $$ Human me = new Human()-->Line_11 $$ s.save(me)[ FD ]
Line_51 $$ s = openSession()-->Line_52 $$ s.beginTransaction()[ FD ]
Line_16 $$ s = openSession()-->Line_22 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_10 $$ me.getFamily().put("son", joe)[ CD ]
Line_3 $$ Session s = openSession()-->Line_54 $$ s.delete(joe)[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_36 $$ s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_44 $$ s = openSession()-->Line_51 $$ s = openSession()[ FD ]
Line_5 $$ Human me = new Human()-->Line_9 $$ me.setFamily(new HashMap())[ FD ]
Line_16 $$ s = openSession()-->Line_18 $$ List results = s.createQuery("select distinct key(h.family) from Human h").list()[ FD ]
Line_38 $$ Long count = (Long) s.createQuery("select count(*) from Human h where KEY(h.family) = 'son'").uniqueResult()-->Line_39 $$ assertEquals((Long) 1L, count)[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ List results = s.createQuery("select distinct KEY(f) from Human h join h.family f").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ Long count = (Long) s.createQuery("select count(*) from Human h join h.family f where key(f) = 'son'").uniqueResult()[ FD ]
Line_26 $$ s = openSession()-->Line_36 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_16 $$ s = openSession()-->Line_52 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_20 $$ Object key = results.get(0)[ CD ]
Line_3 $$ Session s = openSession()-->Line_40 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_41 $$ s.close()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_45 $$ s.beginTransaction()[ CD ]
Line_16 $$ s = openSession()-->Line_53 $$ s.delete(me)[ FD ]
Line_26 $$ s = openSession()-->Line_28 $$ List results = s.createQuery("select distinct KEY(f) from Human h join h.family f").list()[ FD ]
Line_26 $$ s = openSession()-->Line_32 $$ s.getTransaction().commit()[ FD ]
Line_36 $$ s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_44 $$ s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_16 $$ s = openSession()-->Line_27 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_7 $$ Human joe = new Human()[ CD ]
Line_18 $$ List results = s.createQuery("select distinct key(h.family) from Human h").list()-->Line_29 $$ assertEquals(1, results.size())[ FD ]
Line_16 $$ s = openSession()-->Line_38 $$ Long count = (Long) s.createQuery("select count(*) from Human h where KEY(h.family) = 'son'").uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_30 $$ Object key = results.get(0)[ CD ]
Line_36 $$ s = openSession()-->Line_46 $$ Long count = (Long) s.createQuery("select count(*) from Human h join h.family f where key(f) = 'son'").uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_11 $$ s.save(me)[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_9 $$ me.setFamily(new HashMap())[ CD ]
Line_7 $$ Human joe = new Human()-->Line_10 $$ me.getFamily().put("son", joe)[ FD ]
Line_18 $$ List results = s.createQuery("select distinct key(h.family) from Human h").list()-->Line_20 $$ Object key = results.get(0)[ FD ]
Line_36 $$ s = openSession()-->Line_54 $$ s.delete(joe)[ FD ]
Line_16 $$ s = openSession()-->Line_17 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_47 $$ assertEquals((Long) 1L, count)[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_39 $$ assertEquals((Long) 1L, count)[ CD ]
Line_7 $$ Human joe = new Human()-->Line_12 $$ s.save(joe)[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_17 $$ s.beginTransaction()[ CD ]
Line_26 $$ s = openSession()-->Line_52 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_33 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ s.close()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_37 $$ s.beginTransaction()[ CD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_4 $$ s.beginTransaction()[ CD ]
Line_36 $$ s = openSession()-->Line_40 $$ s.getTransaction().commit()[ FD ]
Line_26 $$ s = openSession()-->Line_55 $$ s.getTransaction().commit()[ FD ]
Line_26 $$ s = openSession()-->Line_27 $$ s.beginTransaction()[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ s.beginTransaction()[ FD ]
Line_36 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_16 $$ s = openSession()-->Line_46 $$ Long count = (Long) s.createQuery("select count(*) from Human h join h.family f where key(f) = 'son'").uniqueResult()[ FD ]
Line_16 $$ s = openSession()-->Line_54 $$ s.delete(joe)[ FD ]
Line_36 $$ s = openSession()-->Line_53 $$ s.delete(me)[ FD ]
Line_5 $$ Human me = new Human()-->Line_10 $$ me.getFamily().put("son", joe)[ FD ]
Line_26 $$ s = openSession()-->Line_56 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ List results = s.createQuery("select distinct key(h.family) from Human h").list()[ FD ]
Line_16 $$ s = openSession()-->Line_55 $$ s.getTransaction().commit()[ FD ]
Line_18 $$ List results = s.createQuery("select distinct key(h.family) from Human h").list()-->Line_19 $$ assertEquals(1, results.size())[ FD ]
Line_16 $$ s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_53 $$ s.delete(me)[ FD ]
Line_20 $$ Object key = results.get(0)-->Line_31 $$ assertTrue(String.class.isAssignableFrom(key.getClass()))[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_14 $$ s.close()[ CD ]
Line_16 $$ s = openSession()-->Line_48 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_27 $$ s.beginTransaction()[ CD ]
Line_7 $$ Human joe = new Human()-->Line_54 $$ s.delete(joe)[ FD ]
Line_3 $$ Session s = openSession()-->Line_22 $$ s.getTransaction().commit()[ FD ]
Line_51 $$ s = openSession()-->Line_56 $$ s.close()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_40 $$ s.getTransaction().commit()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_52 $$ s.beginTransaction()[ CD ]
Line_44 $$ s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_38 $$ Long count = (Long) s.createQuery("select count(*) from Human h where KEY(h.family) = 'son'").uniqueResult()-->Line_47 $$ assertEquals((Long) 1L, count)[ FD ]
Line_20 $$ Object key = results.get(0)-->Line_21 $$ assertTrue(String.class.isAssignableFrom(key.getClass()))[ FD ]
Line_26 $$ s = openSession()-->Line_37 $$ s.beginTransaction()[ FD ]
Line_5 $$ Human me = new Human()-->Line_6 $$ me.setName(new Name("Steve", null, "Ebersole"))[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_5 $$ Human me = new Human()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_44 $$ s = openSession()[ CD ]
Line_44 $$ s = openSession()-->Line_49 $$ s.close()[ FD ]
Line_16 $$ s = openSession()-->Line_36 $$ s = openSession()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_13 $$ s.getTransaction().commit()[ CD ]
Line_36 $$ s = openSession()-->Line_52 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_36 $$ s = openSession()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_54 $$ s.delete(joe)[ CD ]
Line_16 $$ s = openSession()-->Line_56 $$ s.close()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_38 $$ Long count = (Long) s.createQuery("select count(*) from Human h where KEY(h.family) = 'son'").uniqueResult()[ CD ]
Line_26 $$ s = openSession()-->Line_51 $$ s = openSession()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_26 $$ s = openSession()[ CD ]
Line_16 $$ s = openSession()-->Line_40 $$ s.getTransaction().commit()[ FD ]
Line_16 $$ s = openSession()-->Line_26 $$ s = openSession()[ FD ]
Line_44 $$ s = openSession()-->Line_54 $$ s.delete(joe)[ FD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ Long count = (Long) s.createQuery("select count(*) from Human h where KEY(h.family) = 'son'").uniqueResult()[ FD ]
Line_51 $$ s = openSession()-->Line_54 $$ s.delete(joe)[ FD ]
Line_3 $$ Session s = openSession()-->Line_56 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_46 $$ Long count = (Long) s.createQuery("select count(*) from Human h join h.family f where key(f) = 'son'").uniqueResult()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_19 $$ assertEquals(1, results.size())[ CD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ s.beginTransaction()[ FD ]
Line_16 $$ s = openSession()-->Line_23 $$ s.close()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_48 $$ s.getTransaction().commit()[ CD ]
Line_3 $$ Session s = openSession()-->Line_16 $$ s = openSession()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_29 $$ assertEquals(1, results.size())[ CD ]
Line_3 $$ Session s = openSession()-->Line_36 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s = openSession()[ FD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.getTransaction().commit()[ FD ]
Line_36 $$ s = openSession()-->Line_38 $$ Long count = (Long) s.createQuery("select count(*) from Human h where KEY(h.family) = 'son'").uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.beginTransaction()[ FD ]
Line_16 $$ s = openSession()-->Line_28 $$ List results = s.createQuery("select distinct KEY(f) from Human h join h.family f").list()[ FD ]
Line_5 $$ Human me = new Human()-->Line_8 $$ me.setName(new Name("Joe", null, "Ebersole"))[ FD ]
Line_16 $$ s = openSession()-->Line_37 $$ s.beginTransaction()[ FD ]
Line_18 $$ List results = s.createQuery("select distinct key(h.family) from Human h").list()-->Line_30 $$ Object key = results.get(0)[ FD ]
Line_16 $$ s = openSession()-->Line_32 $$ s.getTransaction().commit()[ FD ]
Line_26 $$ s = openSession()-->Line_53 $$ s.delete(me)[ FD ]
Line_3 $$ Session s = openSession()-->Line_12 $$ s.save(joe)[ FD ]
Line_26 $$ s = openSession()-->Line_54 $$ s.delete(joe)[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ s.close()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_23 $$ s.close()[ CD ]
Line_26 $$ s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_53 $$ s.delete(me)[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_12 $$ s.save(joe)[ CD ]
Line_26 $$ s = openSession()-->Line_40 $$ s.getTransaction().commit()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_56 $$ s.close()[ CD ]
Line_16 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_51 $$ s = openSession()-->Line_53 $$ s.delete(me)[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_33 $$ s.close()[ CD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_44 $$ s = openSession()-->Line_55 $$ s.getTransaction().commit()[ FD ]
Line_36 $$ s = openSession()-->Line_51 $$ s = openSession()[ FD ]
Line_26 $$ s = openSession()-->Line_44 $$ s = openSession()[ FD ]
Line_36 $$ s = openSession()-->Line_37 $$ s.beginTransaction()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_3 $$ Session s = openSession()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_11 $$ s.save(me)[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_8 $$ me.setName(new Name("Joe", null, "Ebersole"))[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_49 $$ s.close()[ CD ]
Line_5 $$ Human me = new Human()-->Line_53 $$ s.delete(me)[ FD ]
Line_16 $$ s = openSession()-->Line_45 $$ s.beginTransaction()[ FD ]
Line_36 $$ s = openSession()-->Line_41 $$ s.close()[ FD ]
Line_3 $$ Session s = openSession()-->Line_51 $$ s = openSession()[ FD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_51 $$ s = openSession()[ CD ]
Line_2 $$ public void testJPAQLMapKeyQualifier() -->Line_16 $$ s = openSession()[ CD ]
Line_16 $$ s = openSession()-->Line_33 $$ s.close()[ FD ]
