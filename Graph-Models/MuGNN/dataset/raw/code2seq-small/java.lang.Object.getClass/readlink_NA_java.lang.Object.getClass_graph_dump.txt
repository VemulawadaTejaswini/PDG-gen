Line_28 $$ if (postOpAttr == null) -->Line_30 $$ return new READLINK3Response(Nfs3Status.NFS3ERR_STALE)[ CD ]
Line_3 $$ READLINK3Response response = new READLINK3Response(Nfs3Status.NFS3_OK)-->Line_10 $$ response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT)[ FD ]
Line_36 $$ if (target == null) -->Line_37 $$ LOG.error("Symlink target should not be null, fileId:" + handle.getFileId())[ CD ]
Line_27 $$ Nfs3FileAttributes postOpAttr = Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug)-->Line_32 $$ if (postOpAttr.getType() != NfsFileType.NFSLNK.toValue()) [ FD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_4 $$ if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) [ CD ]
Line_26 $$ String target = dfsClient.getLinkTarget(fileIdPath)-->Line_36 $$ if (target == null) [ FD ]
Line_20 $$ FileHandle handle = request.getHandle()-->Line_33 $$ LOG.error("Not a symlink, fileId:" + handle.getFileId())[ FD ]
Line_4 $$ if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) -->Line_6 $$ return response[ CD ]
Line_20 $$ FileHandle handle = request.getHandle()-->Line_29 $$ LOG.info("Can't get path for fileId:" + handle.getFileId())[ FD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_4 $$ if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) [ FD ]
Line_27 $$ Nfs3FileAttributes postOpAttr = Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug)-->Line_28 $$ if (postOpAttr == null) [ FD ]
Line_21 $$ if (LOG.isDebugEnabled()) -->Line_22 $$ LOG.debug("NFS READLINK fileId: " + handle.getFileId())[ CD ]
Line_26 $$ String target = dfsClient.getLinkTarget(fileIdPath)-->Line_41 $$ if (rtmax < target.getBytes().length) [ FD ]
Line_8 $$ DFSClient dfsClient = clientCache.getDfsClient(securityHandler.getUser())-->Line_26 $$ String target = dfsClient.getLinkTarget(fileIdPath)[ FD ]
Line_32 $$ if (postOpAttr.getType() != NfsFileType.NFSLNK.toValue()) -->Line_33 $$ LOG.error("Not a symlink, fileId:" + handle.getFileId())[ CD ]
Line_4 $$ if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_ONLY)) -->Line_5 $$ response.setStatus(Nfs3Status.NFS3ERR_ACCES)[ CD ]
Line_13 $$ READLINK3Request request = null-->Line_20 $$ FileHandle handle = request.getHandle()[ FD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_8 $$ DFSClient dfsClient = clientCache.getDfsClient(securityHandler.getUser())[ CD ]
Line_20 $$ FileHandle handle = request.getHandle()-->Line_22 $$ LOG.debug("NFS READLINK fileId: " + handle.getFileId())[ FD ]
Line_3 $$ READLINK3Response response = new READLINK3Response(Nfs3Status.NFS3_OK)-->Line_5 $$ response.setStatus(Nfs3Status.NFS3ERR_ACCES)[ FD ]
Line_9 $$ if (dfsClient == null) -->Line_11 $$ return response[ CD ]
Line_13 $$ READLINK3Request request = null-->Line_15 $$ request = new READLINK3Request(xdr)[ FD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_20 $$ FileHandle handle = request.getHandle()[ CD ]
Line_36 $$ if (target == null) -->Line_38 $$ return new READLINK3Response(Nfs3Status.NFS3ERR_SERVERFAULT)[ CD ]
Line_15 $$ request = new READLINK3Request(xdr)-->Line_20 $$ FileHandle handle = request.getHandle()[ FD ]
Line_20 $$ FileHandle handle = request.getHandle()-->Line_37 $$ LOG.error("Symlink target should not be null, fileId:" + handle.getFileId())[ FD ]
Line_41 $$ if (rtmax < target.getBytes().length) -->Line_42 $$ LOG.error("Link size: " + target.getBytes().length + " is larger than max transfer size: " + rtmax)[ CD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_21 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_9 $$ if (dfsClient == null) [ CD ]
Line_24 $$ String fileIdPath = Nfs3Utils.getFileIdPath(handle)-->Line_27 $$ Nfs3FileAttributes postOpAttr = Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug)[ FD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_13 $$ READLINK3Request request = null[ CD ]
Line_28 $$ if (postOpAttr == null) -->Line_29 $$ LOG.info("Can't get path for fileId:" + handle.getFileId())[ CD ]
Line_24 $$ String fileIdPath = Nfs3Utils.getFileIdPath(handle)-->Line_26 $$ String target = dfsClient.getLinkTarget(fileIdPath)[ FD ]
Line_26 $$ String target = dfsClient.getLinkTarget(fileIdPath)-->Line_42 $$ LOG.error("Link size: " + target.getBytes().length + " is larger than max transfer size: " + rtmax)[ FD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_24 $$ String fileIdPath = Nfs3Utils.getFileIdPath(handle)[ CD ]
Line_8 $$ DFSClient dfsClient = clientCache.getDfsClient(securityHandler.getUser())-->Line_27 $$ Nfs3FileAttributes postOpAttr = Nfs3Utils.getFileAttr(dfsClient, fileIdPath, iug)[ FD ]
Line_20 $$ FileHandle handle = request.getHandle()-->Line_24 $$ String fileIdPath = Nfs3Utils.getFileIdPath(handle)[ FD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_3 $$ READLINK3Response response = new READLINK3Response(Nfs3Status.NFS3_OK)[ CD ]
Line_9 $$ if (dfsClient == null) -->Line_10 $$ response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT)[ CD ]
Line_32 $$ if (postOpAttr.getType() != NfsFileType.NFSLNK.toValue()) -->Line_34 $$ return new READLINK3Response(Nfs3Status.NFS3ERR_INVAL)[ CD ]
Line_8 $$ DFSClient dfsClient = clientCache.getDfsClient(securityHandler.getUser())-->Line_9 $$ if (dfsClient == null) [ FD ]
Line_40 $$ int rtmax = config.getInt(NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_KEY, NfsConfigKeys.DFS_NFS_MAX_READ_TRANSFER_SIZE_DEFAULT)-->Line_41 $$ if (rtmax < target.getBytes().length) [ FD ]
Line_41 $$ if (rtmax < target.getBytes().length) -->Line_43 $$ return new READLINK3Response(Nfs3Status.NFS3ERR_IO, postOpAttr, new byte[0])[ CD ]
Line_26 $$ String target = dfsClient.getLinkTarget(fileIdPath)-->Line_45 $$ return new READLINK3Response(Nfs3Status.NFS3_OK, postOpAttr, target.getBytes())[ FD ]
Line_2 $$ READLINK3Response readlink(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) -->Line_8 $$ DFSClient dfsClient = clientCache.getDfsClient(securityHandler.getUser())[ FD ]
