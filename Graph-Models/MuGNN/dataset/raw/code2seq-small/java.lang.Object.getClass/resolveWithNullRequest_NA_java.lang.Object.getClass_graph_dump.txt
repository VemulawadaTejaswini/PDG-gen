Line_2 $$ public void resolveWithNullRequest() throws IOException -->Line_5 $$ Resource gzResource = new ClassPathResource("test/" + gzFile, getClass())[ CD ]
Line_2 $$ public void resolveWithNullRequest() throws IOException -->Line_4 $$ String gzFile = file + ".gz"[ CD ]
Line_5 $$ Resource gzResource = new ClassPathResource("test/" + gzFile, getClass())-->Line_7 $$ assertEquals(gzResource.getDescription(), resolved.getDescription())[ FD ]
Line_2 $$ public void resolveWithNullRequest() throws IOException -->Line_9 $$ assertTrue("Expected " + resolved + " to be of type " + EncodedResource.class, resolved instanceof EncodedResource)[ CD ]
Line_6 $$ Resource resolved = resolver.resolveResource(null, file, locations)-->Line_7 $$ assertEquals(gzResource.getDescription(), resolved.getDescription())[ FD ]
Line_3 $$ String file = "js/foo.js"-->Line_6 $$ Resource resolved = resolver.resolveResource(null, file, locations)[ FD ]
Line_2 $$ public void resolveWithNullRequest() throws IOException -->Line_3 $$ String file = "js/foo.js"[ CD ]
Line_2 $$ public void resolveWithNullRequest() throws IOException -->Line_8 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ CD ]
Line_6 $$ Resource resolved = resolver.resolveResource(null, file, locations)-->Line_8 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ FD ]
Line_2 $$ public void resolveWithNullRequest() throws IOException -->Line_7 $$ assertEquals(gzResource.getDescription(), resolved.getDescription())[ CD ]
Line_2 $$ public void resolveWithNullRequest() throws IOException -->Line_6 $$ Resource resolved = resolver.resolveResource(null, file, locations)[ CD ]
