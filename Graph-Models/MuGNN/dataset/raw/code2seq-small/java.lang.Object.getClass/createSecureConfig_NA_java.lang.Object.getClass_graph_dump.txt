Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_8 $$ conf.set(DFS_DATANODE_KEYTAB_FILE_KEY, keytab)[ CD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()[ CD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_4 $$ SecurityUtil.setAuthenticationMethod(AuthenticationMethod.KERBEROS, conf)[ CD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_11 $$ conf.set(DFS_DATA_TRANSFER_PROTECTION_KEY, dataTransferProtection)[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_6 $$ conf.set(DFS_NAMENODE_KEYTAB_FILE_KEY, keytab)[ CD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_15 $$ conf.setInt(IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY, 10)[ FD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_12 $$ conf.set(DFS_HTTP_POLICY_KEY, HttpConfig.Policy.HTTPS_ONLY.name())[ FD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_7 $$ conf.set(DFS_DATANODE_KERBEROS_PRINCIPAL_KEY, hdfsPrincipal)[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_5 $$ conf.set(DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, hdfsPrincipal)[ CD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_18 $$ KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfDir, conf, false)[ CD ]
Line_16 $$ String keystoresDir = baseDir.getAbsolutePath()-->Line_18 $$ KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfDir, conf, false)[ FD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_9 $$ conf.set(DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY, spnegoPrincipal)[ FD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_6 $$ conf.set(DFS_NAMENODE_KEYTAB_FILE_KEY, keytab)[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_19 $$ return conf[ CD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_14 $$ conf.set(DFS_DATANODE_HTTPS_ADDRESS_KEY, "localhost:0")[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_11 $$ conf.set(DFS_DATA_TRANSFER_PROTECTION_KEY, dataTransferProtection)[ CD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_16 $$ String keystoresDir = baseDir.getAbsolutePath()[ CD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_5 $$ conf.set(DFS_NAMENODE_KERBEROS_PRINCIPAL_KEY, hdfsPrincipal)[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_9 $$ conf.set(DFS_WEB_AUTHENTICATION_KERBEROS_PRINCIPAL_KEY, spnegoPrincipal)[ CD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_8 $$ conf.set(DFS_DATANODE_KEYTAB_FILE_KEY, keytab)[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_13 $$ conf.set(DFS_NAMENODE_HTTPS_ADDRESS_KEY, "localhost:0")[ CD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_11 $$ conf.set(DFS_DATA_TRANSFER_PROTECTION_KEY, dataTransferProtection)[ FD ]
Line_17 $$ String sslConfDir = KeyStoreTestUtil.getClasspathDir(this.getClass())-->Line_18 $$ KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfDir, conf, false)[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_10 $$ conf.setBoolean(DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, true)[ CD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_7 $$ conf.set(DFS_DATANODE_KERBEROS_PRINCIPAL_KEY, hdfsPrincipal)[ CD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_14 $$ conf.set(DFS_DATANODE_HTTPS_ADDRESS_KEY, "localhost:0")[ CD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_17 $$ String sslConfDir = KeyStoreTestUtil.getClasspathDir(this.getClass())[ CD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_13 $$ conf.set(DFS_NAMENODE_HTTPS_ADDRESS_KEY, "localhost:0")[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_12 $$ conf.set(DFS_HTTP_POLICY_KEY, HttpConfig.Policy.HTTPS_ONLY.name())[ CD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_18 $$ KeyStoreTestUtil.setupSSLConfig(keystoresDir, sslConfDir, conf, false)[ FD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_4 $$ SecurityUtil.setAuthenticationMethod(AuthenticationMethod.KERBEROS, conf)[ FD ]
Line_3 $$ HdfsConfiguration conf = new HdfsConfiguration()-->Line_10 $$ conf.setBoolean(DFS_BLOCK_ACCESS_TOKEN_ENABLE_KEY, true)[ FD ]
Line_2 $$ protected HdfsConfiguration createSecureConfig(String dataTransferProtection) throws Exception -->Line_15 $$ conf.setInt(IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SASL_KEY, 10)[ CD ]
