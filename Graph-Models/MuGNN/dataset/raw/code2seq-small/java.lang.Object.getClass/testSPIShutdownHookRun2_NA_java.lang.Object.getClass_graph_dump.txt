Line_19 $$ logRecord = logRecords.get(1)-->Line_22 $$ Assert.assertEquals("Proceed with SPI shutdown", logRecord.getMessage())[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_17 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_11 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(RemoteSPI.class.getName(), Level.ALL)) -->Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_6 $$ _mockRemoteSPI.setFailOnStop(false)[ CD ]
Line_19 $$ logRecord = logRecords.get(1)-->Line_21 $$ logRecord = logRecords.get(2)[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_21 $$ logRecord = logRecords.get(2)[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_19 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_24 $$ unexported()[ CD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_22 $$ Assert.assertEquals("Proceed with SPI shutdown", logRecord.getMessage())[ FD ]
Line_17 $$ Throwable throwable = logRecord.getThrown()-->Line_18 $$ Assert.assertSame(NullPointerException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_9 $$ MPIHelperUtil.registerSPI(_mockRemoteSPI)[ CD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_21 $$ logRecord = logRecords.get(2)[ FD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_7 $$ _mockRemoteSPI.setSpiProviderName(spiProviderName)[ CD ]
Line_4 $$ MockSPIProvider mockSPIProvider = new MockSPIProvider(spiProviderName)-->Line_5 $$ MPIHelperUtil.registerSPIProvider(mockSPIProvider)[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_3 $$ String spiProviderName = "spiProviderName"-->Line_7 $$ _mockRemoteSPI.setSpiProviderName(spiProviderName)[ FD ]
Line_19 $$ logRecord = logRecords.get(1)-->Line_20 $$ Assert.assertEquals("Wait up to " + _spiConfiguration.getShutdownTimeout() + " ms for MPI shutdown request", logRecord.getMessage())[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ Assert.assertEquals(3, logRecords.size())[ FD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_20 $$ Assert.assertEquals("Wait up to " + _spiConfiguration.getShutdownTimeout() + " ms for MPI shutdown request", logRecord.getMessage())[ FD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_3 $$ String spiProviderName = "spiProviderName"[ CD ]
Line_21 $$ logRecord = logRecords.get(2)-->Line_22 $$ Assert.assertEquals("Proceed with SPI shutdown", logRecord.getMessage())[ FD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_8 $$ UnicastRemoteObject.exportObject(_mockRemoteSPI, 0)[ CD ]
Line_10 $$ SPIShutdownHook spiShutdownHook = _mockRemoteSPI.new SPIShutdownHook()-->Line_12 $$ spiShutdownHook.run()[ FD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_5 $$ MPIHelperUtil.registerSPIProvider(mockSPIProvider)[ CD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_10 $$ SPIShutdownHook spiShutdownHook = _mockRemoteSPI.new SPIShutdownHook()[ CD ]
Line_15 $$ LogRecord logRecord = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("Unable to unregister SPI from MPI", logRecord.getMessage())[ FD ]
Line_13 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_19 $$ logRecord = logRecords.get(1)[ FD ]
Line_2 $$ public void testSPIShutdownHookRun2() throws RemoteException -->Line_4 $$ MockSPIProvider mockSPIProvider = new MockSPIProvider(spiProviderName)[ CD ]
