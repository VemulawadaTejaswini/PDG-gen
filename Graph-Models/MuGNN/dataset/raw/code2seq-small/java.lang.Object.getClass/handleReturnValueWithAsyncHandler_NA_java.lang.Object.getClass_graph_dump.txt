Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_12 $$ this.handlers.handleReturnValue(promise, promiseType, this.mavContainer, null)[ CD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_17 $$ verifyNoMoreInteractions(responseBodyHandler)[ CD ]
Line_3 $$ Promise<Integer> promise = new Promise()-->Line_15 $$ verify(promiseHandler).handleReturnValue(promise, promiseType, this.mavContainer, null)[ FD ]
Line_8 $$ AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class)-->Line_16 $$ verifyNoMoreInteractions(promiseHandler)[ FD ]
Line_4 $$ MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1)-->Line_15 $$ verify(promiseHandler).handleReturnValue(promise, promiseType, this.mavContainer, null)[ FD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_9 $$ when(promiseHandler.supportsReturnType(promiseType)).thenReturn(true)[ CD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_3 $$ Promise<Integer> promise = new Promise()[ CD ]
Line_3 $$ Promise<Integer> promise = new Promise()-->Line_10 $$ when(promiseHandler.isAsyncReturnValue(promise, promiseType)).thenReturn(true)[ FD ]
Line_5 $$ HandlerMethodReturnValueHandler responseBodyHandler = mock(HandlerMethodReturnValueHandler.class)-->Line_7 $$ this.handlers.addHandler(responseBodyHandler)[ FD ]
Line_5 $$ HandlerMethodReturnValueHandler responseBodyHandler = mock(HandlerMethodReturnValueHandler.class)-->Line_6 $$ when(responseBodyHandler.supportsReturnType(promiseType)).thenReturn(true)[ FD ]
Line_4 $$ MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1)-->Line_6 $$ when(responseBodyHandler.supportsReturnType(promiseType)).thenReturn(true)[ FD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_6 $$ when(responseBodyHandler.supportsReturnType(promiseType)).thenReturn(true)[ CD ]
Line_8 $$ AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class)-->Line_11 $$ this.handlers.addHandler(promiseHandler)[ FD ]
Line_8 $$ AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class)-->Line_13 $$ verify(promiseHandler).isAsyncReturnValue(promise, promiseType)[ FD ]
Line_4 $$ MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1)-->Line_10 $$ when(promiseHandler.isAsyncReturnValue(promise, promiseType)).thenReturn(true)[ FD ]
Line_4 $$ MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1)-->Line_12 $$ this.handlers.handleReturnValue(promise, promiseType, this.mavContainer, null)[ FD ]
Line_8 $$ AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class)-->Line_10 $$ when(promiseHandler.isAsyncReturnValue(promise, promiseType)).thenReturn(true)[ FD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_8 $$ AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class)[ CD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_16 $$ verifyNoMoreInteractions(promiseHandler)[ CD ]
Line_4 $$ MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1)-->Line_9 $$ when(promiseHandler.supportsReturnType(promiseType)).thenReturn(true)[ FD ]
Line_8 $$ AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class)-->Line_14 $$ verify(promiseHandler).supportsReturnType(promiseType)[ FD ]
Line_8 $$ AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class)-->Line_15 $$ verify(promiseHandler).handleReturnValue(promise, promiseType, this.mavContainer, null)[ FD ]
Line_8 $$ AsyncHandlerMethodReturnValueHandler promiseHandler = mock(AsyncHandlerMethodReturnValueHandler.class)-->Line_9 $$ when(promiseHandler.supportsReturnType(promiseType)).thenReturn(true)[ FD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_4 $$ MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1)[ CD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_11 $$ this.handlers.addHandler(promiseHandler)[ CD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_15 $$ verify(promiseHandler).handleReturnValue(promise, promiseType, this.mavContainer, null)[ CD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_5 $$ HandlerMethodReturnValueHandler responseBodyHandler = mock(HandlerMethodReturnValueHandler.class)[ CD ]
Line_4 $$ MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1)-->Line_13 $$ verify(promiseHandler).isAsyncReturnValue(promise, promiseType)[ FD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_13 $$ verify(promiseHandler).isAsyncReturnValue(promise, promiseType)[ CD ]
Line_3 $$ Promise<Integer> promise = new Promise()-->Line_13 $$ verify(promiseHandler).isAsyncReturnValue(promise, promiseType)[ FD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_7 $$ this.handlers.addHandler(responseBodyHandler)[ CD ]
Line_4 $$ MethodParameter promiseType = new MethodParameter(getClass().getDeclaredMethod("handlePromise"), -1)-->Line_14 $$ verify(promiseHandler).supportsReturnType(promiseType)[ FD ]
Line_3 $$ Promise<Integer> promise = new Promise()-->Line_12 $$ this.handlers.handleReturnValue(promise, promiseType, this.mavContainer, null)[ FD ]
Line_5 $$ HandlerMethodReturnValueHandler responseBodyHandler = mock(HandlerMethodReturnValueHandler.class)-->Line_17 $$ verifyNoMoreInteractions(responseBodyHandler)[ FD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_14 $$ verify(promiseHandler).supportsReturnType(promiseType)[ CD ]
Line_2 $$ public void handleReturnValueWithAsyncHandler() throws Exception -->Line_10 $$ when(promiseHandler.isAsyncReturnValue(promise, promiseType)).thenReturn(true)[ CD ]
