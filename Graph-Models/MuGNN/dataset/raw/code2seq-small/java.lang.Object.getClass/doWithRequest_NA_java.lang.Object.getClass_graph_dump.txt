Line_35 $$ if (requestContentType != null) -->Line_36 $$ message += " and content type [" + requestContentType + "]"[ CD ]
Line_17 $$ MediaType requestContentType = requestHeaders.getContentType()-->Line_19 $$ if (messageConverter.canWrite(requestType, requestContentType)) [ FD ]
Line_15 $$ Class<?> requestType = requestBody.getClass()-->Line_34 $$ String message = "Could not write request: no suitable HttpMessageConverter found for request type [" + requestType.getName() + "]"[ FD ]
Line_2 $$ public void doWithRequest(ClientHttpRequest httpRequest) throws IOException -->Line_4 $$ if (!this.requestEntity.hasBody()) [ CD ]
Line_2 $$ public void doWithRequest(ClientHttpRequest httpRequest) throws IOException -->Line_3 $$ super.doWithRequest(httpRequest)[ CD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_34 $$ String message = "Could not write request: no suitable HttpMessageConverter found for request type [" + requestType.getName() + "]"[ CD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_15 $$ Class<?> requestType = requestBody.getClass()[ CD ]
Line_14 $$ Object requestBody = this.requestEntity.getBody()-->Line_15 $$ Class<?> requestType = requestBody.getClass()[ FD ]
Line_24 $$ if (requestContentType != null) -->Line_27 $$ logger.debug("Writing [" + requestBody + "] using [" + messageConverter + "]")[ CD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_6 $$ HttpHeaders requestHeaders = this.requestEntity.getHeaders()[ CD ]
Line_6 $$ HttpHeaders requestHeaders = this.requestEntity.getHeaders()-->Line_21 $$ httpRequest.getHeaders().putAll(requestHeaders)[ FD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_16 $$ HttpHeaders requestHeaders = this.requestEntity.getHeaders()[ CD ]
Line_5 $$ HttpHeaders httpHeaders = httpRequest.getHeaders()-->Line_10 $$ if (httpHeaders.getContentLength() == -1) [ FD ]
Line_14 $$ Object requestBody = this.requestEntity.getBody()-->Line_30 $$ ((HttpMessageConverter<Object>) messageConverter).write(requestBody, requestContentType, httpRequest)[ FD ]
Line_19 $$ if (messageConverter.canWrite(requestType, requestContentType)) -->Line_31 $$ return[ CD ]
Line_6 $$ HttpHeaders requestHeaders = this.requestEntity.getHeaders()-->Line_20 $$ if (!requestHeaders.isEmpty()) [ FD ]
Line_10 $$ if (httpHeaders.getContentLength() == -1) -->Line_11 $$ httpHeaders.setContentLength(0L)[ CD ]
Line_19 $$ if (messageConverter.canWrite(requestType, requestContentType)) -->Line_20 $$ if (!requestHeaders.isEmpty()) [ CD ]
Line_20 $$ if (!requestHeaders.isEmpty()) -->Line_21 $$ httpRequest.getHeaders().putAll(requestHeaders)[ CD ]
Line_19 $$ if (messageConverter.canWrite(requestType, requestContentType)) -->Line_23 $$ if (logger.isDebugEnabled()) [ CD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_35 $$ if (requestContentType != null) [ CD ]
Line_5 $$ HttpHeaders httpHeaders = httpRequest.getHeaders()-->Line_11 $$ httpHeaders.setContentLength(0L)[ FD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_7 $$ if (!requestHeaders.isEmpty()) [ CD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_17 $$ MediaType requestContentType = requestHeaders.getContentType()[ CD ]
Line_2 $$ public void doWithRequest(ClientHttpRequest httpRequest) throws IOException -->Line_21 $$ httpRequest.getHeaders().putAll(requestHeaders)[ FD ]
Line_23 $$ if (logger.isDebugEnabled()) -->Line_24 $$ if (requestContentType != null) [ CD ]
Line_7 $$ if (!requestHeaders.isEmpty()) -->Line_8 $$ httpHeaders.putAll(requestHeaders)[ CD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_14 $$ Object requestBody = this.requestEntity.getBody()[ CD ]
Line_6 $$ HttpHeaders requestHeaders = this.requestEntity.getHeaders()-->Line_7 $$ if (!requestHeaders.isEmpty()) [ FD ]
Line_17 $$ MediaType requestContentType = requestHeaders.getContentType()-->Line_35 $$ if (requestContentType != null) [ FD ]
Line_2 $$ public void doWithRequest(ClientHttpRequest httpRequest) throws IOException -->Line_3 $$ super.doWithRequest(httpRequest)[ FD ]
Line_6 $$ HttpHeaders requestHeaders = this.requestEntity.getHeaders()-->Line_8 $$ httpHeaders.putAll(requestHeaders)[ FD ]
Line_19 $$ if (messageConverter.canWrite(requestType, requestContentType)) -->Line_30 $$ ((HttpMessageConverter<Object>) messageConverter).write(requestBody, requestContentType, httpRequest)[ CD ]
Line_17 $$ MediaType requestContentType = requestHeaders.getContentType()-->Line_30 $$ ((HttpMessageConverter<Object>) messageConverter).write(requestBody, requestContentType, httpRequest)[ FD ]
Line_15 $$ Class<?> requestType = requestBody.getClass()-->Line_19 $$ if (messageConverter.canWrite(requestType, requestContentType)) [ FD ]
Line_24 $$ if (requestContentType != null) -->Line_25 $$ logger.debug("Writing [" + requestBody + "] as \"" + requestContentType + "\" using [" + messageConverter + "]")[ CD ]
Line_18 $$ for (HttpMessageConverter<?> messageConverter : getMessageConverters()) -->Line_19 $$ if (messageConverter.canWrite(requestType, requestContentType)) [ FD ]
Line_2 $$ public void doWithRequest(ClientHttpRequest httpRequest) throws IOException -->Line_5 $$ HttpHeaders httpHeaders = httpRequest.getHeaders()[ FD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_5 $$ HttpHeaders httpHeaders = httpRequest.getHeaders()[ CD ]
Line_34 $$ String message = "Could not write request: no suitable HttpMessageConverter found for request type [" + requestType.getName() + "]"-->Line_36 $$ message += " and content type [" + requestContentType + "]"[ FD ]
Line_4 $$ if (!this.requestEntity.hasBody()) -->Line_10 $$ if (httpHeaders.getContentLength() == -1) [ CD ]
Line_6 $$ HttpHeaders requestHeaders = this.requestEntity.getHeaders()-->Line_17 $$ MediaType requestContentType = requestHeaders.getContentType()[ FD ]
Line_17 $$ MediaType requestContentType = requestHeaders.getContentType()-->Line_24 $$ if (requestContentType != null) [ FD ]
Line_5 $$ HttpHeaders httpHeaders = httpRequest.getHeaders()-->Line_8 $$ httpHeaders.putAll(requestHeaders)[ FD ]
Line_2 $$ public void doWithRequest(ClientHttpRequest httpRequest) throws IOException -->Line_30 $$ ((HttpMessageConverter<Object>) messageConverter).write(requestBody, requestContentType, httpRequest)[ FD ]
