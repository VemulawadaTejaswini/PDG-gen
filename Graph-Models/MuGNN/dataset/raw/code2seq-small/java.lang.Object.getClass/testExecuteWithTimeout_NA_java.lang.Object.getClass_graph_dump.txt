Line_3 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, 0)-->Line_5 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))[ FD ]
Line_2 $$ public void testExecuteWithTimeout() throws InterruptedException -->Line_3 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, 0)[ CD ]
Line_2 $$ public void testExecuteWithTimeout() throws InterruptedException -->Line_14 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()[ CD ]
Line_3 $$ NettyFabricAgentStub nettyFabricAgentStub = new NettyFabricAgentStub(_embeddedChannel, new MockRepository<Channel>(), Paths.get("RepositoryPath"), 0, 0)-->Line_14 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()[ FD ]
Line_2 $$ public void testExecuteWithTimeout() throws InterruptedException -->Line_5 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))[ CD ]
Line_5 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))-->Line_6 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()[ FD ]
Line_11 $$ Throwable throwable = ee.getCause()-->Line_12 $$ Assert.assertSame(TimeoutException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testExecuteWithTimeout() throws InterruptedException -->Line_15 $$ Assert.assertTrue(fabricWorkers.isEmpty())[ CD ]
Line_4 $$ Builder builder = new Builder()-->Line_5 $$ FabricWorker<String> fabricWorker = nettyFabricAgentStub.execute(builder.build(), new ReturnProcessCallable<String>("Test result"))[ FD ]
Line_6 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()-->Line_8 $$ noticeableFuture.get()[ FD ]
Line_2 $$ public void testExecuteWithTimeout() throws InterruptedException -->Line_6 $$ NoticeableFuture<String> noticeableFuture = fabricWorker.getProcessNoticeableFuture()[ CD ]
Line_2 $$ public void testExecuteWithTimeout() throws InterruptedException -->Line_4 $$ Builder builder = new Builder()[ CD ]
Line_14 $$ Collection<? extends FabricWorker<?>> fabricWorkers = nettyFabricAgentStub.getFabricWorkers()-->Line_15 $$ Assert.assertTrue(fabricWorkers.isEmpty())[ FD ]
