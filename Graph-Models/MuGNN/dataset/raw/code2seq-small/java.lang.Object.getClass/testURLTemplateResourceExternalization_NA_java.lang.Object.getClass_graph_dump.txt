Line_15 $$ DataInputStream dataInputStream = new DataInputStream(new UnsyncByteArrayInputStream(externalizedData))-->Line_17 $$ Assert.assertEquals(url.toExternalForm(), dataInputStream.readUTF())[ FD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_3 $$ String templateId = "testId"[ CD ]
Line_11 $$ try (ObjectOutput objectOutput = new MockObjectOutput(unsyncByteArrayOutputStream)) -->Line_12 $$ urlTemplateResource.writeExternal(objectOutput)[ FD ]
Line_18 $$ URLTemplateResource newURLTemplateResource = new URLTemplateResource()-->Line_20 $$ newURLTemplateResource.readExternal(mockObjectInput)[ FD ]
Line_9 $$ URLTemplateResource urlTemplateResource = new URLTemplateResource(templateId, url)-->Line_12 $$ urlTemplateResource.writeExternal(objectOutput)[ FD ]
Line_19 $$ MockObjectInput mockObjectInput = new MockObjectInput(new DataInputStream(new UnsyncByteArrayInputStream(externalizedData)))-->Line_20 $$ newURLTemplateResource.readExternal(mockObjectInput)[ FD ]
Line_5 $$ ClassLoader classLoader = clazz.getClassLoader()-->Line_8 $$ URL url = classLoader.getResource(resourcePath)[ FD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_4 $$ Class<?> clazz = getClass()[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_5 $$ ClassLoader classLoader = clazz.getClassLoader()[ CD ]
Line_3 $$ String templateId = "testId"-->Line_16 $$ Assert.assertEquals(templateId, dataInputStream.readUTF())[ FD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_18 $$ URLTemplateResource newURLTemplateResource = new URLTemplateResource()[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_19 $$ MockObjectInput mockObjectInput = new MockObjectInput(new DataInputStream(new UnsyncByteArrayInputStream(externalizedData)))[ CD ]
Line_18 $$ URLTemplateResource newURLTemplateResource = new URLTemplateResource()-->Line_22 $$ Assert.assertEquals(url, ReflectionTestUtil.getFieldValue(newURLTemplateResource, "_templateURL"))[ FD ]
Line_6 $$ String resourcePath = clazz.getName()-->Line_8 $$ URL url = classLoader.getResource(resourcePath)[ FD ]
Line_4 $$ Class<?> clazz = getClass()-->Line_6 $$ String resourcePath = clazz.getName()[ FD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_22 $$ Assert.assertEquals(url, ReflectionTestUtil.getFieldValue(newURLTemplateResource, "_templateURL"))[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_15 $$ DataInputStream dataInputStream = new DataInputStream(new UnsyncByteArrayInputStream(externalizedData))[ CD ]
Line_18 $$ URLTemplateResource newURLTemplateResource = new URLTemplateResource()-->Line_21 $$ Assert.assertEquals(templateId, newURLTemplateResource.getTemplateId())[ FD ]
Line_3 $$ String templateId = "testId"-->Line_21 $$ Assert.assertEquals(templateId, newURLTemplateResource.getTemplateId())[ FD ]
Line_10 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_14 $$ byte[] externalizedData = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_16 $$ Assert.assertEquals(templateId, dataInputStream.readUTF())[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_17 $$ Assert.assertEquals(url.toExternalForm(), dataInputStream.readUTF())[ CD ]
Line_4 $$ Class<?> clazz = getClass()-->Line_5 $$ ClassLoader classLoader = clazz.getClassLoader()[ FD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_14 $$ byte[] externalizedData = unsyncByteArrayOutputStream.toByteArray()[ CD ]
Line_8 $$ URL url = classLoader.getResource(resourcePath)-->Line_17 $$ Assert.assertEquals(url.toExternalForm(), dataInputStream.readUTF())[ FD ]
Line_6 $$ String resourcePath = clazz.getName()-->Line_7 $$ resourcePath = resourcePath.replace('.', '/') + ".class"[ FD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_20 $$ newURLTemplateResource.readExternal(mockObjectInput)[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_7 $$ resourcePath = resourcePath.replace('.', '/') + ".class"[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_6 $$ String resourcePath = clazz.getName()[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_9 $$ URLTemplateResource urlTemplateResource = new URLTemplateResource(templateId, url)[ CD ]
Line_15 $$ DataInputStream dataInputStream = new DataInputStream(new UnsyncByteArrayInputStream(externalizedData))-->Line_16 $$ Assert.assertEquals(templateId, dataInputStream.readUTF())[ FD ]
Line_7 $$ resourcePath = resourcePath.replace('.', '/') + ".class"-->Line_8 $$ URL url = classLoader.getResource(resourcePath)[ FD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_8 $$ URL url = classLoader.getResource(resourcePath)[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_10 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ CD ]
Line_2 $$ public void testURLTemplateResourceExternalization() throws IOException -->Line_21 $$ Assert.assertEquals(templateId, newURLTemplateResource.getTemplateId())[ CD ]
Line_8 $$ URL url = classLoader.getResource(resourcePath)-->Line_22 $$ Assert.assertEquals(url, ReflectionTestUtil.getFieldValue(newURLTemplateResource, "_templateURL"))[ FD ]
