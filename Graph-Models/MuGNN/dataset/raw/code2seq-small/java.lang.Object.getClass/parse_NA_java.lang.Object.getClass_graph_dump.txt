Line_4 $$ String currentFieldName = null-->Line_19 $$ if (context.parseFieldMatcher().match(currentFieldName, UNIT)) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_17 $$ if (context.parseFieldMatcher().match(currentFieldName, GAP_POLICY)) [ FD ]
Line_3 $$ XContentParser.Token token-->Line_27 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_42 $$ ValueFormatter formatter = null[ CD ]
Line_6 $$ String format = null-->Line_44 $$ formatter = ValueFormat.Patternable.Number.format(format).formatter()[ FD ]
Line_48 $$ Long xAxisUnits = null-->Line_56 $$ xAxisUnits = timeValue.getMillis()[ FD ]
Line_17 $$ if (context.parseFieldMatcher().match(currentFieldName, GAP_POLICY)) -->Line_18 $$ gapPolicy = GapPolicy.parse(context, parser.text(), parser.getTokenLocation())[ CD ]
Line_14 $$ format = parser.text()-->Line_44 $$ formatter = ValueFormat.Patternable.Number.format(format).formatter()[ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_15 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) [ FD ]
Line_5 $$ String[] bucketsPaths = null-->Line_31 $$ bucketsPaths = paths.toArray(new String[paths.size()])[ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_3 $$ XContentParser.Token token[ CD ]
Line_25 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) -->Line_27 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ CD ]
Line_3 $$ XContentParser.Token token-->Line_10 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_54 $$ TimeValue timeValue = TimeValue.parseTimeValue(units, null, getClass().getSimpleName() + ".unit")-->Line_55 $$ if (timeValue != null) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_39 $$ if (bucketsPaths == null) [ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_28 $$ String path = parser.text()[ FD ]
Line_11 $$ currentFieldName = parser.currentName()-->Line_17 $$ if (context.parseFieldMatcher().match(currentFieldName, GAP_POLICY)) [ FD ]
Line_7 $$ String units = null-->Line_49 $$ if (units != null) [ FD ]
Line_52 $$ xAxisUnits = dateTimeUnit.field().getDurationField().getUnitMillis()-->Line_56 $$ xAxisUnits = timeValue.getMillis()[ FD ]
Line_4 $$ String currentFieldName = null-->Line_13 $$ if (context.parseFieldMatcher().match(currentFieldName, FORMAT)) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_60 $$ return new DerivativePipelineAggregator.Factory(pipelineAggregatorName, bucketsPaths, formatter, gapPolicy, xAxisUnits)[ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_18 $$ gapPolicy = GapPolicy.parse(context, parser.text(), parser.getTokenLocation())[ FD ]
Line_14 $$ format = parser.text()-->Line_43 $$ if (format != null) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_20 $$ units = parser.text()[ FD ]
Line_25 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) -->Line_31 $$ bucketsPaths = paths.toArray(new String[paths.size()])[ CD ]
Line_3 $$ XContentParser.Token token-->Line_9 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_16 $$ bucketsPaths = new String[] [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_43 $$ if (format != null) [ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_11 $$ currentFieldName = parser.currentName()[ FD ]
Line_9 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_24 $$ if (token == XContentParser.Token.START_ARRAY) [ FD ]
Line_10 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_12 $$ if (token == XContentParser.Token.VALUE_STRING) [ CD ]
Line_43 $$ if (format != null) -->Line_44 $$ formatter = ValueFormat.Patternable.Number.format(format).formatter()[ CD ]
Line_16 $$ bucketsPaths = new String[] -->Line_39 $$ if (bucketsPaths == null) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_22 $$ throw new SearchParseException(context, "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].", parser.getTokenLocation())[ FD ]
Line_8 $$ GapPolicy gapPolicy = GapPolicy.SKIP-->Line_18 $$ gapPolicy = GapPolicy.parse(context, parser.text(), parser.getTokenLocation())[ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_4 $$ String currentFieldName = null[ CD ]
Line_44 $$ formatter = ValueFormat.Patternable.Number.format(format).formatter()-->Line_46 $$ formatter = ValueFormatter.RAW[ FD ]
Line_24 $$ if (token == XContentParser.Token.START_ARRAY) -->Line_25 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) [ CD ]
Line_42 $$ ValueFormatter formatter = null-->Line_46 $$ formatter = ValueFormatter.RAW[ FD ]
Line_9 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_27 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_49 $$ if (units != null) [ CD ]
Line_3 $$ XContentParser.Token token-->Line_24 $$ if (token == XContentParser.Token.START_ARRAY) [ FD ]
Line_6 $$ String format = null-->Line_14 $$ format = parser.text()[ FD ]
Line_4 $$ String currentFieldName = null-->Line_17 $$ if (context.parseFieldMatcher().match(currentFieldName, GAP_POLICY)) [ FD ]
Line_20 $$ units = parser.text()-->Line_49 $$ if (units != null) [ FD ]
Line_50 $$ DateTimeUnit dateTimeUnit = DateHistogramParser.DATE_FIELD_UNITS.get(units)-->Line_52 $$ xAxisUnits = dateTimeUnit.field().getDurationField().getUnitMillis()[ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_40 $$ throw new SearchParseException(context, "Missing required field [" + BUCKETS_PATH.getPreferredName() + "] for derivative aggregation [" + pipelineAggregatorName + "]", parser.getTokenLocation())[ FD ]
Line_16 $$ bucketsPaths = new String[] -->Line_31 $$ bucketsPaths = paths.toArray(new String[paths.size()])[ FD ]
Line_9 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_10 $$ if (token == XContentParser.Token.FIELD_NAME) [ CD ]
Line_48 $$ Long xAxisUnits = null-->Line_52 $$ xAxisUnits = dateTimeUnit.field().getDurationField().getUnitMillis()[ FD ]
Line_6 $$ String format = null-->Line_43 $$ if (format != null) [ FD ]
Line_51 $$ if (dateTimeUnit != null) -->Line_55 $$ if (timeValue != null) [ CD ]
Line_7 $$ String units = null-->Line_20 $$ units = parser.text()[ FD ]
Line_5 $$ String[] bucketsPaths = null-->Line_39 $$ if (bucketsPaths == null) [ FD ]
Line_19 $$ if (context.parseFieldMatcher().match(currentFieldName, UNIT)) -->Line_20 $$ units = parser.text()[ CD ]
Line_26 $$ List<String> paths = new ArrayList()-->Line_29 $$ paths.add(path)[ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_8 $$ GapPolicy gapPolicy = GapPolicy.SKIP[ CD ]
Line_49 $$ if (units != null) -->Line_51 $$ if (dateTimeUnit != null) [ CD ]
Line_7 $$ String units = null-->Line_54 $$ TimeValue timeValue = TimeValue.parseTimeValue(units, null, getClass().getSimpleName() + ".unit")[ FD ]
Line_49 $$ if (units != null) -->Line_50 $$ DateTimeUnit dateTimeUnit = DateHistogramParser.DATE_FIELD_UNITS.get(units)[ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_13 $$ if (context.parseFieldMatcher().match(currentFieldName, FORMAT)) [ FD ]
Line_11 $$ currentFieldName = parser.currentName()-->Line_13 $$ if (context.parseFieldMatcher().match(currentFieldName, FORMAT)) [ FD ]
Line_11 $$ currentFieldName = parser.currentName()-->Line_25 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_6 $$ String format = null[ CD ]
Line_4 $$ String currentFieldName = null-->Line_11 $$ currentFieldName = parser.currentName()[ FD ]
Line_20 $$ units = parser.text()-->Line_54 $$ TimeValue timeValue = TimeValue.parseTimeValue(units, null, getClass().getSimpleName() + ".unit")[ FD ]
Line_5 $$ String[] bucketsPaths = null-->Line_16 $$ bucketsPaths = new String[] [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_9 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_14 $$ format = parser.text()[ FD ]
Line_27 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_29 $$ paths.add(path)[ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_36 $$ throw new SearchParseException(context, "Unexpected token " + token + " in [" + pipelineAggregatorName + "].", parser.getTokenLocation())[ FD ]
Line_25 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) -->Line_26 $$ List<String> paths = new ArrayList()[ CD ]
Line_12 $$ if (token == XContentParser.Token.VALUE_STRING) -->Line_13 $$ if (context.parseFieldMatcher().match(currentFieldName, FORMAT)) [ CD ]
Line_43 $$ if (format != null) -->Line_46 $$ formatter = ValueFormatter.RAW[ CD ]
Line_51 $$ if (dateTimeUnit != null) -->Line_54 $$ TimeValue timeValue = TimeValue.parseTimeValue(units, null, getClass().getSimpleName() + ".unit")[ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_7 $$ String units = null[ CD ]
Line_55 $$ if (timeValue != null) -->Line_56 $$ xAxisUnits = timeValue.getMillis()[ CD ]
Line_54 $$ TimeValue timeValue = TimeValue.parseTimeValue(units, null, getClass().getSimpleName() + ".unit")-->Line_56 $$ xAxisUnits = timeValue.getMillis()[ FD ]
Line_4 $$ String currentFieldName = null-->Line_25 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) [ FD ]
Line_17 $$ if (context.parseFieldMatcher().match(currentFieldName, GAP_POLICY)) -->Line_19 $$ if (context.parseFieldMatcher().match(currentFieldName, UNIT)) [ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_5 $$ String[] bucketsPaths = null[ CD ]
Line_20 $$ units = parser.text()-->Line_50 $$ DateTimeUnit dateTimeUnit = DateHistogramParser.DATE_FIELD_UNITS.get(units)[ FD ]
Line_50 $$ DateTimeUnit dateTimeUnit = DateHistogramParser.DATE_FIELD_UNITS.get(units)-->Line_51 $$ if (dateTimeUnit != null) [ FD ]
Line_28 $$ String path = parser.text()-->Line_29 $$ paths.add(path)[ FD ]
Line_15 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) -->Line_17 $$ if (context.parseFieldMatcher().match(currentFieldName, GAP_POLICY)) [ CD ]
Line_15 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) -->Line_16 $$ bucketsPaths = new String[] [ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_33 $$ throw new SearchParseException(context, "Unknown key for a " + token + " in [" + pipelineAggregatorName + "]: [" + currentFieldName + "].", parser.getTokenLocation())[ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_27 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) [ FD ]
Line_27 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_ARRAY) -->Line_28 $$ String path = parser.text()[ CD ]
Line_26 $$ List<String> paths = new ArrayList()-->Line_31 $$ bucketsPaths = paths.toArray(new String[paths.size()])[ FD ]
Line_31 $$ bucketsPaths = paths.toArray(new String[paths.size()])-->Line_39 $$ if (bucketsPaths == null) [ FD ]
Line_3 $$ XContentParser.Token token-->Line_12 $$ if (token == XContentParser.Token.VALUE_STRING) [ FD ]
Line_9 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_10 $$ if (token == XContentParser.Token.FIELD_NAME) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_19 $$ if (context.parseFieldMatcher().match(currentFieldName, UNIT)) [ FD ]
Line_12 $$ if (token == XContentParser.Token.VALUE_STRING) -->Line_24 $$ if (token == XContentParser.Token.START_ARRAY) [ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_25 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) [ FD ]
Line_42 $$ ValueFormatter formatter = null-->Line_44 $$ formatter = ValueFormat.Patternable.Number.format(format).formatter()[ FD ]
Line_11 $$ currentFieldName = parser.currentName()-->Line_19 $$ if (context.parseFieldMatcher().match(currentFieldName, UNIT)) [ FD ]
Line_7 $$ String units = null-->Line_50 $$ DateTimeUnit dateTimeUnit = DateHistogramParser.DATE_FIELD_UNITS.get(units)[ FD ]
Line_13 $$ if (context.parseFieldMatcher().match(currentFieldName, FORMAT)) -->Line_15 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) [ CD ]
Line_9 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) -->Line_12 $$ if (token == XContentParser.Token.VALUE_STRING) [ FD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_48 $$ Long xAxisUnits = null[ CD ]
Line_10 $$ if (token == XContentParser.Token.FIELD_NAME) -->Line_11 $$ currentFieldName = parser.currentName()[ CD ]
Line_11 $$ currentFieldName = parser.currentName()-->Line_15 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) [ FD ]
Line_13 $$ if (context.parseFieldMatcher().match(currentFieldName, FORMAT)) -->Line_14 $$ format = parser.text()[ CD ]
Line_4 $$ String currentFieldName = null-->Line_15 $$ if (context.parseFieldMatcher().match(currentFieldName, BUCKETS_PATH)) [ FD ]
Line_51 $$ if (dateTimeUnit != null) -->Line_52 $$ xAxisUnits = dateTimeUnit.field().getDurationField().getUnitMillis()[ CD ]
Line_2 $$ public PipelineAggregatorFactory parse(String pipelineAggregatorName, XContentParser parser, SearchContext context) throws IOException -->Line_9 $$ while ((token = parser.nextToken()) != XContentParser.Token.END_OBJECT) [ FD ]
