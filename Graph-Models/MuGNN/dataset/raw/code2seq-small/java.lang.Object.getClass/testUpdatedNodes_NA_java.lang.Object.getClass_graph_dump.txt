Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()[ CD ]
Line_35 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_67 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_40 $$ itr.next()[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_74 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task3Attempt.getID(), TaskAttemptEventType.TA_KILL))[ CD ]
Line_18 $$ NodeId node1 = task1Attempt.getNodeId()-->Line_20 $$ Assert.assertEquals(node1, node2)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_77 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task4Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_25 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_37 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_26 $$ Assert.assertEquals("Expecting 2 completion events for success", 2, events.length)[ CD ]
Line_12 $$ Task mapTask1 = it.next()-->Line_37 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_39 $$ Iterator<TaskAttempt> itr = mapTask1.getAttempts().values().iterator()-->Line_41 $$ task1Attempt = itr.next()[ FD ]
Line_67 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_79 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_61 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_71 $$ TaskAttempt task3Attempt = reduceTask1.getAttempts().values().iterator().next()[ CD ]
Line_59 $$ Task reduceTask2 = it.next()-->Line_78 $$ app.waitForState(reduceTask2, TaskState.SUCCEEDED)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_35 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_12 $$ Task mapTask1 = it.next()-->Line_39 $$ Iterator<TaskAttempt> itr = mapTask1.getAttempts().values().iterator()[ FD ]
Line_52 $$ job = app.submit(conf)-->Line_62 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_35 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_57 $$ mapTask2 = it.next()[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_43 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ CD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_44 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_45 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_67 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_12 $$ Task mapTask1 = it.next()-->Line_23 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_27 $$ ArrayList<NodeReport> updatedNodes = new ArrayList<NodeReport>()[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_52 $$ job = app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_32 $$ app.getContext().getEventHandler().handle(new JobUpdatedNodesEvent(job.getID(), updatedNodes))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_64 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_49 $$ conf = new Configuration()-->Line_51 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_47 $$ app.stop()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_28 $$ NodeReport nr = RecordFactoryProvider.getRecordFactory(null).newRecordInstance(NodeReport.class)[ CD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_58 $$ Task reduceTask1 = it.next()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_13 $$ Task mapTask2 = it.next()[ CD ]
Line_3 $$ int runCount = 0-->Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_60 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_50 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_54 $$ Assert.assertEquals("No of tasks not correct", 4, job.getTasks().size())[ FD ]
Line_52 $$ job = app.submit(conf)-->Line_54 $$ Assert.assertEquals("No of tasks not correct", 4, job.getTasks().size())[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_25 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_67 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_9 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_25 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_8 $$ Job job = app.submit(conf)-->Line_10 $$ Assert.assertEquals("Num tasks not correct", 4, job.getTasks().size())[ FD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_55 $$ it = job.getTasks().values().iterator()-->Line_58 $$ Task reduceTask1 = it.next()[ FD ]
Line_25 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_62 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_33 $$ app.waitForState(task1Attempt, TaskAttemptState.KILLED)[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_51 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_78 $$ app.waitForState(reduceTask2, TaskState.SUCCEEDED)[ FD ]
Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_19 $$ NodeId node2 = task2Attempt.getNodeId()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_46 $$ Assert.assertEquals("Expecting 1 more completion events for success", 5, events.length)[ CD ]
Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()-->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_35 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_62 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_33 $$ app.waitForState(task1Attempt, TaskAttemptState.KILLED)[ FD ]
Line_35 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_79 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_52 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_77 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task4Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_76 $$ TaskAttempt task4Attempt = reduceTask2.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_77 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task4Attempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_3 $$ int runCount = 0-->Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_59 $$ Task reduceTask2 = it.next()-->Line_76 $$ TaskAttempt task4Attempt = reduceTask2.getAttempts().values().iterator().next()[ FD ]
Line_76 $$ TaskAttempt task4Attempt = reduceTask2.getAttempts().values().iterator().next()-->Line_77 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task4Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_73 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_15 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_32 $$ app.getContext().getEventHandler().handle(new JobUpdatedNodesEvent(job.getID(), updatedNodes))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_22 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_74 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task3Attempt.getID(), TaskAttemptEventType.TA_KILL))[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_59 $$ Task reduceTask2 = it.next()[ CD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_70 $$ app.waitForState(reduceTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)[ CD ]
Line_8 $$ Job job = app.submit(conf)-->Line_45 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_72 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task3Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_74 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task3Attempt.getID(), TaskAttemptEventType.TA_KILL))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_61 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_19 $$ NodeId node2 = task2Attempt.getNodeId()[ CD ]
Line_25 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_45 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_51 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_79 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_52 $$ job = app.submit(conf)-->Line_53 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_72 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task3Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_45 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_62 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_36 $$ Assert.assertEquals("Expecting 2 more completion events for killed", 4, events.length)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_38 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_3 $$ int runCount = 0[ CD ]
Line_57 $$ mapTask2 = it.next()-->Line_61 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_62 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_67 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_60 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_53 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_61 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_55 $$ it = job.getTasks().values().iterator()-->Line_59 $$ Task reduceTask2 = it.next()[ FD ]
Line_52 $$ job = app.submit(conf)-->Line_79 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_34 $$ app.waitForState(task2Attempt, TaskAttemptState.KILLED)[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_67 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_57 $$ mapTask2 = it.next()-->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_12 $$ Task mapTask1 = it.next()-->Line_43 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_57 $$ mapTask2 = it.next()[ FD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_38 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_60 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_22 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_81 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_6 $$ conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, 0.5f)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_8 $$ Job job = app.submit(conf)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_63 $$ Assert.assertEquals("Expecting 2 completion events for killed & success of map1", 2, events.length)[ CD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_73 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_38 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_44 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_56 $$ mapTask1 = it.next()[ CD ]
Line_52 $$ job = app.submit(conf)-->Line_67 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_19 $$ NodeId node2 = task2Attempt.getNodeId()-->Line_20 $$ Assert.assertEquals(node1, node2)[ FD ]
Line_58 $$ Task reduceTask1 = it.next()-->Line_75 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_8 $$ Job job = app.submit(conf)[ FD ]
Line_52 $$ job = app.submit(conf)-->Line_81 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_27 $$ ArrayList<NodeReport> updatedNodes = new ArrayList<NodeReport>()-->Line_31 $$ updatedNodes.add(nr)[ FD ]
Line_28 $$ NodeReport nr = RecordFactoryProvider.getRecordFactory(null).newRecordInstance(NodeReport.class)-->Line_31 $$ updatedNodes.add(nr)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_34 $$ app.waitForState(task2Attempt, TaskAttemptState.KILLED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_39 $$ Iterator<TaskAttempt> itr = mapTask1.getAttempts().values().iterator()[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_14 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ CD ]
Line_28 $$ NodeReport nr = RecordFactoryProvider.getRecordFactory(null).newRecordInstance(NodeReport.class)-->Line_30 $$ nr.setNodeState(NodeState.UNHEALTHY)[ FD ]
Line_71 $$ TaskAttempt task3Attempt = reduceTask1.getAttempts().values().iterator().next()-->Line_72 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task3Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_12 $$ Task mapTask1 = it.next()[ CD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_58 $$ Task reduceTask1 = it.next()-->Line_73 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_72 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task3Attempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_50 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ CD ]
Line_57 $$ mapTask2 = it.next()-->Line_64 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_56 $$ mapTask1 = it.next()[ FD ]
Line_25 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_35 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_62 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_32 $$ app.getContext().getEventHandler().handle(new JobUpdatedNodesEvent(job.getID(), updatedNodes))[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_54 $$ Assert.assertEquals("No of tasks not correct", 4, job.getTasks().size())[ CD ]
Line_56 $$ mapTask1 = it.next()-->Line_60 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_12 $$ Task mapTask1 = it.next()[ FD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_57 $$ mapTask2 = it.next()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_31 $$ updatedNodes.add(nr)[ CD ]
Line_49 $$ conf = new Configuration()-->Line_52 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_15 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_59 $$ Task reduceTask2 = it.next()[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_75 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_55 $$ it = job.getTasks().values().iterator()-->Line_56 $$ mapTask1 = it.next()[ FD ]
Line_28 $$ NodeReport nr = RecordFactoryProvider.getRecordFactory(null).newRecordInstance(NodeReport.class)-->Line_29 $$ nr.setNodeId(node1)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_34 $$ app.waitForState(task2Attempt, TaskAttemptState.KILLED)[ CD ]
Line_8 $$ Job job = app.submit(conf)-->Line_79 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_10 $$ Assert.assertEquals("Num tasks not correct", 4, job.getTasks().size())[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_69 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_18 $$ NodeId node1 = task1Attempt.getNodeId()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_14 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_23 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_23 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_75 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_37 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_70 $$ app.waitForState(reduceTask2, TaskState.RUNNING)[ CD ]
Line_8 $$ Job job = app.submit(conf)-->Line_81 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_44 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_45 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_78 $$ app.waitForState(reduceTask2, TaskState.SUCCEEDED)[ FD ]
Line_52 $$ job = app.submit(conf)-->Line_55 $$ it = job.getTasks().values().iterator()[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_81 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_70 $$ app.waitForState(reduceTask2, TaskState.RUNNING)[ FD ]
Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()-->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_15 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_20 $$ Assert.assertEquals(node1, node2)[ CD ]
Line_41 $$ task1Attempt = itr.next()-->Line_42 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_58 $$ Task reduceTask1 = it.next()-->Line_69 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_81 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_64 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_25 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_79 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_12 $$ Task mapTask1 = it.next()-->Line_60 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_52 $$ job = app.submit(conf)[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_9 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()-->Line_18 $$ NodeId node1 = task1Attempt.getNodeId()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_53 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_64 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()[ CD ]
Line_59 $$ Task reduceTask2 = it.next()-->Line_70 $$ app.waitForState(reduceTask2, TaskState.RUNNING)[ FD ]
Line_8 $$ Job job = app.submit(conf)-->Line_62 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_39 $$ Iterator<TaskAttempt> itr = mapTask1.getAttempts().values().iterator()-->Line_40 $$ itr.next()[ FD ]
Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()-->Line_41 $$ task1Attempt = itr.next()[ FD ]
Line_12 $$ Task mapTask1 = it.next()-->Line_56 $$ mapTask1 = it.next()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_61 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_53 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_8 $$ Job job = app.submit(conf)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_29 $$ nr.setNodeId(node1)[ CD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_52 $$ job = app.submit(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, 0.5f)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_30 $$ nr.setNodeState(NodeState.UNHEALTHY)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_52 $$ job = app.submit(conf)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_24 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_9 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_41 $$ task1Attempt = itr.next()[ CD ]
Line_8 $$ Job job = app.submit(conf)-->Line_53 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_43 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_55 $$ it = job.getTasks().values().iterator()-->Line_57 $$ mapTask2 = it.next()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_69 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ CD ]
Line_12 $$ Task mapTask1 = it.next()-->Line_14 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_62 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_79 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_48 $$ app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), false, ++runCount)-->Line_69 $$ app.waitForState(reduceTask1, TaskState.RUNNING)[ FD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_55 $$ it = job.getTasks().values().iterator()[ FD ]
Line_12 $$ Task mapTask1 = it.next()-->Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_49 $$ conf = new Configuration()[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_7 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_24 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_78 $$ app.waitForState(reduceTask2, TaskState.SUCCEEDED)[ CD ]
Line_8 $$ Job job = app.submit(conf)-->Line_55 $$ it = job.getTasks().values().iterator()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_49 $$ conf = new Configuration()[ FD ]
Line_49 $$ conf = new Configuration()-->Line_50 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, true)[ FD ]
Line_18 $$ NodeId node1 = task1Attempt.getNodeId()-->Line_29 $$ nr.setNodeId(node1)[ FD ]
Line_13 $$ Task mapTask2 = it.next()-->Line_24 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_47 $$ app.stop()[ CD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_13 $$ Task mapTask2 = it.next()[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_75 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ CD ]
Line_45 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_79 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_66 $$ app.waitForState(mapTask2, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_68 $$ Assert.assertEquals("Expecting 1 more completion events for success", 3, events.length)[ CD ]
Line_58 $$ Task reduceTask1 = it.next()-->Line_71 $$ TaskAttempt task3Attempt = reduceTask1.getAttempts().values().iterator().next()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_73 $$ app.waitForState(reduceTask1, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 2, false, this.getClass().getName(), true, ++runCount)-->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task1Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_58 $$ Task reduceTask1 = it.next()[ CD ]
Line_71 $$ TaskAttempt task3Attempt = reduceTask1.getAttempts().values().iterator().next()-->Line_74 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task3Attempt.getID(), TaskAttemptEventType.TA_KILL))[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_80 $$ Assert.assertEquals("Expecting 2 more completion events for reduce success", 5, events.length)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_67 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()[ CD ]
Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()-->Line_33 $$ app.waitForState(task1Attempt, TaskAttemptState.KILLED)[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_55 $$ it = job.getTasks().values().iterator()[ CD ]
Line_64 $$ task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_65 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testUpdatedNodes() throws Exception -->Line_22 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(task2Attempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_35 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_45 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
