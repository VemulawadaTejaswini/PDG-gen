Line_2 $$ public Filter setParameter(String name, Object value) throws IllegalArgumentException -->Line_7 $$ if (value != null && !type.getReturnedClass().isAssignableFrom(value.getClass())) [ FD ]
Line_2 $$ public Filter setParameter(String name, Object value) throws IllegalArgumentException -->Line_10 $$ parameters.put(name, value)[ CD ]
Line_2 $$ public Filter setParameter(String name, Object value) throws IllegalArgumentException -->Line_3 $$ Type type = definition.getParameterType(name)[ CD ]
Line_2 $$ public Filter setParameter(String name, Object value) throws IllegalArgumentException -->Line_7 $$ if (value != null && !type.getReturnedClass().isAssignableFrom(value.getClass())) [ CD ]
Line_2 $$ public Filter setParameter(String name, Object value) throws IllegalArgumentException -->Line_3 $$ Type type = definition.getParameterType(name)[ FD ]
Line_2 $$ public Filter setParameter(String name, Object value) throws IllegalArgumentException -->Line_4 $$ if (type == null) [ CD ]
Line_3 $$ Type type = definition.getParameterType(name)-->Line_7 $$ if (value != null && !type.getReturnedClass().isAssignableFrom(value.getClass())) [ FD ]
Line_3 $$ Type type = definition.getParameterType(name)-->Line_4 $$ if (type == null) [ FD ]
Line_2 $$ public Filter setParameter(String name, Object value) throws IllegalArgumentException -->Line_10 $$ parameters.put(name, value)[ FD ]
Line_2 $$ public Filter setParameter(String name, Object value) throws IllegalArgumentException -->Line_11 $$ return this[ CD ]
