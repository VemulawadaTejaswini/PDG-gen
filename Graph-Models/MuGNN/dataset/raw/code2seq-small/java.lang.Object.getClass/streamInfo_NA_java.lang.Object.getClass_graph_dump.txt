Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_10 $$ if (stream instanceof FileInputStream) [ CD ]
Line_3 $$ if (stream instanceof BufferedInputStream) -->Line_6 $$ int count = ReflectionUtil.getField(stream.getClass(), stream, int.class, "count")[ CD ]
Line_3 $$ if (stream instanceof BufferedInputStream) -->Line_8 $$ return "BufferedInputStream(buf=" + (buf == null ? null : Arrays.toString(Arrays.copyOf(buf, count))) + ", count=" + count + ", pos=" + pos + ", in=" + streamInfo(in) + ")"[ CD ]
Line_10 $$ if (stream instanceof FileInputStream) -->Line_16 $$ return "FileInputStream(path=" + path + ", available=" + available + ", closed=" + closed + ", channel=" + channel + ", channel.size=" + (channel == null ? null : channel.size()) + ", file.exists=" + file.exists() + ", file.content='" + FileUtil.loadFile(file) + "')"[ CD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_13 $$ boolean closed = ReflectionUtil.getField(stream.getClass(), stream, boolean.class, "closed")[ FD ]
Line_4 $$ InputStream in = ReflectionUtil.getField(stream.getClass(), stream, InputStream.class, "in")-->Line_8 $$ return "BufferedInputStream(buf=" + (buf == null ? null : Arrays.toString(Arrays.copyOf(buf, count))) + ", count=" + count + ", pos=" + pos + ", in=" + streamInfo(in) + ")"[ FD ]
Line_3 $$ if (stream instanceof BufferedInputStream) -->Line_4 $$ InputStream in = ReflectionUtil.getField(stream.getClass(), stream, InputStream.class, "in")[ CD ]
Line_10 $$ if (stream instanceof FileInputStream) -->Line_12 $$ FileChannel channel = ReflectionUtil.getField(stream.getClass(), stream, FileChannel.class, "channel")[ CD ]
Line_5 $$ byte[] buf = ReflectionUtil.getField(stream.getClass(), stream, byte[].class, "buf")-->Line_8 $$ return "BufferedInputStream(buf=" + (buf == null ? null : Arrays.toString(Arrays.copyOf(buf, count))) + ", count=" + count + ", pos=" + pos + ", in=" + streamInfo(in) + ")"[ FD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_12 $$ FileChannel channel = ReflectionUtil.getField(stream.getClass(), stream, FileChannel.class, "channel")[ FD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_6 $$ int count = ReflectionUtil.getField(stream.getClass(), stream, int.class, "count")[ FD ]
Line_10 $$ if (stream instanceof FileInputStream) -->Line_11 $$ String path = ReflectionUtil.getField(stream.getClass(), stream, String.class, "path")[ CD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_3 $$ if (stream instanceof BufferedInputStream) [ FD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_11 $$ String path = ReflectionUtil.getField(stream.getClass(), stream, String.class, "path")[ FD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_3 $$ if (stream instanceof BufferedInputStream) [ CD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_4 $$ InputStream in = ReflectionUtil.getField(stream.getClass(), stream, InputStream.class, "in")[ FD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_7 $$ int pos = ReflectionUtil.getField(stream.getClass(), stream, int.class, "pos")[ FD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_10 $$ if (stream instanceof FileInputStream) [ FD ]
Line_6 $$ int count = ReflectionUtil.getField(stream.getClass(), stream, int.class, "count")-->Line_8 $$ return "BufferedInputStream(buf=" + (buf == null ? null : Arrays.toString(Arrays.copyOf(buf, count))) + ", count=" + count + ", pos=" + pos + ", in=" + streamInfo(in) + ")"[ FD ]
Line_10 $$ if (stream instanceof FileInputStream) -->Line_13 $$ boolean closed = ReflectionUtil.getField(stream.getClass(), stream, boolean.class, "closed")[ CD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_18 $$ return stream[ CD ]
Line_10 $$ if (stream instanceof FileInputStream) -->Line_15 $$ File file = new File(path)[ CD ]
Line_15 $$ File file = new File(path)-->Line_16 $$ return "FileInputStream(path=" + path + ", available=" + available + ", closed=" + closed + ", channel=" + channel + ", channel.size=" + (channel == null ? null : channel.size()) + ", file.exists=" + file.exists() + ", file.content='" + FileUtil.loadFile(file) + "')"[ FD ]
Line_3 $$ if (stream instanceof BufferedInputStream) -->Line_7 $$ int pos = ReflectionUtil.getField(stream.getClass(), stream, int.class, "pos")[ CD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_14 $$ int available = stream.available()[ FD ]
Line_3 $$ if (stream instanceof BufferedInputStream) -->Line_5 $$ byte[] buf = ReflectionUtil.getField(stream.getClass(), stream, byte[].class, "buf")[ CD ]
Line_12 $$ FileChannel channel = ReflectionUtil.getField(stream.getClass(), stream, FileChannel.class, "channel")-->Line_16 $$ return "FileInputStream(path=" + path + ", available=" + available + ", closed=" + closed + ", channel=" + channel + ", channel.size=" + (channel == null ? null : channel.size()) + ", file.exists=" + file.exists() + ", file.content='" + FileUtil.loadFile(file) + "')"[ FD ]
Line_2 $$ private static Object streamInfo(InputStream stream) throws IOException -->Line_5 $$ byte[] buf = ReflectionUtil.getField(stream.getClass(), stream, byte[].class, "buf")[ FD ]
Line_10 $$ if (stream instanceof FileInputStream) -->Line_14 $$ int available = stream.available()[ CD ]
