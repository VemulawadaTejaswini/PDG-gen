Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_24 $$ it = job.getTasks().values().iterator()[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_7 $$ Job job = app.submit(conf)[ CD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_24 $$ it = job.getTasks().values().iterator()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_7 $$ Job job = app.submit(conf)[ FD ]
Line_12 $$ Task mapTask = it.next()-->Line_25 $$ mapTask = it.next()[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_30 $$ app.stop()[ CD ]
Line_26 $$ List<AMInfo> amInfos = app.getAllAMInfos()-->Line_27 $$ Assert.assertEquals(2, amInfos.size())[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_28 $$ AMInfo amInfoOne = amInfos.get(0)[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_6 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_25 $$ mapTask = it.next()[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_29 $$ Assert.assertEquals(am1StartTime, amInfoOne.getStartTime())[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_26 $$ List<AMInfo> amInfos = app.getAllAMInfos()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_9 $$ long am1StartTime = app.getAllAMInfos().get(0).getStartTime()[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_22 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_5 $$ Configuration conf = new Configuration()[ CD ]
Line_26 $$ List<AMInfo> amInfos = app.getAllAMInfos()-->Line_28 $$ AMInfo amInfoOne = amInfos.get(0)[ FD ]
Line_24 $$ it = job.getTasks().values().iterator()-->Line_25 $$ mapTask = it.next()[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_15 $$ app.waitForState(taskAttempt, TaskAttemptState.RUNNING)[ CD ]
Line_17 $$ app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), false, ++runCount)-->Line_30 $$ app.stop()[ FD ]
Line_21 $$ job = app.submit(conf)-->Line_22 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_23 $$ Assert.assertEquals("No of tasks not correct", 1, job.getTasks().size())[ CD ]
Line_17 $$ app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), false, ++runCount)-->Line_26 $$ List<AMInfo> amInfos = app.getAllAMInfos()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_18 $$ conf = new Configuration()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_19 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, false)[ FD ]
Line_12 $$ Task mapTask = it.next()-->Line_14 $$ TaskAttempt taskAttempt = mapTask.getAttempts().values().iterator().next()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_13 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_18 $$ conf = new Configuration()[ CD ]
Line_3 $$ int runCount = 0-->Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_3 $$ int runCount = 0[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_21 $$ job = app.submit(conf)[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_12 $$ Task mapTask = it.next()[ CD ]
Line_28 $$ AMInfo amInfoOne = amInfos.get(0)-->Line_29 $$ Assert.assertEquals(am1StartTime, amInfoOne.getStartTime())[ FD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_25 $$ mapTask = it.next()[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_21 $$ job = app.submit(conf)[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_14 $$ TaskAttempt taskAttempt = mapTask.getAttempts().values().iterator().next()[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_21 $$ job = app.submit(conf)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_21 $$ job = app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_16 $$ app.stop()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_20 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_17 $$ app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ Job job = app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_22 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_16 $$ app.stop()[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_20 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_9 $$ long am1StartTime = app.getAllAMInfos().get(0).getStartTime()[ CD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_10 $$ Assert.assertEquals("No of tasks not correct", 1, job.getTasks().size())[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_24 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_13 $$ app.waitForState(mapTask, TaskState.RUNNING)[ CD ]
Line_14 $$ TaskAttempt taskAttempt = mapTask.getAttempts().values().iterator().next()-->Line_15 $$ app.waitForState(taskAttempt, TaskAttemptState.RUNNING)[ FD ]
Line_17 $$ app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), false, ++runCount)-->Line_22 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_10 $$ Assert.assertEquals("No of tasks not correct", 1, job.getTasks().size())[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_19 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, false)[ CD ]
Line_12 $$ Task mapTask = it.next()-->Line_13 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_3 $$ int runCount = 0-->Line_17 $$ app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), false, ++runCount)[ FD ]
Line_18 $$ conf = new Configuration()-->Line_20 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_18 $$ conf = new Configuration()-->Line_21 $$ job = app.submit(conf)[ FD ]
Line_18 $$ conf = new Configuration()-->Line_19 $$ conf.setBoolean(MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE, false)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_22 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_21 $$ job = app.submit(conf)-->Line_23 $$ Assert.assertEquals("No of tasks not correct", 1, job.getTasks().size())[ FD ]
Line_17 $$ app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), false, ++runCount)-->Line_21 $$ job = app.submit(conf)[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_26 $$ List<AMInfo> amInfos = app.getAllAMInfos()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_30 $$ app.stop()[ FD ]
Line_9 $$ long am1StartTime = app.getAllAMInfos().get(0).getStartTime()-->Line_29 $$ Assert.assertEquals(am1StartTime, amInfoOne.getStartTime())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), true, ++runCount)-->Line_15 $$ app.waitForState(taskAttempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_27 $$ Assert.assertEquals(2, amInfos.size())[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_23 $$ Assert.assertEquals("No of tasks not correct", 1, job.getTasks().size())[ FD ]
Line_21 $$ job = app.submit(conf)-->Line_24 $$ it = job.getTasks().values().iterator()[ FD ]
Line_2 $$ public void testAMInfosWithoutRecoveryEnabled() throws Exception -->Line_17 $$ app = new MRAppWithHistory(1, 0, false, this.getClass().getName(), false, ++runCount)[ CD ]
Line_11 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_12 $$ Task mapTask = it.next()[ FD ]
