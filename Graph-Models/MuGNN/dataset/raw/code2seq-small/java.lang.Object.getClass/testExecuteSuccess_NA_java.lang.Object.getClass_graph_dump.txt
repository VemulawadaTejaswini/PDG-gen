Line_9 $$ ProcessCallable<Serializable> processCallable = deserializer.readObject()-->Line_10 $$ serializer.writeObject(new RPCResponse(processCallable.call()))[ FD ]
Line_8 $$ Serializer serializer = new Serializer()-->Line_11 $$ return Datagram.createResponseDatagram(datagram, serializer.toByteBuffer())[ FD ]
Line_4 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_11 $$ return Datagram.createResponseDatagram(datagram, serializer.toByteBuffer())[ FD ]
Line_2 $$ public void testExecuteSuccess() throws Exception -->Line_18 $$ Future<String> futureResult = IntrabandRPCUtil.execute(mockRegistrationReference, new TestProcessCallable())[ CD ]
Line_8 $$ Serializer serializer = new Serializer()-->Line_10 $$ serializer.writeObject(new RPCResponse(processCallable.call()))[ FD ]
Line_2 $$ public void testExecuteSuccess() throws Exception -->Line_3 $$ PortalClassLoaderUtil.setClassLoader(getClass().getClassLoader())[ CD ]
Line_4 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_6 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())[ FD ]
Line_2 $$ public void testExecuteSuccess() throws Exception -->Line_19 $$ Assert.assertEquals(TestProcessCallable.class.getName(), futureResult.get())[ CD ]
Line_4 $$ MockIntraband mockIntraband = new MockIntraband() -->Line_6 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())[ CD ]
Line_6 $$ Deserializer deserializer = new Deserializer(datagram.getDataByteBuffer())-->Line_9 $$ ProcessCallable<Serializable> processCallable = deserializer.readObject()[ FD ]
Line_2 $$ public void testExecuteSuccess() throws Exception -->Line_4 $$ MockIntraband mockIntraband = new MockIntraband() [ CD ]
