Line_33 $$ Exception parseException = parser.getParseException()-->Line_34 $$ Assert.assertNull("Caught an expected exception " + parseException, parseException)[ FD ]
Line_39 $$ for (TaskAttempt taskAttempt : task.getAttempts().values()) -->Line_40 $$ TaskAttemptInfo taskAttemptInfo = taskInfo.getAllTaskAttempts().get(TypeConverter.fromYarn((taskAttempt.getID())))[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_11 $$ JobId jobId = job.getID()[ FD ]
Line_2 $$ public void testHistoryParsingForFailedAttempts() throws Exception -->Line_3 $$ LOG.info("STARTING testHistoryParsingForFailedAttempts")[ CD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setClass(NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, MyResolver.class, DNSToSwitchMapping.class)[ FD ]
Line_30 $$ parser = new JobHistoryParser(in)-->Line_31 $$ jobInfo = parser.parse()[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_15 $$ jobHistory.init(conf)[ FD ]
Line_37 $$ for (Task task : job.getTasks().values()) -->Line_39 $$ for (TaskAttempt taskAttempt : task.getAttempts().values()) [ FD ]
Line_17 $$ JobHistoryParser parser-->Line_30 $$ parser = new JobHistoryParser(in)[ FD ]
Line_18 $$ JobInfo jobInfo-->Line_36 $$ Map<TaskID, TaskInfo> allTasks = jobInfo.getAllTasks()[ FD ]
Line_20 $$ Path historyFilePath = fileInfo.getHistoryFile()-->Line_25 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistoryWithFailedAttempt(2, 1, true, this.getClass().getName(), true)-->Line_12 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_24 $$ fc = FileContext.getFileContext(conf)-->Line_25 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_9 $$ app.submit(conf)[ FD ]
Line_16 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)-->Line_20 $$ Path historyFilePath = fileInfo.getHistoryFile()[ FD ]
Line_11 $$ JobId jobId = job.getID()-->Line_16 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_12 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_7 $$ RackResolver.init(conf)[ FD ]
Line_21 $$ FSDataInputStream in = null-->Line_25 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_37 $$ for (Task task : job.getTasks().values()) [ FD ]
Line_37 $$ for (Task task : job.getTasks().values()) -->Line_38 $$ TaskInfo taskInfo = allTasks.get(TypeConverter.fromYarn(task.getID()))[ FD ]
Line_22 $$ FileContext fc = null-->Line_24 $$ fc = FileContext.getFileContext(conf)[ FD ]
Line_22 $$ FileContext fc = null-->Line_25 $$ in = fc.open(fc.makeQualified(historyFilePath))[ FD ]
Line_35 $$ int noOffailedAttempts = 0-->Line_47 $$ Assert.assertEquals("No of Failed tasks doesn't match.", 2, noOffailedAttempts)[ FD ]
Line_36 $$ Map<TaskID, TaskInfo> allTasks = jobInfo.getAllTasks()-->Line_38 $$ TaskInfo taskInfo = allTasks.get(TypeConverter.fromYarn(task.getID()))[ FD ]
Line_40 $$ TaskAttemptInfo taskAttemptInfo = taskInfo.getAllTaskAttempts().get(TypeConverter.fromYarn((taskAttempt.getID())))-->Line_42 $$ if (taskAttemptInfo.getTaskStatus().equals("FAILED")) [ FD ]
Line_42 $$ if (taskAttemptInfo.getTaskStatus().equals("FAILED")) -->Line_43 $$ noOffailedAttempts++[ CD ]
Line_17 $$ JobHistoryParser parser-->Line_31 $$ jobInfo = parser.parse()[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistoryWithFailedAttempt(2, 1, true, this.getClass().getName(), true)-->Line_10 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_18 $$ JobInfo jobInfo-->Line_31 $$ jobInfo = parser.parse()[ FD ]
Line_17 $$ JobHistoryParser parser-->Line_33 $$ Exception parseException = parser.getParseException()[ FD ]
Line_35 $$ int noOffailedAttempts = 0-->Line_43 $$ noOffailedAttempts++[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistoryWithFailedAttempt(2, 1, true, this.getClass().getName(), true)-->Line_13 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_15 $$ jobHistory.init(conf)[ FD ]
Line_30 $$ parser = new JobHistoryParser(in)-->Line_33 $$ Exception parseException = parser.getParseException()[ FD ]
Line_31 $$ jobInfo = parser.parse()-->Line_36 $$ Map<TaskID, TaskInfo> allTasks = jobInfo.getAllTasks()[ FD ]
Line_38 $$ TaskInfo taskInfo = allTasks.get(TypeConverter.fromYarn(task.getID()))-->Line_40 $$ TaskAttemptInfo taskAttemptInfo = taskInfo.getAllTaskAttempts().get(TypeConverter.fromYarn((taskAttempt.getID())))[ FD ]
Line_5 $$ Configuration conf = new Configuration()-->Line_24 $$ fc = FileContext.getFileContext(conf)[ FD ]
Line_8 $$ MRApp app = new MRAppWithHistoryWithFailedAttempt(2, 1, true, this.getClass().getName(), true)-->Line_9 $$ app.submit(conf)[ FD ]
Line_40 $$ TaskAttemptInfo taskAttemptInfo = taskInfo.getAllTaskAttempts().get(TypeConverter.fromYarn((taskAttempt.getID())))-->Line_41 $$ Assert.assertEquals("rack-name is incorrect", taskAttemptInfo.getRackname(), RACK_NAME)[ FD ]
Line_14 $$ JobHistory jobHistory = new JobHistory()-->Line_16 $$ HistoryFileInfo fileInfo = jobHistory.getJobFileInfo(jobId)[ FD ]
