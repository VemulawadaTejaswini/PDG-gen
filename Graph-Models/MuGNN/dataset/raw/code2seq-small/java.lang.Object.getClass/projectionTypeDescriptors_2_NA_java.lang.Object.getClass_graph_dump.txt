Line_2 $$ public void projectionTypeDescriptors_2() throws Exception -->Line_7 $$ Object[] value = (Object[]) exp.getValue(ctx)[ CD ]
Line_2 $$ public void projectionTypeDescriptors_2() throws Exception -->Line_3 $$ StandardEvaluationContext ctx = new StandardEvaluationContext(new C())[ CD ]
Line_4 $$ SpelExpressionParser parser = new SpelExpressionParser()-->Line_6 $$ SpelExpression exp = parser.parseRaw(el1)[ FD ]
Line_3 $$ StandardEvaluationContext ctx = new StandardEvaluationContext(new C())-->Line_7 $$ Object[] value = (Object[]) exp.getValue(ctx)[ FD ]
Line_2 $$ public void projectionTypeDescriptors_2() throws Exception -->Line_8 $$ assertEquals(Boolean.class, value[0].getClass())[ CD ]
Line_2 $$ public void projectionTypeDescriptors_2() throws Exception -->Line_9 $$ TypeDescriptor evaluated = exp.getValueTypeDescriptor(ctx)[ CD ]
Line_5 $$ String el1 = "as.![#this.equals('abc')]"-->Line_6 $$ SpelExpression exp = parser.parseRaw(el1)[ FD ]
Line_2 $$ public void projectionTypeDescriptors_2() throws Exception -->Line_10 $$ assertEquals(Boolean.class, evaluated.getElementTypeDescriptor().getType())[ CD ]
Line_3 $$ StandardEvaluationContext ctx = new StandardEvaluationContext(new C())-->Line_9 $$ TypeDescriptor evaluated = exp.getValueTypeDescriptor(ctx)[ FD ]
Line_2 $$ public void projectionTypeDescriptors_2() throws Exception -->Line_5 $$ String el1 = "as.![#this.equals('abc')]"[ CD ]
Line_2 $$ public void projectionTypeDescriptors_2() throws Exception -->Line_4 $$ SpelExpressionParser parser = new SpelExpressionParser()[ CD ]
Line_9 $$ TypeDescriptor evaluated = exp.getValueTypeDescriptor(ctx)-->Line_10 $$ assertEquals(Boolean.class, evaluated.getElementTypeDescriptor().getType())[ FD ]
Line_2 $$ public void projectionTypeDescriptors_2() throws Exception -->Line_6 $$ SpelExpression exp = parser.parseRaw(el1)[ CD ]
Line_6 $$ SpelExpression exp = parser.parseRaw(el1)-->Line_7 $$ Object[] value = (Object[]) exp.getValue(ctx)[ FD ]
Line_6 $$ SpelExpression exp = parser.parseRaw(el1)-->Line_9 $$ TypeDescriptor evaluated = exp.getValueTypeDescriptor(ctx)[ FD ]
