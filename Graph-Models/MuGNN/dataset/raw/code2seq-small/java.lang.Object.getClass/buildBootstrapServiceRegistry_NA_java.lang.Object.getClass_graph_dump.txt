Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_17 $$ if (persistenceUnit.getClassLoader() != null) [ CD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_20 $$ if (providedClassLoader != null) [ CD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_31 $$ bsrBuilder.applyClassLoader(classLoader)[ FD ]
Line_5 $$ final IntegratorProvider integratorProvider = (IntegratorProvider) integrationSettings.get(INTEGRATOR_PROVIDER)-->Line_6 $$ if (integratorProvider != null) [ FD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_41 $$ return bsrBuilder.build()[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_11 $$ final StrategyRegistrationProviderList strategyRegistrationProviderList = (StrategyRegistrationProviderList) integrationSettings.get(STRATEGY_REGISTRATION_PROVIDERS)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_28 $$ if (classLoadersSetting != null) [ CD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_35 $$ bsrBuilder.applyClassLoader(classLoader)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_41 $$ return bsrBuilder.build()[ CD ]
Line_7 $$ for (Integrator integrator : integratorProvider.getIntegrators()) -->Line_8 $$ bsrBuilder.applyIntegrator(integrator)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_27 $$ final Object classLoadersSetting = integrationSettings.get(org.hibernate.cfg.AvailableSettings.CLASSLOADERS)[ FD ]
Line_5 $$ final IntegratorProvider integratorProvider = (IntegratorProvider) integrationSettings.get(INTEGRATOR_PROVIDER)-->Line_7 $$ for (Integrator integrator : integratorProvider.getIntegrators()) [ FD ]
Line_23 $$ final ClassLoader appClassLoader = (ClassLoader) integrationSettings.get(org.hibernate.cfg.AvailableSettings.APP_CLASSLOADER)-->Line_24 $$ if (appClassLoader != null) [ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_6 $$ if (integratorProvider != null) [ CD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_4 $$ bsrBuilder.applyIntegrator(new JpaIntegrator())[ FD ]
Line_17 $$ if (persistenceUnit.getClassLoader() != null) -->Line_18 $$ bsrBuilder.applyClassLoader(persistenceUnit.getClassLoader())[ CD ]
Line_30 $$ for (ClassLoader classLoader : (java.util.Collection<ClassLoader>) classLoadersSetting) -->Line_31 $$ bsrBuilder.applyClassLoader(classLoader)[ FD ]
Line_20 $$ if (providedClassLoader != null) -->Line_21 $$ bsrBuilder.applyClassLoader(providedClassLoader)[ CD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_8 $$ bsrBuilder.applyIntegrator(integrator)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_21 $$ bsrBuilder.applyClassLoader(providedClassLoader)[ FD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_18 $$ bsrBuilder.applyClassLoader(persistenceUnit.getClassLoader())[ FD ]
Line_27 $$ final Object classLoadersSetting = integrationSettings.get(org.hibernate.cfg.AvailableSettings.CLASSLOADERS)-->Line_29 $$ if (java.util.Collection.class.isInstance(classLoadersSetting)) [ FD ]
Line_30 $$ for (ClassLoader classLoader : (java.util.Collection<ClassLoader>) classLoadersSetting) -->Line_35 $$ bsrBuilder.applyClassLoader(classLoader)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_23 $$ final ClassLoader appClassLoader = (ClassLoader) integrationSettings.get(org.hibernate.cfg.AvailableSettings.APP_CLASSLOADER)[ CD ]
Line_28 $$ if (classLoadersSetting != null) -->Line_29 $$ if (java.util.Collection.class.isInstance(classLoadersSetting)) [ CD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_20 $$ if (providedClassLoader != null) [ FD ]
Line_13 $$ for (StrategyRegistrationProvider strategyRegistrationProvider : strategyRegistrationProviderList.getStrategyRegistrationProviders()) -->Line_14 $$ bsrBuilder.withStrategySelectors(strategyRegistrationProvider)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_27 $$ final Object classLoadersSetting = integrationSettings.get(org.hibernate.cfg.AvailableSettings.CLASSLOADERS)[ CD ]
Line_29 $$ if (java.util.Collection.class.isInstance(classLoadersSetting)) -->Line_33 $$ if (classLoadersSetting.getClass().isArray()) [ CD ]
Line_33 $$ if (classLoadersSetting.getClass().isArray()) -->Line_37 $$ if (ClassLoader.class.isInstance(classLoadersSetting)) [ CD ]
Line_37 $$ if (ClassLoader.class.isInstance(classLoadersSetting)) -->Line_38 $$ bsrBuilder.applyClassLoader((ClassLoader) classLoadersSetting)[ CD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_24 $$ if (appClassLoader != null) [ CD ]
Line_27 $$ final Object classLoadersSetting = integrationSettings.get(org.hibernate.cfg.AvailableSettings.CLASSLOADERS)-->Line_28 $$ if (classLoadersSetting != null) [ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()[ CD ]
Line_24 $$ if (appClassLoader != null) -->Line_25 $$ LOG.debugf("Found use of deprecated `%s` setting; use `%s` instead.", org.hibernate.cfg.AvailableSettings.APP_CLASSLOADER, org.hibernate.cfg.AvailableSettings.CLASSLOADERS)[ CD ]
Line_27 $$ final Object classLoadersSetting = integrationSettings.get(org.hibernate.cfg.AvailableSettings.CLASSLOADERS)-->Line_33 $$ if (classLoadersSetting.getClass().isArray()) [ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_12 $$ if (strategyRegistrationProviderList != null) [ CD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_14 $$ bsrBuilder.withStrategySelectors(strategyRegistrationProvider)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_23 $$ final ClassLoader appClassLoader = (ClassLoader) integrationSettings.get(org.hibernate.cfg.AvailableSettings.APP_CLASSLOADER)[ FD ]
Line_11 $$ final StrategyRegistrationProviderList strategyRegistrationProviderList = (StrategyRegistrationProviderList) integrationSettings.get(STRATEGY_REGISTRATION_PROVIDERS)-->Line_13 $$ for (StrategyRegistrationProvider strategyRegistrationProvider : strategyRegistrationProviderList.getStrategyRegistrationProviders()) [ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_5 $$ final IntegratorProvider integratorProvider = (IntegratorProvider) integrationSettings.get(INTEGRATOR_PROVIDER)[ FD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_21 $$ bsrBuilder.applyClassLoader(providedClassLoader)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_5 $$ final IntegratorProvider integratorProvider = (IntegratorProvider) integrationSettings.get(INTEGRATOR_PROVIDER)[ CD ]
Line_3 $$ final BootstrapServiceRegistryBuilder bsrBuilder = new BootstrapServiceRegistryBuilder()-->Line_38 $$ bsrBuilder.applyClassLoader((ClassLoader) classLoadersSetting)[ FD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_11 $$ final StrategyRegistrationProviderList strategyRegistrationProviderList = (StrategyRegistrationProviderList) integrationSettings.get(STRATEGY_REGISTRATION_PROVIDERS)[ CD ]
Line_2 $$ private BootstrapServiceRegistry buildBootstrapServiceRegistry(Map integrationSettings, ClassLoader providedClassLoader) -->Line_4 $$ bsrBuilder.applyIntegrator(new JpaIntegrator())[ CD ]
Line_11 $$ final StrategyRegistrationProviderList strategyRegistrationProviderList = (StrategyRegistrationProviderList) integrationSettings.get(STRATEGY_REGISTRATION_PROVIDERS)-->Line_12 $$ if (strategyRegistrationProviderList != null) [ FD ]
Line_27 $$ final Object classLoadersSetting = integrationSettings.get(org.hibernate.cfg.AvailableSettings.CLASSLOADERS)-->Line_37 $$ if (ClassLoader.class.isInstance(classLoadersSetting)) [ FD ]
