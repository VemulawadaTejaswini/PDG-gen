Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)-->Line_9 $$ assertThat(converted.size(), equalTo(2))[ FD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_5 $$ source.put("a", 1)[ CD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)[ CD ]
Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)-->Line_10 $$ assertThat(converted.get("a"), equalTo(Arrays.asList("1")))[ FD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_11 $$ assertThat(converted.get("b"), equalTo(Arrays.asList("2")))[ CD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_3 $$ DefaultConversionService.addDefaultConverters(conversionService)[ CD ]
Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)-->Line_11 $$ assertThat(converted.get("b"), equalTo(Arrays.asList("2")))[ FD ]
Line_4 $$ Map<String, Integer> source = new HashMap<String, Integer>()-->Line_6 $$ source.put("b", 2)[ FD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_4 $$ Map<String, Integer> source = new HashMap<String, Integer>()[ CD ]
Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("multiValueMapTarget"))-->Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)[ FD ]
Line_4 $$ Map<String, Integer> source = new HashMap<String, Integer>()-->Line_5 $$ source.put("a", 1)[ FD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_9 $$ assertThat(converted.size(), equalTo(2))[ CD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_7 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("multiValueMapTarget"))[ CD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_10 $$ assertThat(converted.get("a"), equalTo(Arrays.asList("1")))[ CD ]
Line_4 $$ Map<String, Integer> source = new HashMap<String, Integer>()-->Line_8 $$ MultiValueMap<String, String> converted = (MultiValueMap<String, String>) conversionService.convert(source, targetType)[ FD ]
Line_2 $$ public void mapToMultiValueMap() throws Exception -->Line_6 $$ source.put("b", 2)[ CD ]
