Line_2 $$ public Response toResponse(Exception e) -->Line_37 $$ LOG.warn("INTERNAL_SERVER_ERROR", e)[ FD ]
Line_23 $$ s = Response.Status.NOT_FOUND-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_13 $$ final Response.Status s-->Line_27 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_24 $$ if (e instanceof ForbiddenException) -->Line_26 $$ if (e instanceof UnsupportedOperationException) [ CD ]
Line_40 $$ RemoteExceptionData exception = new RemoteExceptionData(e.getClass().getSimpleName(), e.getMessage(), e.getClass().getName())-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_24 $$ if (e instanceof ForbiddenException) [ FD ]
Line_23 $$ s = Response.Status.NOT_FOUND-->Line_25 $$ s = Response.Status.FORBIDDEN[ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_31 $$ s = Response.Status.BAD_REQUEST-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_32 $$ if (e instanceof BadRequestException) -->Line_34 $$ if (e instanceof WebApplicationException && e.getCause() instanceof UnmarshalException) [ CD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_18 $$ if (e instanceof FileNotFoundException) [ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_16 $$ if (e instanceof AuthorizationException) [ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_13 $$ final Response.Status s-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_10 $$ if (e instanceof RemoteException) -->Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()[ CD ]
Line_23 $$ s = Response.Status.NOT_FOUND-->Line_29 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_27 $$ s = Response.Status.BAD_REQUEST-->Line_29 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_18 $$ if (e instanceof FileNotFoundException) [ FD ]
Line_14 $$ if (e instanceof SecurityException) -->Line_16 $$ if (e instanceof AuthorizationException) [ CD ]
Line_13 $$ final Response.Status s-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_14 $$ if (e instanceof SecurityException) -->Line_15 $$ s = Response.Status.UNAUTHORIZED[ CD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_26 $$ if (e instanceof UnsupportedOperationException) [ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_28 $$ if (e instanceof IllegalArgumentException) [ FD ]
Line_32 $$ if (e instanceof BadRequestException) -->Line_33 $$ s = Response.Status.BAD_REQUEST[ CD ]
Line_23 $$ s = Response.Status.NOT_FOUND-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_13 $$ final Response.Status s-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_17 $$ s = Response.Status.UNAUTHORIZED[ FD ]
Line_31 $$ s = Response.Status.BAD_REQUEST-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_30 $$ if (e instanceof NumberFormatException) -->Line_31 $$ s = Response.Status.BAD_REQUEST[ CD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_9 $$ response.setContentType(null)[ CD ]
Line_29 $$ s = Response.Status.BAD_REQUEST-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_30 $$ if (e instanceof NumberFormatException) [ FD ]
Line_25 $$ s = Response.Status.FORBIDDEN-->Line_29 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_21 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_27 $$ s = Response.Status.BAD_REQUEST-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_33 $$ s = Response.Status.BAD_REQUEST-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_13 $$ final Response.Status s-->Line_17 $$ s = Response.Status.UNAUTHORIZED[ FD ]
Line_30 $$ if (e instanceof NumberFormatException) -->Line_32 $$ if (e instanceof BadRequestException) [ CD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_23 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_19 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_26 $$ if (e instanceof UnsupportedOperationException) -->Line_28 $$ if (e instanceof IllegalArgumentException) [ CD ]
Line_25 $$ s = Response.Status.FORBIDDEN-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_26 $$ if (e instanceof UnsupportedOperationException) -->Line_27 $$ s = Response.Status.BAD_REQUEST[ CD ]
Line_13 $$ final Response.Status s-->Line_23 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_28 $$ if (e instanceof IllegalArgumentException) [ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_4 $$ LOG.trace("GOT EXCEPITION", e)[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_29 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_37 $$ LOG.warn("INTERNAL_SERVER_ERROR", e)[ FD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_19 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_13 $$ final Response.Status s-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_13 $$ final Response.Status s-->Line_21 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_35 $$ s = Response.Status.BAD_REQUEST-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_6 $$ if (e instanceof com.sun.jersey.api.NotFoundException) [ CD ]
Line_25 $$ s = Response.Status.FORBIDDEN-->Line_27 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_30 $$ if (e instanceof NumberFormatException) [ FD ]
Line_23 $$ s = Response.Status.NOT_FOUND-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_21 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_6 $$ if (e instanceof com.sun.jersey.api.NotFoundException) [ FD ]
Line_33 $$ s = Response.Status.BAD_REQUEST-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_40 $$ RemoteExceptionData exception = new RemoteExceptionData(e.getClass().getSimpleName(), e.getMessage(), e.getClass().getName())[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_14 $$ if (e instanceof SecurityException) [ CD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_34 $$ if (e instanceof WebApplicationException && e.getCause() instanceof UnmarshalException) [ FD ]
Line_18 $$ if (e instanceof FileNotFoundException) -->Line_20 $$ if (e instanceof NotFoundException) [ CD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_16 $$ if (e instanceof AuthorizationException) -->Line_17 $$ s = Response.Status.UNAUTHORIZED[ CD ]
Line_23 $$ s = Response.Status.NOT_FOUND-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_24 $$ if (e instanceof ForbiddenException) -->Line_25 $$ s = Response.Status.FORBIDDEN[ CD ]
Line_27 $$ s = Response.Status.BAD_REQUEST-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_25 $$ s = Response.Status.FORBIDDEN-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_3 $$ if (LOG.isTraceEnabled()) -->Line_4 $$ LOG.trace("GOT EXCEPITION", e)[ CD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_40 $$ RemoteExceptionData exception = new RemoteExceptionData(e.getClass().getSimpleName(), e.getMessage(), e.getClass().getName())[ CD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_25 $$ s = Response.Status.FORBIDDEN[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_20 $$ if (e instanceof NotFoundException) [ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_24 $$ if (e instanceof ForbiddenException) [ FD ]
Line_18 $$ if (e instanceof FileNotFoundException) -->Line_19 $$ s = Response.Status.NOT_FOUND[ CD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_16 $$ if (e instanceof AuthorizationException) [ FD ]
Line_28 $$ if (e instanceof IllegalArgumentException) -->Line_29 $$ s = Response.Status.BAD_REQUEST[ CD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_6 $$ if (e instanceof com.sun.jersey.api.NotFoundException) -->Line_7 $$ return ((com.sun.jersey.api.NotFoundException) e).getResponse()[ CD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_22 $$ if (e instanceof IOException) [ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_34 $$ if (e instanceof WebApplicationException && e.getCause() instanceof UnmarshalException) -->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ CD ]
Line_35 $$ s = Response.Status.BAD_REQUEST-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_14 $$ if (e instanceof SecurityException) [ FD ]
Line_13 $$ final Response.Status s-->Line_15 $$ s = Response.Status.UNAUTHORIZED[ FD ]
Line_29 $$ s = Response.Status.BAD_REQUEST-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_13 $$ final Response.Status s-->Line_29 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_13 $$ final Response.Status s-->Line_19 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_22 $$ if (e instanceof IOException) -->Line_23 $$ s = Response.Status.NOT_FOUND[ CD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_33 $$ s = Response.Status.BAD_REQUEST-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_25 $$ s = Response.Status.FORBIDDEN-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_28 $$ if (e instanceof IllegalArgumentException) -->Line_30 $$ if (e instanceof NumberFormatException) [ CD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_29 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_25 $$ s = Response.Status.FORBIDDEN-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_21 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_26 $$ if (e instanceof UnsupportedOperationException) [ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_20 $$ if (e instanceof NotFoundException) [ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_10 $$ if (e instanceof RemoteException) [ CD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_23 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_23 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_20 $$ if (e instanceof NotFoundException) -->Line_21 $$ s = Response.Status.NOT_FOUND[ CD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_29 $$ s = Response.Status.BAD_REQUEST-->Line_31 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_32 $$ if (e instanceof BadRequestException) [ FD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_23 $$ s = Response.Status.NOT_FOUND-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_20 $$ if (e instanceof NotFoundException) -->Line_22 $$ if (e instanceof IOException) [ CD ]
Line_27 $$ s = Response.Status.BAD_REQUEST-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_3 $$ if (LOG.isTraceEnabled()) [ CD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_14 $$ if (e instanceof SecurityException) [ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_25 $$ s = Response.Status.FORBIDDEN[ FD ]
Line_15 $$ s = Response.Status.UNAUTHORIZED-->Line_27 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_29 $$ s = Response.Status.BAD_REQUEST-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_29 $$ s = Response.Status.BAD_REQUEST-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_13 $$ final Response.Status s[ CD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_29 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_34 $$ if (e instanceof WebApplicationException && e.getCause() instanceof UnmarshalException) [ FD ]
Line_34 $$ if (e instanceof WebApplicationException && e.getCause() instanceof UnmarshalException) -->Line_35 $$ s = Response.Status.BAD_REQUEST[ CD ]
Line_27 $$ s = Response.Status.BAD_REQUEST-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_27 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_16 $$ if (e instanceof AuthorizationException) -->Line_18 $$ if (e instanceof FileNotFoundException) [ CD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_32 $$ if (e instanceof BadRequestException) [ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_27 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_29 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_21 $$ s = Response.Status.NOT_FOUND-->Line_25 $$ s = Response.Status.FORBIDDEN[ FD ]
Line_31 $$ s = Response.Status.BAD_REQUEST-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_40 $$ RemoteExceptionData exception = new RemoteExceptionData(e.getClass().getSimpleName(), e.getMessage(), e.getClass().getName())[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_41 $$ return Response.status(s).entity(exception).build()[ CD ]
Line_13 $$ final Response.Status s-->Line_25 $$ s = Response.Status.FORBIDDEN[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_25 $$ s = Response.Status.FORBIDDEN[ FD ]
Line_11 $$ e = ((RemoteException) e).unwrapRemoteException()-->Line_22 $$ if (e instanceof IOException) [ FD ]
Line_25 $$ s = Response.Status.FORBIDDEN-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_23 $$ s = Response.Status.NOT_FOUND[ FD ]
Line_27 $$ s = Response.Status.BAD_REQUEST-->Line_35 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_34 $$ if (e instanceof WebApplicationException && e.getCause() instanceof UnmarshalException) -->Line_37 $$ LOG.warn("INTERNAL_SERVER_ERROR", e)[ CD ]
Line_17 $$ s = Response.Status.UNAUTHORIZED-->Line_33 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_2 $$ public Response toResponse(Exception e) -->Line_10 $$ if (e instanceof RemoteException) [ FD ]
Line_31 $$ s = Response.Status.BAD_REQUEST-->Line_38 $$ s = Response.Status.INTERNAL_SERVER_ERROR[ FD ]
Line_19 $$ s = Response.Status.NOT_FOUND-->Line_27 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_23 $$ s = Response.Status.NOT_FOUND-->Line_27 $$ s = Response.Status.BAD_REQUEST[ FD ]
Line_13 $$ final Response.Status s-->Line_41 $$ return Response.status(s).entity(exception).build()[ FD ]
Line_22 $$ if (e instanceof IOException) -->Line_24 $$ if (e instanceof ForbiddenException) [ CD ]
