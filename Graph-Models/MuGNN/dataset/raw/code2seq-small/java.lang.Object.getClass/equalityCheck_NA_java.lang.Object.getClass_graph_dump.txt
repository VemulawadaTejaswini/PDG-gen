Line_4 $$ Number leftNumber = (Number) left-->Line_19 $$ return (leftNumber.longValue() == rightNumber.longValue())[ FD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_37 $$ Class<?> ancestor = ClassUtils.determineCommonAncestor(left.getClass(), right.getClass())[ FD ]
Line_10 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_12 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) [ CD ]
Line_22 $$ if (leftNumber instanceof Short || rightNumber instanceof Short) -->Line_23 $$ return (leftNumber.shortValue() == rightNumber.shortValue())[ CD ]
Line_3 $$ if (left instanceof Number && right instanceof Number) -->Line_5 $$ Number rightNumber = (Number) right[ CD ]
Line_14 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_18 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) [ CD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_13 $$ return (leftNumber.floatValue() == rightNumber.floatValue())[ FD ]
Line_8 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)-->Line_9 $$ return (leftBigDecimal == null ? rightBigDecimal == null : leftBigDecimal.compareTo(rightBigDecimal) == 0)[ FD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_33 $$ if (ObjectUtils.nullSafeEquals(left, right)) [ FD ]
Line_38 $$ if (ancestor != null && Comparable.class.isAssignableFrom(ancestor)) -->Line_39 $$ return (state.getTypeComparator().compare(left, right) == 0)[ CD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_8 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ FD ]
Line_4 $$ Number leftNumber = (Number) left-->Line_7 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ FD ]
Line_20 $$ if (leftNumber instanceof Integer || rightNumber instanceof Integer) -->Line_21 $$ return (leftNumber.intValue() == rightNumber.intValue())[ CD ]
Line_36 $$ if (left instanceof Comparable && right instanceof Comparable) -->Line_37 $$ Class<?> ancestor = ClassUtils.determineCommonAncestor(left.getClass(), right.getClass())[ CD ]
Line_30 $$ if (left instanceof CharSequence && right instanceof CharSequence) -->Line_31 $$ return left.toString().equals(right.toString())[ CD ]
Line_7 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)-->Line_9 $$ return (leftBigDecimal == null ? rightBigDecimal == null : leftBigDecimal.compareTo(rightBigDecimal) == 0)[ FD ]
Line_6 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_7 $$ BigDecimal leftBigDecimal = NumberUtils.convertNumberToTargetClass(leftNumber, BigDecimal.class)[ CD ]
Line_4 $$ Number leftNumber = (Number) left-->Line_13 $$ return (leftNumber.floatValue() == rightNumber.floatValue())[ FD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_33 $$ if (ObjectUtils.nullSafeEquals(left, right)) [ CD ]
Line_14 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_15 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ CD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_27 $$ return (leftNumber.doubleValue() == rightNumber.doubleValue())[ FD ]
Line_18 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_19 $$ return (leftNumber.longValue() == rightNumber.longValue())[ CD ]
Line_16 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)-->Line_17 $$ return (leftBigInteger == null ? rightBigInteger == null : leftBigInteger.compareTo(rightBigInteger) == 0)[ FD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_39 $$ return (state.getTypeComparator().compare(left, right) == 0)[ FD ]
Line_12 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_14 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) [ CD ]
Line_33 $$ if (ObjectUtils.nullSafeEquals(left, right)) -->Line_34 $$ return true[ CD ]
Line_37 $$ Class<?> ancestor = ClassUtils.determineCommonAncestor(left.getClass(), right.getClass())-->Line_38 $$ if (ancestor != null && Comparable.class.isAssignableFrom(ancestor)) [ FD ]
Line_4 $$ Number leftNumber = (Number) left-->Line_23 $$ return (leftNumber.shortValue() == rightNumber.shortValue())[ FD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_11 $$ return (leftNumber.doubleValue() == rightNumber.doubleValue())[ FD ]
Line_4 $$ Number leftNumber = (Number) left-->Line_15 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)[ FD ]
Line_14 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_17 $$ return (leftBigInteger == null ? rightBigInteger == null : leftBigInteger.compareTo(rightBigInteger) == 0)[ CD ]
Line_3 $$ if (left instanceof Number && right instanceof Number) -->Line_6 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) [ CD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_30 $$ if (left instanceof CharSequence && right instanceof CharSequence) [ CD ]
Line_20 $$ if (leftNumber instanceof Integer || rightNumber instanceof Integer) -->Line_22 $$ if (leftNumber instanceof Short || rightNumber instanceof Short) [ CD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_16 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ FD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_31 $$ return left.toString().equals(right.toString())[ FD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_25 $$ return (leftNumber.byteValue() == rightNumber.byteValue())[ FD ]
Line_10 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) -->Line_11 $$ return (leftNumber.doubleValue() == rightNumber.doubleValue())[ CD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_23 $$ return (leftNumber.shortValue() == rightNumber.shortValue())[ FD ]
Line_4 $$ Number leftNumber = (Number) left-->Line_11 $$ return (leftNumber.doubleValue() == rightNumber.doubleValue())[ FD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_42 $$ return false[ CD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_19 $$ return (leftNumber.longValue() == rightNumber.longValue())[ FD ]
Line_15 $$ BigInteger leftBigInteger = NumberUtils.convertNumberToTargetClass(leftNumber, BigInteger.class)-->Line_17 $$ return (leftBigInteger == null ? rightBigInteger == null : leftBigInteger.compareTo(rightBigInteger) == 0)[ FD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_36 $$ if (left instanceof Comparable && right instanceof Comparable) [ CD ]
Line_3 $$ if (left instanceof Number && right instanceof Number) -->Line_4 $$ Number leftNumber = (Number) left[ CD ]
Line_22 $$ if (leftNumber instanceof Short || rightNumber instanceof Short) -->Line_24 $$ if (leftNumber instanceof Byte || rightNumber instanceof Byte) [ CD ]
Line_18 $$ if (leftNumber instanceof Long || rightNumber instanceof Long) -->Line_20 $$ if (leftNumber instanceof Integer || rightNumber instanceof Integer) [ CD ]
Line_5 $$ Number rightNumber = (Number) right-->Line_21 $$ return (leftNumber.intValue() == rightNumber.intValue())[ FD ]
Line_4 $$ Number leftNumber = (Number) left-->Line_27 $$ return (leftNumber.doubleValue() == rightNumber.doubleValue())[ FD ]
Line_24 $$ if (leftNumber instanceof Byte || rightNumber instanceof Byte) -->Line_27 $$ return (leftNumber.doubleValue() == rightNumber.doubleValue())[ CD ]
Line_4 $$ Number leftNumber = (Number) left-->Line_21 $$ return (leftNumber.intValue() == rightNumber.intValue())[ FD ]
Line_36 $$ if (left instanceof Comparable && right instanceof Comparable) -->Line_38 $$ if (ancestor != null && Comparable.class.isAssignableFrom(ancestor)) [ CD ]
Line_12 $$ if (leftNumber instanceof Float || rightNumber instanceof Float) -->Line_13 $$ return (leftNumber.floatValue() == rightNumber.floatValue())[ CD ]
Line_4 $$ Number leftNumber = (Number) left-->Line_25 $$ return (leftNumber.byteValue() == rightNumber.byteValue())[ FD ]
Line_2 $$ protected boolean equalityCheck(ExpressionState state, Object left, Object right) -->Line_3 $$ if (left instanceof Number && right instanceof Number) [ CD ]
Line_6 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_9 $$ return (leftBigDecimal == null ? rightBigDecimal == null : leftBigDecimal.compareTo(rightBigDecimal) == 0)[ CD ]
Line_24 $$ if (leftNumber instanceof Byte || rightNumber instanceof Byte) -->Line_25 $$ return (leftNumber.byteValue() == rightNumber.byteValue())[ CD ]
Line_14 $$ if (leftNumber instanceof BigInteger || rightNumber instanceof BigInteger) -->Line_16 $$ BigInteger rightBigInteger = NumberUtils.convertNumberToTargetClass(rightNumber, BigInteger.class)[ CD ]
Line_6 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_8 $$ BigDecimal rightBigDecimal = NumberUtils.convertNumberToTargetClass(rightNumber, BigDecimal.class)[ CD ]
Line_6 $$ if (leftNumber instanceof BigDecimal || rightNumber instanceof BigDecimal) -->Line_10 $$ if (leftNumber instanceof Double || rightNumber instanceof Double) [ CD ]
