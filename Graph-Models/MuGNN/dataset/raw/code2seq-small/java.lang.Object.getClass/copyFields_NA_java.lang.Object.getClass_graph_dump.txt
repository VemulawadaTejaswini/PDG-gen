Line_6 $$ if (sourceFields.contains(field)) -->Line_7 $$ if (isPublic(field) && !isFinal(field)) [ CD ]
Line_9 $$ if (diffFilter == null || diffFilter.isAccept(field)) -->Line_10 $$ copyFieldValue(from, to, field)[ CD ]
Line_2 $$ public static boolean copyFields(@NotNull Field[] fields, @NotNull Object from, @NotNull Object to, @Nullable DifferenceFilter diffFilter) -->Line_9 $$ if (diffFilter == null || diffFilter.isAccept(field)) [ FD ]
Line_2 $$ public static boolean copyFields(@NotNull Field[] fields, @NotNull Object from, @NotNull Object to, @Nullable DifferenceFilter diffFilter) -->Line_3 $$ Set<Field> sourceFields = new com.intellij.util.containers.HashSet<Field>(Arrays.asList(from.getClass().getFields()))[ FD ]
Line_5 $$ for (Field field : fields) -->Line_6 $$ if (sourceFields.contains(field)) [ FD ]
Line_5 $$ for (Field field : fields) -->Line_10 $$ copyFieldValue(from, to, field)[ FD ]
Line_2 $$ public static boolean copyFields(@NotNull Field[] fields, @NotNull Object from, @NotNull Object to, @Nullable DifferenceFilter diffFilter) -->Line_3 $$ Set<Field> sourceFields = new com.intellij.util.containers.HashSet<Field>(Arrays.asList(from.getClass().getFields()))[ CD ]
Line_2 $$ public static boolean copyFields(@NotNull Field[] fields, @NotNull Object from, @NotNull Object to, @Nullable DifferenceFilter diffFilter) -->Line_4 $$ boolean valuesChanged = false[ CD ]
Line_9 $$ if (diffFilter == null || diffFilter.isAccept(field)) -->Line_11 $$ valuesChanged = true[ CD ]
Line_5 $$ for (Field field : fields) -->Line_9 $$ if (diffFilter == null || diffFilter.isAccept(field)) [ FD ]
Line_2 $$ public static boolean copyFields(@NotNull Field[] fields, @NotNull Object from, @NotNull Object to, @Nullable DifferenceFilter diffFilter) -->Line_10 $$ copyFieldValue(from, to, field)[ FD ]
Line_4 $$ boolean valuesChanged = false-->Line_11 $$ valuesChanged = true[ FD ]
Line_2 $$ public static boolean copyFields(@NotNull Field[] fields, @NotNull Object from, @NotNull Object to, @Nullable DifferenceFilter diffFilter) -->Line_19 $$ return valuesChanged[ CD ]
Line_3 $$ Set<Field> sourceFields = new com.intellij.util.containers.HashSet<Field>(Arrays.asList(from.getClass().getFields()))-->Line_6 $$ if (sourceFields.contains(field)) [ FD ]
Line_5 $$ for (Field field : fields) -->Line_7 $$ if (isPublic(field) && !isFinal(field)) [ FD ]
