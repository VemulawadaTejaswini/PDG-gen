Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_9 $$ Assert.isTrue(args.length == methodParameterTypes.length, "Argument array does not match parameter count")[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_36 $$ return method.getReturnType()[ FD ]
Line_47 $$ className = (String) arg-->Line_55 $$ if (className != null) [ FD ]
Line_37 $$ if (methodParameterType instanceof ParameterizedType) -->Line_38 $$ ParameterizedType parameterizedType = (ParameterizedType) methodParameterType[ CD ]
Line_52 $$ className = typedValue.getValue()-->Line_55 $$ if (className != null) [ FD ]
Line_45 $$ String className = null-->Line_47 $$ className = (String) arg[ FD ]
Line_19 $$ Type methodParameterType = methodParameterTypes[i]-->Line_37 $$ if (methodParameterType instanceof ParameterizedType) [ FD ]
Line_52 $$ className = typedValue.getValue()-->Line_57 $$ return ClassUtils.forName(className, classLoader)[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_3 $$ Assert.notNull(method, "Method must not be null")[ CD ]
Line_18 $$ for (int i = 0; i < methodParameterTypes.length; i++) -->Line_19 $$ Type methodParameterType = methodParameterTypes[i][ CD ]
Line_17 $$ if (locallyDeclaredTypeVariableMatchesReturnType) -->Line_18 $$ for (int i = 0; i < methodParameterTypes.length; i++) [ CD ]
Line_19 $$ Type methodParameterType = methodParameterTypes[i]-->Line_21 $$ if (methodParameterType.equals(genericReturnType)) [ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_69 $$ return method.getReturnType()[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_6 $$ TypeVariable<Method>[] declaredTypeVariables = method.getTypeParameters()[ FD ]
Line_48 $$ if (arg instanceof TypedStringValue) -->Line_50 $$ String targetTypeName = typedValue.getTargetTypeName()[ CD ]
Line_23 $$ TypedStringValue typedValue = ((TypedStringValue) arg)-->Line_50 $$ String targetTypeName = typedValue.getTargetTypeName()[ FD ]
Line_41 $$ if (typeArg.equals(genericReturnType)) -->Line_42 $$ if (arg instanceof Class) [ CD ]
Line_42 $$ if (arg instanceof Class) -->Line_45 $$ String className = null[ CD ]
Line_22 $$ if (arg instanceof TypedStringValue) -->Line_24 $$ if (typedValue.hasTargetType()) [ CD ]
Line_23 $$ TypedStringValue typedValue = ((TypedStringValue) arg)-->Line_52 $$ className = typedValue.getValue()[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_5 $$ Assert.notNull(classLoader, "ClassLoader must not be null")[ CD ]
Line_38 $$ ParameterizedType parameterizedType = (ParameterizedType) methodParameterType-->Line_39 $$ Type[] actualTypeArguments = parameterizedType.getActualTypeArguments()[ FD ]
Line_45 $$ String className = null-->Line_52 $$ className = typedValue.getValue()[ FD ]
Line_20 $$ Object arg = args[i]-->Line_22 $$ if (arg instanceof TypedStringValue) [ FD ]
Line_47 $$ className = (String) arg-->Line_57 $$ return ClassUtils.forName(className, classLoader)[ FD ]
Line_21 $$ if (methodParameterType.equals(genericReturnType)) -->Line_37 $$ if (methodParameterType instanceof ParameterizedType) [ CD ]
Line_21 $$ if (methodParameterType.equals(genericReturnType)) -->Line_22 $$ if (arg instanceof TypedStringValue) [ CD ]
Line_46 $$ if (arg instanceof String) -->Line_47 $$ className = (String) arg[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_4 $$ Assert.notNull(args, "Argument array must not be null")[ CD ]
Line_23 $$ TypedStringValue typedValue = ((TypedStringValue) arg)-->Line_24 $$ if (typedValue.hasTargetType()) [ FD ]
Line_11 $$ for (TypeVariable<Method> currentTypeVariable : declaredTypeVariables) -->Line_12 $$ if (currentTypeVariable.equals(genericReturnType)) [ FD ]
Line_7 $$ Type genericReturnType = method.getGenericReturnType()-->Line_21 $$ if (methodParameterType.equals(genericReturnType)) [ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_7 $$ Type genericReturnType = method.getGenericReturnType()[ CD ]
Line_20 $$ Object arg = args[i]-->Line_48 $$ if (arg instanceof TypedStringValue) [ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_6 $$ TypeVariable<Method>[] declaredTypeVariables = method.getTypeParameters()[ CD ]
Line_33 $$ if (arg != null && !(arg instanceof BeanMetadataElement)) -->Line_34 $$ return arg.getClass()[ CD ]
Line_10 $$ boolean locallyDeclaredTypeVariableMatchesReturnType = false-->Line_13 $$ locallyDeclaredTypeVariableMatchesReturnType = true[ FD ]
Line_20 $$ Object arg = args[i]-->Line_46 $$ if (arg instanceof String) [ FD ]
Line_37 $$ if (methodParameterType instanceof ParameterizedType) -->Line_39 $$ Type[] actualTypeArguments = parameterizedType.getActualTypeArguments()[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_8 $$ Type[] methodParameterTypes = method.getGenericParameterTypes()[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_57 $$ return ClassUtils.forName(className, classLoader)[ FD ]
Line_21 $$ if (methodParameterType.equals(genericReturnType)) -->Line_33 $$ if (arg != null && !(arg instanceof BeanMetadataElement)) [ CD ]
Line_50 $$ String targetTypeName = typedValue.getTargetTypeName()-->Line_51 $$ if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) [ FD ]
Line_42 $$ if (arg instanceof Class) -->Line_55 $$ if (className != null) [ CD ]
Line_48 $$ if (arg instanceof TypedStringValue) -->Line_51 $$ if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) [ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_4 $$ Assert.notNull(args, "Argument array must not be null")[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_28 $$ return typedValue.resolveTargetType(classLoader)[ FD ]
Line_18 $$ for (int i = 0; i < methodParameterTypes.length; i++) -->Line_21 $$ if (methodParameterType.equals(genericReturnType)) [ CD ]
Line_45 $$ String className = null-->Line_57 $$ return ClassUtils.forName(className, classLoader)[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_69 $$ return method.getReturnType()[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_8 $$ Type[] methodParameterTypes = method.getGenericParameterTypes()[ CD ]
Line_42 $$ if (arg instanceof Class) -->Line_46 $$ if (arg instanceof String) [ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_3 $$ Assert.notNull(method, "Method must not be null")[ FD ]
Line_7 $$ Type genericReturnType = method.getGenericReturnType()-->Line_12 $$ if (currentTypeVariable.equals(genericReturnType)) [ FD ]
Line_45 $$ String className = null-->Line_55 $$ if (className != null) [ FD ]
Line_23 $$ TypedStringValue typedValue = ((TypedStringValue) arg)-->Line_28 $$ return typedValue.resolveTargetType(classLoader)[ FD ]
Line_46 $$ if (arg instanceof String) -->Line_48 $$ if (arg instanceof TypedStringValue) [ CD ]
Line_42 $$ if (arg instanceof Class) -->Line_62 $$ return method.getReturnType()[ CD ]
Line_20 $$ Object arg = args[i]-->Line_42 $$ if (arg instanceof Class) [ FD ]
Line_51 $$ if (targetTypeName == null || Class.class.getName().equals(targetTypeName)) -->Line_52 $$ className = typedValue.getValue()[ CD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_5 $$ Assert.notNull(classLoader, "ClassLoader must not be null")[ FD ]
Line_21 $$ if (methodParameterType.equals(genericReturnType)) -->Line_36 $$ return method.getReturnType()[ CD ]
Line_18 $$ for (int i = 0; i < methodParameterTypes.length; i++) -->Line_20 $$ Object arg = args[i][ CD ]
Line_47 $$ className = (String) arg-->Line_52 $$ className = typedValue.getValue()[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_7 $$ Type genericReturnType = method.getGenericReturnType()[ FD ]
Line_23 $$ TypedStringValue typedValue = ((TypedStringValue) arg)-->Line_25 $$ return typedValue.getTargetType()[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_62 $$ return method.getReturnType()[ FD ]
Line_7 $$ Type genericReturnType = method.getGenericReturnType()-->Line_41 $$ if (typeArg.equals(genericReturnType)) [ FD ]
Line_12 $$ if (currentTypeVariable.equals(genericReturnType)) -->Line_13 $$ locallyDeclaredTypeVariableMatchesReturnType = true[ CD ]
Line_20 $$ Object arg = args[i]-->Line_34 $$ return arg.getClass()[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_17 $$ if (locallyDeclaredTypeVariableMatchesReturnType) [ CD ]
Line_42 $$ if (arg instanceof Class) -->Line_43 $$ return (Class<?>) arg[ CD ]
Line_24 $$ if (typedValue.hasTargetType()) -->Line_25 $$ return typedValue.getTargetType()[ CD ]
Line_40 $$ for (Type typeArg : actualTypeArguments) -->Line_41 $$ if (typeArg.equals(genericReturnType)) [ FD ]
Line_22 $$ if (arg instanceof TypedStringValue) -->Line_23 $$ TypedStringValue typedValue = ((TypedStringValue) arg)[ CD ]
Line_23 $$ TypedStringValue typedValue = ((TypedStringValue) arg)-->Line_30 $$ throw new IllegalStateException("Failed to resolve value type [" + typedValue.getTargetTypeName() + "] for factory method argument", ex)[ FD ]
Line_2 $$ public static Class<?> resolveReturnTypeForFactoryMethod(Method method, Object[] args, ClassLoader classLoader) -->Line_10 $$ boolean locallyDeclaredTypeVariableMatchesReturnType = false[ CD ]
