Line_6 $$ if (!name.startsWith(GETTER_PREFIX)) -->Line_7 $$ getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)[ CD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_7 $$ getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)[ FD ]
Line_5 $$ String getterMethodName = name-->Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ FD ]
Line_5 $$ String getterMethodName = name-->Line_9 $$ Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_6 $$ if (!name.startsWith(GETTER_PREFIX)) [ CD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_4 $$ Assert.hasText(name, "Method name must not be empty")[ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_11 $$ getterMethodName = name[ FD ]
Line_17 $$ if (logger.isDebugEnabled()) -->Line_18 $$ logger.debug("Invoking getter method '" + getterMethodName + "' on target [" + target + "]")[ CD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_9 $$ Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ CD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_10 $$ if (method == null && !getterMethodName.equals(name)) [ CD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_17 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ FD ]
Line_5 $$ String getterMethodName = name-->Line_11 $$ getterMethodName = name[ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_21 $$ return ReflectionUtils.invokeMethod(method, target)[ CD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_5 $$ String getterMethodName = name[ CD ]
Line_11 $$ getterMethodName = name-->Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ FD ]
Line_9 $$ Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)-->Line_20 $$ ReflectionUtils.makeAccessible(method)[ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_14 $$ if (method == null) [ CD ]
Line_7 $$ getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)-->Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ FD ]
Line_7 $$ getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)-->Line_11 $$ getterMethodName = name[ FD ]
Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)-->Line_14 $$ if (method == null) [ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_20 $$ ReflectionUtils.makeAccessible(method)[ CD ]
Line_10 $$ if (method == null && !getterMethodName.equals(name)) -->Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ CD ]
Line_9 $$ Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)-->Line_14 $$ if (method == null) [ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_3 $$ Assert.notNull(target, "Target object must not be null")[ FD ]
Line_7 $$ getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)-->Line_10 $$ if (method == null && !getterMethodName.equals(name)) [ FD ]
Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)-->Line_21 $$ return ReflectionUtils.invokeMethod(method, target)[ FD ]
Line_10 $$ if (method == null && !getterMethodName.equals(name)) -->Line_11 $$ getterMethodName = name[ CD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_10 $$ if (method == null && !getterMethodName.equals(name)) [ FD ]
Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)-->Line_20 $$ ReflectionUtils.makeAccessible(method)[ FD ]
Line_9 $$ Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)-->Line_21 $$ return ReflectionUtils.invokeMethod(method, target)[ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_6 $$ if (!name.startsWith(GETTER_PREFIX)) [ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_9 $$ Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_4 $$ Assert.hasText(name, "Method name must not be empty")[ CD ]
Line_5 $$ String getterMethodName = name-->Line_7 $$ getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)[ FD ]
Line_5 $$ String getterMethodName = name-->Line_10 $$ if (method == null && !getterMethodName.equals(name)) [ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_21 $$ return ReflectionUtils.invokeMethod(method, target)[ FD ]
Line_7 $$ getterMethodName = GETTER_PREFIX + StringUtils.capitalize(name)-->Line_9 $$ Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ FD ]
Line_2 $$ public static Object invokeGetterMethod(Object target, String name) -->Line_3 $$ Assert.notNull(target, "Target object must not be null")[ CD ]
Line_9 $$ Method method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)-->Line_12 $$ method = ReflectionUtils.findMethod(target.getClass(), getterMethodName)[ FD ]
