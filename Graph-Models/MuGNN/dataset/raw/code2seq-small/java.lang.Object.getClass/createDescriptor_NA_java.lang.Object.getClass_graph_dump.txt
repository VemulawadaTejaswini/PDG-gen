Line_4 $$ VirtualFile file = ((FileElement) element).getFile()-->Line_6 $$ String name = file == null ? null : myChooserDescriptor.getName(file)[ FD ]
Line_2 $$ public NodeDescriptor createDescriptor(Object element, NodeDescriptor parentDescriptor) -->Line_6 $$ String name = file == null ? null : myChooserDescriptor.getName(file)[ CD ]
Line_2 $$ public NodeDescriptor createDescriptor(Object element, NodeDescriptor parentDescriptor) -->Line_8 $$ return new FileNodeDescriptor(myProject, (FileElement) element, parentDescriptor, closedIcon, name, comment)[ CD ]
Line_2 $$ public NodeDescriptor createDescriptor(Object element, NodeDescriptor parentDescriptor) -->Line_7 $$ String comment = file == null ? null : myChooserDescriptor.getComment(file)[ CD ]
Line_2 $$ public NodeDescriptor createDescriptor(Object element, NodeDescriptor parentDescriptor) -->Line_4 $$ VirtualFile file = ((FileElement) element).getFile()[ CD ]
Line_2 $$ public NodeDescriptor createDescriptor(Object element, NodeDescriptor parentDescriptor) -->Line_3 $$ LOG.assertTrue(element instanceof FileElement, element.getClass().getName())[ CD ]
Line_4 $$ VirtualFile file = ((FileElement) element).getFile()-->Line_5 $$ Icon closedIcon = file == null ? null : myChooserDescriptor.getIcon(file)[ FD ]
Line_2 $$ public NodeDescriptor createDescriptor(Object element, NodeDescriptor parentDescriptor) -->Line_5 $$ Icon closedIcon = file == null ? null : myChooserDescriptor.getIcon(file)[ CD ]
Line_4 $$ VirtualFile file = ((FileElement) element).getFile()-->Line_7 $$ String comment = file == null ? null : myChooserDescriptor.getComment(file)[ FD ]
Line_2 $$ public NodeDescriptor createDescriptor(Object element, NodeDescriptor parentDescriptor) -->Line_3 $$ LOG.assertTrue(element instanceof FileElement, element.getClass().getName())[ FD ]
