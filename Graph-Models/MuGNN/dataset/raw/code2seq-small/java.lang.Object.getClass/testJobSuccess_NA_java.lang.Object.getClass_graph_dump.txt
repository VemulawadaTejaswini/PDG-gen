Line_4 $$ JobImpl job = (JobImpl) app.submit(new Configuration())-->Line_5 $$ app.waitForInternalState(job, JobStateInternal.SUCCEEDED)[ FD ]
Line_4 $$ JobImpl job = (JobImpl) app.submit(new Configuration())-->Line_8 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_3 $$ MRApp app = new MRApp(2, 2, true, this.getClass().getName(), true, false)-->Line_8 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testJobSuccess() throws Exception -->Line_6 $$ Assert.assertEquals(JobState.RUNNING, job.getState())[ CD ]
Line_2 $$ public void testJobSuccess() throws Exception -->Line_5 $$ app.waitForInternalState(job, JobStateInternal.SUCCEEDED)[ CD ]
Line_2 $$ public void testJobSuccess() throws Exception -->Line_8 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_3 $$ MRApp app = new MRApp(2, 2, true, this.getClass().getName(), true, false)-->Line_4 $$ JobImpl job = (JobImpl) app.submit(new Configuration())[ FD ]
Line_2 $$ public void testJobSuccess() throws Exception -->Line_4 $$ JobImpl job = (JobImpl) app.submit(new Configuration())[ CD ]
Line_2 $$ public void testJobSuccess() throws Exception -->Line_7 $$ app.successfullyUnregistered.set(true)[ CD ]
Line_3 $$ MRApp app = new MRApp(2, 2, true, this.getClass().getName(), true, false)-->Line_5 $$ app.waitForInternalState(job, JobStateInternal.SUCCEEDED)[ FD ]
Line_4 $$ JobImpl job = (JobImpl) app.submit(new Configuration())-->Line_6 $$ Assert.assertEquals(JobState.RUNNING, job.getState())[ FD ]
Line_2 $$ public void testJobSuccess() throws Exception -->Line_3 $$ MRApp app = new MRApp(2, 2, true, this.getClass().getName(), true, false)[ CD ]
