Line_7 $$ Log<Set<String>> familyMembersLog = new Log()-->Line_27 $$ recordReadWrite(id, before, after, failure, familyNameUpdate, familyMembersUpdate, familyNameLog, familyMembersLog)[ FD ]
Line_8 $$ boolean failure = false-->Line_27 $$ recordReadWrite(id, before, after, failure, familyNameUpdate, familyMembersUpdate, familyNameLog, familyMembersLog)[ FD ]
Line_6 $$ Log<String> familyNameLog = new Log()-->Line_17 $$ familyNameLog.setValue(f.getName())[ FD ]
Line_3 $$ int id = randomFamilyId(ThreadLocalRandom.current())-->Line_15 $$ familyNotFound(id)[ FD ]
Line_23 $$ failure = true-->Line_27 $$ recordReadWrite(id, before, after, failure, familyNameUpdate, familyMembersUpdate, familyNameLog, familyMembersLog)[ FD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_3 $$ int id = randomFamilyId(ThreadLocalRandom.current())[ CD ]
Line_6 $$ Log<String> familyNameLog = new Log()-->Line_27 $$ recordReadWrite(id, before, after, failure, familyNameUpdate, familyMembersUpdate, familyNameLog, familyMembersLog)[ FD ]
Line_12 $$ if (f == null) -->Line_17 $$ familyNameLog.setValue(f.getName())[ CD ]
Line_3 $$ int id = randomFamilyId(ThreadLocalRandom.current())-->Line_27 $$ recordReadWrite(id, before, after, failure, familyNameUpdate, familyMembersUpdate, familyNameLog, familyMembersLog)[ FD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_7 $$ Log<Set<String>> familyMembersLog = new Log()[ CD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_27 $$ recordReadWrite(id, before, after, failure, familyNameUpdate, familyMembersUpdate, familyNameLog, familyMembersLog)[ FD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_11 $$ Family f = lockMode != null ? s.get(Family.class, id, lockMode) : s.get(Family.class, id)[ FD ]
Line_11 $$ Family f = lockMode != null ? s.get(Family.class, id, lockMode) : s.get(Family.class, id)-->Line_19 $$ consumer.accept(s, f)[ FD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_5 $$ log.tracef("Started %s(%d, %s) at %d", getClass().getSimpleName(), id, rolledBack, before)[ CD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_4 $$ int before = timestampGenerator.getAndIncrement()[ CD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_8 $$ boolean failure = false[ CD ]
Line_6 $$ Log<String> familyNameLog = new Log()-->Line_13 $$ familyNameLog.setValue(null)[ FD ]
Line_3 $$ int id = randomFamilyId(ThreadLocalRandom.current())-->Line_11 $$ Family f = lockMode != null ? s.get(Family.class, id, lockMode) : s.get(Family.class, id)[ FD ]
Line_7 $$ Log<Set<String>> familyMembersLog = new Log()-->Line_14 $$ familyMembersLog.setValue(Collections.EMPTY_SET)[ FD ]
Line_7 $$ Log<Set<String>> familyMembersLog = new Log()-->Line_18 $$ familyMembersLog.setValue(membersToNames(f.getMembers()))[ FD ]
Line_12 $$ if (f == null) -->Line_13 $$ familyNameLog.setValue(null)[ CD ]
Line_12 $$ if (f == null) -->Line_18 $$ familyMembersLog.setValue(membersToNames(f.getMembers()))[ CD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_19 $$ consumer.accept(s, f)[ FD ]
Line_12 $$ if (f == null) -->Line_14 $$ familyMembersLog.setValue(Collections.EMPTY_SET)[ CD ]
Line_11 $$ Family f = lockMode != null ? s.get(Family.class, id, lockMode) : s.get(Family.class, id)-->Line_17 $$ familyNameLog.setValue(f.getName())[ FD ]
Line_11 $$ Family f = lockMode != null ? s.get(Family.class, id, lockMode) : s.get(Family.class, id)-->Line_18 $$ familyMembersLog.setValue(membersToNames(f.getMembers()))[ FD ]
Line_26 $$ int after = timestampGenerator.getAndIncrement()-->Line_27 $$ recordReadWrite(id, before, after, failure, familyNameUpdate, familyMembersUpdate, familyNameLog, familyMembersLog)[ FD ]
Line_12 $$ if (f == null) -->Line_15 $$ familyNotFound(id)[ CD ]
Line_11 $$ Family f = lockMode != null ? s.get(Family.class, id, lockMode) : s.get(Family.class, id)-->Line_12 $$ if (f == null) [ FD ]
Line_2 $$ protected void withRandomFamily(BiConsumer<Session, Family> consumer, Ref<String> familyNameUpdate, Ref<Set<String>> familyMembersUpdate, LockMode lockMode) throws Exception -->Line_6 $$ Log<String> familyNameLog = new Log()[ CD ]
Line_4 $$ int before = timestampGenerator.getAndIncrement()-->Line_5 $$ log.tracef("Started %s(%d, %s) at %d", getClass().getSimpleName(), id, rolledBack, before)[ FD ]
Line_4 $$ int before = timestampGenerator.getAndIncrement()-->Line_27 $$ recordReadWrite(id, before, after, failure, familyNameUpdate, familyMembersUpdate, familyNameLog, familyMembersLog)[ FD ]
Line_12 $$ if (f == null) -->Line_19 $$ consumer.accept(s, f)[ CD ]
Line_3 $$ int id = randomFamilyId(ThreadLocalRandom.current())-->Line_5 $$ log.tracef("Started %s(%d, %s) at %d", getClass().getSimpleName(), id, rolledBack, before)[ FD ]
Line_8 $$ boolean failure = false-->Line_23 $$ failure = true[ FD ]
