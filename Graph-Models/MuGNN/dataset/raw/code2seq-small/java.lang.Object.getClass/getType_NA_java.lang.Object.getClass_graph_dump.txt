Line_15 $$ if (parentBeanFactory != null && !containsBeanDefinition(beanName)) -->Line_16 $$ return parentBeanFactory.getType(originalBeanName(name))[ CD ]
Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) -->Line_28 $$ if (beanClass != null && FactoryBean.class.isAssignableFrom(beanClass)) [ CD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_5 $$ if (beanInstance != null) [ CD ]
Line_21 $$ RootBeanDefinition tbd = getMergedBeanDefinition(dbd.getBeanName(), dbd.getBeanDefinition(), mbd)-->Line_22 $$ Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd)[ FD ]
Line_19 $$ BeanDefinitionHolder dbd = mbd.getDecoratedDefinition()-->Line_21 $$ RootBeanDefinition tbd = getMergedBeanDefinition(dbd.getBeanName(), dbd.getBeanDefinition(), mbd)[ FD ]
Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) -->Line_20 $$ if (dbd != null && !BeanFactoryUtils.isFactoryDereference(name)) [ CD ]
Line_5 $$ if (beanInstance != null) -->Line_6 $$ if (beanInstance instanceof FactoryBean && !BeanFactoryUtils.isFactoryDereference(name)) [ CD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_4 $$ Object beanInstance = getSingleton(beanName, false)[ CD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_3 $$ String beanName = transformedBeanName(name)[ CD ]
Line_3 $$ String beanName = transformedBeanName(name)-->Line_30 $$ return getTypeForFactoryBean(beanName, mbd)[ FD ]
Line_18 $$ RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_27 $$ Class<?> beanClass = predictBeanType(beanName, mbd)[ FD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_35 $$ return (!BeanFactoryUtils.isFactoryDereference(name) ? beanClass : null)[ FD ]
Line_27 $$ Class<?> beanClass = predictBeanType(beanName, mbd)-->Line_28 $$ if (beanClass != null && FactoryBean.class.isAssignableFrom(beanClass)) [ FD ]
Line_28 $$ if (beanClass != null && FactoryBean.class.isAssignableFrom(beanClass)) -->Line_35 $$ return (!BeanFactoryUtils.isFactoryDereference(name) ? beanClass : null)[ CD ]
Line_18 $$ RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_19 $$ BeanDefinitionHolder dbd = mbd.getDecoratedDefinition()[ FD ]
Line_20 $$ if (dbd != null && !BeanFactoryUtils.isFactoryDereference(name)) -->Line_22 $$ Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd)[ CD ]
Line_14 $$ BeanFactory parentBeanFactory = getParentBeanFactory()-->Line_16 $$ return parentBeanFactory.getType(originalBeanName(name))[ FD ]
Line_22 $$ Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd)-->Line_23 $$ if (targetClass != null && !FactoryBean.class.isAssignableFrom(targetClass)) [ FD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_3 $$ String beanName = transformedBeanName(name)[ FD ]
Line_5 $$ if (beanInstance != null) -->Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) [ CD ]
Line_20 $$ if (dbd != null && !BeanFactoryUtils.isFactoryDereference(name)) -->Line_21 $$ RootBeanDefinition tbd = getMergedBeanDefinition(dbd.getBeanName(), dbd.getBeanDefinition(), mbd)[ CD ]
Line_18 $$ RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_21 $$ RootBeanDefinition tbd = getMergedBeanDefinition(dbd.getBeanName(), dbd.getBeanDefinition(), mbd)[ FD ]
Line_28 $$ if (beanClass != null && FactoryBean.class.isAssignableFrom(beanClass)) -->Line_29 $$ if (!BeanFactoryUtils.isFactoryDereference(name)) [ CD ]
Line_3 $$ String beanName = transformedBeanName(name)-->Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) [ FD ]
Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) -->Line_19 $$ BeanDefinitionHolder dbd = mbd.getDecoratedDefinition()[ CD ]
Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) -->Line_18 $$ RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)[ CD ]
Line_3 $$ String beanName = transformedBeanName(name)-->Line_18 $$ RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)[ FD ]
Line_20 $$ if (dbd != null && !BeanFactoryUtils.isFactoryDereference(name)) -->Line_23 $$ if (targetClass != null && !FactoryBean.class.isAssignableFrom(targetClass)) [ CD ]
Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) -->Line_12 $$ return null[ CD ]
Line_6 $$ if (beanInstance instanceof FactoryBean && !BeanFactoryUtils.isFactoryDereference(name)) -->Line_7 $$ return getTypeForFactoryBean((FactoryBean<?>) beanInstance)[ CD ]
Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) -->Line_27 $$ Class<?> beanClass = predictBeanType(beanName, mbd)[ CD ]
Line_19 $$ BeanDefinitionHolder dbd = mbd.getDecoratedDefinition()-->Line_22 $$ Class<?> targetClass = predictBeanType(dbd.getBeanName(), tbd)[ FD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_20 $$ if (dbd != null && !BeanFactoryUtils.isFactoryDereference(name)) [ FD ]
Line_18 $$ RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_30 $$ return getTypeForFactoryBean(beanName, mbd)[ FD ]
Line_23 $$ if (targetClass != null && !FactoryBean.class.isAssignableFrom(targetClass)) -->Line_24 $$ return targetClass[ CD ]
Line_4 $$ Object beanInstance = getSingleton(beanName, false)-->Line_9 $$ return beanInstance.getClass()[ FD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_29 $$ if (!BeanFactoryUtils.isFactoryDereference(name)) [ FD ]
Line_3 $$ String beanName = transformedBeanName(name)-->Line_15 $$ if (parentBeanFactory != null && !containsBeanDefinition(beanName)) [ FD ]
Line_29 $$ if (!BeanFactoryUtils.isFactoryDereference(name)) -->Line_30 $$ return getTypeForFactoryBean(beanName, mbd)[ CD ]
Line_6 $$ if (beanInstance instanceof FactoryBean && !BeanFactoryUtils.isFactoryDereference(name)) -->Line_9 $$ return beanInstance.getClass()[ CD ]
Line_4 $$ Object beanInstance = getSingleton(beanName, false)-->Line_5 $$ if (beanInstance != null) [ FD ]
Line_29 $$ if (!BeanFactoryUtils.isFactoryDereference(name)) -->Line_32 $$ return beanClass[ CD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_6 $$ if (beanInstance instanceof FactoryBean && !BeanFactoryUtils.isFactoryDereference(name)) [ FD ]
Line_3 $$ String beanName = transformedBeanName(name)-->Line_4 $$ Object beanInstance = getSingleton(beanName, false)[ FD ]
Line_2 $$ public Class<?> getType(String name) throws NoSuchBeanDefinitionException -->Line_16 $$ return parentBeanFactory.getType(originalBeanName(name))[ FD ]
Line_3 $$ String beanName = transformedBeanName(name)-->Line_27 $$ Class<?> beanClass = predictBeanType(beanName, mbd)[ FD ]
Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) -->Line_15 $$ if (parentBeanFactory != null && !containsBeanDefinition(beanName)) [ CD ]
Line_11 $$ if (containsSingleton(beanName) && !containsBeanDefinition(beanName)) -->Line_14 $$ BeanFactory parentBeanFactory = getParentBeanFactory()[ CD ]
