Line_7 $$ final Ref<String> errorMessage = new Ref<String>()-->Line_11 $$ if (!errorMessage.isNull()) [ FD ]
Line_8 $$ Runnable onFinish = new Runnable() -->Line_22 $$ ((BackgroundOperatingDiffElement) source).delete(errorMessage, onFinish)[ FD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement || target instanceof BackgroundOperatingDiffElement) -->Line_21 $$ if (source != null) [ CD ]
Line_10 $$ if (!myDisposed) -->Line_11 $$ if (!errorMessage.isNull()) [ CD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement || target instanceof BackgroundOperatingDiffElement) -->Line_30 $$ final AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(getClass())[ CD ]
Line_27 $$ if (myElements.indexOf(element) != -1) -->Line_28 $$ removeElement(element, true)[ CD ]
Line_32 $$ if (source != null) -->Line_33 $$ source.delete()[ CD ]
Line_7 $$ final Ref<String> errorMessage = new Ref<String>()-->Line_22 $$ ((BackgroundOperatingDiffElement) source).delete(errorMessage, onFinish)[ FD ]
Line_3 $$ final DiffElement source = element.getSource()-->Line_33 $$ source.delete()[ FD ]
Line_21 $$ if (source != null) -->Line_22 $$ ((BackgroundOperatingDiffElement) source).delete(errorMessage, onFinish)[ CD ]
Line_3 $$ final DiffElement source = element.getSource()-->Line_21 $$ if (source != null) [ FD ]
Line_35 $$ if (target != null) -->Line_36 $$ target.delete()[ CD ]
Line_8 $$ Runnable onFinish = new Runnable() -->Line_24 $$ ((BackgroundOperatingDiffElement) target).delete(errorMessage, onFinish)[ FD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_28 $$ removeElement(element, true)[ FD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_15 $$ removeElement(element, true)[ FD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_3 $$ final DiffElement source = element.getSource()[ CD ]
Line_7 $$ final Ref<String> errorMessage = new Ref<String>()-->Line_12 $$ reportException(errorMessage.get())[ FD ]
Line_4 $$ final DiffElement target = element.getTarget()-->Line_36 $$ target.delete()[ FD ]
Line_3 $$ final DiffElement source = element.getSource()-->Line_32 $$ if (source != null) [ FD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement || target instanceof BackgroundOperatingDiffElement) -->Line_7 $$ final Ref<String> errorMessage = new Ref<String>()[ CD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_6 $$ if (source instanceof BackgroundOperatingDiffElement || target instanceof BackgroundOperatingDiffElement) [ CD ]
Line_11 $$ if (!errorMessage.isNull()) -->Line_14 $$ if (myElements.indexOf(element) != -1) [ CD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement || target instanceof BackgroundOperatingDiffElement) -->Line_8 $$ Runnable onFinish = new Runnable() [ CD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_14 $$ if (myElements.indexOf(element) != -1) [ FD ]
Line_4 $$ final DiffElement target = element.getTarget()-->Line_35 $$ if (target != null) [ FD ]
Line_21 $$ if (source != null) -->Line_24 $$ ((BackgroundOperatingDiffElement) target).delete(errorMessage, onFinish)[ CD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_4 $$ final DiffElement target = element.getTarget()[ CD ]
Line_11 $$ if (!errorMessage.isNull()) -->Line_12 $$ reportException(errorMessage.get())[ CD ]
Line_7 $$ final Ref<String> errorMessage = new Ref<String>()-->Line_24 $$ ((BackgroundOperatingDiffElement) target).delete(errorMessage, onFinish)[ FD ]
Line_8 $$ Runnable onFinish = new Runnable() -->Line_10 $$ if (!myDisposed) [ CD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_27 $$ if (myElements.indexOf(element) != -1) [ FD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_3 $$ final DiffElement source = element.getSource()[ FD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_5 $$ LOG.assertTrue(source == null || target == null)[ CD ]
Line_6 $$ if (source instanceof BackgroundOperatingDiffElement || target instanceof BackgroundOperatingDiffElement) -->Line_27 $$ if (myElements.indexOf(element) != -1) [ CD ]
Line_2 $$ public void performDelete(final DirDiffElementImpl element) -->Line_4 $$ final DiffElement target = element.getTarget()[ FD ]
Line_14 $$ if (myElements.indexOf(element) != -1) -->Line_15 $$ removeElement(element, true)[ CD ]
