Line_3 $$ int result = 0-->Line_16 $$ result = result + 2[ FD ]
Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) -->Line_16 $$ result = result + 2[ CD ]
Line_19 $$ superClass = null-->Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) [ FD ]
Line_14 $$ superClass = null-->Line_11 $$ while (superClass != null) [ FD ]
Line_4 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_8 $$ if (args[i] != null) [ CD ]
Line_9 $$ Class<?> paramType = paramTypes[i]-->Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) [ FD ]
Line_11 $$ while (superClass != null) -->Line_12 $$ if (paramType.equals(superClass)) [ CD ]
Line_4 $$ for (int i = 0; i < paramTypes.length; i++) -->Line_5 $$ if (!ClassUtils.isAssignableValue(paramTypes[i], args[i])) [ CD ]
Line_17 $$ superClass = superClass.getSuperclass()-->Line_12 $$ if (paramType.equals(superClass)) [ FD ]
Line_10 $$ Class<?> superClass = args[i].getClass().getSuperclass()-->Line_17 $$ superClass = superClass.getSuperclass()[ FD ]
Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) -->Line_19 $$ superClass = null[ CD ]
Line_13 $$ result = result + 2-->Line_23 $$ result = result + 1[ FD ]
Line_3 $$ int result = 0-->Line_13 $$ result = result + 2[ FD ]
Line_22 $$ if (paramType.isInterface()) -->Line_23 $$ result = result + 1[ CD ]
Line_10 $$ Class<?> superClass = args[i].getClass().getSuperclass()-->Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) [ FD ]
Line_2 $$ public static int getTypeDifferenceWeight(Class<?>[] paramTypes, Object[] args) -->Line_4 $$ for (int i = 0; i < paramTypes.length; i++) [ CD ]
Line_14 $$ superClass = null-->Line_19 $$ superClass = null[ FD ]
Line_17 $$ superClass = superClass.getSuperclass()-->Line_19 $$ superClass = null[ FD ]
Line_10 $$ Class<?> superClass = args[i].getClass().getSuperclass()-->Line_19 $$ superClass = null[ FD ]
Line_19 $$ superClass = null-->Line_12 $$ if (paramType.equals(superClass)) [ FD ]
Line_12 $$ if (paramType.equals(superClass)) -->Line_13 $$ result = result + 2[ CD ]
Line_2 $$ public static int getTypeDifferenceWeight(Class<?>[] paramTypes, Object[] args) -->Line_3 $$ int result = 0[ CD ]
Line_10 $$ Class<?> superClass = args[i].getClass().getSuperclass()-->Line_14 $$ superClass = null[ FD ]
Line_2 $$ public static int getTypeDifferenceWeight(Class<?>[] paramTypes, Object[] args) -->Line_27 $$ return result[ CD ]
Line_9 $$ Class<?> paramType = paramTypes[i]-->Line_12 $$ if (paramType.equals(superClass)) [ FD ]
Line_8 $$ if (args[i] != null) -->Line_11 $$ while (superClass != null) [ CD ]
Line_5 $$ if (!ClassUtils.isAssignableValue(paramTypes[i], args[i])) -->Line_6 $$ return Integer.MAX_VALUE[ CD ]
Line_16 $$ result = result + 2-->Line_23 $$ result = result + 1[ FD ]
Line_19 $$ superClass = null-->Line_11 $$ while (superClass != null) [ FD ]
Line_17 $$ superClass = superClass.getSuperclass()-->Line_11 $$ while (superClass != null) [ FD ]
Line_8 $$ if (args[i] != null) -->Line_10 $$ Class<?> superClass = args[i].getClass().getSuperclass()[ CD ]
Line_14 $$ superClass = null-->Line_17 $$ superClass = superClass.getSuperclass()[ FD ]
Line_14 $$ superClass = null-->Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) [ FD ]
Line_8 $$ if (args[i] != null) -->Line_9 $$ Class<?> paramType = paramTypes[i][ CD ]
Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) -->Line_17 $$ superClass = superClass.getSuperclass()[ CD ]
Line_19 $$ superClass = null-->Line_17 $$ superClass = superClass.getSuperclass()[ FD ]
Line_8 $$ if (args[i] != null) -->Line_22 $$ if (paramType.isInterface()) [ CD ]
Line_12 $$ if (paramType.equals(superClass)) -->Line_14 $$ superClass = null[ CD ]
Line_13 $$ result = result + 2-->Line_16 $$ result = result + 2[ FD ]
Line_10 $$ Class<?> superClass = args[i].getClass().getSuperclass()-->Line_11 $$ while (superClass != null) [ FD ]
Line_3 $$ int result = 0-->Line_23 $$ result = result + 1[ FD ]
Line_14 $$ superClass = null-->Line_12 $$ if (paramType.equals(superClass)) [ FD ]
Line_17 $$ superClass = superClass.getSuperclass()-->Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) [ FD ]
Line_9 $$ Class<?> paramType = paramTypes[i]-->Line_22 $$ if (paramType.isInterface()) [ FD ]
Line_16 $$ result = result + 2-->Line_13 $$ result = result + 2[ FD ]
Line_12 $$ if (paramType.equals(superClass)) -->Line_15 $$ if (ClassUtils.isAssignable(paramType, superClass)) [ CD ]
Line_10 $$ Class<?> superClass = args[i].getClass().getSuperclass()-->Line_12 $$ if (paramType.equals(superClass)) [ FD ]
