Line_17 $$ inValueToUse = parameterValue.getValue()-->Line_22 $$ if (inValueToUse == null) [ FD ]
Line_22 $$ if (inValueToUse == null) -->Line_23 $$ setNull(ps, paramIndex, sqlTypeToUse, typeNameToUse)[ CD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_25 $$ setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse)[ FD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_6 $$ if (inValue instanceof SqlParameterValue) [ CD ]
Line_4 $$ int sqlTypeToUse = sqlType-->Line_25 $$ setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse)[ FD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_4 $$ int sqlTypeToUse = sqlType[ CD ]
Line_22 $$ if (inValueToUse == null) -->Line_25 $$ setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse)[ CD ]
Line_14 $$ if (parameterValue.getTypeName() != null) -->Line_15 $$ typeNameToUse = parameterValue.getTypeName()[ CD ]
Line_4 $$ int sqlTypeToUse = sqlType-->Line_23 $$ setNull(ps, paramIndex, sqlTypeToUse, typeNameToUse)[ FD ]
Line_6 $$ if (inValue instanceof SqlParameterValue) -->Line_17 $$ inValueToUse = parameterValue.getValue()[ CD ]
Line_5 $$ Object inValueToUse = inValue-->Line_25 $$ setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse)[ FD ]
Line_5 $$ Object inValueToUse = inValue-->Line_17 $$ inValueToUse = parameterValue.getValue()[ FD ]
Line_3 $$ String typeNameToUse = typeName-->Line_15 $$ typeNameToUse = parameterValue.getTypeName()[ FD ]
Line_6 $$ if (inValue instanceof SqlParameterValue) -->Line_11 $$ if (parameterValue.getSqlType() != SqlTypeValue.TYPE_UNKNOWN) [ CD ]
Line_4 $$ int sqlTypeToUse = sqlType-->Line_20 $$ logger.trace("Setting SQL statement parameter value: column index " + paramIndex + ", parameter value [" + inValueToUse + "], value class [" + (inValueToUse != null ? inValueToUse.getClass().getName() : "null") + "], SQL type " + (sqlTypeToUse == SqlTypeValue.TYPE_UNKNOWN ? "unknown" : Integer.toString(sqlTypeToUse)))[ FD ]
Line_15 $$ typeNameToUse = parameterValue.getTypeName()-->Line_23 $$ setNull(ps, paramIndex, sqlTypeToUse, typeNameToUse)[ FD ]
Line_15 $$ typeNameToUse = parameterValue.getTypeName()-->Line_25 $$ setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse)[ FD ]
Line_5 $$ Object inValueToUse = inValue-->Line_20 $$ logger.trace("Setting SQL statement parameter value: column index " + paramIndex + ", parameter value [" + inValueToUse + "], value class [" + (inValueToUse != null ? inValueToUse.getClass().getName() : "null") + "], SQL type " + (sqlTypeToUse == SqlTypeValue.TYPE_UNKNOWN ? "unknown" : Integer.toString(sqlTypeToUse)))[ FD ]
Line_7 $$ SqlParameterValue parameterValue = (SqlParameterValue) inValue-->Line_14 $$ if (parameterValue.getTypeName() != null) [ FD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_23 $$ setNull(ps, paramIndex, sqlTypeToUse, typeNameToUse)[ FD ]
Line_12 $$ sqlTypeToUse = parameterValue.getSqlType()-->Line_23 $$ setNull(ps, paramIndex, sqlTypeToUse, typeNameToUse)[ FD ]
Line_3 $$ String typeNameToUse = typeName-->Line_23 $$ setNull(ps, paramIndex, sqlTypeToUse, typeNameToUse)[ FD ]
Line_6 $$ if (inValue instanceof SqlParameterValue) -->Line_7 $$ SqlParameterValue parameterValue = (SqlParameterValue) inValue[ CD ]
Line_7 $$ SqlParameterValue parameterValue = (SqlParameterValue) inValue-->Line_11 $$ if (parameterValue.getSqlType() != SqlTypeValue.TYPE_UNKNOWN) [ FD ]
Line_7 $$ SqlParameterValue parameterValue = (SqlParameterValue) inValue-->Line_9 $$ logger.debug("Overriding type info with runtime info from SqlParameterValue: column index " + paramIndex + ", SQL type " + parameterValue.getSqlType() + ", type name " + parameterValue.getTypeName())[ FD ]
Line_7 $$ SqlParameterValue parameterValue = (SqlParameterValue) inValue-->Line_15 $$ typeNameToUse = parameterValue.getTypeName()[ FD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_5 $$ Object inValueToUse = inValue[ CD ]
Line_11 $$ if (parameterValue.getSqlType() != SqlTypeValue.TYPE_UNKNOWN) -->Line_12 $$ sqlTypeToUse = parameterValue.getSqlType()[ CD ]
Line_12 $$ sqlTypeToUse = parameterValue.getSqlType()-->Line_20 $$ logger.trace("Setting SQL statement parameter value: column index " + paramIndex + ", parameter value [" + inValueToUse + "], value class [" + (inValueToUse != null ? inValueToUse.getClass().getName() : "null") + "], SQL type " + (sqlTypeToUse == SqlTypeValue.TYPE_UNKNOWN ? "unknown" : Integer.toString(sqlTypeToUse)))[ FD ]
Line_7 $$ SqlParameterValue parameterValue = (SqlParameterValue) inValue-->Line_17 $$ inValueToUse = parameterValue.getValue()[ FD ]
Line_3 $$ String typeNameToUse = typeName-->Line_25 $$ setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse)[ FD ]
Line_6 $$ if (inValue instanceof SqlParameterValue) -->Line_8 $$ if (logger.isDebugEnabled()) [ CD ]
Line_4 $$ int sqlTypeToUse = sqlType-->Line_12 $$ sqlTypeToUse = parameterValue.getSqlType()[ FD ]
Line_17 $$ inValueToUse = parameterValue.getValue()-->Line_20 $$ logger.trace("Setting SQL statement parameter value: column index " + paramIndex + ", parameter value [" + inValueToUse + "], value class [" + (inValueToUse != null ? inValueToUse.getClass().getName() : "null") + "], SQL type " + (sqlTypeToUse == SqlTypeValue.TYPE_UNKNOWN ? "unknown" : Integer.toString(sqlTypeToUse)))[ FD ]
Line_19 $$ if (logger.isTraceEnabled()) -->Line_20 $$ logger.trace("Setting SQL statement parameter value: column index " + paramIndex + ", parameter value [" + inValueToUse + "], value class [" + (inValueToUse != null ? inValueToUse.getClass().getName() : "null") + "], SQL type " + (sqlTypeToUse == SqlTypeValue.TYPE_UNKNOWN ? "unknown" : Integer.toString(sqlTypeToUse)))[ CD ]
Line_17 $$ inValueToUse = parameterValue.getValue()-->Line_25 $$ setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse)[ FD ]
Line_8 $$ if (logger.isDebugEnabled()) -->Line_9 $$ logger.debug("Overriding type info with runtime info from SqlParameterValue: column index " + paramIndex + ", SQL type " + parameterValue.getSqlType() + ", type name " + parameterValue.getTypeName())[ CD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_22 $$ if (inValueToUse == null) [ CD ]
Line_12 $$ sqlTypeToUse = parameterValue.getSqlType()-->Line_25 $$ setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse)[ FD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_6 $$ if (inValue instanceof SqlParameterValue) [ FD ]
Line_7 $$ SqlParameterValue parameterValue = (SqlParameterValue) inValue-->Line_12 $$ sqlTypeToUse = parameterValue.getSqlType()[ FD ]
Line_6 $$ if (inValue instanceof SqlParameterValue) -->Line_14 $$ if (parameterValue.getTypeName() != null) [ CD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_19 $$ if (logger.isTraceEnabled()) [ CD ]
Line_5 $$ Object inValueToUse = inValue-->Line_22 $$ if (inValueToUse == null) [ FD ]
Line_2 $$ private static void setParameterValueInternal(PreparedStatement ps, int paramIndex, int sqlType, String typeName, Integer scale, Object inValue) throws SQLException -->Line_3 $$ String typeNameToUse = typeName[ CD ]
