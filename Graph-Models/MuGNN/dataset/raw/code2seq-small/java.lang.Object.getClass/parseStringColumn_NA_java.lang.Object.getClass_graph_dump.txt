Line_5 $$ Object fieldData = rowInspector.getStructFieldData(rowData, structFields[column])-->Line_6 $$ if (fieldData == null) [ FD ]
Line_2 $$ private void parseStringColumn(int column) -->Line_6 $$ if (fieldData == null) [ CD ]
Line_13 $$ if (fieldValue instanceof byte[]) -->Line_14 $$ slices[column] = Slices.wrappedBuffer((byte[]) fieldValue)[ CD ]
Line_5 $$ Object fieldData = rowInspector.getStructFieldData(rowData, structFields[column])-->Line_9 $$ Object fieldValue = ((PrimitiveObjectInspector) fieldInspectors[column]).getPrimitiveJavaObject(fieldData)[ FD ]
Line_2 $$ private void parseStringColumn(int column) -->Line_4 $$ loaded[column] = true[ CD ]
Line_9 $$ Object fieldValue = ((PrimitiveObjectInspector) fieldInspectors[column]).getPrimitiveJavaObject(fieldData)-->Line_11 $$ if (fieldValue instanceof String) [ FD ]
Line_6 $$ if (fieldData == null) -->Line_7 $$ nulls[column] = true[ CD ]
Line_9 $$ Object fieldValue = ((PrimitiveObjectInspector) fieldInspectors[column]).getPrimitiveJavaObject(fieldData)-->Line_16 $$ throw new IllegalStateException("unsupported string field type: " + fieldValue.getClass().getName())[ FD ]
Line_11 $$ if (fieldValue instanceof String) -->Line_13 $$ if (fieldValue instanceof byte[]) [ CD ]
Line_6 $$ if (fieldData == null) -->Line_18 $$ nulls[column] = false[ CD ]
Line_6 $$ if (fieldData == null) -->Line_9 $$ Object fieldValue = ((PrimitiveObjectInspector) fieldInspectors[column]).getPrimitiveJavaObject(fieldData)[ CD ]
Line_9 $$ Object fieldValue = ((PrimitiveObjectInspector) fieldInspectors[column]).getPrimitiveJavaObject(fieldData)-->Line_13 $$ if (fieldValue instanceof byte[]) [ FD ]
Line_6 $$ if (fieldData == null) -->Line_10 $$ checkState(fieldValue != null, "fieldValue should not be null")[ CD ]
Line_6 $$ if (fieldData == null) -->Line_11 $$ if (fieldValue instanceof String) [ CD ]
Line_11 $$ if (fieldValue instanceof String) -->Line_12 $$ slices[column] = Slices.utf8Slice((String) fieldValue)[ CD ]
Line_2 $$ private void parseStringColumn(int column) -->Line_5 $$ Object fieldData = rowInspector.getStructFieldData(rowData, structFields[column])[ CD ]
Line_2 $$ private void parseStringColumn(int column) -->Line_3 $$ checkArgument(!isPartitionColumn[column], "Column is a partition key")[ CD ]
