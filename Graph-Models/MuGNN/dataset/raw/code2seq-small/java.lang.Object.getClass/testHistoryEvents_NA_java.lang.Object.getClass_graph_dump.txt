Line_21 $$ Map<TaskId, Task> tasks = parsedJob.getTasks()-->Line_22 $$ Assert.assertEquals("No of tasks not correct", 3, tasks.size())[ FD ]
Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_26 $$ Map<TaskId, Task> maps = parsedJob.getTasks(TaskType.MAP)-->Line_27 $$ Assert.assertEquals("No of maps not correct", 2, maps.size())[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_29 $$ Assert.assertEquals("No of reduces not correct", 1, reduces.size())[ CD ]
Line_21 $$ Map<TaskId, Task> tasks = parsedJob.getTasks()-->Line_23 $$ for (Task task : tasks.values()) [ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_19 $$ Assert.assertEquals("CompletedMaps not correct", 2, parsedJob.getCompletedMaps())[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_18 $$ Assert.assertEquals(((JobHistory) context).getServiceState(), Service.STATE.STOPPED)[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_11 $$ HistoryContext context = new JobHistory()[ CD ]
Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()-->Line_7 $$ JobId jobId = job.getID()[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_11 $$ HistoryContext context = new JobHistory()-->Line_16 $$ Job parsedJob = context.getJob(jobId)[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_31 $$ Assert.assertEquals("Job state not currect", JobState.SUCCEEDED, parsedJob.getState())[ CD ]
Line_7 $$ JobId jobId = job.getID()-->Line_16 $$ Job parsedJob = context.getJob(jobId)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ ((JobHistory) context).init(conf)[ FD ]
Line_11 $$ HistoryContext context = new JobHistory()-->Line_14 $$ Assert.assertTrue(context.getStartTime() > 0)[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_5 $$ app.submit(conf)[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_26 $$ Map<TaskId, Task> maps = parsedJob.getTasks(TaskType.MAP)[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_30 $$ Assert.assertEquals("CompletedReduce not correct", 1, parsedJob.getCompletedReduces())[ CD ]
Line_16 $$ Job parsedJob = context.getJob(jobId)-->Line_28 $$ Map<TaskId, Task> reduces = parsedJob.getTasks(TaskType.REDUCE)[ FD ]
Line_23 $$ for (Task task : tasks.values()) -->Line_24 $$ verifyTask(task)[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_8 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ CD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true)-->Line_5 $$ app.submit(conf)[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_21 $$ Map<TaskId, Task> tasks = parsedJob.getTasks()[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_22 $$ Assert.assertEquals("No of tasks not correct", 3, tasks.size())[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_13 $$ ((JobHistory) context).start()[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_16 $$ Job parsedJob = context.getJob(jobId)[ CD ]
Line_16 $$ Job parsedJob = context.getJob(jobId)-->Line_31 $$ Assert.assertEquals("Job state not currect", JobState.SUCCEEDED, parsedJob.getState())[ FD ]
Line_16 $$ Job parsedJob = context.getJob(jobId)-->Line_30 $$ Assert.assertEquals("CompletedReduce not correct", 1, parsedJob.getCompletedReduces())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true)-->Line_10 $$ app.waitForState(Service.STATE.STOPPED)[ FD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_5 $$ app.submit(conf)[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_10 $$ app.waitForState(Service.STATE.STOPPED)[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_15 $$ Assert.assertEquals(((JobHistory) context).getServiceState(), Service.STATE.STARTED)[ CD ]
Line_16 $$ Job parsedJob = context.getJob(jobId)-->Line_26 $$ Map<TaskId, Task> maps = parsedJob.getTasks(TaskType.MAP)[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_27 $$ Assert.assertEquals("No of maps not correct", 2, maps.size())[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_12 $$ ((JobHistory) context).init(conf)[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true)[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_20 $$ Assert.assertEquals(System.getProperty("user.name"), parsedJob.getUserName())[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_17 $$ ((JobHistory) context).stop()[ CD ]
Line_16 $$ Job parsedJob = context.getJob(jobId)-->Line_21 $$ Map<TaskId, Task> tasks = parsedJob.getTasks()[ FD ]
Line_28 $$ Map<TaskId, Task> reduces = parsedJob.getTasks(TaskType.REDUCE)-->Line_29 $$ Assert.assertEquals("No of reduces not correct", 1, reduces.size())[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_28 $$ Map<TaskId, Task> reduces = parsedJob.getTasks(TaskType.REDUCE)[ CD ]
Line_16 $$ Job parsedJob = context.getJob(jobId)-->Line_19 $$ Assert.assertEquals("CompletedMaps not correct", 2, parsedJob.getCompletedMaps())[ FD ]
Line_16 $$ Job parsedJob = context.getJob(jobId)-->Line_20 $$ Assert.assertEquals(System.getProperty("user.name"), parsedJob.getUserName())[ FD ]
Line_7 $$ JobId jobId = job.getID()-->Line_8 $$ LOG.info("JOBID is " + TypeConverter.fromYarn(jobId).toString())[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true)-->Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ FD ]
Line_4 $$ MRApp app = new MRAppWithHistory(2, 1, true, this.getClass().getName(), true)-->Line_9 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_14 $$ Assert.assertTrue(context.getStartTime() > 0)[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_7 $$ JobId jobId = job.getID()[ CD ]
Line_2 $$ public void testHistoryEvents() throws Exception -->Line_6 $$ Job job = app.getContext().getAllJobs().values().iterator().next()[ CD ]
