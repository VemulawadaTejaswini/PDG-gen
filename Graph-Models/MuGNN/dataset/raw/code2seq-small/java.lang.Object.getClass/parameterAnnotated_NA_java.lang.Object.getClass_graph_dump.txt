Line_3 $$ TypeDescriptor t1 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_6 $$ assertNotNull(t1.getAnnotation(ParameterAnnotation.class))[ FD ]
Line_3 $$ TypeDescriptor t1 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_4 $$ assertEquals(String.class, t1.getType())[ FD ]
Line_2 $$ public void parameterAnnotated() throws Exception -->Line_3 $$ TypeDescriptor t1 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))[ CD ]
Line_2 $$ public void parameterAnnotated() throws Exception -->Line_8 $$ assertEquals(123, t1.getAnnotation(ParameterAnnotation.class).value())[ CD ]
Line_2 $$ public void parameterAnnotated() throws Exception -->Line_5 $$ assertEquals(1, t1.getAnnotations().length)[ CD ]
Line_2 $$ public void parameterAnnotated() throws Exception -->Line_6 $$ assertNotNull(t1.getAnnotation(ParameterAnnotation.class))[ CD ]
Line_3 $$ TypeDescriptor t1 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_5 $$ assertEquals(1, t1.getAnnotations().length)[ FD ]
Line_3 $$ TypeDescriptor t1 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_7 $$ assertTrue(t1.hasAnnotation(ParameterAnnotation.class))[ FD ]
Line_2 $$ public void parameterAnnotated() throws Exception -->Line_7 $$ assertTrue(t1.hasAnnotation(ParameterAnnotation.class))[ CD ]
Line_2 $$ public void parameterAnnotated() throws Exception -->Line_4 $$ assertEquals(String.class, t1.getType())[ CD ]
Line_3 $$ TypeDescriptor t1 = new TypeDescriptor(new MethodParameter(getClass().getMethod("testAnnotatedMethod", String.class), 0))-->Line_8 $$ assertEquals(123, t1.getAnnotation(ParameterAnnotation.class).value())[ FD ]
