Line_12 $$ if (sm != null) -->Line_13 $$ loader = new ClassLoader(loader) [ CD ]
Line_3 $$ final SecurityManager sm = System.getSecurityManager()-->Line_4 $$ if (sm != null) [ FD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_7 $$ return AccessController.doPrivileged(new PrivilegedAction<Expression>() [ CD ]
Line_4 $$ if (sm != null) -->Line_5 $$ sm.checkPermission(new SpecialPermission())[ CD ]
Line_13 $$ loader = new ClassLoader(loader) -->Line_24 $$ return JavascriptCompiler.compile(script, JavascriptCompiler.DEFAULT_FUNCTIONS, loader)[ FD ]
Line_11 $$ ClassLoader loader = getClass().getClassLoader()-->Line_13 $$ loader = new ClassLoader(loader) [ FD ]
Line_13 $$ loader = new ClassLoader(loader) -->Line_20 $$ return super.loadClass(name, resolve)[ CD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_4 $$ if (sm != null) [ CD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_24 $$ return JavascriptCompiler.compile(script, JavascriptCompiler.DEFAULT_FUNCTIONS, loader)[ FD ]
Line_11 $$ ClassLoader loader = getClass().getClassLoader()-->Line_24 $$ return JavascriptCompiler.compile(script, JavascriptCompiler.DEFAULT_FUNCTIONS, loader)[ FD ]
Line_13 $$ loader = new ClassLoader(loader) -->Line_20 $$ return super.loadClass(name, resolve)[ FD ]
Line_3 $$ final SecurityManager sm = System.getSecurityManager()-->Line_5 $$ sm.checkPermission(new SpecialPermission())[ FD ]
Line_2 $$ public Object compile(String script, Map<String, String> params) -->Line_3 $$ final SecurityManager sm = System.getSecurityManager()[ CD ]
Line_3 $$ final SecurityManager sm = System.getSecurityManager()-->Line_12 $$ if (sm != null) [ FD ]
Line_10 $$ AccessControlContext engineContext = AccessController.getContext()-->Line_16 $$ engineContext.checkPermission(new ClassPermission(name))[ FD ]
