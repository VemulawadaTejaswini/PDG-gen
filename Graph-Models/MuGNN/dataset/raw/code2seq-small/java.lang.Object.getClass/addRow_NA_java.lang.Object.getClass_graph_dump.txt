Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_12 $$ checkArgument(value instanceof Boolean, "Expected value %d to be an instance of Boolean, but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_10 $$ Type type = types.get(i)-->Line_13 $$ if (BIGINT.equals(type) || DATE.equals(type) || TIMESTAMP.equals(type) || TIMESTAMP_WITH_TIME_ZONE.equals(type)) [ FD ]
Line_15 $$ if (DOUBLE.equals(type)) -->Line_17 $$ if (VARCHAR.equals(type)) [ CD ]
Line_17 $$ if (VARCHAR.equals(type)) -->Line_18 $$ checkArgument(value instanceof String || value instanceof byte[], "Expected value %d to be an instance of String or byte[], but is a %s", i, value.getClass().getSimpleName())[ CD ]
Line_10 $$ Type type = types.get(i)-->Line_11 $$ if (BOOLEAN.equals(type)) [ FD ]
Line_6 $$ Object value = values[i]-->Line_16 $$ checkArgument(value instanceof Double, "Expected value %d to be an instance of Double, but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_6 $$ Object value = values[i]-->Line_20 $$ checkArgument(value instanceof Slice, "Expected value %d to be an instance of Slice, but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_10 $$ Type type = types.get(i)[ FD ]
Line_10 $$ Type type = types.get(i)-->Line_19 $$ if (VARBINARY.equals(type)) [ FD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_14 $$ checkArgument(value instanceof Integer || value instanceof Long, "Expected value %d to be an instance of Integer or Long, but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_16 $$ checkArgument(value instanceof Double, "Expected value %d to be an instance of Double, but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_6 $$ Object value = values[i]-->Line_18 $$ checkArgument(value instanceof String || value instanceof byte[], "Expected value %d to be an instance of String or byte[], but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_2 $$ public Builder addRow(Object... values) -->Line_25 $$ records.add(Collections.unmodifiableList(new ArrayList(Arrays.asList(values))))[ CD ]
Line_2 $$ public Builder addRow(Object... values) -->Line_25 $$ records.add(Collections.unmodifiableList(new ArrayList(Arrays.asList(values))))[ FD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_11 $$ if (BOOLEAN.equals(type)) [ CD ]
Line_2 $$ public Builder addRow(Object... values) -->Line_4 $$ checkArgument(values.length == types.size(), "Expected %s values in row, but got %s values", types.size(), values.length)[ CD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_7 $$ if (value == null) [ CD ]
Line_13 $$ if (BIGINT.equals(type) || DATE.equals(type) || TIMESTAMP.equals(type) || TIMESTAMP_WITH_TIME_ZONE.equals(type)) -->Line_15 $$ if (DOUBLE.equals(type)) [ CD ]
Line_2 $$ public Builder addRow(Object... values) -->Line_3 $$ checkNotNull(values, "values is null")[ FD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_18 $$ checkArgument(value instanceof String || value instanceof byte[], "Expected value %d to be an instance of String or byte[], but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_2 $$ public Builder addRow(Object... values) -->Line_26 $$ return this[ CD ]
Line_2 $$ public Builder addRow(Object... values) -->Line_5 $$ for (int i = 0; i < values.length; i++) [ CD ]
Line_11 $$ if (BOOLEAN.equals(type)) -->Line_12 $$ checkArgument(value instanceof Boolean, "Expected value %d to be an instance of Boolean, but is a %s", i, value.getClass().getSimpleName())[ CD ]
Line_10 $$ Type type = types.get(i)-->Line_15 $$ if (DOUBLE.equals(type)) [ FD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_6 $$ Object value = values[i][ CD ]
Line_6 $$ Object value = values[i]-->Line_12 $$ checkArgument(value instanceof Boolean, "Expected value %d to be an instance of Boolean, but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_19 $$ if (VARBINARY.equals(type)) -->Line_20 $$ checkArgument(value instanceof Slice, "Expected value %d to be an instance of Slice, but is a %s", i, value.getClass().getSimpleName())[ CD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_22 $$ throw new IllegalStateException("Unsupported column type " + types.get(i))[ FD ]
Line_15 $$ if (DOUBLE.equals(type)) -->Line_16 $$ checkArgument(value instanceof Double, "Expected value %d to be an instance of Double, but is a %s", i, value.getClass().getSimpleName())[ CD ]
Line_13 $$ if (BIGINT.equals(type) || DATE.equals(type) || TIMESTAMP.equals(type) || TIMESTAMP_WITH_TIME_ZONE.equals(type)) -->Line_14 $$ checkArgument(value instanceof Integer || value instanceof Long, "Expected value %d to be an instance of Integer or Long, but is a %s", i, value.getClass().getSimpleName())[ CD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_20 $$ checkArgument(value instanceof Slice, "Expected value %d to be an instance of Slice, but is a %s", i, value.getClass().getSimpleName())[ FD ]
Line_10 $$ Type type = types.get(i)-->Line_17 $$ if (VARCHAR.equals(type)) [ FD ]
Line_5 $$ for (int i = 0; i < values.length; i++) -->Line_10 $$ Type type = types.get(i)[ CD ]
Line_6 $$ Object value = values[i]-->Line_7 $$ if (value == null) [ FD ]
Line_2 $$ public Builder addRow(Object... values) -->Line_3 $$ checkNotNull(values, "values is null")[ CD ]
Line_17 $$ if (VARCHAR.equals(type)) -->Line_19 $$ if (VARBINARY.equals(type)) [ CD ]
Line_11 $$ if (BOOLEAN.equals(type)) -->Line_13 $$ if (BIGINT.equals(type) || DATE.equals(type) || TIMESTAMP.equals(type) || TIMESTAMP_WITH_TIME_ZONE.equals(type)) [ CD ]
Line_6 $$ Object value = values[i]-->Line_14 $$ checkArgument(value instanceof Integer || value instanceof Long, "Expected value %d to be an instance of Integer or Long, but is a %s", i, value.getClass().getSimpleName())[ FD ]
