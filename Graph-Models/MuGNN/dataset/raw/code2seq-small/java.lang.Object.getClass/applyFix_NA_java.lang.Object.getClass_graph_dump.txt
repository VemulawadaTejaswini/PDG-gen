Line_15 $$ final Logger logger = Logger.getInstance(className)-->Line_16 $$ logger.error(e)[ FD ]
Line_4 $$ if (problemElement == null || !problemElement.isValid()) -->Line_5 $$ return[ CD ]
Line_2 $$ public final void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_3 $$ final PsiElement problemElement = descriptor.getPsiElement()[ FD ]
Line_3 $$ final PsiElement problemElement = descriptor.getPsiElement()-->Line_11 $$ doFix(project, problemElement)[ FD ]
Line_3 $$ final PsiElement problemElement = descriptor.getPsiElement()-->Line_7 $$ if (isQuickFixOnReadOnlyFile(problemElement)) [ FD ]
Line_2 $$ public final void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_3 $$ final PsiElement problemElement = descriptor.getPsiElement()[ CD ]
Line_13 $$ final Class<? extends TitleCapitalizationFix> aClass = getClass()-->Line_14 $$ final String className = aClass.getName()[ FD ]
Line_2 $$ public final void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_4 $$ if (problemElement == null || !problemElement.isValid()) [ CD ]
Line_3 $$ final PsiElement problemElement = descriptor.getPsiElement()-->Line_4 $$ if (problemElement == null || !problemElement.isValid()) [ FD ]
Line_14 $$ final String className = aClass.getName()-->Line_15 $$ final Logger logger = Logger.getInstance(className)[ FD ]
Line_2 $$ public final void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_11 $$ doFix(project, problemElement)[ FD ]
Line_2 $$ public final void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) -->Line_7 $$ if (isQuickFixOnReadOnlyFile(problemElement)) [ CD ]
Line_7 $$ if (isQuickFixOnReadOnlyFile(problemElement)) -->Line_8 $$ return[ CD ]
