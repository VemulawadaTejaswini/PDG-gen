Line_13 $$ mockSPI1 = new MockSPI()-->Line_125 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_67 $$ logRecord = logRecords.get(0)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_45 $$ logRecord = logRecords.get(0)[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_140 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_38 $$ mockSPI1 = new MockSPI()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_67 $$ logRecord = logRecords.get(0)[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_113 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_126 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_147 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_43 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_132 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_149 $$ Assert.assertEquals("Not unregistering unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_93 $$ logRecord = logRecords.get(0)[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_133 $$ logRecord = logRecords.get(0)[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_149 $$ Assert.assertEquals("Not unregistering unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_27 $$ logRecord = logRecords.get(0)[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_148 $$ logRecord = logRecords.get(0)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_27 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_111 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_111 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_121 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_126 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_33 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_122 $$ logRecord = logRecords.get(0)[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_140 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_44 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_123 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with foreign MPI " + mockSPI1.mpi + " versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_155 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_22 $$ mockSPI1 = new MockSPI()[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_77 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_163 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_124 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_45 $$ logRecord = logRecords.get(0)[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_122 $$ logRecord = logRecords.get(0)[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_160 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_134 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_131 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_113 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_140 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_113 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_35 $$ String name = "name1"-->Line_102 $$ spis = MPIHelperUtil.getSPIs(name)[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_121 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_35 $$ String name = "name1"-->Line_84 $$ Assert.assertNotNull(MPIHelperUtil.getSPI(name, "testId1"))[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_132 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_148 $$ logRecord = logRecords.get(0)[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_111 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_92 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_133 $$ logRecord = logRecords.get(0)[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_147 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_46 $$ Assert.assertEquals("Registered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_165 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_9 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " with foreign MPI " + mockSPI1.mpi + " versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_34 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_165 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_165 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_160 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_161 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_13 $$ mockSPI1 = new MockSPI()[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_139 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_30 $$ mockSPI1 = new MockSPI()[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_12 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_67 $$ logRecord = logRecords.get(0)[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_77 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_122 $$ logRecord = logRecords.get(0)[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_120 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_34 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_123 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with foreign MPI " + mockSPI1.mpi + " versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_45 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_125 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_160 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_160 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_43 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_166 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_147 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_93 $$ logRecord = logRecords.get(0)[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_43 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_45 $$ logRecord = logRecords.get(0)[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_66 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_45 $$ logRecord = logRecords.get(0)-->Line_68 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " because it duplicates " + mockSPI1, logRecord.getMessage())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_140 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_122 $$ logRecord = logRecords.get(0)[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_166 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_93 $$ logRecord = logRecords.get(0)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_148 $$ logRecord = logRecords.get(0)[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_163 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_113 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_35 $$ String name = "name1"-->Line_91 $$ Assert.assertEquals(name, mockSPI1.spiProviderName)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_169 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_77 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_158 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_134 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_38 $$ mockSPI1 = new MockSPI()[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_126 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_43 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_26 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_121 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_45 $$ logRecord = logRecords.get(0)-->Line_134 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_38 $$ mockSPI1 = new MockSPI()[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_162 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_45 $$ logRecord = logRecords.get(0)[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_66 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_27 $$ logRecord = logRecords.get(0)[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_43 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_45 $$ logRecord = logRecords.get(0)-->Line_46 $$ Assert.assertEquals("Registered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_161 $$ logRecord = logRecords.get(0)[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_166 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_166 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_66 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_164 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_66 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_71 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_125 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_161 $$ logRecord = logRecords.get(0)[ FD ]
Line_45 $$ logRecord = logRecords.get(0)-->Line_162 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_147 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_111 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_131 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_71 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_66 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_93 $$ logRecord = logRecords.get(0)[ FD ]
Line_45 $$ logRecord = logRecords.get(0)-->Line_149 $$ Assert.assertEquals("Not unregistering unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_34 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_161 $$ logRecord = logRecords.get(0)[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_67 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_7 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_36 $$ MockSPIProvider mockSPIProvider = new MockSPIProvider(name)-->Line_37 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider))[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_163 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_133 $$ logRecord = logRecords.get(0)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_11 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_45 $$ logRecord = logRecords.get(0)-->Line_123 $$ Assert.assertEquals("Not unregistering SPI " + mockSPI1 + " with foreign MPI " + mockSPI1.mpi + " versus " + MPIHelperUtil.getMPI(), logRecord.getMessage())[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_92 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_35 $$ String name = "name1"-->Line_105 $$ Assert.assertEquals(name, mockSPI1.spiProviderName)[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_125 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_93 $$ logRecord = logRecords.get(0)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_86 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_28 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_132 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_155 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_44 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_148 $$ logRecord = logRecords.get(0)[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_169 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_139 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_133 $$ logRecord = logRecords.get(0)[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_30 $$ mockSPI1 = new MockSPI()[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_169 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_48 $$ MessagingConfigurator messagingConfigurator = new AbstractMessagingConfigurator() -->Line_54 $$ return null[ CD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_69 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_28 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " with unknown SPI provider " + mockSPI1.spiProviderName, logRecord.getMessage())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_156 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_161 $$ logRecord = logRecords.get(0)[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_71 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_46 $$ Assert.assertEquals("Registered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_122 $$ logRecord = logRecords.get(0)[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_71 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_66 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_146 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_48 $$ MessagingConfigurator messagingConfigurator = new AbstractMessagingConfigurator() -->Line_57 $$ MessagingConfiguratorRegistry.registerMessagingConfigurator("servletContextName2", messagingConfigurator)[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_94 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_139 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_68 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " because it duplicates " + mockSPI1, logRecord.getMessage())[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_120 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_127 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_38 $$ mockSPI1 = new MockSPI()[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_45 $$ logRecord = logRecords.get(0)[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_148 $$ logRecord = logRecords.get(0)[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_156 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_45 $$ logRecord = logRecords.get(0)[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_125 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_117 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_132 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_92 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_147 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_30 $$ mockSPI1 = new MockSPI()[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_165 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_139 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_133 $$ logRecord = logRecords.get(0)[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_44 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_156 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_26 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_161 $$ logRecord = logRecords.get(0)[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_162 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1, logRecord.getMessage())[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_25 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_140 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_156 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_160 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_77 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_169 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_35 $$ String name = "name1"-->Line_85 $$ Assert.assertNull(MPIHelperUtil.getSPI(name, "testId3"))[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_150 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_113 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_166 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_44 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_111 $$ unregisteringSPIThreadLocal.set(mockSPI1)[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_169 $$ MPIHelperUtil.unregisterSPI(mockSPI1)[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_156 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_160 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_165 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_67 $$ logRecord = logRecords.get(0)[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_34 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_93 $$ logRecord = logRecords.get(0)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_8 $$ LogRecord logRecord = logRecords.get(0)[ FD ]
Line_35 $$ String name = "name1"-->Line_41 $$ mockSPI1.spiProviderName = name[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_33 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_92 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_68 $$ Assert.assertEquals("Not registering SPI " + mockSPI1 + " because it duplicates " + mockSPI1, logRecord.getMessage())[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_122 $$ logRecord = logRecords.get(0)[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_121 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_126 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_135 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_131 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_12 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_120 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_92 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_17 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_22 $$ mockSPI1 = new MockSPI()[ FD ]
Line_8 $$ LogRecord logRecord = logRecords.get(0)-->Line_27 $$ logRecord = logRecords.get(0)[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_133 $$ logRecord = logRecords.get(0)[ FD ]
Line_4 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_156 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_71 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_3 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.WARNING)) -->Line_141 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_148 $$ logRecord = logRecords.get(0)[ FD ]
Line_27 $$ logRecord = logRecords.get(0)-->Line_94 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_17 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_47 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_65 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_67 $$ logRecord = logRecords.get(0)[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_25 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_139 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_77 $$ MPIHelperUtil.registerSPI(mockSPI1)[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_25 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_155 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_13 $$ mockSPI1 = new MockSPI()-->Line_120 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_147 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_126 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_121 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_33 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_166 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_44 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_120 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_42 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_121 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_35 $$ String name = "name1"-->Line_157 $$ mockSPI1 = (MockSPI) MPIHelperUtil.getSPI(name, "testId1")[ FD ]
Line_45 $$ logRecord = logRecords.get(0)-->Line_94 $$ Throwable throwable = logRecord.getThrown()[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_33 $$ Assert.assertFalse(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_163 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_5 $$ MockSPI mockSPI1 = new MockSPI()-->Line_163 $$ Assert.assertTrue(MPIHelperUtil.registerSPI(mockSPI1))[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_131 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_71 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_38 $$ mockSPI1 = new MockSPI()-->Line_159 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_140 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_92 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_29 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_132 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_131 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_21 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_126 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_132 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_22 $$ mockSPI1 = new MockSPI()-->Line_155 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
Line_30 $$ mockSPI1 = new MockSPI()-->Line_155 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPI(mockSPI1))[ FD ]
