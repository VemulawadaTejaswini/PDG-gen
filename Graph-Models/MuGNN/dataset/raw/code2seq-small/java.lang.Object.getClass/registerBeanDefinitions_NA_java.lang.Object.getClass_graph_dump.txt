Line_8 $$ Object proxyTargetClass = candidate.get("proxyTargetClass")-->Line_13 $$ if ((Boolean) proxyTargetClass) [ FD ]
Line_8 $$ Object proxyTargetClass = candidate.get("proxyTargetClass")-->Line_9 $$ if (mode != null && proxyTargetClass != null && AdviceMode.class == mode.getClass() && Boolean.class == proxyTargetClass.getClass()) [ FD ]
Line_3 $$ boolean candidateFound = false-->Line_10 $$ candidateFound = true[ FD ]
Line_9 $$ if (mode != null && proxyTargetClass != null && AdviceMode.class == mode.getClass() && Boolean.class == proxyTargetClass.getClass()) -->Line_11 $$ if (mode == AdviceMode.PROXY) [ CD ]
Line_2 $$ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) -->Line_4 $$ Set<String> annoTypes = importingClassMetadata.getAnnotationTypes()[ FD ]
Line_10 $$ candidateFound = true-->Line_20 $$ if (!candidateFound) [ FD ]
Line_5 $$ for (String annoType : annoTypes) -->Line_6 $$ AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType)[ FD ]
Line_6 $$ AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType)-->Line_8 $$ Object proxyTargetClass = candidate.get("proxyTargetClass")[ FD ]
Line_2 $$ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) -->Line_6 $$ AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType)[ FD ]
Line_2 $$ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) -->Line_4 $$ Set<String> annoTypes = importingClassMetadata.getAnnotationTypes()[ CD ]
Line_3 $$ boolean candidateFound = false-->Line_20 $$ if (!candidateFound) [ FD ]
Line_13 $$ if ((Boolean) proxyTargetClass) -->Line_15 $$ return[ CD ]
Line_13 $$ if ((Boolean) proxyTargetClass) -->Line_14 $$ AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)[ CD ]
Line_6 $$ AnnotationAttributes candidate = AnnotationConfigUtils.attributesFor(importingClassMetadata, annoType)-->Line_7 $$ Object mode = candidate.get("mode")[ FD ]
Line_7 $$ Object mode = candidate.get("mode")-->Line_9 $$ if (mode != null && proxyTargetClass != null && AdviceMode.class == mode.getClass() && Boolean.class == proxyTargetClass.getClass()) [ FD ]
Line_20 $$ if (!candidateFound) -->Line_21 $$ String name = getClass().getSimpleName()[ CD ]
Line_11 $$ if (mode == AdviceMode.PROXY) -->Line_12 $$ AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry)[ CD ]
Line_20 $$ if (!candidateFound) -->Line_22 $$ logger.warn(String.format("%s was imported but no annotations were found " + "having both 'mode' and 'proxyTargetClass' attributes of type " + "AdviceMode and boolean respectively. This means that auto proxy " + "creator registration and configuration may not have occured as " + "intended, and components may not be proxied as expected. Check to " + "ensure that %s has been @Import'ed on the same class where these " + "annotations are declared; otherwise remove the import of %s " + "altogether.", name, name, name))[ CD ]
Line_21 $$ String name = getClass().getSimpleName()-->Line_22 $$ logger.warn(String.format("%s was imported but no annotations were found " + "having both 'mode' and 'proxyTargetClass' attributes of type " + "AdviceMode and boolean respectively. This means that auto proxy " + "creator registration and configuration may not have occured as " + "intended, and components may not be proxied as expected. Check to " + "ensure that %s has been @Import'ed on the same class where these " + "annotations are declared; otherwise remove the import of %s " + "altogether.", name, name, name))[ FD ]
Line_11 $$ if (mode == AdviceMode.PROXY) -->Line_13 $$ if ((Boolean) proxyTargetClass) [ CD ]
Line_2 $$ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) -->Line_14 $$ AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry)[ FD ]
Line_9 $$ if (mode != null && proxyTargetClass != null && AdviceMode.class == mode.getClass() && Boolean.class == proxyTargetClass.getClass()) -->Line_10 $$ candidateFound = true[ CD ]
Line_2 $$ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) -->Line_3 $$ boolean candidateFound = false[ CD ]
Line_7 $$ Object mode = candidate.get("mode")-->Line_11 $$ if (mode == AdviceMode.PROXY) [ FD ]
Line_2 $$ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) -->Line_20 $$ if (!candidateFound) [ CD ]
Line_2 $$ public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) -->Line_12 $$ AopConfigUtils.registerAutoProxyCreatorIfNecessary(registry)[ FD ]
