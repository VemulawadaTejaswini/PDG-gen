Line_5 $$ TestBean testBean = new TestBean("name")-->Line_6 $$ handler.handleReturnValue(testBean, returnType, mavContainer, request)[ FD ]
Line_5 $$ TestBean testBean = new TestBean("name")-->Line_8 $$ assertSame(testBean, mavContainer.getModel().get("modelAttrName"))[ FD ]
Line_3 $$ MethodParameter returnType = new MethodParameter(getClass().getDeclaredMethod("testBeanReturnValue"), -1)-->Line_6 $$ handler.handleReturnValue(testBean, returnType, mavContainer, request)[ FD ]
Line_2 $$ public void modelAndViewResolver() throws Exception -->Line_3 $$ MethodParameter returnType = new MethodParameter(getClass().getDeclaredMethod("testBeanReturnValue"), -1)[ CD ]
Line_2 $$ public void modelAndViewResolver() throws Exception -->Line_4 $$ mavResolvers.add(new TestModelAndViewResolver(TestBean.class))[ CD ]
Line_2 $$ public void modelAndViewResolver() throws Exception -->Line_8 $$ assertSame(testBean, mavContainer.getModel().get("modelAttrName"))[ CD ]
Line_2 $$ public void modelAndViewResolver() throws Exception -->Line_5 $$ TestBean testBean = new TestBean("name")[ CD ]
Line_2 $$ public void modelAndViewResolver() throws Exception -->Line_6 $$ handler.handleReturnValue(testBean, returnType, mavContainer, request)[ CD ]
Line_2 $$ public void modelAndViewResolver() throws Exception -->Line_9 $$ assertFalse(mavContainer.isRequestHandled())[ CD ]
Line_2 $$ public void modelAndViewResolver() throws Exception -->Line_7 $$ assertEquals("viewName", mavContainer.getViewName())[ CD ]
