Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_3 $$ if (targetType == null) [ FD ]
Line_3 $$ if (targetType == null) -->Line_4 $$ return inputObject[ CD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_6 $$ Object outputObject = null[ CD ]
Line_17 $$ targetType = classLoader.loadClass(modelClassName)-->Line_21 $$ outputObject = targetType.newInstance()[ FD ]
Line_14 $$ ClassLoader classLoader = clazz.getClassLoader()-->Line_17 $$ targetType = classLoader.loadClass(modelClassName)[ FD ]
Line_21 $$ outputObject = targetType.newInstance()-->Line_22 $$ BeanCopy beanCopy = BeanCopy.beans(inputObject, outputObject)[ FD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_12 $$ if (targetType.isInterface()) [ FD ]
Line_12 $$ if (targetType.isInterface()) -->Line_14 $$ ClassLoader classLoader = clazz.getClassLoader()[ CD ]
Line_8 $$ outputObject = TypeConverterManager.convertType(inputObject, targetType)-->Line_22 $$ BeanCopy beanCopy = BeanCopy.beans(inputObject, outputObject)[ FD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_22 $$ BeanCopy beanCopy = BeanCopy.beans(inputObject, outputObject)[ FD ]
Line_6 $$ Object outputObject = null-->Line_8 $$ outputObject = TypeConverterManager.convertType(inputObject, targetType)[ FD ]
Line_6 $$ Object outputObject = null-->Line_22 $$ BeanCopy beanCopy = BeanCopy.beans(inputObject, outputObject)[ FD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_8 $$ outputObject = TypeConverterManager.convertType(inputObject, targetType)[ FD ]
Line_6 $$ Object outputObject = null-->Line_21 $$ outputObject = targetType.newInstance()[ FD ]
Line_8 $$ outputObject = TypeConverterManager.convertType(inputObject, targetType)-->Line_21 $$ outputObject = targetType.newInstance()[ FD ]
Line_15 $$ String modelClassName = _jsonWebServiceNaming.convertModelClassToImplClassName(targetType)-->Line_17 $$ targetType = classLoader.loadClass(modelClassName)[ FD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_10 $$ if (inputObject instanceof Map) [ FD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_15 $$ String modelClassName = _jsonWebServiceNaming.convertModelClassToImplClassName(targetType)[ FD ]
Line_22 $$ BeanCopy beanCopy = BeanCopy.beans(inputObject, outputObject)-->Line_23 $$ beanCopy.copy()[ FD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_30 $$ return outputObject[ CD ]
Line_12 $$ if (targetType.isInterface()) -->Line_13 $$ Class<?> clazz = getClass()[ CD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_3 $$ if (targetType == null) [ CD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_17 $$ targetType = classLoader.loadClass(modelClassName)[ FD ]
Line_12 $$ if (targetType.isInterface()) -->Line_15 $$ String modelClassName = _jsonWebServiceNaming.convertModelClassToImplClassName(targetType)[ CD ]
Line_2 $$ private Object _convertType(Object inputObject, Class<?> targetType) -->Line_21 $$ outputObject = targetType.newInstance()[ FD ]
Line_13 $$ Class<?> clazz = getClass()-->Line_14 $$ ClassLoader classLoader = clazz.getClassLoader()[ FD ]
