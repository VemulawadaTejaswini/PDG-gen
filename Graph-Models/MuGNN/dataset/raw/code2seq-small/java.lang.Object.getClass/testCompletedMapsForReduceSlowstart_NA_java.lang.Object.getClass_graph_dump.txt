Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_15 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_12 $$ Task mapTask2 = it.next()-->Line_15 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_22 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_25 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_26 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_7 $$ Job job = app.submit(conf)[ CD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_23 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_24 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_12 $$ Task mapTask2 = it.next()[ FD ]
Line_11 $$ Task mapTask1 = it.next()-->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask1.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_18 $$ app.waitForState(task1Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_26 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_26 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_13 $$ Task reduceTask = it.next()-->Line_20 $$ Assert.assertEquals("Reduce Task state not correct", TaskState.NEW, reduceTask.getReport().getTaskState())[ FD ]
Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_11 $$ Task mapTask1 = it.next()[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_20 $$ Assert.assertEquals("Reduce Task state not correct", TaskState.NEW, reduceTask.getReport().getTaskState())[ CD ]
Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()-->Line_19 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_7 $$ Job job = app.submit(conf)-->Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_13 $$ Task reduceTask = it.next()-->Line_25 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_11 $$ Task mapTask1 = it.next()[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, 0.5f)[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()[ CD ]
Line_11 $$ Task mapTask1 = it.next()-->Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_22 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_14 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_12 $$ Task mapTask2 = it.next()[ CD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask1.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_7 $$ Job job = app.submit(conf)[ FD ]
Line_11 $$ Task mapTask1 = it.next()-->Line_14 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_19 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_24 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_19 $$ app.waitForState(task2Attempt, TaskAttemptState.RUNNING)[ CD ]
Line_12 $$ Task mapTask2 = it.next()-->Line_24 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask2.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_13 $$ Task reduceTask = it.next()[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_15 $$ app.waitForState(mapTask2, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_7 $$ Job job = app.submit(conf)[ FD ]
Line_12 $$ Task mapTask2 = it.next()-->Line_17 $$ TaskAttempt task2Attempt = mapTask2.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_11 $$ Task mapTask1 = it.next()-->Line_22 $$ app.waitForState(mapTask1, TaskState.SUCCEEDED)[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_25 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceTask.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_21 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapTask1.getAttempts().values().iterator().next().getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_6 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_23 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ CD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_14 $$ app.waitForState(mapTask1, TaskState.RUNNING)[ FD ]
Line_10 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_13 $$ Task reduceTask = it.next()[ FD ]
Line_13 $$ Task reduceTask = it.next()-->Line_23 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_9 $$ Assert.assertEquals("Num tasks not correct", 3, job.getTasks().size())[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_18 $$ app.waitForState(task1Attempt, TaskAttemptState.RUNNING)[ CD ]
Line_16 $$ TaskAttempt task1Attempt = mapTask1.getAttempts().values().iterator().next()-->Line_18 $$ app.waitForState(task1Attempt, TaskAttemptState.RUNNING)[ FD ]
Line_7 $$ Job job = app.submit(conf)-->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_5 $$ conf.setFloat(MRJobConfig.COMPLETED_MAPS_FOR_REDUCE_SLOWSTART, 0.5f)[ CD ]
Line_2 $$ public void testCompletedMapsForReduceSlowstart() throws Exception -->Line_9 $$ Assert.assertEquals("Num tasks not correct", 3, job.getTasks().size())[ CD ]
Line_3 $$ MRApp app = new MRApp(2, 1, false, this.getClass().getName(), true)-->Line_8 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
