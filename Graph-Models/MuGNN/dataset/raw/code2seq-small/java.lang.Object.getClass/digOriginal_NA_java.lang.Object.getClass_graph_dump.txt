Line_3 $$ InputStream current = original-->Line_27 $$ return createReadingProxy(current)[ FD ]
Line_18 $$ if ("available".equals(method.getName())) -->Line_19 $$ return current[ CD ]
Line_3 $$ InputStream current = original-->Line_10 $$ current = byName(current, "myInputStream")[ FD ]
Line_13 $$ if (current instanceof BufferedInputStream) -->Line_14 $$ return createReadingProxy(current)[ CD ]
Line_17 $$ for (Method method : methods) -->Line_18 $$ if ("available".equals(method.getName())) [ FD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_13 $$ if (current instanceof BufferedInputStream) [ FD ]
Line_3 $$ InputStream current = original-->Line_14 $$ return createReadingProxy(current)[ FD ]
Line_3 $$ InputStream current = original-->Line_12 $$ current = byName(current, "mySource")[ FD ]
Line_3 $$ InputStream current = original-->Line_16 $$ Method[] methods = current.getClass().getDeclaredMethods()[ FD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_22 $$ return createReadingProxy(current)[ FD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_22 $$ return createReadingProxy(current)[ FD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_13 $$ if (current instanceof BufferedInputStream) [ FD ]
Line_12 $$ current = byName(current, "mySource")-->Line_8 $$ current = byName(current, "myCurrentInput")[ FD ]
Line_11 $$ if ("org.tmatesoft.svn.core.internal.util.FixedSizeInputStream".equals(name)) -->Line_13 $$ if (current instanceof BufferedInputStream) [ CD ]
Line_6 $$ final String name = current.getClass().getName()-->Line_7 $$ if ("org.tmatesoft.svn.core.internal.io.dav.http.SpoolFile.SpoolInputStream".equals(name)) [ FD ]
Line_3 $$ InputStream current = original-->Line_22 $$ return createReadingProxy(current)[ FD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_27 $$ return createReadingProxy(current)[ FD ]
Line_6 $$ final String name = current.getClass().getName()-->Line_11 $$ if ("org.tmatesoft.svn.core.internal.util.FixedSizeInputStream".equals(name)) [ FD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_27 $$ return createReadingProxy(current)[ FD ]
Line_5 $$ while (true) -->Line_7 $$ if ("org.tmatesoft.svn.core.internal.io.dav.http.SpoolFile.SpoolInputStream".equals(name)) [ CD ]
Line_2 $$ private InputStream digOriginal(InputStream original) -->Line_3 $$ InputStream current = original[ CD ]
Line_12 $$ current = byName(current, "mySource")-->Line_27 $$ return createReadingProxy(current)[ FD ]
Line_12 $$ current = byName(current, "mySource")-->Line_6 $$ final String name = current.getClass().getName()[ FD ]
Line_12 $$ current = byName(current, "mySource")-->Line_14 $$ return createReadingProxy(current)[ FD ]
Line_12 $$ current = byName(current, "mySource")-->Line_10 $$ current = byName(current, "myInputStream")[ FD ]
Line_7 $$ if ("org.tmatesoft.svn.core.internal.io.dav.http.SpoolFile.SpoolInputStream".equals(name)) -->Line_8 $$ current = byName(current, "myCurrentInput")[ CD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_16 $$ Method[] methods = current.getClass().getDeclaredMethods()[ FD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_16 $$ Method[] methods = current.getClass().getDeclaredMethods()[ FD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_8 $$ current = byName(current, "myCurrentInput")[ FD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_6 $$ final String name = current.getClass().getName()[ FD ]
Line_5 $$ while (true) -->Line_6 $$ final String name = current.getClass().getName()[ CD ]
Line_3 $$ InputStream current = original-->Line_6 $$ final String name = current.getClass().getName()[ FD ]
Line_11 $$ if ("org.tmatesoft.svn.core.internal.util.FixedSizeInputStream".equals(name)) -->Line_12 $$ current = byName(current, "mySource")[ CD ]
Line_12 $$ current = byName(current, "mySource")-->Line_16 $$ Method[] methods = current.getClass().getDeclaredMethods()[ FD ]
Line_12 $$ current = byName(current, "mySource")-->Line_22 $$ return createReadingProxy(current)[ FD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_10 $$ current = byName(current, "myInputStream")[ FD ]
Line_7 $$ if ("org.tmatesoft.svn.core.internal.io.dav.http.SpoolFile.SpoolInputStream".equals(name)) -->Line_9 $$ if ("org.tmatesoft.svn.core.internal.util.ChunkedInputStream".equals(name)) [ CD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_12 $$ current = byName(current, "mySource")[ FD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_6 $$ final String name = current.getClass().getName()[ FD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_12 $$ current = byName(current, "mySource")[ FD ]
Line_3 $$ InputStream current = original-->Line_13 $$ if (current instanceof BufferedInputStream) [ FD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_30 $$ return createReadingProxy(current)[ FD ]
Line_12 $$ current = byName(current, "mySource")-->Line_13 $$ if (current instanceof BufferedInputStream) [ FD ]
Line_10 $$ current = byName(current, "myInputStream")-->Line_14 $$ return createReadingProxy(current)[ FD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_30 $$ return createReadingProxy(current)[ FD ]
Line_3 $$ InputStream current = original-->Line_30 $$ return createReadingProxy(current)[ FD ]
Line_6 $$ final String name = current.getClass().getName()-->Line_9 $$ if ("org.tmatesoft.svn.core.internal.util.ChunkedInputStream".equals(name)) [ FD ]
Line_3 $$ InputStream current = original-->Line_8 $$ current = byName(current, "myCurrentInput")[ FD ]
Line_9 $$ if ("org.tmatesoft.svn.core.internal.util.ChunkedInputStream".equals(name)) -->Line_11 $$ if ("org.tmatesoft.svn.core.internal.util.FixedSizeInputStream".equals(name)) [ CD ]
Line_13 $$ if (current instanceof BufferedInputStream) -->Line_22 $$ return createReadingProxy(current)[ CD ]
Line_8 $$ current = byName(current, "myCurrentInput")-->Line_14 $$ return createReadingProxy(current)[ FD ]
Line_13 $$ if (current instanceof BufferedInputStream) -->Line_16 $$ Method[] methods = current.getClass().getDeclaredMethods()[ CD ]
Line_12 $$ current = byName(current, "mySource")-->Line_30 $$ return createReadingProxy(current)[ FD ]
Line_9 $$ if ("org.tmatesoft.svn.core.internal.util.ChunkedInputStream".equals(name)) -->Line_10 $$ current = byName(current, "myInputStream")[ CD ]
