Line_2 $$ public void testStripBOM() throws IOException -->Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)[ CD ]
Line_4 $$ URL testFileUrl = getClass().getClassLoader().getResource("testBOM.txt")-->Line_6 $$ File testFile = new File(testFileUrl.getFile())[ FD ]
Line_3 $$ String UTF8_BOM = "﻿"-->Line_21 $$ if (value.toString().startsWith(UTF8_BOM)) [ FD ]
Line_15 $$ int numRecords = 0-->Line_25 $$ ++numRecords[ FD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_27 $$ reader.close()[ CD ]
Line_9 $$ Configuration conf = new Configuration()-->Line_10 $$ conf.setInt(org.apache.hadoop.mapreduce.lib.input.LineRecordReader.MAX_LINE_LENGTH, Integer.MAX_VALUE)[ FD ]
Line_18 $$ while (reader.next(key, value)) -->Line_19 $$ if (firstLine) [ CD ]
Line_17 $$ boolean skipBOM = true-->Line_22 $$ skipBOM = false[ FD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_28 $$ assertTrue("BOM is not skipped", skipBOM)[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_18 $$ while (reader.next(key, value)) [ CD ]
Line_14 $$ Text value = new Text()-->Line_21 $$ if (value.toString().startsWith(UTF8_BOM)) [ FD ]
Line_21 $$ if (value.toString().startsWith(UTF8_BOM)) -->Line_22 $$ skipBOM = false[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_3 $$ String UTF8_BOM = "﻿"[ CD ]
Line_22 $$ skipBOM = false-->Line_28 $$ assertTrue("BOM is not skipped", skipBOM)[ FD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_11 $$ FileSplit split = new FileSplit(testFilePath, 0, testFileSize, (String[]) null)[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_8 $$ long testFileSize = testFile.length()[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_14 $$ Text value = new Text()[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_9 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_6 $$ File testFile = new File(testFileUrl.getFile())[ CD ]
Line_6 $$ File testFile = new File(testFileUrl.getFile())-->Line_8 $$ long testFileSize = testFile.length()[ FD ]
Line_18 $$ while (reader.next(key, value)) -->Line_25 $$ ++numRecords[ CD ]
Line_17 $$ boolean skipBOM = true-->Line_28 $$ assertTrue("BOM is not skipped", skipBOM)[ FD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_5 $$ assertNotNull("Cannot find testBOM.txt", testFileUrl)[ CD ]
Line_16 $$ boolean firstLine = true-->Line_20 $$ firstLine = false[ FD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_18 $$ while (reader.next(key, value)) [ FD ]
Line_6 $$ File testFile = new File(testFileUrl.getFile())-->Line_7 $$ Path testFilePath = new Path(testFile.getAbsolutePath())[ FD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_16 $$ boolean firstLine = true[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_15 $$ int numRecords = 0[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_17 $$ boolean skipBOM = true[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_10 $$ conf.setInt(org.apache.hadoop.mapreduce.lib.input.LineRecordReader.MAX_LINE_LENGTH, Integer.MAX_VALUE)[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_7 $$ Path testFilePath = new Path(testFile.getAbsolutePath())[ CD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_13 $$ LongWritable key = new LongWritable()[ CD ]
Line_13 $$ LongWritable key = new LongWritable()-->Line_18 $$ while (reader.next(key, value)) [ FD ]
Line_2 $$ public void testStripBOM() throws IOException -->Line_4 $$ URL testFileUrl = getClass().getClassLoader().getResource("testBOM.txt")[ CD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_27 $$ reader.close()[ FD ]
Line_4 $$ URL testFileUrl = getClass().getClassLoader().getResource("testBOM.txt")-->Line_5 $$ assertNotNull("Cannot find testBOM.txt", testFileUrl)[ FD ]
Line_14 $$ Text value = new Text()-->Line_18 $$ while (reader.next(key, value)) [ FD ]
Line_19 $$ if (firstLine) -->Line_21 $$ if (value.toString().startsWith(UTF8_BOM)) [ CD ]
Line_19 $$ if (firstLine) -->Line_20 $$ firstLine = false[ CD ]
