Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_8 $$ logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig, executionPhase, testContext))[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_14 $$ populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())[ CD ]
Line_45 $$ DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)-->Line_50 $$ dataSource = dataSourceFromTxMgr[ FD ]
Line_23 $$ statement = statement.trim()-->Line_24 $$ scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))[ FD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_60 $$ populator.execute(finalDataSource)[ FD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_14 $$ populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_3 $$ if (executionPhase != sql.executionPhase()) [ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_8 $$ logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig, executionPhase, testContext))[ FD ]
Line_18 $$ String[] scripts = getScripts(sql, testContext, classLevel)-->Line_20 $$ List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(testContext.getApplicationContext(), scripts)[ FD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_31 $$ String dsName = mergedSqlConfig.getDataSource()[ FD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_11 $$ populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())[ FD ]
Line_19 $$ scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)-->Line_20 $$ List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(testContext.getApplicationContext(), scripts)[ FD ]
Line_3 $$ if (executionPhase != sql.executionPhase()) -->Line_4 $$ return[ CD ]
Line_32 $$ String tmName = mergedSqlConfig.getTransactionManager()-->Line_34 $$ final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)[ FD ]
Line_36 $$ if (transactionManager == null) -->Line_46 $$ if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) [ CD ]
Line_36 $$ if (transactionManager == null) -->Line_49 $$ if (dataSource == null) [ CD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_17 $$ populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)[ FD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_13 $$ populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_19 $$ scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_11 $$ populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())[ CD ]
Line_18 $$ String[] scripts = getScripts(sql, testContext, classLevel)-->Line_19 $$ scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)[ FD ]
Line_36 $$ if (transactionManager == null) -->Line_55 $$ final DataSource finalDataSource = dataSource[ CD ]
Line_36 $$ if (transactionManager == null) -->Line_43 $$ populator.execute(dataSource)[ CD ]
Line_36 $$ if (transactionManager == null) -->Line_37 $$ if (newTxRequired) [ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_20 $$ List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(testContext.getApplicationContext(), scripts)[ FD ]
Line_49 $$ if (dataSource == null) -->Line_51 $$ if (dataSource == null) [ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)[ CD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_13 $$ populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())[ FD ]
Line_31 $$ String dsName = mergedSqlConfig.getDataSource()-->Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_35 $$ final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED[ CD ]
Line_55 $$ final DataSource finalDataSource = dataSource-->Line_60 $$ populator.execute(finalDataSource)[ FD ]
Line_20 $$ List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(testContext.getApplicationContext(), scripts)-->Line_27 $$ populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))[ FD ]
Line_34 $$ final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)-->Line_36 $$ if (transactionManager == null) [ FD ]
Line_20 $$ List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(testContext.getApplicationContext(), scripts)-->Line_29 $$ logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))[ FD ]
Line_58 $$ new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() -->Line_60 $$ populator.execute(finalDataSource)[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_31 $$ String dsName = mergedSqlConfig.getDataSource()[ CD ]
Line_32 $$ String tmName = mergedSqlConfig.getTransactionManager()-->Line_47 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "the configured DataSource [%s] (named '%s') is not the one associated " + "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(), dsName, transactionManager.getClass().getName(), tmName))[ FD ]
Line_36 $$ if (transactionManager == null) -->Line_57 $$ TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(testContext, new DefaultTransactionAttribute(propagation))[ CD ]
Line_34 $$ final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)-->Line_52 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext, transactionManager.getClass().getName(), tmName))[ FD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_12 $$ populator.setSeparator(mergedSqlConfig.getSeparator())[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_27 $$ populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_41 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "supply at least a DataSource or PlatformTransactionManager.", testContext))[ FD ]
Line_22 $$ if (StringUtils.hasText(statement)) -->Line_23 $$ statement = statement.trim()[ CD ]
Line_21 $$ for (String statement : sql.statements()) -->Line_24 $$ scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))[ FD ]
Line_20 $$ List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(testContext.getApplicationContext(), scripts)-->Line_24 $$ scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))[ FD ]
Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)-->Line_40 $$ if (dataSource == null) [ FD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_35 $$ final boolean newTxRequired = mergedSqlConfig.getTransactionMode() == TransactionMode.ISOLATED[ FD ]
Line_32 $$ String tmName = mergedSqlConfig.getTransactionManager()-->Line_52 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext, transactionManager.getClass().getName(), tmName))[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_36 $$ if (transactionManager == null) [ CD ]
Line_34 $$ final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)-->Line_47 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "the configured DataSource [%s] (named '%s') is not the one associated " + "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(), dsName, transactionManager.getClass().getName(), tmName))[ FD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_43 $$ populator.execute(dataSource)[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_21 $$ for (String statement : sql.statements()) [ FD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_15 $$ populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_57 $$ TransactionAttribute transactionAttribute = TestContextTransactionUtils.createDelegatingTransactionAttribute(testContext, new DefaultTransactionAttribute(propagation))[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_28 $$ if (logger.isDebugEnabled()) [ CD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_27 $$ populator.setScripts(scriptResources.toArray(new Resource[scriptResources.size()]))[ FD ]
Line_36 $$ if (transactionManager == null) -->Line_40 $$ if (dataSource == null) [ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_15 $$ populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())[ CD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_17 $$ populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)[ FD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_11 $$ populator.setSqlScriptEncoding(mergedSqlConfig.getEncoding())[ FD ]
Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)-->Line_50 $$ dataSource = dataSourceFromTxMgr[ FD ]
Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)-->Line_46 $$ if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) [ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_18 $$ String[] scripts = getScripts(sql, testContext, classLevel)[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_34 $$ final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)[ FD ]
Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)-->Line_49 $$ if (dataSource == null) [ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_19 $$ scripts = TestContextResourceUtils.convertToClasspathResourcePaths(testContext.getTestClass(), scripts)[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_20 $$ List<Resource> scriptResources = TestContextResourceUtils.convertToResourceList(testContext.getApplicationContext(), scripts)[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_52 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "could not obtain DataSource from transaction manager [%s] (named '%s').", testContext, transactionManager.getClass().getName(), tmName))[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_7 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_12 $$ populator.setSeparator(mergedSqlConfig.getSeparator())[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_17 $$ populator.setIgnoreFailedDrops(mergedSqlConfig.getErrorMode() == ErrorMode.IGNORE_FAILED_DROPS)[ CD ]
Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)-->Line_51 $$ if (dataSource == null) [ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()[ CD ]
Line_28 $$ if (logger.isDebugEnabled()) -->Line_29 $$ logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources))[ CD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_16 $$ populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)[ FD ]
Line_36 $$ if (transactionManager == null) -->Line_58 $$ new TransactionTemplate(transactionManager, transactionAttribute).execute(new TransactionCallbackWithoutResult() [ CD ]
Line_36 $$ if (transactionManager == null) -->Line_45 $$ DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)[ CD ]
Line_45 $$ DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)-->Line_46 $$ if ((dataSource != null) && (dataSourceFromTxMgr != null) && !dataSource.equals(dataSourceFromTxMgr)) [ FD ]
Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())-->Line_32 $$ String tmName = mergedSqlConfig.getTransactionManager()[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_32 $$ String tmName = mergedSqlConfig.getTransactionManager()[ CD ]
Line_34 $$ final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)-->Line_45 $$ DataSource dataSourceFromTxMgr = getDataSourceFromTransactionManager(transactionManager)[ FD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_16 $$ populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)[ FD ]
Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)-->Line_47 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "the configured DataSource [%s] (named '%s') is not the one associated " + "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(), dsName, transactionManager.getClass().getName(), tmName))[ FD ]
Line_49 $$ if (dataSource == null) -->Line_50 $$ dataSource = dataSourceFromTxMgr[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_47 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "the configured DataSource [%s] (named '%s') is not the one associated " + "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(), dsName, transactionManager.getClass().getName(), tmName))[ FD ]
Line_50 $$ dataSource = dataSourceFromTxMgr-->Line_51 $$ if (dataSource == null) [ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_13 $$ populator.setCommentPrefix(mergedSqlConfig.getCommentPrefix())[ CD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_15 $$ populator.setBlockCommentEndDelimiter(mergedSqlConfig.getBlockCommentEndDelimiter())[ FD ]
Line_22 $$ if (StringUtils.hasText(statement)) -->Line_24 $$ scriptResources.add(new ByteArrayResource(statement.getBytes(), "from inlined SQL statement: " + statement))[ CD ]
Line_21 $$ for (String statement : sql.statements()) -->Line_22 $$ if (StringUtils.hasText(statement)) [ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_34 $$ final PlatformTransactionManager transactionManager = TestContextTransactionUtils.retrieveTransactionManager(testContext, tmName)[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_3 $$ if (executionPhase != sql.executionPhase()) [ CD ]
Line_36 $$ if (transactionManager == null) -->Line_56 $$ int propagation = newTxRequired ? TransactionDefinition.PROPAGATION_REQUIRES_NEW : TransactionDefinition.PROPAGATION_REQUIRED[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_16 $$ populator.setContinueOnError(mergedSqlConfig.getErrorMode() == ErrorMode.CONTINUE_ON_ERROR)[ CD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_6 $$ MergedSqlConfig mergedSqlConfig = new MergedSqlConfig(sql.config(), testContext.getTestClass())[ CD ]
Line_7 $$ if (logger.isDebugEnabled()) -->Line_8 $$ logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig, executionPhase, testContext))[ CD ]
Line_21 $$ for (String statement : sql.statements()) -->Line_23 $$ statement = statement.trim()[ FD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_12 $$ populator.setSeparator(mergedSqlConfig.getSeparator())[ FD ]
Line_10 $$ final ResourceDatabasePopulator populator = new ResourceDatabasePopulator()-->Line_14 $$ populator.setBlockCommentStartDelimiter(mergedSqlConfig.getBlockCommentStartDelimiter())[ FD ]
Line_33 $$ DataSource dataSource = TestContextTransactionUtils.retrieveDataSource(testContext, dsName)-->Line_43 $$ populator.execute(dataSource)[ FD ]
Line_31 $$ String dsName = mergedSqlConfig.getDataSource()-->Line_47 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "the configured DataSource [%s] (named '%s') is not the one associated " + "with transaction manager [%s] (named '%s').", testContext, dataSource.getClass().getName(), dsName, transactionManager.getClass().getName(), tmName))[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_38 $$ throw new IllegalStateException(String.format("Failed to execute SQL scripts for test context %s: " + "cannot execute SQL scripts using Transaction Mode " + "[%s] without a PlatformTransactionManager.", testContext, TransactionMode.ISOLATED))[ FD ]
Line_2 $$ private void executeSqlScripts(Sql sql, ExecutionPhase executionPhase, TestContext testContext, boolean classLevel) throws Exception -->Line_18 $$ String[] scripts = getScripts(sql, testContext, classLevel)[ CD ]
