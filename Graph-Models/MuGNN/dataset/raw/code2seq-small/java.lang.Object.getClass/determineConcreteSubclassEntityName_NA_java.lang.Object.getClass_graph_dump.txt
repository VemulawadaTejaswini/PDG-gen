Line_3 $$ final Class concreteEntityClass = entityInstance.getClass()-->Line_9 $$ throw new HibernateException("Unable to resolve entity name from Class [" + concreteEntityClass.getName() + "]" + " expected instance/subclass of [" + getEntityName() + "]")[ FD ]
Line_2 $$ public String determineConcreteSubclassEntityName(Object entityInstance, SessionFactoryImplementor factory) -->Line_4 $$ if (concreteEntityClass == getMappedClass()) [ CD ]
Line_7 $$ String entityName = getEntityMetamodel().findEntityNameByEntityClass(concreteEntityClass)-->Line_8 $$ if (entityName == null) [ FD ]
Line_2 $$ public String determineConcreteSubclassEntityName(Object entityInstance, SessionFactoryImplementor factory) -->Line_3 $$ final Class concreteEntityClass = entityInstance.getClass()[ CD ]
Line_2 $$ public String determineConcreteSubclassEntityName(Object entityInstance, SessionFactoryImplementor factory) -->Line_3 $$ final Class concreteEntityClass = entityInstance.getClass()[ FD ]
Line_4 $$ if (concreteEntityClass == getMappedClass()) -->Line_8 $$ if (entityName == null) [ CD ]
Line_4 $$ if (concreteEntityClass == getMappedClass()) -->Line_11 $$ return entityName[ CD ]
Line_4 $$ if (concreteEntityClass == getMappedClass()) -->Line_7 $$ String entityName = getEntityMetamodel().findEntityNameByEntityClass(concreteEntityClass)[ CD ]
Line_4 $$ if (concreteEntityClass == getMappedClass()) -->Line_5 $$ return getEntityName()[ CD ]
Line_3 $$ final Class concreteEntityClass = entityInstance.getClass()-->Line_4 $$ if (concreteEntityClass == getMappedClass()) [ FD ]
Line_3 $$ final Class concreteEntityClass = entityInstance.getClass()-->Line_7 $$ String entityName = getEntityMetamodel().findEntityNameByEntityClass(concreteEntityClass)[ FD ]
