Line_2 $$ public void testBeansStop() -->Line_17 $$ assertFalse(stopError, bean2.isRunning())[ CD ]
Line_2 $$ public void testBeansStop() -->Line_19 $$ assertFalse(stopError, bean4.isRunning())[ CD ]
Line_15 $$ String stopError = "bean was not stopped"-->Line_19 $$ assertFalse(stopError, bean4.isRunning())[ FD ]
Line_9 $$ String startError = "bean was not started"-->Line_10 $$ assertTrue(startError, bean1.isRunning())[ FD ]
Line_3 $$ AbstractApplicationContext context = new ClassPathXmlApplicationContext("lifecycleTests.xml", getClass())-->Line_8 $$ LifecycleTestBean bean4 = (LifecycleTestBean) context.getBean("bean4")[ FD ]
Line_2 $$ public void testBeansStop() -->Line_8 $$ LifecycleTestBean bean4 = (LifecycleTestBean) context.getBean("bean4")[ CD ]
Line_2 $$ public void testBeansStop() -->Line_10 $$ assertTrue(startError, bean1.isRunning())[ CD ]
Line_2 $$ public void testBeansStop() -->Line_14 $$ context.stop()[ CD ]
Line_2 $$ public void testBeansStop() -->Line_9 $$ String startError = "bean was not started"[ CD ]
Line_2 $$ public void testBeansStop() -->Line_18 $$ assertFalse(stopError, bean3.isRunning())[ CD ]
Line_3 $$ AbstractApplicationContext context = new ClassPathXmlApplicationContext("lifecycleTests.xml", getClass())-->Line_7 $$ LifecycleTestBean bean3 = (LifecycleTestBean) context.getBean("bean3")[ FD ]
Line_3 $$ AbstractApplicationContext context = new ClassPathXmlApplicationContext("lifecycleTests.xml", getClass())-->Line_6 $$ LifecycleTestBean bean2 = (LifecycleTestBean) context.getBean("bean2")[ FD ]
Line_2 $$ public void testBeansStop() -->Line_11 $$ assertTrue(startError, bean2.isRunning())[ CD ]
Line_15 $$ String stopError = "bean was not stopped"-->Line_17 $$ assertFalse(stopError, bean2.isRunning())[ FD ]
Line_6 $$ LifecycleTestBean bean2 = (LifecycleTestBean) context.getBean("bean2")-->Line_17 $$ assertFalse(stopError, bean2.isRunning())[ FD ]
Line_15 $$ String stopError = "bean was not stopped"-->Line_18 $$ assertFalse(stopError, bean3.isRunning())[ FD ]
Line_15 $$ String stopError = "bean was not stopped"-->Line_16 $$ assertFalse(stopError, bean1.isRunning())[ FD ]
Line_3 $$ AbstractApplicationContext context = new ClassPathXmlApplicationContext("lifecycleTests.xml", getClass())-->Line_4 $$ context.start()[ FD ]
Line_5 $$ LifecycleTestBean bean1 = (LifecycleTestBean) context.getBean("bean1")-->Line_10 $$ assertTrue(startError, bean1.isRunning())[ FD ]
Line_3 $$ AbstractApplicationContext context = new ClassPathXmlApplicationContext("lifecycleTests.xml", getClass())-->Line_14 $$ context.stop()[ FD ]
Line_2 $$ public void testBeansStop() -->Line_15 $$ String stopError = "bean was not stopped"[ CD ]
Line_2 $$ public void testBeansStop() -->Line_16 $$ assertFalse(stopError, bean1.isRunning())[ CD ]
Line_9 $$ String startError = "bean was not started"-->Line_12 $$ assertTrue(startError, bean3.isRunning())[ FD ]
Line_5 $$ LifecycleTestBean bean1 = (LifecycleTestBean) context.getBean("bean1")-->Line_16 $$ assertFalse(stopError, bean1.isRunning())[ FD ]
Line_2 $$ public void testBeansStop() -->Line_13 $$ assertTrue(startError, bean4.isRunning())[ CD ]
Line_8 $$ LifecycleTestBean bean4 = (LifecycleTestBean) context.getBean("bean4")-->Line_19 $$ assertFalse(stopError, bean4.isRunning())[ FD ]
Line_2 $$ public void testBeansStop() -->Line_4 $$ context.start()[ CD ]
Line_8 $$ LifecycleTestBean bean4 = (LifecycleTestBean) context.getBean("bean4")-->Line_13 $$ assertTrue(startError, bean4.isRunning())[ FD ]
Line_2 $$ public void testBeansStop() -->Line_5 $$ LifecycleTestBean bean1 = (LifecycleTestBean) context.getBean("bean1")[ CD ]
Line_9 $$ String startError = "bean was not started"-->Line_11 $$ assertTrue(startError, bean2.isRunning())[ FD ]
Line_2 $$ public void testBeansStop() -->Line_7 $$ LifecycleTestBean bean3 = (LifecycleTestBean) context.getBean("bean3")[ CD ]
Line_6 $$ LifecycleTestBean bean2 = (LifecycleTestBean) context.getBean("bean2")-->Line_11 $$ assertTrue(startError, bean2.isRunning())[ FD ]
Line_3 $$ AbstractApplicationContext context = new ClassPathXmlApplicationContext("lifecycleTests.xml", getClass())-->Line_5 $$ LifecycleTestBean bean1 = (LifecycleTestBean) context.getBean("bean1")[ FD ]
Line_2 $$ public void testBeansStop() -->Line_3 $$ AbstractApplicationContext context = new ClassPathXmlApplicationContext("lifecycleTests.xml", getClass())[ CD ]
Line_7 $$ LifecycleTestBean bean3 = (LifecycleTestBean) context.getBean("bean3")-->Line_12 $$ assertTrue(startError, bean3.isRunning())[ FD ]
Line_7 $$ LifecycleTestBean bean3 = (LifecycleTestBean) context.getBean("bean3")-->Line_18 $$ assertFalse(stopError, bean3.isRunning())[ FD ]
Line_2 $$ public void testBeansStop() -->Line_6 $$ LifecycleTestBean bean2 = (LifecycleTestBean) context.getBean("bean2")[ CD ]
Line_9 $$ String startError = "bean was not started"-->Line_13 $$ assertTrue(startError, bean4.isRunning())[ FD ]
Line_2 $$ public void testBeansStop() -->Line_12 $$ assertTrue(startError, bean3.isRunning())[ CD ]
