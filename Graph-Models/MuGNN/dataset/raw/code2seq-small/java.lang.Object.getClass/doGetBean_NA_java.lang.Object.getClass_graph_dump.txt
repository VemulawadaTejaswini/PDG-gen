Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_66 $$ String scopeName = mbd.getScope()[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_64 $$ bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd)[ FD ]
Line_8 $$ if (isSingletonCurrentlyInCreation(beanName)) -->Line_9 $$ logger.debug("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference")[ CD ]
Line_14 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, null)-->Line_99 $$ throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass())[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_6 $$ if (sharedInstance != null && args == null) [ CD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_55 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_33 $$ checkMergedBeanDefinition(mbd, beanName, args)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_25 $$ return parentBeanFactory.getBean(nameToLookup, requiredType)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_3 $$ final String beanName = transformedBeanName(name)[ FD ]
Line_19 $$ BeanFactory parentBeanFactory = getParentBeanFactory()-->Line_25 $$ return parentBeanFactory.getBean(nameToLookup, requiredType)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_22 $$ if (args != null) [ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_50 $$ destroySingleton(beanName)[ FD ]
Line_4 $$ Object bean-->Line_94 $$ return getTypeConverter().convertIfNecessary(bean, requiredType)[ FD ]
Line_45 $$ sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() -->Line_55 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd)[ FD ]
Line_6 $$ if (sharedInstance != null && args == null) -->Line_19 $$ BeanFactory parentBeanFactory = getParentBeanFactory()[ CD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_38 $$ throw new BeanCreationException(mbd.getResourceDescription(), beanName, "Circular depends-on relationship between '" + beanName + "' and '" + dependsOnBean + "'")[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_20 $$ if (parentBeanFactory != null && !containsBeanDefinition(beanName)) [ FD ]
Line_44 $$ if (mbd.isSingleton()) -->Line_45 $$ sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() [ CD ]
Line_14 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, null)-->Line_94 $$ return getTypeConverter().convertIfNecessary(bean, requiredType)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_82 $$ bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_62 $$ afterPrototypeCreation(beanName)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_78 $$ afterPrototypeCreation(beanName)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_23 $$ return (T) parentBeanFactory.getBean(nameToLookup, args)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_45 $$ sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() [ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_72 $$ Object scopedInstance = scope.get(beanName, new ObjectFactory<Object>() [ FD ]
Line_4 $$ Object bean-->Line_92 $$ if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) [ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_55 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_48 $$ return createBean(beanName, mbd, args)[ FD ]
Line_5 $$ Object sharedInstance = getSingleton(beanName)-->Line_45 $$ sharedInstance = getSingleton(beanName, new ObjectFactory<Object>() [ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_76 $$ return createBean(beanName, mbd, args)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_5 $$ Object sharedInstance = getSingleton(beanName)[ CD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_48 $$ return createBean(beanName, mbd, args)[ FD ]
Line_96 $$ if (logger.isDebugEnabled()) -->Line_97 $$ logger.debug("Failed to convert bean '" + name + "' to required type [" + ClassUtils.getQualifiedName(requiredType) + "]", ex)[ CD ]
Line_72 $$ Object scopedInstance = scope.get(beanName, new ObjectFactory<Object>() -->Line_74 $$ beforePrototypeCreation(beanName)[ CD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_92 $$ if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) [ FD ]
Line_4 $$ Object bean-->Line_99 $$ throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass())[ FD ]
Line_36 $$ for (String dependsOnBean : dependsOn) -->Line_40 $$ registerDependentBean(dependsOnBean, beanName)[ FD ]
Line_19 $$ BeanFactory parentBeanFactory = getParentBeanFactory()-->Line_23 $$ return (T) parentBeanFactory.getBean(nameToLookup, args)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_92 $$ if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) [ CD ]
Line_44 $$ if (mbd.isSingleton()) -->Line_55 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd)[ CD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_48 $$ return createBean(beanName, mbd, args)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_14 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, null)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_14 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, null)[ FD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_60 $$ prototypeInstance = createBean(beanName, mbd, args)[ FD ]
Line_28 $$ if (!typeCheckOnly) -->Line_29 $$ markBeanAsCreated(beanName)[ CD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_76 $$ return createBean(beanName, mbd, args)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_4 $$ Object bean[ CD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_59 $$ beforePrototypeCreation(beanName)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_28 $$ if (!typeCheckOnly) [ FD ]
Line_36 $$ for (String dependsOnBean : dependsOn) -->Line_37 $$ if (isDependent(beanName, dependsOnBean)) [ FD ]
Line_56 $$ if (mbd.isPrototype()) -->Line_64 $$ bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd)[ CD ]
Line_7 $$ if (logger.isDebugEnabled()) -->Line_8 $$ if (isSingletonCurrentlyInCreation(beanName)) [ CD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_74 $$ beforePrototypeCreation(beanName)[ FD ]
Line_34 $$ String[] dependsOn = mbd.getDependsOn()-->Line_35 $$ if (dependsOn != null) [ FD ]
Line_21 $$ String nameToLookup = originalBeanName(name)-->Line_23 $$ return (T) parentBeanFactory.getBean(nameToLookup, args)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_60 $$ prototypeInstance = createBean(beanName, mbd, args)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_94 $$ return getTypeConverter().convertIfNecessary(bean, requiredType)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_5 $$ Object sharedInstance = getSingleton(beanName)[ FD ]
Line_20 $$ if (parentBeanFactory != null && !containsBeanDefinition(beanName)) -->Line_21 $$ String nameToLookup = originalBeanName(name)[ CD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_88 $$ cleanupAfterBeanCreationFailure(beanName)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_64 $$ bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd)[ FD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_33 $$ checkMergedBeanDefinition(mbd, beanName, args)[ FD ]
Line_21 $$ String nameToLookup = originalBeanName(name)-->Line_25 $$ return parentBeanFactory.getBean(nameToLookup, requiredType)[ FD ]
Line_6 $$ if (sharedInstance != null && args == null) -->Line_7 $$ if (logger.isDebugEnabled()) [ CD ]
Line_20 $$ if (parentBeanFactory != null && !containsBeanDefinition(beanName)) -->Line_22 $$ if (args != null) [ CD ]
Line_4 $$ Object bean-->Line_14 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, null)[ FD ]
Line_6 $$ if (sharedInstance != null && args == null) -->Line_16 $$ if (isPrototypeCurrentlyInCreation(beanName)) [ CD ]
Line_56 $$ if (mbd.isPrototype()) -->Line_67 $$ final Scope scope = this.scopes.get(scopeName)[ CD ]
Line_5 $$ Object sharedInstance = getSingleton(beanName)-->Line_14 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, null)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_97 $$ logger.debug("Failed to convert bean '" + name + "' to required type [" + ClassUtils.getQualifiedName(requiredType) + "]", ex)[ FD ]
Line_22 $$ if (args != null) -->Line_23 $$ return (T) parentBeanFactory.getBean(nameToLookup, args)[ CD ]
Line_56 $$ if (mbd.isPrototype()) -->Line_68 $$ if (scope == null) [ CD ]
Line_36 $$ for (String dependsOnBean : dependsOn) -->Line_41 $$ getBean(dependsOnBean)[ FD ]
Line_6 $$ if (sharedInstance != null && args == null) -->Line_28 $$ if (!typeCheckOnly) [ CD ]
Line_8 $$ if (isSingletonCurrentlyInCreation(beanName)) -->Line_11 $$ logger.debug("Returning cached instance of singleton bean '" + beanName + "'")[ CD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)[ FD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_34 $$ String[] dependsOn = mbd.getDependsOn()[ FD ]
Line_6 $$ if (sharedInstance != null && args == null) -->Line_14 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, null)[ CD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_8 $$ if (isSingletonCurrentlyInCreation(beanName)) [ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_21 $$ String nameToLookup = originalBeanName(name)[ FD ]
Line_56 $$ if (mbd.isPrototype()) -->Line_66 $$ String scopeName = mbd.getScope()[ CD ]
Line_14 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, null)-->Line_92 $$ if (requiredType != null && bean != null && !requiredType.isAssignableFrom(bean.getClass())) [ FD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_76 $$ return createBean(beanName, mbd, args)[ FD ]
Line_6 $$ if (sharedInstance != null && args == null) -->Line_20 $$ if (parentBeanFactory != null && !containsBeanDefinition(beanName)) [ CD ]
Line_22 $$ if (args != null) -->Line_25 $$ return parentBeanFactory.getBean(nameToLookup, requiredType)[ CD ]
Line_44 $$ if (mbd.isSingleton()) -->Line_56 $$ if (mbd.isPrototype()) [ CD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_3 $$ final String beanName = transformedBeanName(name)[ CD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_60 $$ prototypeInstance = createBean(beanName, mbd, args)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_37 $$ if (isDependent(beanName, dependsOnBean)) [ FD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_82 $$ bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_102 $$ return (T) bean[ CD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_40 $$ registerDependentBean(dependsOnBean, beanName)[ FD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_56 $$ if (mbd.isPrototype()) [ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_55 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_29 $$ markBeanAsCreated(beanName)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_33 $$ checkMergedBeanDefinition(mbd, beanName, args)[ FD ]
Line_3 $$ final String beanName = transformedBeanName(name)-->Line_16 $$ if (isPrototypeCurrentlyInCreation(beanName)) [ FD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_64 $$ bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd)[ FD ]
Line_32 $$ final RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName)-->Line_44 $$ if (mbd.isSingleton()) [ FD ]
Line_5 $$ Object sharedInstance = getSingleton(beanName)-->Line_55 $$ bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd)[ FD ]
Line_2 $$ protected <T> T doGetBean(final String name, final Class<T> requiredType, final Object[] args, boolean typeCheckOnly) throws BeansException -->Line_82 $$ bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd)[ FD ]
