Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())-->Line_11 $$ given(this.versionStrategy.getResourceVersion(expected)).willReturn("newer-version")[ FD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_14 $$ assertNull(actual)[ CD ]
Line_3 $$ String versionFile = "bar-version.css"-->Line_10 $$ given(this.versionStrategy.removeVersion(versionFile, version)).willReturn(file)[ FD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_4 $$ String version = "version"[ CD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_3 $$ String versionFile = "bar-version.css"[ CD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_10 $$ given(this.versionStrategy.removeVersion(versionFile, version)).willReturn(file)[ CD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_5 $$ String file = "bar.css"[ CD ]
Line_5 $$ String file = "bar.css"-->Line_10 $$ given(this.versionStrategy.removeVersion(versionFile, version)).willReturn(file)[ FD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_11 $$ given(this.versionStrategy.getResourceVersion(expected)).willReturn("newer-version")[ CD ]
Line_5 $$ String file = "bar.css"-->Line_8 $$ given(this.chain.resolveResource(null, file, this.locations)).willReturn(expected)[ FD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_7 $$ given(this.chain.resolveResource(null, versionFile, this.locations)).willReturn(null)[ CD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())[ CD ]
Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())-->Line_8 $$ given(this.chain.resolveResource(null, file, this.locations)).willReturn(expected)[ FD ]
Line_13 $$ Resource actual = this.resolver.resolveResourceInternal(null, versionFile, this.locations, this.chain)-->Line_14 $$ assertNull(actual)[ FD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_13 $$ Resource actual = this.resolver.resolveResourceInternal(null, versionFile, this.locations, this.chain)[ CD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_12 $$ this.resolver.setStrategyMap(Collections.singletonMap("/**", this.versionStrategy))[ CD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_15 $$ verify(this.versionStrategy, times(1)).getResourceVersion(expected)[ CD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_8 $$ given(this.chain.resolveResource(null, file, this.locations)).willReturn(expected)[ CD ]
Line_3 $$ String versionFile = "bar-version.css"-->Line_13 $$ Resource actual = this.resolver.resolveResourceInternal(null, versionFile, this.locations, this.chain)[ FD ]
Line_4 $$ String version = "version"-->Line_10 $$ given(this.versionStrategy.removeVersion(versionFile, version)).willReturn(file)[ FD ]
Line_3 $$ String versionFile = "bar-version.css"-->Line_7 $$ given(this.chain.resolveResource(null, versionFile, this.locations)).willReturn(null)[ FD ]
Line_6 $$ Resource expected = new ClassPathResource("test/" + file, getClass())-->Line_15 $$ verify(this.versionStrategy, times(1)).getResourceVersion(expected)[ FD ]
Line_4 $$ String version = "version"-->Line_9 $$ given(this.versionStrategy.extractVersion(versionFile)).willReturn(version)[ FD ]
Line_2 $$ public void resolveResourceVersionDoesNotMatch() throws Exception -->Line_9 $$ given(this.versionStrategy.extractVersion(versionFile)).willReturn(version)[ CD ]
Line_3 $$ String versionFile = "bar-version.css"-->Line_9 $$ given(this.versionStrategy.extractVersion(versionFile)).willReturn(version)[ FD ]
