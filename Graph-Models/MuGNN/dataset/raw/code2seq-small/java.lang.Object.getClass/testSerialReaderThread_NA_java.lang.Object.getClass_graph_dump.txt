Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_13 $$ SerialJobFactory jobFactory = new SerialJobFactory(submitter, jobProducer, new Path(ws.getAbsolutePath()), conf, startFlag, resolver)[ CD ]
Line_4 $$ File fin = new File("src" + File.separator + "test" + File.separator + "resources" + File.separator + "data" + File.separator + "wordcount2.json")-->Line_5 $$ JobStoryProducer jobProducer = new ZombieJobProducer(new Path(fin.getAbsolutePath()), null, conf)[ FD ]
Line_13 $$ SerialJobFactory jobFactory = new SerialJobFactory(submitter, jobProducer, new Path(ws.getAbsolutePath()), conf, startFlag, resolver)-->Line_15 $$ jobFactory.setDistCacheEmulator(new DistributedCacheEmulator(conf, ioPath))[ FD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_7 $$ UserResolver resolver = new SubmitterUserResolver()[ CD ]
Line_16 $$ Thread test = jobFactory.createReaderThread()-->Line_17 $$ test.start()[ FD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_4 $$ File fin = new File("src" + File.separator + "test" + File.separator + "resources" + File.separator + "data" + File.separator + "wordcount2.json")[ CD ]
Line_8 $$ FakeJobSubmitter submitter = new FakeJobSubmitter()-->Line_19 $$ assertEquals(0, submitter.getJobs().size())[ FD ]
Line_21 $$ while (test.isAlive()) -->Line_22 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_21 $$ while (test.isAlive()) [ CD ]
Line_8 $$ FakeJobSubmitter submitter = new FakeJobSubmitter()-->Line_25 $$ assertEquals(2, submitter.getJobs().size())[ FD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_10 $$ if (!ws.exists()) [ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_25 $$ assertEquals(2, submitter.getJobs().size())[ CD ]
Line_9 $$ File ws = new File("target" + File.separator + this.getClass().getName())-->Line_11 $$ Assert.assertTrue(ws.mkdirs())[ FD ]
Line_6 $$ CountDownLatch startFlag = new CountDownLatch(1)-->Line_20 $$ startFlag.countDown()[ FD ]
Line_16 $$ Thread test = jobFactory.createReaderThread()-->Line_21 $$ while (test.isAlive()) [ FD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_20 $$ startFlag.countDown()[ CD ]
Line_9 $$ File ws = new File("target" + File.separator + this.getClass().getName())-->Line_14 $$ Path ioPath = new Path(ws.getAbsolutePath())[ FD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_14 $$ Path ioPath = new Path(ws.getAbsolutePath())[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_16 $$ Thread test = jobFactory.createReaderThread()[ CD ]
Line_13 $$ SerialJobFactory jobFactory = new SerialJobFactory(submitter, jobProducer, new Path(ws.getAbsolutePath()), conf, startFlag, resolver)-->Line_16 $$ Thread test = jobFactory.createReaderThread()[ FD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_8 $$ FakeJobSubmitter submitter = new FakeJobSubmitter()[ CD ]
Line_13 $$ SerialJobFactory jobFactory = new SerialJobFactory(submitter, jobProducer, new Path(ws.getAbsolutePath()), conf, startFlag, resolver)-->Line_23 $$ jobFactory.update(null)[ FD ]
Line_9 $$ File ws = new File("target" + File.separator + this.getClass().getName())-->Line_10 $$ if (!ws.exists()) [ FD ]
Line_10 $$ if (!ws.exists()) -->Line_11 $$ Assert.assertTrue(ws.mkdirs())[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_15 $$ jobFactory.setDistCacheEmulator(new DistributedCacheEmulator(conf, ioPath))[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_17 $$ test.start()[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_18 $$ Thread.sleep(1000)[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_6 $$ CountDownLatch startFlag = new CountDownLatch(1)[ CD ]
Line_21 $$ while (test.isAlive()) -->Line_23 $$ jobFactory.update(null)[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_5 $$ JobStoryProducer jobProducer = new ZombieJobProducer(new Path(fin.getAbsolutePath()), null, conf)[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_19 $$ assertEquals(0, submitter.getJobs().size())[ CD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_9 $$ File ws = new File("target" + File.separator + this.getClass().getName())[ CD ]
Line_9 $$ File ws = new File("target" + File.separator + this.getClass().getName())-->Line_13 $$ SerialJobFactory jobFactory = new SerialJobFactory(submitter, jobProducer, new Path(ws.getAbsolutePath()), conf, startFlag, resolver)[ FD ]
Line_2 $$ public void testSerialReaderThread() throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
