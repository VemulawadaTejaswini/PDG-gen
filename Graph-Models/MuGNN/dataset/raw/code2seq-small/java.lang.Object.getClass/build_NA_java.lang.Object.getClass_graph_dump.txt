Line_2 $$ public void build() throws Exception -->Line_3 $$ File serverConfigFile = new File(_serverConfigFileName)[ CD ]
Line_6 $$ String serverConfigContent = StringUtil.read(classLoader, "com/liferay/portal/tools/wsdd/builder/dependencies/" + "server-config.wsdd")-->Line_7 $$ _writeFile(serverConfigFile, serverConfigContent)[ FD ]
Line_2 $$ public void build() throws Exception -->Line_10 $$ String content = ToolsUtil.getContent(_fileName)[ CD ]
Line_12 $$ Element rootElement = document.getRootElement()-->Line_13 $$ String packagePath = rootElement.attributeValue("package-path")[ FD ]
Line_14 $$ Element portletElement = rootElement.element("portlet")-->Line_17 $$ _portletShortName = portletElement.attributeValue("short-name")[ FD ]
Line_3 $$ File serverConfigFile = new File(_serverConfigFileName)-->Line_7 $$ _writeFile(serverConfigFile, serverConfigContent)[ FD ]
Line_14 $$ Element portletElement = rootElement.element("portlet")-->Line_16 $$ if (portletElement != null) [ FD ]
Line_16 $$ if (portletElement != null) -->Line_19 $$ _portletShortName = namespaceElement.getText()[ CD ]
Line_12 $$ Element rootElement = document.getRootElement()-->Line_14 $$ Element portletElement = rootElement.element("portlet")[ FD ]
Line_27 $$ if (remoteService) -->Line_29 $$ WSDDMerger.merge(_outputPath + "/" + entityName + "Service_deploy.wsdd", _serverConfigFileName)[ CD ]
Line_16 $$ if (portletElement != null) -->Line_17 $$ _portletShortName = portletElement.attributeValue("short-name")[ CD ]
Line_4 $$ if (!serverConfigFile.exists()) -->Line_5 $$ ClassLoader classLoader = getClass().getClassLoader()[ CD ]
Line_2 $$ public void build() throws Exception -->Line_14 $$ Element portletElement = rootElement.element("portlet")[ CD ]
Line_4 $$ if (!serverConfigFile.exists()) -->Line_7 $$ _writeFile(serverConfigFile, serverConfigContent)[ CD ]
Line_25 $$ String entityName = entityElement.attributeValue("name")-->Line_28 $$ _createServiceWSDD(entityName)[ FD ]
Line_2 $$ public void build() throws Exception -->Line_9 $$ SAXReader saxReader = _getSAXReader()[ CD ]
Line_12 $$ Element rootElement = document.getRootElement()-->Line_15 $$ Element namespaceElement = rootElement.element("namespace")[ FD ]
Line_2 $$ public void build() throws Exception -->Line_23 $$ List<Element> entityElements = rootElement.elements("entity")[ CD ]
Line_9 $$ SAXReader saxReader = _getSAXReader()-->Line_11 $$ Document document = saxReader.read(new XMLSafeReader(content))[ FD ]
Line_2 $$ public void build() throws Exception -->Line_12 $$ Element rootElement = document.getRootElement()[ CD ]
Line_5 $$ ClassLoader classLoader = getClass().getClassLoader()-->Line_6 $$ String serverConfigContent = StringUtil.read(classLoader, "com/liferay/portal/tools/wsdd/builder/dependencies/" + "server-config.wsdd")[ FD ]
Line_2 $$ public void build() throws Exception -->Line_13 $$ String packagePath = rootElement.attributeValue("package-path")[ CD ]
Line_15 $$ Element namespaceElement = rootElement.element("namespace")-->Line_19 $$ _portletShortName = namespaceElement.getText()[ FD ]
Line_13 $$ String packagePath = rootElement.attributeValue("package-path")-->Line_21 $$ _outputPath += StringUtil.replace(packagePath, ".", "/") + "/service/http"[ FD ]
Line_2 $$ public void build() throws Exception -->Line_15 $$ Element namespaceElement = rootElement.element("namespace")[ CD ]
Line_24 $$ for (Element entityElement : entityElements) -->Line_26 $$ boolean remoteService = GetterUtil.getBoolean(entityElement.attributeValue("remote-service"), true)[ FD ]
Line_11 $$ Document document = saxReader.read(new XMLSafeReader(content))-->Line_12 $$ Element rootElement = document.getRootElement()[ FD ]
Line_24 $$ for (Element entityElement : entityElements) -->Line_25 $$ String entityName = entityElement.attributeValue("name")[ FD ]
Line_27 $$ if (remoteService) -->Line_28 $$ _createServiceWSDD(entityName)[ CD ]
Line_4 $$ if (!serverConfigFile.exists()) -->Line_6 $$ String serverConfigContent = StringUtil.read(classLoader, "com/liferay/portal/tools/wsdd/builder/dependencies/" + "server-config.wsdd")[ CD ]
Line_2 $$ public void build() throws Exception -->Line_16 $$ if (portletElement != null) [ CD ]
Line_3 $$ File serverConfigFile = new File(_serverConfigFileName)-->Line_4 $$ if (!serverConfigFile.exists()) [ FD ]
Line_12 $$ Element rootElement = document.getRootElement()-->Line_23 $$ List<Element> entityElements = rootElement.elements("entity")[ FD ]
Line_2 $$ public void build() throws Exception -->Line_4 $$ if (!serverConfigFile.exists()) [ CD ]
Line_2 $$ public void build() throws Exception -->Line_11 $$ Document document = saxReader.read(new XMLSafeReader(content))[ CD ]
