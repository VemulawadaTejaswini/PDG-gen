Line_16 $$ value = resolveNestedPlaceholders((String) value)-->Line_19 $$ logger.debug(String.format("Found key '%s' in [%s] with type [%s] and value '%s'", key, propertySource.getName(), valueType.getSimpleName(), value))[ FD ]
Line_16 $$ value = resolveNestedPlaceholders((String) value)-->Line_24 $$ return this.conversionService.convert(value, targetValueType)[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_3 $$ boolean debugEnabled = logger.isDebugEnabled()[ CD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_7 $$ if (this.propertySources != null) [ CD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_14 $$ Class<?> valueType = value.getClass()[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_31 $$ return null[ CD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_16 $$ value = resolveNestedPlaceholders((String) value)[ FD ]
Line_16 $$ value = resolveNestedPlaceholders((String) value)-->Line_22 $$ throw new IllegalArgumentException(String.format("Cannot convert value [%s] from source type [%s] to target type [%s]", value, valueType.getSimpleName(), targetValueType.getSimpleName()))[ FD ]
Line_28 $$ if (debugEnabled) -->Line_29 $$ logger.debug(String.format("Could not find key '%s' in any property source. Returning [null]", key))[ CD ]
Line_12 $$ Object value-->Line_13 $$ if ((value = propertySource.getProperty(key)) != null) [ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_19 $$ logger.debug(String.format("Found key '%s' in [%s] with type [%s] and value '%s'", key, propertySource.getName(), valueType.getSimpleName(), value))[ FD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_14 $$ Class<?> valueType = value.getClass()[ CD ]
Line_14 $$ Class<?> valueType = value.getClass()-->Line_19 $$ logger.debug(String.format("Found key '%s' in [%s] with type [%s] and value '%s'", key, propertySource.getName(), valueType.getSimpleName(), value))[ FD ]
Line_12 $$ Object value-->Line_16 $$ value = resolveNestedPlaceholders((String) value)[ FD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_22 $$ throw new IllegalArgumentException(String.format("Cannot convert value [%s] from source type [%s] to target type [%s]", value, valueType.getSimpleName(), targetValueType.getSimpleName()))[ FD ]
Line_12 $$ Object value-->Line_22 $$ throw new IllegalArgumentException(String.format("Cannot convert value [%s] from source type [%s] to target type [%s]", value, valueType.getSimpleName(), targetValueType.getSimpleName()))[ FD ]
Line_8 $$ for (PropertySource<?> propertySource : this.propertySources) -->Line_19 $$ logger.debug(String.format("Found key '%s' in [%s] with type [%s] and value '%s'", key, propertySource.getName(), valueType.getSimpleName(), value))[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_29 $$ logger.debug(String.format("Could not find key '%s' in any property source. Returning [null]", key))[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_22 $$ throw new IllegalArgumentException(String.format("Cannot convert value [%s] from source type [%s] to target type [%s]", value, valueType.getSimpleName(), targetValueType.getSimpleName()))[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_15 $$ if (resolveNestedPlaceholders && value instanceof String) [ FD ]
Line_8 $$ for (PropertySource<?> propertySource : this.propertySources) -->Line_13 $$ if ((value = propertySource.getProperty(key)) != null) [ FD ]
Line_12 $$ Object value-->Line_14 $$ Class<?> valueType = value.getClass()[ FD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_18 $$ if (debugEnabled) [ CD ]
Line_9 $$ if (debugEnabled) -->Line_10 $$ logger.debug(String.format("Searching for key '%s' in [%s]", key, propertySource.getName()))[ CD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_15 $$ if (resolveNestedPlaceholders && value instanceof String) [ CD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_28 $$ if (debugEnabled) [ CD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_19 $$ logger.debug(String.format("Found key '%s' in [%s] with type [%s] and value '%s'", key, propertySource.getName(), valueType.getSimpleName(), value))[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_5 $$ logger.trace(String.format("getProperty(\"%s\", %s)", key, targetValueType.getSimpleName()))[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_13 $$ if ((value = propertySource.getProperty(key)) != null) [ FD ]
Line_12 $$ Object value-->Line_19 $$ logger.debug(String.format("Found key '%s' in [%s] with type [%s] and value '%s'", key, propertySource.getName(), valueType.getSimpleName(), value))[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_24 $$ return this.conversionService.convert(value, targetValueType)[ FD ]
Line_4 $$ if (logger.isTraceEnabled()) -->Line_5 $$ logger.trace(String.format("getProperty(\"%s\", %s)", key, targetValueType.getSimpleName()))[ CD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_24 $$ return this.conversionService.convert(value, targetValueType)[ CD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_21 $$ if (!this.conversionService.canConvert(valueType, targetValueType)) [ CD ]
Line_13 $$ if ((value = propertySource.getProperty(key)) != null) -->Line_24 $$ return this.conversionService.convert(value, targetValueType)[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_21 $$ if (!this.conversionService.canConvert(valueType, targetValueType)) [ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_10 $$ logger.debug(String.format("Searching for key '%s' in [%s]", key, propertySource.getName()))[ FD ]
Line_14 $$ Class<?> valueType = value.getClass()-->Line_21 $$ if (!this.conversionService.canConvert(valueType, targetValueType)) [ FD ]
Line_15 $$ if (resolveNestedPlaceholders && value instanceof String) -->Line_16 $$ value = resolveNestedPlaceholders((String) value)[ CD ]
Line_14 $$ Class<?> valueType = value.getClass()-->Line_22 $$ throw new IllegalArgumentException(String.format("Cannot convert value [%s] from source type [%s] to target type [%s]", value, valueType.getSimpleName(), targetValueType.getSimpleName()))[ FD ]
Line_12 $$ Object value-->Line_24 $$ return this.conversionService.convert(value, targetValueType)[ FD ]
Line_2 $$ protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) -->Line_4 $$ if (logger.isTraceEnabled()) [ CD ]
Line_18 $$ if (debugEnabled) -->Line_19 $$ logger.debug(String.format("Found key '%s' in [%s] with type [%s] and value '%s'", key, propertySource.getName(), valueType.getSimpleName(), value))[ CD ]
Line_8 $$ for (PropertySource<?> propertySource : this.propertySources) -->Line_10 $$ logger.debug(String.format("Searching for key '%s' in [%s]", key, propertySource.getName()))[ FD ]
