Line_27 $$ if (test == null)-->Line_28 $$ return[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_4 $$ if (!checkAvailableMemory(35, testResult)) [ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_20 $$ addErrorMessage(testResult, "Time out in " + myLastTestClass + ". Executed: " + myRunTests + " of " + totalTests)[ FD ]
Line_13 $$ if (myStartTime == 0) -->Line_19 $$ if (myInterruptedByOutOfTime) [ CD ]
Line_19 $$ if (myInterruptedByOutOfTime) -->Line_21 $$ testResult.stop()[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_26 $$ Test test = getTest(testCaseClass)[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_29 $$ myLastTestClass = testCaseClass.getName()[ FD ]
Line_4 $$ if (!checkAvailableMemory(35, testResult)) -->Line_5 $$ testResult.stop()[ CD ]
Line_26 $$ Test test = getTest(testCaseClass)-->Line_33 $$ test.run(testResult)[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_5 $$ testResult.stop()[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_30 $$ myLastTestStartTime = System.currentTimeMillis()[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_26 $$ Test test = getTest(testCaseClass)[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_31 $$ myLastTestTestMethodCount = test.countTestCases()[ CD ]
Line_15 $$ if (!loaderName.startsWith("com.intellij.")) -->Line_16 $$ beforeFirstTest()[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_10 $$ testResult.stop()[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_13 $$ if (myStartTime == 0) [ CD ]
Line_26 $$ Test test = getTest(testCaseClass)-->Line_46 $$ testResult.addError(test, t)[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_29 $$ myLastTestClass = testCaseClass.getName()[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_9 $$ addErrorMessage(testResult, "Too many errors. Executed: " + myRunTests + " of " + totalTests)[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_27 $$ if (test == null)[ CD ]
Line_19 $$ if (myInterruptedByOutOfTime) -->Line_22 $$ return[ CD ]
Line_14 $$ String loaderName = getClass().getClassLoader().getClass().getName()-->Line_15 $$ if (!loaderName.startsWith("com.intellij.")) [ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_33 $$ test.run(testResult)[ FD ]
Line_8 $$ if (testResult.errorCount() + testResult.failureCount() > MAX_FAILURE_TEST_COUNT) -->Line_11 $$ return[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_8 $$ if (testResult.errorCount() + testResult.failureCount() > MAX_FAILURE_TEST_COUNT) [ CD ]
Line_19 $$ if (myInterruptedByOutOfTime) -->Line_20 $$ addErrorMessage(testResult, "Time out in " + myLastTestClass + ". Executed: " + myRunTests + " of " + totalTests)[ CD ]
Line_8 $$ if (testResult.errorCount() + testResult.failureCount() > MAX_FAILURE_TEST_COUNT) -->Line_9 $$ addErrorMessage(testResult, "Too many errors. Executed: " + myRunTests + " of " + totalTests)[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_21 $$ testResult.stop()[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_4 $$ if (!checkAvailableMemory(35, testResult)) [ CD ]
Line_13 $$ if (myStartTime == 0) -->Line_14 $$ String loaderName = getClass().getClassLoader().getClass().getName()[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_25 $$ log("\nRunning " + testCaseClass.getName())[ FD ]
Line_26 $$ Test test = getTest(testCaseClass)-->Line_27 $$ if (test == null)[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_25 $$ log("\nRunning " + testCaseClass.getName())[ CD ]
Line_26 $$ Test test = getTest(testCaseClass)-->Line_31 $$ myLastTestTestMethodCount = test.countTestCases()[ FD ]
Line_13 $$ if (myStartTime == 0) -->Line_15 $$ if (!loaderName.startsWith("com.intellij.")) [ CD ]
Line_8 $$ if (testResult.errorCount() + testResult.failureCount() > MAX_FAILURE_TEST_COUNT) -->Line_10 $$ testResult.stop()[ CD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_46 $$ testResult.addError(test, t)[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_8 $$ if (testResult.errorCount() + testResult.failureCount() > MAX_FAILURE_TEST_COUNT) [ FD ]
Line_26 $$ Test test = getTest(testCaseClass)-->Line_44 $$ testResult.addError(test, t)[ FD ]
Line_2 $$ private void runNextTest(final TestResult testResult, int totalTests, Class testCaseClass) -->Line_44 $$ testResult.addError(test, t)[ FD ]
Line_4 $$ if (!checkAvailableMemory(35, testResult)) -->Line_6 $$ return[ CD ]
