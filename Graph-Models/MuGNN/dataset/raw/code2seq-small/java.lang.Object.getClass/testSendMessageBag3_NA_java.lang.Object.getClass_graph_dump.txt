Line_39 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_40 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI2))[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_41 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_44 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_4 $$ MockSPI mockSPI1 = _createMockSPI("SPIProvider", "SPI1")-->Line_36 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_11 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ CD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_10 $$ Message message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_25 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ CD ]
Line_4 $$ MockSPI mockSPI1 = _createMockSPI("SPIProvider", "SPI1")-->Line_25 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_43 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_34 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_27 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_36 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_29 $$ message = messageRoutingBag.getMessage()-->Line_30 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_36 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_19 $$ Throwable throwable = re.getCause()-->Line_20 $$ Assert.assertEquals(RuntimeException.class, throwable.getClass())[ FD ]
Line_37 $$ message = messageRoutingBag.getMessage()-->Line_38 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_37 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_4 $$ MockSPI mockSPI1 = _createMockSPI("SPIProvider", "SPI1")[ CD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_13 $$ _mockIntraband.setIOException(ioException)[ CD ]
Line_4 $$ MockSPI mockSPI1 = _createMockSPI("SPIProvider", "SPI1")-->Line_9 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_10 $$ Message message = messageRoutingBag.getMessage()-->Line_37 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_29 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_44 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_28 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_34 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_36 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_30 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ CD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_42 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ CD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_39 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_44 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_39 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_42 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_10 $$ Message message = messageRoutingBag.getMessage()-->Line_29 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()[ CD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_37 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_9 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ CD ]
Line_19 $$ Throwable throwable = re.getCause()-->Line_21 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_44 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_39 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_33 $$ messageRoutingBag = _createMessageRoutingBag()[ CD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_42 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_10 $$ Message message = messageRoutingBag.getMessage()-->Line_38 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_8 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ CD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_35 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_12 $$ IOException ioException = new IOException()[ CD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_28 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_41 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_10 $$ Message message = messageRoutingBag.getMessage()-->Line_11 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_15 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_25 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_7 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_29 $$ message = messageRoutingBag.getMessage()-->Line_37 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_27 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_40 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI2))[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_9 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_12 $$ IOException ioException = new IOException()-->Line_13 $$ _mockIntraband.setIOException(ioException)[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_27 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_32 $$ _installSPIs(mockSPI2)[ CD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_44 $$ message = messageRoutingBag.getMessage()[ CD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_34 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_44 $$ message = messageRoutingBag.getMessage()-->Line_45 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ FD ]
Line_37 $$ message = messageRoutingBag.getMessage()-->Line_45 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ FD ]
Line_29 $$ message = messageRoutingBag.getMessage()-->Line_38 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_35 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_4 $$ MockSPI mockSPI1 = _createMockSPI("SPIProvider", "SPI1")-->Line_5 $$ attributes.put(SPI.SPI_INSTANCE_PUBLICATION_KEY, mockSPI1)[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_40 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI2))[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_34 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_31 $$ MockSPI mockSPI2 = _createMockSPI("SPIProvider", "SPI2")[ CD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_33 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_40 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI2))[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_42 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_5 $$ attributes.put(SPI.SPI_INSTANCE_PUBLICATION_KEY, mockSPI1)[ CD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_43 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ CD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_42 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_4 $$ MockSPI mockSPI1 = _createMockSPI("SPIProvider", "SPI1")-->Line_28 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_39 $$ messageRoutingBag = _createMessageRoutingBag()[ CD ]
Line_29 $$ message = messageRoutingBag.getMessage()-->Line_45 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ FD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_39 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_39 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_44 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_37 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_4 $$ MockSPI mockSPI1 = _createMockSPI("SPIProvider", "SPI1")-->Line_43 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_10 $$ Message message = messageRoutingBag.getMessage()-->Line_45 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_34 $$ messageRoutingBag.setRoutingDowncast(true)[ CD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_26 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_39 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_29 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_33 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_36 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_7 $$ messageRoutingBag.setRoutingDowncast(true)[ CD ]
Line_12 $$ IOException ioException = new IOException()-->Line_21 $$ Assert.assertSame(ioException, throwable.getCause())[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_28 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ CD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_3 $$ ConcurrentMap<String, Object> attributes = LocalProcessLauncher.ProcessContext.getAttributes()[ CD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_26 $$ messageRoutingBag = _createMessageRoutingBag()[ CD ]
Line_10 $$ Message message = messageRoutingBag.getMessage()-->Line_30 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_37 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_38 $$ Assert.assertEquals(_RECEIVE_VALUE, message.get(_RECEIVE_KEY))[ CD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_35 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ CD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_41 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_8 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_16 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_43 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_42 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_10 $$ Message message = messageRoutingBag.getMessage()[ CD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_16 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_39 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_43 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_31 $$ MockSPI mockSPI2 = _createMockSPI("SPIProvider", "SPI2")-->Line_40 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI2))[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_25 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_36 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ CD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_35 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_40 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI2))[ CD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_41 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_33 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_45 $$ Assert.assertNull(message.get(_RECEIVE_KEY))[ CD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_27 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ CD ]
Line_39 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_41 $$ messageRoutingBag.setRoutingDowncast(true)[ FD ]
Line_37 $$ message = messageRoutingBag.getMessage()-->Line_44 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_29 $$ message = messageRoutingBag.getMessage()-->Line_44 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_29 $$ message = messageRoutingBag.getMessage()[ CD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_43 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_31 $$ MockSPI mockSPI2 = _createMockSPI("SPIProvider", "SPI2")-->Line_32 $$ _installSPIs(mockSPI2)[ FD ]
Line_3 $$ ConcurrentMap<String, Object> attributes = LocalProcessLauncher.ProcessContext.getAttributes()-->Line_5 $$ attributes.put(SPI.SPI_INSTANCE_PUBLICATION_KEY, mockSPI1)[ FD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_26 $$ messageRoutingBag = _createMessageRoutingBag()[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_43 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
Line_33 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_40 $$ messageRoutingBag.appendRoutingId(_toRoutingId(mockSPI2))[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_37 $$ message = messageRoutingBag.getMessage()[ CD ]
Line_6 $$ MessageRoutingBag messageRoutingBag = _createMessageRoutingBag()-->Line_29 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_26 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_35 $$ _intrabandBridgeDestination.sendMessageRoutingBag(messageRoutingBag)[ FD ]
Line_10 $$ Message message = messageRoutingBag.getMessage()-->Line_44 $$ message = messageRoutingBag.getMessage()[ FD ]
Line_2 $$ public void testSendMessageBag3() throws Exception -->Line_41 $$ messageRoutingBag.setRoutingDowncast(true)[ CD ]
Line_15 $$ messageRoutingBag = _createMessageRoutingBag()-->Line_28 $$ Assert.assertTrue(messageRoutingBag.isVisited(_toRoutingId(mockSPI1)))[ FD ]
