Line_17 $$ if (isInitialized && interceptor != null) -->Line_28 $$ if (interceptor != null) [ CD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) [ FD ]
Line_16 $$ LoadState state-->Line_35 $$ if (state == LoadState.UNKNOWN) [ FD ]
Line_39 $$ state = LoadState.UNKNOWN-->Line_42 $$ state = LoadState.UNKNOWN[ FD ]
Line_11 $$ sureFromUs = true-->Line_28 $$ if (interceptor != null) [ FD ]
Line_26 $$ state = LoadState.UNKNOWN-->Line_36 $$ state = LoadState.LOADED[ FD ]
Line_9 $$ entity = li.getImplementation()-->Line_19 $$ final Class entityClass = entity.getClass()[ FD ]
Line_15 $$ final boolean isInitialized = interceptor == null || interceptor.isAttributeLoaded(attributeName)-->Line_17 $$ if (isInitialized && interceptor != null) [ FD ]
Line_23 $$ state = LoadState.LOADED-->Line_39 $$ state = LoadState.UNKNOWN[ FD ]
Line_5 $$ LazyInitializer li = ((HibernateProxy) entity).getHibernateLazyInitializer()-->Line_6 $$ if (li.isUninitialized()) [ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_15 $$ final boolean isInitialized = interceptor == null || interceptor.isAttributeLoaded(attributeName)[ FD ]
Line_20 $$ final Object attributeValue = cache.getClassMetadata(entityClass).getAttributeAccess(attributeName).extractValue(entity)-->Line_21 $$ state = isLoaded(attributeValue)[ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_9 $$ entity = li.getImplementation()[ FD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_26 $$ state = LoadState.UNKNOWN[ FD ]
Line_3 $$ boolean sureFromUs = false-->Line_11 $$ sureFromUs = true[ FD ]
Line_20 $$ final Object attributeValue = cache.getClassMetadata(entityClass).getAttributeAccess(attributeName).extractValue(entity)-->Line_34 $$ state = isLoaded(attributeValue)[ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_4 $$ if (entity instanceof HibernateProxy) [ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) [ CD ]
Line_4 $$ if (entity instanceof HibernateProxy) -->Line_11 $$ sureFromUs = true[ CD ]
Line_14 $$ final LazyAttributeLoadingInterceptor interceptor = extractInterceptor((PersistentAttributeInterceptable) entity)-->Line_15 $$ final boolean isInitialized = interceptor == null || interceptor.isAttributeLoaded(attributeName)[ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_19 $$ final Class entityClass = entity.getClass()[ FD ]
Line_23 $$ state = LoadState.LOADED-->Line_35 $$ if (state == LoadState.UNKNOWN) [ FD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_42 $$ state = LoadState.UNKNOWN[ FD ]
Line_26 $$ state = LoadState.UNKNOWN-->Line_42 $$ state = LoadState.UNKNOWN[ FD ]
Line_29 $$ state = LoadState.NOT_LOADED-->Line_42 $$ state = LoadState.UNKNOWN[ FD ]
Line_26 $$ state = LoadState.UNKNOWN-->Line_34 $$ state = isLoaded(attributeValue)[ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_32 $$ final Class entityClass = entity.getClass()[ FD ]
Line_29 $$ state = LoadState.NOT_LOADED-->Line_35 $$ if (state == LoadState.UNKNOWN) [ FD ]
Line_9 $$ entity = li.getImplementation()-->Line_32 $$ final Class entityClass = entity.getClass()[ FD ]
Line_36 $$ state = LoadState.LOADED-->Line_42 $$ state = LoadState.UNKNOWN[ FD ]
Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) -->Line_15 $$ final boolean isInitialized = interceptor == null || interceptor.isAttributeLoaded(attributeName)[ CD ]
Line_23 $$ state = LoadState.LOADED-->Line_42 $$ state = LoadState.UNKNOWN[ FD ]
Line_16 $$ LoadState state-->Line_26 $$ state = LoadState.UNKNOWN[ FD ]
Line_16 $$ LoadState state-->Line_42 $$ state = LoadState.UNKNOWN[ FD ]
Line_9 $$ entity = li.getImplementation()-->Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) [ FD ]
Line_19 $$ final Class entityClass = entity.getClass()-->Line_20 $$ final Object attributeValue = cache.getClassMetadata(entityClass).getAttributeAccess(attributeName).extractValue(entity)[ FD ]
Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) -->Line_14 $$ final LazyAttributeLoadingInterceptor interceptor = extractInterceptor((PersistentAttributeInterceptable) entity)[ CD ]
Line_34 $$ state = isLoaded(attributeValue)-->Line_35 $$ if (state == LoadState.UNKNOWN) [ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_4 $$ if (entity instanceof HibernateProxy) [ CD ]
Line_6 $$ if (li.isUninitialized()) -->Line_7 $$ return LoadState.NOT_LOADED[ CD ]
Line_23 $$ state = LoadState.LOADED-->Line_34 $$ state = isLoaded(attributeValue)[ FD ]
Line_34 $$ state = isLoaded(attributeValue)-->Line_39 $$ state = LoadState.UNKNOWN[ FD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_22 $$ if (state == LoadState.UNKNOWN) [ FD ]
Line_26 $$ state = LoadState.UNKNOWN-->Line_35 $$ if (state == LoadState.UNKNOWN) [ FD ]
Line_26 $$ state = LoadState.UNKNOWN-->Line_29 $$ state = LoadState.NOT_LOADED[ FD ]
Line_4 $$ if (entity instanceof HibernateProxy) -->Line_5 $$ LazyInitializer li = ((HibernateProxy) entity).getHibernateLazyInitializer()[ CD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_20 $$ final Object attributeValue = cache.getClassMetadata(entityClass).getAttributeAccess(attributeName).extractValue(entity)[ FD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_23 $$ state = LoadState.LOADED[ FD ]
Line_9 $$ entity = li.getImplementation()-->Line_20 $$ final Object attributeValue = cache.getClassMetadata(entityClass).getAttributeAccess(attributeName).extractValue(entity)[ FD ]
Line_23 $$ state = LoadState.LOADED-->Line_36 $$ state = LoadState.LOADED[ FD ]
Line_35 $$ if (state == LoadState.UNKNOWN) -->Line_36 $$ state = LoadState.LOADED[ CD ]
Line_29 $$ state = LoadState.NOT_LOADED-->Line_39 $$ state = LoadState.UNKNOWN[ FD ]
Line_16 $$ LoadState state-->Line_22 $$ if (state == LoadState.UNKNOWN) [ FD ]
Line_4 $$ if (entity instanceof HibernateProxy) -->Line_6 $$ if (li.isUninitialized()) [ CD ]
Line_23 $$ state = LoadState.LOADED-->Line_29 $$ state = LoadState.NOT_LOADED[ FD ]
Line_16 $$ LoadState state-->Line_23 $$ state = LoadState.LOADED[ FD ]
Line_16 $$ LoadState state-->Line_21 $$ state = isLoaded(attributeValue)[ FD ]
Line_29 $$ state = LoadState.NOT_LOADED-->Line_34 $$ state = isLoaded(attributeValue)[ FD ]
Line_34 $$ state = isLoaded(attributeValue)-->Line_36 $$ state = LoadState.LOADED[ FD ]
Line_3 $$ boolean sureFromUs = false-->Line_28 $$ if (interceptor != null) [ FD ]
Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) -->Line_17 $$ if (isInitialized && interceptor != null) [ CD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_29 $$ state = LoadState.NOT_LOADED[ FD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_39 $$ state = LoadState.UNKNOWN[ FD ]
Line_34 $$ state = isLoaded(attributeValue)-->Line_42 $$ state = LoadState.UNKNOWN[ FD ]
Line_23 $$ state = LoadState.LOADED-->Line_26 $$ state = LoadState.UNKNOWN[ FD ]
Line_28 $$ if (interceptor != null) -->Line_30 $$ if (sureFromUs) [ CD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_35 $$ if (state == LoadState.UNKNOWN) [ FD ]
Line_16 $$ LoadState state-->Line_34 $$ state = isLoaded(attributeValue)[ FD ]
Line_16 $$ LoadState state-->Line_29 $$ state = LoadState.NOT_LOADED[ FD ]
Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) -->Line_16 $$ LoadState state[ CD ]
Line_6 $$ if (li.isUninitialized()) -->Line_9 $$ entity = li.getImplementation()[ CD ]
Line_36 $$ state = LoadState.LOADED-->Line_39 $$ state = LoadState.UNKNOWN[ FD ]
Line_14 $$ final LazyAttributeLoadingInterceptor interceptor = extractInterceptor((PersistentAttributeInterceptable) entity)-->Line_28 $$ if (interceptor != null) [ FD ]
Line_16 $$ LoadState state-->Line_36 $$ state = LoadState.LOADED[ FD ]
Line_22 $$ if (state == LoadState.UNKNOWN) -->Line_23 $$ state = LoadState.LOADED[ CD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_36 $$ state = LoadState.LOADED[ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_3 $$ boolean sureFromUs = false[ CD ]
Line_5 $$ LazyInitializer li = ((HibernateProxy) entity).getHibernateLazyInitializer()-->Line_9 $$ entity = li.getImplementation()[ FD ]
Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) -->Line_44 $$ return state[ CD ]
Line_16 $$ LoadState state-->Line_39 $$ state = LoadState.UNKNOWN[ FD ]
Line_19 $$ final Class entityClass = entity.getClass()-->Line_33 $$ final Object attributeValue = cache.getClassMetadata(entityClass).getAttributeAccess(attributeName).extractValue(entity)[ FD ]
Line_13 $$ if (entity instanceof PersistentAttributeInterceptable) -->Line_46 $$ return LoadState.UNKNOWN[ CD ]
Line_30 $$ if (sureFromUs) -->Line_42 $$ state = LoadState.UNKNOWN[ CD ]
Line_29 $$ state = LoadState.NOT_LOADED-->Line_36 $$ state = LoadState.LOADED[ FD ]
Line_2 $$ public static LoadState isLoadedWithoutReference(Object entity, String attributeName, MetadataCache cache) -->Line_33 $$ final Object attributeValue = cache.getClassMetadata(entityClass).getAttributeAccess(attributeName).extractValue(entity)[ FD ]
Line_21 $$ state = isLoaded(attributeValue)-->Line_34 $$ state = isLoaded(attributeValue)[ FD ]
Line_9 $$ entity = li.getImplementation()-->Line_33 $$ final Object attributeValue = cache.getClassMetadata(entityClass).getAttributeAccess(attributeName).extractValue(entity)[ FD ]
Line_26 $$ state = LoadState.UNKNOWN-->Line_39 $$ state = LoadState.UNKNOWN[ FD ]
Line_28 $$ if (interceptor != null) -->Line_29 $$ state = LoadState.NOT_LOADED[ CD ]
