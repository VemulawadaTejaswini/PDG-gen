Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_13 $$ Task reduceTask3 = it.next()[ CD ]
Line_9 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_12 $$ Task reduceTask2 = it.next()[ FD ]
Line_10 $$ Task mapTask = it.next()-->Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()[ FD ]
Line_11 $$ Task reduceTask = it.next()-->Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_26 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ CD ]
Line_6 $$ Job job = app.submit(conf)-->Line_8 $$ Assert.assertEquals("Num tasks not correct", 4, job.getTasks().size())[ FD ]
Line_64 $$ TaskCompletionEvent[] mapEvents = job.getMapAttemptCompletionEvents(0, 2)-->Line_68 $$ mapEvents = job.getMapAttemptCompletionEvents(2, 200)[ FD ]
Line_6 $$ Job job = app.submit(conf)-->Line_9 $$ Iterator<Task> it = job.getTasks().values().iterator()[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_30 $$ updateStatus(app, reduceAttempt2, Phase.SHUFFLE)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_61 $$ Assert.assertEquals("Event status not correct for map attempt1", TaskAttemptCompletionEventStatus.FAILED, events[1].getStatus())[ CD ]
Line_10 $$ Task mapTask = it.next()-->Line_42 $$ Assert.assertEquals("Num attempts in Map Task not correct", 2, mapTask.getAttempts().size())[ FD ]
Line_10 $$ Task mapTask = it.next()-->Line_18 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_10 $$ Task mapTask = it.next()-->Line_43 $$ Iterator<TaskAttempt> atIt = mapTask.getAttempts().values().iterator()[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_36 $$ assertEquals(TaskState.SUCCEEDED, mapTask.getState())[ CD ]
Line_65 $$ TaskCompletionEvent[] convertedEvents = TypeConverter.fromYarn(events)-->Line_67 $$ Assert.assertArrayEquals("Unexpected map events", Arrays.copyOfRange(convertedEvents, 0, 2), mapEvents)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_10 $$ Task mapTask = it.next()[ CD ]
Line_6 $$ Job job = app.submit(conf)-->Line_64 $$ TaskCompletionEvent[] mapEvents = job.getMapAttemptCompletionEvents(0, 2)[ FD ]
Line_9 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_13 $$ Task reduceTask3 = it.next()[ FD ]
Line_31 $$ TaskAttempt reduceAttempt3 = reduceTask3.getAttempts().values().iterator().next()-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt3.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_27 $$ updateStatus(app, reduceAttempt, Phase.SHUFFLE)[ FD ]
Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_57 $$ Assert.assertEquals("Event map attempt id not correct", mapAttempt1.getID(), events[1].getAttemptId())[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_68 $$ mapEvents = job.getMapAttemptCompletionEvents(2, 200)[ CD ]
Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_16 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_24 $$ app.waitForState(reduceTask3, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_19 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_12 $$ Task reduceTask2 = it.next()[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_28 $$ TaskAttempt reduceAttempt2 = reduceTask2.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_8 $$ Assert.assertEquals("Num tasks not correct", 4, job.getTasks().size())[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_17 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()[ CD ]
Line_9 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_10 $$ Task mapTask = it.next()[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_7 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_28 $$ TaskAttempt reduceAttempt2 = reduceTask2.getAttempts().values().iterator().next()-->Line_50 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt2.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_26 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_55 $$ Assert.assertEquals("Num completion events not correct", 6, events.length)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_42 $$ Assert.assertEquals("Num attempts in Map Task not correct", 2, mapTask.getAttempts().size())[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_37 $$ updateStatus(app, reduceAttempt2, Phase.REDUCE)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_41 $$ Assert.assertEquals("Map TaskAttempt state not correct", TaskAttemptState.FAILED, mapAttempt1.getState())[ CD ]
Line_43 $$ Iterator<TaskAttempt> atIt = mapTask.getAttempts().values().iterator()-->Line_44 $$ atIt.next()[ FD ]
Line_11 $$ Task reduceTask = it.next()-->Line_22 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_54 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_22 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_7 $$ app.waitForState(job, JobState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_47 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt2.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_6 $$ Job job = app.submit(conf)[ FD ]
Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_17 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_31 $$ TaskAttempt reduceAttempt3 = reduceTask3.getAttempts().values().iterator().next()-->Line_33 $$ updateStatus(app, reduceAttempt3, Phase.SHUFFLE)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_32 $$ app.waitForState(reduceAttempt3, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_27 $$ updateStatus(app, reduceAttempt, Phase.SHUFFLE)[ CD ]
Line_13 $$ Task reduceTask3 = it.next()-->Line_24 $$ app.waitForState(reduceTask3, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_48 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ CD ]
Line_6 $$ Job job = app.submit(conf)-->Line_68 $$ mapEvents = job.getMapAttemptCompletionEvents(2, 200)[ FD ]
Line_9 $$ Iterator<Task> it = job.getTasks().values().iterator()-->Line_11 $$ Task reduceTask = it.next()[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt3.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_52 $$ app.waitForState(job, JobState.SUCCEEDED)[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_40 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_13 $$ Task reduceTask3 = it.next()-->Line_31 $$ TaskAttempt reduceAttempt3 = reduceTask3.getAttempts().values().iterator().next()[ FD ]
Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_27 $$ updateStatus(app, reduceAttempt, Phase.SHUFFLE)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_17 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt1.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_26 $$ app.waitForState(reduceAttempt, TaskAttemptState.RUNNING)[ FD ]
Line_19 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_65 $$ TaskCompletionEvent[] convertedEvents = TypeConverter.fromYarn(events)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_34 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_38 $$ updateStatus(app, reduceAttempt3, Phase.REDUCE)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_5 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ CD ]
Line_12 $$ Task reduceTask2 = it.next()-->Line_23 $$ app.waitForState(reduceTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_53 $$ Assert.assertEquals("Event status not correct", TaskAttemptCompletionEventStatus.OBSOLETE, events[0].getStatus())[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_46 $$ app.waitForState(mapAttempt2, TaskAttemptState.RUNNING)[ FD ]
Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_59 $$ Assert.assertEquals("Event reduce attempt id not correct", reduceAttempt.getID(), events[3].getAttemptId())[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_57 $$ Assert.assertEquals("Event map attempt id not correct", mapAttempt1.getID(), events[1].getAttemptId())[ CD ]
Line_54 $$ events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_65 $$ TaskCompletionEvent[] convertedEvents = TypeConverter.fromYarn(events)[ FD ]
Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_39 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_64 $$ TaskCompletionEvent[] mapEvents = job.getMapAttemptCompletionEvents(0, 2)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_49 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_64 $$ TaskCompletionEvent[] mapEvents = job.getMapAttemptCompletionEvents(0, 2)-->Line_67 $$ Assert.assertArrayEquals("Unexpected map events", Arrays.copyOfRange(convertedEvents, 0, 2), mapEvents)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_14 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_31 $$ TaskAttempt reduceAttempt3 = reduceTask3.getAttempts().values().iterator().next()[ CD ]
Line_31 $$ TaskAttempt reduceAttempt3 = reduceTask3.getAttempts().values().iterator().next()-->Line_32 $$ app.waitForState(reduceAttempt3, TaskAttemptState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_50 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt2.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_16 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_29 $$ app.waitForState(reduceAttempt2, TaskAttemptState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_66 $$ Assert.assertEquals("Incorrect number of map events", 2, mapEvents.length)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_23 $$ app.waitForState(reduceTask2, TaskState.RUNNING)[ CD ]
Line_28 $$ TaskAttempt reduceAttempt2 = reduceTask2.getAttempts().values().iterator().next()-->Line_30 $$ updateStatus(app, reduceAttempt2, Phase.SHUFFLE)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_11 $$ Task reduceTask = it.next()[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_16 $$ app.waitForState(mapAttempt1, TaskAttemptState.RUNNING)[ FD ]
Line_28 $$ TaskAttempt reduceAttempt2 = reduceTask2.getAttempts().values().iterator().next()-->Line_37 $$ updateStatus(app, reduceAttempt2, Phase.REDUCE)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_34 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_41 $$ Assert.assertEquals("Map TaskAttempt state not correct", TaskAttemptState.FAILED, mapAttempt1.getState())[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_33 $$ updateStatus(app, reduceAttempt3, Phase.SHUFFLE)[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_38 $$ updateStatus(app, reduceAttempt3, Phase.REDUCE)[ FD ]
Line_43 $$ Iterator<TaskAttempt> atIt = mapTask.getAttempts().values().iterator()-->Line_45 $$ TaskAttempt mapAttempt2 = atIt.next()[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_33 $$ updateStatus(app, reduceAttempt3, Phase.SHUFFLE)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_52 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_56 $$ Assert.assertEquals("Event map attempt id not correct", mapAttempt1.getID(), events[0].getAttemptId())[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_14 $$ app.waitForState(mapTask, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_9 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_60 $$ Assert.assertEquals("Event status not correct for map attempt1", TaskAttemptCompletionEventStatus.OBSOLETE, events[0].getStatus())[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_47 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt2.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_58 $$ Assert.assertEquals("Event map attempt id not correct", mapAttempt2.getID(), events[2].getAttemptId())[ CD ]
Line_10 $$ Task mapTask = it.next()-->Line_48 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_5 $$ conf.setBoolean(MRJobConfig.JOB_UBERTASK_ENABLE, false)[ FD ]
Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_56 $$ Assert.assertEquals("Event map attempt id not correct", mapAttempt1.getID(), events[0].getAttemptId())[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_37 $$ updateStatus(app, reduceAttempt2, Phase.REDUCE)[ FD ]
Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_34 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_28 $$ TaskAttempt reduceAttempt2 = reduceTask2.getAttempts().values().iterator().next()-->Line_29 $$ app.waitForState(reduceAttempt2, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_21 $$ Assert.assertEquals("Event status not correct", TaskAttemptCompletionEventStatus.SUCCEEDED, events[0].getStatus())[ CD ]
Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_49 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_32 $$ app.waitForState(reduceAttempt3, TaskAttemptState.RUNNING)[ CD ]
Line_12 $$ Task reduceTask2 = it.next()-->Line_28 $$ TaskAttempt reduceAttempt2 = reduceTask2.getAttempts().values().iterator().next()[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_62 $$ Assert.assertEquals("Event status not correct for map attempt2", TaskAttemptCompletionEventStatus.SUCCEEDED, events[2].getStatus())[ CD ]
Line_19 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)-->Line_54 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_6 $$ Job job = app.submit(conf)-->Line_54 $$ events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_50 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt2.getID(), TaskAttemptEventType.TA_DONE))[ CD ]
Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_39 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_34 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_10 $$ Task mapTask = it.next()-->Line_36 $$ assertEquals(TaskState.SUCCEEDED, mapTask.getState())[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_51 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt3.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_45 $$ TaskAttempt mapAttempt2 = atIt.next()-->Line_58 $$ Assert.assertEquals("Event map attempt id not correct", mapAttempt2.getID(), events[2].getAttemptId())[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_22 $$ app.waitForState(reduceTask, TaskState.RUNNING)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_40 $$ app.waitForState(mapTask, TaskState.RUNNING)[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_35 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_18 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_6 $$ Job job = app.submit(conf)[ FD ]
Line_45 $$ TaskAttempt mapAttempt2 = atIt.next()-->Line_46 $$ app.waitForState(mapAttempt2, TaskAttemptState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_39 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_70 $$ Assert.assertEquals("Unexpected map event", convertedEvents[2], mapEvents[0])[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_59 $$ Assert.assertEquals("Event reduce attempt id not correct", reduceAttempt.getID(), events[3].getAttemptId())[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_24 $$ app.waitForState(reduceTask3, TaskState.RUNNING)[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_49 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(reduceAttempt.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_63 $$ Assert.assertEquals("Event status not correct for reduce attempt1", TaskAttemptCompletionEventStatus.SUCCEEDED, events[3].getStatus())[ CD ]
Line_10 $$ Task mapTask = it.next()-->Line_40 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_15 $$ TaskAttempt mapAttempt1 = mapTask.getAttempts().values().iterator().next()-->Line_35 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_67 $$ Assert.assertArrayEquals("Unexpected map events", Arrays.copyOfRange(convertedEvents, 0, 2), mapEvents)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_20 $$ Assert.assertEquals("Num completion events not correct", 1, events.length)[ CD ]
Line_6 $$ Job job = app.submit(conf)-->Line_19 $$ TaskAttemptCompletionEvent[] events = job.getTaskAttemptCompletionEvents(0, 100)[ FD ]
Line_6 $$ Job job = app.submit(conf)-->Line_7 $$ app.waitForState(job, JobState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_65 $$ TaskCompletionEvent[] convertedEvents = TypeConverter.fromYarn(events)[ CD ]
Line_25 $$ TaskAttempt reduceAttempt = reduceTask.getAttempts().values().iterator().next()-->Line_35 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_69 $$ Assert.assertEquals("Incorrect number of map events", 1, mapEvents.length)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_44 $$ atIt.next()[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_46 $$ app.waitForState(mapAttempt2, TaskAttemptState.RUNNING)[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_29 $$ app.waitForState(reduceAttempt2, TaskAttemptState.RUNNING)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_48 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ FD ]
Line_31 $$ TaskAttempt reduceAttempt3 = reduceTask3.getAttempts().values().iterator().next()-->Line_38 $$ updateStatus(app, reduceAttempt3, Phase.REDUCE)[ FD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_39 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_45 $$ TaskAttempt mapAttempt2 = atIt.next()[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_35 $$ sendFetchFailure(app, reduceAttempt, mapAttempt1)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_43 $$ Iterator<TaskAttempt> atIt = mapTask.getAttempts().values().iterator()[ CD ]
Line_10 $$ Task mapTask = it.next()-->Line_14 $$ app.waitForState(mapTask, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_30 $$ updateStatus(app, reduceAttempt2, Phase.SHUFFLE)[ CD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_6 $$ Job job = app.submit(conf)[ CD ]
Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)-->Line_23 $$ app.waitForState(reduceTask2, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_3 $$ MRApp app = new MRApp(1, 3, false, this.getClass().getName(), true)[ CD ]
Line_6 $$ Job job = app.submit(conf)-->Line_52 $$ app.waitForState(job, JobState.SUCCEEDED)[ FD ]
Line_2 $$ public void testFetchFailureMultipleReduces() throws Exception -->Line_18 $$ app.waitForState(mapTask, TaskState.SUCCEEDED)[ CD ]
Line_45 $$ TaskAttempt mapAttempt2 = atIt.next()-->Line_47 $$ app.getContext().getEventHandler().handle(new TaskAttemptEvent(mapAttempt2.getID(), TaskAttemptEventType.TA_DONE))[ FD ]
