Line_9 $$ for (TreeStructureProvider provider : providers) -->Line_11 $$ elements = provider.modify(treeNode, (Collection<AbstractTreeNode>) elements, settings)[ FD ]
Line_2 $$ public Object[] getChildElements(Object element) -->Line_7 $$ if (!providers.isEmpty()) [ CD ]
Line_5 $$ Collection<? extends AbstractTreeNode> elements = treeNode.getChildren()-->Line_22 $$ return ArrayUtil.toObjectArray(elements)[ FD ]
Line_2 $$ public Object[] getChildElements(Object element) -->Line_3 $$ LOG.assertTrue(element instanceof AbstractTreeNode, element != null ? element.getClass().getName() : null)[ CD ]
Line_19 $$ for (AbstractTreeNode node : elements) -->Line_20 $$ node.setParent(treeNode)[ FD ]
Line_4 $$ AbstractTreeNode<?> treeNode = (AbstractTreeNode) element-->Line_11 $$ elements = provider.modify(treeNode, (Collection<AbstractTreeNode>) elements, settings)[ FD ]
Line_11 $$ elements = provider.modify(treeNode, (Collection<AbstractTreeNode>) elements, settings)-->Line_22 $$ return ArrayUtil.toObjectArray(elements)[ FD ]
Line_2 $$ public Object[] getChildElements(Object element) -->Line_4 $$ AbstractTreeNode<?> treeNode = (AbstractTreeNode) element[ CD ]
Line_7 $$ if (!providers.isEmpty()) -->Line_8 $$ ViewSettings settings = treeNode instanceof SettingsProvider ? ((SettingsProvider) treeNode).getSettings() : ViewSettings.DEFAULT[ CD ]
Line_5 $$ Collection<? extends AbstractTreeNode> elements = treeNode.getChildren()-->Line_11 $$ elements = provider.modify(treeNode, (Collection<AbstractTreeNode>) elements, settings)[ FD ]
Line_8 $$ ViewSettings settings = treeNode instanceof SettingsProvider ? ((SettingsProvider) treeNode).getSettings() : ViewSettings.DEFAULT-->Line_11 $$ elements = provider.modify(treeNode, (Collection<AbstractTreeNode>) elements, settings)[ FD ]
Line_6 $$ List<TreeStructureProvider> providers = getProvidersDumbAware()-->Line_7 $$ if (!providers.isEmpty()) [ FD ]
Line_2 $$ public Object[] getChildElements(Object element) -->Line_3 $$ LOG.assertTrue(element instanceof AbstractTreeNode, element != null ? element.getClass().getName() : null)[ FD ]
Line_2 $$ public Object[] getChildElements(Object element) -->Line_6 $$ List<TreeStructureProvider> providers = getProvidersDumbAware()[ CD ]
Line_4 $$ AbstractTreeNode<?> treeNode = (AbstractTreeNode) element-->Line_20 $$ node.setParent(treeNode)[ FD ]
Line_2 $$ public Object[] getChildElements(Object element) -->Line_5 $$ Collection<? extends AbstractTreeNode> elements = treeNode.getChildren()[ CD ]
Line_4 $$ AbstractTreeNode<?> treeNode = (AbstractTreeNode) element-->Line_5 $$ Collection<? extends AbstractTreeNode> elements = treeNode.getChildren()[ FD ]
Line_2 $$ public Object[] getChildElements(Object element) -->Line_22 $$ return ArrayUtil.toObjectArray(elements)[ CD ]
