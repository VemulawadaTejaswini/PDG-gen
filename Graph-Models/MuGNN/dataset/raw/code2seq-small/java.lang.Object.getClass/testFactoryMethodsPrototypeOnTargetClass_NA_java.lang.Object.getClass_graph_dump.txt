Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")[ CD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_19 $$ assertEquals("default", fm.getName())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_24 $$ assertNotSame(fm, fm2)[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")[ FD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_24 $$ assertNotSame(fm, fm2)[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_22 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_12 $$ assertEquals(fm.getNum(), fm2.getNum())[ CD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_8 $$ assertEquals(0, fm.getNum())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)[ CD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_12 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_13 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_23 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ CD ]
Line_26 $$ fm2 = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_30 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_26 $$ fm2 = (FactoryMethods) xbf.getBean("fullPrototype")[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_18 $$ assertEquals(0, fm.getNum())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_14 $$ assertNotSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_29 $$ assertEquals("Juergen", fm.getTestBean().getName())[ CD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_32 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_33 $$ assertNotSame(fm, fm2)[ FD ]
Line_26 $$ fm2 = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_32 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_18 $$ assertEquals(0, fm.getNum())[ CD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_10 $$ assertEquals("defaultInstance", fm.getTestBean().getName())[ CD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_13 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_26 $$ fm2 = (FactoryMethods) xbf.getBean("fullPrototype")[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_15 $$ assertNotSame(fm, fm2)[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")[ CD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_29 $$ assertEquals("Juergen", fm.getTestBean().getName())[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_31 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_28 $$ assertEquals("gotcha", fm.getName())[ FD ]
Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_32 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_33 $$ assertNotSame(fm, fm2)[ FD ]
Line_26 $$ fm2 = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_31 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_31 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_9 $$ assertEquals("default", fm.getName())[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_11 $$ assertEquals("setterString", fm.getStringValue())[ CD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_23 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_30 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_26 $$ fm2 = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_33 $$ assertNotSame(fm, fm2)[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_31 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ CD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_20 $$ assertEquals("Juergen", fm.getTestBean().getName())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_21 $$ assertEquals(fm.getNum(), fm2.getNum())[ CD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_33 $$ assertNotSame(fm, fm2)[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_27 $$ assertEquals(27, fm.getNum())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_20 $$ assertEquals("Juergen", fm.getTestBean().getName())[ FD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_23 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_14 $$ assertNotSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_5 $$ reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()))[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_24 $$ assertNotSame(fm, fm2)[ CD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")[ FD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_31 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_9 $$ assertEquals("default", fm.getName())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_33 $$ assertNotSame(fm, fm2)[ CD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_11 $$ assertEquals("setterString", fm.getStringValue())[ FD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_31 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_22 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_33 $$ assertNotSame(fm, fm2)[ FD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_21 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_28 $$ assertEquals("gotcha", fm.getName())[ FD ]
Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_30 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()[ CD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_33 $$ assertNotSame(fm, fm2)[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_10 $$ assertEquals("defaultInstance", fm.getTestBean().getName())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_15 $$ assertNotSame(fm, fm2)[ CD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")[ CD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_18 $$ assertEquals(0, fm.getNum())[ FD ]
Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_29 $$ assertEquals("Juergen", fm.getTestBean().getName())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_14 $$ assertNotSame(fm.getTestBean(), fm2.getTestBean())[ CD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_24 $$ assertNotSame(fm, fm2)[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_23 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_8 $$ assertEquals(0, fm.getNum())[ CD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_22 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_32 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ CD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")[ CD ]
Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_31 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_21 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_32 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_22 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ CD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_23 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_30 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)-->Line_5 $$ reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()))[ FD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_24 $$ assertNotSame(fm, fm2)[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_19 $$ assertEquals("default", fm.getName())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_29 $$ assertEquals("Juergen", fm.getTestBean().getName())[ FD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_30 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_28 $$ assertEquals("gotcha", fm.getName())[ CD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_27 $$ assertEquals(27, fm.getNum())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_27 $$ assertEquals(27, fm.getNum())[ CD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_32 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_21 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_20 $$ assertEquals("Juergen", fm.getTestBean().getName())[ CD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_32 $$ assertSame(fm.getTestBean(), fm2.getTestBean())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_30 $$ assertEquals(fm.getNum(), fm2.getNum())[ CD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_13 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_19 $$ assertEquals("default", fm.getName())[ CD ]
Line_2 $$ public void testFactoryMethodsPrototypeOnTargetClass() -->Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")[ CD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_21 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_12 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_28 $$ assertEquals("gotcha", fm.getName())[ FD ]
Line_7 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_26 $$ fm2 = (FactoryMethods) xbf.getBean("fullPrototype")[ FD ]
Line_16 $$ fm = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_22 $$ assertEquals(fm.getStringValue(), fm2.getStringValue())[ FD ]
Line_25 $$ fm = (FactoryMethods) xbf.getBean("fullPrototype")-->Line_27 $$ assertEquals(27, fm.getNum())[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_15 $$ assertNotSame(fm, fm2)[ FD ]
Line_6 $$ FactoryMethods fm = (FactoryMethods) xbf.getBean("defaultPrototype")-->Line_30 $$ assertEquals(fm.getNum(), fm2.getNum())[ FD ]
Line_17 $$ fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype")-->Line_26 $$ fm2 = (FactoryMethods) xbf.getBean("fullPrototype")[ FD ]
