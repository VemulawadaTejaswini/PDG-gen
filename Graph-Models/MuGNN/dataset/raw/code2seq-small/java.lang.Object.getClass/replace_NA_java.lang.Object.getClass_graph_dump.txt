Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) -->Line_15 $$ copyCache.put(original, copy)[ CD ]
Line_18 $$ Object id = getIdentifier(original, session)-->Line_19 $$ if (id == null) [ FD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_7 $$ if (cached != null) [ CD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_22 $$ id = getIdentifierOrUniqueKeyType(session.getFactory()).replace(id, null, session, owner, copyCache)[ FD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_20 $$ throw new AssertionFailure("non-transient entity has a null id: " + original.getClass().getName())[ FD ]
Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) -->Line_16 $$ return copy[ CD ]
Line_18 $$ Object id = getIdentifier(original, session)-->Line_22 $$ id = getIdentifierOrUniqueKeyType(session.getFactory()).replace(id, null, session, owner, copyCache)[ FD ]
Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) -->Line_23 $$ return resolve(id, session, owner)[ CD ]
Line_10 $$ if (original == target) -->Line_11 $$ return target[ CD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_6 $$ Object cached = copyCache.get(original)[ FD ]
Line_7 $$ if (cached != null) -->Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) [ CD ]
Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) -->Line_22 $$ id = getIdentifierOrUniqueKeyType(session.getFactory()).replace(id, null, session, owner, copyCache)[ CD ]
Line_7 $$ if (cached != null) -->Line_8 $$ return cached[ CD ]
Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) -->Line_18 $$ Object id = getIdentifier(original, session)[ CD ]
Line_18 $$ Object id = getIdentifier(original, session)-->Line_23 $$ return resolve(id, session, owner)[ FD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) [ FD ]
Line_3 $$ if (original == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_23 $$ return resolve(id, session, owner)[ FD ]
Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) -->Line_19 $$ if (id == null) [ CD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_3 $$ if (original == null) [ CD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_18 $$ Object id = getIdentifier(original, session)[ FD ]
Line_14 $$ final Object copy = session.getEntityPersister(associatedEntityName, original).instantiate(null, session)-->Line_15 $$ copyCache.put(original, copy)[ FD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_15 $$ copyCache.put(original, copy)[ FD ]
Line_13 $$ if (session.getContextEntityIdentifier(original) == null && ForeignKeys.isTransient(associatedEntityName, original, Boolean.FALSE, session)) -->Line_14 $$ final Object copy = session.getEntityPersister(associatedEntityName, original).instantiate(null, session)[ CD ]
Line_22 $$ id = getIdentifierOrUniqueKeyType(session.getFactory()).replace(id, null, session, owner, copyCache)-->Line_23 $$ return resolve(id, session, owner)[ FD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_6 $$ Object cached = copyCache.get(original)[ CD ]
Line_6 $$ Object cached = copyCache.get(original)-->Line_7 $$ if (cached != null) [ FD ]
Line_7 $$ if (cached != null) -->Line_10 $$ if (original == target) [ CD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_3 $$ if (original == null) [ FD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_10 $$ if (original == target) [ FD ]
Line_2 $$ public Object replace(Object original, Object target, SessionImplementor session, Object owner, Map copyCache) throws HibernateException -->Line_14 $$ final Object copy = session.getEntityPersister(associatedEntityName, original).instantiate(null, session)[ FD ]
