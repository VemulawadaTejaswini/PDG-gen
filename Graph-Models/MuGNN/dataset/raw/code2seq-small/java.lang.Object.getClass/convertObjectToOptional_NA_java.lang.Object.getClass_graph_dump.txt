Line_5 $$ TypeDescriptor descriptor = new TypeDescriptor(parameter)-->Line_6 $$ Object actual = conversionService.convert("1,2,3", TypeDescriptor.valueOf(String.class), descriptor)[ FD ]
Line_2 $$ public void convertObjectToOptional() -->Line_5 $$ TypeDescriptor descriptor = new TypeDescriptor(parameter)[ CD ]
Line_2 $$ public void convertObjectToOptional() -->Line_7 $$ assertEquals(Optional.class, actual.getClass())[ CD ]
Line_2 $$ public void convertObjectToOptional() -->Line_4 $$ MethodParameter parameter = new MethodParameter(method, 0)[ CD ]
Line_6 $$ Object actual = conversionService.convert("1,2,3", TypeDescriptor.valueOf(String.class), descriptor)-->Line_7 $$ assertEquals(Optional.class, actual.getClass())[ FD ]
Line_2 $$ public void convertObjectToOptional() -->Line_3 $$ Method method = ClassUtils.getMethod(TestEntity.class, "handleOptionalValue", Optional.class)[ CD ]
Line_2 $$ public void convertObjectToOptional() -->Line_6 $$ Object actual = conversionService.convert("1,2,3", TypeDescriptor.valueOf(String.class), descriptor)[ CD ]
Line_2 $$ public void convertObjectToOptional() -->Line_8 $$ assertEquals(Arrays.asList(1, 2, 3), ((Optional<List<Integer>>) actual).get())[ CD ]
