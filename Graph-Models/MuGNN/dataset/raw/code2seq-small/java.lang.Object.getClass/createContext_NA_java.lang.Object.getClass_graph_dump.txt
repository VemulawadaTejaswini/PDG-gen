Line_10 $$ AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition-->Line_15 $$ if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(javax.inject.Scope.class.getName())) [ FD ]
Line_11 $$ for (String type : annDef.getMetadata().getAnnotationTypes()) -->Line_19 $$ if (type.startsWith("javax.inject")) [ FD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_4 $$ ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context)[ CD ]
Line_11 $$ for (String type : annDef.getMetadata().getAnnotationTypes()) -->Line_16 $$ metadata.setScopeName(type.substring(type.length() - 13, type.length() - 6).toLowerCase())[ FD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_27 $$ scanner.scan(getClass().getPackage().getName())[ CD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_5 $$ scanner.setIncludeAnnotationConfig(false)[ CD ]
Line_8 $$ ScopeMetadata metadata = new ScopeMetadata()-->Line_17 $$ metadata.setScopedProxyMode(scopedProxyMode)[ FD ]
Line_12 $$ if (type.equals(javax.inject.Singleton.class.getName())) -->Line_15 $$ if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(javax.inject.Scope.class.getName())) [ CD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_17 $$ metadata.setScopedProxyMode(scopedProxyMode)[ FD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_29 $$ context.registerAlias("classPathBeanDefinitionScannerJsr330ScopeIntegrationTests.SessionScopedTestBean", "session")[ CD ]
Line_10 $$ AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition-->Line_11 $$ for (String type : annDef.getMetadata().getAnnotationTypes()) [ FD ]
Line_19 $$ if (type.startsWith("javax.inject")) -->Line_20 $$ metadata.setScopeName(BeanDefinition.SCOPE_PROTOTYPE)[ CD ]
Line_6 $$ scanner.setScopeMetadataResolver(new ScopeMetadataResolver() -->Line_24 $$ return metadata[ CD ]
Line_8 $$ ScopeMetadata metadata = new ScopeMetadata()-->Line_20 $$ metadata.setScopeName(BeanDefinition.SCOPE_PROTOTYPE)[ FD ]
Line_15 $$ if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(javax.inject.Scope.class.getName())) -->Line_17 $$ metadata.setScopedProxyMode(scopedProxyMode)[ CD ]
Line_4 $$ ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context)-->Line_5 $$ scanner.setIncludeAnnotationConfig(false)[ FD ]
Line_8 $$ ScopeMetadata metadata = new ScopeMetadata()-->Line_13 $$ metadata.setScopeName(BeanDefinition.SCOPE_SINGLETON)[ FD ]
Line_11 $$ for (String type : annDef.getMetadata().getAnnotationTypes()) -->Line_12 $$ if (type.equals(javax.inject.Singleton.class.getName())) [ FD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_6 $$ scanner.setScopeMetadataResolver(new ScopeMetadataResolver() [ CD ]
Line_4 $$ ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context)-->Line_6 $$ scanner.setScopeMetadataResolver(new ScopeMetadataResolver() [ FD ]
Line_3 $$ GenericWebApplicationContext context = new GenericWebApplicationContext()-->Line_30 $$ context.refresh()[ FD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_31 $$ return context[ CD ]
Line_15 $$ if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(javax.inject.Scope.class.getName())) -->Line_19 $$ if (type.startsWith("javax.inject")) [ CD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_30 $$ context.refresh()[ CD ]
Line_4 $$ ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context)-->Line_27 $$ scanner.scan(getClass().getPackage().getName())[ FD ]
Line_11 $$ for (String type : annDef.getMetadata().getAnnotationTypes()) -->Line_15 $$ if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(javax.inject.Scope.class.getName())) [ FD ]
Line_6 $$ scanner.setScopeMetadataResolver(new ScopeMetadataResolver() -->Line_8 $$ ScopeMetadata metadata = new ScopeMetadata()[ CD ]
Line_12 $$ if (type.equals(javax.inject.Singleton.class.getName())) -->Line_13 $$ metadata.setScopeName(BeanDefinition.SCOPE_SINGLETON)[ CD ]
Line_4 $$ ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context)-->Line_28 $$ scanner.scan(getClass().getPackage().getName())[ FD ]
Line_3 $$ GenericWebApplicationContext context = new GenericWebApplicationContext()-->Line_29 $$ context.registerAlias("classPathBeanDefinitionScannerJsr330ScopeIntegrationTests.SessionScopedTestBean", "session")[ FD ]
Line_9 $$ if (definition instanceof AnnotatedBeanDefinition) -->Line_10 $$ AnnotatedBeanDefinition annDef = (AnnotatedBeanDefinition) definition[ CD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_3 $$ GenericWebApplicationContext context = new GenericWebApplicationContext()[ CD ]
Line_6 $$ scanner.setScopeMetadataResolver(new ScopeMetadataResolver() -->Line_9 $$ if (definition instanceof AnnotatedBeanDefinition) [ FD ]
Line_2 $$ private ApplicationContext createContext(final ScopedProxyMode scopedProxyMode) -->Line_28 $$ scanner.scan(getClass().getPackage().getName())[ CD ]
Line_15 $$ if (annDef.getMetadata().getMetaAnnotationTypes(type).contains(javax.inject.Scope.class.getName())) -->Line_16 $$ metadata.setScopeName(type.substring(type.length() - 13, type.length() - 6).toLowerCase())[ CD ]
Line_6 $$ scanner.setScopeMetadataResolver(new ScopeMetadataResolver() -->Line_9 $$ if (definition instanceof AnnotatedBeanDefinition) [ CD ]
Line_8 $$ ScopeMetadata metadata = new ScopeMetadata()-->Line_16 $$ metadata.setScopeName(type.substring(type.length() - 13, type.length() - 6).toLowerCase())[ FD ]
