Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_3 $$ if (workspaceName == null) [ CD ]
Line_20 $$ session = (Session) sessionProxy-->Line_21 $$ sessions.put(workspaceName, session)[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_11 $$ Session session = sessions.get(workspaceName)[ CD ]
Line_11 $$ Session session = sessions.get(workspaceName)-->Line_12 $$ if (session != null) [ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_18 $$ Object sessionProxy = ProxyUtil.newProxyInstance(ClassLoaderUtil.getClassLoader(this.getClass()), new Class<?>[] [ CD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_8 $$ return jcrFactory.createSession(workspaceName)[ FD ]
Line_18 $$ Object sessionProxy = ProxyUtil.newProxyInstance(ClassLoaderUtil.getClassLoader(this.getClass()), new Class<?>[] -->Line_19 $$ FinalizeManager.register(sessionProxy, jcrSessionInvocationHandler, FinalizeManager.PHANTOM_REFERENCE_FACTORY)[ FD ]
Line_4 $$ workspaceName = _jcrStoreConfiguration.workspaceName()-->Line_21 $$ sessions.put(workspaceName, session)[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_21 $$ sessions.put(workspaceName, session)[ CD ]
Line_10 $$ Map<String, Session> sessions = _sessions.get()-->Line_21 $$ sessions.put(workspaceName, session)[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_22 $$ return session[ CD ]
Line_4 $$ workspaceName = _jcrStoreConfiguration.workspaceName()-->Line_16 $$ Session jcrSession = jcrFactory.createSession(workspaceName)[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_15 $$ JCRFactory jcrFactory = getJCRFactory()[ CD ]
Line_7 $$ JCRFactory jcrFactory = getJCRFactory()-->Line_8 $$ return jcrFactory.createSession(workspaceName)[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_16 $$ Session jcrSession = jcrFactory.createSession(workspaceName)[ CD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_17 $$ JCRSessionInvocationHandler jcrSessionInvocationHandler = new JCRSessionInvocationHandler(jcrSession)[ CD ]
Line_6 $$ if (!_jcrStoreConfiguration.wrapSession()) -->Line_7 $$ JCRFactory jcrFactory = getJCRFactory()[ CD ]
Line_7 $$ JCRFactory jcrFactory = getJCRFactory()-->Line_16 $$ Session jcrSession = jcrFactory.createSession(workspaceName)[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_6 $$ if (!_jcrStoreConfiguration.wrapSession()) [ CD ]
Line_3 $$ if (workspaceName == null) -->Line_4 $$ workspaceName = _jcrStoreConfiguration.workspaceName()[ CD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_11 $$ Session session = sessions.get(workspaceName)[ FD ]
Line_11 $$ Session session = sessions.get(workspaceName)-->Line_21 $$ sessions.put(workspaceName, session)[ FD ]
Line_4 $$ workspaceName = _jcrStoreConfiguration.workspaceName()-->Line_8 $$ return jcrFactory.createSession(workspaceName)[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_10 $$ Map<String, Session> sessions = _sessions.get()[ CD ]
Line_17 $$ JCRSessionInvocationHandler jcrSessionInvocationHandler = new JCRSessionInvocationHandler(jcrSession)-->Line_18 $$ Object sessionProxy = ProxyUtil.newProxyInstance(ClassLoaderUtil.getClassLoader(this.getClass()), new Class<?>[] [ FD ]
Line_17 $$ JCRSessionInvocationHandler jcrSessionInvocationHandler = new JCRSessionInvocationHandler(jcrSession)-->Line_19 $$ FinalizeManager.register(sessionProxy, jcrSessionInvocationHandler, FinalizeManager.PHANTOM_REFERENCE_FACTORY)[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_3 $$ if (workspaceName == null) [ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_12 $$ if (session != null) [ CD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_4 $$ workspaceName = _jcrStoreConfiguration.workspaceName()[ FD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_21 $$ sessions.put(workspaceName, session)[ FD ]
Line_10 $$ Map<String, Session> sessions = _sessions.get()-->Line_11 $$ Session session = sessions.get(workspaceName)[ FD ]
Line_4 $$ workspaceName = _jcrStoreConfiguration.workspaceName()-->Line_11 $$ Session session = sessions.get(workspaceName)[ FD ]
Line_11 $$ Session session = sessions.get(workspaceName)-->Line_20 $$ session = (Session) sessionProxy[ FD ]
Line_12 $$ if (session != null) -->Line_13 $$ return session[ CD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_19 $$ FinalizeManager.register(sessionProxy, jcrSessionInvocationHandler, FinalizeManager.PHANTOM_REFERENCE_FACTORY)[ CD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_20 $$ session = (Session) sessionProxy[ CD ]
Line_2 $$ public Session createSession(String workspaceName) throws RepositoryException -->Line_16 $$ Session jcrSession = jcrFactory.createSession(workspaceName)[ FD ]
Line_6 $$ if (!_jcrStoreConfiguration.wrapSession()) -->Line_8 $$ return jcrFactory.createSession(workspaceName)[ CD ]
