Line_5 $$ if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) -->Line_6 $$ String msg = "The event listener method class '" + methodDeclaringClass.getName() + "' is not an instance of the actual bean class '" + targetBeanClass.getName() + "'. If the bean requires proxying " + "(e.g. due to @Transactional), please use class-based proxying."[ CD ]
Line_2 $$ private void assertTargetBean(Method method, Object targetBean, Object[] args) -->Line_5 $$ if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) [ CD ]
Line_3 $$ Class<?> methodDeclaringClass = method.getDeclaringClass()-->Line_6 $$ String msg = "The event listener method class '" + methodDeclaringClass.getName() + "' is not an instance of the actual bean class '" + targetBeanClass.getName() + "'. If the bean requires proxying " + "(e.g. due to @Transactional), please use class-based proxying."[ FD ]
Line_4 $$ Class<?> targetBeanClass = targetBean.getClass()-->Line_5 $$ if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) [ FD ]
Line_2 $$ private void assertTargetBean(Method method, Object targetBean, Object[] args) -->Line_4 $$ Class<?> targetBeanClass = targetBean.getClass()[ CD ]
Line_2 $$ private void assertTargetBean(Method method, Object targetBean, Object[] args) -->Line_3 $$ Class<?> methodDeclaringClass = method.getDeclaringClass()[ FD ]
Line_2 $$ private void assertTargetBean(Method method, Object targetBean, Object[] args) -->Line_3 $$ Class<?> methodDeclaringClass = method.getDeclaringClass()[ CD ]
Line_3 $$ Class<?> methodDeclaringClass = method.getDeclaringClass()-->Line_5 $$ if (!methodDeclaringClass.isAssignableFrom(targetBeanClass)) [ FD ]
Line_4 $$ Class<?> targetBeanClass = targetBean.getClass()-->Line_6 $$ String msg = "The event listener method class '" + methodDeclaringClass.getName() + "' is not an instance of the actual bean class '" + targetBeanClass.getName() + "'. If the bean requires proxying " + "(e.g. due to @Transactional), please use class-based proxying."[ FD ]
Line_2 $$ private void assertTargetBean(Method method, Object targetBean, Object[] args) -->Line_4 $$ Class<?> targetBeanClass = targetBean.getClass()[ FD ]
Line_2 $$ private void assertTargetBean(Method method, Object targetBean, Object[] args) -->Line_7 $$ throw new IllegalStateException(getInvocationErrorMessage(targetBean, msg, args))[ FD ]
Line_6 $$ String msg = "The event listener method class '" + methodDeclaringClass.getName() + "' is not an instance of the actual bean class '" + targetBeanClass.getName() + "'. If the bean requires proxying " + "(e.g. due to @Transactional), please use class-based proxying."-->Line_7 $$ throw new IllegalStateException(getInvocationErrorMessage(targetBean, msg, args))[ FD ]
