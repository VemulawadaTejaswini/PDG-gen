Line_2 $$ public void constructorReference() throws Exception -->Line_29 $$ assertEquals(42, tc8.i)[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_4 $$ assertEquals("123", expression.getValue())[ CD ]
Line_30 $$ String testclass9 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass9"-->Line_32 $$ assertEquals(testclass9, expression.getValue().getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_6 $$ assertEquals("123", expression.getValue())[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_15 $$ assertEquals("123", tc8.s)[ CD ]
Line_11 $$ Object o = expression.getValue()-->Line_26 $$ o = expression.getValue()[ FD ]
Line_11 $$ Object o = expression.getValue()-->Line_27 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_20 $$ assertCanCompile(expression)[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_16 $$ assertEquals(4.0d, tc8.d, 0.5d)[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_12 $$ assertEquals(testclass8, o.getClass().getName())[ CD ]
Line_7 $$ String testclass8 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass8"-->Line_27 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_30 $$ String testclass9 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass9"[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_10 $$ assertCanCompile(expression)[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_28 $$ tc8 = (TestClass8) o[ CD ]
Line_7 $$ String testclass8 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass8"-->Line_22 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_21 $$ o = expression.getValue()-->Line_26 $$ o = expression.getValue()[ FD ]
Line_21 $$ o = expression.getValue()-->Line_27 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_13 $$ TestClass8 tc8 = (TestClass8) o[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_11 $$ Object o = expression.getValue()[ CD ]
Line_7 $$ String testclass8 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass8"-->Line_19 $$ assertEquals(testclass8, expression.getValue().getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_22 $$ assertEquals(testclass8, o.getClass().getName())[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_23 $$ expression = parser.parseExpression("new " + testclass8 + "(42)")[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_24 $$ assertEquals(testclass8, expression.getValue().getClass().getName())[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_27 $$ assertEquals(testclass8, o.getClass().getName())[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_32 $$ assertEquals(testclass9, expression.getValue().getClass().getName())[ CD ]
Line_7 $$ String testclass8 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass8"-->Line_9 $$ assertEquals(testclass8, expression.getValue().getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_17 $$ assertEquals(true, tc8.z)[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_19 $$ assertEquals(testclass8, expression.getValue().getClass().getName())[ CD ]
Line_21 $$ o = expression.getValue()-->Line_22 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_13 $$ TestClass8 tc8 = (TestClass8) o-->Line_28 $$ tc8 = (TestClass8) o[ FD ]
Line_7 $$ String testclass8 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass8"-->Line_24 $$ assertEquals(testclass8, expression.getValue().getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_9 $$ assertEquals(testclass8, expression.getValue().getClass().getName())[ CD ]
Line_11 $$ Object o = expression.getValue()-->Line_21 $$ o = expression.getValue()[ FD ]
Line_11 $$ Object o = expression.getValue()-->Line_22 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_5 $$ assertCanCompile(expression)[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_33 $$ assertCantCompile(expression)[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_8 $$ expression = parser.parseExpression("new " + testclass8 + "(42,'123',4.0d,true)")[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_21 $$ o = expression.getValue()[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_14 $$ assertEquals(42, tc8.i)[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_3 $$ expression = parser.parseExpression("new String('123')")[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_25 $$ assertCanCompile(expression)[ CD ]
Line_11 $$ Object o = expression.getValue()-->Line_12 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_26 $$ o = expression.getValue()-->Line_27 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_7 $$ String testclass8 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass8"[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_26 $$ o = expression.getValue()[ CD ]
Line_7 $$ String testclass8 = "org.springframework.expression.spel.SpelCompilationCoverageTests$TestClass8"-->Line_12 $$ assertEquals(testclass8, o.getClass().getName())[ FD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_18 $$ expression = parser.parseExpression("new " + testclass8 + "()")[ CD ]
Line_2 $$ public void constructorReference() throws Exception -->Line_31 $$ expression = parser.parseExpression("new " + testclass9 + "(42)")[ CD ]
