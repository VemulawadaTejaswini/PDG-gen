Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_21 $$ throw new MappingException("Unable to decipher filter-def content type [" + content.getClass().getName() + "]", context.getOrigin())[ FD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_30 $$ log.debugf("Processed filter definition : %s", jaxbFilterDefinitionMapping.getName())[ FD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_4 $$ String condition = jaxbFilterDefinitionMapping.getCondition()[ CD ]
Line_6 $$ if (String.class.isInstance(content)) -->Line_14 $$ final JaxbHbmFilterParameterType jaxbParameterMapping[ CD ]
Line_3 $$ Map<String, Type> parameterMap = null-->Line_26 $$ parameterMap.put(jaxbParameterMapping.getParameterName(), context.getMetadataCollector().getTypeResolver().heuristicType(jaxbParameterMapping.getParameterValueTypeName()))[ FD ]
Line_6 $$ if (String.class.isInstance(content)) -->Line_23 $$ if (parameterMap == null) [ CD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_5 $$ for (Serializable content : jaxbFilterDefinitionMapping.getContent()) [ FD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_10 $$ log.debugf("filter-def [name=%s, origin=%s] defined multiple conditions, accepting arbitrary one", jaxbFilterDefinitionMapping.getName(), context.getOrigin().toString())[ FD ]
Line_16 $$ jaxbParameterMapping = (JaxbHbmFilterParameterType) content-->Line_19 $$ jaxbParameterMapping = jaxbElement.getValue()[ FD ]
Line_19 $$ jaxbParameterMapping = jaxbElement.getValue()-->Line_26 $$ parameterMap.put(jaxbParameterMapping.getParameterName(), context.getMetadataCollector().getTypeResolver().heuristicType(jaxbParameterMapping.getParameterValueTypeName()))[ FD ]
Line_14 $$ final JaxbHbmFilterParameterType jaxbParameterMapping-->Line_19 $$ jaxbParameterMapping = jaxbElement.getValue()[ FD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_3 $$ Map<String, Type> parameterMap = null[ CD ]
Line_14 $$ final JaxbHbmFilterParameterType jaxbParameterMapping-->Line_16 $$ jaxbParameterMapping = (JaxbHbmFilterParameterType) content[ FD ]
Line_5 $$ for (Serializable content : jaxbFilterDefinitionMapping.getContent()) -->Line_6 $$ if (String.class.isInstance(content)) [ FD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_30 $$ log.debugf("Processed filter definition : %s", jaxbFilterDefinitionMapping.getName())[ CD ]
Line_14 $$ final JaxbHbmFilterParameterType jaxbParameterMapping-->Line_26 $$ parameterMap.put(jaxbParameterMapping.getParameterName(), context.getMetadataCollector().getTypeResolver().heuristicType(jaxbParameterMapping.getParameterValueTypeName()))[ FD ]
Line_23 $$ if (parameterMap == null) -->Line_24 $$ parameterMap = new HashMap<String, Type>()[ CD ]
Line_24 $$ parameterMap = new HashMap<String, Type>()-->Line_26 $$ parameterMap.put(jaxbParameterMapping.getParameterName(), context.getMetadataCollector().getTypeResolver().heuristicType(jaxbParameterMapping.getParameterValueTypeName()))[ FD ]
Line_17 $$ if (JAXBElement.class.isInstance(content)) -->Line_18 $$ final JAXBElement<JaxbHbmFilterParameterType> jaxbElement = (JAXBElement<JaxbHbmFilterParameterType>) content[ CD ]
Line_9 $$ if (condition != null) -->Line_10 $$ log.debugf("filter-def [name=%s, origin=%s] defined multiple conditions, accepting arbitrary one", jaxbFilterDefinitionMapping.getName(), context.getOrigin().toString())[ CD ]
Line_5 $$ for (Serializable content : jaxbFilterDefinitionMapping.getContent()) -->Line_21 $$ throw new MappingException("Unable to decipher filter-def content type [" + content.getClass().getName() + "]", context.getOrigin())[ FD ]
Line_3 $$ Map<String, Type> parameterMap = null-->Line_23 $$ if (parameterMap == null) [ FD ]
Line_15 $$ if (JaxbHbmFilterParameterType.class.isInstance(content)) -->Line_17 $$ if (JAXBElement.class.isInstance(content)) [ CD ]
Line_6 $$ if (String.class.isInstance(content)) -->Line_7 $$ final String contentString = content.toString().trim()[ CD ]
Line_6 $$ if (String.class.isInstance(content)) -->Line_26 $$ parameterMap.put(jaxbParameterMapping.getParameterName(), context.getMetadataCollector().getTypeResolver().heuristicType(jaxbParameterMapping.getParameterValueTypeName()))[ CD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_29 $$ context.getMetadataCollector().addFilterDefinition(new FilterDefinition(jaxbFilterDefinitionMapping.getName(), condition, parameterMap))[ FD ]
Line_3 $$ Map<String, Type> parameterMap = null-->Line_24 $$ parameterMap = new HashMap<String, Type>()[ FD ]
Line_8 $$ if (StringHelper.isNotEmpty(contentString)) -->Line_9 $$ if (condition != null) [ CD ]
Line_5 $$ for (Serializable content : jaxbFilterDefinitionMapping.getContent()) -->Line_15 $$ if (JaxbHbmFilterParameterType.class.isInstance(content)) [ FD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_29 $$ context.getMetadataCollector().addFilterDefinition(new FilterDefinition(jaxbFilterDefinitionMapping.getName(), condition, parameterMap))[ CD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_26 $$ parameterMap.put(jaxbParameterMapping.getParameterName(), context.getMetadataCollector().getTypeResolver().heuristicType(jaxbParameterMapping.getParameterValueTypeName()))[ FD ]
Line_18 $$ final JAXBElement<JaxbHbmFilterParameterType> jaxbElement = (JAXBElement<JaxbHbmFilterParameterType>) content-->Line_19 $$ jaxbParameterMapping = jaxbElement.getValue()[ FD ]
Line_15 $$ if (JaxbHbmFilterParameterType.class.isInstance(content)) -->Line_16 $$ jaxbParameterMapping = (JaxbHbmFilterParameterType) content[ CD ]
Line_5 $$ for (Serializable content : jaxbFilterDefinitionMapping.getContent()) -->Line_7 $$ final String contentString = content.toString().trim()[ FD ]
Line_5 $$ for (Serializable content : jaxbFilterDefinitionMapping.getContent()) -->Line_17 $$ if (JAXBElement.class.isInstance(content)) [ FD ]
Line_6 $$ if (String.class.isInstance(content)) -->Line_8 $$ if (StringHelper.isNotEmpty(contentString)) [ CD ]
Line_2 $$ public static void processFilterDefinition(HbmLocalMetadataBuildingContext context, JaxbHbmFilterDefinitionType jaxbFilterDefinitionMapping) -->Line_4 $$ String condition = jaxbFilterDefinitionMapping.getCondition()[ FD ]
Line_7 $$ final String contentString = content.toString().trim()-->Line_8 $$ if (StringHelper.isNotEmpty(contentString)) [ FD ]
Line_16 $$ jaxbParameterMapping = (JaxbHbmFilterParameterType) content-->Line_26 $$ parameterMap.put(jaxbParameterMapping.getParameterName(), context.getMetadataCollector().getTypeResolver().heuristicType(jaxbParameterMapping.getParameterValueTypeName()))[ FD ]
Line_17 $$ if (JAXBElement.class.isInstance(content)) -->Line_19 $$ jaxbParameterMapping = jaxbElement.getValue()[ CD ]
Line_6 $$ if (String.class.isInstance(content)) -->Line_15 $$ if (JaxbHbmFilterParameterType.class.isInstance(content)) [ CD ]
Line_4 $$ String condition = jaxbFilterDefinitionMapping.getCondition()-->Line_9 $$ if (condition != null) [ FD ]
