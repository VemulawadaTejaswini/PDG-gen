Line_3 $$ final List<T> compilers = new ArrayList<T>(myCompilers.size())-->Line_9 $$ final T[] array = (T[]) Array.newInstance(compilerClass, compilers.size())[ FD ]
Line_2 $$ public <T extends Compiler> T[] getCompilers(@NotNull Class<T> compilerClass, CompilerFilter filter) -->Line_3 $$ final List<T> compilers = new ArrayList<T>(myCompilers.size())[ CD ]
Line_4 $$ for (final Compiler item : myCompilers) -->Line_5 $$ if (compilerClass.isAssignableFrom(item.getClass()) && filter.acceptCompiler(item)) [ FD ]
Line_5 $$ if (compilerClass.isAssignableFrom(item.getClass()) && filter.acceptCompiler(item)) -->Line_6 $$ compilers.add((T) item)[ CD ]
Line_9 $$ final T[] array = (T[]) Array.newInstance(compilerClass, compilers.size())-->Line_10 $$ return compilers.toArray(array)[ FD ]
Line_2 $$ public <T extends Compiler> T[] getCompilers(@NotNull Class<T> compilerClass, CompilerFilter filter) -->Line_10 $$ return compilers.toArray(array)[ CD ]
Line_2 $$ public <T extends Compiler> T[] getCompilers(@NotNull Class<T> compilerClass, CompilerFilter filter) -->Line_5 $$ if (compilerClass.isAssignableFrom(item.getClass()) && filter.acceptCompiler(item)) [ FD ]
Line_3 $$ final List<T> compilers = new ArrayList<T>(myCompilers.size())-->Line_10 $$ return compilers.toArray(array)[ FD ]
Line_2 $$ public <T extends Compiler> T[] getCompilers(@NotNull Class<T> compilerClass, CompilerFilter filter) -->Line_9 $$ final T[] array = (T[]) Array.newInstance(compilerClass, compilers.size())[ FD ]
Line_2 $$ public <T extends Compiler> T[] getCompilers(@NotNull Class<T> compilerClass, CompilerFilter filter) -->Line_9 $$ final T[] array = (T[]) Array.newInstance(compilerClass, compilers.size())[ CD ]
Line_3 $$ final List<T> compilers = new ArrayList<T>(myCompilers.size())-->Line_6 $$ compilers.add((T) item)[ FD ]
