Line_5 $$ if (file == null) -->Line_6 $$ if (loadHistoryOld(id)) [ CD ]
Line_4 $$ VirtualFile file = myRootType.isHidden() ? null : HistoryRootType.getInstance().findFile(null, getHistoryName(myRootType, id), ScratchFileService.Option.existing_only)-->Line_5 $$ if (file == null) [ FD ]
Line_19 $$ String[] split = VfsUtilCore.loadText(file).split(myRootType.getEntrySeparator())-->Line_20 $$ getModel().resetEntries(Arrays.asList(split))[ FD ]
Line_7 $$ if (!myRootType.isHidden()) -->Line_8 $$ AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(getClass())[ CD ]
Line_5 $$ if (file == null) -->Line_17 $$ return false[ CD ]
Line_2 $$ public boolean loadHistory(String id, VirtualFile consoleFile) -->Line_4 $$ VirtualFile file = myRootType.isHidden() ? null : HistoryRootType.getInstance().findFile(null, getHistoryName(myRootType, id), ScratchFileService.Option.existing_only)[ FD ]
Line_2 $$ public boolean loadHistory(String id, VirtualFile consoleFile) -->Line_10 $$ VfsUtil.saveText(consoleFile, myContent)[ FD ]
Line_6 $$ if (loadHistoryOld(id)) -->Line_15 $$ return true[ CD ]
Line_6 $$ if (loadHistoryOld(id)) -->Line_7 $$ if (!myRootType.isHidden()) [ CD ]
Line_8 $$ AccessToken token = ApplicationManager.getApplication().acquireWriteActionLock(getClass())-->Line_12 $$ token.finish()[ FD ]
Line_4 $$ VirtualFile file = myRootType.isHidden() ? null : HistoryRootType.getInstance().findFile(null, getHistoryName(myRootType, id), ScratchFileService.Option.existing_only)-->Line_19 $$ String[] split = VfsUtilCore.loadText(file).split(myRootType.getEntrySeparator())[ FD ]
Line_2 $$ public boolean loadHistory(String id, VirtualFile consoleFile) -->Line_6 $$ if (loadHistoryOld(id)) [ FD ]
