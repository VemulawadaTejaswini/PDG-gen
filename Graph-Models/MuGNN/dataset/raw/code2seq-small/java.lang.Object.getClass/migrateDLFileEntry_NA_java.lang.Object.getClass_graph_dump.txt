Line_9 $$ if (fileVersions.isEmpty()) -->Line_12 $$ return[ CD ]
Line_9 $$ if (fileVersions.isEmpty()) -->Line_10 $$ String versionNumber = Store.VERSION_DEFAULT[ CD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_7 $$ String fileName = ((DLFileEntry) model).getName()[ CD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_9 $$ if (fileVersions.isEmpty()) [ CD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_3 $$ Object model = fileEntry.getModel()[ CD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_11 $$ migrateFile(companyId, repositoryId, fileName, versionNumber)[ FD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_8 $$ List<FileVersion> fileVersions = getFileVersions(fileEntry)[ FD ]
Line_7 $$ String fileName = ((DLFileEntry) model).getName()-->Line_16 $$ migrateFile(companyId, repositoryId, fileName, versionNumber)[ FD ]
Line_10 $$ String versionNumber = Store.VERSION_DEFAULT-->Line_11 $$ migrateFile(companyId, repositoryId, fileName, versionNumber)[ FD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_16 $$ migrateFile(companyId, repositoryId, fileName, versionNumber)[ FD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_3 $$ Object model = fileEntry.getModel()[ FD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_4 $$ if (!(model instanceof DLFileEntry)) [ CD ]
Line_3 $$ Object model = fileEntry.getModel()-->Line_5 $$ throw new IllegalArgumentException("Unsupported file entry model " + model.getClass())[ FD ]
Line_8 $$ List<FileVersion> fileVersions = getFileVersions(fileEntry)-->Line_9 $$ if (fileVersions.isEmpty()) [ FD ]
Line_9 $$ if (fileVersions.isEmpty()) -->Line_11 $$ migrateFile(companyId, repositoryId, fileName, versionNumber)[ CD ]
Line_2 $$ public void migrateDLFileEntry(long companyId, long repositoryId, FileEntry fileEntry) -->Line_8 $$ List<FileVersion> fileVersions = getFileVersions(fileEntry)[ CD ]
Line_14 $$ for (FileVersion fileVersion : fileVersions) -->Line_15 $$ String versionNumber = fileVersion.getVersion()[ FD ]
Line_7 $$ String fileName = ((DLFileEntry) model).getName()-->Line_11 $$ migrateFile(companyId, repositoryId, fileName, versionNumber)[ FD ]
Line_10 $$ String versionNumber = Store.VERSION_DEFAULT-->Line_16 $$ migrateFile(companyId, repositoryId, fileName, versionNumber)[ FD ]
