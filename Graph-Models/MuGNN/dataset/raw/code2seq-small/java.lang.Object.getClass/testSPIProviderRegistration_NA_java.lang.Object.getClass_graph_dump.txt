Line_40 $$ mockSPIProvider3 = new MockSPIProvider(null)-->Line_54 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_26 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_27 $$ Assert.assertEquals("Not registering SPI provider " + mockSPIProvider3 + " because it duplicates " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_47 $$ mockSPIProvider3 = new MockSPIProvider(name3)-->Line_54 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_148 $$ MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1)[ FD ]
Line_29 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_53 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_50 $$ logRecord1 = logRecords.get(0)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_29 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_42 $$ MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3)[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_58 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_51 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + mockSPIProvider3, logRecord1.getMessage())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_67 $$ ReflectionTestUtil.setFieldValue(MPIHelperUtil.class, "_spiProviderContainers", new ConcurrentHashMap<String, Object>(oldSPIProviderContainers) -->Line_69 $$ return false[ CD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_58 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_25 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_20 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_40 $$ mockSPIProvider3 = new MockSPIProvider(null)-->Line_48 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_177 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_50 $$ logRecord1 = logRecords.get(0)-->Line_96 $$ Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2, logRecord1.getMessage())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_36 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_39 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider2))[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_29 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_54 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_58 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_157 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2))[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_51 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + mockSPIProvider3, logRecord1.getMessage())[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_60 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_50 $$ logRecord1 = logRecords.get(0)-->Line_121 $$ Throwable throwable = logRecord1.getThrown()[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_15 $$ LogRecord logRecord1 = logRecords.get(0)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_92 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_50 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_2 $$ public void testSPIProviderRegistration() throws RemoteException -->Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)[ CD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_59 $$ logRecord1 = logRecords.get(0)-->Line_121 $$ Throwable throwable = logRecord1.getThrown()[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_120 $$ Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_29 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_30 $$ Assert.assertFalse(MPIHelperUtil.registerSPIProvider(mockSPIProvider3))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_49 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_58 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_113 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_47 $$ mockSPIProvider3 = new MockSPIProvider(name3)-->Line_48 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_40 $$ mockSPIProvider3 = new MockSPIProvider(null)-->Line_42 $$ MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_72 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_58 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_59 $$ logRecord1 = logRecords.get(0)-->Line_120 $$ Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_29 $$ mockSPIProvider3 = new MockSPIProvider(name1)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_53 $$ mockSPIProvider3 = new MockSPIProvider(name3)-->Line_54 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_49 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_16 $$ Assert.assertEquals("Registered SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_54 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_102 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_100 $$ logRecords = captureHandler.resetLogLevel(Level.SEVERE)[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_50 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_27 $$ Assert.assertEquals("Not registering SPI provider " + mockSPIProvider3 + " because it duplicates " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_29 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_47 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_93 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_40 $$ mockSPIProvider3 = new MockSPIProvider(null)-->Line_53 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_50 $$ logRecord1 = logRecords.get(0)-->Line_120 $$ Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_59 $$ logRecord1 = logRecords.get(0)-->Line_78 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_79 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_30 $$ Assert.assertFalse(MPIHelperUtil.registerSPIProvider(mockSPIProvider3))[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_33 $$ Assert.assertSame(mockSPIProvider1, MPIHelperUtil.getSPIProvider(name1))[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_96 $$ Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2, logRecord1.getMessage())[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_136 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_78 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_25 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_65 $$ ConcurrentMap<String, Object> oldSPIProviderContainers = ReflectionTestUtil.getFieldValue(MPIHelperUtil.class, "_spiProviderContainers")-->Line_74 $$ ReflectionTestUtil.setFieldValue(MPIHelperUtil.class, "_spiProviderContainers", oldSPIProviderContainers)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_50 $$ logRecord1 = logRecords.get(0)-->Line_78 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_26 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_29 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_40 $$ mockSPIProvider3 = new MockSPIProvider(null)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_121 $$ Throwable throwable = logRecord1.getThrown()[ FD ]
Line_40 $$ mockSPIProvider3 = new MockSPIProvider(null)-->Line_47 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_58 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_98 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_26 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_60 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_38 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider1))[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_134 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_50 $$ logRecord1 = logRecords.get(0)-->Line_60 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_24 $$ Assert.assertFalse(MPIHelperUtil.registerSPIProvider(mockSPIProvider3))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_50 $$ logRecord1 = logRecords.get(0)-->Line_174 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_33 $$ Assert.assertSame(mockSPIProvider1, MPIHelperUtil.getSPIProvider(name1))[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_167 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_11 $$ String name1 = "spiProvider1"-->Line_33 $$ Assert.assertSame(mockSPIProvider1, MPIHelperUtil.getSPIProvider(name1))[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_50 $$ logRecord1 = logRecords.get(0)-->Line_51 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + mockSPIProvider3, logRecord1.getMessage())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_48 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_166 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_38 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider1))[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_40 $$ mockSPIProvider3 = new MockSPIProvider(null)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_36 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_38 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider1))[ FD ]
Line_82 $$ ReflectionTestUtil.setFieldValue(MPIHelperUtil.class, "_spiProviderContainers", new ConcurrentHashMap<String, Object>(oldSPIProviderContainers) -->Line_84 $$ return false[ CD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_104 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider2))[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_136 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_47 $$ mockSPIProvider3 = new MockSPIProvider(name3)-->Line_53 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_174 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_174 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_49 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_58 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_65 $$ ConcurrentMap<String, Object> oldSPIProviderContainers = ReflectionTestUtil.getFieldValue(MPIHelperUtil.class, "_spiProviderContainers")-->Line_89 $$ ReflectionTestUtil.setFieldValue(MPIHelperUtil.class, "_spiProviderContainers", oldSPIProviderContainers)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_87 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_36 $$ List<SPIProvider> spiProviders = MPIHelperUtil.getSPIProviders()-->Line_37 $$ Assert.assertEquals(2, spiProviders.size())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_50 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_76 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_55 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_39 $$ Assert.assertTrue(spiProviders.contains(mockSPIProvider2))[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_47 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_29 $$ mockSPIProvider3 = new MockSPIProvider(name1)-->Line_48 $$ Assert.assertFalse(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3))[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_77 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_32 $$ String name3 = "spiProvider3"-->Line_35 $$ Assert.assertNull(MPIHelperUtil.getSPIProvider(name3))[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_102 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_53 $$ mockSPIProvider3 = new MockSPIProvider(name3)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_50 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_155 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_99 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_178 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_123 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_120 $$ Assert.assertEquals("Unable to unregister SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_128 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider2))[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_133 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_19 $$ MockSPIProvider mockSPIProvider2 = new MockSPIProvider(name2)-->Line_34 $$ Assert.assertSame(mockSPIProvider2, MPIHelperUtil.getSPIProvider(name2))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_14 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_63 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_97 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_18 $$ String name2 = "spiProvider2"-->Line_34 $$ Assert.assertSame(mockSPIProvider2, MPIHelperUtil.getSPIProvider(name2))[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_25 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_5 $$ MPIHelperUtil.registerSPIProvider(mockSPIProvider1)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_96 $$ Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2, logRecord1.getMessage())[ FD ]
Line_23 $$ MockSPIProvider mockSPIProvider3 = new MockSPIProvider(name1)-->Line_42 $$ MPIHelperUtil.unregisterSPIProvider(mockSPIProvider3)[ FD ]
Line_15 $$ LogRecord logRecord1 = logRecords.get(0)-->Line_26 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_167 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_50 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_13 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_59 $$ logRecord1 = logRecords.get(0)-->Line_60 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_113 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_13 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_155 $$ Assert.assertTrue(MPIHelperUtil.registerSPIProvider(mockSPIProvider1))[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_49 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_9 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(MPIHelperUtil.class.getName(), Level.INFO)) -->Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_172 $$ Assert.assertEquals(2, logRecords.size())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_49 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_50 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_3 $$ MockSPIProvider mockSPIProvider1 = new MockSPIProvider(null)-->Line_98 $$ Assert.assertTrue(MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1))[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_12 $$ mockSPIProvider1 = new MockSPIProvider(name1)-->Line_148 $$ MPIHelperUtil.unregisterSPIProvider(mockSPIProvider1)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_173 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_21 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_153 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_11 $$ String name1 = "spiProvider1"-->Line_146 $$ MPIHelperUtilTestUtil.directResigterSPI(name1, mockSPI1)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_121 $$ Throwable throwable = logRecord1.getThrown()[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_31 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_46 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_119 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_21 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_91 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_59 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_10 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_50 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_56 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_17 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)[ FD ]
Line_28 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_94 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_59 $$ logRecord1 = logRecords.get(0)-->Line_174 $$ Assert.assertEquals("Unregistered SPI " + mockSPI1 + " while unregistering SPI provider " + mockSPIProvider1, logRecord1.getMessage())[ FD ]
Line_59 $$ logRecord1 = logRecords.get(0)-->Line_96 $$ Assert.assertEquals("Unregistered SPI provider " + mockSPIProvider2, logRecord1.getMessage())[ FD ]
Line_26 $$ logRecord1 = logRecords.get(0)-->Line_78 $$ Assert.assertEquals("Not unregistering unregistered SPI provider " + name2, logRecord1.getMessage())[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_183 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_95 $$ logRecord1 = logRecords.get(0)[ FD ]
Line_61 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_64 $$ logRecords = captureHandler.resetLogLevel(Level.INFO)[ FD ]
Line_22 $$ logRecords = captureHandler.resetLogLevel(Level.WARNING)-->Line_118 $$ Assert.assertEquals(1, logRecords.size())[ FD ]
Line_52 $$ logRecords = captureHandler.resetLogLevel(Level.OFF)-->Line_175 $$ LogRecord logRecord2 = logRecords.get(1)[ FD ]
