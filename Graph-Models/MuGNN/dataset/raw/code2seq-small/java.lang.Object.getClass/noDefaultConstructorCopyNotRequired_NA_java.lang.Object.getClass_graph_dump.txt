Line_2 $$ public void noDefaultConstructorCopyNotRequired() throws Exception -->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_2 $$ public void noDefaultConstructorCopyNotRequired() throws Exception -->Line_3 $$ NoDefaultConstructorMap<String, Integer> map = new NoDefaultConstructorMap<String, Integer>(Collections.<String, Integer>singletonMap("1", 1))[ CD ]
Line_7 $$ Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType)-->Line_9 $$ assertEquals(NoDefaultConstructorMap.class, result.getClass())[ FD ]
Line_3 $$ NoDefaultConstructorMap<String, Integer> map = new NoDefaultConstructorMap<String, Integer>(Collections.<String, Integer>singletonMap("1", 1))-->Line_8 $$ assertEquals(map, result)[ FD ]
Line_5 $$ TypeDescriptor targetType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class))-->Line_7 $$ Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_3 $$ NoDefaultConstructorMap<String, Integer> map = new NoDefaultConstructorMap<String, Integer>(Collections.<String, Integer>singletonMap("1", 1))-->Line_7 $$ Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType)[ FD ]
Line_2 $$ public void noDefaultConstructorCopyNotRequired() throws Exception -->Line_5 $$ TypeDescriptor targetType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class))[ CD ]
Line_5 $$ TypeDescriptor targetType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class))-->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_2 $$ public void noDefaultConstructorCopyNotRequired() throws Exception -->Line_7 $$ Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType)[ CD ]
Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class))-->Line_6 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_2 $$ public void noDefaultConstructorCopyNotRequired() throws Exception -->Line_8 $$ assertEquals(map, result)[ CD ]
Line_2 $$ public void noDefaultConstructorCopyNotRequired() throws Exception -->Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class))[ CD ]
Line_7 $$ Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType)-->Line_8 $$ assertEquals(map, result)[ FD ]
Line_2 $$ public void noDefaultConstructorCopyNotRequired() throws Exception -->Line_9 $$ assertEquals(NoDefaultConstructorMap.class, result.getClass())[ CD ]
Line_4 $$ TypeDescriptor sourceType = TypeDescriptor.map(NoDefaultConstructorMap.class, TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class))-->Line_7 $$ Map<String, Integer> result = (Map<String, Integer>) conversionService.convert(map, sourceType, targetType)[ FD ]
