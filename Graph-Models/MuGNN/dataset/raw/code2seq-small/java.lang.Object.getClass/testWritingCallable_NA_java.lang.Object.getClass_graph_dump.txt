Line_27 $$ pipe = Pipe.open()-->Line_48 $$ sinkChannel = pipe.sink()[ FD ]
Line_72 $$ writingThread = new Thread(futureTask)-->Line_85 $$ writingThread.join()[ FD ]
Line_47 $$ sourceChannel = pipe.source()-->Line_86 $$ sourceChannel.close()[ FD ]
Line_30 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_69 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_63 $$ sourceChannel.close()[ CD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_33 $$ writingThread = new Thread(futureTask)[ FD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_19 $$ Assert.assertTrue(DatagramHelper.readFrom(DatagramHelper.createReceiveDatagram(), sourceChannel))[ FD ]
Line_22 $$ Void result = futureTask.get()-->Line_60 $$ result = futureTask.get()[ FD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_62 $$ writingThread.join()[ FD ]
Line_65 $$ pipe = Pipe.open()-->Line_66 $$ sourceChannel = pipe.source()[ FD ]
Line_41 $$ result = futureTask.get()-->Line_42 $$ Assert.assertNull(result)[ FD ]
Line_28 $$ sourceChannel = pipe.source()-->Line_66 $$ sourceChannel = pipe.source()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_73 $$ writingThread.start()[ CD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_45 $$ sinkChannel.close()[ FD ]
Line_22 $$ Void result = futureTask.get()-->Line_42 $$ Assert.assertNull(result)[ FD ]
Line_32 $$ futureTask = new FutureTask(writingCallable)-->Line_80 $$ futureTask.get()[ FD ]
Line_67 $$ sinkChannel = pipe.sink()-->Line_68 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_27 $$ pipe = Pipe.open()-->Line_29 $$ sinkChannel = pipe.sink()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_39 $$ Assert.assertTrue(counter > 0)[ CD ]
Line_11 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_51 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_35 $$ int counter = 0-->Line_54 $$ counter = 0[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_35 $$ int counter = 0[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_61 $$ Assert.assertNull(result)[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_59 $$ sinkChannel.close()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_46 $$ pipe = Pipe.open()[ CD ]
Line_49 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_70 $$ writingCallable.openLatch()[ FD ]
Line_29 $$ sinkChannel = pipe.sink()-->Line_68 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_23 $$ Assert.assertNull(result)[ CD ]
Line_47 $$ sourceChannel = pipe.source()-->Line_63 $$ sourceChannel.close()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_42 $$ Assert.assertNull(result)[ CD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_85 $$ writingThread.join()[ FD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_25 $$ sourceChannel.close()[ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_62 $$ writingThread.join()[ FD ]
Line_72 $$ writingThread = new Thread(futureTask)-->Line_73 $$ writingThread.start()[ FD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_43 $$ writingThread.join()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_51 $$ futureTask = new FutureTask(writingCallable)[ CD ]
Line_9 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_31 $$ writingCallable.openLatch()[ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_75 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_28 $$ sourceChannel = pipe.source()-->Line_63 $$ sourceChannel.close()[ FD ]
Line_54 $$ counter = 0-->Line_76 $$ counter++[ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_13 $$ writingThread.start()[ FD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_44 $$ sourceChannel.close()[ FD ]
Line_30 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_70 $$ writingCallable.openLatch()[ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_43 $$ writingThread.join()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_66 $$ sourceChannel = pipe.source()[ CD ]
Line_35 $$ int counter = 0-->Line_74 $$ counter = 0[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_72 $$ writingThread = new Thread(futureTask)[ CD ]
Line_29 $$ sinkChannel = pipe.sink()-->Line_59 $$ sinkChannel.close()[ FD ]
Line_32 $$ futureTask = new FutureTask(writingCallable)-->Line_60 $$ result = futureTask.get()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_6 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()[ CD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_48 $$ sinkChannel = pipe.sink()[ FD ]
Line_46 $$ pipe = Pipe.open()-->Line_47 $$ sourceChannel = pipe.source()[ FD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_87 $$ sinkChannel.close()[ FD ]
Line_27 $$ pipe = Pipe.open()-->Line_65 $$ pipe = Pipe.open()[ FD ]
Line_29 $$ sinkChannel = pipe.sink()-->Line_64 $$ sinkChannel.close()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_28 $$ sourceChannel = pipe.source()[ CD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_29 $$ sinkChannel = pipe.sink()[ FD ]
Line_51 $$ futureTask = new FutureTask(writingCallable)-->Line_80 $$ futureTask.get()[ FD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_28 $$ sourceChannel = pipe.source()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_10 $$ writingCallable.openLatch()[ CD ]
Line_52 $$ writingThread = new Thread(futureTask)-->Line_73 $$ writingThread.start()[ FD ]
Line_36 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) -->Line_37 $$ counter++[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_3 $$ Pipe pipe = Pipe.open()[ CD ]
Line_9 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_10 $$ writingCallable.openLatch()[ FD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_29 $$ sinkChannel = pipe.sink()[ FD ]
Line_9 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_30 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_29 $$ sinkChannel = pipe.sink()-->Line_45 $$ sinkChannel.close()[ FD ]
Line_41 $$ result = futureTask.get()-->Line_60 $$ result = futureTask.get()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_22 $$ Void result = futureTask.get()[ CD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_34 $$ writingThread.start()[ FD ]
Line_35 $$ int counter = 0-->Line_56 $$ counter++[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_4 $$ SourceChannel sourceChannel = pipe.source()[ CD ]
Line_52 $$ writingThread = new Thread(futureTask)-->Line_75 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_43 $$ writingThread.join()[ CD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_65 $$ pipe = Pipe.open()[ FD ]
Line_27 $$ pipe = Pipe.open()-->Line_46 $$ pipe = Pipe.open()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_30 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ CD ]
Line_28 $$ sourceChannel = pipe.source()-->Line_86 $$ sourceChannel.close()[ FD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_47 $$ sourceChannel = pipe.source()[ FD ]
Line_55 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) -->Line_56 $$ counter++[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_74 $$ counter = 0[ CD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_46 $$ pipe = Pipe.open()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_87 $$ sinkChannel.close()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_24 $$ writingThread.join()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_9 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ CD ]
Line_46 $$ pipe = Pipe.open()-->Line_66 $$ sourceChannel = pipe.source()[ FD ]
Line_48 $$ sinkChannel = pipe.sink()-->Line_87 $$ sinkChannel.close()[ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_72 $$ writingThread = new Thread(futureTask)[ FD ]
Line_47 $$ sourceChannel = pipe.source()-->Line_66 $$ sourceChannel = pipe.source()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_58 $$ Assert.assertTrue(counter > 0)[ CD ]
Line_27 $$ pipe = Pipe.open()-->Line_47 $$ sourceChannel = pipe.source()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_41 $$ result = futureTask.get()[ CD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_47 $$ sourceChannel = pipe.source()[ FD ]
Line_74 $$ counter = 0-->Line_76 $$ counter++[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_20 $$ while (writingThread.getState() != Thread.State.WAITING) [ CD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_5 $$ SinkChannel sinkChannel = pipe.sink()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_29 $$ sinkChannel = pipe.sink()[ CD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_48 $$ sinkChannel = pipe.sink()[ FD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_64 $$ sinkChannel.close()[ FD ]
Line_6 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_15 $$ sendingQueue.put(datagram1)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_34 $$ writingThread.start()[ CD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_26 $$ sinkChannel.close()[ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_53 $$ writingThread.start()[ FD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_59 $$ sinkChannel.close()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_60 $$ result = futureTask.get()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_78 $$ Assert.assertTrue(counter > 0)[ CD ]
Line_30 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_49 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_67 $$ sinkChannel = pipe.sink()[ FD ]
Line_11 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_80 $$ futureTask.get()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_7 $$ ChannelContext channelContext = new ChannelContext(sendingQueue)[ CD ]
Line_16 $$ Datagram datagram2 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_17 $$ sendingQueue.put(datagram2)[ FD ]
Line_11 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_32 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_27 $$ pipe = Pipe.open()-->Line_28 $$ sourceChannel = pipe.source()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_25 $$ sourceChannel.close()[ CD ]
Line_29 $$ sinkChannel = pipe.sink()-->Line_48 $$ sinkChannel = pipe.sink()[ FD ]
Line_65 $$ pipe = Pipe.open()-->Line_67 $$ sinkChannel = pipe.sink()[ FD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_27 $$ pipe = Pipe.open()[ FD ]
Line_35 $$ int counter = 0-->Line_37 $$ counter++[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_26 $$ sinkChannel.close()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_45 $$ sinkChannel.close()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_54 $$ counter = 0[ CD ]
Line_35 $$ int counter = 0-->Line_76 $$ counter++[ FD ]
Line_48 $$ sinkChannel = pipe.sink()-->Line_68 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_49 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_69 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_32 $$ futureTask = new FutureTask(writingCallable)-->Line_71 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_6 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_55 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) [ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_20 $$ while (writingThread.getState() != Thread.State.WAITING) [ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_50 $$ writingCallable.openLatch()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_21 $$ writingThread.interrupt()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_62 $$ writingThread.join()[ CD ]
Line_52 $$ writingThread = new Thread(futureTask)-->Line_85 $$ writingThread.join()[ FD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_72 $$ writingThread = new Thread(futureTask)[ FD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_40 $$ writingThread.interrupt()[ FD ]
Line_54 $$ counter = 0-->Line_74 $$ counter = 0[ FD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_4 $$ SourceChannel sourceChannel = pipe.source()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_49 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_75 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ CD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_86 $$ sourceChannel.close()[ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_34 $$ writingThread.start()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_44 $$ sourceChannel.close()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_48 $$ sinkChannel = pipe.sink()[ CD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_67 $$ sinkChannel = pipe.sink()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_31 $$ writingCallable.openLatch()[ CD ]
Line_51 $$ futureTask = new FutureTask(writingCallable)-->Line_71 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_36 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) [ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_40 $$ writingThread.interrupt()[ CD ]
Line_49 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_50 $$ writingCallable.openLatch()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_11 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)[ CD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_52 $$ writingThread = new Thread(futureTask)[ FD ]
Line_51 $$ futureTask = new FutureTask(writingCallable)-->Line_60 $$ result = futureTask.get()[ FD ]
Line_11 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_22 $$ Void result = futureTask.get()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_19 $$ Assert.assertTrue(DatagramHelper.readFrom(DatagramHelper.createReceiveDatagram(), sourceChannel))[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_53 $$ writingThread.start()[ CD ]
Line_46 $$ pipe = Pipe.open()-->Line_67 $$ sinkChannel = pipe.sink()[ FD ]
Line_32 $$ futureTask = new FutureTask(writingCallable)-->Line_51 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_3 $$ Pipe pipe = Pipe.open()-->Line_66 $$ sourceChannel = pipe.source()[ FD ]
Line_11 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_41 $$ result = futureTask.get()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_32 $$ futureTask = new FutureTask(writingCallable)[ CD ]
Line_28 $$ sourceChannel = pipe.source()-->Line_44 $$ sourceChannel.close()[ FD ]
Line_29 $$ sinkChannel = pipe.sink()-->Line_87 $$ sinkChannel.close()[ FD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_21 $$ writingThread.interrupt()[ FD ]
Line_54 $$ counter = 0-->Line_56 $$ counter++[ FD ]
Line_41 $$ result = futureTask.get()-->Line_61 $$ Assert.assertNull(result)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_47 $$ sourceChannel = pipe.source()[ CD ]
Line_48 $$ sinkChannel = pipe.sink()-->Line_64 $$ sinkChannel.close()[ FD ]
Line_22 $$ Void result = futureTask.get()-->Line_41 $$ result = futureTask.get()[ FD ]
Line_46 $$ pipe = Pipe.open()-->Line_65 $$ pipe = Pipe.open()[ FD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_75 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_71 $$ futureTask = new FutureTask(writingCallable)[ CD ]
Line_69 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_70 $$ writingCallable.openLatch()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_8 $$ channelContext.setRegistrationReference(new MockRegistrationReference(_executorIntraband))[ CD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_52 $$ writingThread = new Thread(futureTask)[ FD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_63 $$ sourceChannel.close()[ FD ]
Line_29 $$ sinkChannel = pipe.sink()-->Line_67 $$ sinkChannel = pipe.sink()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_69 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_55 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) [ CD ]
Line_7 $$ ChannelContext channelContext = new ChannelContext(sendingQueue)-->Line_8 $$ channelContext.setRegistrationReference(new MockRegistrationReference(_executorIntraband))[ FD ]
Line_67 $$ sinkChannel = pipe.sink()-->Line_87 $$ sinkChannel.close()[ FD ]
Line_22 $$ Void result = futureTask.get()-->Line_23 $$ Assert.assertNull(result)[ FD ]
Line_30 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_31 $$ writingCallable.openLatch()[ FD ]
Line_52 $$ writingThread = new Thread(futureTask)-->Line_72 $$ writingThread = new Thread(futureTask)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_67 $$ sinkChannel = pipe.sink()[ CD ]
Line_66 $$ sourceChannel = pipe.source()-->Line_86 $$ sourceChannel.close()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_18 $$ Assert.assertTrue(DatagramHelper.readFrom(DatagramHelper.createReceiveDatagram(), sourceChannel))[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_85 $$ writingThread.join()[ CD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_40 $$ writingThread.interrupt()[ FD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_73 $$ writingThread.start()[ FD ]
Line_46 $$ pipe = Pipe.open()-->Line_48 $$ sinkChannel = pipe.sink()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_5 $$ SinkChannel sinkChannel = pipe.sink()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_64 $$ sinkChannel.close()[ CD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_66 $$ sourceChannel = pipe.source()[ FD ]
Line_28 $$ sourceChannel = pipe.source()-->Line_47 $$ sourceChannel = pipe.source()[ FD ]
Line_9 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_70 $$ writingCallable.openLatch()[ FD ]
Line_6 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_36 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS)) [ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_70 $$ writingCallable.openLatch()[ CD ]
Line_48 $$ sinkChannel = pipe.sink()-->Line_59 $$ sinkChannel.close()[ FD ]
Line_5 $$ SinkChannel sinkChannel = pipe.sink()-->Line_68 $$ sinkChannel.configureBlocking(false)[ FD ]
Line_27 $$ pipe = Pipe.open()-->Line_67 $$ sinkChannel = pipe.sink()[ FD ]
Line_27 $$ pipe = Pipe.open()-->Line_66 $$ sourceChannel = pipe.source()[ FD ]
Line_52 $$ writingThread = new Thread(futureTask)-->Line_62 $$ writingThread.join()[ FD ]
Line_71 $$ futureTask = new FutureTask(writingCallable)-->Line_80 $$ futureTask.get()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_33 $$ writingThread = new Thread(futureTask)[ CD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_24 $$ writingThread.join()[ FD ]
Line_11 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_60 $$ result = futureTask.get()[ FD ]
Line_72 $$ writingThread = new Thread(futureTask)-->Line_75 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_48 $$ sinkChannel = pipe.sink()-->Line_67 $$ sinkChannel = pipe.sink()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_13 $$ writingThread.start()[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_15 $$ sendingQueue.put(datagram1)[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_16 $$ Datagram datagram2 = Datagram.createRequestDatagram(_TYPE, _data)[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_27 $$ pipe = Pipe.open()[ CD ]
Line_11 $$ FutureTask<Void> futureTask = new FutureTask(writingCallable)-->Line_71 $$ futureTask = new FutureTask(writingCallable)[ FD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_85 $$ writingThread.join()[ FD ]
Line_60 $$ result = futureTask.get()-->Line_61 $$ Assert.assertNull(result)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_12 $$ Thread writingThread = new Thread(futureTask)[ CD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_18 $$ Assert.assertTrue(DatagramHelper.readFrom(DatagramHelper.createReceiveDatagram(), sourceChannel))[ FD ]
Line_6 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_75 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) [ FD ]
Line_52 $$ writingThread = new Thread(futureTask)-->Line_53 $$ writingThread.start()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_17 $$ sendingQueue.put(datagram2)[ CD ]
Line_6 $$ BlockingQueue<Datagram> sendingQueue = new SynchronousQueue()-->Line_17 $$ sendingQueue.put(datagram2)[ FD ]
Line_9 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_69 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_30 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_50 $$ writingCallable.openLatch()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_65 $$ pipe = Pipe.open()[ CD ]
Line_9 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_50 $$ writingCallable.openLatch()[ FD ]
Line_33 $$ writingThread = new Thread(futureTask)-->Line_53 $$ writingThread.start()[ FD ]
Line_75 $$ while (sendingQueue.offer(Datagram.createRequestDatagram(_TYPE, _data), 1, TimeUnit.SECONDS) || writingThread.isAlive()) -->Line_76 $$ counter++[ CD ]
Line_9 $$ WritingCallable writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)-->Line_49 $$ writingCallable = _executorIntraband.new WritingCallable(sinkChannel, channelContext)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_52 $$ writingThread = new Thread(futureTask)[ CD ]
Line_12 $$ Thread writingThread = new Thread(futureTask)-->Line_73 $$ writingThread.start()[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_14 $$ Datagram datagram1 = Datagram.createRequestDatagram(_TYPE, _data)[ CD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_86 $$ sourceChannel.close()[ CD ]
Line_32 $$ futureTask = new FutureTask(writingCallable)-->Line_41 $$ result = futureTask.get()[ FD ]
Line_14 $$ Datagram datagram1 = Datagram.createRequestDatagram(_TYPE, _data)-->Line_15 $$ sendingQueue.put(datagram1)[ FD ]
Line_2 $$ public void testWritingCallable() throws Exception -->Line_68 $$ sinkChannel.configureBlocking(false)[ CD ]
Line_22 $$ Void result = futureTask.get()-->Line_61 $$ Assert.assertNull(result)[ FD ]
Line_4 $$ SourceChannel sourceChannel = pipe.source()-->Line_28 $$ sourceChannel = pipe.source()[ FD ]
