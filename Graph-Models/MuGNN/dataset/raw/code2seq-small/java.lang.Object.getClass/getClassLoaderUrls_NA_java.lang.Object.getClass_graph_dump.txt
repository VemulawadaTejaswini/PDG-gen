Line_13 $$ urls = Arrays.asList(((URLClassLoader) classLoader).getURLs())-->Line_15 $$ return urls == null ? Collections.<URL>emptyList() : getClassLoaderUrls(urls)[ FD ]
Line_3 $$ Collection<URL> urls = null-->Line_13 $$ urls = Arrays.asList(((URLClassLoader) classLoader).getURLs())[ FD ]
Line_4 $$ final ClassLoader classLoader = PluginManagerCore.class.getClassLoader()-->Line_7 $$ urls = (List<URL>) aClass.getMethod("getUrls").invoke(classLoader)[ FD ]
Line_2 $$ private static Collection<URL> getClassLoaderUrls() -->Line_15 $$ return urls == null ? Collections.<URL>emptyList() : getClassLoaderUrls(urls)[ CD ]
Line_7 $$ urls = (List<URL>) aClass.getMethod("getUrls").invoke(classLoader)-->Line_15 $$ return urls == null ? Collections.<URL>emptyList() : getClassLoaderUrls(urls)[ FD ]
Line_3 $$ Collection<URL> urls = null-->Line_15 $$ return urls == null ? Collections.<URL>emptyList() : getClassLoaderUrls(urls)[ FD ]
Line_3 $$ Collection<URL> urls = null-->Line_7 $$ urls = (List<URL>) aClass.getMethod("getUrls").invoke(classLoader)[ FD ]
Line_2 $$ private static Collection<URL> getClassLoaderUrls() -->Line_12 $$ if (urls == null && classLoader instanceof URLClassLoader) [ CD ]
Line_4 $$ final ClassLoader classLoader = PluginManagerCore.class.getClassLoader()-->Line_5 $$ final Class<? extends ClassLoader> aClass = classLoader.getClass()[ FD ]
Line_2 $$ private static Collection<URL> getClassLoaderUrls() -->Line_5 $$ final Class<? extends ClassLoader> aClass = classLoader.getClass()[ CD ]
Line_2 $$ private static Collection<URL> getClassLoaderUrls() -->Line_4 $$ final ClassLoader classLoader = PluginManagerCore.class.getClassLoader()[ CD ]
Line_5 $$ final Class<? extends ClassLoader> aClass = classLoader.getClass()-->Line_7 $$ urls = (List<URL>) aClass.getMethod("getUrls").invoke(classLoader)[ FD ]
Line_12 $$ if (urls == null && classLoader instanceof URLClassLoader) -->Line_13 $$ urls = Arrays.asList(((URLClassLoader) classLoader).getURLs())[ CD ]
Line_7 $$ urls = (List<URL>) aClass.getMethod("getUrls").invoke(classLoader)-->Line_13 $$ urls = Arrays.asList(((URLClassLoader) classLoader).getURLs())[ FD ]
Line_2 $$ private static Collection<URL> getClassLoaderUrls() -->Line_3 $$ Collection<URL> urls = null[ CD ]
