Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_3 $$ SessionFactory sf = mock(SessionFactory.class)[ CD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_10 $$ assertEquals(Types.CLOB, type.sqlTypes()[0])[ CD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_13 $$ assertEquals("content", type.deepCopy("content"))[ CD ]
Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)-->Line_15 $$ assertEquals("content", type.nullSafeGet(rs, new String[] [ FD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_7 $$ given(lobHandler.getClobAsString(rs, "column")).willReturn("content")[ CD ]
Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)-->Line_11 $$ assertEquals(String.class, type.returnedClass())[ FD ]
Line_3 $$ SessionFactory sf = mock(SessionFactory.class)-->Line_6 $$ given(session.getSessionFactory()).willReturn(sf)[ FD ]
Line_3 $$ SessionFactory sf = mock(SessionFactory.class)-->Line_18 $$ SessionFactoryUtils.getSession(sf, true)[ FD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_15 $$ assertEquals("content", type.nullSafeGet(rs, new String[] [ CD ]
Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)-->Line_19 $$ type.nullSafeSet(ps, "content", 1)[ FD ]
Line_4 $$ Session session = mock(Session.class)-->Line_6 $$ given(session.getSessionFactory()).willReturn(sf)[ FD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_12 $$ assertTrue(type.equals("content", "content"))[ CD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_30 $$ verify(session).close()[ CD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_31 $$ verify(lobCreator).setClobAsString(ps, 1, "content")[ CD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_14 $$ assertFalse(type.isMutable())[ CD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_5 $$ given(sf.openSession()).willReturn(session)[ CD ]
Line_20 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_23 $$ ((TransactionSynchronization) synchs.get(0)).beforeCompletion()[ FD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)[ CD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_6 $$ given(session.getSessionFactory()).willReturn(sf)[ CD ]
Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)-->Line_12 $$ assertTrue(type.equals("content", "content"))[ FD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_9 $$ assertEquals(1, type.sqlTypes().length)[ CD ]
Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)-->Line_10 $$ assertEquals(Types.CLOB, type.sqlTypes()[0])[ FD ]
Line_20 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_24 $$ ((TransactionSynchronization) synchs.get(0)).afterCompletion(TransactionSynchronization.STATUS_COMMITTED)[ FD ]
Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)-->Line_9 $$ assertEquals(1, type.sqlTypes().length)[ FD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_11 $$ assertEquals(String.class, type.returnedClass())[ CD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_16 $$ TransactionSynchronizationManager.initSynchronization()[ CD ]
Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)-->Line_13 $$ assertEquals("content", type.deepCopy("content"))[ FD ]
Line_4 $$ Session session = mock(Session.class)-->Line_5 $$ given(sf.openSession()).willReturn(session)[ FD ]
Line_20 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_26 $$ ((TransactionSynchronization) synchs.get(1)).afterCompletion(TransactionSynchronization.STATUS_COMMITTED)[ FD ]
Line_20 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_22 $$ assertTrue(synchs.get(0).getClass().getName().endsWith("SpringLobCreatorSynchronization"))[ FD ]
Line_4 $$ Session session = mock(Session.class)-->Line_30 $$ verify(session).close()[ FD ]
Line_20 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_21 $$ assertEquals(2, synchs.size())[ FD ]
Line_20 $$ List synchs = TransactionSynchronizationManager.getSynchronizations()-->Line_25 $$ ((TransactionSynchronization) synchs.get(1)).beforeCompletion()[ FD ]
Line_3 $$ SessionFactory sf = mock(SessionFactory.class)-->Line_5 $$ given(sf.openSession()).willReturn(session)[ FD ]
Line_2 $$ public void testClobStringTypeWithSynchronizedSession() throws Exception -->Line_4 $$ Session session = mock(Session.class)[ CD ]
Line_8 $$ ClobStringType type = new ClobStringType(lobHandler, null)-->Line_14 $$ assertFalse(type.isMutable())[ FD ]
