Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_11 $$ String fullyQualifiedClassName = StringUtil.replace(fileName.substring(pos, fileName.length() - 5), new String[] [ FD ]
Line_14 $$ ClassLibrary classLibrary = new ClassLibrary()-->Line_15 $$ classLibrary.addClassLoader(getClass().getClassLoader())[ FD ]
Line_11 $$ String fullyQualifiedClassName = StringUtil.replace(fileName.substring(pos, fileName.length() - 5), new String[] -->Line_22 $$ javaClass = builder.getClassByName(fullyQualifiedClassName)[ FD ]
Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_4 $$ if (fileName.startsWith(_implDirName)) [ CD ]
Line_11 $$ String fullyQualifiedClassName = StringUtil.replace(fileName.substring(pos, fileName.length() - 5), new String[] -->Line_23 $$ _javaClasses.put(fullyQualifiedClassName, javaClass)[ FD ]
Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_3 $$ int pos = 0[ CD ]
Line_4 $$ if (fileName.startsWith(_implDirName)) -->Line_5 $$ pos = _implDirName.length() + 1[ CD ]
Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_12 $$ JavaClass javaClass = _javaClasses.get(fullyQualifiedClassName)[ CD ]
Line_6 $$ if (fileName.startsWith(_apiDirName)) -->Line_7 $$ pos = _apiDirName.length() + 1[ CD ]
Line_18 $$ if (!file.exists()) -->Line_19 $$ return null[ CD ]
Line_13 $$ if (javaClass == null) -->Line_16 $$ JavaDocBuilder builder = new JavaDocBuilder(classLibrary)[ CD ]
Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_6 $$ if (fileName.startsWith(_apiDirName)) [ FD ]
Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_25 $$ return javaClass[ CD ]
Line_13 $$ if (javaClass == null) -->Line_23 $$ _javaClasses.put(fullyQualifiedClassName, javaClass)[ CD ]
Line_17 $$ File file = new File(fileName)-->Line_18 $$ if (!file.exists()) [ FD ]
Line_12 $$ JavaClass javaClass = _javaClasses.get(fullyQualifiedClassName)-->Line_23 $$ _javaClasses.put(fullyQualifiedClassName, javaClass)[ FD ]
Line_13 $$ if (javaClass == null) -->Line_18 $$ if (!file.exists()) [ CD ]
Line_17 $$ File file = new File(fileName)-->Line_21 $$ builder.addSource(file)[ FD ]
Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_11 $$ String fullyQualifiedClassName = StringUtil.replace(fileName.substring(pos, fileName.length() - 5), new String[] [ CD ]
Line_7 $$ pos = _apiDirName.length() + 1-->Line_11 $$ String fullyQualifiedClassName = StringUtil.replace(fileName.substring(pos, fileName.length() - 5), new String[] [ FD ]
Line_12 $$ JavaClass javaClass = _javaClasses.get(fullyQualifiedClassName)-->Line_22 $$ javaClass = builder.getClassByName(fullyQualifiedClassName)[ FD ]
Line_5 $$ pos = _implDirName.length() + 1-->Line_11 $$ String fullyQualifiedClassName = StringUtil.replace(fileName.substring(pos, fileName.length() - 5), new String[] [ FD ]
Line_11 $$ String fullyQualifiedClassName = StringUtil.replace(fileName.substring(pos, fileName.length() - 5), new String[] -->Line_12 $$ JavaClass javaClass = _javaClasses.get(fullyQualifiedClassName)[ FD ]
Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_13 $$ if (javaClass == null) [ CD ]
Line_5 $$ pos = _implDirName.length() + 1-->Line_7 $$ pos = _apiDirName.length() + 1[ FD ]
Line_3 $$ int pos = 0-->Line_7 $$ pos = _apiDirName.length() + 1[ FD ]
Line_3 $$ int pos = 0-->Line_5 $$ pos = _implDirName.length() + 1[ FD ]
Line_2 $$ private JavaClass _getJavaClass(String fileName) throws IOException -->Line_4 $$ if (fileName.startsWith(_implDirName)) [ FD ]
Line_3 $$ int pos = 0-->Line_11 $$ String fullyQualifiedClassName = StringUtil.replace(fileName.substring(pos, fileName.length() - 5), new String[] [ FD ]
Line_13 $$ if (javaClass == null) -->Line_17 $$ File file = new File(fileName)[ CD ]
Line_13 $$ if (javaClass == null) -->Line_22 $$ javaClass = builder.getClassByName(fullyQualifiedClassName)[ CD ]
Line_4 $$ if (fileName.startsWith(_implDirName)) -->Line_6 $$ if (fileName.startsWith(_apiDirName)) [ CD ]
Line_22 $$ javaClass = builder.getClassByName(fullyQualifiedClassName)-->Line_23 $$ _javaClasses.put(fullyQualifiedClassName, javaClass)[ FD ]
Line_6 $$ if (fileName.startsWith(_apiDirName)) -->Line_9 $$ return null[ CD ]
Line_13 $$ if (javaClass == null) -->Line_14 $$ ClassLibrary classLibrary = new ClassLibrary()[ CD ]
Line_13 $$ if (javaClass == null) -->Line_21 $$ builder.addSource(file)[ CD ]
Line_16 $$ JavaDocBuilder builder = new JavaDocBuilder(classLibrary)-->Line_22 $$ javaClass = builder.getClassByName(fullyQualifiedClassName)[ FD ]
Line_12 $$ JavaClass javaClass = _javaClasses.get(fullyQualifiedClassName)-->Line_13 $$ if (javaClass == null) [ FD ]
Line_16 $$ JavaDocBuilder builder = new JavaDocBuilder(classLibrary)-->Line_21 $$ builder.addSource(file)[ FD ]
Line_13 $$ if (javaClass == null) -->Line_15 $$ classLibrary.addClassLoader(getClass().getClassLoader())[ CD ]
