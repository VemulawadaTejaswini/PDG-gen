Line_2 $$ public void configureBean(Object beanInstance) -->Line_16 $$ Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())[ FD ]
Line_14 $$ if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) -->Line_19 $$ Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())[ CD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_3 $$ if (this.beanFactory == null) [ CD ]
Line_14 $$ if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) -->Line_16 $$ Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())[ CD ]
Line_4 $$ if (logger.isDebugEnabled()) -->Line_5 $$ logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " + "Make sure this configurer runs in a Spring container. Unable to configure bean of type [" + ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")[ CD ]
Line_3 $$ if (this.beanFactory == null) -->Line_4 $$ if (logger.isDebugEnabled()) [ CD ]
Line_14 $$ if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) -->Line_20 $$ checkExposedObject(result, beanInstance)[ CD ]
Line_10 $$ if (bwi == null) -->Line_11 $$ return[ CD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_9 $$ BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)[ CD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_5 $$ logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " + "Make sure this configurer runs in a Spring container. Unable to configure bean of type [" + ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.")[ FD ]
Line_14 $$ if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) -->Line_17 $$ checkExposedObject(result, beanInstance)[ CD ]
Line_26 $$ if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) -->Line_27 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_9 $$ BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)[ FD ]
Line_14 $$ if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) -->Line_15 $$ this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())[ CD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_28 $$ logger.debug("Failed to create target bean '" + bce.getBeanName() + "' while configuring object of type [" + beanInstance.getClass().getName() + "] - probably due to a circular reference. This is a common startup situation " + "and usually not fatal. Proceeding without injection. Original exception: " + ex)[ FD ]
Line_26 $$ if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) -->Line_30 $$ return[ CD ]
Line_9 $$ BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)-->Line_10 $$ if (bwi == null) [ FD ]
Line_9 $$ BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)-->Line_19 $$ Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())[ FD ]
Line_24 $$ if (rootCause instanceof BeanCurrentlyInCreationException) -->Line_25 $$ BeanCreationException bce = (BeanCreationException) rootCause[ CD ]
Line_9 $$ BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)-->Line_15 $$ this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())[ FD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_20 $$ checkExposedObject(result, beanInstance)[ FD ]
Line_16 $$ Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())-->Line_17 $$ checkExposedObject(result, beanInstance)[ FD ]
Line_23 $$ Throwable rootCause = ex.getMostSpecificCause()-->Line_24 $$ if (rootCause instanceof BeanCurrentlyInCreationException) [ FD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_10 $$ if (bwi == null) [ CD ]
Line_25 $$ BeanCreationException bce = (BeanCreationException) rootCause-->Line_28 $$ logger.debug("Failed to create target bean '" + bce.getBeanName() + "' while configuring object of type [" + beanInstance.getClass().getName() + "] - probably due to a circular reference. This is a common startup situation " + "and usually not fatal. Proceeding without injection. Original exception: " + ex)[ FD ]
Line_25 $$ BeanCreationException bce = (BeanCreationException) rootCause-->Line_26 $$ if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) [ FD ]
Line_27 $$ if (logger.isDebugEnabled()) -->Line_28 $$ logger.debug("Failed to create target bean '" + bce.getBeanName() + "' while configuring object of type [" + beanInstance.getClass().getName() + "] - probably due to a circular reference. This is a common startup situation " + "and usually not fatal. Proceeding without injection. Original exception: " + ex)[ CD ]
Line_24 $$ if (rootCause instanceof BeanCurrentlyInCreationException) -->Line_26 $$ if (this.beanFactory.isCurrentlyInCreation(bce.getBeanName())) [ CD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_15 $$ this.beanFactory.autowireBeanProperties(beanInstance, bwi.getAutowireMode(), bwi.getDependencyCheck())[ FD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_17 $$ checkExposedObject(result, beanInstance)[ FD ]
Line_2 $$ public void configureBean(Object beanInstance) -->Line_19 $$ Object result = this.beanFactory.configureBean(beanInstance, bwi.getBeanName())[ FD ]
Line_9 $$ BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)-->Line_14 $$ if (bwi.indicatesAutowiring() || (bwi.isDefaultBeanName() && !this.beanFactory.containsBean(bwi.getBeanName()))) [ FD ]
Line_16 $$ Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())-->Line_20 $$ checkExposedObject(result, beanInstance)[ FD ]
Line_9 $$ BeanWiringInfo bwi = this.beanWiringInfoResolver.resolveWiringInfo(beanInstance)-->Line_16 $$ Object result = this.beanFactory.initializeBean(beanInstance, bwi.getBeanName())[ FD ]
Line_3 $$ if (this.beanFactory == null) -->Line_7 $$ return[ CD ]
