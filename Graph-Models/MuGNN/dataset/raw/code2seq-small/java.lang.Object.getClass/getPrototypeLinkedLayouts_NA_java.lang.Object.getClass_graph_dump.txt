Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_5 $$ Property groupIdProperty = PropertyFactoryUtil.forName("groupId")[ CD ]
Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(Layout.class, clazz.getClassLoader())-->Line_10 $$ dynamicQuery.add(privateLayoutProperty.eq(privateLayout))[ FD ]
Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(Layout.class, clazz.getClassLoader())-->Line_13 $$ return LayoutLocalServiceUtil.dynamicQuery(dynamicQuery)[ FD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_13 $$ return LayoutLocalServiceUtil.dynamicQuery(dynamicQuery)[ CD ]
Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(Layout.class, clazz.getClassLoader())-->Line_8 $$ dynamicQuery.add(layoutPrototypeUuidProperty.isNotNull())[ FD ]
Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(Layout.class, clazz.getClassLoader())-->Line_12 $$ dynamicQuery.add(sourcePrototypeLayoutUuidProperty.isNotNull())[ FD ]
Line_11 $$ Property sourcePrototypeLayoutUuidProperty = PropertyFactoryUtil.forName("sourcePrototypeLayoutUuid")-->Line_12 $$ dynamicQuery.add(sourcePrototypeLayoutUuidProperty.isNotNull())[ FD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_10 $$ dynamicQuery.add(privateLayoutProperty.eq(privateLayout))[ CD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(Layout.class, clazz.getClassLoader())[ CD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_10 $$ dynamicQuery.add(privateLayoutProperty.eq(privateLayout))[ FD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_11 $$ Property sourcePrototypeLayoutUuidProperty = PropertyFactoryUtil.forName("sourcePrototypeLayoutUuid")[ CD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_6 $$ dynamicQuery.add(groupIdProperty.eq(groupId))[ CD ]
Line_7 $$ Property layoutPrototypeUuidProperty = PropertyFactoryUtil.forName("layoutPrototypeUuid")-->Line_8 $$ dynamicQuery.add(layoutPrototypeUuidProperty.isNotNull())[ FD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_7 $$ Property layoutPrototypeUuidProperty = PropertyFactoryUtil.forName("layoutPrototypeUuid")[ CD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_8 $$ dynamicQuery.add(layoutPrototypeUuidProperty.isNotNull())[ CD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_6 $$ dynamicQuery.add(groupIdProperty.eq(groupId))[ FD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_9 $$ Property privateLayoutProperty = PropertyFactoryUtil.forName("privateLayout")[ CD ]
Line_9 $$ Property privateLayoutProperty = PropertyFactoryUtil.forName("privateLayout")-->Line_10 $$ dynamicQuery.add(privateLayoutProperty.eq(privateLayout))[ FD ]
Line_3 $$ Class<?> clazz = getClass()-->Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(Layout.class, clazz.getClassLoader())[ FD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_12 $$ dynamicQuery.add(sourcePrototypeLayoutUuidProperty.isNotNull())[ CD ]
Line_4 $$ DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(Layout.class, clazz.getClassLoader())-->Line_6 $$ dynamicQuery.add(groupIdProperty.eq(groupId))[ FD ]
Line_2 $$ protected List<Layout> getPrototypeLinkedLayouts(long groupId, boolean privateLayout) -->Line_3 $$ Class<?> clazz = getClass()[ CD ]
Line_5 $$ Property groupIdProperty = PropertyFactoryUtil.forName("groupId")-->Line_6 $$ dynamicQuery.add(groupIdProperty.eq(groupId))[ FD ]
