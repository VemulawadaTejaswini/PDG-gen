Line_3 $$ Resource responseBody = new ClassPathResource("ludwig.json", this.getClass())-->Line_4 $$ this.mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON))[ FD ]
Line_2 $$ public void performGetWithResponseBodyFromFile() throws Exception -->Line_3 $$ Resource responseBody = new ClassPathResource("ludwig.json", this.getClass())[ CD ]
Line_2 $$ public void performGetWithResponseBodyFromFile() throws Exception -->Line_6 $$ this.mockServer.verify()[ CD ]
Line_2 $$ public void performGetWithResponseBodyFromFile() throws Exception -->Line_5 $$ ListenableFuture<ResponseEntity<Person>> ludwig = restTemplate.getForEntity("/composers/[ CD ]
Line_2 $$ public void performGetWithResponseBodyFromFile() throws Exception -->Line_4 $$ this.mockServer.expect(requestTo("/composers/42")).andExpect(method(HttpMethod.GET)).andRespond(withSuccess(responseBody, MediaType.APPLICATION_JSON))[ CD ]
