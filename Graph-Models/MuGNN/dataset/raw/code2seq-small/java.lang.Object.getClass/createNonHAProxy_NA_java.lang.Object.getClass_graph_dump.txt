Line_15 $$ if (xface == RefreshAuthorizationPolicyProtocol.class) -->Line_17 $$ if (xface == RefreshCallQueueProtocol.class) [ CD ]
Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)-->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ FD ]
Line_17 $$ if (xface == RefreshCallQueueProtocol.class) -->Line_21 $$ LOG.error(message)[ CD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_4 $$ T proxy[ CD ]
Line_4 $$ T proxy-->Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)[ FD ]
Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)-->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ FD ]
Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)-->Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_20 $$ String message = "Unsupported protocol found when creating the proxy " + "connection to NameNode: " + ((xface != null) ? xface.getClass().getName() : "null")-->Line_21 $$ LOG.error(message)[ FD ]
Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)-->Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)[ FD ]
Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)-->Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_11 $$ if (xface == GetUserMappingsProtocol.class) [ FD ]
Line_17 $$ if (xface == RefreshCallQueueProtocol.class) -->Line_20 $$ String message = "Unsupported protocol found when creating the proxy " + "connection to NameNode: " + ((xface != null) ? xface.getClass().getName() : "null")[ CD ]
Line_7 $$ if (xface == JournalProtocol.class) -->Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)[ CD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_9 $$ if (xface == NamenodeProtocol.class) [ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)[ FD ]
Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)-->Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_17 $$ if (xface == RefreshCallQueueProtocol.class) -->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ CD ]
Line_4 $$ T proxy-->Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)[ FD ]
Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)-->Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)[ FD ]
Line_11 $$ if (xface == GetUserMappingsProtocol.class) -->Line_13 $$ if (xface == RefreshUserMappingsProtocol.class) [ CD ]
Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)-->Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_5 $$ if (xface == ClientProtocol.class) [ CD ]
Line_11 $$ if (xface == GetUserMappingsProtocol.class) -->Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)[ CD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_17 $$ if (xface == RefreshCallQueueProtocol.class) [ FD ]
Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)-->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_13 $$ if (xface == RefreshUserMappingsProtocol.class) [ FD ]
Line_4 $$ T proxy-->Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_4 $$ T proxy-->Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_7 $$ if (xface == JournalProtocol.class) [ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_3 $$ Text dtService = SecurityUtil.buildTokenService(nnAddr)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)[ FD ]
Line_4 $$ T proxy-->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ FD ]
Line_15 $$ if (xface == RefreshAuthorizationPolicyProtocol.class) -->Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)[ CD ]
Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)-->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ FD ]
Line_4 $$ T proxy-->Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)-->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ FD ]
Line_5 $$ if (xface == ClientProtocol.class) -->Line_7 $$ if (xface == JournalProtocol.class) [ CD ]
Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)-->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ FD ]
Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)-->Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)[ FD ]
Line_9 $$ if (xface == NamenodeProtocol.class) -->Line_11 $$ if (xface == GetUserMappingsProtocol.class) [ CD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_20 $$ String message = "Unsupported protocol found when creating the proxy " + "connection to NameNode: " + ((xface != null) ? xface.getClass().getName() : "null")[ FD ]
Line_13 $$ if (xface == RefreshUserMappingsProtocol.class) -->Line_15 $$ if (xface == RefreshAuthorizationPolicyProtocol.class) [ CD ]
Line_9 $$ if (xface == NamenodeProtocol.class) -->Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)[ CD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_15 $$ if (xface == RefreshAuthorizationPolicyProtocol.class) [ FD ]
Line_7 $$ if (xface == JournalProtocol.class) -->Line_9 $$ if (xface == NamenodeProtocol.class) [ CD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_5 $$ if (xface == ClientProtocol.class) [ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_3 $$ Text dtService = SecurityUtil.buildTokenService(nnAddr)[ CD ]
Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)-->Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)[ FD ]
Line_13 $$ if (xface == RefreshUserMappingsProtocol.class) -->Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)[ CD ]
Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)-->Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)-->Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_24 $$ return new ProxyAndInfo<T>(proxy, dtService, nnAddr)[ CD ]
Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)-->Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_5 $$ if (xface == ClientProtocol.class) -->Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)[ CD ]
Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)-->Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)[ FD ]
Line_10 $$ proxy = (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi, withRetries)-->Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
Line_6 $$ proxy = (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi, withRetries)-->Line_8 $$ proxy = (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi)[ FD ]
Line_2 $$ public static <T> ProxyAndInfo<T> createNonHAProxy(Configuration conf, InetSocketAddress nnAddr, Class<T> xface, UserGroupInformation ugi, boolean withRetries) throws IOException -->Line_18 $$ proxy = (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi)[ FD ]
Line_4 $$ T proxy-->Line_16 $$ proxy = (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr, conf, ugi)[ FD ]
Line_12 $$ proxy = (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi)-->Line_14 $$ proxy = (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi)[ FD ]
