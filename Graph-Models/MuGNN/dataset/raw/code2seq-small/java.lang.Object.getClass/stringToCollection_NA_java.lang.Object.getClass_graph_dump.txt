Line_2 $$ public void stringToCollection() throws Exception -->Line_3 $$ List<List<String>> list = new ArrayList<List<String>>()[ CD ]
Line_10 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)-->Line_13 $$ List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType)[ FD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_10 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)[ CD ]
Line_11 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("objectToCollection"))-->Line_13 $$ List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType)[ FD ]
Line_11 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("objectToCollection"))-->Line_12 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_5 $$ list.add(Arrays.asList("37,23"))[ CD ]
Line_13 $$ List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType)-->Line_15 $$ assertEquals((Integer) 12, result.get(0).get(0).get(1))[ FD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_13 $$ List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType)[ CD ]
Line_13 $$ List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType)-->Line_14 $$ assertEquals((Integer) 9, result.get(0).get(0).get(0))[ FD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_6 $$ conversionService.addConverterFactory(new StringToNumberConverterFactory())[ CD ]
Line_13 $$ List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType)-->Line_17 $$ assertEquals((Integer) 23, result.get(1).get(0).get(1))[ FD ]
Line_10 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)-->Line_12 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ FD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_14 $$ assertEquals((Integer) 9, result.get(0).get(0).get(0))[ CD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_4 $$ list.add(Arrays.asList("9,12"))[ CD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_8 $$ conversionService.addConverter(new ObjectToCollectionConverter(conversionService))[ CD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_11 $$ TypeDescriptor targetType = new TypeDescriptor(getClass().getField("objectToCollection"))[ CD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_16 $$ assertEquals((Integer) 37, result.get(1).get(0).get(0))[ CD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_12 $$ assertTrue(conversionService.canConvert(sourceType, targetType))[ CD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_17 $$ assertEquals((Integer) 23, result.get(1).get(0).get(1))[ CD ]
Line_3 $$ List<List<String>> list = new ArrayList<List<String>>()-->Line_4 $$ list.add(Arrays.asList("9,12"))[ FD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_15 $$ assertEquals((Integer) 12, result.get(0).get(0).get(1))[ CD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_9 $$ conversionService.addConverter(new CollectionToObjectConverter(conversionService))[ CD ]
Line_13 $$ List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType)-->Line_16 $$ assertEquals((Integer) 37, result.get(1).get(0).get(0))[ FD ]
Line_2 $$ public void stringToCollection() throws Exception -->Line_7 $$ conversionService.addConverter(new StringToCollectionConverter(conversionService))[ CD ]
Line_3 $$ List<List<String>> list = new ArrayList<List<String>>()-->Line_5 $$ list.add(Arrays.asList("37,23"))[ FD ]
Line_3 $$ List<List<String>> list = new ArrayList<List<String>>()-->Line_10 $$ TypeDescriptor sourceType = TypeDescriptor.forObject(list)[ FD ]
Line_3 $$ List<List<String>> list = new ArrayList<List<String>>()-->Line_13 $$ List<List<List<Integer>>> result = (List<List<List<Integer>>>) conversionService.convert(list, sourceType, targetType)[ FD ]
