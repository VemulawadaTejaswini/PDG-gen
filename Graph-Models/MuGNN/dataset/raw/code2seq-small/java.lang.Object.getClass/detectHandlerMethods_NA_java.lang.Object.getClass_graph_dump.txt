Line_5 $$ Map<Method, T> methods = MethodIntrospector.selectMethods(userType, new MethodIntrospector.MetadataLookup<T>() -->Line_11 $$ logger.debug(methods.size() + " request handler methods found on " + userType + ": " + methods)[ FD ]
Line_2 $$ protected void detectHandlerMethods(final Object handler) -->Line_3 $$ Class<?> handlerType = (handler instanceof String ? getApplicationContext().getType((String) handler) : handler.getClass())[ FD ]
Line_2 $$ protected void detectHandlerMethods(final Object handler) -->Line_5 $$ Map<Method, T> methods = MethodIntrospector.selectMethods(userType, new MethodIntrospector.MetadataLookup<T>() [ CD ]
Line_3 $$ Class<?> handlerType = (handler instanceof String ? getApplicationContext().getType((String) handler) : handler.getClass())-->Line_4 $$ final Class<?> userType = ClassUtils.getUserClass(handlerType)[ FD ]
Line_5 $$ Map<Method, T> methods = MethodIntrospector.selectMethods(userType, new MethodIntrospector.MetadataLookup<T>() -->Line_7 $$ return getMappingForMethod(method, userType)[ FD ]
Line_10 $$ if (logger.isDebugEnabled()) -->Line_11 $$ logger.debug(methods.size() + " request handler methods found on " + userType + ": " + methods)[ CD ]
Line_2 $$ protected void detectHandlerMethods(final Object handler) -->Line_14 $$ registerHandlerMethod(handler, entry.getKey(), entry.getValue())[ FD ]
Line_4 $$ final Class<?> userType = ClassUtils.getUserClass(handlerType)-->Line_7 $$ return getMappingForMethod(method, userType)[ FD ]
Line_2 $$ protected void detectHandlerMethods(final Object handler) -->Line_4 $$ final Class<?> userType = ClassUtils.getUserClass(handlerType)[ CD ]
Line_5 $$ Map<Method, T> methods = MethodIntrospector.selectMethods(userType, new MethodIntrospector.MetadataLookup<T>() -->Line_13 $$ for (Map.Entry<Method, T> entry : methods.entrySet()) [ FD ]
Line_5 $$ Map<Method, T> methods = MethodIntrospector.selectMethods(userType, new MethodIntrospector.MetadataLookup<T>() -->Line_7 $$ return getMappingForMethod(method, userType)[ CD ]
Line_2 $$ protected void detectHandlerMethods(final Object handler) -->Line_10 $$ if (logger.isDebugEnabled()) [ CD ]
Line_2 $$ protected void detectHandlerMethods(final Object handler) -->Line_3 $$ Class<?> handlerType = (handler instanceof String ? getApplicationContext().getType((String) handler) : handler.getClass())[ CD ]
Line_4 $$ final Class<?> userType = ClassUtils.getUserClass(handlerType)-->Line_5 $$ Map<Method, T> methods = MethodIntrospector.selectMethods(userType, new MethodIntrospector.MetadataLookup<T>() [ FD ]
