Line_4 $$ if (object.getClass() == javaUtilOptionalClass) -->Line_5 $$ this.object = OptionalUnwrapper.unwrap(object)[ CD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_9 $$ this.nestedPath = (nestedPath != null ? nestedPath : "")[ CD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_4 $$ if (object.getClass() == javaUtilOptionalClass) [ FD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_11 $$ this.nestedPropertyAccessors = null[ CD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_4 $$ if (object.getClass() == javaUtilOptionalClass) [ CD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_5 $$ this.object = OptionalUnwrapper.unwrap(object)[ FD ]
Line_4 $$ if (object.getClass() == javaUtilOptionalClass) -->Line_7 $$ this.object = object[ CD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_10 $$ this.rootObject = (!"".equals(this.nestedPath) ? rootObject : this.object)[ CD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_12 $$ this.typeConverterDelegate = new TypeConverterDelegate(this, this.object)[ CD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_7 $$ this.object = object[ FD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_3 $$ Assert.notNull(object, "Target object must not be null")[ CD ]
Line_2 $$ public void setWrappedInstance(Object object, String nestedPath, Object rootObject) -->Line_3 $$ Assert.notNull(object, "Target object must not be null")[ FD ]
