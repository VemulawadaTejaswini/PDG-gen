Line_25 $$ attribute.set(new AsyncBroker<Long, String>() -->Line_28 $$ return new DefaultNoticeableFuture()[ CD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_25 $$ attribute.set(new AsyncBroker<Long, String>() [ CD ]
Line_23 $$ Attribute<AsyncBroker<Long, String>> attribute = _embeddedChannel.attr(ReflectionTestUtil.<AttributeKey<AsyncBroker<Long, String>>>getFieldValue(NettyChannelAttributes.class, "_asyncBrokerKey"))-->Line_25 $$ attribute.set(new AsyncBroker<Long, String>() [ FD ]
Line_24 $$ final AtomicLong keyRef = new AtomicLong()-->Line_36 $$ Assert.assertEquals("Unable to place exception because no future exists with ID " + keyRef.get(), logRecord.getMessage())[ FD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_14 $$ _embeddedChannel.close()[ CD ]
Line_24 $$ final AtomicLong keyRef = new AtomicLong()-->Line_27 $$ keyRef.set(key)[ FD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_3 $$ ProcessException testException = new ProcessException("message")[ CD ]
Line_11 $$ Throwable throwable = ee.getCause()-->Line_38 $$ Assert.assertSame(ClosedChannelException.class, throwable.getClass())[ FD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_5 $$ _embeddedChannel.writeInbound(_embeddedChannel.readOutbound())[ CD ]
Line_25 $$ attribute.set(new AsyncBroker<Long, String>() -->Line_27 $$ keyRef.set(key)[ CD ]
Line_11 $$ Throwable throwable = ee.getCause()-->Line_12 $$ Assert.assertSame(testException, throwable)[ FD ]
Line_25 $$ attribute.set(new AsyncBroker<Long, String>() -->Line_27 $$ keyRef.set(key)[ FD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_23 $$ Attribute<AsyncBroker<Long, String>> attribute = _embeddedChannel.attr(ReflectionTestUtil.<AttributeKey<AsyncBroker<Long, String>>>getFieldValue(NettyChannelAttributes.class, "_asyncBrokerKey"))[ CD ]
Line_3 $$ ProcessException testException = new ProcessException("message")-->Line_12 $$ Assert.assertSame(testException, throwable)[ FD ]
Line_15 $$ Future<String> channelFailureFuture = RPCUtil.execute(_embeddedChannel, new ResultRPCCallable(StringPool.BLANK))-->Line_17 $$ channelFailureFuture.get()[ FD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_24 $$ final AtomicLong keyRef = new AtomicLong()[ CD ]
Line_11 $$ Throwable throwable = ee.getCause()-->Line_21 $$ Assert.assertSame(ClosedChannelException.class, throwable.getClass())[ FD ]
Line_4 $$ Future<Serializable> future = RPCUtil.execute(_embeddedChannel, new ExceptionRPCCallable(testException))-->Line_8 $$ future.get()[ FD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_15 $$ Future<String> channelFailureFuture = RPCUtil.execute(_embeddedChannel, new ResultRPCCallable(StringPool.BLANK))[ CD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_6 $$ _embeddedChannel.writeInbound(_embeddedChannel.readOutbound())[ CD ]
Line_2 $$ public void testRPCWithException() throws Exception -->Line_4 $$ Future<Serializable> future = RPCUtil.execute(_embeddedChannel, new ExceptionRPCCallable(testException))[ CD ]
