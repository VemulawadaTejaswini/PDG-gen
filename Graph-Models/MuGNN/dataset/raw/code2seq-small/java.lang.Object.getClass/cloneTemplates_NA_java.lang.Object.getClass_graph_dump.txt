Line_3 $$ List<V> result = new ArrayList<V>(templates.size())-->Line_8 $$ result.add(clone)[ FD ]
Line_7 $$ V clone = (V) new ConstructorInjectionComponentAdapter(aClass.getName(), aClass).getComponentInstance(container)-->Line_8 $$ result.add(clone)[ FD ]
Line_2 $$ private List<V> cloneTemplates(@NotNull Collection<V> templates) -->Line_10 $$ return result[ CD ]
Line_4 $$ PicoContainer container = ApplicationManager.getApplication().getPicoContainer()-->Line_7 $$ V clone = (V) new ConstructorInjectionComponentAdapter(aClass.getName(), aClass).getComponentInstance(container)[ FD ]
Line_2 $$ private List<V> cloneTemplates(@NotNull Collection<V> templates) -->Line_4 $$ PicoContainer container = ApplicationManager.getApplication().getPicoContainer()[ CD ]
Line_5 $$ for (V template : templates) -->Line_6 $$ Class<? extends V> aClass = (Class<? extends V>) template.getClass()[ FD ]
Line_2 $$ private List<V> cloneTemplates(@NotNull Collection<V> templates) -->Line_3 $$ List<V> result = new ArrayList<V>(templates.size())[ FD ]
Line_2 $$ private List<V> cloneTemplates(@NotNull Collection<V> templates) -->Line_3 $$ List<V> result = new ArrayList<V>(templates.size())[ CD ]
Line_6 $$ Class<? extends V> aClass = (Class<? extends V>) template.getClass()-->Line_7 $$ V clone = (V) new ConstructorInjectionComponentAdapter(aClass.getName(), aClass).getComponentInstance(container)[ FD ]
