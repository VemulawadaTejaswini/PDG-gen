Line_10 $$ Class<?> featureClass = getBeanClassLoader().loadClass((String) feature)-->Line_11 $$ return (WebServiceFeature) BeanUtils.instantiate(featureClass)[ FD ]
Line_2 $$ private WebServiceFeature convertWebServiceFeature(Object feature) -->Line_3 $$ Assert.notNull(feature, "WebServiceFeature specification object must not be null")[ FD ]
Line_4 $$ if (feature instanceof WebServiceFeature) -->Line_6 $$ if (feature instanceof Class) [ CD ]
Line_4 $$ if (feature instanceof WebServiceFeature) -->Line_5 $$ return (WebServiceFeature) feature[ CD ]
Line_2 $$ private WebServiceFeature convertWebServiceFeature(Object feature) -->Line_6 $$ if (feature instanceof Class) [ FD ]
Line_2 $$ private WebServiceFeature convertWebServiceFeature(Object feature) -->Line_8 $$ if (feature instanceof String) [ FD ]
Line_2 $$ private WebServiceFeature convertWebServiceFeature(Object feature) -->Line_4 $$ if (feature instanceof WebServiceFeature) [ CD ]
Line_6 $$ if (feature instanceof Class) -->Line_8 $$ if (feature instanceof String) [ CD ]
Line_2 $$ private WebServiceFeature convertWebServiceFeature(Object feature) -->Line_4 $$ if (feature instanceof WebServiceFeature) [ FD ]
Line_2 $$ private WebServiceFeature convertWebServiceFeature(Object feature) -->Line_3 $$ Assert.notNull(feature, "WebServiceFeature specification object must not be null")[ CD ]
Line_2 $$ private WebServiceFeature convertWebServiceFeature(Object feature) -->Line_16 $$ throw new IllegalArgumentException("Unknown WebServiceFeature specification type: " + feature.getClass())[ FD ]
Line_6 $$ if (feature instanceof Class) -->Line_7 $$ return (WebServiceFeature) BeanUtils.instantiate((Class<?>) feature)[ CD ]
