Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_59 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 4)[ FD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 11264)-->Line_49 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_21 $$ return new MyContainerAllocator(rm, appAttemptId, context)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_61 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_35 $$ allocator.schedule()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_46 $$ Assert.assertEquals(0.05f, job.getProgress(), 0.001f)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_51 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_14 $$ rm.sendAMLaunched(appAttemptId)[ CD ]
Line_13 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()-->Line_14 $$ rm.sendAMLaunched(appAttemptId)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_50 $$ allocator.schedule()[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_25 $$ mrApp.submit(conf)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_24 $$ Assert.assertEquals(0.0, rmApp.getProgress(), 0.0)[ CD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 11264)-->Line_11 $$ amNodeManager.nodeHeartbeat(true)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_36 $$ rmDispatcher.await()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_12 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_45 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_59 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 4)[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_8 $$ RMApp rmApp = rm.submitApp(1024)[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_62 $$ Assert.assertEquals(0.95f, job.getProgress(), 0.001f)[ CD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_8 $$ RMApp rmApp = rm.submitApp(1024)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_27 $$ DrainDispatcher amDispatcher = (DrainDispatcher) mrApp.getDispatcher()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_25 $$ mrApp.submit(conf)[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_63 $$ Assert.assertEquals(0.95f, rmApp.getProgress(), 0.001f)[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_12 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_51 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_58 $$ Assert.assertEquals(0.59f, rmApp.getProgress(), 0.001f)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_13 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_58 $$ Assert.assertEquals(0.59f, rmApp.getProgress(), 0.001f)[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_24 $$ Assert.assertEquals(0.0, rmApp.getProgress(), 0.0)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_18 $$ return new DrainDispatcher()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_54 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 5)[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_53 $$ Assert.assertEquals(0.14f, rmApp.getProgress(), 0.001f)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_60 $$ allocator.schedule()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_38 $$ rmDispatcher.await()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_45 $$ rmDispatcher.await()[ FD ]
Line_13 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()-->Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) [ FD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_6 $$ rm.start()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_40 $$ rmDispatcher.await()[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_54 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 5)[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_25 $$ mrApp.submit(conf)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_42 $$ mrApp.waitForState(t, TaskState.RUNNING)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_55 $$ allocator.schedule()[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_13 $$ final ApplicationAttemptId appAttemptId = rmApp.getCurrentAppAttempt().getAppAttemptId()[ FD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_53 $$ Assert.assertEquals(0.14f, rmApp.getProgress(), 0.001f)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_15 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_61 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_52 $$ Assert.assertEquals(0.14f, job.getProgress(), 0.001f)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_54 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 5)[ FD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_14 $$ rm.sendAMLaunched(appAttemptId)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_59 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 4)[ FD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_63 $$ Assert.assertEquals(0.95f, rmApp.getProgress(), 0.001f)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_57 $$ Assert.assertEquals(0.59f, job.getProgress(), 0.001f)[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_26 $$ Job job = mrApp.getContext().getAllJobs().entrySet().iterator().next().getValue()[ CD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 11264)-->Line_59 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 4)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_9 $$ rmDispatcher.await()[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_32 $$ mrApp.waitForInternalState((TaskAttemptImpl) t.getAttempts().values().iterator().next(), TaskAttemptStateInternal.UNASSIGNED)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_49 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1)[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) [ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_56 $$ rmDispatcher.await()[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_49 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1)[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_38 $$ rmDispatcher.await()[ FD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 11264)-->Line_54 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 5)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_47 $$ Assert.assertEquals(0.05f, rmApp.getProgress(), 0.001f)[ CD ]
Line_8 $$ RMApp rmApp = rm.submitApp(1024)-->Line_47 $$ Assert.assertEquals(0.05f, rmApp.getProgress(), 0.001f)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_28 $$ MyContainerAllocator allocator = (MyContainerAllocator) mrApp.getContainerAllocator()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_6 $$ rm.start()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_9 $$ rmDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_3 $$ LOG.info("Running testReportedAppProgressWithOnlyMaps")[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_34 $$ amDispatcher.await()[ CD ]
Line_5 $$ final MyResourceManager rm = new MyResourceManager(conf)-->Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 11264)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_11 $$ amNodeManager.nodeHeartbeat(true)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_36 $$ rmDispatcher.await()[ FD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_56 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 11264)[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_30 $$ amDispatcher.await()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_29 $$ mrApp.waitForInternalState((JobImpl) job, JobStateInternal.RUNNING)[ CD ]
Line_7 $$ DrainDispatcher rmDispatcher = (DrainDispatcher) rm.getRMContext().getDispatcher()-->Line_40 $$ rmDispatcher.await()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_44 $$ allocator.schedule()[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_26 $$ Job job = mrApp.getContext().getAllJobs().entrySet().iterator().next().getValue()[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_37 $$ amNodeManager.nodeHeartbeat(true)[ CD ]
Line_10 $$ MockNM amNodeManager = rm.registerNode("amNM:1234", 11264)-->Line_37 $$ amNodeManager.nodeHeartbeat(true)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_39 $$ allocator.schedule()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_48 $$ Iterator<Task> it = job.getTasks().values().iterator()[ CD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_49 $$ finishNextNTasks(rmDispatcher, amNodeManager, mrApp, it, 1)[ FD ]
Line_16 $$ MRApp mrApp = new MRApp(appAttemptId, ContainerId.newInstance(appAttemptId, 0), 10, 0, false, this.getClass().getName(), true, 1) -->Line_29 $$ mrApp.waitForInternalState((JobImpl) job, JobStateInternal.RUNNING)[ FD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_4 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ public void testReportedAppProgressWithOnlyMaps() throws Exception -->Line_15 $$ rmDispatcher.await()[ CD ]
