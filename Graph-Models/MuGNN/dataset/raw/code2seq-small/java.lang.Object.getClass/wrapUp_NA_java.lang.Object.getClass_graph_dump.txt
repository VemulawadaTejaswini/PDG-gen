Line_31 $$ if (MappedSuperclass.class.isAssignableFrom(mapping.getClass())) -->Line_33 $$ LOG.trace("Starting mapped superclass [" + safeMapping.getMappedClass().getName() + "]")[ CD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_23 $$ jpa2Mapping.getBuilder().addAttribute(attribute)[ FD ]
Line_44 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)-->Line_46 $$ jpa2Mapping.getBuilder().addAttribute(attribute)[ FD ]
Line_13 $$ while (properties.hasNext()) -->Line_15 $$ if (property.getValue() == safeMapping.getIdentifierMapper()) [ CD ]
Line_14 $$ final Property property = properties.next()-->Line_15 $$ if (property.getValue() == safeMapping.getIdentifierMapper()) [ FD ]
Line_21 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)-->Line_46 $$ jpa2Mapping.getBuilder().addAttribute(attribute)[ FD ]
Line_22 $$ if (attribute != null) -->Line_23 $$ jpa2Mapping.getBuilder().addAttribute(attribute)[ CD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_18 $$ if (safeMapping.isVersioned() && property == safeMapping.getVersion()) [ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_41 $$ if (safeMapping.isVersioned() && property == safeMapping.getVersion()) [ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_11 $$ applyVersionAttribute(safeMapping, jpa2Mapping)[ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_37 $$ applyVersionAttribute(safeMapping, jpa2Mapping)[ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_29 $$ LOG.trace("Completed entity [" + safeMapping.getEntityName() + "]")[ FD ]
Line_13 $$ while (properties.hasNext()) -->Line_14 $$ final Property property = properties.next()[ CD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_10 $$ applyIdMetadata(safeMapping, jpa2Mapping)[ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_27 $$ populateStaticMetamodel(jpa2Mapping)[ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_38 $$ Iterator<Property> properties = safeMapping.getDeclaredPropertyIterator()[ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_37 $$ applyVersionAttribute(safeMapping, jpa2Mapping)[ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)[ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_26 $$ jpa2Mapping.lock()[ FD ]
Line_4 $$ for (Object mapping : orderedMappings) -->Line_5 $$ if (PersistentClass.class.isAssignableFrom(mapping.getClass())) [ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_52 $$ LOG.trace("Completed mapped superclass [" + safeMapping.getMappedClass().getName() + "]")[ FD ]
Line_12 $$ Iterator<Property> properties = safeMapping.getDeclaredPropertyIterator()-->Line_40 $$ final Property property = properties.next()[ FD ]
Line_5 $$ if (PersistentClass.class.isAssignableFrom(mapping.getClass())) -->Line_7 $$ LOG.trace("Starting entity [" + safeMapping.getEntityName() + "]")[ CD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_12 $$ Iterator<Property> properties = safeMapping.getDeclaredPropertyIterator()[ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_21 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)[ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_10 $$ applyIdMetadata(safeMapping, jpa2Mapping)[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_45 $$ if (attribute != null) [ CD ]
Line_4 $$ for (Object mapping : orderedMappings) -->Line_31 $$ if (MappedSuperclass.class.isAssignableFrom(mapping.getClass())) [ FD ]
Line_12 $$ Iterator<Property> properties = safeMapping.getDeclaredPropertyIterator()-->Line_39 $$ while (properties.hasNext()) [ FD ]
Line_12 $$ Iterator<Property> properties = safeMapping.getDeclaredPropertyIterator()-->Line_14 $$ final Property property = properties.next()[ FD ]
Line_14 $$ final Property property = properties.next()-->Line_21 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_41 $$ if (safeMapping.isVersioned() && property == safeMapping.getVersion()) [ CD ]
Line_21 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)-->Line_45 $$ if (attribute != null) [ FD ]
Line_21 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)-->Line_22 $$ if (attribute != null) [ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_36 $$ applyIdMetadata(safeMapping, jpa2Mapping)[ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_46 $$ jpa2Mapping.getBuilder().addAttribute(attribute)[ FD ]
Line_21 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)-->Line_23 $$ jpa2Mapping.getBuilder().addAttribute(attribute)[ FD ]
Line_40 $$ final Property property = properties.next()-->Line_44 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)[ FD ]
Line_39 $$ while (properties.hasNext()) -->Line_44 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)[ CD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_50 $$ populateStaticMetamodel(jpa2Mapping)[ FD ]
Line_13 $$ while (properties.hasNext()) -->Line_21 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)[ CD ]
Line_2 $$ public void wrapUp() -->Line_3 $$ LOG.trace("Wrapping up metadata context...")[ CD ]
Line_13 $$ while (properties.hasNext()) -->Line_18 $$ if (safeMapping.isVersioned() && property == safeMapping.getVersion()) [ CD ]
Line_45 $$ if (attribute != null) -->Line_46 $$ jpa2Mapping.getBuilder().addAttribute(attribute)[ CD ]
Line_58 $$ for (EmbeddableTypeImpl embeddable : embeddables.values()) -->Line_59 $$ populateStaticMetamodel(embeddable)[ FD ]
Line_13 $$ while (properties.hasNext()) -->Line_22 $$ if (attribute != null) [ CD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_35 $$ final MappedSuperclassTypeImpl<?> jpa2Mapping = mappedSuperclassByMappedSuperclassMapping.get(safeMapping)[ FD ]
Line_14 $$ final Property property = properties.next()-->Line_44 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)[ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_49 $$ jpa2Mapping.lock()[ FD ]
Line_5 $$ if (PersistentClass.class.isAssignableFrom(mapping.getClass())) -->Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping[ CD ]
Line_12 $$ Iterator<Property> properties = safeMapping.getDeclaredPropertyIterator()-->Line_13 $$ while (properties.hasNext()) [ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_36 $$ applyIdMetadata(safeMapping, jpa2Mapping)[ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_15 $$ if (property.getValue() == safeMapping.getIdentifierMapper()) [ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_44 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)[ FD ]
Line_4 $$ for (Object mapping : orderedMappings) -->Line_55 $$ throw new AssertionFailure("Unexpected mapping type: " + mapping.getClass())[ FD ]
Line_5 $$ if (PersistentClass.class.isAssignableFrom(mapping.getClass())) -->Line_31 $$ if (MappedSuperclass.class.isAssignableFrom(mapping.getClass())) [ CD ]
Line_39 $$ while (properties.hasNext()) -->Line_40 $$ final Property property = properties.next()[ CD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_7 $$ LOG.trace("Starting entity [" + safeMapping.getEntityName() + "]")[ FD ]
Line_9 $$ final EntityTypeImpl<?> jpa2Mapping = entityTypesByPersistentClass.get(safeMapping)-->Line_11 $$ applyVersionAttribute(safeMapping, jpa2Mapping)[ FD ]
Line_44 $$ final Attribute attribute = attributeFactory.buildAttribute(jpa2Mapping, property)-->Line_45 $$ if (attribute != null) [ FD ]
Line_6 $$ final PersistentClass safeMapping = (PersistentClass) mapping-->Line_33 $$ LOG.trace("Starting mapped superclass [" + safeMapping.getMappedClass().getName() + "]")[ FD ]
