Line_6 $$ TestBean tbArg = new TestBean()-->Line_7 $$ tbArg.setName("arg1")[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_5 $$ reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()))[ CD ]
Line_8 $$ TestBean tbArg2 = new TestBean()-->Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_17 $$ assertEquals(fm2.getStringValue(), "testBeanOnlyPrototypeDISetterString")[ CD ]
Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)-->Line_18 $$ assertEquals(fm2.getStringValue(), fm2.getStringValue())[ FD ]
Line_21 $$ FactoryMethods fm3 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2, new Integer(1), "myName")-->Line_22 $$ assertEquals(1, fm3.getNum())[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)[ CD ]
Line_6 $$ TestBean tbArg = new TestBean()-->Line_25 $$ FactoryMethods fm4 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_9 $$ tbArg2.setName("arg2")[ CD ]
Line_25 $$ FactoryMethods fm4 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)-->Line_27 $$ assertEquals("default", fm4.getName())[ FD ]
Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)-->Line_15 $$ assertEquals("arg2", fm2.getTestBean().getName())[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_6 $$ TestBean tbArg = new TestBean()[ CD ]
Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)-->Line_5 $$ reader.loadBeanDefinitions(new ClassPathResource("factory-methods.xml", getClass()))[ FD ]
Line_10 $$ FactoryMethods fm1 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)-->Line_16 $$ assertEquals(fm1.getNum(), fm2.getNum())[ FD ]
Line_10 $$ FactoryMethods fm1 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)-->Line_11 $$ assertEquals(0, fm1.getNum())[ FD ]
Line_8 $$ TestBean tbArg2 = new TestBean()-->Line_9 $$ tbArg2.setName("arg2")[ FD ]
Line_21 $$ FactoryMethods fm3 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2, new Integer(1), "myName")-->Line_24 $$ assertEquals("arg2", fm3.getTestBean().getName())[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_4 $$ XmlBeanDefinitionReader reader = new XmlBeanDefinitionReader(xbf)[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_22 $$ assertEquals(1, fm3.getNum())[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_21 $$ FactoryMethods fm3 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2, new Integer(1), "myName")[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_16 $$ assertEquals(fm1.getNum(), fm2.getNum())[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_10 $$ FactoryMethods fm1 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_11 $$ assertEquals(0, fm1.getNum())[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_21 $$ FactoryMethods fm3 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2, new Integer(1), "myName")[ FD ]
Line_25 $$ FactoryMethods fm4 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)-->Line_28 $$ assertEquals("arg1", fm4.getTestBean().getName())[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_10 $$ FactoryMethods fm1 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_26 $$ assertEquals(0, fm4.getNum())[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_13 $$ assertEquals("arg1", fm1.getTestBean().getName())[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_15 $$ assertEquals("arg2", fm2.getTestBean().getName())[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_19 $$ assertSame(fm2.getTestBean(), fm2.getTestBean())[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_7 $$ tbArg.setName("arg1")[ CD ]
Line_25 $$ FactoryMethods fm4 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)-->Line_26 $$ assertEquals(0, fm4.getNum())[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_28 $$ assertEquals("arg1", fm4.getTestBean().getName())[ CD ]
Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)-->Line_20 $$ assertNotSame(fm1, fm2)[ FD ]
Line_6 $$ TestBean tbArg = new TestBean()-->Line_10 $$ FactoryMethods fm1 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_8 $$ TestBean tbArg2 = new TestBean()[ CD ]
Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)-->Line_16 $$ assertEquals(fm1.getNum(), fm2.getNum())[ FD ]
Line_8 $$ TestBean tbArg2 = new TestBean()-->Line_21 $$ FactoryMethods fm3 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2, new Integer(1), "myName")[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_20 $$ assertNotSame(fm1, fm2)[ CD ]
Line_10 $$ FactoryMethods fm1 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)-->Line_20 $$ assertNotSame(fm1, fm2)[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_27 $$ assertEquals("default", fm4.getName())[ CD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_25 $$ FactoryMethods fm4 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)[ FD ]
Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)-->Line_17 $$ assertEquals(fm2.getStringValue(), "testBeanOnlyPrototypeDISetterString")[ FD ]
Line_3 $$ DefaultListableBeanFactory xbf = new DefaultListableBeanFactory()-->Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_18 $$ assertEquals(fm2.getStringValue(), fm2.getStringValue())[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_12 $$ assertEquals("default", fm1.getName())[ CD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_24 $$ assertEquals("arg2", fm3.getTestBean().getName())[ CD ]
Line_21 $$ FactoryMethods fm3 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2, new Integer(1), "myName")-->Line_23 $$ assertEquals("myName", fm3.getName())[ FD ]
Line_10 $$ FactoryMethods fm1 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)-->Line_12 $$ assertEquals("default", fm1.getName())[ FD ]
Line_10 $$ FactoryMethods fm1 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)-->Line_13 $$ assertEquals("arg1", fm1.getTestBean().getName())[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_25 $$ FactoryMethods fm4 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg)[ CD ]
Line_14 $$ FactoryMethods fm2 = (FactoryMethods) xbf.getBean("testBeanOnlyPrototype", tbArg2)-->Line_19 $$ assertSame(fm2.getTestBean(), fm2.getTestBean())[ FD ]
Line_2 $$ public void testCanSpecifyFactoryMethodArgumentsOnFactoryMethodPrototype() -->Line_23 $$ assertEquals("myName", fm3.getName())[ CD ]
