Line_12 $$ ObjectInputStream objectInputStream = new ObjectInputStream(new UnsyncByteArrayInputStream(data))-->Line_13 $$ Object object = objectInputStream.readObject()[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_20 $$ Assert.assertEquals("false", System.getProperty("portal:" + PropsKeys.AUTO_DEPLOY_ENABLED))[ CD ]
Line_13 $$ Object object = objectInputStream.readObject()-->Line_14 $$ Assert.assertSame(MockRemoteSPI.class, object.getClass())[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_10 $$ System.clearProperty(PropsKeys.INTRABAND_WELDER_IMPL)[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_15 $$ Assert.assertEquals(ExecutorIntraband.class.getName(), System.getProperty(PropsKeys.INTRABAND_IMPL))[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_19 $$ Assert.assertEquals("-".concat(_spiConfiguration.getSPIId()), System.getProperty("spi.id"))[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_9 $$ System.clearProperty(PropsKeys.INTRABAND_TIMEOUT_DEFAULT)[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_3 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_17 $$ Assert.assertEquals(MockWelder.class.getName(), System.getProperty(PropsKeys.INTRABAND_WELDER_IMPL))[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_14 $$ Assert.assertSame(MockRemoteSPI.class, object.getClass())[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_13 $$ Object object = objectInputStream.readObject()[ CD ]
Line_3 $$ UnsyncByteArrayOutputStream unsyncByteArrayOutputStream = new UnsyncByteArrayOutputStream()-->Line_7 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_11 $$ System.clearProperty(PropsKeys.LIFERAY_HOME)[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_22 $$ Assert.assertEquals("false", System.getProperty("portal:" + PropsKeys.HOT_DEPLOY_DEPENDENCY_MANAGEMENT_ENABLED))[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_18 $$ Assert.assertEquals(System.getProperty("user.dir"), System.getProperty("portal:" + PropsKeys.LIFERAY_HOME))[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_8 $$ System.clearProperty(PropsKeys.INTRABAND_IMPL)[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_21 $$ Assert.assertEquals("false", System.getProperty("portal:" + PropsKeys.CLUSTER_LINK_ENABLED))[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_16 $$ Assert.assertEquals("10000", System.getProperty(PropsKeys.INTRABAND_TIMEOUT_DEFAULT))[ CD ]
Line_4 $$ try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(unsyncByteArrayOutputStream)) -->Line_5 $$ objectOutputStream.writeObject(_mockRemoteSPI)[ FD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_7 $$ byte[] data = unsyncByteArrayOutputStream.toByteArray()[ CD ]
Line_2 $$ public void testSerialization() throws Exception -->Line_12 $$ ObjectInputStream objectInputStream = new ObjectInputStream(new UnsyncByteArrayInputStream(data))[ CD ]
