Line_37 $$ if (javaType == double.class) -->Line_43 $$ if (javaType == Slice.class) [ CD ]
Line_53 $$ if (value.getClass().getComponentType() == float.class) -->Line_54 $$ row.add(Arrays.toString((float[]) value))[ CD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_26 $$ if (value instanceof Boolean) [ FD ]
Line_21 $$ if (value == null) -->Line_24 $$ Class<?> javaType = entry.getValue().getJavaType()[ CD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_75 $$ return new InMemoryRecordSet(columnTypes.values(), rows)[ CD ]
Line_55 $$ if (value.getClass().getComponentType() == int.class) -->Line_57 $$ if (value.getClass().getComponentType() == long.class) [ CD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_4 $$ requireNonNull(columns, "columns is null")[ FD ]
Line_11 $$ ImmutableMap<String, Type> columnTypes = builder.build()-->Line_16 $$ for (Entry<String, Type> entry : columnTypes.entrySet()) [ FD ]
Line_32 $$ if (value instanceof Number) -->Line_33 $$ row.add(((Number) value).longValue())[ CD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_27 $$ row.add(value)[ FD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_6 $$ ImmutableMap.Builder<String, Type> builder = ImmutableMap.builder()[ CD ]
Line_21 $$ if (value == null) -->Line_25 $$ if (javaType == boolean.class) [ CD ]
Line_24 $$ Class<?> javaType = entry.getValue().getJavaType()-->Line_43 $$ if (javaType == Slice.class) [ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_65 $$ row.add(value.toString())[ FD ]
Line_38 $$ if (value instanceof Number) -->Line_41 $$ row.add(null)[ CD ]
Line_3 $$ JmxTableHandle tableHandle = checkType(split, JmxSplit.class, "split").getTableHandle()-->Line_14 $$ Map<String, Object> attributes = getAttributes(columnTypes.keySet(), tableHandle)[ FD ]
Line_7 $$ for (ColumnHandle column : columns) -->Line_8 $$ JmxColumnHandle jmxColumnHandle = checkType(column, JmxColumnHandle.class, "column")[ FD ]
Line_71 $$ rows = ImmutableList.of(row)-->Line_73 $$ rows = ImmutableList.of()[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_65 $$ row.add(value.toString())[ FD ]
Line_26 $$ if (value instanceof Boolean) -->Line_27 $$ row.add(value)[ CD ]
Line_25 $$ if (javaType == boolean.class) -->Line_26 $$ if (value instanceof Boolean) [ CD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_38 $$ if (value instanceof Number) [ FD ]
Line_12 $$ List<List<Object>> rows-->Line_71 $$ rows = ImmutableList.of(row)[ FD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_11 $$ ImmutableMap<String, Type> columnTypes = builder.build()[ CD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_22 $$ row.add(null)[ FD ]
Line_57 $$ if (value.getClass().getComponentType() == long.class) -->Line_59 $$ if (value.getClass().getComponentType() == short.class) [ CD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_54 $$ row.add(Arrays.toString((float[]) value))[ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_21 $$ if (value == null) [ FD ]
Line_24 $$ Class<?> javaType = entry.getValue().getJavaType()-->Line_37 $$ if (javaType == double.class) [ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_18 $$ row.add(nodeId)[ FD ]
Line_45 $$ if (value.getClass().getComponentType() == boolean.class) -->Line_47 $$ if (value.getClass().getComponentType() == byte.class) [ CD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_44 $$ if (value.getClass().isArray()) [ FD ]
Line_14 $$ Map<String, Object> attributes = getAttributes(columnTypes.keySet(), tableHandle)-->Line_20 $$ Object value = attributes.get(entry.getKey())[ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_45 $$ if (value.getClass().getComponentType() == boolean.class) [ FD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_4 $$ requireNonNull(columns, "columns is null")[ CD ]
Line_25 $$ if (javaType == boolean.class) -->Line_31 $$ if (javaType == long.class) [ CD ]
Line_24 $$ Class<?> javaType = entry.getValue().getJavaType()-->Line_31 $$ if (javaType == long.class) [ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_59 $$ if (value.getClass().getComponentType() == short.class) [ FD ]
Line_59 $$ if (value.getClass().getComponentType() == short.class) -->Line_60 $$ row.add(Arrays.toString((short[]) value))[ CD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_5 $$ checkArgument(!columns.isEmpty(), "must provide at least one column")[ FD ]
Line_47 $$ if (value.getClass().getComponentType() == byte.class) -->Line_49 $$ if (value.getClass().getComponentType() == char.class) [ CD ]
Line_26 $$ if (value instanceof Boolean) -->Line_29 $$ row.add(null)[ CD ]
Line_53 $$ if (value.getClass().getComponentType() == float.class) -->Line_55 $$ if (value.getClass().getComponentType() == int.class) [ CD ]
Line_44 $$ if (value.getClass().isArray()) -->Line_45 $$ if (value.getClass().getComponentType() == boolean.class) [ CD ]
Line_59 $$ if (value.getClass().getComponentType() == short.class) -->Line_62 $$ row.add(Arrays.toString((Object[]) value))[ CD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_58 $$ row.add(Arrays.toString((long[]) value))[ FD ]
Line_8 $$ JmxColumnHandle jmxColumnHandle = checkType(column, JmxColumnHandle.class, "column")-->Line_9 $$ builder.put(jmxColumnHandle.getColumnName(), jmxColumnHandle.getColumnType())[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_41 $$ row.add(null)[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_29 $$ row.add(null)[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_39 $$ row.add(((Number) value).doubleValue())[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_62 $$ row.add(Arrays.toString((Object[]) value))[ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_32 $$ if (value instanceof Number) [ FD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_3 $$ JmxTableHandle tableHandle = checkType(split, JmxSplit.class, "split").getTableHandle()[ FD ]
Line_24 $$ Class<?> javaType = entry.getValue().getJavaType()-->Line_25 $$ if (javaType == boolean.class) [ FD ]
Line_38 $$ if (value instanceof Number) -->Line_39 $$ row.add(((Number) value).doubleValue())[ CD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_27 $$ row.add(value)[ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_51 $$ if (value.getClass().getComponentType() == double.class) [ FD ]
Line_11 $$ ImmutableMap<String, Type> columnTypes = builder.build()-->Line_75 $$ return new InMemoryRecordSet(columnTypes.values(), rows)[ FD ]
Line_32 $$ if (value instanceof Number) -->Line_35 $$ row.add(null)[ CD ]
Line_43 $$ if (javaType == Slice.class) -->Line_44 $$ if (value.getClass().isArray()) [ CD ]
Line_16 $$ for (Entry<String, Type> entry : columnTypes.entrySet()) -->Line_17 $$ if (entry.getKey().equals("node")) [ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_56 $$ row.add(Arrays.toString((int[]) value))[ FD ]
Line_6 $$ ImmutableMap.Builder<String, Type> builder = ImmutableMap.builder()-->Line_11 $$ ImmutableMap<String, Type> columnTypes = builder.build()[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_48 $$ row.add(Arrays.toString((byte[]) value))[ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_53 $$ if (value.getClass().getComponentType() == float.class) [ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_55 $$ if (value.getClass().getComponentType() == int.class) [ FD ]
Line_57 $$ if (value.getClass().getComponentType() == long.class) -->Line_58 $$ row.add(Arrays.toString((long[]) value))[ CD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_12 $$ List<List<Object>> rows[ CD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_52 $$ row.add(Arrays.toString((double[]) value))[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_33 $$ row.add(((Number) value).longValue())[ FD ]
Line_16 $$ for (Entry<String, Type> entry : columnTypes.entrySet()) -->Line_20 $$ Object value = attributes.get(entry.getKey())[ FD ]
Line_31 $$ if (javaType == long.class) -->Line_32 $$ if (value instanceof Number) [ CD ]
Line_51 $$ if (value.getClass().getComponentType() == double.class) -->Line_53 $$ if (value.getClass().getComponentType() == float.class) [ CD ]
Line_12 $$ List<List<Object>> rows-->Line_73 $$ rows = ImmutableList.of()[ FD ]
Line_17 $$ if (entry.getKey().equals("node")) -->Line_20 $$ Object value = attributes.get(entry.getKey())[ CD ]
Line_51 $$ if (value.getClass().getComponentType() == double.class) -->Line_52 $$ row.add(Arrays.toString((double[]) value))[ CD ]
Line_17 $$ if (entry.getKey().equals("node")) -->Line_18 $$ row.add(nodeId)[ CD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_46 $$ row.add(Arrays.toString((boolean[]) value))[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_50 $$ row.add(Arrays.toString((char[]) value))[ FD ]
Line_37 $$ if (javaType == double.class) -->Line_38 $$ if (value instanceof Number) [ CD ]
Line_16 $$ for (Entry<String, Type> entry : columnTypes.entrySet()) -->Line_24 $$ Class<?> javaType = entry.getValue().getJavaType()[ FD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_49 $$ if (value.getClass().getComponentType() == char.class) [ FD ]
Line_21 $$ if (value == null) -->Line_22 $$ row.add(null)[ CD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_60 $$ row.add(Arrays.toString((short[]) value))[ FD ]
Line_44 $$ if (value.getClass().isArray()) -->Line_65 $$ row.add(value.toString())[ CD ]
Line_49 $$ if (value.getClass().getComponentType() == char.class) -->Line_50 $$ row.add(Arrays.toString((char[]) value))[ CD ]
Line_17 $$ if (entry.getKey().equals("node")) -->Line_21 $$ if (value == null) [ CD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_3 $$ JmxTableHandle tableHandle = checkType(split, JmxSplit.class, "split").getTableHandle()[ CD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_47 $$ if (value.getClass().getComponentType() == byte.class) [ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_35 $$ row.add(null)[ FD ]
Line_31 $$ if (javaType == long.class) -->Line_37 $$ if (javaType == double.class) [ CD ]
Line_45 $$ if (value.getClass().getComponentType() == boolean.class) -->Line_46 $$ row.add(Arrays.toString((boolean[]) value))[ CD ]
Line_55 $$ if (value.getClass().getComponentType() == int.class) -->Line_56 $$ row.add(Arrays.toString((int[]) value))[ CD ]
Line_49 $$ if (value.getClass().getComponentType() == char.class) -->Line_51 $$ if (value.getClass().getComponentType() == double.class) [ CD ]
Line_47 $$ if (value.getClass().getComponentType() == byte.class) -->Line_48 $$ row.add(Arrays.toString((byte[]) value))[ CD ]
Line_20 $$ Object value = attributes.get(entry.getKey())-->Line_57 $$ if (value.getClass().getComponentType() == long.class) [ FD ]
Line_6 $$ ImmutableMap.Builder<String, Type> builder = ImmutableMap.builder()-->Line_9 $$ builder.put(jmxColumnHandle.getColumnName(), jmxColumnHandle.getColumnType())[ FD ]
Line_15 $$ List<Object> row = new ArrayList()-->Line_71 $$ rows = ImmutableList.of(row)[ FD ]
Line_2 $$ public RecordSet getRecordSet(ConnectorSession session, ConnectorSplit split, List<? extends ColumnHandle> columns) -->Line_5 $$ checkArgument(!columns.isEmpty(), "must provide at least one column")[ CD ]
Line_11 $$ ImmutableMap<String, Type> columnTypes = builder.build()-->Line_14 $$ Map<String, Object> attributes = getAttributes(columnTypes.keySet(), tableHandle)[ FD ]
