Line_51 $$ ByteCodeBlock switchCaseBlocks = new ByteCodeBlock()-->Line_67 $$ switchCaseBlocks.append(caseBlock.setDescription("case " + bucket.getKey()))[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_16 $$ ImmutableList.Builder<ByteCodeNode> defaultBucket = ImmutableList.builder()[ CD ]
Line_11 $$ Class<?> javaType = type.getJavaType()-->Line_86 $$ ByteCodeBlock noMatchBlock = new ByteCodeBlock().setDescription("noMatch").visitLabel(noMatch).pop(javaType).push(false).gotoLabel(end)[ FD ]
Line_46 $$ LabelNode match = new LabelNode("match")-->Line_56 $$ switchBuilder.addCase(Ints.checkedCast((Long) constantValue), match)[ FD ]
Line_50 $$ ByteCodeNode switchBlock-->Line_76 $$ switchBlock = new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class, "in", boolean.class, javaType.isPrimitive() ? javaType : Object.class, constantValuesSet.getClass())).ifTrue(jump(match)))[ FD ]
Line_6 $$ for (int i = 1; i < arguments.size(); i++) -->Line_7 $$ ByteCodeNode testNode = generatorContext.generate(arguments.get(i))[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_85 $$ block.append(matchBlock)[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_49 $$ Scope scope = generatorContext.getScope()[ CD ]
Line_46 $$ LabelNode match = new LabelNode("match")-->Line_66 $$ ByteCodeBlock caseBlock = buildInCase(generatorContext, scope, type, label, match, defaultLabel, testValues, false)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")[ CD ]
Line_51 $$ ByteCodeBlock switchCaseBlocks = new ByteCodeBlock()-->Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_87 $$ block.append(noMatchBlock)[ CD ]
Line_18 $$ for (RowExpression testValue : values) -->Line_19 $$ ByteCodeNode testByteCode = generatorContext.generate(testValue)[ FD ]
Line_46 $$ LabelNode match = new LabelNode("match")-->Line_84 $$ ByteCodeBlock matchBlock = new ByteCodeBlock().setDescription("match").visitLabel(match).pop(javaType).append(generatorContext.wasNull().set(constantFalse())).push(true).gotoLabel(end)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_19 $$ ByteCodeNode testByteCode = generatorContext.generate(testValue)[ FD ]
Line_11 $$ Class<?> javaType = type.getJavaType()-->Line_76 $$ switchBlock = new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class, "in", boolean.class, javaType.isPrimitive() ? javaType : Object.class, constantValuesSet.getClass())).ifTrue(jump(match)))[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_4 $$ List<RowExpression> values = arguments.subList(1, arguments.size())[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_5 $$ ImmutableList.Builder<ByteCodeNode> valuesByteCode = ImmutableList.builder()[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_17 $$ ImmutableSet.Builder<Object> constantValuesBuilder = ImmutableSet.builder()[ CD ]
Line_45 $$ LabelNode end = new LabelNode("end")-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_11 $$ Class<?> javaType = type.getJavaType()-->Line_84 $$ ByteCodeBlock matchBlock = new ByteCodeBlock().setDescription("match").visitLabel(match).pop(javaType).append(generatorContext.wasNull().set(constantFalse())).push(true).gotoLabel(end)[ FD ]
Line_14 $$ MethodHandle hashCodeFunction = generatorContext.getRegistry().getScalarFunctionImplementation(hashCodeSignature).getMethodHandle()-->Line_30 $$ int hashCode = Ints.checkedCast((Long) hashCodeFunction.invoke(object))[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_45 $$ LabelNode end = new LabelNode("end")[ CD ]
Line_63 $$ LabelNode label = new LabelNode("inHash" + bucket.getKey())-->Line_66 $$ ByteCodeBlock caseBlock = buildInCase(generatorContext, scope, type, label, match, defaultLabel, testValues, false)[ FD ]
Line_45 $$ LabelNode end = new LabelNode("end")-->Line_86 $$ ByteCodeBlock noMatchBlock = new ByteCodeBlock().setDescription("noMatch").visitLabel(noMatch).pop(javaType).push(false).gotoLabel(end)[ FD ]
Line_52 $$ LookupSwitch.LookupSwitchBuilder switchBuilder = lookupSwitchBuilder()-->Line_56 $$ switchBuilder.addCase(Ints.checkedCast((Long) constantValue), match)[ FD ]
Line_52 $$ LookupSwitch.LookupSwitchBuilder switchBuilder = lookupSwitchBuilder()-->Line_59 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(<stackValue>))").dup(javaType).append(new IfStatement().condition(new ByteCodeBlock().dup(javaType).invokeStatic(InCodeGenerator.class, "isInteger", boolean.class, long.class)).ifFalse(new ByteCodeBlock().pop(javaType).gotoLabel(defaultLabel))).longToInt().append(switchBuilder.build())[ FD ]
Line_59 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(<stackValue>))").dup(javaType).append(new IfStatement().condition(new ByteCodeBlock().dup(javaType).invokeStatic(InCodeGenerator.class, "isInteger", boolean.class, long.class)).ifFalse(new ByteCodeBlock().pop(javaType).gotoLabel(defaultLabel))).longToInt().append(switchBuilder.build())-->Line_76 $$ switchBlock = new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class, "in", boolean.class, javaType.isPrimitive() ? javaType : Object.class, constantValuesSet.getClass())).ifTrue(jump(match)))[ FD ]
Line_74 $$ Set<?> constantValuesSet = toFastutilHashSet(constantValues, type, registry)-->Line_75 $$ Binding constant = generatorContext.getCallSiteBinder().bind(constantValuesSet, constantValuesSet.getClass())[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_7 $$ ByteCodeNode testNode = generatorContext.generate(arguments.get(i))[ FD ]
Line_76 $$ switchBlock = new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class, "in", boolean.class, javaType.isPrimitive() ? javaType : Object.class, constantValuesSet.getClass())).ifTrue(jump(match)))-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_10 $$ Type type = arguments.get(0).getType()-->Line_11 $$ Class<?> javaType = type.getJavaType()[ FD ]
Line_45 $$ LabelNode end = new LabelNode("end")-->Line_88 $$ block.visitLabel(end)[ FD ]
Line_3 $$ ByteCodeNode value = generatorContext.generate(arguments.get(0))-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_63 $$ LabelNode label = new LabelNode("inHash" + bucket.getKey())-->Line_64 $$ switchBuilder.addCase(bucket.getKey(), label)[ FD ]
Line_11 $$ Class<?> javaType = type.getJavaType()-->Line_59 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(<stackValue>))").dup(javaType).append(new IfStatement().condition(new ByteCodeBlock().dup(javaType).invokeStatic(InCodeGenerator.class, "isInteger", boolean.class, long.class)).ifFalse(new ByteCodeBlock().pop(javaType).gotoLabel(defaultLabel))).longToInt().append(switchBuilder.build())[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_14 $$ MethodHandle hashCodeFunction = generatorContext.getRegistry().getScalarFunctionImplementation(hashCodeSignature).getMethodHandle()[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_88 $$ block.visitLabel(end)[ CD ]
Line_11 $$ Class<?> javaType = type.getJavaType()-->Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)[ FD ]
Line_48 $$ LabelNode defaultLabel = new LabelNode("default")-->Line_59 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(<stackValue>))").dup(javaType).append(new IfStatement().condition(new ByteCodeBlock().dup(javaType).invokeStatic(InCodeGenerator.class, "isInteger", boolean.class, long.class)).ifFalse(new ByteCodeBlock().pop(javaType).gotoLabel(defaultLabel))).longToInt().append(switchBuilder.build())[ FD ]
Line_6 $$ for (int i = 1; i < arguments.size(); i++) -->Line_7 $$ ByteCodeNode testNode = generatorContext.generate(arguments.get(i))[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_52 $$ LookupSwitch.LookupSwitchBuilder switchBuilder = lookupSwitchBuilder()[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_4 $$ List<RowExpression> values = arguments.subList(1, arguments.size())[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_51 $$ ByteCodeBlock switchCaseBlocks = new ByteCodeBlock()[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_46 $$ LabelNode match = new LabelNode("match")[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_50 $$ ByteCodeNode switchBlock[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_10 $$ Type type = arguments.get(0).getType()[ CD ]
Line_50 $$ ByteCodeNode switchBlock-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_15 $$ ImmutableListMultimap.Builder<Integer, ByteCodeNode> hashBucketsBuilder = ImmutableListMultimap.builder()-->Line_43 $$ ImmutableListMultimap<Integer, ByteCodeNode> hashBuckets = hashBucketsBuilder.build()[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_44 $$ ImmutableSet<Object> constantValues = constantValuesBuilder.build()[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_70 $$ Binding hashCodeBinding = generatorContext.getCallSiteBinder().bind(hashCodeFunction)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_48 $$ LabelNode defaultLabel = new LabelNode("default")[ CD ]
Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)-->Line_87 $$ block.append(noMatchBlock)[ FD ]
Line_66 $$ ByteCodeBlock caseBlock = buildInCase(generatorContext, scope, type, label, match, defaultLabel, testValues, false)-->Line_67 $$ switchCaseBlocks.append(caseBlock.setDescription("case " + bucket.getKey()))[ FD ]
Line_22 $$ Object object = constant.getValue()-->Line_26 $$ constantValuesBuilder.add(object)[ FD ]
Line_10 $$ Type type = arguments.get(0).getType()-->Line_13 $$ Signature hashCodeSignature = internalOperator(HASH_CODE, BIGINT, ImmutableList.of(type))[ FD ]
Line_47 $$ LabelNode noMatch = new LabelNode("noMatch")-->Line_86 $$ ByteCodeBlock noMatchBlock = new ByteCodeBlock().setDescription("noMatch").visitLabel(noMatch).pop(javaType).push(false).gotoLabel(end)[ FD ]
Line_5 $$ ImmutableList.Builder<ByteCodeNode> valuesByteCode = ImmutableList.builder()-->Line_8 $$ valuesByteCode.add(testNode)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_84 $$ ByteCodeBlock matchBlock = new ByteCodeBlock().setDescription("match").visitLabel(match).pop(javaType).append(generatorContext.wasNull().set(constantFalse())).push(true).gotoLabel(end)[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_49 $$ Scope scope = generatorContext.getScope()[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_47 $$ LabelNode noMatch = new LabelNode("noMatch")[ CD ]
Line_50 $$ ByteCodeNode switchBlock-->Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_43 $$ ImmutableListMultimap<Integer, ByteCodeNode> hashBuckets = hashBucketsBuilder.build()[ CD ]
Line_20 $$ if (testValue instanceof ConstantExpression && ((ConstantExpression) testValue).getValue() != null) -->Line_40 $$ defaultBucket.add(testByteCode)[ CD ]
Line_59 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(<stackValue>))").dup(javaType).append(new IfStatement().condition(new ByteCodeBlock().dup(javaType).invokeStatic(InCodeGenerator.class, "isInteger", boolean.class, long.class)).ifFalse(new ByteCodeBlock().pop(javaType).gotoLabel(defaultLabel))).longToInt().append(switchBuilder.build())-->Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)[ FD ]
Line_15 $$ ImmutableListMultimap.Builder<Integer, ByteCodeNode> hashBucketsBuilder = ImmutableListMultimap.builder()-->Line_31 $$ hashBucketsBuilder.put(hashCode, testByteCode)[ FD ]
Line_20 $$ if (testValue instanceof ConstantExpression && ((ConstantExpression) testValue).getValue() != null) -->Line_21 $$ ConstantExpression constant = (ConstantExpression) testValue[ CD ]
Line_45 $$ LabelNode end = new LabelNode("end")-->Line_84 $$ ByteCodeBlock matchBlock = new ByteCodeBlock().setDescription("match").visitLabel(match).pop(javaType).append(generatorContext.wasNull().set(constantFalse())).push(true).gotoLabel(end)[ FD ]
Line_17 $$ ImmutableSet.Builder<Object> constantValuesBuilder = ImmutableSet.builder()-->Line_44 $$ ImmutableSet<Object> constantValues = constantValuesBuilder.build()[ FD ]
Line_74 $$ Set<?> constantValuesSet = toFastutilHashSet(constantValues, type, registry)-->Line_76 $$ switchBlock = new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class, "in", boolean.class, javaType.isPrimitive() ? javaType : Object.class, constantValuesSet.getClass())).ifTrue(jump(match)))[ FD ]
Line_70 $$ Binding hashCodeBinding = generatorContext.getCallSiteBinder().bind(hashCodeFunction)-->Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)[ FD ]
Line_22 $$ Object object = constant.getValue()-->Line_30 $$ int hashCode = Ints.checkedCast((Long) hashCodeFunction.invoke(object))[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_12 $$ SwitchGenerationCase switchGenerationCase = checkSwitchGenerationCase(type, values)[ CD ]
Line_21 $$ ConstantExpression constant = (ConstantExpression) testValue-->Line_22 $$ Object object = constant.getValue()[ FD ]
Line_49 $$ Scope scope = generatorContext.getScope()-->Line_66 $$ ByteCodeBlock caseBlock = buildInCase(generatorContext, scope, type, label, match, defaultLabel, testValues, false)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ CD ]
Line_16 $$ ImmutableList.Builder<ByteCodeNode> defaultBucket = ImmutableList.builder()-->Line_40 $$ defaultBucket.add(testByteCode)[ FD ]
Line_17 $$ ImmutableSet.Builder<Object> constantValuesBuilder = ImmutableSet.builder()-->Line_26 $$ constantValuesBuilder.add(object)[ FD ]
Line_49 $$ Scope scope = generatorContext.getScope()-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_62 $$ for (Map.Entry<Integer, Collection<ByteCodeNode>> bucket : hashBuckets.asMap().entrySet()) -->Line_64 $$ switchBuilder.addCase(bucket.getKey(), label)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_3 $$ ByteCodeNode value = generatorContext.generate(arguments.get(0))[ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_6 $$ for (int i = 1; i < arguments.size(); i++) [ CD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_89 $$ return block[ CD ]
Line_48 $$ LabelNode defaultLabel = new LabelNode("default")-->Line_69 $$ switchBuilder.defaultCase(defaultLabel)[ FD ]
Line_21 $$ ConstantExpression constant = (ConstantExpression) testValue-->Line_76 $$ switchBlock = new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class, "in", boolean.class, javaType.isPrimitive() ? javaType : Object.class, constantValuesSet.getClass())).ifTrue(jump(match)))[ FD ]
Line_7 $$ ByteCodeNode testNode = generatorContext.generate(arguments.get(i))-->Line_8 $$ valuesByteCode.add(testNode)[ FD ]
Line_19 $$ ByteCodeNode testByteCode = generatorContext.generate(testValue)-->Line_40 $$ defaultBucket.add(testByteCode)[ FD ]
Line_16 $$ ImmutableList.Builder<ByteCodeNode> defaultBucket = ImmutableList.builder()-->Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")[ FD ]
Line_46 $$ LabelNode match = new LabelNode("match")-->Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")[ FD ]
Line_43 $$ ImmutableListMultimap<Integer, ByteCodeNode> hashBuckets = hashBucketsBuilder.build()-->Line_62 $$ for (Map.Entry<Integer, Collection<ByteCodeNode>> bucket : hashBuckets.asMap().entrySet()) [ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_11 $$ Class<?> javaType = type.getJavaType()[ CD ]
Line_62 $$ for (Map.Entry<Integer, Collection<ByteCodeNode>> bucket : hashBuckets.asMap().entrySet()) -->Line_63 $$ LabelNode label = new LabelNode("inHash" + bucket.getKey())[ FD ]
Line_30 $$ int hashCode = Ints.checkedCast((Long) hashCodeFunction.invoke(object))-->Line_31 $$ hashBucketsBuilder.put(hashCode, testByteCode)[ FD ]
Line_62 $$ for (Map.Entry<Integer, Collection<ByteCodeNode>> bucket : hashBuckets.asMap().entrySet()) -->Line_67 $$ switchCaseBlocks.append(caseBlock.setDescription("case " + bucket.getKey()))[ FD ]
Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_48 $$ LabelNode defaultLabel = new LabelNode("default")-->Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")[ FD ]
Line_52 $$ LookupSwitch.LookupSwitchBuilder switchBuilder = lookupSwitchBuilder()-->Line_69 $$ switchBuilder.defaultCase(defaultLabel)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_14 $$ MethodHandle hashCodeFunction = generatorContext.getRegistry().getScalarFunctionImplementation(hashCodeSignature).getMethodHandle()[ FD ]
Line_10 $$ Type type = arguments.get(0).getType()-->Line_66 $$ ByteCodeBlock caseBlock = buildInCase(generatorContext, scope, type, label, match, defaultLabel, testValues, false)[ FD ]
Line_84 $$ ByteCodeBlock matchBlock = new ByteCodeBlock().setDescription("match").visitLabel(match).pop(javaType).append(generatorContext.wasNull().set(constantFalse())).push(true).gotoLabel(end)-->Line_85 $$ block.append(matchBlock)[ FD ]
Line_50 $$ ByteCodeNode switchBlock-->Line_59 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(<stackValue>))").dup(javaType).append(new IfStatement().condition(new ByteCodeBlock().dup(javaType).invokeStatic(InCodeGenerator.class, "isInteger", boolean.class, long.class)).ifFalse(new ByteCodeBlock().pop(javaType).gotoLabel(defaultLabel))).longToInt().append(switchBuilder.build())[ FD ]
Line_19 $$ ByteCodeNode testByteCode = generatorContext.generate(testValue)-->Line_31 $$ hashBucketsBuilder.put(hashCode, testByteCode)[ FD ]
Line_11 $$ Class<?> javaType = type.getJavaType()-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_48 $$ LabelNode defaultLabel = new LabelNode("default")-->Line_58 $$ switchBuilder.defaultCase(defaultLabel)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_10 $$ Type type = arguments.get(0).getType()[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_13 $$ Signature hashCodeSignature = internalOperator(HASH_CODE, BIGINT, ImmutableList.of(type))[ CD ]
Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)-->Line_76 $$ switchBlock = new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class, "in", boolean.class, javaType.isPrimitive() ? javaType : Object.class, constantValuesSet.getClass())).ifTrue(jump(match)))[ FD ]
Line_10 $$ Type type = arguments.get(0).getType()-->Line_12 $$ SwitchGenerationCase switchGenerationCase = checkSwitchGenerationCase(type, values)[ FD ]
Line_6 $$ for (int i = 1; i < arguments.size(); i++) -->Line_8 $$ valuesByteCode.add(testNode)[ CD ]
Line_62 $$ for (Map.Entry<Integer, Collection<ByteCodeNode>> bucket : hashBuckets.asMap().entrySet()) -->Line_65 $$ Collection<ByteCodeNode> testValues = bucket.getValue()[ FD ]
Line_52 $$ LookupSwitch.LookupSwitchBuilder switchBuilder = lookupSwitchBuilder()-->Line_58 $$ switchBuilder.defaultCase(defaultLabel)[ FD ]
Line_52 $$ LookupSwitch.LookupSwitchBuilder switchBuilder = lookupSwitchBuilder()-->Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)[ FD ]
Line_86 $$ ByteCodeBlock noMatchBlock = new ByteCodeBlock().setDescription("noMatch").visitLabel(noMatch).pop(javaType).push(false).gotoLabel(end)-->Line_87 $$ block.append(noMatchBlock)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_15 $$ ImmutableListMultimap.Builder<Integer, ByteCodeNode> hashBucketsBuilder = ImmutableListMultimap.builder()[ CD ]
Line_48 $$ LabelNode defaultLabel = new LabelNode("default")-->Line_66 $$ ByteCodeBlock caseBlock = buildInCase(generatorContext, scope, type, label, match, defaultLabel, testValues, false)[ FD ]
Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)-->Line_85 $$ block.append(matchBlock)[ FD ]
Line_52 $$ LookupSwitch.LookupSwitchBuilder switchBuilder = lookupSwitchBuilder()-->Line_64 $$ switchBuilder.addCase(bucket.getKey(), label)[ FD ]
Line_14 $$ MethodHandle hashCodeFunction = generatorContext.getRegistry().getScalarFunctionImplementation(hashCodeSignature).getMethodHandle()-->Line_70 $$ Binding hashCodeBinding = generatorContext.getCallSiteBinder().bind(hashCodeFunction)[ FD ]
Line_44 $$ ImmutableSet<Object> constantValues = constantValuesBuilder.build()-->Line_74 $$ Set<?> constantValuesSet = toFastutilHashSet(constantValues, type, registry)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_86 $$ ByteCodeBlock noMatchBlock = new ByteCodeBlock().setDescription("noMatch").visitLabel(noMatch).pop(javaType).push(false).gotoLabel(end)[ CD ]
Line_10 $$ Type type = arguments.get(0).getType()-->Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")[ FD ]
Line_47 $$ LabelNode noMatch = new LabelNode("noMatch")-->Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")[ FD ]
Line_13 $$ Signature hashCodeSignature = internalOperator(HASH_CODE, BIGINT, ImmutableList.of(type))-->Line_14 $$ MethodHandle hashCodeFunction = generatorContext.getRegistry().getScalarFunctionImplementation(hashCodeSignature).getMethodHandle()[ FD ]
Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)-->Line_88 $$ block.visitLabel(end)[ FD ]
Line_49 $$ Scope scope = generatorContext.getScope()-->Line_82 $$ ByteCodeBlock defaultCaseBlock = buildInCase(generatorContext, scope, type, defaultLabel, match, noMatch, defaultBucket.build(), true).setDescription("default")[ FD ]
Line_65 $$ Collection<ByteCodeNode> testValues = bucket.getValue()-->Line_66 $$ ByteCodeBlock caseBlock = buildInCase(generatorContext, scope, type, label, match, defaultLabel, testValues, false)[ FD ]
Line_13 $$ Signature hashCodeSignature = internalOperator(HASH_CODE, BIGINT, ImmutableList.of(type))-->Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)[ FD ]
Line_20 $$ if (testValue instanceof ConstantExpression && ((ConstantExpression) testValue).getValue() != null) -->Line_22 $$ Object object = constant.getValue()[ CD ]
Line_71 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(hashCode(<stackValue>))").dup(javaType).append(invoke(hashCodeBinding, hashCodeSignature)).longToInt().append(switchBuilder.build()).append(switchCaseBlocks)-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_46 $$ LabelNode match = new LabelNode("match")-->Line_76 $$ switchBlock = new ByteCodeBlock().comment("inListSet.contains(<stackValue>)").append(new IfStatement().condition(new ByteCodeBlock().comment("value").dup(javaType).comment("set").append(loadConstant(constant)).invokeStatic(FastutilSetHelper.class, "in", boolean.class, javaType.isPrimitive() ? javaType : Object.class, constantValuesSet.getClass())).ifTrue(jump(match)))[ FD ]
Line_4 $$ List<RowExpression> values = arguments.subList(1, arguments.size())-->Line_12 $$ SwitchGenerationCase switchGenerationCase = checkSwitchGenerationCase(type, values)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_75 $$ Binding constant = generatorContext.getCallSiteBinder().bind(constantValuesSet, constantValuesSet.getClass())[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_84 $$ ByteCodeBlock matchBlock = new ByteCodeBlock().setDescription("match").visitLabel(match).pop(javaType).append(generatorContext.wasNull().set(constantFalse())).push(true).gotoLabel(end)[ FD ]
Line_59 $$ switchBlock = new ByteCodeBlock().comment("lookupSwitch(<stackValue>))").dup(javaType).append(new IfStatement().condition(new ByteCodeBlock().dup(javaType).invokeStatic(InCodeGenerator.class, "isInteger", boolean.class, long.class)).ifFalse(new ByteCodeBlock().pop(javaType).gotoLabel(defaultLabel))).longToInt().append(switchBuilder.build())-->Line_83 $$ ByteCodeBlock block = new ByteCodeBlock().comment("IN").append(value).append(ifWasNullPopAndGoto(scope, end, boolean.class, javaType)).append(switchBlock).append(defaultCaseBlock)[ FD ]
Line_10 $$ Type type = arguments.get(0).getType()-->Line_74 $$ Set<?> constantValuesSet = toFastutilHashSet(constantValues, type, registry)[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_3 $$ ByteCodeNode value = generatorContext.generate(arguments.get(0))[ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_6 $$ for (int i = 1; i < arguments.size(); i++) [ FD ]
Line_2 $$ public ByteCodeNode generateExpression(Signature signature, ByteCodeGeneratorContext generatorContext, Type returnType, List<RowExpression> arguments) -->Line_66 $$ ByteCodeBlock caseBlock = buildInCase(generatorContext, scope, type, label, match, defaultLabel, testValues, false)[ FD ]
