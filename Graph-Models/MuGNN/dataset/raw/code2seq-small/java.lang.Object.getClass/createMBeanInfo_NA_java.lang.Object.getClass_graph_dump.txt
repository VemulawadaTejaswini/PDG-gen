Line_25 $$ if (needsMinMaxResetOperation) -->Line_26 $$ operationsInfo = new MBeanOperationInfo[] [ CD ]
Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()-->Line_29 $$ MBeanAttributeInfo[] attrArray = new MBeanAttributeInfo[attributesInfo.size()][ FD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_13 $$ needsMinMaxResetOperation = true[ CD ]
Line_2 $$ private void createMBeanInfo() -->Line_5 $$ MBeanOperationInfo[] operationsInfo = null[ CD ]
Line_5 $$ MBeanOperationInfo[] operationsInfo = null-->Line_26 $$ operationsInfo = new MBeanOperationInfo[] [ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_9 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + NUM_OPS, "java.lang.Integer", o.getDescription(), true, false, false))[ FD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_11 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + MIN_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ CD ]
Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()-->Line_10 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + AVG_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ FD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_10 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + AVG_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ CD ]
Line_29 $$ MBeanAttributeInfo[] attrArray = new MBeanAttributeInfo[attributesInfo.size()]-->Line_30 $$ mbeanInfo = new MBeanInfo(this.getClass().getName(), mbeanDescription, attributesInfo.toArray(attrArray), null, operationsInfo, null)[ FD ]
Line_2 $$ private void createMBeanInfo() -->Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()[ CD ]
Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()-->Line_19 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName(), "java.lang.Integer", o.getDescription(), true, false, false))[ FD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_9 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + NUM_OPS, "java.lang.Integer", o.getDescription(), true, false, false))[ CD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_15 $$ metricsRateAttributeMod.put(o.getName() + AVG_TIME, o)[ CD ]
Line_18 $$ if (MetricsIntValue.class.isInstance(o) || MetricsTimeVaryingInt.class.isInstance(o)) -->Line_20 $$ if (MetricsLongValue.class.isInstance(o) || MetricsTimeVaryingLong.class.isInstance(o)) [ CD ]
Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()-->Line_21 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName(), "java.lang.Long", o.getDescription(), true, false, false))[ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_20 $$ if (MetricsLongValue.class.isInstance(o) || MetricsTimeVaryingLong.class.isInstance(o)) [ FD ]
Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()-->Line_30 $$ mbeanInfo = new MBeanInfo(this.getClass().getName(), mbeanDescription, attributesInfo.toArray(attrArray), null, operationsInfo, null)[ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_18 $$ if (MetricsIntValue.class.isInstance(o) || MetricsTimeVaryingInt.class.isInstance(o)) [ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_15 $$ metricsRateAttributeMod.put(o.getName() + AVG_TIME, o)[ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_19 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName(), "java.lang.Integer", o.getDescription(), true, false, false))[ FD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_12 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + MAX_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ CD ]
Line_20 $$ if (MetricsLongValue.class.isInstance(o) || MetricsTimeVaryingLong.class.isInstance(o)) -->Line_23 $$ MetricsUtil.LOG.error("unknown metrics type: " + o.getClass().getName())[ CD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_21 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName(), "java.lang.Long", o.getDescription(), true, false, false))[ FD ]
Line_2 $$ private void createMBeanInfo() -->Line_29 $$ MBeanAttributeInfo[] attrArray = new MBeanAttributeInfo[attributesInfo.size()][ CD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_14 $$ metricsRateAttributeMod.put(o.getName() + NUM_OPS, o)[ CD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_17 $$ metricsRateAttributeMod.put(o.getName() + MAX_TIME, o)[ CD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_14 $$ metricsRateAttributeMod.put(o.getName() + NUM_OPS, o)[ FD ]
Line_3 $$ boolean needsMinMaxResetOperation = false-->Line_13 $$ needsMinMaxResetOperation = true[ FD ]
Line_2 $$ private void createMBeanInfo() -->Line_6 $$ numEntriesInRegistry = metricsRegistry.size()[ CD ]
Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()-->Line_11 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + MIN_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ FD ]
Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()-->Line_12 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + MAX_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_17 $$ metricsRateAttributeMod.put(o.getName() + MAX_TIME, o)[ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_12 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + MAX_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_16 $$ metricsRateAttributeMod.put(o.getName() + MIN_TIME, o)[ FD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_18 $$ if (MetricsIntValue.class.isInstance(o) || MetricsTimeVaryingInt.class.isInstance(o)) [ CD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_23 $$ MetricsUtil.LOG.error("unknown metrics type: " + o.getClass().getName())[ FD ]
Line_2 $$ private void createMBeanInfo() -->Line_3 $$ boolean needsMinMaxResetOperation = false[ CD ]
Line_4 $$ List<MBeanAttributeInfo> attributesInfo = new ArrayList<MBeanAttributeInfo>()-->Line_9 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + NUM_OPS, "java.lang.Integer", o.getDescription(), true, false, false))[ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_11 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + MIN_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ FD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) [ FD ]
Line_20 $$ if (MetricsLongValue.class.isInstance(o) || MetricsTimeVaryingLong.class.isInstance(o)) -->Line_21 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName(), "java.lang.Long", o.getDescription(), true, false, false))[ CD ]
Line_7 $$ for (MetricsBase o : metricsRegistry.getMetricsList()) -->Line_10 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName() + AVG_TIME, "java.lang.Long", o.getDescription(), true, false, false))[ FD ]
Line_8 $$ if (MetricsTimeVaryingRate.class.isInstance(o)) -->Line_16 $$ metricsRateAttributeMod.put(o.getName() + MIN_TIME, o)[ CD ]
Line_18 $$ if (MetricsIntValue.class.isInstance(o) || MetricsTimeVaryingInt.class.isInstance(o)) -->Line_19 $$ attributesInfo.add(new MBeanAttributeInfo(o.getName(), "java.lang.Integer", o.getDescription(), true, false, false))[ CD ]
