Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_27 $$ return Arrays.asList(info.names)[ CD ]
Line_6 $$ DomElement classElement = ContainerUtil.find(children, new Condition<DomElement>() -->Line_8 $$ return domElement.getAnnotation(MappingClass.class) != null[ FD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_11 $$ if (classElement == null)[ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_13 $$ Object value = ((GenericDomValue) classElement).getValue()[ CD ]
Line_11 $$ if (classElement == null)-->Line_12 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_17 $$ if (value instanceof PsiType) [ CD ]
Line_17 $$ if (value instanceof PsiType) -->Line_19 $$ if (value instanceof PsiClass) [ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_25 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(context.getProject())[ FD ]
Line_5 $$ List<DomElement> children = DomUtil.getDefinedChildren(parent, true, true)-->Line_6 $$ DomElement classElement = ContainerUtil.find(children, new Condition<DomElement>() [ FD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_3 $$ DomElement parent = context.getInvocationElement().getParent()[ CD ]
Line_3 $$ DomElement parent = context.getInvocationElement().getParent()-->Line_5 $$ List<DomElement> children = DomUtil.getDefinedChildren(parent, true, true)[ FD ]
Line_19 $$ if (value instanceof PsiClass) -->Line_23 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_5 $$ List<DomElement> children = DomUtil.getDefinedChildren(parent, true, true)[ CD ]
Line_19 $$ if (value instanceof PsiClass) -->Line_22 $$ LOG.error("wrong type: " + value.getClass())[ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_3 $$ DomElement parent = context.getInvocationElement().getParent()[ FD ]
Line_6 $$ DomElement classElement = ContainerUtil.find(children, new Condition<DomElement>() -->Line_11 $$ if (classElement == null)[ FD ]
Line_14 $$ if (value == null)-->Line_15 $$ return Collections.emptyList()[ CD ]
Line_6 $$ DomElement classElement = ContainerUtil.find(children, new Condition<DomElement>() -->Line_8 $$ return domElement.getAnnotation(MappingClass.class) != null[ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_14 $$ if (value == null)[ CD ]
Line_19 $$ if (value instanceof PsiClass) -->Line_20 $$ type = PsiTypesUtil.getClassType((PsiClass) value)[ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_6 $$ DomElement classElement = ContainerUtil.find(children, new Condition<DomElement>() [ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_26 $$ SuggestedNameInfo info = codeStyleManager.suggestVariableName(VariableKind.LOCAL_VARIABLE, null, null, type)[ CD ]
Line_2 $$ public Collection<String> getVariants(ConvertContext context) -->Line_25 $$ JavaCodeStyleManager codeStyleManager = JavaCodeStyleManager.getInstance(context.getProject())[ CD ]
