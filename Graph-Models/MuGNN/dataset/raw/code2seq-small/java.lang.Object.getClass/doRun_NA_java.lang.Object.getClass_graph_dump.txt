Line_2 $$ protected void doRun() -->Line_3 $$ PsiDocumentManager.getInstance(myProject).commitAllDocuments()[ CD ]
Line_6 $$ final Ref<Boolean> refProcessCanceled = new Ref<Boolean>()-->Line_37 $$ if (!refProcessCanceled.isNull()) [ FD ]
Line_33 $$ if (DumbService.isDumb(myProject)) -->Line_34 $$ DumbService.getInstance(myProject).showDumbModeNotification("Refactoring is not available until indices are ready")[ CD ]
Line_2 $$ protected void doRun() -->Line_47 $$ final UsageInfo[] usages = refUsages.get()[ CD ]
Line_57 $$ if (isPreview) -->Line_61 $$ previewRefactoring(usages)[ CD ]
Line_2 $$ protected void doRun() -->Line_57 $$ if (isPreview) [ CD ]
Line_2 $$ protected void doRun() -->Line_5 $$ final Ref<Language> refErrorLanguage = new Ref<Language>()[ CD ]
Line_29 $$ if (!refErrorLanguage.isNull()) -->Line_31 $$ return[ CD ]
Line_37 $$ if (!refProcessCanceled.isNull()) -->Line_39 $$ return[ CD ]
Line_5 $$ final Ref<Language> refErrorLanguage = new Ref<Language>()-->Line_29 $$ if (!refErrorLanguage.isNull()) [ FD ]
Line_4 $$ final Ref<UsageInfo[]> refUsages = new Ref<UsageInfo[]>()-->Line_47 $$ final UsageInfo[] usages = refUsages.get()[ FD ]
Line_2 $$ protected void doRun() -->Line_4 $$ final Ref<UsageInfo[]> refUsages = new Ref<UsageInfo[]>()[ CD ]
Line_33 $$ if (DumbService.isDumb(myProject)) -->Line_35 $$ return[ CD ]
Line_8 $$ final Runnable findUsagesRunnable = new Runnable() -->Line_26 $$ if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(findUsagesRunnable, RefactoringBundle.message("progress.text"), true, myProject)) [ FD ]
Line_2 $$ protected void doRun() -->Line_41 $$ if (!anyException.isNull()) [ CD ]
Line_4 $$ final Ref<UsageInfo[]> refUsages = new Ref<UsageInfo[]>()-->Line_44 $$ assert !refUsages.isNull() : "Null usages from processor " + this[ FD ]
Line_41 $$ if (!anyException.isNull()) -->Line_42 $$ return[ CD ]
Line_51 $$ if (!isPreview) -->Line_53 $$ if (isPreview) [ CD ]
Line_29 $$ if (!refErrorLanguage.isNull()) -->Line_30 $$ Messages.showErrorDialog(myProject, RefactoringBundle.message("unsupported.refs.found", refErrorLanguage.get().getDisplayName()), RefactoringBundle.message("error.title"))[ CD ]
Line_6 $$ final Ref<Boolean> refProcessCanceled = new Ref<Boolean>()-->Line_19 $$ refProcessCanceled.set(Boolean.TRUE)[ FD ]
Line_57 $$ if (isPreview) -->Line_63 $$ execute(usages)[ CD ]
Line_2 $$ protected void doRun() -->Line_51 $$ if (!isPreview) [ CD ]
Line_4 $$ final Ref<UsageInfo[]> refUsages = new Ref<UsageInfo[]>()-->Line_45 $$ if (!preprocessUsages(refUsages))[ FD ]
Line_5 $$ final Ref<Language> refErrorLanguage = new Ref<Language>()-->Line_17 $$ refErrorLanguage.set(e.getElementLanguage())[ FD ]
Line_7 $$ final Ref<Boolean> anyException = new Ref<Boolean>()-->Line_21 $$ anyException.set(Boolean.TRUE)[ FD ]
Line_2 $$ protected void doRun() -->Line_50 $$ boolean isPreview = isPreviewUsages(usages)[ CD ]
Line_2 $$ protected void doRun() -->Line_29 $$ if (!refErrorLanguage.isNull()) [ CD ]
Line_37 $$ if (!refProcessCanceled.isNull()) -->Line_38 $$ Messages.showErrorDialog(myProject, "Index corruption detected. Please retry the refactoring - indexes will be rebuilt automatically", RefactoringBundle.message("error.title"))[ CD ]
Line_7 $$ final Ref<Boolean> anyException = new Ref<Boolean>()-->Line_41 $$ if (!anyException.isNull()) [ FD ]
Line_2 $$ protected void doRun() -->Line_49 $$ UsageViewDescriptor descriptor = createUsageViewDescriptor(usages)[ CD ]
Line_2 $$ protected void doRun() -->Line_6 $$ final Ref<Boolean> refProcessCanceled = new Ref<Boolean>()[ CD ]
Line_2 $$ protected void doRun() -->Line_33 $$ if (DumbService.isDumb(myProject)) [ CD ]
Line_2 $$ protected void doRun() -->Line_37 $$ if (!refProcessCanceled.isNull()) [ CD ]
Line_45 $$ if (!preprocessUsages(refUsages))-->Line_46 $$ return[ CD ]
Line_2 $$ protected void doRun() -->Line_26 $$ if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(findUsagesRunnable, RefactoringBundle.message("progress.text"), true, myProject)) [ CD ]
Line_11 $$ refUsages.set(DumbService.getInstance(myProject).runReadActionInSmartMode(new Computable<UsageInfo[]>() -->Line_13 $$ return findUsages()[ CD ]
Line_2 $$ protected void doRun() -->Line_8 $$ final Runnable findUsagesRunnable = new Runnable() [ CD ]
Line_2 $$ protected void doRun() -->Line_7 $$ final Ref<Boolean> anyException = new Ref<Boolean>()[ CD ]
Line_53 $$ if (isPreview) -->Line_54 $$ StatusBarUtil.setStatusBarInfo(myProject, RefactoringBundle.message("readonly.occurences.found"))[ CD ]
Line_26 $$ if (!ProgressManager.getInstance().runProcessWithProgressSynchronously(findUsagesRunnable, RefactoringBundle.message("progress.text"), true, myProject)) -->Line_27 $$ return[ CD ]
Line_2 $$ protected void doRun() -->Line_45 $$ if (!preprocessUsages(refUsages))[ CD ]
Line_5 $$ final Ref<Language> refErrorLanguage = new Ref<Language>()-->Line_30 $$ Messages.showErrorDialog(myProject, RefactoringBundle.message("unsupported.refs.found", refErrorLanguage.get().getDisplayName()), RefactoringBundle.message("error.title"))[ FD ]
Line_4 $$ final Ref<UsageInfo[]> refUsages = new Ref<UsageInfo[]>()-->Line_11 $$ refUsages.set(DumbService.getInstance(myProject).runReadActionInSmartMode(new Computable<UsageInfo[]>() [ FD ]
