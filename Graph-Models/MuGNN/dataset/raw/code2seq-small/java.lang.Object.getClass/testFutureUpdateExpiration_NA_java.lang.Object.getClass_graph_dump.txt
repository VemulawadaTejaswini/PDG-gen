Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_5 $$ CountDownLatch commitLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_10 $$ assertEquals(1, contents.size())[ CD ]
Line_15 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_17 $$ Object value = contents.get(itemId)[ FD ]
Line_18 $$ if (value instanceof FutureUpdate) -->Line_19 $$ TIME_SERVICE.advance(TIMEOUT + 1)[ CD ]
Line_3 $$ CyclicBarrier loadBarrier = new CyclicBarrier(2)-->Line_7 $$ Future<Boolean> second = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_3 $$ CyclicBarrier loadBarrier = new CyclicBarrier(2)[ CD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_11 $$ assertEquals(FutureUpdate.class, contents.get(itemId).getClass())[ CD ]
Line_18 $$ if (value instanceof FutureUpdate) -->Line_27 $$ assertEquals(value, entityCache.get(itemId))[ CD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_9 $$ Map contents = Caches.entrySet(entityCache).toMap()[ CD ]
Line_7 $$ Future<Boolean> second = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)-->Line_14 $$ second.get(WAIT_TIMEOUT, TimeUnit.SECONDS)[ FD ]
Line_17 $$ Object value = contents.get(itemId)-->Line_24 $$ assertNotNull(value)[ FD ]
Line_18 $$ if (value instanceof FutureUpdate) -->Line_20 $$ assertNull(entityCache.get(itemId))[ CD ]
Line_18 $$ if (value instanceof FutureUpdate) -->Line_24 $$ assertNotNull(value)[ CD ]
Line_4 $$ CountDownLatch flushLatch = new CountDownLatch(2)-->Line_6 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_17 $$ Object value = contents.get(itemId)-->Line_27 $$ assertEquals(value, entityCache.get(itemId))[ FD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_6 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ CD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_16 $$ assertEquals(1, contents.size())[ CD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_4 $$ CountDownLatch flushLatch = new CountDownLatch(2)[ CD ]
Line_9 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_22 $$ assertEquals(Collections.EMPTY_MAP, contents)[ FD ]
Line_9 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_11 $$ assertEquals(FutureUpdate.class, contents.get(itemId).getClass())[ FD ]
Line_15 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_16 $$ assertEquals(1, contents.size())[ FD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_12 $$ commitLatch.countDown()[ CD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_8 $$ awaitOrThrow(flushLatch)[ CD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_18 $$ if (value instanceof FutureUpdate) [ CD ]
Line_18 $$ if (value instanceof FutureUpdate) -->Line_26 $$ TIME_SERVICE.advance(TIMEOUT + 1)[ CD ]
Line_18 $$ if (value instanceof FutureUpdate) -->Line_22 $$ assertEquals(Collections.EMPTY_MAP, contents)[ CD ]
Line_15 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_21 $$ contents = Caches.entrySet(entityCache).toMap()[ FD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_17 $$ Object value = contents.get(itemId)[ CD ]
Line_5 $$ CountDownLatch commitLatch = new CountDownLatch(1)-->Line_7 $$ Future<Boolean> second = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_13 $$ first.get(WAIT_TIMEOUT, TimeUnit.SECONDS)[ CD ]
Line_4 $$ CountDownLatch flushLatch = new CountDownLatch(2)-->Line_7 $$ Future<Boolean> second = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_14 $$ second.get(WAIT_TIMEOUT, TimeUnit.SECONDS)[ CD ]
Line_18 $$ if (value instanceof FutureUpdate) -->Line_25 $$ assertEquals(StandardCacheEntryImpl.class, value.getClass())[ CD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_7 $$ Future<Boolean> second = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ CD ]
Line_17 $$ Object value = contents.get(itemId)-->Line_25 $$ assertEquals(StandardCacheEntryImpl.class, value.getClass())[ FD ]
Line_18 $$ if (value instanceof FutureUpdate) -->Line_21 $$ contents = Caches.entrySet(entityCache).toMap()[ CD ]
Line_5 $$ CountDownLatch commitLatch = new CountDownLatch(1)-->Line_6 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_9 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_17 $$ Object value = contents.get(itemId)[ FD ]
Line_5 $$ CountDownLatch commitLatch = new CountDownLatch(1)-->Line_12 $$ commitLatch.countDown()[ FD ]
Line_21 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_22 $$ assertEquals(Collections.EMPTY_MAP, contents)[ FD ]
Line_17 $$ Object value = contents.get(itemId)-->Line_18 $$ if (value instanceof FutureUpdate) [ FD ]
Line_4 $$ CountDownLatch flushLatch = new CountDownLatch(2)-->Line_8 $$ awaitOrThrow(flushLatch)[ FD ]
Line_9 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_15 $$ contents = Caches.entrySet(entityCache).toMap()[ FD ]
Line_9 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_16 $$ assertEquals(1, contents.size())[ FD ]
Line_9 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_21 $$ contents = Caches.entrySet(entityCache).toMap()[ FD ]
Line_6 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)-->Line_13 $$ first.get(WAIT_TIMEOUT, TimeUnit.SECONDS)[ FD ]
Line_3 $$ CyclicBarrier loadBarrier = new CyclicBarrier(2)-->Line_6 $$ Future<Boolean> first = updateFlushWait(itemId, loadBarrier, null, flushLatch, commitLatch)[ FD ]
Line_2 $$ public void testFutureUpdateExpiration() throws Exception -->Line_15 $$ contents = Caches.entrySet(entityCache).toMap()[ CD ]
Line_15 $$ contents = Caches.entrySet(entityCache).toMap()-->Line_22 $$ assertEquals(Collections.EMPTY_MAP, contents)[ FD ]
Line_9 $$ Map contents = Caches.entrySet(entityCache).toMap()-->Line_10 $$ assertEquals(1, contents.size())[ FD ]
