Line_2 $$ private <T> Object accept(@NotNull Class<?> nodeClass, Object element, @NotNull TreeVisitor<T> visitor) -->Line_6 $$ if (nodeClass.isAssignableFrom(element.getClass()) && visitor.visit((T) element)) [ CD ]
Line_11 $$ final Object childObject = accept(nodeClass, each, visitor)-->Line_12 $$ if (childObject != null)[ FD ]
Line_6 $$ if (nodeClass.isAssignableFrom(element.getClass()) && visitor.visit((T) element)) -->Line_7 $$ return element[ CD ]
Line_2 $$ private <T> Object accept(@NotNull Class<?> nodeClass, Object element, @NotNull TreeVisitor<T> visitor) -->Line_3 $$ if (element == null) [ FD ]
Line_10 $$ for (Object each : children) -->Line_11 $$ final Object childObject = accept(nodeClass, each, visitor)[ FD ]
Line_12 $$ if (childObject != null)-->Line_13 $$ return childObject[ CD ]
Line_2 $$ private <T> Object accept(@NotNull Class<?> nodeClass, Object element, @NotNull TreeVisitor<T> visitor) -->Line_9 $$ final Object[] children = getTreeStructure().getChildElements(element)[ FD ]
Line_2 $$ private <T> Object accept(@NotNull Class<?> nodeClass, Object element, @NotNull TreeVisitor<T> visitor) -->Line_3 $$ if (element == null) [ CD ]
Line_2 $$ private <T> Object accept(@NotNull Class<?> nodeClass, Object element, @NotNull TreeVisitor<T> visitor) -->Line_9 $$ final Object[] children = getTreeStructure().getChildElements(element)[ CD ]
Line_2 $$ private <T> Object accept(@NotNull Class<?> nodeClass, Object element, @NotNull TreeVisitor<T> visitor) -->Line_15 $$ return null[ CD ]
Line_3 $$ if (element == null) -->Line_4 $$ return null[ CD ]
Line_2 $$ private <T> Object accept(@NotNull Class<?> nodeClass, Object element, @NotNull TreeVisitor<T> visitor) -->Line_11 $$ final Object childObject = accept(nodeClass, each, visitor)[ FD ]
Line_2 $$ private <T> Object accept(@NotNull Class<?> nodeClass, Object element, @NotNull TreeVisitor<T> visitor) -->Line_6 $$ if (nodeClass.isAssignableFrom(element.getClass()) && visitor.visit((T) element)) [ FD ]
