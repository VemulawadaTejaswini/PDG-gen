Line_13 $$ if (expectedErr == null) -->Line_15 $$ assertEquals(expectedOpts, cf.getOpts())[ CD ]
Line_2 $$ private static <T> CommandFormat checkArgLimits(Class<? extends IllegalArgumentException> expectedErr, int min, int max, String... opts) -->Line_12 $$ assertEquals(expectedErr, cfError)[ FD ]
Line_2 $$ private static <T> CommandFormat checkArgLimits(Class<? extends IllegalArgumentException> expectedErr, int min, int max, String... opts) -->Line_5 $$ Class<?> cfError = null[ CD ]
Line_2 $$ private static <T> CommandFormat checkArgLimits(Class<? extends IllegalArgumentException> expectedErr, int min, int max, String... opts) -->Line_17 $$ return cf[ CD ]
Line_5 $$ Class<?> cfError = null-->Line_10 $$ cfError = e.getClass()[ FD ]
Line_2 $$ private static <T> CommandFormat checkArgLimits(Class<? extends IllegalArgumentException> expectedErr, int min, int max, String... opts) -->Line_13 $$ if (expectedErr == null) [ FD ]
Line_4 $$ List<String> parsedArgs = new ArrayList<String>(args)-->Line_14 $$ assertEquals(expectedArgs, parsedArgs)[ FD ]
Line_5 $$ Class<?> cfError = null-->Line_12 $$ assertEquals(expectedErr, cfError)[ FD ]
Line_2 $$ private static <T> CommandFormat checkArgLimits(Class<? extends IllegalArgumentException> expectedErr, int min, int max, String... opts) -->Line_13 $$ if (expectedErr == null) [ CD ]
Line_2 $$ private static <T> CommandFormat checkArgLimits(Class<? extends IllegalArgumentException> expectedErr, int min, int max, String... opts) -->Line_12 $$ assertEquals(expectedErr, cfError)[ CD ]
Line_2 $$ private static <T> CommandFormat checkArgLimits(Class<? extends IllegalArgumentException> expectedErr, int min, int max, String... opts) -->Line_3 $$ CommandFormat cf = new CommandFormat(min, max, opts)[ CD ]
Line_13 $$ if (expectedErr == null) -->Line_14 $$ assertEquals(expectedArgs, parsedArgs)[ CD ]
Line_3 $$ CommandFormat cf = new CommandFormat(min, max, opts)-->Line_15 $$ assertEquals(expectedOpts, cf.getOpts())[ FD ]
Line_10 $$ cfError = e.getClass()-->Line_12 $$ assertEquals(expectedErr, cfError)[ FD ]
Line_4 $$ List<String> parsedArgs = new ArrayList<String>(args)-->Line_7 $$ cf.parse(parsedArgs)[ FD ]
Line_2 $$ private static <T> CommandFormat checkArgLimits(Class<? extends IllegalArgumentException> expectedErr, int min, int max, String... opts) -->Line_4 $$ List<String> parsedArgs = new ArrayList<String>(args)[ CD ]
Line_3 $$ CommandFormat cf = new CommandFormat(min, max, opts)-->Line_7 $$ cf.parse(parsedArgs)[ FD ]
