Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_6 $$ if (headersToUse != null) [ CD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_13 $$ MessageConverter converter = getMessageConverter()[ CD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_21 $$ message = postProcessor.postProcessMessage(message)[ FD ]
Line_8 $$ messageHeaders = (MessageHeaders) headersToUse-->Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))[ FD ]
Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))-->Line_21 $$ message = postProcessor.postProcessMessage(message)[ FD ]
Line_10 $$ messageHeaders = new MessageHeaders(headersToUse)-->Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))[ FD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_20 $$ if (postProcessor != null) [ FD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_23 $$ return message[ CD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_15 $$ if (message == null) [ CD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_3 $$ MessageHeaders messageHeaders = null[ CD ]
Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))-->Line_15 $$ if (message == null) [ FD ]
Line_15 $$ if (message == null) -->Line_17 $$ Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)[ CD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))[ CD ]
Line_20 $$ if (postProcessor != null) -->Line_21 $$ message = postProcessor.postProcessMessage(message)[ CD ]
Line_4 $$ Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)-->Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))[ FD ]
Line_7 $$ if (headersToUse instanceof MessageHeaders) -->Line_10 $$ messageHeaders = new MessageHeaders(headersToUse)[ CD ]
Line_3 $$ MessageHeaders messageHeaders = null-->Line_10 $$ messageHeaders = new MessageHeaders(headersToUse)[ FD ]
Line_8 $$ messageHeaders = (MessageHeaders) headersToUse-->Line_10 $$ messageHeaders = new MessageHeaders(headersToUse)[ FD ]
Line_3 $$ MessageHeaders messageHeaders = null-->Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))[ FD ]
Line_10 $$ messageHeaders = new MessageHeaders(headersToUse)-->Line_17 $$ Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)[ FD ]
Line_6 $$ if (headersToUse != null) -->Line_7 $$ if (headersToUse instanceof MessageHeaders) [ CD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_16 $$ String payloadType = (payload != null ? payload.getClass().getName() : null)[ FD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_4 $$ Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)[ FD ]
Line_3 $$ MessageHeaders messageHeaders = null-->Line_8 $$ messageHeaders = (MessageHeaders) headersToUse[ FD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_5 $$ Map<String, Object> headersToUse = processHeadersToSend(headers)[ CD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_4 $$ Object conversionHint = (headers != null ? headers.get(CONVERSION_HINT_HEADER) : null)[ CD ]
Line_13 $$ MessageConverter converter = getMessageConverter()-->Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))[ FD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_14 $$ Message<?> message = (converter instanceof SmartMessageConverter ? ((SmartMessageConverter) converter).toMessage(payload, messageHeaders, conversionHint) : converter.toMessage(payload, messageHeaders))[ FD ]
Line_15 $$ if (message == null) -->Line_16 $$ String payloadType = (payload != null ? payload.getClass().getName() : null)[ CD ]
Line_8 $$ messageHeaders = (MessageHeaders) headersToUse-->Line_17 $$ Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)[ FD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_20 $$ if (postProcessor != null) [ CD ]
Line_2 $$ protected Message<?> doConvert(Object payload, Map<String, Object> headers, MessagePostProcessor postProcessor) -->Line_5 $$ Map<String, Object> headersToUse = processHeadersToSend(headers)[ FD ]
Line_5 $$ Map<String, Object> headersToUse = processHeadersToSend(headers)-->Line_6 $$ if (headersToUse != null) [ FD ]
Line_5 $$ Map<String, Object> headersToUse = processHeadersToSend(headers)-->Line_7 $$ if (headersToUse instanceof MessageHeaders) [ FD ]
Line_7 $$ if (headersToUse instanceof MessageHeaders) -->Line_8 $$ messageHeaders = (MessageHeaders) headersToUse[ CD ]
Line_3 $$ MessageHeaders messageHeaders = null-->Line_17 $$ Object contentType = (messageHeaders != null ? messageHeaders.get(MessageHeaders.CONTENT_TYPE) : null)[ FD ]
