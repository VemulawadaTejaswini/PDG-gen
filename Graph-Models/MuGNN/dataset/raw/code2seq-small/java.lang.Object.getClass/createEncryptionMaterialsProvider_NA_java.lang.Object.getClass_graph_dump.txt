Line_3 $$ String empClassName = hadoopConfig.get(S3_ENCRYPTION_MATERIALS_PROVIDER)-->Line_4 $$ if (empClassName == null) [ FD ]
Line_2 $$ private static EncryptionMaterialsProvider createEncryptionMaterialsProvider(Configuration hadoopConfig) -->Line_4 $$ if (empClassName == null) [ CD ]
Line_13 $$ if (emp instanceof Configurable) -->Line_14 $$ ((Configurable) emp).setConf(hadoopConfig)[ CD ]
Line_4 $$ if (empClassName == null) -->Line_5 $$ return null[ CD ]
Line_2 $$ private static EncryptionMaterialsProvider createEncryptionMaterialsProvider(Configuration hadoopConfig) -->Line_14 $$ ((Configurable) emp).setConf(hadoopConfig)[ FD ]
Line_2 $$ private static EncryptionMaterialsProvider createEncryptionMaterialsProvider(Configuration hadoopConfig) -->Line_3 $$ String empClassName = hadoopConfig.get(S3_ENCRYPTION_MATERIALS_PROVIDER)[ FD ]
Line_3 $$ String empClassName = hadoopConfig.get(S3_ENCRYPTION_MATERIALS_PROVIDER)-->Line_8 $$ Object instance = Class.forName(empClassName).getConstructor().newInstance()[ FD ]
Line_2 $$ private static EncryptionMaterialsProvider createEncryptionMaterialsProvider(Configuration hadoopConfig) -->Line_3 $$ String empClassName = hadoopConfig.get(S3_ENCRYPTION_MATERIALS_PROVIDER)[ CD ]
Line_12 $$ EncryptionMaterialsProvider emp = (EncryptionMaterialsProvider) instance-->Line_13 $$ if (emp instanceof Configurable) [ FD ]
Line_8 $$ Object instance = Class.forName(empClassName).getConstructor().newInstance()-->Line_10 $$ throw new RuntimeException("Invalid encryption materials provider class: " + instance.getClass().getName())[ FD ]
