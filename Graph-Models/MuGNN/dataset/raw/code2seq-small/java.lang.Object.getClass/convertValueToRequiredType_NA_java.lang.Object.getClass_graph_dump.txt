Line_2 $$ protected Object convertValueToRequiredType(Object value, Class<?> requiredType) -->Line_5 $$ if (Number.class.isAssignableFrom(requiredType)) [ FD ]
Line_5 $$ if (Number.class.isAssignableFrom(requiredType)) -->Line_6 $$ if (value instanceof Number) [ CD ]
Line_6 $$ if (value instanceof Number) -->Line_7 $$ return NumberUtils.convertNumberToTargetClass(((Number) value), (Class<Number>) requiredType)[ CD ]
Line_2 $$ protected Object convertValueToRequiredType(Object value, Class<?> requiredType) -->Line_9 $$ return NumberUtils.parseNumber(value.toString(), (Class<Number>) requiredType)[ FD ]
Line_2 $$ protected Object convertValueToRequiredType(Object value, Class<?> requiredType) -->Line_6 $$ if (value instanceof Number) [ FD ]
Line_2 $$ protected Object convertValueToRequiredType(Object value, Class<?> requiredType) -->Line_3 $$ if (String.class == requiredType) [ CD ]
Line_2 $$ protected Object convertValueToRequiredType(Object value, Class<?> requiredType) -->Line_3 $$ if (String.class == requiredType) [ FD ]
Line_3 $$ if (String.class == requiredType) -->Line_4 $$ return value.toString()[ CD ]
Line_6 $$ if (value instanceof Number) -->Line_9 $$ return NumberUtils.parseNumber(value.toString(), (Class<Number>) requiredType)[ CD ]
Line_3 $$ if (String.class == requiredType) -->Line_5 $$ if (Number.class.isAssignableFrom(requiredType)) [ CD ]
Line_2 $$ protected Object convertValueToRequiredType(Object value, Class<?> requiredType) -->Line_4 $$ return value.toString()[ FD ]
Line_2 $$ protected Object convertValueToRequiredType(Object value, Class<?> requiredType) -->Line_12 $$ throw new IllegalArgumentException("Value [" + value + "] is of type [" + value.getClass().getName() + "] and cannot be converted to required type [" + requiredType.getName() + "]")[ FD ]
