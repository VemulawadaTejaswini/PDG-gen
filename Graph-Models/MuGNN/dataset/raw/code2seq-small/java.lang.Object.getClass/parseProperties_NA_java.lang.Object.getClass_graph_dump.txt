Line_5 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_10 $$ boolean isEmptyList = entry.getValue() instanceof List && ((List<?>) entry.getValue()).isEmpty()[ FD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_30 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ FD ]
Line_5 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_11 $$ if (entry.getValue() instanceof Map) [ FD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_15 $$ if (typeNode != null) [ CD ]
Line_12 $$ Map<String, Object> propNode = (Map<String, Object>) entry.getValue()-->Line_20 $$ if (propNode.size() == 1 && propNode.get("enabled") != null) [ FD ]
Line_13 $$ String type-->Line_26 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_16 $$ type = typeNode.toString()-->Line_19 $$ type = ObjectMapper.CONTENT_TYPE[ FD ]
Line_4 $$ while (iterator.hasNext()) -->Line_6 $$ String fieldName = entry.getKey()[ CD ]
Line_5 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_12 $$ Map<String, Object> propNode = (Map<String, Object>) entry.getValue()[ FD ]
Line_12 $$ Map<String, Object> propNode = (Map<String, Object>) entry.getValue()-->Line_18 $$ if (propNode.get("properties") != null) [ FD ]
Line_34 $$ if (isEmptyList) -->Line_35 $$ iterator.remove()[ CD ]
Line_13 $$ String type-->Line_19 $$ type = ObjectMapper.CONTENT_TYPE[ FD ]
Line_16 $$ type = typeNode.toString()-->Line_26 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_4 $$ while (iterator.hasNext()) -->Line_10 $$ boolean isEmptyList = entry.getValue() instanceof List && ((List<?>) entry.getValue()).isEmpty()[ CD ]
Line_10 $$ boolean isEmptyList = entry.getValue() instanceof List && ((List<?>) entry.getValue()).isEmpty()-->Line_11 $$ if (entry.getValue() instanceof Map) [ FD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_14 $$ Object typeNode = propNode.get("type")[ CD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_26 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ CD ]
Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()-->Line_33 $$ iterator.remove()[ FD ]
Line_4 $$ while (iterator.hasNext()) -->Line_5 $$ Map.Entry<String, Object> entry = iterator.next()[ CD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_32 $$ DocumentMapperParser.checkNoRemainingFields(fieldName, propNode, parserContext.indexVersionCreated())[ CD ]
Line_15 $$ if (typeNode != null) -->Line_18 $$ if (propNode.get("properties") != null) [ CD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_32 $$ DocumentMapperParser.checkNoRemainingFields(fieldName, propNode, parserContext.indexVersionCreated())[ FD ]
Line_15 $$ if (typeNode != null) -->Line_16 $$ type = typeNode.toString()[ CD ]
Line_14 $$ Object typeNode = propNode.get("type")-->Line_16 $$ type = typeNode.toString()[ FD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_26 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_12 $$ Map<String, Object> propNode = (Map<String, Object>) entry.getValue()-->Line_31 $$ propNode.remove("type")[ FD ]
Line_6 $$ String fieldName = entry.getKey()-->Line_37 $$ throw new MapperParsingException("Expected map for property [fields] on field [" + fieldName + "] but got a " + fieldName.getClass())[ FD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_27 $$ if (typeParser == null) [ CD ]
Line_19 $$ type = ObjectMapper.CONTENT_TYPE-->Line_21 $$ type = ObjectMapper.CONTENT_TYPE[ FD ]
Line_21 $$ type = ObjectMapper.CONTENT_TYPE-->Line_26 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
Line_6 $$ String fieldName = entry.getKey()-->Line_32 $$ DocumentMapperParser.checkNoRemainingFields(fieldName, propNode, parserContext.indexVersionCreated())[ FD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_40 $$ DocumentMapperParser.checkNoRemainingFields(propsNode, parserContext.indexVersionCreated(), "DocType mapping definition has unsupported parameters: ")[ CD ]
Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()-->Line_35 $$ iterator.remove()[ FD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_31 $$ propNode.remove("type")[ CD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_34 $$ if (isEmptyList) [ CD ]
Line_18 $$ if (propNode.get("properties") != null) -->Line_20 $$ if (propNode.size() == 1 && propNode.get("enabled") != null) [ CD ]
Line_12 $$ Map<String, Object> propNode = (Map<String, Object>) entry.getValue()-->Line_32 $$ DocumentMapperParser.checkNoRemainingFields(fieldName, propNode, parserContext.indexVersionCreated())[ FD ]
Line_6 $$ String fieldName = entry.getKey()-->Line_30 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ FD ]
Line_5 $$ Map.Entry<String, Object> entry = iterator.next()-->Line_6 $$ String fieldName = entry.getKey()[ FD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_12 $$ Map<String, Object> propNode = (Map<String, Object>) entry.getValue()[ CD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_40 $$ DocumentMapperParser.checkNoRemainingFields(propsNode, parserContext.indexVersionCreated(), "DocType mapping definition has unsupported parameters: ")[ FD ]
Line_20 $$ if (propNode.size() == 1 && propNode.get("enabled") != null) -->Line_21 $$ type = ObjectMapper.CONTENT_TYPE[ CD ]
Line_26 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)-->Line_27 $$ if (typeParser == null) [ FD ]
Line_6 $$ String fieldName = entry.getKey()-->Line_7 $$ if (fieldName.contains(".")) [ FD ]
Line_18 $$ if (propNode.get("properties") != null) -->Line_19 $$ type = ObjectMapper.CONTENT_TYPE[ CD ]
Line_26 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)-->Line_30 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ FD ]
Line_12 $$ Map<String, Object> propNode = (Map<String, Object>) entry.getValue()-->Line_30 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ FD ]
Line_16 $$ type = typeNode.toString()-->Line_21 $$ type = ObjectMapper.CONTENT_TYPE[ FD ]
Line_13 $$ String type-->Line_21 $$ type = ObjectMapper.CONTENT_TYPE[ FD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_13 $$ String type[ CD ]
Line_13 $$ String type-->Line_16 $$ type = typeNode.toString()[ FD ]
Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()-->Line_4 $$ while (iterator.hasNext()) [ FD ]
Line_14 $$ Object typeNode = propNode.get("type")-->Line_15 $$ if (typeNode != null) [ FD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_4 $$ while (iterator.hasNext()) [ CD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_30 $$ objBuilder.add(typeParser.parse(fieldName, propNode, parserContext))[ CD ]
Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()-->Line_5 $$ Map.Entry<String, Object> entry = iterator.next()[ FD ]
Line_4 $$ while (iterator.hasNext()) -->Line_7 $$ if (fieldName.contains(".")) [ CD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()[ FD ]
Line_12 $$ Map<String, Object> propNode = (Map<String, Object>) entry.getValue()-->Line_14 $$ Object typeNode = propNode.get("type")[ FD ]
Line_4 $$ while (iterator.hasNext()) -->Line_11 $$ if (entry.getValue() instanceof Map) [ CD ]
Line_2 $$ protected static void parseProperties(ObjectMapper.Builder objBuilder, Map<String, Object> propsNode, ParserContext parserContext) -->Line_3 $$ Iterator<Map.Entry<String, Object>> iterator = propsNode.entrySet().iterator()[ CD ]
Line_11 $$ if (entry.getValue() instanceof Map) -->Line_33 $$ iterator.remove()[ CD ]
Line_19 $$ type = ObjectMapper.CONTENT_TYPE-->Line_26 $$ Mapper.TypeParser typeParser = parserContext.typeParser(type)[ FD ]
