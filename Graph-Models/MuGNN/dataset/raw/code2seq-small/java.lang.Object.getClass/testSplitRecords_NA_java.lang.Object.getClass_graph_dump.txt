Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_19 $$ reader.close()[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_3 $$ URL testFileUrl = getClass().getClassLoader().getResource(testFileName)[ FD ]
Line_8 $$ Configuration conf = new Configuration()-->Line_9 $$ conf.setInt(org.apache.hadoop.mapreduce.lib.input.LineRecordReader.MAX_LINE_LENGTH, Integer.MAX_VALUE)[ FD ]
Line_30 $$ while (reader.next(key, value)) -->Line_31 $$ ++numRecordsRemainingSplits[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_23 $$ while (reader.next(key, value)) [ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_19 $$ reader.close()[ CD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_23 $$ while (reader.next(key, value)) [ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_29 $$ int numRecordsRemainingSplits = 0[ CD ]
Line_28 $$ reader = new LineRecordReader(conf, split)-->Line_33 $$ reader.close()[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_15 $$ int numRecordsNoSplits = 0[ CD ]
Line_16 $$ while (reader.next(key, value)) -->Line_17 $$ ++numRecordsNoSplits[ CD ]
Line_5 $$ File testFile = new File(testFileUrl.getFile())-->Line_6 $$ long testFileSize = testFile.length()[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_13 $$ LongWritable key = new LongWritable()[ CD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_30 $$ while (reader.next(key, value)) [ FD ]
Line_13 $$ LongWritable key = new LongWritable()-->Line_16 $$ while (reader.next(key, value)) [ FD ]
Line_5 $$ File testFile = new File(testFileUrl.getFile())-->Line_7 $$ Path testFilePath = new Path(testFile.getAbsolutePath())[ FD ]
Line_21 $$ reader = new LineRecordReader(conf, split)-->Line_26 $$ reader.close()[ FD ]
Line_22 $$ int numRecordsFirstSplit = 0-->Line_24 $$ ++numRecordsFirstSplit[ FD ]
Line_3 $$ URL testFileUrl = getClass().getClassLoader().getResource(testFileName)-->Line_5 $$ File testFile = new File(testFileUrl.getFile())[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_16 $$ while (reader.next(key, value)) [ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_22 $$ int numRecordsFirstSplit = 0[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_4 $$ assertNotNull("Cannot find " + testFileName, testFileUrl)[ CD ]
Line_14 $$ Text value = new Text()-->Line_23 $$ while (reader.next(key, value)) [ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_30 $$ while (reader.next(key, value)) [ CD ]
Line_23 $$ while (reader.next(key, value)) -->Line_24 $$ ++numRecordsFirstSplit[ CD ]
Line_13 $$ LongWritable key = new LongWritable()-->Line_23 $$ while (reader.next(key, value)) [ FD ]
Line_11 $$ FileSplit split = new FileSplit(testFilePath, 0, testFileSize, (String[]) null)-->Line_20 $$ split = new FileSplit(testFilePath, 0, firstSplitLength, (String[]) null)[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_27 $$ split = new FileSplit(testFilePath, firstSplitLength, testFileSize - firstSplitLength, (String[]) null)[ CD ]
Line_11 $$ FileSplit split = new FileSplit(testFilePath, 0, testFileSize, (String[]) null)-->Line_27 $$ split = new FileSplit(testFilePath, firstSplitLength, testFileSize - firstSplitLength, (String[]) null)[ FD ]
Line_20 $$ split = new FileSplit(testFilePath, 0, firstSplitLength, (String[]) null)-->Line_27 $$ split = new FileSplit(testFilePath, firstSplitLength, testFileSize - firstSplitLength, (String[]) null)[ FD ]
Line_21 $$ reader = new LineRecordReader(conf, split)-->Line_30 $$ while (reader.next(key, value)) [ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_33 $$ reader.close()[ CD ]
Line_14 $$ Text value = new Text()-->Line_16 $$ while (reader.next(key, value)) [ FD ]
Line_14 $$ Text value = new Text()-->Line_30 $$ while (reader.next(key, value)) [ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_5 $$ File testFile = new File(testFileUrl.getFile())[ CD ]
Line_3 $$ URL testFileUrl = getClass().getClassLoader().getResource(testFileName)-->Line_4 $$ assertNotNull("Cannot find " + testFileName, testFileUrl)[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_7 $$ Path testFilePath = new Path(testFile.getAbsolutePath())[ CD ]
Line_28 $$ reader = new LineRecordReader(conf, split)-->Line_30 $$ while (reader.next(key, value)) [ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_9 $$ conf.setInt(org.apache.hadoop.mapreduce.lib.input.LineRecordReader.MAX_LINE_LENGTH, Integer.MAX_VALUE)[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_8 $$ Configuration conf = new Configuration()[ CD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_16 $$ while (reader.next(key, value)) [ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_10 $$ assertTrue("unexpected test data at " + testFile, testFileSize > firstSplitLength)[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_20 $$ split = new FileSplit(testFilePath, 0, firstSplitLength, (String[]) null)[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_28 $$ reader = new LineRecordReader(conf, split)[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_11 $$ FileSplit split = new FileSplit(testFilePath, 0, testFileSize, (String[]) null)[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_6 $$ long testFileSize = testFile.length()[ CD ]
Line_15 $$ int numRecordsNoSplits = 0-->Line_34 $$ assertEquals("Unexpected number of records in bzip2 compressed split", numRecordsNoSplits, numRecordsFirstSplit + numRecordsRemainingSplits)[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_21 $$ reader = new LineRecordReader(conf, split)[ CD ]
Line_13 $$ LongWritable key = new LongWritable()-->Line_30 $$ while (reader.next(key, value)) [ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_3 $$ URL testFileUrl = getClass().getClassLoader().getResource(testFileName)[ CD ]
Line_15 $$ int numRecordsNoSplits = 0-->Line_17 $$ ++numRecordsNoSplits[ FD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_26 $$ reader.close()[ FD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_33 $$ reader.close()[ FD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_21 $$ reader = new LineRecordReader(conf, split)[ FD ]
Line_21 $$ reader = new LineRecordReader(conf, split)-->Line_23 $$ while (reader.next(key, value)) [ FD ]
Line_12 $$ LineRecordReader reader = new LineRecordReader(conf, split)-->Line_28 $$ reader = new LineRecordReader(conf, split)[ FD ]
Line_21 $$ reader = new LineRecordReader(conf, split)-->Line_28 $$ reader = new LineRecordReader(conf, split)[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_34 $$ assertEquals("Unexpected number of records in bzip2 compressed split", numRecordsNoSplits, numRecordsFirstSplit + numRecordsRemainingSplits)[ CD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_14 $$ Text value = new Text()[ CD ]
Line_29 $$ int numRecordsRemainingSplits = 0-->Line_31 $$ ++numRecordsRemainingSplits[ FD ]
Line_21 $$ reader = new LineRecordReader(conf, split)-->Line_33 $$ reader.close()[ FD ]
Line_2 $$ private void testSplitRecords(String testFileName, long firstSplitLength) throws IOException -->Line_26 $$ reader.close()[ CD ]
