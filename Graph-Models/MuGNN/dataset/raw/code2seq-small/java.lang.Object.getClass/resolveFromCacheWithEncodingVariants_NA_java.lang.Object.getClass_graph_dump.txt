Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_5 $$ String file = "js/foo.js"[ CD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_12 $$ assertTrue("Expected " + resolved + " to be of type " + EncodedResource.class, resolved instanceof EncodedResource)[ CD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_6 $$ String gzFile = file + ".gz"[ CD ]
Line_5 $$ String file = "js/foo.js"-->Line_9 $$ Resource resolved = resolver.resolveResource(request, file, locations)[ FD ]
Line_8 $$ Resource gzResource = new ClassPathResource("test/" + gzFile, getClass())-->Line_10 $$ assertEquals(gzResource.getDescription(), resolved.getDescription())[ FD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_15 $$ assertEquals(resource.getDescription(), resolved.getDescription())[ CD ]
Line_5 $$ String file = "js/foo.js"-->Line_14 $$ resolved = resolver.resolveResource(request, file, locations)[ FD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_16 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ CD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_7 $$ Resource resource = new ClassPathResource("test/" + file, getClass())[ CD ]
Line_9 $$ Resource resolved = resolver.resolveResource(request, file, locations)-->Line_16 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ FD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_9 $$ Resource resolved = resolver.resolveResource(request, file, locations)[ CD ]
Line_13 $$ request = new MockHttpServletRequest("GET", "/js/foo.js")-->Line_14 $$ resolved = resolver.resolveResource(request, file, locations)[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/js/foo.js")-->Line_9 $$ Resource resolved = resolver.resolveResource(request, file, locations)[ FD ]
Line_14 $$ resolved = resolver.resolveResource(request, file, locations)-->Line_16 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ FD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_14 $$ resolved = resolver.resolveResource(request, file, locations)[ CD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_10 $$ assertEquals(gzResource.getDescription(), resolved.getDescription())[ CD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_11 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ CD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_8 $$ Resource gzResource = new ClassPathResource("test/" + gzFile, getClass())[ CD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/js/foo.js")[ CD ]
Line_9 $$ Resource resolved = resolver.resolveResource(request, file, locations)-->Line_14 $$ resolved = resolver.resolveResource(request, file, locations)[ FD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_17 $$ assertFalse("Expected " + resolved + " to *not* be of type " + EncodedResource.class, resolved instanceof EncodedResource)[ CD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_13 $$ request = new MockHttpServletRequest("GET", "/js/foo.js")[ CD ]
Line_14 $$ resolved = resolver.resolveResource(request, file, locations)-->Line_15 $$ assertEquals(resource.getDescription(), resolved.getDescription())[ FD ]
Line_9 $$ Resource resolved = resolver.resolveResource(request, file, locations)-->Line_11 $$ assertEquals(new ClassPathResource("test/" + file).getFilename(), resolved.getFilename())[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/js/foo.js")-->Line_13 $$ request = new MockHttpServletRequest("GET", "/js/foo.js")[ FD ]
Line_7 $$ Resource resource = new ClassPathResource("test/" + file, getClass())-->Line_15 $$ assertEquals(resource.getDescription(), resolved.getDescription())[ FD ]
Line_9 $$ Resource resolved = resolver.resolveResource(request, file, locations)-->Line_15 $$ assertEquals(resource.getDescription(), resolved.getDescription())[ FD ]
Line_2 $$ public void resolveFromCacheWithEncodingVariants() throws IOException -->Line_4 $$ request.addHeader("Accept-Encoding", "gzip")[ CD ]
Line_9 $$ Resource resolved = resolver.resolveResource(request, file, locations)-->Line_10 $$ assertEquals(gzResource.getDescription(), resolved.getDescription())[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/js/foo.js")-->Line_14 $$ resolved = resolver.resolveResource(request, file, locations)[ FD ]
Line_3 $$ MockHttpServletRequest request = new MockHttpServletRequest("GET", "/js/foo.js")-->Line_4 $$ request.addHeader("Accept-Encoding", "gzip")[ FD ]
