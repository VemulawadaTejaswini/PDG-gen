Line_6 $$ for (OptionElement optionElement : optionElements) -->Line_7 $$ if (processedOptionElements.contains(optionElement.getOptionName())) [ FD ]
Line_2 $$ private void loadClassDescriptorInCache(Object target) -->Line_3 $$ final Collection<OptionElement> optionElements = getOptionElements(target)[ FD ]
Line_2 $$ private void loadClassDescriptorInCache(Object target) -->Line_3 $$ final Collection<OptionElement> optionElements = getOptionElements(target)[ CD ]
Line_6 $$ for (OptionElement optionElement : optionElements) -->Line_11 $$ JavaMethod<Object, Collection> optionValueMethodForOption = getOptionValueMethodForOption(optionValueMethods, optionElement)[ FD ]
Line_4 $$ List<JavaMethod<Object, Collection>> optionValueMethods = loadValueMethodForOption(target.getClass())-->Line_11 $$ JavaMethod<Object, Collection> optionValueMethodForOption = getOptionValueMethodForOption(optionValueMethods, optionElement)[ FD ]
Line_6 $$ for (OptionElement optionElement : optionElements) -->Line_8 $$ throw new OptionValidationException(String.format("@Option '%s' linked to multiple elements in class '%s'.", optionElement.getOptionName(), target.getClass().getName()))[ FD ]
Line_2 $$ private void loadClassDescriptorInCache(Object target) -->Line_8 $$ throw new OptionValidationException(String.format("@Option '%s' linked to multiple elements in class '%s'.", optionElement.getOptionName(), target.getClass().getName()))[ FD ]
Line_5 $$ Set<String> processedOptionElements = new HashSet<String>()-->Line_10 $$ processedOptionElements.add(optionElement.getOptionName())[ FD ]
Line_2 $$ private void loadClassDescriptorInCache(Object target) -->Line_5 $$ Set<String> processedOptionElements = new HashSet<String>()[ CD ]
Line_6 $$ for (OptionElement optionElement : optionElements) -->Line_13 $$ cachedOptionValueMethods.put(optionElement, optionValueMethodForOption)[ FD ]
Line_6 $$ for (OptionElement optionElement : optionElements) -->Line_10 $$ processedOptionElements.add(optionElement.getOptionName())[ FD ]
Line_11 $$ JavaMethod<Object, Collection> optionValueMethodForOption = getOptionValueMethodForOption(optionValueMethods, optionElement)-->Line_13 $$ cachedOptionValueMethods.put(optionElement, optionValueMethodForOption)[ FD ]
Line_2 $$ private void loadClassDescriptorInCache(Object target) -->Line_4 $$ List<JavaMethod<Object, Collection>> optionValueMethods = loadValueMethodForOption(target.getClass())[ CD ]
Line_2 $$ private void loadClassDescriptorInCache(Object target) -->Line_12 $$ cachedOptionElements.put(target.getClass(), optionElement)[ FD ]
Line_5 $$ Set<String> processedOptionElements = new HashSet<String>()-->Line_7 $$ if (processedOptionElements.contains(optionElement.getOptionName())) [ FD ]
Line_2 $$ private void loadClassDescriptorInCache(Object target) -->Line_4 $$ List<JavaMethod<Object, Collection>> optionValueMethods = loadValueMethodForOption(target.getClass())[ FD ]
Line_6 $$ for (OptionElement optionElement : optionElements) -->Line_12 $$ cachedOptionElements.put(target.getClass(), optionElement)[ FD ]
