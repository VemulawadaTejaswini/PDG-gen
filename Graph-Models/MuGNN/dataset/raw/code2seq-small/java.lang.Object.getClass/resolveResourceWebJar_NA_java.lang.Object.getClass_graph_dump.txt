Line_2 $$ public void resolveResourceWebJar() -->Line_3 $$ Resource expected = mock(Resource.class)[ CD ]
Line_2 $$ public void resolveResourceWebJar() -->Line_6 $$ this.locations = Collections.singletonList(new ClassPathResource("/META-INF/resources/webjars/", getClass()))[ CD ]
Line_2 $$ public void resolveResourceWebJar() -->Line_7 $$ given(this.chain.resolveResource(this.request, expectedPath, this.locations)).willReturn(expected)[ CD ]
Line_2 $$ public void resolveResourceWebJar() -->Line_10 $$ verify(this.chain, times(1)).resolveResource(this.request, file, this.locations)[ CD ]
Line_2 $$ public void resolveResourceWebJar() -->Line_5 $$ String expectedPath = "/underscorejs/1.8.3/underscore.js"[ CD ]
Line_2 $$ public void resolveResourceWebJar() -->Line_4 $$ String file = "/underscorejs/underscore.js"[ CD ]
Line_8 $$ Resource actual = this.resolver.resolveResource(this.request, file, this.locations, this.chain)-->Line_9 $$ assertEquals(expected, actual)[ FD ]
Line_2 $$ public void resolveResourceWebJar() -->Line_8 $$ Resource actual = this.resolver.resolveResource(this.request, file, this.locations, this.chain)[ CD ]
Line_5 $$ String expectedPath = "/underscorejs/1.8.3/underscore.js"-->Line_7 $$ given(this.chain.resolveResource(this.request, expectedPath, this.locations)).willReturn(expected)[ FD ]
Line_3 $$ Resource expected = mock(Resource.class)-->Line_9 $$ assertEquals(expected, actual)[ FD ]
Line_4 $$ String file = "/underscorejs/underscore.js"-->Line_8 $$ Resource actual = this.resolver.resolveResource(this.request, file, this.locations, this.chain)[ FD ]
Line_4 $$ String file = "/underscorejs/underscore.js"-->Line_10 $$ verify(this.chain, times(1)).resolveResource(this.request, file, this.locations)[ FD ]
Line_2 $$ public void resolveResourceWebJar() -->Line_9 $$ assertEquals(expected, actual)[ CD ]
Line_3 $$ Resource expected = mock(Resource.class)-->Line_7 $$ given(this.chain.resolveResource(this.request, expectedPath, this.locations)).willReturn(expected)[ FD ]
