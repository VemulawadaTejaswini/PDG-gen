Line_2 $$ public void genericMethodReturnTypes() -->Line_6 $$ assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterizedWithArguments, new Object[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_20 $$ Method extractValueFrom = ReflectionUtils.findMethod(MyTypeWithMethods.class, "extractValueFrom", new Class[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_3 $$ Method notParameterized = ReflectionUtils.findMethod(MyTypeWithMethods.class, "notParameterized", new Class[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_26 $$ assertEquals(Object.class, AutowireUtils.resolveReturnTypeForFactoryMethod(extractMagicValue, new Object[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_9 $$ Method createNamedProxyWithDifferentTypes = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedProxy", new Class[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_12 $$ assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes, new Object[] [ CD ]
Line_9 $$ Method createNamedProxyWithDifferentTypes = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedProxy", new Class[] -->Line_10 $$ assertEquals(Long.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDifferentTypes, new Object[] [ FD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_19 $$ assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createVMock, new Object[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_23 $$ map.put(0, false)[ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_21 $$ assertEquals(Object.class, AutowireUtils.resolveReturnTypeForFactoryMethod(extractValueFrom, new Object[] [ CD ]
Line_13 $$ Method createMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createMock", new Class[] -->Line_15 $$ assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createMock, new Object[] [ FD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_25 $$ Method extractMagicValue = ReflectionUtils.findMethod(MyTypeWithMethods.class, "extractMagicValue", new Class[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_11 $$ Method createNamedProxyWithDuplicateTypes = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedProxy", new Class[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_14 $$ assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createMock, new Object[] [ CD ]
Line_13 $$ Method createMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createMock", new Class[] -->Line_14 $$ assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createMock, new Object[] [ FD ]
Line_18 $$ Method createVMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createVMock", new Class[] -->Line_19 $$ assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createVMock, new Object[] [ FD ]
Line_25 $$ Method extractMagicValue = ReflectionUtils.findMethod(MyTypeWithMethods.class, "extractMagicValue", new Class[] -->Line_26 $$ assertEquals(Object.class, AutowireUtils.resolveReturnTypeForFactoryMethod(extractMagicValue, new Object[] [ FD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_5 $$ Method notParameterizedWithArguments = ReflectionUtils.findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments", new Class[] [ CD ]
Line_7 $$ Method createProxy = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createProxy", new Class[] -->Line_8 $$ assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createProxy, new Object[] [ FD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_13 $$ Method createMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createMock", new Class[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_4 $$ assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized, new Object[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_8 $$ assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createProxy, new Object[] [ CD ]
Line_20 $$ Method extractValueFrom = ReflectionUtils.findMethod(MyTypeWithMethods.class, "extractValueFrom", new Class[] -->Line_21 $$ assertEquals(Object.class, AutowireUtils.resolveReturnTypeForFactoryMethod(extractValueFrom, new Object[] [ FD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_15 $$ assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createMock, new Object[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_18 $$ Method createVMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createVMock", new Class[] [ CD ]
Line_3 $$ Method notParameterized = ReflectionUtils.findMethod(MyTypeWithMethods.class, "notParameterized", new Class[] -->Line_4 $$ assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterized, new Object[] [ FD ]
Line_5 $$ Method notParameterizedWithArguments = ReflectionUtils.findMethod(MyTypeWithMethods.class, "notParameterizedWithArguments", new Class[] -->Line_6 $$ assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(notParameterizedWithArguments, new Object[] [ FD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_10 $$ assertEquals(Long.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDifferentTypes, new Object[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_24 $$ map.put(1, true)[ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_17 $$ assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedMock, new Object[] [ CD ]
Line_22 $$ Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()-->Line_23 $$ map.put(0, false)[ FD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_22 $$ Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()[ CD ]
Line_22 $$ Map<Integer, Boolean> map = new HashMap<Integer, Boolean>()-->Line_24 $$ map.put(1, true)[ FD ]
Line_11 $$ Method createNamedProxyWithDuplicateTypes = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedProxy", new Class[] -->Line_12 $$ assertEquals(String.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedProxyWithDuplicateTypes, new Object[] [ FD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_7 $$ Method createProxy = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createProxy", new Class[] [ CD ]
Line_2 $$ public void genericMethodReturnTypes() -->Line_16 $$ Method createNamedMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedMock", new Class[] [ CD ]
Line_16 $$ Method createNamedMock = ReflectionUtils.findMethod(MyTypeWithMethods.class, "createNamedMock", new Class[] -->Line_17 $$ assertEquals(Runnable.class, AutowireUtils.resolveReturnTypeForFactoryMethod(createNamedMock, new Object[] [ FD ]
