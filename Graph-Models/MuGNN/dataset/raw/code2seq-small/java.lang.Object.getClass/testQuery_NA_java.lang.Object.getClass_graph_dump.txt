Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_78 $$ s.createQuery("from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_5 $$ Foo foo = new Foo()[ CD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_272 $$ s = openSession()-->Line_294 $$ s.delete(baz)[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_51 $$ assertTrue("empty iterator", !iter.hasNext())[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_172 $$ while (rs.hasNext()) -->Line_178 $$ assertTrue(row[3] instanceof Foo)[ CD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_152 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_174 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_49 $$ assertTrue("empty query", list.size() == 0)[ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_92 $$ assertTrue("id query", list.size() == 1)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_47 $$ s.createQuery("from Baz baz left join baz.fooToGlarch join fetch baz.fooSet foo left join fetch foo.foo").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_72 $$ s.createQuery("select foo.foo from Foo foo where foo = some(from Foo x where (x.long > foo.foo.long))").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_27 $$ if ((getDialect() instanceof DB2Dialect) && !(getDialect() instanceof DerbyDialect)) -->Line_29 $$ s.createQuery("from Foo foo where lower( (foo.foo.string || 'foo') || 'bar' ) = 'foo'").list()[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_104 $$ s.createQuery("from Foo foo where foo.foo = ?").setParameter(0, foo.getFoo(), s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_210 $$ while (iter.hasNext()) [ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_54 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_150 $$ assertTrue(!rs.hasNext())[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_6 $$ s.save(foo)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ FD ]
Line_171 $$ int count = 0-->Line_173 $$ count++[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_17 $$ s.createQuery("select foo.foo.foo.string from Foo foo where foo.foo = 'bar'").list()[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_256 $$ s.createQuery("select foo.foo.string from Foo foo where foo.foo in ('1','2','3')").list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_209 $$ iter = s.createQuery("from Named n").iterate()[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_210 $$ while (iter.hasNext()) [ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_51 $$ assertTrue("empty iterator", !iter.hasNext())[ CD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_182 $$ rs = list.iterator()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_3 $$ Session s = openSession()-->Line_265 $$ int len = s.createQuery("from Foo as foo join foo.foo as foo2 where foo2.id >'a' or foo2.id <'a'").list().size()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_209 $$ iter = s.createQuery("from Named n").iterate()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_235 $$ s.createQuery("select baz.code, min(baz.count) from Baz baz group by baz.code").iterate()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_183 $$ count = 0-->Line_196 $$ count++[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_246 $$ s.createQuery("from Baz baz inner join baz.collectionComponent.nested.foos foo where foo.string is null").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_37 $$ s.createQuery("from Foo as foo where foo.component.glarch.name is not null").list()[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_84 $$ assertTrue("component query", list.size() == 2)[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_230 $$ while (iter.hasNext()) [ FD ]
Line_272 $$ s = openSession()-->Line_273 $$ txn = s.beginTransaction()[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_206 $$ assertTrue(s.createQuery("from java.lang.Object as o").list().size() == 15)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_8 $$ s.save(foo2)[ CD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_73 $$ if (!(getDialect() instanceof TimesTenDialect)) [ CD ]
Line_195 $$ while (rs.hasNext()) -->Line_199 $$ assertTrue(row[1] instanceof FooComponent)[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ CD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_164 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_272 $$ s = openSession()-->Line_283 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()[ CD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_129 $$ bar.setBaz(baz)[ CD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_40 $$ assertTrue(list.size() == 2 && list.get(0) instanceof FooProxy)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_296 $$ s.delete(foop)[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_275 $$ assertTrue(Hibernate.isInitialized(baz.getManyToAny()))[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_280 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_6 $$ s.save(foo)[ CD ]
Line_3 $$ Session s = openSession()-->Line_13 $$ s.createQuery("from Baz baz left outer join fetch baz.fooToGlarch").list()[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_165 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ CD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_221 $$ if (!(getDialect() instanceof HSQLDialect)) -->Line_222 $$ assertTrue(cnt == 2)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_97 $$ assertTrue("query", list.size() == 1)[ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_204 $$ s.save(new Holder("ice T"))[ CD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_42 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_297 $$ txn.commit()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_128 $$ baz.setDefaults()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_131 $$ baz.getManyToAny().add(bar)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_77 $$ s.createQuery("from Foo foo where foo.foo.string='baz' and foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_174 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ CD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_39 $$ list = s.createQuery("from Foo").list()[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_252 $$ s.createQuery("from Foo foo join foo.foo where foo.foo in ('1','2','3')").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_171 $$ int count = 0-->Line_185 $$ count++[ FD ]
Line_3 $$ Session s = openSession()-->Line_18 $$ s.createQuery("select foo.foo.foo.foo.string from Foo foo where foo.foo = 'bar'").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_53 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_194 $$ count = 0[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_100 $$ assertTrue("components of components", list.size() == 2)[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_204 $$ s.save(new Holder("ice T"))[ FD ]
Line_193 $$ rs = list.iterator()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_108 $$ while (iter.hasNext()) [ CD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_40 $$ assertTrue(list.size() == 2 && list.get(0) instanceof FooProxy)[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_18 $$ s.createQuery("select foo.foo.foo.foo.string from Foo foo where foo.foo = 'bar'").list()[ CD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_164 $$ assertTrue("projection iterate (results)", rs.hasNext())[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_134 $$ s.save(baz)[ FD ]
Line_62 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_66 $$ assertTrue("component query", list.size() == 0)[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_210 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_206 $$ assertTrue(s.createQuery("from java.lang.Object as o").list().size() == 15)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_88 $$ assertTrue("component query", list.size() == 2)[ CD ]
Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()-->Line_230 $$ while (iter.hasNext()) [ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_150 $$ assertTrue(!rs.hasNext())[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_54 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_115 $$ assertTrue(iter.next() instanceof Date)[ FD ]
Line_195 $$ while (rs.hasNext()) -->Line_197 $$ Object[] row = (Object[]) rs.next()[ CD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_237 $$ assertFalse(iter.hasNext())[ FD ]
Line_27 $$ if ((getDialect() instanceof DB2Dialect) && !(getDialect() instanceof DerbyDialect)) -->Line_30 $$ s.createQuery("from Foo foo where repeat( (foo.foo.string || 'foo') || 'bar', 2 ) = 'foo'").list()[ CD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_78 $$ s.createQuery("from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()[ CD ]
Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_217 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_126 $$ Bar bar = new Bar()[ CD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_272 $$ s = openSession()-->Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_293 $$ s.delete(barp)[ CD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_230 $$ while (iter.hasNext()) [ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ CD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_171 $$ int count = 0[ CD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_272 $$ s = openSession()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_164 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_237 $$ assertFalse(iter.hasNext())[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_294 $$ s.delete(baz)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_235 $$ s.createQuery("select baz.code, min(baz.count) from Baz baz group by baz.code").iterate()[ CD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_24 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo = 'bar' and foo.foo.foo.foo = 'baz'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_225 $$ Query qu = s.createQuery("from Named n where n.name = :name")[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_156 $$ s.createQuery("select new Foo(fo.integer) from Foo fo").list()[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_76 $$ s.createQuery("from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long) and foo.foo.string='baz'").list()[ CD ]
Line_170 $$ rs = list.iterator()-->Line_174 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_272 $$ s = openSession()[ CD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_272 $$ s = openSession()-->Line_296 $$ s.delete(foop)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_297 $$ txn.commit()[ CD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_126 $$ Bar bar = new Bar()-->Line_131 $$ baz.getManyToAny().add(bar)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_162 $$ assertTrue(list.size() == 3)[ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_172 $$ while (rs.hasNext()) -->Line_175 $$ assertTrue(row[0] instanceof Long)[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_54 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_261 $$ s.createQuery("from Foo foo1 left join foo1.foo foo2 left join foo2.foo where foo1.string is not null").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_271 $$ s.close()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_257 $$ s.createQuery("select foo.foo.string from Foo foo where foo.foo.string in ('1','2','3')").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_38 $$ s.createQuery("from Foo as foo left outer join foo.component.glarch as glarch where glarch.name = 'foo'").list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ CD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_126 $$ Bar bar = new Bar()-->Line_133 $$ s.save(bar)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_272 $$ s = openSession()-->Line_284 $$ assertTrue(s.createQuery("select bar from Bar bar join bar.baz b where b.stringDateMap['big bang'] < b.stringDateMap['now'] and b.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()[ FD ]
Line_3 $$ Session s = openSession()-->Line_278 $$ s.createQuery("from Baz baz join baz.manyToAny").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_164 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_49 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_171 $$ int count = 0-->Line_194 $$ count = 0[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_280 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())-->Line_296 $$ s.delete(foop)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_262 $$ s.createQuery("from Foo foo1 left join foo1.foo.foo where foo1.string is not null").list()[ CD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_56 $$ foo.setString("fizard")[ CD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_184 $$ while (rs.hasNext()) [ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_294 $$ s.delete(baz)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_258 $$ s.createQuery("select foo.foo.long from Foo foo where foo.foo.string in ('1','2','3')").list()[ CD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_183 $$ count = 0-->Line_194 $$ count = 0[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_17 $$ s.createQuery("select foo.foo.foo.string from Foo foo where foo.foo = 'bar'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_44 $$ s.createQuery("from Foo, Bar").list()[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_19 $$ s.createQuery("select foo from Foo foo where foo.foo.foo = 'bar'").list()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_141 $$ assertTrue(!rs.hasNext())[ CD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_170 $$ rs = list.iterator()-->Line_184 $$ while (rs.hasNext()) [ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_104 $$ s.createQuery("from Foo foo where foo.foo = ?").setParameter(0, foo.getFoo(), s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_180 $$ assertTrue(count != 0)[ CD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_147 $$ assertTrue(!rs.hasNext())[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_115 $$ assertTrue(iter.next() instanceof Date)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_166 $$ ScrollableResults sr = s.createQuery("select new Foo(fo.x) from Foo fo").scroll()[ CD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_55 $$ foo.getFoo().setFoo(foo)[ CD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_60 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_208 $$ assertTrue(s.createQuery("from Named n where n.name is not null").list().size() == 4)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_246 $$ s.createQuery("from Baz baz inner join baz.collectionComponent.nested.foos foo where foo.string is null").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_154 $$ s.createQuery("from Foo foo where foo.boolean = ?").setParameter(0, new Boolean(true), StandardBasicTypes.BOOLEAN).list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_260 $$ s.createQuery("select count(*) from Foo foo where foo.foo.string in ('1','2','3') group by foo.foo.long").list()[ CD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_166 $$ ScrollableResults sr = s.createQuery("select new Foo(fo.x) from Foo fo").scroll()-->Line_167 $$ assertTrue("projection scroll (results)", sr.next())[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_11 $$ Foo foof = (Foo) list.get(0)[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_182 $$ rs = list.iterator()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_234 $$ assertTrue(c == 16)[ CD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_186 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_195 $$ while (rs.hasNext()) -->Line_201 $$ assertTrue(row[3] instanceof Foo)[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_3 $$ Session s = openSession()-->Line_254 $$ s.createQuery("from Foo foo left join foo.foo where foo.foo in ('1','2','3')").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_280 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_25 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo.foo.string = 'a' and foo.foo.string = 'b'").list()[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_208 $$ assertTrue(s.createQuery("from Named n where n.name is not null").list().size() == 4)[ CD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_241 $$ assertTrue(list.size() == 1)[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_294 $$ s.delete(baz)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_172 $$ while (rs.hasNext()) [ CD ]
Line_229 $$ int c = 0-->Line_232 $$ c++[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_129 $$ bar.setBaz(baz)[ FD ]
Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_275 $$ assertTrue(Hibernate.isInitialized(baz.getManyToAny()))[ CD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_40 $$ assertTrue(list.size() == 2 && list.get(0) instanceof FooProxy)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_209 $$ iter = s.createQuery("from Named n").iterate()[ CD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_54 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_53 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_60 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_3 $$ Session s = openSession()-->Line_46 $$ s.createQuery("from Baz baz left join baz.fooToGlarch join baz.fooSet").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_184 $$ while (rs.hasNext()) -->Line_188 $$ assertTrue(row[1] instanceof String)[ CD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()-->Line_237 $$ assertFalse(iter.hasNext())[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_140 $$ assertTrue("count", ((Long) rs.next()).longValue() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_11 $$ Foo foof = (Foo) list.get(0)-->Line_12 $$ assertTrue(Hibernate.isInitialized(foof.getFoo()))[ FD ]
Line_253 $$ if (!(getDialect() instanceof HSQLDialect))-->Line_254 $$ s.createQuery("from Foo foo left join foo.foo where foo.foo in ('1','2','3')").list()[ CD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_183 $$ count = 0-->Line_185 $$ count++[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_144 $$ assertTrue(!rs.hasNext())[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_56 $$ foo.setString("fizard")[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_164 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_152 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_247 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect)) -->Line_250 $$ s.createQuery("from Baz baz where 'b' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)").list()[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_115 $$ assertTrue(iter.next() instanceof Date)[ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_215 $$ int cnt = 0[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_292 $$ s.createQuery("from Foo foo where foo.integer < 10 order by foo.string").setMaxResults(12).list()[ CD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_150 $$ assertTrue(!rs.hasNext())[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_9 $$ foo.setFoo(foo2)[ CD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_153 $$ assertTrue(!rs.hasNext())[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_281 $$ assertTrue(foop == baz.getManyToAny().get(1))[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_267 $$ for (Object entity : s.createQuery("from Holder").list()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_262 $$ s.createQuery("from Foo foo1 left join foo1.foo.foo where foo1.string is not null").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_131 $$ baz.getManyToAny().add(bar)[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_141 $$ assertTrue(!rs.hasNext())[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_156 $$ s.createQuery("select new Foo(fo.integer) from Foo fo").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_183 $$ count = 0[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_273 $$ txn = s.beginTransaction()-->Line_297 $$ txn.commit()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_247 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect)) -->Line_249 $$ s.createQuery("from Baz baz where 'a' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)").list()[ CD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_210 $$ while (iter.hasNext()) [ FD ]
Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_231 $$ iter.next()[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_172 $$ while (rs.hasNext()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_74 $$ s.createQuery("select foo.foo from Foo foo where foo.long = some( select max(x.long) from Foo x where (x.long > foo.foo.long) group by x.foo )").list()[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_153 $$ assertTrue(!rs.hasNext())[ FD ]
Line_3 $$ Session s = openSession()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_172 $$ while (rs.hasNext()) -->Line_177 $$ assertTrue(row[2] instanceof Foo)[ CD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_293 $$ s.delete(barp)[ FD ]
Line_3 $$ Session s = openSession()-->Line_35 $$ s.createQuery("select baz from Baz as baz join baz.fooArray foo group by baz order by sum(foo.float)").iterate()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_21 $$ s.createQuery("select foo.foo.foo.string from Foo foo where foo.foo.foo.foo.string = 'bar'").list()[ CD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_230 $$ while (iter.hasNext()) -->Line_231 $$ iter.next()[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_105 $$ assertTrue(!s.createQuery("from Bar bar where bar.string='a string' or bar.string='a string'").iterate().hasNext())[ CD ]
Line_3 $$ Session s = openSession()-->Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ CD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_172 $$ while (rs.hasNext()) -->Line_176 $$ assertTrue(row[1] instanceof String)[ CD ]
Line_5 $$ Foo foo = new Foo()-->Line_55 $$ foo.getFoo().setFoo(foo)[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_280 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_165 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_182 $$ rs = list.iterator()-->Line_186 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_132 $$ baz.getManyToAny().add(foo)[ CD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_3 $$ Session s = openSession()-->Line_43 $$ s.createQuery("from Bar, Bar").list()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_174 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_49 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ FD ]
Line_210 $$ while (iter.hasNext()) -->Line_211 $$ assertTrue(iter.next() instanceof Named)[ CD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_237 $$ assertFalse(iter.hasNext())[ FD ]
Line_73 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_74 $$ s.createQuery("select foo.foo from Foo foo where foo.long = some( select max(x.long) from Foo x where (x.long > foo.foo.long) group by x.foo )").list()[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_282 $$ barp.setBaz(baz)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_174 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_292 $$ s.createQuery("from Foo foo where foo.integer < 10 order by foo.string").setMaxResults(12).list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ CD ]
Line_127 $$ Baz baz = new Baz()-->Line_282 $$ barp.setBaz(baz)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_271 $$ s.close()[ CD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_247 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect)) -->Line_248 $$ s.createQuery("from Baz baz inner join baz.fooSet where '1' in (from baz.fooSet foo where foo.string is not null)").list()[ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_60 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_221 $$ if (!(getDialect() instanceof HSQLDialect)) -->Line_223 $$ assertTrue(s.createQuery("from Named n0, Named n1 where n0.name = n1.name").list().size() == 7)[ CD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_19 $$ s.createQuery("select foo from Foo foo where foo.foo.foo = 'bar'").list()[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_186 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_194 $$ count = 0-->Line_196 $$ count++[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_237 $$ assertFalse(iter.hasNext())[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_255 $$ s.createQuery("select foo.foo from Foo foo where foo.foo in ('1','2','3')").list()[ CD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_7 $$ Foo foo2 = new Foo()-->Line_9 $$ foo.setFoo(foo2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_184 $$ while (rs.hasNext()) [ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_130 $$ baz.setManyToAny(new ArrayList())[ FD ]
Line_3 $$ Session s = openSession()-->Line_155 $$ s.createQuery("select new Foo(fo.x) from Fo fo").list()[ FD ]
Line_172 $$ while (rs.hasNext()) -->Line_174 $$ Object[] row = (Object[]) rs.next()[ CD ]
Line_3 $$ Session s = openSession()-->Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_58 $$ if (!(getDialect() instanceof InterbaseDialect)) [ CD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_4 $$ Transaction txn = s.beginTransaction()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_261 $$ s.createQuery("from Foo foo1 left join foo1.foo foo2 left join foo2.foo where foo1.string is not null").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_170 $$ rs = list.iterator()-->Line_172 $$ while (rs.hasNext()) [ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_110 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ CD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_153 $$ assertTrue(!rs.hasNext())[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_53 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_267 $$ for (Object entity : s.createQuery("from Holder").list()) -->Line_268 $$ s.delete(entity)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_193 $$ rs = list.iterator()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ CD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_44 $$ s.createQuery("from Foo, Bar").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_20 $$ s.createQuery("select foo.foo.foo.foo.string from Foo foo where foo.foo.foo = 'bar'").list()[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_32 $$ s.createQuery("from Bar foo where foo.foo.integer is not null or repeat( (foo.foo.string || 'foo') || 'bar', (5+5)/2 ) = 'foo'").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_31 $$ s.createQuery("from Bar foo where foo.foo.integer is not null and repeat( (foo.foo.string || 'foo') || 'bar', (5+5)/2 ) = 'foo'").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_211 $$ assertTrue(iter.next() instanceof Named)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_153 $$ assertTrue(!rs.hasNext())[ CD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_172 $$ while (rs.hasNext()) -->Line_173 $$ count++[ CD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_182 $$ rs = list.iterator()-->Line_184 $$ while (rs.hasNext()) [ FD ]
Line_272 $$ s = openSession()-->Line_292 $$ s.createQuery("from Foo foo where foo.integer < 10 order by foo.string").setMaxResults(12).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ CD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_209 $$ iter = s.createQuery("from Named n").iterate()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_13 $$ s.createQuery("from Baz baz left outer join fetch baz.fooToGlarch").list()[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_53 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_70 $$ s.createQuery("from Foo foo where not exists (from Bar bar where bar.id = foo.id)").list()[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ CD ]
Line_184 $$ while (rs.hasNext()) -->Line_185 $$ count++[ CD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_149 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ FD ]
Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_69 $$ assertTrue("component query", list.size() == 2)[ CD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_147 $$ assertTrue(!rs.hasNext())[ CD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_53 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_186 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_257 $$ s.createQuery("select foo.foo.string from Foo foo where foo.foo.string in ('1','2','3')").list()[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_133 $$ s.save(bar)[ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_226 $$ qu.getReturnTypes()[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_27 $$ if ((getDialect() instanceof DB2Dialect) && !(getDialect() instanceof DerbyDialect)) -->Line_28 $$ s.createQuery("from Foo foo where lower( foo.foo.string ) = 'foo'").list()[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_144 $$ assertTrue(!rs.hasNext())[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_107 $$ int i = 0[ CD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_211 $$ assertTrue(iter.next() instanceof Named)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_243 $$ System.out.println(list)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_277 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_23 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo.foo = foo.foo.foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_70 $$ s.createQuery("from Foo foo where not exists (from Bar bar where bar.id = foo.id)").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_105 $$ assertTrue(!s.createQuery("from Bar bar where bar.string='a string' or bar.string='a string'").iterate().hasNext())[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_217 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_272 $$ s = openSession()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_49 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_281 $$ assertTrue(foop == baz.getManyToAny().get(1))[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_184 $$ while (rs.hasNext()) [ FD ]
Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_182 $$ rs = list.iterator()[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()-->Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_227 $$ qu.getNamedParameters()[ CD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_170 $$ rs = list.iterator()-->Line_186 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ CD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_127 $$ Baz baz = new Baz()[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_252 $$ s.createQuery("from Foo foo join foo.foo where foo.foo in ('1','2','3')").list()[ CD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_108 $$ while (iter.hasNext()) -->Line_109 $$ i++[ CD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_172 $$ while (rs.hasNext()) [ FD ]
Line_3 $$ Session s = openSession()-->Line_263 $$ s.createQuery("from Foo foo1 left join foo1.foo foo2 left join foo1.foo.foo foo3 where foo1.string is not null").list()[ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_231 $$ iter.next()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_12 $$ assertTrue(Hibernate.isInitialized(foof.getFoo()))[ CD ]
Line_127 $$ Baz baz = new Baz()-->Line_275 $$ assertTrue(Hibernate.isInitialized(baz.getManyToAny()))[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_108 $$ while (iter.hasNext()) -->Line_111 $$ assertTrue(row[0] instanceof String && (row[1] == null || row[1] instanceof Date))[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_282 $$ barp.setBaz(baz)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_171 $$ int count = 0-->Line_196 $$ count++[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_184 $$ while (rs.hasNext()) -->Line_189 $$ assertTrue(row[2] instanceof Long)[ CD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_134 $$ s.save(baz)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_168 $$ assertTrue("projection scroll (return check)", Foo.class.isAssignableFrom(sr.get(0).getClass()))[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_209 $$ iter = s.createQuery("from Named n").iterate()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_277 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)-->Line_293 $$ s.delete(barp)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_217 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_8 $$ s.save(foo2)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_167 $$ assertTrue("projection scroll (results)", sr.next())[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_34 $$ if (getDialect() instanceof SybaseDialect) -->Line_35 $$ s.createQuery("select baz from Baz as baz join baz.fooArray foo group by baz order by sum(foo.float)").iterate()[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_164 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_86 $$ assertTrue("component query", list.size() == 1)[ CD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_20 $$ s.createQuery("select foo.foo.foo.foo.string from Foo foo where foo.foo.foo = 'bar'").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_29 $$ s.createQuery("from Foo foo where lower( (foo.foo.string || 'foo') || 'bar' ) = 'foo'").list()[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_289 $$ assertTrue(list.size() == 2)[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_216 $$ while (iter.hasNext()) [ CD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_218 $$ if (row[0] != row[1])-->Line_219 $$ cnt++[ CD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_152 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ CD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_54 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_294 $$ s.delete(baz)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_172 $$ while (rs.hasNext()) [ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_230 $$ while (iter.hasNext()) [ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_186 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_260 $$ s.createQuery("select count(*) from Foo foo where foo.foo.string in ('1','2','3') group by foo.foo.long").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_128 $$ baz.setDefaults()[ CD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_26 $$ s.createQuery("from Bar bar, foo in elements(bar.baz.fooArray)").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_38 $$ s.createQuery("from Foo as foo left outer join foo.component.glarch as glarch where glarch.name = 'foo'").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_45 $$ s.createQuery("from Baz baz left join baz.fooToGlarch, Bar bar join bar.foo").list()[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_170 $$ rs = list.iterator()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_119 $$ foo.setString("from BoogieDown  -tinsel town  =!@#$^&*())")[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_284 $$ assertTrue(s.createQuery("select bar from Bar bar join bar.baz b where b.stringDateMap['big bang'] < b.stringDateMap['now'] and b.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_119 $$ foo.setString("from BoogieDown  -tinsel town  =!@#$^&*())")[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_272 $$ s = openSession()-->Line_285 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['big bang'] < bar.baz.stringDateMap['now'] and bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_191 $$ assertTrue(count != 0)[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_149 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_152 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_215 $$ int cnt = 0-->Line_219 $$ cnt++[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_126 $$ Bar bar = new Bar()-->Line_129 $$ bar.setBaz(baz)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_146 $$ assertTrue("count(*) group by", ((Object[]) rs.next())[0].equals(new Long(3)))[ CD ]
Line_184 $$ while (rs.hasNext()) -->Line_187 $$ assertTrue(row[0] instanceof Double)[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_147 $$ assertTrue(!rs.hasNext())[ FD ]
Line_58 $$ if (!(getDialect() instanceof InterbaseDialect)) -->Line_60 $$ assertTrue("component query", list.size() == 2)[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_295 $$ s.delete(foop.getFoo())[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_259 $$ s.createQuery("select count(*) from Foo foo where foo.foo.string in ('1','2','3') or foo.foo.long in (1,2,3)").list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_152 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_110 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_144 $$ assertTrue(!rs.hasNext())[ CD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_82 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_205 $$ s.save(new Holder("ice cube"))[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_6 $$ s.save(foo)[ FD ]
Line_272 $$ s = openSession()-->Line_295 $$ s.delete(foop.getFoo())[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_268 $$ s.delete(entity)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_213 $$ s.save(new Holder("bar"))[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_237 $$ assertFalse(iter.hasNext())[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ CD ]
Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_276 $$ assertTrue(baz.getManyToAny().size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_3 $$ Session s = openSession()-->Line_223 $$ assertTrue(s.createQuery("from Named n0, Named n1 where n0.name = n1.name").list().size() == 7)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_195 $$ while (rs.hasNext()) -->Line_200 $$ assertTrue(row[2] instanceof Foo)[ CD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_7 $$ Foo foo2 = new Foo()-->Line_8 $$ s.save(foo2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_155 $$ s.createQuery("select new Foo(fo.x) from Fo fo").list()[ CD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_165 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_174 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ CD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_153 $$ assertTrue(!rs.hasNext())[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_171 $$ int count = 0-->Line_183 $$ count = 0[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_54 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()-->Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_247 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect)) [ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_283 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_165 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_3 $$ Session s = openSession()-->Line_255 $$ s.createQuery("select foo.foo from Foo foo where foo.foo in ('1','2','3')").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_184 $$ while (rs.hasNext()) [ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_107 $$ int i = 0-->Line_109 $$ i++[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_264 $$ s.createQuery("select foo.formula from Foo foo where foo.formula > 0").list()[ FD ]
Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_7 $$ Foo foo2 = new Foo()[ CD ]
Line_3 $$ Session s = openSession()-->Line_207 $$ assertTrue(s.createQuery("from Named").list().size() == 7)[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) [ CD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_295 $$ s.delete(foop.getFoo())[ CD ]
Line_272 $$ s = openSession()-->Line_293 $$ s.delete(barp)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_130 $$ baz.setManyToAny(new ArrayList())[ CD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_115 $$ assertTrue(iter.next() instanceof Date)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_211 $$ assertTrue(iter.next() instanceof Named)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_231 $$ iter.next()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_60 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ CD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_16 $$ assertTrue(row1[0] == foo && row1[1] == foo2)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_298 $$ s.close()[ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_193 $$ rs = list.iterator()[ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_15 $$ Object[] row1 = (Object[]) list.get(0)[ FD ]
Line_3 $$ Session s = openSession()-->Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_113 $$ assertTrue(i == 3)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_291 $$ assertTrue(list.size() == 2)[ CD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_143 $$ assertTrue("count", ((Long) rs.next()).longValue() == 2)[ CD ]
Line_3 $$ Session s = openSession()-->Line_30 $$ s.createQuery("from Foo foo where repeat( (foo.foo.string || 'foo') || 'bar', 2 ) = 'foo'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_270 $$ txn.commit()[ CD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_277 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)-->Line_282 $$ barp.setBaz(baz)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_27 $$ if ((getDialect() instanceof DB2Dialect) && !(getDialect() instanceof DerbyDialect)) -->Line_31 $$ s.createQuery("from Bar foo where foo.foo.integer is not null and repeat( (foo.foo.string || 'foo') || 'bar', (5+5)/2 ) = 'foo'").list()[ CD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_3 $$ Session s = openSession()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_284 $$ assertTrue(s.createQuery("select bar from Bar bar join bar.baz b where b.stringDateMap['big bang'] < b.stringDateMap['now'] and b.stringDateMap['now'] is not null").list().size() == 1)[ CD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_184 $$ while (rs.hasNext()) [ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_281 $$ assertTrue(foop == baz.getManyToAny().get(1))[ CD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_3 $$ Session s = openSession()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_24 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo = 'bar' and foo.foo.foo.foo = 'baz'").list()[ CD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_77 $$ s.createQuery("from Foo foo where foo.foo.string='baz' and foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ CD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_298 $$ s.close()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_9 $$ foo.setFoo(foo2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_265 $$ int len = s.createQuery("from Foo as foo join foo.foo as foo2 where foo2.id >'a' or foo2.id <'a'").list().size()[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_53 $$ assertTrue("query", list.size() == 1)[ CD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_15 $$ Object[] row1 = (Object[]) list.get(0)[ CD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_195 $$ while (rs.hasNext()) [ CD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_149 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_186 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_172 $$ while (rs.hasNext()) [ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_3 $$ Session s = openSession()-->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_58 $$ if (!(getDialect() instanceof InterbaseDialect)) -->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_210 $$ while (iter.hasNext()) [ CD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_296 $$ s.delete(foop)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_60 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()-->Line_231 $$ iter.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_79 $$ s.createQuery("select foo.string, foo.date, foo.foo.string, foo.id from Foo foo, Baz baz where foo in elements(baz.fooArray) and foo.string like 'foo'").iterate()[ FD ]
Line_3 $$ Session s = openSession()-->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_211 $$ assertTrue(iter.next() instanceof Named)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_221 $$ if (!(getDialect() instanceof HSQLDialect)) [ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_3 $$ Session s = openSession()[ CD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_277 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_229 $$ int c = 0[ CD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()[ CD ]
Line_3 $$ Session s = openSession()-->Line_166 $$ ScrollableResults sr = s.createQuery("select new Foo(fo.x) from Foo fo").scroll()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_216 $$ while (iter.hasNext()) -->Line_218 $$ if (row[0] != row[1])[ CD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_150 $$ assertTrue(!rs.hasNext())[ FD ]
Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()-->Line_237 $$ assertFalse(iter.hasNext())[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_134 $$ s.save(baz)[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()[ CD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_108 $$ while (iter.hasNext()) [ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_285 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['big bang'] < bar.baz.stringDateMap['now'] and bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()[ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_22 $$ if (!(getDialect() instanceof HSQLDialect))[ CD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_45 $$ s.createQuery("from Baz baz left join baz.fooToGlarch, Bar bar join bar.foo").list()[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_165 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_216 $$ while (iter.hasNext()) -->Line_217 $$ Object[] row = (Object[]) iter.next()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_264 $$ s.createQuery("select foo.formula from Foo foo where foo.formula > 0").list()[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_84 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_182 $$ rs = list.iterator()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_11 $$ Foo foof = (Foo) list.get(0)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_42 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_150 $$ assertTrue(!rs.hasNext())[ CD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_217 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ CD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_152 $$ assertTrue("id query count", ((Long) rs.next()).longValue() == 1)[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_21 $$ s.createQuery("select foo.foo.foo.string from Foo foo where foo.foo.foo.foo.string = 'bar'").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_170 $$ rs = list.iterator()[ CD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_53 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_195 $$ while (rs.hasNext()) -->Line_196 $$ count++[ CD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_102 $$ assertTrue("by id query", list.size() == 1)[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_225 $$ Query qu = s.createQuery("from Named n where n.name = :name")-->Line_227 $$ qu.getNamedParameters()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_27 $$ if ((getDialect() instanceof DB2Dialect) && !(getDialect() instanceof DerbyDialect)) -->Line_32 $$ s.createQuery("from Bar foo where foo.foo.integer is not null or repeat( (foo.foo.string || 'foo') || 'bar', (5+5)/2 ) = 'foo'").list()[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_278 $$ s.createQuery("from Baz baz join baz.manyToAny").list()[ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_280 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())-->Line_295 $$ s.delete(foop.getFoo())[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_273 $$ txn = s.beginTransaction()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_54 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_40 $$ assertTrue(list.size() == 2 && list.get(0) instanceof FooProxy)[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_172 $$ while (rs.hasNext()) [ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_250 $$ s.createQuery("from Baz baz where 'b' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_231 $$ iter.next()[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_146 $$ assertTrue("count(*) group by", ((Object[]) rs.next())[0].equals(new Long(3)))[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_54 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_43 $$ s.createQuery("from Bar, Bar").list()[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_249 $$ s.createQuery("from Baz baz where 'a' in elements(baz.collectionComponent.nested.foos) and 1.0 in elements(baz.collectionComponent.nested.floats)").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_149 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_245 $$ s.createQuery("from Foo foo where foo.integer not between 1 and 5 and foo.string not in ('cde', 'abc') and foo.string is not null and foo.integer<=3").list()[ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_184 $$ while (rs.hasNext()) [ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_146 $$ assertTrue("count(*) group by", ((Object[]) rs.next())[0].equals(new Long(3)))[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_143 $$ assertTrue("count", ((Long) rs.next()).longValue() == 2)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_207 $$ assertTrue(s.createQuery("from Named").list().size() == 7)[ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_259 $$ s.createQuery("select count(*) from Foo foo where foo.foo.string in ('1','2','3') or foo.foo.long in (1,2,3)").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_49 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_153 $$ assertTrue(!rs.hasNext())[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_273 $$ txn = s.beginTransaction()[ FD ]
Line_272 $$ s = openSession()-->Line_298 $$ s.close()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_42 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ CD ]
Line_62 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_239 $$ assertTrue(list.size() == 1)[ CD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_25 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo.foo.string = 'a' and foo.foo.string = 'b'").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_245 $$ s.createQuery("from Foo foo where foo.integer not between 1 and 5 and foo.string not in ('cde', 'abc') and foo.string is not null and foo.integer<=3").list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_244 $$ assertTrue(list.size() == 2)[ CD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_62 $$ if (!(getDialect() instanceof TimesTenDialect)) [ CD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_184 $$ while (rs.hasNext()) [ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_108 $$ while (iter.hasNext()) -->Line_110 $$ Object[] row = (Object[]) iter.next()[ CD ]
Line_3 $$ Session s = openSession()-->Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_276 $$ assertTrue(baz.getManyToAny().size() == 2)[ CD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_276 $$ assertTrue(baz.getManyToAny().size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_165 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_231 $$ iter.next()[ FD ]
Line_3 $$ Session s = openSession()-->Line_213 $$ s.save(new Holder("bar"))[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_214 $$ iter = s.createQuery("from Named n0, Named n1 where n0.name = n1.name").iterate()[ CD ]
Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()-->Line_174 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_71 $$ s.createQuery("select foo.foo from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_186 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_76 $$ s.createQuery("from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long) and foo.foo.string='baz'").list()[ FD ]
Line_62 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ CD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_195 $$ while (rs.hasNext()) -->Line_198 $$ assertTrue(row[0] instanceof Long)[ CD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_217 $$ Object[] row = (Object[]) iter.next()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_216 $$ while (iter.hasNext()) [ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_170 $$ rs = list.iterator()-->Line_197 $$ Object[] row = (Object[]) rs.next()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_184 $$ while (rs.hasNext()) -->Line_186 $$ Object[] row = (Object[]) rs.next()[ CD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()[ FD ]
Line_114 $$ iter = s.createQuery("select max( elements(foo.component.importantDates) ) from Foo foo group by foo.id").iterate()-->Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_42 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_22 $$ if (!(getDialect() instanceof HSQLDialect))-->Line_23 $$ s.createQuery("select foo.string from Foo foo where foo.foo.foo.foo = foo.foo.foo").list()[ CD ]
Line_3 $$ Session s = openSession()-->Line_236 $$ iter = s.createQuery("selecT baz from Baz baz where baz.stringDateMap['foo'] is not null or baz.stringDateMap['bar'] = ?").setParameter(0, new Date(), StandardBasicTypes.DATE).iterate()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_49 $$ assertTrue("empty query", list.size() == 0)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_4 $$ Transaction txn = s.beginTransaction()[ CD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_4 $$ Transaction txn = s.beginTransaction()-->Line_270 $$ txn.commit()[ FD ]
Line_3 $$ Session s = openSession()-->Line_258 $$ s.createQuery("select foo.foo.long from Foo foo where foo.foo.string in ('1','2','3')").list()[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_71 $$ s.createQuery("select foo.foo from Foo foo where foo = some(select x from Foo x where x.long > foo.foo.long)").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_27 $$ if ((getDialect() instanceof DB2Dialect) && !(getDialect() instanceof DerbyDialect)) [ CD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_50 $$ Iterator iter = s.createQuery("from Foo foo where foo.string='osama bin laden' order by foo.string asc, foo.component.count desc").iterate()-->Line_230 $$ while (iter.hasNext()) [ FD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_3 $$ Session s = openSession()-->Line_37 $$ s.createQuery("from Foo as foo where foo.component.glarch.name is not null").list()[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_266 $$ assertTrue(len == 2)[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_127 $$ Baz baz = new Baz()-->Line_132 $$ baz.getManyToAny().add(foo)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_39 $$ list = s.createQuery("from Foo").list()[ FD ]
Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()-->Line_108 $$ while (iter.hasNext()) [ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_170 $$ rs = list.iterator()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_279 $$ assertTrue(s.createQuery("select baz from Baz baz join baz.manyToAny a where index(a) = 0").list().size() == 1)[ CD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_159 $$ assertTrue(list.size() == 3)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_203 $$ assertTrue(count != 0)[ CD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_133 $$ s.save(bar)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()[ FD ]
Line_230 $$ while (iter.hasNext()) -->Line_232 $$ c++[ CD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_60 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ CD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ CD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_47 $$ s.createQuery("from Baz baz left join baz.fooToGlarch join fetch baz.fooSet foo left join fetch foo.foo").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_285 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['big bang'] < bar.baz.stringDateMap['now'] and bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_237 $$ assertFalse(iter.hasNext())[ CD ]
Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()-->Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_104 $$ s.createQuery("from Foo foo where foo.foo = ?").setParameter(0, foo.getFoo(), s.getTypeHelper().entity(Foo.class)).list()[ CD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_272 $$ s = openSession()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_95 $$ assertTrue("id query", list.get(0) == foo)[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()-->Line_147 $$ assertTrue(!rs.hasNext())[ FD ]
Line_225 $$ Query qu = s.createQuery("from Named n where n.name = :name")-->Line_226 $$ qu.getReturnTypes()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_256 $$ s.createQuery("select foo.foo.string from Foo foo where foo.foo in ('1','2','3')").list()[ CD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_82 $$ assertTrue("component query", list.size() == 0)[ CD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_170 $$ rs = list.iterator()-->Line_195 $$ while (rs.hasNext()) [ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ CD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_88 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_159 $$ assertTrue(list.size() == 3)[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_163 $$ rs = s.createQuery("select new Foo(fo.x) from Foo fo").iterate()[ CD ]
Line_3 $$ Session s = openSession()-->Line_283 $$ assertTrue(s.createQuery("select bar from Bar bar where bar.baz.stringDateMap['now'] is not null").list().size() == 1)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_228 $$ iter = s.createQuery("from java.lang.Object").iterate()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_42 $$ assertTrue(list.size() == 2 && ((Object[]) list.get(0))[0] instanceof FooProxy)[ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_263 $$ s.createQuery("from Foo foo1 left join foo1.foo foo2 left join foo1.foo.foo foo3 where foo1.string is not null").list()[ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_79 $$ s.createQuery("select foo.string, foo.date, foo.foo.string, foo.id from Foo foo, Baz baz where foo in elements(baz.fooArray) and foo.string like 'foo'").iterate()[ CD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_146 $$ assertTrue("count(*) group by", ((Object[]) rs.next())[0].equals(new Long(3)))[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_94 $$ assertTrue("named id query", list.size() == 1)[ FD ]
Line_209 $$ iter = s.createQuery("from Named n").iterate()-->Line_230 $$ while (iter.hasNext()) [ FD ]
Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_286 $$ list = s.createQuery("select foo.string, foo.component, foo.id from Bar foo").list()[ FD ]
Line_272 $$ s = openSession()-->Line_279 $$ assertTrue(s.createQuery("select baz from Baz baz join baz.manyToAny a where index(a) = 0").list().size() == 1)[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_165 $$ assertTrue("projection iterate (return check)", Foo.class.isAssignableFrom(rs.next().getClass()))[ CD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_96 $$ list = s.createQuery("select foo.foo from Foo foo where foo.string='fizard'").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_117 $$ assertTrue("complex query", list.size() == 1)[ CD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()-->Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_69 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_66 $$ assertTrue("component query", list.size() == 0)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_253 $$ if (!(getDialect() instanceof HSQLDialect))[ CD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_149 $$ assertTrue("sum", ((Long) rs.next()).longValue() == 4)[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_138 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_62 $$ if (!(getDialect() instanceof TimesTenDialect)) -->Line_64 $$ assertTrue("component query", list.size() == 2)[ CD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_92 $$ assertTrue("id query", list.size() == 1)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_28 $$ s.createQuery("from Foo foo where lower( foo.foo.string ) = 'foo'").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_132 $$ baz.getManyToAny().add(foo)[ FD ]
Line_5 $$ Foo foo = new Foo()-->Line_103 $$ assertTrue("by id returned object", list.get(0) == foo.getFoo())[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_123 $$ assertTrue("single quotes", list.size() == 2)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_288 $$ list = s.createQuery("select elements(baz.components) from Baz baz").list()[ FD ]
Line_14 $$ list = s.createQuery("select foo, bar from Foo foo left outer join foo.foo bar where foo = ?").setParameter(0, foo, s.getTypeHelper().entity(Foo.class)).list()-->Line_15 $$ Object[] row1 = (Object[]) list.get(0)[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()[ FD ]
Line_274 $$ baz = (Baz) s.createQuery("from Baz baz left outer join fetch baz.manyToAny").uniqueResult()-->Line_277 $$ BarProxy barp = (BarProxy) baz.getManyToAny().get(0)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_26 $$ s.createQuery("from Bar bar, foo in elements(bar.baz.fooArray)").list()[ CD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()-->Line_172 $$ while (rs.hasNext()) [ FD ]
Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_3 $$ Session s = openSession()-->Line_279 $$ assertTrue(s.createQuery("select baz from Baz baz join baz.manyToAny a where index(a) = 0").list().size() == 1)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_90 $$ assertTrue("query", list.size() == 2)[ CD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_118 $$ assertTrue("returned object", list.get(0) == foo)[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_97 $$ assertTrue("query", list.size() == 1)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()-->Line_124 $$ list = s.createQuery("from Foo foo where foo.component.glarch.next is null").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_273 $$ txn = s.beginTransaction()[ CD ]
Line_57 $$ if (!(getDialect() instanceof MySQLDialect) && !(getDialect() instanceof HSQLDialect) && !(getDialect() instanceof MckoiDialect) && !(getDialect() instanceof SAPDBDialect) && !(getDialect() instanceof PointbaseDialect) && !(getDialect() instanceof DerbyDialect)) -->Line_72 $$ s.createQuery("select foo.foo from Foo foo where foo = some(from Foo x where (x.long > foo.foo.long))").list()[ CD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_121 $$ assertTrue("single quotes", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_230 $$ while (iter.hasNext()) [ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_225 $$ Query qu = s.createQuery("from Named n where n.name = :name")[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_94 $$ assertTrue("named id query", list.size() == 1)[ CD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_205 $$ s.save(new Holder("ice cube"))[ CD ]
Line_272 $$ s = openSession()-->Line_278 $$ s.createQuery("from Baz baz join baz.manyToAny").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_169 $$ list = s.createQuery("select foo.long, foo.component.name, foo, foo.foo from Foo foo").list()[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_181 $$ list = s.createQuery("select avg(foo.float), max(foo.component.name), count(distinct foo.id) from Foo foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_65 $$ list = s.createQuery("from Foo foo where 0 = size(foo.component.importantDates)").list()-->Line_86 $$ assertTrue("component query", list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_145 $$ rs = s.createQuery("select count(*), foo.int from Foo foo group by foo.int").iterate()[ CD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_164 $$ assertTrue("projection iterate (results)", rs.hasNext())[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_154 $$ s.createQuery("from Foo foo where foo.boolean = ?").setParameter(0, new Boolean(true), StandardBasicTypes.BOOLEAN).list()[ CD ]
Line_2 $$ public void testQuery() throws Exception -->Line_34 $$ if (getDialect() instanceof SybaseDialect) [ CD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_39 $$ list = s.createQuery("from Foo").list()[ FD ]
Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_287 $$ assertTrue(((FooComponent) ((Object[]) list.get(0))[1]).getName().equals("foo"))[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ CD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_170 $$ rs = list.iterator()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_100 $$ assertTrue("components of components", list.size() == 2)[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_142 $$ rs = s.createQuery("select count(foo.foo.boolean) from Foo foo").iterate()[ FD ]
Line_137 $$ list = s.createQuery(" from Bar i where i.baz.name='Bazza'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_140 $$ assertTrue("count", ((Long) rs.next()).longValue() == 2)[ CD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_102 $$ assertTrue("by id query", list.size() == 1)[ FD ]
Line_122 $$ list = s.createQuery("from Foo foo where not foo.string='foo''bar'").list()-->Line_160 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_135 $$ list = s.createQuery(" from Bar bar where bar.baz.count=667 and bar.baz.count!=123 and not bar.baz.name='1-E-1'").list()-->Line_162 $$ assertTrue(list.size() == 3)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_3 $$ Session s = openSession()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_125 $$ assertTrue("query association in component", list.size() == 2)[ FD ]
Line_272 $$ s = openSession()-->Line_280 $$ FooProxy foop = (FooProxy) s.get(Foo.class, foo.getKey())[ FD ]
Line_81 $$ list = s.createQuery("from Foo foo where foo.component.count is null order by foo.component.count").list()-->Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_243 $$ System.out.println(list)[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_46 $$ s.createQuery("from Baz baz left join baz.fooToGlarch join baz.fooSet").list()[ CD ]
Line_39 $$ list = s.createQuery("from Foo").list()-->Line_239 $$ assertTrue(list.size() == 1)[ FD ]
Line_116 $$ list = s.createQuery("select foo.foo.foo.foo from Foo foo, Foo foo2 where" + " foo = foo2.foo and not not ( not foo.string='fizard' )" + " and foo2.string between 'a' and (foo.foo.string)" + ((getDialect() instanceof HSQLDialect || getDialect() instanceof InterbaseDialect || getDialect() instanceof TimesTenDialect || getDialect() instanceof TeradataDialect) ? " and ( foo2.string in ( 'fiz', 'blah') or 1=1 )" : " and ( foo2.string in ( 'fiz', 'blah', foo.foo.string, foo.string, foo2.string ) )")).list()-->Line_241 $$ assertTrue(list.size() == 1)[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_91 $$ list = s.createQuery("from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_148 $$ rs = s.createQuery("select sum(foo.foo.int) from Foo foo").iterate()[ FD ]
Line_83 $$ list = s.createQuery("from Foo foo where foo.component.name='foo'").list()-->Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()[ CD ]
Line_5 $$ Foo foo = new Foo()-->Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_93 $$ list = s.createQuery("from Foo foo where foo.key=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).list()-->Line_99 $$ list = s.createQuery("from Foo foo where foo.component.subcomponent.name='bar'").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_64 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_290 $$ list = s.createQuery("select bc.name from Baz baz join baz.components bc").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_272 $$ s = openSession()[ FD ]
Line_157 $$ list = s.createQuery("select new Foo(fo.x) from Foo fo").setCacheable(true).list()-->Line_192 $$ list = s.createQuery("select foo.long, foo.component, foo, foo.foo from Foo foo").list()[ FD ]
Line_59 $$ list = s.createQuery("from Foo foo where ? = some elements(foo.component.importantDates)").setParameter(0, foo.getTimestamp(), StandardBasicTypes.DATE).list()-->Line_244 $$ assertTrue(list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_90 $$ assertTrue("query", list.size() == 2)[ FD ]
Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()-->Line_60 $$ assertTrue("component query", list.size() == 2)[ FD ]
Line_85 $$ list = s.createQuery("select distinct foo.component.name, foo.component.name from Foo foo where foo.component.name='foo'").list()-->Line_240 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null and baz.stringDateMap['big bang'] < baz.stringDateMap['now']").list()[ FD ]
Line_2 $$ public void testQuery() throws Exception -->Line_106 $$ iter = s.createQuery("select foo.component.name, elements(foo.component.importantDates) from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).iterate()[ CD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_41 $$ list = s.createQuery("from Foo foo left outer join foo.foo").list()[ FD ]
Line_68 $$ list = s.createQuery("from Foo foo where exists elements(foo.component.importantDates)").list()-->Line_98 $$ assertTrue("returned object", list.get(0) == foo.getFoo())[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()[ FD ]
Line_101 $$ list = s.createQuery("select foo.foo from Foo foo where foo.foo.id=?").setParameter(0, foo.getFoo().getKey(), StandardBasicTypes.STRING).list()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_139 $$ Iterator rs = s.createQuery("select count(distinct foo.foo) from Foo foo").iterate()-->Line_143 $$ assertTrue("count", ((Long) rs.next()).longValue() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()[ FD ]
Line_120 $$ list = s.createQuery("from Foo foo where foo.string='from BoogieDown  -tinsel town  =!@#$^&*())'").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_39 $$ list = s.createQuery("from Foo").list()[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_242 $$ list = s.createQuery("select index(date) from Baz baz join baz.stringDateMap date").list()[ FD ]
Line_87 $$ list = s.createQuery("select distinct foo.component.name, foo.id from Foo foo where foo.component.name='foo'").list()-->Line_238 $$ list = s.createQuery("select baz from Baz baz where baz.stringDateMap['now'] is not null").list()[ FD ]
Line_52 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_291 $$ assertTrue(list.size() == 2)[ FD ]
Line_10 $$ List list = s.createQuery("from Foo foo inner join fetch foo.foo").list()-->Line_63 $$ list = s.createQuery("from Foo foo where size(foo.component.importantDates) = 3").list()[ FD ]
Line_3 $$ Session s = openSession()-->Line_248 $$ s.createQuery("from Baz baz inner join baz.fooSet where '1' in (from baz.fooSet foo where foo.string is not null)").list()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_289 $$ assertTrue(list.size() == 2)[ FD ]
Line_151 $$ rs = s.createQuery("select count(foo) from Foo foo where foo.id=?").setParameter(0, foo.getKey(), StandardBasicTypes.STRING).iterate()-->Line_182 $$ rs = list.iterator()[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_136 $$ assertTrue("query many-to-one", list.size() == 1)[ FD ]
Line_166 $$ ScrollableResults sr = s.createQuery("select new Foo(fo.x) from Foo fo").scroll()-->Line_168 $$ assertTrue("projection scroll (return check)", Foo.class.isAssignableFrom(sr.get(0).getClass()))[ FD ]
Line_48 $$ list = s.createQuery("from Foo foo where foo.string='osama bin laden' and foo.boolean = true order by foo.string asc, foo.component.count desc").list()-->Line_193 $$ rs = list.iterator()[ FD ]
Line_89 $$ list = s.createQuery("select foo.foo from Foo foo").list()-->Line_117 $$ assertTrue("complex query", list.size() == 1)[ FD ]
