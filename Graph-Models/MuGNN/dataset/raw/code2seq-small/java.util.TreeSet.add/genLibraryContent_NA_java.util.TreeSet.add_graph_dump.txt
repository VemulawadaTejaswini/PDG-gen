Line_6 $$ for (final VirtualFile file : files) -->Line_17 $$ final String path = GenerationUtils.toRelativePath(file.getPath(), baseDir, BuildProperties.getProjectBaseDirProperty(), genOptions)[ FD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_7 $$ final String path = GenerationUtils.toRelativePath(file, baseDir, BuildProperties.getProjectBaseDirProperty(), genOptions)[ FD ]
Line_22 $$ final FileSet fileSet = new FileSet(path)-->Line_24 $$ libraryPath.add(fileSet)[ FD ]
Line_21 $$ if (library.isJarDirectory(url, rootType)) -->Line_23 $$ fileSet.add(new PatternSetRef(BuildProperties.PROPERTY_LIBRARIES_PATTERNS))[ CD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_14 $$ TreeSet<String> urls = new TreeSet<String>(Arrays.asList(library.getUrls(rootType)))[ FD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_3 $$ if (genOptions.expandJarDirectories) [ CD ]
Line_3 $$ if (genOptions.expandJarDirectories) -->Line_5 $$ TreeSet<String> visitedPaths = new TreeSet<String>()[ CD ]
Line_7 $$ final String path = GenerationUtils.toRelativePath(file, baseDir, BuildProperties.getProjectBaseDirProperty(), genOptions)-->Line_8 $$ visitedPaths.add(path)[ FD ]
Line_22 $$ final FileSet fileSet = new FileSet(path)-->Line_23 $$ fileSet.add(new PatternSetRef(BuildProperties.PROPERTY_LIBRARIES_PATTERNS))[ FD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_17 $$ final String path = GenerationUtils.toRelativePath(file.getPath(), baseDir, BuildProperties.getProjectBaseDirProperty(), genOptions)[ FD ]
Line_15 $$ for (String url : urls) -->Line_16 $$ File file = fileFromUrl(url)[ FD ]
Line_6 $$ for (final VirtualFile file : files) -->Line_7 $$ final String path = GenerationUtils.toRelativePath(file, baseDir, BuildProperties.getProjectBaseDirProperty(), genOptions)[ FD ]
Line_18 $$ if (url.startsWith(JarFileSystem.PROTOCOL_PREFIX)) -->Line_20 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) [ CD ]
Line_5 $$ TreeSet<String> visitedPaths = new TreeSet<String>()-->Line_8 $$ visitedPaths.add(path)[ FD ]
Line_3 $$ if (genOptions.expandJarDirectories) -->Line_4 $$ final VirtualFile[] files = library.getFiles(rootType)[ CD ]
Line_21 $$ if (library.isJarDirectory(url, rootType)) -->Line_24 $$ libraryPath.add(fileSet)[ CD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_19 $$ libraryPath.add(new PathElement(path))[ FD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_26 $$ libraryPath.add(new PathElement(path))[ FD ]
Line_15 $$ for (String url : urls) -->Line_18 $$ if (url.startsWith(JarFileSystem.PROTOCOL_PREFIX)) [ FD ]
Line_21 $$ if (library.isJarDirectory(url, rootType)) -->Line_22 $$ final FileSet fileSet = new FileSet(path)[ CD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_21 $$ if (library.isJarDirectory(url, rootType)) [ FD ]
Line_3 $$ if (genOptions.expandJarDirectories) -->Line_14 $$ TreeSet<String> urls = new TreeSet<String>(Arrays.asList(library.getUrls(rootType)))[ CD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_4 $$ final VirtualFile[] files = library.getFiles(rootType)[ FD ]
Line_21 $$ if (library.isJarDirectory(url, rootType)) -->Line_26 $$ libraryPath.add(new PathElement(path))[ CD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_3 $$ if (genOptions.expandJarDirectories) [ FD ]
Line_15 $$ for (String url : urls) -->Line_20 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) [ FD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_24 $$ libraryPath.add(fileSet)[ FD ]
Line_15 $$ for (String url : urls) -->Line_21 $$ if (library.isJarDirectory(url, rootType)) [ FD ]
Line_2 $$ public static void genLibraryContent(final GenerationOptions genOptions, final Library library, final OrderRootType rootType, final File baseDir, final CompositeGenerator libraryPath) -->Line_11 $$ libraryPath.add(new PathElement(path))[ FD ]
Line_20 $$ if (url.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) -->Line_21 $$ if (library.isJarDirectory(url, rootType)) [ CD ]
Line_18 $$ if (url.startsWith(JarFileSystem.PROTOCOL_PREFIX)) -->Line_19 $$ libraryPath.add(new PathElement(path))[ CD ]
