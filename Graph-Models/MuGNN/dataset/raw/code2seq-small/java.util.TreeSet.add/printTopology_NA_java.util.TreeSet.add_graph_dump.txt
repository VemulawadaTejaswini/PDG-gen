Line_22 $$ if (hostname != null)-->Line_23 $$ System.out.print(" (" + hostname + ")")[ CD ]
Line_16 $$ for (String r : racks) -->Line_18 $$ TreeSet<String> nodes = tree.get(r)[ FD ]
Line_6 $$ for (DatanodeInfo dni : report) -->Line_7 $$ String location = dni.getNetworkLocation()[ FD ]
Line_8 $$ String name = dni.getName()-->Line_12 $$ tree.get(location).add(name)[ FD ]
Line_2 $$ public int printTopology() throws IOException -->Line_14 $$ ArrayList<String> racks = new ArrayList<String>(tree.keySet())[ CD ]
Line_14 $$ ArrayList<String> racks = new ArrayList<String>(tree.keySet())-->Line_15 $$ Collections.sort(racks)[ FD ]
Line_3 $$ DistributedFileSystem dfs = getDFS()-->Line_4 $$ final DatanodeInfo[] report = dfs.getDataNodeStats()[ FD ]
Line_2 $$ public int printTopology() throws IOException -->Line_28 $$ return 0[ CD ]
Line_5 $$ HashMap<String, TreeSet<String>> tree = new HashMap<String, TreeSet<String>>()-->Line_18 $$ TreeSet<String> nodes = tree.get(r)[ FD ]
Line_5 $$ HashMap<String, TreeSet<String>> tree = new HashMap<String, TreeSet<String>>()-->Line_9 $$ if (!tree.containsKey(location)) [ FD ]
Line_21 $$ String hostname = NetUtils.getHostNameOfIP(n)-->Line_22 $$ if (hostname != null)[ FD ]
Line_19 $$ for (String n : nodes) -->Line_21 $$ String hostname = NetUtils.getHostNameOfIP(n)[ FD ]
Line_7 $$ String location = dni.getNetworkLocation()-->Line_12 $$ tree.get(location).add(name)[ FD ]
Line_2 $$ public int printTopology() throws IOException -->Line_5 $$ HashMap<String, TreeSet<String>> tree = new HashMap<String, TreeSet<String>>()[ CD ]
Line_2 $$ public int printTopology() throws IOException -->Line_15 $$ Collections.sort(racks)[ CD ]
Line_9 $$ if (!tree.containsKey(location)) -->Line_10 $$ tree.put(location, new TreeSet<String>())[ CD ]
Line_7 $$ String location = dni.getNetworkLocation()-->Line_10 $$ tree.put(location, new TreeSet<String>())[ FD ]
Line_5 $$ HashMap<String, TreeSet<String>> tree = new HashMap<String, TreeSet<String>>()-->Line_14 $$ ArrayList<String> racks = new ArrayList<String>(tree.keySet())[ FD ]
Line_2 $$ public int printTopology() throws IOException -->Line_3 $$ DistributedFileSystem dfs = getDFS()[ CD ]
Line_2 $$ public int printTopology() throws IOException -->Line_4 $$ final DatanodeInfo[] report = dfs.getDataNodeStats()[ CD ]
Line_6 $$ for (DatanodeInfo dni : report) -->Line_8 $$ String name = dni.getName()[ FD ]
Line_5 $$ HashMap<String, TreeSet<String>> tree = new HashMap<String, TreeSet<String>>()-->Line_12 $$ tree.get(location).add(name)[ FD ]
Line_7 $$ String location = dni.getNetworkLocation()-->Line_9 $$ if (!tree.containsKey(location)) [ FD ]
Line_5 $$ HashMap<String, TreeSet<String>> tree = new HashMap<String, TreeSet<String>>()-->Line_10 $$ tree.put(location, new TreeSet<String>())[ FD ]
