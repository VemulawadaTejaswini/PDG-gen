Line_5 $$ Object[] btree = BTree.build(Arrays.asList(Integer.MIN_VALUE, Integer.MAX_VALUE), UpdateFunction.noOp())-->Line_10 $$ testEqual("Oversize", BTree.iterator(btree), canon.iterator())[ FD ]
Line_5 $$ Object[] btree = BTree.build(Arrays.asList(Integer.MIN_VALUE, Integer.MAX_VALUE), UpdateFunction.noOp())-->Line_9 $$ assertTrue(BTree.isWellFormed(btree, naturalOrder()))[ FD ]
Line_3 $$ TreeSet<Integer> canon = new TreeSet()-->Line_10 $$ testEqual("Oversize", BTree.iterator(btree), canon.iterator())[ FD ]
Line_3 $$ TreeSet<Integer> canon = new TreeSet()-->Line_6 $$ btree = BTree.update(btree, naturalOrder(), canon, UpdateFunction.<Integer>noOp())[ FD ]
Line_2 $$ public void testOversizedMiddleInsert() -->Line_6 $$ btree = BTree.update(btree, naturalOrder(), canon, UpdateFunction.<Integer>noOp())[ CD ]
Line_3 $$ TreeSet<Integer> canon = new TreeSet()-->Line_8 $$ canon.add(Integer.MAX_VALUE)[ FD ]
Line_6 $$ btree = BTree.update(btree, naturalOrder(), canon, UpdateFunction.<Integer>noOp())-->Line_9 $$ assertTrue(BTree.isWellFormed(btree, naturalOrder()))[ FD ]
Line_5 $$ Object[] btree = BTree.build(Arrays.asList(Integer.MIN_VALUE, Integer.MAX_VALUE), UpdateFunction.noOp())-->Line_6 $$ btree = BTree.update(btree, naturalOrder(), canon, UpdateFunction.<Integer>noOp())[ FD ]
Line_2 $$ public void testOversizedMiddleInsert() -->Line_10 $$ testEqual("Oversize", BTree.iterator(btree), canon.iterator())[ CD ]
Line_2 $$ public void testOversizedMiddleInsert() -->Line_5 $$ Object[] btree = BTree.build(Arrays.asList(Integer.MIN_VALUE, Integer.MAX_VALUE), UpdateFunction.noOp())[ CD ]
Line_2 $$ public void testOversizedMiddleInsert() -->Line_7 $$ canon.add(Integer.MIN_VALUE)[ CD ]
Line_2 $$ public void testOversizedMiddleInsert() -->Line_8 $$ canon.add(Integer.MAX_VALUE)[ CD ]
Line_2 $$ public void testOversizedMiddleInsert() -->Line_3 $$ TreeSet<Integer> canon = new TreeSet()[ CD ]
Line_2 $$ public void testOversizedMiddleInsert() -->Line_9 $$ assertTrue(BTree.isWellFormed(btree, naturalOrder()))[ CD ]
Line_3 $$ TreeSet<Integer> canon = new TreeSet()-->Line_7 $$ canon.add(Integer.MIN_VALUE)[ FD ]
Line_3 $$ TreeSet<Integer> canon = new TreeSet()-->Line_4 $$ canon.add(i)[ FD ]
Line_6 $$ btree = BTree.update(btree, naturalOrder(), canon, UpdateFunction.<Integer>noOp())-->Line_10 $$ testEqual("Oversize", BTree.iterator(btree), canon.iterator())[ FD ]
Line_2 $$ public void testOversizedMiddleInsert() -->Line_4 $$ for (int i = 0; i < 10000000; i++) canon.add(i)[ CD ]
