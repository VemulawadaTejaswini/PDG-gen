Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_6 $$ List<ContainerStatus> completed = Arrays.asList(ContainerStatus.newInstance(newContainerId(0, 0, 0, 0), ContainerState.COMPLETE, "", 0))[ CD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_12 $$ asyncClient.init(conf)[ CD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_10 $$ callbackHandler.asynClient = asyncClient[ CD ]
Line_9 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_16 $$ asyncClient.registerApplicationMaster("localhost", 1234, null)[ FD ]
Line_7 $$ final AllocateResponse response = createAllocateResponse(completed, new ArrayList<Container>(), null)-->Line_8 $$ when(client.allocate(anyFloat())).thenReturn(response)[ FD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_27 $$ verify(callbackHandler, times(1)).onError(any(Exception.class))[ FD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_8 $$ when(client.allocate(anyFloat())).thenReturn(response)[ CD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_9 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)[ CD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_7 $$ final AllocateResponse response = createAllocateResponse(completed, new ArrayList<Container>(), null)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_12 $$ asyncClient.init(conf)[ FD ]
Line_9 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_13 $$ asyncClient.start()[ FD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_33 $$ verify(callbackHandler, times(1)).onError(any(Exception.class))[ FD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_11 $$ callbackHandler.throwOutException = true[ CD ]
Line_9 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_10 $$ callbackHandler.asynClient = asyncClient[ FD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_13 $$ asyncClient.start()[ CD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_27 $$ verify(callbackHandler, times(1)).onError(any(Exception.class))[ CD ]
Line_6 $$ List<ContainerStatus> completed = Arrays.asList(ContainerStatus.newInstance(newContainerId(0, 0, 0, 0), ContainerState.COMPLETE, "", 0))-->Line_7 $$ final AllocateResponse response = createAllocateResponse(completed, new ArrayList<Container>(), null)[ FD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_33 $$ verify(callbackHandler, times(1)).onError(any(Exception.class))[ CD ]
Line_2 $$ void runCallBackThrowOutException(TestCallbackHandler2 callbackHandler) throws InterruptedException, YarnException, IOException -->Line_9 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)[ FD ]
Line_9 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_12 $$ asyncClient.init(conf)[ FD ]
