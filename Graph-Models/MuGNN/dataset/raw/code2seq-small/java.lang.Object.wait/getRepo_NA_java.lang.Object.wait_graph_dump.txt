Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_5 $$ if (!myInactive.isEmpty() && mayReuse) [ CD ]
Line_12 $$ while ((myUsed.size() + myInactive.size()) >= myMaxConcurrent && !myDisposed) -->Line_17 $$ ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_9 $$ if (myUsed.size() >= myMaxConcurrent) [ CD ]
Line_5 $$ if (!myInactive.isEmpty() && mayReuse) -->Line_6 $$ return fromInactive(url)[ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_34 $$ myUsed.add(fun)[ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_33 $$ final SVNRepository fun = myCreator.convert(url)[ FD ]
Line_29 $$ if (!myInactive.isEmpty() && mayReuse) -->Line_30 $$ return fromInactive(url)[ CD ]
Line_11 $$ if ((myUsed.size() + myInactive.size()) >= myMaxConcurrent) -->Line_12 $$ while ((myUsed.size() + myInactive.size()) >= myMaxConcurrent && !myDisposed) [ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_35 $$ myGuard.connectionCreated()[ CD ]
Line_22 $$ if (myDisposed) -->Line_23 $$ myWait.notifyAll()[ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_33 $$ final SVNRepository fun = myCreator.convert(url)[ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_6 $$ return fromInactive(url)[ FD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_8 $$ myGuard.waitForTotalNumberOfConnectionsOk()[ CD ]
Line_17 $$ ProgressIndicator indicator = ProgressManager.getInstance().getProgressIndicator()-->Line_18 $$ if (indicator != null && indicator.isCanceled()) [ FD ]
Line_12 $$ while ((myUsed.size() + myInactive.size()) >= myMaxConcurrent && !myDisposed) -->Line_18 $$ if (indicator != null && indicator.isCanceled()) [ CD ]
Line_11 $$ if ((myUsed.size() + myInactive.size()) >= myMaxConcurrent) -->Line_22 $$ if (myDisposed) [ CD ]
Line_33 $$ final SVNRepository fun = myCreator.convert(url)-->Line_34 $$ myUsed.add(fun)[ FD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_29 $$ if (!myInactive.isEmpty() && mayReuse) [ FD ]
Line_3 $$ if (myDisposed)-->Line_4 $$ return null[ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_30 $$ return fromInactive(url)[ FD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_36 $$ return fun[ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_3 $$ if (myDisposed)[ CD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_5 $$ if (!myInactive.isEmpty() && mayReuse) [ FD ]
Line_2 $$ public SVNRepository getRepo(SVNURL url, boolean mayReuse) throws SVNException -->Line_29 $$ if (!myInactive.isEmpty() && mayReuse) [ CD ]
