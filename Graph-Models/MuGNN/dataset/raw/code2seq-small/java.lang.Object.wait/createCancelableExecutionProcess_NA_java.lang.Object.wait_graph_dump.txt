Line_2 $$ private static Runnable createCancelableExecutionProcess(final ProcessHandler processHandler, final Function<Object, Boolean> cancelableFun) -->Line_27 $$ if (!processHandler.isProcessTerminated()) [ FD ]
Line_2 $$ private static Runnable createCancelableExecutionProcess(final ProcessHandler processHandler, final Function<Object, Boolean> cancelableFun) -->Line_29 $$ processHandler.destroyProcess()[ FD ]
Line_50 $$ if (myProgressIndicator != null && StringUtil.isEmpty(myProgressIndicator.getText())) -->Line_51 $$ myProgressIndicator.setText("Please wait...")[ CD ]
Line_3 $$ return new Runnable() -->Line_56 $$ ApplicationManager.getApplication().executeOnPooledThread(myCancelListener)[ CD ]
Line_3 $$ return new Runnable() -->Line_25 $$ while (true) [ CD ]
Line_2 $$ private static Runnable createCancelableExecutionProcess(final ProcessHandler processHandler, final Function<Object, Boolean> cancelableFun) -->Line_14 $$ processHandler.waitFor()[ FD ]
Line_26 $$ if ((myProgressIndicator != null && (myProgressIndicator.isCanceled() || !myProgressIndicator.isRunning())) || (cancelableFun != null && cancelableFun.fun(null).booleanValue()) || processHandler.isProcessTerminated()) -->Line_27 $$ if (!processHandler.isProcessTerminated()) [ CD ]
Line_3 $$ return new Runnable() -->Line_53 $$ LOG.assertTrue(myProgressIndicator != null || cancelableFun != null, "Cancelable process must have an opportunity to be canceled!")[ CD ]
Line_3 $$ return new Runnable() -->Line_54 $$ mySemaphore.down()[ CD ]
Line_2 $$ private static Runnable createCancelableExecutionProcess(final ProcessHandler processHandler, final Function<Object, Boolean> cancelableFun) -->Line_3 $$ return new Runnable() [ CD ]
Line_25 $$ while (true) -->Line_26 $$ if ((myProgressIndicator != null && (myProgressIndicator.isCanceled() || !myProgressIndicator.isRunning())) || (cancelableFun != null && cancelableFun.fun(null).booleanValue()) || processHandler.isProcessTerminated()) [ CD ]
Line_3 $$ return new Runnable() -->Line_55 $$ ApplicationManager.getApplication().executeOnPooledThread(myWaitThread)[ CD ]
Line_2 $$ private static Runnable createCancelableExecutionProcess(final ProcessHandler processHandler, final Function<Object, Boolean> cancelableFun) -->Line_26 $$ if ((myProgressIndicator != null && (myProgressIndicator.isCanceled() || !myProgressIndicator.isRunning())) || (cancelableFun != null && cancelableFun.fun(null).booleanValue()) || processHandler.isProcessTerminated()) [ FD ]
Line_3 $$ return new Runnable() -->Line_57 $$ mySemaphore.waitFor()[ CD ]
Line_3 $$ return new Runnable() -->Line_50 $$ if (myProgressIndicator != null && StringUtil.isEmpty(myProgressIndicator.getText())) [ CD ]
Line_3 $$ return new Runnable() -->Line_49 $$ myProgressIndicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
