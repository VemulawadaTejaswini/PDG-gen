Line_17 $$ final NamenodeProtocols rpcServer = namenode.getRpcServer()-->Line_41 $$ Whitebox.setInternalState(namenode, "rpcServer", rpcServer)[ FD ]
Line_10 $$ final Map<String, Boolean> resultMap = new HashMap<String, Boolean>()-->Line_46 $$ Assert.assertTrue(resultMap.get("mkdirs"))[ FD ]
Line_19 $$ new Thread() -->Line_24 $$ FileSystem fs = null[ CD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_13 $$ HATestUtil.setFailoverConfigurations(cluster, conf, LOGICAL_NAME)[ FD ]
Line_28 $$ result = fs.mkdirs(dir)-->Line_30 $$ result = false[ FD ]
Line_49 $$ if (cluster != null) -->Line_50 $$ cluster.shutdown()[ CD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_16 $$ final NameNode namenode = cluster.getNameNode(0)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_14 $$ cluster.waitActive()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_15 $$ cluster.transitionToActive(0)[ FD ]
Line_8 $$ final Configuration conf = DFSTestUtil.newHAConfiguration(LOGICAL_NAME)-->Line_13 $$ HATestUtil.setFailoverConfigurations(cluster, conf, LOGICAL_NAME)[ FD ]
Line_19 $$ new Thread() -->Line_23 $$ boolean result = false[ CD ]
Line_23 $$ boolean result = false-->Line_30 $$ result = false[ FD ]
Line_16 $$ final NameNode namenode = cluster.getNameNode(0)-->Line_17 $$ final NamenodeProtocols rpcServer = namenode.getRpcServer()[ FD ]
Line_16 $$ final NameNode namenode = cluster.getNameNode(0)-->Line_18 $$ Whitebox.setInternalState(namenode, "rpcServer", null)[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_49 $$ if (cluster != null) [ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_49 $$ if (cluster != null) [ FD ]
Line_16 $$ final NameNode namenode = cluster.getNameNode(0)-->Line_41 $$ Whitebox.setInternalState(namenode, "rpcServer", rpcServer)[ FD ]
Line_24 $$ FileSystem fs = null-->Line_26 $$ fs = FileSystem.get(WEBHDFS_URI, conf)[ FD ]
Line_26 $$ fs = FileSystem.get(WEBHDFS_URI, conf)-->Line_32 $$ IOUtils.cleanup(null, fs)[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_13 $$ HATestUtil.setFailoverConfigurations(cluster, conf, LOGICAL_NAME)[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_16 $$ final NameNode namenode = cluster.getNameNode(0)[ FD ]
Line_8 $$ final Configuration conf = DFSTestUtil.newHAConfiguration(LOGICAL_NAME)-->Line_26 $$ fs = FileSystem.get(WEBHDFS_URI, conf)[ FD ]
Line_23 $$ boolean result = false-->Line_28 $$ result = fs.mkdirs(dir)[ FD ]
Line_43 $$ while (!resultMap.containsKey("mkdirs")) -->Line_44 $$ this.wait()[ CD ]
Line_10 $$ final Map<String, Boolean> resultMap = new HashMap<String, Boolean>()-->Line_35 $$ resultMap.put("mkdirs", result)[ FD ]
Line_24 $$ FileSystem fs = null-->Line_32 $$ IOUtils.cleanup(null, fs)[ FD ]
Line_24 $$ FileSystem fs = null-->Line_28 $$ result = fs.mkdirs(dir)[ FD ]
Line_26 $$ fs = FileSystem.get(WEBHDFS_URI, conf)-->Line_28 $$ result = fs.mkdirs(dir)[ FD ]
Line_10 $$ final Map<String, Boolean> resultMap = new HashMap<String, Boolean>()-->Line_43 $$ while (!resultMap.containsKey("mkdirs")) [ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_14 $$ cluster.waitActive()[ FD ]
Line_12 $$ cluster = new MiniDFSCluster.Builder(conf).nnTopology(topo).numDataNodes(0).build()-->Line_50 $$ cluster.shutdown()[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_50 $$ cluster.shutdown()[ FD ]
Line_30 $$ result = false-->Line_35 $$ resultMap.put("mkdirs", result)[ FD ]
Line_28 $$ result = fs.mkdirs(dir)-->Line_35 $$ resultMap.put("mkdirs", result)[ FD ]
Line_9 $$ MiniDFSCluster cluster = null-->Line_15 $$ cluster.transitionToActive(0)[ FD ]
Line_27 $$ final Path dir = new Path("/test")-->Line_28 $$ result = fs.mkdirs(dir)[ FD ]
Line_23 $$ boolean result = false-->Line_35 $$ resultMap.put("mkdirs", result)[ FD ]
