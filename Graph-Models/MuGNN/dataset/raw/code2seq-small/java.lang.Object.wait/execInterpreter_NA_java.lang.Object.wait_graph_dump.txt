Line_60 $$ if (time > TIMEOUT) -->Line_61 $$ LOG.debug("Timeout exceeded")[ CD ]
Line_16 $$ Pair<String, Boolean> executed = null-->Line_22 $$ executed = exec(command)[ FD ]
Line_12 $$ new Task.Backgroundable(myProject, "REPL Communication", true) -->Line_19 $$ if (indicator.isCanceled()) [ FD ]
Line_18 $$ while (true) -->Line_19 $$ if (indicator.isCanceled()) [ CD ]
Line_25 $$ if (firstCommWorked) -->Line_28 $$ if (commAttempts < MAX_ATTEMPTS) [ CD ]
Line_50 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_54 $$ if (progressIndicator.isCanceled()) [ FD ]
Line_2 $$ public void execInterpreter(final ConsoleCodeFragment command, final Function<InterpreterResponse, Object> onResponseReceived) -->Line_72 $$ onResponseReceived.fun(nextResponse)[ FD ]
Line_53 $$ while (nextResponse == null) -->Line_58 $$ final long time = System.nanoTime() - startTime[ CD ]
Line_8 $$ if (waitingForInput) -->Line_12 $$ new Task.Backgroundable(myProject, "REPL Communication", true) [ CD ]
Line_24 $$ if (executed.first != null && executed.first.indexOf(refusedConnPattern) != -1) -->Line_25 $$ if (firstCommWorked) [ CD ]
Line_3 $$ if (myDebugCommunication != null && myDebugCommunication.isSuspended()) -->Line_4 $$ myDebugCommunication.execInterpreter(command, onResponseReceived)[ CD ]
Line_2 $$ public void execInterpreter(final ConsoleCodeFragment command, final Function<InterpreterResponse, Object> onResponseReceived) -->Line_3 $$ if (myDebugCommunication != null && myDebugCommunication.isSuspended()) [ CD ]
Line_18 $$ while (true) -->Line_23 $$ String refusedConnPattern = "Failed to read servers response"[ CD ]
Line_2 $$ public void execInterpreter(final ConsoleCodeFragment command, final Function<InterpreterResponse, Object> onResponseReceived) -->Line_4 $$ myDebugCommunication.execInterpreter(command, onResponseReceived)[ FD ]
Line_12 $$ new Task.Backgroundable(myProject, "REPL Communication", true) -->Line_14 $$ boolean needInput = false[ CD ]
Line_28 $$ if (commAttempts < MAX_ATTEMPTS) -->Line_30 $$ Thread.sleep(250)[ CD ]
Line_2 $$ public void execInterpreter(final ConsoleCodeFragment command, final Function<InterpreterResponse, Object> onResponseReceived) -->Line_9 $$ inputReceived = command.getText()[ FD ]
Line_50 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_51 $$ progressIndicator.setText("Waiting for REPL response with " + (int) (TIMEOUT / 10e8) + "s timeout")[ FD ]
Line_48 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() -->Line_52 $$ final long startTime = System.nanoTime()[ CD ]
Line_23 $$ String refusedConnPattern = "Failed to read servers response"-->Line_24 $$ if (executed.first != null && executed.first.indexOf(refusedConnPattern) != -1) [ FD ]
Line_8 $$ if (waitingForInput) -->Line_9 $$ inputReceived = command.getText()[ CD ]
Line_58 $$ final long time = System.nanoTime() - startTime-->Line_60 $$ if (time > TIMEOUT) [ FD ]
Line_2 $$ public void execInterpreter(final ConsoleCodeFragment command, final Function<InterpreterResponse, Object> onResponseReceived) -->Line_22 $$ executed = exec(command)[ FD ]
Line_16 $$ Pair<String, Boolean> executed = null-->Line_31 $$ executed = Pair.create("", executed.second)[ FD ]
Line_53 $$ while (nextResponse == null) -->Line_54 $$ if (progressIndicator.isCanceled()) [ CD ]
Line_28 $$ if (commAttempts < MAX_ATTEMPTS) -->Line_31 $$ executed = Pair.create("", executed.second)[ CD ]
Line_53 $$ while (nextResponse == null) -->Line_60 $$ if (time > TIMEOUT) [ CD ]
Line_50 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_59 $$ progressIndicator.setFraction(((double) time) / TIMEOUT)[ FD ]
Line_48 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() -->Line_72 $$ onResponseReceived.fun(nextResponse)[ CD ]
Line_19 $$ if (indicator.isCanceled()) -->Line_20 $$ return[ CD ]
Line_2 $$ public void execInterpreter(final ConsoleCodeFragment command, final Function<InterpreterResponse, Object> onResponseReceived) -->Line_8 $$ if (waitingForInput) [ CD ]
Line_17 $$ int commAttempts = 0-->Line_28 $$ if (commAttempts < MAX_ATTEMPTS) [ FD ]
Line_18 $$ while (true) -->Line_22 $$ executed = exec(command)[ CD ]
Line_28 $$ if (commAttempts < MAX_ATTEMPTS) -->Line_29 $$ commAttempts += 1[ CD ]
Line_48 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() -->Line_50 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()[ CD ]
Line_17 $$ int commAttempts = 0-->Line_29 $$ commAttempts += 1[ FD ]
Line_8 $$ if (waitingForInput) -->Line_48 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() [ CD ]
Line_48 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() -->Line_53 $$ while (nextResponse == null) [ CD ]
Line_54 $$ if (progressIndicator.isCanceled()) -->Line_55 $$ LOG.debug("Canceled")[ CD ]
Line_48 $$ ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() -->Line_51 $$ progressIndicator.setText("Waiting for REPL response with " + (int) (TIMEOUT / 10e8) + "s timeout")[ CD ]
Line_18 $$ while (true) -->Line_24 $$ if (executed.first != null && executed.first.indexOf(refusedConnPattern) != -1) [ CD ]
Line_29 $$ commAttempts += 1-->Line_28 $$ if (commAttempts < MAX_ATTEMPTS) [ FD ]
Line_53 $$ while (nextResponse == null) -->Line_59 $$ progressIndicator.setFraction(((double) time) / TIMEOUT)[ CD ]
Line_22 $$ executed = exec(command)-->Line_31 $$ executed = Pair.create("", executed.second)[ FD ]
Line_3 $$ if (myDebugCommunication != null && myDebugCommunication.isSuspended()) -->Line_5 $$ return[ CD ]
