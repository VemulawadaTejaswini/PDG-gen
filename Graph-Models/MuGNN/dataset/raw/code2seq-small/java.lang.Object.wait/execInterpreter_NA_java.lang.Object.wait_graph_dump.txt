Line_83 $$ final long time = System.nanoTime() - startTime-->Line_85 $$ if (time > TIMEOUT) [ FD ]
Line_75 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_84 $$ progressIndicator.setFraction(((double) time) / TIMEOUT)[ FD ]
Line_49 $$ commAttempts += 1-->Line_48 $$ if (commAttempts < MAX_ATTEMPTS) [ FD ]
Line_48 $$ if (commAttempts < MAX_ATTEMPTS) -->Line_51 $$ executed = Pair.create("", executed.second)[ CD ]
Line_48 $$ if (commAttempts < MAX_ATTEMPTS) -->Line_50 $$ Thread.sleep(250)[ CD ]
Line_30 $$ while (true) -->Line_31 $$ if (indicator.isCanceled()) [ CD ]
Line_78 $$ while (nextResponse == null) -->Line_79 $$ if (progressIndicator.isCanceled()) [ CD ]
Line_75 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_79 $$ if (progressIndicator.isCanceled()) [ FD ]
Line_75 $$ final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator()-->Line_76 $$ progressIndicator.setText("Waiting for REPL response with " + (int) (TIMEOUT / 10e8) + "s timeout")[ FD ]
Line_48 $$ if (commAttempts < MAX_ATTEMPTS) -->Line_49 $$ commAttempts += 1[ CD ]
Line_8 $$ if (myDebugCommunication != null && myDebugCommunication.isSuspended()) -->Line_9 $$ myDebugCommunication.execInterpreter(command, onResponseReceived)[ CD ]
Line_30 $$ while (true) -->Line_34 $$ executed = exec(command)[ CD ]
Line_34 $$ executed = exec(command)-->Line_51 $$ executed = Pair.create("", executed.second)[ FD ]
Line_85 $$ if (time > TIMEOUT) -->Line_86 $$ LOG.debug("Timeout exceeded")[ CD ]
Line_45 $$ if (firstCommWorked) -->Line_48 $$ if (commAttempts < MAX_ATTEMPTS) [ CD ]
Line_26 $$ Pair<String, Boolean> executed = null-->Line_34 $$ executed = exec(command)[ FD ]
Line_78 $$ while (nextResponse == null) -->Line_84 $$ progressIndicator.setFraction(((double) time) / TIMEOUT)[ CD ]
Line_78 $$ while (nextResponse == null) -->Line_83 $$ final long time = System.nanoTime() - startTime[ CD ]
Line_79 $$ if (progressIndicator.isCanceled()) -->Line_80 $$ LOG.debug("Canceled")[ CD ]
Line_31 $$ if (indicator.isCanceled()) -->Line_32 $$ return[ CD ]
Line_26 $$ Pair<String, Boolean> executed = null-->Line_51 $$ executed = Pair.create("", executed.second)[ FD ]
Line_14 $$ if (waitingForInput) -->Line_15 $$ inputReceived = command.getText()[ CD ]
Line_78 $$ while (nextResponse == null) -->Line_85 $$ if (time > TIMEOUT) [ CD ]
