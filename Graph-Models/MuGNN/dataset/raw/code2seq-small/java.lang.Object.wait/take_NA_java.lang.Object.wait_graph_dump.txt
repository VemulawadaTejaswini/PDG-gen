Line_4 $$ if (content == null) -->Line_5 $$ return null[ CD ]
Line_3 $$ final FileContent content = doTake(indicator)-->Line_7 $$ final long length = content.getLength()[ FD ]
Line_2 $$ public FileContent take(@NotNull ProgressIndicator indicator) throws ProcessCanceledException -->Line_4 $$ if (content == null) [ CD ]
Line_7 $$ final long length = content.getLength()-->Line_21 $$ if (myLargeSizeRequested && !requestingLargeSize || myBytesBeingProcessed + length > Math.max(PROCESSED_FILE_BYTES_THRESHOLD, length)) [ FD ]
Line_2 $$ public FileContent take(@NotNull ProgressIndicator indicator) throws ProcessCanceledException -->Line_8 $$ while (true) [ CD ]
Line_21 $$ if (myLargeSizeRequested && !requestingLargeSize || myBytesBeingProcessed + length > Math.max(PROCESSED_FILE_BYTES_THRESHOLD, length)) -->Line_22 $$ myProceedWithProcessingLock.wait(300)[ CD ]
Line_2 $$ public FileContent take(@NotNull ProgressIndicator indicator) throws ProcessCanceledException -->Line_10 $$ indicator.checkCanceled()[ FD ]
Line_16 $$ final boolean requestingLargeSize = length > LARGE_SIZE_REQUEST_THRESHOLD-->Line_21 $$ if (myLargeSizeRequested && !requestingLargeSize || myBytesBeingProcessed + length > Math.max(PROCESSED_FILE_BYTES_THRESHOLD, length)) [ FD ]
Line_2 $$ public FileContent take(@NotNull ProgressIndicator indicator) throws ProcessCanceledException -->Line_3 $$ final FileContent content = doTake(indicator)[ FD ]
Line_21 $$ if (myLargeSizeRequested && !requestingLargeSize || myBytesBeingProcessed + length > Math.max(PROCESSED_FILE_BYTES_THRESHOLD, length)) -->Line_28 $$ return content[ CD ]
Line_2 $$ public FileContent take(@NotNull ProgressIndicator indicator) throws ProcessCanceledException -->Line_3 $$ final FileContent content = doTake(indicator)[ CD ]
Line_3 $$ final FileContent content = doTake(indicator)-->Line_12 $$ pushback(content)[ FD ]
Line_21 $$ if (myLargeSizeRequested && !requestingLargeSize || myBytesBeingProcessed + length > Math.max(PROCESSED_FILE_BYTES_THRESHOLD, length)) -->Line_25 $$ if (requestingLargeSize) [ CD ]
Line_3 $$ final FileContent content = doTake(indicator)-->Line_4 $$ if (content == null) [ FD ]
Line_2 $$ public FileContent take(@NotNull ProgressIndicator indicator) throws ProcessCanceledException -->Line_7 $$ final long length = content.getLength()[ CD ]
