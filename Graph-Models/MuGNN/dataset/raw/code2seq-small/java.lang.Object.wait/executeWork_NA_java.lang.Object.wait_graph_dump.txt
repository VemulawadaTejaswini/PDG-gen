Line_22 $$ boolean isAsync = (taskExecutor instanceof AsyncTaskExecutor)-->Line_23 $$ DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)[ FD ]
Line_48 $$ if (blockUntilStarted) -->Line_59 $$ return (System.currentTimeMillis() - acceptanceTime)[ CD ]
Line_31 $$ WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)-->Line_32 $$ wex.setErrorCode(WorkException.START_TIMED_OUT)[ FD ]
Line_48 $$ if (blockUntilStarted) -->Line_49 $$ long acceptanceTime = System.currentTimeMillis()[ CD ]
Line_18 $$ WorkListener workListenerToUse = workListener-->Line_33 $$ workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))[ FD ]
Line_18 $$ WorkListener workListenerToUse = workListener-->Line_46 $$ workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))[ FD ]
Line_18 $$ WorkListener workListenerToUse = workListener-->Line_38 $$ workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))[ FD ]
Line_25 $$ if (isAsync) -->Line_28 $$ taskExecutor.execute(workHandle)[ CD ]
Line_23 $$ DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)-->Line_26 $$ ((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)[ FD ]
Line_20 $$ workListenerToUse = new WorkAdapter()-->Line_33 $$ workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))[ FD ]
Line_48 $$ if (blockUntilStarted) -->Line_61 $$ return WorkManager.UNKNOWN[ CD ]
Line_19 $$ if (workListenerToUse == null) -->Line_20 $$ workListenerToUse = new WorkAdapter()[ CD ]
Line_52 $$ while (!workHandle.started) -->Line_53 $$ workHandle.monitor.wait()[ CD ]
Line_45 $$ if (isAsync) -->Line_46 $$ workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))[ CD ]
Line_18 $$ WorkListener workListenerToUse = workListener-->Line_20 $$ workListenerToUse = new WorkAdapter()[ FD ]
Line_23 $$ DelegatingWorkAdapter workHandle = new DelegatingWorkAdapter(work, workListenerToUse, !isAsync)-->Line_28 $$ taskExecutor.execute(workHandle)[ FD ]
Line_20 $$ workListenerToUse = new WorkAdapter()-->Line_38 $$ workListenerToUse.workRejected(new WorkEvent(this, WorkEvent.WORK_REJECTED, work, wex))[ FD ]
Line_25 $$ if (isAsync) -->Line_26 $$ ((AsyncTaskExecutor) taskExecutor).execute(workHandle, startTimeout)[ CD ]
Line_31 $$ WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)-->Line_42 $$ wex.setErrorCode(WorkException.INTERNAL)[ FD ]
Line_18 $$ WorkListener workListenerToUse = workListener-->Line_19 $$ if (workListenerToUse == null) [ FD ]
Line_31 $$ WorkException wex = new WorkRejectedException("TaskExecutor rejected Work because of timeout: " + work, ex)-->Line_37 $$ wex.setErrorCode(WorkException.INTERNAL)[ FD ]
Line_20 $$ workListenerToUse = new WorkAdapter()-->Line_46 $$ workListenerToUse.workAccepted(new WorkEvent(this, WorkEvent.WORK_ACCEPTED, work, null))[ FD ]
