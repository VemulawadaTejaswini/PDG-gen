Line_3 $$ final Call call = createCall(rpcKind, rpcRequest)-->Line_35 $$ return call.getRpcResponse()[ FD ]
Line_2 $$ public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest, ConnectionId remoteId, int serviceClass) throws IOException -->Line_4 $$ Connection connection = getConnection(remoteId, call, serviceClass)[ FD ]
Line_23 $$ if (interrupted) -->Line_24 $$ Thread.currentThread().interrupt()[ CD ]
Line_14 $$ boolean interrupted = false-->Line_20 $$ interrupted = true[ FD ]
Line_3 $$ final Call call = createCall(rpcKind, rpcRequest)-->Line_6 $$ connection.sendRpcRequest(call)[ FD ]
Line_3 $$ final Call call = createCall(rpcKind, rpcRequest)-->Line_4 $$ Connection connection = getConnection(remoteId, call, serviceClass)[ FD ]
Line_4 $$ Connection connection = getConnection(remoteId, call, serviceClass)-->Line_31 $$ InetSocketAddress address = connection.getRemoteAddress()[ FD ]
Line_4 $$ Connection connection = getConnection(remoteId, call, serviceClass)-->Line_6 $$ connection.sendRpcRequest(call)[ FD ]
Line_26 $$ if (call.error != null) -->Line_27 $$ if (call.error instanceof RemoteException) [ CD ]
Line_2 $$ public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest, ConnectionId remoteId, int serviceClass) throws IOException -->Line_3 $$ final Call call = createCall(rpcKind, rpcRequest)[ CD ]
Line_26 $$ if (call.error != null) -->Line_35 $$ return call.getRpcResponse()[ CD ]
Line_31 $$ InetSocketAddress address = connection.getRemoteAddress()-->Line_32 $$ throw NetUtils.wrapException(address.getHostName(), address.getPort(), NetUtils.getHostname(), 0, call.error)[ FD ]
Line_27 $$ if (call.error instanceof RemoteException) -->Line_31 $$ InetSocketAddress address = connection.getRemoteAddress()[ CD ]
Line_2 $$ public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest, ConnectionId remoteId, int serviceClass) throws IOException -->Line_14 $$ boolean interrupted = false[ CD ]
Line_27 $$ if (call.error instanceof RemoteException) -->Line_28 $$ call.error.fillInStackTrace()[ CD ]
Line_3 $$ final Call call = createCall(rpcKind, rpcRequest)-->Line_18 $$ call.wait()[ FD ]
Line_2 $$ public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest, ConnectionId remoteId, int serviceClass) throws IOException -->Line_3 $$ final Call call = createCall(rpcKind, rpcRequest)[ FD ]
Line_2 $$ public Writable call(RPC.RpcKind rpcKind, Writable rpcRequest, ConnectionId remoteId, int serviceClass) throws IOException -->Line_4 $$ Connection connection = getConnection(remoteId, call, serviceClass)[ CD ]
