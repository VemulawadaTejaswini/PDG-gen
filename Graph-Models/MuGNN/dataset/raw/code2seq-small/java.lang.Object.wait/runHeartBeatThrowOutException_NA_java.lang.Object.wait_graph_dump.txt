Line_8 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_9 $$ asyncClient.init(conf)[ FD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_8 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)[ CD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_22 $$ asyncClient.stop()[ CD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_3 $$ Configuration conf = new Configuration()[ CD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_4 $$ TestCallbackHandler callbackHandler = new TestCallbackHandler()[ CD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_10 $$ asyncClient.start()[ CD ]
Line_8 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_22 $$ asyncClient.stop()[ FD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_21 $$ Assert.assertTrue(callbackHandler.savedException.getMessage().contains(ex.getMessage()))[ FD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_7 $$ when(client.allocate(anyFloat())).thenThrow(ex)[ FD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_9 $$ asyncClient.init(conf)[ CD ]
Line_3 $$ Configuration conf = new Configuration()-->Line_9 $$ asyncClient.init(conf)[ FD ]
Line_8 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_12 $$ asyncClient.registerApplicationMaster("localhost", 1234, null)[ FD ]
Line_8 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_10 $$ asyncClient.start()[ FD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_7 $$ when(client.allocate(anyFloat())).thenThrow(ex)[ CD ]
Line_4 $$ TestCallbackHandler callbackHandler = new TestCallbackHandler()-->Line_8 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)[ FD ]
Line_2 $$ private void runHeartBeatThrowOutException(Exception ex) throws Exception -->Line_21 $$ Assert.assertTrue(callbackHandler.savedException.getMessage().contains(ex.getMessage()))[ CD ]
