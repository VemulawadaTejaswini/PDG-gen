Line_5 $$ TestCallbackHandler2 callbackHandler = new TestCallbackHandler2()-->Line_11 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)[ FD ]
Line_8 $$ List<ContainerStatus> completed = Arrays.asList(ContainerStatus.newInstance(newContainerId(0, 0, 0, 0), ContainerState.COMPLETE, "", 0))-->Line_9 $$ final AllocateResponse response = createAllocateResponse(completed, new ArrayList<Container>(), null)[ FD ]
Line_11 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_13 $$ asyncClient.init(conf)[ FD ]
Line_11 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_12 $$ callbackHandler.asynClient = asyncClient[ FD ]
Line_11 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_14 $$ asyncClient.start()[ FD ]
Line_4 $$ Configuration conf = new Configuration()-->Line_13 $$ asyncClient.init(conf)[ FD ]
Line_11 $$ AMRMClientAsync<ContainerRequest> asyncClient = AMRMClientAsync.createAMRMClientAsync(client, 20, callbackHandler)-->Line_16 $$ asyncClient.registerApplicationMaster("localhost", 1234, null)[ FD ]
Line_9 $$ final AllocateResponse response = createAllocateResponse(completed, new ArrayList<Container>(), null)-->Line_10 $$ when(client.allocate(anyFloat())).thenReturn(response)[ FD ]
