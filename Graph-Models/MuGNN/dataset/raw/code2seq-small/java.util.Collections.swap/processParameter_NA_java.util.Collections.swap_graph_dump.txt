Line_4 $$ final JavaCodeStyleManager styleManager = JavaCodeStyleManager.getInstance(project)-->Line_18 $$ String defaultName = styleManager.propertyNameToVariableName(propertyName, kind)[ FD ]
Line_6 $$ String propertyName = styleManager.variableNameToPropertyName(parameterName, VariableKind.PARAMETER)-->Line_13 $$ SuggestedNameInfo suggestedNameInfo = styleManager.suggestVariableName(kind, propertyName, null, type)[ FD ]
Line_15 $$ if (isInteractive) -->Line_19 $$ if (namesList.contains(defaultName)) [ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_8 $$ boolean isFinalToCalc[ CD ]
Line_7 $$ String fieldNameToCalc-->Line_29 $$ fieldNameToCalc = dialog.getEnteredName()[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_3 $$ final PsiType type = getSubstitutedType(myParameter)[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_4 $$ final JavaCodeStyleManager styleManager = JavaCodeStyleManager.getInstance(project)[ CD ]
Line_16 $$ List<String> namesList = new ArrayList<String>()-->Line_17 $$ ContainerUtil.addAll(namesList, names)[ FD ]
Line_15 $$ if (isInteractive) -->Line_16 $$ List<String> namesList = new ArrayList<String>()[ CD ]
Line_26 $$ if (!dialog.showAndGet()) -->Line_27 $$ return[ CD ]
Line_3 $$ final PsiType type = getSubstitutedType(myParameter)-->Line_13 $$ SuggestedNameInfo suggestedNameInfo = styleManager.suggestVariableName(kind, propertyName, null, type)[ FD ]
Line_29 $$ fieldNameToCalc = dialog.getEnteredName()-->Line_31 $$ suggestedNameInfo.nameChosen(fieldNameToCalc)[ FD ]
Line_30 $$ isFinalToCalc = dialog.isDeclareFinal()-->Line_33 $$ isFinalToCalc = !isMethodStatic && method.isConstructor()[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_38 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_11 $$ final boolean isMethodStatic = method.hasModifierProperty(PsiModifier.STATIC)-->Line_33 $$ isFinalToCalc = !isMethodStatic && method.isConstructor()[ FD ]
Line_15 $$ if (isInteractive) -->Line_24 $$ names = ArrayUtil.toStringArray(namesList)[ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_37 $$ final String fieldName = fieldNameToCalc[ CD ]
Line_15 $$ if (isInteractive) -->Line_29 $$ fieldNameToCalc = dialog.getEnteredName()[ CD ]
Line_25 $$ final CreateFieldFromParameterDialog dialog = new CreateFieldFromParameterDialog(project, names, targetClass, method.isConstructor(), type)-->Line_29 $$ fieldNameToCalc = dialog.getEnteredName()[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_7 $$ String fieldNameToCalc[ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_5 $$ final String parameterName = myParameter.getName()[ CD ]
Line_15 $$ if (isInteractive) -->Line_18 $$ String defaultName = styleManager.propertyNameToVariableName(propertyName, kind)[ CD ]
Line_15 $$ if (isInteractive) -->Line_31 $$ suggestedNameInfo.nameChosen(fieldNameToCalc)[ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_10 $$ final PsiMethod method = (PsiMethod) myParameter.getDeclarationScope()[ CD ]
Line_4 $$ final JavaCodeStyleManager styleManager = JavaCodeStyleManager.getInstance(project)-->Line_13 $$ SuggestedNameInfo suggestedNameInfo = styleManager.suggestVariableName(kind, propertyName, null, type)[ FD ]
Line_15 $$ if (isInteractive) -->Line_30 $$ isFinalToCalc = dialog.isDeclareFinal()[ CD ]
Line_29 $$ fieldNameToCalc = dialog.getEnteredName()-->Line_34 $$ fieldNameToCalc = names[0][ FD ]
Line_37 $$ final String fieldName = fieldNameToCalc-->Line_43 $$ performRefactoring(project, targetClass, method, myParameter, type, fieldName, isMethodStatic, isFinal)[ FD ]
Line_5 $$ final String parameterName = myParameter.getName()-->Line_6 $$ String propertyName = styleManager.variableNameToPropertyName(parameterName, VariableKind.PARAMETER)[ FD ]
Line_15 $$ if (isInteractive) -->Line_33 $$ isFinalToCalc = !isMethodStatic && method.isConstructor()[ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_3 $$ final PsiType type = getSubstitutedType(myParameter)[ CD ]
Line_18 $$ String defaultName = styleManager.propertyNameToVariableName(propertyName, kind)-->Line_22 $$ namesList.add(0, defaultName)[ FD ]
Line_25 $$ final CreateFieldFromParameterDialog dialog = new CreateFieldFromParameterDialog(project, names, targetClass, method.isConstructor(), type)-->Line_30 $$ isFinalToCalc = dialog.isDeclareFinal()[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_43 $$ performRefactoring(project, targetClass, method, myParameter, type, fieldName, isMethodStatic, isFinal)[ FD ]
Line_15 $$ if (isInteractive) -->Line_17 $$ ContainerUtil.addAll(namesList, names)[ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_13 $$ SuggestedNameInfo suggestedNameInfo = styleManager.suggestVariableName(kind, propertyName, null, type)[ CD ]
Line_4 $$ final JavaCodeStyleManager styleManager = JavaCodeStyleManager.getInstance(project)-->Line_6 $$ String propertyName = styleManager.variableNameToPropertyName(parameterName, VariableKind.PARAMETER)[ FD ]
Line_9 $$ final PsiClass targetClass = PsiTreeUtil.getParentOfType(myParameter, PsiClass.class)-->Line_43 $$ performRefactoring(project, targetClass, method, myParameter, type, fieldName, isMethodStatic, isFinal)[ FD ]
Line_16 $$ List<String> namesList = new ArrayList<String>()-->Line_24 $$ names = ArrayUtil.toStringArray(namesList)[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_10 $$ final PsiMethod method = (PsiMethod) myParameter.getDeclarationScope()[ FD ]
Line_14 $$ String[] names = suggestedNameInfo.names-->Line_24 $$ names = ArrayUtil.toStringArray(namesList)[ FD ]
Line_10 $$ final PsiMethod method = (PsiMethod) myParameter.getDeclarationScope()-->Line_11 $$ final boolean isMethodStatic = method.hasModifierProperty(PsiModifier.STATIC)[ FD ]
Line_3 $$ final PsiType type = getSubstitutedType(myParameter)-->Line_43 $$ performRefactoring(project, targetClass, method, myParameter, type, fieldName, isMethodStatic, isFinal)[ FD ]
Line_14 $$ String[] names = suggestedNameInfo.names-->Line_17 $$ ContainerUtil.addAll(namesList, names)[ FD ]
Line_19 $$ if (namesList.contains(defaultName)) -->Line_20 $$ Collections.swap(namesList, 0, namesList.indexOf(defaultName))[ CD ]
Line_13 $$ SuggestedNameInfo suggestedNameInfo = styleManager.suggestVariableName(kind, propertyName, null, type)-->Line_31 $$ suggestedNameInfo.nameChosen(fieldNameToCalc)[ FD ]
Line_12 $$ VariableKind kind = isMethodStatic ? VariableKind.STATIC_FIELD : VariableKind.FIELD-->Line_18 $$ String defaultName = styleManager.propertyNameToVariableName(propertyName, kind)[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_11 $$ final boolean isMethodStatic = method.hasModifierProperty(PsiModifier.STATIC)[ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_9 $$ final PsiClass targetClass = PsiTreeUtil.getParentOfType(myParameter, PsiClass.class)[ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_36 $$ final boolean isFinal = isFinalToCalc[ CD ]
Line_8 $$ boolean isFinalToCalc-->Line_30 $$ isFinalToCalc = dialog.isDeclareFinal()[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_5 $$ final String parameterName = myParameter.getName()[ FD ]
Line_7 $$ String fieldNameToCalc-->Line_34 $$ fieldNameToCalc = names[0][ FD ]
Line_18 $$ String defaultName = styleManager.propertyNameToVariableName(propertyName, kind)-->Line_19 $$ if (namesList.contains(defaultName)) [ FD ]
Line_25 $$ final CreateFieldFromParameterDialog dialog = new CreateFieldFromParameterDialog(project, names, targetClass, method.isConstructor(), type)-->Line_26 $$ if (!dialog.showAndGet()) [ FD ]
Line_18 $$ String defaultName = styleManager.propertyNameToVariableName(propertyName, kind)-->Line_20 $$ Collections.swap(namesList, 0, namesList.indexOf(defaultName))[ FD ]
Line_6 $$ String propertyName = styleManager.variableNameToPropertyName(parameterName, VariableKind.PARAMETER)-->Line_18 $$ String defaultName = styleManager.propertyNameToVariableName(propertyName, kind)[ FD ]
Line_16 $$ List<String> namesList = new ArrayList<String>()-->Line_20 $$ Collections.swap(namesList, 0, namesList.indexOf(defaultName))[ FD ]
Line_7 $$ String fieldNameToCalc-->Line_31 $$ suggestedNameInfo.nameChosen(fieldNameToCalc)[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_14 $$ String[] names = suggestedNameInfo.names[ CD ]
Line_15 $$ if (isInteractive) -->Line_25 $$ final CreateFieldFromParameterDialog dialog = new CreateFieldFromParameterDialog(project, names, targetClass, method.isConstructor(), type)[ CD ]
Line_8 $$ boolean isFinalToCalc-->Line_33 $$ isFinalToCalc = !isMethodStatic && method.isConstructor()[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_4 $$ final JavaCodeStyleManager styleManager = JavaCodeStyleManager.getInstance(project)[ FD ]
Line_15 $$ if (isInteractive) -->Line_26 $$ if (!dialog.showAndGet()) [ CD ]
Line_12 $$ VariableKind kind = isMethodStatic ? VariableKind.STATIC_FIELD : VariableKind.FIELD-->Line_13 $$ SuggestedNameInfo suggestedNameInfo = styleManager.suggestVariableName(kind, propertyName, null, type)[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_9 $$ final PsiClass targetClass = PsiTreeUtil.getParentOfType(myParameter, PsiClass.class)[ FD ]
Line_11 $$ final boolean isMethodStatic = method.hasModifierProperty(PsiModifier.STATIC)-->Line_43 $$ performRefactoring(project, targetClass, method, myParameter, type, fieldName, isMethodStatic, isFinal)[ FD ]
Line_16 $$ List<String> namesList = new ArrayList<String>()-->Line_19 $$ if (namesList.contains(defaultName)) [ FD ]
Line_10 $$ final PsiMethod method = (PsiMethod) myParameter.getDeclarationScope()-->Line_25 $$ final CreateFieldFromParameterDialog dialog = new CreateFieldFromParameterDialog(project, names, targetClass, method.isConstructor(), type)[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_12 $$ VariableKind kind = isMethodStatic ? VariableKind.STATIC_FIELD : VariableKind.FIELD[ CD ]
Line_15 $$ if (isInteractive) -->Line_34 $$ fieldNameToCalc = names[0][ CD ]
Line_36 $$ final boolean isFinal = isFinalToCalc-->Line_43 $$ performRefactoring(project, targetClass, method, myParameter, type, fieldName, isMethodStatic, isFinal)[ FD ]
Line_10 $$ final PsiMethod method = (PsiMethod) myParameter.getDeclarationScope()-->Line_43 $$ performRefactoring(project, targetClass, method, myParameter, type, fieldName, isMethodStatic, isFinal)[ FD ]
Line_19 $$ if (namesList.contains(defaultName)) -->Line_22 $$ namesList.add(0, defaultName)[ CD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_6 $$ String propertyName = styleManager.variableNameToPropertyName(parameterName, VariableKind.PARAMETER)[ CD ]
Line_10 $$ final PsiMethod method = (PsiMethod) myParameter.getDeclarationScope()-->Line_33 $$ isFinalToCalc = !isMethodStatic && method.isConstructor()[ FD ]
Line_2 $$ private void processParameter(@NotNull final Project project, @NotNull final PsiParameter myParameter, final boolean isInteractive) -->Line_15 $$ if (isInteractive) [ CD ]
Line_16 $$ List<String> namesList = new ArrayList<String>()-->Line_22 $$ namesList.add(0, defaultName)[ FD ]
