Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_60 $$ scrollPane.setViewportView(layeredPane)[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_59 $$ layeredPane.add(lineEndGutter, JLayeredPane.PALETTE_LAYER)[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_63 $$ editor.getDocument().addDocumentListener(gutterUpdateScheduler)[ CD ]
Line_47 $$ for (int i = getComponentCount() - 1; i >= 0; i--) -->Line_49 $$ if (component instanceof EditorComponentImpl) [ CD ]
Line_7 $$ final ConsoleGutterComponent lineEndGutter = new ConsoleGutterComponent(editor, gutterContentProvider, false)-->Line_59 $$ layeredPane.add(lineEndGutter, JLayeredPane.PALETTE_LAYER)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_15 $$ return editor.getScrollingModel().getVisibleArea().width - guttersWidth[ FD ]
Line_14 $$ EditorEx editor = getHistoryViewer()-->Line_18 $$ editor.setHorizontalScrollbarVisible(true)[ FD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_37 $$ int h = getHeight()[ CD ]
Line_14 $$ EditorEx editor = getHistoryViewer()-->Line_42 $$ lineEndGutter.setBounds(lineStartGutterWidth + (w - lineEndGutterWidth - editor.getEditor().getScrollPane().getVerticalScrollBar().getWidth()), 0, lineEndGutterWidth, h)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_58 $$ layeredPane.add(scrollPane.getViewport().getView(), JLayeredPane.DEFAULT_LAYER)[ CD ]
Line_14 $$ EditorEx editor = getHistoryViewer()-->Line_63 $$ editor.getDocument().addDocumentListener(gutterUpdateScheduler)[ FD ]
Line_37 $$ int h = getHeight()-->Line_40 $$ editor.setBounds(lineStartGutterWidth, 0, w - lineStartGutterWidth, h)[ FD ]
Line_38 $$ int lineStartGutterWidth = lineStartGutter.getPreferredSize().width-->Line_40 $$ editor.setBounds(lineStartGutterWidth, 0, w - lineStartGutterWidth, h)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_3 $$ if (editor == getConsoleEditor()) [ CD ]
Line_47 $$ for (int i = getComponentCount() - 1; i >= 0; i--) -->Line_48 $$ Component component = getComponent(i)[ CD ]
Line_9 $$ ((SoftWrapModelImpl) editor.getSoftWrapModel()).getApplianceManager().setWidthProvider(new SoftWrapApplianceManager.VisibleAreaWidthProvider() -->Line_14 $$ EditorEx editor = getHistoryViewer()[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_18 $$ editor.setHorizontalScrollbarVisible(true)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_6 $$ final ConsoleGutterComponent lineStartGutter = new ConsoleGutterComponent(editor, gutterContentProvider, true)[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_42 $$ lineEndGutter.setBounds(lineStartGutterWidth + (w - lineEndGutterWidth - editor.getEditor().getScrollPane().getVerticalScrollBar().getWidth()), 0, lineEndGutterWidth, h)[ FD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_23 $$ Dimension editorSize = getEditorComponent().getPreferredSize()[ CD ]
Line_7 $$ final ConsoleGutterComponent lineEndGutter = new ConsoleGutterComponent(editor, gutterContentProvider, false)-->Line_42 $$ lineEndGutter.setBounds(lineStartGutterWidth + (w - lineEndGutterWidth - editor.getEditor().getScrollPane().getVerticalScrollBar().getWidth()), 0, lineEndGutterWidth, h)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_7 $$ final ConsoleGutterComponent lineEndGutter = new ConsoleGutterComponent(editor, gutterContentProvider, false)[ CD ]
Line_6 $$ final ConsoleGutterComponent lineStartGutter = new ConsoleGutterComponent(editor, gutterContentProvider, true)-->Line_39 $$ lineStartGutter.setBounds(0, 0, lineStartGutterWidth + gutterContentProvider.getLineStartGutterOverlap(editor.getEditor()), h)[ FD ]
Line_6 $$ final ConsoleGutterComponent lineStartGutter = new ConsoleGutterComponent(editor, gutterContentProvider, true)-->Line_38 $$ int lineStartGutterWidth = lineStartGutter.getPreferredSize().width[ FD ]
Line_48 $$ Component component = getComponent(i)-->Line_49 $$ if (component instanceof EditorComponentImpl) [ FD ]
Line_14 $$ EditorEx editor = getHistoryViewer()-->Line_39 $$ lineStartGutter.setBounds(0, 0, lineStartGutterWidth + gutterContentProvider.getLineStartGutterOverlap(editor.getEditor()), h)[ FD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_40 $$ editor.setBounds(lineStartGutterWidth, 0, w - lineStartGutterWidth, h)[ CD ]
Line_47 $$ for (int i = getComponentCount() - 1; i >= 0; i--) -->Line_48 $$ Component component = getComponent(i)[ FD ]
Line_37 $$ int h = getHeight()-->Line_39 $$ lineStartGutter.setBounds(0, 0, lineStartGutterWidth + gutterContentProvider.getLineStartGutterOverlap(editor.getEditor()), h)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_9 $$ ((SoftWrapModelImpl) editor.getSoftWrapModel()).getApplianceManager().setWidthProvider(new SoftWrapApplianceManager.VisibleAreaWidthProvider() [ CD ]
Line_35 $$ EditorComponentImpl editor = getEditorComponent()-->Line_40 $$ editor.setBounds(lineStartGutterWidth, 0, w - lineStartGutterWidth, h)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_56 $$ layeredPane.add(lineStartGutter, JLayeredPane.PALETTE_LAYER)[ CD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_30 $$ return new Dimension(lineStartGutter.getPreferredSize().width + editorSize.width, editorSize.height)[ CD ]
Line_14 $$ EditorEx editor = getHistoryViewer()-->Line_15 $$ return editor.getScrollingModel().getVisibleArea().width - guttersWidth[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_8 $$ editor.getSoftWrapModel().forceAdditionalColumnsUsage()[ CD ]
Line_37 $$ int h = getHeight()-->Line_42 $$ lineEndGutter.setBounds(lineStartGutterWidth + (w - lineEndGutterWidth - editor.getEditor().getScrollPane().getVerticalScrollBar().getWidth()), 0, lineEndGutterWidth, h)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_39 $$ lineStartGutter.setBounds(0, 0, lineStartGutterWidth + gutterContentProvider.getLineStartGutterOverlap(editor.getEditor()), h)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_57 $$ JScrollPane scrollPane = editor.getScrollPane()[ FD ]
Line_35 $$ EditorComponentImpl editor = getEditorComponent()-->Line_63 $$ editor.getDocument().addDocumentListener(gutterUpdateScheduler)[ FD ]
Line_14 $$ EditorEx editor = getHistoryViewer()-->Line_40 $$ editor.setBounds(lineStartGutterWidth, 0, w - lineStartGutterWidth, h)[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_3 $$ if (editor == getConsoleEditor()) [ FD ]
Line_6 $$ final ConsoleGutterComponent lineStartGutter = new ConsoleGutterComponent(editor, gutterContentProvider, true)-->Line_30 $$ return new Dimension(lineStartGutter.getPreferredSize().width + editorSize.width, editorSize.height)[ FD ]
Line_49 $$ if (component instanceof EditorComponentImpl) -->Line_50 $$ return (EditorComponentImpl) component[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_18 $$ editor.setHorizontalScrollbarVisible(true)[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_9 $$ ((SoftWrapModelImpl) editor.getSoftWrapModel()).getApplianceManager().setWidthProvider(new SoftWrapApplianceManager.VisibleAreaWidthProvider() [ FD ]
Line_41 $$ int lineEndGutterWidth = lineEndGutter.getPreferredSize().width-->Line_42 $$ lineEndGutter.setBounds(lineStartGutterWidth + (w - lineEndGutterWidth - editor.getEditor().getScrollPane().getVerticalScrollBar().getWidth()), 0, lineEndGutterWidth, h)[ FD ]
Line_6 $$ final ConsoleGutterComponent lineStartGutter = new ConsoleGutterComponent(editor, gutterContentProvider, true)-->Line_56 $$ layeredPane.add(lineStartGutter, JLayeredPane.PALETTE_LAYER)[ FD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_38 $$ int lineStartGutterWidth = lineStartGutter.getPreferredSize().width[ CD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_42 $$ lineEndGutter.setBounds(lineStartGutterWidth + (w - lineEndGutterWidth - editor.getEditor().getScrollPane().getVerticalScrollBar().getWidth()), 0, lineEndGutterWidth, h)[ CD ]
Line_3 $$ if (editor == getConsoleEditor()) -->Line_4 $$ return[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_62 $$ getProject().getMessageBus().connect(this).subscribe(DocumentBulkUpdateListener.TOPIC, gutterUpdateScheduler)[ CD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_39 $$ lineStartGutter.setBounds(0, 0, lineStartGutterWidth + gutterContentProvider.getLineStartGutterOverlap(editor.getEditor()), h)[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_8 $$ editor.getSoftWrapModel().forceAdditionalColumnsUsage()[ FD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_24 $$ return new Dimension(lineStartGutter.getPreferredSize().width + editorSize.width, editorSize.height)[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_63 $$ editor.getDocument().addDocumentListener(gutterUpdateScheduler)[ FD ]
Line_7 $$ final ConsoleGutterComponent lineEndGutter = new ConsoleGutterComponent(editor, gutterContentProvider, false)-->Line_41 $$ int lineEndGutterWidth = lineEndGutter.getPreferredSize().width[ FD ]
Line_7 $$ final ConsoleGutterComponent lineEndGutter = new ConsoleGutterComponent(editor, gutterContentProvider, false)-->Line_13 $$ int guttersWidth = lineEndGutter.getPreferredSize().width + lineStartGutter.getPreferredSize().width[ FD ]
Line_6 $$ final ConsoleGutterComponent lineStartGutter = new ConsoleGutterComponent(editor, gutterContentProvider, true)-->Line_24 $$ return new Dimension(lineStartGutter.getPreferredSize().width + editorSize.width, editorSize.height)[ FD ]
Line_35 $$ EditorComponentImpl editor = getEditorComponent()-->Line_39 $$ lineStartGutter.setBounds(0, 0, lineStartGutterWidth + gutterContentProvider.getLineStartGutterOverlap(editor.getEditor()), h)[ FD ]
Line_14 $$ EditorEx editor = getHistoryViewer()-->Line_57 $$ JScrollPane scrollPane = editor.getScrollPane()[ FD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_57 $$ JScrollPane scrollPane = editor.getScrollPane()[ CD ]
Line_2 $$ void setupEditor(@NotNull EditorEx editor) -->Line_40 $$ editor.setBounds(lineStartGutterWidth, 0, w - lineStartGutterWidth, h)[ FD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_41 $$ int lineEndGutterWidth = lineEndGutter.getPreferredSize().width[ CD ]
Line_35 $$ EditorComponentImpl editor = getEditorComponent()-->Line_42 $$ lineEndGutter.setBounds(lineStartGutterWidth + (w - lineEndGutterWidth - editor.getEditor().getScrollPane().getVerticalScrollBar().getWidth()), 0, lineEndGutterWidth, h)[ FD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_36 $$ int w = getWidth()[ CD ]
Line_9 $$ ((SoftWrapModelImpl) editor.getSoftWrapModel()).getApplianceManager().setWidthProvider(new SoftWrapApplianceManager.VisibleAreaWidthProvider() -->Line_13 $$ int guttersWidth = lineEndGutter.getPreferredSize().width + lineStartGutter.getPreferredSize().width[ CD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_47 $$ for (int i = getComponentCount() - 1; i >= 0; i--) [ CD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_29 $$ Dimension editorSize = getEditorComponent().getMinimumSize()[ CD ]
Line_6 $$ final ConsoleGutterComponent lineStartGutter = new ConsoleGutterComponent(editor, gutterContentProvider, true)-->Line_13 $$ int guttersWidth = lineEndGutter.getPreferredSize().width + lineStartGutter.getPreferredSize().width[ FD ]
Line_9 $$ ((SoftWrapModelImpl) editor.getSoftWrapModel()).getApplianceManager().setWidthProvider(new SoftWrapApplianceManager.VisibleAreaWidthProvider() -->Line_15 $$ return editor.getScrollingModel().getVisibleArea().width - guttersWidth[ CD ]
Line_35 $$ EditorComponentImpl editor = getEditorComponent()-->Line_57 $$ JScrollPane scrollPane = editor.getScrollPane()[ FD ]
Line_19 $$ JLayeredPane layeredPane = new JLayeredPane() -->Line_35 $$ EditorComponentImpl editor = getEditorComponent()[ CD ]
