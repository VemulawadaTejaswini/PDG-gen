Line_2 $$ public ConsumerConnection create(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, ConnectionParameters connectionParameters, BuildCancellationToken cancellationToken) -->Line_15 $$ return delegate.create(distribution, progressLoggerFactory, connectionParameters, cancellationToken)[ FD ]
Line_2 $$ public ConsumerConnection create(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, ConnectionParameters connectionParameters, BuildCancellationToken cancellationToken) -->Line_5 $$ return delegate.create(distribution, progressLoggerFactory, connectionParameters, cancellationToken)[ FD ]
Line_10 $$ ProgressLogger logger = progressLoggerFactory.newOperation(SynchronizedToolingImplementationLoader.class)-->Line_11 $$ logger.setDescription("Wait for the other thread to finish acquiring the distribution")[ FD ]
Line_2 $$ public ConsumerConnection create(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, ConnectionParameters connectionParameters, BuildCancellationToken cancellationToken) -->Line_13 $$ lock.lock()[ CD ]
Line_2 $$ public ConsumerConnection create(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, ConnectionParameters connectionParameters, BuildCancellationToken cancellationToken) -->Line_10 $$ ProgressLogger logger = progressLoggerFactory.newOperation(SynchronizedToolingImplementationLoader.class)[ CD ]
Line_10 $$ ProgressLogger logger = progressLoggerFactory.newOperation(SynchronizedToolingImplementationLoader.class)-->Line_18 $$ logger.completed()[ FD ]
Line_10 $$ ProgressLogger logger = progressLoggerFactory.newOperation(SynchronizedToolingImplementationLoader.class)-->Line_12 $$ logger.started()[ FD ]
Line_2 $$ public ConsumerConnection create(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, ConnectionParameters connectionParameters, BuildCancellationToken cancellationToken) -->Line_3 $$ if (lock.tryLock()) [ CD ]
Line_2 $$ public ConsumerConnection create(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, ConnectionParameters connectionParameters, BuildCancellationToken cancellationToken) -->Line_10 $$ ProgressLogger logger = progressLoggerFactory.newOperation(SynchronizedToolingImplementationLoader.class)[ FD ]
Line_2 $$ public ConsumerConnection create(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, ConnectionParameters connectionParameters, BuildCancellationToken cancellationToken) -->Line_12 $$ logger.started()[ CD ]
Line_2 $$ public ConsumerConnection create(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, ConnectionParameters connectionParameters, BuildCancellationToken cancellationToken) -->Line_11 $$ logger.setDescription("Wait for the other thread to finish acquiring the distribution")[ CD ]
