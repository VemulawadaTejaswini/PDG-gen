Line_3 $$ TaskCompletionEvent[] events = EMPTY_TASK_COMPLETION_EVENTS-->Line_8 $$ events = mapAttemptCompletionEvents.subList(startIndex, actualMax + startIndex).toArray(events)[ FD ]
Line_2 $$ public TaskCompletionEvent[] getMapAttemptCompletionEvents(int startIndex, int maxEvents) -->Line_7 $$ int actualMax = Math.min(maxEvents, (mapAttemptCompletionEvents.size() - startIndex))[ FD ]
Line_2 $$ public TaskCompletionEvent[] getMapAttemptCompletionEvents(int startIndex, int maxEvents) -->Line_8 $$ events = mapAttemptCompletionEvents.subList(startIndex, actualMax + startIndex).toArray(events)[ FD ]
Line_6 $$ if (mapAttemptCompletionEvents.size() > startIndex) -->Line_7 $$ int actualMax = Math.min(maxEvents, (mapAttemptCompletionEvents.size() - startIndex))[ CD ]
Line_2 $$ public TaskCompletionEvent[] getMapAttemptCompletionEvents(int startIndex, int maxEvents) -->Line_6 $$ if (mapAttemptCompletionEvents.size() > startIndex) [ FD ]
Line_6 $$ if (mapAttemptCompletionEvents.size() > startIndex) -->Line_8 $$ events = mapAttemptCompletionEvents.subList(startIndex, actualMax + startIndex).toArray(events)[ CD ]
Line_2 $$ public TaskCompletionEvent[] getMapAttemptCompletionEvents(int startIndex, int maxEvents) -->Line_4 $$ readLock.lock()[ CD ]
Line_2 $$ public TaskCompletionEvent[] getMapAttemptCompletionEvents(int startIndex, int maxEvents) -->Line_3 $$ TaskCompletionEvent[] events = EMPTY_TASK_COMPLETION_EVENTS[ CD ]
