Line_3 $$ Runnable cancellationHandler = new Runnable() -->Line_5 $$ signal(lock, condition)[ CD ]
Line_3 $$ Runnable cancellationHandler = new Runnable() -->Line_12 $$ cancellationToken.addCallback(cancellationHandler)[ FD ]
Line_9 $$ if (cancellationToken.isCancellationRequested()) -->Line_10 $$ return[ CD ]
Line_17 $$ while (!cancellationToken.isCancellationRequested() && error.get() == null && (lastChangeAtValue == 0 || monotonicClockMillis() - lastChangeAtValue < quietPeriodMillis)) -->Line_18 $$ condition.await(quietPeriodMillis, TimeUnit.MILLISECONDS)[ CD ]
Line_17 $$ while (!cancellationToken.isCancellationRequested() && error.get() == null && (lastChangeAtValue == 0 || monotonicClockMillis() - lastChangeAtValue < quietPeriodMillis)) -->Line_19 $$ lastChangeAtValue = lastChangeAt.get()[ CD ]
Line_2 $$ public void wait(Runnable notifier) -->Line_3 $$ Runnable cancellationHandler = new Runnable() [ CD ]
Line_2 $$ public void wait(Runnable notifier) -->Line_13 $$ notifier.run()[ FD ]
Line_3 $$ Runnable cancellationHandler = new Runnable() -->Line_31 $$ cancellationToken.removeCallback(cancellationHandler)[ FD ]
