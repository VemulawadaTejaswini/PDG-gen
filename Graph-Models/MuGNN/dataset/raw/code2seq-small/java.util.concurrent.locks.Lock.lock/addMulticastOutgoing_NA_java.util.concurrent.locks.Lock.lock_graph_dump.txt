Line_13 $$ AsyncConnection<Message> outgoingEndpoint = router.createLocalConnection()-->Line_15 $$ outgoingEndpoint.dispatchTo(outgoing.getBottom())[ FD ]
Line_9 $$ StoppableExecutor executor = executorFactory.create(displayName + " outgoing broadcast " + channel)-->Line_10 $$ executors.add(executor)[ FD ]
Line_5 $$ ProtocolStack<Message> outgoing = outgoingBroadcasts.get(channel)-->Line_11 $$ outgoing = new ProtocolStack<Message>(executor, failureHandler, failureHandler, broadcastProtocol, sendProtocol)[ FD ]
Line_11 $$ outgoing = new ProtocolStack<Message>(executor, failureHandler, failureHandler, broadcastProtocol, sendProtocol)-->Line_17 $$ return new OutgoingMultiplex(channel, outgoing.getTop())[ FD ]
Line_5 $$ ProtocolStack<Message> outgoing = outgoingBroadcasts.get(channel)-->Line_15 $$ outgoingEndpoint.dispatchTo(outgoing.getBottom())[ FD ]
Line_2 $$ public Dispatch<Object> addMulticastOutgoing(String channel) -->Line_5 $$ ProtocolStack<Message> outgoing = outgoingBroadcasts.get(channel)[ FD ]
Line_11 $$ outgoing = new ProtocolStack<Message>(executor, failureHandler, failureHandler, broadcastProtocol, sendProtocol)-->Line_12 $$ outgoingBroadcasts.put(channel, outgoing)[ FD ]
Line_6 $$ if (outgoing == null) -->Line_14 $$ outgoing.getBottom().dispatchTo(outgoingEndpoint)[ CD ]
Line_11 $$ outgoing = new ProtocolStack<Message>(executor, failureHandler, failureHandler, broadcastProtocol, sendProtocol)-->Line_15 $$ outgoingEndpoint.dispatchTo(outgoing.getBottom())[ FD ]
Line_2 $$ public Dispatch<Object> addMulticastOutgoing(String channel) -->Line_3 $$ lock.lock()[ CD ]
Line_13 $$ AsyncConnection<Message> outgoingEndpoint = router.createLocalConnection()-->Line_14 $$ outgoing.getBottom().dispatchTo(outgoingEndpoint)[ FD ]
Line_5 $$ ProtocolStack<Message> outgoing = outgoingBroadcasts.get(channel)-->Line_6 $$ if (outgoing == null) [ FD ]
Line_5 $$ ProtocolStack<Message> outgoing = outgoingBroadcasts.get(channel)-->Line_12 $$ outgoingBroadcasts.put(channel, outgoing)[ FD ]
Line_6 $$ if (outgoing == null) -->Line_11 $$ outgoing = new ProtocolStack<Message>(executor, failureHandler, failureHandler, broadcastProtocol, sendProtocol)[ CD ]
Line_2 $$ public Dispatch<Object> addMulticastOutgoing(String channel) -->Line_12 $$ outgoingBroadcasts.put(channel, outgoing)[ FD ]
Line_6 $$ if (outgoing == null) -->Line_10 $$ executors.add(executor)[ CD ]
Line_6 $$ if (outgoing == null) -->Line_7 $$ Protocol<Message> broadcastProtocol = new BroadcastSendProtocol()[ CD ]
Line_6 $$ if (outgoing == null) -->Line_9 $$ StoppableExecutor executor = executorFactory.create(displayName + " outgoing broadcast " + channel)[ CD ]
Line_6 $$ if (outgoing == null) -->Line_15 $$ outgoingEndpoint.dispatchTo(outgoing.getBottom())[ CD ]
Line_6 $$ if (outgoing == null) -->Line_8 $$ Protocol<Message> sendProtocol = new SendProtocol(idGenerator.generateId(), nodeName, channel)[ CD ]
Line_11 $$ outgoing = new ProtocolStack<Message>(executor, failureHandler, failureHandler, broadcastProtocol, sendProtocol)-->Line_14 $$ outgoing.getBottom().dispatchTo(outgoingEndpoint)[ FD ]
Line_5 $$ ProtocolStack<Message> outgoing = outgoingBroadcasts.get(channel)-->Line_14 $$ outgoing.getBottom().dispatchTo(outgoingEndpoint)[ FD ]
Line_6 $$ if (outgoing == null) -->Line_13 $$ AsyncConnection<Message> outgoingEndpoint = router.createLocalConnection()[ CD ]
Line_5 $$ ProtocolStack<Message> outgoing = outgoingBroadcasts.get(channel)-->Line_17 $$ return new OutgoingMultiplex(channel, outgoing.getTop())[ FD ]
Line_6 $$ if (outgoing == null) -->Line_12 $$ outgoingBroadcasts.put(channel, outgoing)[ CD ]
