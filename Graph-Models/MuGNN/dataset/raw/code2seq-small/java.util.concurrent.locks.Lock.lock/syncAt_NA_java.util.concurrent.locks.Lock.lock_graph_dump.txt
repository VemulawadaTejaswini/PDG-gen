Line_2 $$ public void syncAt(int tick) -->Line_36 $$ LOGGER.debug("Thread [ CD ]
Line_2 $$ public void syncAt(int tick) -->Line_6 $$ ClockTickImpl clockTick = getTick(tick)[ FD ]
Line_13 $$ Date expiry = new Date(System.currentTimeMillis() + MAX_WAIT_TIME)-->Line_18 $$ boolean signalled = condition.awaitUntil(expiry)[ FD ]
Line_6 $$ ClockTickImpl clockTick = getTick(tick)-->Line_27 $$ throw new RuntimeException(String.format("Could not wait for all threads to reach %s, as a failure has occurred in another test thread.", clockTick))[ FD ]
Line_2 $$ public void syncAt(int tick) -->Line_3 $$ LOGGER.debug("Thread [ CD ]
Line_6 $$ ClockTickImpl clockTick = getTick(tick)-->Line_16 $$ while (failures.isEmpty() && currentTick != clockTick && !clockTick.allThreadsSynced(synching, active)) [ FD ]
Line_6 $$ ClockTickImpl clockTick = getTick(tick)-->Line_7 $$ if (!clockTick.isImmediatelyAfter(currentTick)) [ FD ]
Line_18 $$ boolean signalled = condition.awaitUntil(expiry)-->Line_19 $$ if (!signalled) [ FD ]
Line_29 $$ if (clockTick.isImmediatelyAfter(currentTick)) -->Line_31 $$ synching.clear()[ CD ]
Line_6 $$ ClockTickImpl clockTick = getTick(tick)-->Line_20 $$ throw new RuntimeException(String.format("Timeout waiting for all threads to reach %s. Currently at %s.", clockTick, currentTick))[ FD ]
Line_6 $$ ClockTickImpl clockTick = getTick(tick)-->Line_29 $$ if (clockTick.isImmediatelyAfter(currentTick)) [ FD ]
Line_6 $$ ClockTickImpl clockTick = getTick(tick)-->Line_8 $$ throw new RuntimeException(String.format("Cannot wait for %s, as clock is currently at %s.", clockTick, currentTick))[ FD ]
Line_2 $$ public void syncAt(int tick) -->Line_4 $$ lock.lock()[ CD ]
Line_2 $$ public void syncAt(int tick) -->Line_3 $$ LOGGER.debug("Thread [ FD ]
