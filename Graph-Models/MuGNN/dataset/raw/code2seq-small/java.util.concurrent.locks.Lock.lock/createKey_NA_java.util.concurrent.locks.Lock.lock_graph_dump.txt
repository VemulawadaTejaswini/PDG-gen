Line_2 $$ public KeyVersion createKey(String name, byte[] material, Options options) throws IOException -->Line_14 $$ throw new IOException("Wrong key length. Required " + options.getBitLength() + ", but got " + (8 * material.length))[ FD ]
Line_2 $$ public KeyVersion createKey(String name, byte[] material, Options options) throws IOException -->Line_6 $$ if (keyStore.containsAlias(name) || cache.containsKey(name)) [ FD ]
Line_2 $$ public KeyVersion createKey(String name, byte[] material, Options options) throws IOException -->Line_12 $$ Metadata meta = new Metadata(options.getCipher(), options.getBitLength(), options.getDescription(), options.getAttributes(), new Date(), 1)[ FD ]
Line_2 $$ public KeyVersion createKey(String name, byte[] material, Options options) throws IOException -->Line_16 $$ cache.put(name, meta)[ FD ]
Line_12 $$ Metadata meta = new Metadata(options.getCipher(), options.getBitLength(), options.getDescription(), options.getAttributes(), new Date(), 1)-->Line_16 $$ cache.put(name, meta)[ FD ]
Line_2 $$ public KeyVersion createKey(String name, byte[] material, Options options) throws IOException -->Line_13 $$ if (options.getBitLength() != 8 * material.length) [ FD ]
Line_12 $$ Metadata meta = new Metadata(options.getCipher(), options.getBitLength(), options.getDescription(), options.getAttributes(), new Date(), 1)-->Line_18 $$ return innerSetKeyVersion(name, versionName, material, meta.getCipher())[ FD ]
Line_2 $$ public KeyVersion createKey(String name, byte[] material, Options options) throws IOException -->Line_3 $$ writeLock.lock()[ CD ]
Line_2 $$ public KeyVersion createKey(String name, byte[] material, Options options) throws IOException -->Line_18 $$ return innerSetKeyVersion(name, versionName, material, meta.getCipher())[ FD ]
Line_2 $$ public KeyVersion createKey(String name, byte[] material, Options options) throws IOException -->Line_17 $$ String versionName = buildVersionName(name, 0)[ FD ]
Line_17 $$ String versionName = buildVersionName(name, 0)-->Line_18 $$ return innerSetKeyVersion(name, versionName, material, meta.getCipher())[ FD ]
