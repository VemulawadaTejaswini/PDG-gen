Line_2 $$ public long skip(long skip) throws IOException -->Line_3 $$ if (skip < 0) [ CD ]
Line_15 $$ long remaining = skip-->Line_16 $$ while (remaining > 0) [ FD ]
Line_21 $$ remaining -= skipped-->Line_16 $$ while (remaining > 0) [ FD ]
Line_16 $$ while (remaining > 0) -->Line_17 $$ int skipped = read(_skipBuffer, 0, (int) Math.min(remaining, skipBufferSize))[ CD ]
Line_15 $$ long remaining = skip-->Line_21 $$ remaining -= skipped[ FD ]
Line_16 $$ while (remaining > 0) -->Line_21 $$ remaining -= skipped[ CD ]
Line_21 $$ remaining -= skipped-->Line_17 $$ int skipped = read(_skipBuffer, 0, (int) Math.min(remaining, skipBufferSize))[ FD ]
Line_2 $$ public long skip(long skip) throws IOException -->Line_9 $$ int skipBufferSize = (int) Math.min(skip, _MAX_SKIP_BUFFER_SIZE)[ CD ]
Line_15 $$ long remaining = skip-->Line_17 $$ int skipped = read(_skipBuffer, 0, (int) Math.min(remaining, skipBufferSize))[ FD ]
Line_2 $$ public long skip(long skip) throws IOException -->Line_6 $$ if (_closed) [ CD ]
Line_2 $$ public long skip(long skip) throws IOException -->Line_10 $$ bufferLock.lock()[ CD ]
Line_17 $$ int skipped = read(_skipBuffer, 0, (int) Math.min(remaining, skipBufferSize))-->Line_18 $$ if (skipped == -1) [ FD ]
Line_2 $$ public long skip(long skip) throws IOException -->Line_9 $$ int skipBufferSize = (int) Math.min(skip, _MAX_SKIP_BUFFER_SIZE)[ FD ]
Line_9 $$ int skipBufferSize = (int) Math.min(skip, _MAX_SKIP_BUFFER_SIZE)-->Line_17 $$ int skipped = read(_skipBuffer, 0, (int) Math.min(remaining, skipBufferSize))[ FD ]
Line_17 $$ int skipped = read(_skipBuffer, 0, (int) Math.min(remaining, skipBufferSize))-->Line_21 $$ remaining -= skipped[ FD ]
Line_2 $$ public long skip(long skip) throws IOException -->Line_3 $$ if (skip < 0) [ FD ]
Line_16 $$ while (remaining > 0) -->Line_18 $$ if (skipped == -1) [ CD ]
