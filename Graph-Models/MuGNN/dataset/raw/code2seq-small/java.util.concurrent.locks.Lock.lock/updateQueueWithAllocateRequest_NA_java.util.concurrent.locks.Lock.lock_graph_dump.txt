Line_4 $$ Resource allocatedResource = Resources.createResource(0, 0)-->Line_63 $$ int[] values = new int[] [ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_61 $$ SortedMap<String, Counter> counterMap = metrics.getCounters()[ CD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_51 $$ container = c.getContainer()[ FD ]
Line_18 $$ for (RMContainer c : report.getLiveContainers()) -->Line_29 $$ container = c.getContainer()[ FD ]
Line_20 $$ container = c.getContainer()-->Line_24 $$ if (container != null) [ FD ]
Line_18 $$ for (RMContainer c : report.getLiveContainers()) -->Line_20 $$ container = c.getContainer()[ FD ]
Line_33 $$ if (container != null) -->Line_34 $$ Resources.subtractFrom(pendingResource, container.getResource())[ CD ]
Line_61 $$ SortedMap<String, Counter> counterMap = metrics.getCounters()-->Line_65 $$ if (!counterMap.containsKey(names[i])) [ FD ]
Line_16 $$ for (ContainerId containerId : containerIds) -->Line_50 $$ if (c.getContainerId().equals(containerId)) [ FD ]
Line_29 $$ container = c.getContainer()-->Line_34 $$ Resources.subtractFrom(pendingResource, container.getResource())[ FD ]
Line_39 $$ if (allocation.getContainerPreemptions() != null) -->Line_40 $$ preemptionContainers.addAll(allocation.getContainerPreemptions())[ CD ]
Line_15 $$ SchedulerAppReport report = super.getSchedulerAppInfo(attemptId)-->Line_27 $$ for (RMContainer c : report.getReservedContainers()) [ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_39 $$ if (allocation.getContainerPreemptions() != null) [ CD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_25 $$ Resources.subtractFrom(allocatedResource, container.getResource())[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_40 $$ preemptionContainers.addAll(allocation.getContainerPreemptions())[ FD ]
Line_65 $$ if (!counterMap.containsKey(names[i])) -->Line_66 $$ metrics.counter(names[i])[ CD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_3 $$ Resource pendingResource = Resources.createResource(0, 0)[ CD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_12 $$ Resources.addTo(allocatedResource, container.getResource())[ FD ]
Line_18 $$ for (RMContainer c : report.getLiveContainers()) -->Line_28 $$ if (c.getContainerId().equals(containerId)) [ FD ]
Line_64 $$ for (int i = names.length - 1; i >= 0; i--) -->Line_65 $$ if (!counterMap.containsKey(names[i])) [ CD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_15 $$ SchedulerAppReport report = super.getSchedulerAppInfo(attemptId)[ CD ]
Line_20 $$ container = c.getContainer()-->Line_56 $$ preemptionContainerMap.put(containerId, container.getResource())[ FD ]
Line_20 $$ container = c.getContainer()-->Line_29 $$ container = c.getContainer()[ FD ]
Line_73 $$ if (!schedulerMetrics.isTracked(queueName)) -->Line_74 $$ schedulerMetrics.trackQueue(queueName)[ CD ]
Line_55 $$ if (container != null) -->Line_56 $$ preemptionContainerMap.put(containerId, container.getResource())[ CD ]
Line_29 $$ container = c.getContainer()-->Line_55 $$ if (container != null) [ FD ]
Line_16 $$ for (ContainerId containerId : containerIds) -->Line_56 $$ preemptionContainerMap.put(containerId, container.getResource())[ FD ]
Line_3 $$ Resource pendingResource = Resources.createResource(0, 0)-->Line_34 $$ Resources.subtractFrom(pendingResource, container.getResource())[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_38 $$ Set<ContainerId> preemptionContainers = new HashSet<ContainerId>()[ CD ]
Line_24 $$ if (container != null) -->Line_33 $$ if (container != null) [ CD ]
Line_38 $$ Set<ContainerId> preemptionContainers = new HashSet<ContainerId>()-->Line_45 $$ if (!preemptionContainers.isEmpty()) [ FD ]
Line_16 $$ for (ContainerId containerId : containerIds) -->Line_28 $$ if (c.getContainerId().equals(containerId)) [ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_39 $$ if (allocation.getContainerPreemptions() != null) [ FD ]
Line_28 $$ if (c.getContainerId().equals(containerId)) -->Line_29 $$ container = c.getContainer()[ CD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_34 $$ Resources.subtractFrom(pendingResource, container.getResource())[ FD ]
Line_20 $$ container = c.getContainer()-->Line_55 $$ if (container != null) [ FD ]
Line_29 $$ container = c.getContainer()-->Line_51 $$ container = c.getContainer()[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_45 $$ if (!preemptionContainers.isEmpty()) [ CD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_71 $$ queueLock.lock()[ CD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_64 $$ for (int i = names.length - 1; i >= 0; i--) [ CD ]
Line_64 $$ for (int i = names.length - 1; i >= 0; i--) -->Line_69 $$ counterMap.get(names[i]).inc(values[i])[ CD ]
Line_38 $$ Set<ContainerId> preemptionContainers = new HashSet<ContainerId>()-->Line_43 $$ preemptionContainers.addAll(allocation.getStrictContainerPreemptions())[ FD ]
Line_18 $$ for (RMContainer c : report.getLiveContainers()) -->Line_51 $$ container = c.getContainer()[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_11 $$ for (Container container : allocation.getContainers()) [ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_42 $$ if (allocation.getStrictContainerPreemptions() != null) [ CD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_56 $$ preemptionContainerMap.put(containerId, container.getResource())[ FD ]
Line_18 $$ for (RMContainer c : report.getLiveContainers()) -->Line_19 $$ if (c.getContainerId().equals(containerId)) [ FD ]
Line_20 $$ container = c.getContainer()-->Line_25 $$ Resources.subtractFrom(allocatedResource, container.getResource())[ FD ]
Line_15 $$ SchedulerAppReport report = super.getSchedulerAppInfo(attemptId)-->Line_18 $$ for (RMContainer c : report.getLiveContainers()) [ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_43 $$ preemptionContainers.addAll(allocation.getStrictContainerPreemptions())[ FD ]
Line_16 $$ for (ContainerId containerId : containerIds) -->Line_19 $$ if (c.getContainerId().equals(containerId)) [ FD ]
Line_3 $$ Resource pendingResource = Resources.createResource(0, 0)-->Line_8 $$ Resources.addTo(pendingResource, Resources.multiply(request.getCapability(), request.getNumContainers()))[ FD ]
Line_20 $$ container = c.getContainer()-->Line_34 $$ Resources.subtractFrom(pendingResource, container.getResource())[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_5 $$ String queueName = appQueueMap.get(attemptId)[ CD ]
Line_38 $$ Set<ContainerId> preemptionContainers = new HashSet<ContainerId>()-->Line_40 $$ preemptionContainers.addAll(allocation.getContainerPreemptions())[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_4 $$ Resource allocatedResource = Resources.createResource(0, 0)[ CD ]
Line_42 $$ if (allocation.getStrictContainerPreemptions() != null) -->Line_43 $$ preemptionContainers.addAll(allocation.getStrictContainerPreemptions())[ CD ]
Line_47 $$ if (!preemptionContainerMap.containsKey(containerId)) -->Line_55 $$ if (container != null) [ CD ]
Line_67 $$ counterMap = metrics.getCounters()-->Line_69 $$ counterMap.get(names[i]).inc(values[i])[ FD ]
Line_20 $$ container = c.getContainer()-->Line_51 $$ container = c.getContainer()[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_5 $$ String queueName = appQueueMap.get(attemptId)[ FD ]
Line_29 $$ container = c.getContainer()-->Line_56 $$ preemptionContainerMap.put(containerId, container.getResource())[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_15 $$ SchedulerAppReport report = super.getSchedulerAppInfo(attemptId)[ FD ]
Line_3 $$ Resource pendingResource = Resources.createResource(0, 0)-->Line_13 $$ Resources.subtractFrom(pendingResource, container.getResource())[ FD ]
Line_19 $$ if (c.getContainerId().equals(containerId)) -->Line_20 $$ container = c.getContainer()[ CD ]
Line_18 $$ for (RMContainer c : report.getLiveContainers()) -->Line_50 $$ if (c.getContainerId().equals(containerId)) [ FD ]
Line_4 $$ Resource allocatedResource = Resources.createResource(0, 0)-->Line_12 $$ Resources.addTo(allocatedResource, container.getResource())[ FD ]
Line_5 $$ String queueName = appQueueMap.get(attemptId)-->Line_74 $$ schedulerMetrics.trackQueue(queueName)[ FD ]
Line_3 $$ Resource pendingResource = Resources.createResource(0, 0)-->Line_63 $$ int[] values = new int[] [ FD ]
Line_7 $$ if (request.getResourceName().equals(ResourceRequest.ANY)) -->Line_8 $$ Resources.addTo(pendingResource, Resources.multiply(request.getCapability(), request.getNumContainers()))[ CD ]
Line_65 $$ if (!counterMap.containsKey(names[i])) -->Line_67 $$ counterMap = metrics.getCounters()[ CD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_29 $$ container = c.getContainer()[ FD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_33 $$ if (container != null) [ FD ]
Line_24 $$ if (container != null) -->Line_25 $$ Resources.subtractFrom(allocatedResource, container.getResource())[ CD ]
Line_29 $$ container = c.getContainer()-->Line_33 $$ if (container != null) [ FD ]
Line_15 $$ SchedulerAppReport report = super.getSchedulerAppInfo(attemptId)-->Line_49 $$ for (RMContainer c : report.getLiveContainers()) [ FD ]
Line_16 $$ for (ContainerId containerId : containerIds) -->Line_47 $$ if (!preemptionContainerMap.containsKey(containerId)) [ FD ]
Line_50 $$ if (c.getContainerId().equals(containerId)) -->Line_51 $$ container = c.getContainer()[ CD ]
Line_51 $$ container = c.getContainer()-->Line_56 $$ preemptionContainerMap.put(containerId, container.getResource())[ FD ]
Line_6 $$ for (ResourceRequest request : resourceRequests) -->Line_8 $$ Resources.addTo(pendingResource, Resources.multiply(request.getCapability(), request.getNumContainers()))[ FD ]
Line_5 $$ String queueName = appQueueMap.get(attemptId)-->Line_73 $$ if (!schedulerMetrics.isTracked(queueName)) [ FD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_20 $$ container = c.getContainer()[ FD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_13 $$ Resources.subtractFrom(pendingResource, container.getResource())[ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_42 $$ if (allocation.getStrictContainerPreemptions() != null) [ FD ]
Line_20 $$ container = c.getContainer()-->Line_33 $$ if (container != null) [ FD ]
Line_4 $$ Resource allocatedResource = Resources.createResource(0, 0)-->Line_25 $$ Resources.subtractFrom(allocatedResource, container.getResource())[ FD ]
Line_61 $$ SortedMap<String, Counter> counterMap = metrics.getCounters()-->Line_69 $$ counterMap.get(names[i]).inc(values[i])[ FD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_55 $$ if (container != null) [ FD ]
Line_61 $$ SortedMap<String, Counter> counterMap = metrics.getCounters()-->Line_67 $$ counterMap = metrics.getCounters()[ FD ]
Line_67 $$ counterMap = metrics.getCounters()-->Line_65 $$ if (!counterMap.containsKey(names[i])) [ FD ]
Line_11 $$ for (Container container : allocation.getContainers()) -->Line_24 $$ if (container != null) [ FD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_62 $$ String[] names = new String[] [ CD ]
Line_2 $$ private void updateQueueWithAllocateRequest(Allocation allocation, ApplicationAttemptId attemptId, List<ResourceRequest> resourceRequests, List<ContainerId> containerIds) throws IOException -->Line_63 $$ int[] values = new int[] [ CD ]
Line_51 $$ container = c.getContainer()-->Line_55 $$ if (container != null) [ FD ]
Line_6 $$ for (ResourceRequest request : resourceRequests) -->Line_7 $$ if (request.getResourceName().equals(ResourceRequest.ANY)) [ FD ]
