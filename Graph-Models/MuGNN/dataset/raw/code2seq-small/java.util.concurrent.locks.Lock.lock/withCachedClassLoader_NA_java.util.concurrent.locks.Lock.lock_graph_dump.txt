Line_16 $$ Cleanup cleanup = new Cleanup(libClasspath, cachedClassLoader, finalizerThread.getReferenceQueue(), classLoader, groovySystemForLoader, gradleApiGroovy, antBuilderAdapterGroovy)-->Line_17 $$ finalizerThread.putCleanup(libClasspath, cleanup)[ FD ]
Line_20 $$ if (LOG.isDebugEnabled()) -->Line_21 $$ LOG.debug(String.format("Classloader found in cache: %s", libClasspath.getAsURIs()))[ CD ]
Line_3 $$ CachedClassLoader cachedClassLoader-->Line_33 $$ inUseClassLoaders.remove(cachedClassLoader)[ FD ]
Line_3 $$ CachedClassLoader cachedClassLoader-->Line_7 $$ cachedClassLoader = maybeGet(cacheEntry)[ FD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_10 $$ LOG.debug(String.format("Classloader cache miss for classpath : %s. Creating classloader.", libClasspath.getAsURIs()))[ FD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_6 $$ CacheEntry cacheEntry = cacheEntries.get(libClasspath)[ FD ]
Line_6 $$ CacheEntry cacheEntry = cacheEntries.get(libClasspath)-->Line_14 $$ cacheEntry = new CacheEntry(libClasspath, cachedClassLoader)[ FD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_18 $$ cacheEntries.put(libClasspath, cacheEntry)[ FD ]
Line_6 $$ CacheEntry cacheEntry = cacheEntries.get(libClasspath)-->Line_7 $$ cachedClassLoader = maybeGet(cacheEntry)[ FD ]
Line_3 $$ CachedClassLoader cachedClassLoader-->Line_24 $$ inUseClassLoaders.add(cachedClassLoader)[ FD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_16 $$ Cleanup cleanup = new Cleanup(libClasspath, cachedClassLoader, finalizerThread.getReferenceQueue(), classLoader, groovySystemForLoader, gradleApiGroovy, antBuilderAdapterGroovy)[ CD ]
Line_14 $$ cacheEntry = new CacheEntry(libClasspath, cachedClassLoader)-->Line_18 $$ cacheEntries.put(libClasspath, cacheEntry)[ FD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_15 $$ GroovySystemLoader groovySystemForLoader = groovySystemLoaderFactory.forClassLoader(classLoader)[ CD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_21 $$ LOG.debug(String.format("Classloader found in cache: %s", libClasspath.getAsURIs()))[ FD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_20 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_3 $$ CachedClassLoader cachedClassLoader[ CD ]
Line_13 $$ cachedClassLoader = new CachedClassLoader(libClasspath, classLoader)-->Line_33 $$ inUseClassLoaders.remove(cachedClassLoader)[ FD ]
Line_7 $$ cachedClassLoader = maybeGet(cacheEntry)-->Line_13 $$ cachedClassLoader = new CachedClassLoader(libClasspath, classLoader)[ FD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_9 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_13 $$ cachedClassLoader = new CachedClassLoader(libClasspath, classLoader)[ CD ]
Line_12 $$ ClassLoader classLoader = factory.create()-->Line_15 $$ GroovySystemLoader groovySystemForLoader = groovySystemLoaderFactory.forClassLoader(classLoader)[ FD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_12 $$ ClassLoader classLoader = factory.create()[ FD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_17 $$ finalizerThread.putCleanup(libClasspath, cleanup)[ CD ]
Line_13 $$ cachedClassLoader = new CachedClassLoader(libClasspath, classLoader)-->Line_24 $$ inUseClassLoaders.add(cachedClassLoader)[ FD ]
Line_7 $$ cachedClassLoader = maybeGet(cacheEntry)-->Line_29 $$ action.execute(cachedClassLoader)[ FD ]
Line_3 $$ CachedClassLoader cachedClassLoader-->Line_13 $$ cachedClassLoader = new CachedClassLoader(libClasspath, classLoader)[ FD ]
Line_6 $$ CacheEntry cacheEntry = cacheEntries.get(libClasspath)-->Line_18 $$ cacheEntries.put(libClasspath, cacheEntry)[ FD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_18 $$ cacheEntries.put(libClasspath, cacheEntry)[ CD ]
Line_9 $$ if (LOG.isDebugEnabled()) -->Line_10 $$ LOG.debug(String.format("Classloader cache miss for classpath : %s. Creating classloader.", libClasspath.getAsURIs()))[ CD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_4 $$ lock.lock()[ CD ]
Line_13 $$ cachedClassLoader = new CachedClassLoader(libClasspath, classLoader)-->Line_29 $$ action.execute(cachedClassLoader)[ FD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_12 $$ ClassLoader classLoader = factory.create()[ CD ]
Line_7 $$ cachedClassLoader = maybeGet(cacheEntry)-->Line_24 $$ inUseClassLoaders.add(cachedClassLoader)[ FD ]
Line_7 $$ cachedClassLoader = maybeGet(cacheEntry)-->Line_33 $$ inUseClassLoaders.remove(cachedClassLoader)[ FD ]
Line_7 $$ cachedClassLoader = maybeGet(cacheEntry)-->Line_8 $$ if (cachedClassLoader == null) [ FD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_29 $$ action.execute(cachedClassLoader)[ FD ]
Line_3 $$ CachedClassLoader cachedClassLoader-->Line_29 $$ action.execute(cachedClassLoader)[ FD ]
Line_3 $$ CachedClassLoader cachedClassLoader-->Line_8 $$ if (cachedClassLoader == null) [ FD ]
Line_2 $$ public void withCachedClassLoader(ClassPath libClasspath, GroovySystemLoader gradleApiGroovy, GroovySystemLoader antBuilderAdapterGroovy, Factory<? extends ClassLoader> factory, Action<? super CachedClassLoader> action) -->Line_17 $$ finalizerThread.putCleanup(libClasspath, cleanup)[ FD ]
Line_8 $$ if (cachedClassLoader == null) -->Line_14 $$ cacheEntry = new CacheEntry(libClasspath, cachedClassLoader)[ CD ]
