Line_24 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_29 $$ ProgressManager.checkCanceled()[ CD ]
Line_23 $$ final TIntHashSet finalHashMaskSet = hashMaskSet-->Line_28 $$ finalHashMaskSet.add(key[0])[ FD ]
Line_9 $$ File fileWithCaches = getSavedProjectFileValueIds(myLastScannedId, scope)-->Line_20 $$ FileUtil.asyncDelete(fileWithCaches)[ FD ]
Line_24 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_30 $$ return true[ CD ]
Line_11 $$ int id = myKeyHashToVirtualFileMapping.getLargestId()-->Line_34 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
Line_14 $$ hashMaskSet = loadHashedIds(fileWithCaches)-->Line_18 $$ if (hashMaskSet == null) [ FD ]
Line_14 $$ hashMaskSet = loadHashedIds(fileWithCaches)-->Line_22 $$ hashMaskSet = new TIntHashSet(1000)[ FD ]
Line_18 $$ if (hashMaskSet == null) -->Line_22 $$ hashMaskSet = new TIntHashSet(1000)[ CD ]
Line_24 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_26 $$ if (!idFilter.containsFileId(key[1]))[ CD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_37 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_2 $$ public boolean processKeys(@NotNull final Processor<Key> processor, GlobalSearchScope scope, final IdFilter idFilter) throws StorageException -->Line_34 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
Line_37 $$ if (LOG.isDebugEnabled()) -->Line_38 $$ LOG.debug("Scanned keyHashToVirtualFileMapping of " + myBaseStorageFile + " for " + (System.currentTimeMillis() - l))[ CD ]
Line_18 $$ if (hashMaskSet == null) -->Line_19 $$ if (useCachedHashIds && myLastScannedId != 0) [ CD ]
Line_41 $$ return myMap.processKeys(new Processor<Key>() -->Line_45 $$ return processor.process(key)[ CD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_41 $$ return myMap.processKeys(new Processor<Key>() [ CD ]
Line_19 $$ if (useCachedHashIds && myLastScannedId != 0) -->Line_20 $$ FileUtil.asyncDelete(fileWithCaches)[ CD ]
Line_43 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))-->Line_44 $$ return true[ CD ]
Line_7 $$ TIntHashSet hashMaskSet = null-->Line_18 $$ if (hashMaskSet == null) [ FD ]
Line_10 $$ final boolean useCachedHashIds = ENABLE_CACHED_HASH_IDS && (scope instanceof ProjectScopeImpl || scope instanceof ProjectAndLibrariesScope) && fileWithCaches != null-->Line_19 $$ if (useCachedHashIds && myLastScannedId != 0) [ FD ]
Line_18 $$ if (hashMaskSet == null) -->Line_24 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() [ CD ]
Line_7 $$ TIntHashSet hashMaskSet = null-->Line_14 $$ hashMaskSet = loadHashedIds(fileWithCaches)[ FD ]
Line_22 $$ hashMaskSet = new TIntHashSet(1000)-->Line_34 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
Line_14 $$ hashMaskSet = loadHashedIds(fileWithCaches)-->Line_34 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
Line_18 $$ if (hashMaskSet == null) -->Line_23 $$ final TIntHashSet finalHashMaskSet = hashMaskSet[ CD ]
Line_2 $$ public boolean processKeys(@NotNull final Processor<Key> processor, GlobalSearchScope scope, final IdFilter idFilter) throws StorageException -->Line_26 $$ if (!idFilter.containsFileId(key[1]))[ FD ]
Line_24 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_45 $$ return processor.process(key)[ FD ]
Line_2 $$ public boolean processKeys(@NotNull final Processor<Key> processor, GlobalSearchScope scope, final IdFilter idFilter) throws StorageException -->Line_49 $$ return myMap.processKeys(processor)[ FD ]
Line_7 $$ TIntHashSet hashMaskSet = null-->Line_22 $$ hashMaskSet = new TIntHashSet(1000)[ FD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_9 $$ File fileWithCaches = getSavedProjectFileValueIds(myLastScannedId, scope)[ CD ]
Line_33 $$ if (useCachedHashIds) -->Line_34 $$ saveHashedIds(hashMaskSet, id, scope)[ CD ]
Line_24 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_28 $$ finalHashMaskSet.add(key[0])[ CD ]
Line_23 $$ final TIntHashSet finalHashMaskSet = hashMaskSet-->Line_43 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))[ FD ]
Line_18 $$ if (hashMaskSet == null) -->Line_33 $$ if (useCachedHashIds) [ CD ]
Line_9 $$ File fileWithCaches = getSavedProjectFileValueIds(myLastScannedId, scope)-->Line_14 $$ hashMaskSet = loadHashedIds(fileWithCaches)[ FD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_12 $$ if (useCachedHashIds && id == myLastScannedId) [ CD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_8 $$ long l = System.currentTimeMillis()[ CD ]
Line_2 $$ public boolean processKeys(@NotNull final Processor<Key> processor, GlobalSearchScope scope, final IdFilter idFilter) throws StorageException -->Line_9 $$ File fileWithCaches = getSavedProjectFileValueIds(myLastScannedId, scope)[ FD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_10 $$ final boolean useCachedHashIds = ENABLE_CACHED_HASH_IDS && (scope instanceof ProjectScopeImpl || scope instanceof ProjectAndLibrariesScope) && fileWithCaches != null[ CD ]
Line_8 $$ long l = System.currentTimeMillis()-->Line_62 $$ l.unlock()[ FD ]
Line_41 $$ return myMap.processKeys(new Processor<Key>() -->Line_43 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))[ FD ]
Line_2 $$ public boolean processKeys(@NotNull final Processor<Key> processor, GlobalSearchScope scope, final IdFilter idFilter) throws StorageException -->Line_45 $$ return processor.process(key)[ FD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_11 $$ int id = myKeyHashToVirtualFileMapping.getLargestId()[ CD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_7 $$ TIntHashSet hashMaskSet = null[ CD ]
Line_2 $$ public boolean processKeys(@NotNull final Processor<Key> processor, GlobalSearchScope scope, final IdFilter idFilter) throws StorageException -->Line_3 $$ l.lock()[ CD ]
Line_10 $$ final boolean useCachedHashIds = ENABLE_CACHED_HASH_IDS && (scope instanceof ProjectScopeImpl || scope instanceof ProjectAndLibrariesScope) && fileWithCaches != null-->Line_12 $$ if (useCachedHashIds && id == myLastScannedId) [ FD ]
Line_24 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_43 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))[ FD ]
Line_41 $$ return myMap.processKeys(new Processor<Key>() -->Line_43 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))[ CD ]
Line_6 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_18 $$ if (hashMaskSet == null) [ CD ]
Line_26 $$ if (!idFilter.containsFileId(key[1]))-->Line_27 $$ return true[ CD ]
Line_41 $$ return myMap.processKeys(new Processor<Key>() -->Line_45 $$ return processor.process(key)[ FD ]
Line_7 $$ TIntHashSet hashMaskSet = null-->Line_34 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
