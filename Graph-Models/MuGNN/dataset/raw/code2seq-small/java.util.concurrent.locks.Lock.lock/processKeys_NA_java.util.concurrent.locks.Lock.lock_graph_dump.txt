Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_45 $$ return myMap.processKeys(new Processor<Key>() [ CD ]
Line_37 $$ if (useCachedHashIds) -->Line_38 $$ saveHashedIds(hashMaskSet, id, scope)[ CD ]
Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_41 $$ if (LOG.isDebugEnabled()) [ CD ]
Line_9 $$ TIntHashSet hashMaskSet = null-->Line_24 $$ hashMaskSet = new TIntHashSet(1000)[ FD ]
Line_9 $$ TIntHashSet hashMaskSet = null-->Line_16 $$ hashMaskSet = loadHashedIds(fileWithCaches)[ FD ]
Line_26 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_34 $$ return true[ CD ]
Line_9 $$ TIntHashSet hashMaskSet = null-->Line_20 $$ if (hashMaskSet == null) [ FD ]
Line_12 $$ final boolean useCachedHashIds = ENABLE_CACHED_HASH_IDS && (scope instanceof ProjectScopeImpl || scope instanceof ProjectAndLibrariesScope) && fileWithCaches != null-->Line_14 $$ if (useCachedHashIds && id == myLastScannedId) [ FD ]
Line_20 $$ if (hashMaskSet == null) -->Line_26 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() [ CD ]
Line_30 $$ if (!idFilter.containsFileId(key[1]))-->Line_31 $$ return true[ CD ]
Line_11 $$ File fileWithCaches = getSavedProjectFileValueIds(myLastScannedId, scope)-->Line_22 $$ FileUtil.asyncDelete(fileWithCaches)[ FD ]
Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_14 $$ if (useCachedHashIds && id == myLastScannedId) [ CD ]
Line_10 $$ long l = System.currentTimeMillis()-->Line_68 $$ l.unlock()[ FD ]
Line_26 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_32 $$ finalHashMaskSet.add(key[0])[ CD ]
Line_20 $$ if (hashMaskSet == null) -->Line_21 $$ if (useCachedHashIds && myLastScannedId != 0) [ CD ]
Line_45 $$ return myMap.processKeys(new Processor<Key>() -->Line_49 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))[ FD ]
Line_26 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_49 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))[ FD ]
Line_16 $$ hashMaskSet = loadHashedIds(fileWithCaches)-->Line_20 $$ if (hashMaskSet == null) [ FD ]
Line_45 $$ return myMap.processKeys(new Processor<Key>() -->Line_51 $$ return processor.process(key)[ FD ]
Line_20 $$ if (hashMaskSet == null) -->Line_24 $$ hashMaskSet = new TIntHashSet(1000)[ CD ]
Line_45 $$ return myMap.processKeys(new Processor<Key>() -->Line_49 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))[ CD ]
Line_26 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_30 $$ if (!idFilter.containsFileId(key[1]))[ CD ]
Line_24 $$ hashMaskSet = new TIntHashSet(1000)-->Line_38 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
Line_20 $$ if (hashMaskSet == null) -->Line_37 $$ if (useCachedHashIds) [ CD ]
Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_13 $$ int id = myKeyHashToVirtualFileMapping.getLargestId()[ CD ]
Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_10 $$ long l = System.currentTimeMillis()[ CD ]
Line_16 $$ hashMaskSet = loadHashedIds(fileWithCaches)-->Line_24 $$ hashMaskSet = new TIntHashSet(1000)[ FD ]
Line_41 $$ if (LOG.isDebugEnabled()) -->Line_42 $$ LOG.debug("Scanned keyHashToVirtualFileMapping of " + myBaseStorageFile + " for " + (System.currentTimeMillis() - l))[ CD ]
Line_25 $$ final TIntHashSet finalHashMaskSet = hashMaskSet-->Line_49 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))[ FD ]
Line_9 $$ TIntHashSet hashMaskSet = null-->Line_38 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
Line_45 $$ return myMap.processKeys(new Processor<Key>() -->Line_51 $$ return processor.process(key)[ CD ]
Line_16 $$ hashMaskSet = loadHashedIds(fileWithCaches)-->Line_38 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_12 $$ final boolean useCachedHashIds = ENABLE_CACHED_HASH_IDS && (scope instanceof ProjectScopeImpl || scope instanceof ProjectAndLibrariesScope) && fileWithCaches != null[ CD ]
Line_21 $$ if (useCachedHashIds && myLastScannedId != 0) -->Line_22 $$ FileUtil.asyncDelete(fileWithCaches)[ CD ]
Line_13 $$ int id = myKeyHashToVirtualFileMapping.getLargestId()-->Line_38 $$ saveHashedIds(hashMaskSet, id, scope)[ FD ]
Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_20 $$ if (hashMaskSet == null) [ CD ]
Line_26 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_51 $$ return processor.process(key)[ FD ]
Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_9 $$ TIntHashSet hashMaskSet = null[ CD ]
Line_20 $$ if (hashMaskSet == null) -->Line_25 $$ final TIntHashSet finalHashMaskSet = hashMaskSet[ CD ]
Line_25 $$ final TIntHashSet finalHashMaskSet = hashMaskSet-->Line_32 $$ finalHashMaskSet.add(key[0])[ FD ]
Line_26 $$ myKeyHashToVirtualFileMapping.iterateData(new Processor<int[]>() -->Line_33 $$ ProgressManager.checkCanceled()[ CD ]
Line_49 $$ if (!finalHashMaskSet.contains(myKeyDescriptor.getHashCode(key)))-->Line_50 $$ return true[ CD ]
Line_11 $$ File fileWithCaches = getSavedProjectFileValueIds(myLastScannedId, scope)-->Line_16 $$ hashMaskSet = loadHashedIds(fileWithCaches)[ FD ]
Line_12 $$ final boolean useCachedHashIds = ENABLE_CACHED_HASH_IDS && (scope instanceof ProjectScopeImpl || scope instanceof ProjectAndLibrariesScope) && fileWithCaches != null-->Line_21 $$ if (useCachedHashIds && myLastScannedId != 0) [ FD ]
Line_8 $$ if (myBuildKeyHashToVirtualFileMapping && idFilter != null) -->Line_11 $$ File fileWithCaches = getSavedProjectFileValueIds(myLastScannedId, scope)[ CD ]
