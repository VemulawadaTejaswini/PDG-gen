Line_8 $$ if (task.getType() == TaskType.MAP) -->Line_11 $$ reduceProgress += (task.isFinished() ? 1f : task.getProgress())[ CD ]
Line_8 $$ if (task.getType() == TaskType.MAP) -->Line_9 $$ mapProgress += (task.isFinished() ? 1f : task.getProgress())[ CD ]
Line_7 $$ for (Task task : this.tasks.values()) -->Line_9 $$ mapProgress += (task.isFinished() ? 1f : task.getProgress())[ FD ]
Line_6 $$ float reduceProgress = 0f-->Line_21 $$ this.reduceProgress = reduceProgress[ FD ]
Line_15 $$ mapProgress = mapProgress / this.numMapTasks-->Line_20 $$ this.mapProgress = mapProgress[ FD ]
Line_7 $$ for (Task task : this.tasks.values()) -->Line_8 $$ if (task.getType() == TaskType.MAP) [ FD ]
Line_11 $$ reduceProgress += (task.isFinished() ? 1f : task.getProgress())-->Line_21 $$ this.reduceProgress = reduceProgress[ FD ]
Line_2 $$ private void computeProgress() -->Line_3 $$ this.readLock.lock()[ CD ]
Line_9 $$ mapProgress += (task.isFinished() ? 1f : task.getProgress())-->Line_15 $$ mapProgress = mapProgress / this.numMapTasks[ FD ]
Line_18 $$ reduceProgress = reduceProgress / this.numReduceTasks-->Line_21 $$ this.reduceProgress = reduceProgress[ FD ]
Line_5 $$ float mapProgress = 0f-->Line_15 $$ mapProgress = mapProgress / this.numMapTasks[ FD ]
Line_17 $$ if (this.numReduceTasks != 0) -->Line_18 $$ reduceProgress = reduceProgress / this.numReduceTasks[ CD ]
Line_6 $$ float reduceProgress = 0f-->Line_18 $$ reduceProgress = reduceProgress / this.numReduceTasks[ FD ]
Line_14 $$ if (this.numMapTasks != 0) -->Line_15 $$ mapProgress = mapProgress / this.numMapTasks[ CD ]
Line_5 $$ float mapProgress = 0f-->Line_20 $$ this.mapProgress = mapProgress[ FD ]
Line_5 $$ float mapProgress = 0f-->Line_9 $$ mapProgress += (task.isFinished() ? 1f : task.getProgress())[ FD ]
Line_9 $$ mapProgress += (task.isFinished() ? 1f : task.getProgress())-->Line_20 $$ this.mapProgress = mapProgress[ FD ]
Line_6 $$ float reduceProgress = 0f-->Line_11 $$ reduceProgress += (task.isFinished() ? 1f : task.getProgress())[ FD ]
Line_11 $$ reduceProgress += (task.isFinished() ? 1f : task.getProgress())-->Line_18 $$ reduceProgress = reduceProgress / this.numReduceTasks[ FD ]
Line_7 $$ for (Task task : this.tasks.values()) -->Line_11 $$ reduceProgress += (task.isFinished() ? 1f : task.getProgress())[ FD ]
