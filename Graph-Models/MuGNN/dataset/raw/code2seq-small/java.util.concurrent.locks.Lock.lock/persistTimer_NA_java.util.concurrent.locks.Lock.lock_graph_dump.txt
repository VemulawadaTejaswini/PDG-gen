Line_10 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_20 $$ final String key = timerTransactionKey(timer)[ CD ]
Line_20 $$ final String key = timerTransactionKey(timer)-->Line_21 $$ Object existing = transactionSynchronizationRegistry.getValue().getResource(key)[ FD ]
Line_12 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) -->Line_14 $$ writeFile(timer)[ CD ]
Line_6 $$ if (status == Status.STATUS_MARKED_ROLLBACK || status == Status.STATUS_ROLLEDBACK || status == Status.STATUS_ROLLING_BACK) -->Line_7 $$ return[ CD ]
Line_3 $$ final Lock lock = getLock(timer.getTimedObjectId())-->Line_9 $$ lock.lock()[ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_11 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())[ FD ]
Line_10 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_25 $$ transactionSynchronizationRegistry.getValue().putResource(key, timer)[ CD ]
Line_22 $$ if (existing == null) -->Line_23 $$ transactionSynchronizationRegistry.getValue().registerInterposedSynchronization(new PersistTransactionSynchronization(lock, key, newTimer))[ CD ]
Line_11 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())-->Line_15 $$ if (newTimer || map.containsKey(timer.getId())) [ FD ]
Line_11 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())-->Line_16 $$ map.put(timer.getId(), timer)[ FD ]
Line_12 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) -->Line_13 $$ map.remove(timer.getId())[ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_25 $$ transactionSynchronizationRegistry.getValue().putResource(key, timer)[ FD ]
Line_10 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_12 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) [ CD ]
Line_21 $$ Object existing = transactionSynchronizationRegistry.getValue().getResource(key)-->Line_22 $$ if (existing == null) [ FD ]
Line_11 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())-->Line_13 $$ map.remove(timer.getId())[ FD ]
Line_10 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_11 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())[ CD ]
Line_3 $$ final Lock lock = getLock(timer.getTimedObjectId())-->Line_30 $$ lock.unlock()[ FD ]
Line_15 $$ if (newTimer || map.containsKey(timer.getId())) -->Line_17 $$ writeFile(timer)[ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_17 $$ writeFile(timer)[ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_16 $$ map.put(timer.getId(), timer)[ FD ]
Line_10 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_21 $$ Object existing = transactionSynchronizationRegistry.getValue().getResource(key)[ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_15 $$ if (newTimer || map.containsKey(timer.getId())) [ FD ]
Line_15 $$ if (newTimer || map.containsKey(timer.getId())) -->Line_16 $$ map.put(timer.getId(), timer)[ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_3 $$ final Lock lock = getLock(timer.getTimedObjectId())[ FD ]
Line_20 $$ final String key = timerTransactionKey(timer)-->Line_25 $$ transactionSynchronizationRegistry.getValue().putResource(key, timer)[ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_3 $$ final Lock lock = getLock(timer.getTimedObjectId())[ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_14 $$ writeFile(timer)[ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_20 $$ final String key = timerTransactionKey(timer)[ FD ]
Line_12 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) -->Line_15 $$ if (newTimer || map.containsKey(timer.getId())) [ CD ]
Line_10 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_22 $$ if (existing == null) [ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_12 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) [ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_13 $$ map.remove(timer.getId())[ FD ]
