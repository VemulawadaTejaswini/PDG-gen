Line_11 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_12 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())[ CD ]
Line_3 $$ final Lock lock = getLock(timer.getTimedObjectId())-->Line_35 $$ lock.unlock()[ FD ]
Line_12 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())-->Line_16 $$ if (newTimer || map.containsKey(timer.getId())) [ FD ]
Line_13 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) -->Line_15 $$ writeFile(timer)[ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_12 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())[ FD ]
Line_13 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) -->Line_14 $$ map.remove(timer.getId())[ CD ]
Line_16 $$ if (newTimer || map.containsKey(timer.getId())) -->Line_20 $$ writeFile(timer)[ CD ]
Line_11 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_24 $$ Object existing = transactionSynchronizationRegistry.getValue().getResource(key)[ CD ]
Line_11 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_13 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) [ CD ]
Line_11 $$ if (status == Status.STATUS_NO_TRANSACTION || status == Status.STATUS_UNKNOWN || isBeforeCompletion() || status == Status.STATUS_COMMITTED) -->Line_23 $$ final String key = timerTransactionKey(timer)[ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_14 $$ map.remove(timer.getId())[ FD ]
Line_23 $$ final String key = timerTransactionKey(timer)-->Line_24 $$ Object existing = transactionSynchronizationRegistry.getValue().getResource(key)[ FD ]
Line_12 $$ Map<String, TimerImpl> map = getTimers(timer.getTimedObjectId(), timer.getTimerService())-->Line_14 $$ map.remove(timer.getId())[ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_16 $$ if (newTimer || map.containsKey(timer.getId())) [ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_15 $$ writeFile(timer)[ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_3 $$ final Lock lock = getLock(timer.getTimedObjectId())[ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_3 $$ final Lock lock = getLock(timer.getTimedObjectId())[ FD ]
Line_13 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) -->Line_16 $$ if (newTimer || map.containsKey(timer.getId())) [ CD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_20 $$ writeFile(timer)[ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_13 $$ if (timer.getState() == TimerState.CANCELED || timer.getState() == TimerState.EXPIRED) [ FD ]
Line_3 $$ final Lock lock = getLock(timer.getTimedObjectId())-->Line_10 $$ lock.lock()[ FD ]
Line_2 $$ private void persistTimer(final TimerImpl timer, boolean newTimer) -->Line_23 $$ final String key = timerTransactionKey(timer)[ FD ]
