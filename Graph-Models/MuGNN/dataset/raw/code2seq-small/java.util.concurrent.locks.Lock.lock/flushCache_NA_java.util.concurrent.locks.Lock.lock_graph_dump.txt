Line_7 $$ List<Integer> files = new ArrayList<Integer>(ourFinishedFiles.size())-->Line_9 $$ if (!files.isEmpty()) [ FD ]
Line_7 $$ List<Integer> files = new ArrayList<Integer>(ourFinishedFiles.size())-->Line_8 $$ ourFinishedFiles.drainTo(files)[ FD ]
Line_19 $$ final DataOutputStream sink = FSRecords.writeAttribute(file, Timestamps.PERSISTENCE)-->Line_20 $$ timestamp.writeToStream(sink)[ FD ]
Line_10 $$ for (Integer file : files) -->Line_11 $$ Lock writeLock = getStripedLock(file).writeLock()[ FD ]
Line_14 $$ Timestamps timestamp = myTimestampsCache.remove(file)-->Line_15 $$ if (timestamp == null)[ FD ]
Line_10 $$ for (Integer file : files) -->Line_19 $$ final DataOutputStream sink = FSRecords.writeAttribute(file, Timestamps.PERSISTENCE)[ FD ]
Line_11 $$ Lock writeLock = getStripedLock(file).writeLock()-->Line_12 $$ writeLock.lock()[ FD ]
Line_2 $$ public static void flushCache(@Nullable Integer finishedFile) -->Line_3 $$ if (finishedFile != null && finishedFile == INVALID_FILE_ID)[ CD ]
Line_10 $$ for (Integer file : files) -->Line_14 $$ Timestamps timestamp = myTimestampsCache.remove(file)[ FD ]
Line_11 $$ Lock writeLock = getStripedLock(file).writeLock()-->Line_26 $$ writeLock.unlock()[ FD ]
Line_19 $$ final DataOutputStream sink = FSRecords.writeAttribute(file, Timestamps.PERSISTENCE)-->Line_21 $$ sink.close()[ FD ]
Line_2 $$ public static void flushCache(@Nullable Integer finishedFile) -->Line_30 $$ if (finishedFile == null)[ FD ]
Line_14 $$ Timestamps timestamp = myTimestampsCache.remove(file)-->Line_20 $$ timestamp.writeToStream(sink)[ FD ]
