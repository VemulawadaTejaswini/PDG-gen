Line_9 $$ if (proposal.hasBallot(state.promised.ballot) || proposal.isAfter(state.promised)) -->Line_14 $$ Tracing.trace("Rejecting proposal for [ CD ]
Line_9 $$ if (proposal.hasBallot(state.promised.ballot) || proposal.isAfter(state.promised)) -->Line_10 $$ Tracing.trace("Accepting proposal [ CD ]
Line_5 $$ Lock lock = LOCKS.get(proposal.update.partitionKey())-->Line_6 $$ lock.lock()[ FD ]
Line_9 $$ if (proposal.hasBallot(state.promised.ballot) || proposal.isAfter(state.promised)) -->Line_15 $$ return false[ CD ]
Line_2 $$ public static Boolean propose(Commit proposal) -->Line_9 $$ if (proposal.hasBallot(state.promised.ballot) || proposal.isAfter(state.promised)) [ FD ]
Line_2 $$ public static Boolean propose(Commit proposal) -->Line_10 $$ Tracing.trace("Accepting proposal [ FD ]
Line_5 $$ Lock lock = LOCKS.get(proposal.update.partitionKey())-->Line_18 $$ lock.unlock()[ FD ]
Line_2 $$ public static Boolean propose(Commit proposal) -->Line_3 $$ long start = System.nanoTime()[ CD ]
Line_9 $$ if (proposal.hasBallot(state.promised.ballot) || proposal.isAfter(state.promised)) -->Line_12 $$ return true[ CD ]
Line_2 $$ public static Boolean propose(Commit proposal) -->Line_11 $$ SystemKeyspace.savePaxosProposal(proposal)[ FD ]
Line_9 $$ if (proposal.hasBallot(state.promised.ballot) || proposal.isAfter(state.promised)) -->Line_11 $$ SystemKeyspace.savePaxosProposal(proposal)[ CD ]
Line_2 $$ public static Boolean propose(Commit proposal) -->Line_14 $$ Tracing.trace("Rejecting proposal for [ FD ]
