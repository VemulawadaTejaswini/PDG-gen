Line_9 $$ for (SchedulerEventType e : SchedulerEventType.values()) -->Line_20 $$ schedulerHandleTimerMap.put(e, timer)[ FD ]
Line_25 $$ Histogram schedulerAllocateHistogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_28 $$ histogramTimerMap.put(schedulerAllocateHistogram, schedulerAllocateTimer)[ FD ]
Line_25 $$ Histogram schedulerAllocateHistogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_27 $$ schedulerHistogramList.add(schedulerAllocateHistogram)[ FD ]
Line_29 $$ Histogram schedulerHandleHistogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_32 $$ histogramTimerMap.put(schedulerHandleHistogram, schedulerHandleTimer)[ FD ]
Line_19 $$ Timer timer = new Timer(new SlidingWindowReservoir(timeWindowSize))-->Line_20 $$ schedulerHandleTimerMap.put(e, timer)[ FD ]
Line_29 $$ Histogram schedulerHandleHistogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_30 $$ metrics.register("sampler.scheduler.operation.handle.timecost", schedulerHandleHistogram)[ FD ]
Line_9 $$ for (SchedulerEventType e : SchedulerEventType.values()) -->Line_11 $$ schedulerHandleCounterMap.put(e, counter)[ FD ]
Line_34 $$ Histogram histogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_35 $$ metrics.register("sampler.scheduler.operation.handle." + e + ".timecost", histogram)[ FD ]
Line_34 $$ Histogram histogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_37 $$ histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e))[ FD ]
Line_10 $$ Counter counter = metrics.counter("counter.scheduler.operation.handle." + e)-->Line_11 $$ schedulerHandleCounterMap.put(e, counter)[ FD ]
Line_34 $$ Histogram histogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_36 $$ schedulerHistogramList.add(histogram)[ FD ]
Line_29 $$ Histogram schedulerHandleHistogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_31 $$ schedulerHistogramList.add(schedulerHandleHistogram)[ FD ]
Line_2 $$ private void registerSchedulerMetrics() -->Line_3 $$ samplerLock.lock()[ CD ]
Line_25 $$ Histogram schedulerAllocateHistogram = new Histogram(new SlidingWindowReservoir(SAMPLING_SIZE))-->Line_26 $$ metrics.register("sampler.scheduler.operation.allocate.timecost", schedulerAllocateHistogram)[ FD ]
Line_9 $$ for (SchedulerEventType e : SchedulerEventType.values()) -->Line_37 $$ histogramTimerMap.put(histogram, schedulerHandleTimerMap.get(e))[ FD ]
