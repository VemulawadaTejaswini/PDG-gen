Line_14 $$ scope = scope.substring(1)-->Line_26 $$ Node n = getNode(scope)[ FD ]
Line_16 $$ scope = NodeBase.normalize(scope)-->Line_26 $$ Node n = getNode(scope)[ FD ]
Line_28 $$ if (n instanceof InnerNode) -->Line_29 $$ scopeNodeCount = ((InnerNode) n).getNumOfLeaves()[ CD ]
Line_31 $$ if (isExcluded) -->Line_32 $$ return clusterMap.getNumOfLeaves() - scopeNodeCount - excludedNodes.size() + count[ CD ]
Line_27 $$ int scopeNodeCount = 1-->Line_29 $$ scopeNodeCount = ((InnerNode) n).getNumOfLeaves()[ FD ]
Line_26 $$ Node n = getNode(scope)-->Line_28 $$ if (n instanceof InnerNode) [ FD ]
Line_21 $$ for (Node node : excludedNodes) -->Line_22 $$ if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR).startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) [ FD ]
Line_31 $$ if (isExcluded) -->Line_34 $$ return scopeNodeCount - count[ CD ]
Line_11 $$ boolean isExcluded = false-->Line_13 $$ isExcluded = true[ FD ]
Line_12 $$ if (scope.startsWith("~")) -->Line_13 $$ isExcluded = true[ CD ]
Line_14 $$ scope = scope.substring(1)-->Line_16 $$ scope = NodeBase.normalize(scope)[ FD ]
Line_12 $$ if (scope.startsWith("~")) -->Line_14 $$ scope = scope.substring(1)[ CD ]
Line_22 $$ if ((NodeBase.getPath(node) + NodeBase.PATH_SEPARATOR_STR).startsWith(scope + NodeBase.PATH_SEPARATOR_STR)) -->Line_23 $$ count++[ CD ]
