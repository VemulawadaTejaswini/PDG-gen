Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_37 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_89 $$ logger.warn("[[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_90 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_25 $$ if (!startedShards.isEmpty()) -->Line_26 $$ newSnapshots.put(entry.snapshotId(), startedShards)[ CD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_79 $$ for (final Map.Entry<ShardId, IndexShardSnapshotStatus> shardEntry : entry.getValue().entrySet()) [ FD ]
Line_83 $$ executor.execute(new AbstractRunnable() -->Line_94 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_80 $$ final ShardId shardId = shardEntry.getKey()-->Line_82 $$ final IndexShard indexShard = indicesService.indexServiceSafe(shardId.getIndex()).getShardOrNull(shardId.id())[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_94 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_14 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) -->Line_36 $$ if (entry.state() == SnapshotsInProgress.State.ABORTED) [ CD ]
Line_15 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()-->Line_26 $$ newSnapshots.put(entry.snapshotId(), startedShards)[ FD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_4 $$ Map<SnapshotId, SnapshotShards> survivors = new HashMap()[ CD ]
Line_83 $$ executor.execute(new AbstractRunnable() -->Line_89 $$ logger.warn("[[ CD ]
Line_4 $$ Map<SnapshotId, SnapshotShards> survivors = new HashMap()-->Line_69 $$ shardSnapshots = unmodifiableMap(survivors)[ FD ]
Line_80 $$ final ShardId shardId = shardEntry.getKey()-->Line_90 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_3 $$ SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE)-->Line_12 $$ if (snapshotsInProgress != null) [ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_6 $$ if (snapshotsInProgress != null && snapshotsInProgress.snapshot(entry.getKey()) != null) [ FD ]
Line_16 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())-->Line_27 $$ if (snapshotShards != null) [ FD ]
Line_11 $$ final String localNodeId = clusterService.localNode().id()-->Line_18 $$ if (localNodeId.equals(shard.value.nodeId())) [ FD ]
Line_79 $$ for (final Map.Entry<ShardId, IndexShardSnapshotStatus> shardEntry : entry.getValue().entrySet()) -->Line_80 $$ final ShardId shardId = shardEntry.getKey()[ FD ]
Line_28 $$ Map<ShardId, IndexShardSnapshotStatus> shards = new HashMap()-->Line_31 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(shards)))[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_14 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) [ FD ]
Line_83 $$ executor.execute(new AbstractRunnable() -->Line_85 $$ snapshot(indexShard, entry.getKey(), shardEntry.getValue())[ CD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_86 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.SUCCESS))[ FD ]
Line_83 $$ executor.execute(new AbstractRunnable() -->Line_90 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_76 $$ if (newSnapshots.isEmpty() == false) -->Line_77 $$ Executor executor = threadPool.executor(ThreadPool.Names.SNAPSHOT)[ CD ]
Line_3 $$ SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE)-->Line_13 $$ for (SnapshotsInProgress.Entry entry : snapshotsInProgress.entries()) [ FD ]
Line_40 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_41 $$ if (snapshotStatus != null) [ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_16 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())[ FD ]
Line_27 $$ if (snapshotShards != null) -->Line_33 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(startedShards)))[ CD ]
Line_4 $$ Map<SnapshotId, SnapshotShards> survivors = new HashMap()-->Line_33 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(startedShards)))[ FD ]
Line_15 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()-->Line_33 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(startedShards)))[ FD ]
Line_40 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_45 $$ snapshotStatus.abort()[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_7 $$ survivors.put(entry.getKey(), entry.getValue())[ FD ]
Line_10 $$ Map<SnapshotId, Map<ShardId, IndexShardSnapshotStatus>> newSnapshots = new HashMap()-->Line_78 $$ for (final Map.Entry<SnapshotId, Map<ShardId, IndexShardSnapshotStatus>> entry : newSnapshots.entrySet()) [ FD ]
Line_40 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_59 $$ throw new IllegalStateException("Unknown snapshot shard stage " + snapshotStatus.stage())[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_17 $$ for (ObjectObjectCursor<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shard : entry.shards()) [ FD ]
Line_15 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()-->Line_21 $$ startedShards.put(shard.key, new IndexShardSnapshotStatus())[ FD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_56 $$ updateIndexShardSnapshotStatus(entry.snapshotId(), shard.key, new SnapshotsInProgress.ShardSnapshotStatus(event.state().nodes().localNodeId(), SnapshotsInProgress.State.FAILED, snapshotStatus.failure()))[ FD ]
Line_14 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) -->Line_16 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())[ CD ]
Line_80 $$ final ShardId shardId = shardEntry.getKey()-->Line_86 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.SUCCESS))[ FD ]
Line_14 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) -->Line_25 $$ if (!startedShards.isEmpty()) [ CD ]
Line_27 $$ if (snapshotShards != null) -->Line_28 $$ Map<ShardId, IndexShardSnapshotStatus> shards = new HashMap()[ CD ]
Line_40 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_42 $$ switch(snapshotStatus.stage()) [ FD ]
Line_83 $$ executor.execute(new AbstractRunnable() -->Line_89 $$ logger.warn("[[ FD ]
Line_28 $$ Map<ShardId, IndexShardSnapshotStatus> shards = new HashMap()-->Line_29 $$ shards.putAll(snapshotShards.shards)[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_39 $$ for (ObjectObjectCursor<ShardId, SnapshotsInProgress.ShardSnapshotStatus> shard : entry.shards()) [ FD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_3 $$ SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE)[ FD ]
Line_27 $$ if (snapshotShards != null) -->Line_31 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(shards)))[ CD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_48 $$ logger.debug("[[ FD ]
Line_14 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) -->Line_15 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()[ CD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_56 $$ updateIndexShardSnapshotStatus(entry.snapshotId(), shard.key, new SnapshotsInProgress.ShardSnapshotStatus(event.state().nodes().localNodeId(), SnapshotsInProgress.State.FAILED, snapshotStatus.failure()))[ FD ]
Line_10 $$ Map<SnapshotId, Map<ShardId, IndexShardSnapshotStatus>> newSnapshots = new HashMap()-->Line_26 $$ newSnapshots.put(entry.snapshotId(), startedShards)[ FD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_52 $$ updateIndexShardSnapshotStatus(entry.snapshotId(), shard.key, new SnapshotsInProgress.ShardSnapshotStatus(event.state().nodes().localNodeId(), SnapshotsInProgress.State.SUCCESS))[ FD ]
Line_15 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()-->Line_25 $$ if (!startedShards.isEmpty()) [ FD ]
Line_6 $$ if (snapshotsInProgress != null && snapshotsInProgress.snapshot(entry.getKey()) != null) -->Line_7 $$ survivors.put(entry.getKey(), entry.getValue())[ CD ]
Line_40 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_56 $$ updateIndexShardSnapshotStatus(entry.snapshotId(), shard.key, new SnapshotsInProgress.ShardSnapshotStatus(event.state().nodes().localNodeId(), SnapshotsInProgress.State.FAILED, snapshotStatus.failure()))[ FD ]
Line_10 $$ Map<SnapshotId, Map<ShardId, IndexShardSnapshotStatus>> newSnapshots = new HashMap()-->Line_76 $$ if (newSnapshots.isEmpty() == false) [ FD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_12 $$ if (snapshotsInProgress != null) [ CD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_10 $$ Map<SnapshotId, Map<ShardId, IndexShardSnapshotStatus>> newSnapshots = new HashMap()[ CD ]
Line_79 $$ for (final Map.Entry<ShardId, IndexShardSnapshotStatus> shardEntry : entry.getValue().entrySet()) -->Line_85 $$ snapshot(indexShard, entry.getKey(), shardEntry.getValue())[ FD ]
Line_70 $$ if (shardSnapshots.isEmpty()) -->Line_71 $$ shutdownCondition.signalAll()[ CD ]
Line_19 $$ if (shard.value.state() == SnapshotsInProgress.State.INIT && (snapshotShards == null || !snapshotShards.shards.containsKey(shard.key))) -->Line_20 $$ logger.trace("[[ CD ]
Line_36 $$ if (entry.state() == SnapshotsInProgress.State.ABORTED) -->Line_38 $$ if (snapshotShards != null) [ CD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_31 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(shards)))[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_36 $$ if (entry.state() == SnapshotsInProgress.State.ABORTED) [ FD ]
Line_82 $$ final IndexShard indexShard = indicesService.indexServiceSafe(shardId.getIndex()).getShardOrNull(shardId.id())-->Line_85 $$ snapshot(indexShard, entry.getKey(), shardEntry.getValue())[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_33 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(startedShards)))[ FD ]
Line_18 $$ if (localNodeId.equals(shard.value.nodeId())) -->Line_19 $$ if (shard.value.state() == SnapshotsInProgress.State.INIT && (snapshotShards == null || !snapshotShards.shards.containsKey(shard.key))) [ CD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_67 $$ shutdownLock.lock()[ CD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_76 $$ if (newSnapshots.isEmpty() == false) [ CD ]
Line_28 $$ Map<ShardId, IndexShardSnapshotStatus> shards = new HashMap()-->Line_30 $$ shards.putAll(startedShards)[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_52 $$ updateIndexShardSnapshotStatus(entry.snapshotId(), shard.key, new SnapshotsInProgress.ShardSnapshotStatus(event.state().nodes().localNodeId(), SnapshotsInProgress.State.SUCCESS))[ FD ]
Line_27 $$ if (snapshotShards != null) -->Line_29 $$ shards.putAll(snapshotShards.shards)[ CD ]
Line_77 $$ Executor executor = threadPool.executor(ThreadPool.Names.SNAPSHOT)-->Line_83 $$ executor.execute(new AbstractRunnable() [ FD ]
Line_4 $$ Map<SnapshotId, SnapshotShards> survivors = new HashMap()-->Line_7 $$ survivors.put(entry.getKey(), entry.getValue())[ FD ]
Line_16 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())-->Line_38 $$ if (snapshotShards != null) [ FD ]
Line_15 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()-->Line_30 $$ shards.putAll(startedShards)[ FD ]
Line_3 $$ SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE)-->Line_6 $$ if (snapshotsInProgress != null && snapshotsInProgress.snapshot(entry.getKey()) != null) [ FD ]
Line_83 $$ executor.execute(new AbstractRunnable() -->Line_90 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ CD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_85 $$ snapshot(indexShard, entry.getKey(), shardEntry.getValue())[ FD ]
Line_25 $$ if (!startedShards.isEmpty()) -->Line_27 $$ if (snapshotShards != null) [ CD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_26 $$ newSnapshots.put(entry.snapshotId(), startedShards)[ FD ]
Line_19 $$ if (shard.value.state() == SnapshotsInProgress.State.INIT && (snapshotShards == null || !snapshotShards.shards.containsKey(shard.key))) -->Line_21 $$ startedShards.put(shard.key, new IndexShardSnapshotStatus())[ CD ]
Line_83 $$ executor.execute(new AbstractRunnable() -->Line_86 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.SUCCESS))[ CD ]
Line_80 $$ final ShardId shardId = shardEntry.getKey()-->Line_89 $$ logger.warn("[[ FD ]
Line_4 $$ Map<SnapshotId, SnapshotShards> survivors = new HashMap()-->Line_31 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(shards)))[ FD ]
Line_36 $$ if (entry.state() == SnapshotsInProgress.State.ABORTED) -->Line_37 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())[ CD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_3 $$ SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE)[ CD ]
Line_2 $$ private void processIndexShardSnapshots(ClusterChangedEvent event) -->Line_11 $$ final String localNodeId = clusterService.localNode().id()[ CD ]
Line_27 $$ if (snapshotShards != null) -->Line_30 $$ shards.putAll(startedShards)[ CD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_51 $$ logger.debug("[[ FD ]
Line_5 $$ for (Map.Entry<SnapshotId, SnapshotShards> entry : shardSnapshots.entrySet()) -->Line_55 $$ logger.debug("[[ FD ]
Line_80 $$ final ShardId shardId = shardEntry.getKey()-->Line_94 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
