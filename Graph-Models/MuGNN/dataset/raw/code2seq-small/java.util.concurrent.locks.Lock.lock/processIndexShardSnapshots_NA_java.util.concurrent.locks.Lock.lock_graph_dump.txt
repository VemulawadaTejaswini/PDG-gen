Line_98 $$ for (final Map.Entry<ShardId, IndexShardSnapshotStatus> shardEntry : entry.getValue().entrySet()) -->Line_106 $$ snapshot(indexShard, entry.getKey(), shardEntry.getValue())[ FD ]
Line_102 $$ executor.execute(new AbstractRunnable() -->Line_107 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.SUCCESS))[ CD ]
Line_99 $$ final ShardId shardId = shardEntry.getKey()-->Line_101 $$ final IndexShard indexShard = indicesService.indexServiceSafe(shardId.getIndex()).getShardOrNull(shardId.id())[ FD ]
Line_55 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_74 $$ throw new IllegalStateException("Unknown snapshot shard stage " + snapshotStatus.stage())[ FD ]
Line_24 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()-->Line_31 $$ startedShards.put(shard.key, new IndexShardSnapshotStatus())[ FD ]
Line_8 $$ SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE)-->Line_21 $$ if (snapshotsInProgress != null) [ FD ]
Line_55 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_57 $$ switch(snapshotStatus.stage()) [ FD ]
Line_99 $$ final ShardId shardId = shardEntry.getKey()-->Line_117 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_29 $$ if (shard.value.state() == SnapshotsInProgress.State.INIT && (snapshotShards == null || !snapshotShards.shards.containsKey(shard.key))) -->Line_30 $$ logger.trace("[[ CD ]
Line_9 $$ Map<SnapshotId, SnapshotShards> survivors = new HashMap()-->Line_44 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(shards)))[ FD ]
Line_102 $$ executor.execute(new AbstractRunnable() -->Line_112 $$ logger.warn("[[ CD ]
Line_102 $$ executor.execute(new AbstractRunnable() -->Line_113 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_99 $$ final ShardId shardId = shardEntry.getKey()-->Line_112 $$ logger.warn("[[ FD ]
Line_9 $$ Map<SnapshotId, SnapshotShards> survivors = new HashMap()-->Line_86 $$ shardSnapshots = unmodifiableMap(survivors)[ FD ]
Line_55 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_56 $$ if (snapshotStatus != null) [ FD ]
Line_23 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) -->Line_50 $$ if (entry.state() == SnapshotsInProgress.State.ABORTED) [ CD ]
Line_23 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) -->Line_35 $$ if (!startedShards.isEmpty()) [ CD ]
Line_25 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())-->Line_37 $$ if (snapshotShards != null) [ FD ]
Line_102 $$ executor.execute(new AbstractRunnable() -->Line_106 $$ snapshot(indexShard, entry.getKey(), shardEntry.getValue())[ CD ]
Line_55 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_60 $$ snapshotStatus.abort()[ FD ]
Line_98 $$ for (final Map.Entry<ShardId, IndexShardSnapshotStatus> shardEntry : entry.getValue().entrySet()) -->Line_99 $$ final ShardId shardId = shardEntry.getKey()[ FD ]
Line_24 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()-->Line_36 $$ newSnapshots.put(entry.snapshotId(), startedShards)[ FD ]
Line_102 $$ executor.execute(new AbstractRunnable() -->Line_113 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ CD ]
Line_50 $$ if (entry.state() == SnapshotsInProgress.State.ABORTED) -->Line_53 $$ if (snapshotShards != null) [ CD ]
Line_29 $$ if (shard.value.state() == SnapshotsInProgress.State.INIT && (snapshotShards == null || !snapshotShards.shards.containsKey(shard.key))) -->Line_31 $$ startedShards.put(shard.key, new IndexShardSnapshotStatus())[ CD ]
Line_101 $$ final IndexShard indexShard = indicesService.indexServiceSafe(shardId.getIndex()).getShardOrNull(shardId.id())-->Line_106 $$ snapshot(indexShard, entry.getKey(), shardEntry.getValue())[ FD ]
Line_55 $$ IndexShardSnapshotStatus snapshotStatus = snapshotShards.shards.get(shard.key)-->Line_71 $$ updateIndexShardSnapshotStatus(entry.snapshotId(), shard.key, new SnapshotsInProgress.ShardSnapshotStatus(event.state().nodes().localNodeId(), SnapshotsInProgress.State.FAILED, snapshotStatus.failure()))[ FD ]
Line_8 $$ SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE)-->Line_12 $$ if (snapshotsInProgress != null && snapshotsInProgress.snapshot(entry.getKey()) != null) [ FD ]
Line_35 $$ if (!startedShards.isEmpty()) -->Line_36 $$ newSnapshots.put(entry.snapshotId(), startedShards)[ CD ]
Line_102 $$ executor.execute(new AbstractRunnable() -->Line_117 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_35 $$ if (!startedShards.isEmpty()) -->Line_37 $$ if (snapshotShards != null) [ CD ]
Line_99 $$ final ShardId shardId = shardEntry.getKey()-->Line_113 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.FAILED, ExceptionsHelper.detailedMessage(t)))[ FD ]
Line_12 $$ if (snapshotsInProgress != null && snapshotsInProgress.snapshot(entry.getKey()) != null) -->Line_13 $$ survivors.put(entry.getKey(), entry.getValue())[ CD ]
Line_25 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())-->Line_53 $$ if (snapshotShards != null) [ FD ]
Line_8 $$ SnapshotsInProgress snapshotsInProgress = event.state().custom(SnapshotsInProgress.TYPE)-->Line_22 $$ for (SnapshotsInProgress.Entry entry : snapshotsInProgress.entries()) [ FD ]
Line_24 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()-->Line_35 $$ if (!startedShards.isEmpty()) [ FD ]
Line_96 $$ Executor executor = threadPool.executor(ThreadPool.Names.SNAPSHOT)-->Line_102 $$ executor.execute(new AbstractRunnable() [ FD ]
Line_99 $$ final ShardId shardId = shardEntry.getKey()-->Line_107 $$ updateIndexShardSnapshotStatus(entry.getKey(), shardId, new SnapshotsInProgress.ShardSnapshotStatus(localNodeId, SnapshotsInProgress.State.SUCCESS))[ FD ]
Line_23 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) -->Line_24 $$ Map<ShardId, IndexShardSnapshotStatus> startedShards = new HashMap()[ CD ]
Line_102 $$ executor.execute(new AbstractRunnable() -->Line_112 $$ logger.warn("[[ FD ]
Line_9 $$ Map<SnapshotId, SnapshotShards> survivors = new HashMap()-->Line_13 $$ survivors.put(entry.getKey(), entry.getValue())[ FD ]
Line_37 $$ if (snapshotShards != null) -->Line_44 $$ survivors.put(entry.snapshotId(), new SnapshotShards(unmodifiableMap(shards)))[ CD ]
Line_23 $$ if (entry.state() == SnapshotsInProgress.State.STARTED) -->Line_25 $$ SnapshotShards snapshotShards = shardSnapshots.get(entry.snapshotId())[ CD ]
