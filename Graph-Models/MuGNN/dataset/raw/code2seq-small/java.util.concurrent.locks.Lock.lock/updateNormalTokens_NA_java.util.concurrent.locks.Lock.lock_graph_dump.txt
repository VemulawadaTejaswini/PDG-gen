Line_3 $$ if (endpointTokens.isEmpty())-->Line_4 $$ return[ CD ]
Line_2 $$ public void updateNormalTokens(Multimap<InetAddress, Token> endpointTokens) -->Line_5 $$ lock.writeLock().lock()[ CD ]
Line_16 $$ for (Token token : tokens) -->Line_17 $$ InetAddress prev = tokenToEndpointMap.put(token, endpoint)[ FD ]
Line_18 $$ if (!endpoint.equals(prev)) -->Line_19 $$ if (prev != null)[ CD ]
Line_9 $$ Collection<Token> tokens = endpointTokens.get(endpoint)-->Line_10 $$ assert tokens != null && !tokens.isEmpty()[ FD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_12 $$ tokenToEndpointMap.removeValue(endpoint)[ FD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_17 $$ InetAddress prev = tokenToEndpointMap.put(token, endpoint)[ FD ]
Line_17 $$ InetAddress prev = tokenToEndpointMap.put(token, endpoint)-->Line_20 $$ logger.warn("Token [ FD ]
Line_17 $$ InetAddress prev = tokenToEndpointMap.put(token, endpoint)-->Line_19 $$ if (prev != null)[ FD ]
Line_7 $$ boolean shouldSortTokens = false-->Line_21 $$ shouldSortTokens = true[ FD ]
Line_25 $$ if (shouldSortTokens)-->Line_26 $$ sortedTokens = sortTokens()[ CD ]
Line_2 $$ public void updateNormalTokens(Multimap<InetAddress, Token> endpointTokens) -->Line_3 $$ if (endpointTokens.isEmpty())[ FD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_13 $$ topology.addEndpoint(endpoint)[ FD ]
Line_2 $$ public void updateNormalTokens(Multimap<InetAddress, Token> endpointTokens) -->Line_9 $$ Collection<Token> tokens = endpointTokens.get(endpoint)[ FD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_9 $$ Collection<Token> tokens = endpointTokens.get(endpoint)[ FD ]
Line_19 $$ if (prev != null)-->Line_20 $$ logger.warn("Token [ CD ]
Line_17 $$ InetAddress prev = tokenToEndpointMap.put(token, endpoint)-->Line_18 $$ if (!endpoint.equals(prev)) [ FD ]
Line_18 $$ if (!endpoint.equals(prev)) -->Line_21 $$ shouldSortTokens = true[ CD ]
Line_2 $$ public void updateNormalTokens(Multimap<InetAddress, Token> endpointTokens) -->Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) [ FD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_14 $$ leavingEndpoints.remove(endpoint)[ FD ]
Line_2 $$ public void updateNormalTokens(Multimap<InetAddress, Token> endpointTokens) -->Line_3 $$ if (endpointTokens.isEmpty())[ CD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_15 $$ removeFromMoving(endpoint)[ FD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_18 $$ if (!endpoint.equals(prev)) [ FD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_11 $$ bootstrapTokens.removeValue(endpoint)[ FD ]
Line_8 $$ for (InetAddress endpoint : endpointTokens.keySet()) -->Line_20 $$ logger.warn("Token [ FD ]
Line_16 $$ for (Token token : tokens) -->Line_20 $$ logger.warn("Token [ FD ]
