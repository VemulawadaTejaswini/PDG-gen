Line_8 $$ if (stamp != null && stamp.myIndexStamps != null && !stamp.myIndexStamps.isEmpty()) -->Line_16 $$ return retained[ CD ]
Line_2 $$ public static List<ID<?, ?>> getNontrivialFileIndexedStates(int fileId) -->Line_3 $$ if (fileId != INVALID_FILE_ID) [ FD ]
Line_3 $$ if (fileId != INVALID_FILE_ID) -->Line_4 $$ Lock readLock = getStripedLock(fileId).readLock()[ CD ]
Line_9 $$ final SmartList<ID<?, ?>> retained = new SmartList<ID<?, ?>>()-->Line_12 $$ retained.add(object)[ FD ]
Line_10 $$ stamp.myIndexStamps.forEach(new TObjectProcedure<ID<?, ?>>() -->Line_12 $$ retained.add(object)[ FD ]
Line_4 $$ Lock readLock = getStripedLock(fileId).readLock()-->Line_21 $$ readLock.unlock()[ FD ]
Line_8 $$ if (stamp != null && stamp.myIndexStamps != null && !stamp.myIndexStamps.isEmpty()) -->Line_9 $$ final SmartList<ID<?, ?>> retained = new SmartList<ID<?, ?>>()[ CD ]
Line_3 $$ if (fileId != INVALID_FILE_ID) -->Line_5 $$ readLock.lock()[ CD ]
Line_2 $$ public static List<ID<?, ?>> getNontrivialFileIndexedStates(int fileId) -->Line_4 $$ Lock readLock = getStripedLock(fileId).readLock()[ FD ]
Line_2 $$ public static List<ID<?, ?>> getNontrivialFileIndexedStates(int fileId) -->Line_7 $$ Timestamps stamp = createOrGetTimeStamp(fileId)[ FD ]
Line_10 $$ stamp.myIndexStamps.forEach(new TObjectProcedure<ID<?, ?>>() -->Line_12 $$ retained.add(object)[ CD ]
Line_2 $$ public static List<ID<?, ?>> getNontrivialFileIndexedStates(int fileId) -->Line_24 $$ return Collections.emptyList()[ CD ]
Line_2 $$ public static List<ID<?, ?>> getNontrivialFileIndexedStates(int fileId) -->Line_3 $$ if (fileId != INVALID_FILE_ID) [ CD ]
Line_8 $$ if (stamp != null && stamp.myIndexStamps != null && !stamp.myIndexStamps.isEmpty()) -->Line_10 $$ stamp.myIndexStamps.forEach(new TObjectProcedure<ID<?, ?>>() [ CD ]
Line_10 $$ stamp.myIndexStamps.forEach(new TObjectProcedure<ID<?, ?>>() -->Line_13 $$ return true[ CD ]
Line_4 $$ Lock readLock = getStripedLock(fileId).readLock()-->Line_5 $$ readLock.lock()[ FD ]
