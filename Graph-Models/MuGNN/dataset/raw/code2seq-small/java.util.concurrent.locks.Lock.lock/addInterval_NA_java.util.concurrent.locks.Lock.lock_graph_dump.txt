Line_12 $$ IntervalNode<T> insertedNode = findOrInsert(newNode)-->Line_16 $$ insertedNode.addInterval(interval)[ FD ]
Line_11 $$ IntervalNode<T> newNode = createNewNode(interval, start, end, greedyToLeft, greedyToRight, layer)-->Line_12 $$ IntervalNode<T> insertedNode = findOrInsert(newNode)[ FD ]
Line_2 $$ public IntervalTreeImpl.IntervalNode<T> addInterval(@NotNull T interval, int start, int end, boolean greedyToLeft, boolean greedyToRight, int layer) -->Line_11 $$ IntervalNode<T> newNode = createNewNode(interval, start, end, greedyToLeft, greedyToRight, layer)[ FD ]
Line_12 $$ IntervalNode<T> insertedNode = findOrInsert(newNode)-->Line_14 $$ setNode(interval, insertedNode)[ FD ]
Line_11 $$ IntervalNode<T> newNode = createNewNode(interval, start, end, greedyToLeft, greedyToRight, layer)-->Line_13 $$ if (insertedNode == newNode) [ FD ]
Line_2 $$ public IntervalTreeImpl.IntervalNode<T> addInterval(@NotNull T interval, int start, int end, boolean greedyToLeft, boolean greedyToRight, int layer) -->Line_14 $$ setNode(interval, insertedNode)[ FD ]
Line_13 $$ if (insertedNode == newNode) -->Line_14 $$ setNode(interval, insertedNode)[ CD ]
Line_12 $$ IntervalNode<T> insertedNode = findOrInsert(newNode)-->Line_13 $$ if (insertedNode == newNode) [ FD ]
Line_13 $$ if (insertedNode == newNode) -->Line_16 $$ insertedNode.addInterval(interval)[ CD ]
Line_2 $$ public IntervalTreeImpl.IntervalNode<T> addInterval(@NotNull T interval, int start, int end, boolean greedyToLeft, boolean greedyToRight, int layer) -->Line_19 $$ checkBelongsToTheTree(interval, true)[ FD ]
Line_2 $$ public IntervalTreeImpl.IntervalNode<T> addInterval(@NotNull T interval, int start, int end, boolean greedyToLeft, boolean greedyToRight, int layer) -->Line_16 $$ insertedNode.addInterval(interval)[ FD ]
