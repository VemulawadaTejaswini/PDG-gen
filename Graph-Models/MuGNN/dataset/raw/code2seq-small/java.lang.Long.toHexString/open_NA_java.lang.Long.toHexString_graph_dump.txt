Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_41 $$ return new ImmutableTranslogReader(channelReference.getGeneration(), channelReference, ref.length + CodecUtil.headerLength(TranslogWriter.TRANSLOG_CODEC) + RamUsageEstimator.NUM_BYTES_INT, checkpoint.offset, checkpoint.numOps)[ FD ]
Line_16 $$ int header = ((b1 & 0xFF) << 24) + ((b2 & 0xFF) << 16) + ((b3 & 0xFF) << 8) + ((b4 & 0xFF) << 0)-->Line_17 $$ if (header != CodecUtil.CODEC_MAGIC) [ FD ]
Line_10 $$ InputStreamStreamInput headerStream = new InputStreamStreamInput(Channels.newInputStream(channel))-->Line_11 $$ byte b1 = headerStream.readByte()[ FD ]
Line_12 $$ if (b1 == LUCENE_CODEC_HEADER_BYTE) -->Line_45 $$ if (b1 == UNVERSIONED_TRANSLOG_HEADER_BYTE) [ CD ]
Line_3 $$ final FileChannel channel = channelReference.getChannel()-->Line_29 $$ assert checkpoint.offset <= channel.size() : "checkpoint is inconsistent with channel length: " + channel.size() + " " + checkpoint[ FD ]
Line_12 $$ if (b1 == LUCENE_CODEC_HEADER_BYTE) -->Line_17 $$ if (header != CodecUtil.CODEC_MAGIC) [ CD ]
Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_3 $$ final FileChannel channel = channelReference.getChannel()[ FD ]
Line_34 $$ BytesRef ref = new BytesRef(len)-->Line_38 $$ if (uuidBytes.bytesEquals(ref) == false) [ FD ]
Line_10 $$ InputStreamStreamInput headerStream = new InputStreamStreamInput(Channels.newInputStream(channel))-->Line_15 $$ byte b4 = headerStream.readByte()[ FD ]
Line_45 $$ if (b1 == UNVERSIONED_TRANSLOG_HEADER_BYTE) -->Line_48 $$ return new LegacyTranslogReader(channelReference.getGeneration(), channelReference, checkpoint.offset)[ CD ]
Line_3 $$ final FileChannel channel = channelReference.getChannel()-->Line_10 $$ InputStreamStreamInput headerStream = new InputStreamStreamInput(Channels.newInputStream(channel))[ FD ]
Line_7 $$ if (checkpoint.offset == 0 && checkpoint.numOps == TranslogReader.UNKNOWN_OP_COUNT) -->Line_8 $$ return new LegacyTranslogReader(channelReference.getGeneration(), channelReference, 0)[ CD ]
Line_12 $$ if (b1 == LUCENE_CODEC_HEADER_BYTE) -->Line_15 $$ byte b4 = headerStream.readByte()[ CD ]
Line_12 $$ if (b1 == LUCENE_CODEC_HEADER_BYTE) -->Line_14 $$ byte b3 = headerStream.readByte()[ CD ]
Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_4 $$ final Path path = channelReference.getPath()[ FD ]
Line_10 $$ InputStreamStreamInput headerStream = new InputStreamStreamInput(Channels.newInputStream(channel))-->Line_30 $$ int len = headerStream.readInt()[ FD ]
Line_12 $$ if (b1 == LUCENE_CODEC_HEADER_BYTE) -->Line_20 $$ int version = CodecUtil.checkHeaderNoMagic(new InputStreamDataInput(headerStream), TranslogWriter.TRANSLOG_CODEC, 1, Integer.MAX_VALUE)[ CD ]
Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_4 $$ final Path path = channelReference.getPath()[ CD ]
Line_11 $$ byte b1 = headerStream.readByte()-->Line_45 $$ if (b1 == UNVERSIONED_TRANSLOG_HEADER_BYTE) [ FD ]
Line_30 $$ int len = headerStream.readInt()-->Line_35 $$ ref.length = len[ FD ]
Line_11 $$ byte b1 = headerStream.readByte()-->Line_50 $$ throw new TranslogCorruptedException("Invalid first byte in translog file, got: " + Long.toHexString(b1) + ", expected 0x00 or 0x3f")[ FD ]
Line_10 $$ InputStreamStreamInput headerStream = new InputStreamStreamInput(Channels.newInputStream(channel))-->Line_36 $$ headerStream.read(ref.bytes, ref.offset, ref.length)[ FD ]
Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_25 $$ return new LegacyTranslogReaderBase(channelReference.getGeneration(), channelReference, CodecUtil.headerLength(TranslogWriter.TRANSLOG_CODEC), checkpoint.offset)[ FD ]
Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_8 $$ return new LegacyTranslogReader(channelReference.getGeneration(), channelReference, 0)[ FD ]
Line_4 $$ final Path path = channelReference.getPath()-->Line_24 $$ assert checkpoint.offset == Files.size(path) : "offset(" + checkpoint.offset + ") != file_size(" + Files.size(path) + ") for: " + path[ FD ]
Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_48 $$ return new LegacyTranslogReader(channelReference.getGeneration(), channelReference, checkpoint.offset)[ FD ]
Line_12 $$ if (b1 == LUCENE_CODEC_HEADER_BYTE) -->Line_16 $$ int header = ((b1 & 0xFF) << 24) + ((b2 & 0xFF) << 16) + ((b3 & 0xFF) << 8) + ((b4 & 0xFF) << 0)[ CD ]
Line_30 $$ int len = headerStream.readInt()-->Line_31 $$ if (len > channel.size()) [ FD ]
Line_3 $$ final FileChannel channel = channelReference.getChannel()-->Line_31 $$ if (len > channel.size()) [ FD ]
Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_5 $$ assert channelReference.getGeneration() == checkpoint.generation : "expected generation: " + channelReference.getGeneration() + " but got: " + checkpoint.generation[ FD ]
Line_37 $$ BytesRef uuidBytes = new BytesRef(translogUUID)-->Line_38 $$ if (uuidBytes.bytesEquals(ref) == false) [ FD ]
Line_10 $$ InputStreamStreamInput headerStream = new InputStreamStreamInput(Channels.newInputStream(channel))-->Line_14 $$ byte b3 = headerStream.readByte()[ FD ]
Line_11 $$ byte b1 = headerStream.readByte()-->Line_12 $$ if (b1 == LUCENE_CODEC_HEADER_BYTE) [ FD ]
Line_12 $$ if (b1 == LUCENE_CODEC_HEADER_BYTE) -->Line_13 $$ byte b2 = headerStream.readByte()[ CD ]
Line_10 $$ InputStreamStreamInput headerStream = new InputStreamStreamInput(Channels.newInputStream(channel))-->Line_13 $$ byte b2 = headerStream.readByte()[ FD ]
Line_4 $$ final Path path = channelReference.getPath()-->Line_47 $$ assert checkpoint.offset == Files.size(path) : "offset(" + checkpoint.offset + ") != file_size(" + Files.size(path) + ") for: " + path[ FD ]
Line_2 $$ public static ImmutableTranslogReader open(ChannelReference channelReference, Checkpoint checkpoint, String translogUUID) throws IOException -->Line_3 $$ final FileChannel channel = channelReference.getChannel()[ CD ]
Line_4 $$ final Path path = channelReference.getPath()-->Line_27 $$ assert path.getFileName().toString().endsWith(Translog.TRANSLOG_FILE_SUFFIX) : "new file ends with old suffix: " + path[ FD ]
