Line_2 $$ public void parseNumberAsHex() -->Line_9 $$ assertShortEquals(aShort)[ CD ]
Line_2 $$ public void parseNumberAsHex() -->Line_12 $$ assertEquals("BigInteger did not parse", new BigInteger(aReallyBigInt, 16), NumberUtils.parseNumber("0x" + aReallyBigInt, BigInteger.class))[ CD ]
Line_2 $$ public void parseNumberAsHex() -->Line_11 $$ assertLongEquals(aLong)[ CD ]
Line_2 $$ public void parseNumberAsHex() -->Line_10 $$ assertIntegerEquals(anInteger)[ CD ]
Line_3 $$ String aByte = "0x" + Integer.toHexString(new Byte(Byte.MAX_VALUE).intValue())-->Line_8 $$ assertByteEquals(aByte)[ FD ]
Line_2 $$ public void parseNumberAsHex() -->Line_5 $$ String anInteger = "0x" + Integer.toHexString(Integer.MAX_VALUE)[ CD ]
Line_2 $$ public void parseNumberAsHex() -->Line_7 $$ String aReallyBigInt = "FEBD4E677898DFEBFFEE44"[ CD ]
Line_2 $$ public void parseNumberAsHex() -->Line_8 $$ assertByteEquals(aByte)[ CD ]
Line_5 $$ String anInteger = "0x" + Integer.toHexString(Integer.MAX_VALUE)-->Line_10 $$ assertIntegerEquals(anInteger)[ FD ]
Line_6 $$ String aLong = "0x" + Long.toHexString(Long.MAX_VALUE)-->Line_11 $$ assertLongEquals(aLong)[ FD ]
Line_2 $$ public void parseNumberAsHex() -->Line_4 $$ String aShort = "0x" + Integer.toHexString(new Short(Short.MAX_VALUE).intValue())[ CD ]
Line_4 $$ String aShort = "0x" + Integer.toHexString(new Short(Short.MAX_VALUE).intValue())-->Line_9 $$ assertShortEquals(aShort)[ FD ]
Line_2 $$ public void parseNumberAsHex() -->Line_3 $$ String aByte = "0x" + Integer.toHexString(new Byte(Byte.MAX_VALUE).intValue())[ CD ]
Line_2 $$ public void parseNumberAsHex() -->Line_6 $$ String aLong = "0x" + Long.toHexString(Long.MAX_VALUE)[ CD ]
