Line_4 $$ SharedAccessBlobPolicy sasPolicy = new SharedAccessBlobPolicy()-->Line_11 $$ sasPolicy.setPermissions(EnumSet.of(SharedAccessBlobPermissions.READ, SharedAccessBlobPermissions.LIST))[ FD ]
Line_15 $$ BlobContainerPermissions containerPermissions = new BlobContainerPermissions()-->Line_16 $$ containerPermissions.setPublicAccess(BlobContainerPublicAccessType.OFF)[ FD ]
Line_5 $$ GregorianCalendar calendar = new GregorianCalendar(TimeZone.getTimeZone("UTC"))-->Line_8 $$ calendar.add(Calendar.HOUR, 10)[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_5 $$ GregorianCalendar calendar = new GregorianCalendar(TimeZone.getTimeZone("UTC"))[ CD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_16 $$ containerPermissions.setPublicAccess(BlobContainerPublicAccessType.OFF)[ CD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_19 $$ Thread.sleep(1500)[ CD ]
Line_10 $$ if (readonly) -->Line_11 $$ sasPolicy.setPermissions(EnumSet.of(SharedAccessBlobPermissions.READ, SharedAccessBlobPermissions.LIST))[ CD ]
Line_4 $$ SharedAccessBlobPolicy sasPolicy = new SharedAccessBlobPolicy()-->Line_7 $$ sasPolicy.setSharedAccessStartTime(calendar.getTime())[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_17 $$ container.uploadPermissions(containerPermissions)[ CD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_15 $$ BlobContainerPermissions containerPermissions = new BlobContainerPermissions()[ CD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_18 $$ String sas = container.generateSharedAccessSignature(sasPolicy, null)[ CD ]
Line_5 $$ GregorianCalendar calendar = new GregorianCalendar(TimeZone.getTimeZone("UTC"))-->Line_6 $$ calendar.setTime(new Date())[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_3 $$ container.createIfNotExists()[ CD ]
Line_5 $$ GregorianCalendar calendar = new GregorianCalendar(TimeZone.getTimeZone("UTC"))-->Line_7 $$ sasPolicy.setSharedAccessStartTime(calendar.getTime())[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_20 $$ return sas[ CD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_8 $$ calendar.add(Calendar.HOUR, 10)[ CD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_6 $$ calendar.setTime(new Date())[ CD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_7 $$ sasPolicy.setSharedAccessStartTime(calendar.getTime())[ CD ]
Line_5 $$ GregorianCalendar calendar = new GregorianCalendar(TimeZone.getTimeZone("UTC"))-->Line_9 $$ sasPolicy.setSharedAccessExpiryTime(calendar.getTime())[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_18 $$ String sas = container.generateSharedAccessSignature(sasPolicy, null)[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_3 $$ container.createIfNotExists()[ FD ]
Line_15 $$ BlobContainerPermissions containerPermissions = new BlobContainerPermissions()-->Line_17 $$ container.uploadPermissions(containerPermissions)[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_10 $$ if (readonly) [ CD ]
Line_4 $$ SharedAccessBlobPolicy sasPolicy = new SharedAccessBlobPolicy()-->Line_9 $$ sasPolicy.setSharedAccessExpiryTime(calendar.getTime())[ FD ]
Line_10 $$ if (readonly) -->Line_13 $$ sasPolicy.setPermissions(EnumSet.of(SharedAccessBlobPermissions.READ, SharedAccessBlobPermissions.WRITE, SharedAccessBlobPermissions.LIST))[ CD ]
Line_4 $$ SharedAccessBlobPolicy sasPolicy = new SharedAccessBlobPolicy()-->Line_18 $$ String sas = container.generateSharedAccessSignature(sasPolicy, null)[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_17 $$ container.uploadPermissions(containerPermissions)[ FD ]
Line_4 $$ SharedAccessBlobPolicy sasPolicy = new SharedAccessBlobPolicy()-->Line_13 $$ sasPolicy.setPermissions(EnumSet.of(SharedAccessBlobPermissions.READ, SharedAccessBlobPermissions.WRITE, SharedAccessBlobPermissions.LIST))[ FD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_4 $$ SharedAccessBlobPolicy sasPolicy = new SharedAccessBlobPolicy()[ CD ]
Line_2 $$ private static String generateSAS(CloudBlobContainer container, boolean readonly) throws Exception -->Line_9 $$ sasPolicy.setSharedAccessExpiryTime(calendar.getTime())[ CD ]
