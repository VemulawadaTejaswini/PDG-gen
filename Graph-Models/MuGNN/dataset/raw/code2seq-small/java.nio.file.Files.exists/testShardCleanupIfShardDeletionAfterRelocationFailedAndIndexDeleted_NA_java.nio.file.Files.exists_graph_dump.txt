Line_9 $$ final String node_2 = internalCluster().startDataOnlyNode(Settings.builder().build())-->Line_16 $$ TransportService transportServiceNode_2 = internalCluster().getInstance(TransportService.class, node_2)[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_18 $$ transportServiceNode_1.addDelegate(transportServiceNode_2, new MockTransportService.DelegateTransport(transportServiceNode_1.original()) [ CD ]
Line_9 $$ final String node_2 = internalCluster().startDataOnlyNode(Settings.builder().build())-->Line_39 $$ assertThat(waitForShardDeletion(node_2, "test", 0), equalTo(false))[ FD ]
Line_9 $$ final String node_2 = internalCluster().startDataOnlyNode(Settings.builder().build())-->Line_41 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(false))[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_11 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_8 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(true))[ CD ]
Line_16 $$ TransportService transportServiceNode_2 = internalCluster().getInstance(TransportService.class, node_2)-->Line_18 $$ transportServiceNode_1.addDelegate(transportServiceNode_2, new MockTransportService.DelegateTransport(transportServiceNode_1.original()) [ FD ]
Line_9 $$ final String node_2 = internalCluster().startDataOnlyNode(Settings.builder().build())-->Line_42 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(false))[ FD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_12 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(true))[ FD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_8 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(true))[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_37 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(false))[ CD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_11 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ FD ]
Line_18 $$ transportServiceNode_1.addDelegate(transportServiceNode_2, new MockTransportService.DelegateTransport(transportServiceNode_1.original()) -->Line_20 $$ if (action.equals("internal:index/shard/exists") && shardActiveRequestSent.getCount() > 0) [ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_3 $$ final String node_1 = internalCluster().startNode()[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_12 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(true))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_32 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_29 $$ internalCluster().client().admin().cluster().prepareReroute().add(new MoveAllocationCommand(new ShardId("test", 0), node_1, node_2)).get()[ CD ]
Line_9 $$ final String node_2 = internalCluster().startDataOnlyNode(Settings.builder().build())-->Line_40 $$ assertThat(waitForIndexDeletion(node_2, "test"), equalTo(false))[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_14 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(false))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_40 $$ assertThat(waitForIndexDeletion(node_2, "test"), equalTo(false))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_9 $$ final String node_2 = internalCluster().startDataOnlyNode(Settings.builder().build())[ CD ]
Line_18 $$ transportServiceNode_1.addDelegate(transportServiceNode_2, new MockTransportService.DelegateTransport(transportServiceNode_1.original()) -->Line_25 $$ super.sendRequest(node, requestId, action, request, options)[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_5 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)))[ CD ]
Line_9 $$ final String node_2 = internalCluster().startDataOnlyNode(Settings.builder().build())-->Line_14 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(false))[ FD ]
Line_20 $$ if (action.equals("internal:index/shard/exists") && shardActiveRequestSent.getCount() > 0) -->Line_21 $$ shardActiveRequestSent.countDown()[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_41 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(false))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_38 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(false))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_6 $$ ensureGreen("test")[ CD ]
Line_9 $$ final String node_2 = internalCluster().startDataOnlyNode(Settings.builder().build())-->Line_13 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(false))[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_15 $$ MockTransportService transportServiceNode_1 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_1)[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_34 $$ client().admin().indices().prepareDelete("test").get()[ CD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_35 $$ assertThat(waitForShardDeletion(node_1, "test", 0), equalTo(false))[ FD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_37 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(false))[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_39 $$ assertThat(waitForShardDeletion(node_2, "test", 0), equalTo(false))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_7 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ CD ]
Line_17 $$ final CountDownLatch shardActiveRequestSent = new CountDownLatch(1)-->Line_20 $$ if (action.equals("internal:index/shard/exists") && shardActiveRequestSent.getCount() > 0) [ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_10 $$ assertFalse(client().admin().cluster().prepareHealth().setWaitForNodes("2").get().isTimedOut())[ CD ]
Line_17 $$ final CountDownLatch shardActiveRequestSent = new CountDownLatch(1)-->Line_21 $$ shardActiveRequestSent.countDown()[ FD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_36 $$ assertThat(waitForIndexDeletion(node_1, "test"), equalTo(false))[ FD ]
Line_20 $$ if (action.equals("internal:index/shard/exists") && shardActiveRequestSent.getCount() > 0) -->Line_22 $$ logger.info("prevent shard active request from being sent")[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_31 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForRelocatingShards(0).get()[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_33 $$ logClusterState()[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_36 $$ assertThat(waitForIndexDeletion(node_1, "test"), equalTo(false))[ CD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_7 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_17 $$ final CountDownLatch shardActiveRequestSent = new CountDownLatch(1)[ CD ]
Line_18 $$ transportServiceNode_1.addDelegate(transportServiceNode_2, new MockTransportService.DelegateTransport(transportServiceNode_1.original()) -->Line_25 $$ super.sendRequest(node, requestId, action, request, options)[ CD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_15 $$ MockTransportService transportServiceNode_1 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_1)[ FD ]
Line_18 $$ transportServiceNode_1.addDelegate(transportServiceNode_2, new MockTransportService.DelegateTransport(transportServiceNode_1.original()) -->Line_20 $$ if (action.equals("internal:index/shard/exists") && shardActiveRequestSent.getCount() > 0) [ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_16 $$ TransportService transportServiceNode_2 = internalCluster().getInstance(TransportService.class, node_2)[ CD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_38 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(false))[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_13 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(false))[ CD ]
Line_15 $$ MockTransportService transportServiceNode_1 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_1)-->Line_18 $$ transportServiceNode_1.addDelegate(transportServiceNode_2, new MockTransportService.DelegateTransport(transportServiceNode_1.original()) [ FD ]
Line_17 $$ final CountDownLatch shardActiveRequestSent = new CountDownLatch(1)-->Line_30 $$ shardActiveRequestSent.await()[ FD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_42 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(false))[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_30 $$ shardActiveRequestSent.await()[ CD ]
Line_2 $$ public void testShardCleanupIfShardDeletionAfterRelocationFailedAndIndexDeleted() throws Exception -->Line_35 $$ assertThat(waitForShardDeletion(node_1, "test", 0), equalTo(false))[ CD ]
