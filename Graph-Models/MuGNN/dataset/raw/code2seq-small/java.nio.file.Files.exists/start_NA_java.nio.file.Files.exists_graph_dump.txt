Line_3 $$ if (useServerLog) -->Line_9 $$ directory = Paths.get(pathManager.getValue().resolveRelativePathEntry(path, pathRelativeTo))[ CD ]
Line_19 $$ if (extended) -->Line_21 $$ extendedPattern = new ExtendedAccessLogParser(getClass().getClassLoader()).parse(pattern)[ CD ]
Line_19 $$ if (extended) -->Line_20 $$ builder.setLogFileHeaderGenerator(new ExtendedAccessLogParser.ExtendedAccessLogHeaderGenerator(pattern))[ CD ]
Line_3 $$ if (useServerLog) -->Line_6 $$ if (pathRelativeTo != null) [ CD ]
Line_2 $$ public void start(StartContext context) throws StartException -->Line_3 $$ if (useServerLog) [ CD ]
Line_18 $$ DefaultAccessLogReceiver.Builder builder = DefaultAccessLogReceiver.builder().setLogWriteExecutor(worker.getValue()).setOutputDirectory(directory).setLogBaseName(filePrefix).setLogNameSuffix(fileSuffix).setRotate(rotate)-->Line_25 $$ logReceiver = builder.build()[ FD ]
Line_18 $$ DefaultAccessLogReceiver.Builder builder = DefaultAccessLogReceiver.builder().setLogWriteExecutor(worker.getValue()).setOutputDirectory(directory).setLogBaseName(filePrefix).setLogNameSuffix(fileSuffix).setRotate(rotate)-->Line_20 $$ builder.setLogFileHeaderGenerator(new ExtendedAccessLogParser.ExtendedAccessLogHeaderGenerator(pattern))[ FD ]
Line_3 $$ if (useServerLog) -->Line_10 $$ if (!Files.exists(directory)) [ CD ]
Line_2 $$ public void start(StartContext context) throws StartException -->Line_30 $$ host.getValue().setAccessLogService(this)[ CD ]
Line_6 $$ if (pathRelativeTo != null) -->Line_7 $$ callbackHandle = pathManager.getValue().registerCallback(pathRelativeTo, PathManager.ReloadServerCallback.create(), PathManager.Event.UPDATED, PathManager.Event.REMOVED)[ CD ]
