Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_8 $$ _destFile = fileResponse.getLocalFile()[ CD ]
Line_10 $$ if (deleteAfterFetch) -->Line_11 $$ Assert.assertTrue(Files.notExists(_sourceFilePath))[ CD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_9 $$ Assert.assertTrue(Files.exists(_destFile))[ CD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_13 $$ FileTime destFileTime = Files.getLastModifiedTime(_destFile)[ CD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_6 $$ _clientChannel.writeAndFlush(new FileRequest(_sourceFilePath, 0, deleteAfterFetch))[ CD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_14 $$ Assert.assertEquals(sourceFileTime.toMillis(), destFileTime.toMillis())[ CD ]
Line_7 $$ FileResponse fileResponse = future.get(_TIME_OUT, TimeUnit.MINUTES)-->Line_8 $$ _destFile = fileResponse.getLocalFile()[ FD ]
Line_4 $$ FileTime sourceFileTime = Files.getLastModifiedTime(_sourceFilePath)-->Line_14 $$ Assert.assertEquals(sourceFileTime.toMillis(), destFileTime.toMillis())[ FD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_15 $$ if (!deleteAfterFetch) [ FD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_5 $$ Future<FileResponse> future = _asyncBroker.post(_sourceFilePath)[ CD ]
Line_15 $$ if (!deleteAfterFetch) -->Line_16 $$ FileServerTestUtil.assertFileEquals(_sourceFilePath, _destFile)[ CD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_15 $$ if (!deleteAfterFetch) [ CD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_7 $$ FileResponse fileResponse = future.get(_TIME_OUT, TimeUnit.MINUTES)[ CD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_10 $$ if (deleteAfterFetch) [ CD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_3 $$ _sourceFilePath = FileServerTestUtil.createFolderWithFiles(Paths.get("testFolder"))[ CD ]
Line_13 $$ FileTime destFileTime = Files.getLastModifiedTime(_destFile)-->Line_14 $$ Assert.assertEquals(sourceFileTime.toMillis(), destFileTime.toMillis())[ FD ]
Line_5 $$ Future<FileResponse> future = _asyncBroker.post(_sourceFilePath)-->Line_7 $$ FileResponse fileResponse = future.get(_TIME_OUT, TimeUnit.MINUTES)[ FD ]
Line_2 $$ protected void doTestFolderTransfer(boolean deleteAfterFetch) throws Exception -->Line_4 $$ FileTime sourceFileTime = Files.getLastModifiedTime(_sourceFilePath)[ CD ]
