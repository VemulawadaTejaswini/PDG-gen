Line_2 $$ public void testShardsCleanup() throws Exception -->Line_36 $$ assertThat(Files.exists(shardDirectory(node_3, "test", 0)), equalTo(true))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_35 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_14 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForNodes("3").setWaitForRelocatingShards(0).get()[ CD ]
Line_22 $$ clusterHealth = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").setWaitForRelocatingShards(0).get()-->Line_23 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_27 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ CD ]
Line_14 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForNodes("3").setWaitForRelocatingShards(0).get()-->Line_22 $$ clusterHealth = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").setWaitForRelocatingShards(0).get()[ FD ]
Line_14 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForNodes("3").setWaitForRelocatingShards(0).get()-->Line_23 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_18 $$ Path server2Shard = shardDirectory(node_2, "test", 0)[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_7 $$ ensureGreen("test")[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_20 $$ internalCluster().stopRandomNode(InternalTestCluster.nameFilter(node_2))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_15 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_3 $$ final String node_1 = internalCluster().startNode()[ CD ]
Line_18 $$ Path server2Shard = shardDirectory(node_2, "test", 0)-->Line_25 $$ assertThat(Files.exists(server2Shard), equalTo(true))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_9 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ CD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_27 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ FD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_35 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_31 $$ final String node_4 = internalCluster().startNode()[ CD ]
Line_14 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForNodes("3").setWaitForRelocatingShards(0).get()-->Line_15 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_17 $$ assertThat(waitForShardDeletion(node_3, "test", 0), equalTo(false))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_37 $$ assertThat(waitForShardDeletion(node_4, "test", 0), equalTo(false))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_4 $$ final String node_2 = internalCluster().startNode()[ CD ]
Line_4 $$ final String node_2 = internalCluster().startNode()-->Line_10 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_22 $$ clusterHealth = client().admin().cluster().prepareHealth().setWaitForGreenStatus().setWaitForNodes("2").setWaitForRelocatingShards(0).get()[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_29 $$ assertThat(Files.exists(shardDirectory(node_3, "test", 0)), equalTo(true))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_25 $$ assertThat(Files.exists(server2Shard), equalTo(true))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_23 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ CD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_10 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(true))[ CD ]
Line_12 $$ String node_3 = internalCluster().startNode()-->Line_17 $$ assertThat(waitForShardDeletion(node_3, "test", 0), equalTo(false))[ FD ]
Line_12 $$ String node_3 = internalCluster().startNode()-->Line_29 $$ assertThat(Files.exists(shardDirectory(node_3, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_28 $$ assertThat(Files.exists(server2Shard), equalTo(true))[ CD ]
Line_31 $$ final String node_4 = internalCluster().startNode()-->Line_37 $$ assertThat(waitForShardDeletion(node_4, "test", 0), equalTo(false))[ FD ]
Line_18 $$ Path server2Shard = shardDirectory(node_2, "test", 0)-->Line_28 $$ assertThat(Files.exists(server2Shard), equalTo(true))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_6 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)))[ CD ]
Line_3 $$ final String node_1 = internalCluster().startNode()-->Line_9 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_33 $$ ensureGreen()[ CD ]
Line_12 $$ String node_3 = internalCluster().startNode()-->Line_36 $$ assertThat(Files.exists(shardDirectory(node_3, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testShardsCleanup() throws Exception -->Line_12 $$ String node_3 = internalCluster().startNode()[ CD ]
Line_4 $$ final String node_2 = internalCluster().startNode()-->Line_20 $$ internalCluster().stopRandomNode(InternalTestCluster.nameFilter(node_2))[ FD ]
Line_4 $$ final String node_2 = internalCluster().startNode()-->Line_18 $$ Path server2Shard = shardDirectory(node_2, "test", 0)[ FD ]
