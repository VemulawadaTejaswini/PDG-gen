Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_24 $$ touch(testDir.resolve("first-level/file1.txt"))[ FD ]
Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_36 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_16 $$ assertThat(changes.notifications(), hasSize(0))[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_23 $$ Files.createDirectories(testDir.resolve("first-level"))[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_30 $$ fileWatcher.checkAndNotify()[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_13 $$ assertThat(changes.notifications(), contains(equalTo("onDirectoryInit: test-dir/"), equalTo("onDirectoryInit: test-dir/sub-dir/"), equalTo("onFileInit: test-dir/sub-dir/test0.txt"), equalTo("onFileInit: test-dir/test.txt")))[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_17 $$ touch(testDir.resolve("sub-dir/test1.txt"))[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_26 $$ touch(testDir.resolve("first-level/second-level/file2.txt"))[ FD ]
Line_32 $$ Path path = testDir.resolve("first-level")-->Line_33 $$ if (Files.exists(path)) [ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_8 $$ Files.createDirectories(testDir.resolve("sub-dir"))[ FD ]
Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_11 $$ fileWatcher.addListener(changes)[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_21 $$ fileWatcher.checkAndNotify()[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_25 $$ Files.createDirectories(testDir.resolve("first-level/second-level"))[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_11 $$ fileWatcher.addListener(changes)[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_15 $$ fileWatcher.checkAndNotify()[ CD ]
Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_12 $$ fileWatcher.init()[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_14 $$ changes.notifications().clear()[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_18 $$ fileWatcher.checkAndNotify()[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_7 $$ touch(testDir.resolve("test.txt"))[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_29 $$ changes.notifications().clear()[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_19 $$ assertThat(changes.notifications(), contains(equalTo("onFileCreated: test-dir/sub-dir/test1.txt")))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_14 $$ changes.notifications().clear()[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_25 $$ Files.createDirectories(testDir.resolve("first-level/second-level"))[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_29 $$ changes.notifications().clear()[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_12 $$ fileWatcher.init()[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_22 $$ assertThat(changes.notifications(), hasSize(0))[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_27 $$ fileWatcher.checkAndNotify()[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_6 $$ Files.createDirectories(testDir)[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_37 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/first-level/file1.txt"), equalTo("onFileDeleted: test-dir/first-level/second-level/file2.txt"), equalTo("onDirectoryDeleted: test-dir/first-level/second-level"), equalTo("onDirectoryDeleted: test-dir/first-level")))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_31 $$ assertThat(changes.notifications(), hasSize(0))[ FD ]
Line_33 $$ if (Files.exists(path)) -->Line_34 $$ IOUtils.rm(path)[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_33 $$ if (Files.exists(path)) [ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_8 $$ Files.createDirectories(testDir.resolve("sub-dir"))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_11 $$ fileWatcher.addListener(changes)[ FD ]
Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_27 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_22 $$ assertThat(changes.notifications(), hasSize(0))[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_32 $$ Path path = testDir.resolve("first-level")[ CD ]
Line_3 $$ Path tempDir = createTempDir()-->Line_5 $$ Path testDir = tempDir.resolve("test-dir")[ FD ]
Line_32 $$ Path path = testDir.resolve("first-level")-->Line_34 $$ IOUtils.rm(path)[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_23 $$ Files.createDirectories(testDir.resolve("first-level"))[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_20 $$ changes.notifications().clear()[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_28 $$ assertThat(changes.notifications(), contains(equalTo("onDirectoryCreated: test-dir/first-level/"), equalTo("onFileCreated: test-dir/first-level/file1.txt"), equalTo("onDirectoryCreated: test-dir/first-level/second-level/"), equalTo("onFileCreated: test-dir/first-level/second-level/file2.txt")))[ FD ]
Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_18 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_5 $$ Path testDir = tempDir.resolve("test-dir")[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_6 $$ Files.createDirectories(testDir)[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_36 $$ fileWatcher.checkAndNotify()[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_28 $$ assertThat(changes.notifications(), contains(equalTo("onDirectoryCreated: test-dir/first-level/"), equalTo("onFileCreated: test-dir/first-level/file1.txt"), equalTo("onDirectoryCreated: test-dir/first-level/second-level/"), equalTo("onFileCreated: test-dir/first-level/second-level/file2.txt")))[ CD ]
Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_21 $$ fileWatcher.checkAndNotify()[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_19 $$ assertThat(changes.notifications(), contains(equalTo("onFileCreated: test-dir/sub-dir/test1.txt")))[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_7 $$ touch(testDir.resolve("test.txt"))[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_17 $$ touch(testDir.resolve("sub-dir/test1.txt"))[ FD ]
Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_15 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_13 $$ assertThat(changes.notifications(), contains(equalTo("onDirectoryInit: test-dir/"), equalTo("onDirectoryInit: test-dir/sub-dir/"), equalTo("onFileInit: test-dir/sub-dir/test0.txt"), equalTo("onFileInit: test-dir/test.txt")))[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_24 $$ touch(testDir.resolve("first-level/file1.txt"))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_16 $$ assertThat(changes.notifications(), hasSize(0))[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_26 $$ touch(testDir.resolve("first-level/second-level/file2.txt"))[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_3 $$ Path tempDir = createTempDir()[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_9 $$ touch(testDir.resolve("sub-dir/test0.txt"))[ CD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_31 $$ assertThat(changes.notifications(), hasSize(0))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_37 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/first-level/file1.txt"), equalTo("onFileDeleted: test-dir/first-level/second-level/file2.txt"), equalTo("onDirectoryDeleted: test-dir/first-level/second-level"), equalTo("onDirectoryDeleted: test-dir/first-level")))[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_32 $$ Path path = testDir.resolve("first-level")[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_20 $$ changes.notifications().clear()[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_9 $$ touch(testDir.resolve("sub-dir/test0.txt"))[ FD ]
Line_10 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_30 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testNestedDirectoryOperations() throws IOException -->Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)[ CD ]
