Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_6 $$ Files.createDirectories(testDir)[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_47 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/test.txt"), equalTo("onFileDeleted: test-dir/test2.txt"), equalTo("onDirectoryDeleted: test-dir")))[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_42 $$ changes.notifications().clear()[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_29 $$ changes.notifications().clear()[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_35 $$ fileWatcher.checkAndNotify()[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_39 $$ Files.delete(testDir.resolve("test4.txt"))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_28 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/test1.txt"), equalTo("onFileDeleted: test-dir/test2.txt")))[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_38 $$ Files.delete(testDir.resolve("test3.txt"))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_26 $$ Files.delete(testDir.resolve("test2.txt"))[ CD ]
Line_43 $$ if (Files.exists(testDir)) -->Line_44 $$ IOUtils.rm(testDir)[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_21 $$ assertThat(changes.notifications(), contains(equalTo("onFileChanged: test-dir/test0.txt"), equalTo("onFileCreated: test-dir/test1.txt"), equalTo("onFileCreated: test-dir/test2.txt"), equalTo("onFileCreated: test-dir/test3.txt")))[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_19 $$ append("Test", testDir.resolve("test0.txt"), Charset.defaultCharset())[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_12 $$ assertThat(changes.notifications(), contains(equalTo("onDirectoryInit: test-dir/"), equalTo("onFileInit: test-dir/test.txt"), equalTo("onFileInit: test-dir/test0.txt")))[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_28 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/test1.txt"), equalTo("onFileDeleted: test-dir/test2.txt")))[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_25 $$ Files.delete(testDir.resolve("test1.txt"))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_8 $$ touch(testDir.resolve("test0.txt"))[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_23 $$ fileWatcher.checkAndNotify()[ CD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_27 $$ fileWatcher.checkAndNotify()[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_22 $$ changes.notifications().clear()[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_20 $$ fileWatcher.checkAndNotify()[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_44 $$ IOUtils.rm(testDir)[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_29 $$ changes.notifications().clear()[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_30 $$ fileWatcher.checkAndNotify()[ CD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_14 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_38 $$ Files.delete(testDir.resolve("test3.txt"))[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_34 $$ touch(testDir.resolve("test4.txt"))[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_10 $$ fileWatcher.addListener(changes)[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_21 $$ assertThat(changes.notifications(), contains(equalTo("onFileChanged: test-dir/test0.txt"), equalTo("onFileCreated: test-dir/test1.txt"), equalTo("onFileCreated: test-dir/test2.txt"), equalTo("onFileCreated: test-dir/test3.txt")))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_47 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/test.txt"), equalTo("onFileDeleted: test-dir/test2.txt"), equalTo("onDirectoryDeleted: test-dir")))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_11 $$ fileWatcher.init()[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_14 $$ fileWatcher.checkAndNotify()[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_41 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/test3.txt"), equalTo("onFileDeleted: test-dir/test4.txt")))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_13 $$ changes.notifications().clear()[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_32 $$ Files.delete(testDir.resolve("test0.txt"))[ CD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_11 $$ fileWatcher.init()[ FD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_46 $$ fileWatcher.checkAndNotify()[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_36 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/test0.txt"), equalTo("onFileCreated: test-dir/test2.txt"), equalTo("onFileCreated: test-dir/test4.txt")))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_5 $$ Path testDir = tempDir.resolve("test-dir")[ CD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_20 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_33 $$ touch(testDir.resolve("test2.txt"))[ CD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_30 $$ fileWatcher.checkAndNotify()[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_31 $$ assertThat(changes.notifications(), hasSize(0))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_25 $$ Files.delete(testDir.resolve("test1.txt"))[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_39 $$ Files.delete(testDir.resolve("test4.txt"))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_42 $$ changes.notifications().clear()[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_8 $$ touch(testDir.resolve("test0.txt"))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_31 $$ assertThat(changes.notifications(), hasSize(0))[ CD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_10 $$ fileWatcher.addListener(changes)[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_13 $$ changes.notifications().clear()[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_6 $$ Files.createDirectories(testDir)[ FD ]
Line_16 $$ for (int i = 0; i < 4; i++) -->Line_17 $$ touch(testDir.resolve("test" + i + ".txt"))[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_40 $$ fileWatcher.checkAndNotify()[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_33 $$ touch(testDir.resolve("test2.txt"))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_24 $$ assertThat(changes.notifications(), hasSize(0))[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_46 $$ fileWatcher.checkAndNotify()[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_43 $$ if (Files.exists(testDir)) [ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_32 $$ Files.delete(testDir.resolve("test0.txt"))[ FD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_35 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_7 $$ touch(testDir.resolve("test.txt"))[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_22 $$ changes.notifications().clear()[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_3 $$ Path tempDir = createTempDir()[ CD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_40 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_37 $$ changes.notifications().clear()[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_41 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/test3.txt"), equalTo("onFileDeleted: test-dir/test4.txt")))[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_26 $$ Files.delete(testDir.resolve("test2.txt"))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_12 $$ assertThat(changes.notifications(), contains(equalTo("onDirectoryInit: test-dir/"), equalTo("onFileInit: test-dir/test.txt"), equalTo("onFileInit: test-dir/test0.txt")))[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_37 $$ changes.notifications().clear()[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)[ CD ]
Line_9 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_23 $$ fileWatcher.checkAndNotify()[ FD ]
Line_3 $$ Path tempDir = createTempDir()-->Line_5 $$ Path testDir = tempDir.resolve("test-dir")[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_15 $$ assertThat(changes.notifications(), hasSize(0))[ FD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_17 $$ touch(testDir.resolve("test" + i + ".txt"))[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_10 $$ fileWatcher.addListener(changes)[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_36 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/test0.txt"), equalTo("onFileCreated: test-dir/test2.txt"), equalTo("onFileCreated: test-dir/test4.txt")))[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_7 $$ touch(testDir.resolve("test.txt"))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_16 $$ for (int i = 0; i < 4; i++) [ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_43 $$ if (Files.exists(testDir)) [ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_15 $$ assertThat(changes.notifications(), hasSize(0))[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_34 $$ touch(testDir.resolve("test4.txt"))[ FD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_27 $$ fileWatcher.checkAndNotify()[ CD ]
Line_2 $$ public void testSimpleDirectoryOperations() throws IOException -->Line_19 $$ append("Test", testDir.resolve("test0.txt"), Charset.defaultCharset())[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_24 $$ assertThat(changes.notifications(), hasSize(0))[ FD ]
