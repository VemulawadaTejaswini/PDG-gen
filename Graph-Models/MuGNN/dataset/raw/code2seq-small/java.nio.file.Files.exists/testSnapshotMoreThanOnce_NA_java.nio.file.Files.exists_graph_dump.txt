Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_64 $$ assertThat(createSnapshotResponseThird.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
Line_25 $$ for (SnapshotIndexShardStatus status : shards) -->Line_26 $$ assertThat(status.getStats().getProcessedFiles(), greaterThan(1))[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", tempDir).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ CD ]
Line_29 $$ if (frequently()) -->Line_35 $$ do [ CD ]
Line_4 $$ final Path tempDir = randomRepoPath().toAbsolutePath()-->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", tempDir).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ FD ]
Line_25 $$ for (SnapshotIndexShardStatus status : shards) -->Line_59 $$ assertThat(status.getStats().getProcessedFiles(), equalTo(1))[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_63 $$ CreateSnapshotResponse createSnapshotResponseThird = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-2").setWaitForCompletion(true).setIndices("test").get()[ CD ]
Line_29 $$ if (frequently()) -->Line_31 $$ disableAllocation("test")[ CD ]
Line_35 $$ do -->Line_41 $$ countResponse = client().prepareSearch().setSize(0).get()[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_10 $$ final int numDocs = randomIntBetween(10, 100)[ CD ]
Line_29 $$ if (frequently()) -->Line_44 $$ enableAllocation("test")[ CD ]
Line_18 $$ CreateSnapshotResponse createSnapshotResponseFirst = client.admin().cluster().prepareCreateSnapshot("test-repo", "test").setWaitForCompletion(true).setIndices("test").get()-->Line_20 $$ assertThat(createSnapshotResponseFirst.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponseFirst.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_12 $$ for (int i = 0; i < builders.length; i++) [ CD ]
Line_51 $$ CreateSnapshotResponse createSnapshotResponseSecond = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-1").setWaitForCompletion(true).setIndices("test").get()-->Line_52 $$ assertThat(createSnapshotResponseSecond.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_25 $$ for (SnapshotIndexShardStatus status : shards) -->Line_71 $$ assertThat(status.getStats().getProcessedFiles(), equalTo(2))[ FD ]
Line_3 $$ Client client = client()-->Line_66 $$ assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-2").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS))[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_54 $$ assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-1").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS))[ CD ]
Line_46 $$ if (cluster().numDataNodes() > 1 && randomBoolean()) -->Line_48 $$ client().admin().indices().prepareUpdateSettings("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)).get()[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_19 $$ assertThat(createSnapshotResponseFirst.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
Line_35 $$ do -->Line_39 $$ upgraded = backwardsCluster().upgradeOneNode()[ CD ]
Line_29 $$ if (frequently()) -->Line_34 $$ boolean upgraded[ CD ]
Line_12 $$ for (int i = 0; i < builders.length; i++) -->Line_13 $$ builders[i] = client().prepareIndex("test", "doc", Integer.toString(i)).setSource("foo", "bar" + i)[ CD ]
Line_35 $$ do -->Line_37 $$ SearchResponse countResponse = client().prepareSearch().setSize(0).get()[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_7 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)))[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_23 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test").get().getSnapshots().get(0)[ CD ]
Line_3 $$ Client client = client()-->Line_18 $$ CreateSnapshotResponse createSnapshotResponseFirst = client.admin().cluster().prepareCreateSnapshot("test-repo", "test").setWaitForCompletion(true).setIndices("test").get()[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_24 $$ List<SnapshotIndexShardStatus> shards = snapshotStatus.getShards()[ CD ]
Line_35 $$ do -->Line_42 $$ assertHitCount(countResponse, numDocs)[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_11 $$ IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocs][ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_15 $$ indexRandom(true, builders)[ CD ]
Line_37 $$ SearchResponse countResponse = client().prepareSearch().setSize(0).get()-->Line_41 $$ countResponse = client().prepareSearch().setSize(0).get()[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_66 $$ assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-2").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS))[ CD ]
Line_37 $$ SearchResponse countResponse = client().prepareSearch().setSize(0).get()-->Line_38 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_41 $$ countResponse = client().prepareSearch().setSize(0).get()-->Line_38 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_63 $$ CreateSnapshotResponse createSnapshotResponseThird = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-2").setWaitForCompletion(true).setIndices("test").get()-->Line_64 $$ assertThat(createSnapshotResponseThird.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_3 $$ Client client = client()[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_53 $$ assertThat(createSnapshotResponseSecond.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponseSecond.getSnapshotInfo().totalShards()))[ CD ]
Line_35 $$ do -->Line_36 $$ logClusterState()[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_62 $$ client().prepareDelete("test", "doc", "1").get()[ CD ]
Line_23 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test").get().getSnapshots().get(0)-->Line_69 $$ List<SnapshotIndexShardStatus> shards = snapshotStatus.getShards()[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_68 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-2").get().getSnapshots().get(0)[ CD ]
Line_3 $$ Client client = client()-->Line_68 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-2").get().getSnapshots().get(0)[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_16 $$ flushAndRefresh()[ CD ]
Line_51 $$ CreateSnapshotResponse createSnapshotResponseSecond = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-1").setWaitForCompletion(true).setIndices("test").get()-->Line_53 $$ assertThat(createSnapshotResponseSecond.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponseSecond.getSnapshotInfo().totalShards()))[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_57 $$ List<SnapshotIndexShardStatus> shards = snapshotStatus.getShards()[ CD ]
Line_35 $$ do -->Line_40 $$ ensureYellow()[ CD ]
Line_29 $$ if (frequently()) -->Line_33 $$ logClusterState()[ CD ]
Line_18 $$ CreateSnapshotResponse createSnapshotResponseFirst = client.admin().cluster().prepareCreateSnapshot("test-repo", "test").setWaitForCompletion(true).setIndices("test").get()-->Line_19 $$ assertThat(createSnapshotResponseFirst.getSnapshotInfo().successfulShards(), greaterThan(0))[ FD ]
Line_41 $$ countResponse = client().prepareSearch().setSize(0).get()-->Line_42 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_29 $$ if (frequently()) [ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_65 $$ assertThat(createSnapshotResponseThird.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponseThird.getSnapshotInfo().totalShards()))[ CD ]
Line_3 $$ Client client = client()-->Line_6 $$ assertAcked(client.admin().cluster().preparePutRepository("test-repo").setType("fs").setSettings(Settings.settingsBuilder().put("location", tempDir).put("compress", randomBoolean()).put("chunk_size", randomIntBetween(100, 1000), ByteSizeUnit.BYTES)))[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_17 $$ assertNoFailures(client().admin().indices().prepareForceMerge("test").setFlush(true).setMaxNumSegments(1).get())[ CD ]
Line_29 $$ if (frequently()) -->Line_32 $$ backwardsCluster().allowOnAllNodes("test")[ CD ]
Line_3 $$ Client client = client()-->Line_54 $$ assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test-1").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS))[ FD ]
Line_3 $$ Client client = client()-->Line_56 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-1").get().getSnapshots().get(0)[ FD ]
Line_3 $$ Client client = client()-->Line_21 $$ assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS))[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_69 $$ List<SnapshotIndexShardStatus> shards = snapshotStatus.getShards()[ CD ]
Line_37 $$ SearchResponse countResponse = client().prepareSearch().setSize(0).get()-->Line_42 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_35 $$ do -->Line_38 $$ assertHitCount(countResponse, numDocs)[ CD ]
Line_11 $$ IndexRequestBuilder[] builders = new IndexRequestBuilder[numDocs]-->Line_15 $$ indexRandom(true, builders)[ FD ]
Line_3 $$ Client client = client()-->Line_63 $$ CreateSnapshotResponse createSnapshotResponseThird = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-2").setWaitForCompletion(true).setIndices("test").get()[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_20 $$ assertThat(createSnapshotResponseFirst.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponseFirst.getSnapshotInfo().totalShards()))[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_21 $$ assertThat(client.admin().cluster().prepareGetSnapshots("test-repo").setSnapshots("test").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS))[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_18 $$ CreateSnapshotResponse createSnapshotResponseFirst = client.admin().cluster().prepareCreateSnapshot("test-repo", "test").setWaitForCompletion(true).setIndices("test").get()[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_52 $$ assertThat(createSnapshotResponseSecond.getSnapshotInfo().successfulShards(), greaterThan(0))[ CD ]
Line_23 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test").get().getSnapshots().get(0)-->Line_57 $$ List<SnapshotIndexShardStatus> shards = snapshotStatus.getShards()[ FD ]
Line_3 $$ Client client = client()-->Line_23 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test").get().getSnapshots().get(0)[ FD ]
Line_12 $$ for (int i = 0; i < builders.length; i++) -->Line_13 $$ builders[i] = client().prepareIndex("test", "doc", Integer.toString(i)).setSource("foo", "bar" + i)[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_8 $$ ensureYellow()[ CD ]
Line_23 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test").get().getSnapshots().get(0)-->Line_24 $$ List<SnapshotIndexShardStatus> shards = snapshotStatus.getShards()[ FD ]
Line_34 $$ boolean upgraded-->Line_39 $$ upgraded = backwardsCluster().upgradeOneNode()[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_46 $$ if (cluster().numDataNodes() > 1 && randomBoolean()) [ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_56 $$ SnapshotStatus snapshotStatus = client.admin().cluster().prepareSnapshotStatus("test-repo").setSnapshots("test-1").get().getSnapshots().get(0)[ CD ]
Line_10 $$ final int numDocs = randomIntBetween(10, 100)-->Line_38 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_10 $$ final int numDocs = randomIntBetween(10, 100)-->Line_42 $$ assertHitCount(countResponse, numDocs)[ FD ]
Line_63 $$ CreateSnapshotResponse createSnapshotResponseThird = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-2").setWaitForCompletion(true).setIndices("test").get()-->Line_65 $$ assertThat(createSnapshotResponseThird.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponseThird.getSnapshotInfo().totalShards()))[ FD ]
Line_3 $$ Client client = client()-->Line_51 $$ CreateSnapshotResponse createSnapshotResponseSecond = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-1").setWaitForCompletion(true).setIndices("test").get()[ FD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_4 $$ final Path tempDir = randomRepoPath().toAbsolutePath()[ CD ]
Line_2 $$ public void testSnapshotMoreThanOnce() throws ExecutionException, InterruptedException, IOException -->Line_51 $$ CreateSnapshotResponse createSnapshotResponseSecond = client.admin().cluster().prepareCreateSnapshot("test-repo", "test-1").setWaitForCompletion(true).setIndices("test").get()[ CD ]
