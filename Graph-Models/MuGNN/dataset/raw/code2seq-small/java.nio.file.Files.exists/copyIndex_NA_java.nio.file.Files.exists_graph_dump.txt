Line_2 $$ public static void copyIndex(final ESLogger logger, final Path src, final String indexName, final Path... dests) throws IOException -->Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() [ FD ]
Line_4 $$ Path indexDir = dest.resolve(indexName)-->Line_6 $$ Files.createDirectories(indexDir)[ FD ]
Line_2 $$ public static void copyIndex(final ESLogger logger, final Path src, final String indexName, final Path... dests) throws IOException -->Line_22 $$ Path relativeFile = src.relativize(file)[ FD ]
Line_4 $$ Path indexDir = dest.resolve(indexName)-->Line_5 $$ assertFalse(Files.exists(indexDir))[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_27 $$ assertTrue(Files.exists(destFile))[ CD ]
Line_18 $$ if (file.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME)) -->Line_20 $$ return FileVisitResult.CONTINUE[ CD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_10 $$ Path relativeDir = src.relativize(dir)[ CD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_23 $$ Path destFile = dests[randomInt(dests.length - 1)].resolve(indexName).resolve(relativeFile)[ CD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_18 $$ if (file.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME)) [ FD ]
Line_11 $$ for (Path dest : dests) -->Line_12 $$ Path destDir = dest.resolve(indexName).resolve(relativeDir)[ FD ]
Line_2 $$ public static void copyIndex(final ESLogger logger, final Path src, final String indexName, final Path... dests) throws IOException -->Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() [ CD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_22 $$ Path relativeFile = src.relativize(file)[ CD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_25 $$ Files.move(file, destFile)[ FD ]
Line_23 $$ Path destFile = dests[randomInt(dests.length - 1)].resolve(indexName).resolve(relativeFile)-->Line_25 $$ Files.move(file, destFile)[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_18 $$ if (file.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME)) [ CD ]
Line_3 $$ for (Path dest : dests) -->Line_12 $$ Path destDir = dest.resolve(indexName).resolve(relativeDir)[ FD ]
Line_10 $$ Path relativeDir = src.relativize(dir)-->Line_12 $$ Path destDir = dest.resolve(indexName).resolve(relativeDir)[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_22 $$ Path relativeFile = src.relativize(file)[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_26 $$ assertFalse(Files.exists(file))[ FD ]
Line_3 $$ for (Path dest : dests) -->Line_4 $$ Path indexDir = dest.resolve(indexName)[ FD ]
Line_2 $$ public static void copyIndex(final ESLogger logger, final Path src, final String indexName, final Path... dests) throws IOException -->Line_12 $$ Path destDir = dest.resolve(indexName).resolve(relativeDir)[ FD ]
Line_2 $$ public static void copyIndex(final ESLogger logger, final Path src, final String indexName, final Path... dests) throws IOException -->Line_10 $$ Path relativeDir = src.relativize(dir)[ FD ]
Line_23 $$ Path destFile = dests[randomInt(dests.length - 1)].resolve(indexName).resolve(relativeFile)-->Line_27 $$ assertTrue(Files.exists(destFile))[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_15 $$ return FileVisitResult.CONTINUE[ CD ]
Line_2 $$ public static void copyIndex(final ESLogger logger, final Path src, final String indexName, final Path... dests) throws IOException -->Line_4 $$ Path indexDir = dest.resolve(indexName)[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_25 $$ Files.move(file, destFile)[ CD ]
Line_12 $$ Path destDir = dest.resolve(indexName).resolve(relativeDir)-->Line_13 $$ Files.createDirectories(destDir)[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_26 $$ assertFalse(Files.exists(file))[ CD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_19 $$ logger.trace("Skipping lock file: " + file.toString())[ FD ]
Line_18 $$ if (file.getFileName().toString().equals(IndexWriter.WRITE_LOCK_NAME)) -->Line_19 $$ logger.trace("Skipping lock file: " + file.toString())[ CD ]
Line_2 $$ public static void copyIndex(final ESLogger logger, final Path src, final String indexName, final Path... dests) throws IOException -->Line_23 $$ Path destFile = dests[randomInt(dests.length - 1)].resolve(indexName).resolve(relativeFile)[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_28 $$ return FileVisitResult.CONTINUE[ CD ]
Line_22 $$ Path relativeFile = src.relativize(file)-->Line_23 $$ Path destFile = dests[randomInt(dests.length - 1)].resolve(indexName).resolve(relativeFile)[ FD ]
Line_8 $$ Files.walkFileTree(src, new SimpleFileVisitor<Path>() -->Line_10 $$ Path relativeDir = src.relativize(dir)[ FD ]
Line_2 $$ public static void copyIndex(final ESLogger logger, final Path src, final String indexName, final Path... dests) throws IOException -->Line_19 $$ logger.trace("Skipping lock file: " + file.toString())[ FD ]
