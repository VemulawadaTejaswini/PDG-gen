Line_6 $$ if (Files.notExists(buildXmlPath)) -->Line_7 $$ Assert.fail("Missing " + buildXmlPath)[ CD ]
Line_15 $$ if (Files.notExists(buildGradlePath)) -->Line_16 $$ Assert.fail("Missing " + buildGradlePath)[ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_5 $$ Path buildXmlPath = dirPath.resolve("build.xml")[ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_10 $$ if (Files.exists(ivyXmlPath)) [ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_13 $$ if (Files.exists(dirPath.resolve("bnd.bnd"))) [ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_14 $$ Path buildGradlePath = dirPath.resolve("build.gradle")[ FD ]
Line_13 $$ if (Files.exists(dirPath.resolve("bnd.bnd"))) -->Line_18 $$ return FileVisitResult.SKIP_SUBTREE[ CD ]
Line_9 $$ Path ivyXmlPath = dirPath.resolve("ivy.xml")-->Line_10 $$ if (Files.exists(ivyXmlPath)) [ FD ]
Line_13 $$ if (Files.exists(dirPath.resolve("bnd.bnd"))) -->Line_19 $$ if (Files.exists(dirPath.resolve("package.json"))) [ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_19 $$ if (Files.exists(dirPath.resolve("package.json"))) [ FD ]
Line_10 $$ if (Files.exists(ivyXmlPath)) -->Line_11 $$ Assert.fail("Forbidden " + ivyXmlPath)[ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_5 $$ Path buildXmlPath = dirPath.resolve("build.xml")[ FD ]
Line_14 $$ Path buildGradlePath = dirPath.resolve("build.gradle")-->Line_15 $$ if (Files.notExists(buildGradlePath)) [ FD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_6 $$ if (Files.notExists(buildXmlPath)) [ CD ]
Line_13 $$ if (Files.exists(dirPath.resolve("bnd.bnd"))) -->Line_14 $$ Path buildGradlePath = dirPath.resolve("build.gradle")[ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_22 $$ return FileVisitResult.CONTINUE[ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_13 $$ if (Files.exists(dirPath.resolve("bnd.bnd"))) [ FD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_9 $$ Path ivyXmlPath = dirPath.resolve("ivy.xml")[ FD ]
Line_5 $$ Path buildXmlPath = dirPath.resolve("build.xml")-->Line_6 $$ if (Files.notExists(buildXmlPath)) [ FD ]
Line_13 $$ if (Files.exists(dirPath.resolve("bnd.bnd"))) -->Line_15 $$ if (Files.notExists(buildGradlePath)) [ CD ]
Line_19 $$ if (Files.exists(dirPath.resolve("package.json"))) -->Line_20 $$ return FileVisitResult.SKIP_SUBTREE[ CD ]
Line_2 $$ public void testScanBuildScripts() throws IOException -->Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() [ CD ]
Line_3 $$ Files.walkFileTree(Paths.get("modules"), new SimpleFileVisitor<Path>() -->Line_9 $$ Path ivyXmlPath = dirPath.resolve("ivy.xml")[ CD ]
