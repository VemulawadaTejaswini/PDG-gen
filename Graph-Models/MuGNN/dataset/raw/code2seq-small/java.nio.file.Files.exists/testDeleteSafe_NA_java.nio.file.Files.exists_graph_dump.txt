Line_4 $$ ShardLock fooLock = env.shardLock(new ShardId("foo", 0))-->Line_29 $$ fooLock.close()[ FD ]
Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) -->Line_21 $$ assertTrue(Files.exists(path.resolve("0")))[ FD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_42 $$ latch.countDown()[ CD ]
Line_37 $$ if (randomBoolean()) -->Line_56 $$ latch.countDown()[ CD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_51 $$ latch.countDown()[ CD ]
Line_35 $$ final CountDownLatch blockLatch = new CountDownLatch(1)-->Line_48 $$ blockLatch.countDown()[ FD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_54 $$ t.start()[ FD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_61 $$ env.deleteIndexDirectorySafe(new Index("foo"), 5000, idxSettings)[ FD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_43 $$ blockLatch.countDown()[ CD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_63 $$ for (Path path : env.indexPaths(new Index("foo"))) [ FD ]
Line_33 $$ final AtomicReference<Throwable> threadException = new AtomicReference()-->Line_62 $$ assertNull(threadException.get())[ FD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) [ FD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_47 $$ try (ShardLock autoCloses = env.shardLock(new ShardId("foo", 0))) [ FD ]
Line_35 $$ final CountDownLatch blockLatch = new CountDownLatch(1)-->Line_57 $$ blockLatch.countDown()[ FD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_30 $$ for (Path path : env.indexPaths(new Index("foo"))) [ FD ]
Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) -->Line_8 $$ Files.createDirectories(path.resolve("1"))[ FD ]
Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) -->Line_7 $$ Files.createDirectories(path.resolve("0"))[ FD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_15 $$ for (Path path : env.indexPaths(new Index("foo"))) [ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_37 $$ if (randomBoolean()) [ CD ]
Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_66 $$ latch.await()[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_67 $$ assertTrue("LockedShards: " + env.lockedShards(), env.lockedShards().isEmpty())[ CD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_25 $$ env.deleteIndexDirectorySafe(new Index("foo"), randomIntBetween(0, 10), idxSettings)[ FD ]
Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) -->Line_64 $$ assertFalse(Files.exists(path))[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_4 $$ ShardLock fooLock = env.shardLock(new ShardId("foo", 0))[ CD ]
Line_37 $$ if (randomBoolean()) -->Line_54 $$ t.start()[ CD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_5 $$ assertEquals(new ShardId("foo", 0), fooLock.getShardId())[ CD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_68 $$ env.close()[ FD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_67 $$ assertTrue("LockedShards: " + env.lockedShards(), env.lockedShards().isEmpty())[ FD ]
Line_35 $$ final CountDownLatch blockLatch = new CountDownLatch(1)-->Line_43 $$ blockLatch.countDown()[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_19 $$ env.deleteShardDirectorySafe(new ShardId("foo", 1), idxSettings)[ CD ]
Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) -->Line_17 $$ assertTrue(Files.exists(path.resolve("1")))[ FD ]
Line_35 $$ final CountDownLatch blockLatch = new CountDownLatch(1)-->Line_60 $$ blockLatch.await()[ FD ]
Line_36 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_46 $$ start.await()[ FD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_46 $$ start.await()[ CD ]
Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) -->Line_16 $$ assertTrue(Files.exists(path.resolve("0")))[ FD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_40 $$ logger.error("unexpected error", t)[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_60 $$ blockLatch.await()[ CD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_19 $$ env.deleteShardDirectorySafe(new ShardId("foo", 1), idxSettings)[ FD ]
Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) -->Line_31 $$ assertTrue(Files.exists(path))[ FD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_20 $$ for (Path path : env.indexPaths(new Index("foo"))) [ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)[ CD ]
Line_33 $$ final AtomicReference<Throwable> threadException = new AtomicReference()-->Line_41 $$ threadException.set(t)[ FD ]
Line_37 $$ if (randomBoolean()) -->Line_57 $$ blockLatch.countDown()[ CD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_41 $$ threadException.set(t)[ CD ]
Line_36 $$ final CountDownLatch start = new CountDownLatch(1)-->Line_59 $$ start.countDown()[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_62 $$ assertNull(threadException.get())[ CD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_36 $$ final CountDownLatch start = new CountDownLatch(1)[ CD ]
Line_4 $$ ShardLock fooLock = env.shardLock(new ShardId("foo", 0))-->Line_5 $$ assertEquals(new ShardId("foo", 0), fooLock.getShardId())[ FD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_40 $$ logger.error("unexpected error", t)[ CD ]
Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_56 $$ latch.countDown()[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_33 $$ final AtomicReference<Throwable> threadException = new AtomicReference()[ CD ]
Line_37 $$ if (randomBoolean()) -->Line_38 $$ Thread t = new Thread(new AbstractRunnable() [ CD ]
Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_42 $$ latch.countDown()[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_59 $$ start.countDown()[ CD ]
Line_38 $$ Thread t = new Thread(new AbstractRunnable() -->Line_41 $$ threadException.set(t)[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_66 $$ latch.await()[ CD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_29 $$ fooLock.close()[ CD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_4 $$ ShardLock fooLock = env.shardLock(new ShardId("foo", 0))[ FD ]
Line_34 $$ final CountDownLatch latch = new CountDownLatch(1)-->Line_51 $$ latch.countDown()[ FD ]
Line_3 $$ final NodeEnvironment env = newNodeEnvironment()-->Line_11 $$ env.deleteShardDirectorySafe(new ShardId("foo", 0), idxSettings)[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_61 $$ env.deleteIndexDirectorySafe(new Index("foo"), 5000, idxSettings)[ CD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_35 $$ final CountDownLatch blockLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_3 $$ final NodeEnvironment env = newNodeEnvironment()[ CD ]
Line_6 $$ for (Path path : env.indexPaths(new Index("foo"))) -->Line_22 $$ assertFalse(Files.exists(path.resolve("1")))[ FD ]
Line_2 $$ public void testDeleteSafe() throws IOException, InterruptedException -->Line_68 $$ env.close()[ CD ]
