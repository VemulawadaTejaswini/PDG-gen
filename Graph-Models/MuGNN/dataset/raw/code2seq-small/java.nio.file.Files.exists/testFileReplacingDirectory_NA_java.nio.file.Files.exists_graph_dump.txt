Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_20 $$ fileWatcher.checkAndNotify()[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_26 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/sub-dir/"), equalTo("onDirectoryCreated: test-dir/sub-dir/")))[ CD ]
Line_11 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_20 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_8 $$ Files.createDirectories(subDir)[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_22 $$ changes.notifications().clear()[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_16 $$ if (Files.exists(subDir)) [ CD ]
Line_16 $$ if (Files.exists(subDir)) -->Line_17 $$ IOUtils.rm(subDir)[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_21 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/sub-dir/test0.txt"), equalTo("onFileDeleted: test-dir/sub-dir/test1.txt"), equalTo("onDirectoryDeleted: test-dir/sub-dir"), equalTo("onFileCreated: test-dir/sub-dir")))[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_23 $$ Files.delete(subDir)[ CD ]
Line_7 $$ Path subDir = testDir.resolve("sub-dir")-->Line_17 $$ IOUtils.rm(subDir)[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_14 $$ assertThat(changes.notifications(), contains(equalTo("onDirectoryInit: test-dir/"), equalTo("onDirectoryInit: test-dir/sub-dir/"), equalTo("onFileInit: test-dir/sub-dir/test0.txt"), equalTo("onFileInit: test-dir/sub-dir/test1.txt")))[ FD ]
Line_7 $$ Path subDir = testDir.resolve("sub-dir")-->Line_24 $$ Files.createDirectories(subDir)[ FD ]
Line_7 $$ Path subDir = testDir.resolve("sub-dir")-->Line_9 $$ touch(subDir.resolve("test0.txt"))[ FD ]
Line_7 $$ Path subDir = testDir.resolve("sub-dir")-->Line_23 $$ Files.delete(subDir)[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_15 $$ changes.notifications().clear()[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_24 $$ Files.createDirectories(subDir)[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_15 $$ changes.notifications().clear()[ FD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_12 $$ fileWatcher.addListener(changes)[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_9 $$ touch(subDir.resolve("test0.txt"))[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_7 $$ Path subDir = testDir.resolve("sub-dir")[ FD ]
Line_7 $$ Path subDir = testDir.resolve("sub-dir")-->Line_8 $$ Files.createDirectories(subDir)[ FD ]
Line_3 $$ Path tempDir = createTempDir()-->Line_5 $$ Path testDir = tempDir.resolve("test-dir")[ FD ]
Line_7 $$ Path subDir = testDir.resolve("sub-dir")-->Line_19 $$ touch(subDir)[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_7 $$ Path subDir = testDir.resolve("sub-dir")[ CD ]
Line_11 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_12 $$ fileWatcher.addListener(changes)[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_6 $$ Files.createDirectories(testDir)[ CD ]
Line_5 $$ Path testDir = tempDir.resolve("test-dir")-->Line_6 $$ Files.createDirectories(testDir)[ FD ]
Line_7 $$ Path subDir = testDir.resolve("sub-dir")-->Line_16 $$ if (Files.exists(subDir)) [ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_10 $$ touch(subDir.resolve("test1.txt"))[ CD ]
Line_7 $$ Path subDir = testDir.resolve("sub-dir")-->Line_10 $$ touch(subDir.resolve("test1.txt"))[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_5 $$ Path testDir = tempDir.resolve("test-dir")[ CD ]
Line_11 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_13 $$ fileWatcher.init()[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_25 $$ fileWatcher.checkAndNotify()[ CD ]
Line_4 $$ RecordingChangeListener changes = new RecordingChangeListener(tempDir)-->Line_26 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/sub-dir/"), equalTo("onDirectoryCreated: test-dir/sub-dir/")))[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_11 $$ FileWatcher fileWatcher = new FileWatcher(testDir)[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_12 $$ fileWatcher.addListener(changes)[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_22 $$ changes.notifications().clear()[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_14 $$ assertThat(changes.notifications(), contains(equalTo("onDirectoryInit: test-dir/"), equalTo("onDirectoryInit: test-dir/sub-dir/"), equalTo("onFileInit: test-dir/sub-dir/test0.txt"), equalTo("onFileInit: test-dir/sub-dir/test1.txt")))[ CD ]
Line_11 $$ FileWatcher fileWatcher = new FileWatcher(testDir)-->Line_25 $$ fileWatcher.checkAndNotify()[ FD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_13 $$ fileWatcher.init()[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_21 $$ assertThat(changes.notifications(), contains(equalTo("onFileDeleted: test-dir/sub-dir/test0.txt"), equalTo("onFileDeleted: test-dir/sub-dir/test1.txt"), equalTo("onDirectoryDeleted: test-dir/sub-dir"), equalTo("onFileCreated: test-dir/sub-dir")))[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_3 $$ Path tempDir = createTempDir()[ CD ]
Line_2 $$ public void testFileReplacingDirectory() throws IOException -->Line_19 $$ touch(subDir)[ CD ]
