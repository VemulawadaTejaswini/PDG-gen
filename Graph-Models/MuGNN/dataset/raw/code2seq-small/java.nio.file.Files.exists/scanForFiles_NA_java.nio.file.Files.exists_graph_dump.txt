Line_2 $$ protected List<String> scanForFiles(String baseDir, final List<PathMatcher> excludeDirPathMatchers, final List<PathMatcher> excludeFilePathMatchers, final List<PathMatcher> includeFilePathMatchers) throws Exception -->Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() [ CD ]
Line_9 $$ for (PathMatcher pathMatcher : excludeDirPathMatchers) -->Line_18 $$ if (pathMatcher.matches(filePath)) [ FD ]
Line_17 $$ for (PathMatcher pathMatcher : excludeFilePathMatchers) -->Line_23 $$ if (!pathMatcher.matches(filePath)) [ FD ]
Line_3 $$ final List<String> fileNames = new ArrayList()-->Line_27 $$ fileNames.add(fileName)[ FD ]
Line_10 $$ if (pathMatcher.matches(dirPath)) -->Line_11 $$ return FileVisitResult.SKIP_SUBTREE[ CD ]
Line_26 $$ String fileName = filePath.toString()-->Line_27 $$ fileNames.add(fileName)[ FD ]
Line_17 $$ for (PathMatcher pathMatcher : excludeFilePathMatchers) -->Line_18 $$ if (pathMatcher.matches(filePath)) [ FD ]
Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() -->Line_6 $$ if (Files.exists(dirPath.resolve("source_formatter.ignore"))) [ CD ]
Line_6 $$ if (Files.exists(dirPath.resolve("source_formatter.ignore"))) -->Line_7 $$ return FileVisitResult.SKIP_SUBTREE[ CD ]
Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() -->Line_31 $$ return FileVisitResult.CONTINUE[ CD ]
Line_9 $$ for (PathMatcher pathMatcher : excludeDirPathMatchers) -->Line_23 $$ if (!pathMatcher.matches(filePath)) [ FD ]
Line_9 $$ for (PathMatcher pathMatcher : excludeDirPathMatchers) -->Line_10 $$ if (pathMatcher.matches(dirPath)) [ FD ]
Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() -->Line_26 $$ String fileName = filePath.toString()[ FD ]
Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() -->Line_10 $$ if (pathMatcher.matches(dirPath)) [ FD ]
Line_26 $$ String fileName = filePath.toString()-->Line_28 $$ updateProperties(fileName)[ FD ]
Line_2 $$ protected List<String> scanForFiles(String baseDir, final List<PathMatcher> excludeDirPathMatchers, final List<PathMatcher> excludeFilePathMatchers, final List<PathMatcher> includeFilePathMatchers) throws Exception -->Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() [ FD ]
Line_2 $$ protected List<String> scanForFiles(String baseDir, final List<PathMatcher> excludeDirPathMatchers, final List<PathMatcher> excludeFilePathMatchers, final List<PathMatcher> includeFilePathMatchers) throws Exception -->Line_3 $$ final List<String> fileNames = new ArrayList()[ CD ]
Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() -->Line_6 $$ if (Files.exists(dirPath.resolve("source_formatter.ignore"))) [ FD ]
Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() -->Line_14 $$ return FileVisitResult.CONTINUE[ CD ]
Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() -->Line_18 $$ if (pathMatcher.matches(filePath)) [ FD ]
Line_18 $$ if (pathMatcher.matches(filePath)) -->Line_19 $$ return FileVisitResult.CONTINUE[ CD ]
Line_2 $$ protected List<String> scanForFiles(String baseDir, final List<PathMatcher> excludeDirPathMatchers, final List<PathMatcher> excludeFilePathMatchers, final List<PathMatcher> includeFilePathMatchers) throws Exception -->Line_34 $$ return fileNames[ CD ]
Line_4 $$ Files.walkFileTree(Paths.get(baseDir), new SimpleFileVisitor<Path>() -->Line_23 $$ if (!pathMatcher.matches(filePath)) [ FD ]
