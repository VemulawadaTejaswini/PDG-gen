Line_2 $$ protected long getSpaceUsedByShard(Path path) throws IOException -->Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() [ FD ]
Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() -->Line_7 $$ return FileVisitResult.CONTINUE[ CD ]
Line_2 $$ protected long getSpaceUsedByShard(Path path) throws IOException -->Line_4 $$ if (Files.exists(path)) [ CD ]
Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() -->Line_10 $$ if (attrs.isRegularFile()) [ FD ]
Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() -->Line_19 $$ return FileVisitResult.CONTINUE[ CD ]
Line_2 $$ protected long getSpaceUsedByShard(Path path) throws IOException -->Line_23 $$ return spaceUsedByShard[0][ CD ]
Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() -->Line_13 $$ return FileVisitResult.CONTINUE[ CD ]
Line_10 $$ if (attrs.isRegularFile()) -->Line_11 $$ spaceUsedByShard[0] += attrs.size()[ CD ]
Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() -->Line_10 $$ if (attrs.isRegularFile()) [ CD ]
Line_2 $$ protected long getSpaceUsedByShard(Path path) throws IOException -->Line_4 $$ if (Files.exists(path)) [ FD ]
Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() -->Line_11 $$ spaceUsedByShard[0] += attrs.size()[ FD ]
Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() -->Line_16 $$ return FileVisitResult.CONTINUE[ CD ]
Line_2 $$ protected long getSpaceUsedByShard(Path path) throws IOException -->Line_3 $$ final long[] spaceUsedByShard = new long[] [ CD ]
Line_4 $$ if (Files.exists(path)) -->Line_5 $$ Files.walkFileTree(path, new FileVisitor<Path>() [ CD ]
