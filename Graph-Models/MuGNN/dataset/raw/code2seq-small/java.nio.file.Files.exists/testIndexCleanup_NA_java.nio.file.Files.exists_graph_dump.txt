Line_27 $$ SingleNodeDisruption disruption = new BlockClusterStateProcessing(node_3, getRandom())-->Line_35 $$ disruption.startDisrupting()[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_3 $$ final String masterNode = internalCluster().startNode(Settings.builder().put("node.data", false))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_42 $$ clusterHealth = client().admin().cluster().prepareHealth().setWaitForRelocatingShards(0).get()[ CD ]
Line_5 $$ final String node_2 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_46 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_47 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(true))[ CD ]
Line_5 $$ final String node_2 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_12 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_23 $$ assertThat(Files.exists(shardDirectory(node_3, "test", 0)), equalTo(false))[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_34 $$ beginRelocationLatch.await()[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_49 $$ assertThat(Files.exists(indexDirectory(node_3, "test")), equalTo(true))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_13 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(true))[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_38 $$ disruption.stopDisrupting()[ CD ]
Line_5 $$ final String node_2 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_47 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(true))[ FD ]
Line_4 $$ final String node_1 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_44 $$ assertThat(waitForShardDeletion(node_1, "test", 0), equalTo(false))[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_20 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(true))[ CD ]
Line_27 $$ SingleNodeDisruption disruption = new BlockClusterStateProcessing(node_3, getRandom())-->Line_28 $$ internalCluster().setDisruptionScheme(disruption)[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_4 $$ final String node_1 = internalCluster().startNode(Settings.builder().put("node.master", false))[ CD ]
Line_27 $$ SingleNodeDisruption disruption = new BlockClusterStateProcessing(node_3, getRandom())-->Line_38 $$ disruption.stopDisrupting()[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_15 $$ final String node_3 = internalCluster().startNode(Settings.builder().put("node.master", false))[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_27 $$ SingleNodeDisruption disruption = new BlockClusterStateProcessing(node_3, getRandom())[ CD ]
Line_4 $$ final String node_1 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_10 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ FD ]
Line_15 $$ final String node_3 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_23 $$ assertThat(Files.exists(shardDirectory(node_3, "test", 0)), equalTo(false))[ FD ]
Line_15 $$ final String node_3 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_24 $$ assertThat(Files.exists(indexDirectory(node_3, "test")), equalTo(false))[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_26 $$ if (randomBoolean()) [ CD ]
Line_17 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForNodes("4").setWaitForRelocatingShards(0).get()-->Line_42 $$ clusterHealth = client().admin().cluster().prepareHealth().setWaitForRelocatingShards(0).get()[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_8 $$ ensureGreen("test")[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_7 $$ assertAcked(prepareCreate("test").setSettings(Settings.builder().put(indexSettings()).put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1).put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 1)))[ CD ]
Line_5 $$ final String node_2 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_21 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_45 $$ assertThat(waitForIndexDeletion(node_1, "test"), equalTo(false))[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_33 $$ internalCluster().client().admin().cluster().prepareReroute().add(new MoveAllocationCommand(new ShardId("test", 0), node_1, node_3)).get()[ CD ]
Line_17 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForNodes("4").setWaitForRelocatingShards(0).get()-->Line_18 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_24 $$ assertThat(Files.exists(indexDirectory(node_3, "test")), equalTo(false))[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_32 $$ transportServiceNode3.addTracer(new ReclocationStartEndTracer(logger, beginRelocationLatch, endRelocationLatch))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_5 $$ final String node_2 = internalCluster().startNode(Settings.builder().put("node.master", false))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_11 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(true))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_43 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_30 $$ CountDownLatch beginRelocationLatch = new CountDownLatch(1)[ CD ]
Line_4 $$ final String node_1 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_11 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(true))[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_48 $$ assertThat(Files.exists(shardDirectory(node_3, "test", 0)), equalTo(true))[ CD ]
Line_15 $$ final String node_3 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_49 $$ assertThat(Files.exists(indexDirectory(node_3, "test")), equalTo(true))[ FD ]
Line_42 $$ clusterHealth = client().admin().cluster().prepareHealth().setWaitForRelocatingShards(0).get()-->Line_43 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ FD ]
Line_26 $$ if (randomBoolean()) -->Line_31 $$ CountDownLatch endRelocationLatch = new CountDownLatch(1)[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_17 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForNodes("4").setWaitForRelocatingShards(0).get()[ CD ]
Line_31 $$ CountDownLatch endRelocationLatch = new CountDownLatch(1)-->Line_36 $$ endRelocationLatch.await()[ FD ]
Line_15 $$ final String node_3 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_48 $$ assertThat(Files.exists(shardDirectory(node_3, "test", 0)), equalTo(true))[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_46 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(true))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_44 $$ assertThat(waitForShardDeletion(node_1, "test", 0), equalTo(false))[ CD ]
Line_4 $$ final String node_1 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_20 $$ assertThat(Files.exists(indexDirectory(node_1, "test")), equalTo(true))[ FD ]
Line_15 $$ final String node_3 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_29 $$ MockTransportService transportServiceNode3 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_3)[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_22 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(true))[ CD ]
Line_29 $$ MockTransportService transportServiceNode3 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_3)-->Line_32 $$ transportServiceNode3.addTracer(new ReclocationStartEndTracer(logger, beginRelocationLatch, endRelocationLatch))[ FD ]
Line_26 $$ if (randomBoolean()) -->Line_40 $$ internalCluster().client().admin().cluster().prepareReroute().add(new MoveAllocationCommand(new ShardId("test", 0), node_1, node_3)).get()[ CD ]
Line_4 $$ final String node_1 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_45 $$ assertThat(waitForIndexDeletion(node_1, "test"), equalTo(false))[ FD ]
Line_5 $$ final String node_2 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_13 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(true))[ FD ]
Line_30 $$ CountDownLatch beginRelocationLatch = new CountDownLatch(1)-->Line_34 $$ beginRelocationLatch.await()[ FD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_18 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_12 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(true))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_21 $$ assertThat(Files.exists(shardDirectory(node_2, "test", 0)), equalTo(true))[ CD ]
Line_5 $$ final String node_2 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_22 $$ assertThat(Files.exists(indexDirectory(node_2, "test")), equalTo(true))[ FD ]
Line_17 $$ ClusterHealthResponse clusterHealth = client().admin().cluster().prepareHealth().setWaitForNodes("4").setWaitForRelocatingShards(0).get()-->Line_43 $$ assertThat(clusterHealth.isTimedOut(), equalTo(false))[ FD ]
Line_26 $$ if (randomBoolean()) -->Line_29 $$ MockTransportService transportServiceNode3 = (MockTransportService) internalCluster().getInstance(TransportService.class, node_3)[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_19 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ CD ]
Line_2 $$ public void testIndexCleanup() throws Exception -->Line_10 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_36 $$ endRelocationLatch.await()[ CD ]
Line_4 $$ final String node_1 = internalCluster().startNode(Settings.builder().put("node.master", false))-->Line_19 $$ assertThat(Files.exists(shardDirectory(node_1, "test", 0)), equalTo(true))[ FD ]
Line_26 $$ if (randomBoolean()) -->Line_35 $$ disruption.startDisrupting()[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_28 $$ internalCluster().setDisruptionScheme(disruption)[ CD ]
Line_26 $$ if (randomBoolean()) -->Line_37 $$ sleep(50)[ CD ]
