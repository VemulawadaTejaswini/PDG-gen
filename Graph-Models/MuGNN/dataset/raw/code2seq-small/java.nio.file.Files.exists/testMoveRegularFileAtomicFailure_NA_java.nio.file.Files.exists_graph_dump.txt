Line_2 $$ public void testMoveRegularFileAtomicFailure() throws IOException -->Line_6 $$ createFile(regularFromFilePath)[ CD ]
Line_2 $$ public void testMoveRegularFileAtomicFailure() throws IOException -->Line_18 $$ Assert.assertTrue(Files.exists(regularToFilePath))[ CD ]
Line_4 $$ Path regularToFilePath = Paths.get("RegularToFile")-->Line_18 $$ Assert.assertTrue(Files.exists(regularToFilePath))[ FD ]
Line_7 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_9 $$ if (file.equals(regularFromFilePath.toString())) [ CD ]
Line_2 $$ public void testMoveRegularFileAtomicFailure() throws IOException -->Line_17 $$ Assert.assertTrue(Files.notExists(regularFromFilePath))[ CD ]
Line_2 $$ public void testMoveRegularFileAtomicFailure() throws IOException -->Line_3 $$ final Path regularFromFilePath = Paths.get("RegularFromFile")[ CD ]
Line_2 $$ public void testMoveRegularFileAtomicFailure() throws IOException -->Line_4 $$ Path regularToFilePath = Paths.get("RegularToFile")[ CD ]
Line_4 $$ Path regularToFilePath = Paths.get("RegularToFile")-->Line_15 $$ FileHelperUtil.move(regularFromFilePath, regularToFilePath)[ FD ]
Line_2 $$ public void testMoveRegularFileAtomicFailure() throws IOException -->Line_5 $$ final AtomicMoveNotSupportedException atomicMoveNotSupportedException = new AtomicMoveNotSupportedException(regularFromFilePath.toString(), regularToFilePath.toString(), "Atomic move not supported")[ CD ]
Line_9 $$ if (file.equals(regularFromFilePath.toString())) -->Line_10 $$ ReflectionUtil.throwException(atomicMoveNotSupportedException)[ CD ]
Line_7 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_9 $$ if (file.equals(regularFromFilePath.toString())) [ FD ]
Line_3 $$ final Path regularFromFilePath = Paths.get("RegularFromFile")-->Line_9 $$ if (file.equals(regularFromFilePath.toString())) [ FD ]
Line_7 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_14 $$ swappableSecurityManager.install()[ FD ]
Line_3 $$ final Path regularFromFilePath = Paths.get("RegularFromFile")-->Line_15 $$ FileHelperUtil.move(regularFromFilePath, regularToFilePath)[ FD ]
Line_3 $$ final Path regularFromFilePath = Paths.get("RegularFromFile")-->Line_6 $$ createFile(regularFromFilePath)[ FD ]
Line_4 $$ Path regularToFilePath = Paths.get("RegularToFile")-->Line_19 $$ Files.delete(regularToFilePath)[ FD ]
Line_4 $$ Path regularToFilePath = Paths.get("RegularToFile")-->Line_5 $$ final AtomicMoveNotSupportedException atomicMoveNotSupportedException = new AtomicMoveNotSupportedException(regularFromFilePath.toString(), regularToFilePath.toString(), "Atomic move not supported")[ FD ]
Line_2 $$ public void testMoveRegularFileAtomicFailure() throws IOException -->Line_19 $$ Files.delete(regularToFilePath)[ CD ]
Line_5 $$ final AtomicMoveNotSupportedException atomicMoveNotSupportedException = new AtomicMoveNotSupportedException(regularFromFilePath.toString(), regularToFilePath.toString(), "Atomic move not supported")-->Line_10 $$ ReflectionUtil.throwException(atomicMoveNotSupportedException)[ FD ]
Line_3 $$ final Path regularFromFilePath = Paths.get("RegularFromFile")-->Line_5 $$ final AtomicMoveNotSupportedException atomicMoveNotSupportedException = new AtomicMoveNotSupportedException(regularFromFilePath.toString(), regularToFilePath.toString(), "Atomic move not supported")[ FD ]
Line_3 $$ final Path regularFromFilePath = Paths.get("RegularFromFile")-->Line_17 $$ Assert.assertTrue(Files.notExists(regularFromFilePath))[ FD ]
