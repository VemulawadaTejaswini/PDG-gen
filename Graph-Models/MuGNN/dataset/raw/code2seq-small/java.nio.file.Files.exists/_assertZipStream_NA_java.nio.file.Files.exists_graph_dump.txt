Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())[ FD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_14 $$ Assert.assertEquals("File size mismatch", Files.size(expectedFile), BigEndianCodec.getLong(zipEntry.getExtra(), 8))[ CD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_11 $$ Assert.assertTrue("Zip entry file " + expectedFile + " does not exist", Files.exists(expectedFile))[ CD ]
Line_19 $$ Files.walkFileTree(expectedRootFolder, new SimpleFileVisitor<Path>() -->Line_21 $$ Assert.assertTrue("Miss file " + file + " from zip stream", files.contains(file))[ FD ]
Line_2 $$ private void _assertZipStream(Path expectedRootFolder, InputStream inputStream) throws IOException -->Line_19 $$ Files.walkFileTree(expectedRootFolder, new SimpleFileVisitor<Path>() [ CD ]
Line_5 $$ ZipEntry zipEntry = null-->Line_13 $$ Assert.assertEquals("Last modified time mismatch", fileTime.toMillis(), BigEndianCodec.getLong(zipEntry.getExtra(), 0))[ FD ]
Line_2 $$ private void _assertZipStream(Path expectedRootFolder, InputStream inputStream) throws IOException -->Line_3 $$ final List<Path> files = new ArrayList()[ CD ]
Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())-->Line_11 $$ Assert.assertTrue("Zip entry file " + expectedFile + " does not exist", Files.exists(expectedFile))[ FD ]
Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())-->Line_16 $$ files.add(expectedFile)[ FD ]
Line_5 $$ ZipEntry zipEntry = null-->Line_7 $$ if (zipEntry.isDirectory()) [ FD ]
Line_12 $$ FileTime fileTime = Files.getLastModifiedTime(expectedFile)-->Line_13 $$ Assert.assertEquals("Last modified time mismatch", fileTime.toMillis(), BigEndianCodec.getLong(zipEntry.getExtra(), 0))[ FD ]
Line_5 $$ ZipEntry zipEntry = null-->Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())[ FD ]
Line_4 $$ try (ZipInputStream zipInputStream = new ZipInputStream(inputStream)) -->Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) [ FD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_15 $$ Assert.assertArrayEquals("File content mismatch", Files.readAllBytes(expectedFile), _readInputStream(zipInputStream))[ CD ]
Line_4 $$ try (ZipInputStream zipInputStream = new ZipInputStream(inputStream)) -->Line_15 $$ Assert.assertArrayEquals("File content mismatch", Files.readAllBytes(expectedFile), _readInputStream(zipInputStream))[ FD ]
Line_19 $$ Files.walkFileTree(expectedRootFolder, new SimpleFileVisitor<Path>() -->Line_21 $$ Assert.assertTrue("Miss file " + file + " from zip stream", files.contains(file))[ CD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_12 $$ FileTime fileTime = Files.getLastModifiedTime(expectedFile)[ CD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_14 $$ Assert.assertEquals("File size mismatch", Files.size(expectedFile), BigEndianCodec.getLong(zipEntry.getExtra(), 8))[ FD ]
Line_3 $$ final List<Path> files = new ArrayList()-->Line_21 $$ Assert.assertTrue("Miss file " + file + " from zip stream", files.contains(file))[ FD ]
Line_5 $$ ZipEntry zipEntry = null-->Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) [ FD ]
Line_2 $$ private void _assertZipStream(Path expectedRootFolder, InputStream inputStream) throws IOException -->Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())[ FD ]
Line_2 $$ private void _assertZipStream(Path expectedRootFolder, InputStream inputStream) throws IOException -->Line_19 $$ Files.walkFileTree(expectedRootFolder, new SimpleFileVisitor<Path>() [ FD ]
Line_19 $$ Files.walkFileTree(expectedRootFolder, new SimpleFileVisitor<Path>() -->Line_22 $$ return FileVisitResult.CONTINUE[ CD ]
Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())-->Line_12 $$ FileTime fileTime = Files.getLastModifiedTime(expectedFile)[ FD ]
Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())-->Line_14 $$ Assert.assertEquals("File size mismatch", Files.size(expectedFile), BigEndianCodec.getLong(zipEntry.getExtra(), 8))[ FD ]
Line_3 $$ final List<Path> files = new ArrayList()-->Line_16 $$ files.add(expectedFile)[ FD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_13 $$ Assert.assertEquals("Last modified time mismatch", fileTime.toMillis(), BigEndianCodec.getLong(zipEntry.getExtra(), 0))[ FD ]
Line_5 $$ ZipEntry zipEntry = null-->Line_14 $$ Assert.assertEquals("File size mismatch", Files.size(expectedFile), BigEndianCodec.getLong(zipEntry.getExtra(), 8))[ FD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_13 $$ Assert.assertEquals("Last modified time mismatch", fileTime.toMillis(), BigEndianCodec.getLong(zipEntry.getExtra(), 0))[ CD ]
Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())-->Line_15 $$ Assert.assertArrayEquals("File content mismatch", Files.readAllBytes(expectedFile), _readInputStream(zipInputStream))[ FD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_7 $$ if (zipEntry.isDirectory()) [ CD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_7 $$ if (zipEntry.isDirectory()) [ FD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_10 $$ Path expectedFile = expectedRootFolder.resolve(zipEntry.getName())[ CD ]
Line_6 $$ while ((zipEntry = zipInputStream.getNextEntry()) != null) -->Line_16 $$ files.add(expectedFile)[ CD ]
