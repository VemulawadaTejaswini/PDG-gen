Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_6 $$ if (progress == null) [ FD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_6 $$ if (progress == null) [ CD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_12 $$ timestamp = Files.getLastModifiedTime(dest).toMillis()[ FD ]
Line_11 $$ if (useTimestamp && Files.exists(dest)) -->Line_13 $$ hasTimestamp = true[ CD ]
Line_10 $$ boolean hasTimestamp = false-->Line_13 $$ hasTimestamp = true[ FD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_15 $$ GetThread getThread = new GetThread(source, dest, hasTimestamp, timestamp, progress)[ CD ]
Line_15 $$ GetThread getThread = new GetThread(source, dest, hasTimestamp, timestamp, progress)-->Line_18 $$ getThread.start()[ FD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_28 $$ return getThread.wasSuccessful()[ CD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_10 $$ boolean hasTimestamp = false[ CD ]
Line_15 $$ GetThread getThread = new GetThread(source, dest, hasTimestamp, timestamp, progress)-->Line_17 $$ getThread.setDaemon(true)[ FD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_3 $$ if (Files.exists(dest) && skipExisting) [ FD ]
Line_15 $$ GetThread getThread = new GetThread(source, dest, hasTimestamp, timestamp, progress)-->Line_19 $$ getThread.join(timeout.millis())[ FD ]
Line_11 $$ if (useTimestamp && Files.exists(dest)) -->Line_12 $$ timestamp = Files.getLastModifiedTime(dest).toMillis()[ CD ]
Line_3 $$ if (Files.exists(dest) && skipExisting) -->Line_4 $$ return true[ CD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_9 $$ long timestamp = 0[ CD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_19 $$ getThread.join(timeout.millis())[ FD ]
Line_15 $$ GetThread getThread = new GetThread(source, dest, hasTimestamp, timestamp, progress)-->Line_20 $$ if (getThread.isAlive()) [ FD ]
Line_9 $$ long timestamp = 0-->Line_12 $$ timestamp = Files.getLastModifiedTime(dest).toMillis()[ FD ]
Line_15 $$ GetThread getThread = new GetThread(source, dest, hasTimestamp, timestamp, progress)-->Line_28 $$ return getThread.wasSuccessful()[ FD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_3 $$ if (Files.exists(dest) && skipExisting) [ CD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_11 $$ if (useTimestamp && Files.exists(dest)) [ CD ]
Line_2 $$ public boolean download(URL source, Path dest, @Nullable DownloadProgress progress, TimeValue timeout) throws Exception -->Line_11 $$ if (useTimestamp && Files.exists(dest)) [ FD ]
Line_15 $$ GetThread getThread = new GetThread(source, dest, hasTimestamp, timestamp, progress)-->Line_26 $$ getThread.closeStreams()[ FD ]
