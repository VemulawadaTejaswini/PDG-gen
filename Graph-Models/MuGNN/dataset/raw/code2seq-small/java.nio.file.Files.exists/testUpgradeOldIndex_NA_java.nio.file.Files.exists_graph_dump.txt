Line_10 $$ for (Path indexFile : indexes.subList(0, scaledRandomIntBetween(1, indexes.size() / 2))) -->Line_14 $$ try (InputStream stream = Files.newInputStream(indexFile)) [ FD ]
Line_36 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_54 $$ try (Searcher searcher = engine.acquireSearcher("test")) [ FD ]
Line_52 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_54 $$ try (Searcher searcher = engine.acquireSearcher("test")) [ FD ]
Line_42 $$ numDocs = searcher.reader().numDocs()-->Line_67 $$ TopDocs topDocs = searcher.searcher().search(new MatchAllDocsQuery(), randomIntBetween(numDocs, numDocs + numExtraDocs))[ FD ]
Line_36 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_37 $$ try (Searcher searcher = engine.acquireSearcher("test")) [ FD ]
Line_34 $$ int numDocs = -1-->Line_42 $$ numDocs = searcher.reader().numDocs()[ FD ]
Line_34 $$ int numDocs = -1-->Line_53 $$ if (numDocs == -1) [ FD ]
Line_12 $$ Path unzipDir = createTempDir()-->Line_13 $$ Path unzipDataDir = unzipDir.resolve("data")[ FD ]
Line_23 $$ Path translog = list[0].resolve("nodes/0/indices/" + indexName).resolve("0").resolve("translog")-->Line_36 $$ try (InternalEngine engine = createEngine(store, translog)) [ FD ]
Line_59 $$ for (int i = 0; i < numExtraDocs; i++) -->Line_61 $$ Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime())[ CD ]
Line_38 $$ if (i > 0) -->Line_39 $$ assertEquals(numDocs, searcher.reader().numDocs())[ CD ]
Line_59 $$ for (int i = 0; i < numExtraDocs; i++) -->Line_61 $$ Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime())[ FD ]
Line_34 $$ int numDocs = -1-->Line_55 $$ numDocs = searcher.reader().numDocs()[ FD ]
Line_37 $$ try (Searcher searcher = engine.acquireSearcher("test")) -->Line_41 $$ TopDocs search = searcher.searcher().search(new MatchAllDocsQuery(), 1)[ FD ]
Line_35 $$ for (int i = 0; i < iters; i++) -->Line_59 $$ for (int i = 0; i < numExtraDocs; i++) [ FD ]
Line_59 $$ for (int i = 0; i < numExtraDocs; i++) -->Line_60 $$ ParsedDocument doc = testParsedDocument("extra" + Integer.toString(i), "extra" + Integer.toString(i), "test", null, -1, -1, testDocument(), new BytesArray("[ FD ]
Line_34 $$ int numDocs = -1-->Line_67 $$ TopDocs topDocs = searcher.searcher().search(new MatchAllDocsQuery(), randomIntBetween(numDocs, numDocs + numExtraDocs))[ FD ]
Line_42 $$ numDocs = searcher.reader().numDocs()-->Line_39 $$ assertEquals(numDocs, searcher.reader().numDocs())[ FD ]
Line_37 $$ try (Searcher searcher = engine.acquireSearcher("test")) -->Line_67 $$ TopDocs topDocs = searcher.searcher().search(new MatchAllDocsQuery(), randomIntBetween(numDocs, numDocs + numExtraDocs))[ FD ]
Line_23 $$ Path translog = list[0].resolve("nodes/0/indices/" + indexName).resolve("0").resolve("translog")-->Line_25 $$ assertTrue("[" + indexFile + "] missing translog dir: " + translog.toString(), Files.exists(translog))[ FD ]
Line_4 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(getBwcIndicesPath(), "index-*.zip")) -->Line_15 $$ TestUtil.unzip(stream, unzipDir)[ FD ]
Line_33 $$ final int iters = randomIntBetween(0, 2)-->Line_35 $$ for (int i = 0; i < iters; i++) [ FD ]
Line_35 $$ for (int i = 0; i < iters; i++) -->Line_38 $$ if (i > 0) [ FD ]
Line_37 $$ try (Searcher searcher = engine.acquireSearcher("test")) -->Line_55 $$ numDocs = searcher.reader().numDocs()[ FD ]
Line_59 $$ for (int i = 0; i < numExtraDocs; i++) -->Line_63 $$ assertThat(firstIndexRequest.version(), equalTo(1l))[ CD ]
Line_54 $$ try (Searcher searcher = engine.acquireSearcher("test")) -->Line_55 $$ numDocs = searcher.reader().numDocs()[ FD ]
Line_12 $$ Path unzipDir = createTempDir()-->Line_15 $$ TestUtil.unzip(stream, unzipDir)[ FD ]
Line_31 $$ Directory directory = newFSDirectory(src.resolve("0").resolve("index"))-->Line_71 $$ IOUtils.close(store, directory)[ FD ]
Line_31 $$ Directory directory = newFSDirectory(src.resolve("0").resolve("index"))-->Line_32 $$ Store store = createStore(directory)[ FD ]
Line_45 $$ CommitStats commitStats = engine.commitStats()-->Line_46 $$ Map<String, String> userData = commitStats.getUserData()[ FD ]
Line_36 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_65 $$ engine.refresh("test")[ FD ]
Line_11 $$ final String indexName = indexFile.getFileName().toString().replace(".zip", "").toLowerCase(Locale.ROOT)-->Line_30 $$ logger.debug("upgrading index [ FD ]
Line_52 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_65 $$ engine.refresh("test")[ FD ]
Line_34 $$ int numDocs = -1-->Line_39 $$ assertEquals(numDocs, searcher.reader().numDocs())[ FD ]
Line_36 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_62 $$ engine.index(firstIndexRequest)[ FD ]
Line_59 $$ for (int i = 0; i < numExtraDocs; i++) -->Line_60 $$ ParsedDocument doc = testParsedDocument("extra" + Integer.toString(i), "extra" + Integer.toString(i), "test", null, -1, -1, testDocument(), new BytesArray("[ CD ]
Line_61 $$ Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime())-->Line_63 $$ assertThat(firstIndexRequest.version(), equalTo(1l))[ FD ]
Line_46 $$ Map<String, String> userData = commitStats.getUserData()-->Line_49 $$ assertFalse("userdata contains legacy marker", userData.containsKey("translog_id"))[ FD ]
Line_36 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_66 $$ try (Engine.Searcher searcher = engine.acquireSearcher("test")) [ FD ]
Line_23 $$ Path translog = list[0].resolve("nodes/0/indices/" + indexName).resolve("0").resolve("translog")-->Line_52 $$ try (InternalEngine engine = createEngine(store, translog)) [ FD ]
Line_18 $$ Path[] list = filterExtraFSFiles(FileSystemUtils.files(unzipDataDir))-->Line_20 $$ throw new IllegalStateException("Backwards index must contain exactly one cluster but was " + list.length + " " + Arrays.toString(list))[ FD ]
Line_37 $$ try (Searcher searcher = engine.acquireSearcher("test")) -->Line_39 $$ assertEquals(numDocs, searcher.reader().numDocs())[ FD ]
Line_35 $$ for (int i = 0; i < iters; i++) -->Line_60 $$ ParsedDocument doc = testParsedDocument("extra" + Integer.toString(i), "extra" + Integer.toString(i), "test", null, -1, -1, testDocument(), new BytesArray("[ FD ]
Line_10 $$ for (Path indexFile : indexes.subList(0, scaledRandomIntBetween(1, indexes.size() / 2))) -->Line_11 $$ final String indexName = indexFile.getFileName().toString().replace(".zip", "").toLowerCase(Locale.ROOT)[ FD ]
Line_32 $$ Store store = createStore(directory)-->Line_52 $$ try (InternalEngine engine = createEngine(store, translog)) [ FD ]
Line_3 $$ List<Path> indexes = new ArrayList()-->Line_10 $$ for (Path indexFile : indexes.subList(0, scaledRandomIntBetween(1, indexes.size() / 2))) [ FD ]
Line_2 $$ public void testUpgradeOldIndex() throws IOException -->Line_3 $$ List<Path> indexes = new ArrayList()[ CD ]
Line_2 $$ public void testUpgradeOldIndex() throws IOException -->Line_9 $$ Collections.shuffle(indexes, random())[ CD ]
Line_23 $$ Path translog = list[0].resolve("nodes/0/indices/" + indexName).resolve("0").resolve("translog")-->Line_26 $$ Path[] tlogFiles = filterExtraFSFiles(FileSystemUtils.files(translog))[ FD ]
Line_13 $$ Path unzipDataDir = unzipDir.resolve("data")-->Line_17 $$ assertTrue(Files.exists(unzipDataDir))[ FD ]
Line_46 $$ Map<String, String> userData = commitStats.getUserData()-->Line_47 $$ assertTrue("userdata dosn't contain uuid", userData.containsKey(Translog.TRANSLOG_UUID_KEY))[ FD ]
Line_42 $$ numDocs = searcher.reader().numDocs()-->Line_55 $$ numDocs = searcher.reader().numDocs()[ FD ]
Line_52 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_62 $$ engine.index(firstIndexRequest)[ FD ]
Line_32 $$ Store store = createStore(directory)-->Line_71 $$ IOUtils.close(store, directory)[ FD ]
Line_5 $$ for (Path path : stream) -->Line_6 $$ indexes.add(path)[ FD ]
Line_22 $$ Path src = list[0].resolve("nodes/0/indices/" + indexName)-->Line_31 $$ Directory directory = newFSDirectory(src.resolve("0").resolve("index"))[ FD ]
Line_35 $$ for (int i = 0; i < iters; i++) -->Line_61 $$ Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime())[ FD ]
Line_29 $$ final long size = Files.size(tlogFiles[0])-->Line_30 $$ logger.debug("upgrading index [ FD ]
Line_61 $$ Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime())-->Line_62 $$ engine.index(firstIndexRequest)[ FD ]
Line_26 $$ Path[] tlogFiles = filterExtraFSFiles(FileSystemUtils.files(translog))-->Line_27 $$ assertEquals(Arrays.toString(tlogFiles), tlogFiles.length, 2)[ FD ]
Line_3 $$ List<Path> indexes = new ArrayList()-->Line_6 $$ indexes.add(path)[ FD ]
Line_36 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_45 $$ CommitStats commitStats = engine.commitStats()[ FD ]
Line_13 $$ Path unzipDataDir = unzipDir.resolve("data")-->Line_18 $$ Path[] list = filterExtraFSFiles(FileSystemUtils.files(unzipDataDir))[ FD ]
Line_22 $$ Path src = list[0].resolve("nodes/0/indices/" + indexName)-->Line_24 $$ assertTrue("[" + indexFile + "] missing index dir: " + src.toString(), Files.exists(src))[ FD ]
Line_46 $$ Map<String, String> userData = commitStats.getUserData()-->Line_48 $$ assertTrue("userdata doesn't contain generation key", userData.containsKey(Translog.TRANSLOG_GENERATION_KEY))[ FD ]
Line_3 $$ List<Path> indexes = new ArrayList()-->Line_9 $$ Collections.shuffle(indexes, random())[ FD ]
Line_54 $$ try (Searcher searcher = engine.acquireSearcher("test")) -->Line_67 $$ TopDocs topDocs = searcher.searcher().search(new MatchAllDocsQuery(), randomIntBetween(numDocs, numDocs + numExtraDocs))[ FD ]
Line_59 $$ for (int i = 0; i < numExtraDocs; i++) -->Line_62 $$ engine.index(firstIndexRequest)[ CD ]
Line_55 $$ numDocs = searcher.reader().numDocs()-->Line_67 $$ TopDocs topDocs = searcher.searcher().search(new MatchAllDocsQuery(), randomIntBetween(numDocs, numDocs + numExtraDocs))[ FD ]
Line_42 $$ numDocs = searcher.reader().numDocs()-->Line_53 $$ if (numDocs == -1) [ FD ]
Line_37 $$ try (Searcher searcher = engine.acquireSearcher("test")) -->Line_42 $$ numDocs = searcher.reader().numDocs()[ FD ]
Line_32 $$ Store store = createStore(directory)-->Line_36 $$ try (InternalEngine engine = createEngine(store, translog)) [ FD ]
Line_52 $$ try (InternalEngine engine = createEngine(store, translog)) -->Line_66 $$ try (Engine.Searcher searcher = engine.acquireSearcher("test")) [ FD ]
Line_58 $$ final int numExtraDocs = randomIntBetween(1, 10)-->Line_59 $$ for (int i = 0; i < numExtraDocs; i++) [ FD ]
