Line_26 $$ boolean isolated = true-->Line_43 $$ isolated = Boolean.parseBoolean(props.getProperty("isolated", "true"))[ FD ]
Line_4 $$ Properties props = new Properties()-->Line_37 $$ String javaVersionString = props.getProperty("java.version")[ FD ]
Line_28 $$ if (jvm) -->Line_34 $$ if (esVersion.equals(Version.CURRENT) == false) [ CD ]
Line_4 $$ Properties props = new Properties()-->Line_8 $$ String name = props.getProperty("name")[ FD ]
Line_28 $$ if (jvm) -->Line_44 $$ classname = props.getProperty("classname")[ CD ]
Line_4 $$ Properties props = new Properties()-->Line_43 $$ isolated = Boolean.parseBoolean(props.getProperty("isolated", "true"))[ FD ]
Line_27 $$ String classname = "NA"-->Line_44 $$ classname = props.getProperty("classname")[ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_14 $$ if (description == null) [ CD ]
Line_33 $$ Version esVersion = Version.fromString(esVersionString)-->Line_34 $$ if (esVersion.equals(Version.CURRENT) == false) [ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_49 $$ if (site) [ CD ]
Line_28 $$ if (jvm) -->Line_45 $$ if (classname == null) [ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_21 $$ boolean jvm = Boolean.parseBoolean(props.getProperty("jvm"))[ CD ]
Line_28 $$ if (jvm) -->Line_33 $$ Version esVersion = Version.fromString(esVersionString)[ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_8 $$ String name = props.getProperty("name")[ CD ]
Line_17 $$ String version = props.getProperty("version")-->Line_18 $$ if (version == null) [ FD ]
Line_5 $$ try (InputStream stream = Files.newInputStream(descriptor)) -->Line_6 $$ props.load(stream)[ FD ]
Line_49 $$ if (site) -->Line_50 $$ if (!Files.exists(dir.resolve("_site"))) [ CD ]
Line_4 $$ Properties props = new Properties()-->Line_13 $$ String description = props.getProperty("description")[ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_12 $$ PluginManager.checkForForbiddenName(name)[ CD ]
Line_28 $$ if (jvm) -->Line_37 $$ String javaVersionString = props.getProperty("java.version")[ CD ]
Line_8 $$ String name = props.getProperty("name")-->Line_9 $$ if (name == null || name.isEmpty()) [ FD ]
Line_37 $$ String javaVersionString = props.getProperty("java.version")-->Line_41 $$ JarHell.checkVersionFormat(javaVersionString)[ FD ]
Line_8 $$ String name = props.getProperty("name")-->Line_42 $$ JarHell.checkJavaVersion(name, javaVersionString)[ FD ]
Line_28 $$ if (jvm) -->Line_38 $$ if (javaVersionString == null) [ CD ]
Line_44 $$ classname = props.getProperty("classname")-->Line_45 $$ if (classname == null) [ FD ]
Line_13 $$ String description = props.getProperty("description")-->Line_14 $$ if (description == null) [ FD ]
Line_37 $$ String javaVersionString = props.getProperty("java.version")-->Line_42 $$ JarHell.checkJavaVersion(name, javaVersionString)[ FD ]
Line_27 $$ String classname = "NA"-->Line_45 $$ if (classname == null) [ FD ]
Line_4 $$ Properties props = new Properties()-->Line_6 $$ props.load(stream)[ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_13 $$ String description = props.getProperty("description")[ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_3 $$ Path descriptor = dir.resolve(ES_PLUGIN_PROPERTIES)[ CD ]
Line_28 $$ if (jvm) -->Line_29 $$ String esVersionString = props.getProperty("elasticsearch.version")[ CD ]
Line_28 $$ if (jvm) -->Line_30 $$ if (esVersionString == null) [ CD ]
Line_4 $$ Properties props = new Properties()-->Line_44 $$ classname = props.getProperty("classname")[ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_9 $$ if (name == null || name.isEmpty()) [ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_17 $$ String version = props.getProperty("version")[ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_18 $$ if (version == null) [ CD ]
Line_28 $$ if (jvm) -->Line_43 $$ isolated = Boolean.parseBoolean(props.getProperty("isolated", "true"))[ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_3 $$ Path descriptor = dir.resolve(ES_PLUGIN_PROPERTIES)[ FD ]
Line_4 $$ Properties props = new Properties()-->Line_29 $$ String esVersionString = props.getProperty("elasticsearch.version")[ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_22 $$ boolean site = Boolean.parseBoolean(props.getProperty("site"))[ CD ]
Line_4 $$ Properties props = new Properties()-->Line_21 $$ boolean jvm = Boolean.parseBoolean(props.getProperty("jvm"))[ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_23 $$ if (jvm == false && site == false) [ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_28 $$ if (jvm) [ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_26 $$ boolean isolated = true[ CD ]
Line_37 $$ String javaVersionString = props.getProperty("java.version")-->Line_38 $$ if (javaVersionString == null) [ FD ]
Line_28 $$ if (jvm) -->Line_41 $$ JarHell.checkVersionFormat(javaVersionString)[ CD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_4 $$ Properties props = new Properties()[ CD ]
Line_8 $$ String name = props.getProperty("name")-->Line_12 $$ PluginManager.checkForForbiddenName(name)[ FD ]
Line_29 $$ String esVersionString = props.getProperty("elasticsearch.version")-->Line_30 $$ if (esVersionString == null) [ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_50 $$ if (!Files.exists(dir.resolve("_site"))) [ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_54 $$ return new PluginInfo(name, description, site, version, jvm, classname, isolated)[ CD ]
Line_4 $$ Properties props = new Properties()-->Line_17 $$ String version = props.getProperty("version")[ FD ]
Line_29 $$ String esVersionString = props.getProperty("elasticsearch.version")-->Line_33 $$ Version esVersion = Version.fromString(esVersionString)[ FD ]
Line_2 $$ public static PluginInfo readFromProperties(Path dir) throws IOException -->Line_27 $$ String classname = "NA"[ CD ]
Line_28 $$ if (jvm) -->Line_42 $$ JarHell.checkJavaVersion(name, javaVersionString)[ CD ]
Line_3 $$ Path descriptor = dir.resolve(ES_PLUGIN_PROPERTIES)-->Line_5 $$ try (InputStream stream = Files.newInputStream(descriptor)) [ FD ]
Line_4 $$ Properties props = new Properties()-->Line_22 $$ boolean site = Boolean.parseBoolean(props.getProperty("site"))[ FD ]
