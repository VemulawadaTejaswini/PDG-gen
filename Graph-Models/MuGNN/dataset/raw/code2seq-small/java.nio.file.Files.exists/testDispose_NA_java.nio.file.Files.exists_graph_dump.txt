Line_2 $$ public void testDispose() throws Exception -->Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")[ CD ]
Line_9 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_10 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
Line_12 $$ Path localFilePath = noticeableFuture.get()-->Line_13 $$ Assert.assertNotNull(localFilePath)[ FD ]
Line_2 $$ public void testDispose() throws Exception -->Line_6 $$ FileServerTestUtil.createFileWithData(tempFilePath)[ CD ]
Line_2 $$ public void testDispose() throws Exception -->Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))[ CD ]
Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()-->Line_25 $$ Assert.assertTrue(logRecords.isEmpty())[ FD ]
Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_14 $$ Assert.assertTrue(Files.notExists(tempFilePath))[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_8 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)[ FD ]
Line_12 $$ Path localFilePath = noticeableFuture.get()-->Line_17 $$ Assert.assertSame(localFilePath, pathMap.get(remoteFilePath))[ FD ]
Line_12 $$ Path localFilePath = noticeableFuture.get()-->Line_19 $$ Assert.assertTrue(Files.notExists(localFilePath))[ FD ]
Line_2 $$ public void testDispose() throws Exception -->Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap[ CD ]
Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_16 $$ Assert.assertEquals(1, pathMap.size())[ FD ]
Line_7 $$ try (CaptureHandler captureHandler = JDKLoggerTestUtil.configureJDKLogger(NettyRepository.class.getName(), Level.OFF)) -->Line_24 $$ List<LogRecord> logRecords = captureHandler.getLogRecords()[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_17 $$ Assert.assertSame(localFilePath, pathMap.get(remoteFilePath))[ FD ]
Line_3 $$ Path remoteFilePath = Paths.get("remoteFile")-->Line_11 $$ _asyncBroker.takeWithResult(remoteFilePath, fileResponse)[ FD ]
Line_8 $$ NoticeableFuture<Path> noticeableFuture = _nettyRepository.getFile(_embeddedChannel, remoteFilePath, null, false)-->Line_12 $$ Path localFilePath = noticeableFuture.get()[ FD ]
Line_9 $$ FileResponse fileResponse = new FileResponse(remoteFilePath, System.currentTimeMillis(), 0, false)-->Line_11 $$ _asyncBroker.takeWithResult(remoteFilePath, fileResponse)[ FD ]
Line_12 $$ Path localFilePath = noticeableFuture.get()-->Line_15 $$ Assert.assertTrue(Files.exists(localFilePath))[ FD ]
Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_6 $$ FileServerTestUtil.createFileWithData(tempFilePath)[ FD ]
Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_17 $$ Assert.assertSame(localFilePath, pathMap.get(remoteFilePath))[ FD ]
Line_5 $$ Map<Path, Path> pathMap = _nettyRepository.pathMap-->Line_20 $$ Assert.assertTrue(pathMap.isEmpty())[ FD ]
Line_4 $$ Path tempFilePath = FileServerTestUtil.createFileWithData(Paths.get("tempFile"))-->Line_10 $$ fileResponse.setLocalFile(tempFilePath)[ FD ]
