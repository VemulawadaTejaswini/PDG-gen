Line_15 $$ Path src = list[0].resolve("nodes/0/indices/" + indexName)-->Line_16 $$ assertTrue("[" + indexFile + "] missing index dir: " + src.toString(), Files.exists(src))[ FD ]
Line_4 $$ Path unzipDataDir = unzipDir.resolve("data")-->Line_10 $$ assertTrue(Files.exists(unzipDataDir))[ FD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_11 $$ Path[] list = FileSystemUtils.files(unzipDataDir)[ CD ]
Line_15 $$ Path src = list[0].resolve("nodes/0/indices/" + indexName)-->Line_19 $$ copyIndex(logger, src, indexName, singleDataPath)[ FD ]
Line_5 $$ String indexName = indexFile.replace(".zip", "").toLowerCase(Locale.ROOT).replace("unsupported-", "index-")-->Line_22 $$ copyIndex(logger, src, indexName, multiDataPath)[ FD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_24 $$ return indexName[ CD ]
Line_6 $$ Path backwardsIndex = getBwcIndicesPath().resolve(indexFile)-->Line_7 $$ try (InputStream stream = Files.newInputStream(backwardsIndex)) [ FD ]
Line_17 $$ if (randomBoolean()) -->Line_19 $$ copyIndex(logger, src, indexName, singleDataPath)[ CD ]
Line_7 $$ try (InputStream stream = Files.newInputStream(backwardsIndex)) -->Line_8 $$ TestUtil.unzip(stream, unzipDir)[ FD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_5 $$ String indexName = indexFile.replace(".zip", "").toLowerCase(Locale.ROOT).replace("unsupported-", "index-")[ CD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_17 $$ if (randomBoolean()) [ CD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_4 $$ Path unzipDataDir = unzipDir.resolve("data")[ CD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_15 $$ Path src = list[0].resolve("nodes/0/indices/" + indexName)[ CD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_6 $$ Path backwardsIndex = getBwcIndicesPath().resolve(indexFile)[ FD ]
Line_3 $$ Path unzipDir = createTempDir()-->Line_8 $$ TestUtil.unzip(stream, unzipDir)[ FD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_5 $$ String indexName = indexFile.replace(".zip", "").toLowerCase(Locale.ROOT).replace("unsupported-", "index-")[ FD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_10 $$ assertTrue(Files.exists(unzipDataDir))[ CD ]
Line_5 $$ String indexName = indexFile.replace(".zip", "").toLowerCase(Locale.ROOT).replace("unsupported-", "index-")-->Line_19 $$ copyIndex(logger, src, indexName, singleDataPath)[ FD ]
Line_15 $$ Path src = list[0].resolve("nodes/0/indices/" + indexName)-->Line_22 $$ copyIndex(logger, src, indexName, multiDataPath)[ FD ]
Line_3 $$ Path unzipDir = createTempDir()-->Line_4 $$ Path unzipDataDir = unzipDir.resolve("data")[ FD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_3 $$ Path unzipDir = createTempDir()[ CD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_6 $$ Path backwardsIndex = getBwcIndicesPath().resolve(indexFile)[ CD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_12 $$ if (list.length != 1) [ CD ]
Line_17 $$ if (randomBoolean()) -->Line_22 $$ copyIndex(logger, src, indexName, multiDataPath)[ CD ]
Line_4 $$ Path unzipDataDir = unzipDir.resolve("data")-->Line_11 $$ Path[] list = FileSystemUtils.files(unzipDataDir)[ FD ]
Line_2 $$ String loadIndex(String indexFile) throws Exception -->Line_16 $$ assertTrue("[" + indexFile + "] missing index dir: " + src.toString(), Files.exists(src))[ CD ]
