Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_12 $$ pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user)[ CD ]
Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)-->Line_8 $$ terminal.println(VERBOSE, "%s", info)[ FD ]
Line_28 $$ Path destPluginBinDirectory = pluginHandle.binDir(environment)-->Line_31 $$ if (Files.exists(destPluginBinDirectory) && !Files.isDirectory(destPluginBinDirectory)) [ FD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_32 $$ tryToDeletePath(terminal, extractLocation)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_6 $$ root = findPluginRoot(root)[ CD ]
Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() -->Line_69 $$ if (attrs.isRegularFile()) [ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_5 $$ unzipPlugin(pluginFile, root)[ CD ]
Line_28 $$ Path destPluginBinDirectory = pluginHandle.binDir(environment)-->Line_38 $$ terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s", sourcePluginBinDirectory, destPluginBinDirectory, ExceptionsHelper.detailedMessage(e))[ FD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_14 $$ if (Files.exists(extractLocation)) [ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_94 $$ terminal.printError("Error copying config directory [%s] to [%s], cleaning up, reason: %s", sourceConfigDirectory, destConfigDirectory, ExceptionsHelper.detailedMessage(e))[ FD ]
Line_72 $$ for (PosixFilePermission posixFilePermission : currentFilePermissions) -->Line_77 $$ newFilePermissions.add(posixFilePermission)[ FD ]
Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() -->Line_82 $$ return FileVisitResult.CONTINUE[ CD ]
Line_27 $$ Path sourcePluginBinDirectory = extractLocation.resolve("bin")-->Line_29 $$ boolean needToCopyBinDirectory = Files.exists(sourcePluginBinDirectory)[ FD ]
Line_28 $$ Path destPluginBinDirectory = pluginHandle.binDir(environment)-->Line_36 $$ copyBinDirectory(sourcePluginBinDirectory, destPluginBinDirectory, pluginHandle.name, terminal)[ FD ]
Line_27 $$ Path sourcePluginBinDirectory = extractLocation.resolve("bin")-->Line_36 $$ copyBinDirectory(sourcePluginBinDirectory, destPluginBinDirectory, pluginHandle.name, terminal)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_90 $$ terminal.println(VERBOSE, "Skipping posix permissions - filestore doesn't support posix permission")[ FD ]
Line_55 $$ PosixFileAttributes parentDirAttributes = Files.getFileAttributeView(destConfigDirectory.getParent(), PosixFileAttributeView.class).readAttributes()-->Line_80 $$ setPosixFileAttributes(file, parentDirAttributes.owner(), parentDirAttributes.group(), newFilePermissions)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_24 $$ FileSystemUtils.copyDirectoryRecursively(root, extractLocation)[ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_12 $$ pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)[ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)[ CD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_15 $$ throw new IOException("plugin directory " + extractLocation.toAbsolutePath() + " already exists. To update the plugin, uninstall it first using 'remove " + pluginHandle.name + "' command")[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_9 $$ if (MODULES.contains(info.getName())) [ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_29 $$ boolean needToCopyBinDirectory = Files.exists(sourcePluginBinDirectory)[ CD ]
Line_20 $$ Path policy = root.resolve(PluginInfo.ES_PLUGIN_POLICY)-->Line_22 $$ PluginSecurity.readPolicy(policy, terminal, environment, batch)[ FD ]
Line_12 $$ pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user)-->Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)[ FD ]
Line_54 $$ if (Environment.getFileStore(destConfigDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) -->Line_55 $$ PosixFileAttributes parentDirAttributes = Files.getFileAttributeView(destConfigDirectory.getParent(), PosixFileAttributeView.class).readAttributes()[ CD ]
Line_20 $$ Path policy = root.resolve(PluginInfo.ES_PLUGIN_POLICY)-->Line_21 $$ if (Files.exists(policy)) [ FD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_48 $$ tryToDeletePath(terminal, extractLocation, destPluginBinDirectory)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_30 $$ if (needToCopyBinDirectory) [ CD ]
Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)-->Line_10 $$ throw new IOException("plugin '" + info.getName() + "' cannot be installed like this, it is a system module")[ FD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_95 $$ tryToDeletePath(terminal, extractLocation, destPluginBinDirectory, destConfigDirectory)[ FD ]
Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() -->Line_80 $$ setPosixFileAttributes(file, parentDirAttributes.owner(), parentDirAttributes.group(), newFilePermissions)[ FD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_92 $$ terminal.println(VERBOSE, "Installed %s into %s", pluginHandle.name, destConfigDirectory.toAbsolutePath())[ FD ]
Line_47 $$ if (Files.exists(destConfigDirectory) && !Files.isDirectory(destConfigDirectory)) -->Line_48 $$ tryToDeletePath(terminal, extractLocation, destPluginBinDirectory)[ CD ]
Line_4 $$ Path root = tmp.resolve(pluginHandle.name)-->Line_18 $$ jarHellCheck(root, info.isIsolated())[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_52 $$ terminal.println(VERBOSE, "Found config, moving to %s", destConfigDirectory.toAbsolutePath())[ FD ]
Line_6 $$ root = findPluginRoot(root)-->Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_39 $$ tryToDeletePath(terminal, extractLocation, pluginHandle.binDir(environment))[ FD ]
Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)-->Line_12 $$ pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_4 $$ Path root = tmp.resolve(pluginHandle.name)[ CD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_47 $$ if (Files.exists(destConfigDirectory) && !Files.isDirectory(destConfigDirectory)) [ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_48 $$ tryToDeletePath(terminal, extractLocation, destPluginBinDirectory)[ FD ]
Line_4 $$ Path root = tmp.resolve(pluginHandle.name)-->Line_24 $$ FileSystemUtils.copyDirectoryRecursively(root, extractLocation)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_27 $$ Path sourcePluginBinDirectory = extractLocation.resolve("bin")[ CD ]
Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() -->Line_69 $$ if (attrs.isRegularFile()) [ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_92 $$ terminal.println(VERBOSE, "Installed %s into %s", pluginHandle.name, destConfigDirectory.toAbsolutePath())[ FD ]
Line_12 $$ pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user)-->Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)[ FD ]
Line_4 $$ Path root = tmp.resolve(pluginHandle.name)-->Line_20 $$ Path policy = root.resolve(PluginInfo.ES_PLUGIN_POLICY)[ FD ]
Line_21 $$ if (Files.exists(policy)) -->Line_22 $$ PluginSecurity.readPolicy(policy, terminal, environment, batch)[ CD ]
Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)-->Line_17 $$ if (info.isJvm()) [ FD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_24 $$ FileSystemUtils.copyDirectoryRecursively(root, extractLocation)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_22 $$ PluginSecurity.readPolicy(policy, terminal, environment, batch)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_25 $$ terminal.println("Installed %s into %s", pluginHandle.name, extractLocation.toAbsolutePath())[ CD ]
Line_27 $$ Path sourcePluginBinDirectory = extractLocation.resolve("bin")-->Line_38 $$ terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s", sourcePluginBinDirectory, destPluginBinDirectory, ExceptionsHelper.detailedMessage(e))[ FD ]
Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)-->Line_9 $$ if (MODULES.contains(info.getName())) [ FD ]
Line_28 $$ Path destPluginBinDirectory = pluginHandle.binDir(environment)-->Line_95 $$ tryToDeletePath(terminal, extractLocation, destPluginBinDirectory, destConfigDirectory)[ FD ]
Line_43 $$ Path sourceConfigDirectory = extractLocation.resolve("config")-->Line_94 $$ terminal.printError("Error copying config directory [%s] to [%s], cleaning up, reason: %s", sourceConfigDirectory, destConfigDirectory, ExceptionsHelper.detailedMessage(e))[ FD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_52 $$ terminal.println(VERBOSE, "Found config, moving to %s", destConfigDirectory.toAbsolutePath())[ FD ]
Line_6 $$ root = findPluginRoot(root)-->Line_18 $$ jarHellCheck(root, info.isIsolated())[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)[ FD ]
Line_43 $$ Path sourceConfigDirectory = extractLocation.resolve("config")-->Line_53 $$ moveFilesWithoutOverwriting(sourceConfigDirectory, destConfigDirectory, ".new")[ FD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_53 $$ moveFilesWithoutOverwriting(sourceConfigDirectory, destConfigDirectory, ".new")[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)[ CD ]
Line_4 $$ Path root = tmp.resolve(pluginHandle.name)-->Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_21 $$ if (Files.exists(policy)) [ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_3 $$ Path tmp = Files.createTempDirectory(environment.tmpFile(), null)[ CD ]
Line_3 $$ Path tmp = Files.createTempDirectory(environment.tmpFile(), null)-->Line_26 $$ tryToDeletePath(terminal, tmp, pluginFile)[ FD ]
Line_4 $$ Path root = tmp.resolve(pluginHandle.name)-->Line_6 $$ root = findPluginRoot(root)[ FD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_55 $$ PosixFileAttributes parentDirAttributes = Files.getFileAttributeView(destConfigDirectory.getParent(), PosixFileAttributeView.class).readAttributes()[ FD ]
Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() -->Line_71 $$ Set<PosixFilePermission> currentFilePermissions = Files.getPosixFilePermissions(file)[ FD ]
Line_56 $$ Set<PosixFilePermission> baseFilePermissions = new HashSet()-->Line_64 $$ baseFilePermissions.add(posixFilePermission)[ FD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_54 $$ if (Environment.getFileStore(destConfigDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) [ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_32 $$ tryToDeletePath(terminal, extractLocation)[ FD ]
Line_69 $$ if (attrs.isRegularFile()) -->Line_80 $$ setPosixFileAttributes(file, parentDirAttributes.owner(), parentDirAttributes.group(), newFilePermissions)[ CD ]
Line_7 $$ PluginInfo info = PluginInfo.readFromProperties(root)-->Line_18 $$ jarHellCheck(root, info.isIsolated())[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_26 $$ tryToDeletePath(terminal, tmp, pluginFile)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_45 $$ boolean needToCopyConfigDirectory = Files.exists(sourceConfigDirectory)[ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_20 $$ Path policy = root.resolve(PluginInfo.ES_PLUGIN_POLICY)[ CD ]
Line_3 $$ Path tmp = Files.createTempDirectory(environment.tmpFile(), null)-->Line_4 $$ Path root = tmp.resolve(pluginHandle.name)[ FD ]
Line_69 $$ if (attrs.isRegularFile()) -->Line_70 $$ Set<PosixFilePermission> newFilePermissions = new HashSet(baseFilePermissions)[ CD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_25 $$ terminal.println("Installed %s into %s", pluginHandle.name, extractLocation.toAbsolutePath())[ FD ]
Line_57 $$ for (PosixFilePermission posixFilePermission : parentDirAttributes.permissions()) -->Line_64 $$ baseFilePermissions.add(posixFilePermission)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_28 $$ Path destPluginBinDirectory = pluginHandle.binDir(environment)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_36 $$ copyBinDirectory(sourcePluginBinDirectory, destPluginBinDirectory, pluginHandle.name, terminal)[ FD ]
Line_55 $$ PosixFileAttributes parentDirAttributes = Files.getFileAttributeView(destConfigDirectory.getParent(), PosixFileAttributeView.class).readAttributes()-->Line_57 $$ for (PosixFilePermission posixFilePermission : parentDirAttributes.permissions()) [ FD ]
Line_46 $$ if (needToCopyConfigDirectory) -->Line_47 $$ if (Files.exists(destConfigDirectory) && !Files.isDirectory(destConfigDirectory)) [ CD ]
Line_12 $$ pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user)-->Line_39 $$ tryToDeletePath(terminal, extractLocation, pluginHandle.binDir(environment))[ FD ]
Line_69 $$ if (attrs.isRegularFile()) -->Line_71 $$ Set<PosixFilePermission> currentFilePermissions = Files.getPosixFilePermissions(file)[ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_26 $$ tryToDeletePath(terminal, tmp, pluginFile)[ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_43 $$ Path sourceConfigDirectory = extractLocation.resolve("config")[ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_25 $$ terminal.println("Installed %s into %s", pluginHandle.name, extractLocation.toAbsolutePath())[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_28 $$ Path destPluginBinDirectory = pluginHandle.binDir(environment)[ CD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_39 $$ tryToDeletePath(terminal, extractLocation, pluginHandle.binDir(environment))[ FD ]
Line_54 $$ if (Environment.getFileStore(destConfigDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) -->Line_90 $$ terminal.println(VERBOSE, "Skipping posix permissions - filestore doesn't support posix permission")[ CD ]
Line_70 $$ Set<PosixFilePermission> newFilePermissions = new HashSet(baseFilePermissions)-->Line_80 $$ setPosixFileAttributes(file, parentDirAttributes.owner(), parentDirAttributes.group(), newFilePermissions)[ FD ]
Line_17 $$ if (info.isJvm()) -->Line_18 $$ jarHellCheck(root, info.isIsolated())[ CD ]
Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() -->Line_85 $$ setPosixFileAttributes(dir, parentDirAttributes.owner(), parentDirAttributes.group(), parentDirAttributes.permissions())[ CD ]
Line_70 $$ Set<PosixFilePermission> newFilePermissions = new HashSet(baseFilePermissions)-->Line_77 $$ newFilePermissions.add(posixFilePermission)[ FD ]
Line_55 $$ PosixFileAttributes parentDirAttributes = Files.getFileAttributeView(destConfigDirectory.getParent(), PosixFileAttributeView.class).readAttributes()-->Line_85 $$ setPosixFileAttributes(dir, parentDirAttributes.owner(), parentDirAttributes.group(), parentDirAttributes.permissions())[ FD ]
Line_43 $$ Path sourceConfigDirectory = extractLocation.resolve("config")-->Line_45 $$ boolean needToCopyConfigDirectory = Files.exists(sourceConfigDirectory)[ FD ]
Line_4 $$ Path root = tmp.resolve(pluginHandle.name)-->Line_5 $$ unzipPlugin(pluginFile, root)[ FD ]
Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() -->Line_85 $$ setPosixFileAttributes(dir, parentDirAttributes.owner(), parentDirAttributes.group(), parentDirAttributes.permissions())[ FD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_27 $$ Path sourcePluginBinDirectory = extractLocation.resolve("bin")[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_5 $$ unzipPlugin(pluginFile, root)[ FD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() [ FD ]
Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() -->Line_86 $$ return FileVisitResult.CONTINUE[ CD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_94 $$ terminal.printError("Error copying config directory [%s] to [%s], cleaning up, reason: %s", sourceConfigDirectory, destConfigDirectory, ExceptionsHelper.detailedMessage(e))[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_14 $$ if (Files.exists(extractLocation)) [ CD ]
Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)-->Line_95 $$ tryToDeletePath(terminal, extractLocation, destPluginBinDirectory, destConfigDirectory)[ FD ]
Line_28 $$ Path destPluginBinDirectory = pluginHandle.binDir(environment)-->Line_48 $$ tryToDeletePath(terminal, extractLocation, destPluginBinDirectory)[ FD ]
Line_6 $$ root = findPluginRoot(root)-->Line_20 $$ Path policy = root.resolve(PluginInfo.ES_PLUGIN_POLICY)[ FD ]
Line_6 $$ root = findPluginRoot(root)-->Line_24 $$ FileSystemUtils.copyDirectoryRecursively(root, extractLocation)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_46 $$ if (needToCopyConfigDirectory) [ CD ]
Line_13 $$ final Path extractLocation = pluginHandle.extractedDir(environment)-->Line_43 $$ Path sourceConfigDirectory = extractLocation.resolve("config")[ FD ]
Line_57 $$ for (PosixFilePermission posixFilePermission : parentDirAttributes.permissions()) -->Line_77 $$ newFilePermissions.add(posixFilePermission)[ FD ]
Line_12 $$ pluginHandle = new PluginHandle(info.getName(), pluginHandle.version, pluginHandle.user)-->Line_28 $$ Path destPluginBinDirectory = pluginHandle.binDir(environment)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_8 $$ terminal.println(VERBOSE, "%s", info)[ FD ]
Line_54 $$ if (Environment.getFileStore(destConfigDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) -->Line_67 $$ Files.walkFileTree(destConfigDirectory, new SimpleFileVisitor<Path>() [ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_44 $$ Path destConfigDirectory = pluginHandle.configDir(environment)[ FD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_95 $$ tryToDeletePath(terminal, extractLocation, destPluginBinDirectory, destConfigDirectory)[ FD ]
Line_31 $$ if (Files.exists(destPluginBinDirectory) && !Files.isDirectory(destPluginBinDirectory)) -->Line_32 $$ tryToDeletePath(terminal, extractLocation)[ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_38 $$ terminal.printError("Error copying bin directory [%s] to [%s], cleaning up, reason: %s", sourcePluginBinDirectory, destPluginBinDirectory, ExceptionsHelper.detailedMessage(e))[ FD ]
Line_54 $$ if (Environment.getFileStore(destConfigDirectory).supportsFileAttributeView(PosixFileAttributeView.class)) -->Line_56 $$ Set<PosixFilePermission> baseFilePermissions = new HashSet()[ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_8 $$ terminal.println(VERBOSE, "%s", info)[ CD ]
Line_30 $$ if (needToCopyBinDirectory) -->Line_31 $$ if (Files.exists(destPluginBinDirectory) && !Files.isDirectory(destPluginBinDirectory)) [ CD ]
Line_2 $$ private void extract(PluginHandle pluginHandle, Terminal terminal, Path pluginFile, boolean batch) throws IOException -->Line_17 $$ if (info.isJvm()) [ CD ]
