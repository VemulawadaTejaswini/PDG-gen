Line_5 $$ Path regularToDirectoryPath = Paths.get("RegularToDirectoryPath")-->Line_23 $$ Assert.assertTrue(Files.exists(regularToDirectoryPath))[ FD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_11 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) [ FD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_55 $$ Files.delete(unmoveableFromDirectoryPath)[ FD ]
Line_5 $$ Path regularToDirectoryPath = Paths.get("RegularToDirectoryPath")-->Line_28 $$ Files.delete(regularToDirectoryPath)[ FD ]
Line_9 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_35 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) [ FD ]
Line_4 $$ Path regularFromFilePath = unmoveableFromDirectoryPath.resolve("RegularFromFile")-->Line_8 $$ createFile(regularFromFilePath)[ FD ]
Line_33 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_38 $$ createFile(newRegularFilePath)[ CD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_6 $$ Path regularToFilePath = regularToDirectoryPath.resolve(unmoveableFromDirectoryPath.relativize(regularFromFilePath))[ FD ]
Line_6 $$ Path regularToFilePath = regularToDirectoryPath.resolve(unmoveableFromDirectoryPath.relativize(regularFromFilePath))-->Line_27 $$ Files.delete(regularToFilePath)[ FD ]
Line_2 $$ public void testMoveUnmoveableDirectoryWithRegularFile() throws IOException -->Line_4 $$ Path regularFromFilePath = unmoveableFromDirectoryPath.resolve("RegularFromFile")[ CD ]
Line_5 $$ Path regularToDirectoryPath = Paths.get("RegularToDirectoryPath")-->Line_6 $$ Path regularToFilePath = regularToDirectoryPath.resolve(unmoveableFromDirectoryPath.relativize(regularFromFilePath))[ FD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_4 $$ Path regularFromFilePath = unmoveableFromDirectoryPath.resolve("RegularFromFile")[ FD ]
Line_33 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_35 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) [ FD ]
Line_5 $$ Path regularToDirectoryPath = Paths.get("RegularToDirectoryPath")-->Line_42 $$ FileHelperUtil.move(unmoveableFromDirectoryPath, regularToDirectoryPath)[ FD ]
Line_7 $$ final Path newRegularFilePath = unmoveableFromDirectoryPath.resolve("NewRegularFile")-->Line_25 $$ Assert.assertTrue(Files.exists(newRegularFilePath))[ FD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_35 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) [ FD ]
Line_2 $$ public void testMoveUnmoveableDirectoryWithRegularFile() throws IOException -->Line_8 $$ createFile(regularFromFilePath)[ CD ]
Line_9 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_11 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) [ FD ]
Line_6 $$ Path regularToFilePath = regularToDirectoryPath.resolve(unmoveableFromDirectoryPath.relativize(regularFromFilePath))-->Line_22 $$ Assert.assertTrue(Files.exists(regularToFilePath))[ FD ]
Line_9 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_41 $$ swappableSecurityManager.install()[ FD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_42 $$ FileHelperUtil.move(unmoveableFromDirectoryPath, regularToDirectoryPath)[ FD ]
Line_7 $$ final Path newRegularFilePath = unmoveableFromDirectoryPath.resolve("NewRegularFile")-->Line_14 $$ createFile(newRegularFilePath)[ FD ]
Line_2 $$ public void testMoveUnmoveableDirectoryWithRegularFile() throws IOException -->Line_7 $$ final Path newRegularFilePath = unmoveableFromDirectoryPath.resolve("NewRegularFile")[ CD ]
Line_5 $$ Path regularToDirectoryPath = Paths.get("RegularToDirectoryPath")-->Line_18 $$ FileHelperUtil.move(unmoveableFromDirectoryPath, regularToDirectoryPath, false)[ FD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_26 $$ Assert.assertTrue(Files.exists(unmoveableFromDirectoryPath))[ FD ]
Line_7 $$ final Path newRegularFilePath = unmoveableFromDirectoryPath.resolve("NewRegularFile")-->Line_29 $$ Files.delete(newRegularFilePath)[ FD ]
Line_2 $$ public void testMoveUnmoveableDirectoryWithRegularFile() throws IOException -->Line_32 $$ createFile(regularFromFilePath)[ CD ]
Line_11 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) -->Line_12 $$ return[ CD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_30 $$ Files.delete(unmoveableFromDirectoryPath)[ FD ]
Line_7 $$ final Path newRegularFilePath = unmoveableFromDirectoryPath.resolve("NewRegularFile")-->Line_52 $$ Assert.assertTrue(Files.exists(newRegularFilePath))[ FD ]
Line_4 $$ Path regularFromFilePath = unmoveableFromDirectoryPath.resolve("RegularFromFile")-->Line_6 $$ Path regularToFilePath = regularToDirectoryPath.resolve(unmoveableFromDirectoryPath.relativize(regularFromFilePath))[ FD ]
Line_35 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) -->Line_36 $$ return[ CD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_7 $$ final Path newRegularFilePath = unmoveableFromDirectoryPath.resolve("NewRegularFile")[ FD ]
Line_9 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_17 $$ swappableSecurityManager.install()[ FD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_53 $$ Assert.assertTrue(Files.exists(unmoveableFromDirectoryPath))[ FD ]
Line_4 $$ Path regularFromFilePath = unmoveableFromDirectoryPath.resolve("RegularFromFile")-->Line_51 $$ Assert.assertTrue(Files.notExists(regularFromFilePath))[ FD ]
Line_9 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_14 $$ createFile(newRegularFilePath)[ CD ]
Line_2 $$ public void testMoveUnmoveableDirectoryWithRegularFile() throws IOException -->Line_6 $$ Path regularToFilePath = regularToDirectoryPath.resolve(unmoveableFromDirectoryPath.relativize(regularFromFilePath))[ CD ]
Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")-->Line_18 $$ FileHelperUtil.move(unmoveableFromDirectoryPath, regularToDirectoryPath, false)[ FD ]
Line_7 $$ final Path newRegularFilePath = unmoveableFromDirectoryPath.resolve("NewRegularFile")-->Line_38 $$ createFile(newRegularFilePath)[ FD ]
Line_2 $$ public void testMoveUnmoveableDirectoryWithRegularFile() throws IOException -->Line_5 $$ Path regularToDirectoryPath = Paths.get("RegularToDirectoryPath")[ CD ]
Line_7 $$ final Path newRegularFilePath = unmoveableFromDirectoryPath.resolve("NewRegularFile")-->Line_54 $$ Files.delete(newRegularFilePath)[ FD ]
Line_4 $$ Path regularFromFilePath = unmoveableFromDirectoryPath.resolve("RegularFromFile")-->Line_24 $$ Assert.assertTrue(Files.notExists(regularFromFilePath))[ FD ]
Line_33 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_35 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) [ CD ]
Line_4 $$ Path regularFromFilePath = unmoveableFromDirectoryPath.resolve("RegularFromFile")-->Line_32 $$ createFile(regularFromFilePath)[ FD ]
Line_6 $$ Path regularToFilePath = regularToDirectoryPath.resolve(unmoveableFromDirectoryPath.relativize(regularFromFilePath))-->Line_49 $$ Assert.assertTrue(Files.notExists(regularToFilePath))[ FD ]
Line_9 $$ try (SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_11 $$ if (!file.equals(unmoveableFromDirectoryPath.toString())) [ CD ]
Line_2 $$ public void testMoveUnmoveableDirectoryWithRegularFile() throws IOException -->Line_3 $$ final Path unmoveableFromDirectoryPath = Paths.get("UnmoveableDirectory")[ CD ]
Line_5 $$ Path regularToDirectoryPath = Paths.get("RegularToDirectoryPath")-->Line_50 $$ Assert.assertTrue(Files.notExists(regularToDirectoryPath))[ FD ]
