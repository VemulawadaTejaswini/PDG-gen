Line_16 $$ final String relativeDataLocationPath = "indices/test/" + Integer.toString(shardRouting.getId()) + "/index"-->Line_17 $$ Path file = PathUtils.get(path).resolve(relativeDataLocationPath)[ FD ]
Line_11 $$ NodeStats nodeStats = nodeStatses.getNodes()[0]-->Line_14 $$ for (FsInfo.Path info : nodeStats.getFs()) [ FD ]
Line_5 $$ for (ShardRouting shardRouting : state.getRoutingTable().allShards("test")) -->Line_16 $$ final String relativeDataLocationPath = "indices/test/" + Integer.toString(shardRouting.getId()) + "/index"[ FD ]
Line_17 $$ Path file = PathUtils.get(path).resolve(relativeDataLocationPath)-->Line_19 $$ try (DirectoryStream<Path> stream = Files.newDirectoryStream(file)) [ FD ]
Line_20 $$ for (Path item : stream) -->Line_22 $$ files.add(item)[ FD ]
Line_5 $$ for (ShardRouting shardRouting : state.getRoutingTable().allShards("test")) -->Line_10 $$ NodesStatsResponse nodeStatses = client().admin().cluster().prepareNodesStats(shardRouting.currentNodeId()).setFs(true).get()[ FD ]
Line_5 $$ for (ShardRouting shardRouting : state.getRoutingTable().allShards("test")) -->Line_6 $$ if (shardRouting.primary() == true) [ FD ]
Line_15 $$ String path = info.getPath()-->Line_17 $$ Path file = PathUtils.get(path).resolve(relativeDataLocationPath)[ FD ]
Line_4 $$ ClusterState state = client().admin().cluster().prepareState().get().getState()-->Line_5 $$ for (ShardRouting shardRouting : state.getRoutingTable().allShards("test")) [ FD ]
Line_10 $$ NodesStatsResponse nodeStatses = client().admin().cluster().prepareNodesStats(shardRouting.currentNodeId()).setFs(true).get()-->Line_11 $$ NodeStats nodeStats = nodeStatses.getNodes()[0][ FD ]
Line_14 $$ for (FsInfo.Path info : nodeStats.getFs()) -->Line_15 $$ String path = info.getPath()[ FD ]
Line_12 $$ List<Path> files = new ArrayList()-->Line_13 $$ filesToNodes.put(nodeStats.getNode().getName(), files)[ FD ]
Line_2 $$ private Map<String, List<Path>> findFilesToCorruptForReplica() throws IOException -->Line_29 $$ return filesToNodes[ CD ]
Line_2 $$ private Map<String, List<Path>> findFilesToCorruptForReplica() throws IOException -->Line_4 $$ ClusterState state = client().admin().cluster().prepareState().get().getState()[ CD ]
Line_12 $$ List<Path> files = new ArrayList()-->Line_22 $$ files.add(item)[ FD ]
Line_3 $$ Map<String, List<Path>> filesToNodes = new HashMap()-->Line_13 $$ filesToNodes.put(nodeStats.getNode().getName(), files)[ FD ]
Line_21 $$ if (item.getFileName().toString().startsWith("segments_")) -->Line_22 $$ files.add(item)[ CD ]
Line_20 $$ for (Path item : stream) -->Line_21 $$ if (item.getFileName().toString().startsWith("segments_")) [ FD ]
Line_5 $$ for (ShardRouting shardRouting : state.getRoutingTable().allShards("test")) -->Line_9 $$ assertTrue(shardRouting.assignedToNode())[ FD ]
Line_17 $$ Path file = PathUtils.get(path).resolve(relativeDataLocationPath)-->Line_18 $$ if (Files.exists(file)) [ FD ]
Line_2 $$ private Map<String, List<Path>> findFilesToCorruptForReplica() throws IOException -->Line_3 $$ Map<String, List<Path>> filesToNodes = new HashMap()[ CD ]
Line_11 $$ NodeStats nodeStats = nodeStatses.getNodes()[0]-->Line_13 $$ filesToNodes.put(nodeStats.getNode().getName(), files)[ FD ]
