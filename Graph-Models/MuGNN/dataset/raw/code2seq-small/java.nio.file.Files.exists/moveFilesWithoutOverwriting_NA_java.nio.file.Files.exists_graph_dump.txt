Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_26 $$ if (!Files.exists(path)) [ CD ]
Line_25 $$ Path path = buildPath(subpath)-->Line_26 $$ if (!Files.exists(path)) [ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_25 $$ Path path = buildPath(subpath)[ CD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_30 $$ path = path.resolveSibling(path.getFileName().toString().concat(suffix))[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_42 $$ byte[] secondBytes = Files.readAllBytes(second)[ CD ]
Line_41 $$ byte[] firstBytes = Files.readAllBytes(first)-->Line_43 $$ return Arrays.equals(firstBytes, secondBytes)[ FD ]
Line_13 $$ if (!Files.exists(path)) -->Line_14 $$ move(dir, path)[ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_37 $$ boolean sameFileSize = Files.size(first) == Files.size(second)[ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_22 $$ if (configPathRootLevel != file.getNameCount()) [ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_11 $$ Path subpath = dir.subpath(configPathRootLevel, dir.getNameCount())[ FD ]
Line_21 $$ Path subpath = null-->Line_23 $$ subpath = file.subpath(configPathRootLevel, file.getNameCount())[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_10 $$ if (configPathRootLevel != dir.getNameCount()) [ CD ]
Line_4 $$ final int configPathRootLevel = source.getNameCount()-->Line_23 $$ subpath = file.subpath(configPathRootLevel, file.getNameCount())[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_18 $$ return FileVisitResult.CONTINUE[ CD ]
Line_26 $$ if (!Files.exists(path)) -->Line_28 $$ if (suffix != null) [ CD ]
Line_26 $$ if (!Files.exists(path)) -->Line_27 $$ move(file, path)[ CD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() [ FD ]
Line_30 $$ path = path.resolveSibling(path.getFileName().toString().concat(suffix))-->Line_31 $$ Files.move(file, path, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_13 $$ if (!Files.exists(path)) -->Line_15 $$ return FileVisitResult.SKIP_SUBTREE[ CD ]
Line_12 $$ Path path = buildPath(subpath)-->Line_27 $$ move(file, path)[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_38 $$ if (!sameFileSize) [ CD ]
Line_23 $$ subpath = file.subpath(configPathRootLevel, file.getNameCount())-->Line_25 $$ Path path = buildPath(subpath)[ FD ]
Line_11 $$ Path subpath = dir.subpath(configPathRootLevel, dir.getNameCount())-->Line_12 $$ Path path = buildPath(subpath)[ FD ]
Line_10 $$ if (configPathRootLevel != dir.getNameCount()) -->Line_12 $$ Path path = buildPath(subpath)[ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_14 $$ move(dir, path)[ FD ]
Line_4 $$ final int configPathRootLevel = source.getNameCount()-->Line_22 $$ if (configPathRootLevel != file.getNameCount()) [ FD ]
Line_25 $$ Path path = buildPath(subpath)-->Line_27 $$ move(file, path)[ FD ]
Line_29 $$ if (!isSameFile(file, path)) -->Line_30 $$ path = path.resolveSibling(path.getFileName().toString().concat(suffix))[ CD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_7 $$ return destination.resolve(path)[ FD ]
Line_25 $$ Path path = buildPath(subpath)-->Line_30 $$ path = path.resolveSibling(path.getFileName().toString().concat(suffix))[ FD ]
Line_12 $$ Path path = buildPath(subpath)-->Line_31 $$ Files.move(file, path, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_42 $$ byte[] secondBytes = Files.readAllBytes(second)[ FD ]
Line_42 $$ byte[] secondBytes = Files.readAllBytes(second)-->Line_43 $$ return Arrays.equals(firstBytes, secondBytes)[ FD ]
Line_29 $$ if (!isSameFile(file, path)) -->Line_31 $$ Files.move(file, path, StandardCopyOption.REPLACE_EXISTING)[ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_13 $$ if (!Files.exists(path)) [ FD ]
Line_28 $$ if (suffix != null) -->Line_29 $$ if (!isSameFile(file, path)) [ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_30 $$ path = path.resolveSibling(path.getFileName().toString().concat(suffix))[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_37 $$ boolean sameFileSize = Files.size(first) == Files.size(second)[ FD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_4 $$ final int configPathRootLevel = source.getNameCount()[ FD ]
Line_12 $$ Path path = buildPath(subpath)-->Line_13 $$ if (!Files.exists(path)) [ FD ]
Line_12 $$ Path path = buildPath(subpath)-->Line_14 $$ move(dir, path)[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_21 $$ Path subpath = null[ CD ]
Line_4 $$ final int configPathRootLevel = source.getNameCount()-->Line_10 $$ if (configPathRootLevel != dir.getNameCount()) [ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_26 $$ if (!Files.exists(path)) [ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_34 $$ return FileVisitResult.CONTINUE[ CD ]
Line_22 $$ if (configPathRootLevel != file.getNameCount()) -->Line_23 $$ subpath = file.subpath(configPathRootLevel, file.getNameCount())[ CD ]
Line_10 $$ if (configPathRootLevel != dir.getNameCount()) -->Line_13 $$ if (!Files.exists(path)) [ CD ]
Line_10 $$ if (configPathRootLevel != dir.getNameCount()) -->Line_11 $$ Path subpath = dir.subpath(configPathRootLevel, dir.getNameCount())[ CD ]
Line_37 $$ boolean sameFileSize = Files.size(first) == Files.size(second)-->Line_38 $$ if (!sameFileSize) [ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_23 $$ subpath = file.subpath(configPathRootLevel, file.getNameCount())[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_29 $$ if (!isSameFile(file, path)) [ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_7 $$ return destination.resolve(path)[ FD ]
Line_4 $$ final int configPathRootLevel = source.getNameCount()-->Line_11 $$ Path subpath = dir.subpath(configPathRootLevel, dir.getNameCount())[ FD ]
Line_12 $$ Path path = buildPath(subpath)-->Line_26 $$ if (!Files.exists(path)) [ FD ]
Line_25 $$ Path path = buildPath(subpath)-->Line_29 $$ if (!isSameFile(file, path)) [ FD ]
Line_12 $$ Path path = buildPath(subpath)-->Line_30 $$ path = path.resolveSibling(path.getFileName().toString().concat(suffix))[ FD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_3 $$ Files.createDirectories(destination)[ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_7 $$ return destination.resolve(path)[ CD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_3 $$ Files.createDirectories(destination)[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_31 $$ Files.move(file, path, StandardCopyOption.REPLACE_EXISTING)[ FD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() [ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_27 $$ move(file, path)[ FD ]
Line_12 $$ Path path = buildPath(subpath)-->Line_29 $$ if (!isSameFile(file, path)) [ FD ]
Line_11 $$ Path subpath = dir.subpath(configPathRootLevel, dir.getNameCount())-->Line_25 $$ Path path = buildPath(subpath)[ FD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_28 $$ if (suffix != null) [ FD ]
Line_2 $$ public static void moveFilesWithoutOverwriting(Path source, final Path destination, final String suffix) throws IOException -->Line_4 $$ final int configPathRootLevel = source.getNameCount()[ CD ]
Line_11 $$ Path subpath = dir.subpath(configPathRootLevel, dir.getNameCount())-->Line_23 $$ subpath = file.subpath(configPathRootLevel, file.getNameCount())[ FD ]
Line_21 $$ Path subpath = null-->Line_25 $$ Path path = buildPath(subpath)[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_41 $$ byte[] firstBytes = Files.readAllBytes(first)[ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_43 $$ return Arrays.equals(firstBytes, secondBytes)[ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_22 $$ if (configPathRootLevel != file.getNameCount()) [ FD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_41 $$ byte[] firstBytes = Files.readAllBytes(first)[ CD ]
Line_5 $$ Files.walkFileTree(source, new SimpleFileVisitor<Path>() -->Line_10 $$ if (configPathRootLevel != dir.getNameCount()) [ FD ]
Line_38 $$ if (!sameFileSize) -->Line_39 $$ return false[ CD ]
Line_25 $$ Path path = buildPath(subpath)-->Line_31 $$ Files.move(file, path, StandardCopyOption.REPLACE_EXISTING)[ FD ]
