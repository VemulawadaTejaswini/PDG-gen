Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_21 $$ myEmbedder.customizeForResolve(new SoutMavenConsole(), EMPTY_MAVEN_PROCESS)[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_5 $$ initEmbedder()[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_23 $$ assertNotNull(result.projectData)[ CD ]
Line_6 $$ VirtualFile m = createModulePom("foo-parent", "<groupId>test</groupId>" + "<artifactId>foo-parent</artifactId>" + "<version>1</version>" + "<packaging>pom</packaging>")-->Line_12 $$ m = createModulePom("foo", "<artifactId>foo</artifactId>" + "<version>1</version>" + "<parent>" + "  <groupId>test</groupId>" + "  <artifactId>foo-parent</artifactId>" + "  <version>1</version>" + "</parent>")[ FD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_16 $$ assertTrue(new File(repo, "test/foo/1/foo-1.pom").exists())[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_3 $$ File repo = new File(myDir, "/repo")[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_20 $$ createProjectPom("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>" + "<dependencies>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>foo</artifactId>" + "    <version>1</version>" + "  </dependency>" + "</dependencies>")[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_4 $$ setRepositoryPath(repo.getPath())[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_6 $$ VirtualFile m = createModulePom("foo-parent", "<groupId>test</groupId>" + "<artifactId>foo-parent</artifactId>" + "<version>1</version>" + "<packaging>pom</packaging>")[ CD ]
Line_12 $$ m = createModulePom("foo", "<artifactId>foo</artifactId>" + "<version>1</version>" + "<parent>" + "  <groupId>test</groupId>" + "  <artifactId>foo-parent</artifactId>" + "  <version>1</version>" + "</parent>")-->Line_14 $$ myEmbedder.execute(m, Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("install"))[ FD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_17 $$ FileUtil.delete(fooParentFile)[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_14 $$ myEmbedder.execute(m, Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("install"))[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_7 $$ myEmbedder.customizeForResolve(new SoutMavenConsole(), EMPTY_MAVEN_PROCESS)[ CD ]
Line_3 $$ File repo = new File(myDir, "/repo")-->Line_4 $$ setRepositoryPath(repo.getPath())[ FD ]
Line_10 $$ File fooParentFile = new File(repo, "test/foo-parent/1/foo-parent-1.pom")-->Line_11 $$ assertTrue(fooParentFile.exists())[ FD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_10 $$ File fooParentFile = new File(repo, "test/foo-parent/1/foo-parent-1.pom")[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_8 $$ myEmbedder.execute(m, Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("install"))[ CD ]
Line_6 $$ VirtualFile m = createModulePom("foo-parent", "<groupId>test</groupId>" + "<artifactId>foo-parent</artifactId>" + "<version>1</version>" + "<packaging>pom</packaging>")-->Line_8 $$ myEmbedder.execute(m, Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("install"))[ FD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_13 $$ myEmbedder.customizeForResolve(new SoutMavenConsole(), EMPTY_MAVEN_PROCESS)[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_22 $$ MavenServerExecutionResult result = myEmbedder.resolveProject(myProjectPom, Collections.<String>emptyList(), Collections.<String>emptyList())[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_12 $$ m = createModulePom("foo", "<artifactId>foo</artifactId>" + "<version>1</version>" + "<parent>" + "  <groupId>test</groupId>" + "  <artifactId>foo-parent</artifactId>" + "  <version>1</version>" + "</parent>")[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_9 $$ myEmbedder.reset()[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_24 $$ assertOrderedElementsAreEqual(result.unresolvedArtifacts, new MavenId("test", "foo-parent", "1"))[ CD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_11 $$ assertTrue(fooParentFile.exists())[ CD ]
Line_6 $$ VirtualFile m = createModulePom("foo-parent", "<groupId>test</groupId>" + "<artifactId>foo-parent</artifactId>" + "<version>1</version>" + "<packaging>pom</packaging>")-->Line_14 $$ myEmbedder.execute(m, Collections.<String>emptyList(), Collections.<String>emptyList(), Arrays.asList("install"))[ FD ]
Line_2 $$ public void _testDependencyWithUnresolvedParent() throws Exception -->Line_15 $$ myEmbedder.reset()[ CD ]
Line_10 $$ File fooParentFile = new File(repo, "test/foo-parent/1/foo-parent-1.pom")-->Line_17 $$ FileUtil.delete(fooParentFile)[ FD ]
