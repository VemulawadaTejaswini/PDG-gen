Line_9 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)-->Line_20 $$ manager = FileTemplateManager.getInstance(reloaded)[ FD ]
Line_5 $$ final Project project = ProjectManager.getInstance().createProject("foo", foo.getPath())-->Line_26 $$ closeProject(project)[ FD ]
Line_3 $$ File foo = PlatformTestCase.createTempDir("foo")-->Line_18 $$ reloaded = ProjectManager.getInstance().loadAndOpenProject(foo.getPath())[ FD ]
Line_20 $$ manager = FileTemplateManager.getInstance(reloaded)-->Line_21 $$ assertEquals(manager.getProjectScheme(), manager.getCurrentScheme())[ FD ]
Line_9 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)-->Line_11 $$ FileTemplate template = manager.getTemplate(TEST_TEMPLATE_TXT)[ FD ]
Line_4 $$ Project reloaded = null-->Line_27 $$ closeProject(reloaded)[ FD ]
Line_13 $$ String newText = "good bye"-->Line_14 $$ template.setText(newText)[ FD ]
Line_3 $$ File foo = PlatformTestCase.createTempDir("foo")-->Line_5 $$ final Project project = ProjectManager.getInstance().createProject("foo", foo.getPath())[ FD ]
Line_18 $$ reloaded = ProjectManager.getInstance().loadAndOpenProject(foo.getPath())-->Line_19 $$ assertNotNull(reloaded)[ FD ]
Line_2 $$ public void testSurviveOnProjectReopen() throws Exception -->Line_5 $$ final Project project = ProjectManager.getInstance().createProject("foo", foo.getPath())[ CD ]
Line_11 $$ FileTemplate template = manager.getTemplate(TEST_TEMPLATE_TXT)-->Line_12 $$ assertEquals(HI_THERE, template.getText())[ FD ]
Line_5 $$ final Project project = ProjectManager.getInstance().createProject("foo", foo.getPath())-->Line_8 $$ assertNotNull(project)[ FD ]
Line_4 $$ Project reloaded = null-->Line_19 $$ assertNotNull(reloaded)[ FD ]
Line_5 $$ final Project project = ProjectManager.getInstance().createProject("foo", foo.getPath())-->Line_17 $$ closeProject(project)[ FD ]
Line_2 $$ public void testSurviveOnProjectReopen() throws Exception -->Line_4 $$ Project reloaded = null[ CD ]
Line_5 $$ final Project project = ProjectManager.getInstance().createProject("foo", foo.getPath())-->Line_16 $$ PlatformTestUtil.saveProject(project)[ FD ]
Line_9 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)-->Line_21 $$ assertEquals(manager.getProjectScheme(), manager.getCurrentScheme())[ FD ]
Line_18 $$ reloaded = ProjectManager.getInstance().loadAndOpenProject(foo.getPath())-->Line_20 $$ manager = FileTemplateManager.getInstance(reloaded)[ FD ]
Line_9 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)-->Line_10 $$ manager.setCurrentScheme(manager.getProjectScheme())[ FD ]
Line_18 $$ reloaded = ProjectManager.getInstance().loadAndOpenProject(foo.getPath())-->Line_27 $$ closeProject(reloaded)[ FD ]
Line_9 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)-->Line_15 $$ assertEquals(newText, manager.getTemplate(TEST_TEMPLATE_TXT).getText())[ FD ]
Line_5 $$ final Project project = ProjectManager.getInstance().createProject("foo", foo.getPath())-->Line_9 $$ FileTemplateManager manager = FileTemplateManager.getInstance(project)[ FD ]
Line_2 $$ public void testSurviveOnProjectReopen() throws Exception -->Line_3 $$ File foo = PlatformTestCase.createTempDir("foo")[ CD ]
Line_4 $$ Project reloaded = null-->Line_18 $$ reloaded = ProjectManager.getInstance().loadAndOpenProject(foo.getPath())[ FD ]
Line_4 $$ Project reloaded = null-->Line_20 $$ manager = FileTemplateManager.getInstance(reloaded)[ FD ]
Line_13 $$ String newText = "good bye"-->Line_15 $$ assertEquals(newText, manager.getTemplate(TEST_TEMPLATE_TXT).getText())[ FD ]
Line_11 $$ FileTemplate template = manager.getTemplate(TEST_TEMPLATE_TXT)-->Line_14 $$ template.setText(newText)[ FD ]
