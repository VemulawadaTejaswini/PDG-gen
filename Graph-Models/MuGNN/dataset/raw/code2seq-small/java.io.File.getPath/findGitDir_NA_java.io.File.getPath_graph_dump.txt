Line_9 $$ File dotGit = new File(rootDir, DOT_GIT)-->Line_10 $$ if (!dotGit.exists())[ FD ]
Line_9 $$ File dotGit = new File(rootDir, DOT_GIT)-->Line_16 $$ String content = DvcsUtil.tryLoadFileOrReturn(dotGit, null)[ FD ]
Line_12 $$ if (dotGit.isDirectory()) -->Line_13 $$ boolean headExists = new File(dotGit, GitRepositoryFiles.HEAD).exists()[ CD ]
Line_9 $$ File dotGit = new File(rootDir, DOT_GIT)-->Line_12 $$ if (dotGit.isDirectory()) [ FD ]
Line_16 $$ String content = DvcsUtil.tryLoadFileOrReturn(dotGit, null)-->Line_17 $$ if (content == null)[ FD ]
Line_19 $$ String pathToDir = parsePathToRepository(content)-->Line_20 $$ return findSubmoduleRepositoryDir(rootDir.getPath(), pathToDir)[ FD ]
Line_16 $$ String content = DvcsUtil.tryLoadFileOrReturn(dotGit, null)-->Line_19 $$ String pathToDir = parsePathToRepository(content)[ FD ]
Line_17 $$ if (content == null)-->Line_18 $$ return null[ CD ]
Line_10 $$ if (!dotGit.exists())-->Line_11 $$ return null[ CD ]
Line_12 $$ if (dotGit.isDirectory()) -->Line_14 $$ return headExists ? dotGit : null[ CD ]
