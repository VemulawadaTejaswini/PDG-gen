Line_8 $$ final File contentsHashesFile = new File(basePath, "contentHashes" + VFS_FILES_EXTENSION)-->Line_67 $$ deleted &= deleteAllFilesStartingWith(contentsHashesFile)[ FD ]
Line_83 $$ if (!ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_87 $$ System.err.println(message)[ CD ]
Line_21 $$ myAttributes = new Storage(attributesFile.getPath(), REASONABLY_SMALL) -->Line_68 $$ deleted &= deleteAllFilesStartingWith(recordsFile)[ FD ]
Line_28 $$ myContents = new RefCountingStorage(contentsFile.getPath(), CapacityAllocationPolicy.FIVE_PERCENT_FOR_GROWTH, useSnappyForCompression) -->Line_33 $$ final ExecutorService backendExecutor = PooledThreadExecutor.INSTANCE[ CD ]
Line_2 $$ private static void init() -->Line_3 $$ final File basePath = basePath().getAbsoluteFile()[ CD ]
Line_74 $$ final Runnable warnAndShutdown = new Runnable() -->Line_90 $$ Runtime.getRuntime().halt(1)[ CD ]
Line_6 $$ final File attributesFile = new File(basePath, "attrib" + VFS_FILES_EXTENSION)-->Line_21 $$ myAttributes = new Storage(attributesFile.getPath(), REASONABLY_SMALL) [ FD ]
Line_5 $$ final File namesFile = new File(basePath, "names" + VFS_FILES_EXTENSION)-->Line_64 $$ deleted &= deleteAllFilesStartingWith(namesFile)[ FD ]
Line_3 $$ final File basePath = basePath().getAbsoluteFile()-->Line_82 $$ final String message = "Files in " + basePath.getPath() + " are locked.\n" + ApplicationNamesInfo.getInstance().getProductName() + " will not be able to start up."[ FD ]
Line_10 $$ final File vfsDependentEnumBaseFile = VfsDependentEnum.getBaseFile()-->Line_69 $$ deleted &= deleteAllFilesStartingWith(vfsDependentEnumBaseFile)[ FD ]
Line_2 $$ private static void init() -->Line_9 $$ final File recordsFile = new File(basePath, "records" + VFS_FILES_EXTENSION)[ CD ]
Line_2 $$ private static void init() -->Line_7 $$ final File contentsFile = new File(basePath, "content" + VFS_FILES_EXTENSION)[ CD ]
Line_3 $$ final File basePath = basePath().getAbsoluteFile()-->Line_4 $$ basePath.mkdirs()[ FD ]
Line_21 $$ myAttributes = new Storage(attributesFile.getPath(), REASONABLY_SMALL) -->Line_25 $$ return inlineAttributes && useSmallAttrTable ? new CompactRecordsTable(recordsFile, pool, false) : super.createRecordsTable(pool, recordsFile)[ FD ]
Line_82 $$ final String message = "Files in " + basePath.getPath() + " are locked.\n" + ApplicationNamesInfo.getInstance().getProductName() + " will not be able to start up."-->Line_87 $$ System.err.println(message)[ FD ]
Line_6 $$ final File attributesFile = new File(basePath, "attrib" + VFS_FILES_EXTENSION)-->Line_65 $$ deleted &= AbstractStorage.deleteFiles(attributesFile.getPath())[ FD ]
Line_9 $$ final File recordsFile = new File(basePath, "records" + VFS_FILES_EXTENSION)-->Line_68 $$ deleted &= deleteAllFilesStartingWith(recordsFile)[ FD ]
Line_82 $$ final String message = "Files in " + basePath.getPath() + " are locked.\n" + ApplicationNamesInfo.getInstance().getProductName() + " will not be able to start up."-->Line_84 $$ JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), message, "Fatal Error", JOptionPane.ERROR_MESSAGE)[ FD ]
Line_43 $$ if (myRecords.length() == 0) -->Line_48 $$ setCurrentVersion()[ CD ]
Line_78 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_82 $$ final String message = "Files in " + basePath.getPath() + " are locked.\n" + ApplicationNamesInfo.getInstance().getProductName() + " will not be able to start up."[ CD ]
Line_7 $$ final File contentsFile = new File(basePath, "content" + VFS_FILES_EXTENSION)-->Line_66 $$ deleted &= AbstractStorage.deleteFiles(contentsFile.getPath())[ FD ]
Line_93 $$ if (EventQueue.isDispatchThread()) -->Line_94 $$ warnAndShutdown.run()[ CD ]
Line_2 $$ private static void init() -->Line_5 $$ final File namesFile = new File(basePath, "names" + VFS_FILES_EXTENSION)[ CD ]
Line_2 $$ private static void init() -->Line_8 $$ final File contentsHashesFile = new File(basePath, "contentHashes" + VFS_FILES_EXTENSION)[ CD ]
Line_2 $$ private static void init() -->Line_10 $$ final File vfsDependentEnumBaseFile = VfsDependentEnum.getBaseFile()[ CD ]
Line_7 $$ final File contentsFile = new File(basePath, "content" + VFS_FILES_EXTENSION)-->Line_28 $$ myContents = new RefCountingStorage(contentsFile.getPath(), CapacityAllocationPolicy.FIVE_PERCENT_FOR_GROWTH, useSnappyForCompression) [ FD ]
Line_28 $$ myContents = new RefCountingStorage(contentsFile.getPath(), CapacityAllocationPolicy.FIVE_PERCENT_FOR_GROWTH, useSnappyForCompression) -->Line_34 $$ return new BoundedTaskExecutor(backendExecutor, 1)[ CD ]
Line_74 $$ final Runnable warnAndShutdown = new Runnable() -->Line_78 $$ if (ApplicationManager.getApplication().isUnitTestMode()) [ CD ]
Line_9 $$ final File recordsFile = new File(basePath, "records" + VFS_FILES_EXTENSION)-->Line_25 $$ return inlineAttributes && useSmallAttrTable ? new CompactRecordsTable(recordsFile, pool, false) : super.createRecordsTable(pool, recordsFile)[ FD ]
Line_21 $$ myAttributes = new Storage(attributesFile.getPath(), REASONABLY_SMALL) -->Line_25 $$ return inlineAttributes && useSmallAttrTable ? new CompactRecordsTable(recordsFile, pool, false) : super.createRecordsTable(pool, recordsFile)[ CD ]
Line_83 $$ if (!ApplicationManager.getApplication().isHeadlessEnvironment()) -->Line_84 $$ JOptionPane.showMessageDialog(JOptionPane.getRootFrame(), message, "Fatal Error", JOptionPane.ERROR_MESSAGE)[ CD ]
Line_78 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_83 $$ if (!ApplicationManager.getApplication().isHeadlessEnvironment()) [ CD ]
Line_15 $$ if (getCorruptionMarkerFile().exists()) -->Line_16 $$ invalidateIndex("corruption marker found")[ CD ]
Line_93 $$ if (EventQueue.isDispatchThread()) -->Line_97 $$ SwingUtilities.invokeLater(warnAndShutdown)[ CD ]
Line_5 $$ final File namesFile = new File(basePath, "names" + VFS_FILES_EXTENSION)-->Line_12 $$ invalidateIndex("'" + namesFile.getPath() + "' does not exist")[ FD ]
Line_2 $$ private static void init() -->Line_6 $$ final File attributesFile = new File(basePath, "attrib" + VFS_FILES_EXTENSION)[ CD ]
Line_11 $$ if (!namesFile.exists()) -->Line_12 $$ invalidateIndex("'" + namesFile.getPath() + "' does not exist")[ CD ]
Line_2 $$ private static void init() -->Line_11 $$ if (!namesFile.exists()) [ CD ]
Line_5 $$ final File namesFile = new File(basePath, "names" + VFS_FILES_EXTENSION)-->Line_11 $$ if (!namesFile.exists()) [ FD ]
Line_2 $$ private static void init() -->Line_4 $$ basePath.mkdirs()[ CD ]
Line_78 $$ if (ApplicationManager.getApplication().isUnitTestMode()) -->Line_80 $$ e1.printStackTrace()[ CD ]
