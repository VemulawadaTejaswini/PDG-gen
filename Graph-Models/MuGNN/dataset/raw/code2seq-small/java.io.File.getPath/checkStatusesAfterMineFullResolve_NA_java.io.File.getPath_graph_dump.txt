Line_8 $$ final Status status = SvnUtil.getStatus(myVcs, exFile)-->Line_34 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (normal node status)", status != null && StatusType.STATUS_REPLACED.equals(status.getNodeStatus()))[ FD ]
Line_21 $$ if (StatusType.STATUS_ADDED.equals(file.myNodeStatus)) -->Line_29 $$ if (StatusType.STATUS_ADDED.equals(status.getNodeStatus())) [ CD ]
Line_10 $$ if (StatusType.STATUS_UNVERSIONED.equals(file.myNodeStatus)) -->Line_12 $$ if (theirsExists) [ CD ]
Line_19 $$ if (StatusType.STATUS_DELETED.equals(file.myNodeStatus)) -->Line_21 $$ if (StatusType.STATUS_ADDED.equals(file.myNodeStatus)) [ CD ]
Line_8 $$ final Status status = SvnUtil.getStatus(myVcs, exFile)-->Line_39 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (modified text status)", status != null && file.myContentsStatus.equals(status.getContentsStatus()))[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_20 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (deleted status)", status != null && file.myNodeStatus.equals(status.getNodeStatus()))[ FD ]
Line_33 $$ if (theirsExists) -->Line_34 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (normal node status)", status != null && StatusType.STATUS_REPLACED.equals(status.getNodeStatus()))[ CD ]
Line_8 $$ final Status status = SvnUtil.getStatus(myVcs, exFile)-->Line_29 $$ if (StatusType.STATUS_ADDED.equals(status.getNodeStatus())) [ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_4 $$ Assert.assertTrue(createTestFailedComment(data, conflictIoFile.getPath()) + " tree conflict resolved", conflStatus.getTreeConflict() == null)[ CD ]
Line_21 $$ if (StatusType.STATUS_ADDED.equals(file.myNodeStatus)) -->Line_39 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (modified text status)", status != null && file.myContentsStatus.equals(status.getContentsStatus()))[ CD ]
Line_8 $$ final Status status = SvnUtil.getStatus(myVcs, exFile)-->Line_20 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (deleted status)", status != null && file.myNodeStatus.equals(status.getNodeStatus()))[ FD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_22 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (file exists)", exFile.exists())[ FD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_11 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (file exists)", exFile.exists())[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_26 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (added status)", status != null && StatusType.STATUS_ADDED.equals(status.getNodeStatus()))[ FD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_20 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (deleted status)", status != null && file.myNodeStatus.equals(status.getNodeStatus()))[ FD ]
Line_10 $$ if (StatusType.STATUS_UNVERSIONED.equals(file.myNodeStatus)) -->Line_19 $$ if (StatusType.STATUS_DELETED.equals(file.myNodeStatus)) [ CD ]
Line_3 $$ Status conflStatus = SvnUtil.getStatus(myVcs, conflictIoFile)-->Line_4 $$ Assert.assertTrue(createTestFailedComment(data, conflictIoFile.getPath()) + " tree conflict resolved", conflStatus.getTreeConflict() == null)[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_3 $$ Status conflStatus = SvnUtil.getStatus(myVcs, conflictIoFile)[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_5 $$ Collection<TreeConflictData.FileData> leftFiles = data.getLeftFiles()[ FD ]
Line_8 $$ final Status status = SvnUtil.getStatus(myVcs, exFile)-->Line_24 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (added status)", status != null && StatusType.STATUS_REPLACED.equals(status.getNodeStatus()))[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_36 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (normal node status)", status != null && (StatusType.STATUS_NORMAL.equals(status.getNodeStatus()) || StatusType.STATUS_MODIFIED.equals(status.getNodeStatus())))[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_34 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (normal node status)", status != null && StatusType.STATUS_REPLACED.equals(status.getNodeStatus()))[ FD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_34 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (normal node status)", status != null && StatusType.STATUS_REPLACED.equals(status.getNodeStatus()))[ FD ]
Line_29 $$ if (StatusType.STATUS_ADDED.equals(status.getNodeStatus())) -->Line_33 $$ if (theirsExists) [ CD ]
Line_23 $$ if (theirsExists) -->Line_26 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (added status)", status != null && StatusType.STATUS_ADDED.equals(status.getNodeStatus()))[ CD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_39 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (modified text status)", status != null && file.myContentsStatus.equals(status.getContentsStatus()))[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_5 $$ Collection<TreeConflictData.FileData> leftFiles = data.getLeftFiles()[ CD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_24 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (added status)", status != null && StatusType.STATUS_REPLACED.equals(status.getNodeStatus()))[ FD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_26 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (added status)", status != null && StatusType.STATUS_ADDED.equals(status.getNodeStatus()))[ FD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_24 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (added status)", status != null && StatusType.STATUS_REPLACED.equals(status.getNodeStatus()))[ FD ]
Line_21 $$ if (StatusType.STATUS_ADDED.equals(file.myNodeStatus)) -->Line_23 $$ if (theirsExists) [ CD ]
Line_33 $$ if (theirsExists) -->Line_36 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (normal node status)", status != null && (StatusType.STATUS_NORMAL.equals(status.getNodeStatus()) || StatusType.STATUS_MODIFIED.equals(status.getNodeStatus())))[ CD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_22 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (file exists)", exFile.exists())[ FD ]
Line_21 $$ if (StatusType.STATUS_ADDED.equals(file.myNodeStatus)) -->Line_22 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (file exists)", exFile.exists())[ CD ]
Line_19 $$ if (StatusType.STATUS_DELETED.equals(file.myNodeStatus)) -->Line_20 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (deleted status)", status != null && file.myNodeStatus.equals(status.getNodeStatus()))[ CD ]
Line_8 $$ final Status status = SvnUtil.getStatus(myVcs, exFile)-->Line_36 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (normal node status)", status != null && (StatusType.STATUS_NORMAL.equals(status.getNodeStatus()) || StatusType.STATUS_MODIFIED.equals(status.getNodeStatus())))[ FD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_36 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (normal node status)", status != null && (StatusType.STATUS_NORMAL.equals(status.getNodeStatus()) || StatusType.STATUS_MODIFIED.equals(status.getNodeStatus())))[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_4 $$ Assert.assertTrue(createTestFailedComment(data, conflictIoFile.getPath()) + " tree conflict resolved", conflStatus.getTreeConflict() == null)[ FD ]
Line_23 $$ if (theirsExists) -->Line_24 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (added status)", status != null && StatusType.STATUS_REPLACED.equals(status.getNodeStatus()))[ CD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_3 $$ Status conflStatus = SvnUtil.getStatus(myVcs, conflictIoFile)[ CD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_39 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (modified text status)", status != null && file.myContentsStatus.equals(status.getContentsStatus()))[ FD ]
Line_10 $$ if (StatusType.STATUS_UNVERSIONED.equals(file.myNodeStatus)) -->Line_11 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (file exists)", exFile.exists())[ CD ]
Line_8 $$ final Status status = SvnUtil.getStatus(myVcs, exFile)-->Line_26 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (added status)", status != null && StatusType.STATUS_ADDED.equals(status.getNodeStatus()))[ FD ]
Line_2 $$ private void checkStatusesAfterMineFullResolve(TreeConflictData.Data data, File conflictIoFile) -->Line_11 $$ Assert.assertTrue(createTestFailedComment(data, exFile.getPath()) + " (file exists)", exFile.exists())[ FD ]
Line_7 $$ File exFile = new File(myWorkingCopyDir.getPath(), file.myRelativePath)-->Line_8 $$ final Status status = SvnUtil.getStatus(myVcs, exFile)[ FD ]
