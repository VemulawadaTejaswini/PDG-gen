Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_9 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_HTTP_ADDRESS_KEY, "0.0.0.0:0")[ FD ]
Line_16 $$ final BlockManager bm = namenode.getNamesystem().getBlockManager()-->Line_17 $$ replicator = bm.getBlockPlacementPolicy()[ FD ]
Line_16 $$ final BlockManager bm = namenode.getNamesystem().getBlockManager()-->Line_22 $$ bm.getDatanodeManager().getHeartbeatManager().addDatanode(dataNodes[i])[ FD ]
Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_8 $$ FileSystem.setDefaultUri(conf, "hdfs://localhost:0")[ FD ]
Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_14 $$ DFSTestUtil.formatNameNode(conf)[ FD ]
Line_5 $$ final String[] racks = -->Line_6 $$ storages = DFSTestUtil.createDatanodeStorageInfos(racks)[ FD ]
Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_13 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_WRITE_KEY, true)[ FD ]
Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_11 $$ conf.set(DFSConfigKeys.DFS_NAMENODE_NAME_DIR_KEY, new File(baseDir, "name").getPath())[ FD ]
Line_16 $$ final BlockManager bm = namenode.getNamesystem().getBlockManager()-->Line_18 $$ cluster = bm.getDatanodeManager().getNetworkTopology()[ FD ]
Line_4 $$ Configuration conf = new HdfsConfiguration()-->Line_12 $$ conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_AVOID_STALE_DATANODE_FOR_READ_KEY, true)[ FD ]
Line_24 $$ for (int i = 0; i < NUM_OF_DATANODES; i++) -->Line_25 $$ updateHeartbeatWithUsage(dataNodes[i], 2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE, 0L, 2 * HdfsConstants.MIN_BLOCKS_FOR_WRITE * BLOCK_SIZE, 0L, 0L, 0L, 0, 0)[ CD ]
