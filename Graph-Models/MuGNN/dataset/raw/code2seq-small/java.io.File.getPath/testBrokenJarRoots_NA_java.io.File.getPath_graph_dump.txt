Line_5 $$ LoggedErrorProcessor.setNewInstance(new LoggedErrorProcessor() -->Line_9 $$ super.processWarn(message, t, logger)[ CD ]
Line_5 $$ LoggedErrorProcessor.setNewInstance(new LoggedErrorProcessor() -->Line_10 $$ if (message.contains(jarFile.getName()))[ CD ]
Line_10 $$ if (message.contains(jarFile.getName()))-->Line_11 $$ logCount[0]++[ CD ]
Line_3 $$ final File jarFile = IoTestUtil.createTestFile("empty.jar")-->Line_17 $$ assertNotNull(getVirtualFile(jarFile))[ FD ]
Line_5 $$ LoggedErrorProcessor.setNewInstance(new LoggedErrorProcessor() -->Line_10 $$ if (message.contains(jarFile.getName()))[ FD ]
Line_3 $$ final File jarFile = IoTestUtil.createTestFile("empty.jar")-->Line_25 $$ IoTestUtil.createTestJar(jarFile)[ FD ]
Line_3 $$ final File jarFile = IoTestUtil.createTestFile("empty.jar")-->Line_10 $$ if (message.contains(jarFile.getName()))[ FD ]
Line_5 $$ LoggedErrorProcessor.setNewInstance(new LoggedErrorProcessor() -->Line_9 $$ super.processWarn(message, t, logger)[ FD ]
Line_2 $$ public void testBrokenJarRoots() throws Exception -->Line_3 $$ final File jarFile = IoTestUtil.createTestFile("empty.jar")[ CD ]
Line_3 $$ final File jarFile = IoTestUtil.createTestFile("empty.jar")-->Line_15 $$ String rootUrl = "jar://" + FileUtil.toSystemIndependentName(jarFile.getPath()) + "!/"[ FD ]
Line_2 $$ public void testBrokenJarRoots() throws Exception -->Line_33 $$ assertEquals(1, logCount[0])[ CD ]
Line_2 $$ public void testBrokenJarRoots() throws Exception -->Line_5 $$ LoggedErrorProcessor.setNewInstance(new LoggedErrorProcessor() [ CD ]
Line_2 $$ public void testBrokenJarRoots() throws Exception -->Line_4 $$ final int[] logCount = [ CD ]
