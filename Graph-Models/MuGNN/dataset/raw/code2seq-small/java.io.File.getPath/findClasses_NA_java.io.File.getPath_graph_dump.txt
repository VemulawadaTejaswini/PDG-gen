Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_25 $$ return result[ CD ]
Line_5 $$ if (JrtFileSystem.isModularJdk(file.getPath())) -->Line_6 $$ urls.add(VirtualFileManager.constructUrl(JrtFileSystem.PROTOCOL, FileUtil.toSystemIndependentName(file.getPath()) + JrtFileSystem.SEPARATOR))[ CD ]
Line_13 $$ VirtualFile vFile = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_14 $$ if (vFile != null) [ FD ]
Line_18 $$ Collections.sort(result, new Comparator<VirtualFile>() -->Line_22 $$ return o1.getPath().compareTo(o2.getPath())[ CD ]
Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_5 $$ if (JrtFileSystem.isModularJdk(file.getPath())) [ FD ]
Line_4 $$ List<String> urls = ContainerUtil.newArrayListWithCapacity(roots.size() + 1)-->Line_6 $$ urls.add(VirtualFileManager.constructUrl(JrtFileSystem.PROTOCOL, FileUtil.toSystemIndependentName(file.getPath()) + JrtFileSystem.SEPARATOR))[ FD ]
Line_3 $$ List<File> roots = JavaSdkUtil.getJdkClassesRoots(file, isJre)-->Line_4 $$ List<String> urls = ContainerUtil.newArrayListWithCapacity(roots.size() + 1)[ FD ]
Line_4 $$ List<String> urls = ContainerUtil.newArrayListWithCapacity(roots.size() + 1)-->Line_11 $$ List<VirtualFile> result = ContainerUtil.newArrayListWithCapacity(urls.size())[ FD ]
Line_11 $$ List<VirtualFile> result = ContainerUtil.newArrayListWithCapacity(urls.size())-->Line_15 $$ result.add(vFile)[ FD ]
Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_11 $$ List<VirtualFile> result = ContainerUtil.newArrayListWithCapacity(urls.size())[ CD ]
Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_6 $$ urls.add(VirtualFileManager.constructUrl(JrtFileSystem.PROTOCOL, FileUtil.toSystemIndependentName(file.getPath()) + JrtFileSystem.SEPARATOR))[ FD ]
Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_4 $$ List<String> urls = ContainerUtil.newArrayListWithCapacity(roots.size() + 1)[ CD ]
Line_8 $$ for (File root : roots) -->Line_9 $$ urls.add(VfsUtil.getUrlForLibraryRoot(root))[ FD ]
Line_14 $$ if (vFile != null) -->Line_15 $$ result.add(vFile)[ CD ]
Line_4 $$ List<String> urls = ContainerUtil.newArrayListWithCapacity(roots.size() + 1)-->Line_9 $$ urls.add(VfsUtil.getUrlForLibraryRoot(root))[ FD ]
Line_11 $$ List<VirtualFile> result = ContainerUtil.newArrayListWithCapacity(urls.size())-->Line_18 $$ Collections.sort(result, new Comparator<VirtualFile>() [ FD ]
Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_3 $$ List<File> roots = JavaSdkUtil.getJdkClassesRoots(file, isJre)[ FD ]
Line_18 $$ Collections.sort(result, new Comparator<VirtualFile>() -->Line_22 $$ return o1.getPath().compareTo(o2.getPath())[ FD ]
Line_13 $$ VirtualFile vFile = VirtualFileManager.getInstance().findFileByUrl(url)-->Line_15 $$ result.add(vFile)[ FD ]
Line_12 $$ for (String url : urls) -->Line_13 $$ VirtualFile vFile = VirtualFileManager.getInstance().findFileByUrl(url)[ FD ]
Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_3 $$ List<File> roots = JavaSdkUtil.getJdkClassesRoots(file, isJre)[ CD ]
Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_18 $$ Collections.sort(result, new Comparator<VirtualFile>() [ CD ]
Line_2 $$ private static List<VirtualFile> findClasses(File file, boolean isJre) -->Line_5 $$ if (JrtFileSystem.isModularJdk(file.getPath())) [ CD ]
