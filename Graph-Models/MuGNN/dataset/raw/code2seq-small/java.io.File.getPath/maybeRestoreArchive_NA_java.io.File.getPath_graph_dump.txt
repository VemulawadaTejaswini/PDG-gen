Line_3 $$ if (Strings.isNullOrEmpty(restoreDirectories))-->Line_4 $$ return[ CD ]
Line_18 $$ if (fromName != null && fromHeader == null && fromName.version >= CommitLogDescriptor.VERSION_21)-->Line_20 $$ if (fromHeader != null)[ CD ]
Line_20 $$ if (fromHeader != null)-->Line_23 $$ descriptor = fromName[ CD ]
Line_14 $$ if (fromHeader == null && fromName == null)-->Line_16 $$ if (fromHeader != null && fromName != null && !fromHeader.equalsIgnoringCompression(fromName))[ CD ]
Line_11 $$ CommitLogDescriptor fromHeader = CommitLogDescriptor.fromHeader(fromFile)-->Line_21 $$ descriptor = fromHeader[ FD ]
Line_10 $$ for (File fromFile : files) -->Line_15 $$ throw new IllegalStateException("Cannot safely construct descriptor for segment, either from its name or its header: " + fromFile.getPath())[ FD ]
Line_20 $$ if (fromHeader != null)-->Line_21 $$ descriptor = fromHeader[ CD ]
Line_38 $$ String command = restoreCommand.replace("%from", fromFile.getPath())-->Line_39 $$ command = command.replace("%to", toFile.getPath())[ FD ]
Line_6 $$ File[] files = new File(dir).listFiles()-->Line_7 $$ if (files == null) [ FD ]
Line_2 $$ public void maybeRestoreArchive() -->Line_3 $$ if (Strings.isNullOrEmpty(restoreDirectories))[ CD ]
Line_11 $$ CommitLogDescriptor fromHeader = CommitLogDescriptor.fromHeader(fromFile)-->Line_16 $$ if (fromHeader != null && fromName != null && !fromHeader.equalsIgnoringCompression(fromName))[ FD ]
Line_21 $$ descriptor = fromHeader-->Line_23 $$ descriptor = fromName[ FD ]
Line_12 $$ CommitLogDescriptor fromName = CommitLogDescriptor.isValid(fromFile.getName()) ? CommitLogDescriptor.fromFileName(fromFile.getName()) : null-->Line_16 $$ if (fromHeader != null && fromName != null && !fromHeader.equalsIgnoringCompression(fromName))[ FD ]
Line_34 $$ if (toFile.exists()) -->Line_35 $$ logger.trace("Skipping restore of archive [ CD ]
Line_23 $$ descriptor = fromName-->Line_33 $$ File toFile = new File(DatabaseDescriptor.getCommitLogLocation(), descriptor.fileName())[ FD ]
Line_38 $$ String command = restoreCommand.replace("%from", fromFile.getPath())-->Line_41 $$ exec(command)[ FD ]
Line_10 $$ for (File fromFile : files) -->Line_19 $$ throw new IllegalStateException("Cannot safely construct descriptor for segment, as name descriptor implies a version that should contain a header descriptor, but that descriptor could not be read: " + fromFile.getPath())[ FD ]
Line_33 $$ File toFile = new File(DatabaseDescriptor.getCommitLogLocation(), descriptor.fileName())-->Line_35 $$ logger.trace("Skipping restore of archive [ FD ]
Line_13 $$ CommitLogDescriptor descriptor-->Line_23 $$ descriptor = fromName[ FD ]
Line_16 $$ if (fromHeader != null && fromName != null && !fromHeader.equalsIgnoringCompression(fromName))-->Line_18 $$ if (fromName != null && fromHeader == null && fromName.version >= CommitLogDescriptor.VERSION_21)[ CD ]
Line_10 $$ for (File fromFile : files) -->Line_38 $$ String command = restoreCommand.replace("%from", fromFile.getPath())[ FD ]
Line_10 $$ for (File fromFile : files) -->Line_17 $$ throw new IllegalStateException(String.format("Cannot safely construct descriptor for segment, as name and header descriptors do not match (%s vs %s): %s", fromHeader, fromName, fromFile.getPath()))[ FD ]
Line_11 $$ CommitLogDescriptor fromHeader = CommitLogDescriptor.fromHeader(fromFile)-->Line_17 $$ throw new IllegalStateException(String.format("Cannot safely construct descriptor for segment, as name and header descriptors do not match (%s vs %s): %s", fromHeader, fromName, fromFile.getPath()))[ FD ]
Line_12 $$ CommitLogDescriptor fromName = CommitLogDescriptor.isValid(fromFile.getName()) ? CommitLogDescriptor.fromFileName(fromFile.getName()) : null-->Line_23 $$ descriptor = fromName[ FD ]
Line_10 $$ for (File fromFile : files) -->Line_11 $$ CommitLogDescriptor fromHeader = CommitLogDescriptor.fromHeader(fromFile)[ FD ]
Line_33 $$ File toFile = new File(DatabaseDescriptor.getCommitLogLocation(), descriptor.fileName())-->Line_34 $$ if (toFile.exists()) [ FD ]
Line_13 $$ CommitLogDescriptor descriptor-->Line_21 $$ descriptor = fromHeader[ FD ]
Line_39 $$ command = command.replace("%to", toFile.getPath())-->Line_41 $$ exec(command)[ FD ]
Line_11 $$ CommitLogDescriptor fromHeader = CommitLogDescriptor.fromHeader(fromFile)-->Line_20 $$ if (fromHeader != null)[ FD ]
Line_33 $$ File toFile = new File(DatabaseDescriptor.getCommitLogLocation(), descriptor.fileName())-->Line_39 $$ command = command.replace("%to", toFile.getPath())[ FD ]
Line_10 $$ for (File fromFile : files) -->Line_12 $$ CommitLogDescriptor fromName = CommitLogDescriptor.isValid(fromFile.getName()) ? CommitLogDescriptor.fromFileName(fromFile.getName()) : null[ FD ]
Line_10 $$ for (File fromFile : files) -->Line_35 $$ logger.trace("Skipping restore of archive [ FD ]
Line_13 $$ CommitLogDescriptor descriptor-->Line_33 $$ File toFile = new File(DatabaseDescriptor.getCommitLogLocation(), descriptor.fileName())[ FD ]
Line_12 $$ CommitLogDescriptor fromName = CommitLogDescriptor.isValid(fromFile.getName()) ? CommitLogDescriptor.fromFileName(fromFile.getName()) : null-->Line_17 $$ throw new IllegalStateException(String.format("Cannot safely construct descriptor for segment, as name and header descriptors do not match (%s vs %s): %s", fromHeader, fromName, fromFile.getPath()))[ FD ]
Line_21 $$ descriptor = fromHeader-->Line_33 $$ File toFile = new File(DatabaseDescriptor.getCommitLogLocation(), descriptor.fileName())[ FD ]
