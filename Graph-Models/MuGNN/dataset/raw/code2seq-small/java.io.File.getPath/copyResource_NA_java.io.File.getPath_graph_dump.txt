Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_8 $$ final String relativePath = FileUtil.getRelativePath(sourceRootPath, FileUtil.toSystemIndependentName(file.getPath()), '/')[ CD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_9 $$ final String prefix = rd.getPackagePrefix()[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_17 $$ final String outputPath = targetPath.toString()[ CD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_10 $$ final StringBuilder targetPath = new StringBuilder()[ CD ]
Line_3 $$ final File outputRoot = rd.getTarget().getOutputDir()-->Line_11 $$ targetPath.append(FileUtil.toSystemIndependentName(outputRoot.getPath()))[ FD ]
Line_10 $$ final StringBuilder targetPath = new StringBuilder()-->Line_15 $$ targetPath.append('/').append(relativePath)[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_3 $$ final File outputRoot = rd.getTarget().getOutputDir()[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_16 $$ context.processMessage(new ProgressMessage("Copying resources... [" + rd.getTarget().getModule().getName() + "]"))[ CD ]
Line_7 $$ final String sourceRootPath = FileUtil.toSystemIndependentName(rd.getRootFile().getAbsolutePath())-->Line_8 $$ final String relativePath = FileUtil.getRelativePath(sourceRootPath, FileUtil.toSystemIndependentName(file.getPath()), '/')[ FD ]
Line_3 $$ final File outputRoot = rd.getTarget().getOutputDir()-->Line_4 $$ if (outputRoot == null) [ FD ]
Line_18 $$ final File targetFile = new File(outputPath)-->Line_21 $$ outputConsumer.registerOutputFile(targetFile, Collections.singletonList(file.getPath()))[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_11 $$ targetPath.append(FileUtil.toSystemIndependentName(outputRoot.getPath()))[ CD ]
Line_9 $$ final String prefix = rd.getPackagePrefix()-->Line_13 $$ targetPath.append('/').append(prefix.replace('.', '/'))[ FD ]
Line_10 $$ final StringBuilder targetPath = new StringBuilder()-->Line_11 $$ targetPath.append(FileUtil.toSystemIndependentName(outputRoot.getPath()))[ FD ]
Line_10 $$ final StringBuilder targetPath = new StringBuilder()-->Line_17 $$ final String outputPath = targetPath.toString()[ FD ]
Line_12 $$ if (prefix.length() > 0) -->Line_13 $$ targetPath.append('/').append(prefix.replace('.', '/'))[ CD ]
Line_18 $$ final File targetFile = new File(outputPath)-->Line_19 $$ FileUtil.copyContent(file, targetFile)[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_7 $$ final String sourceRootPath = FileUtil.toSystemIndependentName(rd.getRootFile().getAbsolutePath())[ FD ]
Line_10 $$ final StringBuilder targetPath = new StringBuilder()-->Line_13 $$ targetPath.append('/').append(prefix.replace('.', '/'))[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_7 $$ final String sourceRootPath = FileUtil.toSystemIndependentName(rd.getRootFile().getAbsolutePath())[ CD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_8 $$ final String relativePath = FileUtil.getRelativePath(sourceRootPath, FileUtil.toSystemIndependentName(file.getPath()), '/')[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_19 $$ FileUtil.copyContent(file, targetFile)[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_21 $$ outputConsumer.registerOutputFile(targetFile, Collections.singletonList(file.getPath()))[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_3 $$ final File outputRoot = rd.getTarget().getOutputDir()[ CD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_23 $$ context.processMessage(new CompilerMessage(BUILDER_NAME, e))[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_15 $$ targetPath.append('/').append(relativePath)[ CD ]
Line_4 $$ if (outputRoot == null) -->Line_5 $$ return[ CD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_16 $$ context.processMessage(new ProgressMessage("Copying resources... [" + rd.getTarget().getModule().getName() + "]"))[ FD ]
Line_8 $$ final String relativePath = FileUtil.getRelativePath(sourceRootPath, FileUtil.toSystemIndependentName(file.getPath()), '/')-->Line_15 $$ targetPath.append('/').append(relativePath)[ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_4 $$ if (outputRoot == null) [ CD ]
Line_9 $$ final String prefix = rd.getPackagePrefix()-->Line_12 $$ if (prefix.length() > 0) [ FD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_18 $$ final File targetFile = new File(outputPath)[ CD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_9 $$ final String prefix = rd.getPackagePrefix()[ CD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_19 $$ FileUtil.copyContent(file, targetFile)[ CD ]
Line_2 $$ private static void copyResource(CompileContext context, ResourceRootDescriptor rd, File file, BuildOutputConsumer outputConsumer) throws IOException -->Line_12 $$ if (prefix.length() > 0) [ CD ]
