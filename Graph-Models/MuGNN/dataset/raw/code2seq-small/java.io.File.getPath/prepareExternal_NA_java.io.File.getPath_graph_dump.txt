Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_33 $$ sleep(100)[ CD ]
Line_6 $$ final String externalURL-->Line_9 $$ externalURL = myAnotherRepoUrl + "/root/target"[ FD ]
Line_3 $$ final ChangeListManagerImpl clManager = (ChangeListManagerImpl) ChangeListManager.getInstance(myProject)-->Line_15 $$ clManager.stopEveryThingIfInTestMode()[ FD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_17 $$ final File rootFile = new File(subTree.myRootDir.getPath())[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_23 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_19 $$ FileUtil.delete(new File(myWorkingCopyDir.getPath() + File.separator + ".svn"))[ CD ]
Line_7 $$ if (anotherRepository) -->Line_11 $$ externalURL = myRepoUrl + "/root/target"[ CD ]
Line_17 $$ final File rootFile = new File(subTree.myRootDir.getPath())-->Line_18 $$ FileUtil.delete(rootFile)[ FD ]
Line_23 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_24 $$ runInAndVerifyIgnoreOutput("co", mainUrl, sourceDir.getPath())[ FD ]
Line_7 $$ if (anotherRepository) -->Line_9 $$ externalURL = myAnotherRepoUrl + "/root/target"[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_34 $$ if (updateExternal) [ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_20 $$ assertTrue(!rootFile.exists())[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_5 $$ final String mainUrl = myRepoUrl + "/root/source"[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_22 $$ myWorkingCopyDir.refresh(false, true)[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_7 $$ if (anotherRepository) [ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_30 $$ if (commitExternalDefinition) [ CD ]
Line_34 $$ if (updateExternal) -->Line_36 $$ assertTrue(new File(sourceDir, "external").exists())[ CD ]
Line_23 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_31 $$ runInAndVerifyIgnoreOutput("ci", "-m", "test", sourceDir.getPath())[ FD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_21 $$ sleep(200)[ CD ]
Line_6 $$ final String externalURL-->Line_11 $$ externalURL = myRepoUrl + "/root/target"[ FD ]
Line_7 $$ if (anotherRepository) -->Line_8 $$ createAnotherRepo()[ CD ]
Line_5 $$ final String mainUrl = myRepoUrl + "/root/source"-->Line_24 $$ runInAndVerifyIgnoreOutput("co", mainUrl, sourceDir.getPath())[ FD ]
Line_30 $$ if (commitExternalDefinition) -->Line_31 $$ runInAndVerifyIgnoreOutput("ci", "-m", "test", sourceDir.getPath())[ CD ]
Line_6 $$ final String externalURL-->Line_25 $$ CreateExternalAction.addToExternalProperty(vcs, sourceDir, "external", externalURL)[ FD ]
Line_4 $$ final SvnVcs vcs = SvnVcs.getInstance(myProject)-->Line_25 $$ CreateExternalAction.addToExternalProperty(vcs, sourceDir, "external", externalURL)[ FD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_15 $$ clManager.stopEveryThingIfInTestMode()[ CD ]
Line_9 $$ externalURL = myAnotherRepoUrl + "/root/target"-->Line_25 $$ CreateExternalAction.addToExternalProperty(vcs, sourceDir, "external", externalURL)[ FD ]
Line_11 $$ externalURL = myRepoUrl + "/root/target"-->Line_25 $$ CreateExternalAction.addToExternalProperty(vcs, sourceDir, "external", externalURL)[ FD ]
Line_9 $$ externalURL = myAnotherRepoUrl + "/root/target"-->Line_11 $$ externalURL = myRepoUrl + "/root/target"[ FD ]
Line_34 $$ if (updateExternal) -->Line_35 $$ myWorkingCopyDir.refresh(false, true)[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_24 $$ runInAndVerifyIgnoreOutput("co", mainUrl, sourceDir.getPath())[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_25 $$ CreateExternalAction.addToExternalProperty(vcs, sourceDir, "external", externalURL)[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_14 $$ checkin()[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_16 $$ sleep(100)[ CD ]
Line_23 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_28 $$ runInAndVerifyIgnoreOutput("up", sourceDir.getPath())[ FD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_4 $$ final SvnVcs vcs = SvnVcs.getInstance(myProject)[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_26 $$ sleep(100)[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_41 $$ refreshSvnMappingsSynchronously()[ CD ]
Line_23 $$ final File sourceDir = new File(myWorkingCopyDir.getPath(), "source")-->Line_25 $$ CreateExternalAction.addToExternalProperty(vcs, sourceDir, "external", externalURL)[ FD ]
Line_27 $$ if (updateExternal) -->Line_28 $$ runInAndVerifyIgnoreOutput("up", sourceDir.getPath())[ CD ]
Line_17 $$ final File rootFile = new File(subTree.myRootDir.getPath())-->Line_20 $$ assertTrue(!rootFile.exists())[ FD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_3 $$ final ChangeListManagerImpl clManager = (ChangeListManagerImpl) ChangeListManager.getInstance(myProject)[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_18 $$ FileUtil.delete(rootFile)[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_13 $$ final SubTree subTree = new SubTree(myWorkingCopyDir)[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_6 $$ final String externalURL[ CD ]
Line_2 $$ public void prepareExternal(final boolean commitExternalDefinition, final boolean updateExternal, final boolean anotherRepository) throws Exception -->Line_27 $$ if (updateExternal) [ CD ]
