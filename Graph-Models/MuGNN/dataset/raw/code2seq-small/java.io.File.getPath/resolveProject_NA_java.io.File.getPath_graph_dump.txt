Line_4 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_5 $$ ProjectBuilderConfiguration config = request.getProjectBuilderConfiguration()[ FD ]
Line_14 $$ project = builder.build(new File(file.getPath()), config)-->Line_20 $$ Map managedVersions = project.getManagedVersionMap()[ FD ]
Line_20 $$ Map managedVersions = project.getManagedVersionMap()-->Line_24 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_7 $$ ProfileManager globalProfileManager = request.getGlobalProfileManager()-->Line_8 $$ globalProfileManager.loadSettingsProfiles(request.getSettings())[ FD ]
Line_4 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_7 $$ ProfileManager globalProfileManager = request.getGlobalProfileManager()[ FD ]
Line_10 $$ MavenProject project = null-->Line_24 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_10 $$ MavenProject project = null-->Line_15 $$ builder.calculateConcreteState(project, config, false)[ FD ]
Line_24 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)-->Line_25 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_10 $$ MavenProject project = null-->Line_14 $$ project = builder.build(new File(file.getPath()), config)[ FD ]
Line_4 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_8 $$ globalProfileManager.loadSettingsProfiles(request.getSettings())[ FD ]
Line_5 $$ ProjectBuilderConfiguration config = request.getProjectBuilderConfiguration()-->Line_15 $$ builder.calculateConcreteState(project, config, false)[ FD ]
Line_14 $$ project = builder.build(new File(file.getPath()), config)-->Line_25 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_23 $$ ArtifactResolver resolver = getComponent(ArtifactResolver.class)-->Line_24 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_21 $$ ArtifactMetadataSource metadataSource = getComponent(ArtifactMetadataSource.class)-->Line_24 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_10 $$ MavenProject project = null-->Line_22 $$ project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class), null, null))[ FD ]
Line_14 $$ project = builder.build(new File(file.getPath()), config)-->Line_22 $$ project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class), null, null))[ FD ]
Line_5 $$ ProjectBuilderConfiguration config = request.getProjectBuilderConfiguration()-->Line_14 $$ project = builder.build(new File(file.getPath()), config)[ FD ]
Line_10 $$ MavenProject project = null-->Line_20 $$ Map managedVersions = project.getManagedVersionMap()[ FD ]
Line_14 $$ project = builder.build(new File(file.getPath()), config)-->Line_15 $$ builder.calculateConcreteState(project, config, false)[ FD ]
Line_14 $$ project = builder.build(new File(file.getPath()), config)-->Line_24 $$ ArtifactResolutionResult result = resolver.resolveTransitively(project.getDependencyArtifacts(), projectArtifact, managedVersions, myLocalRepository, project.getRemoteArtifactRepositories(), metadataSource, null, listeners)[ FD ]
Line_4 $$ MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_6 $$ request.getGlobalProfileManager().loadSettingsProfiles(mySettings)[ FD ]
Line_10 $$ MavenProject project = null-->Line_25 $$ project.setArtifacts(result.getArtifacts())[ FD ]
