Line_52 $$ if (sourceRoots.size() > 0) -->Line_53 $$ builder.append(" [")[ CD ]
Line_54 $$ for (Iterator<? extends DetectedProjectRoot> it = sourceRoots.iterator(); it.hasNext(); ) -->Line_57 $$ if (it.hasNext()) [ CD ]
Line_36 $$ if (element instanceof ModuleDescriptor) -->Line_38 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()[ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_56 $$ builder.append(root.getDirectory().getName())[ FD ]
Line_51 $$ final Collection<? extends DetectedProjectRoot> sourceRoots = moduleDescriptor.getSourceRoots()-->Line_54 $$ for (Iterator<? extends DetectedProjectRoot> it = sourceRoots.iterator(); it.hasNext(); ) [ FD ]
Line_2 $$ protected static String getElementText(Object element) -->Line_21 $$ if (element instanceof File) [ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_13 $$ builder.append(")")[ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_33 $$ StringBuilderSpinAllocator.dispose(builder)[ FD ]
Line_55 $$ DetectedProjectRoot root = it.next()-->Line_56 $$ builder.append(root.getDirectory().getName())[ FD ]
Line_9 $$ final File parentFile = jars.iterator().next().getParentFile()-->Line_28 $$ builder.append(parentFile.getPath())[ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_27 $$ builder.append(" (")[ FD ]
Line_21 $$ if (element instanceof File) -->Line_22 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()[ CD ]
Line_42 $$ final int rootCount = contents.size()-->Line_43 $$ if (rootCount > 0) [ FD ]
Line_37 $$ final ModuleDescriptor moduleDescriptor = (ModuleDescriptor) element-->Line_40 $$ builder.append(moduleDescriptor.getName())[ FD ]
Line_41 $$ final Set<File> contents = moduleDescriptor.getContentRoots()-->Line_45 $$ builder.append(contents.iterator().next().getPath())[ FD ]
Line_42 $$ final int rootCount = contents.size()-->Line_46 $$ if (rootCount > 1) [ FD ]
Line_51 $$ final Collection<? extends DetectedProjectRoot> sourceRoots = moduleDescriptor.getSourceRoots()-->Line_52 $$ if (sourceRoots.size() > 0) [ FD ]
Line_54 $$ for (Iterator<? extends DetectedProjectRoot> it = sourceRoots.iterator(); it.hasNext(); ) -->Line_55 $$ DetectedProjectRoot root = it.next()[ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_12 $$ builder.append(parentFile.getPath())[ FD ]
Line_43 $$ if (rootCount > 0) -->Line_49 $$ builder.append(")")[ CD ]
Line_43 $$ if (rootCount > 0) -->Line_45 $$ builder.append(contents.iterator().next().getPath())[ CD ]
Line_26 $$ if (parentFile != null) -->Line_28 $$ builder.append(parentFile.getPath())[ CD ]
Line_2 $$ protected static String getElementText(Object element) -->Line_36 $$ if (element instanceof ModuleDescriptor) [ FD ]
Line_10 $$ if (parentFile != null) -->Line_12 $$ builder.append(parentFile.getPath())[ CD ]
Line_57 $$ if (it.hasNext()) -->Line_58 $$ builder.append(",")[ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_58 $$ builder.append(",")[ FD ]
Line_37 $$ final ModuleDescriptor moduleDescriptor = (ModuleDescriptor) element-->Line_51 $$ final Collection<? extends DetectedProjectRoot> sourceRoots = moduleDescriptor.getSourceRoots()[ FD ]
Line_2 $$ protected static String getElementText(Object element) -->Line_3 $$ if (element instanceof LibraryDescriptor) [ FD ]
Line_3 $$ if (element instanceof LibraryDescriptor) -->Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()[ CD ]
Line_10 $$ if (parentFile != null) -->Line_13 $$ builder.append(")")[ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_45 $$ builder.append(contents.iterator().next().getPath())[ FD ]
Line_37 $$ final ModuleDescriptor moduleDescriptor = (ModuleDescriptor) element-->Line_41 $$ final Set<File> contents = moduleDescriptor.getContentRoots()[ FD ]
Line_52 $$ if (sourceRoots.size() > 0) -->Line_54 $$ for (Iterator<? extends DetectedProjectRoot> it = sourceRoots.iterator(); it.hasNext(); ) [ CD ]
Line_8 $$ if (jars.size() == 1) -->Line_10 $$ if (parentFile != null) [ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_65 $$ StringBuilderSpinAllocator.dispose(builder)[ FD ]
Line_26 $$ if (parentFile != null) -->Line_27 $$ builder.append(" (")[ CD ]
Line_10 $$ if (parentFile != null) -->Line_11 $$ builder.append(" (")[ CD ]
Line_2 $$ protected static String getElementText(Object element) -->Line_3 $$ if (element instanceof LibraryDescriptor) [ CD ]
Line_41 $$ final Set<File> contents = moduleDescriptor.getContentRoots()-->Line_42 $$ final int rootCount = contents.size()[ FD ]
Line_7 $$ final Collection<File> jars = ((LibraryDescriptor) element).getJars()-->Line_8 $$ if (jars.size() == 1) [ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_18 $$ StringBuilderSpinAllocator.dispose(builder)[ FD ]
Line_9 $$ final File parentFile = jars.iterator().next().getParentFile()-->Line_10 $$ if (parentFile != null) [ FD ]
Line_9 $$ final File parentFile = jars.iterator().next().getParentFile()-->Line_26 $$ if (parentFile != null) [ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_29 $$ builder.append(")")[ FD ]
Line_36 $$ if (element instanceof ModuleDescriptor) -->Line_37 $$ final ModuleDescriptor moduleDescriptor = (ModuleDescriptor) element[ CD ]
Line_43 $$ if (rootCount > 0) -->Line_46 $$ if (rootCount > 1) [ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_49 $$ builder.append(")")[ FD ]
Line_54 $$ for (Iterator<? extends DetectedProjectRoot> it = sourceRoots.iterator(); it.hasNext(); ) -->Line_55 $$ DetectedProjectRoot root = it.next()[ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_47 $$ builder.append("...")[ FD ]
Line_7 $$ final Collection<File> jars = ((LibraryDescriptor) element).getJars()-->Line_9 $$ final File parentFile = jars.iterator().next().getParentFile()[ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_61 $$ builder.append("]")[ FD ]
Line_2 $$ protected static String getElementText(Object element) -->Line_36 $$ if (element instanceof ModuleDescriptor) [ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_24 $$ builder.append(((File) element).getName())[ FD ]
Line_46 $$ if (rootCount > 1) -->Line_47 $$ builder.append("...")[ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_63 $$ return builder.toString()[ FD ]
Line_54 $$ for (Iterator<? extends DetectedProjectRoot> it = sourceRoots.iterator(); it.hasNext(); ) -->Line_57 $$ if (it.hasNext()) [ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_31 $$ return builder.toString()[ FD ]
Line_54 $$ for (Iterator<? extends DetectedProjectRoot> it = sourceRoots.iterator(); it.hasNext(); ) -->Line_56 $$ builder.append(root.getDirectory().getName())[ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_6 $$ builder.append(((LibraryDescriptor) element).getName())[ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_53 $$ builder.append(" [")[ FD ]
Line_8 $$ if (jars.size() == 1) -->Line_9 $$ final File parentFile = jars.iterator().next().getParentFile()[ CD ]
Line_2 $$ protected static String getElementText(Object element) -->Line_21 $$ if (element instanceof File) [ FD ]
Line_26 $$ if (parentFile != null) -->Line_29 $$ builder.append(")")[ CD ]
Line_52 $$ if (sourceRoots.size() > 0) -->Line_61 $$ builder.append("]")[ CD ]
Line_2 $$ protected static String getElementText(Object element) -->Line_68 $$ return ""[ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_28 $$ builder.append(parentFile.getPath())[ FD ]
Line_9 $$ final File parentFile = jars.iterator().next().getParentFile()-->Line_12 $$ builder.append(parentFile.getPath())[ FD ]
Line_43 $$ if (rootCount > 0) -->Line_44 $$ builder.append(" (")[ CD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_40 $$ builder.append(moduleDescriptor.getName())[ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_11 $$ builder.append(" (")[ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_16 $$ return builder.toString()[ FD ]
Line_4 $$ final StringBuilder builder = StringBuilderSpinAllocator.alloc()-->Line_44 $$ builder.append(" (")[ FD ]
