Line_6 $$ Set<String> plugins = discoverPlugins(artifact, classLoader)-->Line_8 $$ writePluginServices(plugins, artifact.getFile())[ FD ]
Line_4 $$ URLClassLoader classLoader = createClassLoader(artifacts, pomFile.getPath())-->Line_6 $$ Set<String> plugins = discoverPlugins(artifact, classLoader)[ FD ]
Line_5 $$ Artifact artifact = artifacts.get(0)-->Line_8 $$ writePluginServices(plugins, artifact.getFile())[ FD ]
Line_2 $$ private URLClassLoader buildClassLoaderFromPom(File pomFile) throws Exception -->Line_6 $$ Set<String> plugins = discoverPlugins(artifact, classLoader)[ CD ]
Line_2 $$ private URLClassLoader buildClassLoaderFromPom(File pomFile) throws Exception -->Line_3 $$ List<Artifact> artifacts = resolver.resolvePom(pomFile)[ FD ]
Line_2 $$ private URLClassLoader buildClassLoaderFromPom(File pomFile) throws Exception -->Line_4 $$ URLClassLoader classLoader = createClassLoader(artifacts, pomFile.getPath())[ FD ]
Line_6 $$ Set<String> plugins = discoverPlugins(artifact, classLoader)-->Line_7 $$ if (!plugins.isEmpty()) [ FD ]
Line_3 $$ List<Artifact> artifacts = resolver.resolvePom(pomFile)-->Line_4 $$ URLClassLoader classLoader = createClassLoader(artifacts, pomFile.getPath())[ FD ]
Line_2 $$ private URLClassLoader buildClassLoaderFromPom(File pomFile) throws Exception -->Line_7 $$ if (!plugins.isEmpty()) [ CD ]
Line_3 $$ List<Artifact> artifacts = resolver.resolvePom(pomFile)-->Line_5 $$ Artifact artifact = artifacts.get(0)[ FD ]
Line_2 $$ private URLClassLoader buildClassLoaderFromPom(File pomFile) throws Exception -->Line_10 $$ return classLoader[ CD ]
Line_5 $$ Artifact artifact = artifacts.get(0)-->Line_6 $$ Set<String> plugins = discoverPlugins(artifact, classLoader)[ FD ]
Line_7 $$ if (!plugins.isEmpty()) -->Line_8 $$ writePluginServices(plugins, artifact.getFile())[ CD ]
Line_2 $$ private URLClassLoader buildClassLoaderFromPom(File pomFile) throws Exception -->Line_5 $$ Artifact artifact = artifacts.get(0)[ CD ]
Line_2 $$ private URLClassLoader buildClassLoaderFromPom(File pomFile) throws Exception -->Line_3 $$ List<Artifact> artifacts = resolver.resolvePom(pomFile)[ CD ]
Line_2 $$ private URLClassLoader buildClassLoaderFromPom(File pomFile) throws Exception -->Line_4 $$ URLClassLoader classLoader = createClassLoader(artifacts, pomFile.getPath())[ CD ]
