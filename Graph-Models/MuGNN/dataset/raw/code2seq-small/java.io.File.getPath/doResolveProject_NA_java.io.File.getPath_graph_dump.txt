Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_43 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_39 $$ resolutionRequest.setResolveRoot(false)[ CD ]
Line_5 $$ final AtomicReference<MavenExecutionResult> ref = new AtomicReference<MavenExecutionResult>()-->Line_60 $$ ref.set(handleException(e))[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_56 $$ project.setArtifacts(artifacts)[ CD ]
Line_24 $$ if (myWorkspaceMap != null) -->Line_25 $$ ((DefaultRepositorySystemSession) repositorySession).setWorkspaceReader(new Maven30WorkspaceReader(myWorkspaceMap))[ CD ]
Line_2 $$ public MavenExecutionResult doResolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, final List<ResolutionListener> listeners) throws RemoteException -->Line_6 $$ executeWithMavenSession(request, new Runnable() [ CD ]
Line_22 $$ if (repositorySession instanceof DefaultRepositorySystemSession) -->Line_23 $$ ((DefaultRepositorySystemSession) repositorySession).setTransferListener(new Maven30TransferListenerAdapter(myCurrentIndicator))[ CD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_44 $$ ref.set(new MavenExecutionResult(project, exceptions))[ CD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_41 $$ ArtifactResolver resolver = getComponent(ArtifactResolver.class)[ CD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_42 $$ ArtifactResolutionResult result = resolver.resolve(resolutionRequest)[ FD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_37 $$ resolutionRequest.setRemoteRepositories(project.getRemoteArtifactRepositories())[ FD ]
Line_15 $$ results = builder.build(Collections.singletonList(new File(file.getPath())), false, request.getProjectBuildingRequest())-->Line_19 $$ ProjectBuildingResult buildingResult = results.get(0)[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_36 $$ resolutionRequest.setLocalRepository(myLocalRepository)[ CD ]
Line_9 $$ ProjectBuilder builder = getComponent(ProjectBuilder.class)-->Line_15 $$ results = builder.build(Collections.singletonList(new File(file.getPath())), false, request.getProjectBuildingRequest())[ FD ]
Line_2 $$ public MavenExecutionResult doResolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, final List<ResolutionListener> listeners) throws RemoteException -->Line_3 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())[ CD ]
Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_46 $$ final DependencyResolutionResult dependencyResolutionResult = resolveDependencies(project, repositorySession)[ FD ]
Line_19 $$ ProjectBuildingResult buildingResult = results.get(0)-->Line_20 $$ MavenProject project = buildingResult.getProject()[ FD ]
Line_10 $$ CustomMaven3ModelInterpolator2 modelInterpolator = (CustomMaven3ModelInterpolator2) getComponent(ModelInterpolator.class)-->Line_12 $$ modelInterpolator.setLocalRepository(request.getLocalRepositoryPath().getAbsolutePath())[ FD ]
Line_50 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())-->Line_54 $$ resolveAsModule(artifact)[ FD ]
Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_29 $$ loadExtensions(project, exceptions)[ FD ]
Line_3 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_6 $$ executeWithMavenSession(request, new Runnable() [ FD ]
Line_50 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())-->Line_52 $$ artifact.setOptional(dependency.isOptional())[ FD ]
Line_49 $$ for (Dependency dependency : dependencies) -->Line_52 $$ artifact.setOptional(dependency.isOptional())[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_57 $$ ref.set(new MavenExecutionResult(project, dependencyResolutionResult, exceptions))[ CD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_37 $$ resolutionRequest.setRemoteRepositories(project.getRemoteArtifactRepositories())[ CD ]
Line_49 $$ for (Dependency dependency : dependencies) -->Line_51 $$ artifact.setScope(dependency.getScope())[ FD ]
Line_13 $$ List<ProjectBuildingResult> results-->Line_19 $$ ProjectBuildingResult buildingResult = results.get(0)[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_46 $$ final DependencyResolutionResult dependencyResolutionResult = resolveDependencies(project, repositorySession)[ CD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_42 $$ ArtifactResolutionResult result = resolver.resolve(resolutionRequest)[ CD ]
Line_42 $$ ArtifactResolutionResult result = resolver.resolve(resolutionRequest)-->Line_43 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_2 $$ public MavenExecutionResult doResolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, final List<ResolutionListener> listeners) throws RemoteException -->Line_64 $$ return ref.get()[ CD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_33 $$ resolutionRequest.setArtifactDependencies(project.getDependencyArtifacts())[ CD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_36 $$ resolutionRequest.setLocalRepository(myLocalRepository)[ FD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_38 $$ resolutionRequest.setListeners(listeners)[ FD ]
Line_5 $$ final AtomicReference<MavenExecutionResult> ref = new AtomicReference<MavenExecutionResult>()-->Line_44 $$ ref.set(new MavenExecutionResult(project, exceptions))[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_38 $$ resolutionRequest.setListeners(listeners)[ CD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_48 $$ Set<Artifact> artifacts = new LinkedHashSet<Artifact>(dependencies.size())[ CD ]
Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_30 $$ project.setDependencyArtifacts(project.createArtifacts(getComponent(ArtifactFactory.class), null, null))[ FD ]
Line_10 $$ CustomMaven3ModelInterpolator2 modelInterpolator = (CustomMaven3ModelInterpolator2) getComponent(ModelInterpolator.class)-->Line_11 $$ String savedLocalRepository = modelInterpolator.getLocalRepository()[ FD ]
Line_49 $$ for (Dependency dependency : dependencies) -->Line_50 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())[ FD ]
Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_34 $$ resolutionRequest.setArtifact(project.getArtifact())[ FD ]
Line_21 $$ RepositorySystemSession repositorySession = getComponent(LegacySupport.class).getRepositorySession()-->Line_22 $$ if (repositorySession instanceof DefaultRepositorySystemSession) [ FD ]
Line_22 $$ if (repositorySession instanceof DefaultRepositorySystemSession) -->Line_24 $$ if (myWorkspaceMap != null) [ CD ]
Line_41 $$ ArtifactResolver resolver = getComponent(ArtifactResolver.class)-->Line_42 $$ ArtifactResolutionResult result = resolver.resolve(resolutionRequest)[ FD ]
Line_2 $$ public MavenExecutionResult doResolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, final List<ResolutionListener> listeners) throws RemoteException -->Line_5 $$ final AtomicReference<MavenExecutionResult> ref = new AtomicReference<MavenExecutionResult>()[ CD ]
Line_46 $$ final DependencyResolutionResult dependencyResolutionResult = resolveDependencies(project, repositorySession)-->Line_47 $$ final List<Dependency> dependencies = dependencyResolutionResult.getDependencies()[ FD ]
Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_35 $$ resolutionRequest.setManagedVersionMap(project.getManagedVersionMap())[ FD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_40 $$ resolutionRequest.setResolveTransitively(true)[ FD ]
Line_21 $$ RepositorySystemSession repositorySession = getComponent(LegacySupport.class).getRepositorySession()-->Line_46 $$ final DependencyResolutionResult dependencyResolutionResult = resolveDependencies(project, repositorySession)[ FD ]
Line_3 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_12 $$ modelInterpolator.setLocalRepository(request.getLocalRepositoryPath().getAbsolutePath())[ FD ]
Line_11 $$ String savedLocalRepository = modelInterpolator.getLocalRepository()-->Line_17 $$ modelInterpolator.setLocalRepository(savedLocalRepository)[ FD ]
Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_33 $$ resolutionRequest.setArtifactDependencies(project.getDependencyArtifacts())[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_40 $$ resolutionRequest.setResolveTransitively(true)[ CD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_39 $$ resolutionRequest.setResolveRoot(false)[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_47 $$ final List<Dependency> dependencies = dependencyResolutionResult.getDependencies()[ CD ]
Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_56 $$ project.setArtifacts(artifacts)[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_43 $$ project.setArtifacts(result.getArtifacts())[ CD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_35 $$ resolutionRequest.setManagedVersionMap(project.getManagedVersionMap())[ FD ]
Line_2 $$ public MavenExecutionResult doResolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, final List<ResolutionListener> listeners) throws RemoteException -->Line_15 $$ results = builder.build(Collections.singletonList(new File(file.getPath())), false, request.getProjectBuildingRequest())[ FD ]
Line_3 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_4 $$ request.setUpdateSnapshots(myAlwaysUpdateSnapshots)[ FD ]
Line_50 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())-->Line_51 $$ artifact.setScope(dependency.getScope())[ FD ]
Line_47 $$ final List<Dependency> dependencies = dependencyResolutionResult.getDependencies()-->Line_48 $$ Set<Artifact> artifacts = new LinkedHashSet<Artifact>(dependencies.size())[ FD ]
Line_48 $$ Set<Artifact> artifacts = new LinkedHashSet<Artifact>(dependencies.size())-->Line_56 $$ project.setArtifacts(artifacts)[ FD ]
Line_2 $$ public MavenExecutionResult doResolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, final List<ResolutionListener> listeners) throws RemoteException -->Line_3 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())[ FD ]
Line_13 $$ List<ProjectBuildingResult> results-->Line_15 $$ results = builder.build(Collections.singletonList(new File(file.getPath())), false, request.getProjectBuildingRequest())[ FD ]
Line_5 $$ final AtomicReference<MavenExecutionResult> ref = new AtomicReference<MavenExecutionResult>()-->Line_64 $$ return ref.get()[ FD ]
Line_20 $$ MavenProject project = buildingResult.getProject()-->Line_37 $$ resolutionRequest.setRemoteRepositories(project.getRemoteArtifactRepositories())[ FD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_33 $$ resolutionRequest.setArtifactDependencies(project.getDependencyArtifacts())[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_35 $$ resolutionRequest.setManagedVersionMap(project.getManagedVersionMap())[ CD ]
Line_48 $$ Set<Artifact> artifacts = new LinkedHashSet<Artifact>(dependencies.size())-->Line_53 $$ artifacts.add(artifact)[ FD ]
Line_50 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())-->Line_53 $$ artifacts.add(artifact)[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()[ CD ]
Line_5 $$ final AtomicReference<MavenExecutionResult> ref = new AtomicReference<MavenExecutionResult>()-->Line_57 $$ ref.set(new MavenExecutionResult(project, dependencyResolutionResult, exceptions))[ FD ]
Line_2 $$ public MavenExecutionResult doResolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, final List<ResolutionListener> listeners) throws RemoteException -->Line_4 $$ request.setUpdateSnapshots(myAlwaysUpdateSnapshots)[ CD ]
Line_2 $$ public MavenExecutionResult doResolveProject(@NotNull final File file, @NotNull final List<String> activeProfiles, @NotNull final List<String> inactiveProfiles, final List<ResolutionListener> listeners) throws RemoteException -->Line_38 $$ resolutionRequest.setListeners(listeners)[ FD ]
Line_31 $$ if (USE_MVN2_COMPATIBLE_DEPENDENCY_RESOLVING) -->Line_34 $$ resolutionRequest.setArtifact(project.getArtifact())[ CD ]
Line_28 $$ List<Exception> exceptions = new ArrayList<Exception>()-->Line_29 $$ loadExtensions(project, exceptions)[ FD ]
Line_10 $$ CustomMaven3ModelInterpolator2 modelInterpolator = (CustomMaven3ModelInterpolator2) getComponent(ModelInterpolator.class)-->Line_17 $$ modelInterpolator.setLocalRepository(savedLocalRepository)[ FD ]
Line_3 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_15 $$ results = builder.build(Collections.singletonList(new File(file.getPath())), false, request.getProjectBuildingRequest())[ FD ]
Line_32 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_34 $$ resolutionRequest.setArtifact(project.getArtifact())[ FD ]
