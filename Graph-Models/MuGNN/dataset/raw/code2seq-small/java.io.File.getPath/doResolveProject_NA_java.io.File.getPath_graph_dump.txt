Line_60 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())-->Line_64 $$ resolveAsModule(artifact)[ FD ]
Line_56 $$ final DependencyResolutionResult dependencyResolutionResult = resolveDependencies(project, repositorySession)-->Line_57 $$ final List<Dependency> dependencies = dependencyResolutionResult.getDependencies()[ FD ]
Line_6 $$ final AtomicReference<MavenExecutionResult> ref = new AtomicReference<MavenExecutionResult>()-->Line_67 $$ ref.set(new MavenExecutionResult(project, dependencyResolutionResult, exceptions))[ FD ]
Line_59 $$ for (Dependency dependency : dependencies) -->Line_61 $$ artifact.setScope(dependency.getScope())[ FD ]
Line_26 $$ RepositorySystemSession repositorySession = getComponent(LegacySupport.class).getRepositorySession()-->Line_56 $$ final DependencyResolutionResult dependencyResolutionResult = resolveDependencies(project, repositorySession)[ FD ]
Line_60 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())-->Line_63 $$ artifacts.add(artifact)[ FD ]
Line_17 $$ List<ProjectBuildingResult> results-->Line_24 $$ ProjectBuildingResult buildingResult = results.get(0)[ FD ]
Line_25 $$ MavenProject project = buildingResult.getProject()-->Line_42 $$ resolutionRequest.setArtifactDependencies(project.getDependencyArtifacts())[ FD ]
Line_26 $$ RepositorySystemSession repositorySession = getComponent(LegacySupport.class).getRepositorySession()-->Line_27 $$ if (repositorySession instanceof DefaultRepositorySystemSession) [ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_46 $$ resolutionRequest.setRemoteRepositories(project.getRemoteArtifactRepositories())[ FD ]
Line_6 $$ final AtomicReference<MavenExecutionResult> ref = new AtomicReference<MavenExecutionResult>()-->Line_74 $$ return ref.get()[ FD ]
Line_4 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_5 $$ request.setUpdateSnapshots(myAlwaysUpdateSnapshots)[ FD ]
Line_14 $$ CustomMaven3ModelInterpolator2 modelInterpolator = (CustomMaven3ModelInterpolator2) getComponent(ModelInterpolator.class)-->Line_15 $$ String savedLocalRepository = modelInterpolator.getLocalRepository()[ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_51 $$ ArtifactResolutionResult result = resolver.resolve(resolutionRequest)[ FD ]
Line_57 $$ final List<Dependency> dependencies = dependencyResolutionResult.getDependencies()-->Line_58 $$ Set<Artifact> artifacts = new LinkedHashSet<Artifact>(dependencies.size())[ FD ]
Line_29 $$ if (myWorkspaceMap != null) -->Line_30 $$ ((DefaultRepositorySystemSession) repositorySession).setWorkspaceReader(new Maven30WorkspaceReader(myWorkspaceMap))[ CD ]
Line_27 $$ if (repositorySession instanceof DefaultRepositorySystemSession) -->Line_28 $$ ((DefaultRepositorySystemSession) repositorySession).setTransferListener(new Maven30TransferListenerAdapter(myCurrentIndicator))[ CD ]
Line_14 $$ CustomMaven3ModelInterpolator2 modelInterpolator = (CustomMaven3ModelInterpolator2) getComponent(ModelInterpolator.class)-->Line_22 $$ modelInterpolator.setLocalRepository(savedLocalRepository)[ FD ]
Line_25 $$ MavenProject project = buildingResult.getProject()-->Line_44 $$ resolutionRequest.setManagedVersionMap(project.getManagedVersionMap())[ FD ]
Line_14 $$ CustomMaven3ModelInterpolator2 modelInterpolator = (CustomMaven3ModelInterpolator2) getComponent(ModelInterpolator.class)-->Line_16 $$ modelInterpolator.setLocalRepository(request.getLocalRepositoryPath().getAbsolutePath())[ FD ]
Line_27 $$ if (repositorySession instanceof DefaultRepositorySystemSession) -->Line_29 $$ if (myWorkspaceMap != null) [ CD ]
Line_25 $$ MavenProject project = buildingResult.getProject()-->Line_66 $$ project.setArtifacts(artifacts)[ FD ]
Line_4 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_16 $$ modelInterpolator.setLocalRepository(request.getLocalRepositoryPath().getAbsolutePath())[ FD ]
Line_15 $$ String savedLocalRepository = modelInterpolator.getLocalRepository()-->Line_22 $$ modelInterpolator.setLocalRepository(savedLocalRepository)[ FD ]
Line_50 $$ ArtifactResolver resolver = getComponent(ArtifactResolver.class)-->Line_51 $$ ArtifactResolutionResult result = resolver.resolve(resolutionRequest)[ FD ]
Line_33 $$ List<Exception> exceptions = new ArrayList<Exception>()-->Line_34 $$ loadExtensions(project, exceptions)[ FD ]
Line_6 $$ final AtomicReference<MavenExecutionResult> ref = new AtomicReference<MavenExecutionResult>()-->Line_70 $$ ref.set(handleException(e))[ FD ]
Line_58 $$ Set<Artifact> artifacts = new LinkedHashSet<Artifact>(dependencies.size())-->Line_66 $$ project.setArtifacts(artifacts)[ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_49 $$ resolutionRequest.setResolveTransitively(true)[ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_45 $$ resolutionRequest.setLocalRepository(myLocalRepository)[ FD ]
Line_25 $$ MavenProject project = buildingResult.getProject()-->Line_56 $$ final DependencyResolutionResult dependencyResolutionResult = resolveDependencies(project, repositorySession)[ FD ]
Line_25 $$ MavenProject project = buildingResult.getProject()-->Line_46 $$ resolutionRequest.setRemoteRepositories(project.getRemoteArtifactRepositories())[ FD ]
Line_60 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())-->Line_62 $$ artifact.setOptional(dependency.isOptional())[ FD ]
Line_59 $$ for (Dependency dependency : dependencies) -->Line_62 $$ artifact.setOptional(dependency.isOptional())[ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_43 $$ resolutionRequest.setArtifact(project.getArtifact())[ FD ]
Line_25 $$ MavenProject project = buildingResult.getProject()-->Line_34 $$ loadExtensions(project, exceptions)[ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_47 $$ resolutionRequest.setListeners(listeners)[ FD ]
Line_4 $$ final MavenExecutionRequest request = createRequest(file, activeProfiles, inactiveProfiles, Collections.<String>emptyList())-->Line_7 $$ executeWithMavenSession(request, new Runnable() [ FD ]
Line_60 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())-->Line_61 $$ artifact.setScope(dependency.getScope())[ FD ]
Line_25 $$ MavenProject project = buildingResult.getProject()-->Line_43 $$ resolutionRequest.setArtifact(project.getArtifact())[ FD ]
Line_51 $$ ArtifactResolutionResult result = resolver.resolve(resolutionRequest)-->Line_52 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_44 $$ resolutionRequest.setManagedVersionMap(project.getManagedVersionMap())[ FD ]
Line_24 $$ ProjectBuildingResult buildingResult = results.get(0)-->Line_25 $$ MavenProject project = buildingResult.getProject()[ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_48 $$ resolutionRequest.setResolveRoot(false)[ FD ]
Line_25 $$ MavenProject project = buildingResult.getProject()-->Line_52 $$ project.setArtifacts(result.getArtifacts())[ FD ]
Line_59 $$ for (Dependency dependency : dependencies) -->Line_60 $$ final Artifact artifact = RepositoryUtils.toArtifact(dependency.getArtifact())[ FD ]
Line_41 $$ ArtifactResolutionRequest resolutionRequest = new ArtifactResolutionRequest()-->Line_42 $$ resolutionRequest.setArtifactDependencies(project.getDependencyArtifacts())[ FD ]
Line_58 $$ Set<Artifact> artifacts = new LinkedHashSet<Artifact>(dependencies.size())-->Line_63 $$ artifacts.add(artifact)[ FD ]
