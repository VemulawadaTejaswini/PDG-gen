Line_6 $$ if (moduleOutputDir == null) -->Line_7 $$ context.processMessage(new CompilerMessage(builder.getPresentableName(), BuildMessage.Kind.ERROR, "Output directory not specified for module " + target.getModule().getName()))[ CD ]
Line_5 $$ File moduleOutputDir = target.getOutputDir()-->Line_10 $$ moduleOutputDir.mkdirs()[ FD ]
Line_2 $$ public static Map<ModuleBuildTarget, String> getCanonicalModuleOutputs(CompileContext context, ModuleChunk chunk, Builder builder) -->Line_7 $$ context.processMessage(new CompilerMessage(builder.getPresentableName(), BuildMessage.Kind.ERROR, "Output directory not specified for module " + target.getModule().getName()))[ FD ]
Line_5 $$ File moduleOutputDir = target.getOutputDir()-->Line_11 $$ String moduleOutputPath = FileUtil.toCanonicalPath(moduleOutputDir.getPath())[ FD ]
Line_2 $$ public static Map<ModuleBuildTarget, String> getCanonicalModuleOutputs(CompileContext context, ModuleChunk chunk, Builder builder) -->Line_4 $$ for (ModuleBuildTarget target : chunk.getTargets()) [ FD ]
Line_5 $$ File moduleOutputDir = target.getOutputDir()-->Line_6 $$ if (moduleOutputDir == null) [ FD ]
Line_4 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_5 $$ File moduleOutputDir = target.getOutputDir()[ FD ]
Line_3 $$ Map<ModuleBuildTarget, String> finalOutputs = new LinkedHashMap<ModuleBuildTarget, String>()-->Line_13 $$ finalOutputs.put(target, moduleOutputPath.endsWith("/") ? moduleOutputPath : moduleOutputPath + "/")[ FD ]
Line_2 $$ public static Map<ModuleBuildTarget, String> getCanonicalModuleOutputs(CompileContext context, ModuleChunk chunk, Builder builder) -->Line_3 $$ Map<ModuleBuildTarget, String> finalOutputs = new LinkedHashMap<ModuleBuildTarget, String>()[ CD ]
Line_4 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_7 $$ context.processMessage(new CompilerMessage(builder.getPresentableName(), BuildMessage.Kind.ERROR, "Output directory not specified for module " + target.getModule().getName()))[ FD ]
Line_4 $$ for (ModuleBuildTarget target : chunk.getTargets()) -->Line_13 $$ finalOutputs.put(target, moduleOutputPath.endsWith("/") ? moduleOutputPath : moduleOutputPath + "/")[ FD ]
Line_2 $$ public static Map<ModuleBuildTarget, String> getCanonicalModuleOutputs(CompileContext context, ModuleChunk chunk, Builder builder) -->Line_15 $$ return finalOutputs[ CD ]
Line_6 $$ if (moduleOutputDir == null) -->Line_8 $$ return null[ CD ]
Line_11 $$ String moduleOutputPath = FileUtil.toCanonicalPath(moduleOutputDir.getPath())-->Line_13 $$ finalOutputs.put(target, moduleOutputPath.endsWith("/") ? moduleOutputPath : moduleOutputPath + "/")[ FD ]
