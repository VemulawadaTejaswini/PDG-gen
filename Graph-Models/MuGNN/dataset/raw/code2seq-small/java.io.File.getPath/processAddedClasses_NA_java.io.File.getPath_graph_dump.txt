Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_31 $$ if (!candidates.isEmpty()) [ FD ]
Line_20 $$ final Collection<File> newSources = myDelta.myClassToSourceFile.get(c.name)-->Line_39 $$ if (newSources != null) [ FD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_19 $$ candidates.removeAll(myCompiledFiles)[ CD ]
Line_76 $$ if (depClasses != null) -->Line_77 $$ affectCorrespondingSourceFiles(depClasses)[ CD ]
Line_24 $$ final Set<File> nonExistentOrOutOfScope = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_27 $$ nonExistentOrOutOfScope.add(candidate)[ FD ]
Line_2 $$ private void processAddedClasses(final DiffState state, File srcFile) -->Line_3 $$ final Collection<ClassRepr> addedClasses = state.myClassDiff.added()[ CD ]
Line_44 $$ final StringBuilder msg = new StringBuilder()-->Line_47 $$ msg.append(file.getPath()).append("; ")[ FD ]
Line_75 $$ final TIntHashSet depClasses = myClassToClassDependency.get(qName)-->Line_77 $$ affectCorrespondingSourceFiles(depClasses)[ FD ]
Line_25 $$ for (final File candidate : candidates) -->Line_26 $$ if (!candidate.exists() || !myFilter.belongsToCurrentTargetChunk(candidate)) [ FD ]
Line_31 $$ if (!candidates.isEmpty()) -->Line_36 $$ if (currentlyMapped != null) [ CD ]
Line_72 $$ toAffect.forEach(new TIntProcedure() -->Line_79 $$ return true[ CD ]
Line_2 $$ private void processAddedClasses(final DiffState state, File srcFile) -->Line_7 $$ debug("Processing added classes:")[ CD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_24 $$ final Set<File> nonExistentOrOutOfScope = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_46 $$ for (File file : candidates) -->Line_47 $$ msg.append(file.getPath()).append("; ")[ FD ]
Line_64 $$ if (!myEasyMode && !c.isAnonymous() && !c.isLocal()) -->Line_65 $$ final TIntHashSet toAffect = new TIntHashSet()[ CD ]
Line_31 $$ if (!candidates.isEmpty()) -->Line_51 $$ myAffectedFiles.addAll(candidates)[ CD ]
Line_75 $$ final TIntHashSet depClasses = myClassToClassDependency.get(qName)-->Line_76 $$ if (depClasses != null) [ FD ]
Line_39 $$ if (newSources != null) -->Line_40 $$ candidates.addAll(newSources)[ CD ]
Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_30 $$ candidates.removeAll(nonExistentOrOutOfScope)[ FD ]
Line_15 $$ final Collection<File> currentlyMapped = myClassToSourceFile.get(c.name)-->Line_16 $$ if (currentlyMapped != null) [ FD ]
Line_31 $$ if (!candidates.isEmpty()) -->Line_39 $$ if (newSources != null) [ CD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_15 $$ final Collection<File> currentlyMapped = myClassToSourceFile.get(c.name)[ CD ]
Line_64 $$ if (!myEasyMode && !c.isAnonymous() && !c.isLocal()) -->Line_66 $$ toAffect.add(c.name)[ CD ]
Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_37 $$ candidates.addAll(currentlyMapped)[ FD ]
Line_67 $$ final TIntHashSet classes = myShortClassNameIndex.get(myContext.get(c.getShortName()))-->Line_68 $$ if (classes != null) [ FD ]
Line_64 $$ if (!myEasyMode && !c.isAnonymous() && !c.isLocal()) -->Line_67 $$ final TIntHashSet classes = myShortClassNameIndex.get(myContext.get(c.getShortName()))[ CD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_24 $$ final Set<File> nonExistentOrOutOfScope = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_42 $$ candidates.removeAll(nonExistentOrOutOfScope)[ FD ]
Line_43 $$ if (myDebugS.isDebugEnabled()) -->Line_44 $$ final StringBuilder msg = new StringBuilder()[ CD ]
Line_3 $$ final Collection<ClassRepr> addedClasses = state.myClassDiff.added()-->Line_4 $$ if (addedClasses.isEmpty()) [ FD ]
Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_17 $$ candidates.addAll(currentlyMapped)[ FD ]
Line_12 $$ for (ClassRepr c : addedClasses) -->Line_61 $$ for (final int sup : c.getSupers()) [ FD ]
Line_36 $$ if (currentlyMapped != null) -->Line_37 $$ candidates.addAll(currentlyMapped)[ CD ]
Line_44 $$ final StringBuilder msg = new StringBuilder()-->Line_45 $$ msg.append("Possibly duplicated classes; Scheduling for recompilation sources: ")[ FD ]
Line_65 $$ final TIntHashSet toAffect = new TIntHashSet()-->Line_66 $$ toAffect.add(c.name)[ FD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_30 $$ candidates.removeAll(nonExistentOrOutOfScope)[ CD ]
Line_65 $$ final TIntHashSet toAffect = new TIntHashSet()-->Line_72 $$ toAffect.forEach(new TIntProcedure() [ FD ]
Line_2 $$ private void processAddedClasses(final DiffState state, File srcFile) -->Line_8 $$ if (!myEasyMode && myFilter != null) [ CD ]
Line_43 $$ if (myDebugS.isDebugEnabled()) -->Line_49 $$ debug(msg.toString())[ CD ]
Line_20 $$ final Collection<File> newSources = myDelta.myClassToSourceFile.get(c.name)-->Line_40 $$ candidates.addAll(newSources)[ FD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_20 $$ final Collection<File> newSources = myDelta.myClassToSourceFile.get(c.name)[ CD ]
Line_61 $$ for (final int sup : c.getSupers()) -->Line_62 $$ myDelta.registerAddedSuperClass(c.name, sup)[ FD ]
Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_19 $$ candidates.removeAll(myCompiledFiles)[ FD ]
Line_43 $$ if (myDebugS.isDebugEnabled()) -->Line_45 $$ msg.append("Possibly duplicated classes; Scheduling for recompilation sources: ")[ CD ]
Line_12 $$ for (ClassRepr c : addedClasses) -->Line_60 $$ myDelta.addAddedClass(c)[ FD ]
Line_64 $$ if (!myEasyMode && !c.isAnonymous() && !c.isLocal()) -->Line_72 $$ toAffect.forEach(new TIntProcedure() [ CD ]
Line_44 $$ final StringBuilder msg = new StringBuilder()-->Line_49 $$ debug(msg.toString())[ FD ]
Line_15 $$ final Collection<File> currentlyMapped = myClassToSourceFile.get(c.name)-->Line_37 $$ candidates.addAll(currentlyMapped)[ FD ]
Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_51 $$ myAffectedFiles.addAll(candidates)[ FD ]
Line_72 $$ toAffect.forEach(new TIntProcedure() -->Line_75 $$ final TIntHashSet depClasses = myClassToClassDependency.get(qName)[ CD ]
Line_12 $$ for (ClassRepr c : addedClasses) -->Line_67 $$ final TIntHashSet classes = myShortClassNameIndex.get(myContext.get(c.getShortName()))[ FD ]
Line_21 $$ if (newSources != null) -->Line_22 $$ candidates.removeAll(newSources)[ CD ]
Line_26 $$ if (!candidate.exists() || !myFilter.belongsToCurrentTargetChunk(candidate)) -->Line_27 $$ nonExistentOrOutOfScope.add(candidate)[ CD ]
Line_2 $$ private void processAddedClasses(final DiffState state, File srcFile) -->Line_4 $$ if (addedClasses.isEmpty()) [ CD ]
Line_15 $$ final Collection<File> currentlyMapped = myClassToSourceFile.get(c.name)-->Line_36 $$ if (currentlyMapped != null) [ FD ]
Line_15 $$ final Collection<File> currentlyMapped = myClassToSourceFile.get(c.name)-->Line_17 $$ candidates.addAll(currentlyMapped)[ FD ]
Line_12 $$ for (ClassRepr c : addedClasses) -->Line_64 $$ if (!myEasyMode && !c.isAnonymous() && !c.isLocal()) [ FD ]
Line_4 $$ if (addedClasses.isEmpty()) -->Line_5 $$ return[ CD ]
Line_16 $$ if (currentlyMapped != null) -->Line_17 $$ candidates.addAll(currentlyMapped)[ CD ]
Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_22 $$ candidates.removeAll(newSources)[ FD ]
Line_25 $$ for (final File candidate : candidates) -->Line_27 $$ nonExistentOrOutOfScope.add(candidate)[ FD ]
Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_42 $$ candidates.removeAll(nonExistentOrOutOfScope)[ FD ]
Line_31 $$ if (!candidates.isEmpty()) -->Line_43 $$ if (myDebugS.isDebugEnabled()) [ CD ]
Line_2 $$ private void processAddedClasses(final DiffState state, File srcFile) -->Line_84 $$ debug("End of added classes processing.")[ CD ]
Line_14 $$ final Set<File> candidates = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_40 $$ candidates.addAll(newSources)[ FD ]
Line_64 $$ if (!myEasyMode && !c.isAnonymous() && !c.isLocal()) -->Line_68 $$ if (classes != null) [ CD ]
Line_20 $$ final Collection<File> newSources = myDelta.myClassToSourceFile.get(c.name)-->Line_21 $$ if (newSources != null) [ FD ]
Line_24 $$ final Set<File> nonExistentOrOutOfScope = new THashSet<File>(FileUtil.FILE_HASHING_STRATEGY)-->Line_30 $$ candidates.removeAll(nonExistentOrOutOfScope)[ FD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_31 $$ if (!candidates.isEmpty()) [ CD ]
Line_20 $$ final Collection<File> newSources = myDelta.myClassToSourceFile.get(c.name)-->Line_22 $$ candidates.removeAll(newSources)[ FD ]
Line_12 $$ for (ClassRepr c : addedClasses) -->Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) [ FD ]
Line_72 $$ toAffect.forEach(new TIntProcedure() -->Line_75 $$ final TIntHashSet depClasses = myClassToClassDependency.get(qName)[ FD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_21 $$ if (newSources != null) [ CD ]
Line_72 $$ toAffect.forEach(new TIntProcedure() -->Line_76 $$ if (depClasses != null) [ CD ]
Line_13 $$ if (!c.isLocal() && !c.isAnonymous() && isEmpty(c.getOuterClassName())) -->Line_16 $$ if (currentlyMapped != null) [ CD ]
Line_31 $$ if (!candidates.isEmpty()) -->Line_42 $$ candidates.removeAll(nonExistentOrOutOfScope)[ CD ]
