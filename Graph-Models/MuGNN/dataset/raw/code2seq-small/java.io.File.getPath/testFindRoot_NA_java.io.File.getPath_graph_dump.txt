Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_11 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_20 $$ root2 = myFS.findFileByPath("C:\\")[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")[ CD ]
Line_29 $$ root = myFS.findFileByPath("/")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")-->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_33 $$ root = myFS.findFileByPath("")[ FD ]
Line_5 $$ VirtualFile root2-->Line_10 $$ assertNotNull(root2)[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_17 $$ root = myFS.findFileByPath("c:")[ CD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")[ FD ]
Line_20 $$ root2 = myFS.findFileByPath("C:\\")-->Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_18 $$ assertNotNull(root)[ CD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_36 $$ assertNotNull(getVirtualFile(jarFile))[ CD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_19 $$ assertEquals("C:/", root.getPath())[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")[ CD ]
Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")-->Line_42 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/")[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_14 $$ assertNotNull(root)[ FD ]
Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_21 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_38 $$ assertNotNull(root)[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")[ CD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")[ FD ]
Line_35 $$ File jarFile = IoTestUtil.createTestJar()-->Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_8 $$ assertNotNull(root)[ CD ]
Line_35 $$ File jarFile = IoTestUtil.createTestJar()-->Line_42 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/")[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_29 $$ root = myFS.findFileByPath("/")[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))[ FD ]
Line_33 $$ root = myFS.findFileByPath("")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ CD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_33 $$ root = myFS.findFileByPath("")[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_18 $$ assertNotNull(root)[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")[ CD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ CD ]
Line_33 $$ root = myFS.findFileByPath("")-->Line_34 $$ assertNotNull(root)[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_34 $$ assertNotNull(root)[ FD ]
Line_5 $$ VirtualFile root2-->Line_21 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_34 $$ assertNotNull(root)[ CD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_17 $$ root = myFS.findFileByPath("c:")[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_19 $$ assertEquals("C:/", root.getPath())[ CD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_14 $$ assertNotNull(root)[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_24 $$ assertNotNull(root)[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_20 $$ root2 = myFS.findFileByPath("C:\\")-->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_33 $$ root = myFS.findFileByPath("")[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_6 $$ if (SystemInfo.isWindows) [ CD ]
Line_20 $$ root2 = myFS.findFileByPath("C:\\")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_5 $$ VirtualFile root2-->Line_20 $$ root2 = myFS.findFileByPath("C:\\")[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_17 $$ root = myFS.findFileByPath("c:")[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_33 $$ root = myFS.findFileByPath("")[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_24 $$ assertNotNull(root)[ CD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_31 $$ assertEquals("/", root.getPath())[ FD ]
Line_5 $$ VirtualFile root2-->Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")[ FD ]
Line_5 $$ VirtualFile root2-->Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_31 $$ assertEquals("/", root.getPath())[ FD ]
Line_28 $$ if (SystemInfo.isUnix) -->Line_30 $$ assertNotNull(root)[ CD ]
Line_42 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_42 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/")[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_38 $$ assertNotNull(root)[ FD ]
Line_28 $$ if (SystemInfo.isUnix) -->Line_31 $$ assertEquals("/", root.getPath())[ CD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_28 $$ if (SystemInfo.isUnix) [ CD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_31 $$ assertEquals("/", root.getPath())[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_34 $$ assertNotNull(root)[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_17 $$ root = myFS.findFileByPath("c:")[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")-->Line_38 $$ assertNotNull(root)[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_33 $$ root = myFS.findFileByPath("")[ CD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")[ FD ]
Line_33 $$ root = myFS.findFileByPath("")-->Line_38 $$ assertNotNull(root)[ FD ]
Line_5 $$ VirtualFile root2-->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_20 $$ root2 = myFS.findFileByPath("C:\\")[ CD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_11 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_15 $$ RefreshQueue.getInstance().processSingleEvent(new VFileDeleteEvent(this, root, false))[ CD ]
Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")-->Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")[ FD ]
Line_5 $$ VirtualFile root2-->Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_8 $$ assertNotNull(root)[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_4 $$ assertNull(root)[ CD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_14 $$ assertNotNull(root)[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_24 $$ assertNotNull(root)[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_11 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))[ CD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))[ FD ]
Line_29 $$ root = myFS.findFileByPath("/")-->Line_30 $$ assertNotNull(root)[ FD ]
Line_33 $$ root = myFS.findFileByPath("")-->Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_35 $$ File jarFile = IoTestUtil.createTestJar()[ CD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_38 $$ assertNotNull(root)[ FD ]
Line_29 $$ root = myFS.findFileByPath("/")-->Line_38 $$ assertNotNull(root)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_20 $$ root2 = myFS.findFileByPath("C:\\")-->Line_42 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/")[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_18 $$ assertNotNull(root)[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_11 $$ assertEquals(String.valueOf(root2), root, root2)[ CD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_5 $$ VirtualFile root2-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_28 $$ if (SystemInfo.isUnix) -->Line_29 $$ root = myFS.findFileByPath("/")[ CD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")[ CD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_19 $$ assertEquals("C:/", root.getPath())[ FD ]
Line_29 $$ root = myFS.findFileByPath("/")-->Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")[ FD ]
Line_29 $$ root = myFS.findFileByPath("/")-->Line_34 $$ assertNotNull(root)[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_18 $$ assertNotNull(root)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_4 $$ assertNull(root)[ FD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_5 $$ VirtualFile root2[ CD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_30 $$ assertNotNull(root)[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_21 $$ assertSame(String.valueOf(root), root, root2)[ CD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_21 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_38 $$ assertNotNull(root)[ CD ]
Line_41 $$ if (!SystemInfo.isFileSystemCaseSensitive) -->Line_42 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/")[ CD ]
Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")-->Line_42 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/")[ FD ]
Line_5 $$ VirtualFile root2-->Line_42 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().toUpperCase(Locale.US) + "!/")[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_31 $$ assertEquals("/", root.getPath())[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_8 $$ assertNotNull(root)[ FD ]
Line_16 $$ if (new File("c:").exists()) -->Line_22 $$ VirtualFileManager fm = VirtualFileManager.getInstance()[ CD ]
Line_35 $$ File jarFile = IoTestUtil.createTestJar()-->Line_36 $$ assertNotNull(getVirtualFile(jarFile))[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_21 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_34 $$ assertNotNull(root)[ FD ]
Line_22 $$ VirtualFileManager fm = VirtualFileManager.getInstance()-->Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")[ FD ]
Line_35 $$ File jarFile = IoTestUtil.createTestJar()-->Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_30 $$ assertNotNull(root)[ FD ]
Line_41 $$ if (!SystemInfo.isFileSystemCaseSensitive) -->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ CD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_10 $$ assertNotNull(root2)[ FD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_41 $$ if (!SystemInfo.isFileSystemCaseSensitive) [ CD ]
Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_34 $$ assertNotNull(root)[ FD ]
Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_12 $$ RefreshQueue.getInstance().processSingleEvent(new VFileDeleteEvent(this, root, false))[ CD ]
Line_2 $$ public void testFindRoot() throws IOException -->Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")[ CD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_21 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_20 $$ root2 = myFS.findFileByPath("C:\\")-->Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_29 $$ root = myFS.findFileByPath("/")[ FD ]
Line_39 $$ root2 = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath().replace(File.separator, "//") + "!/")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_20 $$ root2 = myFS.findFileByPath("C:\\")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_29 $$ root = myFS.findFileByPath("/")-->Line_31 $$ assertEquals("/", root.getPath())[ FD ]
Line_20 $$ root2 = myFS.findFileByPath("C:\\")-->Line_21 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_33 $$ root = myFS.findFileByPath("")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_24 $$ assertNotNull(root)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_30 $$ assertNotNull(root)[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_18 $$ assertNotNull(root)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_38 $$ assertNotNull(root)[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_16 $$ if (new File("c:").exists()) [ CD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_40 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_29 $$ root = myFS.findFileByPath("/")[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_30 $$ assertNotNull(root)[ FD ]
Line_9 $$ root2 = myFS.findFileByPath("//UNIT-133")-->Line_25 $$ root2 = fm.findFileByUrl("file:///c:/")[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_13 $$ root = myFS.findFileByIoFile(new File("\\\\unit-133"))-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_29 $$ root = myFS.findFileByPath("/")-->Line_33 $$ root = myFS.findFileByPath("")[ FD ]
Line_5 $$ VirtualFile root2-->Line_11 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_24 $$ assertNotNull(root)[ FD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_29 $$ root = myFS.findFileByPath("/")[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_14 $$ assertNotNull(root)[ CD ]
Line_7 $$ root = myFS.findFileByPath("\\\\unit-133")-->Line_26 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_6 $$ if (SystemInfo.isWindows) -->Line_10 $$ assertNotNull(root2)[ CD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_37 $$ root = VirtualFileManager.getInstance().findFileByUrl("jar://" + jarFile.getPath() + "!/")[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_21 $$ assertSame(String.valueOf(root), root, root2)[ FD ]
Line_29 $$ root = myFS.findFileByPath("/")-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_5 $$ VirtualFile root2-->Line_43 $$ assertEquals(String.valueOf(root2), root, root2)[ FD ]
Line_3 $$ VirtualFile root = myFS.findFileByPath("wrong_path")-->Line_19 $$ assertEquals("C:/", root.getPath())[ FD ]
Line_17 $$ root = myFS.findFileByPath("c:")-->Line_19 $$ assertEquals("C:/", root.getPath())[ FD ]
