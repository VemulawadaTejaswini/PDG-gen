Line_3 $$ final File src = new File(new File(file, LIB_DIR_NAME), SRC_DIR_NAME)-->Line_6 $$ File[] srcs = src.listFiles(new FileFilter() [ FD ]
Line_18 $$ File jarFile = srcs[i]-->Line_21 $$ String path = jarFile.getAbsolutePath().replace(File.separatorChar, '/') + JarFileSystem.JAR_SEPARATOR[ FD ]
Line_2 $$ private static void addSources(File file, SdkModificator sdkModificator) -->Line_6 $$ File[] srcs = src.listFiles(new FileFilter() [ CD ]
Line_20 $$ JarFileSystem jarFileSystem = JarFileSystem.getInstance()-->Line_22 $$ jarFileSystem.setNoCopyJarForPath(path)[ FD ]
Line_21 $$ String path = jarFile.getAbsolutePath().replace(File.separatorChar, '/') + JarFileSystem.JAR_SEPARATOR-->Line_23 $$ VirtualFile vFile = jarFileSystem.findFileByPath(path)[ FD ]
Line_17 $$ for (int i = 0; srcs != null && i < srcs.length; i++) -->Line_19 $$ if (jarFile.exists()) [ CD ]
Line_18 $$ File jarFile = srcs[i]-->Line_19 $$ if (jarFile.exists()) [ FD ]
Line_2 $$ private static void addSources(File file, SdkModificator sdkModificator) -->Line_3 $$ final File src = new File(new File(file, LIB_DIR_NAME), SRC_DIR_NAME)[ CD ]
Line_19 $$ if (jarFile.exists()) -->Line_22 $$ jarFileSystem.setNoCopyJarForPath(path)[ CD ]
Line_17 $$ for (int i = 0; srcs != null && i < srcs.length; i++) -->Line_18 $$ File jarFile = srcs[i][ CD ]
Line_4 $$ if (!src.exists())-->Line_5 $$ return[ CD ]
Line_19 $$ if (jarFile.exists()) -->Line_20 $$ JarFileSystem jarFileSystem = JarFileSystem.getInstance()[ CD ]
Line_6 $$ File[] srcs = src.listFiles(new FileFilter() -->Line_14 $$ return path.endsWith(".jar") || path.endsWith(".zip")[ CD ]
Line_3 $$ final File src = new File(new File(file, LIB_DIR_NAME), SRC_DIR_NAME)-->Line_4 $$ if (!src.exists())[ FD ]
Line_23 $$ VirtualFile vFile = jarFileSystem.findFileByPath(path)-->Line_24 $$ sdkModificator.addRoot(vFile, OrderRootType.SOURCES)[ FD ]
Line_2 $$ private static void addSources(File file, SdkModificator sdkModificator) -->Line_4 $$ if (!src.exists())[ CD ]
Line_19 $$ if (jarFile.exists()) -->Line_23 $$ VirtualFile vFile = jarFileSystem.findFileByPath(path)[ CD ]
Line_21 $$ String path = jarFile.getAbsolutePath().replace(File.separatorChar, '/') + JarFileSystem.JAR_SEPARATOR-->Line_22 $$ jarFileSystem.setNoCopyJarForPath(path)[ FD ]
Line_19 $$ if (jarFile.exists()) -->Line_21 $$ String path = jarFile.getAbsolutePath().replace(File.separatorChar, '/') + JarFileSystem.JAR_SEPARATOR[ CD ]
Line_2 $$ private static void addSources(File file, SdkModificator sdkModificator) -->Line_17 $$ for (int i = 0; srcs != null && i < srcs.length; i++) [ CD ]
Line_2 $$ private static void addSources(File file, SdkModificator sdkModificator) -->Line_24 $$ sdkModificator.addRoot(vFile, OrderRootType.SOURCES)[ FD ]
Line_20 $$ JarFileSystem jarFileSystem = JarFileSystem.getInstance()-->Line_23 $$ VirtualFile vFile = jarFileSystem.findFileByPath(path)[ FD ]
Line_19 $$ if (jarFile.exists()) -->Line_24 $$ sdkModificator.addRoot(vFile, OrderRootType.SOURCES)[ CD ]
