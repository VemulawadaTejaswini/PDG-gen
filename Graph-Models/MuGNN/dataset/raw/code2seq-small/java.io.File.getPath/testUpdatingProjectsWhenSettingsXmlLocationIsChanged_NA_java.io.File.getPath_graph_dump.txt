Line_8 $$ MavenProject parentNode = roots.get(0)-->Line_14 $$ assertUnorderedPathsAreEqual(parentNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/$[ FD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_15 $$ assertUnorderedPathsAreEqual(childNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/m/$[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_4 $$ createModulePom("m", "<groupId>test</groupId>" + "<artifactId>m</artifactId>" + "<version>1</version>" + "<parent>" + "  <groupId>test</groupId>" + "  <artifactId>project</artifactId>" + "  <version>1</version>" + "</parent>" + "<build>" + "  <sourceDirectory>$[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_13 $$ waitForReadingCompletion()[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_16 $$ getMavenGeneralSettings().setUserSettingsFile(new File(myDir, "settings.xml").getPath())[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_12 $$ getMavenGeneralSettings().setUserSettingsFile("")[ CD ]
Line_9 $$ MavenProject childNode = myProjectsTree.getModules(roots.get(0)).get(0)-->Line_15 $$ assertUnorderedPathsAreEqual(childNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/m/$[ FD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_7 $$ List<MavenProject> roots = myProjectsTree.getRootProjects()[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_18 $$ assertUnorderedPathsAreEqual(parentNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/value1")))[ CD ]
Line_9 $$ MavenProject childNode = myProjectsTree.getModules(roots.get(0)).get(0)-->Line_19 $$ assertUnorderedPathsAreEqual(childNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/m/value1")))[ FD ]
Line_9 $$ MavenProject childNode = myProjectsTree.getModules(roots.get(0)).get(0)-->Line_11 $$ assertUnorderedPathsAreEqual(childNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/m/value1")))[ FD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_3 $$ createProjectPom("<groupId>test</groupId>" + "<artifactId>project</artifactId>" + "<version>1</version>" + "<packaging>pom</packaging>" + "<modules>" + "  <module>m</module>" + "</modules>" + "<build>" + "  <sourceDirectory>$[ CD ]
Line_8 $$ MavenProject parentNode = roots.get(0)-->Line_18 $$ assertUnorderedPathsAreEqual(parentNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/value1")))[ FD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_14 $$ assertUnorderedPathsAreEqual(parentNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/$[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_19 $$ assertUnorderedPathsAreEqual(childNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/m/value1")))[ CD ]
Line_8 $$ MavenProject parentNode = roots.get(0)-->Line_10 $$ assertUnorderedPathsAreEqual(parentNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/value1")))[ FD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_8 $$ MavenProject parentNode = roots.get(0)[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_5 $$ updateSettingsXml("<profiles>" + "  <profile>" + "    <id>one</id>" + "    <activation>" + "      <activeByDefault>true</activeByDefault>" + "    </activation>" + "    <properties>" + "      <prop>value1</prop>" + "    </properties>" + "  </profile>" + "</profiles>")[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_11 $$ assertUnorderedPathsAreEqual(childNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/m/value1")))[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_17 $$ waitForReadingCompletion()[ CD ]
Line_7 $$ List<MavenProject> roots = myProjectsTree.getRootProjects()-->Line_9 $$ MavenProject childNode = myProjectsTree.getModules(roots.get(0)).get(0)[ FD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_9 $$ MavenProject childNode = myProjectsTree.getModules(roots.get(0)).get(0)[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_6 $$ importProject()[ CD ]
Line_2 $$ public void testUpdatingProjectsWhenSettingsXmlLocationIsChanged() throws Exception -->Line_10 $$ assertUnorderedPathsAreEqual(parentNode.getSources(), Arrays.asList(FileUtil.toSystemDependentName(getProjectPath() + "/value1")))[ CD ]
Line_7 $$ List<MavenProject> roots = myProjectsTree.getRootProjects()-->Line_8 $$ MavenProject parentNode = roots.get(0)[ FD ]
