Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_3 $$ IProjectStore projectStore = (IProjectStore) ServiceKt.getStateStore(project)[ FD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_7 $$ if (existingBaseDir == null) [ CD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_4 $$ String toOpen = FileUtil.toSystemIndependentName(path)[ FD ]
Line_6 $$ String existingBaseDir = projectStore.getProjectBasePath()-->Line_15 $$ return FileUtil.pathsEqual(FileUtil.toSystemIndependentName(openFile.getParentFile().getPath()), existingBaseDir)[ FD ]
Line_3 $$ IProjectStore projectStore = (IProjectStore) ServiceKt.getStateStore(project)-->Line_5 $$ String existing = projectStore.getProjectFilePath()[ FD ]
Line_10 $$ final File openFile = new File(toOpen)-->Line_15 $$ return FileUtil.pathsEqual(FileUtil.toSystemIndependentName(openFile.getParentFile().getPath()), existingBaseDir)[ FD ]
Line_5 $$ String existing = projectStore.getProjectFilePath()-->Line_17 $$ return FileUtil.pathsEqual(toOpen, existing)[ FD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_17 $$ return FileUtil.pathsEqual(toOpen, existing)[ CD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_5 $$ String existing = projectStore.getProjectFilePath()[ CD ]
Line_11 $$ if (openFile.isDirectory()) -->Line_12 $$ return FileUtil.pathsEqual(toOpen, existingBaseDir)[ CD ]
Line_7 $$ if (existingBaseDir == null) -->Line_8 $$ return false[ CD ]
Line_14 $$ if (StorageScheme.DIRECTORY_BASED == projectStore.getStorageScheme()) -->Line_15 $$ return FileUtil.pathsEqual(FileUtil.toSystemIndependentName(openFile.getParentFile().getPath()), existingBaseDir)[ CD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_4 $$ String toOpen = FileUtil.toSystemIndependentName(path)[ CD ]
Line_3 $$ IProjectStore projectStore = (IProjectStore) ServiceKt.getStateStore(project)-->Line_14 $$ if (StorageScheme.DIRECTORY_BASED == projectStore.getStorageScheme()) [ FD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_11 $$ if (openFile.isDirectory()) [ CD ]
Line_4 $$ String toOpen = FileUtil.toSystemIndependentName(path)-->Line_12 $$ return FileUtil.pathsEqual(toOpen, existingBaseDir)[ FD ]
Line_6 $$ String existingBaseDir = projectStore.getProjectBasePath()-->Line_12 $$ return FileUtil.pathsEqual(toOpen, existingBaseDir)[ FD ]
Line_4 $$ String toOpen = FileUtil.toSystemIndependentName(path)-->Line_17 $$ return FileUtil.pathsEqual(toOpen, existing)[ FD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_3 $$ IProjectStore projectStore = (IProjectStore) ServiceKt.getStateStore(project)[ CD ]
Line_6 $$ String existingBaseDir = projectStore.getProjectBasePath()-->Line_7 $$ if (existingBaseDir == null) [ FD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_6 $$ String existingBaseDir = projectStore.getProjectBasePath()[ CD ]
Line_3 $$ IProjectStore projectStore = (IProjectStore) ServiceKt.getStateStore(project)-->Line_6 $$ String existingBaseDir = projectStore.getProjectBasePath()[ FD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_10 $$ final File openFile = new File(toOpen)[ CD ]
Line_2 $$ public static boolean isSameProject(String path, @NotNull Project project) -->Line_14 $$ if (StorageScheme.DIRECTORY_BASED == projectStore.getStorageScheme()) [ CD ]
Line_10 $$ final File openFile = new File(toOpen)-->Line_11 $$ if (openFile.isDirectory()) [ FD ]
