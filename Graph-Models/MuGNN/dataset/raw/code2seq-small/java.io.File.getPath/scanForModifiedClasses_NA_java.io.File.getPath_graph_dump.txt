Line_9 $$ final List<VirtualFile> allDirs = OrderEnumerator.orderEntries(myProject).withoutSdk().withoutLibraries().getPathsList().getRootDirs()-->Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() [ FD ]
Line_37 $$ for (VirtualFile dir : allDirs) -->Line_38 $$ outputRoots.add(new File(dir.getPath()))[ FD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_23 $$ progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path", filePath))[ FD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_6 $$ if (scanWithVFS) [ CD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_3 $$ DebuggerManagerThreadImpl.assertIsManagerThread()[ CD ]
Line_7 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() [ CD ]
Line_22 $$ if (SystemInfo.isFileSystemCaseSensitive ? filePath.endsWith(CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(filePath, CLASS_EXTENSION)) -->Line_23 $$ progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path", filePath))[ CD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_12 $$ if (!progress.isCancelled()) [ CD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_23 $$ progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path", filePath))[ FD ]
Line_22 $$ if (SystemInfo.isFileSystemCaseSensitive ? filePath.endsWith(CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(filePath, CLASS_EXTENSION)) -->Line_24 $$ final String qualifiedName = filePath.substring(fileRoot.length() + 1, filePath.length() - CLASS_EXTENSION.length()).replace('/', '.')[ CD ]
Line_5 $$ final Map<String, HotSwapFile> modifiedClasses = new HashMap<String, HotSwapFile>()-->Line_25 $$ modifiedClasses.put(qualifiedName, new HotSwapFile(new File(filePath)))[ FD ]
Line_34 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_36 $$ final List<VirtualFile> allDirs = OrderEnumerator.orderEntries(myProject).withoutSdk().withoutLibraries().getPathsList().getRootDirs()[ CD ]
Line_6 $$ if (scanWithVFS) -->Line_7 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_14 $$ super.acceptDirectory(file, fileRoot, filePath)[ FD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_24 $$ final String qualifiedName = filePath.substring(fileRoot.length() + 1, filePath.length() - CLASS_EXTENSION.length()).replace('/', '.')[ FD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_47 $$ return modifiedClasses[ CD ]
Line_12 $$ if (!progress.isCancelled()) -->Line_14 $$ super.acceptDirectory(file, fileRoot, filePath)[ CD ]
Line_6 $$ if (scanWithVFS) -->Line_34 $$ ApplicationManager.getApplication().runReadAction(new Runnable() [ CD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_21 $$ if (file.getTimeStamp() > timeStamp && StdFileTypes.CLASS.equals(file.getFileType())) [ CD ]
Line_5 $$ final Map<String, HotSwapFile> modifiedClasses = new HashMap<String, HotSwapFile>()-->Line_44 $$ collectModifiedClasses(root, rootPath, rootPath + "/", modifiedClasses, progress, timeStamp)[ FD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_13 $$ progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path", filePath))[ FD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_21 $$ if (file.getTimeStamp() > timeStamp && StdFileTypes.CLASS.equals(file.getFileType())) [ FD ]
Line_18 $$ if (progress.isCancelled()) -->Line_19 $$ return[ CD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_22 $$ if (SystemInfo.isFileSystemCaseSensitive ? filePath.endsWith(CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(filePath, CLASS_EXTENSION)) [ FD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_4 $$ final long timeStamp = getTimeStamp(session)[ FD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_13 $$ progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path", filePath))[ FD ]
Line_4 $$ final long timeStamp = getTimeStamp(session)-->Line_44 $$ collectModifiedClasses(root, rootPath, rootPath + "/", modifiedClasses, progress, timeStamp)[ FD ]
Line_10 $$ CompilerPathsEx.visitFiles(allDirs, new CompilerPathsEx.FileVisitor() -->Line_18 $$ if (progress.isCancelled()) [ CD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_5 $$ final Map<String, HotSwapFile> modifiedClasses = new HashMap<String, HotSwapFile>()[ CD ]
Line_22 $$ if (SystemInfo.isFileSystemCaseSensitive ? filePath.endsWith(CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(filePath, CLASS_EXTENSION)) -->Line_25 $$ modifiedClasses.put(qualifiedName, new HotSwapFile(new File(filePath)))[ CD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_44 $$ collectModifiedClasses(root, rootPath, rootPath + "/", modifiedClasses, progress, timeStamp)[ FD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_12 $$ if (!progress.isCancelled()) [ FD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_18 $$ if (progress.isCancelled()) [ FD ]
Line_24 $$ final String qualifiedName = filePath.substring(fileRoot.length() + 1, filePath.length() - CLASS_EXTENSION.length()).replace('/', '.')-->Line_25 $$ modifiedClasses.put(qualifiedName, new HotSwapFile(new File(filePath)))[ FD ]
Line_21 $$ if (file.getTimeStamp() > timeStamp && StdFileTypes.CLASS.equals(file.getFileType())) -->Line_22 $$ if (SystemInfo.isFileSystemCaseSensitive ? filePath.endsWith(CLASS_EXTENSION) : StringUtil.endsWithIgnoreCase(filePath, CLASS_EXTENSION)) [ CD ]
Line_12 $$ if (!progress.isCancelled()) -->Line_13 $$ progress.setText(DebuggerBundle.message("progress.hotswap.scanning.path", filePath))[ CD ]
Line_7 $$ ApplicationManager.getApplication().runReadAction(new Runnable() -->Line_9 $$ final List<VirtualFile> allDirs = OrderEnumerator.orderEntries(myProject).withoutSdk().withoutLibraries().getPathsList().getRootDirs()[ CD ]
Line_2 $$ public Map<String, HotSwapFile> scanForModifiedClasses(final DebuggerSession session, final HotSwapProgress progress, final boolean scanWithVFS) -->Line_4 $$ final long timeStamp = getTimeStamp(session)[ CD ]
