Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_6 $$ Set<String> jars = new TreeSet()[ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_21 $$ System.out.println("Updating " + gitignoreFile)[ CD ]
Line_20 $$ File gitignoreFile = new File(libDir.getCanonicalPath() + "/.gitignore")-->Line_29 $$ _fileUtil.write(gitignoreFile, StringUtil.merge(gitIgnores, "\n"))[ FD ]
Line_4 $$ Properties properties = new Properties()-->Line_8 $$ List<String> dependencyJars = getPortalDependencyJars(properties)[ FD ]
Line_10 $$ File projectDir = new File(propertiesFile.getParent() + "/../..")-->Line_11 $$ jars.addAll(getImportSharedJars(projectDir))[ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_4 $$ Properties properties = new Properties()[ CD ]
Line_12 $$ File libDir = new File(propertiesFile.getParent() + "/lib")-->Line_13 $$ jars.addAll(getRequiredDeploymentContextsJars(libDir, properties))[ FD ]
Line_3 $$ File propertiesFile = new File(dirName + "/" + fileName)-->Line_10 $$ File projectDir = new File(propertiesFile.getParent() + "/../..")[ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_5 $$ properties.load(new FileInputStream(propertiesFile))[ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_13 $$ jars.addAll(getRequiredDeploymentContextsJars(libDir, properties))[ CD ]
Line_6 $$ Set<String> jars = new TreeSet()-->Line_22 $$ String[] gitIgnores = jars.toArray(new String[jars.size()])[ FD ]
Line_4 $$ Properties properties = new Properties()-->Line_13 $$ jars.addAll(getRequiredDeploymentContextsJars(libDir, properties))[ FD ]
Line_24 $$ String gitIgnore = gitIgnores[i]-->Line_25 $$ if (Validator.isNotNull(gitIgnore) && !gitIgnore.startsWith("/")) [ FD ]
Line_10 $$ File projectDir = new File(propertiesFile.getParent() + "/../..")-->Line_14 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ FD ]
Line_3 $$ File propertiesFile = new File(dirName + "/" + fileName)-->Line_12 $$ File libDir = new File(propertiesFile.getParent() + "/lib")[ FD ]
Line_16 $$ List<String> ignores = ListUtil.fromFile(libDir.getCanonicalPath() + "/../.gitignore")-->Line_17 $$ if (libDirPath.contains("/ext/") || ignores.contains("/lib")) [ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_23 $$ for (int i = 0; i < gitIgnores.length; i++) [ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_14 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ CD ]
Line_17 $$ if (libDirPath.contains("/ext/") || ignores.contains("/lib")) -->Line_18 $$ return[ CD ]
Line_12 $$ File libDir = new File(propertiesFile.getParent() + "/lib")-->Line_20 $$ File gitignoreFile = new File(libDir.getCanonicalPath() + "/.gitignore")[ FD ]
Line_6 $$ Set<String> jars = new TreeSet()-->Line_13 $$ jars.addAll(getRequiredDeploymentContextsJars(libDir, properties))[ FD ]
Line_8 $$ List<String> dependencyJars = getPortalDependencyJars(properties)-->Line_14 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ FD ]
Line_6 $$ Set<String> jars = new TreeSet()-->Line_7 $$ jars.addAll(getCommonJars())[ FD ]
Line_8 $$ List<String> dependencyJars = getPortalDependencyJars(properties)-->Line_9 $$ jars.addAll(dependencyJars)[ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_20 $$ File gitignoreFile = new File(libDir.getCanonicalPath() + "/.gitignore")[ CD ]
Line_24 $$ String gitIgnore = gitIgnores[i]-->Line_26 $$ gitIgnores[i] = "/" + gitIgnore[ FD ]
Line_4 $$ Properties properties = new Properties()-->Line_5 $$ properties.load(new FileInputStream(propertiesFile))[ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_10 $$ File projectDir = new File(propertiesFile.getParent() + "/../..")[ CD ]
Line_12 $$ File libDir = new File(propertiesFile.getParent() + "/lib")-->Line_15 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)[ FD ]
Line_12 $$ File libDir = new File(propertiesFile.getParent() + "/lib")-->Line_14 $$ writeEclipseFiles(libDir, projectDir, dependencyJars)[ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_29 $$ _fileUtil.write(gitignoreFile, StringUtil.merge(gitIgnores, "\n"))[ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_22 $$ String[] gitIgnores = jars.toArray(new String[jars.size()])[ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_12 $$ File libDir = new File(propertiesFile.getParent() + "/lib")[ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_8 $$ List<String> dependencyJars = getPortalDependencyJars(properties)[ CD ]
Line_6 $$ Set<String> jars = new TreeSet()-->Line_9 $$ jars.addAll(dependencyJars)[ FD ]
Line_22 $$ String[] gitIgnores = jars.toArray(new String[jars.size()])-->Line_29 $$ _fileUtil.write(gitignoreFile, StringUtil.merge(gitIgnores, "\n"))[ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_17 $$ if (libDirPath.contains("/ext/") || ignores.contains("/lib")) [ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_11 $$ jars.addAll(getImportSharedJars(projectDir))[ CD ]
Line_6 $$ Set<String> jars = new TreeSet()-->Line_11 $$ jars.addAll(getImportSharedJars(projectDir))[ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_15 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)[ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_9 $$ jars.addAll(dependencyJars)[ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_3 $$ File propertiesFile = new File(dirName + "/" + fileName)[ CD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_16 $$ List<String> ignores = ListUtil.fromFile(libDir.getCanonicalPath() + "/../.gitignore")[ CD ]
Line_23 $$ for (int i = 0; i < gitIgnores.length; i++) -->Line_24 $$ String gitIgnore = gitIgnores[i][ CD ]
Line_15 $$ String libDirPath = StringUtil.replace(libDir.getPath(), StringPool.BACK_SLASH, StringPool.SLASH)-->Line_17 $$ if (libDirPath.contains("/ext/") || ignores.contains("/lib")) [ FD ]
Line_25 $$ if (Validator.isNotNull(gitIgnore) && !gitIgnore.startsWith("/")) -->Line_26 $$ gitIgnores[i] = "/" + gitIgnore[ CD ]
Line_12 $$ File libDir = new File(propertiesFile.getParent() + "/lib")-->Line_16 $$ List<String> ignores = ListUtil.fromFile(libDir.getCanonicalPath() + "/../.gitignore")[ FD ]
Line_2 $$ protected void setupWarProject(String dirName, String fileName) throws Exception -->Line_7 $$ jars.addAll(getCommonJars())[ CD ]
Line_23 $$ for (int i = 0; i < gitIgnores.length; i++) -->Line_25 $$ if (Validator.isNotNull(gitIgnore) && !gitIgnore.startsWith("/")) [ CD ]
