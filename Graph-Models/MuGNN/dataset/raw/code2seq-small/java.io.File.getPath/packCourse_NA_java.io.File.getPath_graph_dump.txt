Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() -->Line_14 $$ String nameWithoutExtension = FileUtil.getNameWithoutExtension(pathname)[ FD ]
Line_5 $$ ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() [ FD ]
Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() -->Line_14 $$ String nameWithoutExtension = FileUtil.getNameWithoutExtension(pathname)[ CD ]
Line_2 $$ private void packCourse(@NotNull final VirtualFile baseDir, @NotNull final Course course) -->Line_7 $$ VirtualFile[] courseFiles = baseDir.getChildren()[ FD ]
Line_8 $$ for (VirtualFile file : courseFiles) -->Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() [ FD ]
Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() -->Line_18 $$ return manager != null && !manager.doNotPackFile(pathname)[ FD ]
Line_6 $$ final CCLanguageManager manager = CCUtils.getStudyLanguageManager(course)-->Line_18 $$ return manager != null && !manager.doNotPackFile(pathname)[ FD ]
Line_4 $$ final File zipFile = new File(myLocationDir, myZipName + ".zip")-->Line_15 $$ if (nameWithoutExtension.endsWith(".answer") || name.contains(EduNames.WINDOWS_POSTFIX) || name.contains(".idea") || FileUtil.filesEqual(pathname, zipFile)) [ FD ]
Line_5 $$ ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)))-->Line_22 $$ zos.close()[ FD ]
Line_14 $$ String nameWithoutExtension = FileUtil.getNameWithoutExtension(pathname)-->Line_15 $$ if (nameWithoutExtension.endsWith(".answer") || name.contains(EduNames.WINDOWS_POSTFIX) || name.contains(".idea") || FileUtil.filesEqual(pathname, zipFile)) [ FD ]
Line_15 $$ if (nameWithoutExtension.endsWith(".answer") || name.contains(EduNames.WINDOWS_POSTFIX) || name.contains(".idea") || FileUtil.filesEqual(pathname, zipFile)) -->Line_16 $$ return false[ CD ]
Line_2 $$ private void packCourse(@NotNull final VirtualFile baseDir, @NotNull final Course course) -->Line_6 $$ final CCLanguageManager manager = CCUtils.getStudyLanguageManager(course)[ FD ]
Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() -->Line_15 $$ if (nameWithoutExtension.endsWith(".answer") || name.contains(EduNames.WINDOWS_POSTFIX) || name.contains(".idea") || FileUtil.filesEqual(pathname, zipFile)) [ CD ]
Line_13 $$ String name = pathname.getName()-->Line_15 $$ if (nameWithoutExtension.endsWith(".answer") || name.contains(EduNames.WINDOWS_POSTFIX) || name.contains(".idea") || FileUtil.filesEqual(pathname, zipFile)) [ FD ]
Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() -->Line_15 $$ if (nameWithoutExtension.endsWith(".answer") || name.contains(EduNames.WINDOWS_POSTFIX) || name.contains(".idea") || FileUtil.filesEqual(pathname, zipFile)) [ FD ]
Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() -->Line_18 $$ return manager != null && !manager.doNotPackFile(pathname)[ CD ]
Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() -->Line_13 $$ String name = pathname.getName()[ CD ]
Line_4 $$ final File zipFile = new File(myLocationDir, myZipName + ".zip")-->Line_23 $$ Messages.showInfoMessage("Course archive was saved to " + zipFile.getPath(), "Course Archive Was Created Successfully")[ FD ]
Line_9 $$ ZipUtil.addFileOrDirRecursively(zos, null, new File(file.getPath()), file.getName(), new FileFilter() -->Line_13 $$ String name = pathname.getName()[ FD ]
