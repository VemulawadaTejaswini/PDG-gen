Line_44 $$ if (details.length > 2) -->Line_47 $$ parents = ArrayUtil.EMPTY_STRING_ARRAY[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_28 $$ assertTrue("File " + bfile + " was not created by mv command", bfile.exists())[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_39 $$ assertEquals("Incorrect number of revisions", commitMessages.length, revisions.length)[ CD ]
Line_45 $$ parents = details[2].split(" ")-->Line_47 $$ parents = ArrayUtil.EMPTY_STRING_ARRAY[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_17 $$ commitIndex++[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_27 $$ mv(afile, bfile)[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_21 $$ int RENAME_COMMIT_INDEX = commitIndex[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_30 $$ commitIndex++[ CD ]
Line_44 $$ if (details.length > 2) -->Line_45 $$ parents = details[2].split(" ")[ CD ]
Line_21 $$ int RENAME_COMMIT_INDEX = commitIndex-->Line_51 $$ if (i > RENAME_COMMIT_INDEX) [ FD ]
Line_49 $$ final GitTestRevision revision = new GitTestRevision(details[0], details[1], parents, commitMessages[i], USER_NAME, USER_EMAIL, USER_NAME, USER_EMAIL, null, contents[i])-->Line_50 $$ myRevisions.add(revision)[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_11 $$ final String[] contents = [ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_16 $$ addCommit(commitMessages[commitIndex])[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_22 $$ commitIndex++[ CD ]
Line_51 $$ if (i > RENAME_COMMIT_INDEX) -->Line_52 $$ myRevisionsAfterRename.add(revision)[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_26 $$ assertFalse("File " + bfile + " shouldn't have existed", bfile.exists())[ CD ]
Line_43 $$ String[] parents-->Line_47 $$ parents = ArrayUtil.EMPTY_STRING_ARRAY[ FD ]
Line_49 $$ final GitTestRevision revision = new GitTestRevision(details[0], details[1], parents, commitMessages[i], USER_NAME, USER_EMAIL, USER_NAME, USER_EMAIL, null, contents[i])-->Line_52 $$ myRevisionsAfterRename.add(revision)[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_56 $$ cd(myProjectPath)[ CD ]
Line_43 $$ String[] parents-->Line_45 $$ parents = details[2].split(" ")[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_15 $$ File afile = touch("a.txt", contents[commitIndex])[ CD ]
Line_15 $$ File afile = touch("a.txt", contents[commitIndex])-->Line_27 $$ mv(afile, bfile)[ FD ]
Line_2 $$ private void initTest() throws IOException -->Line_20 $$ addCommit(commitMessages[commitIndex])[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_29 $$ commit(commitMessages[commitIndex])[ CD ]
Line_2 $$ private void initTest() throws IOException -->Line_55 $$ assertEquals(myRevisionsAfterRename.size(), 5)[ CD ]
