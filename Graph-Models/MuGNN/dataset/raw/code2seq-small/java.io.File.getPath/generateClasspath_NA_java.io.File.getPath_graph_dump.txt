Line_8 $$ for (GroovyBuilderExtension extension : JpsServiceManager.getInstance().getExtensions(GroovyBuilderExtension.class)) -->Line_9 $$ cp.addAll(extension.getCompilationClassPath(context, chunk))[ FD ]
Line_3 $$ final Set<String> cp = new LinkedHashSet<String>()-->Line_9 $$ cp.addAll(extension.getCompilationClassPath(context, chunk))[ FD ]
Line_3 $$ final Set<String> cp = new LinkedHashSet<String>()-->Line_4 $$ cp.addAll(getGroovyRtRoots())[ FD ]
Line_2 $$ private static Collection<String> generateClasspath(CompileContext context, ModuleChunk chunk) -->Line_9 $$ cp.addAll(extension.getCompilationClassPath(context, chunk))[ FD ]
Line_2 $$ private static Collection<String> generateClasspath(CompileContext context, ModuleChunk chunk) -->Line_11 $$ return cp[ CD ]
Line_2 $$ private static Collection<String> generateClasspath(CompileContext context, ModuleChunk chunk) -->Line_3 $$ final Set<String> cp = new LinkedHashSet<String>()[ CD ]
Line_5 $$ for (File file : ProjectPaths.getCompilationClasspathFiles(chunk, chunk.containsTests(), false, false)) -->Line_6 $$ cp.add(FileUtil.toCanonicalPath(file.getPath()))[ FD ]
Line_2 $$ private static Collection<String> generateClasspath(CompileContext context, ModuleChunk chunk) -->Line_4 $$ cp.addAll(getGroovyRtRoots())[ CD ]
Line_2 $$ private static Collection<String> generateClasspath(CompileContext context, ModuleChunk chunk) -->Line_5 $$ for (File file : ProjectPaths.getCompilationClasspathFiles(chunk, chunk.containsTests(), false, false)) [ FD ]
Line_3 $$ final Set<String> cp = new LinkedHashSet<String>()-->Line_6 $$ cp.add(FileUtil.toCanonicalPath(file.getPath()))[ FD ]
