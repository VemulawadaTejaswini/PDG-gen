Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_23 $$ if (JAVA_SOURCES_FILTER.accept(file)) [ CD ]
Line_31 $$ if (config.isInstrumentClasses()) -->Line_33 $$ final JpsCompilerExcludes excludes = configuration.getCompilerExcludes()[ CD ]
Line_57 $$ if (!excludes.isExcluded(formFile) && formFile.exists()) -->Line_58 $$ addBinding(srcFile, formFile, srcToForms)[ CD ]
Line_5 $$ final JpsProject project = context.getProjectDescriptor().getProject()-->Line_32 $$ final JpsJavaCompilerConfiguration configuration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project)[ FD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_71 $$ final File outputDir = target.getOutputDir()[ FD ]
Line_11 $$ final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_26 $$ formsToCompile.put(file, target)[ FD ]
Line_23 $$ if (JAVA_SOURCES_FILTER.accept(file)) -->Line_24 $$ filesToCompile.put(file, target)[ CD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_24 $$ filesToCompile.put(file, target)[ FD ]
Line_6 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)-->Line_13 $$ if (!JavaBuilderUtil.isForcedRecompilationAllJavaModules(context) && config.isInstrumentClasses() && FORCE_FORMS_REBUILD_FLAG.get(context, Boolean.FALSE)) [ FD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_43 $$ filesToCompile.put(boundSource, target)[ FD ]
Line_10 $$ final Map<File, ModuleBuildTarget> filesToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_50 $$ for (Map.Entry<File, ModuleBuildTarget> entry : filesToCompile.entrySet()) [ FD ]
Line_40 $$ if (!excludes.isExcluded(boundSource)) -->Line_43 $$ filesToCompile.put(boundSource, target)[ CD ]
Line_57 $$ if (!excludes.isExcluded(formFile) && formFile.exists()) -->Line_59 $$ FSOperations.markDirty(context, CompilationRound.CURRENT, formFile)[ CD ]
Line_12 $$ final Map<File, Collection<File>> srcToForms = new THashMap<File, Collection<File>>(FileUtil.FILE_HASHING_STRATEGY)-->Line_67 $$ FORMS_TO_COMPILE.set(context, srcToForms.isEmpty() ? null : srcToForms)[ FD ]
Line_10 $$ final Map<File, ModuleBuildTarget> filesToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_43 $$ filesToCompile.put(boundSource, target)[ FD ]
Line_70 $$ if (!target.isTests()) -->Line_71 $$ final File outputDir = target.getOutputDir()[ CD ]
Line_12 $$ final Map<File, Collection<File>> srcToForms = new THashMap<File, Collection<File>>(FileUtil.FILE_HASHING_STRATEGY)-->Line_41 $$ addBinding(boundSource, form, srcToForms)[ FD ]
Line_7 $$ if (!config.isInstrumentClasses() && !config.isCopyFormsRuntimeToOutput()) -->Line_8 $$ return exitCode[ CD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_25 $$ if (FORM_SOURCES_FILTER.accept(file)) [ FD ]
Line_72 $$ if (outputDir != null) -->Line_74 $$ final List<File> generatedFiles = CopyResourcesUtil.copyFormsRuntime(outputRoot, false)[ CD ]
Line_6 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)-->Line_31 $$ if (config.isInstrumentClasses()) [ FD ]
Line_57 $$ if (!excludes.isExcluded(formFile) && formFile.exists()) -->Line_60 $$ formsToCompile.put(formFile, target)[ CD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_60 $$ formsToCompile.put(formFile, target)[ FD ]
Line_70 $$ if (!target.isTests()) -->Line_72 $$ if (outputDir != null) [ CD ]
Line_5 $$ final JpsProject project = context.getProjectDescriptor().getProject()-->Line_6 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)[ FD ]
Line_72 $$ if (outputDir != null) -->Line_75 $$ if (!generatedFiles.isEmpty()) [ CD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_23 $$ if (JAVA_SOURCES_FILTER.accept(file)) [ FD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_70 $$ if (!target.isTests()) [ FD ]
Line_25 $$ if (FORM_SOURCES_FILTER.accept(file)) -->Line_26 $$ formsToCompile.put(file, target)[ CD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_38 $$ final Collection<File> sources = findBoundSourceCandidates(context, target, form)[ FD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_79 $$ outputConsumer.registerOutputFile(target, file, Collections.<String>emptyList())[ FD ]
Line_12 $$ final Map<File, Collection<File>> srcToForms = new THashMap<File, Collection<File>>(FileUtil.FILE_HASHING_STRATEGY)-->Line_58 $$ addBinding(srcFile, formFile, srcToForms)[ FD ]
Line_31 $$ if (config.isInstrumentClasses()) -->Line_32 $$ final JpsJavaCompilerConfiguration configuration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project)[ CD ]
Line_6 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)-->Line_7 $$ if (!config.isInstrumentClasses() && !config.isCopyFormsRuntimeToOutput()) [ FD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_26 $$ formsToCompile.put(file, target)[ FD ]
Line_40 $$ if (!excludes.isExcluded(boundSource)) -->Line_42 $$ FSOperations.markDirty(context, CompilationRound.CURRENT, boundSource)[ CD ]
Line_23 $$ if (JAVA_SOURCES_FILTER.accept(file)) -->Line_25 $$ if (FORM_SOURCES_FILTER.accept(file)) [ CD ]
Line_20 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_28 $$ return true[ CD ]
Line_72 $$ if (outputDir != null) -->Line_73 $$ final String outputRoot = FileUtil.toSystemIndependentName(outputDir.getPath())[ CD ]
Line_10 $$ final Map<File, ModuleBuildTarget> filesToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_24 $$ filesToCompile.put(file, target)[ FD ]
Line_6 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)-->Line_68 $$ if (config.isCopyFormsRuntimeToOutput() && containsValidForm(formsToCompile.keySet())) [ FD ]
Line_11 $$ final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_68 $$ if (config.isCopyFormsRuntimeToOutput() && containsValidForm(formsToCompile.keySet())) [ FD ]
Line_40 $$ if (!excludes.isExcluded(boundSource)) -->Line_41 $$ addBinding(boundSource, form, srcToForms)[ CD ]
Line_11 $$ final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_60 $$ formsToCompile.put(formFile, target)[ FD ]
