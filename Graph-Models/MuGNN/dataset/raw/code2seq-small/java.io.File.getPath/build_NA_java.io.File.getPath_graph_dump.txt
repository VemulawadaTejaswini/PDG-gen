Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_66 $$ final File outputDir = target.getOutputDir()[ FD ]
Line_6 $$ if (!config.isInstrumentClasses() && !config.isCopyFormsRuntimeToOutput()) -->Line_7 $$ return exitCode[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_34 $$ final Collection<File> sources = findBoundSourceCandidates(context, target, form)[ FD ]
Line_11 $$ final Map<File, Collection<File>> srcToForms = new THashMap<File, Collection<File>>(FileUtil.FILE_HASHING_STRATEGY)-->Line_37 $$ addBinding(boundSource, form, srcToForms)[ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_11 $$ final Map<File, Collection<File>> srcToForms = new THashMap<File, Collection<File>>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_10 $$ final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_11 $$ final Map<File, Collection<File>> srcToForms = new THashMap<File, Collection<File>>(FileUtil.FILE_HASHING_STRATEGY)-->Line_62 $$ FORMS_TO_COMPILE.set(context, srcToForms.isEmpty() ? null : srcToForms)[ FD ]
Line_65 $$ if (!target.isTests()) -->Line_67 $$ if (outputDir != null) [ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_4 $$ final JpsProject project = context.getProjectDescriptor().getProject()[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_80 $$ return exitCode[ CD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_25 $$ return true[ CD ]
Line_10 $$ final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_31 $$ for (final Map.Entry<File, ModuleBuildTarget> entry : formsToCompile.entrySet()) [ FD ]
Line_28 $$ if (config.isInstrumentClasses()) -->Line_44 $$ final OneToManyPathsMapping sourceToFormMap = context.getProjectDescriptor().dataManager.getSourceToFormMap()[ CD ]
Line_67 $$ if (outputDir != null) -->Line_70 $$ if (!generatedFiles.isEmpty()) [ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_38 $$ FSOperations.markDirty(context, CompilationRound.CURRENT, boundSource)[ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_12 $$ if (!JavaBuilderUtil.isForcedRecompilationAllJavaModules(context) && config.isInstrumentClasses() && FORCE_FORMS_REBUILD_FLAG.get(context, Boolean.FALSE)) [ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_3 $$ ExitCode exitCode = ExitCode.NOTHING_DONE[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_6 $$ if (!config.isInstrumentClasses() && !config.isCopyFormsRuntimeToOutput()) [ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() [ FD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_23 $$ formsToCompile.put(file, target)[ FD ]
Line_36 $$ if (!excludes.isExcluded(boundSource)) -->Line_38 $$ FSOperations.markDirty(context, CompilationRound.CURRENT, boundSource)[ CD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_65 $$ if (!target.isTests()) [ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_28 $$ if (config.isInstrumentClasses()) [ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_13 $$ if (!FORMS_REBUILD_FORCED.get(context, Boolean.FALSE)) [ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_73 $$ outputConsumer.registerOutputFile(target, file, Collections.<String>emptyList())[ FD ]
Line_5 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)-->Line_12 $$ if (!JavaBuilderUtil.isForcedRecompilationAllJavaModules(context) && config.isInstrumentClasses() && FORCE_FORMS_REBUILD_FLAG.get(context, Boolean.FALSE)) [ FD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_39 $$ filesToCompile.put(boundSource, target)[ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_4 $$ final JpsProject project = context.getProjectDescriptor().getProject()[ FD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_20 $$ if (JAVA_SOURCES_FILTER.accept(file)) [ CD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_20 $$ if (JAVA_SOURCES_FILTER.accept(file)) [ FD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_22 $$ if (FORM_SOURCES_FILTER.accept(file)) [ FD ]
Line_52 $$ if (!excludes.isExcluded(formFile) && formFile.exists()) -->Line_55 $$ formsToCompile.put(formFile, target)[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_63 $$ if (config.isCopyFormsRuntimeToOutput() && containsValidForm(formsToCompile.keySet())) [ CD ]
Line_10 $$ final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_63 $$ if (config.isCopyFormsRuntimeToOutput() && containsValidForm(formsToCompile.keySet())) [ FD ]
Line_12 $$ if (!JavaBuilderUtil.isForcedRecompilationAllJavaModules(context) && config.isInstrumentClasses() && FORCE_FORMS_REBUILD_FLAG.get(context, Boolean.FALSE)) -->Line_13 $$ if (!FORMS_REBUILD_FORCED.get(context, Boolean.FALSE)) [ CD ]
Line_5 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)-->Line_28 $$ if (config.isInstrumentClasses()) [ FD ]
Line_9 $$ final Map<File, ModuleBuildTarget> filesToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_21 $$ filesToCompile.put(file, target)[ FD ]
Line_67 $$ if (outputDir != null) -->Line_68 $$ final String outputRoot = FileUtil.toSystemIndependentName(outputDir.getPath())[ CD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_34 $$ final Collection<File> sources = findBoundSourceCandidates(context, target, form)[ FD ]
Line_20 $$ if (JAVA_SOURCES_FILTER.accept(file)) -->Line_22 $$ if (FORM_SOURCES_FILTER.accept(file)) [ CD ]
Line_10 $$ final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_55 $$ formsToCompile.put(formFile, target)[ FD ]
Line_11 $$ final Map<File, Collection<File>> srcToForms = new THashMap<File, Collection<File>>(FileUtil.FILE_HASHING_STRATEGY)-->Line_53 $$ addBinding(srcFile, formFile, srcToForms)[ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_64 $$ for (ModuleBuildTarget target : chunk.getTargets()) [ FD ]
Line_28 $$ if (config.isInstrumentClasses()) -->Line_29 $$ final JpsJavaCompilerConfiguration configuration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project)[ CD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_55 $$ formsToCompile.put(formFile, target)[ FD ]
Line_9 $$ final Map<File, ModuleBuildTarget> filesToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_39 $$ filesToCompile.put(boundSource, target)[ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_14 $$ FORMS_REBUILD_FORCED.set(context, Boolean.TRUE)[ FD ]
Line_20 $$ if (JAVA_SOURCES_FILTER.accept(file)) -->Line_21 $$ filesToCompile.put(file, target)[ CD ]
Line_4 $$ final JpsProject project = context.getProjectDescriptor().getProject()-->Line_5 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)[ FD ]
Line_67 $$ if (outputDir != null) -->Line_69 $$ final List<File> generatedFiles = CopyResourcesUtil.copyFormsRuntime(outputRoot, false)[ CD ]
Line_22 $$ if (FORM_SOURCES_FILTER.accept(file)) -->Line_23 $$ formsToCompile.put(file, target)[ CD ]
Line_5 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)-->Line_63 $$ if (config.isCopyFormsRuntimeToOutput() && containsValidForm(formsToCompile.keySet())) [ FD ]
Line_10 $$ final Map<File, ModuleBuildTarget> formsToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_23 $$ formsToCompile.put(file, target)[ FD ]
Line_4 $$ final JpsProject project = context.getProjectDescriptor().getProject()-->Line_29 $$ final JpsJavaCompilerConfiguration configuration = JpsJavaExtensionService.getInstance().getOrCreateCompilerConfiguration(project)[ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_62 $$ FORMS_TO_COMPILE.set(context, srcToForms.isEmpty() ? null : srcToForms)[ FD ]
Line_52 $$ if (!excludes.isExcluded(formFile) && formFile.exists()) -->Line_53 $$ addBinding(srcFile, formFile, srcToForms)[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_44 $$ final OneToManyPathsMapping sourceToFormMap = context.getProjectDescriptor().dataManager.getSourceToFormMap()[ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_15 $$ FSOperations.markDirty(context, CompilationRound.CURRENT, chunk, FORM_SOURCES_FILTER)[ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_5 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() [ CD ]
Line_5 $$ final JpsUiDesignerConfiguration config = JpsUiDesignerExtensionService.getInstance().getOrCreateUiDesignerConfiguration(project)-->Line_6 $$ if (!config.isInstrumentClasses() && !config.isCopyFormsRuntimeToOutput()) [ FD ]
Line_36 $$ if (!excludes.isExcluded(boundSource)) -->Line_39 $$ filesToCompile.put(boundSource, target)[ CD ]
Line_13 $$ if (!FORMS_REBUILD_FORCED.get(context, Boolean.FALSE)) -->Line_15 $$ FSOperations.markDirty(context, CompilationRound.CURRENT, chunk, FORM_SOURCES_FILTER)[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_12 $$ if (!JavaBuilderUtil.isForcedRecompilationAllJavaModules(context) && config.isInstrumentClasses() && FORCE_FORMS_REBUILD_FLAG.get(context, Boolean.FALSE)) [ CD ]
Line_36 $$ if (!excludes.isExcluded(boundSource)) -->Line_37 $$ addBinding(boundSource, form, srcToForms)[ CD ]
Line_13 $$ if (!FORMS_REBUILD_FORCED.get(context, Boolean.FALSE)) -->Line_14 $$ FORMS_REBUILD_FORCED.set(context, Boolean.TRUE)[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_9 $$ final Map<File, ModuleBuildTarget> filesToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)[ CD ]
Line_9 $$ final Map<File, ModuleBuildTarget> filesToCompile = new THashMap<File, ModuleBuildTarget>(FileUtil.FILE_HASHING_STRATEGY)-->Line_45 $$ for (Map.Entry<File, ModuleBuildTarget> entry : filesToCompile.entrySet()) [ FD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_62 $$ FORMS_TO_COMPILE.set(context, srcToForms.isEmpty() ? null : srcToForms)[ CD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_73 $$ outputConsumer.registerOutputFile(target, file, Collections.<String>emptyList())[ FD ]
Line_18 $$ dirtyFilesHolder.processDirtyFiles(new FileProcessor<JavaSourceRootDescriptor, ModuleBuildTarget>() -->Line_21 $$ filesToCompile.put(file, target)[ FD ]
Line_28 $$ if (config.isInstrumentClasses()) -->Line_30 $$ final JpsCompilerExcludes excludes = configuration.getCompilerExcludes()[ CD ]
Line_2 $$ public ExitCode build(CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException -->Line_54 $$ FSOperations.markDirty(context, CompilationRound.CURRENT, formFile)[ FD ]
Line_65 $$ if (!target.isTests()) -->Line_66 $$ final File outputDir = target.getOutputDir()[ CD ]
Line_52 $$ if (!excludes.isExcluded(formFile) && formFile.exists()) -->Line_54 $$ FSOperations.markDirty(context, CompilationRound.CURRENT, formFile)[ CD ]
