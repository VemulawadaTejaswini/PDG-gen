Line_22 $$ String fileName = file.getName()-->Line_27 $$ if (!StudyUtils.isTestsFile(project, fileName) && !EduNames.TASK_HTML.equals(fileName)) [ FD ]
Line_25 $$ File fileInProject = new File(taskDir.getCanonicalPath(), fileName)-->Line_28 $$ StudyTaskManager.getInstance(project).addInvisibleFiles(FileUtil.toSystemIndependentName(fileInProject.getPath()))[ FD ]
Line_12 $$ int i = 0-->Line_16 $$ i++[ FD ]
Line_13 $$ for (Map.Entry<String, TaskFile> taskFile : task.getTaskFiles().entrySet()) -->Line_17 $$ createTaskFile(taskDir, newResourceRoot, taskFile.getKey())[ FD ]
Line_22 $$ String fileName = file.getName()-->Line_23 $$ if (!task.isTaskFile(fileName)) [ FD ]
Line_10 $$ VirtualFile taskDir = lessonDir.createChildDirectory(project, EduNames.TASK + Integer.toString(task.getIndex()))-->Line_17 $$ createTaskFile(taskDir, newResourceRoot, taskFile.getKey())[ FD ]
Line_19 $$ File[] filesInTask = newResourceRoot.listFiles()-->Line_20 $$ if (filesInTask != null) [ FD ]
Line_10 $$ VirtualFile taskDir = lessonDir.createChildDirectory(project, EduNames.TASK + Integer.toString(task.getIndex()))-->Line_25 $$ File fileInProject = new File(taskDir.getCanonicalPath(), fileName)[ FD ]
Line_11 $$ File newResourceRoot = new File(resourceRoot, taskDir.getName())-->Line_19 $$ File[] filesInTask = newResourceRoot.listFiles()[ FD ]
Line_10 $$ VirtualFile taskDir = lessonDir.createChildDirectory(project, EduNames.TASK + Integer.toString(task.getIndex()))-->Line_11 $$ File newResourceRoot = new File(resourceRoot, taskDir.getName())[ FD ]
Line_23 $$ if (!task.isTaskFile(fileName)) -->Line_25 $$ File fileInProject = new File(taskDir.getCanonicalPath(), fileName)[ CD ]
Line_23 $$ if (!task.isTaskFile(fileName)) -->Line_26 $$ FileUtil.copy(resourceFile, fileInProject)[ CD ]
Line_27 $$ if (!StudyUtils.isTestsFile(project, fileName) && !EduNames.TASK_HTML.equals(fileName)) -->Line_28 $$ StudyTaskManager.getInstance(project).addInvisibleFiles(FileUtil.toSystemIndependentName(fileInProject.getPath()))[ CD ]
Line_13 $$ for (Map.Entry<String, TaskFile> taskFile : task.getTaskFiles().entrySet()) -->Line_14 $$ TaskFile taskFileContent = taskFile.getValue()[ FD ]
Line_12 $$ int i = 0-->Line_15 $$ taskFileContent.setIndex(i)[ FD ]
Line_14 $$ TaskFile taskFileContent = taskFile.getValue()-->Line_15 $$ taskFileContent.setIndex(i)[ FD ]
Line_25 $$ File fileInProject = new File(taskDir.getCanonicalPath(), fileName)-->Line_26 $$ FileUtil.copy(resourceFile, fileInProject)[ FD ]
Line_23 $$ if (!task.isTaskFile(fileName)) -->Line_24 $$ File resourceFile = new File(newResourceRoot, fileName)[ CD ]
Line_23 $$ if (!task.isTaskFile(fileName)) -->Line_27 $$ if (!StudyUtils.isTestsFile(project, fileName) && !EduNames.TASK_HTML.equals(fileName)) [ CD ]
Line_11 $$ File newResourceRoot = new File(resourceRoot, taskDir.getName())-->Line_17 $$ createTaskFile(taskDir, newResourceRoot, taskFile.getKey())[ FD ]
Line_21 $$ for (File file : filesInTask) -->Line_22 $$ String fileName = file.getName()[ FD ]
Line_24 $$ File resourceFile = new File(newResourceRoot, fileName)-->Line_26 $$ FileUtil.copy(resourceFile, fileInProject)[ FD ]
