Line_2 $$ public void patchCompilationUnit(CompilationUnit compilationUnit, GroovyResourceLoader resourceLoader, File[] srcFiles) -->Line_3 $$ File baseDir = guessBaseDir(srcFiles)[ CD ]
Line_10 $$ if (!GriffonCompilerContext.getConfigOption(CommandLineConstants.KEY_DISABLE_AUTO_IMPORTS)) -->Line_12 $$ customizer.collectDefaultImportsPerArtifact()[ CD ]
Line_2 $$ public void patchCompilationUnit(CompilationUnit compilationUnit, GroovyResourceLoader resourceLoader, File[] srcFiles) -->Line_9 $$ GriffonCompilerContext.setup()[ CD ]
Line_10 $$ if (!GriffonCompilerContext.getConfigOption(CommandLineConstants.KEY_DISABLE_AUTO_IMPORTS)) -->Line_13 $$ compilationUnit.addPhaseOperation(customizer, customizer.getPhase().getPhaseNumber())[ CD ]
Line_2 $$ public void patchCompilationUnit(CompilationUnit compilationUnit, GroovyResourceLoader resourceLoader, File[] srcFiles) -->Line_4 $$ if (baseDir == null) [ CD ]
Line_3 $$ File baseDir = guessBaseDir(srcFiles)-->Line_7 $$ GriffonCompilerContext.basedir = baseDir.getPath()[ FD ]
Line_3 $$ File baseDir = guessBaseDir(srcFiles)-->Line_4 $$ if (baseDir == null) [ FD ]
Line_11 $$ DefaultImportCompilerCustomizer customizer = new DefaultImportCompilerCustomizer()-->Line_12 $$ customizer.collectDefaultImportsPerArtifact()[ FD ]
Line_2 $$ public void patchCompilationUnit(CompilationUnit compilationUnit, GroovyResourceLoader resourceLoader, File[] srcFiles) -->Line_13 $$ compilationUnit.addPhaseOperation(customizer, customizer.getPhase().getPhaseNumber())[ FD ]
Line_4 $$ if (baseDir == null) -->Line_5 $$ return[ CD ]
Line_11 $$ DefaultImportCompilerCustomizer customizer = new DefaultImportCompilerCustomizer()-->Line_13 $$ compilationUnit.addPhaseOperation(customizer, customizer.getPhase().getPhaseNumber())[ FD ]
Line_2 $$ public void patchCompilationUnit(CompilationUnit compilationUnit, GroovyResourceLoader resourceLoader, File[] srcFiles) -->Line_8 $$ GriffonCompilerContext.projectName = "IntelliJIDEARulezzzzz"[ CD ]
Line_10 $$ if (!GriffonCompilerContext.getConfigOption(CommandLineConstants.KEY_DISABLE_AUTO_IMPORTS)) -->Line_11 $$ DefaultImportCompilerCustomizer customizer = new DefaultImportCompilerCustomizer()[ CD ]
Line_2 $$ public void patchCompilationUnit(CompilationUnit compilationUnit, GroovyResourceLoader resourceLoader, File[] srcFiles) -->Line_3 $$ File baseDir = guessBaseDir(srcFiles)[ FD ]
Line_2 $$ public void patchCompilationUnit(CompilationUnit compilationUnit, GroovyResourceLoader resourceLoader, File[] srcFiles) -->Line_7 $$ GriffonCompilerContext.basedir = baseDir.getPath()[ CD ]
Line_2 $$ public void patchCompilationUnit(CompilationUnit compilationUnit, GroovyResourceLoader resourceLoader, File[] srcFiles) -->Line_10 $$ if (!GriffonCompilerContext.getConfigOption(CommandLineConstants.KEY_DISABLE_AUTO_IMPORTS)) [ CD ]
