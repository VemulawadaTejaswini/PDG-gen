Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_3 $$ if (!artifact.getExtension().equals("presto-plugin")) [ FD ]
Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_6 $$ File file = artifact.getFile()[ FD ]
Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_6 $$ File file = artifact.getFile()[ CD ]
Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_7 $$ if (!file.getPath().endsWith("/target/classes")) [ CD ]
Line_13 $$ if (new File(file, SERVICES_FILE).exists()) -->Line_14 $$ return ImmutableSet.of()[ CD ]
Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_16 $$ return listClasses(file.toPath()).stream().filter( name -> classInterfaces(name, classLoader).contains(Plugin.class.getName())).collect(toImmutableSet())[ CD ]
Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_10 $$ if (!file.isDirectory()) [ CD ]
Line_6 $$ File file = artifact.getFile()-->Line_16 $$ return listClasses(file.toPath()).stream().filter( name -> classInterfaces(name, classLoader).contains(Plugin.class.getName())).collect(toImmutableSet())[ FD ]
Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_13 $$ if (new File(file, SERVICES_FILE).exists()) [ CD ]
Line_6 $$ File file = artifact.getFile()-->Line_7 $$ if (!file.getPath().endsWith("/target/classes")) [ FD ]
Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_3 $$ if (!artifact.getExtension().equals("presto-plugin")) [ CD ]
Line_6 $$ File file = artifact.getFile()-->Line_10 $$ if (!file.isDirectory()) [ FD ]
Line_2 $$ public static Set<String> discoverPlugins(Artifact artifact, ClassLoader classLoader) throws IOException -->Line_16 $$ classInterfaces(name, classLoader).contains(Plugin.class.getName())[ FD ]
