Line_2 $$ public List<ShelvedChangeList> importChangeLists(final Collection<VirtualFile> files, final Consumer<VcsException> exceptionConsumer) -->Line_3 $$ final List<ShelvedChangeList> result = new ArrayList<ShelvedChangeList>(files.size())[ FD ]
Line_14 $$ final List<TextFilePatch> patchesList = loadPatches(myProject, file.getPath(), new CommitContext())-->Line_15 $$ if (!patchesList.isEmpty()) [ FD ]
Line_11 $$ final ShelvedChangeList list = new ShelvedChangeList(patchPath.getPath(), description, new SmartList<ShelvedBinaryFile>(), file.getTimeStamp())-->Line_19 $$ result.add(list)[ FD ]
Line_6 $$ for (VirtualFile file : files) -->Line_14 $$ final List<TextFilePatch> patchesList = loadPatches(myProject, file.getPath(), new CommitContext())[ FD ]
Line_15 $$ if (!patchesList.isEmpty()) -->Line_19 $$ result.add(list)[ CD ]
Line_6 $$ for (VirtualFile file : files) -->Line_16 $$ FileUtil.copy(new File(file.getPath()), patchPath)[ FD ]
Line_8 $$ final String description = file.getNameWithoutExtension().replace('_', ' ')-->Line_9 $$ File schemeNameDir = generateUniqueSchemePatchDir(description, true)[ FD ]
Line_2 $$ public List<ShelvedChangeList> importChangeLists(final Collection<VirtualFile> files, final Consumer<VcsException> exceptionConsumer) -->Line_3 $$ final List<ShelvedChangeList> result = new ArrayList<ShelvedChangeList>(files.size())[ CD ]
Line_11 $$ final ShelvedChangeList list = new ShelvedChangeList(patchPath.getPath(), description, new SmartList<ShelvedBinaryFile>(), file.getTimeStamp())-->Line_12 $$ list.setName(schemeNameDir.getName())[ FD ]
Line_15 $$ if (!patchesList.isEmpty()) -->Line_16 $$ FileUtil.copy(new File(file.getPath()), patchPath)[ CD ]
Line_10 $$ final File patchPath = getPatchFileInConfigDir(schemeNameDir)-->Line_11 $$ final ShelvedChangeList list = new ShelvedChangeList(patchPath.getPath(), description, new SmartList<ShelvedBinaryFile>(), file.getTimeStamp())[ FD ]
Line_2 $$ public List<ShelvedChangeList> importChangeLists(final Collection<VirtualFile> files, final Consumer<VcsException> exceptionConsumer) -->Line_22 $$ exceptionConsumer.consume(new VcsException(e))[ FD ]
Line_2 $$ public List<ShelvedChangeList> importChangeLists(final Collection<VirtualFile> files, final Consumer<VcsException> exceptionConsumer) -->Line_30 $$ return result[ CD ]
Line_2 $$ public List<ShelvedChangeList> importChangeLists(final Collection<VirtualFile> files, final Consumer<VcsException> exceptionConsumer) -->Line_24 $$ exceptionConsumer.consume(new VcsException(e))[ FD ]
Line_2 $$ public List<ShelvedChangeList> importChangeLists(final Collection<VirtualFile> files, final Consumer<VcsException> exceptionConsumer) -->Line_5 $$ final FilesProgress filesProgress = new FilesProgress(files.size(), "Processing ")[ FD ]
Line_10 $$ final File patchPath = getPatchFileInConfigDir(schemeNameDir)-->Line_16 $$ FileUtil.copy(new File(file.getPath()), patchPath)[ FD ]
Line_9 $$ File schemeNameDir = generateUniqueSchemePatchDir(description, true)-->Line_10 $$ final File patchPath = getPatchFileInConfigDir(schemeNameDir)[ FD ]
Line_9 $$ File schemeNameDir = generateUniqueSchemePatchDir(description, true)-->Line_12 $$ list.setName(schemeNameDir.getName())[ FD ]
Line_6 $$ for (VirtualFile file : files) -->Line_7 $$ filesProgress.updateIndicator(file)[ FD ]
Line_6 $$ for (VirtualFile file : files) -->Line_11 $$ final ShelvedChangeList list = new ShelvedChangeList(patchPath.getPath(), description, new SmartList<ShelvedBinaryFile>(), file.getTimeStamp())[ FD ]
Line_5 $$ final FilesProgress filesProgress = new FilesProgress(files.size(), "Processing ")-->Line_7 $$ filesProgress.updateIndicator(file)[ FD ]
Line_6 $$ for (VirtualFile file : files) -->Line_8 $$ final String description = file.getNameWithoutExtension().replace('_', ' ')[ FD ]
Line_3 $$ final List<ShelvedChangeList> result = new ArrayList<ShelvedChangeList>(files.size())-->Line_19 $$ result.add(list)[ FD ]
