Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_17 $$ if (FileSystemUtil.getAttributes(ioFile) == null) [ CD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_4 $$ if (!file.exists()) [ CD ]
Line_28 $$ if (!auxMove(file, newParent)) -->Line_29 $$ if (!ioFile.renameTo(ioTarget)) [ CD ]
Line_16 $$ File ioFile = convertToIOFile(file)-->Line_29 $$ if (!ioFile.renameTo(ioTarget)) [ FD ]
Line_33 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() -->Line_35 $$ handler.move(file, newParent)[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_7 $$ if (file.getParent() == null) [ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_5 $$ throw new IOException(VfsBundle.message("vfs.file.not.exist.error", file.getPath()))[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_8 $$ throw new IOException(VfsBundle.message("cannot.rename.root.directory", file.getPath()))[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_10 $$ if (!newParent.exists() || !newParent.isDirectory()) [ CD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_20 $$ File ioParent = convertToIOFile(newParent)[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_24 $$ File ioTarget = new File(ioParent, name)[ CD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_25 $$ if (ioTarget.exists()) [ CD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_3 $$ String name = file.getName()[ FD ]
Line_20 $$ File ioParent = convertToIOFile(newParent)-->Line_30 $$ throw new IOException(VfsBundle.message("move.failed.error", ioFile.getPath(), ioParent.getPath()))[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_13 $$ if (newParent.findChild(name) != null) [ FD ]
Line_16 $$ File ioFile = convertToIOFile(file)-->Line_17 $$ if (FileSystemUtil.getAttributes(ioFile) == null) [ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_4 $$ if (!file.exists()) [ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_21 $$ if (!ioParent.isDirectory()) [ CD ]
Line_24 $$ File ioTarget = new File(ioParent, name)-->Line_25 $$ if (ioTarget.exists()) [ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_11 $$ throw new IOException(VfsBundle.message("vfs.target.not.directory.error", newParent.getPath()))[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_20 $$ File ioParent = convertToIOFile(newParent)[ CD ]
Line_24 $$ File ioTarget = new File(ioParent, name)-->Line_29 $$ if (!ioFile.renameTo(ioTarget)) [ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_33 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() [ CD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_35 $$ handler.move(file, newParent)[ FD ]
Line_24 $$ File ioTarget = new File(ioParent, name)-->Line_26 $$ throw new IOException(VfsBundle.message("target.already.exists.error", ioTarget.getPath()))[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_7 $$ if (file.getParent() == null) [ CD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_28 $$ if (!auxMove(file, newParent)) [ CD ]
Line_33 $$ auxNotifyCompleted(new ThrowableConsumer<LocalFileOperationsHandler, IOException>() -->Line_35 $$ handler.move(file, newParent)[ CD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_3 $$ String name = file.getName()[ CD ]
Line_16 $$ File ioFile = convertToIOFile(file)-->Line_18 $$ throw new FileNotFoundException(VfsBundle.message("file.not.exist.error", ioFile.getPath()))[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_28 $$ if (!auxMove(file, newParent)) [ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_16 $$ File ioFile = convertToIOFile(file)[ CD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_16 $$ File ioFile = convertToIOFile(file)[ FD ]
Line_3 $$ String name = file.getName()-->Line_13 $$ if (newParent.findChild(name) != null) [ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_14 $$ throw new IOException(VfsBundle.message("vfs.target.already.exists.error", newParent.getPath() + "/" + name))[ FD ]
Line_20 $$ File ioParent = convertToIOFile(newParent)-->Line_21 $$ if (!ioParent.isDirectory()) [ FD ]
Line_20 $$ File ioParent = convertToIOFile(newParent)-->Line_22 $$ throw new IOException(VfsBundle.message("target.not.directory.error", ioParent.getPath()))[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_13 $$ if (newParent.findChild(name) != null) [ CD ]
Line_16 $$ File ioFile = convertToIOFile(file)-->Line_30 $$ throw new IOException(VfsBundle.message("move.failed.error", ioFile.getPath(), ioParent.getPath()))[ FD ]
Line_2 $$ public void moveFile(Object requestor, @NotNull final VirtualFile file, @NotNull final VirtualFile newParent) throws IOException -->Line_10 $$ if (!newParent.exists() || !newParent.isDirectory()) [ FD ]
