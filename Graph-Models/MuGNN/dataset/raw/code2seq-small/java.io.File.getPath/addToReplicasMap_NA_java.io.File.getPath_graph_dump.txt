Line_16 $$ file = recoverTempUnlinkedBlock(file)-->Line_32 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")[ FD ]
Line_35 $$ sc = new Scanner(restartMeta)-->Line_49 $$ if (sc != null) [ FD ]
Line_12 $$ if (file.isDirectory()) -->Line_13 $$ addToReplicasMap(volumeMap, file, isFinalized)[ CD ]
Line_11 $$ for (File file : files) -->Line_12 $$ if (file.isDirectory()) [ FD ]
Line_32 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")-->Line_44 $$ FsDatasetImpl.LOG.warn("Failed to delete restart meta file: " + restartMeta.getPath())[ FD ]
Line_11 $$ for (File file : files) -->Line_32 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")[ FD ]
Line_31 $$ boolean loadRwr = true-->Line_40 $$ loadRwr = false[ FD ]
Line_16 $$ file = recoverTempUnlinkedBlock(file)-->Line_26 $$ long blockId = Block.filename2id(file.getName())[ FD ]
Line_28 $$ if (isFinalized) -->Line_29 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())[ CD ]
Line_33 $$ Scanner sc = null-->Line_35 $$ sc = new Scanner(restartMeta)[ FD ]
Line_10 $$ File[] files = FileUtil.listFiles(dir)-->Line_25 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)[ FD ]
Line_28 $$ if (isFinalized) -->Line_31 $$ boolean loadRwr = true[ CD ]
Line_27 $$ ReplicaInfo newReplica = null-->Line_55 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_29 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())-->Line_55 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_27 $$ ReplicaInfo newReplica = null-->Line_29 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())[ FD ]
Line_33 $$ Scanner sc = null-->Line_42 $$ sc.close()[ FD ]
Line_11 $$ for (File file : files) -->Line_13 $$ addToReplicasMap(volumeMap, file, isFinalized)[ FD ]
Line_35 $$ sc = new Scanner(restartMeta)-->Line_50 $$ sc.close()[ FD ]
Line_28 $$ if (isFinalized) -->Line_32 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")[ CD ]
Line_11 $$ for (File file : files) -->Line_15 $$ if (isFinalized && FsDatasetUtil.isUnlinkTmpFile(file)) [ FD ]
Line_11 $$ for (File file : files) -->Line_17 $$ if (file == null) [ FD ]
Line_58 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)-->Line_60 $$ FsDatasetImpl.LOG.warn("Two block files with the same block id exist " + "on disk: " + oldReplica.getBlockFile() + " and " + file)[ FD ]
Line_58 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)-->Line_59 $$ if (oldReplica != null) [ FD ]
Line_32 $$ File restartMeta = new File(file.getParent() + File.pathSeparator + "." + file.getName() + ".restart")-->Line_43 $$ if (restartMeta.delete()) [ FD ]
Line_11 $$ for (File file : files) -->Line_16 $$ file = recoverTempUnlinkedBlock(file)[ FD ]
Line_16 $$ file = recoverTempUnlinkedBlock(file)-->Line_17 $$ if (file == null) [ FD ]
Line_28 $$ if (isFinalized) -->Line_33 $$ Scanner sc = null[ CD ]
Line_16 $$ file = recoverTempUnlinkedBlock(file)-->Line_55 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_11 $$ for (File file : files) -->Line_26 $$ long blockId = Block.filename2id(file.getName())[ FD ]
Line_29 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())-->Line_58 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)[ FD ]
Line_11 $$ for (File file : files) -->Line_23 $$ if (!Block.isBlockFilename(file))[ FD ]
Line_16 $$ file = recoverTempUnlinkedBlock(file)-->Line_29 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())[ FD ]
Line_25 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)-->Line_55 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_11 $$ for (File file : files) -->Line_55 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())[ FD ]
Line_11 $$ for (File file : files) -->Line_29 $$ newReplica = new FinalizedReplica(blockId, file.length(), genStamp, volume, file.getParentFile())[ FD ]
Line_43 $$ if (restartMeta.delete()) -->Line_44 $$ FsDatasetImpl.LOG.warn("Failed to delete restart meta file: " + restartMeta.getPath())[ CD ]
Line_33 $$ Scanner sc = null-->Line_49 $$ if (sc != null) [ FD ]
Line_27 $$ ReplicaInfo newReplica = null-->Line_58 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)[ FD ]
Line_55 $$ newReplica = new ReplicaWaitingToBeRecovered(blockId, validateIntegrityAndSetLength(file, genStamp), genStamp, volume, file.getParentFile())-->Line_58 $$ ReplicaInfo oldReplica = volumeMap.add(bpid, newReplica)[ FD ]
Line_16 $$ file = recoverTempUnlinkedBlock(file)-->Line_25 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)[ FD ]
Line_35 $$ sc = new Scanner(restartMeta)-->Line_42 $$ sc.close()[ FD ]
Line_16 $$ file = recoverTempUnlinkedBlock(file)-->Line_23 $$ if (!Block.isBlockFilename(file))[ FD ]
Line_11 $$ for (File file : files) -->Line_25 $$ long genStamp = FsDatasetUtil.getGenerationStampFromFile(files, file)[ FD ]
Line_59 $$ if (oldReplica != null) -->Line_60 $$ FsDatasetImpl.LOG.warn("Two block files with the same block id exist " + "on disk: " + oldReplica.getBlockFile() + " and " + file)[ CD ]
Line_15 $$ if (isFinalized && FsDatasetUtil.isUnlinkTmpFile(file)) -->Line_16 $$ file = recoverTempUnlinkedBlock(file)[ CD ]
Line_49 $$ if (sc != null) -->Line_50 $$ sc.close()[ CD ]
Line_33 $$ Scanner sc = null-->Line_50 $$ sc.close()[ FD ]
Line_15 $$ if (isFinalized && FsDatasetUtil.isUnlinkTmpFile(file)) -->Line_17 $$ if (file == null) [ CD ]
