Line_10 $$ VirtualFile vTop = myFS.refreshAndFindFileByIoFile(top)-->Line_29 $$ vTop.refresh(false, true)[ FD ]
Line_9 $$ File link = IoTestUtil.createSymLink(target.getPath(), top.getPath() + "/link")-->Line_31 $$ vLink = myFS.refreshAndFindFileByIoFile(link)[ FD ]
Line_10 $$ VirtualFile vTop = myFS.refreshAndFindFileByIoFile(top)-->Line_12 $$ assertTrue(vTop.isValid())[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_18 $$ assertTrue(vLink.isValid())[ FD ]
Line_31 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_32 $$ assertNotNull(vLink)[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_3 $$ if (!SystemInfo.areSymLinksSupported) [ CD ]
Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_32 $$ assertNotNull(vLink)[ FD ]
Line_9 $$ File link = IoTestUtil.createSymLink(target.getPath(), top.getPath() + "/link")-->Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)[ FD ]
Line_31 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_33 $$ assertTrue(vLink.isValid())[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_27 $$ assertFalse(vLink.isDirectory())[ CD ]
Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_31 $$ vLink = myFS.refreshAndFindFileByIoFile(link)[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_27 $$ assertFalse(vLink.isDirectory())[ FD ]
Line_9 $$ File link = IoTestUtil.createSymLink(target.getPath(), top.getPath() + "/link")-->Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)[ FD ]
Line_7 $$ File top = createTempDirectory(true)-->Line_8 $$ File target = IoTestUtil.createTestDir(top, "target")[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_25 $$ assertNotNull(vLink)[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_23 $$ assertFalse(vLink.isValid())[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_31 $$ vLink = myFS.refreshAndFindFileByIoFile(link)[ CD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_33 $$ assertTrue(vLink.isValid())[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_23 $$ assertFalse(vLink.isValid())[ FD ]
Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_27 $$ assertFalse(vLink.isDirectory())[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_25 $$ assertNotNull(vLink)[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_28 $$ FileUtil.createDirectory(target)[ CD ]
Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_30 $$ assertFalse(vLink.isValid())[ FD ]
Line_31 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_34 $$ assertTrue(vLink.isDirectory())[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_30 $$ assertFalse(vLink.isValid())[ CD ]
Line_3 $$ if (!SystemInfo.areSymLinksSupported) -->Line_4 $$ System.err.println("Ignored: symlinks not supported")[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_15 $$ assertTrue(vTarget.isValid())[ CD ]
Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_34 $$ assertTrue(vLink.isDirectory())[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_13 $$ VirtualFile vTarget = myFS.refreshAndFindFileByIoFile(target)[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_19 $$ assertTrue(vLink.isDirectory())[ CD ]
Line_13 $$ VirtualFile vTarget = myFS.refreshAndFindFileByIoFile(target)-->Line_15 $$ assertTrue(vTarget.isValid())[ FD ]
Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_25 $$ assertNotNull(vLink)[ FD ]
Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_26 $$ assertTrue(vLink.isValid())[ FD ]
Line_13 $$ VirtualFile vTarget = myFS.refreshAndFindFileByIoFile(target)-->Line_22 $$ assertFalse(vTarget.isValid())[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_26 $$ assertTrue(vLink.isValid())[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_12 $$ assertTrue(vTop.isValid())[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_9 $$ File link = IoTestUtil.createSymLink(target.getPath(), top.getPath() + "/link")[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_33 $$ assertTrue(vLink.isValid())[ CD ]
Line_8 $$ File target = IoTestUtil.createTestDir(top, "target")-->Line_28 $$ FileUtil.createDirectory(target)[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_30 $$ assertFalse(vLink.isValid())[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_34 $$ assertTrue(vLink.isDirectory())[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_7 $$ File top = createTempDirectory(true)[ CD ]
Line_10 $$ VirtualFile vTop = myFS.refreshAndFindFileByIoFile(top)-->Line_21 $$ vTop.refresh(false, true)[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_19 $$ assertTrue(vLink.isDirectory())[ FD ]
Line_8 $$ File target = IoTestUtil.createTestDir(top, "target")-->Line_13 $$ VirtualFile vTarget = myFS.refreshAndFindFileByIoFile(target)[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_10 $$ VirtualFile vTop = myFS.refreshAndFindFileByIoFile(top)[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_17 $$ assertNotNull(vLink)[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_32 $$ assertNotNull(vLink)[ CD ]
Line_7 $$ File top = createTempDirectory(true)-->Line_9 $$ File link = IoTestUtil.createSymLink(target.getPath(), top.getPath() + "/link")[ FD ]
Line_10 $$ VirtualFile vTop = myFS.refreshAndFindFileByIoFile(top)-->Line_11 $$ assertNotNull(vTop)[ FD ]
Line_8 $$ File target = IoTestUtil.createTestDir(top, "target")-->Line_9 $$ File link = IoTestUtil.createSymLink(target.getPath(), top.getPath() + "/link")[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_20 $$ FileUtil.delete(target)[ CD ]
Line_8 $$ File target = IoTestUtil.createTestDir(top, "target")-->Line_20 $$ FileUtil.delete(target)[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_31 $$ vLink = myFS.refreshAndFindFileByIoFile(link)[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_26 $$ assertTrue(vLink.isValid())[ CD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_34 $$ assertTrue(vLink.isDirectory())[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_22 $$ assertFalse(vTarget.isValid())[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_18 $$ assertTrue(vLink.isValid())[ CD ]
Line_24 $$ vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_33 $$ assertTrue(vLink.isValid())[ FD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_17 $$ assertNotNull(vLink)[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_11 $$ assertNotNull(vTop)[ CD ]
Line_7 $$ File top = createTempDirectory(true)-->Line_10 $$ VirtualFile vTop = myFS.refreshAndFindFileByIoFile(top)[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_21 $$ vTop.refresh(false, true)[ CD ]
Line_16 $$ VirtualFile vLink = myFS.refreshAndFindFileByIoFile(link)-->Line_32 $$ assertNotNull(vLink)[ FD ]
Line_3 $$ if (!SystemInfo.areSymLinksSupported) -->Line_5 $$ return[ CD ]
Line_13 $$ VirtualFile vTarget = myFS.refreshAndFindFileByIoFile(target)-->Line_14 $$ assertNotNull(vTarget)[ FD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_8 $$ File target = IoTestUtil.createTestDir(top, "target")[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_14 $$ assertNotNull(vTarget)[ CD ]
Line_2 $$ public void testSymlinkTargetBlink() throws Exception -->Line_29 $$ vTop.refresh(false, true)[ CD ]
