Line_7 $$ String lastWorkingDirectory = historyService.getWorkDirectory()-->Line_9 $$ lastWorkingDirectory = obtainAppropriateWorkingDirectory(project)[ FD ]
Line_4 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_9 $$ lastWorkingDirectory = obtainAppropriateWorkingDirectory(project)[ FD ]
Line_33 $$ if (mavenHome == null) -->Line_42 $$ return[ CD ]
Line_24 $$ String goals = dialog.getGoals()-->Line_30 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_4 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_38 $$ ShowSettingsUtil.getInstance().showSettingsDialog(project, MavenSettings.DISPLAY_NAME)[ FD ]
Line_34 $$ Notification notification = new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP, "Failed to execute goal", RunnerBundle.message("external.maven.home.no.default.with.fix"), NotificationType.ERROR, new NotificationListener.Adapter() -->Line_38 $$ ShowSettingsUtil.getInstance().showSettingsDialog(project, MavenSettings.DISPLAY_NAME)[ CD ]
Line_24 $$ String goals = dialog.getGoals()-->Line_27 $$ goals = goals.substring("mvn ".length()).trim()[ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_7 $$ String lastWorkingDirectory = historyService.getWorkDirectory()[ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_23 $$ historyService.setCanceledCommand(null)[ FD ]
Line_33 $$ if (mavenHome == null) -->Line_34 $$ Notification notification = new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP, "Failed to execute goal", RunnerBundle.message("external.maven.home.no.default.with.fix"), NotificationType.ERROR, new NotificationListener.Adapter() [ CD ]
Line_27 $$ goals = goals.substring("mvn ".length()).trim()-->Line_30 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_34 $$ Notification notification = new Notification(MavenUtil.MAVEN_NOTIFICATION_GROUP, "Failed to execute goal", RunnerBundle.message("external.maven.home.no.default.with.fix"), NotificationType.ERROR, new NotificationListener.Adapter() -->Line_41 $$ Notifications.Bus.notify(notification, project)[ FD ]
Line_6 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_11 $$ dialog.setWorkDirectory(lastWorkingDirectory)[ FD ]
Line_6 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_29 $$ String workDirectory = dialog.getWorkDirectory()[ FD ]
Line_32 $$ File mavenHome = MavenUtil.resolveMavenHomeDirectory(projectsManager.getGeneralSettings().getMavenHome())-->Line_33 $$ if (mavenHome == null) [ FD ]
Line_7 $$ String lastWorkingDirectory = historyService.getWorkDirectory()-->Line_11 $$ dialog.setWorkDirectory(lastWorkingDirectory)[ FD ]
Line_27 $$ goals = goals.substring("mvn ".length()).trim()-->Line_44 $$ MavenRunnerParameters parameters = new MavenRunnerParameters(true, workDirectory, Arrays.asList(ParametersList.parse(goals)), Collections.<String>emptyList())[ FD ]
Line_26 $$ if (goals.startsWith("mvn ")) -->Line_27 $$ goals = goals.substring("mvn ".length()).trim()[ CD ]
Line_6 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_19 $$ if (!dialog.showAndGet()) [ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_20 $$ historyService.setCanceledCommand(dialog.getGoals())[ FD ]
Line_4 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_50 $$ MavenRunConfigurationType.runConfiguration(project, parameters, generalSettings, runnerSettings, null)[ FD ]
Line_25 $$ goals = goals.trim()-->Line_26 $$ if (goals.startsWith("mvn ")) [ FD ]
Line_24 $$ String goals = dialog.getGoals()-->Line_44 $$ MavenRunnerParameters parameters = new MavenRunnerParameters(true, workDirectory, Arrays.asList(ParametersList.parse(goals)), Collections.<String>emptyList())[ FD ]
Line_13 $$ if (historyService.getHistory().size() > 0) -->Line_14 $$ dialog.setGoals(historyService.getHistory().get(0))[ CD ]
Line_19 $$ if (!dialog.showAndGet()) -->Line_20 $$ historyService.setCanceledCommand(dialog.getGoals())[ CD ]
Line_6 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_20 $$ historyService.setCanceledCommand(dialog.getGoals())[ FD ]
Line_6 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_17 $$ dialog.setGoals(historyService.getCanceledCommand())[ FD ]
Line_12 $$ if (StringUtil.isEmptyOrSpaces(historyService.getCanceledCommand())) -->Line_13 $$ if (historyService.getHistory().size() > 0) [ CD ]
Line_6 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_24 $$ String goals = dialog.getGoals()[ FD ]
Line_8 $$ if (lastWorkingDirectory.length() == 0) -->Line_9 $$ lastWorkingDirectory = obtainAppropriateWorkingDirectory(project)[ CD ]
Line_6 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())-->Line_14 $$ dialog.setGoals(historyService.getHistory().get(0))[ FD ]
Line_31 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)-->Line_32 $$ File mavenHome = MavenUtil.resolveMavenHomeDirectory(projectsManager.getGeneralSettings().getMavenHome())[ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_6 $$ MavenExecuteGoalDialog dialog = new MavenExecuteGoalDialog(project, historyService.getHistory())[ FD ]
Line_29 $$ String workDirectory = dialog.getWorkDirectory()-->Line_30 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_32 $$ File mavenHome = MavenUtil.resolveMavenHomeDirectory(projectsManager.getGeneralSettings().getMavenHome())-->Line_46 $$ generalSettings.setMavenHome(mavenHome.getPath())[ FD ]
Line_4 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_31 $$ MavenProjectsManager projectsManager = MavenProjectsManager.getInstance(project)[ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_17 $$ dialog.setGoals(historyService.getCanceledCommand())[ FD ]
Line_9 $$ lastWorkingDirectory = obtainAppropriateWorkingDirectory(project)-->Line_11 $$ dialog.setWorkDirectory(lastWorkingDirectory)[ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_12 $$ if (StringUtil.isEmptyOrSpaces(historyService.getCanceledCommand())) [ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_13 $$ if (historyService.getHistory().size() > 0) [ FD ]
Line_4 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_47 $$ MavenRunnerSettings runnerSettings = MavenRunner.getInstance(project).getSettings().clone()[ FD ]
Line_7 $$ String lastWorkingDirectory = historyService.getWorkDirectory()-->Line_8 $$ if (lastWorkingDirectory.length() == 0) [ FD ]
Line_19 $$ if (!dialog.showAndGet()) -->Line_21 $$ return[ CD ]
Line_24 $$ String goals = dialog.getGoals()-->Line_25 $$ goals = goals.trim()[ FD ]
Line_12 $$ if (StringUtil.isEmptyOrSpaces(historyService.getCanceledCommand())) -->Line_17 $$ dialog.setGoals(historyService.getCanceledCommand())[ CD ]
Line_25 $$ goals = goals.trim()-->Line_44 $$ MavenRunnerParameters parameters = new MavenRunnerParameters(true, workDirectory, Arrays.asList(ParametersList.parse(goals)), Collections.<String>emptyList())[ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_14 $$ dialog.setGoals(historyService.getHistory().get(0))[ FD ]
Line_25 $$ goals = goals.trim()-->Line_27 $$ goals = goals.substring("mvn ".length()).trim()[ FD ]
Line_25 $$ goals = goals.trim()-->Line_30 $$ historyService.addCommand(goals, workDirectory)[ FD ]
Line_33 $$ if (mavenHome == null) -->Line_41 $$ Notifications.Bus.notify(notification, project)[ CD ]
Line_4 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)[ FD ]
Line_24 $$ String goals = dialog.getGoals()-->Line_26 $$ if (goals.startsWith("mvn ")) [ FD ]
Line_4 $$ final Project project = e.getRequiredData(CommonDataKeys.PROJECT)-->Line_41 $$ Notifications.Bus.notify(notification, project)[ FD ]
Line_5 $$ ExecuteMavenGoalHistoryService historyService = ExecuteMavenGoalHistoryService.getInstance(project)-->Line_30 $$ historyService.addCommand(goals, workDirectory)[ FD ]
