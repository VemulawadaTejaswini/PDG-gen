Line_3 $$ boolean marked = false-->Line_21 $$ marked = true[ FD ]
Line_25 $$ if (Utils.IS_TEST_MODE) -->Line_26 $$ LOG.info("Not affected by compile scope; marking dirty again: " + file.getPath())[ CD ]
Line_12 $$ for (File file : files) -->Line_14 $$ final long currentFileStamp = FileSystemUtil.lastModified(file)[ FD ]
Line_12 $$ for (File file : files) -->Line_26 $$ LOG.info("Not affected by compile scope; marking dirty again: " + file.getPath())[ FD ]
Line_12 $$ for (File file : files) -->Line_13 $$ if (scope.isAffected(target, file)) [ FD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_6 $$ final long targetBuildStartStamp = context.getCompilationStartStamp(target)[ CD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_3 $$ boolean marked = false[ CD ]
Line_12 $$ for (File file : files) -->Line_19 $$ delta.markRecompile(rd, file)[ FD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_7 $$ delta.lockData()[ CD ]
Line_13 $$ if (scope.isAffected(target, file)) -->Line_25 $$ if (Utils.IS_TEST_MODE) [ CD ]
Line_12 $$ for (File file : files) -->Line_15 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) [ FD ]
Line_15 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) -->Line_21 $$ marked = true[ CD ]
Line_15 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) -->Line_22 $$ stamps.saveStamp(file, target, currentFileStamp)[ CD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_11 $$ CompileScope scope = context.getScope()[ FD ]
Line_5 $$ final FilesDelta delta = getDelta(target)-->Line_34 $$ delta.unlockData()[ FD ]
Line_12 $$ for (File file : files) -->Line_28 $$ delta.markRecompile(rd, file)[ FD ]
Line_13 $$ if (scope.isAffected(target, file)) -->Line_28 $$ delta.markRecompile(rd, file)[ CD ]
Line_10 $$ if (files != null) -->Line_11 $$ CompileScope scope = context.getScope()[ CD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_19 $$ delta.markRecompile(rd, file)[ FD ]
Line_4 $$ final BuildTarget<?> target = rd.getTarget()-->Line_13 $$ if (scope.isAffected(target, file)) [ FD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_28 $$ delta.markRecompile(rd, file)[ FD ]
Line_5 $$ final FilesDelta delta = getDelta(target)-->Line_28 $$ delta.markRecompile(rd, file)[ FD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_4 $$ final BuildTarget<?> target = rd.getTarget()[ CD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_6 $$ final long targetBuildStartStamp = context.getCompilationStartStamp(target)[ FD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_4 $$ final BuildTarget<?> target = rd.getTarget()[ FD ]
Line_12 $$ for (File file : files) -->Line_17 $$ LOG.info("Timestamp after compilation started; marking dirty again: " + file.getPath())[ FD ]
Line_14 $$ final long currentFileStamp = FileSystemUtil.lastModified(file)-->Line_22 $$ stamps.saveStamp(file, target, currentFileStamp)[ FD ]
Line_15 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) -->Line_19 $$ delta.markRecompile(rd, file)[ CD ]
Line_5 $$ final FilesDelta delta = getDelta(target)-->Line_9 $$ final Set<File> files = delta.clearRecompile(rd)[ FD ]
Line_4 $$ final BuildTarget<?> target = rd.getTarget()-->Line_6 $$ final long targetBuildStartStamp = context.getCompilationStartStamp(target)[ FD ]
Line_4 $$ final BuildTarget<?> target = rd.getTarget()-->Line_22 $$ stamps.saveStamp(file, target, currentFileStamp)[ FD ]
Line_15 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) -->Line_16 $$ if (Utils.IS_TEST_MODE) [ CD ]
Line_12 $$ for (File file : files) -->Line_22 $$ stamps.saveStamp(file, target, currentFileStamp)[ FD ]
Line_5 $$ final FilesDelta delta = getDelta(target)-->Line_19 $$ delta.markRecompile(rd, file)[ FD ]
Line_13 $$ if (scope.isAffected(target, file)) -->Line_15 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) [ CD ]
Line_9 $$ final Set<File> files = delta.clearRecompile(rd)-->Line_10 $$ if (files != null) [ FD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_22 $$ stamps.saveStamp(file, target, currentFileStamp)[ FD ]
Line_16 $$ if (Utils.IS_TEST_MODE) -->Line_17 $$ LOG.info("Timestamp after compilation started; marking dirty again: " + file.getPath())[ CD ]
Line_4 $$ final BuildTarget<?> target = rd.getTarget()-->Line_5 $$ final FilesDelta delta = getDelta(target)[ FD ]
Line_11 $$ CompileScope scope = context.getScope()-->Line_13 $$ if (scope.isAffected(target, file)) [ FD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_5 $$ final FilesDelta delta = getDelta(target)[ CD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_15 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) [ FD ]
Line_5 $$ final FilesDelta delta = getDelta(target)-->Line_7 $$ delta.lockData()[ FD ]
Line_2 $$ public boolean markAllUpToDate(CompileContext context, final BuildRootDescriptor rd, final Timestamps stamps) throws IOException -->Line_9 $$ final Set<File> files = delta.clearRecompile(rd)[ FD ]
Line_13 $$ if (scope.isAffected(target, file)) -->Line_14 $$ final long currentFileStamp = FileSystemUtil.lastModified(file)[ CD ]
