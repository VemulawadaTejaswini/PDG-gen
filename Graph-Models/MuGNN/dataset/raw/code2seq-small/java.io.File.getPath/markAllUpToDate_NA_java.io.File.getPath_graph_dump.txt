Line_17 $$ if (scope.isAffected(target, file)) -->Line_19 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) [ CD ]
Line_19 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) -->Line_28 $$ delta.markRecompile(rd, file)[ CD ]
Line_18 $$ final long currentFileStamp = FileSystemUtil.lastModified(file)-->Line_31 $$ stamps.saveStamp(file, target, currentFileStamp)[ FD ]
Line_16 $$ for (File file : files) -->Line_18 $$ final long currentFileStamp = FileSystemUtil.lastModified(file)[ FD ]
Line_16 $$ for (File file : files) -->Line_31 $$ stamps.saveStamp(file, target, currentFileStamp)[ FD ]
Line_7 $$ final BuildTarget<?> target = rd.getTarget()-->Line_8 $$ final FilesDelta delta = getDelta(target)[ FD ]
Line_16 $$ for (File file : files) -->Line_19 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) [ FD ]
Line_17 $$ if (scope.isAffected(target, file)) -->Line_34 $$ if (Utils.IS_TEST_MODE) [ CD ]
Line_8 $$ final FilesDelta delta = getDelta(target)-->Line_37 $$ delta.markRecompile(rd, file)[ FD ]
Line_16 $$ for (File file : files) -->Line_35 $$ LOG.info("Not affected by compile scope; marking dirty again: " + file.getPath())[ FD ]
Line_8 $$ final FilesDelta delta = getDelta(target)-->Line_43 $$ delta.unlockData()[ FD ]
Line_16 $$ for (File file : files) -->Line_28 $$ delta.markRecompile(rd, file)[ FD ]
Line_15 $$ CompileScope scope = context.getScope()-->Line_17 $$ if (scope.isAffected(target, file)) [ FD ]
Line_16 $$ for (File file : files) -->Line_17 $$ if (scope.isAffected(target, file)) [ FD ]
Line_16 $$ for (File file : files) -->Line_26 $$ LOG.info("Timestamp after compilation started; marking dirty again: " + file.getPath())[ FD ]
Line_6 $$ boolean marked = false-->Line_30 $$ marked = true[ FD ]
Line_19 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) -->Line_31 $$ stamps.saveStamp(file, target, currentFileStamp)[ CD ]
Line_7 $$ final BuildTarget<?> target = rd.getTarget()-->Line_31 $$ stamps.saveStamp(file, target, currentFileStamp)[ FD ]
Line_17 $$ if (scope.isAffected(target, file)) -->Line_37 $$ delta.markRecompile(rd, file)[ CD ]
Line_14 $$ if (files != null) -->Line_15 $$ CompileScope scope = context.getScope()[ CD ]
Line_34 $$ if (Utils.IS_TEST_MODE) -->Line_35 $$ LOG.info("Not affected by compile scope; marking dirty again: " + file.getPath())[ CD ]
Line_13 $$ final Set<File> files = delta.clearRecompile(rd)-->Line_14 $$ if (files != null) [ FD ]
Line_16 $$ for (File file : files) -->Line_37 $$ delta.markRecompile(rd, file)[ FD ]
Line_8 $$ final FilesDelta delta = getDelta(target)-->Line_13 $$ final Set<File> files = delta.clearRecompile(rd)[ FD ]
Line_17 $$ if (scope.isAffected(target, file)) -->Line_18 $$ final long currentFileStamp = FileSystemUtil.lastModified(file)[ CD ]
Line_19 $$ if (!rd.isGenerated() && (currentFileStamp > targetBuildStartStamp || getEventRegistrationStamp(file) > targetBuildStartStamp)) -->Line_30 $$ marked = true[ CD ]
Line_7 $$ final BuildTarget<?> target = rd.getTarget()-->Line_9 $$ final long targetBuildStartStamp = context.getCompilationStartStamp(target)[ FD ]
Line_7 $$ final BuildTarget<?> target = rd.getTarget()-->Line_17 $$ if (scope.isAffected(target, file)) [ FD ]
Line_8 $$ final FilesDelta delta = getDelta(target)-->Line_28 $$ delta.markRecompile(rd, file)[ FD ]
