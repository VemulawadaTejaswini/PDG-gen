Line_2 $$ public void testCopyDir() throws Exception -->Line_13 $$ final VirtualFile dirCopy = copy(dirToCopy, toVDir, newName)[ CD ]
Line_12 $$ final String newName = "dir"-->Line_14 $$ assertEquals(newName, dirCopy.getName())[ FD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_10 $$ final VirtualFile file = createChildData(dirToCopy, "temp_file")[ CD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_5 $$ VirtualFile fromVDir = myFS.findFileByPath(fromDir.getPath().replace(File.separatorChar, '/'))[ CD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_8 $$ assertNotNull(toVDir)[ CD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_15 $$ PlatformTestUtil.assertDirectoriesEqual(toVDir, fromVDir)[ CD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_6 $$ VirtualFile toVDir = myFS.findFileByPath(toDir.getPath().replace(File.separatorChar, '/'))[ CD ]
Line_9 $$ final VirtualFile dirToCopy = createChildDirectory(fromVDir, "dir")-->Line_13 $$ final VirtualFile dirCopy = copy(dirToCopy, toVDir, newName)[ FD ]
Line_5 $$ VirtualFile fromVDir = myFS.findFileByPath(fromDir.getPath().replace(File.separatorChar, '/'))-->Line_9 $$ final VirtualFile dirToCopy = createChildDirectory(fromVDir, "dir")[ FD ]
Line_3 $$ File fromDir = createTempDirectory()-->Line_5 $$ VirtualFile fromVDir = myFS.findFileByPath(fromDir.getPath().replace(File.separatorChar, '/'))[ FD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_14 $$ assertEquals(newName, dirCopy.getName())[ CD ]
Line_4 $$ File toDir = createTempDirectory()-->Line_6 $$ VirtualFile toVDir = myFS.findFileByPath(toDir.getPath().replace(File.separatorChar, '/'))[ FD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_4 $$ File toDir = createTempDirectory()[ CD ]
Line_5 $$ VirtualFile fromVDir = myFS.findFileByPath(fromDir.getPath().replace(File.separatorChar, '/'))-->Line_7 $$ assertNotNull(fromVDir)[ FD ]
Line_10 $$ final VirtualFile file = createChildData(dirToCopy, "temp_file")-->Line_11 $$ setBinaryContent(file, new byte[] [ FD ]
Line_6 $$ VirtualFile toVDir = myFS.findFileByPath(toDir.getPath().replace(File.separatorChar, '/'))-->Line_15 $$ PlatformTestUtil.assertDirectoriesEqual(toVDir, fromVDir)[ FD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_11 $$ setBinaryContent(file, new byte[] [ CD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_12 $$ final String newName = "dir"[ CD ]
Line_6 $$ VirtualFile toVDir = myFS.findFileByPath(toDir.getPath().replace(File.separatorChar, '/'))-->Line_8 $$ assertNotNull(toVDir)[ FD ]
Line_12 $$ final String newName = "dir"-->Line_13 $$ final VirtualFile dirCopy = copy(dirToCopy, toVDir, newName)[ FD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_3 $$ File fromDir = createTempDirectory()[ CD ]
Line_6 $$ VirtualFile toVDir = myFS.findFileByPath(toDir.getPath().replace(File.separatorChar, '/'))-->Line_13 $$ final VirtualFile dirCopy = copy(dirToCopy, toVDir, newName)[ FD ]
Line_5 $$ VirtualFile fromVDir = myFS.findFileByPath(fromDir.getPath().replace(File.separatorChar, '/'))-->Line_15 $$ PlatformTestUtil.assertDirectoriesEqual(toVDir, fromVDir)[ FD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_9 $$ final VirtualFile dirToCopy = createChildDirectory(fromVDir, "dir")[ CD ]
Line_13 $$ final VirtualFile dirCopy = copy(dirToCopy, toVDir, newName)-->Line_14 $$ assertEquals(newName, dirCopy.getName())[ FD ]
Line_9 $$ final VirtualFile dirToCopy = createChildDirectory(fromVDir, "dir")-->Line_10 $$ final VirtualFile file = createChildData(dirToCopy, "temp_file")[ FD ]
Line_2 $$ public void testCopyDir() throws Exception -->Line_7 $$ assertNotNull(fromVDir)[ CD ]
