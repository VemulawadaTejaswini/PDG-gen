Line_23 $$ final NewLibraryEditor libraryEditor-->Line_32 $$ libraryEditor.addRoot(pair.getFirst(), rootType)[ FD ]
Line_23 $$ final NewLibraryEditor libraryEditor-->Line_29 $$ libraryEditor.setName(myLibraryName)[ FD ]
Line_25 $$ libraryEditor = new NewLibraryEditor(myLibraryType, new LibraryVersionProperties(myVersion.getVersionString()))-->Line_32 $$ libraryEditor.addRoot(pair.getFirst(), rootType)[ FD ]
Line_4 $$ final List<DownloadableFileDescription> toDownload = new ArrayList<DownloadableFileDescription>(mySelectedDownloads)-->Line_9 $$ toDownload.add(sources)[ FD ]
Line_27 $$ libraryEditor = new NewLibraryEditor()-->Line_29 $$ libraryEditor.setName(myLibraryName)[ FD ]
Line_5 $$ Map<DownloadableFileDescription, OrderRootType> rootTypes = new HashMap<DownloadableFileDescription, OrderRootType>()-->Line_31 $$ final OrderRootType rootType = rootTypes.containsKey(pair.getSecond()) ? rootTypes.get(pair.getSecond()) : OrderRootType.CLASSES[ FD ]
Line_5 $$ Map<DownloadableFileDescription, OrderRootType> rootTypes = new HashMap<DownloadableFileDescription, OrderRootType>()-->Line_15 $$ rootTypes.put(docs, JavadocOrderRootType.getInstance())[ FD ]
Line_13 $$ if (myDownloadJavaDocs && docs != null) -->Line_14 $$ toDownload.add(docs)[ CD ]
Line_13 $$ if (myDownloadJavaDocs && docs != null) -->Line_15 $$ rootTypes.put(docs, JavadocOrderRootType.getInstance())[ CD ]
Line_30 $$ for (Pair<VirtualFile, DownloadableFileDescription> pair : downloaded) -->Line_31 $$ final OrderRootType rootType = rootTypes.containsKey(pair.getSecond()) ? rootTypes.get(pair.getSecond()) : OrderRootType.CLASSES[ FD ]
Line_25 $$ libraryEditor = new NewLibraryEditor(myLibraryType, new LibraryVersionProperties(myVersion.getVersionString()))-->Line_29 $$ libraryEditor.setName(myLibraryName)[ FD ]
Line_8 $$ if (myDownloadSources && sources != null) -->Line_9 $$ toDownload.add(sources)[ CD ]
Line_6 $$ for (DownloadableLibraryFileDescription description : mySelectedDownloads) -->Line_12 $$ final DownloadableFileDescription docs = description.getDocumentationDescription()[ FD ]
Line_4 $$ final List<DownloadableFileDescription> toDownload = new ArrayList<DownloadableFileDescription>(mySelectedDownloads)-->Line_19 $$ List<Pair<VirtualFile, DownloadableFileDescription>> downloaded = DownloadableFileService.getInstance().createDownloader(toDownload, myLibraryName + " Library").downloadWithProgress(path, null, parent)[ FD ]
Line_7 $$ final DownloadableFileDescription sources = description.getSourcesDescription()-->Line_10 $$ rootTypes.put(sources, OrderRootType.SOURCES)[ FD ]
Line_23 $$ final NewLibraryEditor libraryEditor-->Line_25 $$ libraryEditor = new NewLibraryEditor(myLibraryType, new LibraryVersionProperties(myVersion.getVersionString()))[ FD ]
Line_25 $$ libraryEditor = new NewLibraryEditor(myLibraryType, new LibraryVersionProperties(myVersion.getVersionString()))-->Line_27 $$ libraryEditor = new NewLibraryEditor()[ FD ]
Line_27 $$ libraryEditor = new NewLibraryEditor()-->Line_32 $$ libraryEditor.addRoot(pair.getFirst(), rootType)[ FD ]
Line_20 $$ if (downloaded == null) -->Line_21 $$ return null[ CD ]
Line_19 $$ List<Pair<VirtualFile, DownloadableFileDescription>> downloaded = DownloadableFileService.getInstance().createDownloader(toDownload, myLibraryName + " Library").downloadWithProgress(path, null, parent)-->Line_20 $$ if (downloaded == null) [ FD ]
Line_23 $$ final NewLibraryEditor libraryEditor-->Line_27 $$ libraryEditor = new NewLibraryEditor()[ FD ]
Line_12 $$ final DownloadableFileDescription docs = description.getDocumentationDescription()-->Line_15 $$ rootTypes.put(docs, JavadocOrderRootType.getInstance())[ FD ]
Line_12 $$ final DownloadableFileDescription docs = description.getDocumentationDescription()-->Line_14 $$ toDownload.add(docs)[ FD ]
Line_24 $$ if (myLibraryType != null) -->Line_27 $$ libraryEditor = new NewLibraryEditor()[ CD ]
Line_18 $$ String path = rootPath != null && !FileUtil.isAbsolute(myLibrariesPath) ? new File(rootPath, myLibrariesPath).getPath() : myLibrariesPath-->Line_19 $$ List<Pair<VirtualFile, DownloadableFileDescription>> downloaded = DownloadableFileService.getInstance().createDownloader(toDownload, myLibraryName + " Library").downloadWithProgress(path, null, parent)[ FD ]
Line_31 $$ final OrderRootType rootType = rootTypes.containsKey(pair.getSecond()) ? rootTypes.get(pair.getSecond()) : OrderRootType.CLASSES-->Line_32 $$ libraryEditor.addRoot(pair.getFirst(), rootType)[ FD ]
Line_30 $$ for (Pair<VirtualFile, DownloadableFileDescription> pair : downloaded) -->Line_32 $$ libraryEditor.addRoot(pair.getFirst(), rootType)[ FD ]
Line_4 $$ final List<DownloadableFileDescription> toDownload = new ArrayList<DownloadableFileDescription>(mySelectedDownloads)-->Line_14 $$ toDownload.add(docs)[ FD ]
Line_8 $$ if (myDownloadSources && sources != null) -->Line_10 $$ rootTypes.put(sources, OrderRootType.SOURCES)[ CD ]
Line_6 $$ for (DownloadableLibraryFileDescription description : mySelectedDownloads) -->Line_7 $$ final DownloadableFileDescription sources = description.getSourcesDescription()[ FD ]
Line_7 $$ final DownloadableFileDescription sources = description.getSourcesDescription()-->Line_9 $$ toDownload.add(sources)[ FD ]
Line_5 $$ Map<DownloadableFileDescription, OrderRootType> rootTypes = new HashMap<DownloadableFileDescription, OrderRootType>()-->Line_10 $$ rootTypes.put(sources, OrderRootType.SOURCES)[ FD ]
Line_24 $$ if (myLibraryType != null) -->Line_25 $$ libraryEditor = new NewLibraryEditor(myLibraryType, new LibraryVersionProperties(myVersion.getVersionString()))[ CD ]
