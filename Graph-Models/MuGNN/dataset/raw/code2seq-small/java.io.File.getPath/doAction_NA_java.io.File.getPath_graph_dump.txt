Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_27 $$ final String dirPath = relativeFileDir.getPath()[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_25 $$ parameters.add("0".equals(enumLimit) ? "never" : enumLimit)[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_41 $$ if (xsdFile != null) [ CD ]
Line_11 $$ relativeFileDir = relativeFile.getParent()-->Line_27 $$ final String dirPath = relativeFileDir.getPath()[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_19 $$ parameters.add("-design")[ CD ]
Line_7 $$ if (relativeFile == null) -->Line_8 $$ Messages.showErrorDialog(project, XmlBundle.message("file.doesnt.exist", url), XmlBundle.message("error"))[ CD ]
Line_6 $$ VirtualFile relativeFileDir-->Line_27 $$ final String dirPath = relativeFileDir.getPath()[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_14 $$ Messages.showErrorDialog(project, XmlBundle.message("file.doesnt.exist", url), XmlBundle.message("error"))[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_7 $$ if (relativeFile == null) [ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_4 $$ final String url = dialog.getUrl().getText()[ CD ]
Line_31 $$ if (!expectedSchemaFile.delete()) -->Line_32 $$ Messages.showErrorDialog(project, XmlBundle.message("cant.delete.file", expectedSchemaFile.getPath()), XmlBundle.message("error"))[ CD ]
Line_7 $$ if (relativeFile == null) -->Line_11 $$ relativeFileDir = relativeFile.getParent()[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_4 $$ final String url = dialog.getUrl().getText()[ FD ]
Line_62 $$ if (xsdVFile != null) -->Line_65 $$ Messages.showErrorDialog(project, XmlBundle.message("xml2xsd.generator.error.message"), XmlBundle.message("xml2xsd.generator.error"))[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_13 $$ if (relativeFileDir == null) [ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_24 $$ String enumLimit = dialog.getEnumerationsLimit()[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_38 $$ parameters.add(url)[ CD ]
Line_41 $$ if (xsdFile != null) -->Line_42 $$ ApplicationManager.getApplication().runWriteAction(new Runnable() [ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_29 $$ final File expectedSchemaFile = new File(dirPath + File.separator + relativeFile.getName() + "0.xsd")[ CD ]
Line_5 $$ final VirtualFile relativeFile = VfsUtilCore.findRelativeFile(ExternalResourceManager.getInstance().getResourceLocation(url), null)-->Line_37 $$ parameters.add(relativeFile.getName())[ FD ]
Line_55 $$ if (expectedSchemaFile.exists()) -->Line_57 $$ if (!renamed) [ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_58 $$ Messages.showErrorDialog(project, XmlBundle.message("cant.rename.file", expectedSchemaFile.getPath(), xsd.getPath()), XmlBundle.message("error"))[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_55 $$ if (expectedSchemaFile.exists()) [ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_22 $$ parameters.add(CONTENT_TYPES.get(dialog.getSimpleContentType()))[ CD ]
Line_11 $$ relativeFileDir = relativeFile.getParent()-->Line_13 $$ if (relativeFileDir == null) [ FD ]
Line_6 $$ VirtualFile relativeFileDir-->Line_11 $$ relativeFileDir = relativeFile.getParent()[ FD ]
Line_6 $$ VirtualFile relativeFileDir-->Line_13 $$ if (relativeFileDir == null) [ FD ]
Line_57 $$ if (!renamed) -->Line_58 $$ Messages.showErrorDialog(project, XmlBundle.message("cant.rename.file", expectedSchemaFile.getPath(), xsd.getPath()), XmlBundle.message("error"))[ CD ]
Line_29 $$ final File expectedSchemaFile = new File(dirPath + File.separator + relativeFile.getName() + "0.xsd")-->Line_31 $$ if (!expectedSchemaFile.delete()) [ FD ]
Line_5 $$ final VirtualFile relativeFile = VfsUtilCore.findRelativeFile(ExternalResourceManager.getInstance().getResourceLocation(url), null)-->Line_7 $$ if (relativeFile == null) [ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_40 $$ final VirtualFile xsdFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(xsd)[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_37 $$ parameters.add(relativeFile.getName())[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_23 $$ parameters.add("-enumerations")[ CD ]
Line_40 $$ final VirtualFile xsdFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(xsd)-->Line_41 $$ if (xsdFile != null) [ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_5 $$ final VirtualFile relativeFile = VfsUtilCore.findRelativeFile(ExternalResourceManager.getInstance().getResourceLocation(url), null)[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_20 $$ parameters.add(DESIGN_TYPES.get(dialog.getDesignType()))[ FD ]
Line_31 $$ if (!expectedSchemaFile.delete()) -->Line_33 $$ return[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_54 $$ Inst2Xsd.main(ArrayUtil.toStringArray(parameters))[ CD ]
Line_55 $$ if (expectedSchemaFile.exists()) -->Line_56 $$ final boolean renamed = expectedSchemaFile.renameTo(xsd)[ CD ]
Line_27 $$ final String dirPath = relativeFileDir.getPath()-->Line_28 $$ parameters.add(dirPath)[ FD ]
Line_39 $$ File xsd = new File(dirPath + File.separator + dialog.getTargetSchemaName())-->Line_58 $$ Messages.showErrorDialog(project, XmlBundle.message("cant.rename.file", expectedSchemaFile.getPath(), xsd.getPath()), XmlBundle.message("error"))[ FD ]
Line_29 $$ final File expectedSchemaFile = new File(dirPath + File.separator + relativeFile.getName() + "0.xsd")-->Line_56 $$ final boolean renamed = expectedSchemaFile.renameTo(xsd)[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_32 $$ Messages.showErrorDialog(project, XmlBundle.message("cant.delete.file", expectedSchemaFile.getPath()), XmlBundle.message("error"))[ FD ]
Line_4 $$ final String url = dialog.getUrl().getText()-->Line_8 $$ Messages.showErrorDialog(project, XmlBundle.message("file.doesnt.exist", url), XmlBundle.message("error"))[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_65 $$ Messages.showErrorDialog(project, XmlBundle.message("xml2xsd.generator.error.message"), XmlBundle.message("xml2xsd.generator.error"))[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_63 $$ FileEditorManager.getInstance(project).openFile(xsdVFile, true)[ FD ]
Line_40 $$ final VirtualFile xsdFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(xsd)-->Line_47 $$ xsdFile.delete(null)[ FD ]
Line_7 $$ if (relativeFile == null) -->Line_9 $$ return[ CD ]
Line_62 $$ if (xsdVFile != null) -->Line_63 $$ FileEditorManager.getInstance(project).openFile(xsdVFile, true)[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_3 $$ FileDocumentManager.getInstance().saveAllDocuments()[ CD ]
Line_24 $$ String enumLimit = dialog.getEnumerationsLimit()-->Line_25 $$ parameters.add("0".equals(enumLimit) ? "never" : enumLimit)[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_8 $$ Messages.showErrorDialog(project, XmlBundle.message("file.doesnt.exist", url), XmlBundle.message("error"))[ FD ]
Line_39 $$ File xsd = new File(dirPath + File.separator + dialog.getTargetSchemaName())-->Line_56 $$ final boolean renamed = expectedSchemaFile.renameTo(xsd)[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_26 $$ parameters.add("-outDir")[ CD ]
Line_30 $$ if (expectedSchemaFile.exists()) -->Line_31 $$ if (!expectedSchemaFile.delete()) [ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_61 $$ VirtualFile xsdVFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(xsd)[ CD ]
Line_29 $$ final File expectedSchemaFile = new File(dirPath + File.separator + relativeFile.getName() + "0.xsd")-->Line_58 $$ Messages.showErrorDialog(project, XmlBundle.message("cant.rename.file", expectedSchemaFile.getPath(), xsd.getPath()), XmlBundle.message("error"))[ FD ]
Line_29 $$ final File expectedSchemaFile = new File(dirPath + File.separator + relativeFile.getName() + "0.xsd")-->Line_32 $$ Messages.showErrorDialog(project, XmlBundle.message("cant.delete.file", expectedSchemaFile.getPath()), XmlBundle.message("error"))[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_39 $$ File xsd = new File(dirPath + File.separator + dialog.getTargetSchemaName())[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_22 $$ parameters.add(CONTENT_TYPES.get(dialog.getSimpleContentType()))[ FD ]
Line_5 $$ final VirtualFile relativeFile = VfsUtilCore.findRelativeFile(ExternalResourceManager.getInstance().getResourceLocation(url), null)-->Line_29 $$ final File expectedSchemaFile = new File(dirPath + File.separator + relativeFile.getName() + "0.xsd")[ FD ]
Line_5 $$ final VirtualFile relativeFile = VfsUtilCore.findRelativeFile(ExternalResourceManager.getInstance().getResourceLocation(url), null)-->Line_11 $$ relativeFileDir = relativeFile.getParent()[ FD ]
Line_13 $$ if (relativeFileDir == null) -->Line_14 $$ Messages.showErrorDialog(project, XmlBundle.message("file.doesnt.exist", url), XmlBundle.message("error"))[ CD ]
Line_13 $$ if (relativeFileDir == null) -->Line_15 $$ return[ CD ]
Line_29 $$ final File expectedSchemaFile = new File(dirPath + File.separator + relativeFile.getName() + "0.xsd")-->Line_55 $$ if (expectedSchemaFile.exists()) [ FD ]
Line_39 $$ File xsd = new File(dirPath + File.separator + dialog.getTargetSchemaName())-->Line_61 $$ VirtualFile xsdVFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(xsd)[ FD ]
Line_4 $$ final String url = dialog.getUrl().getText()-->Line_14 $$ Messages.showErrorDialog(project, XmlBundle.message("file.doesnt.exist", url), XmlBundle.message("error"))[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_20 $$ parameters.add(DESIGN_TYPES.get(dialog.getDesignType()))[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_28 $$ parameters.add(dirPath)[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_30 $$ if (expectedSchemaFile.exists()) [ CD ]
Line_39 $$ File xsd = new File(dirPath + File.separator + dialog.getTargetSchemaName())-->Line_40 $$ final VirtualFile xsdFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(xsd)[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_62 $$ if (xsdVFile != null) [ CD ]
Line_4 $$ final String url = dialog.getUrl().getText()-->Line_5 $$ final VirtualFile relativeFile = VfsUtilCore.findRelativeFile(ExternalResourceManager.getInstance().getResourceLocation(url), null)[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_39 $$ File xsd = new File(dirPath + File.separator + dialog.getTargetSchemaName())[ FD ]
Line_29 $$ final File expectedSchemaFile = new File(dirPath + File.separator + relativeFile.getName() + "0.xsd")-->Line_30 $$ if (expectedSchemaFile.exists()) [ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_36 $$ parameters.add("-outPrefix")[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_21 $$ parameters.add("-simple-content-types")[ CD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_6 $$ VirtualFile relativeFileDir[ CD ]
Line_4 $$ final String url = dialog.getUrl().getText()-->Line_38 $$ parameters.add(url)[ FD ]
Line_2 $$ private static void doAction(final Project project, final GenerateSchemaFromInstanceDocumentDialog dialog) -->Line_24 $$ String enumLimit = dialog.getEnumerationsLimit()[ CD ]
