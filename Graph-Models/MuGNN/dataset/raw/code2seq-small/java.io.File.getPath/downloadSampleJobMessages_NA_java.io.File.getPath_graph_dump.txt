Line_6 $$ StringBuilder reportFilesSB = new StringBuilder()-->Line_30 $$ properties.setProperty("top.level.report.files", reportFilesSB.toString())[ FD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_26 $$ jobCount++[ CD ]
Line_6 $$ StringBuilder reportFilesSB = new StringBuilder()-->Line_19 $$ reportFilesSB.append(" ")[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_28 $$ properties.setProperty("top.level.fail.count", String.valueOf(jobCount - passCount))[ CD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_17 $$ JenkinsResultsParserUtil.write(reportFile, "<h5 job-result=\\\"" + jsonObject.getString("result") + "\\\"><a href=\"" + urlString + "\">" + jobNameMatcher.group("jobName") + "</a></h5>" + project.getProperty("report.html.content"))[ CD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_12 $$ jobNameMatcher.find()[ CD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_29 $$ properties.setProperty("top.level.pass.count", String.valueOf(passCount))[ CD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_30 $$ properties.setProperty("top.level.report.files", reportFilesSB.toString())[ CD ]
Line_6 $$ StringBuilder reportFilesSB = new StringBuilder()-->Line_21 $$ reportFilesSB.append(reportFile.getPath())[ FD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_10 $$ String urlString = progressiveTextMatcher.group("url")[ CD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_11 $$ Matcher jobNameMatcher = _jobNamePattern.matcher(urlString)[ CD ]
Line_6 $$ StringBuilder reportFilesSB = new StringBuilder()-->Line_18 $$ if (reportFilesSB.length() > 0) [ FD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_14 $$ Project project = getProject(null, urlString, sampleDir.getPath())[ CD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_3 $$ gitHubJobMessageUtilTest.dependenciesDir = sampleDir[ CD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_7 $$ String content = JenkinsResultsParserUtil.toString(JenkinsResultsParserUtil.getLocalURL(progressiveTextURL))[ CD ]
Line_5 $$ int passCount = 0-->Line_29 $$ properties.setProperty("top.level.pass.count", String.valueOf(passCount))[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_28 $$ properties.setProperty("top.level.fail.count", String.valueOf(jobCount - passCount))[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_14 $$ Project project = getProject(null, urlString, sampleDir.getPath())[ FD ]
Line_13 $$ JSONObject jsonObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(urlString + "/api/json"))-->Line_22 $$ String result = jsonObject.getString("result")[ FD ]
Line_8 $$ Matcher progressiveTextMatcher = _progressiveTextPattern.matcher(content)-->Line_9 $$ while (progressiveTextMatcher.find()) [ FD ]
Line_10 $$ String urlString = progressiveTextMatcher.group("url")-->Line_14 $$ Project project = getProject(null, urlString, sampleDir.getPath())[ FD ]
Line_5 $$ int passCount = 0-->Line_24 $$ passCount++[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_8 $$ Matcher progressiveTextMatcher = _progressiveTextPattern.matcher(content)[ CD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_16 $$ File reportFile = new File(sampleDir, jobCount + "-report.html")[ CD ]
Line_10 $$ String urlString = progressiveTextMatcher.group("url")-->Line_11 $$ Matcher jobNameMatcher = _jobNamePattern.matcher(urlString)[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_30 $$ properties.setProperty("top.level.report.files", reportFilesSB.toString())[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_6 $$ StringBuilder reportFilesSB = new StringBuilder()[ CD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_18 $$ if (reportFilesSB.length() > 0) [ CD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_3 $$ gitHubJobMessageUtilTest.dependenciesDir = sampleDir[ FD ]
Line_14 $$ Project project = getProject(null, urlString, sampleDir.getPath())-->Line_15 $$ GitHubJobMessageUtil.getGitHubJobMessage(project)[ FD ]
Line_11 $$ Matcher jobNameMatcher = _jobNamePattern.matcher(urlString)-->Line_17 $$ JenkinsResultsParserUtil.write(reportFile, "<h5 job-result=\\\"" + jsonObject.getString("result") + "\\\"><a href=\"" + urlString + "\">" + jobNameMatcher.group("jobName") + "</a></h5>" + project.getProperty("report.html.content"))[ FD ]
Line_18 $$ if (reportFilesSB.length() > 0) -->Line_19 $$ reportFilesSB.append(" ")[ CD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_22 $$ String result = jsonObject.getString("result")[ CD ]
Line_13 $$ JSONObject jsonObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(urlString + "/api/json"))-->Line_17 $$ JenkinsResultsParserUtil.write(reportFile, "<h5 job-result=\\\"" + jsonObject.getString("result") + "\\\"><a href=\"" + urlString + "\">" + jobNameMatcher.group("jobName") + "</a></h5>" + project.getProperty("report.html.content"))[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_4 $$ int jobCount = 0[ CD ]
Line_22 $$ String result = jsonObject.getString("result")-->Line_23 $$ if (result.equals("SUCCESS")) [ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_7 $$ String content = JenkinsResultsParserUtil.toString(JenkinsResultsParserUtil.getLocalURL(progressiveTextURL))[ FD ]
Line_16 $$ File reportFile = new File(sampleDir, jobCount + "-report.html")-->Line_21 $$ reportFilesSB.append(reportFile.getPath())[ FD ]
Line_4 $$ int jobCount = 0-->Line_26 $$ jobCount++[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_9 $$ while (progressiveTextMatcher.find()) [ CD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_23 $$ if (result.equals("SUCCESS")) [ CD ]
Line_16 $$ File reportFile = new File(sampleDir, jobCount + "-report.html")-->Line_17 $$ JenkinsResultsParserUtil.write(reportFile, "<h5 job-result=\\\"" + jsonObject.getString("result") + "\\\"><a href=\"" + urlString + "\">" + jobNameMatcher.group("jobName") + "</a></h5>" + project.getProperty("report.html.content"))[ FD ]
Line_8 $$ Matcher progressiveTextMatcher = _progressiveTextPattern.matcher(content)-->Line_10 $$ String urlString = progressiveTextMatcher.group("url")[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_5 $$ int passCount = 0[ CD ]
Line_7 $$ String content = JenkinsResultsParserUtil.toString(JenkinsResultsParserUtil.getLocalURL(progressiveTextURL))-->Line_8 $$ Matcher progressiveTextMatcher = _progressiveTextPattern.matcher(content)[ FD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_13 $$ JSONObject jsonObject = JenkinsResultsParserUtil.toJSONObject(JenkinsResultsParserUtil.getLocalURL(urlString + "/api/json"))[ CD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_21 $$ reportFilesSB.append(reportFile.getPath())[ CD ]
Line_23 $$ if (result.equals("SUCCESS")) -->Line_24 $$ passCount++[ CD ]
Line_14 $$ Project project = getProject(null, urlString, sampleDir.getPath())-->Line_17 $$ JenkinsResultsParserUtil.write(reportFile, "<h5 job-result=\\\"" + jsonObject.getString("result") + "\\\"><a href=\"" + urlString + "\">" + jobNameMatcher.group("jobName") + "</a></h5>" + project.getProperty("report.html.content"))[ FD ]
Line_2 $$ protected void downloadSampleJobMessages(String progressiveTextURL, Properties properties, File sampleDir) throws Exception -->Line_29 $$ properties.setProperty("top.level.pass.count", String.valueOf(passCount))[ FD ]
Line_9 $$ while (progressiveTextMatcher.find()) -->Line_15 $$ GitHubJobMessageUtil.getGitHubJobMessage(project)[ CD ]
Line_11 $$ Matcher jobNameMatcher = _jobNamePattern.matcher(urlString)-->Line_12 $$ jobNameMatcher.find()[ FD ]
