Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_30 $$ Set<String> files = ReflectionTestUtil.getFieldValue(Class.forName("java.io.DeleteOnExitHook"), "files")[ CD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_5 $$ AutoDeleteFileInputStream autoRemoveFileInputStream = new AutoDeleteFileInputStream(tempFile)[ CD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_4 $$ Assert.assertTrue(tempFile.createNewFile())[ CD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_21 $$ Assert.assertTrue(tempFile.createNewFile())[ CD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_7 $$ SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() [ CD ]
Line_6 $$ final AtomicInteger checkDeleteCount = new AtomicInteger()-->Line_19 $$ Assert.assertEquals(1, checkDeleteCount.get())[ FD ]
Line_3 $$ File tempFile = new File("tempFile")-->Line_23 $$ Assert.assertTrue(tempFile.delete())[ FD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_19 $$ Assert.assertEquals(1, checkDeleteCount.get())[ CD ]
Line_3 $$ File tempFile = new File("tempFile")-->Line_21 $$ Assert.assertTrue(tempFile.createNewFile())[ FD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_3 $$ File tempFile = new File("tempFile")[ CD ]
Line_3 $$ File tempFile = new File("tempFile")-->Line_18 $$ Assert.assertFalse(tempFile.exists())[ FD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_23 $$ Assert.assertTrue(tempFile.delete())[ CD ]
Line_5 $$ AutoDeleteFileInputStream autoRemoveFileInputStream = new AutoDeleteFileInputStream(tempFile)-->Line_16 $$ autoRemoveFileInputStream.close()[ FD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_18 $$ Assert.assertFalse(tempFile.exists())[ CD ]
Line_3 $$ File tempFile = new File("tempFile")-->Line_31 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ FD ]
Line_7 $$ SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_9 $$ if (file.contains("tempFile")) [ CD ]
Line_9 $$ if (file.contains("tempFile")) -->Line_10 $$ checkDeleteCount.getAndIncrement()[ CD ]
Line_3 $$ File tempFile = new File("tempFile")-->Line_4 $$ Assert.assertTrue(tempFile.createNewFile())[ FD ]
Line_6 $$ final AtomicInteger checkDeleteCount = new AtomicInteger()-->Line_29 $$ Assert.assertEquals(2, checkDeleteCount.get())[ FD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_6 $$ final AtomicInteger checkDeleteCount = new AtomicInteger()[ CD ]
Line_3 $$ File tempFile = new File("tempFile")-->Line_28 $$ Assert.assertFalse(tempFile.exists())[ FD ]
Line_5 $$ AutoDeleteFileInputStream autoRemoveFileInputStream = new AutoDeleteFileInputStream(tempFile)-->Line_26 $$ autoRemoveFileInputStream.close()[ FD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_28 $$ Assert.assertFalse(tempFile.exists())[ CD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_29 $$ Assert.assertEquals(2, checkDeleteCount.get())[ CD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_31 $$ Assert.assertTrue(files.contains(tempFile.getPath()))[ CD ]
Line_6 $$ final AtomicInteger checkDeleteCount = new AtomicInteger()-->Line_20 $$ checkDeleteCount.set(0)[ FD ]
Line_7 $$ SwappableSecurityManager swappableSecurityManager = new SwappableSecurityManager() -->Line_9 $$ if (file.contains("tempFile")) [ FD ]
Line_2 $$ public void testAutoRemoveFileInputStream() throws Exception -->Line_20 $$ checkDeleteCount.set(0)[ CD ]
Line_6 $$ final AtomicInteger checkDeleteCount = new AtomicInteger()-->Line_10 $$ checkDeleteCount.getAndIncrement()[ FD ]
